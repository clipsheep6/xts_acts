From 4a40be6935a1fb641f8215ab8b4ee5e1b2f00294 Mon Sep 17 00:00:00 2001
From: h30043840 <h30043840@notesmail.huawei.com/>
Date: Thu, 29 Aug 2024 01:33:48 +0800
Subject: [PATCH] TicketNo: Description: Team: Feature or Bugfix: Binary
 Source: PrivateCode(Yes/No):

Change-Id: I58637a9d2d1b31f0760b91d27c42305296f309e8
---
 multimedia/BUILD.gn                           |  69 ------
 .../main/ets/test/AVPlayerLocalTest.test.js   | 211 ++++++++++++++++++
 2 files changed, 211 insertions(+), 69 deletions(-)

diff --git a/multimedia/BUILD.gn b/multimedia/BUILD.gn
index 3adea3143e..2491c1882a 100644
--- a/multimedia/BUILD.gn
+++ b/multimedia/BUILD.gn
@@ -17,76 +17,7 @@ group("multimedia") {
   testonly = true
   if (is_standard_system) {
     deps = [
-      "audio/audio_cpp_standard:ActsOpenslesNdkTest",
-      "audio/audio_js_standard/AudioCapturer:audio_capturer_js_hap",
-      "audio/audio_js_standard/AudioCapturerChangeInfo:audio_capturerchangeInfo_js_hap",
-      "audio/audio_js_standard/AudioCapturereEnhance:audio_capturer_enhance_ets_hap",
-      "audio/audio_js_standard/AudioEventManagement:audio_eventmanagement_js_hap",
-      "audio/audio_js_standard/AudioHaptic:audio_haptic_ets_hap",
-      "audio/audio_js_standard/AudioManagerEnhance:audio_manager_enhance_ets_hap",
-      "audio/audio_js_standard/AudioRendererChangeInfo:audio_rendererchangeInfo_js_hap",
-      "audio/audio_js_standard/AudioRendererEnhance:audio_render_enhance_ets_hap",
-      "audio/audio_js_standard/audioInterrupt:audio_interrupt_js_hap",
-      "audio/audio_js_standard/audioInterruptRender:audioRenderInterrupt",
-      "audio/audio_js_standard/audioManager:audio_manager_js_hap",
-      "audio/audio_js_standard/audioRenderer:audio_renderer_ets_hap",
-      "audio/audio_js_standard/audioVoip:audio_voip_js_hap",
-      "audio/audio_js_standard/audio_ndk_test:audioDemo_ndk_hap",
-      "audio/ohaudioNdktest:ActsOhaudioNdkTest",
-      "avsession/avsession_js_standard/avsessionManager:avsession_framework_js_hap",
-      "avsession/avsession_js_standard/avsessionVoiceCall:avsession_voicecall_js_hap",
-      "camera/camera_js_standard:camera_framework_ets_hap",
-      "camera/camera_picker_test:camera_picker_ets_hap",
-      "drm/drm_js_standard/avPlayer:drm_avplayer_js_hap",
-      "drm/drm_ndk_test:Drm_Framework_NDK_test",
-      "image/image_ets_standard/image:image_hap",
-      "image/image_ets_standard/imageDecodeOptionsYuvRaw:image_decode_options_yuv_raw_hap",
-      "image/image_ets_standard/imageExifGetModify:image_exif_get_modify_hap",
-      "image/image_ets_standard/imageFormatTranscoding:image_formattranscoding_hap",
-      "image/image_ets_standard/imageNdk:image_ndk_hap",
-      "image/image_ets_standard/imagePackerExif:image_packer_exif_hap",
-      "image/image_ets_standard/imagePixelMapSupportYuv:image_pixelmap_supportyuv_hap",
-      "image/image_ets_standard/imageQualityEnhancement:image_quality_enhancement_hap",
-      "image/image_js_standard/image:image_js_hap",
-      "image/image_js_standard/imageColorSpaceTransfer:image_colorspace_transfer_hap",
-      "image/image_js_standard/imageColorspace:image_colorspace_js_hap",
-      "image/image_js_standard/imageCreator:image_creator_js_hap",
-      "image/image_js_standard/imageDecodeOptions:image_DecodeOptions_js_hap",
-      "image/image_js_standard/imageExif:image_exif_js_hap",
-      "image/image_js_standard/imageGetImageProperty:image_getProperty_js_hap",
-      "image/image_js_standard/imageGif:image_gif_js_hap",
-      "image/image_js_standard/imageModifyProperty:image_modifyProperty_js_hap",
-      "image/image_js_standard/imagePackToFile:image_pack_to_file_js_hap",
-      "image/image_js_standard/imagePacking:image_packing_js_hap",
-      "image/image_js_standard/imagePackingNDK:image_packing_ndk_js_hap",
-      "image/image_js_standard/imagePixelMapFramework:image_pixelmapframework_js_hap",
-      "image/image_js_standard/imagePixelMapNDK:image_pixel_map_ndk_js_hap",
-      "image/image_js_standard/imageRGBA:image_rgba_js_hap",
-      "image/image_js_standard/imageRaw:image_raw_js_hap",
-      "image/image_js_standard/imageReceiver:image_receiver_js_hap",
-      "image/image_js_standard/imageReceiverMultiThread:image_receiver_multi_thread_hap",
-      "image/image_js_standard/imageReceiverNDK:image_receiver_ndk_js_hap",
-      "image/image_js_standard/imageSourceNDK:image_source_ndk_js_hap",
-      "image/image_js_standard/imageSvg:image_svg_js_hap",
-      "image/image_js_standard/imageWebp:image_webp_js_hap",
-      "image/image_js_standard/imageYUV:image_yuv_js_hap",
-      "image/image_js_standard/image_ndk_test:image_pixelmap_ndk_hap",
-      "image_effect/OHImageEffectNDK:ActsMediaImageEffectNDKTest",
-      "media/media_cpp_standard:ActsAvcodecNdkTest",
-      "media/media_js_standard/audioPlayer:audio_player_js_hap",
-      "media/media_js_standard/audioRecorder:audio_recorder_js_hap",
-      "media/media_js_standard/avImageGenerator:av_image_generator_ets_hap",
       "media/media_js_standard/avPlayer:avplayer_js_hap",
-      "media/media_js_standard/avPlayerNdk:ActsAVPlayerNdkTest",
-      "media/media_js_standard/avRecorder:av_recorder_js_hap",
-      "media/media_js_standard/avScreenCaptureRecorder:av_screen_capture_recorder_js_hap",
-      "media/media_js_standard/avplayeraudiondk:avplayer_audio_ndk_ets_hap",
-      "media/media_js_standard/recorderFormat:recorder_format_js_hap",
-      "media/media_js_standard/screenCapture_ndk_test:ActsNativeAVScreenCaptureTest",
-      "media/media_js_standard/soundPool:soundpool_js_hap",
-      "media/media_js_standard/videoPlayer:video_player_js_hap",
-      "photoAccess/photoAccess:photoAccess_js_hap",
-      "photoAccess/pickerView:TextPickerTest",
     ]
   } else {
     deps = [
diff --git a/multimedia/media/media_js_standard/avPlayer/entry/src/main/ets/test/AVPlayerLocalTest.test.js b/multimedia/media/media_js_standard/avPlayer/entry/src/main/ets/test/AVPlayerLocalTest.test.js
index 22effa35ad..7fa72ca5dd 100644
--- a/multimedia/media/media_js_standard/avPlayer/entry/src/main/ets/test/AVPlayerLocalTest.test.js
+++ b/multimedia/media/media_js_standard/avPlayer/entry/src/main/ets/test/AVPlayerLocalTest.test.js
@@ -334,6 +334,157 @@ export default function AVPlayerLocalTest() {
                 }
             })
         }
+
+        async function setPlaybackStrategy(avPlayer, done) {
+            let surfaceID = globalThis.value;
+            let playbackStrategy = { mutedMediaType: media.MediaType.MEDIA_TYPE_AUD }
+            let pauseCount = 0
+            avPlayer.on('stateChange', async (state, reason) => {
+                switch (state) {
+                    case AV_PLAYER_STATE.INITIALIZED:
+                        console.info(`winddraw case AV_PLAYER_STATE.INITIALIZED`);
+                        avPlayer.surfaceId = surfaceID;
+                        console.info(`winddraw surfaceId done`)
+                        avPlayer.setPlaybackStrategy(playbackStrategy).catch((error) => {
+                            console.error(`setPlaybackStrategy failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        avPlayer.prepare().catch((error) => {
+                            console.error(`prepare failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.PREPARED:
+                        avPlayer.setPlaybackStrategy(playbackStrategy).then(() => {
+                            console.error(`setPlaybackStrategy unexpectedly success, state ${state}`)
+                            expect().assertFail();
+                        }).catch((error) => { console.info('prepared setPlaybackStrategy failed, expected') })
+                        avPlayer.play().catch(error => {
+                            console.error(`play failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.PLAYING:
+                        avPlayer.setPlaybackStrategy(playbackStrategy).then(() => {
+                            console.error(`setPlaybackStrategy unexpectedly success, state ${state}`)
+                            expect().assertFail();
+                        }).catch((error) => { console.info('playing setPlaybackStrategy failed, expected') })
+                        if (pauseCount++ == 0) {
+                            avPlayer.pause().then(() => { pauseCount++ }).catch(error => {
+                                console.error(`pause failed err code ${error.code} msg %{error.message}`)
+                                expect().assertFail();
+                            })
+                        }
+                        break;
+                    case AV_PLAYER_STATE.PAUSED:
+                        avPlayer.setPlaybackStrategy(playbackStrategy).then(() => {
+                            console.error(`setPlaybackStrategy unexpectedly success, state ${state}`)
+                            expect().assertFail();
+                        }).catch((error) => { console.info('paused setPlaybackStrategy failed, expected') })
+                        avPlayer.play().catch(error => {
+                            console.error(`play failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.COMPLETED:
+                        avPlayer.setPlaybackStrategy(playbackStrategy).then(() => {
+                            console.error(`setPlaybackStrategy unexpectedly success, state ${state}`)
+                            expect().assertFail();
+                        }).catch((error) => { console.info('prepared setPlaybackStrategy failed, expected') })
+                        avPlayer.release().catch(error => {
+                            console.error(`stop failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.RELEASED:
+                        avPlayer = null;
+                        done();
+                        break;
+                    case AV_PLAYER_STATE.ERROR:
+                        expect().assertFail();
+                        avPlayer.release().then(() => {},
+                            mediaTestBase.failureCallback).catch(mediaTestBase.catchCallback);
+                        avPlayer = null;
+                        break;
+                    default:
+                        break;
+                }
+            })
+        }
+
+        async function setMediaMuted(avPlayer, done) {
+            let surfaceID = globalThis.value;
+            let audio = media.MediaType.MEDIA_TYPE_AUD
+            let pauseCount = 0
+            let stateChangeCallback = async (state, reason) => {
+                switch (state) {
+                    case AV_PLAYER_STATE.INITIALIZED:
+                        avPlayer.surfaceId = surfaceID;
+                        avPlayer.prepare().catch((error) => {
+                            console.error(`prepare failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.PREPARED:
+                        avPlayer.setMediaMuted(audio, true).catch((error) => {
+                            console.error(`setMediaMuted failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        avPlayer.play().catch(error => {
+                            console.error(`play failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.PLAYING:
+                        avPlayer.setMediaMuted(audio, true).catch((error) => {
+                            console.error(`setMediaMuted failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        if (pauseCount++ > 0) {
+                            break
+                        }
+                        avPlayer.pause().catch(error => {
+                            console.error(`pause failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.PAUSED:
+                        avPlayer.setMediaMuted(audio, true).catch((error) => {
+                            console.error(`setMediaMuted failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        avPlayer.play().catch(error => {
+                            console.error(`play failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.COMPLETED:
+                        avPlayer.setMediaMuted(audio, true).catch((error) => {
+                            console.error(`setMediaMuted failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        avPlayer.release().catch(error => {
+                            console.error(`stop failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.RELEASED:
+                        avPlayer = null;
+                        done();
+                        break;
+                    case AV_PLAYER_STATE.ERROR:
+                        expect().assertFail();
+                        avPlayer.release().then(() => {},
+                            mediaTestBase.failureCallback).catch(mediaTestBase.catchCallback);
+                        avPlayer = null;
+                        break;
+                    default:
+                        break;
+                }
+            }
+            avPlayer.on('stateChange', stateChangeCallback)
+        }
+
         async function testOffCallback(src, avPlayer, done) {
             console.info(`case media source: ${src}`)
             media.createAVPlayer((err, video) => {
@@ -371,6 +522,42 @@ export default function AVPlayerLocalTest() {
             });
         }
 
+        async function testSetPlaybackStrategy(src, avPlayer, done) {
+            console.info(`case media source: ${src}`)
+            media.createAVPlayer((err, video) => {
+                console.info(`case media err: ${err}`)
+                if (typeof (video) !== 'undefined') {
+                    console.info('case createAVPlayer success');
+                    avPlayer = video;
+                    setPlaybackStrategy(avPlayer, done)
+                    setSource(avPlayer, src);
+                }
+                if (err != null) {
+                    console.error(`case createAVPlayer error, errMessage is ${err.message}`);
+                    expect().assertFail();
+                    done();
+                }
+            });
+        }
+
+        async function testSetMediaMuted(src, avPlayer, done) {
+            console.info(`case media source: ${src}`)
+            media.createAVPlayer((err, video) => {
+                console.info(`case media err: ${err}`)
+                if (typeof (video) !== 'undefined') {
+                    console.info('case createAVPlayer success');
+                    avPlayer = video;
+                    setMediaMuted(avPlayer, done)
+                    setSource(avPlayer, src);
+                }
+                if (err != null) {
+                    console.error(`case createAVPlayer error, errMessage is ${err.message}`);
+                    expect().assertFail();
+                    done();
+                }
+            });
+        }
+
         /* *
             * @tc.number    : SUB_MULTIMEDIA_MEDIA_VIDEO_PLAYER_FDSRC_0100
             * @tc.name      : 001.test fdsrc
@@ -485,5 +672,29 @@ export default function AVPlayerLocalTest() {
         it('SUB_MULTIMEDIA_MEDIA_VIDEO_SUBTILE_0200', 0, async function (done) {
             testSubtitle(fileDescriptor, `fd://${subtitleFdSrc.fd}`, avPlayer, done);
         })
+
+        /* *
+            * @tc.number    : SUB_MULTIMEDIA_MEDIA_VIDEO_SET_PLAYBACK_STRATEGY_0100
+            * @tc.name      : 001.test setPlaybackStrategy Function
+            * @tc.desc      : Local Video subtitle control test
+            * @tc.size      : MediumTest
+            * @tc.type      : Function test
+            * @tc.level     : Level1
+        */
+        it('SUB_MULTIMEDIA_MEDIA_VIDEO_SET_PLAYBACK_STRATEGY_0100', 0, async function (done) {
+            testSetPlaybackStrategy(fileDescriptor, avPlayer, done);
+        })
+
+        /* *
+            * @tc.number    : SUB_MULTIMEDIA_MEDIA_VIDEO_MUTE_0100
+            * @tc.name      : 001.test setMediaMuted Function
+            * @tc.desc      : Local Video subtitle control test
+            * @tc.size      : MediumTest
+            * @tc.type      : Function test
+            * @tc.level     : Level1
+        */
+        it('SUB_MULTIMEDIA_MEDIA_VIDEO_MUTE_0100', 0, async function (done) {
+            testSetMediaMuted(fileDescriptor, avPlayer, done);
+        })
     })
 }
-- 
2.45.2.huawei.5

