/*
 * Copyright (C) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import cryptoFramework from '@ohos.security.cryptoFramework';


interface mdVectorSpec {
  index: number;
  vectorSource: string;
  plainText: string;
  expectDigest: number[];
}

interface mdVectorData {
  algName: string;
  mdVectorSpec: mdVectorSpec[];
}

interface macSpec {
  macAlgName: string;
}

interface macVectorSpec {
  index: number;
  vectorSource: string;
  key: number[];
  plainText: string;
  expectMac: number[];
}

interface macVectorData extends macSpec {
  algName: string;
  macVectorSpec: macVectorSpec[];
}

interface kdfSpec {
  kdfAlgName: string;
}

interface pbkdf2VectorSpec {
  index: number;
  vectorSource: string;
  password: number[];
  salt: number[];
  iterations: number;
  keySize: number;
  expectKdf: number[];
}

interface pbkdf2VectorData extends kdfSpec {
  algName: string;
  kdfVectorSpec: pbkdf2VectorSpec[];
}

interface hkdfVectorSpec {
  index: number;
  vectorSource: string;
  key: number[];
  salt: number[];
  info: number[];
  keySize: number;
  expectKdf: number[];
}

interface hkdfVectorData extends kdfSpec {
  algName: string;
  kdfVectorSpec: hkdfVectorSpec[];
}

function numberArrayToDataBlob(data: number[]): cryptoFramework.DataBlob {
  try {
    return {
      data: new Uint8Array(data)
    }
  } catch (error) {
    console.error('error code: ' + error.code + " errorMsg " + error.message);
    throw error as Error;
  }
}

function uint8ArrayToDataBlob(data: Uint8Array): cryptoFramework.DataBlob {
  try {
    return {
      data: data
    }
  } catch (error) {
    console.error('error code: ' + error.code + " errorMsg " + error.message);
    throw error as Error;
  }
}

async function convertSymKey(algName: string, vector: macVectorSpec): Promise<cryptoFramework.SymKey> {
  try {
    let symGenerator: cryptoFramework.SymKeyGenerator = cryptoFramework.createSymKeyGenerator(algName);
    let keyDataBlob: cryptoFramework.DataBlob = numberArrayToDataBlob(vector.key);
    let symKey: cryptoFramework.SymKey = await symGenerator.convertKey(keyDataBlob);

    return symKey;
  } catch (error) {
    console.error('error code: ' + error.code + " errorMsg " + error.message);
    throw error as Error;
  }
}

function getKdfSpec(password: number[], salt: number[], iterations: number, keySize: number) {
  try {
    let spec: cryptoFramework.PBKDF2Spec = {
      algName: "PBKDF2",
      password: new Uint8Array(password),
      salt: new Uint8Array(salt),
      iterations: iterations,
      keySize: keySize
    }

    return spec;
  } catch (error) {
    console.error(`“${error}“, error code: ${error.code}`);
    throw error as Error;
  }
}

function getHkdfSpec(key: number[], salt: number[], info: number[], keySize: number): cryptoFramework.HKDFSpec {
  try {
    let spec: cryptoFramework.HKDFSpec = {
      algName: "HKDF",
      key: new Uint8Array(key),
      salt: new Uint8Array(salt),
      info: new Uint8Array(info),
      keySize: keySize
    };

    return spec;
  } catch (error) {
    console.error(`“${error}“, error code: ${error.code}`);
    throw error as Error;
  }
}

let hkdfVectors: hkdfVectorData[] = [
  {
    kdfAlgName: "HKDF",
    algName: "SHA1",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "RFC5869",
        key: [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b],
        salt: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c],
        info: [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9],
        keySize: 42,
        expectKdf: [
          0x08, 0x5a, 0x01, 0xea, 0x1b, 0x10, 0xf3, 0x69, 0x33, 0x06, 0x8b, 0x56, 0xef, 0xa5, 0xad, 0x81,
          0xa4, 0xf1, 0x4b, 0x82, 0x2f, 0x5b, 0x09, 0x15, 0x68, 0xa9, 0xcd, 0xd4, 0xf1, 0x55, 0xfd, 0xa2,
          0xc2, 0x2e, 0x42, 0x24, 0x78, 0xd3, 0x05, 0xf3, 0xf8, 0x96
        ],
      },
    ]
  },
  {
    kdfAlgName: "HKDF",
    algName: "SHA224",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "HiTLS",
        key: [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b],
        salt: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c],
        info: [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9],
        keySize: 32,
        expectKdf: [
          0x7f, 0xc8, 0xae, 0x03, 0x35, 0xed, 0x46, 0x8c, 0xef, 0x56, 0xbe, 0x09, 0x1f, 0x64, 0x78, 0xa1,
          0xaa, 0xe8, 0x4c, 0x0d, 0xa5, 0x4c, 0xe5, 0x17, 0x6a, 0xa3, 0x89, 0x46, 0xc7, 0x9e, 0x21, 0x0e
        ],
      },
    ]
  },
  {
    kdfAlgName: "HKDF",
    algName: "SHA256",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "RFC5869",
        key: [
          0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
          0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b
        ],
        salt: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c],
        info: [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9],
        keySize: 42,
        expectKdf: [
          0x3c, 0xb2, 0x5f, 0x25, 0xfa, 0xac, 0xd5, 0x7a, 0x90, 0x43, 0x4f, 0x64, 0xd0, 0x36, 0x2f, 0x2a,
          0x2d, 0x2d, 0x0a, 0x90, 0xcf, 0x1a, 0x5a, 0x4c, 0x5d, 0xb0, 0x2d, 0x56, 0xec, 0xc4, 0xc5, 0xbf,
          0x34, 0x00, 0x72, 0x08, 0xd5, 0xb8, 0x87, 0x18, 0x58, 0x65
        ],
      },
    ]
  },
  {
    kdfAlgName: "HKDF",
    algName: "SHA384",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "HiTLS",
        key: [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b],
        salt: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c],
        info: [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9],
        keySize: 32,
        expectKdf: [
          0xfb, 0x7e, 0x67, 0x43, 0xeb, 0x42, 0xcd, 0xe9, 0x6f, 0x1b, 0x70, 0x77, 0x89, 0x52, 0xab, 0x75,
          0x48, 0xca, 0xfe, 0x53, 0x24, 0x9f, 0x7f, 0xfe, 0x14, 0x97, 0xa1, 0x63, 0x5b, 0x20, 0x1f, 0xf1
        ],
      },
    ]
  },
  {
    kdfAlgName: "HKDF",
    algName: "SHA512",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "HiTLS",
        key: [0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b],
        salt: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c],
        info: [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9],
        keySize: 32,
        expectKdf: [
          0x74, 0x13, 0xe8, 0x99, 0x7e, 0x02, 0x06, 0x10, 0xfb, 0xf6, 0x82, 0x3f, 0x2c, 0xe1, 0x4b, 0xff,
          0x01, 0x87, 0x5d, 0xb1, 0xca, 0x55, 0xf6, 0x8c, 0xfc, 0xf3, 0x95, 0x4d, 0xc8, 0xaf, 0xf5, 0x35
        ],
      },
    ]
  },
  {
    kdfAlgName: "HKDF",
    algName: "SM3",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "HiTLS",
        key: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08],
        salt: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08],
        info: [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08],
        keySize: 16,
        expectKdf: [
          0xeb, 0xa1, 0x72, 0x2b, 0xd7, 0x9d, 0x3d, 0x00, 0x1e, 0xf1, 0x58, 0x2a, 0xd2, 0x3f, 0xf8, 0xda
        ],
      },
    ]
  },
]

let pbkdf2Vectors: pbkdf2VectorData[] = [
  {
    kdfAlgName: "PBKDF2",
    algName: "SHA1",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "RFC6070",
        password: [0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64],
        salt: [0x73, 0x61, 0x6c, 0x74],
        iterations: 2,
        keySize: 20,
        expectKdf: [
          0xea, 0x6c, 0x01, 0x4d, 0xc7, 0x2d, 0x6f, 0x8c, 0xcd, 0x1e, 0xd9, 0x2a, 0xce, 0x1d, 0x41, 0xf0,
          0xd8, 0xde, 0x89, 0x57
        ],
      }
    ]
  },
  {
    kdfAlgName: "PBKDF2",
    algName: "SHA224",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "HiTLS",
        password: [0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64],
        salt: [0x73, 0x61, 0x6c, 0x74],
        iterations: 1,
        keySize: 20,
        expectKdf: [
          0x3c, 0x19, 0x8c, 0xbd, 0xb9, 0x46, 0x4b, 0x78, 0x57, 0x96, 0x6b, 0xd0, 0x5b, 0x7b, 0xc9, 0x2b,
          0xc1, 0xcc, 0x4e, 0x6e
        ],
      }
    ]
  },
  {
    kdfAlgName: "PBKDF2",
    algName: "SHA256",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "RFC7914",
        password: [0x70, 0x61, 0x73, 0x73, 0x77, 0x64],
        salt: [0x73, 0x61, 0x6c, 0x74],
        iterations: 1,
        keySize: 64,
        expectKdf: [
          0x55, 0xac, 0x04, 0x6e, 0x56, 0xe3, 0x08, 0x9f, 0xec, 0x16, 0x91, 0xc2, 0x25, 0x44, 0xb6, 0x05,
          0xf9, 0x41, 0x85, 0x21, 0x6d, 0xde, 0x04, 0x65, 0xe6, 0x8b, 0x9d, 0x57, 0xc2, 0x0d, 0xac, 0xbc,
          0x49, 0xca, 0x9c, 0xcc, 0xf1, 0x79, 0xb6, 0x45, 0x99, 0x16, 0x64, 0xb3, 0x9d, 0x77, 0xef, 0x31,
          0x7c, 0x71, 0xb8, 0x45, 0xb1, 0xe3, 0x0b, 0xd5, 0x09, 0x11, 0x20, 0x41, 0xd3, 0xa1, 0x97, 0x83
        ],
      }
    ]
  },
  {
    kdfAlgName: "PBKDF2",
    algName: "SHA384",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "HiTLS",
        password: [0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64],
        salt: [0x73, 0x61, 0x6c, 0x74],
        iterations: 1,
        keySize: 20,
        expectKdf: [
          0xc0, 0xe1, 0x4f, 0x06, 0xe4, 0x9e, 0x32, 0xd7, 0x3f, 0x9f, 0x52, 0xdd, 0xf1, 0xd0, 0xc5, 0xc7,
          0x19, 0x16, 0x09, 0x23
        ],
      }
    ]
  },
  {
    kdfAlgName: "PBKDF2",
    algName: "SHA512",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "HiTLS",
        password: [0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64],
        salt: [0x73, 0x61, 0x6c, 0x74],
        iterations: 1,
        keySize: 20,
        expectKdf: [
          0x86, 0x7f, 0x70, 0xcf, 0x1a, 0xde, 0x02, 0xcf, 0xf3, 0x75, 0x25, 0x99, 0xa3, 0xa5, 0x3d, 0xc4,
          0xaf, 0x34, 0xc7, 0xa6
        ],
      }
    ]
  },
  {
    kdfAlgName: "PBKDF2",
    algName: "SM3",
    kdfVectorSpec: [
      {
        index: 0,
        vectorSource: "HiTLS",
        password: [0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64],
        salt: [0x73, 0x61, 0x6c, 0x74],
        iterations: 10000,
        keySize: 20,
        expectKdf: [
          0x73, 0x8c, 0x8c, 0x43, 0x23, 0x72, 0xd9, 0x8a, 0x73, 0x35, 0x0b, 0xc2, 0x52, 0x20, 0x9e, 0x4c,
          0xf2, 0xac, 0xdd, 0xe7
        ],
      }
    ]
  },
]

let hmacVectors: macVectorData[] = [
  {
    macAlgName: "HMAC",
    algName: "MD5",
    macVectorSpec: [
      {
        index: 0,
        vectorSource: 'RFC2104',
        key: [
          0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b
        ],
        plainText: 'Hi There',
        expectMac: [
          0x92, 0x94, 0x72, 0x7a, 0x36, 0x38, 0xbb, 0x1c, 0x13, 0xf4, 0x8e, 0xf8, 0x15, 0x8b, 0xfc, 0x9d
        ]
      },
    ]
  },
  {
    macAlgName: "HMAC",
    algName: "SHA1",
    macVectorSpec: [
      {
        index: 0,
        vectorSource: 'RFC2202',
        key: [
          0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
          0x0b, 0x0b, 0x0b, 0x0b
        ],
        plainText: 'Hi There',
        expectMac: [
          0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64, 0xe2, 0x8b, 0xc0, 0xb6, 0xfb, 0x37, 0x8c, 0x8e,
          0xf1, 0x46, 0xbe, 0x00
        ]
      },
    ]
  },
  {
    macAlgName: "HMAC",
    algName: "SHA224",
    macVectorSpec: [
      {
        index: 0,
        vectorSource: 'RFC6234',
        key: [
          0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
          0x0b, 0x0b, 0x0b, 0x0b
        ],
        plainText: 'Hi There',
        expectMac: [
          0x89, 0x6F, 0xB1, 0x12, 0x8A, 0xBB, 0xDF, 0x19, 0x68, 0x32, 0x10, 0x7C, 0xD4, 0x9D, 0xF3, 0x3F,
          0x47, 0xB4, 0xB1, 0x16, 0x99, 0x12, 0xBA, 0x4F, 0x53, 0x68, 0x4B, 0x22
        ]
      },
    ]
  },
  {
    macAlgName: "HMAC",
    algName: "SHA256",
    macVectorSpec: [
      {
        index: 0,
        vectorSource: 'RFC6234',
        key: [
          0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
          0x0b, 0x0b, 0x0b, 0x0b
        ],
        plainText: 'Hi There',
        expectMac: [
          0xB0, 0x34, 0x4C, 0x61, 0xD8, 0xDB, 0x38, 0x53, 0x5C, 0xA8, 0xAF, 0xCE, 0xAF, 0x0B, 0xF1, 0x2B,
          0x88, 0x1D, 0xC2, 0x00, 0xC9, 0x83, 0x3D, 0xA7, 0x26, 0xE9, 0x37, 0x6C, 0x2E, 0x32, 0xCF, 0xF7
        ]
      },
    ]
  },
  {
    macAlgName: "HMAC",
    algName: "SHA384",
    macVectorSpec: [
      {
        index: 0,
        vectorSource: 'RFC6234',
        key: [
          0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
          0x0b, 0x0b, 0x0b, 0x0b
        ],
        plainText: 'Hi There',
        expectMac: [
          0xAF, 0xD0, 0x39, 0x44, 0xD8, 0x48, 0x95, 0x62, 0x6B, 0x08, 0x25, 0xF4, 0xAB, 0x46, 0x90, 0x7F,
          0x15, 0xF9, 0xDA, 0xDB, 0xE4, 0x10, 0x1E, 0xC6, 0x82, 0xAA, 0x03, 0x4C, 0x7C, 0xEB, 0xC5, 0x9C,
          0xFA, 0xEA, 0x9E, 0xA9, 0x07, 0x6E, 0xDE, 0x7F, 0x4A, 0xF1, 0x52, 0xE8, 0xB2, 0xFA, 0x9C, 0xB6
        ]
      },
    ]
  },
  {
    macAlgName: "HMAC",
    algName: "SHA512",
    macVectorSpec: [
      {
        index: 0,
        vectorSource: 'RFC6234',
        key: [
          0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
          0x0b, 0x0b, 0x0b, 0x0b
        ],
        plainText: 'Hi There',
        expectMac: [
          0x87, 0xAA, 0x7C, 0xDE, 0xA5, 0xEF, 0x61, 0x9D, 0x4F, 0xF0, 0xB4, 0x24, 0x1A, 0x1D, 0x6C, 0xB0,
          0x23, 0x79, 0xF4, 0xE2, 0xCE, 0x4E, 0xC2, 0x78, 0x7A, 0xD0, 0xB3, 0x05, 0x45, 0xE1, 0x7C, 0xDE,
          0xDA, 0xA8, 0x33, 0xB7, 0xD6, 0xB8, 0xA7, 0x02, 0x03, 0x8B, 0x27, 0x4E, 0xAE, 0xA3, 0xF4, 0xE4,
          0xBE, 0x9D, 0x91, 0x4E, 0xEB, 0x61, 0xF1, 0x70, 0x2E, 0x69, 0x6C, 0x20, 0x3A, 0x12, 0x68, 0x54
        ]
      },
    ]
  },
  {
    macAlgName: "HMAC",
    algName: "SM3",
    macVectorSpec: [
      {
        index: 0,
        vectorSource: 'HiTLS',
        key: [
          0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
          0x0b, 0x0b, 0x0b, 0x0b
        ],
        plainText: 'Hi There',
        expectMac: [
          0x51, 0xb0, 0x0d, 0x1f, 0xb4, 0x98, 0x32, 0xbf, 0xb0, 0x1c, 0x3c, 0xe2, 0x78, 0x48, 0xe5, 0x9f,
          0x87, 0x1d, 0x9b, 0xa9, 0x38, 0xdc, 0x56, 0x3b, 0x33, 0x8c, 0xa9, 0x64, 0x75, 0x5c, 0xce, 0x70
        ]
      },
    ]
  },
]

let digestVectors: mdVectorData[] = [
  {
    algName: "MD5",
    mdVectorSpec: [
      {
        index: 0,
        vectorSource: "RFC1321",
        plainText: "abcdefghijklmnopqrstuvwxyz",
        expectDigest: [
          0xc3, 0xfc, 0xd3, 0xd7, 0x61, 0x92, 0xe4, 0x00, 0x7d, 0xfb, 0x49, 0x6c, 0xca, 0x67, 0xe1, 0x3b
        ]
      }
    ]
  },
  {
    algName: "SHA1",
    mdVectorSpec: [
      {
        index: 0,
        vectorSource: "RFC3174",
        plainText: "abc",
        expectDigest: [
          0xA9, 0x99, 0x3E, 0x36, 0x47, 0x06, 0x81, 0x6A, 0xBA, 0x3E, 0x25, 0x71, 0x78, 0x50, 0xC2, 0x6C,
          0x9C, 0xD0, 0xD8, 0x9D
        ]
      }
    ]
  },
  {
    algName: "SHA224",
    mdVectorSpec: [
      {
        index: 0,
        vectorSource: "RFC3874",
        plainText: "abc",
        expectDigest: [
          0x23, 0x09, 0x7d, 0x22, 0x34, 0x05, 0xd8, 0x22, 0x86, 0x42, 0xa4, 0x77, 0xbd, 0xa2, 0x55, 0xb3,
          0x2a, 0xad, 0xbc, 0xe4, 0xbd, 0xa0, 0xb3, 0xf7, 0xe3, 0x6c, 0x9d, 0xa7
        ]
      }
    ]
  },
  {
    algName: "SHA256",
    mdVectorSpec: [
      {
        index: 0,
        vectorSource: "RFC6234",
        plainText: "abc",
        expectDigest: [
          0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA, 0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23,
          0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C, 0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD
        ]
      }
    ]
  },
  {
    algName: "SHA384",
    mdVectorSpec: [
      {
        index: 0,
        vectorSource: "RFC6234",
        plainText: "abc",
        expectDigest: [
          0xCB, 0x00, 0x75, 0x3F, 0x45, 0xA3, 0x5E, 0x8B, 0xB5, 0xA0, 0x3D, 0x69, 0x9A, 0xC6, 0x50, 0x07,
          0x27, 0x2C, 0x32, 0xAB, 0x0E, 0xDE, 0xD1, 0x63, 0x1A, 0x8B, 0x60, 0x5A, 0x43, 0xFF, 0x5B, 0xED,
          0x80, 0x86, 0x07, 0x2B, 0xA1, 0xE7, 0xCC, 0x23, 0x58, 0xBA, 0xEC, 0xA1, 0x34, 0xC8, 0x25, 0xA7
        ]
      }
    ]
  },
  {
    algName: "SHA512",
    mdVectorSpec: [
      {
        index: 0,
        vectorSource: "RFC6234",
        plainText: "abc",
        expectDigest: [
          0xDD, 0xAF, 0x35, 0xA1, 0x93, 0x61, 0x7A, 0xBA, 0xCC, 0x41, 0x73, 0x49, 0xAE, 0x20, 0x41, 0x31,
          0x12, 0xE6, 0xFA, 0x4E, 0x89, 0xA9, 0x7E, 0xA2, 0x0A, 0x9E, 0xEE, 0xE6, 0x4B, 0x55, 0xD3, 0x9A,
          0x21, 0x92, 0x99, 0x2A, 0x27, 0x4F, 0xC1, 0xA8, 0x36, 0xBA, 0x3C, 0x23, 0xA3, 0xFE, 0xEB, 0xBD,
          0x45, 0x4D, 0x44, 0x23, 0x64, 0x3C, 0xE8, 0x0E, 0x2A, 0x9A, 0xC9, 0x4F, 0xA5, 0x4C, 0xA4, 0x9F
        ]
      }
    ]
  },
  {
    algName: "SM3",
    mdVectorSpec: [
      {
        index: 0,
        vectorSource: "GMT 0004-2012 SM3密码杂凑算法",
        plainText: "abc",
        expectDigest: [
          0x66, 0xc7, 0xf0, 0xf4, 0x62, 0xee, 0xed, 0xd9, 0xd1, 0xf2, 0xd4, 0x6b, 0xdc, 0x10, 0xe4, 0xe2,
          0x41, 0x67, 0xc4, 0x87, 0x5c, 0xf2, 0xf7, 0xa2, 0x29, 0x7d, 0xa0, 0x2b, 0x8f, 0x4b, 0xa8, 0xe0
        ]
      }
    ]
  },
]

export {
  mdVectorSpec,
  mdVectorData,
  macVectorData,
  hmacVectors,
  pbkdf2VectorData,
  pbkdf2Vectors,
  hkdfVectors,
  hkdfVectorData,
  getKdfSpec,
  getHkdfSpec,
  convertSymKey,
  numberArrayToDataBlob,
  uint8ArrayToDataBlob,
  digestVectors
}