/*
 * Copyright (C) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import cryptoFramework from '@ohos.security.cryptoFramework'

interface dataKeyPair {
  dataPubKey: cryptoFramework.DataBlob;
  dataPriKey: cryptoFramework.DataBlob
}

interface dataStyle {
  dataPubKey: string;
  dataPriKey: string
}

async function generateRfc5915KeyPair(algName: string): Promise<cryptoFramework.KeyPair> {
  try {
    let cipher: cryptoFramework.AsyKeyGenerator = cryptoFramework.createAsyKeyGenerator(algName);
    let keyPair: cryptoFramework.KeyPair = await cipher.generateKeyPair();

    return keyPair;
  } catch (error) {
    console.error(`generateRfc5915KeyPair “${error}“, error code: ${error.code}`);
    throw error as Error;
  }
}

async function generateRfc5915KeyPairEncoded(algName: string): Promise<dataKeyPair> {
  try {
    let cipher: cryptoFramework.AsyKeyGenerator = cryptoFramework.createAsyKeyGenerator(algName);
    let keyPair: cryptoFramework.KeyPair = await cipher.generateKeyPair();
    let convertPubKey: cryptoFramework.DataBlob = keyPair.pubKey.getEncoded();
    let convertPriKey: cryptoFramework.DataBlob = keyPair.priKey.getEncoded();

    return {dataPubKey: convertPubKey, dataPriKey: convertPriKey};
  } catch (error) {
    console.error(`generateRfc5915KeyPairEncoded “${error}“, error code: ${error.code}`);
    throw error as Error;
  }
}

async function convertDataKeyPairToKeyPair(algName: string, data: dataKeyPair): Promise<cryptoFramework.KeyPair> {
  try {
    let cipher: cryptoFramework.AsyKeyGenerator = cryptoFramework.createAsyKeyGenerator(algName);
    let keyPair: cryptoFramework.KeyPair = await cipher.convertKey(data.dataPubKey, data.dataPriKey);

    return keyPair;
  } catch (error) {
    console.error(`convertDataKeyPairToKeyPair “${error}“, error code: ${error.code}`);
    throw error as Error;
  }
}

async function generateRfc5208KeyPair(algName: string, dataKeyPair: dataKeyPair) {
  try {
    let cipher: cryptoFramework.AsyKeyGenerator = cryptoFramework.createAsyKeyGenerator(algName);
    let keyPair: cryptoFramework.KeyPair = await cipher.convertKey(dataKeyPair.dataPubKey, dataKeyPair.dataPriKey);

    return keyPair;
  } catch (error) {
    console.error(`generateRfc5208KeyPair “${error}“, error code: ${error.code}`);
    throw error as Error;
  }
}

function generatePriKeyDerData(keyPair: cryptoFramework.KeyPair): cryptoFramework.DataBlob {
  try {
    let dataPriKey = keyPair.priKey.getEncodedDer("PKCS8");

    return dataPriKey;
  } catch (error) {
    console.error(`generateDerData “${error}“, error code: ${error.code}`);
    throw error as Error;
  }
}


let priKey_1024: number[] =[
  0x30, 0x82, 0x01, 0xcb, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0xb9, 0x30, 0x98, 0x4d, 0xd8,
  0xcf, 0xa7, 0x40, 0xa9, 0x4a, 0x7d, 0x0a, 0xf8, 0x84, 0x5f, 0xac, 0xfb, 0x3d, 0x1c, 0x3e, 0xe1,
  0x6e, 0xbd, 0xbd, 0xd9, 0xb0, 0x27, 0x7a, 0x46, 0x85, 0x35, 0x13, 0x16, 0x30, 0x80, 0x12, 0x1a,
  0xf2, 0xef, 0xc6, 0x55, 0xef, 0x55, 0x14, 0x2c, 0x57, 0x05, 0x69, 0x98, 0x0c, 0x10, 0x80, 0x08,
  0xb2, 0xfe, 0x06, 0xf4, 0xb3, 0xd4, 0xc1, 0xad, 0x52, 0x8f, 0xb3, 0x4d, 0xa1, 0x01, 0xee, 0x76,
  0x6b, 0xc1, 0x48, 0xd3, 0xd6, 0x05, 0x81, 0x75, 0x0f, 0xde, 0x82, 0x24, 0x88, 0x35, 0x37, 0x51,
  0xa9, 0xc7, 0xb0, 0x26, 0xaa, 0xcf, 0x70, 0x93, 0xaf, 0x08, 0x9d, 0xc9, 0x6b, 0x27, 0x8f, 0xb3,
  0xac, 0x6d, 0xec, 0xcf, 0x95, 0x6d, 0x3f, 0x55, 0xdf, 0xb4, 0xda, 0xea, 0x19, 0x99, 0xf3, 0x18,
  0xec, 0xe5, 0xee, 0x2f, 0xf0, 0xac, 0x4a, 0xe1, 0x89, 0xdb, 0xe3, 0x02, 0x1d, 0x00, 0xaf, 0x26,
  0x1a, 0x5e, 0x5c, 0x82, 0x14, 0x31, 0xfd, 0x25, 0x35, 0xd5, 0x9c, 0x42, 0x28, 0x58, 0xc1, 0xa2,
  0x4c, 0x0e, 0x16, 0x0b, 0x98, 0x76, 0x6e, 0x17, 0xbd, 0x53, 0x02, 0x81, 0x80, 0x70, 0xcf, 0x61,
  0xd8, 0x71, 0x84, 0x51, 0x17, 0xfd, 0x14, 0xc6, 0xfa, 0xe3, 0x6a, 0x40, 0xe3, 0x61, 0x82, 0x7a,
  0xc5, 0x7f, 0xee, 0xb5, 0x43, 0x42, 0xcb, 0x48, 0x34, 0x6a, 0x5f, 0xc9, 0xc2, 0x15, 0x2f, 0x62,
  0x20, 0x08, 0xd9, 0x9d, 0xe4, 0x4f, 0xc3, 0x75, 0x80, 0x45, 0x66, 0x72, 0xdf, 0xba, 0xd9, 0x23,
  0x16, 0xa0, 0x01, 0xa7, 0x5d, 0xb9, 0x4a, 0x26, 0x9b, 0xb2, 0xee, 0x03, 0xae, 0x66, 0x9e, 0x75,
  0xba, 0xe7, 0xde, 0x09, 0xf5, 0x51, 0x1a, 0x1e, 0x49, 0x5c, 0x24, 0x9e, 0xa9, 0x40, 0x0b, 0x05,
  0x62, 0x72, 0x56, 0x50, 0xab, 0xc9, 0x0c, 0x53, 0x4f, 0x9e, 0xb6, 0x2e, 0xe9, 0x35, 0x97, 0x95,
  0x21, 0xd4, 0x14, 0xc3, 0xa1, 0x43, 0x2f, 0xec, 0xd6, 0x02, 0x91, 0x36, 0xf9, 0x95, 0x52, 0x04,
  0xdd, 0x61, 0xeb, 0x60, 0x7c, 0x5f, 0x49, 0x18, 0xa6, 0xfa, 0x1c, 0xec, 0xd7, 0x02, 0x81, 0x81,
  0x00, 0xa2, 0x35, 0x8f, 0x18, 0xaf, 0x96, 0xf8, 0x78, 0x12, 0x41, 0x4a, 0x19, 0xca, 0x93, 0xa9,
  0x9c, 0x51, 0x7f, 0x41, 0x77, 0xdc, 0x89, 0x59, 0xbb, 0x52, 0xa4, 0x37, 0x6f, 0x2b, 0xb5, 0x1d,
  0x88, 0xe3, 0xdc, 0xa9, 0x05, 0xd4, 0x42, 0xa5, 0x32, 0x77, 0xfe, 0xe1, 0xc8, 0xad, 0x57, 0x4a,
  0xb1, 0x15, 0x27, 0x02, 0x3e, 0xc3, 0x54, 0x12, 0xc1, 0xc3, 0xd3, 0x11, 0xc1, 0x91, 0x7b, 0xd5,
  0x4b, 0xa2, 0x0f, 0x02, 0xfc, 0xe9, 0xbf, 0x3f, 0x14, 0xec, 0x77, 0xc7, 0xdb, 0x2a, 0xe6, 0xec,
  0x6b, 0x3f, 0x92, 0x46, 0x6f, 0x15, 0x96, 0x25, 0x01, 0xfd, 0xbe, 0x6e, 0xb1, 0x26, 0xcc, 0x99,
  0x5e, 0xff, 0xfd, 0xfe, 0x96, 0x97, 0x01, 0x74, 0x94, 0x9a, 0xc2, 0x4b, 0xdb, 0xae, 0x90, 0x25,
  0xaf, 0x87, 0xfe, 0x0d, 0xa7, 0x83, 0x98, 0xb2, 0x9a, 0x3d, 0x44, 0xb3, 0x46, 0x62, 0x07, 0x9c,
  0x54, 0x02, 0x1c, 0x6c, 0x10, 0x59, 0x1f, 0x0e, 0x7b, 0x22, 0x18, 0x00, 0x6c, 0x98, 0x5b, 0x05,
  0xe1, 0x21, 0x0c, 0x06, 0x06, 0x15, 0x4c, 0x46, 0x65, 0xff, 0xe3, 0x0d, 0xdf, 0x6b, 0x82
];

let pubKey_1024: number[] = [
  0x30, 0x82, 0x01, 0xbf, 0x30, 0x82, 0x01, 0x33, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x38, 0x04,
  0x01, 0x30, 0x82, 0x01, 0x26, 0x02, 0x81, 0x81, 0x00, 0xb9, 0x30, 0x98, 0x4d, 0xd8, 0xcf, 0xa7,
  0x40, 0xa9, 0x4a, 0x7d, 0x0a, 0xf8, 0x84, 0x5f, 0xac, 0xfb, 0x3d, 0x1c, 0x3e, 0xe1, 0x6e, 0xbd,
  0xbd, 0xd9, 0xb0, 0x27, 0x7a, 0x46, 0x85, 0x35, 0x13, 0x16, 0x30, 0x80, 0x12, 0x1a, 0xf2, 0xef,
  0xc6, 0x55, 0xef, 0x55, 0x14, 0x2c, 0x57, 0x05, 0x69, 0x98, 0x0c, 0x10, 0x80, 0x08, 0xb2, 0xfe,
  0x06, 0xf4, 0xb3, 0xd4, 0xc1, 0xad, 0x52, 0x8f, 0xb3, 0x4d, 0xa1, 0x01, 0xee, 0x76, 0x6b, 0xc1,
  0x48, 0xd3, 0xd6, 0x05, 0x81, 0x75, 0x0f, 0xde, 0x82, 0x24, 0x88, 0x35, 0x37, 0x51, 0xa9, 0xc7,
  0xb0, 0x26, 0xaa, 0xcf, 0x70, 0x93, 0xaf, 0x08, 0x9d, 0xc9, 0x6b, 0x27, 0x8f, 0xb3, 0xac, 0x6d,
  0xec, 0xcf, 0x95, 0x6d, 0x3f, 0x55, 0xdf, 0xb4, 0xda, 0xea, 0x19, 0x99, 0xf3, 0x18, 0xec, 0xe5,
  0xee, 0x2f, 0xf0, 0xac, 0x4a, 0xe1, 0x89, 0xdb, 0xe3, 0x02, 0x1d, 0x00, 0xaf, 0x26, 0x1a, 0x5e,
  0x5c, 0x82, 0x14, 0x31, 0xfd, 0x25, 0x35, 0xd5, 0x9c, 0x42, 0x28, 0x58, 0xc1, 0xa2, 0x4c, 0x0e,
  0x16, 0x0b, 0x98, 0x76, 0x6e, 0x17, 0xbd, 0x53, 0x02, 0x81, 0x80, 0x70, 0xcf, 0x61, 0xd8, 0x71,
  0x84, 0x51, 0x17, 0xfd, 0x14, 0xc6, 0xfa, 0xe3, 0x6a, 0x40, 0xe3, 0x61, 0x82, 0x7a, 0xc5, 0x7f,
  0xee, 0xb5, 0x43, 0x42, 0xcb, 0x48, 0x34, 0x6a, 0x5f, 0xc9, 0xc2, 0x15, 0x2f, 0x62, 0x20, 0x08,
  0xd9, 0x9d, 0xe4, 0x4f, 0xc3, 0x75, 0x80, 0x45, 0x66, 0x72, 0xdf, 0xba, 0xd9, 0x23, 0x16, 0xa0,
  0x01, 0xa7, 0x5d, 0xb9, 0x4a, 0x26, 0x9b, 0xb2, 0xee, 0x03, 0xae, 0x66, 0x9e, 0x75, 0xba, 0xe7,
  0xde, 0x09, 0xf5, 0x51, 0x1a, 0x1e, 0x49, 0x5c, 0x24, 0x9e, 0xa9, 0x40, 0x0b, 0x05, 0x62, 0x72,
  0x56, 0x50, 0xab, 0xc9, 0x0c, 0x53, 0x4f, 0x9e, 0xb6, 0x2e, 0xe9, 0x35, 0x97, 0x95, 0x21, 0xd4,
  0x14, 0xc3, 0xa1, 0x43, 0x2f, 0xec, 0xd6, 0x02, 0x91, 0x36, 0xf9, 0x95, 0x52, 0x04, 0xdd, 0x61,
  0xeb, 0x60, 0x7c, 0x5f, 0x49, 0x18, 0xa6, 0xfa, 0x1c, 0xec, 0xd7, 0x03, 0x81, 0x85, 0x00, 0x02,
  0x81, 0x81, 0x00, 0xa2, 0x35, 0x8f, 0x18, 0xaf, 0x96, 0xf8, 0x78, 0x12, 0x41, 0x4a, 0x19, 0xca,
  0x93, 0xa9, 0x9c, 0x51, 0x7f, 0x41, 0x77, 0xdc, 0x89, 0x59, 0xbb, 0x52, 0xa4, 0x37, 0x6f, 0x2b,
  0xb5, 0x1d, 0x88, 0xe3, 0xdc, 0xa9, 0x05, 0xd4, 0x42, 0xa5, 0x32, 0x77, 0xfe, 0xe1, 0xc8, 0xad,
  0x57, 0x4a, 0xb1, 0x15, 0x27, 0x02, 0x3e, 0xc3, 0x54, 0x12, 0xc1, 0xc3, 0xd3, 0x11, 0xc1, 0x91,
  0x7b, 0xd5, 0x4b, 0xa2, 0x0f, 0x02, 0xfc, 0xe9, 0xbf, 0x3f, 0x14, 0xec, 0x77, 0xc7, 0xdb, 0x2a,
  0xe6, 0xec, 0x6b, 0x3f, 0x92, 0x46, 0x6f, 0x15, 0x96, 0x25, 0x01, 0xfd, 0xbe, 0x6e, 0xb1, 0x26,
  0xcc, 0x99, 0x5e, 0xff, 0xfd, 0xfe, 0x96, 0x97, 0x01, 0x74, 0x94, 0x9a, 0xc2, 0x4b, 0xdb, 0xae,
  0x90, 0x25, 0xaf, 0x87, 0xfe, 0x0d, 0xa7, 0x83, 0x98, 0xb2, 0x9a, 0x3d, 0x44, 0xb3, 0x46, 0x62,
  0x07, 0x9c, 0x54
]

interface keyPairKAT {
  pri: number[];
  pub: number[];
}

interface KeyKAT {
  key_1024?: keyPairKAT;
  key_2048?: keyPairKAT;
  key_3072?: keyPairKAT;
}

let keys: KeyKAT = {
  key_1024: {
    pri: priKey_1024,
    pub: pubKey_1024,
  }
}

let ASY_ECC_KEY_SPEC = [
  "ECC224", "ECC256", "ECC384", "ECC521", "ECC_BrainPoolP160r1", "ECC_BrainPoolP160t1",
  "ECC_BrainPoolP192r1", "ECC_BrainPoolP192t1", "ECC_BrainPoolP224r1", "ECC_BrainPoolP224t1",
  "ECC_BrainPoolP256r1", "ECC_BrainPoolP256t1", "ECC_BrainPoolP320r1", "ECC_BrainPoolP320t1",
  "ECC_BrainPoolP384r1", "ECC_BrainPoolP384t1", "ECC_BrainPoolP512r1", "ECC_BrainPoolP512t1",
]

export {
  generateRfc5915KeyPair,
  generateRfc5915KeyPairEncoded,
  convertDataKeyPairToKeyPair,
  generateRfc5208KeyPair,
  generatePriKeyDerData,
  dataKeyPair,
  dataStyle,
  ASY_ECC_KEY_SPEC,
  keys
}