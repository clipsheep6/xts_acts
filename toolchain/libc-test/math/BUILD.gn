# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#import("//build/test.gni")
import("//test/xts/tools/build/suite.gni")

#module_output_path = "hits/huks_standard"
########################################################
config("module_private_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "//utils/native/base/include",
    "//third_party/bounds_checking_function/include",
    "//third_party/musl/porting/linux/user/include",
    #"unittest/include",
    #"include",
    "//test/xts/acts/security_lite/huks/common/include",
    #"../../../../../../third_party/musl/libc-test/src/common",
  ]
}

########################################################
ohos_moduletest_suite("ActToolChainMathTest") {
  configs = [ ":module_private_config" ]
  cflags_cc = [ "-DHILOG_ENABLE" ]
  defines = [ "_STANDARD_SYSTEM_" ]

  sources = [
    "include/mtest.cpp",
    "src/acos.cpp",
    "src/acosf.cpp",
    "src/acosh.cpp",
    "src/acoshf.cpp",
    "src/acoshl.cpp",
    "src/acosl.cpp",
    "src/asin.cpp",
    "src/asinf.cpp",
    "src/asinh.cpp",
    "src/asinhf.cpp",
    "src/asinhl.cpp",
    "src/asinl.cpp",
    "src/atan.cpp",
    "src/atan2.cpp",
    "src/atan2f.cpp",
    "src/atan2l.cpp",
    "src/atanf.cpp",
    "src/atanh.cpp",
    "src/atanhf.cpp",
    "src/atanhl.cpp",
    "src/atanl.cpp",
    "src/cbrt.cpp",
    "src/cbrtf.cpp",
    "src/cbrtl.cpp",
    "src/ceil.cpp",
    "src/ceilf.cpp",
    "src/ceill.cpp",
    "src/copysign.cpp",
    "src/copysignf.cpp",
    "src/copysignl.cpp",
    "src/cos.cpp",
    "src/cosf.cpp",
    "src/cosh.cpp",
    "src/coshf.cpp",
    "src/coshl.cpp",
    "src/cosl.cpp",
    "src/drem.cpp",
    "src/dremf.cpp",
    "src/erf.cpp",
    "src/erfc.cpp",
    "src/erfcf.cpp",
    "src/erfcl.cpp",
    "src/erff.cpp",
    "src/erfl.cpp",
    "src/exp.cpp",
    "src/exp2.cpp",
    "src/exp2f.cpp",
    "src/exp2l.cpp",
    "src/exp10.cpp",
    "src/exp10f.cpp",
    "src/exp10l.cpp",
    "src/expf.cpp",
    "src/expl.cpp",
    "src/expm1.cpp",
    "src/expm1f.cpp",
    "src/expm1l.cpp",
    "src/fabs.cpp",
    "src/fabsf.cpp",
    "src/fabsl.cpp",
    "src/fdim.cpp",
    "src/fdimf.cpp",
    "src/fdiml.cpp",
    "src/fenv.cpp",
    "src/floor.cpp",
    "src/floorf.cpp",
    "src/floorl.cpp",
    "src/fma.cpp",
    "src/fmaf.cpp",
    "src/fmal.cpp",
    "src/fmax.cpp",
    "src/fmaxf.cpp",
    "src/fmaxl.cpp",
    "src/fmin.cpp",
    "src/fminf.cpp",
    "src/fminl.cpp",
    "src/fmod.cpp",
    "src/fmodf.cpp",
    "src/fmodl.cpp",
    "src/fpclassify.cpp",
    "src/frexp.cpp",
    "src/frexpf.cpp",
    "src/frexpl.cpp",
    "src/hypot.cpp",
    "src/hypotf.cpp",
    "src/hypotl.cpp",
    "src/ilogb.cpp",
    "src/ilogbf.cpp",
    "src/ilogbl.cpp",
    "src/isless.cpp",
    "src/j0.cpp",
    "src/j0f.cpp",
    "src/j1.cpp",
    "src/j1f.cpp",
    "src/jn.cpp",
    "src/jnf.cpp",
    "src/ldexp.cpp",
    "src/ldexpf.cpp",
    "src/ldexpl.cpp",
    "src/lgamma_r.cpp",
    "src/lgamma.cpp",
    "src/lgammaf_r.cpp",
    "src/lgammaf.cpp",
    "src/lgammal_r.cpp",
    "src/lgammal.cpp",
    "src/llrint.cpp",
    "src/llrintf.cpp",
    "src/llrintl.cpp",
    "src/llround.cpp",
    "src/llroundf.cpp",
    "src/llroundl.cpp",
    "src/log.cpp",
    "src/log1p.cpp",
    "src/log1pf.cpp",
    "src/log1pl.cpp",
    "src/log2.cpp",
    "src/log2f.cpp",
    "src/log2l.cpp",
    "src/log10.cpp",
    "src/log10f.cpp",
    "src/log10l.cpp",
    "src/logb.cpp",
    "src/logbf.cpp",
    "src/logbl.cpp",
    "src/logf.cpp",
    "src/logl.cpp",
    "src/lrint.cpp",
    "src/lrintf.cpp",
    "src/lrintl.cpp",
    "src/lround.cpp",
    "src/lroundf.cpp",
    "src/lroundl.cpp",
    "src/modf.cpp",
    "src/modff.cpp",
    "src/modfl.cpp",
    "src/nearbyint.cpp",
    "src/nearbyintf.cpp",
    "src/nearbyintl.cpp",
    "src/nextafter.cpp",
    "src/nextafterf.cpp",
    "src/nextafterl.cpp",
    "src/nexttoward.cpp",
    "src/nexttowardf.cpp",
    "src/nexttowardl.cpp",
    "src/pow.cpp",
    "src/pow10.cpp",
    "src/pow10f.cpp",
    "src/pow10l.cpp",
    "src/powf.cpp",
    "src/powl.cpp",
    "src/remainder.cpp",
    "src/remainderf.cpp",
    "src/remainderl.cpp",
    "src/remquo.cpp",
    "src/remquof.cpp",
    "src/remquol.cpp",
    "src/rint.cpp",
    "src/rintf.cpp",
    "src/rintl.cpp",
    "src/round.cpp",
    "src/roundf.cpp",
    "src/roundl.cpp",
    "src/scalb.cpp",
    "src/scalbf.cpp",
    "src/scalbln.cpp",
    "src/scalblnf.cpp",
    "src/scalblnl.cpp",
    "src/scalbn.cpp",
    "src/scalbnf.cpp",
    "src/scalbnl.cpp",
    "src/sin.cpp",
    "src/sincos.cpp",
    "src/sincosf.cpp",
    "src/sincosl.cpp",
    "src/sinf.cpp",
    "src/sinh.cpp",
    "src/sinhf.cpp",
    "src/sinhl.cpp",
    "src/sinl.cpp",
    "src/sqrt.cpp",
    "src/sqrtf.cpp",
    "src/sqrtl.cpp",
    "src/tan.cpp",
    "src/tanf.cpp",
    "src/tanh.cpp",
    "src/tanhf.cpp",
    "src/tanhl.cpp",
    "src/tanl.cpp",
    "src/tgamma.cpp",
    "src/tgammaf.cpp",
    "src/tgammal.cpp",
    "src/trunc.cpp",
    "src/truncf.cpp",
    "src/truncl.cpp",
    "src/y0.cpp",
    "src/y0f.cpp",
    "src/y1.cpp",
    "src/y1f.cpp",
    "src/yn.cpp",
    "src/ynf.cpp",
  ]

  include_dirs = [
    #"//utils/native/base/include",
    #"//third_party/bounds_checking_function/include",
    "src",
    "include",
    "../functional/include",
    "src/crlibm",
    "src/gen", 
    "src/gen/template",
    "src/sanity",
    "src/special",
    "src/ucb",
    #"//third_party/musl/porting/linux/user/include",
    #"//third_party/musl/libc-test/src/common",
    "//third_party/musl/porting/linux/user/src/sched",
    #"//third_party/musl/include",
    #"//test/xts/tools/lite/hctest/include",
  ]

  deps = [
    #"//base/security/huks/interfaces/innerkits/huks_standard/main:libhukssdk",
    #"//test/xts/acts/security_lite/huks/common:huks_test_common",
    "//third_party/bounds_checking_function:libsec_static",
    "//utils/native/base:utils",
  ]
}

#group("ToolChaintest") {
#  testonly = true
#  deps = [ ":ActToolChainFunctionTest" ]
#}
