{"subsystem_ch": "\u5305\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "appexecfwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\bundle\\extensionAbilityInfo", "api": [{"api_class_name": "ExtensionAbilityInfo", "api_method_all": "export interface ExtensionAbilityInfo {\n  \n  readonly bundleName: string;\n\n  \n  readonly moduleName: string;\n\n  \n  readonly name: string;\n\n  \n  readonly labelId: number;\n\n  \n  readonly descriptionId: number;\n\n  \n  readonly iconId: number;\n\n  \n  readonly isVisible: boolean;\n\n  \n  readonly extensionAbilityType: bundle.ExtensionAbilityType;\n\n  \n  readonly permissions: Array<string>;\n\n  \n  readonly applicationInfo: ApplicationInfo;\n\n  \n  readonly metadata: Array<Metadata>;\n\n  \n  readonly enabled: boolean;\n\n  \n  readonly readPermission: string;\n\n  \n  readonly writePermission: string;\n}", "api_method_name": "ExtensionAbilityInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "bundleName", "api_method_all": "readonly bundleName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 135, "since": 9, "api_used": "\u662f", "lines": ["installer.uninstall(bundleName, {\n                ", ".hap'];\n        let bundleName = 'com.example.bmsm", ".getApplicationInfo(bundleName, 0, 0).then(applica", "o.name).assertEqual(bundleName);\n              exp", "                    bundleName: '',\n              ", "o.name).assertEqual(bundleName);\n                 ", ".getApplicationInfo(bundleName, bundle.BundleFlag.", "                    bundleName: BUNDLE_NAME4,\n    ", "                    bundleName: BUNDLE_NAME2,\n    ", "    expect(dataInfo.bundleName).assertEqual(SYSTEM", "tall(\n              bundleName,\n              {\n  ", ".hap'];\n        let bundleName = 'com.example.bmsa", ".hap\"];\n        let bundleName = \"com.example.bmsa", "ll(\n                bundleName,\n                {\n", "                    bundleName,\n                  ", "undle.getBundleInfo(bundleName, 1, async (err, res", "    expect(dataInfo.bundleName).assertEqual(VENDOR", "                    bundleName: BUNDLE_NAME1,\n    ", "ect(typeof dataInfo.bundleName).assertEqual('strin", "                    bundleName: BUNDLE_NAME1\n     ", "                    bundleName: BUNDLE_NAME5,\n    ", "undle.getBundleInfo(bundleName, 1, callback);\n    ", "o.name).assertEqual(bundleName);\n                e", "undle.getBundleInfo(bundleName, 16).then(bundleInf", "                    bundleName: BUNDLE_NAME6,\n    "], "files": ["ActsBmsMetaDataTest.test.js", "ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "getApplicationInfoJsunit.test.ets", "ActsBmsJsTest.test.js", "GetabilityInfo.test.ets", "ActsBmsQueryAbilityByWant.test.js", "IsAbilityEnabledETSUnit.ets", "ActsBmsFormsInfoTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "moduleName", "api_method_all": "readonly moduleName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 49, "since": 9, "api_used": "\u662f", "lines": ["info.moduleInfos[s].moduleName).assertEqual(\"entry", "info.moduleInfos[j].moduleName).assertEqual(\"entry", "data.moduleInfos[0].moduleName).assertEqual('entry", "nfo.abilityInfos[j].moduleName).assertEqual(\"entry", "Info.moduleInfos[s].moduleName).assertEqual(\"entry", "o[i].moduleInfos[j].moduleName.length).assertLarge", "    expect(dataInfo.moduleName).assertEqual('entry", ";\n      expect(data.moduleName).assertEqual(\"entry", "a[i].moduleInfos[0].moduleName).assertEqual('entry", "xpect(hapModuleInfo.moduleName).assertEqual('entry", "Info.moduleInfos[j].moduleName).assertEqual(\"entry", "    expect(datainfo.moduleName).assertEqual(\"entry", "=======' + dataInfo.moduleName);\n        console.i", "t.hapModuleInfos[0].moduleName).assertEqual('entry", "t.hapModuleInfos[1].moduleName).assertEqual('bmsma", "expect(typeof (data.moduleName)).assertEqual(\"stri", "ect(typeof dataInfo.moduleName).assertEqual('strin"], "files": ["ActsBmsHapModuleTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets", "ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "name", "api_method_all": "readonly name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 398, "since": 9, "api_used": "\u662f", "lines": ["info.get(formName), name);\n        }\n    }\n\n", "dule_1000\n    * @tc.name: getFormsInfoByModu", "dule_1200\n    * @tc.name: getFormsInfoByModu", "ect(applicationInfo.name).assertEqual(bundle", "Info_1600\n    * @tc.name: getFormsInfo : get", "dule_1800\n    * @tc.name: getFormsInfoByModu", "rtEqual('Form_JS' + name);\n        console.i", "dule_0200\n    * @tc.name: getFormsInfoByModu", "o.customizeDatas[0].name).assertEqual('origi", "me).assertEqual('JS_name1S');\n        expect", "app by wrong module name (by promise)\n    */", "   .assertEqual('[{\"name\":\"originWidgetName1", "dule_0400\n    * @tc.name: getFormsInfoByModu", "third app by bundle name and module name (by", "dule_0100\n    * @tc.name: getFormsInfoByModu", "  expect(bundleInfo.name).assertEqual(bundle", "dle name and module name (by promise)\n    */", "ormByName(dataInfo, name) {\n        console.", "dule_0600\n    * @tc.name: getFormsInfoByModu", "dule_1300\n    * @tc.name: getFormsInfoByModu", "nfo.set(dataInfo[i].name, dataInfo[i]);\n    ", "dule_0700\n    * @tc.name: getFormsInfoByModu", "dle name and module name (by callback)\n    *", "dule_1500\n    * @tc.name: getFormsInfoByModu", "me).assertEqual('JS_name1V');\n        expect", "app by wrong bundle name (by callback)\n    *", "formName, dataInfo, name, system = false, ve", "dule_1700\n    * @tc.name: getFormsInfoByModu", "app by wrong module name (by callback)\n    *", "nfo.set(dataInfo[i].name, 0)\n        }\n     ", "dule_0500\n    * @tc.name: getFormsInfoByModu", "Files(\"wrong bundle name\", (err) => {\n      ", "dule_0800\n    * @tc.name: getFormsInfoByModu", "dule_0300\n    * @tc.name: getFormsInfoByModu", "dule_1400\n    * @tc.name: getFormsInfoByModu", "    expect(dataInfo.name).assertEqual('Form_", "dule_1600\n    * @tc.name: getFormsInfoByModu", "app by wrong bundle name (by promise)\n    */", "dule_0900\n    * @tc.name: getFormsInfoByModu", "dule_1100\n    * @tc.name: getFormsInfoByModu"], "files": ["ActsBmsCleanCacheTest.test.js", "ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ActsBmsMetaDataTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "actszipfileandunzipfiletest.test.js", "ActsBmsGetBackGroundModes.test.js", "getApplicationInfoJsunit.test.ets", "ActsBmsJsTest.test.js", "GetabilityInfo.test.ets", "IsAbilityEnabledETSUnit.ets", "ActsBmsFormsInfoTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "labelId", "api_method_all": "readonly labelId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 37, "since": 9, "api_used": "\u662f", "lines": ["t(parseInt(datainfo.labelId)).assertLarger(0)\n ", "ect(typeof (data[i].labelId)).assertEqual('numb", "ct(dataInfo.appInfo.labelId >= 0).assertTrue()\n", "xpect(hapModuleInfo.labelId).assertEqual(0);\n  ", ")\n      expect(info.labelId > 0).assertTrue()\n ", "nfo.applicationInfo.labelId >= 0).assertTrue()\n", "ect(typeof dataInfo.labelId).assertEqual('numbe", "    expect(datainfo.labelId >= 0).assertTrue()\n", "expect(typeof (data.labelId)).assertEqual('numb", "     expect(data[i].labelId > 0).assertEqual(tr", "ct(datainfo.appInfo.labelId >= 0).assertTrue()\n", ";\n      expect(data.labelId > 0).assertEqual(tr", "expect(typeof (info.labelId)).assertEqual(\"numb"], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "getAllApplicationInfoJsunit.test.ets", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "descriptionId", "api_method_all": "readonly descriptionId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 41, "since": 9, "api_used": "\u662f", "lines": ["        if (data[i].descriptionId !== 0) {\n          ", "ct(datainfo.appInfo.descriptionId >= 0).assertTrue()\n", ";\n      expect(data.descriptionId > 0).assertEqual(tr", "    expect(datainfo.descriptionId >= 0).assertTrue()\n", ")\n      expect(info.descriptionId > 0).assertTrue()\n ", "ct(dataInfo.appInfo.descriptionId >= 0).assertTrue()\n", "nfo.applicationInfo.descriptionId >= 0).assertTrue()\n", "expect(typeof (info.descriptionId)).assertEqual(\"numb", "    expect(dataInfo.descriptionId >= 0).assertTrue();", "     expect(data[i].descriptionId > 0).assertEqual(tr", "xpect(hapModuleInfo.descriptionId).assertEqual(0);\n  ", "expect(typeof (data.descriptionId)).assertEqual('numb", "ect(typeof dataInfo.descriptionId).assertEqual('numbe", "ect(typeof (data[i].descriptionId)).assertEqual('numb", "    expect(datainfo.descriptionId).assertLarger(0)\n  "], "files": ["ActsBmsHapModuleTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets", "ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "iconId", "api_method_all": "readonly iconId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 37, "since": 9, "api_used": "\u662f", "lines": ["ect(typeof dataInfo.iconId).assertEqual('numbe", "    expect(datainfo.iconId >= 0).assertTrue()\n", ")\n      expect(info.iconId > 0).assertTrue()\n ", "xpect(hapModuleInfo.iconId).assertEqual(0);\n  ", ";\n      expect(data.iconId > 0).assertEqual(tr", "ect(typeof (data[i].iconId)).assertEqual('numb", "     expect(data[i].iconId > 0).assertEqual(tr", "t(parseInt(datainfo.iconId)).assertLarger(0)\n ", "ct(dataInfo.appInfo.iconId >= 0).assertTrue()\n", "expect(typeof (info.iconId)).assertEqual(\"numb", "expect(typeof (data.iconId)).assertEqual('numb", "nfo.applicationInfo.iconId >= 0).assertTrue()\n", "ct(datainfo.appInfo.iconId >= 0).assertTrue()\n"], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "getAllApplicationInfoJsunit.test.ets", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "isVisible", "api_method_all": "readonly isVisible: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["nfo.abilityInfos[j].isVisible).assertEqual(false)", ";\n      expect(data.isVisible).assertEqual(true);"], "files": ["GetabilityInfo.test.ets", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "extensionAbilityType", "api_method_all": "readonly extensionAbilityType: bundle.ExtensionAbilityType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "permissions", "api_method_all": "readonly permissions: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 9, "api_used": "\u662f", "lines": ["stPermissionForUser permissions : \" + data.permissi", "(Array.isArray(info.permissions)).assertEqual(true)", "    expect(datainfo.permissions[0]).assertEqual(\"co", "missions : \" + data.permissions[j]);\n              ", ";\n      expect(data.permissions[2]).assertEqual(\"oh", ";\n      expect(data.permissions[0]).assertEqual(\"oh", "var j = 0; j < data.permissions.length; j++) {\n    ", "(Array.isArray(data.permissions)).assertEqual(true)", ";\n      expect(data.permissions[1]).assertEqual(\"oh", "ray.isArray(data[i].permissions)).assertEqual(true)"], "files": ["getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "applicationInfo", "api_method_all": "readonly applicationInfo: ApplicationInfo", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 66, "since": 9, "api_used": "\u662f", "lines": ["expect(typeof (data.applicationInfo)).assertEqual(\"obje", "\"accessTokenId: \" + applicationInfo.accessTokenId);\n   ", "pplicationInfo(data.applicationInfo);\n      console.log", "    expect(datainfo.applicationInfo.descriptionId >= 0)", "j = 0; j < datainfo.applicationInfo.moduleInfos; j++) {", "    expect(datainfo.applicationInfo.icon).assertEqual(\"", "('accessTokenId: '+ applicationInfo.accessTokenId);\n   ", "    expect(datainfo.applicationInfo.name).assertEqual(N", "    expect(datainfo.applicationInfo.iconId >= 0).assert", "    expect(datainfo.applicationInfo.moduleInfos[j].modu", "NDLE_DEFAULT).then((applicationInfo) => {\n             ", "             expect(applicationInfo.name).assertEqual(b", "    expect(datainfo.applicationInfo.enabled).assertEqua", "    expect(datainfo.applicationInfo.supportedModes).ass", "N)\n          .then((applicationInfo) => {\n             ", "tionInfo_other(data.applicationInfo);\n      console.log", "dleName, 0, 0).then(applicationInfo => {\n              ", "    expect(datainfo.applicationInfo.systemApp).assertEq", "    expect(datainfo.applicationInfo.label).assertEqual(", "     expect(data[i].applicationInfo.systemApp).assertEq", "    expect(datainfo.applicationInfo.labelId >= 0).asser", "             expect(applicationInfo.reqPermissionStates", "\n            .then((applicationInfo) => {\n             ", "             expect(applicationInfo.accessTokenId).asse", "    expect(datainfo.applicationInfo.description).assert"], "files": ["GetabilityInfo.test.ets", "ExampleJsunit.test.js", "ActsBmsAccessTokenTest.test.js", "ActsBmsQueryAbilityByWant.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "metadata", "api_method_all": "readonly metadata: Array<Metadata>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 9, "api_used": "\u662f", "lines": ["ect(typeof (data[i].metadata)).assertEqual('obje", "expect(typeof (data.metadata)).assertEqual('obje"], "files": ["getApplicationInfoJsunit.test.ets", "getAllApplicationInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "enabled", "api_method_all": "readonly enabled: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 9, "api_used": "\u662f", "lines": ["expect(typeof (data.enabled)).assertEqual('bool", "    expect(datainfo.enabled).assertEqual(true)\n", "nfo.applicationInfo.enabled).assertEqual(true)\n", "ct(datainfo.appInfo.enabled).assertEqual(true)\n", "ct(dataInfo.appInfo.enabled).assertEqual(true);", "ct(datainfo.appInfo.enabled).assertEqual(true);", "ect(typeof (data[i].enabled)).assertEqual('bool", "     expect(data[i].enabled).assertEqual(true);", ";\n      expect(data.enabled).assertEqual(true);"], "files": ["getApplicationInfoJsunit.test.ets", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "readPermission", "api_method_all": "readonly readPermission: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityInfo", "api_method_name": "writePermission", "api_method_all": "readonly writePermission: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}