{"subsystem_ch": "\u5305\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "appexecfwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@system.package", "api": [{"api_class_name": "CheckPackageHasInstalledResponse", "api_method_all": "export interface CheckPackageHasInstalledResponse {\n    \n    result: boolean;\n}", "api_method_name": "CheckPackageHasInstalledResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CheckPackageHasInstalledResponse", "api_method_name": "result", "api_method_all": "result: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 169, "since": 3, "api_used": "\u662f", "lines": ["             expect(result.hapModuleInfos.leng", "             expect(result.abilityInfos[1].nam", "             expect(result.hapModuleInfos[1].m", " checkHapModuleInfo(result.hapModuleInfos[0]);", "O);\n            if (result.abilityInfos.length", "             expect(result.abilityInfos[0].nam", "1);\n            if (result.hapModuleInfos.leng", "                if (result.hapModuleInfos.leng", "');\n            let result = await bundle.getB", "             expect(result.abilityInfos[0].src", "R);\n            if (result.abilityInfos.length", "=' + JSON.stringify(result))\n            expec", " checkHapModuleInfo(result.hapModuleInfos[1]);", "ame, 1, async (err, result) => {\n             ", "ction callback(err, result) {\n                ", "             expect(result.hapModuleInfos[0].m", "me, 1,).then(async (result) => {\n             ", "             expect(result.abilityInfos[1].src", "=' + JSON.stringify(result))\n                e", "let hapModuleInfo = result.hapModuleInfos[0];\n", "\n            expect(result.abilityInfos.length", "ction callback(err, result) {\n            expe", "\n            expect(result.hapModuleInfos.leng", "=' + JSON.stringify(result.abilityInfos));\n   ", "lityName========' + result.hapModuleInfos[0].m"], "files": ["GetAbilityLabelJsUnit.test.ets", "ActsBmsMetaDataTest.test.js", "ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "ActsBmsJsTest.test.js", "actszipfileandunzipfiletest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckPackageHasInstalledOptions", "api_method_all": "export interface CheckPackageHasInstalledOptions {\n    \n    bundleName: string;\n\n    \n    success?: (data: CheckPackageHasInstalledResponse) => void;\n\n    \n    fail?: (data: any, code: number) => void;\n\n    \n    complete?: () => void;\n}", "api_method_name": "CheckPackageHasInstalledOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CheckPackageHasInstalledOptions", "api_method_name": "success", "api_method_all": "success?: (data: CheckPackageHasInstalledResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 75, "since": 3, "api_used": "\u662f", "lines": ["gName',\n            success: function success(d", "_ZipFile_2400 mkdir successfully\");\n           ", "ole.info(\"uninstall success\" + JSON.stringify(d", "ole.info('Operation successful. Data: ' + JSON.", "etBundleArchiveInfo success\" + JSON.stringify(d", "_ZipFile_2000 mkdir successfully\");\n           ", "UM_TWO,\n            success: function success(d", "\"getApplicationInfo success:\" + JSON.stringify(", "_ZipFile_2100 mkdir successfully\");\n           ", "  success: function success(data) {\n           ", "ole.info(\"uninstall success:\" + JSON.stringify(", "info(\"getBundleInfo success\" + JSON.stringify(d", "getAbilityIcon_0200 success: ' + JSON.stringify", "\"getApplicationInfo success\" + JSON.stringify(d", " write data to file successfully:\" + number);\n ", "_ZipFile_2300 mkdir successfully\");\n           ", "ncher',\n            success: function success(d", "_ZipFile_1900 mkdir successfully\");\n           ", "getAbilityIcon_0100 success: ' + pixelmap);\n   ", "info(\"getBundleInfo success:\" + JSON.stringify(", ".info('hasInstalled success function in');\n    ", "_ZipFile_2200 mkdir successfully\");\n           "], "files": ["ExampleJsunit.test.js", "ActsBmsJsTest.test.js", "ActsBmsFormsInfoTest.test.js", "actszipfileandunzipfiletest.test.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckPackageHasInstalledOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: any, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 82, "since": 3, "api_used": "\u662f", "lines": ["test_0700]Operation failed. Cause: ' + JSON.", "etBundleArchiveInfo fail\" + JSON.stringify(e", "test_0100]Operation failed. Cause: ' + JSON.", "info(\"getNameForUid fail:\" + JSON.stringify(", "     fail: function fail(data, code) {\n     ", "_ZipFile_1900 mkdir failed with error:\" + er", "test_0300]Operation failed. Cause: ' + JSON.", "le.error('Operation failed. Cause: ' + JSON.", "     },\n            fail: function fail(data", "\n    console.error(`fail callback, code: ${e", "test_0800]Operation failed. Cause: ' + JSON.", "test_0200]Operation failed. Cause: ' + JSON.", " write data to file failed with error:\" + er", "_ZipFile_2000 mkdir failed with error:\" + er", "info(\"getBundleInfo fail\" + JSON.stringify(e", "_ZipFile_2300 mkdir failed with error:\" + er", "nfo(\"getAbilityIcon fail:\" + JSON.stringify(", "_ZipFile_2200 mkdir failed with error:\" + er", "_ZipFile_2100 mkdir failed with error:\" + er", "info(\"getBundleInfo fail:\" + JSON.stringify(", "\"getApplicationInfo fail\" + JSON.stringify(e", "\"getApplicationInfo fail:\" + JSON.stringify(", "test_0600]Operation failed. Cause: ' + JSON.", ".info('hasInstalled fail function in');\n    ", "test_0400]Operation failed. Cause: ' + JSON."], "files": ["GetAbilityLabelJsUnit.test.ets", "ExampleJsunit.test.js", "actszipfileandunzipfiletest.test.js", "ActsBmsJsTest.test.js", "GetabilityInfo.test.ets", "IsApplicationEnabledETSUnit.ets", "IsAbilityEnabledETSUnit.ets", "ActsBmsFormsInfoTest.test.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckPackageHasInstalledOptions", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 9, "since": 3, "api_used": "\u662f", "lines": [".info('hasInstalled complete function in');\n    ", "     },\n            complete: function complete(", " complete: function complete() {\n               "], "files": ["ActsBmsJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckPackageHasInstalledOptions", "api_method_name": "bundleName", "api_method_all": "bundleName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 135, "since": 3, "api_used": "\u662f", "lines": ["installer.uninstall(bundleName, {\n                ", ".hap'];\n        let bundleName = 'com.example.bmsm", ".getApplicationInfo(bundleName, 0, 0).then(applica", "o.name).assertEqual(bundleName);\n              exp", "                    bundleName: '',\n              ", "o.name).assertEqual(bundleName);\n                 ", ".getApplicationInfo(bundleName, bundle.BundleFlag.", "                    bundleName: BUNDLE_NAME4,\n    ", "                    bundleName: BUNDLE_NAME2,\n    ", "    expect(dataInfo.bundleName).assertEqual(SYSTEM", "tall(\n              bundleName,\n              {\n  ", ".hap'];\n        let bundleName = 'com.example.bmsa", ".hap\"];\n        let bundleName = \"com.example.bmsa", "ll(\n                bundleName,\n                {\n", "                    bundleName,\n                  ", "undle.getBundleInfo(bundleName, 1, async (err, res", "    expect(dataInfo.bundleName).assertEqual(VENDOR", "                    bundleName: BUNDLE_NAME1,\n    ", "ect(typeof dataInfo.bundleName).assertEqual('strin", "                    bundleName: BUNDLE_NAME1\n     ", "                    bundleName: BUNDLE_NAME5,\n    ", "undle.getBundleInfo(bundleName, 1, callback);\n    ", "o.name).assertEqual(bundleName);\n                e", "undle.getBundleInfo(bundleName, 16).then(bundleInf", "                    bundleName: BUNDLE_NAME6,\n    "], "files": ["ActsBmsMetaDataTest.test.js", "ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "getApplicationInfoJsunit.test.ets", "ActsBmsJsTest.test.js", "GetabilityInfo.test.ets", "ActsBmsQueryAbilityByWant.test.js", "IsAbilityEnabledETSUnit.ets", "ActsBmsFormsInfoTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Package", "api_method_all": "export default class Package {\n    \n    static hasInstalled(options: CheckPackageHasInstalledOptions): void;\n}", "api_method_name": "Package", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Package", "api_method_name": "hasInstalled", "api_method_all": "static hasInstalled(options: CheckPackageHasInstalledOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": ["      console.info('hasInstalled complete function i", "      console.info('hasInstalled success function in", "  })\n\n    \n     it('hasInstalled_0400', 0, async fun", "      console.info('hasInstalled fail function in');", "  })\n\n    \n     it('hasInstalled_0300', 0, async fun", "  })\n\n    \n     it('hasInstalled_0200', 0, async fun", "done) {\n        pkg.hasInstalled({\n            bundl", "  })\n\n    \n     it('hasInstalled_0100', 0, async fun"], "files": ["ActsBmsJsTest.test.js"], "is_white": " ", "desc": " "}]}