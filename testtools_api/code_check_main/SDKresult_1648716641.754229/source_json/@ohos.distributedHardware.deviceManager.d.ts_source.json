{"subsystem_ch": "\u5206\u5e03\u5f0f\u786c\u4ef6\u5b50\u7cfb\u7edf", "subsystem_en": "distributedhardware", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.distributedHardware.deviceManager", "api": [{"api_class_name": "deviceManager", "api_method_all": "declare namespace deviceManager {\n  \n  interface DeviceInfo {\n    \n    deviceId: string;\n\n    \n    deviceName: string;\n\n    \n    deviceType: DeviceType;\n\n    \n    networkId: string;\n  }\n\n  \n  enum DeviceType {\n    \n    UNKNOWN_TYPE = 0,\n\n    \n    SPEAKER = 0x0A,\n\n    \n    PHONE = 0x0E,\n\n    \n    TABLET = 0x11,\n\n    \n    WEARABLE = 0x6D,\n\n    \n    CAR = 0x83,\n\n    \n    TV = 0x9C\n  }\n\n  \n  enum DeviceStateChangeAction {\n    \n    ONLINE = 0,\n\n    \n    READY = 1,\n\n    \n    OFFLINE = 2,\n\n    \n    CHANGE = 3\n  }\n\n  \n  interface SubscribeInfo {\n    \n    subscribeId: number;\n\n    \n    mode: DiscoverMode;\n\n    \n    medium: ExchangeMedium;\n\n    \n    freq: ExchangeFreq;\n\n    \n    isSameAccount: boolean;\n\n    \n    isWakeRemote: boolean;\n\n    \n    capability: SubscribeCap;\n  }\n\n  \n  enum DiscoverMode {\n    \n    DISCOVER_MODE_PASSIVE = 0x55,\n\n    \n    DISCOVER_MODE_ACTIVE = 0xAA\n  }\n\n  \n  enum ExchangeMedium {\n    \n    AUTO = 0,\n\n    \n    BLE = 1,\n\n    \n    COAP = 2,\n\n    \n    USB = 3\n  }\n\n  \n  enum ExchangeFreq {\n    \n    LOW = 0,\n\n    \n    MID = 1,\n\n    \n    HIGH = 2,\n\n    \n    SUPER_HIGH = 3\n  }\n\n  \n  enum SubscribeCap {\n    \n    SUBSCRIBE_CAPABILITY_DDMP = 0,\n\n    \n    SUBSCRIBE_CAPABILITY_OSD = 1\n  }\n\n  \n  interface AuthParam {\n    \n    authType: number;\n\n    \n    extraInfo: {[key:string] : any};\n  }\n\n  \n  interface AuthInfo {\n    \n    authType: number;\n\n    \n    token: number;\n    \n    \n    extraInfo: {[key:string] : any};\n  }\n\n  \n  function createDeviceManager(bundleName: string, callback: AsyncCallback<DeviceManager>): void;\n\n  \n  interface DeviceManager {\n    \n    release(): void;\n\n    \n    getTrustedDeviceListSync(): Array<DeviceInfo>;\n\n    \n    getTrustedDeviceList(callback:AsyncCallback<Array<DeviceInfo>>): void;\n\n    \n    getTrustedDeviceList(): Promise<Array<DeviceInfo>>;\n\n    \n    getLocalDeviceInfoSync(): DeviceInfo;\n\n    \n    getLocalDeviceInfo(callback:AsyncCallback<DeviceInfo>): void;\n\n    \n    getLocalDeviceInfo(): Promise<DeviceInfo>;\n\n    \n    startDeviceDiscovery(subscribeInfo: SubscribeInfo): void;\n\n    \n    stopDeviceDiscovery(subscribeId: number): void;\n\n    \n    authenticateDevice(deviceInfo: DeviceInfo, authParam: AuthParam, callback: AsyncCallback<{deviceId: string, pinTone ?: number}>): void;\n\n    \n    unAuthenticateDevice(deviceInfo: DeviceInfo): void\n\n     \n    verifyAuthInfo(authInfo: AuthInfo, callback: AsyncCallback<{deviceId: string, level: number}>): void;\n\n    \n    on(type: 'deviceStateChange', callback: Callback<{ action: DeviceStateChangeAction, device: DeviceInfo }>): void;\n\n    \n    off(type: 'deviceStateChange', callback?: Callback<{ action: DeviceStateChangeAction, device: DeviceInfo }>): void;\n\n    \n    on(type: 'deviceFound', callback: Callback<{ subscribeId: number, device: DeviceInfo }>): void;\n\n    \n    off(type: 'deviceFound', callback?: Callback<{ subscribeId: number, device: DeviceInfo }>): void;\n\n    \n    on(type: 'discoverFail', callback: Callback<{ subscribeId: number, reason: number }>): void;\n\n    \n    off(type: 'discoverFail', callback?: Callback<{ subscribeId: number, reason: number }>): void;\n\n    \n    on(type: 'serviceDie', callback: () => void): void;\n\n    \n    off(type: 'serviceDie', callback?: () => void): void;\n  }\n}", "api_method_name": "deviceManager", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 203, "since": 0, "api_used": "\u662f", "lines": ["distributedHardware.deviceManager'\n\ndescribe('deviceM", "------start running deviceManagerTest_startDeviceDisc", "   })\n\n    \n    it('deviceManagerTest_release_0100', ", "   })\n\n    \n    it('deviceManagerTest_getTrustedDevic", "Manager'\n\ndescribe('deviceManagerTest', function() {\n", "-------stop running deviceManagerTest_createDeviceMan", "n() {\n\n    \n    it('deviceManagerTest_createDeviceMan", "   })\n\n    \n    it('deviceManagerTest_createDeviceMan", "------start running deviceManagerTest_createDeviceMan", "-------stop running deviceManagerTest_release_0100---", "--------\");\n        deviceManager.createDeviceManager", "------start running deviceManagerTest_getTrustedDevic", "------start running deviceManagerTest_release_0100---", "})   \n\n    \n    it('deviceManagerTest_createDeviceMan", "-------stop running deviceManagerTest_startDeviceDisc", "   })\n\n    \n    it('deviceManagerTest_startDeviceDisc", "sunit/index'\nimport deviceManager from '@ohos.distrib", "      console.log(\"[deviceManagerTest] createDeviceMa"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceManager", "api_method_name": "createDeviceManager", "api_method_all": "function createDeviceManager(bundleName: string, callback: AsyncCallback<DeviceManager>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 85, "since": 0, "api_used": "\u662f", "lines": ["('deviceManagerTest_createDeviceManager_0500', 0, async function (done) {\n     ", "('deviceManagerTest_createDeviceManager_0300', 0, async function (done) {\n     ", "g deviceManagerTest_createDeviceManager_0200----------\");\n        done();\n    }", "g deviceManagerTest_createDeviceManager_0300----------\");\n        done();\n    }", "g deviceManagerTest_createDeviceManager_0500----------\");\n        deviceManager", "      deviceManager.createDeviceManager('com.ohos.devicemangagerdemo', (err, da", "g deviceManagerTest_createDeviceManager_0300----------\");\n        deviceManager", "      deviceManager.createDeviceManager('com#ohos%devicemangagerdemo&*', (err, ", "      deviceManager.createDeviceManager('com.ohos.123', (err, data) => {\n      ", "      deviceManager.createDeviceManager('comohosdevicemangagerdemo', (err, data", "g deviceManagerTest_createDeviceManager_0200----------\");\n        deviceManager", "g deviceManagerTest_createDeviceManager_0400----------\");\n        done();\n    }", "('deviceManagerTest_createDeviceManager_0400', 0, async function (done) {\n     ", "g deviceManagerTest_createDeviceManager_0500----------\");\n        done();\n    }", "[deviceManagerTest] createDeviceManager error\");\n                }\n            ", "      deviceManager.createDeviceManager('', (err, data) => {\n            if (er", "g deviceManagerTest_createDeviceManager_0100----------\");\n        deviceManager", "g deviceManagerTest_createDeviceManager_0100----------\");\n        done();\n    }", "[deviceManagerTest] createDeviceManager error\");\n                expect().asser", "('deviceManagerTest_createDeviceManager_0200', 0, async function (done) {\n     ", "g deviceManagerTest_createDeviceManager_0400----------\");\n        deviceManager", "('deviceManagerTest_createDeviceManager_0100', 0, async function (done) {\n     "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceInfo", "api_method_all": "interface DeviceInfo {\n    \n    deviceId: string;\n\n    \n    deviceName: string;\n\n    \n    deviceType: DeviceType;\n\n    \n    networkId: string;\n  }", "api_method_name": "DeviceInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["ManagerTest_getLocalDeviceInfo1_0100', 0, async fu", " function dmGetLocalDeviceInfoSync(){\n            ", "            getLocalDeviceInfo1();\n            },1", "            getLocalDeviceInfo2();\n            },1", "nc function getLocalDeviceInfo2(){\n            let", "ManagerTest_getLocalDeviceInfo(promise)_0100------", "nc function getLocalDeviceInfo1(){\n            let", "          dmGetLocalDeviceInfoSync();\n            ", "ManagerTest_getLocalDeviceInfoSync_0100----------\"", "o = dmClass.getLocalDeviceInfo((err, data) => {\n  ", "o = dmClass.getLocalDeviceInfo().then(data => {\n  ", "ManagerTest_getLocalDeviceInfo(promise)_0100', 0, ", "ManagerTest_getLocalDeviceInfoSync_0100', 0, async", "ManagerTest_getLocalDeviceInfo1_0100----------\");\n", "o = dmClass.getLocalDeviceInfoSync();\n            "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceInfo", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["nfo = {\n            deviceId: \"\",\n            de", "  expect(deviceInfo.deviceId != null).assertTrue", "= {\n                deviceId: \"\",\n              "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceInfo", "api_method_name": "deviceName", "api_method_all": "deviceName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["Id: \"\",\n            deviceName: \"\",\n            de", "\"\",\n                deviceName: \"\",\n              "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceInfo", "api_method_name": "deviceType", "api_method_all": "deviceType: DeviceType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["teDevice in correct deviceType para with CAR\n     ", "teDevice in correct deviceType para with SPEAKER\n ", "eviceInfo\u3001authParam,deviceType is PHONE\n     * @tc", "me: \"\",\n            deviceType: WEARABLE\n         ", "\"\",\n                deviceType: SPEAKER\n          ", "teDevice in correct deviceType para with TV\n     *", "teDevice in correct deviceType para with PHONE\n   ", "teDevice in correct deviceType para with TABLET\n  ", "\"\",\n                deviceType: CAR\n            }\n", "\"\",\n                deviceType: TABLET\n           ", "\"\",\n                deviceType: TV\n            }\n ", "\"\",\n                deviceType: PHONE\n            "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceInfo", "api_method_name": "networkId", "api_method_all": "networkId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_all": "enum DeviceType {\n    \n    UNKNOWN_TYPE = 0,\n\n    \n    SPEAKER = 0x0A,\n\n    \n    PHONE = 0x0E,\n\n    \n    TABLET = 0x11,\n\n    \n    WEARABLE = 0x6D,\n\n    \n    CAR = 0x83,\n\n    \n    TV = 0x9C\n  }", "api_method_name": "DeviceType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "UNKNOWN_TYPE", "api_method_all": "UNKNOWN_TYPE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "SPEAKER", "api_method_all": "SPEAKER = 0x0A,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["eviceType para with SPEAKER\n     * @tc.desc    ", "        deviceType: SPEAKER\n            }\n     "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "PHONE", "api_method_all": "PHONE = 0x0E,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["Param,deviceType is PHONE\n     * @tc.desc    ", "eviceType para with PHONE\n     * @tc.desc    ", "        deviceType: PHONE\n            }\n     "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "TABLET", "api_method_all": "TABLET = 0x11,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["eviceType para with TABLET\n     * @tc.desc    ", "        deviceType: TABLET\n            }\n     "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "WEARABLE", "api_method_all": "WEARABLE = 0x6D,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["        deviceType: WEARABLE\n            }\n     "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "CAR", "api_method_all": "CAR = 0x83,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["eviceType para with CAR\n     * @tc.desc    ", "        deviceType: CAR\n            }\n     "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "TV", "api_method_all": "TV = 0x9C", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["eviceType para with TV\n     * @tc.desc    ", "        deviceType: TV\n            }\n     "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceStateChangeAction", "api_method_all": "enum DeviceStateChangeAction {\n    \n    ONLINE = 0,\n\n    \n    READY = 1,\n\n    \n    OFFLINE = 2,\n\n    \n    CHANGE = 3\n  }", "api_method_name": "DeviceStateChangeAction", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceStateChangeAction", "api_method_name": "ONLINE", "api_method_all": "ONLINE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["StateChange on with ONLINE\n     * @tc.desc    ", "ceStateChangeAction.ONLINE == 0).assertTrue();"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceStateChangeAction", "api_method_name": "READY", "api_method_all": "READY = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ceStateChangeAction.READY == 0).assertTrue();", "StateChange on with READY\n     * @tc.desc    "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceStateChangeAction", "api_method_name": "OFFLINE", "api_method_all": "OFFLINE = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["StateChange on with OFFLINE\n     * @tc.desc    ", "ceStateChangeAction.OFFLINE == 0).assertTrue();"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceStateChangeAction", "api_method_name": "CHANGE", "api_method_all": "CHANGE = 3", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["StateChange on with CHANGE\n     * @tc.desc    ", "ceStateChangeAction.CHANGE == 0).assertTrue();"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeInfo", "api_method_all": "interface SubscribeInfo {\n    \n    subscribeId: number;\n\n    \n    mode: DiscoverMode;\n\n    \n    medium: ExchangeMedium;\n\n    \n    freq: ExchangeFreq;\n\n    \n    isSameAccount: boolean;\n\n    \n    isWakeRemote: boolean;\n\n    \n    capability: SubscribeCap;\n  }", "api_method_name": "SubscribeInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeInfo", "api_method_name": "subscribeId", "api_method_all": "subscribeId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["stopDeviceDiscovery(subscribeId);\n            expec", "  }\n            let subscribeId = 2115;\n           ", " {\n                \"subscribeId\": 2115,\n           "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeInfo", "api_method_name": "mode", "api_method_all": "mode: DiscoverMode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["5,\n                \"mode\": DISCOVER_MODE_PAS", "5,\n                \"mode\": DISCOVER_MODE_ACT"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeInfo", "api_method_name": "medium", "api_method_all": "medium: ExchangeMedium", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["E,\n                \"medium\": BLE,\n            ", "E,\n                \"medium\": COAP,\n           ", "E,\n                \"medium\": AUTO,\n           "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeInfo", "api_method_name": "freq", "api_method_all": "freq: ExchangeFreq", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["P,\n                \"freq\": SUPER_HIGH,\n     ", "O,\n                \"freq\": LOW,\n            ", "E,\n                \"freq\": MID,\n            "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeInfo", "api_method_name": "isSameAccount", "api_method_all": "isSameAccount: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["W,\n                \"isSameAccount\": false,\n          ", "H,\n                \"isSameAccount\": false,\n          ", "D,\n                \"isSameAccount\": false,\n          "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeInfo", "api_method_name": "isWakeRemote", "api_method_all": "isWakeRemote: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e,\n                \"isWakeRemote\": true,\n           "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeInfo", "api_method_name": "capability", "api_method_all": "capability: SubscribeCap", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e,\n                \"capability\": SUBSCRIBE_CAPABIL", "e,\n                \"capability\": 0\n            };\n"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DiscoverMode", "api_method_all": "enum DiscoverMode {\n    \n    DISCOVER_MODE_PASSIVE = 0x55,\n\n    \n    DISCOVER_MODE_ACTIVE = 0xAA\n  }", "api_method_name": "DiscoverMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DiscoverMode", "api_method_name": "DISCOVER_MODE_PASSIVE", "api_method_all": "DISCOVER_MODE_PASSIVE = 0x55,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["            \"mode\": DISCOVER_MODE_PASSIVE,\n                \"m"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DiscoverMode", "api_method_name": "DISCOVER_MODE_ACTIVE", "api_method_all": "DISCOVER_MODE_ACTIVE = 0xAA", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["            \"mode\": DISCOVER_MODE_ACTIVE,\n                \"m"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExchangeMedium", "api_method_all": "enum ExchangeMedium {\n    \n    AUTO = 0,\n\n    \n    BLE = 1,\n\n    \n    COAP = 2,\n\n    \n    USB = 3\n  }", "api_method_name": "ExchangeMedium", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExchangeMedium", "api_method_name": "AUTO", "api_method_all": "AUTO = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["          \"medium\": AUTO,\n                \"f"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExchangeMedium", "api_method_name": "BLE", "api_method_all": "BLE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["iceType para with TABLET\n     * @tc.desc   ", "      deviceType: TABLET\n            }\n    ", "   deviceType: WEARABLE\n            }\n     ", "          \"medium\": BLE,\n                \"f"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExchangeMedium", "api_method_name": "COAP", "api_method_all": "COAP = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["          \"medium\": COAP,\n                \"f"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExchangeMedium", "api_method_name": "USB", "api_method_all": "USB = 3", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExchangeFreq", "api_method_all": "enum ExchangeFreq {\n    \n    LOW = 0,\n\n    \n    MID = 1,\n\n    \n    HIGH = 2,\n\n    \n    SUPER_HIGH = 3\n  }", "api_method_name": "ExchangeFreq", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExchangeFreq", "api_method_name": "LOW", "api_method_all": "LOW = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["            \"freq\": LOW,\n                \"i"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExchangeFreq", "api_method_name": "MID", "api_method_all": "MID = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["            \"freq\": MID,\n                \"i"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExchangeFreq", "api_method_name": "HIGH", "api_method_all": "HIGH = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["      \"freq\": SUPER_HIGH,\n                \"i"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExchangeFreq", "api_method_name": "SUPER_HIGH", "api_method_all": "SUPER_HIGH = 3", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["            \"freq\": SUPER_HIGH,\n                \"i"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeCap", "api_method_all": "enum SubscribeCap {\n    \n    SUBSCRIBE_CAPABILITY_DDMP = 0,\n\n    \n    SUBSCRIBE_CAPABILITY_OSD = 1\n  }", "api_method_name": "SubscribeCap", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeCap", "api_method_name": "SUBSCRIBE_CAPABILITY_DDMP", "api_method_all": "SUBSCRIBE_CAPABILITY_DDMP = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["      \"capability\": SUBSCRIBE_CAPABILITY_DDMP\n            };\n    "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeCap", "api_method_name": "SUBSCRIBE_CAPABILITY_OSD", "api_method_all": "SUBSCRIBE_CAPABILITY_OSD = 1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["      \"capability\": SUBSCRIBE_CAPABILITY_OSD\n            };\n    "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AuthParam", "api_method_all": "interface AuthParam {\n    \n    authType: number;\n\n    \n    extraInfo: {[key:string] : any};\n  }", "api_method_name": "AuthParam", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AuthParam", "api_method_name": "authType", "api_method_all": "authType: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": [" {\n                \"authType\": 1,\n              "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AuthParam", "api_method_name": "extraInfo", "api_method_all": "extraInfo: {[key:string] : any}", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 22, "since": 0, "api_used": "\u662f", "lines": ["  }\n            let extraInfo = {\n               ", "       \"extraInfo\": extraInfo\n            }\n     ", "),\n                \"extraInfo\": extraInfo\n       ", "2,\n                \"extraInfo\": {\n               "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AuthInfo", "api_method_all": "interface AuthInfo {\n    \n    authType: number;\n\n    \n    token: number;\n    \n    \n    extraInfo: {[key:string] : any};\n  }", "api_method_name": "AuthInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["         data.verifyAuthInfo(authInfo, (err, dat", "ceManagerTest_verifyAuthInfo_0100\n     * @tc.nam", "tcase two for verifyAuthInfo in correct para \n  "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AuthInfo", "api_method_name": "authType", "api_method_all": "authType: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": [" {\n                \"authType\": 1,\n              "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AuthInfo", "api_method_name": "token", "api_method_all": "token: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["                let token = data.pinToken;\n  ", "             expect(token != null).assertTrue", "1,\n                \"token\": 12,\n             "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AuthInfo", "api_method_name": "extraInfo", "api_method_all": "extraInfo: {[key:string] : any}", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 22, "since": 0, "api_used": "\u662f", "lines": ["  }\n            let extraInfo = {\n               ", "       \"extraInfo\": extraInfo\n            }\n     ", "),\n                \"extraInfo\": extraInfo\n       ", "2,\n                \"extraInfo\": {\n               "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_all": "interface DeviceManager {\n    \n    release(): void;\n\n    \n    getTrustedDeviceListSync(): Array<DeviceInfo>;\n\n    \n    getTrustedDeviceList(callback:AsyncCallback<Array<DeviceInfo>>): void;\n\n    \n    getTrustedDeviceList(): Promise<Array<DeviceInfo>>;\n\n    \n    getLocalDeviceInfoSync(): DeviceInfo;\n\n    \n    getLocalDeviceInfo(callback:AsyncCallback<DeviceInfo>): void;\n\n    \n    getLocalDeviceInfo(): Promise<DeviceInfo>;\n\n    \n    startDeviceDiscovery(subscribeInfo: SubscribeInfo): void;\n\n    \n    stopDeviceDiscovery(subscribeId: number): void;\n\n    \n    authenticateDevice(deviceInfo: DeviceInfo, authParam: AuthParam, callback: AsyncCallback<{deviceId: string, pinTone ?: number}>): void;\n\n    \n    unAuthenticateDevice(deviceInfo: DeviceInfo): void\n\n     \n    verifyAuthInfo(authInfo: AuthInfo, callback: AsyncCallback<{deviceId: string, level: number}>): void;\n\n    \n    on(type: 'deviceStateChange', callback: Callback<{ action: DeviceStateChangeAction, device: DeviceInfo }>): void;\n\n    \n    off(type: 'deviceStateChange', callback?: Callback<{ action: DeviceStateChangeAction, device: DeviceInfo }>): void;\n\n    \n    on(type: 'deviceFound', callback: Callback<{ subscribeId: number, device: DeviceInfo }>): void;\n\n    \n    off(type: 'deviceFound', callback?: Callback<{ subscribeId: number, device: DeviceInfo }>): void;\n\n    \n    on(type: 'discoverFail', callback: Callback<{ subscribeId: number, reason: number }>): void;\n\n    \n    off(type: 'discoverFail', callback?: Callback<{ subscribeId: number, reason: number }>): void;\n\n    \n    on(type: 'serviceDie', callback: () => void): void;\n\n    \n    off(type: 'serviceDie', callback?: () => void): void;\n  }", "api_method_name": "DeviceManager", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 85, "since": 7, "api_used": "\u662f", "lines": ["deviceManager.createDeviceManager('com.ohos.123', (er", "ceManagerTest_createDeviceManager_0200', 0, async fun", "ceManagerTest_createDeviceManager_0500----------\");\n ", "deviceManager.createDeviceManager('com#ohos%deviceman", "ceManagerTest_createDeviceManager_0100----------\");\n ", "ceManagerTest_createDeviceManager_0400----------\");\n ", "eManagerTest] createDeviceManager error\");\n          ", "ceManagerTest_createDeviceManager_0300', 0, async fun", "deviceManager.createDeviceManager('comohosdevicemanga", "ceManagerTest_createDeviceManager_0200----------\");\n ", "ceManagerTest_createDeviceManager_0300----------\");\n ", "ceManagerTest_createDeviceManager_0500', 0, async fun", "ceManagerTest_createDeviceManager_0100', 0, async fun", "ceManagerTest_createDeviceManager_0400', 0, async fun", "deviceManager.createDeviceManager('com.ohos.deviceman", "deviceManager.createDeviceManager('', (err, data) => "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "release", "api_method_all": "release(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["g deviceManagerTest_release_0100----------\");\n ", "      let re = data.release();\n            expe", "('deviceManagerTest_release_0100', 0, async fun"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "getTrustedDeviceListSync", "api_method_all": "getTrustedDeviceListSync(): Array<DeviceInfo>;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["('deviceManagerTest_getTrustedDeviceListSync_0100', 0, async fun", "g deviceManagerTest_getTrustedDeviceListSync_0100----------\");\n ", "   let array = data.getTrustedDeviceListSync();\n            expe"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "getTrustedDeviceList", "api_method_all": "getTrustedDeviceList(callback:AsyncCallback<Array<DeviceInfo>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["   let array = data.getTrustedDeviceListSync();\n            expect(array == null", "g deviceManagerTest_getTrustedDeviceListSync_0100----------\");\n        deviceMan", "g deviceManagerTest_getTrustedDeviceListSync_0100----------\");\n        done();\n ", "('deviceManagerTest_getTrustedDeviceListSync_0100', 0, async function (done) {\n "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "getTrustedDeviceList", "api_method_all": "getTrustedDeviceList(): Promise<Array<DeviceInfo>>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "getLocalDeviceInfoSync", "api_method_all": "getLocalDeviceInfoSync(): DeviceInfo;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["eviceInfo = dmClass.getLocalDeviceInfoSync();\n            expe", "('deviceManagerTest_getLocalDeviceInfoSync_0100', 0, async fun", "g deviceManagerTest_getLocalDeviceInfoSync_0100----------\");\n "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "getLocalDeviceInfo", "api_method_all": "getLocalDeviceInfo(callback:AsyncCallback<DeviceInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["g deviceManagerTest_getLocalDeviceInfo(promise)_0100----------\");\n        done", "eviceInfo = dmClass.getLocalDeviceInfo((err, data) => {\n                if (er", "     async function getLocalDeviceInfo2(){\n            let deviceInfo = dmClas", "g deviceManagerTest_getLocalDeviceInfoSync_0100----------\");\n        done();\n ", "t_deviceManagerTest_getLocalDeviceInfo1_0100----------\");\n        done();\n    ", "eviceInfo = dmClass.getLocalDeviceInfoSync();\n            expect(deviceInfo.de", "ta;\n                getLocalDeviceInfo2();\n            },1000);\n        });\n  ", "ta;\n                getLocalDeviceInfo1();\n            },1000);\n        });\n  ", "('deviceManagerTest_getLocalDeviceInfoSync_0100', 0, async function (done) {\n ", "t_deviceManagerTest_getLocalDeviceInfo1_0100', 0, async function (done) {\n    ", "g deviceManagerTest_getLocalDeviceInfo(promise)_0100----------\");\n        devi", "     async function getLocalDeviceInfo1(){\n            let deviceInfo = dmClas", "g deviceManagerTest_getLocalDeviceInfoSync_0100----------\");\n        deviceMan", "t_deviceManagerTest_getLocalDeviceInfo1_0100----------\");\n        deviceManage", "('deviceManagerTest_getLocalDeviceInfo(promise)_0100', 0, async function (done"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "getLocalDeviceInfo", "api_method_all": "getLocalDeviceInfo(): Promise<DeviceInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["eviceInfo = dmClass.getLocalDeviceInfo().then(data => {\n            })\n       "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "startDeviceDiscovery", "api_method_all": "startDeviceDiscovery(subscribeInfo: SubscribeInfo): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["g deviceManagerTest_startDeviceDiscovery_0100----------\");\n ", "('deviceManagerTest_startDeviceDiscovery_0120', 0, async fun", "('deviceManagerTest_startDeviceDiscovery_0110', 0, async fun", "('deviceManagerTest_startDeviceDiscovery_0100', 0, async fun", "   let start = data.startDeviceDiscovery(info);\n            "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "stopDeviceDiscovery", "api_method_all": "stopDeviceDiscovery(subscribeId: number): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["g deviceManagerTest_stopDeviceDiscovery_0100----------\");\n ", "   let start = data.stopDeviceDiscovery(subscribeId);\n     ", "('deviceManagerTest_stopDeviceDiscovery_0100', 0, async fun"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "authenticateDevice", "api_method_all": "authenticateDevice(deviceInfo: DeviceInfo, authParam: AuthParam, callback: AsyncCallback<{deviceId: string, pinTone ?: number}>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "unAuthenticateDevice", "api_method_all": "unAuthenticateDevice(deviceInfo: DeviceInfo): void\n\n     \n    verifyAuthInfo(authInfo: AuthInfo, callback: AsyncCallback<{deviceId: string, level: number}>): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["[deviceManagerTest] unAuthenticateDevice error\");\n          ", "('deviceManagerTest_unAuthenticateDevice_0100', 0, async fun", "  deviceManagerTest_unAuthenticateDevice_0100\n     * @tc.nam", "et result = dmClass.unAuthenticateDevice(deviceInfo, authPar", "g deviceManagerTest_unAuthenticateDevice_0100----------\");\n "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "verifyAuthInfo", "api_method_all": "verifyAuthInfo(authInfo: AuthInfo, callback: AsyncCallback<{deviceId: string, level: number}>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": [" }\n            data.verifyAuthInfo(authInfo, (err, data) => {\n            ", "  deviceManagerTest_verifyAuthInfo_0100\n     * @tc.name    testcase two fo", "   testcase two for verifyAuthInfo in correct para \n     * @tc.desc    Fun"], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "on", "api_method_all": "on(type: 'deviceStateChange', callback: Callback<{ action: DeviceStateChangeAction, device: DeviceInfo }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 324, "since": 8, "api_used": "\u662f", "lines": ["vice('config')\n    configService.setConfig(this)\n    require('", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "   title: ''\n  },\n  onInit() {\n    this.title = this.$t('strin", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "e.info('AceApplication onDestroy');\n    }\n};\n", ",\n  onShow() {\n    console.info('onShow finish')\n    const cor", "ngs.world');\n  },\n  onShow() {\n    console.info('onShow finish", "-------\");\n        done();\n    })   \n\n    \n    it('deviceManag", "getDefaultService('config')\n    configService.setConfig(this)\n", "nShow finish')\n    const core = Core.getInstance()\n    core.in", "       });\n        console.log(\"----------stop running deviceM", "        })\n        console.log(\"----------stop running deviceM", "00', 0, async function (done) {\n        console.log(\"---------", "re.execute()\n  },\n  onReady() {\n  },\n}\n", "  configService.setConfig(this)\n    require('../../test/List.t", "n (done) {\n        console.log(\"----------start running device", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", " {\n                console.log(\"[deviceManagerTest] createDevi", "e.init()\n    const configService = core.getDefaultService('con", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "0, async function (done) {\n        console.log(\"----------star", "-------\");\n        done();\n    })\n\n    \n    it('deviceManagerT", "   core.init()\n    const configService = core.getDefaultServic", "     });  \n        console.log(\"----------stop running deviceM", "ManagerTest', function() {\n\n    \n    it('deviceManagerTest_cre", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", " });      \n        console.log(\"----------stop running deviceM", "{\n    console.info('onShow finish')\n    const core = Core.getI"], "files": ["app.js", "Device_Manager.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "off", "api_method_all": "off(type: 'deviceStateChange', callback?: Callback<{ action: DeviceStateChangeAction, device: DeviceInfo }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 24, "since": 0, "api_used": "\u662f", "lines": ["      let fa = data.off('serviceDie', () => {});\n            ex", "  deviceManagerTest_off-discoverFail_0100\n     * @tc.name    te", "('deviceManagerTest_off-discoverFail_0100', 0, async function (", "      let fa = data.off('discoverFail', () => {});\n            ", "g deviceManagerTest_off-deviceFound_0100----------\");\n        d", "se for discoverFail off\n     * @tc.desc    Function test\n     *", "  deviceManagerTest_off-deviceFound_0100\n     * @tc.name    tes", "g deviceManagerTest_off-deviceStateChange_0100----------\");\n   ", "('deviceManagerTest_off-serviceDie_0100', 0, async function (do", "('deviceManagerTest_off-deviceFound_0100', 0, async function (d", "g deviceManagerTest_off-discoverFail_0100----------\");\n        ", "  deviceManagerTest_off-serviceDie_0100\n     * @tc.name    test", "      let fa = data.off('deviceFound', () => {});\n            e", "case for serviceDie off\n     * @tc.desc    Function test\n     *", "g deviceManagerTest_off-serviceDie_0100----------\");\n        do", "('deviceManagerTest_off-deviceStateChange_0100', 0, async funct", "ase for deviceFound off\n     * @tc.desc    Function test\n     *", "r deviceStateChange off\n     * @tc.desc    Function test\n     *", "g deviceManagerTest_off-serviceDie_0100----------\");\n        de", "      let fa = data.off('deviceStateChange', () => {});\n       ", "  deviceManagerTest_off-deviceStateChange_0100\n     * @tc.name "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "on", "api_method_all": "on(type: 'deviceFound', callback: Callback<{ subscribeId: number, device: DeviceInfo }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 324, "since": 8, "api_used": "\u662f", "lines": ["vice('config')\n    configService.setConfig(this)\n    require('", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "   title: ''\n  },\n  onInit() {\n    this.title = this.$t('strin", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "e.info('AceApplication onDestroy');\n    }\n};\n", ",\n  onShow() {\n    console.info('onShow finish')\n    const cor", "ngs.world');\n  },\n  onShow() {\n    console.info('onShow finish", "-------\");\n        done();\n    })   \n\n    \n    it('deviceManag", "getDefaultService('config')\n    configService.setConfig(this)\n", "nShow finish')\n    const core = Core.getInstance()\n    core.in", "       });\n        console.log(\"----------stop running deviceM", "        })\n        console.log(\"----------stop running deviceM", "00', 0, async function (done) {\n        console.log(\"---------", "re.execute()\n  },\n  onReady() {\n  },\n}\n", "  configService.setConfig(this)\n    require('../../test/List.t", "n (done) {\n        console.log(\"----------start running device", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", " {\n                console.log(\"[deviceManagerTest] createDevi", "e.init()\n    const configService = core.getDefaultService('con", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "0, async function (done) {\n        console.log(\"----------star", "-------\");\n        done();\n    })\n\n    \n    it('deviceManagerT", "   core.init()\n    const configService = core.getDefaultServic", "     });  \n        console.log(\"----------stop running deviceM", "ManagerTest', function() {\n\n    \n    it('deviceManagerTest_cre", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", " });      \n        console.log(\"----------stop running deviceM", "{\n    console.info('onShow finish')\n    const core = Core.getI"], "files": ["app.js", "Device_Manager.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "off", "api_method_all": "off(type: 'deviceFound', callback?: Callback<{ subscribeId: number, device: DeviceInfo }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 24, "since": 0, "api_used": "\u662f", "lines": ["      let fa = data.off('serviceDie', () => {});\n            ex", "  deviceManagerTest_off-discoverFail_0100\n     * @tc.name    te", "('deviceManagerTest_off-discoverFail_0100', 0, async function (", "      let fa = data.off('discoverFail', () => {});\n            ", "g deviceManagerTest_off-deviceFound_0100----------\");\n        d", "se for discoverFail off\n     * @tc.desc    Function test\n     *", "  deviceManagerTest_off-deviceFound_0100\n     * @tc.name    tes", "g deviceManagerTest_off-deviceStateChange_0100----------\");\n   ", "('deviceManagerTest_off-serviceDie_0100', 0, async function (do", "('deviceManagerTest_off-deviceFound_0100', 0, async function (d", "g deviceManagerTest_off-discoverFail_0100----------\");\n        ", "  deviceManagerTest_off-serviceDie_0100\n     * @tc.name    test", "      let fa = data.off('deviceFound', () => {});\n            e", "case for serviceDie off\n     * @tc.desc    Function test\n     *", "g deviceManagerTest_off-serviceDie_0100----------\");\n        do", "('deviceManagerTest_off-deviceStateChange_0100', 0, async funct", "ase for deviceFound off\n     * @tc.desc    Function test\n     *", "r deviceStateChange off\n     * @tc.desc    Function test\n     *", "g deviceManagerTest_off-serviceDie_0100----------\");\n        de", "      let fa = data.off('deviceStateChange', () => {});\n       ", "  deviceManagerTest_off-deviceStateChange_0100\n     * @tc.name "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "on", "api_method_all": "on(type: 'discoverFail', callback: Callback<{ subscribeId: number, reason: number }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 324, "since": 8, "api_used": "\u662f", "lines": ["vice('config')\n    configService.setConfig(this)\n    require('", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "   title: ''\n  },\n  onInit() {\n    this.title = this.$t('strin", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "e.info('AceApplication onDestroy');\n    }\n};\n", ",\n  onShow() {\n    console.info('onShow finish')\n    const cor", "ngs.world');\n  },\n  onShow() {\n    console.info('onShow finish", "-------\");\n        done();\n    })   \n\n    \n    it('deviceManag", "getDefaultService('config')\n    configService.setConfig(this)\n", "nShow finish')\n    const core = Core.getInstance()\n    core.in", "       });\n        console.log(\"----------stop running deviceM", "        })\n        console.log(\"----------stop running deviceM", "00', 0, async function (done) {\n        console.log(\"---------", "re.execute()\n  },\n  onReady() {\n  },\n}\n", "  configService.setConfig(this)\n    require('../../test/List.t", "n (done) {\n        console.log(\"----------start running device", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", " {\n                console.log(\"[deviceManagerTest] createDevi", "e.init()\n    const configService = core.getDefaultService('con", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "0, async function (done) {\n        console.log(\"----------star", "-------\");\n        done();\n    })\n\n    \n    it('deviceManagerT", "   core.init()\n    const configService = core.getDefaultServic", "     });  \n        console.log(\"----------stop running deviceM", "ManagerTest', function() {\n\n    \n    it('deviceManagerTest_cre", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", " });      \n        console.log(\"----------stop running deviceM", "{\n    console.info('onShow finish')\n    const core = Core.getI"], "files": ["app.js", "Device_Manager.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "off", "api_method_all": "off(type: 'discoverFail', callback?: Callback<{ subscribeId: number, reason: number }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 24, "since": 0, "api_used": "\u662f", "lines": ["      let fa = data.off('serviceDie', () => {});\n            ex", "  deviceManagerTest_off-discoverFail_0100\n     * @tc.name    te", "('deviceManagerTest_off-discoverFail_0100', 0, async function (", "      let fa = data.off('discoverFail', () => {});\n            ", "g deviceManagerTest_off-deviceFound_0100----------\");\n        d", "se for discoverFail off\n     * @tc.desc    Function test\n     *", "  deviceManagerTest_off-deviceFound_0100\n     * @tc.name    tes", "g deviceManagerTest_off-deviceStateChange_0100----------\");\n   ", "('deviceManagerTest_off-serviceDie_0100', 0, async function (do", "('deviceManagerTest_off-deviceFound_0100', 0, async function (d", "g deviceManagerTest_off-discoverFail_0100----------\");\n        ", "  deviceManagerTest_off-serviceDie_0100\n     * @tc.name    test", "      let fa = data.off('deviceFound', () => {});\n            e", "case for serviceDie off\n     * @tc.desc    Function test\n     *", "g deviceManagerTest_off-serviceDie_0100----------\");\n        do", "('deviceManagerTest_off-deviceStateChange_0100', 0, async funct", "ase for deviceFound off\n     * @tc.desc    Function test\n     *", "r deviceStateChange off\n     * @tc.desc    Function test\n     *", "g deviceManagerTest_off-serviceDie_0100----------\");\n        de", "      let fa = data.off('deviceStateChange', () => {});\n       ", "  deviceManagerTest_off-deviceStateChange_0100\n     * @tc.name "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "on", "api_method_all": "on(type: 'serviceDie', callback: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 324, "since": 0, "api_used": "\u662f", "lines": ["vice('config')\n    configService.setConfig(this)\n    require('", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "   title: ''\n  },\n  onInit() {\n    this.title = this.$t('strin", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "e.info('AceApplication onDestroy');\n    }\n};\n", ",\n  onShow() {\n    console.info('onShow finish')\n    const cor", "ngs.world');\n  },\n  onShow() {\n    console.info('onShow finish", "-------\");\n        done();\n    })   \n\n    \n    it('deviceManag", "getDefaultService('config')\n    configService.setConfig(this)\n", "nShow finish')\n    const core = Core.getInstance()\n    core.in", "       });\n        console.log(\"----------stop running deviceM", "        })\n        console.log(\"----------stop running deviceM", "00', 0, async function (done) {\n        console.log(\"---------", "re.execute()\n  },\n  onReady() {\n  },\n}\n", "  configService.setConfig(this)\n    require('../../test/List.t", "n (done) {\n        console.log(\"----------start running device", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", " {\n                console.log(\"[deviceManagerTest] createDevi", "e.init()\n    const configService = core.getDefaultService('con", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "0, async function (done) {\n        console.log(\"----------star", "-------\");\n        done();\n    })\n\n    \n    it('deviceManagerT", "   core.init()\n    const configService = core.getDefaultServic", "     });  \n        console.log(\"----------stop running deviceM", "ManagerTest', function() {\n\n    \n    it('deviceManagerTest_cre", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", " });      \n        console.log(\"----------stop running deviceM", "{\n    console.info('onShow finish')\n    const core = Core.getI"], "files": ["app.js", "Device_Manager.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "on", "api_method_all": "on(type: 'serviceDie', callback: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 324, "since": 0, "api_used": "\u662f", "lines": ["vice('config')\n    configService.setConfig(this)\n    require('", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "   title: ''\n  },\n  onInit() {\n    this.title = this.$t('strin", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "e.info('AceApplication onDestroy');\n    }\n};\n", ",\n  onShow() {\n    console.info('onShow finish')\n    const cor", "ngs.world');\n  },\n  onShow() {\n    console.info('onShow finish", "-------\");\n        done();\n    })   \n\n    \n    it('deviceManag", "getDefaultService('config')\n    configService.setConfig(this)\n", "nShow finish')\n    const core = Core.getInstance()\n    core.in", "       });\n        console.log(\"----------stop running deviceM", "        })\n        console.log(\"----------stop running deviceM", "00', 0, async function (done) {\n        console.log(\"---------", "re.execute()\n  },\n  onReady() {\n  },\n}\n", "  configService.setConfig(this)\n    require('../../test/List.t", "n (done) {\n        console.log(\"----------start running device", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", " {\n                console.log(\"[deviceManagerTest] createDevi", "e.init()\n    const configService = core.getDefaultService('con", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "0, async function (done) {\n        console.log(\"----------star", "-------\");\n        done();\n    })\n\n    \n    it('deviceManagerT", "   core.init()\n    const configService = core.getDefaultServic", "     });  \n        console.log(\"----------stop running deviceM", "ManagerTest', function() {\n\n    \n    it('deviceManagerTest_cre", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", " });      \n        console.log(\"----------stop running deviceM", "{\n    console.info('onShow finish')\n    const core = Core.getI"], "files": ["app.js", "Device_Manager.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "off", "api_method_all": "off(type: 'serviceDie', callback?: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 24, "since": 0, "api_used": "\u662f", "lines": ["      let fa = data.off('serviceDie', () => {});\n            ex", "  deviceManagerTest_off-discoverFail_0100\n     * @tc.name    te", "('deviceManagerTest_off-discoverFail_0100', 0, async function (", "      let fa = data.off('discoverFail', () => {});\n            ", "g deviceManagerTest_off-deviceFound_0100----------\");\n        d", "se for discoverFail off\n     * @tc.desc    Function test\n     *", "  deviceManagerTest_off-deviceFound_0100\n     * @tc.name    tes", "g deviceManagerTest_off-deviceStateChange_0100----------\");\n   ", "('deviceManagerTest_off-serviceDie_0100', 0, async function (do", "('deviceManagerTest_off-deviceFound_0100', 0, async function (d", "g deviceManagerTest_off-discoverFail_0100----------\");\n        ", "  deviceManagerTest_off-serviceDie_0100\n     * @tc.name    test", "      let fa = data.off('deviceFound', () => {});\n            e", "case for serviceDie off\n     * @tc.desc    Function test\n     *", "g deviceManagerTest_off-serviceDie_0100----------\");\n        do", "('deviceManagerTest_off-deviceStateChange_0100', 0, async funct", "ase for deviceFound off\n     * @tc.desc    Function test\n     *", "r deviceStateChange off\n     * @tc.desc    Function test\n     *", "g deviceManagerTest_off-serviceDie_0100----------\");\n        de", "      let fa = data.off('deviceStateChange', () => {});\n       ", "  deviceManagerTest_off-deviceStateChange_0100\n     * @tc.name "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceManager", "api_method_name": "off", "api_method_all": "off(type: 'serviceDie', callback?: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 24, "since": 0, "api_used": "\u662f", "lines": ["      let fa = data.off('serviceDie', () => {});\n            ex", "  deviceManagerTest_off-discoverFail_0100\n     * @tc.name    te", "('deviceManagerTest_off-discoverFail_0100', 0, async function (", "      let fa = data.off('discoverFail', () => {});\n            ", "g deviceManagerTest_off-deviceFound_0100----------\");\n        d", "se for discoverFail off\n     * @tc.desc    Function test\n     *", "  deviceManagerTest_off-deviceFound_0100\n     * @tc.name    tes", "g deviceManagerTest_off-deviceStateChange_0100----------\");\n   ", "('deviceManagerTest_off-serviceDie_0100', 0, async function (do", "('deviceManagerTest_off-deviceFound_0100', 0, async function (d", "g deviceManagerTest_off-discoverFail_0100----------\");\n        ", "  deviceManagerTest_off-serviceDie_0100\n     * @tc.name    test", "      let fa = data.off('deviceFound', () => {});\n            e", "case for serviceDie off\n     * @tc.desc    Function test\n     *", "g deviceManagerTest_off-serviceDie_0100----------\");\n        do", "('deviceManagerTest_off-deviceStateChange_0100', 0, async funct", "ase for deviceFound off\n     * @tc.desc    Function test\n     *", "r deviceStateChange off\n     * @tc.desc    Function test\n     *", "g deviceManagerTest_off-serviceDie_0100----------\");\n        de", "      let fa = data.off('deviceStateChange', () => {});\n       ", "  deviceManagerTest_off-deviceStateChange_0100\n     * @tc.name "], "files": ["Device_Manager.test.js"], "is_white": " ", "desc": " "}]}