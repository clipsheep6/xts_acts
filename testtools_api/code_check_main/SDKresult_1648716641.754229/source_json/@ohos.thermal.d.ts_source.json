{"subsystem_ch": "\u7535\u6e90\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "powermgr", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.thermal", "api": [{"api_class_name": "thermal", "api_method_all": "declare namespace thermal {\n    \n    export enum ThermalLevel {\n        \n        COOL = 0,\n        \n        NORMAL = 1,\n        \n        WARM = 2,\n        \n        HOT = 3,\n        \n        OVERHEATED = 4,\n        \n        WARNING = 5,\n        \n        EMERGENCY = 6,\n    }\n    \n    function subscribeThermalLevel(callback: AsyncCallback<ThermalLevel>): void;\n\n    \n    function unsubscribeThermalLevel(callback?: AsyncCallback<void>): void;\n\n    \n    function getThermalLevel(): ThermalLevel;\n}", "api_method_name": "thermal", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 64, "since": 0, "api_used": "\u662f", "lines": ["", "     expect(warm >= thermal.ThermalLevel.COOL &", "  expect(warning >= thermal.ThermalLevel.COOL &", "thermal from \"@ohos.thermal\"\nimport { describe,", " i++) {\n            thermal.subscribeThermalLev", "       emergency <= thermal.ThermalLevel.EMERGE", "vel.COOL && warm <= thermal.ThermalLevel.EMERGE", "     expect(cold >= thermal.ThermalLevel.COOL &", "on (done) {\n        thermal.subscribeThermalLev", "      overheated <= thermal.ThermalLevel.EMERGE", "est.js')", " i++) {\n            thermal.unsubscribeThermalL", ".COOL && warning <= thermal.ThermalLevel.EMERGE", "evel.COOL && hot <= thermal.ThermalLevel.EMERGE", "alLevel from \"@ohos.thermal\"\nimport { describe,", "@system.app'\nimport thermal from \"@ohos.thermal", "thermal from \"@ohos.thermal\"\nimport ThermalLeve", "         let warm = thermal.getThermalLevel();\n", "          let hot = thermal.getThermalLevel();\n", "vel.COOL && cold <= thermal.ThermalLevel.EMERGE", "vel.COOL && cool <= thermal.ThermalLevel.EMERGE", "   let overheated = thermal.getThermalLevel();\n", "expect(emergency >= thermal.ThermalLevel.COOL &", "    let emergency = thermal.getThermalLevel();\n", "      expect(hot >= thermal.ThermalLevel.COOL &", "        let level = thermal.getThermalLevel();\n", "thermal from \"@ohos.thermal\"\n\ndescribe('appInfo", "    expect(level >= thermal.ThermalLevel.COOL &", "     expect(cool >= thermal.ThermalLevel.COOL &", "> {\n                thermal.unsubscribeThermalL", "xpect(overheated >= thermal.ThermalLevel.COOL &", "ommonEvent';\nimport thermal from \"@ohos.thermal", "         let cold = thermal.getThermalLevel();\n", "      let warning = thermal.getThermalLevel();\n"], "files": ["List.test.js", "thermal_unittest.test.js", "thermal_common_event.test.js", "thermal_performance.test.js", "thermal_uint.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "thermal", "api_method_name": "subscribeThermalLevel", "api_method_all": "function subscribeThermalLevel(callback: AsyncCallback<ThermalLevel>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 20, "since": 8, "api_used": "\u662f", "lines": [") {\n        thermal.subscribeThermalLevel((hot) => {\n            console.info(\"ho", "            thermal.subscribeThermalLevel((level) => {\n                console.in", ") {\n        thermal.subscribeThermalLevel((warm) => {\n            console.info(\"w", "nce_003: Promise: unsubscribeThermalLevel Wait Time :  ${waitTime}`);\n    })\n}\n", "          thermal.unsubscribeThermalLevel(() => {\n                console.info(\"u", "mance_002: Promise: subscribeThermalLevel Wait Time :  ${waitTime}`);\n    })\n}\n\nf", ") {\n        thermal.subscribeThermalLevel((cool) => {\n            console.info(\"c", ") {\n        thermal.subscribeThermalLevel((level) => {\n            console.info(\"", "          thermal.unsubscribeThermalLevel(() => {\n                    console.inf", ") {\n        thermal.subscribeThermalLevel((overheated) => {\n            console.i", ") {\n        thermal.subscribeThermalLevel((warning) => {\n            console.info", ") {\n        thermal.subscribeThermalLevel((cool) => {\n            console.info(\"w", ") {\n        thermal.subscribeThermalLevel((emergency) => {\n            console.in"], "files": ["thermal_uint.test.js", "thermal_performance.test.js", "thermal_unittest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "thermal", "api_method_name": "unsubscribeThermalLevel", "api_method_all": "function unsubscribeThermalLevel(callback?: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["            thermal.unsubscribeThermalLevel(() => {\n                    console.inf", "            thermal.unsubscribeThermalLevel(() => {\n                console.info(\"u", "mance_003: Promise: unsubscribeThermalLevel Wait Time :  ${waitTime}`);\n    })\n}\n"], "files": ["thermal_uint.test.js", "thermal_performance.test.js", "thermal_unittest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "thermal", "api_method_name": "getThermalLevel", "api_method_all": "function getThermalLevel(): ThermalLevel;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["t warning = thermal.getThermalLevel();\n                ", "verheated = thermal.getThermalLevel();\n                ", "let level = thermal.getThermalLevel();\n        }\n      ", "emergency = thermal.getThermalLevel();\n                ", " let warm = thermal.getThermalLevel();\n                ", " let cold = thermal.getThermalLevel();\n                ", "let level = thermal.getThermalLevel();\n                ", "  let hot = thermal.getThermalLevel();\n                "], "files": ["thermal_uint.test.js", "thermal_performance.test.js", "thermal_unittest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ThermalLevel", "api_method_all": "export enum ThermalLevel {\n        \n        COOL = 0,\n        \n        NORMAL = 1,\n        \n        WARM = 2,\n        \n        HOT = 3,\n        \n        OVERHEATED = 4,\n        \n        WARNING = 5,\n        \n        EMERGENCY = 6,\n    }", "api_method_name": "ThermalLevel", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 58, "since": 8, "api_used": "\u662f", "lines": ["hos.thermal\"\nimport ThermalLevel from \"@ohos.thermal", "erheated <= thermal.ThermalLevel.EMERGENCY).assertTr", " && cold <= thermal.ThermalLevel.EMERGENCY).assertTr", "ect(warm >= thermal.ThermalLevel.COOL && warm <= the", "arning = thermal.getThermalLevel();\n                ", "   thermal.subscribeThermalLevel((warm) => {\n       ", "   thermal.subscribeThermalLevel((cool) => {\n       ", "mergency >= thermal.ThermalLevel.COOL &&\n           ", "heated = thermal.getThermalLevel();\n                ", "pect(hot >= thermal.ThermalLevel.COOL && hot <= ther", "OL && warm <= level.ThermalLevel.EMERGENCY).assertTr", "   thermal.subscribeThermalLevel((warning) => {\n    ", " thermal.unsubscribeThermalLevel(() => {\n           ", "Promise: unsubscribeThermalLevel Wait Time :  ${wait", "   thermal.subscribeThermalLevel((emergency) => {\n  ", "(warning >= thermal.ThermalLevel.COOL && warning <= ", "rgency = thermal.getThermalLevel();\n                ", " warning <= thermal.ThermalLevel.EMERGENCY).assertTr", ": Promise: subscribeThermalLevel Wait Time :  ${wait", "ct(level >= thermal.ThermalLevel.COOL && warm <= lev", "et hot = thermal.getThermalLevel();\n                ", "t cold = thermal.getThermalLevel();\n                ", "   thermal.subscribeThermalLevel((overheated) => {\n ", "erheated >= thermal.ThermalLevel.COOL &&\n           ", "t warm = thermal.getThermalLevel();\n                ", "mergency <= thermal.ThermalLevel.EMERGENCY).assertTr", "L && hot <= thermal.ThermalLevel.EMERGENCY).assertTr", " level = thermal.getThermalLevel();\n        }\n      ", "ect(cold >= thermal.ThermalLevel.COOL && cold <= the", "   thermal.subscribeThermalLevel((hot) => {\n        ", " && cool <= thermal.ThermalLevel.EMERGENCY).assertTr", "mergency >= thermal.ThermalLevel.COOL && emergency <", "ect(cool >= thermal.ThermalLevel.COOL && cool <= the", "   thermal.subscribeThermalLevel((level) => {\n      ", " && warm <= thermal.ThermalLevel.EMERGENCY).assertTr"], "files": ["thermal_uint.test.js", "thermal_performance.test.js", "thermal_common_event.test.js", "thermal_unittest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ThermalLevel", "api_method_name": "COOL", "api_method_all": "COOL = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["hermal.ThermalLevel.COOL && warm <= level.Th", "hermal.ThermalLevel.COOL && cold <= thermal.", "hermal.ThermalLevel.COOL && emergency <= the", "hermal.ThermalLevel.COOL && warning <= therm", "hermal.ThermalLevel.COOL && cool <= thermal.", "hermal.ThermalLevel.COOL && hot <= thermal.T", "hermal.ThermalLevel.COOL && warm <= thermal.", "hermal.ThermalLevel.COOL &&\n                "], "files": ["thermal_uint.test.js", "thermal_common_event.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ThermalLevel", "api_method_name": "NORMAL", "api_method_all": "NORMAL = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ThermalLevel", "api_method_name": "WARM", "api_method_all": "WARM = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ThermalLevel", "api_method_name": "HOT", "api_method_all": "HOT = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ThermalLevel", "api_method_name": "OVERHEATED", "api_method_all": "OVERHEATED = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ThermalLevel", "api_method_name": "WARNING", "api_method_all": "WARNING = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ThermalLevel", "api_method_name": "EMERGENCY", "api_method_all": "EMERGENCY = 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["hermal.ThermalLevel.EMERGENCY).assertTrue();\n    ", " level.ThermalLevel.EMERGENCY).assertTrue();\n    "], "files": ["thermal_uint.test.js", "thermal_common_event.test.js"], "is_white": " ", "desc": " "}]}