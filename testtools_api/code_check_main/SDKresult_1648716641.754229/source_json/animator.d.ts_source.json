{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\animator", "api": [{"api_class_name": "SpringProp", "api_method_all": "declare class SpringProp {\n  \n  constructor(mass: number, stiffness: number, damping: number);\n}", "api_method_name": "SpringProp", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SpringProp", "api_method_name": "constructor", "api_method_all": "constructor(mass: number, stiffness: number, damping: number)", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SpringMotion", "api_method_all": "declare class SpringMotion {\n  \n  constructor(start: number, end: number, velocity: number, prop: SpringProp);\n}", "api_method_name": "SpringMotion", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SpringMotion", "api_method_name": "constructor", "api_method_all": "constructor(start: number, end: number, velocity: number, prop: SpringProp)", "api_type": "", "api_args_count": 4, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FrictionMotion", "api_method_all": "declare class FrictionMotion {\n  \n  constructor(friction: number, position: number, velocity: number);\n}", "api_method_name": "FrictionMotion", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FrictionMotion", "api_method_name": "constructor", "api_method_all": "constructor(friction: number, position: number, velocity: number)", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollMotion", "api_method_all": "declare class ScrollMotion {\n  \n  constructor(position: number, velocity: number, min: number, max: number, prop: SpringProp);\n}", "api_method_name": "ScrollMotion", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollMotion", "api_method_name": "constructor", "api_method_all": "constructor(position: number, velocity: number, min: number, max: number, prop: SpringProp)", "api_type": "", "api_args_count": 5, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorInterface", "api_method_all": "interface AnimatorInterface {\n  \n  (value: string): AnimatorAttribute;\n}", "api_method_name": "AnimatorInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorInterface", "api_method_name": "value", "api_method_all": "(value: string): AnimatorAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_all": "declare class AnimatorAttribute extends CommonMethod<AnimatorAttribute> {\n  \n  state(value: AnimationStatus): AnimatorAttribute;\n\n  \n  duration(value: number): AnimatorAttribute;\n\n  \n  curve(value: Curve): AnimatorAttribute;\n\n  \n  delay(value: number): AnimatorAttribute;\n\n  \n  fillMode(value: FillMode): AnimatorAttribute;\n\n  \n  iterations(value: number): AnimatorAttribute;\n\n  \n  playMode(value: PlayMode): AnimatorAttribute;\n\n  \n  motion(value: SpringMotion | FrictionMotion | ScrollMotion): AnimatorAttribute;\n\n  \n  onStart(event: () => void): AnimatorAttribute;\n\n  \n  onPause(event: () => void): AnimatorAttribute;\n\n  \n  onRepeat(event: () => void): AnimatorAttribute;\n\n  \n  onCancel(event: () => void): AnimatorAttribute;\n\n  \n  onFinish(event: () => void): AnimatorAttribute;\n\n  \n  onFrame(event: (value: number) => void): AnimatorAttribute;\n}", "api_method_name": "AnimatorAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "state", "api_method_all": "state(value: AnimationStatus): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1569, "since": 7, "api_used": "\u662f", "lines": ["tart to emit action state\")\n            event", "ange current action state is: ' + this.onActi", "stateChangCallBack] stateChangCallBack \");\n  ", "teChangeEvent, this.stateChangCallBack);\n  }\n", "ngeEventThree, this.stateChangCallBack);\n  }\n", "  events_emitter.on(stateChangeEvent2, this.s", "ck);\n  }\n\n  private stateChangCallBack = (eve", "    }\n  }\n  private stateChangCallBack = (eve", "  events_emitter.on(stateChangeEvent, this.st", "onClick emit action state err: \" + JSON.strin", "info(\"[column] page state change called:\" + J", "\n    console.info(\"[stateChangCallBack] state", "Flag current action state is: ' + this.disApp", "CallBack);\n\n    var stateChangeEventTwo = {\n ", " called ');\n    var stateChangeEvent = {\n    ", "info(\"[column] page stateChangCallBack\");\n   ", "     console.info(\"[stateChangCallBack] state", "CallBack);\n\n    var stateChangeEventThree = {", "CallBack);\n\n    var stateChangeEvent2 = {\n   ", "info(\"[appear] page state change called:\" + J", "teChangeEvent, this.stateChangCallBack);\n\n   ", "aChange emit action state err: \" + JSON.strin", "ction.Row\n  private stateChangCallBack = (eve", "tart to emit action state\")\n              eve", "w called');\n    var stateChangeEvent = {\n    ", "stateChangCallBack] state change called: \" + ", "k);\n\n  }\n\n  private stateChangCallBack = (eve", "Flag current action state is: ' + this.appear", "ole.info(\"Flex page state change called:\" + J", "earFlag emit action state err: \" + JSON.strin", "hangeEventTwo, this.stateChangCallBack);\n\n   ", "info(\"[appear] page stateChangCallBack\");\n   ", "nfo(\"[ellipse] page state change called:\" + J", "nfo(\"[ellipse] page stateChangCallBack\");\n   ", "  events_emitter.on(stateChangeEventThree, th", "  events_emitter.on(stateChangeEventTwo, this", "eChangeEvent2, this.stateChangCallBack);\n\n  }"], "files": ["ohosPrompt.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "configuration.ets", "CounterJsunit.test.ets", "ImageEffectsJsunit.test.ets", "video.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "CheckboxGroupJsunit.test.ets", "column.ets", "richText.ets", "checkboxGroup.ets", "sourceType.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "TextStyleJsunit.test.ets", "geometryTransition.ets", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "marquee.ets", "panel.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "border.ets", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "FillModeJsunit.test.ets", "CalendarJsunit.test.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "TouchJsunit.test.ets", "transForm.ets", "LongPressGesture.test.ets", "path.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "LinkJsunit.test.ets", "scrollCode.ets", "CurvesJsunit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "GridJsnuit.test.ets", "focus.ets", "VideoJsunit.test.ets", "touch.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "background.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "gauge.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "ScrollerBarJsunit.test.ets", "customDialogController.ets", "text.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "tapGesture.ets", "flexDirection.ets", "FlexJsunit.test.ets", "shapeClipping.ets", "PropJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "Canvas2Jsunit.test.ets", "ListJsunit.test.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "ColorGradientJsunit.test.ets", "flex.ets", "MotionPathJsunit.test.ets", "gridContainer.ets", "gridPage.ets", "ShapeJsunit.test.ets", "enable.ets", "PieceCode.ets", "badge.ets", "GlobalJsunit.test.ets", "textStyle.ets", "imageEffects.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "circle.ets", "listItem.ets", "CustomDialogControllerJsunit.test.ets", "Button.ets", "ScrollJsunit.test.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "ContentStorage.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "direction2.ets", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "ohosMatrix4.ets", "CircleJsunit.test.ets", "divider.ets", "ScrollBar.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "line.ets", "TransFormJsunit.test.ets", "priorityGesture.ets", "GestureModeJsunit.test.ets", "touchAble.ets", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CheckboxJsunit.test.ets", "progress.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "datePicker.ets", "pageTransition.ets", "TabsJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "GridSettingsJsunit.test.ets", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "areaChange.ets", "BindPopupJsunit.test.ets", "Link.ets", "parallelGesture.ets", "select.ets", "timeStamp.ets", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "duration", "api_method_all": "duration(value: number): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 240, "since": 7, "api_used": "\u662f", "lines": ["reateAnimator({\n    duration: 3000,\n    fill: 'f", "ata: {\n            \"duration\": \"nan\"\n          }", "xpect(objNew.$attrs.duration).assertEqual('500.0", "ull) {\n        this.duration = parseInt(eventDat", "he text is hidden', duration: 2000 })\n          ", "nsole.info(\"button6 duration value is : \" + this", "value is : \" + this.duration)\n          animateT", "xpect(objNew.$attrs.duration).assertEqual('nan')", "ata: {\n            \"duration\": \"500\"\n          }", "        animateTo({ duration: this.duration }, (", "To({ duration: this.duration }, () => {\n        ", "gify(this.matrix1), duration: 200 })\n          t", "nsole.info(\"button6 duration test animateTo STAR", " if (eventData.data.duration != null) {\n        ", "3.jpg',\n            duration: 500,\n            w", "ssage: \"sucessful\", duration: 200 })\n          t", "     .duration(this.duration)\n      .vertical(th", "s = {\n              duration: 5000,\n            ", "        animateTo({ duration: 1000 }, () => {\n  ", "nsole.info(\"button1 duration test animateTo STAR", "nsole.info(\"button1 duration value is : \" + this", " {\n                \"duration\": this.duration,\n  ", "an = false\n  @State duration: number = 100\n  @St", "2.jpg',\n            duration: 500,\n            w", "options = {\n        duration: 2000,\n        iter", "   \"duration\": this.duration,\n              }\n  ", "  expect(obj.$attrs.duration).assertEqual('1000.", "4.jpg',\n            duration: 500,\n            w", "nsole.info(\"button7 duration test animateTo STAR", "eInt(eventData.data.duration);\n      }\n      if ", "an = false\n  @State duration: number = 1000\n  @S", "nsole.info(\"button7 duration value is : \" + this", "The text is shown', duration: 2000 })\n          ", "p(this.loop)\n      .duration(this.duration)\n    ", "1.jpg',\n            duration: 500,\n            w"], "files": ["animate.ets", "pageTransition2.ets", "ohosPrompt.ets", "imageAnimatorProps.test.js", "ohosMatrix4.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "fillMode.ets", "curves.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "geometryTransition.ets", "swiperProps.test.js", "AnimateJsunit.test.ets", "animatorOption.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "transition.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "curve", "api_method_all": "curve(value: Curve): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 51, "since": 7, "api_used": "\u662f", "lines": [")=> {\n          let curve = Curves.cubicBezie", "ata: {\n            \"curve\": 123\n          }\n ", "value is : \" + this.curve)\n          animateT", "ept(indexEvent.data.curve).assertEqual('Ease'", "   this.widthSize = curve.interpolate(0.5) * ", "  console.info(\"get curves state pages:\" + JS", "console.error(\"push curves page error:\" + err", "nsole.info(\"button2 curve value is : \" + this", "ept(indexEvent.data.curve).assertEqual('Linea", "nsole.info(\"button2 curve test animateTo STAR", "r({ duration: 1200, curve: Curve.Linear })\n  ", " if (eventData.data.curve != null) {\n        ", "mber = 100\n  @State curve: string = 'Ease'\n  ", "ept(indexEvent.data.curve).assertEqual('123')", "1.0);\n          let curve6 = Curves.LinearOut", "n({duration: 2000 , curve: Curves.spring(0.25", "        uri: 'pages/curves',\n      }\n      tr", "1.0);\n          let curve8 = Curves.ExtremeDe", "1.0);\n          let curve1 = Curves.init();\n ", " console.info(\"push curves page result:\" + JS", "1.0);\n          let curve9 = Curves.Sharp(0.3", "it();\n          let curve2 = Curves.Curve.Eas", "s));\n        if (!(\"curves\" == pages.name)) {", " Curves from '@ohos.curves'\n\n@Entry\n@Componen", " {\n                \"curve\": this.curve,\n     ", "      \"curve\": this.curve,\n              }\n  ", "o({ duration: 4000, curve: Curve.Linear }, ()", "1.0);\n          let curve10 = Curves.Rhythm(0", "  this.heightSize = curve.interpolate(0.5) * ", "ull) {\n        this.curve = eventData.data.cu", "        animateTo({ curve: this.curve }, () =", "1.0);\n          let curve4 = Curves.Curve.Eas", "t({ duration: 1500, curve: Curve.Ease })\n    ", "rt default function curvesJsunit() {\n  descri", "ve = eventData.data.curve;\n      }\n      if (", "1.0);\n          let curve3 = Curves.Curve.Eas", "  console.info(\"get curves state pages.name:\"", "ept(indexEvent.data.curve).assertEqual('abc')", "      console.info(\"curves beforeEach start\")", "      console.info(\"curves after each called\"", "ateTo({ curve: this.curve }, () => {\n        ", "1.0);\n          let curve5 = Curves.FastOutSl", "ata: {\n            \"curve\": \"Linear\"\n        ", "1.0);\n          let curve11 = Curves.cubicBez", "t.test.ets';\nimport curvesJsunit from './Curv", "1.0);\n          let curve12 = Curves.spring(1", "ata: {\n            \"curve\": 'abc'\n          }", "1.0);\n          let curve7 = Curves.FastOutLi"], "files": ["animate.ets", "pageTransition2.ets", "pageTransition.ets", "AnimateJsunit.test.ets", "motionPath.ets", "List.test.ets", "curves.ets", "CurvesJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "delay", "api_method_all": "delay(value: number): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 59, "since": 7, "api_used": "\u662f", "lines": [" 2000,\n            \"delay\": 5,\n            \"t", "\n                  \"delay\": this.delay,\n     ", "(indexEventOne.data.delay).assertEqual(5);\n  ", "ion: this.duration, delay: this.delay, type: ", "ber = 1000\n  @State delay: number = 0\n  @Stat", "ull) {\n        this.delay = eventData.data.de", " if (eventData.data.delay != null) {\n        ", "sing: 'friction',\n  delay: 100,\n  fill: 'forw", "      \"delay\": this.delay,\n                  ", "ay = eventData.data.delay;\n      }\n      if (", "ration, delay: this.delay, type: this.type })", "ng: 'friction',\n    delay: 100,\n    fill: 'fo"], "files": ["SharedTransitionJsunit.test.ets", "sharedTransition.ets", "basicabilityapi.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "fillMode", "api_method_all": "fillMode(value: FillMode): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 57, "since": 7, "api_used": "\u662f", "lines": ["or('beforeEach push fillMode page error:' + err)", "      console.info(\"fillModeTest_0200 click resu", "pped\n          this.fillMode = FillMode.None\n   ", "   \"fillMode\": this.fillMode\n              }\n   ", "      console.info(\"fillModeTest_0200 on events_", "  selectJsunit();\n  fillModeJsunit();\n  enumsIma", "ning\n          this.fillMode = FillMode.Backward", "fo('beforeEach push fillMode page result:' + JSO", "y\n@Component\nstruct fillModeExample {\n  @State s", "\n    });\n\n      it('fillModeText_0100', 0, async", "preDecode)\n        .fillMode(this.fillMode).iter", "      console.info('fillMode test after each cal", "      console.info('fillModeTest beforeEach call", " {\n                \"fillMode\": this.fillMode\n   ", "        uri: 'pages/fillMode',\n      }\n      try", "number = 0\n  @State fillMode: FillMode = FillMod", "nfo('beforeEach get fillMode state pages.name:' ", "      console.info('fillModeTest_0300 END');\n   ", "      console.info('fillModeTest_0100 END');\n   ", "      console.info(\"fillModeTest_0100 click resu", "      console.info(\"fillModeTest_0300 on events_", "rt default function fillModeJsunit(){\n  describe", "unit(){\n  describe('fillModeTest', function (){\n", "      console.info(\"fillModeText_0100 component ", ");\n    });\n\n    it('fillModeTest_0200', 0, async", ");\n    });\n\n    it('fillModeTest_0300', 0, async", ");\n    });\n\n    it('fillModeTest_0100', 0, async", "     .fillMode(this.fillMode).iterations(this.it", "      console.info(\"fillModeTest_0200 get state ", "      console.info('fillModeTest_0200 END');\n   ", "      console.info(\"fillModeTest_0300 click resu", "      console.info('fillModeTest_0300 START');\n ", "      console.info('fillModeTest_0100 START');\n ", "ect(indexEvent.data.fillMode).assertEqual(FillMo", "      console.info('fillModeText_0100 START');\n ", "t.test.ets';\nimport fillModeJsunit from './FillM", "      console.info(\"fillModeTest_0100 get state ", "      console.info('fillModeTest_0200 START');\n ", "used\n          this.fillMode = FillMode.Both\n   ", "nfo('beforeEach get fillMode state pages:' + JSO", "      console.info(\"fillModeTest_0300 get state ", "      console.info(\"fillModeTest_0100 on events_", "s));\n        if (!('fillMode' == pages.name)) {\n"], "files": ["GestureModeJsunit.test.ets", "FillModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "animationStatus.ets", "imageAnimator.ets", "List.test.ets", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "iterations", "api_method_all": "iterations(value: number): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 64, "since": 7, "api_used": "\u662f", "lines": ["=> {\n          this.iterations = -1\n        })\n   ", " {\n                \"iterations\": this.iterations\n ", "an = false\n  @State iterations: number = 1\n  @Stat", "        animateTo({ iterations: this.iteration }, ", "de).iterations(this.iterations).width(325).height(", "n = false;\n  @State iterations: number = 1;\n\n  bui", "ect(indexEvent.data.iterations).assertEqual(1);\n  ", "Mode(FillMode.None).iterations(this.iterations).wi", "ll: 'forwards',\n    iterations: 2,\n    direction: ", "ne).iterations(this.iterations).width(325).height(", "Mode(this.fillMode).iterations(this.iterations).wi", "fill: 'forwards',\n  iterations: 2,\n  direction: 'n", "=> {\n          this.iterations = 1\n          try {", " \"iterations\": this.iterations\n              }\n   ", "=> {\n          this.iterations = 1\n        })\n    ", "=> {\n          this.iterations = -1\n          try ", " {\n                \"iterations\": this.iteration,\n ", "nsole.info(\"button3 iterations test animateTo STAR", "tion: 2000,\n        iterations: 1,\n        directi", "5000,\n              iterations: 2,\n              b"], "files": ["animate.ets", "ImageAnimatorJsunit.test.ets", "animationStatus.ets", "imageAnimator.ets", "animatorOption.ets", "index.js", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "playMode", "api_method_all": "playMode(value: PlayMode): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 48, "since": 7, "api_used": "\u662f", "lines": ["ropStretch: this.displayModePropStretch,\n       ", "displayMode(this.displayMode)\n      .displayCoun", "      console.info('playModeTest_0100 START');\n ", "   \"playMode\": this.playMode,\n              }\n  ", "temSpace)\n      .displayMode(this.displayMode)\n ", "r()\n        this.displayModePropStretch = this.$", "      console.info(\"playModeTest_0100 on events_", "t.test.ets';\nimport playModeJsunit from './PlayM", "      console.info('playModeTest_0100 END');\n   ", "g: null,\n        displayModePropStretch: null,\n ", "        uri: 'pages/playMode',\n      }\n      try", ".info('testSwiperDisplayModePropStretch START');", "=> {\n          this.playMode = PlayMode.Alternat", "AutoLinear: this.displayModePropAutoLinear,\n    ", "r()\n        this.displayModePropAutoLinear = thi", "ing,\n            displayModePropStretch: this.di", " {\n                \"playMode\": this.playMode,\n  ", "tch,\n            displayModePropAutoLinear: this", "   it('testSwiperDisplayModePropStretch', 0, asy", "e      testSwiperDisplayModePropAutoLinear\n     ", "      console.info(\"playModeTest_0100 click resu", "globalThis.value.displayModePropStretch); //id\n ", ");\n    });\n\n    it('playModeTest_0100', 0, async", "unit(){\n  describe('playModeTest', function (){\n", " console.info(\"push playMode page result:\" + JSO", "id).assertEqual('displayModePropStretch') //ID\n ", "nsole.info(\"button5 playMode test animateTo STAR", "= this.$element(\"displayModePropAutoLinear\").get", "ber = 3\n  @State displayMode: number = SwiperDis", "CapStyleJsunit();\n  playModeJsunit();\n  GestureM", "eExample {\n  @State playMode:PlayMode = PlayMode", "s));\n        if (!(\"playMode\" == pages.name)) {\n", "e      testSwiperDisplayModePropStretch\n     * @", "id).assertEqual('displayModePropAutoLinear') //I", ".info('testSwiperDisplayModePropAutoLinear START", "rt default function playModeJsunit(){\n  describe", "  console.info(\"get playMode state pages.name:\" ", ": number = SwiperDisplayMode.AutoLinear\n  @State", "      console.info(\"playModeTest_0100 get state ", "= this.$element(\"displayModePropStretch\").getIns", "      console.info(\"playMode beforeEach start\");", "globalThis.value.displayModePropAutoLinear); //i", "console.error(\"push playMode page error:\" + err)", "   it('testSwiperDisplayModePropAutoLinear', 0, ", "ept(indexEvent.data.playMode).assertEqual(PlayMo", "h: null,\n        displayModePropAutoLinear: null", "      console.info(\"playMode after each called\")", "  console.info(\"get playMode state pages:\" + JSO"], "files": ["animate.ets", "index.js", "swiperProps.test.js", "PlayModeJsunit.test.ets", "swiper.ets", "playMode.ets", "List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "motion", "api_method_all": "motion(value: SpringMotion | FrictionMotion | ScrollMotion): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["      console.info(\"motionPathTest_0200 on eve", "        uri: 'pages/motionPath',\n      }\n     ", "      console.info('motionPathTest_0200 START'", "nit() {\n  describe('motionPathTest', function ", "  console.info(\"get motionPath state success \"", "      console.info(\"motionPathTest_0300 get st", " })\n    }\n    .key('motionPath')\n    .width('1", "      console.info(\"motionPathTest_0300 click ", "      console.info(\"motionPath after each call", "\n  shapeJsunit();\n  motionPathJsunit();\n  scro", "      console.info(\"motionPathTest_0200 get st", "      console.info('motionPathTest_0100 START'", "      console.info('motionPath page state chan", "{\n    console.info('motionPath page show calle", ");\n    });\n\n    it('motionPathTest_0100', 0, a", "rt default function motionPathJsunit() {\n  des", "      console.info(\"motionPathTest_0100 compon", ");\n    });\n\n    it('motionPathTest_0200', 0, a", "      console.info(\"motionPathTest_0200 click ", " console.info(\"push motionPath page success \" ", "console.error(\"push motionPath page error: \" +", "      console.info(\"motionPathTest_0300 on eve", "      console.info('motionPathTest_0200 END');", "      console.info('motionPathTest_0300 END');", "t.test.ets';\nimport motionPathJsunit from './M", "('button')\n        .motionPath({ path: this.pa", ");\n    });\n\n    it('motionPathTest_0300', 0, a", "s));\n        if (!(\"motionPath\" == pages.name)", "      console.info('motionPathTest_0300 START'", " getInspectorByKey('motionPath');\n      consol"], "files": ["List.test.ets", "MotionPathJsunit.test.ets", "motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onStartevent", "api_method_all": "onStart(event: () => void): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onStartevent", "api_method_all": "onStart(event: () => void): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onPauseevent", "api_method_all": "onPause(event: () => void): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onPauseevent", "api_method_all": "onPause(event: () => void): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onRepeatevent", "api_method_all": "onRepeat(event: () => void): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onRepeatevent", "api_method_all": "onRepeat(event: () => void): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onCancelevent", "api_method_all": "onCancel(event: () => void): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onCancelevent", "api_method_all": "onCancel(event: () => void): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onFinishevent", "api_method_all": "onFinish(event: () => void): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onFinishevent", "api_method_all": "onFinish(event: () => void): AnimatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onFrameevent", "api_method_all": "onFrame(event: (value: number) => void): AnimatorAttribute;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorAttribute", "api_method_name": "onFrameevent", "api_method_all": "onFrame(event: (value: number) => void): AnimatorAttribute;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}