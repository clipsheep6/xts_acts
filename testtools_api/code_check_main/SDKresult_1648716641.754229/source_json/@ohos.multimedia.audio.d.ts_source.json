{"subsystem_ch": "\u5a92\u4f53\u5b50\u7cfb\u7edf", "subsystem_en": "multimedia", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.multimedia.audio", "api": [{"api_class_name": "audio", "api_method_all": "declare namespace audio {\n\n  \n  function getAudioManager(): AudioManager;\n\n  \n  function createAudioCapturer(options: AudioCapturerOptions, callback: AsyncCallback<AudioCapturer>): void;\n\n  \n  function createAudioCapturer(options: AudioCapturerOptions): Promise<AudioCapturer>;\n\n  \n  function createAudioRenderer(options: AudioRendererOptions, callback: AsyncCallback<AudioRenderer>): void;\n\n  \n  function createAudioRenderer(options: AudioRendererOptions): Promise<AudioRenderer>;\n\n  \n  enum AudioState {\n    \n    STATE_INVALID = -1,\n    \n    STATE_NEW,\n    \n    STATE_PREPARED,\n    \n    STATE_RUNNING,\n    \n    STATE_STOPPED,\n    \n    STATE_RELEASED,\n    \n    STATE_PAUSED\n  }\n\n  \n  enum AudioVolumeType {\n    \n    VOICE_CALL = 0,\n    \n    RINGTONE = 2,\n    \n    MEDIA = 3,\n    \n    VOICE_ASSISTANT = 9,\n  }\n\n  \n  enum DeviceFlag {\n    \n    OUTPUT_DEVICES_FLAG = 1,\n    \n    INPUT_DEVICES_FLAG = 2,\n    \n    ALL_DEVICES_FLAG = 3,\n  }\n\n  \n  enum DeviceRole {\n    \n    INPUT_DEVICE = 1,\n    \n    OUTPUT_DEVICE = 2,\n  }\n\n  \n  enum DeviceType {\n    \n    INVALID = 0,\n    \n    EARPIECE = 1,\n    \n    SPEAKER = 2,\n    \n    WIRED_HEADSET = 3,\n    \n    WIRED_HEADPHONES = 4,\n    \n    BLUETOOTH_SCO = 7,\n    \n    BLUETOOTH_A2DP = 8,\n    \n    MIC = 15,\n    \n    USB_HEADSET = 22,\n  }\n\n  \n   enum ActiveDeviceType {\n    \n    SPEAKER = 2,\n    \n    BLUETOOTH_SCO = 7,\n  }\n\n  \n  enum AudioRingMode {\n    \n    RINGER_MODE_SILENT = 0,\n    \n    RINGER_MODE_VIBRATE = 1,\n    \n    RINGER_MODE_NORMAL = 2,\n  }\n\n  \n  enum AudioSampleFormat {\n    \n    SAMPLE_FORMAT_INVALID = -1,\n    \n    SAMPLE_FORMAT_U8 = 0,\n    \n    SAMPLE_FORMAT_S16LE = 1,\n    \n    SAMPLE_FORMAT_S24LE = 2,\n    \n    SAMPLE_FORMAT_S32LE = 3,\n  }\n\n  \n  enum AudioChannel {\n    \n    CHANNEL_1 = 0x1 << 0,\n    \n    CHANNEL_2 = 0x1 << 1\n  }\n\n  \n  enum AudioSamplingRate {\n    \n    SAMPLE_RATE_8000 = 8000,\n    \n    SAMPLE_RATE_11025 = 11025,\n    \n    SAMPLE_RATE_12000 = 12000,\n    \n    SAMPLE_RATE_16000 = 16000,\n    \n    SAMPLE_RATE_22050 = 22050,\n    \n    SAMPLE_RATE_24000 = 24000,\n    \n    SAMPLE_RATE_32000 = 32000,\n    \n    SAMPLE_RATE_44100 = 44100,\n    \n    SAMPLE_RATE_48000 = 48000,\n    \n    SAMPLE_RATE_64000 = 64000,\n    \n    SAMPLE_RATE_96000 = 96000\n  }\n\n  \n  enum AudioEncodingType {\n    \n    ENCODING_TYPE_INVALID = -1,\n    \n    ENCODING_TYPE_RAW = 0\n  }\n\n  \n  enum ContentType {\n    \n    CONTENT_TYPE_UNKNOWN = 0,\n    \n    CONTENT_TYPE_SPEECH = 1,\n    \n    CONTENT_TYPE_MUSIC = 2,\n    \n    CONTENT_TYPE_MOVIE = 3,\n    \n    CONTENT_TYPE_SONIFICATION = 4,\n    \n    CONTENT_TYPE_RINGTONE = 5,\n  }\n\n  \n  enum StreamUsage {\n    \n    STREAM_USAGE_UNKNOWN = 0,\n    \n    STREAM_USAGE_MEDIA = 1,\n    \n    STREAM_USAGE_VOICE_COMMUNICATION = 2,\n    \n    STREAM_USAGE_NOTIFICATION_RINGTONE = 6\n  }\n\n  \n  interface AudioStreamInfo {\n    \n    samplingRate: AudioSamplingRate;\n    \n    channels: AudioChannel;\n    \n    sampleFormat: AudioSampleFormat;\n    \n    encodingType: AudioEncodingType;\n  }\n\n  \n  interface AudioRendererInfo {\n    \n    content: ContentType;\n    \n    usage: StreamUsage;\n    \n    rendererFlags: number;\n  }\n\n  \n  interface AudioRendererOptions {\n    \n    streamInfo: AudioStreamInfo;\n    \n    rendererInfo: AudioRendererInfo;\n  }\n\n  \n  enum AudioRendererRate {\n    \n    RENDER_RATE_NORMAL = 0,\n    \n    RENDER_RATE_DOUBLE = 1,\n    \n    RENDER_RATE_HALF = 2\n  }\n\n  \n  enum InterruptType {\n    \n    INTERRUPT_TYPE_BEGIN = 1,\n\n    \n    INTERRUPT_TYPE_END = 2\n  }\n\n  \n  enum InterruptHint {\n    \n    INTERRUPT_HINT_NONE = 0,\n    \n    INTERRUPT_HINT_RESUME = 1,\n\n    \n    INTERRUPT_HINT_PAUSE = 2,\n\n    \n    INTERRUPT_HINT_STOP = 3,\n\n    \n    INTERRUPT_HINT_DUCK = 4,\n\n    \n    INTERRUPT_HINT_UNDUCK = 5,\n  }\n\n  \n  enum InterruptForceType {\n    \n    INTERRUPT_FORCE = 0,\n    \n    INTERRUPT_SHARE\n  }\n\n  \n  interface InterruptEvent {\n    \n    eventType: InterruptType;\n\n    \n    forceType: InterruptForceType;\n\n    \n    hintType: InterruptHint;\n  }\n\n  \n  enum InterruptActionType {\n\n    \n    TYPE_ACTIVATED = 0,\n\n    \n    TYPE_INTERRUPT = 1\n  }\n\n  \n  enum DeviceChangeType {\n    \n    CONNECT = 0,\n\n    \n    DISCONNECT = 1,\n  }\n\n  \n  enum AudioScene {\n    \n    AUDIO_SCENE_DEFAULT = 0,\n    \n    AUDIO_SCENE_RINGING,\n    \n    AUDIO_SCENE_PHONE_CALL,\n    \n    AUDIO_SCENE_VOICE_CHAT\n  }\n\n  \n  interface AudioManager {\n    \n    setVolume(volumeType: AudioVolumeType, volume: number, callback: AsyncCallback<void>): void;\n    \n    setVolume(volumeType: AudioVolumeType, volume: number): Promise<void>;\n    \n    getVolume(volumeType: AudioVolumeType, callback: AsyncCallback<number>): void;\n    \n    getVolume(volumeType: AudioVolumeType): Promise<number>;\n    \n    getMinVolume(volumeType: AudioVolumeType, callback: AsyncCallback<number>): void;\n    \n    getMinVolume(volumeType: AudioVolumeType): Promise<number>;\n    \n    getMaxVolume(volumeType: AudioVolumeType, callback: AsyncCallback<number>): void;\n    \n    getMaxVolume(volumeType: AudioVolumeType): Promise<number>;\n    \n    getDevices(deviceFlag: DeviceFlag, callback: AsyncCallback<AudioDeviceDescriptors>): void;\n    \n    getDevices(deviceFlag: DeviceFlag): Promise<AudioDeviceDescriptors>;\n    \n    mute(volumeType: AudioVolumeType, mute: boolean, callback: AsyncCallback<void>): void;\n    \n    mute(volumeType: AudioVolumeType, mute: boolean): Promise<void>;\n    \n    isMute(volumeType: AudioVolumeType, callback: AsyncCallback<boolean>): void;\n    \n    isMute(volumeType: AudioVolumeType): Promise<boolean>;\n    \n    isActive(volumeType: AudioVolumeType, callback: AsyncCallback<boolean>): void;\n    \n    isActive(volumeType: AudioVolumeType): Promise<boolean>;\n    \n    setMicrophoneMute(mute: boolean, callback: AsyncCallback<void>): void;\n    \n    setMicrophoneMute(mute: boolean): Promise<void>;\n    \n    isMicrophoneMute(callback: AsyncCallback<boolean>): void;\n    \n    isMicrophoneMute(): Promise<boolean>;\n    \n    setRingerMode(mode: AudioRingMode, callback: AsyncCallback<void>): void;\n    \n    setRingerMode(mode: AudioRingMode): Promise<void>;\n    \n    getRingerMode(callback: AsyncCallback<AudioRingMode>): void;\n    \n    getRingerMode(): Promise<AudioRingMode>;\n    \n    setAudioParameter(key: string, value: string, callback: AsyncCallback<void>): void;\n    \n    setAudioParameter(key: string, value: string): Promise<void>;\n    \n    getAudioParameter(key: string, callback: AsyncCallback<string>): void;\n    \n    getAudioParameter(key: string): Promise<string>;\n    \n    setDeviceActive(deviceType: ActiveDeviceType, active: boolean, callback: AsyncCallback<void>): void;\n    \n    setDeviceActive(deviceType: ActiveDeviceType, active: boolean): Promise<void>;\n    \n    isDeviceActive(deviceType: ActiveDeviceType, callback: AsyncCallback<boolean>): void;\n    \n    isDeviceActive(deviceType: ActiveDeviceType): Promise<boolean>;\n    \n    on(type: 'volumeChange', callback: Callback<VolumeEvent>): void;\n    \n    on(type: 'ringerModeChange', callback: Callback<AudioRingMode>): void;\n    \n    setAudioScene(scene: AudioScene, callback: AsyncCallback<void> ): void;\n    \n    setAudioScene(scene: AudioScene): Promise<void>;\n    \n    getAudioScene(callback: AsyncCallback<AudioScene>): void;\n    \n    getAudioScene(): Promise<AudioScene>;\n    \n    on(type: 'deviceChange', callback: Callback<DeviceChangeAction>): void;\n\n    \n    off(type: 'deviceChange', callback?: Callback<DeviceChangeAction>): void;\n\n    \n    on(type: 'interrupt', interrupt: AudioInterrupt, callback: Callback<InterruptAction>): void;\n\n    \n    off(type: 'interrupt', interrupt: AudioInterrupt, callback?: Callback<InterruptAction>): void;\n  }\n\n  \n  interface AudioDeviceDescriptor {\n    \n    readonly deviceRole: DeviceRole;\n    \n    readonly deviceType: DeviceType;\n  }\n\n  \n  type AudioDeviceDescriptors = Array<Readonly<AudioDeviceDescriptor>>;\n\n  \n  interface VolumeEvent {\n    \n    volumeType: AudioVolumeType;\n    \n    volume: number;\n    \n    updateUi: boolean;\n  }\n\n  \n  interface InterruptAction {\n\n    \n    actionType: InterruptActionType;\n\n    \n    type?: InterruptType;\n\n    \n    hint?: InterruptHint;\n\n    \n    activated?: boolean;\n  }\n\n  \n  interface AudioInterrupt {\n\n    \n    streamUsage: StreamUsage;\n\n    \n    contentType: ContentType;\n\n    \n    pauseWhenDucked: boolean;\n  }\n\n  \n  interface DeviceChangeAction {\n    \n    type: DeviceChangeType;\n\n    \n    deviceDescriptors: AudioDeviceDescriptors;\n  }\n\n  \n  interface AudioRenderer {\n    \n    readonly state: AudioState;\n    \n    getRendererInfo(callback: AsyncCallback<AudioRendererInfo>): void;\n    \n    getRendererInfo(): Promise<AudioRendererInfo>;\n    \n    getStreamInfo(callback: AsyncCallback<AudioStreamInfo>): void;\n    \n    getStreamInfo(): Promise<AudioStreamInfo>;\n    \n    start(callback: AsyncCallback<void>): void;\n    \n    start(): Promise<void>;\n    \n    write(buffer: ArrayBuffer, callback: AsyncCallback<number>): void;\n    \n    write(buffer: ArrayBuffer): Promise<number>;\n    \n    getAudioTime(callback: AsyncCallback<number>): void;\n    \n    getAudioTime(): Promise<number>;\n    \n    drain(callback: AsyncCallback<void>): void;\n    \n    drain(): Promise<void>;\n    \n    pause(callback: AsyncCallback<void>): void;\n    \n    pause(): Promise<void>;\n    \n    stop(callback: AsyncCallback<void>): void;\n    \n    stop(): Promise<void>;\n    \n    release(callback: AsyncCallback<void>): void;\n    \n    release(): Promise<void>;\n    \n    getBufferSize(callback: AsyncCallback<number>): void;\n    \n    getBufferSize(): Promise<number>;\n    \n    setRenderRate(rate: AudioRendererRate, callback: AsyncCallback<void>): void;\n    \n    setRenderRate(rate: AudioRendererRate): Promise<void>;\n    \n    getRenderRate(callback: AsyncCallback<AudioRendererRate>): void;\n    \n    getRenderRate(): Promise<AudioRendererRate>;\n    \n    on(type: 'interrupt', callback: Callback<InterruptEvent>): void;\n    \n    on(type: \"markReach\", frame: number, callback: (position: number) => {}): void;\n    \n    off(type: \"markReach\"): void;\n    \n    on(type: \"periodReach\", frame: number, callback: (position: number) => {}): void;\n    \n    off(type: \"periodReach\"): void;\n    \n    on(type: \"stateChange\", callback: Callback<AudioState>): void;\n  }\n\n  \n  enum SourceType {\n    \n    SOURCE_TYPE_INVALID = -1,\n    \n    SOURCE_TYPE_MIC = 0,\n    \n    SOURCE_TYPE_VOICE_COMMUNICATION = 7\n  }\n\n  \n  interface AudioCapturerInfo {\n    \n    source: SourceType;\n    \n    capturerFlags: number;\n  }\n\n  \n  interface AudioCapturerOptions {\n    \n    streamInfo: AudioStreamInfo;\n    \n    capturerInfo: AudioCapturerInfo;\n  }\n\n  \n  interface AudioCapturer {\n    \n    readonly state: AudioState;\n    \n    getCapturerInfo(callback: AsyncCallback<AudioCapturerInfo>): void;\n    \n    getCapturerInfo(): Promise<AudioCapturerInfo>;\n\n    \n    getStreamInfo(callback: AsyncCallback<AudioStreamInfo>): void;\n    \n    getStreamInfo(): Promise<AudioStreamInfo>;\n\n    \n    start(callback: AsyncCallback<void>): void;\n    \n    start(): Promise<void>;\n\n    \n    read(size: number, isBlockingRead: boolean, callback: AsyncCallback<ArrayBuffer>): void;\n    \n    read(size: number, isBlockingRead: boolean): Promise<ArrayBuffer>;\n\n    \n    getAudioTime(callback: AsyncCallback<number>): void;\n    \n    getAudioTime(): Promise<number>;\n\n    \n    stop(callback: AsyncCallback<void>): void;\n    \n    stop(): Promise<void>;\n\n    \n    release(callback: AsyncCallback<void>): void;\n    \n    release(): Promise<void>;\n\n    \n    getBufferSize(callback: AsyncCallback<number>): void;\n    \n    getBufferSize(): Promise<number>;\n\n    \n    on(type: \"markReach\", frame: number, callback: (position: number) => {}): void;\n    \n    off(type: \"markReach\"): void;\n\n    \n    on(type: \"periodReach\", frame: number, callback: (position: number) => {}): void;\n    \n    off(type: \"periodReach\"): void;\n\n    \n    on(type: \"stateChange\", callback: Callback<AudioState>): void;\n  }\n}", "api_method_name": "audio", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 6214, "since": 0, "api_used": "\u662f", "lines": ["te);\n\n        await audioRen.stop().then(asyn", "   }\n\n        await audioRen.getRendererInfo(", "              await audioManager.getAudioScen", ";\n            await audioManager.getAudioScen", "   }\n\n        await audioCap.getStreamInfo().", "/index';\n\ndescribe('audioCall', function () {", "er sampleFormat:' + audioParamsGet.sampleForm", "   }\n\n        await audioCap.getCapturerInfo(", " Renderer usage:' + audioParamsGet.usage);\n  ", ";\n            await audioManagerRec.getAudioS", "m '@ohos.multimedia.audio';\nimport fileio fro", "onst audioManager = audio.getAudioManager();\n", "te);\n\n        await audioRen.getStreamInfo().", "ion');\n\n        var audioRen;\n        await a", "nderer channels:' + audioParamsGet.channels);", "ion');\n\n        var audioCap;\n\n        await ", "pturer channels:' + audioParamsGet.channels);", "enderer : STATE : '+audioRen.state);\n\n       ", "te);\n\n        await audioManagerRec.setAudioS", "er samplingRate:' + audioParamsGet.samplingRa", "Size;\n        await audioRen.getBufferSize().", "t audioManagerRec = audio.getAudioManager();\n", "er encodingType:' + audioParamsGet.encodingTy", "er content type:' + audioParamsGet.content);\n", "hen(async function (audioParamsGet) {\n       ", "ework');\n\n    const audioManagerRec = audio.g", "te);\n\n        await audioManager.setAudioScen", ";\n            await audioRen.write(buf);\n    ", "tFlagRen;\n    const audioManager = audio.getA", "d');\n\n        await audioRen.drain().then(asy", "r rendererFlags:' + audioParamsGet.rendererFl", "oRen;\n        await audio.createAudioRenderer", "data) {\n            audioCap = data;\n        ", "data) {\n            audioRen = data;\n        ", "   }\n\n        await audioRen.start().then(asy", "te);\n\n        await audioRen.release().then(a", "Cap;\n\n        await audio.createAudioCapturer", "apturer : STATE : '+audioCap.state);\n\n       ", "ts-nocheck\n\n\nimport audio from '@ohos.multime"], "files": ["AudioDecoderFormatCallbackTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetCallBack2.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "fetchFileResultCallBack.test.js", "AudioEncoderFuncCallbackTest.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetPromise2.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "SR000GHQBN.test.js", "AudioEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "fileAsset2.test.js", "FileAssetGetThumbnailCallBack.test.js", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "audio", "api_method_name": "getAudioManager", "api_method_all": "function getAudioManager(): AudioManager;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 51, "since": 7, "api_used": "\u662f", "lines": ["dioManager1 = audio.getAudioManager();\n        const au", "dioManager5 = audio.getAudioManager();\n        const au", "ioManager10 = audio.getAudioManager();\n        const pr", "dioManager8 = audio.getAudioManager();\n        const au", "dioManager4 = audio.getAudioManager();\n        const au", "dioManager2 = audio.getAudioManager();\n        const au", "dioManager7 = audio.getAudioManager();\n        const au", "dioManager6 = audio.getAudioManager();\n        const au", "dioManager9 = audio.getAudioManager();\n        const au", "oManagerRec = audio.getAudioManager();\n    console.info", "udioManager = audio.getAudioManager();\n    var deviceRo", "dioManager3 = audio.getAudioManager();\n        const au", "ManagerPerf = audio.getAudioManager(); \n        let sta", "udioManager = audio.getAudioManager();\n    console.info"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "AudioPerf.test.js", "AudioFramework.test.js", "SR000GHLLV.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "audio", "api_method_name": "createAudioCapturer", "api_method_all": "function createAudioCapturer(options: AudioCapturerOptions, callback: AsyncCallback<AudioCapturer>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35, "since": 8, "api_used": "\u662f", "lines": ["    }\n        audio.createAudioCapturer(AudioCapturerOptions, async (err, value", "Cap;\n\n        audio.createAudioCapturer(AudioCapturerOptions,async(err,value) =", "   }\n\n        audio.createAudioCapturer(AudioCapturerOptions,async(err,value) =", "dioCapturer = audio.createAudioCapturer(streamType);\n        console.info('Audi", "    }\n        audio.createAudioCapturer(AudioCapturerOptions,async(err,value) ="], "files": ["AudioVOIP.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "audio", "api_method_name": "createAudioCapturer", "api_method_all": "function createAudioCapturer(options: AudioCapturerOptions): Promise<AudioCapturer>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 24, "since": 8, "api_used": "\u662f", "lines": ["        await audio.createAudioCapturer(AudioCapturerOptionsInvalid).then(async", "        await audio.createAudioCapturer(AudioCapturerOptions).then(async functi"], "files": ["AudioCall.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "audio", "api_method_name": "createAudioRenderer", "api_method_all": "function createAudioRenderer(options: AudioRendererOptions, callback: AsyncCallback<AudioRenderer>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["st audioRen = audio.createAudioRenderer(streamType);\n        console.info('Audi", "dioRen;\n\n     audio.createAudioRenderer(AudioRendererOptions,(err, data) => {\n "], "files": ["AudioRenderer.test.js", "AudioVOIP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "audio", "api_method_name": "createAudioRenderer", "api_method_all": "function createAudioRenderer(options: AudioRendererOptions): Promise<AudioRenderer>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 59, "since": 8, "api_used": "\u662f", "lines": ["en;\n    await audio.createAudioRenderer(AudioRendererOptions).then(async functi", "n;\n     await audio.createAudioRenderer(AudioRendererOptions).then(async functi", "        await audio.createAudioRenderer(AudioRendererOptions).then(async functi", "    //  await audio.createAudioRenderer(AudioRendererOptions).then(async functi", "\n    // await audio.createAudioRenderer(AudioRendererOptions).then(async functi"], "files": ["AudioCall.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioState", "api_method_all": "enum AudioState {\n    \n    STATE_INVALID = -1,\n    \n    STATE_NEW,\n    \n    STATE_PREPARED,\n    \n    STATE_RUNNING,\n    \n    STATE_STOPPED,\n    \n    STATE_RELEASED,\n    \n    STATE_PAUSED\n  }", "api_method_name": "AudioState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["workTest: state : '+AudioState);\n                 ", "         case audio.AudioState.STATE_NEW:\n        ", "Back.state == audio.AudioState.STATE_RUNNING)) {\n ", "         case audio.AudioState.STATE_PREPARED:\n   ", "n.on('stateChange',(AudioState) => {\n\n            ", "dioRen.state==audio.AudioState.STATE_RELEASED) {\n ", "       expect(audio.AudioState.STATE_NEW).assertEq", "mise.state == audio.AudioState.STATE_RELEASED)) {\n", "k.on('stateChange',(AudioState) => {\n            c", "dioRen.state==audio.AudioState.STATE_PAUSED) {\n   ", "mise.state == audio.AudioState.STATE_RUNNING)) {\n ", "nged State to : ' + AudioState)\n            switch", "dioRen.state==audio.AudioState.STATE_PREPARED) {\n ", "  * @tc.desc      : AudioState - STATE_INVALID\n   ", "  * @tc.desc      : AudioState - STATE_NEW\n       ", "Back.state == audio.AudioState.STATE_STOPPED)) {\n ", "  * @tc.name      : AudioState - STATE_NEW\n       ", "         case audio.AudioState.STATE_RUNNING:\n    ", "mise.state == audio.AudioState.STATE_STOPPED)) {\n ", "Back.state == audio.AudioState.STATE_RELEASED)) {\n", "dioRen.state==audio.AudioState.STATE_STOPPED) {\n  ", "Back.state == audio.AudioState.STATE_PREPARED)) {\n", "  * @tc.name      : AudioState - STATE_INVALID\n   ", "       expect(audio.AudioState.STATE_INVALID).asse", "         case audio.AudioState.STATE_PAUSED:\n     ", "dioRen.state==audio.AudioState.STATE_NEW) {\n    //", "dioRen.state==audio.AudioState.STATE_RUNNING) {\n  ", "            switch (AudioState) {\n                ", "         case audio.AudioState.STATE_RELEASED:\n   ", "mise.state == audio.AudioState.STATE_PREPARED)) {\n", " == audioCapPromise.AudioState.STATE_STOPPED)){\n  ", "         case audio.AudioState.STATE_STOPPED:\n    "], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioState", "api_method_name": "STATE_INVALID", "api_method_all": "STATE_INVALID = -1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["ct(audio.AudioState.STATE_INVALID).assertEqual(-1);\n ", "     : AudioState - STATE_INVALID\n                * @"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioState", "api_method_name": "STATE_NEW", "api_method_all": "STATE_NEW,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["rLog: Audio State : STATE_NEW : FAIL : ' + audioR", "  : AudioRenderer - STATE_NEW\n    // * @tc.size  ", "e==audio.AudioState.STATE_NEW) {\n    //      cons", "  : AudioRenderer - STATE_NEW\n    // * @tc.desc  ", "ct(audio.AudioState.STATE_NEW).assertEqual(0);\n  ", "meworkTest: state : STATE_NEW');\n                ", "     : AudioState - STATE_NEW\n                * @", "se audio.AudioState.STATE_NEW:\n                  ", "rLog: Audio State : STATE_NEW : PASS : ' + audioR"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioState", "api_method_name": "STATE_PREPARED", "api_method_all": "STATE_PREPARED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["rLog: Audio State : STATE_PREPARED : PASS : ' + audioR", "rLog: Audio State : STATE_PREPARED : FAIL : ' + audioR", "== audio.AudioState.STATE_PREPARED)) {\n               ", "  : AudioRenderer - STATE_PREPARED\n    * @tc.desc     ", "  : AudioRenderer - STATE_PREPARED -Callback\n    * @tc", "se audio.AudioState.STATE_PREPARED:\n                  ", "  : AudioRenderer - STATE_PREPARED\n    * @tc.size     ", "e==audio.AudioState.STATE_PREPARED) {\n         console"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioState", "api_method_name": "STATE_RUNNING", "api_method_all": "STATE_RUNNING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["  : AudioRenderer - STATE_RUNNING - Callback\n    * @t", "e==audio.AudioState.STATE_RUNNING) {\n         console", "  : AudioRenderer - STATE_RUNNING\n    * @tc.size     ", "rLog: Audio State : STATE_RUNNING : FAIL : ' + audioR", "  : AudioRenderer - STATE_RUNNING\n    * @tc.desc     ", "se audio.AudioState.STATE_RUNNING:\n                  ", "rLog: Audio State : STATE_RUNNING : PASS : ' + audioR", "meworkTest: state : STATE_RUNNING');\n                ", "== audio.AudioState.STATE_RUNNING)) {\n               "], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioState", "api_method_name": "STATE_STOPPED", "api_method_all": "STATE_STOPPED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 19, "since": 8, "api_used": "\u662f", "lines": ["== audio.AudioState.STATE_STOPPED)) {\n               ", "e==audio.AudioState.STATE_STOPPED) {\n         console", "  : AudioRenderer - STATE_STOPPED\n    * @tc.size     ", "rLog: Audio State : STATE_STOPPED : FAIL : ' + audioR", "  : AudioRenderer - STATE_STOPPED\n    * @tc.desc     ", "se audio.AudioState.STATE_STOPPED:\n                  ", "pPromise.AudioState.STATE_STOPPED)){\n                ", "  : AudioRenderer - STATE_STOPPED - Callback\n    * @t", "meworkTest: state : STATE_STOPPED');\n                ", "rLog: Audio State : STATE_STOPPED : PASS : ' + audioR"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioState", "api_method_name": "STATE_RELEASED", "api_method_all": "STATE_RELEASED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["e==audio.AudioState.STATE_RELEASED) {\n         console", "meworkTest: state : STATE_RELEASED');\n                ", "== audio.AudioState.STATE_RELEASED)) {\n               ", "  : AudioRenderer - STATE_RELEASED\n    * @tc.size     ", "se audio.AudioState.STATE_RELEASED:\n                  ", "  : AudioRenderer - STATE_RELEASED - Callback\n    * @t", "rLog: Audio State : STATE_RELEASED : PASS : ' + audioR", "  : AudioRenderer - STATE_RELEASED\n    * @tc.desc     ", "rLog: Audio State : STATE_RELEASED : FAIL : ' + audioR"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioVolumeType", "api_method_all": "enum AudioVolumeType {\n    \n    VOICE_CALL = 0,\n    \n    RINGTONE = 2,\n    \n    MEDIA = 3,\n    \n    VOICE_ASSISTANT = 9,\n  }", "api_method_name": "AudioVolumeType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 72, "since": 7, "api_used": "\u662f", "lines": ["ger.getVolume(audio.AudioVolumeType.MEDIA, (err, value)", "ger.setVolume(audio.AudioVolumeType.RINGTONE,maxVol);\n ", "ager.isActive(audio.AudioVolumeType.VOICE_ASSISTANT).th", "ager.isActive(audio.AudioVolumeType.MEDIA);\n        pro", "ager.isActive(audio.AudioVolumeType.RINGTONE, (err, dat", "ger.setVolume(audio.AudioVolumeType.MEDIA,lowVol);\n    ", "ager.isActive(audio.AudioVolumeType.RINGTONE);\n        ", "ager.isActive(audio.AudioVolumeType.MEDIA).then(functio", "ger.getVolume(audio.AudioVolumeType.RINGTONE).then(func", "ger.getVolume(audio.AudioVolumeType.RINGTONE, (err, val", "anager.isMute(audio.AudioVolumeType.MEDIA).then(functio", "ger.setVolume(audio.AudioVolumeType.RINGTONE,lowVol);\n ", "         case audio.AudioVolumeType.RINGTONE:\n         ", "         case audio.AudioVolumeType.MEDIA:\n            ", "oManager.mute(audio.AudioVolumeType.MEDIA,false).then(f", "ager.isActive(audio.AudioVolumeType.MEDIA, (err, data) ", "oManager.mute(audio.AudioVolumeType.MEDIA,false, (err) ", "         case audio.AudioVolumeType.VOICE_CALL:\n       ", "ger.setVolume(audio.AudioVolumeType.VOICE_ASSISTANT,low", "ger.setVolume(audio.AudioVolumeType.MEDIA,highVol);\n   ", "ger.setVolume(audio.AudioVolumeType.VOICE_CALL,lowVol);", "ger.getVolume(audio.AudioVolumeType.MEDIA).then(functio", "ager.isActive(audio.AudioVolumeType.RINGTONE).then(func", "ger.setVolume(audio.AudioVolumeType.RINGTONE,lowVol, (e", "ger.setVolume(audio.AudioVolumeType.MEDIA,highVol, (err", "         case audio.AudioVolumeType.VOICE_ASSISTANT:\n  ", "ger.setVolume(audio.AudioVolumeType.RINGTONE,highVol);\n", "anager.isMute(audio.AudioVolumeType.MEDIA, (err, data) ", "oManager.mute(audio.AudioVolumeType.RINGTONE,false, (er", "anager.isMute(audio.AudioVolumeType.RINGTONE, (err, dat"], "files": ["AudioRenderer.test.js", "AudioVOIP.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioVolumeType", "api_method_name": "VOICE_CALL", "api_method_all": "VOICE_CALL = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["dio.AudioVolumeType.VOICE_CALL);\n        await sle", " Promise : isActive VOICE_CALL: PASS :'+data);\n   ", "dio.AudioVolumeType.VOICE_CALL);\n\n        var resu", "AudioFrameworkTest: VOICE_CALL CallBack : PASS :' ", "Audio Volume Type : VOICE_CALL');\n                ", "dio.AudioVolumeType.VOICE_CALL,lowVol);\n        do", " Promise : isActive VOICE_CALL: FAIL :'+data);\n   ", "dio.AudioVolumeType.VOICE_CALL:\n                  ", "dio.AudioVolumeType.VOICE_CALL).then(function (dat", "hange - setVolume - VOICE_CALL\n                * @"], "files": ["AudioRenderer.test.js", "AudioVOIP.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioVolumeType", "api_method_name": "RINGTONE", "api_method_all": "RINGTONE = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 237, "since": 7, "api_used": "\u662f", "lines": ["er-isStreamActive - RINGTONE - UNKNOWN\n        *", "NOWN - NOTIFICATION_RINGTONE\n        * @tc.desc ", ".getMaxVolume(AUDIO_RINGTONE,(err, value) => {\n ", "er-isStreamActive - RINGTONE - VOICE_COMMUNICATI", "dio.AudioVolumeType.RINGTONE,lowVol, (err) => {\n", "erf.getVolume(AUDIO_RINGTONE);\n            };\n  ", "dio.AudioVolumeType.RINGTONE, (err, data) => {\n ", "AudioFrameworkTest: RINGTONE CallBack : PASS :' ", ".getMinVolume(AUDIO_RINGTONE,(err, value) => {\n ", "agerPerf.mute(AUDIO_RINGTONE,true,(err, value) =", " Promise : isActive RINGTONE: FAIL :'+data);\n   ", "NOWN - NOTIFICATION_RINGTONE\n        * @tc.size ", "dio.AudioVolumeType.RINGTONE).then(function (dat", "dio.AudioVolumeType.RINGTONE,highVol);\n        p", "ntType.CONTENT_TYPE_RINGTONE,\n        usage: aud", "er-isStreamActive - RINGTONE - MEDIA\n    * @tc.d", "dio.AudioVolumeType.RINGTONE);\n        promise.t", "dio.AudioVolumeType.RINGTONE, (err, value) => {\n", " Promise : isActive RINGTONE: PASS :'+data);\n   ", "Audio Volume Type : RINGTONE');\n                ", "Perf.isActive(AUDIO_RINGTONE,(err, value) => {\n ", "erf.setVolume(AUDIO_RINGTONE,MAX_VOL);\n         ", "dio.AudioVolumeType.RINGTONE:\n                  ", "dio.AudioVolumeType.RINGTONE,lowVol);\n          ", " = 3;\n    var AUDIO_RINGTONE = 2;\n    var MAX_VO", "erPerf.isMute(AUDIO_RINGTONE,(err, value) => {\n ", "er-isStreamActive - RINGTONE - MEDIA\n    * @tc.s", "hange - setVolume - RINGTONE\n                * @", "dio.AudioVolumeType.RINGTONE,false, (err) => {\n ", "dio.AudioVolumeType.RINGTONE,maxVol);\n          "], "files": ["AudioPerf.test.js", "AudioRenderer.test.js", "AudioFramework.test.js", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioVolumeType", "api_method_name": "MEDIA", "api_method_all": "MEDIA = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3735, "since": 7, "api_used": "\u662f", "lines": [".getMaxVolume(AUDIO_MEDIA);\n            };\n  ", "agerPerf.mute(AUDIO_MEDIA,true);\n            ", "mActive - UNKNOWN - MEDIA\n        * @tc.size ", "amActive - SPEECH - MEDIA\n    * @tc.desc     ", "mUsage.STREAM_USAGE_MEDIA,\n        rendererFl", "st');\n    var AUDIO_MEDIA = 3;\n    var AUDIO_", "dio.AudioVolumeType.MEDIA,lowVol);\n        pr", "erf.setVolume(AUDIO_MEDIA,LOW_VOL,(err, value", "mActive - UNKNOWN - MEDIA\n        * @tc.desc ", "hange - setVolume - MEDIA\n                * @", ".getMinVolume(AUDIO_MEDIA);\n            };\n  ", "udio NOT PLAYING as MEDIA for the test case t", "erf.getVolume(AUDIO_MEDIA,(err, value) => {\n ", "dio.AudioVolumeType.MEDIA:\n                  ", "dio.AudioVolumeType.MEDIA);\n        promise.t", "dio.AudioVolumeType.MEDIA, (err, value) => {\n", "AudioFrameworkTest: MEDIA CallBack : PASS :' ", "Audio Volume Type : MEDIA');\n                ", "dio.AudioVolumeType.MEDIA,false).then(functio", "dio.AudioVolumeType.MEDIA,highVol);\n         ", "erPerf.isMute(AUDIO_MEDIA);\n            };\n  ", "dio.AudioVolumeType.MEDIA,lowVol);\n          ", "dio.AudioVolumeType.MEDIA, (err, data) => {\n ", "dio.AudioVolumeType.MEDIA).then(function (dat", "Perf.isActive(AUDIO_MEDIA);\n            };\n  ", "dio.AudioVolumeType.MEDIA,highVol, (err) => {", "dio.AudioVolumeType.MEDIA,false, (err) => {\n ", "amActive - SPEECH - MEDIA\n    * @tc.size     "], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "fileAssetTestPromise.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioVolumeType", "api_method_name": "VOICE_ASSISTANT", "api_method_all": "VOICE_ASSISTANT = 9,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": ["amActive - SPEECH - VOICE_ASSISTANT\n    // * @tc.desc  ", "dio.AudioVolumeType.VOICE_ASSISTANT).then(function (dat", "mActive - UNKNOWN - VOICE_ASSISTANT\n    //     * @tc.de", "dio.AudioVolumeType.VOICE_ASSISTANT,lowVol);\n        do", "AudioFrameworkTest: VOICE_ASSISTANT CallBack : PASS :' ", "Active - RINGTONE - VOICE_ASSISTANT\n    // * @tc.size  ", " Promise : isActive VOICE_ASSISTANT: FAIL :'+data);\n   ", "mUsage.STREAM_USAGE_VOICE_ASSISTANT,\n    //     rendere", "hange - setVolume - VOICE_ASSISTANT\n                * @", "eamActive - MUSIC - VOICE_ASSISTANT\n    // * @tc.size  ", "Audio Volume Type : VOICE_ASSISTANT');\n                ", " - SONOTIFICATION - VOICE_ASSISTANT\n    // * @tc.desc  ", "amActive - SPEECH - VOICE_ASSISTANT\n    // * @tc.size  ", "dio.AudioVolumeType.VOICE_ASSISTANT:\n                  ", "eamActive - MUSIC - VOICE_ASSISTANT\n    // * @tc.desc  ", "Active - RINGTONE - VOICE_ASSISTANT\n    // * @tc.desc  ", "eamActive - MOVIE - VOICE_ASSISTANT\n    // * @tc.desc  ", "mUsage.STREAM_USAGE_VOICE_ASSISTANT,\n    //      render", " Promise : isActive VOICE_ASSISTANT: PASS :'+data);\n   ", "eamActive - MOVIE - VOICE_ASSISTANT\n    // * @tc.size  ", " - SONOTIFICATION - VOICE_ASSISTANT\n    // * @tc.size  ", "mActive - UNKNOWN - VOICE_ASSISTANT\n    //     * @tc.si"], "files": ["AudioRenderer.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceFlag", "api_method_all": "enum DeviceFlag {\n    \n    OUTPUT_DEVICES_FLAG = 1,\n    \n    INPUT_DEVICES_FLAG = 2,\n    \n    ALL_DEVICES_FLAG = 3,\n  }", "api_method_name": "DeviceFlag", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["er.getDevices(audio.DeviceFlag.ALL_DEVICES_FLAG, (", "rf.getDevices(audio.DeviceFlag.INPUT_DEVICES_FLAG)", "er.getDevices(audio.DeviceFlag.INPUT_DEVICES_FLAG)", "er.getDevices(audio.DeviceFlag.OUTPUT_DEVICES_FLAG", "er.getDevices(audio.DeviceFlag.ALL_DEVICES_FLAG);\n", "er.getDevices(audio.DeviceFlag.INPUT_DEVICES_FLAG,", "rf.getDevices(audio.DeviceFlag.OUTPUT_DEVICES_FLAG"], "files": ["AudioPerf.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceFlag", "api_method_name": "OUTPUT_DEVICES_FLAG", "api_method_all": "OUTPUT_DEVICES_FLAG = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 39, "since": 7, "api_used": "\u662f", "lines": ["allback: getDevices OUTPUT_DEVICES_FLAG');\n                ", "Promise: getDevices OUTPUT_DEVICES_FLAG');\n            valu", "t devices Enumb 1 = OUTPUT_DEVICES_FLAG\n        promise.the", "allback: getDevices OUTPUT_DEVICES_FLAG');\n            if (", "t devices Enumb 1 = OUTPUT_DEVICES_FLAG\n            console", "lback: getDevices : OUTPUT_DEVICES_FLAG :  FAIL');\n        ", "es(audio.DeviceFlag.OUTPUT_DEVICES_FLAG)\n        promise.th", "es(audio.DeviceFlag.OUTPUT_DEVICES_FLAG,(err, value) => {\n ", "omise: getDevices : OUTPUT_DEVICES_FLAG :  FAIL');\n        ", "workTest: Callback: OUTPUT_DEVICES_FLAG: failed to get devi", "lback: getDevices : OUTPUT_DEVICES_FLAG :  PASS');\n        ", "es(audio.DeviceFlag.OUTPUT_DEVICES_FLAG, (err, value) => {\n", "allback: getDevices OUTPUT_DEVICES_FLAG');\n\n            if ", "omise: getDevices : OUTPUT_DEVICES_FLAG :  PASS');\n        "], "files": ["AudioPerf.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceFlag", "api_method_name": "INPUT_DEVICES_FLAG", "api_method_all": "INPUT_DEVICES_FLAG = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 39, "since": 7, "api_used": "\u662f", "lines": ["lback: getDevices : INPUT_DEVICES_FLAG:  PASS');\n         ", "ut Devices ENUM 2 = INPUT_DEVICES_FLAG\n\n            consol", "es(audio.DeviceFlag.INPUT_DEVICES_FLAG);\n        promise.t", "es(audio.DeviceFlag.INPUT_DEVICES_FLAG, (err, value) => {\n", "allback: getDevices INPUT_DEVICES_FLAG');\n            if (", "Promise: getDevices INPUT_DEVICES_FLAG');\n            valu", "workTest: Callback: INPUT_DEVICES_FLAG: failed to get devi", "omise: getDevices : INPUT_DEVICES_FLAG :  PASS');\n        ", "ut Devices ENUM 2 = INPUT_DEVICES_FLAG\n        promise.the", "allback: getDevices INPUT_DEVICES_FLAG');\n                ", "es(audio.DeviceFlag.INPUT_DEVICES_FLAG);\n            };\n  ", "omise: getDevices : INPUT_DEVICES_FLAG :  FAIL');\n        ", "allback: getDevices INPUT_DEVICES_FLAG');\n\n            if ", "lback: getDevices : INPUT_DEVICES_FLAG:  FAIL');\n         "], "files": ["AudioPerf.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceFlag", "api_method_name": "ALL_DEVICES_FLAG", "api_method_all": "ALL_DEVICES_FLAG = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": ["allback: getDevices ALL_DEVICES_FLAG');\n            if (", "workTest: Callback: ALL_DEVICES_FLAG: failed to get devi", "allback: getDevices ALL_DEVICES_FLAG');\n                ", "lback: getDevices : ALL_DEVICES_FLAG:  FAIL');\n         ", "omise: getDevices : ALL_DEVICES_FLAG :  FAIL');\n        ", "es(audio.DeviceFlag.ALL_DEVICES_FLAG, (err, value) => {\n", "evies connected 3 = ALL_DEVICES_FLAG\n        promise.the", "omise: getDevices : ALL_DEVICES_FLAG :  PASS');\n        ", "allback: getDevices ALL_DEVICES_FLAG');\n\n            if ", "es(audio.DeviceFlag.ALL_DEVICES_FLAG);\n        promise.t", "evies connected 3 = ALL_DEVICES_FLAG\n\n            consol", "Promise: getDevices ALL_DEVICES_FLAG');\n            valu", "lback: getDevices : ALL_DEVICES_FLAG:  PASS');\n         "], "files": ["AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceRole", "api_method_all": "enum DeviceRole {\n    \n    INPUT_DEVICE = 1,\n    \n    OUTPUT_DEVICE = 2,\n  }", "api_method_name": "DeviceRole", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["  deviceRole: audio.DeviceRole.INPUT_DEVICE,\n     "], "files": ["AudioVOIP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceRole", "api_method_name": "INPUT_DEVICE", "api_method_all": "INPUT_DEVICE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 43, "since": 7, "api_used": "\u662f", "lines": ["     devRoleName = 'INPUT_DEVICE';\n        }\n       ", "workTest: Callback: INPUT_DEVICES_FLAG: failed to ge", "Promise: getDevices INPUT_DEVICES_FLAG');\n          ", "allback: getDevices INPUT_DEVICES_FLAG');\n          ", "omise: getDevices : INPUT_DEVICES_FLAG :  PASS');\n  ", "lback: getDevices : INPUT_DEVICES_FLAG:  FAIL');\n   ", "ut Devices ENUM 2 = INPUT_DEVICES_FLAG\n\n            ", "es(audio.DeviceFlag.INPUT_DEVICES_FLAG);\n           ", "es(audio.DeviceFlag.INPUT_DEVICES_FLAG, (err, value)", "e: audio.DeviceRole.INPUT_DEVICE,\n            device", "lback: getDevices : INPUT_DEVICES_FLAG:  PASS');\n   ", "es(audio.DeviceFlag.INPUT_DEVICES_FLAG);\n        pro", "omise: getDevices : INPUT_DEVICES_FLAG :  FAIL');\n  ", "ut Devices ENUM 2 = INPUT_DEVICES_FLAG\n        promi", "allback: getDevices INPUT_DEVICES_FLAG');\n\n         "], "files": ["AudioPerf.test.js", "AudioVOIP.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceRole", "api_method_name": "OUTPUT_DEVICE", "api_method_all": "OUTPUT_DEVICE = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 41, "since": 7, "api_used": "\u662f", "lines": ["allback: getDevices OUTPUT_DEVICES_FLAG');\n\n         ", "omise: getDevices : OUTPUT_DEVICES_FLAG :  FAIL');\n  ", "lback: getDevices : OUTPUT_DEVICES_FLAG :  FAIL');\n  ", "t devices Enumb 1 = OUTPUT_DEVICES_FLAG\n            c", "allback: getDevices OUTPUT_DEVICES_FLAG');\n          ", "     devRoleName = 'OUTPUT_DEVICE ';\n        }\n      ", "lback: getDevices : OUTPUT_DEVICES_FLAG :  PASS');\n  ", "t devices Enumb 1 = OUTPUT_DEVICES_FLAG\n        promi", "es(audio.DeviceFlag.OUTPUT_DEVICES_FLAG)\n        prom", "workTest: Callback: OUTPUT_DEVICES_FLAG: failed to ge", "es(audio.DeviceFlag.OUTPUT_DEVICES_FLAG, (err, value)", "omise: getDevices : OUTPUT_DEVICES_FLAG :  PASS');\n  ", "Promise: getDevices OUTPUT_DEVICES_FLAG');\n          ", "es(audio.DeviceFlag.OUTPUT_DEVICES_FLAG,(err, value) "], "files": ["AudioPerf.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_all": "enum DeviceType {\n    \n    INVALID = 0,\n    \n    EARPIECE = 1,\n    \n    SPEAKER = 2,\n    \n    WIRED_HEADSET = 3,\n    \n    WIRED_HEADPHONES = 4,\n    \n    BLUETOOTH_SCO = 7,\n    \n    BLUETOOTH_A2DP = 8,\n    \n    MIC = 15,\n    \n    USB_HEADSET = 22,\n  }", "api_method_name": "DeviceType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 60, "since": 7, "api_used": "\u662f", "lines": ["eActive(audio.ActiveDeviceType.SPEAKER,(err, value", "  * @tc.desc      : DeviceType - USB_HEADSET\n     ", "eActive(audio.ActiveDeviceType.SPEAKER).then(funct", "eActive(audio.ActiveDeviceType.SPEAKER,true,(err, ", "       expect(audio.DeviceType.INVALID).assertEqua", "eActive(audio.ActiveDeviceType.SPEAKER,true, (err)", "eActive(audio.ActiveDeviceType.BLUETOOTH_SCO,true)", "eActive(audio.ActiveDeviceType.BLUETOOTH_SCO,false", "eActive(audio.ActiveDeviceType.BLUETOOTH_SCO,true,", "eActive(audio.ActiveDeviceType.BLUETOOTH_SCO,(err,", "  * @tc.name      : DeviceType - WIRED_HEADSET\n   ", ": SUB_AUDIO_MANAGER_DeviceType_003\n               ", "('SUB_AUDIO_MANAGER_DeviceType_003', 0, async func", "  deviceType: audio.DeviceType.MIC\n        };\n \n  ", "eActive(audio.ActiveDeviceType.SPEAKER,true);\n    ", "eActive(audio.ActiveDeviceType.SPEAKER,true).then(", "  * @tc.name      : DeviceType - USB_HEADSET\n     ", ": SUB_AUDIO_MANAGER_DeviceType_002\n               ", "pect(allPeerList[1].DeviceType.TYPE_TABLET).assert", ": SUB_AUDIO_MANAGER_DeviceType_001\n               ", "pect(allPeerList[1].DeviceType.TYPE_UNKNOWN).asser", "DSET == 22 || audio.DeviceType.USB_HEADSET == unde", "       expect(audio.DeviceType.WIRED_HEADSET).asse", "  * @tc.name      : DeviceType - INVALID\n         ", "pect(allPeerList[1].DeviceType.TYPE_LAPTOP).assert", "eActive(audio.ActiveDeviceType.SPEAKER,false).then", "eActive(audio.ActiveDeviceType.SPEAKER);\n         ", "eActive(audio.ActiveDeviceType.BLUETOOTH_SCO).then", "eActive(audio.ActiveDeviceType.SPEAKER,false, (err", ";\n        if (audio.DeviceType.USB_HEADSET == 22 |", "  deviceType: audio.DeviceType.MIC\n        };\n\n   ", "  * @tc.desc      : DeviceType - INVALID\n         ", "pect(allPeerList[1].DeviceType.TYPE_PHONE).assertE", "('SUB_AUDIO_MANAGER_DeviceType_001', 0, async func", "  * @tc.desc      : DeviceType - WIRED_HEADSET\n   "], "files": ["AudioVOIP.test.js", "AudioPerf.test.js", "getAllPeersDeviceTestCallback.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "INVALID", "api_method_all": "INVALID = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 25, "since": 7, "api_used": "\u662f", "lines": ["rceType.SOURCE_TYPE_INVALID).assertEqual(-1);\n ", "rmat - STATE_FORMAT_INVALID\n                * @", "AUDIO_CAPTURER_INFO_INVALID_070', 0, async func", "     : DeviceType - INVALID\n                * @", "ediaErrorCode.MSERR_INVALID_STATE).assertEqual(", "ediaErrorCode.MSERR_INVALID_VAL).assertEqual(3)", "io.AudioState.STATE_INVALID).assertEqual(-1);\n ", "ormat.SAMPLE_FORMAT_INVALID).assertEqual(-1);\n ", "M_AUDIO_STREAM_INFO_INVALID_069\n               ", " AudioState - STATE_INVALID\n                * @", "gType.ENCODING_TYPE_INVALID).assertEqual(-1);\n ", "ype - ENCODING_TYPE_INVALID\n                * @", "eType - SOURCE_TYPE_INVALID\n                * @", "UDIO STATE----------INVALID--------------');\n  ", "ct(audio.DeviceType.INVALID).assertEqual(0);\n  ", "M_AUDIO_STREAM_INFO_INVALID_069', 0, async func", "AUDIO_CAPTURER_INFO_INVALID_070\n               "], "files": ["AudioRenderer.test.js", "VideoPlayerEnumTest.test.js", "SR000GHQBN.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "EARPIECE", "api_method_all": "EARPIECE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["     devTypeName = 'EARPIECE';\n        }\n       "], "files": ["AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "SPEAKER", "api_method_all": "SPEAKER = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 89, "since": 7, "api_used": "\u662f", "lines": ["io.ActiveDeviceType.SPEAKER).then(function (val", ": setDeviceActive : SPEAKER: Activate');\n      ", "io.ActiveDeviceType.SPEAKER,true, (err) => {\n  ", " : isDeviceActive : SPEAKER: Active : PASS :' +", "io.ActiveDeviceType.SPEAKER);\n            };\n  ", ": setDeviceActive : SPEAKER: Deactivate');\n    ", "io.ActiveDeviceType.SPEAKER,false, (err) => {\n ", "ice active ENUM 2 = SPEAKER\n            console", " : isDeviceActive : SPEAKER: Deactivate: Error:", ": setDeviceActive : SPEAKER: Active: Error: ${e", "io.ActiveDeviceType.SPEAKER,(err, value) => {\n ", "ice active ENUM 2 = SPEAKER\n                con", " : isDeviceActive : SPEAKER: Activate : FAIL :'", " : isDeviceActive : SPEAKER: Activate : PASS :'", ": setDeviceActive : SPEAKER: Active');\n        ", "io.ActiveDeviceType.SPEAKER,true).then(function", " : isDeviceActive : SPEAKER: Activate : FAIL :E", ": setDeviceActive : SPEAKER: Deactivate: Error:", "io.ActiveDeviceType.SPEAKER,false).then(functio", "io.ActiveDeviceType.SPEAKER,true);\n            ", "io.ActiveDeviceType.SPEAKER,true,(err, value) =", ": setDeviceActive - SPEAKER - deactivate - Prom", " : isDeviceActive : SPEAKER: Active: Error: ${e", " : isDeviceActive : SPEAKER: Active : FAIL :' +", "     devTypeName = 'SPEAKER';\n        }\n       ", " : isDeviceActive : SPEAKER: Deactivate : PASS ", " : isDeviceActive : SPEAKER: Deactivate : FAIL ", ": setDeviceActive - SPEAKER - deactivate - Call", ": setDeviceActive - SPEAKER - Activate - Promis"], "files": ["AudioPerf.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "WIRED_HEADSET", "api_method_all": "WIRED_HEADSET = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["     : DeviceType - WIRED_HEADSET\n                * @", "ct(audio.DeviceType.WIRED_HEADSET).assertEqual(3);\n  ", "     devTypeName = 'WIRED_HEADSET';\n        }\n       "], "files": ["AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "WIRED_HEADPHONES", "api_method_all": "WIRED_HEADPHONES = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "BLUETOOTH_SCO", "api_method_all": "BLUETOOTH_SCO = 7,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 93, "since": 7, "api_used": "\u662f", "lines": [": setDeviceActive - BLUETOOTH_SCO - deactivate - Call", "io.ActiveDeviceType.BLUETOOTH_SCO,true).then(function", "c      : Deactivate BLUETOOTH_SCO - Promise\n         ", "esc      : Activate BLUETOOTH_SCO - Callback\n        ", " : isDeviceActive : BLUETOOTH_SCO: Activate : FAIL :'", ": isDeviceActive :  BLUETOOTH_SCO: Activate : FAIL : ", "ice active ENUM 3 = BLUETOOTH_SCO\n                con", ": setDeviceActive - BLUETOOTH_SCO - Activate - Promis", ": setDeviceActive : BLUETOOTH_SCO: Active: Error: ${e", ": setDeviceActive : BLUETOOTH_SCO: Deactivate');\n    ", ": setDeviceActive : BLUETOOTH_SCO: Active');\n        ", " : isDeviceActive : BLUETOOTH_SCO: Deactivate : FAIL ", "c      : Deactivate BLUETOOTH_SCO - Callback\n        ", ": isDeviceActive :  BLUETOOTH_SCO: Deactivate : FAIL ", " : isDeviceActive : BLUETOOTH_SCO: Activate : PASS :'", "esc      : Activate BLUETOOTH_SCO - Promise\n         ", "io.ActiveDeviceType.BLUETOOTH_SCO,false).then(functio", "ice active ENUM 3 = BLUETOOTH_SCO\n            console", " : isDeviceActive : BLUETOOTH_SCO: Active: Error: ${e", ": setDeviceActive - BLUETOOTH_SCO - Activate - Callba", "io.ActiveDeviceType.BLUETOOTH_SCO).then(function (val", ": setDeviceActive : BLUETOOTH_SCO: Deactivate: Error:", "io.ActiveDeviceType.BLUETOOTH_SCO,false, (err) => {\n ", " : isDeviceActive : BLUETOOTH_SCO: Active : FAIL :' +", "     devTypeName = 'BLUETOOTH_SCO';\n        }\n       ", ": setDeviceActive - BLUETOOTH_SCO - deactivate - Prom", " : isDeviceActive : BLUETOOTH_SCO: Active : PASS :' +", " : isDeviceActive : BLUETOOTH_SCO: Deactivate: Error:", ": setDeviceActive : BLUETOOTH_SCO: Activate');\n      ", "io.ActiveDeviceType.BLUETOOTH_SCO,true, (err) => {\n  ", " : isDeviceActive : BLUETOOTH_SCO: Deactivate : PASS "], "files": ["AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "BLUETOOTH_A2DP", "api_method_all": "BLUETOOTH_A2DP = 8,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["     devTypeName = 'BLUETOOTH_A2DP';\n        }\n       "], "files": ["AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "MIC", "api_method_all": "MIC = 15,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 83, "since": 7, "api_used": "\u662f", "lines": ["rceType.SOURCE_TYPE_MIC,\n           capture", "     devTypeName = 'MIC';\n        }\n       ", "e: audio.DeviceType.MIC\n        };\n\n       ", "e: audio.DeviceType.MIC\n        };\n \n      ", "rceType.SOURCE_TYPE_MIC,\n            captur"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "CameraJSUnitVideoAsync.test.ets", "RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "VideoRecorderEnumTest.test.js", "CameraJSUnitVideoPromise.test.ets", "AudioFramework.test.js", "VideoRecorderFuncCallbackTest.test.js", "SR000GHQBN.test.js", "SR000GHLLV.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "USB_HEADSET", "api_method_all": "USB_HEADSET = 22,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["f (audio.DeviceType.USB_HEADSET == 22 || audio.Devi", "|| audio.DeviceType.USB_HEADSET == undefined)\n     ", "     : DeviceType - USB_HEADSET\n                * @"], "files": ["SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ActiveDeviceType", "api_method_all": "enum ActiveDeviceType {\n    \n    SPEAKER = 2,\n    \n    BLUETOOTH_SCO = 7,\n  }", "api_method_name": "ActiveDeviceType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 28, "since": 7, "api_used": "\u662f", "lines": ["sDeviceActive(audio.ActiveDeviceType.SPEAKER,(err, value", "tDeviceActive(audio.ActiveDeviceType.SPEAKER,false, (err", "tDeviceActive(audio.ActiveDeviceType.SPEAKER,true);\n    ", "tDeviceActive(audio.ActiveDeviceType.BLUETOOTH_SCO,false", "sDeviceActive(audio.ActiveDeviceType.SPEAKER).then(funct", "tDeviceActive(audio.ActiveDeviceType.SPEAKER,true,(err, ", "sDeviceActive(audio.ActiveDeviceType.SPEAKER);\n         ", "tDeviceActive(audio.ActiveDeviceType.SPEAKER,true, (err)", "sDeviceActive(audio.ActiveDeviceType.BLUETOOTH_SCO,(err,", "tDeviceActive(audio.ActiveDeviceType.BLUETOOTH_SCO,true)", "sDeviceActive(audio.ActiveDeviceType.BLUETOOTH_SCO).then", "tDeviceActive(audio.ActiveDeviceType.SPEAKER,true).then(", "tDeviceActive(audio.ActiveDeviceType.BLUETOOTH_SCO,true,", "tDeviceActive(audio.ActiveDeviceType.SPEAKER,false).then"], "files": ["AudioPerf.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ActiveDeviceType", "api_method_name": "SPEAKER", "api_method_all": "SPEAKER = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 89, "since": 7, "api_used": "\u662f", "lines": ["io.ActiveDeviceType.SPEAKER).then(function (val", ": setDeviceActive : SPEAKER: Activate');\n      ", "io.ActiveDeviceType.SPEAKER,true, (err) => {\n  ", " : isDeviceActive : SPEAKER: Active : PASS :' +", "io.ActiveDeviceType.SPEAKER);\n            };\n  ", ": setDeviceActive : SPEAKER: Deactivate');\n    ", "io.ActiveDeviceType.SPEAKER,false, (err) => {\n ", "ice active ENUM 2 = SPEAKER\n            console", " : isDeviceActive : SPEAKER: Deactivate: Error:", ": setDeviceActive : SPEAKER: Active: Error: ${e", "io.ActiveDeviceType.SPEAKER,(err, value) => {\n ", "ice active ENUM 2 = SPEAKER\n                con", " : isDeviceActive : SPEAKER: Activate : FAIL :'", " : isDeviceActive : SPEAKER: Activate : PASS :'", ": setDeviceActive : SPEAKER: Active');\n        ", "io.ActiveDeviceType.SPEAKER,true).then(function", " : isDeviceActive : SPEAKER: Activate : FAIL :E", ": setDeviceActive : SPEAKER: Deactivate: Error:", "io.ActiveDeviceType.SPEAKER,false).then(functio", "io.ActiveDeviceType.SPEAKER,true);\n            ", "io.ActiveDeviceType.SPEAKER,true,(err, value) =", ": setDeviceActive - SPEAKER - deactivate - Prom", " : isDeviceActive : SPEAKER: Active: Error: ${e", " : isDeviceActive : SPEAKER: Active : FAIL :' +", "     devTypeName = 'SPEAKER';\n        }\n       ", " : isDeviceActive : SPEAKER: Deactivate : PASS ", " : isDeviceActive : SPEAKER: Deactivate : FAIL ", ": setDeviceActive - SPEAKER - deactivate - Call", ": setDeviceActive - SPEAKER - Activate - Promis"], "files": ["AudioPerf.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ActiveDeviceType", "api_method_name": "BLUETOOTH_SCO", "api_method_all": "BLUETOOTH_SCO = 7,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 93, "since": 7, "api_used": "\u662f", "lines": [": setDeviceActive - BLUETOOTH_SCO - deactivate - Call", "io.ActiveDeviceType.BLUETOOTH_SCO,true).then(function", "c      : Deactivate BLUETOOTH_SCO - Promise\n         ", "esc      : Activate BLUETOOTH_SCO - Callback\n        ", " : isDeviceActive : BLUETOOTH_SCO: Activate : FAIL :'", ": isDeviceActive :  BLUETOOTH_SCO: Activate : FAIL : ", "ice active ENUM 3 = BLUETOOTH_SCO\n                con", ": setDeviceActive - BLUETOOTH_SCO - Activate - Promis", ": setDeviceActive : BLUETOOTH_SCO: Active: Error: ${e", ": setDeviceActive : BLUETOOTH_SCO: Deactivate');\n    ", ": setDeviceActive : BLUETOOTH_SCO: Active');\n        ", " : isDeviceActive : BLUETOOTH_SCO: Deactivate : FAIL ", "c      : Deactivate BLUETOOTH_SCO - Callback\n        ", ": isDeviceActive :  BLUETOOTH_SCO: Deactivate : FAIL ", " : isDeviceActive : BLUETOOTH_SCO: Activate : PASS :'", "esc      : Activate BLUETOOTH_SCO - Promise\n         ", "io.ActiveDeviceType.BLUETOOTH_SCO,false).then(functio", "ice active ENUM 3 = BLUETOOTH_SCO\n            console", " : isDeviceActive : BLUETOOTH_SCO: Active: Error: ${e", ": setDeviceActive - BLUETOOTH_SCO - Activate - Callba", "io.ActiveDeviceType.BLUETOOTH_SCO).then(function (val", ": setDeviceActive : BLUETOOTH_SCO: Deactivate: Error:", "io.ActiveDeviceType.BLUETOOTH_SCO,false, (err) => {\n ", " : isDeviceActive : BLUETOOTH_SCO: Active : FAIL :' +", "     devTypeName = 'BLUETOOTH_SCO';\n        }\n       ", ": setDeviceActive - BLUETOOTH_SCO - deactivate - Prom", " : isDeviceActive : BLUETOOTH_SCO: Active : PASS :' +", " : isDeviceActive : BLUETOOTH_SCO: Deactivate: Error:", ": setDeviceActive : BLUETOOTH_SCO: Activate');\n      ", "io.ActiveDeviceType.BLUETOOTH_SCO,true, (err) => {\n  ", " : isDeviceActive : BLUETOOTH_SCO: Deactivate : PASS "], "files": ["AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRingMode", "api_method_all": "enum AudioRingMode {\n    \n    RINGER_MODE_SILENT = 0,\n    \n    RINGER_MODE_VIBRATE = 1,\n    \n    RINGER_MODE_NORMAL = 2,\n  }", "api_method_name": "AudioRingMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["setRingerMode(audio.AudioRingMode.RINGER_MODE_NORMAL,", "setRingerMode(audio.AudioRingMode.RINGER_MODE_SILENT)", "setRingerMode(audio.AudioRingMode.RINGER_MODE_NORMAL)", "lse if(value==audio.AudioRingMode.RINGER_MODE_NORMAL)", "         case audio.AudioRingMode.RINGER_MODE_SILENT:", "         case audio.AudioRingMode.RINGER_MODE_NORMAL:", "         case audio.AudioRingMode.RINGER_MODE_VIBRATE", "setRingerMode(audio.AudioRingMode.RINGER_MODE_SILENT,", "    if(value==audio.AudioRingMode.RINGER_MODE_VIBRATE", "setRingerMode(audio.AudioRingMode.RINGER_MODE_VIBRATE", "    if(value==audio.AudioRingMode.RINGER_MODE_NORMAL)", "    if(value==audio.AudioRingMode.RINGER_MODE_SILENT)"], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRingMode", "api_method_name": "RINGER_MODE_SILENT", "api_method_all": "RINGER_MODE_SILENT = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 29, "since": 7, "api_used": "\u662f", "lines": ["ack : setRingerMode RINGER_MODE_SILENT');\n            if (", "audio.AudioRingMode.RINGER_MODE_SILENT){\n                 ", "ack : setRingerMode RINGER_MODE_SILENT: Error: ${err.messa", " RingerModeChange - RINGER_MODE_SILENT\n                * @", "mise: setRingerMode RINGER_MODE_SILENT: PASS :' +value);\n ", "r Mode Changed to : RINGER_MODE_SILENT : '+ringerMode);\n  ", "mise: setRingerMode RINGER_MODE_SILENT: FAIL :' +value);\n ", "orkTest: Callback : RINGER_MODE_SILENT: Error: ${err.messa", "back: setRingerMode RINGER_MODE_SILENT: FAIL :' +value);\n ", "audio.AudioRingMode.RINGER_MODE_SILENT);\n        promise.t", "audio.AudioRingMode.RINGER_MODE_SILENT, (err) => {\n       ", "audio.AudioRingMode.RINGER_MODE_SILENT);\n        done();\n ", "mise: setRingerMode RINGER_MODE_SILENT');\n            audi", " to Silent ENUM 0 = RINGER_MODE_SILENT\n        promise.the", "audio.AudioRingMode.RINGER_MODE_SILENT:\n                  ", " to Silent ENUM 0 = RINGER_MODE_SILENT\n            console", "back: setRingerMode RINGER_MODE_SILENT: PASS :' +value);\n "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRingMode", "api_method_name": "RINGER_MODE_VIBRATE", "api_method_all": "RINGER_MODE_VIBRATE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 28, "since": 7, "api_used": "\u662f", "lines": ["back: setRingerMode RINGER_MODE_VIBRATE: PASS :' +value);\n ", "ack : setRingerMode RINGER_MODE_VIBRATE');\n            if (", "r Mode Changed to : RINGER_MODE_VIBRATE : '+ringerMode);\n  ", "ack : setRingerMode RINGER_MODE_VIBRATE: Error: ${err.messa", "back: setRingerMode RINGER_MODE_VIBRATE: FAIL :' +value);\n ", "audio.AudioRingMode.RINGER_MODE_VIBRATE);\n        promise.t", "mise: setRingerMode RINGER_MODE_VIBRATE: FAIL :' +value);\n ", "audio.AudioRingMode.RINGER_MODE_VIBRATE:\n                  ", "mise: setRingerMode RINGER_MODE_VIBRATE');\n            audi", "mise: setRingerMode RINGER_MODE_VIBRATE: PASS :' +value);\n ", "audio.AudioRingMode.RINGER_MODE_VIBRATE, (err, value) => {\n", "audio.AudioRingMode.RINGER_MODE_VIBRATE);\n        done();\n ", "orkTest: Callback : RINGER_MODE_VIBRATE: Error: ${err.messa", " Vibration ENUM 1 = RINGER_MODE_VIBRATE\n            console", "rkTest: Callback :  RINGER_MODE_VIBRATE: Error: ${err.messa", " RingerModeChange - RINGER_MODE_VIBRATE\n                * @", "audio.AudioRingMode.RINGER_MODE_VIBRATE,(err, value) => {\n ", "audio.AudioRingMode.RINGER_MODE_VIBRATE){\n                 ", " Vibration ENUM 1 = RINGER_MODE_VIBRATE\n        promise.the"], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRingMode", "api_method_name": "RINGER_MODE_NORMAL", "api_method_all": "RINGER_MODE_NORMAL = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 26, "since": 7, "api_used": "\u662f", "lines": ["mise: setRingerMode RINGER_MODE_NORMAL');\n            audi", "audio.AudioRingMode.RINGER_MODE_NORMAL);\n        promise.t", "audio.AudioRingMode.RINGER_MODE_NORMAL);\n            };\n  ", "audio.AudioRingMode.RINGER_MODE_NORMAL:\n                  ", "mise: setRingerMode RINGER_MODE_NORMAL: PASS :' +value);\n ", "r Mode Changed to : RINGER_MODE_NORMAL : '+ringerMode);\n  ", " to Normal ENUM 2 = RINGER_MODE_NORMAL\n        promise.the", "ack : setRingerMode RINGER_MODE_NORMAL');\n            if (", " to Normal ENUM 2 = RINGER_MODE_NORMAL\n            console", "audio.AudioRingMode.RINGER_MODE_NORMAL, (err) => {\n       ", "mise: setRingerMode RINGER_MODE_NORMAL: FAIL :' +value);\n ", "back: setRingerMode RINGER_MODE_NORMAL: FAIL :' +value);\n ", "audio.AudioRingMode.RINGER_MODE_NORMAL);\n        done();\n ", "ack : setRingerMode RINGER_MODE_NORMAL: Error: ${err.messa", "orkTest: Callback : RINGER_MODE_NORMAL: Error: ${err.messa", "back: setRingerMode RINGER_MODE_NORMAL: PASS :' +value);\n ", "audio.AudioRingMode.RINGER_MODE_NORMAL){\n                 "], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSampleFormat", "api_method_all": "enum AudioSampleFormat {\n    \n    SAMPLE_FORMAT_INVALID = -1,\n    \n    SAMPLE_FORMAT_U8 = 0,\n    \n    SAMPLE_FORMAT_S16LE = 1,\n    \n    SAMPLE_FORMAT_S24LE = 2,\n    \n    SAMPLE_FORMAT_S32LE = 3,\n  }", "api_method_name": "AudioSampleFormat", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 188, "since": 8, "api_used": "\u662f", "lines": ["sampleFormat: audio.AudioSampleFormat.SAMPLE_FORMAT_S24LE", "sampleFormat: audio.AudioSampleFormat.SAMPLE_FORMAT_S32LE", "sampleFormat: audio.AudioSampleFormat.SAMPLE_FORMAT_U8,\n ", "sampleFormat: audio.AudioSampleFormat.SAMPLE_FORMAT_S16LE"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSampleFormat", "api_method_name": "SAMPLE_FORMAT_INVALID", "api_method_all": "SAMPLE_FORMAT_INVALID = -1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSampleFormat.SAMPLE_FORMAT_INVALID).assertEqual(-1);\n "], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSampleFormat", "api_method_name": "SAMPLE_FORMAT_U8", "api_method_all": "SAMPLE_FORMAT_U8 = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSampleFormat.SAMPLE_FORMAT_U8,\n            encodi", "o.AudioSampleFormat.SAMPLE_FORMAT_U8,\n        encodingTy"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSampleFormat", "api_method_name": "SAMPLE_FORMAT_S16LE", "api_method_all": "SAMPLE_FORMAT_S16LE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 68, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSampleFormat.SAMPLE_FORMAT_S16LE,\n        encodingTy", "o.AudioSampleFormat.SAMPLE_FORMAT_S16LE,\n            encodi", "o.AudioSampleFormat.SAMPLE_FORMAT_S16LE,\n           encodin"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSampleFormat", "api_method_name": "SAMPLE_FORMAT_S24LE", "api_method_all": "SAMPLE_FORMAT_S24LE = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSampleFormat.SAMPLE_FORMAT_S24LE,\n            encodi", "o.AudioSampleFormat.SAMPLE_FORMAT_S24LE,\n        encodingTy"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSampleFormat", "api_method_name": "SAMPLE_FORMAT_S32LE", "api_method_all": "SAMPLE_FORMAT_S32LE = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSampleFormat.SAMPLE_FORMAT_S32LE,\n    //     encodin", "o.AudioSampleFormat.SAMPLE_FORMAT_S32LE,\n        encodingTy"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioChannel", "api_method_all": "enum AudioChannel {\n    \n    CHANNEL_1 = 0x1 << 0,\n    \n    CHANNEL_2 = 0x1 << 1\n  }", "api_method_name": "AudioChannel", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 185, "since": 8, "api_used": "\u662f", "lines": ["    channels: audio.AudioChannel.CHANNEL_2,\n    //  ", "    channels: audio.AudioChannel.CHANNEL_1,\n        ", "    channels: audio.AudioChannel.CHANNEL_2,\n        "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioChannel", "api_method_name": "CHANNEL_1", "api_method_all": "CHANNEL_1 = 0x1 << 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 22, "since": 8, "api_used": "\u662f", "lines": [" audio.AudioChannel.CHANNEL_1,\n            sample", " audio.AudioChannel.CHANNEL_1,\n           sampleF", " audio.AudioChannel.CHANNEL_1,\n        sampleForm"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioChannel", "api_method_name": "CHANNEL_2", "api_method_all": "CHANNEL_2 = 0x1 << 1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 159, "since": 8, "api_used": "\u662f", "lines": [" audio.AudioChannel.CHANNEL_2,\n            sample", " audio.AudioChannel.CHANNEL_2,\n           sampleF", " audio.AudioChannel.CHANNEL_2,\n    //     sampleF", " audio.AudioChannel.CHANNEL_2,\n        sampleForm"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_all": "enum AudioSamplingRate {\n    \n    SAMPLE_RATE_8000 = 8000,\n    \n    SAMPLE_RATE_11025 = 11025,\n    \n    SAMPLE_RATE_12000 = 12000,\n    \n    SAMPLE_RATE_16000 = 16000,\n    \n    SAMPLE_RATE_22050 = 22050,\n    \n    SAMPLE_RATE_24000 = 24000,\n    \n    SAMPLE_RATE_32000 = 32000,\n    \n    SAMPLE_RATE_44100 = 44100,\n    \n    SAMPLE_RATE_48000 = 48000,\n    \n    SAMPLE_RATE_64000 = 64000,\n    \n    SAMPLE_RATE_96000 = 96000\n  }", "api_method_name": "AudioSamplingRate", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 185, "since": 8, "api_used": "\u662f", "lines": ["samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_48000,\n", "samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_96000,\n", "samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_22050,\n", "samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_16000,\n", "samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_24000,\n", "samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_64000,\n", "samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_32000,\n", "samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_11025,\n", "samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_12000,\n", "samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_44100,\n", "samplingRate: audio.AudioSamplingRate.SAMPLE_RATE_8000,\n "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_8000", "api_method_all": "SAMPLE_RATE_8000 = 8000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_8000,\n            channe", "o.AudioSamplingRate.SAMPLE_RATE_8000,\n        channels: "], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_11025", "api_method_all": "SAMPLE_RATE_11025 = 11025,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_11025,\n        channels: ", "o.AudioSamplingRate.SAMPLE_RATE_11025,\n            channe"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_12000", "api_method_all": "SAMPLE_RATE_12000 = 12000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_12000,\n        channels: ", "o.AudioSamplingRate.SAMPLE_RATE_12000,\n            channe"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_16000", "api_method_all": "SAMPLE_RATE_16000 = 16000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_16000,\n            channe", "o.AudioSamplingRate.SAMPLE_RATE_16000,\n        channels: "], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_22050", "api_method_all": "SAMPLE_RATE_22050 = 22050,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_22050,\n            channe", "o.AudioSamplingRate.SAMPLE_RATE_22050,\n        channels: "], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_24000", "api_method_all": "SAMPLE_RATE_24000 = 24000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_24000,\n        channels: ", "o.AudioSamplingRate.SAMPLE_RATE_24000,\n            channe"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_32000", "api_method_all": "SAMPLE_RATE_32000 = 32000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_32000,\n        channels: ", "o.AudioSamplingRate.SAMPLE_RATE_32000,\n            channe"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_44100", "api_method_all": "SAMPLE_RATE_44100 = 44100,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 62, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_44100,\n            channe", "o.AudioSamplingRate.SAMPLE_RATE_44100,\n            encodi", "o.AudioSamplingRate.SAMPLE_RATE_44100,\n        channels: ", "o.AudioSamplingRate.SAMPLE_RATE_44100,\n           encodin", "o.AudioSamplingRate.SAMPLE_RATE_44100,\n           channel"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_48000", "api_method_all": "SAMPLE_RATE_48000 = 48000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 94, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_48000,\n    //     channel", "o.AudioSamplingRate.SAMPLE_RATE_48000,\n        channels: "], "files": ["AudioRenderer.test.js", "AudioVOIP.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_64000", "api_method_all": "SAMPLE_RATE_64000 = 64000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_64000,\n        channels: ", "o.AudioSamplingRate.SAMPLE_RATE_64000,\n            channe"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSamplingRate", "api_method_name": "SAMPLE_RATE_96000", "api_method_all": "SAMPLE_RATE_96000 = 96000", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["o.AudioSamplingRate.SAMPLE_RATE_96000,\n        channels: ", "o.AudioSamplingRate.SAMPLE_RATE_96000,\n            channe"], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioEncodingType", "api_method_all": "enum AudioEncodingType {\n    \n    ENCODING_TYPE_INVALID = -1,\n    \n    ENCODING_TYPE_RAW = 0\n  }", "api_method_name": "AudioEncodingType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 188, "since": 8, "api_used": "\u662f", "lines": ["encodingType: audio.AudioEncodingType.ENCODING_TYPE_RAW\n "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioEncodingType", "api_method_name": "ENCODING_TYPE_INVALID", "api_method_all": "ENCODING_TYPE_INVALID = -1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["AudioEncodingType - ENCODING_TYPE_INVALID\n                * @", "o.AudioEncodingType.ENCODING_TYPE_INVALID).assertEqual(-1);\n "], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioEncodingType", "api_method_name": "ENCODING_TYPE_RAW", "api_method_all": "ENCODING_TYPE_RAW = 0", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 181, "since": 8, "api_used": "\u662f", "lines": ["o.AudioEncodingType.ENCODING_TYPE_RAW\n    // }\n\n    // va", "o.AudioEncodingType.ENCODING_TYPE_RAW\n       }\n\n       va", "o.AudioEncodingType.ENCODING_TYPE_RAW\n        }\n\n        ", "o.AudioEncodingType.ENCODING_TYPE_RAW\n    }\n\n    var Audi"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContentType", "api_method_all": "enum ContentType {\n    \n    CONTENT_TYPE_UNKNOWN = 0,\n    \n    CONTENT_TYPE_SPEECH = 1,\n    \n    CONTENT_TYPE_MUSIC = 2,\n    \n    CONTENT_TYPE_MOVIE = 3,\n    \n    CONTENT_TYPE_SONIFICATION = 4,\n    \n    CONTENT_TYPE_RINGTONE = 5,\n  }", "api_method_name": "ContentType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 113, "since": 7, "api_used": "\u662f", "lines": ["     content: audio.ContentType.CONTENT_TYPE_RINGTO", "     content: audio.ContentType.CONTENT_TYPE_MUSIC,", "     content: audio.ContentType.CONTENT_TYPE_SPEECH", "     content: audio.ContentType.CONTENT_TYPE_MOVIE,", "     content: audio.ContentType.CONTENT_TYPE_UNKNOW", "     content: audio.ContentType.CONTENT_TYPE_SONIFI"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContentType", "api_method_name": "CONTENT_TYPE_UNKNOWN", "api_method_all": "CONTENT_TYPE_UNKNOWN = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": [": audio.ContentType.CONTENT_TYPE_UNKNOWN,\n    //     usage: ", ": audio.ContentType.CONTENT_TYPE_UNKNOWN,\n        usage: aud"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContentType", "api_method_name": "CONTENT_TYPE_SPEECH", "api_method_all": "CONTENT_TYPE_SPEECH = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 36, "since": 7, "api_used": "\u662f", "lines": [": audio.ContentType.CONTENT_TYPE_SPEECH,\n           usage: ", ": audio.ContentType.CONTENT_TYPE_SPEECH,\n    //     usage: ", ": audio.ContentType.CONTENT_TYPE_SPEECH,\n        usage: aud", ": audio.ContentType.CONTENT_TYPE_SPEECH,\n            usage:"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContentType", "api_method_name": "CONTENT_TYPE_MUSIC", "api_method_all": "CONTENT_TYPE_MUSIC = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": [": audio.ContentType.CONTENT_TYPE_MUSIC,\n    //     usage: ", ": audio.ContentType.CONTENT_TYPE_MUSIC,\n        usage: aud"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContentType", "api_method_name": "CONTENT_TYPE_MOVIE", "api_method_all": "CONTENT_TYPE_MOVIE = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": [": audio.ContentType.CONTENT_TYPE_MOVIE,\n    //     usage: ", ": audio.ContentType.CONTENT_TYPE_MOVIE,\n        usage: aud"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContentType", "api_method_name": "CONTENT_TYPE_SONIFICATION", "api_method_all": "CONTENT_TYPE_SONIFICATION = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": [": audio.ContentType.CONTENT_TYPE_SONIFICATION,\n        usage: aud", ": audio.ContentType.CONTENT_TYPE_SONIFICATION,\n    //     usage: "], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContentType", "api_method_name": "CONTENT_TYPE_RINGTONE", "api_method_all": "CONTENT_TYPE_RINGTONE = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 37, "since": 8, "api_used": "\u662f", "lines": [": audio.ContentType.CONTENT_TYPE_RINGTONE,\n    //      usage:", ": audio.ContentType.CONTENT_TYPE_RINGTONE,\n    //     usage: ", ": audio.ContentType.CONTENT_TYPE_RINGTONE,\n            usage:", ": audio.ContentType.CONTENT_TYPE_RINGTONE,\n        usage: aud", ": audio.ContentType.CONTENT_TYPE_RINGTONE,\n         usage: au"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StreamUsage", "api_method_all": "enum StreamUsage {\n    \n    STREAM_USAGE_UNKNOWN = 0,\n    \n    STREAM_USAGE_MEDIA = 1,\n    \n    STREAM_USAGE_VOICE_COMMUNICATION = 2,\n    \n    STREAM_USAGE_NOTIFICATION_RINGTONE = 6\n  }", "api_method_name": "StreamUsage", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 113, "since": 7, "api_used": "\u662f", "lines": ["//     usage: audio.StreamUsage.STREAM_USAGE_VOICE_", "       usage: audio.StreamUsage.STREAM_USAGE_MEDIA,", "       usage: audio.StreamUsage.STREAM_USAGE_VOICE_", "       usage: audio.StreamUsage.STREAM_USAGE_UNKNOW", "       usage: audio.StreamUsage.STREAM_USAGE_NOTIFI"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StreamUsage", "api_method_name": "STREAM_USAGE_UNKNOWN", "api_method_all": "STREAM_USAGE_UNKNOWN = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": [": audio.StreamUsage.STREAM_USAGE_UNKNOWN,\n        rendererFl"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StreamUsage", "api_method_name": "STREAM_USAGE_MEDIA", "api_method_all": "STREAM_USAGE_MEDIA = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": [": audio.StreamUsage.STREAM_USAGE_MEDIA,\n        rendererFl"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StreamUsage", "api_method_name": "STREAM_USAGE_VOICE_COMMUNICATION", "api_method_all": "STREAM_USAGE_VOICE_COMMUNICATION = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": [": audio.StreamUsage.STREAM_USAGE_VOICE_COMMUNICATION,\n           rendere", ": audio.StreamUsage.STREAM_USAGE_VOICE_COMMUNICATION,\n            device", ": audio.StreamUsage.STREAM_USAGE_VOICE_COMMUNICATION,\n            render", ": audio.StreamUsage.STREAM_USAGE_VOICE_COMMUNICATION,\n        rendererFl"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StreamUsage", "api_method_name": "STREAM_USAGE_NOTIFICATION_RINGTONE", "api_method_all": "STREAM_USAGE_NOTIFICATION_RINGTONE = 6", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": [": audio.StreamUsage.STREAM_USAGE_NOTIFICATION_RINGTONE,\n        rendererFl", ": audio.StreamUsage.STREAM_USAGE_NOTIFICATION_RINGTONE,\n            render", ": audio.StreamUsage.STREAM_USAGE_NOTIFICATION_RINGTONE,\n         rendererF"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioStreamInfo", "api_method_all": "interface AudioStreamInfo {\n    \n    samplingRate: AudioSamplingRate;\n    \n    channels: AudioChannel;\n    \n    sampleFormat: AudioSampleFormat;\n    \n    encodingType: AudioEncodingType;\n  }", "api_method_name": "AudioStreamInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 324, "since": 8, "api_used": "\u662f", "lines": ["on (done) {\n    var AudioStreamInfo = {\n        samplin", "        streamInfo: AudioStreamInfo,\n            captur", "n (done) {\n\n    var AudioStreamInfo = {\n        samplin", "        streamInfo: AudioStreamInfo,\n        rendererIn", "        streamInfo: AudioStreamInfo,\n            render", "      }\n\n       var AudioStreamInfoRen = {\n           s", "        streamInfo: AudioStreamInfoCap,\n           capt", "        streamInfo: AudioStreamInfoRen,\n           rend", "one) {\n\n        var AudioStreamInfo = {\n            sam", "done) {\n\n       var AudioStreamInfoCap = {\n           s"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioStreamInfo", "api_method_name": "samplingRate", "api_method_all": "samplingRate: AudioSamplingRate", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 247, "since": 8, "api_used": "\u662f", "lines": ["Type);\n             samplingRate = audioParamsGet.sa", "n.state);\n\n     var samplingRate;\n     audioRen.getS", "oCap = {\n           samplingRate: audio.AudioSamplin", ":' + audioParamsGet.samplingRate);\n             cons", ":' + audioParamsGet.samplingRate);\n            conso", "nfo = {\n            samplingRate: audio.AudioSamplin", "orkRecLog: Capturer samplingRate:' + audioParamsGet.", "tTime;\n     switch (samplingRate) {\n         case 44", "oRen = {\n           samplingRate: audio.AudioSamplin", "te = audioParamsGet.samplingRate;\n         }\n     })", "RenderLog: Renderer samplingRate:' + audioParamsGet.", "eamInfo = {\n        samplingRate: audio.AudioSamplin"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioStreamInfo", "api_method_name": "channels", "api_method_all": "channels: AudioChannel", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 243, "since": 8, "api_used": "\u662f", "lines": ["_44100,\n            channels: audio.AudioChannel", "RATE_44100,\n        channels: audio.AudioChannel", "RATE_16000,\n        channels: audio.AudioChannel", ":' + audioParamsGet.channels);\n            conso", "RATE_11025,\n        channels: audio.AudioChannel", "RATE_12000,\n        channels: audio.AudioChannel", "RenderLog: Renderer channels:' + audioParamsGet.", "_RATE_8000,\n        channels: audio.AudioChannel", "RATE_32000,\n        channels: audio.AudioChannel", "RATE_64000,\n        channels: audio.AudioChannel", "RATE_48000,\n        channels: audio.AudioChannel", ":' + audioParamsGet.channels);\n             cons", "RATE_96000,\n        channels: audio.AudioChannel", "E_44100,\n           channels: audio.AudioChannel", "orkRecLog: Capturer channels:' + audioParamsGet.", "RATE_24000,\n        channels: audio.AudioChannel", "RATE_22050,\n        channels: audio.AudioChannel", "E_48000,\n    //     channels: audio.AudioChannel"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioStreamInfo", "api_method_name": "sampleFormat", "api_method_all": "sampleFormat: AudioSampleFormat", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 235, "since": 8, "api_used": "\u662f", "lines": ["ANNEL_2,\n           sampleFormat: audio.AudioSampleF", ".CHANNEL_2,\n        sampleFormat: audio.AudioSampleF", ":' + audioParamsGet.sampleFormat);\n             cons", "ANNEL_1,\n           sampleFormat: audio.AudioSampleF", "NNEL_2,\n            sampleFormat: audio.AudioSampleF", ".CHANNEL_1,\n        sampleFormat: audio.AudioSampleF", ":' + audioParamsGet.sampleFormat);\n            conso", "ANNEL_2,\n    //     sampleFormat: audio.AudioSampleF", "orkRecLog: Capturer sampleFormat:' + audioParamsGet.", "RenderLog: Renderer sampleFormat:' + audioParamsGet.", "NNEL_1,\n            sampleFormat: audio.AudioSampleF"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioStreamInfo", "api_method_name": "encodingType", "api_method_all": "encodingType: AudioEncodingType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 235, "since": 8, "api_used": "\u662f", "lines": ["RMAT_S16LE,\n        encodingType: audio.AudioEncodin", "RMAT_S24LE,\n        encodingType: audio.AudioEncodin", "orkRecLog: Capturer encodingType:' + audioParamsGet.", "T_S16LE,\n           encodingType: audio.AudioEncodin", ":' + audioParamsGet.encodingType);\n             samp", "RenderLog: Renderer encodingType:' + audioParamsGet.", "RMAT_S32LE,\n        encodingType: audio.AudioEncodin", "T_S32LE,\n    //     encodingType: audio.AudioEncodin", "_S16LE,\n            encodingType: audio.AudioEncodin", "_FORMAT_U8,\n        encodingType: audio.AudioEncodin", ":' + audioParamsGet.encodingType);\n        }).catch("], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererInfo", "api_method_all": "interface AudioRendererInfo {\n    \n    content: ContentType;\n    \n    usage: StreamUsage;\n    \n    rendererFlags: number;\n  }", "api_method_name": "AudioRendererInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 378, "since": 8, "api_used": "\u662f", "lines": ["      rendererInfo: AudioRendererInfo\n        }\n\n        ", "     }\n\n        var AudioRendererInfo = {\n            con", "_RAW\n    }\n\n    var AudioRendererInfo = {\n        content", "      rendererInfo: AudioRendererInfo\n       }\n       rec", "      rendererInfo: AudioRendererInfo\n    }\n\n    var resu", "      }\n\n       var AudioRendererInfo = {\n           cont"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererInfo", "api_method_name": "content", "api_method_all": "content: ContentType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 405, "since": 8, "api_used": "\u662f", "lines": ["Info = {\n    //     content: audio.ContentType.", ":' + audioParamsGet.content);\n             cons", ":' + audioParamsGet.content);\n            conso", "nfo = {\n            content: audio.ContentType.", "RenderLog: Renderer content type:' + audioParam", "rerInfo = {\n        content: audio.ContentType.", "Info = {\n           content: audio.ContentType."], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererInfo", "api_method_name": "usage", "api_method_all": "usage: StreamUsage", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 445, "since": 8, "api_used": "\u662f", "lines": ["YPE_SPEECH,\n        usage: audio.StreamUsage.", "TYPE_MUSIC,\n        usage: audio.StreamUsage.", "TYPE_MOVIE,\n        usage: audio.StreamUsage.", "E_MUSIC,\n    //     usage: audio.StreamUsage.", ":' + audioParamsGet.usage);\n             cons", "SPEECH,\n            usage: audio.StreamUsage.", "NIFICATION,\n        usage: audio.StreamUsage.", "_SPEECH,\n           usage: audio.StreamUsage.", ":' + audioParamsGet.usage);\n            conso", "PE_UNKNOWN,\n        usage: audio.StreamUsage.", "E_RINGTONE,\n        usage: audio.StreamUsage.", "E_MOVIE,\n    //     usage: audio.StreamUsage.", "INGTONE,\n    //     usage: audio.StreamUsage.", "_SPEECH,\n    //     usage: audio.StreamUsage.", "RenderLog: Renderer usage:' + audioParamsGet.", "UNKNOWN,\n    //     usage: audio.StreamUsage.", "ICATION,\n    //     usage: audio.StreamUsage."], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererInfo", "api_method_name": "rendererFlags", "api_method_all": "rendererFlags: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 319, "since": 8, "api_used": "\u662f", "lines": ["CATION,\n            rendererFlags: 1\n        }\n\n     ", "RenderLog: Renderer rendererFlags:' + audioParamsGet.", "ICATION,\n           rendererFlags: 1\n       }\n\n      ", "MUNICATION,\n        rendererFlags: 1\n    }\n\n    var A", "GE_UNKNOWN,\n        rendererFlags: 1\n    }\n\n    var A", ":' + audioParamsGet.rendererFlags);\n        }).catch(", "SISTANT,\n    //     rendererFlags: 1\n    // }\n\n    //", ":' + audioParamsGet.rendererFlags);\n         }\n     }", "N_RINGTONE,\n        rendererFlags: 1\n    }\n\n    var A", "SAGE_MEDIA,\n        rendererFlags: 1\n    }\n\n    var A"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererOptions", "api_method_all": "interface AudioRendererOptions {\n    \n    streamInfo: AudioStreamInfo;\n    \n    rendererInfo: AudioRendererInfo;\n  }", "api_method_name": "AudioRendererOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 228, "since": 8, "api_used": "\u662f", "lines": ["s: 1\n    }\n\n    var AudioRendererOptions = {\n        streamI", "    playbackPromise(AudioRendererOptions, mediaDir+'/StarWar", "     }\n\n        var AudioRendererOptions = {\n            str", "ait playbackPromise(AudioRendererOptions, mediaDir+'/StarWar", "createAudioRenderer(AudioRendererOptions,(err, data) => {\n  ", "on playbackPromise (AudioRendererOptions, fpath, AudioScene)", "unction playbackCB (AudioRendererOptions, fpath){\n\n     var ", "      }\n\n       var AudioRendererOptions = {\n           stre", "createAudioRenderer(AudioRendererOptions).then(async functio"], "files": ["AudioCall.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererOptions", "api_method_name": "streamInfo", "api_method_all": "streamInfo: AudioStreamInfo", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 201, "since": 8, "api_used": "\u662f", "lines": ["Options = {\n        streamInfo: AudioStreamInfo,\n ", "ons = {\n            streamInfo: AudioStreamInfo,\n ", "ions = {\n           streamInfo: AudioStreamInfoCap", "ions = {\n    //     streamInfo: AudioStreamInfo,\n ", "ions = {\n           streamInfo: AudioStreamInfoRen"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererOptions", "api_method_name": "rendererInfo", "api_method_all": "rendererInfo: AudioRendererInfo", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 111, "since": 8, "api_used": "\u662f", "lines": ["InfoRen,\n           rendererInfo: AudioRendererInfo\n", "StreamInfo,\n        rendererInfo: AudioRendererInfo\n", "amInfo,\n            rendererInfo: AudioRendererInfo\n", "eamInfo,\n    //     rendererInfo: AudioRendererInfo\n"], "files": ["AudioCall.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererRate", "api_method_all": "enum AudioRendererRate {\n    \n    RENDER_RATE_NORMAL = 0,\n    \n    RENDER_RATE_DOUBLE = 1,\n    \n    RENDER_RATE_HALF = 2\n  }", "api_method_name": "AudioRendererRate", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["setRenderRate(audio.AudioRendererRate.RENDER_RATE_HALF).t", "setRenderRate(audio.AudioRendererRate.RENDER_RATE_NORMAL)", "  if (data == audio.AudioRendererRate.RENDER_RATE_HALF){\n", "  if (data == audio.AudioRendererRate.RENDER_RATE_NORMAL)", "e if (data == audio.AudioRendererRate.RENDER_RATE_DOUBLE)", "setRenderRate(audio.AudioRendererRate.RENDER_RATE_DOUBLE)", "setRenderRate(audio.AudioRendererRate.RENDER_RATE_DOUBLE,", "  if (data == audio.AudioRendererRate.RENDER_RATE_DOUBLE)"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererRate", "api_method_name": "RENDER_RATE_NORMAL", "api_method_all": "RENDER_RATE_NORMAL = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["r - SetRenderRate - RENDER_RATE_NORMAL\n    * @tc.size     ", "og: getRenderRate : RENDER_RATE_NORMAL : PASS : '+data);\n ", "og: setRenderRate : RENDER_RATE_NORMAL : SUCCESS');\n     }", "ne: setRenderRate : RENDER_RATE_NORMAL : ERROR : '+err.mes", "derRate - DEFAULT - RENDER_RATE_NORMAL\n    * @tc.size     ", "og: getRenderRate : RENDER_RATE_NORMAL : FAIL : '+data);\n ", "ne: getRenderRate : RENDER_RATE_NORMAL : ERROR : '+err.mes", "r - SetRenderRate - RENDER_RATE_NORMAL\n    * @tc.desc     ", "o.AudioRendererRate.RENDER_RATE_NORMAL){\n             cons", "o.AudioRendererRate.RENDER_RATE_NORMAL).then(async functio", "derRate - DEFAULT - RENDER_RATE_NORMAL\n    * @tc.desc     "], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererRate", "api_method_name": "RENDER_RATE_DOUBLE", "api_method_all": "RENDER_RATE_DOUBLE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 21, "since": 8, "api_used": "\u662f", "lines": ["o.AudioRendererRate.RENDER_RATE_DOUBLE){\n                c", "og: getRenderRate : RENDER_RATE_DOUBLE : FAIL : '+data);\n ", "o.AudioRendererRate.RENDER_RATE_DOUBLE).then(async functio", "og: setRenderRate : RENDER_RATE_DOUBLE : SUCCESS');\n      ", "ne: setRenderRate : RENDER_RATE_DOUBLE : ERROR : '+err.mes", "r - SetRenderRate - RENDER_RATE_DOUBLE\n    * @tc.size     ", "o.AudioRendererRate.RENDER_RATE_DOUBLE){\n             cons", "r - SetRenderRate - RENDER_RATE_DOUBLE - Callback\n    * @t", "og: getRenderRate : RENDER_RATE_DOUBLE : PASS : '+data);\n ", "r - SetRenderRate - RENDER_RATE_DOUBLE\n    * @tc.desc     ", "o.AudioRendererRate.RENDER_RATE_DOUBLE, (err) => {\n       ", "ne: getRenderRate : RENDER_RATE_DOUBLE : ERROR : '+err.mes"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRendererRate", "api_method_name": "RENDER_RATE_HALF", "api_method_all": "RENDER_RATE_HALF = 2", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["o.AudioRendererRate.RENDER_RATE_HALF){\n             cons", "r - SetRenderRate - RENDER_RATE_HALF\n    * @tc.size     ", "og: setRenderRate : RENDER_RATE_HALF : SUCCESS');\n      ", "o.AudioRendererRate.RENDER_RATE_HALF).then(async functio", "r - SetRenderRate - RENDER_RATE_HALF\n    * @tc.desc     ", "og: getRenderRate : RENDER_RATE_HALF : FAIL : '+data);\n ", "og: getRenderRate : RENDER_RATE_HALF : PASS : '+data);\n ", "ne: getRenderRate : RENDER_RATE_HALF : ERROR : '+err.mes", "ne: setRenderRate : RENDER_RATE_HALF : ERROR : '+err.mes"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptType", "api_method_all": "enum InterruptType {\n    \n    INTERRUPT_TYPE_BEGIN = 1,\n\n    \n    INTERRUPT_TYPE_END = 2\n  }", "api_method_name": "InterruptType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : InterruptType - INTERRUPT_TYPE_EN", "  * @tc.desc      : InterruptType - INTERRUPT_TYPE_EN", "  * @tc.name      : InterruptType - INTERRUPT_TYPE_BE", "  * @tc.desc      : InterruptType - INTERRUPT_TYPE_BE", "       expect(audio.InterruptType.INTERRUPT_TYPE_END)", "       expect(audio.InterruptType.INTERRUPT_TYPE_BEGI"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptType", "api_method_name": "INTERRUPT_TYPE_BEGIN", "api_method_all": "INTERRUPT_TYPE_BEGIN = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["audio.InterruptType.INTERRUPT_TYPE_BEGIN).assertEqual(1);\n  ", "  : InterruptType - INTERRUPT_TYPE_BEGIN\n                * @"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptType", "api_method_name": "INTERRUPT_TYPE_END", "api_method_all": "INTERRUPT_TYPE_END = 2", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["audio.InterruptType.INTERRUPT_TYPE_END).assertEqual(2);\n  ", "  : InterruptType - INTERRUPT_TYPE_END\n                * @"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptHint", "api_method_all": "enum InterruptHint {\n    \n    INTERRUPT_HINT_NONE = 0,\n    \n    INTERRUPT_HINT_RESUME = 1,\n\n    \n    INTERRUPT_HINT_PAUSE = 2,\n\n    \n    INTERRUPT_HINT_STOP = 3,\n\n    \n    INTERRUPT_HINT_DUCK = 4,\n\n    \n    INTERRUPT_HINT_UNDUCK = 5,\n  }", "api_method_name": "InterruptHint", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : InterruptHint - INTERRUPT_HINT_ST", "       expect(audio.InterruptHint.INTERRUPT_HINT_STOP", "       expect(audio.InterruptHint.INTERRUPT_HINT_UNDU", "       expect(audio.InterruptHint.INTERRUPT_HINT_RESU", "  * @tc.name      : InterruptHint - INTERRUPT_HINT_DU", "       expect(audio.InterruptHint.INTERRUPT_HINT_PAUS", "  * @tc.desc      : InterruptHint - INTERRUPT_HINT_NO", "       expect(audio.InterruptHint.INTERRUPT_HINT_NONE", "  * @tc.desc      : InterruptHint - INTERRUPT_HINT_ST", "  * @tc.name      : InterruptHint - INTERRUPT_HINT_PA", "       expect(audio.InterruptHint.INTERRUPT_HINT_DUCK", "  * @tc.name      : InterruptHint - INTERRUPT_HINT_UN", "  * @tc.name      : InterruptHint - INTERRUPT_HINT_NO", "  * @tc.desc      : InterruptHint - INTERRUPT_HINT_DU", "  * @tc.desc      : InterruptHint - INTERRUPT_HINT_UN", "  * @tc.desc      : InterruptHint - INTERRUPT_HINT_PA", "  * @tc.desc      : InterruptHint - INTERRUPT_HINT_RE", "  * @tc.name      : InterruptHint - INTERRUPT_HINT_RE"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptHint", "api_method_name": "INTERRUPT_HINT_NONE", "api_method_all": "INTERRUPT_HINT_NONE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["  : InterruptHint - INTERRUPT_HINT_NONE\n                * @", "audio.InterruptHint.INTERRUPT_HINT_NONE).assertEqual(0);\n  "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptHint", "api_method_name": "INTERRUPT_HINT_RESUME", "api_method_all": "INTERRUPT_HINT_RESUME = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["  : InterruptHint - INTERRUPT_HINT_RESUME\n                * @", "audio.InterruptHint.INTERRUPT_HINT_RESUME).assertEqual(1);\n  "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptHint", "api_method_name": "INTERRUPT_HINT_PAUSE", "api_method_all": "INTERRUPT_HINT_PAUSE = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["audio.InterruptHint.INTERRUPT_HINT_PAUSE).assertEqual(2);\n  ", "  : InterruptHint - INTERRUPT_HINT_PAUSE\n                * @"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptHint", "api_method_name": "INTERRUPT_HINT_STOP", "api_method_all": "INTERRUPT_HINT_STOP = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["audio.InterruptHint.INTERRUPT_HINT_STOP).assertEqual(3);\n  ", "  : InterruptHint - INTERRUPT_HINT_STOP\n                * @"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptHint", "api_method_name": "INTERRUPT_HINT_DUCK", "api_method_all": "INTERRUPT_HINT_DUCK = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["  : InterruptHint - INTERRUPT_HINT_DUCK\n                * @", "audio.InterruptHint.INTERRUPT_HINT_DUCK).assertEqual(4);\n  "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptHint", "api_method_name": "INTERRUPT_HINT_UNDUCK", "api_method_all": "INTERRUPT_HINT_UNDUCK = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["  : InterruptHint - INTERRUPT_HINT_UNDUCK\n                * @", "audio.InterruptHint.INTERRUPT_HINT_UNDUCK).assertEqual(5);\n  "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptForceType", "api_method_all": "enum InterruptForceType {\n    \n    INTERRUPT_FORCE = 0,\n    \n    INTERRUPT_SHARE\n  }", "api_method_name": "InterruptForceType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["       expect(audio.InterruptForceType.INTERRUPT_FORCE).as", "  * @tc.name      : InterruptForceType - INTERRUPT_SHARE\n ", "  * @tc.desc      : InterruptForceType - INTERRUPT_FORCE\n ", "  * @tc.desc      : InterruptForceType - INTERRUPT_SHARE\n ", "  * @tc.name      : InterruptForceType - INTERRUPT_FORCE\n ", "       expect(audio.InterruptForceType.INTERRUPT_SHARE).as"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptForceType", "api_method_name": "INTERRUPT_FORCE", "api_method_all": "INTERRUPT_FORCE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 9, "api_used": "\u662f", "lines": ["nterruptForceType - INTERRUPT_FORCE\n                * @", ".InterruptForceType.INTERRUPT_FORCE).assertEqual(0);\n  "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptEvent", "api_method_all": "interface InterruptEvent {\n    \n    eventType: InterruptType;\n\n    \n    forceType: InterruptForceType;\n\n    \n    hintType: InterruptHint;\n  }", "api_method_name": "InterruptEvent", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptEvent", "api_method_name": "eventType", "api_method_all": "eventType: InterruptType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptEvent", "api_method_name": "forceType", "api_method_all": "forceType: InterruptForceType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptEvent", "api_method_name": "hintType", "api_method_all": "hintType: InterruptHint", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptActionType", "api_method_all": "enum InterruptActionType {\n\n    \n    TYPE_ACTIVATED = 0,\n\n    \n    TYPE_INTERRUPT = 1\n  }", "api_method_name": "InterruptActionType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptActionType", "api_method_name": "TYPE_ACTIVATED", "api_method_all": "TYPE_ACTIVATED = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptActionType", "api_method_name": "TYPE_INTERRUPT", "api_method_all": "TYPE_INTERRUPT = 1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceChangeType", "api_method_all": "enum DeviceChangeType {\n    \n    CONNECT = 0,\n\n    \n    DISCONNECT = 1,\n  }", "api_method_name": "DeviceChangeType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceChangeType", "api_method_name": "CONNECT", "api_method_all": "CONNECT = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["nnectionType.CAMERA_CONNECTION_REMOTE).assertEq", "nnectionType.CAMERA_CONNECTION_USB_PLUGIN).asse", "   })\n\n    \n    it('CONNECTION_TYPE', 0, async ", "nnectionType.CAMERA_CONNECTION_REMOTE);\n\t   exp", "nnectionType.CAMERA_CONNECTION_USB_PLUGIN);\n   ", "nnectionType.CAMERA_CONNECTION_BUILT_IN).assert", "nnectionType.CAMERA_CONNECTION_BUILT_IN);\n\t\t   ", "nnectionType.CAMERA_CONNECTION_REMOTE);\n      e", "nnectionType.CAMERA_CONNECTION_USB_PLUGIN);\n\t  ", "nnectionType.CAMERA_CONNECTION_BUILT_IN);\n     ", "nnectionType CAMERA_CONNECTION_USB_PLUGIN : \" +", "nnectionType CAMERA_CONNECTION_BUILT_IN : \" + c", "nnectionType CAMERA_CONNECTION_REMOTE : \" + cam"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceChangeType", "api_method_name": "DISCONNECT", "api_method_all": "DISCONNECT = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioScene", "api_method_all": "enum AudioScene {\n    \n    AUDIO_SCENE_DEFAULT = 0,\n    \n    AUDIO_SCENE_RINGING,\n    \n    AUDIO_SCENE_PHONE_CALL,\n    \n    AUDIO_SCENE_VOICE_CHAT\n  }", "api_method_name": "AudioScene", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 974, "since": 8, "api_used": "\u662f", "lines": ["FrameworkRecLog: getAudioScene : Value : '+data);\n", "-2C-16B.pcm', audio.AudioScene.AUDIO_SCENE_VOICE_C", "eworkAudioScene: getAudioScene : ERROR : '+err.mes", "info('AudioFrameworkAudioScene: getAudioScene : ER", "ait audioManager.setAudioScene(AudioScene).then(as", "urerOptions, fpath, AudioScene) {\n\n        resultF", "ererOptions, fpath, AudioScene) {\n        resultFl", "setAudioScene(audio.AudioScene.AUDIO_SCENE_VOICE_C", "meworkRenderLog: getAudioScene : PASS : '+data);\n ", "setAudioScene(audio.AudioScene.AUDIO_SCENE_RINGING", " it('SUB_AUDIO_CALL_AudioScene_001', 0, async func", "meworkRenderLog: setAudioScene : ERROR : '+err.mes", "meworkRenderLog: getAudioScene : Value : '+data);\n", "erRec.setAudioScene(AudioScene).then(async functio", "meworkRenderLog: getAudioScene : ERROR : '+err.mes", "  if (data == audio.AudioScene.AUDIO_SCENE_RINGING", " it('SUB_AUDIO_CALL_AudioScene_003', 0, async func", "meworkRenderLog: setAudioScene : SUCCESS ');\n     ", "FrameworkRecLog: getAudioScene : ERROR : '+err.mes", "ait audioManager.getAudioScene().then(async functi", "ait audioManager.setAudioScene(3).then(async funct", "ait audioManager.setAudioScene(audio.AudioScene.AU", " it('SUB_AUDIO_CALL_AudioScene_002', 0, async func", "info('AudioFrameworkAudioScene: getAudioScene : Va", "FrameworkRecLog: setAudioScene : SUCCESS ');\n     ", "eworkAudioScene: getAudioScene : Value : '+data);\n", "FrameworkRecLog: setAudioScene : ERROR : '+err.mes", " audioManagerRec.setAudioScene(AudioScene).then(as", " it('SUB_AUDIO_CALL_AudioScene_004', 0, async func", "100-2SW.wav', audio.AudioScene.AUDIO_SCENE_VOICE_C", " audioManagerRec.getAudioScene().then(async functi", "C-16B-2.pcm', audio.AudioScene.AUDIO_SCENE_VOICE_C", "  if (data == audio.AudioScene.AUDIO_SCENE_VOICE_C", "nager.setAudioScene(AudioScene).then(async functio", "meworkRenderLog: getAudioScene : FAIL : '+data);\n "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioScene", "api_method_name": "AUDIO_SCENE_DEFAULT", "api_method_all": "AUDIO_SCENE_DEFAULT = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 67, "since": 8, "api_used": "\u662f", "lines": [" : getAudioScene as AUDIO_SCENE_DEFAULT - Callback - ENUM\n ", " : getAudioScene as AUDIO_SCENE_DEFAULT to VOIP - ENAME\n   ", "== audio.AudioScene.AUDIO_SCENE_DEFAULT){\n                 ", " : getAudioScene as AUDIO_SCENE_DEFAULT to VOIP - ENUM\n    ", " : getAudioScene as AUDIO_SCENE_DEFAULT - ENUM\n       * @tc", " : getAudioScene as AUDIO_SCENE_DEFAULT - ENAME\n           ", "', audio.AudioScene.AUDIO_SCENE_DEFAULT);\n    await sleep(2", " : getAudioScene as AUDIO_SCENE_DEFAULT - ENAME\n       * @t", "ne(audio.AudioScene.AUDIO_SCENE_DEFAULT).then(async functio", "== audio.AudioScene.AUDIO_SCENE_DEFAULT){\n                c", " : setAudioScene as AUDIO_SCENE_DEFAULT - Callback - ENUM\n ", " : getAudioScene as AUDIO_SCENE_DEFAULT to VOIP - Callback ", "', audio.AudioScene.AUDIO_SCENE_DEFAULT);\n    await sleep(1", " : setAudioScene as AUDIO_SCENE_DEFAULT - ENAME\n           ", " : setAudioScene as AUDIO_SCENE_DEFAULT - Callback - ENAME\n", "ne(audio.AudioScene.AUDIO_SCENE_DEFAULT, (err) => {\n       ", " : getAudioScene as AUDIO_SCENE_DEFAULT - ENUM\n           *", " : setAudioScene as AUDIO_SCENE_DEFAULT - Promise - ENUM\n  ", " : setAudioScene as AUDIO_SCENE_DEFAULT - ENUM\n           *", " : getAudioScene as AUDIO_SCENE_DEFAULT - Callback - ENAME\n", " : getAudioScene as AUDIO_SCENE_DEFAULT to VOIP - Promise -", " : getAudioScene as AUDIO_SCENE_DEFAULT to VOIP- ENAME\n    ", " : getAudioScene as AUDIO_SCENE_DEFAULT - Promise - ENUM\n  "], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioScene", "api_method_name": "AUDIO_SCENE_RINGING", "api_method_all": "AUDIO_SCENE_RINGING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 34, "since": 8, "api_used": "\u662f", "lines": ["UDIO_PROMISE_RECORD_AUDIO_SCENE_RINGING_049\n               ", "ne(audio.AudioScene.AUDIO_SCENE_RINGING, (err) => {\n       ", "', audio.AudioScene.AUDIO_SCENE_RINGING);\n        await sle", "== audio.AudioScene.AUDIO_SCENE_RINGING){\n                 ", " : setAudioScene as AUDIO_SCENE_RINGING - Callback - ENUM\n ", " : setAudioScene as AUDIO_SCENE_RINGING - ENUM\n           *", "UDIO_PROMISE_RECORD_AUDIO_SCENE_RINGING_ENUM_050', 0, async", "UDIO_PROMISE_RECORD_AUDIO_SCENE_RINGING_ENUM_050\n          ", "== audio.AudioScene.AUDIO_SCENE_RINGING){\n                c", " : getAudioScene as AUDIO_SCENE_RINGING - Promise - ENUM\n  ", "ne(audio.AudioScene.AUDIO_SCENE_RINGING).then(async functio", "', audio.AudioScene.AUDIO_SCENE_RINGING);\n    await sleep(1", "UDIO_PROMISE_RECORD_AUDIO_SCENE_RINGING_049', 0, async func", "ne(audio.AudioScene.AUDIO_SCENE_RINGING,async (err) => {\n  ", " : getAudioScene as AUDIO_SCENE_RINGING - Callback - ENUM\n ", " : setAudioScene as AUDIO_SCENE_RINGING - Promise - ENUM\n  ", " : setAudioScene as AUDIO_SCENE_RINGING - ENAME\n           ", " : getAudioScene as AUDIO_SCENE_RINGING - ENAME\n       * @t", " : getAudioScene as AUDIO_SCENE_RINGING - Callback - ENAME\n", " : getAudioScene as AUDIO_SCENE_RINGING - ENUM\n           *", " : getAudioScene as AUDIO_SCENE_RINGING - ENUM\n       * @tc", " : getAudioScene as AUDIO_SCENE_RINGING - ENAME\n           ", " : setAudioScene as AUDIO_SCENE_RINGING - Callback - ENAME\n"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioScene", "api_method_name": "AUDIO_SCENE_PHONE_CALL", "api_method_all": "AUDIO_SCENE_PHONE_CALL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 33, "since": 8, "api_used": "\u662f", "lines": ["ne(audio.AudioScene.AUDIO_SCENE_PHONE_CALL, (err) => {\n       ", "ne(audio.AudioScene.AUDIO_SCENE_PHONE_CALL).then(async functio", " : setAudioScene as AUDIO_SCENE_PHONE_CALL - ENAME\n           ", " : getAudioScene as AUDIO_SCENE_PHONE_CALL - ENAME\n       * @t", "UDIO_RECORD_PROMISE_AUDIO_SCENE_PHONE_CALL_Audio_051', 0, asyn", " : setAudioScene as AUDIO_SCENE_PHONE_CALL - ENUM\n           *", " : getAudioScene as AUDIO_SCENE_PHONE_CALL - Callback - ENUM\n ", "UDIO_RECORD_PROMISE_AUDIO_SCENE_PHONE_CALL_Audio_ENUM_052', 0,", " : setAudioScene as AUDIO_SCENE_PHONE_CALL - Callback - ENUM\n ", " : getAudioScene as AUDIO_SCENE_PHONE_CALL to VOIP - Promise -", " : getAudioScene as AUDIO_SCENE_PHONE_CALL to VOIP- ENAME\n    ", " : getAudioScene as AUDIO_SCENE_PHONE_CALL to VOIP - Callback ", " : getAudioScene as AUDIO_SCENE_PHONE_CALL - ENAME\n           ", "== audio.AudioScene.AUDIO_SCENE_PHONE_CALL){\n                c", "== audio.AudioScene.AUDIO_SCENE_PHONE_CALL){\n                 ", " : getAudioScene as AUDIO_SCENE_PHONE_CALL - ENUM\n       * @tc", "', audio.AudioScene.AUDIO_SCENE_PHONE_CALL);\n    await sleep(1", "', audio.AudioScene.AUDIO_SCENE_PHONE_CALL);\n        await sle", "UDIO_RECORD_PROMISE_AUDIO_SCENE_PHONE_CALL_Audio_ENUM_052\n    ", "UDIO_RECORD_PROMISE_AUDIO_SCENE_PHONE_CALL_Audio_051\n         ", " : getAudioScene as AUDIO_SCENE_PHONE_CALL - Callback - ENAME\n", " : getAudioScene as AUDIO_SCENE_PHONE_CALL - Promise - ENUM\n  ", " : getAudioScene as AUDIO_SCENE_PHONE_CALL to VOIP - ENAME\n   ", " : setAudioScene as AUDIO_SCENE_PHONE_CALL - Callback - ENAME\n", " : getAudioScene as AUDIO_SCENE_PHONE_CALL to VOIP - ENUM\n    ", " : setAudioScene as AUDIO_SCENE_PHONE_CALL - Promise - ENUM\n  ", " : getAudioScene as AUDIO_SCENE_PHONE_CALL - ENUM\n           *"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_all": "interface AudioManager {\n    \n    setVolume(volumeType: AudioVolumeType, volume: number, callback: AsyncCallback<void>): void;\n    \n    setVolume(volumeType: AudioVolumeType, volume: number): Promise<void>;\n    \n    getVolume(volumeType: AudioVolumeType, callback: AsyncCallback<number>): void;\n    \n    getVolume(volumeType: AudioVolumeType): Promise<number>;\n    \n    getMinVolume(volumeType: AudioVolumeType, callback: AsyncCallback<number>): void;\n    \n    getMinVolume(volumeType: AudioVolumeType): Promise<number>;\n    \n    getMaxVolume(volumeType: AudioVolumeType, callback: AsyncCallback<number>): void;\n    \n    getMaxVolume(volumeType: AudioVolumeType): Promise<number>;\n    \n    getDevices(deviceFlag: DeviceFlag, callback: AsyncCallback<AudioDeviceDescriptors>): void;\n    \n    getDevices(deviceFlag: DeviceFlag): Promise<AudioDeviceDescriptors>;\n    \n    mute(volumeType: AudioVolumeType, mute: boolean, callback: AsyncCallback<void>): void;\n    \n    mute(volumeType: AudioVolumeType, mute: boolean): Promise<void>;\n    \n    isMute(volumeType: AudioVolumeType, callback: AsyncCallback<boolean>): void;\n    \n    isMute(volumeType: AudioVolumeType): Promise<boolean>;\n    \n    isActive(volumeType: AudioVolumeType, callback: AsyncCallback<boolean>): void;\n    \n    isActive(volumeType: AudioVolumeType): Promise<boolean>;\n    \n    setMicrophoneMute(mute: boolean, callback: AsyncCallback<void>): void;\n    \n    setMicrophoneMute(mute: boolean): Promise<void>;\n    \n    isMicrophoneMute(callback: AsyncCallback<boolean>): void;\n    \n    isMicrophoneMute(): Promise<boolean>;\n    \n    setRingerMode(mode: AudioRingMode, callback: AsyncCallback<void>): void;\n    \n    setRingerMode(mode: AudioRingMode): Promise<void>;\n    \n    getRingerMode(callback: AsyncCallback<AudioRingMode>): void;\n    \n    getRingerMode(): Promise<AudioRingMode>;\n    \n    setAudioParameter(key: string, value: string, callback: AsyncCallback<void>): void;\n    \n    setAudioParameter(key: string, value: string): Promise<void>;\n    \n    getAudioParameter(key: string, callback: AsyncCallback<string>): void;\n    \n    getAudioParameter(key: string): Promise<string>;\n    \n    setDeviceActive(deviceType: ActiveDeviceType, active: boolean, callback: AsyncCallback<void>): void;\n    \n    setDeviceActive(deviceType: ActiveDeviceType, active: boolean): Promise<void>;\n    \n    isDeviceActive(deviceType: ActiveDeviceType, callback: AsyncCallback<boolean>): void;\n    \n    isDeviceActive(deviceType: ActiveDeviceType): Promise<boolean>;\n    \n    on(type: 'volumeChange', callback: Callback<VolumeEvent>): void;\n    \n    on(type: 'ringerModeChange', callback: Callback<AudioRingMode>): void;\n    \n    setAudioScene(scene: AudioScene, callback: AsyncCallback<void> ): void;\n    \n    setAudioScene(scene: AudioScene): Promise<void>;\n    \n    getAudioScene(callback: AsyncCallback<AudioScene>): void;\n    \n    getAudioScene(): Promise<AudioScene>;\n    \n    on(type: 'deviceChange', callback: Callback<DeviceChangeAction>): void;\n\n    \n    off(type: 'deviceChange', callback?: Callback<DeviceChangeAction>): void;\n\n    \n    on(type: 'interrupt', interrupt: AudioInterrupt, callback: Callback<InterruptAction>): void;\n\n    \n    off(type: 'interrupt', interrupt: AudioInterrupt, callback?: Callback<InterruptAction>): void;\n  }", "api_method_name": "AudioManager", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 51, "since": 7, "api_used": "\u662f", "lines": ["anager10 = audio.getAudioManager();\n        const pr", "Manager7 = audio.getAudioManager();\n        const au", "oManager = audio.getAudioManager();\n    var deviceRo", "Manager3 = audio.getAudioManager();\n        const au", "oManager = audio.getAudioManager();\n    console.info", "Manager4 = audio.getAudioManager();\n        const au", "agerPerf = audio.getAudioManager(); \n        let sta", "Manager1 = audio.getAudioManager();\n        const au", "nagerRec = audio.getAudioManager();\n    console.info", "Manager8 = audio.getAudioManager();\n        const au", "Manager9 = audio.getAudioManager();\n        const au", "Manager2 = audio.getAudioManager();\n        const au", "Manager5 = audio.getAudioManager();\n        const au", "Manager6 = audio.getAudioManager();\n        const au"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "AudioPerf.test.js", "AudioFramework.test.js", "SR000GHLLV.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setVolume", "api_method_all": "setVolume(volumeType: AudioVolumeType, volume: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 162, "since": 7, "api_used": "\u662f", "lines": ["dioManager1 : Media setVolume promise: successful');\n            audi", "       audioManager.setVolume(audioMedia,outOfRangeVol, (err) => {\n  ", "dioManager3 : Media setVolume promise: successful');\n            audi", "mise = audioManager.setVolume(audioMedia,lowVol);\n        promise.the", "eworkTest: Ringtone setVolume Promise:Out of range: PASS :' + (err.me", "       audioManager.setVolume(audioRingtone,highVol, (err) => {\n     ", "dioManager6 : Media setVolume promise: successful');\n            audi", "mise = audioManager.setVolume(audioRingtone,minVol);\n        promise.", ": callback :  Media setVolume successful `);\n                audioMan", "dioManager2 : Media setVolume promise: successful');\n            audi", "dioManager5 : Media setVolume promise: successful');\n            audi", "rameworkTest: Media setVolume Promise:Out of range: PASS :' + err.mes", "eworkTest: Ringtone setVolume Promise: Out of range: Setvol 30');\n   ", "rameworkTest: Media setVolume promise: successful');\n            audi", "AudioFrameworkTest: setVolume: Out of range: Callback: PASS:  ${err.m", "dioManager7 : Media setVolume promise: successful');\n            audi", "      audioManager5.setVolume(audioMedia,highVol);\n            consol", "       audioManager.setVolume(audioMedia,minVol, (err) => {\n         ", "eworkTest: Ringtone setVolume Promise:Out of range: FAIL');\n         ", "      audioManager3.setVolume(audioMedia,highVol);\n            consol", "       audioManager.setVolume(audioMedia,highVol, (err) => {\n        ", "dioManager4 : Media setVolume promise: successful');\n            audi", "dioManager9 : Media setVolume promise: successful');\n            audi", "      audioManager4.setVolume(audioMedia,lowVol);\n            console", "       audioManager.setVolume(audioMedia,maxVol, (err) => {\n         ", "      audioManager7.setVolume(audioMedia,highVol);\n            consol", "mise = audioManager.setVolume(audioRingtone,maxVol);\n        promise.", "rameworkTest: Media setVolume Promise:Out of range: FAIL');\n         ", "dioManager8 : Media setVolume promise: successful');\n            audi", "mise = audioManager.setVolume(audioMedia,maxVol);\n        promise.the", "      audioManager2.setVolume(audioMedia,highVol);\n            consol", "mise = audioManager.setVolume(audioMedia,minVol);\n        promise.the", "mise = audioManager.setVolume(audioRingtone,lowVol);\n        promise.", "      audioManager9.setVolume(audioMedia,highVol);\n            consol", "      audioManager8.setVolume(audioMedia,lowVol);\n            console", "AudioFrameworkTest: setVolume: callback : Media Out of range: FAIL');", "      audioManager1.setVolume(audioMedia,highVol);\n            consol", "     audioManager10.setVolume(audioMedia,lowVol);\n            console", "eworkTest: Ringtone setVolume promise: successful');\n            audi", "rameworkTest: Media setVolume promise: successful');\n\n            aud", "      audioManager6.setVolume(audioMedia,lowVol);\n            console", "ioManager10 : Media setVolume promise: successful');\n            audi", "rameworkTest: Media setVolume Promise:Out of range: Setvol 100');\n   "], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setVolume", "api_method_all": "setVolume(volumeType: AudioVolumeType, volume: number): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["  await videoPlayer.setVolume(1).then(() => {\n            expect(vide", "  await videoPlayer.setVolume(i * 0.2).then(() => {\n                e", "  await videoPlayer.setVolume(1).then(() => {\n            console.inf", " await audioManager.setVolume(audioMedia,outOfRangeVol).then(() => {\n", " await audioManager.setVolume(audioRingtone,-1).then(() => {\n        ", " await audioManager.setVolume(audioMedia,-1).then(() => {\n           ", " await audioManager.setVolume(audioRingtone,outOfRangeVol).then(() =>"], "files": ["HttpPlayerFuncPromiseTest.test.js", "AudioFramework.test.js", "VideoPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getVolume", "api_method_all": "getVolume(volumeType: AudioVolumeType, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 61, "since": 7, "api_used": "\u662f", "lines": ["       audioManager.getVolume(audioMedia, (err, value) => {\n         ", "rameworkTest: Media getVolume Promise: FAIL :' + data);\n             ", "       audioManager.getVolume(audio.AudioVolumeType.MEDIA, (err, valu", "t: callback : Media getVolume: FAIL :' + value);\n                    ", "callback : Ringtone getVolume: PASS :' + value);\n                    ", "callback : Ringtone getVolume: ENAME: FAIL :' + value);\n             ", "eworkTest: Ringtone getVolume Promise: PASS :' + data);\n             ", "rameworkTest: Media getVolume Promise: Error :' + err.message);\n     ", "t: callback : Media getVolume: ENAME : PASS :' + value);\n            ", "rameworkTest: Media getVolume Promise: ENAME : PASS :' + data);\n     ", "t: callback : Media getVolume: PASS :' + value);\n                    ", "       audioManager.getVolume(audio.AudioVolumeType.RINGTONE, (err, v", "eworkTest: Ringtone getVolume Promise: ENAME: FAIL :' + data);\n      ", "callback : Ringtone getVolume: FAIL :' + value);\n                    ", "t: callback : Media getVolume: ENAME : FAIL :' + value);\n            ", "       audioManager.getVolume(audioRingtone, (err, value) => {\n      ", "callback : Ringtone getVolume: ENAME: PASS :' + value);\n             ", "rameworkTest: Media getVolume Promise: ENAME : FAIL :' + data);\n     ", "eworkTest: Ringtone getVolume Promise: ENAME: PASS :' + data);\n      ", "rameworkTest: Media getVolume Promise: PASS :' + data);\n             ", "eworkTest: Ringtone getVolume Promise: FAIL :' + data);\n             "], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getVolume", "api_method_all": "getVolume(volumeType: AudioVolumeType): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["       audioManager.getVolume(audioMedia).then(function (data) {\n    ", "       audioManager.getVolume(audioRingtone).then(function (data) {\n ", "       audioManager.getVolume(audio.AudioVolumeType.RINGTONE).then(fu", "       audioManager.getVolume(audio.AudioVolumeType.MEDIA).then(funct"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getMinVolume", "api_method_all": "getMinVolume(volumeType: AudioVolumeType, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 92, "since": 7, "api_used": "\u662f", "lines": ["('SUB_AUDIO_MANAGER_getMinVolume_006', 0, async function (done) {\n      ", " callback : Media:  getMinVolume : PASS:' + value);\n                expe", ": SUB_AUDIO_MANAGER_getMinVolume_007\n                * @tc.name      : g", ": SUB_AUDIO_MANAGER_getMinVolume_002\n                * @tc.name      : g", "('SUB_AUDIO_MANAGER_getMinVolume_003', 0, async function (done) {\n      ", "('SUB_AUDIO_MANAGER_getMinVolume_004', 0, async function (done) {\n      ", "rameworkTest: Media getMinVolume promise : PASS:' + data);\n             ", " callback : Media:  getMinVolume : FAIL: ' + value);\n                exp", "  * @tc.desc      : getMinVolume for Media\n                * @tc.size   ", "  * @tc.name      : getMinVolume - Media - Callback - Change Ringtone Vo", "  * @tc.name      : getMinVolume - Ringtone - Callback\n                *", ": SUB_AUDIO_MANAGER_getMinVolume_001\n                * @tc.name      : g", ": SUB_AUDIO_MANAGER_getMinVolume_008\n                * @tc.name      : g", ": SUB_AUDIO_MANAGER_getMinVolume_005\n                * @tc.name      : g", "  * @tc.name      : getMinVolume - Media - Callback\n                * @t", "       audioManager.getMinVolume(audioMedia, (err, value) => {\n         ", "('SUB_AUDIO_MANAGER_getMinVolume_001', 0, async function (done) {\n      ", "ingtone : failed to getMinVolume ${err.message}`);\n                expec", "llback : Ringtone:  getMinVolume : FAIL: ' + value);\n                exp", ": SUB_AUDIO_MANAGER_getMinVolume_003\n                * @tc.name      : g", "('SUB_AUDIO_MANAGER_getMinVolume_002', 0, async function (done) {\n      ", "       audioManager.getMinVolume(audioRingtone, (err, value) => {\n      ", "  * @tc.name      : getMinVolume - Media - Promise - Change Ringtone Vol", ": Media : failed to getMinVolume ${err.message}`);\n                expec", "eworkTest: Ringtone getMinVolume promise : FAIL: ' + data);\n            ", "('SUB_AUDIO_MANAGER_getMinVolume_005', 0, async function (done) {\n      ", "  * @tc.name      : getMinVolume - Ringtone - Callback - Change Media Vo", "  * @tc.name      : getMinVolume - Ringtone - Promise\n                * ", ": SUB_AUDIO_MANAGER_getMinVolume_004\n                * @tc.name      : g", "llback : Ringtone:  getMinVolume : PASS:' + value);\n                expe", "  * @tc.name      : getMinVolume - Ringtone - Promise - Change Media Vol", "rameworkTest: Media getMinVolume promise : FAIL: ' + data);\n            ", "eworkTest: Ringtone getMinVolume promise : PASS:' + data);\n             ", "  * @tc.name      : getMinVolume - Media - Promise\n                * @tc", "('SUB_AUDIO_MANAGER_getMinVolume_007', 0, async function (done) {\n      ", ": SUB_AUDIO_MANAGER_getMinVolume_006\n                * @tc.name      : g", "  * @tc.desc      : getMinVolume for Ringtone\n                * @tc.size"], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getMinVolume", "api_method_all": "getMinVolume(volumeType: AudioVolumeType): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["mise = audioManager.getMinVolume(audioRingtone);\n        promise.then(fu", "mise = audioManager.getMinVolume(audioMedia);\n        promise.then(funct", "mise = audioManager.getMinVolume(audioRingtone)\n        promise.then(fun"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getMaxVolume", "api_method_all": "getMaxVolume(volumeType: AudioVolumeType, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 92, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : getMaxVolume - Ringtone - Promise\n                * ", "('SUB_AUDIO_MANAGER_getMaxVolume_001', 0, async function (done) {\n      ", "rameworkTest: Media getMaxVolume promise : PASS:' + data);\n             ", "  * @tc.name      : getMaxVolume - Ringtone - Callback - Callback- Chang", "  * @tc.name      : getMaxVolume - Media - Promise - Change Ringtone Vol", ": SUB_AUDIO_MANAGER_getMaxVolume_007\n                * @tc.name      : g", "('SUB_AUDIO_MANAGER_getMaxVolume_004', 0, async function (done) {\n      ", ": SUB_AUDIO_MANAGER_getMaxVolume_003\n                * @tc.name      : g", "('SUB_AUDIO_MANAGER_getMaxVolume_002', 0, async function (done) {\n      ", "  * @tc.name      : getMaxVolume - Media - Callback\n                * @t", ": SUB_AUDIO_MANAGER_getMaxVolume_004\n                * @tc.name      : g", "       audioManager.getMaxVolume(audioRingtone, (err, value) => {\n      ", ": Media : failed to getMaxVolume ${err.message}`);\n                expec", "('SUB_AUDIO_MANAGER_getMaxVolume_007', 0, async function (done) {\n      ", "  * @tc.name      : getMaxVolume - Media - Callback- Change Ringtone Vol", "llback : Ringtone:  getMaxVolume : FAIL: ' + value);\n                exp", "llback : Ringtone:  getMaxVolume : PASS:' + value);\n                expe", ": SUB_AUDIO_MANAGER_getMaxVolume_002\n                * @tc.name      : g", ": SUB_AUDIO_MANAGER_getMaxVolume_006\n                * @tc.name      : g", "  * @tc.desc      : getMaxVolume for Media\n                * @tc.size   ", "  * @tc.name      : getMaxVolume - Media - Promise\n                * @tc", "('SUB_AUDIO_MANAGER_getMaxVolume_003', 0, async function (done) {\n      ", ": SUB_AUDIO_MANAGER_getMaxVolume_008\n                * @tc.name      : g", " callback : Media:  getMaxVolume : PASS:' + value);\n                expe", " callback : Media:  getMaxVolume : FAIL: ' + value);\n                exp", "rameworkTest: Media getMaxVolume promise : FAIL: ' + data);\n            ", ": SUB_AUDIO_MANAGER_getMaxVolume_005\n                * @tc.name      : g", "  * @tc.name      : getMaxVolume - Ringtone - Callback\n                *", "('SUB_AUDIO_MANAGER_getMaxVolume_006', 0, async function (done) {\n      ", ": SUB_AUDIO_MANAGER_getMaxVolume_001\n                * @tc.name      : g", "       audioManager.getMaxVolume(audioMedia, (err, value) => {\n         ", "('SUB_AUDIO_MANAGER_getMaxVolume_005', 0, async function (done) {\n      ", "eworkTest: Ringtone getMaxVolume promise : PASS:' + data);\n             ", "eworkTest: Ringtone getMaxVolume promise : FAIL: ' + data);\n            ", "  * @tc.name      : getMaxVolume - Ringtone - Promise - Change Media Vol", "  * @tc.desc      : getMaxVolume for Ringtone\n                * @tc.size", "ingtone : failed to getMaxVolume ${err.message}`);\n                expec"], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getMaxVolume", "api_method_all": "getMaxVolume(volumeType: AudioVolumeType): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["mise = audioManager.getMaxVolume(audioRingtone);\n        promise.then(fu", "mise = audioManager.getMaxVolume(audioMedia);\n        promise.then(funct"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getDevices", "api_method_all": "getDevices(deviceFlag: DeviceFlag, callback: AsyncCallback<AudioDeviceDescriptors>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 177, "since": 7, "api_used": "\u662f", "lines": ["workTest: Callback: getDevices OUTPUT_DEVICES_FLAG');\n                ", "eworkTest: Promise: getDevices : INPUT_DEVICES_FLAG :  FAIL');\n       ", ": SUB_AUDIO_MANAGER_getDevices_006\n                * @tc.name      : g", "workTest: Callback: getDevices ALL_DEVICES_FLAG');\n                val", "('SUB_AUDIO_MANAGER_getDevices_004', 0, async function (done) {\n      ", "workTest: Callback: getDevices INPUT_DEVICES_FLAG');\n\n            if (", "eworkTest: Promise: getDevices OUTPUT_DEVICES_FLAG');\n            valu", "       audioManager.getDevices(2, (err, value) => {\n            // Get", "('SUB_AUDIO_MANAGER_getDevices_002', 0, async function (done) {\n      ", "  * @tc.desc      : getDevices - ALL device\n                * @tc.size", "  * @tc.name      : getDevices - ALL device - Callback\n               ", "eworkTest: Promise: getDevices ALL_DEVICES_FLAG');\n            value.f", "mise = audioManager.getDevices(2);\n        // Getting all Input Device", "  * @tc.name      : getDevices - ALL device - Promise\n                ", "workTest: Callback: getDevices OUTPUT_DEVICES_FLAG');\n\n            if ", "eworkTest: Promise: getDevices : OUTPUT_DEVICES_FLAG :  PASS');\n      ", "workTest: Callback: getDevices : OUTPUT_DEVICES_FLAG :  FAIL');\n      ", ": SUB_AUDIO_MANAGER_getDevices_001\n                * @tc.name      : g", "  * @tc.name      : getDevices - Input device - Callback\n             ", "eworkTest: Promise: getDevices : ALL_DEVICES_FLAG :  PASS');\n         ", "  * @tc.desc      : getDevices - Input device\n                * @tc.si", "eworkTest: Promise: getDevices : OUTPUT_DEVICES_FLAG :  FAIL');\n      ", "eworkTest: Promise: getDevices : ALL_DEVICES_FLAG :  FAIL');\n         ", ": SUB_AUDIO_MANAGER_getDevices_004\n                * @tc.name      : g", "workTest: Callback: getDevices : OUTPUT_DEVICES_FLAG :  PASS');\n      ", "workTest: Callback: getDevices INPUT_DEVICES_FLAG');\n                v", "('SUB_AUDIO_MANAGER_getDevices_006', 0, async function (done) {\n      ", "workTest: Callback: getDevices ALL_DEVICES_FLAG');\n\n            if (er", "       audioManager.getDevices(3, (err, value) => {\n            // Get", ": SUB_AUDIO_MANAGER_getDevices_003\n                * @tc.name      : g", "  * @tc.name      : getDevices - Input device - Promise\n              ", "workTest: Callback: getDevices : INPUT_DEVICES_FLAG:  PASS');\n        ", "('SUB_AUDIO_MANAGER_getDevices_001', 0, async function (done) {\n      ", "('SUB_AUDIO_MANAGER_getDevices_005', 0, async function (done) {\n      ", "workTest: Callback: getDevices : INPUT_DEVICES_FLAG:  FAIL');\n        ", ": SUB_AUDIO_MANAGER_getDevices_005\n                * @tc.name      : g", "eworkTest: Promise: getDevices : INPUT_DEVICES_FLAG :  PASS');\n       ", ": SUB_AUDIO_MANAGER_getDevices_002\n                * @tc.name      : g", "('SUB_AUDIO_MANAGER_getDevices_003', 0, async function (done) {\n      ", "  * @tc.name      : getDevices - Output device - Callback\n            ", "       audioManager.getDevices(1, (err, value) => {\n            // Get", "eworkTest: Promise: getDevices INPUT_DEVICES_FLAG');\n            value", "mise = audioManager.getDevices(1);\n        // Getting all Output devic", "  * @tc.desc      : getDevices - Output device\n                * @tc.s", "mise = audioManager.getDevices(3);\n        // Getting all devies conne", "  * @tc.name      : getDevices - Output device - Promise\n             ", "workTest: Callback: getDevices : ALL_DEVICES_FLAG:  PASS');\n          "], "files": ["AudioPerf.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getDevices", "api_method_all": "getDevices(deviceFlag: DeviceFlag): Promise<AudioDeviceDescriptors>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["mise = audioManager.getDevices(3);\n        promise.then(function (valu", "mise = audioManager.getDevices(1)\n        promise.then(function (value", "mise = audioManager.getDevices(2);\n        promise.then(function (valu"], "files": ["SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "mute", "api_method_all": "mute(volumeType: AudioVolumeType, mute: boolean, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 78, "since": 7, "api_used": "\u662f", "lines": [": SUB_AUDIO_MANAGER_mute_007\n                * @tc.name      : m", ": SUB_AUDIO_MANAGER_mute_011\n                * @tc.name      : m", "('SUB_AUDIO_MANAGER_mute_007', 0, async function (done) {\n      ", ": SUB_AUDIO_MANAGER_mute_015\n                * @tc.name      : m", "('SUB_AUDIO_MANAGER_mute_005', 0, async function (done) {\n      ", "       audioManager.mute(audio.AudioVolumeType.MEDIA,false, (err", "('SUB_AUDIO_MANAGER_mute_011', 0, async function (done) {\n      ", "  * @tc.name      : mute - Ringtone - callback -  ENAME\n        ", " callback - Disable mute\n                * @tc.size      : MEDIU", "  * @tc.desc      : mute - Media - Promise - Enable mute -SetVol", "  * @tc.desc      : mute - Ringtone - callback - Disable mute\n  ", ": SUB_AUDIO_MANAGER_mute_014\n                * @tc.name      : m", "       audioManager.mute(audioMedia,false, (err) => {\n          ", ": SUB_AUDIO_MANAGER_mute_008\n                * @tc.name      : m", "  * @tc.name      : mute - Media - callback\n                * @t", "  * @tc.name      : mute - Ringtone - Promise\n                * ", "('SUB_AUDIO_MANAGER_mute_014', 0, async function (done) {\n      ", ": SUB_AUDIO_MANAGER_mute_017\n                * @tc.name      : m", "  * @tc.desc      : mute - Media - callback - Disable mute\n     ", "  * @tc.name      : mute - Media - callback - ENAME\n            ", "- Promise - disable mute\n                * @tc.size      : MEDIU", "  * @tc.name      : mute - Media - Promise - SetVolume\n         ", "  * @tc.desc      : mute - Ringtone - Promise - disable mute\n   ", ": SUB_AUDIO_MANAGER_mute_006\n                * @tc.name      : m", "('SUB_AUDIO_MANAGER_mute_016', 0, async function (done) {\n      ", "  * @tc.name      : mute - Media - Promise - ENAME:\n            ", "  * @tc.name      : mute - Media - Promise\n                * @tc", "('SUB_AUDIO_MANAGER_mute_015', 0, async function (done) {\n      ", "('SUB_AUDIO_MANAGER_mute_017', 0, async function (done) {\n      ", "  * @tc.desc      : mute - Media - Promise - Disable mute\n      ", " - Promise - Enable mute -SetVolume\n                * @tc.size  ", "       audioManager.mute(audioRingtone,false, (err) => {\n       ", "  * @tc.name      : mute - Ringtone - callback\n                *", ": SUB_AUDIO_MANAGER_mute_005\n                * @tc.name      : m", "       audioManager.mute(audio.AudioVolumeType.RINGTONE,false, (", "('SUB_AUDIO_MANAGER_mute_006', 0, async function (done) {\n      ", "- Promise - Disable mute\n                * @tc.size      : MEDIU", ": SUB_AUDIO_MANAGER_mute_016\n                * @tc.name      : m", "  * @tc.name      : mute - Media - Promise -  ENAME\n            ", "('SUB_AUDIO_MANAGER_mute_008', 0, async function (done) {\n      ", ": SUB_AUDIO_MANAGER_mute_018\n                * @tc.name      : m"], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "mute", "api_method_all": "mute(volumeType: AudioVolumeType, mute: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": [" await audioManager.mute(audioMedia,true).then(function () {\n   ", " await audioManager.mute(audioRingtone,true).then(async function", " await audioManager.mute(audioMedia,false).then(function () {\n  ", " await audioManager.mute(audio.AudioVolumeType.MEDIA,false).then", " await audioManager.mute(audioRingtone,false).then(function () {"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "isMute", "api_method_all": "isMute(volumeType: AudioVolumeType, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["   audioManagerPerf.isMute(AUDIO_MEDIA);\n            };\n        le", "TestPerf: CallBack: isMute Average Time: FAIL : ${avgTime}`);\n    ", "       audioManager.isMute(audioRingtone, (err, data) => {\n       ", "TestPerf: Promise : isMute Wait Time :  ${waitTime}`);\n        if ", "       audioManager.isMute(audioMedia, (err, data) => {\n          ", "TestPerf: CallBack: isMute Wait Time :  ${waitTime}`);\n        if ", "kTestPerf: Promise: isMute Average Time: FAIL : ${avgTime}`);\n    ", "       audioManager.isMute(audio.AudioVolumeType.RINGTONE, (err, d", "   audioManagerPerf.isMute(AUDIO_RINGTONE,(err, value) => {\n      ", "       audioManager.isMute(audio.AudioVolumeType.MEDIA, (err, data", "TestPerf: CallBack: isMute Average Time: PASS : ${avgTime}`);\n    ", "kTestPerf: Promise: isMute Average Time: PASS : ${avgTime}`);\n    "], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "isMute", "api_method_all": "isMute(volumeType: AudioVolumeType): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": [" await audioManager.isMute(audioRingtone).then(function (data) {\n ", "       audioManager.isMute(audioRingtone).then(function (data) {\n ", "       audioManager.isMute(audio.AudioVolumeType.MEDIA).then(funct", "       audioManager.isMute(audioMedia).then(function (data) {\n    "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "isActive", "api_method_all": "isActive(volumeType: AudioVolumeType, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 137, "since": 7, "api_used": "\u662f", "lines": ["eworkTest: Promise: isActive: Media: TRUE: PASS:'+data);\n           ", "  * @tc.name      : isActive - Ringtone - Promise\n                * ", "workTest: Callback: isActive: Ringtone: TRUE: PASS:'+data);\n        ", "('SUB_AUDIO_MANAGER_isActive_013', 0, async function (done) {\n      ", "       audioManager.isActive(audio.AudioVolumeType.MEDIA, (err, data", "  * @tc.desc      : isActive - Media - Callback - When stream is NOT", "eworkTest: Promise: isActive: Media: ENAME: TRUE: PASS:'+data);\n    ", ": SUB_AUDIO_MANAGER_isActive_005\n                * @tc.name      : i", ": SUB_AUDIO_MANAGER_isActive_014\n                * @tc.name      : i", ": SUB_AUDIO_MANAGER_isActive_008\n                * @tc.name      : i", "('SUB_AUDIO_MANAGER_isActive_008', 0, async function (done) {\n      ", "workTest: Callback: isActive: Media: TRUE: PASS:'+data);\n           ", "  * @tc.name      : isActive - Media - Callback\n                * @t", "eworkTest: Promise: isActive: Ringtone: TRUE: FAIL: '+data);\n       ", "('SUB_AUDIO_MANAGER_isActive_005', 0, async function (done) {\n      ", "orkTest: Callback : isActive Ringtone: NOTE: audio NOT PLAYING as ME", "workTest: Callback: isActive: Media: TRUE: FAIL: '+data);\n          ", ": SUB_AUDIO_MANAGER_isActive_015\n                * @tc.name      : i", "workTest: Promise : isActive Media: NOTE: audio NOT PLAYING as MEDIA", ": SUB_AUDIO_MANAGER_isActive_006\n                * @tc.name      : i", "orkTest: Callback : isActive Media: NOTE: audio NOT PLAYING as MEDIA", "mise = audioManager.isActive(audio.AudioVolumeType.MEDIA);\n        p", "ck : Media : ENAME: isActive: failed  ${err.message}`);\n            ", "       audioManager.isActive(audioRingtone, (err, data) => {\n       ", "workTest: Callback: isActive: Media: ENAME: TRUE: PASS:'+data);\n    ", "workTest: Promise : isActive Media: ENAME: NOTE: audio NOT PLAYING a", "eworkTest: Promise: isActive: Media: TRUE: FAIL: '+data);\n          ", "  * @tc.name      : isActive - Media - Promise\n                * @tc", "  * @tc.name      : isActive - Ringtone - Callback\n                *", "llback : Ringtone : isActive: failed  ${err.message}`);\n            ", "('SUB_AUDIO_MANAGER_isActive_006', 0, async function (done) {\n      ", "workTest: Promise : isActive Ringtone: NOTE: audio NOT PLAYING as ME", "('SUB_AUDIO_MANAGER_isActive_014', 0, async function (done) {\n      ", "orkTest: Callback : isActive Media: ENAME: NOTE: audio NOT PLAYING a", "  * @tc.desc      : isActive - Ringtone - Promise - When stream is N", "('SUB_AUDIO_MANAGER_isActive_007', 0, async function (done) {\n      ", "  * @tc.name      : isActive - Media - Promise - ENAME:\n            ", "eworkTest: Promise: isActive: Media: ENAME: TRUE: FAIL: '+data);\n   ", "  * @tc.desc      : isActive - Media - Promise - When stream is NOT ", "       audioManager.isActive(audioMedia, (err, data) => {\n          ", ": SUB_AUDIO_MANAGER_isActive_013\n                * @tc.name      : i", "  * @tc.desc      : isActive - Ringtone - Callback - When stream is ", " Callback : Media : isActive: failed  ${err.message}`);\n            ", "workTest: Callback: isActive: Ringtone: TRUE: FAIL: '+data);\n       ", "workTest: Callback: isActive: Media: ENAME: TRUE: FAIL: '+data);\n   ", "eworkTest: Promise: isActive: Ringtone: TRUE: PASS:'+data);\n        ", ": SUB_AUDIO_MANAGER_isActive_007\n                * @tc.name      : i", "  * @tc.name      : isActive - Media - Callback -  ENAME\n           "], "files": ["AudioPerf.test.js", "AudioRenderer.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "isActive", "api_method_all": "isActive(volumeType: AudioVolumeType): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 29, "since": 7, "api_used": "\u662f", "lines": ["mise = audioManager.isActive(audioRingtone);\n        promise.then(fu", ";\n\n    audioManager.isActive(audio.AudioVolumeType.RINGTONE).then(fu", "    // audioManager.isActive(audio.AudioVolumeType.MEDIA).then(funct", ";\n\n    audioManager.isActive(audio.AudioVolumeType.VOICE_CALL).then(", ";\n\n    audioManager.isActive(audio.AudioVolumeType.MEDIA).then(funct", "mise = audioManager.isActive(audioMedia);\n        promise.then(funct"], "files": ["AudioRenderer.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setMicrophoneMute", "api_method_all": "setMicrophoneMute(mute: boolean, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["('SUB_AUDIO_MANAGER_setMicrophoneMute_001', 0, async function (done) {\n      ", "  * @tc.name      : setMicrophoneMute - true - Callback\n                * @tc", "  * @tc.name      : setMicrophoneMute - false - Promise\n                * @tc", "       audioManager.setMicrophoneMute(true, (err) => {\n            if (err) {", "TestPerf: CallBack: setMicrophoneMute Average Time: PASS : ${avgTime}`);\n    ", "TestPerf: CallBack: setMicrophoneMute Average Time: FAIL : ${avgTime}`);\n    ", "('SUB_AUDIO_MANAGER_setMicrophoneMute_002', 0, async function (done) {\n      ", "eworkTest: Promise: setMicrophoneMute: TRUE: FAIL: Error :' + err.message);\n ", "AudioFrameworkTest: setMicrophoneMute: Promise: TRUE');\n            audioMana", "('SUB_AUDIO_MANAGER_setMicrophoneMute_004', 0, async function (done) {\n      ", "AudioFrameworkTest: setMicrophoneMute: Callback : TRUE');\n                aud", "   : API Response - setMicrophoneMute - CallBack\n        * @tc.desc      : Ch", "AudioFrameworkTest: setMicrophoneMute: Callback : FALSE: Error : ${err.messag", "  * @tc.name      : setMicrophoneMute - false - Callback\n                * @t", "  * @tc.name      : setMicrophoneMute - true - Promise\n                * @tc.", "   audioManagerPerf.setMicrophoneMute(true);\n            };\n        let waitT", "('SUB_AUDIO_MANAGER_setMicrophoneMute_003', 0, async function (done) {\n      ", "AudioFrameworkTest: setMicrophoneMute: Promise: FALSE');\n            audioMan", "AudioFrameworkTest: setMicrophoneMute: Callback : FALSE');\n                au", "TestPerf: Promise : setMicrophoneMute Wait Time :  ${waitTime}`);\n        if ", ": SUB_AUDIO_MANAGER_setMicrophoneMute_001\n                * @tc.name      : s", ": SUB_AUDIO_MANAGER_setMicrophoneMute_002\n                * @tc.name      : s", "kTestPerf: Promise: setMicrophoneMute Average Time: PASS : ${avgTime}`);\n    ", "       audioManager.setMicrophoneMute(false, (err) => {\n            if (err) ", "eworkTest: Promise: setMicrophoneMute: FALSE: FAIL: Error :' + err.message);\n", ": SUB_AUDIO_MANAGER_setMicrophoneMute_003\n                * @tc.name      : s", ": SUB_AUDIO_MANAGER_setMicrophoneMute_004\n                * @tc.name      : s", "TestPerf: CallBack: setMicrophoneMute Wait Time :  ${waitTime}`);\n        if ", "AudioFrameworkTest: setMicrophoneMute: Callback : TRUE: Error : ${err.message", "c.desc      : Check setMicrophoneMute API Response time\n        * @tc.size   ", "   audioManagerPerf.setMicrophoneMute(false,(err, value) => {\n               ", "kTestPerf: Promise: setMicrophoneMute Average Time: FAIL : ${avgTime}`);\n    "], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setMicrophoneMute", "api_method_all": "setMicrophoneMute(mute: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [" await audioManager.setMicrophoneMute(true).then(function () {\n            co", " await audioManager.setMicrophoneMute(false).then(function () {\n            c"], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "isMicrophoneMute", "api_method_all": "isMicrophoneMute(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["orkTest: Callback : isMicrophoneMute: TRUE: PASS: '+data);\n                 ", "eworkTest: Promise: isMicrophoneMute: TRUE: PASS:'+data);\n                  ", "c.desc      : Check isMicrophoneMute API Response time\n        * @tc.size   ", "TestPerf: CallBack: isMicrophoneMute Wait Time :  ${waitTime}`);\n        if ", "kTestPerf: Promise: isMicrophoneMute Average Time: PASS : ${avgTime}`);\n    ", "eworkTest: Promise: isMicrophoneMute: FALSE: PASS:'+data);\n                 ", "   audioManagerPerf.isMicrophoneMute();\n            };\n        let waitTime ", "eworkTest: Promise: isMicrophoneMute: FALSE: FAIL: '+data);\n                ", "   : API Response - isMicrophoneMute - CallBack\n        * @tc.desc      : Ch", "       audioManager.isMicrophoneMute((err, data) => {\n                    if", "   audioManagerPerf.isMicrophoneMute((err, value) => {\n                if (e", "   : API Response - isMicrophoneMute - Promise\n        * @tc.desc      : Che", "orkTest: Callback : isMicrophoneMute: FALSE: FAIL: '+data);\n                ", "orkTest: Callback : isMicrophoneMute: FALSE: PASS: '+data);\n                ", "TestPerf: Promise : isMicrophoneMute Wait Time :  ${waitTime}`);\n        if ", "orkTest: Callback : isMicrophoneMute: TRUE: FAIL: '+data);\n                 ", ": Callback : FALSE: isMicrophoneMute : Error ${err.message}`);\n             ", "t: Callback : TRUE: isMicrophoneMute : Error ${err.message}`);\n             ", "TestPerf: CallBack: isMicrophoneMute Average Time: PASS : ${avgTime}`);\n    ", "eworkTest: Promise: isMicrophoneMute: TRUE: FAIL: '+data);\n                 ", "TestPerf: CallBack: isMicrophoneMute Average Time: FAIL : ${avgTime}`);\n    ", "kTestPerf: Promise: isMicrophoneMute Average Time: FAIL : ${avgTime}`);\n    "], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "isMicrophoneMute", "api_method_all": "isMicrophoneMute(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["       audioManager.isMicrophoneMute().then(function (data) {\n              "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setRingerMode", "api_method_all": "setRingerMode(mode: AudioRingMode, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 117, "since": 7, "api_used": "\u662f", "lines": ["mise = audioManager.setRingerMode(0);\n        // Setting Ringtone Mode to", "  * @tc.desc      : setRingerMode - Set Ring more to Vibration Mode\n     ", "eworkTest: Promise: setRingerMode RINGER_MODE_VIBRATE');\n            audi", "('SUB_AUDIO_MANAGER_setRingerMode_004', 0, async function (done) {\n      ", "workTest: Callback: setRingerMode RINGER_MODE_SILENT: FAIL :' +value);\n  ", "workTest: Callback: setRingerMode RINGER_MODE_NORMAL: FAIL :' +value);\n  ", "('SUB_AUDIO_MANAGER_setRingerMode_001', 0, async function (done) {\n      ", "orkTest: Callback : setRingerMode RINGER_MODE_VIBRATE');\n            if (", "mise = audioManager.setRingerMode(2);\n        // Setting Ringtone Mode to", "eworkTest: Promise: setRingerMode RINGER_MODE_SILENT: PASS :' +value);\n  ", "  * @tc.desc      : setRingerMode - Set Ring more to Silent Mode\n        ", "       audioManager.setRingerMode(1, (err) => {\n            // Setting Ri", "  * @tc.name      : setRingerMode - Normal Mode - Promise\n               ", "eworkTest: Promise: setRingerMode RINGER_MODE_NORMAL: PASS :' +value);\n  ", "eworkTest: Promise: setRingerMode RINGER_MODE_VIBRATE: FAIL :' +value);\n ", "       audioManager.setRingerMode(0, (err) => {\n            // Setting Ri", "  * @tc.name      : setRingerMode - Silent Mode - Promise\n               ", "  * @tc.desc      : setRingerMode - Set Ring more to Normal Mode\n        ", ": SUB_AUDIO_MANAGER_setRingerMode_001\n                * @tc.name      : s", "eworkTest: Promise: setRingerMode RINGER_MODE_NORMAL: FAIL :' +value);\n  ", "eworkTest: Promise: setRingerMode RINGER_MODE_SILENT');\n            audio", "mise = audioManager.setRingerMode(1);\n        // Setting Ringtone Mode to", ": SUB_AUDIO_MANAGER_setRingerMode_005\n                * @tc.name      : s", ": SUB_AUDIO_MANAGER_setRingerMode_004\n                * @tc.name      : s", "('SUB_AUDIO_MANAGER_setRingerMode_003', 0, async function (done) {\n      ", "orkTest: Callback : setRingerMode RINGER_MODE_SILENT: Error: ${err.messag", "workTest: Callback: setRingerMode RINGER_MODE_SILENT: PASS :' +value);\n  ", "orkTest: Callback : setRingerMode RINGER_MODE_VIBRATE: Error: ${err.messa", "orkTest: Callback : setRingerMode RINGER_MODE_SILENT');\n            if (e", "  * @tc.name      : setRingerMode - Silent Mode - Callback\n              ", "('SUB_AUDIO_MANAGER_setRingerMode_002', 0, async function (done) {\n      ", "  * @tc.name      : setRingerMode - Vibration Mode - Promise\n            ", "eworkTest: Promise: setRingerMode RINGER_MODE_NORMAL');\n            audio", "('SUB_AUDIO_MANAGER_setRingerMode_005', 0, async function (done) {\n      ", "workTest: Callback: setRingerMode RINGER_MODE_VIBRATE: PASS :' +value);\n ", "('SUB_AUDIO_MANAGER_setRingerMode_006', 0, async function (done) {\n      ", ": SUB_AUDIO_MANAGER_setRingerMode_002\n                * @tc.name      : s", "eworkTest: Promise: setRingerMode RINGER_MODE_VIBRATE: PASS :' +value);\n ", "eworkTest: Promise: setRingerMode RINGER_MODE_SILENT: FAIL :' +value);\n  ", ": SUB_AUDIO_MANAGER_setRingerMode_003\n                * @tc.name      : s", "       audioManager.setRingerMode(2, (err) => {\n            // Setting Ri", "workTest: Callback: setRingerMode RINGER_MODE_NORMAL: PASS :' +value);\n  ", "  * @tc.name      : setRingerMode - Vibration Mode - Callback\n           ", "  * @tc.name      : setRingerMode - Normal Mode - Callback\n              ", "orkTest: Callback : setRingerMode RINGER_MODE_NORMAL');\n            if (e", "orkTest: Callback : setRingerMode RINGER_MODE_NORMAL: Error: ${err.messag", ": SUB_AUDIO_MANAGER_setRingerMode_006\n                * @tc.name      : s"], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setRingerMode", "api_method_all": "setRingerMode(mode: AudioRingMode): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getRingerMode", "api_method_all": "getRingerMode(callback: AsyncCallback<AudioRingMode>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["TestPerf: CallBack: getRingerMode Wait Time :  ${waitTime}`);\n        if ", "   audioManagerPerf.getRingerMode((err, value) => {\n                if (e", "TestPerf: Promise : getRingerMode Wait Time :  ${waitTime}`);\n        if ", "c.desc      : Check getRingerMode API Response time\n        * @tc.size   ", "kTestPerf: Promise: getRingerMode Average Time: PASS : ${avgTime}`);\n    ", "       audioManager.getRingerMode((err, value) => {\n                    i", "TestPerf: CallBack: getRingerMode Average Time: PASS : ${avgTime}`);\n    ", "TestPerf: CallBack: getRingerMode Average Time: FAIL : ${avgTime}`);\n    ", "   audioManagerPerf.getRingerMode();\n            };\n        let waitTime ", "   : API Response - getRingerMode - CallBack\n        * @tc.desc      : Ch", "   : API Response - getRingerMode - Promise\n        * @tc.desc      : Che", "kTestPerf: Promise: getRingerMode Average Time: FAIL : ${avgTime}`);\n    "], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getRingerMode", "api_method_all": "getRingerMode(): Promise<AudioRingMode>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["       audioManager.getRingerMode().then(function (value){\n              "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setAudioParameter", "api_method_all": "setAudioParameter(key: string, value: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 90, "since": 7, "api_used": "\u662f", "lines": ["       audioManager.setAudioParameter('CBSample Rate', '16 bit', (err) => {\n ", "mise = audioManager.setAudioParameter('PLNumber',longValue);\n        promise.", ": SUB_AUDIO_MANAGER_setAudioParameter_002\n                * @tc.name      : s", "('SUB_AUDIO_MANAGER_setAudioParameter_007', 0, async function (done) {\n      ", "('SUB_AUDIO_MANAGER_setAudioParameter_006', 0, async function (done) {\n      ", "('SUB_AUDIO_MANAGER_setAudioParameter_003', 0, async function (done) {\n      ", "  * @tc.desc      : setAudioParameter - Promise - Character & Number\n        ", "  * @tc.desc      : setAudioParameter - Promise - Decimal\n                * @", "mise = audioManager.setAudioParameter('PDecimal', '10.000000234324324324');\n ", "  * @tc.name      : setAudioParameter - Promise - Decimal\n                * @", "  * @tc.desc      : setAudioParameter - Promise - Parameter name Number\n     ", ": SUB_AUDIO_MANAGER_setAudioParameter_005\n                * @tc.name      : s", "er Test: Callback : setAudioParameter');\n            if (err) {\n             ", "  * @tc.name      : setAudioParameter - Callback - Character & Number\n       ", "  * @tc.desc      : setAudioParameter - Callback - Special Character\n        ", "  * @tc.name      : setAudioParameter - Promise - Number\n                * @t", "  * @tc.name      : setAudioParameter - Callback - Special Character\n        ", "mise = audioManager.setAudioParameter('PSpecial', '[]\\:\";<>?,./~!@#$%^*()_+-=", "  * @tc.name      : setAudioParameter - Promise - Parameter name Number\n     ", ": SUB_AUDIO_MANAGER_setAudioParameter_003\n                * @tc.name      : s", "orkTest: Callback : setAudioParameter: CBSample Rate : Error: ${err.message}`", "       audioManager.setAudioParameter('Special', '~!@#$%^*()_+-={}|[]\\:\";<>?,", "orkTest: Callback : setAudioParameter: Special : Error: ${err.message}`);\n   ", "  * @tc.name      : setAudioParameter - Promise - Long Number\n               ", "mise = audioManager.setAudioParameter('PBits per sample', '8 bit');\n        p", "mise = audioManager.setAudioParameter('1212', 'PPNumber');\n        promise.th", ": SUB_AUDIO_MANAGER_setAudioParameter_001\n                * @tc.name      : s", "('SUB_AUDIO_MANAGER_setAudioParameter_002', 0, async function (done) {\n      ", "  * @tc.name      : setAudioParameter - Promise - Special Characters\n        ", "('SUB_AUDIO_MANAGER_setAudioParameter_001', 0, async function (done) {\n      ", ": SUB_AUDIO_MANAGER_setAudioParameter_004\n                * @tc.name      : s", "('SUB_AUDIO_MANAGER_setAudioParameter_008', 0, async function (done) {\n      ", "  * @tc.desc      : setAudioParameter - Promise - Special Characters\n        ", "  * @tc.name      : setAudioParameter - Promise - Character & Number\n        ", ": SUB_AUDIO_MANAGER_setAudioParameter_008\n                * @tc.name      : s", "('SUB_AUDIO_MANAGER_setAudioParameter_004', 0, async function (done) {\n      ", ": SUB_AUDIO_MANAGER_setAudioParameter_006\n                * @tc.name      : s", "  * @tc.desc      : setAudioParameter - Promise - Long Number\n               ", "('SUB_AUDIO_MANAGER_setAudioParameter_005', 0, async function (done) {\n      ", "  * @tc.desc      : setAudioParameter - Promise - Number\n                * @t", "mise = audioManager.setAudioParameter('PNumber', '4800');\n        promise.the", "ter Test: Promise : setAudioParameter');\n            audioManager.getAudioPar", ": SUB_AUDIO_MANAGER_setAudioParameter_007\n                * @tc.name      : s", "  * @tc.desc      : setAudioParameter - Callback - Character & Number\n       "], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setAudioParameter", "api_method_all": "setAudioParameter(key: string, value: string): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getAudioParameter", "api_method_all": "getAudioParameter(key: string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 130, "since": 7, "api_used": "\u662f", "lines": ["workTest: Callback: getAudioParameter: 345667: PASS :' +value);\n             ", "eworkTest: Promise: getAudioParameter: 1212 : PASS :' +value);\n              ", "       audioManager.getAudioParameter('CBDecimal', (err, value) => {\n        ", "  * @tc.desc      : getAudioParameter - Promise - Long Number\n               ", "workTest: Callback: getAudioParameter: CBLNumber: FAIL :' +value);\n          ", "workTest: Callback: getAudioParameter: CBSample Rate: FAIL :' +value);\n      ", "eworkTest: Promise: getAudioParameter : PLNumber : FAIL :' +value);\n         ", "  * @tc.name      : getAudioParameter - Promise - Number\n                * @t", "workTest: Callback: getAudioParameter: CBNumber: FAIL :' +value);\n           ", "workTest: Callback: getAudioParameter: CBSample Rate: PASS :' +value);\n      ", "       audioManager.getAudioParameter('345667', (err, value) => {\n           ", "  * @tc.desc      : getAudioParameter - Promise - Character & Number\n        ", "eworkTest: Promise: getAudioParameter: Bits per sample : PASS :' +value);\n   ", "orkTest: Callback : getAudioParameter: CBLNumber: Error: ${err.message}`);\n  ", "  * @tc.desc      : getAudioParameter - Promise - Number\n                * @t", "('SUB_AUDIO_MANAGER_getAudioParameter_002', 0, async function (done) {\n      ", "eworkTest: Promise: getAudioParameter: PLNumber : PASS :' +value);\n          ", "eworkTest: Promise: getAudioParameter : 1212 : FAIL :' +value);\n             ", ": SUB_AUDIO_MANAGER_getAudioParameter_003\n                * @tc.name      : g", "orkTest: Callback : getAudioParameter: CBSample Rate: Error: ${err.message}`)", "       audioManager.getAudioParameter('CBSample Rate', (err, value) => {\n    ", "('SUB_AUDIO_MANAGER_getAudioParameter_001', 0, async function (done) {\n      ", "  * @tc.name      : getAudioParameter - Promise - Character & Number\n        ", "       audioManager.getAudioParameter('Special', (err, value) => {\n          ", "workTest: Callback: getAudioParameter: CBNumber: PASS :' +value);\n           ", "workTest: Callback: getAudioParameter: CBDecimal: FAIL :' +value);\n          ", "mise = audioManager.getAudioParameter('PBits per sample');\n        promise.th", "workTest: Callback: getAudioParameter: CBLNumber: PASS :' +value);\n          ", "orkTest: Callback : getAudioParameter: 345667: Error: ${err.message}`);\n     ", "eworkTest: Promise: getAudioParameter: PSpecial : PASS :' +value);\n          ", "eworkTest: Promise: getAudioParameter : PDecimal : FAIL :' +value);\n         ", "eworkTest: Promise: getAudioParameter : PNumber : FAIL :' +value);\n          ", "workTest: Callback: getAudioParameter: Special: FAIL :' +value);\n            ", "  * @tc.name      : getAudioParameter - Promise - Long Number\n               ", "('SUB_AUDIO_MANAGER_getAudioParameter_003', 0, async function (done) {\n      ", "eworkTest: Promise: getAudioParameter: PDecimal : PASS :' +value);\n          ", "workTest: Callback: getAudioParameter: Special: PASS :' +value);\n            ", "eworkTest: Promise: getAudioParameter : Bits per sample : FAIL :' +value);\n  ", ": SUB_AUDIO_MANAGER_getAudioParameter_002\n                * @tc.name      : g", ": SUB_AUDIO_MANAGER_getAudioParameter_001\n                * @tc.name      : g", "workTest: Callback: getAudioParameter: 345667: FAIL :' +value);\n             ", "workTest: Callback: getAudioParameter: CBDecimal: PASS :' +value);\n          ", "       audioManager.getAudioParameter('CBNumber', (err, value) => {\n         ", "       audioManager.getAudioParameter('CBLNumber', (err, value) => {\n        ", "eworkTest: Promise: getAudioParameter: PNumber : PASS :' +value);\n           ", "eworkTest: Promise: getAudioParameter : PSpecial : FAIL :' +value);\n         "], "files": ["AudioPerf.test.js", "AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getAudioParameter", "api_method_all": "getAudioParameter(key: string): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["mise = audioManager.getAudioParameter('PSpecial');\n        promise.then(funct", "mise = audioManager.getAudioParameter('PNumber');\n        promise.then(functi", "       audioManager.getAudioParameter('PLNumber').then(function (value){\n    ", "       audioManager.getAudioParameter('PSpecial').then(function (value){\n    ", "mise = audioManager.getAudioParameter('PDecimal');\n        promise.then(funct", "       audioManager.getAudioParameter('PDecimal').then(function (value){\n    ", "       audioManager.getAudioParameter('PNumber').then(function (value){\n     ", "       audioManager.getAudioParameter('PBits per sample').then(function (valu", "       audioManager.getAudioParameter('1212').then(function (value){\n        ", "mise = audioManager.getAudioParameter('PLNumber');\n        promise.then(funct", "mise = audioManager.getAudioParameter('1212');\n        promise.then(function "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setDeviceActive", "api_method_all": "setDeviceActive(deviceType: ActiveDeviceType, active: boolean, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 138, "since": 7, "api_used": "\u662f", "lines": ["TestPerf: Promise : setDeviceActive Wait Time :  ${waitTime}`);\n        if ", "ice Test: Promise : setDeviceActive : SPEAKER: Activate');\n                ", "       audioManager.setDeviceActive(audio.ActiveDeviceType.SPEAKER,true, (e", ": SUB_AUDIO_MANAGER_setDeviceActive_003\n                * @tc.name      : s", "  * @tc.name      : setDeviceActive - BLUETOOTH_SCO - deactivate - Callback", "       audioManager.setDeviceActive(audio.ActiveDeviceType.BLUETOOTH_SCO,fa", "ce Test: Callback : setDeviceActive : BLUETOOTH_SCO: Deactivate: Error: ${e", "ice Test: Promise : setDeviceActive : BLUETOOTH_SCO: Activate');\n          ", "ce Test: Callback : setDeviceActive : SPEAKER: Deactivate: Error: ${err.mes", " await audioManager.setDeviceActive(audio.ActiveDeviceType.BLUETOOTH_SCO,tr", "  * @tc.name      : setDeviceActive - SPEAKER - deactivate - Promise\n      ", ": SUB_AUDIO_MANAGER_setDeviceActive_002\n                * @tc.name      : s", ": SUB_AUDIO_MANAGER_setDeviceActive_005\n                * @tc.name      : s", "('SUB_AUDIO_MANAGER_setDeviceActive_008', 0, async function (done) {\n      ", "  * @tc.name      : setDeviceActive - BLUETOOTH_SCO - deactivate - Promise\n", " await audioManager.setDeviceActive(audio.ActiveDeviceType.SPEAKER,true).th", "ce Test: Callback : setDeviceActive : SPEAKER: Active: Error: ${err.message", "   audioManagerPerf.setDeviceActive(audio.ActiveDeviceType.SPEAKER,true);\n ", ": SUB_AUDIO_MANAGER_setDeviceActive_007\n                * @tc.name      : s", "('SUB_AUDIO_MANAGER_setDeviceActive_004', 0, async function (done) {\n      ", "('SUB_AUDIO_MANAGER_setDeviceActive_003', 0, async function (done) {\n      ", "('SUB_AUDIO_MANAGER_setDeviceActive_002', 0, async function (done) {\n      ", "  * @tc.name      : setDeviceActive - BLUETOOTH_SCO - Activate - Promise\n  ", "ce Test: Callback : setDeviceActive : SPEAKER: Active');\n                au", "kTestPerf: Promise: setDeviceActive Average Time: PASS : ${avgTime}`);\n    ", "ce Test: Callback : setDeviceActive : BLUETOOTH_SCO: Active: Error: ${err.m", ": SUB_AUDIO_MANAGER_setDeviceActive_004\n                * @tc.name      : s", "('SUB_AUDIO_MANAGER_setDeviceActive_007', 0, async function (done) {\n      ", "('SUB_AUDIO_MANAGER_setDeviceActive_001', 0, async function (done) {\n      ", "       audioManager.setDeviceActive(audio.ActiveDeviceType.SPEAKER,false, (", "ce Test: Callback : setDeviceActive : BLUETOOTH_SCO: Active');\n            ", "ice Test: Promise : setDeviceActive : BLUETOOTH_SCO: Deactivate');\n        ", "  * @tc.name      : setDeviceActive - SPEAKER - deactivate - Callback\n     ", "ice Test: Promise : setDeviceActive : SPEAKER: Deactivate');\n              ", "c.desc      : Check setDeviceActive API Response time\n        * @tc.size   ", "   : API Response - setDeviceActive - CallBack\n        * @tc.desc      : Ch", ": SUB_AUDIO_MANAGER_setDeviceActive_008\n                * @tc.name      : s", "  * @tc.name      : setDeviceActive - SPEAKER - Activate - Promise\n        ", "  * @tc.name      : setDeviceActive - BLUETOOTH_SCO - Activate - Callback\n ", "('SUB_AUDIO_MANAGER_setDeviceActive_005', 0, async function (done) {\n      ", "('SUB_AUDIO_MANAGER_setDeviceActive_006', 0, async function (done) {\n      ", "       audioManager.setDeviceActive(audio.ActiveDeviceType.BLUETOOTH_SCO,tr", ": SUB_AUDIO_MANAGER_setDeviceActive_006\n                * @tc.name      : s", "   : API Response - setDeviceActive - Promise\n        * @tc.desc      : Che", ": SUB_AUDIO_MANAGER_setDeviceActive_001\n                * @tc.name      : s", "kTestPerf: Promise: setDeviceActive Average Time: FAIL : ${avgTime}`);\n    "], "files": ["AudioPerf.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setDeviceActive", "api_method_all": "setDeviceActive(deviceType: ActiveDeviceType, active: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": [" await audioManager.setDeviceActive(2,false).then(function (){\n            ", " await audioManager.setDeviceActive(7,true).then(function (){\n            c", " await audioManager.setDeviceActive(2,true).then(function (){\n            c", " await audioManager.setDeviceActive(7,false).then(function (){\n            "], "files": ["AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "isDeviceActive", "api_method_all": "isDeviceActive(deviceType: ActiveDeviceType, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 99, "since": 7, "api_used": "\u662f", "lines": ["ice Test: Promise : isDeviceActive : SPEAKER: Activate : FAIL :Error :' + ", "   : API Response - isDeviceActive - CallBack\n        * @tc.desc      : Ch", "ce Test: Callback : isDeviceActive : BLUETOOTH_SCO: Active: Error: ${err.m", "ce Test: Callback : isDeviceActive : BLUETOOTH_SCO: Active : PASS :' +valu", "ce Test: Callback : isDeviceActive : SPEAKER: Deactivate: Error: ${err.mes", "ce Test: Callback : isDeviceActive : BLUETOOTH_SCO: Deactivate: Error: ${e", "ice Test: Promise : isDeviceActive : BLUETOOTH_SCO: Activate : FAIL :' +va", "c.desc      : Check isDeviceActive API Response time\n        * @tc.size   ", "ce Test: Callback : isDeviceActive : SPEAKER: Deactivate : PASS :' +value)", "ice Test: Promise : isDeviceActive :  BLUETOOTH_SCO: Deactivate : FAIL : E", "ce Test: Callback : isDeviceActive : BLUETOOTH_SCO: Deactivate : FAIL :' +", "ice Test: Promise : isDeviceActive : BLUETOOTH_SCO: Activate : PASS :' +va", "ice Test: Promise : isDeviceActive : SPEAKER: Deactivate : FAIL :' +value)", "ice Test: Promise : isDeviceActive : SPEAKER: Activate : PASS :' +value);\n", "kTestPerf: Promise: isDeviceActive Average Time: PASS : ${avgTime}`);\n    ", "ice Test: Promise : isDeviceActive : BLUETOOTH_SCO: Deactivate : PASS :' +", "ce Test: Callback : isDeviceActive : SPEAKER: Active : FAIL :' +value);\n  ", "ice Test: Promise : isDeviceActive : SPEAKER: Deactivate : FAIL : Error :'", "       audioManager.isDeviceActive(2,(err, value) => {\n                   ", "TestPerf: CallBack: isDeviceActive Average Time: FAIL : ${avgTime}`);\n    ", "ice Test: Promise : isDeviceActive : BLUETOOTH_SCO: Deactivate : FAIL :' +", "   audioManagerPerf.isDeviceActive(audio.ActiveDeviceType.SPEAKER);\n      ", "ice Test: Promise : isDeviceActive : SPEAKER: Deactivate : PASS :' +value)", "       audioManager.isDeviceActive(7,(err, value) => {\n                   ", "ce Test: Callback : isDeviceActive : SPEAKER: Active: Error: ${err.message", "ce Test: Callback : isDeviceActive : SPEAKER: Active : PASS :' +value);\n  ", "       audioManager.isDeviceActive(audio.ActiveDeviceType.BLUETOOTH_SCO).t", "ice Test: Promise : isDeviceActive :  BLUETOOTH_SCO: Activate : FAIL : Err", "ce Test: Callback : isDeviceActive : BLUETOOTH_SCO: Active : FAIL :' +valu", "   audioManagerPerf.isDeviceActive(audio.ActiveDeviceType.SPEAKER,(err, va", "kTestPerf: Promise: isDeviceActive Average Time: FAIL : ${avgTime}`);\n    ", "ce Test: Callback : isDeviceActive : BLUETOOTH_SCO: Deactivate : PASS :' +", "ce Test: Callback : isDeviceActive : SPEAKER: Deactivate : FAIL :' +value)", "ice Test: Promise : isDeviceActive : SPEAKER: Activate : FAIL :' +value);\n", "   : API Response - isDeviceActive - Promise\n        * @tc.desc      : Che", "TestPerf: CallBack: isDeviceActive Average Time: PASS : ${avgTime}`);\n    ", "TestPerf: Promise : isDeviceActive Wait Time :  ${waitTime}`);\n        if ", "TestPerf: CallBack: isDeviceActive Wait Time :  ${waitTime}`);\n        if "], "files": ["AudioPerf.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "isDeviceActive", "api_method_all": "isDeviceActive(deviceType: ActiveDeviceType): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["       audioManager.isDeviceActive(2).then(function (value){\n             ", "       audioManager.isDeviceActive(audio.ActiveDeviceType.SPEAKER).then(fu", "       audioManager.isDeviceActive(7).then(function (value){\n             "], "files": ["AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "on", "api_method_all": "on(type: 'volumeChange', callback: Callback<VolumeEvent>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 7, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "on", "api_method_all": "on(type: 'ringerModeChange', callback: Callback<AudioRingMode>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 7, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setAudioScene", "api_method_all": "setAudioScene(scene: AudioScene, callback: AsyncCallback<void> ): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 334, "since": 8, "api_used": "\u662f", "lines": ["FrameworkRenderLog: setAudioScene : SUCCESS ');\n            await audioMa", "FrameworkRenderLog: setAudioScene : SUCCESS ');\n                expect(fa", "       audioManager.setAudioScene(audio.AudioScene.AUDIO_SCENE_VOICE_CHAT", "  * @tc.desc      : setAudioScene as AUDIO_SCENE_RINGING - ENUM\n         ", "FrameworkRenderLog: setAudioScene : SUCCESS ');\n                expect(tr", " await audioManager.setAudioScene(audio.AudioScene.AUDIO_SCENE_VOICE_CHAT", "FrameworkRenderLog: setAudioScene : SUCCESS ');\n            expect(false)", "  * @tc.name      : setAudioScene as VOIP - Promise - Out Of Range\n      ", "  * @tc.name      : setAudioScene as VOIP - Callback - Out Of Range\n     ", "       audioManager.setAudioScene(audio.AudioScene.AUDIO_SCENE_RINGING,as", "FrameworkRenderLog: setAudioScene : ERROR : '+err.message);\n            e", "FrameworkRenderLog: setAudioScene : ERROR : ${err.message}`);\n           ", "FrameworkRenderLog: setAudioScene : SUCCESS ');\n                audioMana", "dioFrameworkRecLog: setAudioScene : ERROR : '+err.message);\n            r", " await audioManager.setAudioScene(audio.AudioScene.AUDIO_SCENE_RINGING).t", "  * @tc.name      : setAudioScene as AUDIO_SCENE_RINGING - Promise - ENUM", "       audioManager.setAudioScene(3, (err) => {\n            if (err) {\n  ", "  * @tc.desc      : setAudioScene as AUDIO_SCENE_RINGING - ENAME\n        ", "       audioManager.setAudioScene(-1, (err) => {\n            if (err) {\n ", "FrameworkRenderLog: setAudioScene : ERROR : '+err.message);\n            r", "dioFrameworkRecLog: setAudioScene : SUCCESS ');\n            await audioMa", "FrameworkRenderLog: setAudioScene : SUCCESS ');\n            expect(true).", "       audioManager.setAudioScene(1,async (err) => {\n            if (err)", "  * @tc.desc      : setAudioScene as VOIP - Out Of Range\n               *"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "setAudioScene", "api_method_all": "setAudioScene(scene: AudioScene): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": [" await audioManager.setAudioScene(AudioScene).then(async function () {\n  ", " await audioManager.setAudioScene(2).then(async function () {\n           ", " await audioManager.setAudioScene(10).then(async function () {\n          ", " await audioManager.setAudioScene(3).then(async function () {\n           ", " await audioManager.setAudioScene(1).then(async function () {\n           ", " await audioManager.setAudioScene(0).then(async function () {\n           ", "ait audioManagerRec.setAudioScene(AudioScene).then(async function () {\n  "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getAudioScene", "api_method_all": "getAudioScene(callback: AsyncCallback<AudioScene>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 281, "since": 8, "api_used": "\u662f", "lines": ["  * @tc.desc      : getAudioScene as Ringtone to VOIP - ENUM\n           *", "dioFrameworkRecLog: getAudioScene : Value : '+data);\n            }).catch", "rameworkAudioScene: getAudioScene : Value : '+data);\n                }).c", "FrameworkRenderLog: getAudioScene : FAIL : '+data);\n                expec", "FrameworkRenderLog: getAudioScene : ERROR : '+err.message);\n             ", "dioFrameworkRecLog: getAudioScene : ERROR : '+err.message);\n             ", "FrameworkRenderLog: getAudioScene : FAIL : '+data);\n                     ", "FrameworkRenderLog: getAudioScene : PASS : '+data);\n                     ", "  * @tc.name      : getAudioScene as AUDIO_SCENE_RINGING - Promise - ENUM", "       audioManager.getAudioScene((err, data) => {\n            if (err) {", "FrameworkRenderLog: getAudioScene : ERROR : '+err.message);\n            r", "  * @tc.desc      : getAudioScene as AUDIO_SCENE_RINGING - ENUM\n         ", "  * @tc.desc      : getAudioScene as Ringtone to VOIP - ENAME\n           ", "  * @tc.desc      : getAudioScene as AUDIO_SCENE_RINGING - ENAME\n        ", "FrameworkRenderLog: getAudioScene : PASS : '+data);\n                expec", "rameworkAudioScene: getAudioScene : ERROR : '+err.message);\n             ", "FrameworkRenderLog: getAudioScene : PASS : '+data);\n                    e", "FrameworkRenderLog: getAudioScene : Value : '+data);\n            }).catch", "       audioManager.getAudioScene((err, data) => {\n                    if", "  * @tc.name      : getAudioScene as Ringtone to VOIP - Promise - ENUM\n  ", "FrameworkRenderLog: getAudioScene : FAIL : '+data);\n                    e"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "getAudioScene", "api_method_all": "getAudioScene(): Promise<AudioScene>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 42, "since": 8, "api_used": "\u662f", "lines": [" await audioManager.getAudioScene().then(async function (data) {\n        ", "ait audioManagerRec.getAudioScene().then(async function (data) {\n        "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "on", "api_method_all": "on(type: 'deviceChange', callback: Callback<DeviceChangeAction>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 7, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "off", "api_method_all": "off(type: 'deviceChange', callback?: Callback<DeviceChangeAction>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 125, "since": 7, "api_used": "\u662f", "lines": ["           audioRen.off('markReach');\n            audioRen.on('", "8),\n                offset: 0,\n                stride: 8,\n     ", "0),\n                offset: 21,\n                stride: 8,\n    ", "0),\n                offset: 0,\n                stride: 8,\n     ", " readPixels-promise(offset > buffer)\n     * @tc.desc      : 1.c", "th;\n            let offset = 0;\n            const incSouce = im", "('TC_053-1 0011 ' + offset);\n            }\n            if (ret)", "fo('TC_053 0011 ' + offset);\n            }\n            if (ret)", "stimagebuffer.slice(offset, offset + bufferSize);\n             ", " periodReach - On - off -on\n    * @tc.desc      : AudioRenderer", "           offset = offset + oneStep.length;\n                co", "           audioRen.off('periodReach');\n            });\n\n      ", "   audioCapCallBack.off('periodReach');\n        await sleep(100", "           audioRen.off('periodReach');\n            audioRen.on", "                    offset: 0,\n                    stride: 8,\n ", "\n            while (offset < testimagebuffer.length) {\n        ", "  }\n                offset = offset + oneStep.length;\n         ", "        inputobject.offset = 0;\n                if (frameCnt==1", "   audioCapCallBack.off('markReach');\n        await sleep(1000)", "                    offset: 0,\n                        stride: ", "        inputobject.offset = 0;\n                inputobject.len", "           audioRen.off('periodReach');\n        });\n\n        co", " markReached - On - off -on\n    * @tc.desc      : AudioRenderer", "uffer.slice(offset, offset + bufferSize);\n                conso"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "on", "api_method_all": "on(type: 'interrupt', interrupt: AudioInterrupt, callback: Callback<InterruptAction>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 41984, "since": 7, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioManager", "api_method_name": "off", "api_method_all": "off(type: 'interrupt', interrupt: AudioInterrupt, callback?: Callback<InterruptAction>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 125, "since": 7, "api_used": "\u662f", "lines": ["           audioRen.off('markReach');\n            audioRen.on('", "8),\n                offset: 0,\n                stride: 8,\n     ", "0),\n                offset: 21,\n                stride: 8,\n    ", "0),\n                offset: 0,\n                stride: 8,\n     ", " readPixels-promise(offset > buffer)\n     * @tc.desc      : 1.c", "th;\n            let offset = 0;\n            const incSouce = im", "('TC_053-1 0011 ' + offset);\n            }\n            if (ret)", "fo('TC_053 0011 ' + offset);\n            }\n            if (ret)", "stimagebuffer.slice(offset, offset + bufferSize);\n             ", " periodReach - On - off -on\n    * @tc.desc      : AudioRenderer", "           offset = offset + oneStep.length;\n                co", "           audioRen.off('periodReach');\n            });\n\n      ", "   audioCapCallBack.off('periodReach');\n        await sleep(100", "           audioRen.off('periodReach');\n            audioRen.on", "                    offset: 0,\n                    stride: 8,\n ", "\n            while (offset < testimagebuffer.length) {\n        ", "  }\n                offset = offset + oneStep.length;\n         ", "        inputobject.offset = 0;\n                if (frameCnt==1", "   audioCapCallBack.off('markReach');\n        await sleep(1000)", "                    offset: 0,\n                        stride: ", "        inputobject.offset = 0;\n                inputobject.len", "           audioRen.off('periodReach');\n        });\n\n        co", " markReached - On - off -on\n    * @tc.desc      : AudioRenderer", "uffer.slice(offset, offset + bufferSize);\n                conso"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioDeviceDescriptor", "api_method_all": "interface AudioDeviceDescriptor {\n    \n    readonly deviceRole: DeviceRole;\n    \n    readonly deviceType: DeviceType;\n  }", "api_method_name": "AudioDeviceDescriptor", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioDeviceDescriptor", "api_method_name": "deviceRole", "api_method_all": "readonly deviceRole: DeviceRole", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 65, "since": 7, "api_used": "\u662f", "lines": ["on (done) {\n        deviceRoleValue = null;\n      ", "orkRecLog: Capturer deviceRole:' + audioParamsGet.", "ceRoleValue = value.deviceRole;\n        console.in", ": UNKNOWN : '+value.deviceRole;\n        }\n\n       ", ":' + audioParamsGet.deviceRole);\n            conso", "oManager();\n    var deviceRoleValue = null;\n    va", "     else if (value.deviceRole==2) {\n            d", "oleName}`);\n        deviceRoleValue = value.device", "CATION,\n            deviceRole: audio.DeviceRole.I", ";\n        if (value.deviceRole==1) {\n            d", "ypeValue != null && deviceRoleValue != null){\n    "], "files": ["AudioVOIP.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioDeviceDescriptor", "api_method_name": "deviceType", "api_method_all": "readonly deviceType: DeviceType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 73, "since": 7, "api_used": "\u662f", "lines": [":' + audioParamsGet.deviceType);\n        }).catch(", " : UNKNOWN :'+value.deviceType;\n        }\n\n       ", ");\n\n            if (deviceTypeValue != null && dev", "                if (deviceTypeValue != null && dev", "     else if (value.deviceType == 2){\n            ", "p);\n            if (deviceTypeValue != null && dev", "     else if (value.deviceType == 15){\n           ", "ypeName}`);\n        deviceTypeValue = value.device", "lue = null;\n        deviceTypeValue = null;\n      ", "ceTypeValue = value.deviceType;\n\n    }\n\n    before", "     else if (value.deviceType == 8){\n            ", "lue = null;\n    var deviceTypeValue = null;\n    va", "DEVICE,\n            deviceType: audio.DeviceType.M", "orkRecLog: Capturer deviceType:' + audioParamsGet.", "\n\n        if (value.deviceType == 1) {\n           ", "     else if (value.deviceType == 3){\n            ", "     else if (value.deviceType == 7){\n            "], "files": ["AudioVOIP.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VolumeEvent", "api_method_all": "interface VolumeEvent {\n    \n    volumeType: AudioVolumeType;\n    \n    volume: number;\n    \n    updateUi: boolean;\n  }", "api_method_name": "VolumeEvent", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 36, "since": 8, "api_used": "\u662f", "lines": ["                 if(VolumeEvent.volume == lowVol){\n", "allBack : PASS :' + VolumeEvent.volume);\n          ", ".on('volumeChange',(VolumeEvent) => {\n\n            ", "o Volume Number : '+VolumeEvent.volume);\n          ", "            switch (VolumeEvent.volumeType) {\n     ", "olume Update UI : '+VolumeEvent.updateUi);\n        ", "dio Volume Type : '+VolumeEvent.volumeType);\n      "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VolumeEvent", "api_method_name": "volumeType", "api_method_all": "volumeType: AudioVolumeType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["switch (VolumeEvent.volumeType) {\n                ", "ype : '+VolumeEvent.volumeType);\n                 "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VolumeEvent", "api_method_name": "volume", "api_method_all": "volume: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 119, "since": 7, "api_used": "\u662f", "lines": ["back : Ringtone set volume: FAIL');\n          ", "Test: failed to set volume: Callback: ENAME:  ", "switch (VolumeEvent.volumeType) {\n            ", "ype : '+VolumeEvent.volumeType);\n             ", "ting negative audio volume for error Scenario\n", "o 28 (more than max volume 15)\n               ", "Test: failed to set volume: Callback:  ${err.m", "Test: failed to set volume: Callback: ENAME : ", "edia: failed to get volume ${err.message}`);\n ", "NAME: failed to get volume ${err.message}`);\n ", "     if(VolumeEvent.volume == lowVol){\n       ", "SS :' + VolumeEvent.volume);\n                 ", "tone: failed to get volume ${err.message}`);\n ", "   audioManager.on('volumeChange',(VolumeEvent", "ber : '+VolumeEvent.volume);\n                 "], "files": ["HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RingtonePlayer.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VolumeEvent", "api_method_name": "updateUi", "api_method_all": "updateUi: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [" UI : '+VolumeEvent.updateUi);\n                 "], "files": ["AudioFramework.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptAction", "api_method_all": "interface InterruptAction {\n\n    \n    actionType: InterruptActionType;\n\n    \n    type?: InterruptType;\n\n    \n    hint?: InterruptHint;\n\n    \n    activated?: boolean;\n  }", "api_method_name": "InterruptAction", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptAction", "api_method_name": "actionType", "api_method_all": "actionType: InterruptActionType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptAction", "api_method_name": "type", "api_method_all": "type?: InterruptType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3051, "since": 8, "api_used": "\u662f", "lines": ["UM\n           * @tc.type      : Function\n   ", "              * @tc.type      : Function\n   ", "g: Renderer content type:' + audioParamsGet.", "ameworkTest: device type: ${devTypeName}`);\n", "MEDIUM\n       * @tc.type      : Function\n   ", "M\n            * @tc.type      : Function\n   "], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "favtrashTestPromise.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "favtrashTestCallBack.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "SR000GHQBN.test.js", "AudioEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "index.ets", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "filekeyTestPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "fileTestCallBack.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptAction", "api_method_name": "hint", "api_method_all": "hint?: InterruptHint", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InterruptAction", "api_method_name": "activated", "api_method_all": "activated?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioInterrupt", "api_method_all": "interface AudioInterrupt {\n\n    \n    streamUsage: StreamUsage;\n\n    \n    contentType: ContentType;\n\n    \n    pauseWhenDucked: boolean;\n  }", "api_method_name": "AudioInterrupt", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioInterrupt", "api_method_name": "streamUsage", "api_method_all": "streamUsage: StreamUsage", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioInterrupt", "api_method_name": "contentType", "api_method_all": "contentType: ContentType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": [":' + audioParamsGet.contentType);\n            conso", "NG_PCM,\n            contentType: audio.ContentType.", "orkRecLog: Capturer contentType:' + audioParamsGet."], "files": ["AudioVOIP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioInterrupt", "api_method_name": "pauseWhenDucked", "api_method_all": "pauseWhenDucked: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceChangeAction", "api_method_all": "interface DeviceChangeAction {\n    \n    type: DeviceChangeType;\n\n    \n    deviceDescriptors: AudioDeviceDescriptors;\n  }", "api_method_name": "DeviceChangeAction", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceChangeAction", "api_method_name": "type", "api_method_all": "type: DeviceChangeType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3051, "since": 8, "api_used": "\u662f", "lines": ["UM\n           * @tc.type      : Function\n   ", "              * @tc.type      : Function\n   ", "g: Renderer content type:' + audioParamsGet.", "ameworkTest: device type: ${devTypeName}`);\n", "MEDIUM\n       * @tc.type      : Function\n   ", "M\n            * @tc.type      : Function\n   "], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "favtrashTestPromise.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "favtrashTestCallBack.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "SR000GHQBN.test.js", "AudioEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "index.ets", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "filekeyTestPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "fileTestCallBack.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceChangeAction", "api_method_name": "deviceDescriptors", "api_method_all": "deviceDescriptors: AudioDeviceDescriptors", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_all": "interface AudioRenderer {\n    \n    readonly state: AudioState;\n    \n    getRendererInfo(callback: AsyncCallback<AudioRendererInfo>): void;\n    \n    getRendererInfo(): Promise<AudioRendererInfo>;\n    \n    getStreamInfo(callback: AsyncCallback<AudioStreamInfo>): void;\n    \n    getStreamInfo(): Promise<AudioStreamInfo>;\n    \n    start(callback: AsyncCallback<void>): void;\n    \n    start(): Promise<void>;\n    \n    write(buffer: ArrayBuffer, callback: AsyncCallback<number>): void;\n    \n    write(buffer: ArrayBuffer): Promise<number>;\n    \n    getAudioTime(callback: AsyncCallback<number>): void;\n    \n    getAudioTime(): Promise<number>;\n    \n    drain(callback: AsyncCallback<void>): void;\n    \n    drain(): Promise<void>;\n    \n    pause(callback: AsyncCallback<void>): void;\n    \n    pause(): Promise<void>;\n    \n    stop(callback: AsyncCallback<void>): void;\n    \n    stop(): Promise<void>;\n    \n    release(callback: AsyncCallback<void>): void;\n    \n    release(): Promise<void>;\n    \n    getBufferSize(callback: AsyncCallback<number>): void;\n    \n    getBufferSize(): Promise<number>;\n    \n    setRenderRate(rate: AudioRendererRate, callback: AsyncCallback<void>): void;\n    \n    setRenderRate(rate: AudioRendererRate): Promise<void>;\n    \n    getRenderRate(callback: AsyncCallback<AudioRendererRate>): void;\n    \n    getRenderRate(): Promise<AudioRendererRate>;\n    \n    on(type: 'interrupt', callback: Callback<InterruptEvent>): void;\n    \n    on(type: \"markReach\", frame: number, callback: (position: number) => {}): void;\n    \n    off(type: \"markReach\"): void;\n    \n    on(type: \"periodReach\", frame: number, callback: (position: number) => {}): void;\n    \n    off(type: \"periodReach\"): void;\n    \n    on(type: \"stateChange\", callback: Callback<AudioState>): void;\n  }", "api_method_name": "AudioRenderer", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 971, "since": 8, "api_used": "\u662f", "lines": ["on playbackPromise (AudioRendererOptions, fpath, Audi", "  await audio.createAudioRenderer(AudioRendererOption", "unction playbackCB (AudioRendererOptions, fpath){\n\n  ", "     }\n\n        var AudioRendererInfo = {\n           ", "ait playbackPromise(AudioRendererOptions, mediaDir+'/", "      }\n\n       var AudioRendererOptions = {\n        ", "      rendererInfo: AudioRendererInfo\n       }\n      ", "     }\n\n        var AudioRendererOptions = {\n        ", "createAudioRenderer(AudioRendererOptions,(err, data) ", "FrameworkRenderLog: AudioRenderer : Path : '+fpath);\n", "      }\n\n       var AudioRendererInfo = {\n           ", "FrameworkRenderLog: AudioRenderer : STATE : '+audioRe", ";\n\n     audio.createAudioRenderer(AudioRendererOption", "      rendererInfo: AudioRendererInfo\n        }\n\n    ", "      rendererInfo: AudioRendererInfo\n    }\n\n    var ", "createAudioRenderer(AudioRendererOptions).then(async ", "s: 1\n    }\n\n    var AudioRendererOptions = {\n        ", "_RAW\n    }\n\n    var AudioRendererInfo = {\n        con"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "List.test.js", "AudioRenderer.test.js", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "getRendererInfo", "api_method_all": "getRendererInfo(callback: AsyncCallback<AudioRendererInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["  * @tc.name      : getRendererInfo()- promise - Get Renderer info - usage\n", "  * @tc.name      : getRendererInfo()- Get Renderer info- callback -Usage\n ", "  * @tc.name      : getRendererInfo()- Get Renderer info- callback\n        ", "  * @tc.desc      : getRendererInfo()- Usage - callback\n                * @", "  * @tc.name      : getRendererInfo()- promise - Get Renderer info - Render", "  * @tc.desc      : getRendererInfo()- Content - callback\n                *", "  * @tc.name      : getRendererInfo()- promise -  Content\n                *", "  * @tc.desc      : getRendererInfo()- promise - Content Get Renderer info\n", "  * @tc.desc      : getRendererInfo()- Callback - RendererFlags\n           ", "  * @tc.desc      : getRendererInfo()- promise - Usage\n                * @t", "  * @tc.desc      : getRendererInfo()- promise - RendererFlags\n            ", "   }\n\n     audioRen.getRendererInfo(async (err, audioParamsGet) => {\n      ", "  * @tc.name      : getRendererInfo()- Get Renderer info- callback -Rendere"], "files": ["AudioRenderer.test.js", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "getRendererInfo", "api_method_all": "getRendererInfo(): Promise<AudioRendererInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": ["  // await audioRen.getRendererInfo().then(async function (audioParamsGet) ", "\n    await audioRen.getRendererInfo().then(async function (audioParamsGet) ", "     await audioRen.getRendererInfo().then(async function (audioParamsGet) "], "files": ["AudioCall.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "getStreamInfo", "api_method_all": "getStreamInfo(callback: AsyncCallback<AudioStreamInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 66, "since": 8, "api_used": "\u662f", "lines": ["FrameworkRenderLog: getStreamInfo :ERROR: '+err.message);\n            res", "RecLog: audioParams getStreamInfo are incorrect: ');\n                resu", "RenderLog: Renderer getStreamInfo:');\n             console.info('AudioFra", "FrameworkRenderLog: getStreamInfo :ERROR: '+err.message);\n\t\t\tresultFlag =", "RenderLog: Renderer getStreamInfo:');\n            console.info('AudioFram", "   audioCapCallBack.getStreamInfo(async(err,audioParamsGet) => {\n        ", "FrameworkRenderLog: getStreamInfo :ERROR: '+err.message);\n        resultF", "RenderLog: Renderer getStreamInfo:');\n         console.info('AudioFramewo", "CapGetgetStreamInfo.getStreamInfo(async(err,audioParamsGet) => {\n        ", "\n        audioCapGetgetStreamInfo.release(async (err, value) => {\n       ", "dioFrameworkRecLog: getStreamInfo :ERROR: '+err.message);\n            res", "         audioCapGetgetStreamInfo = data;\n            } else {\n          ", "Rate;\n     audioRen.getStreamInfo(async (err, audioParamsGet) => {\n      ", "FrameworkRenderLog: getStreamInfo :ERROR: '+err.message);\n             re", "TE : ' + audioCapGetgetStreamInfo.state);\n                if ((audioCapGe", "dioFrameworkRecLog: getStreamInfo :ERROR: '+err.message);\n            set", "\n        audioCapGetgetStreamInfo.getStreamInfo(async(err,audioParamsGet)", "orkRecLog: Capturer getStreamInfo: PASS' );\n            }\n        }).catc", "workRecLog: Entered getStreamInfo');\n            if (err){\n              ", "    if ((audioCapGetgetStreamInfo.state == 4)) {\n                    cons", "orkRecLog: Capturer getStreamInfo:');\n            console.info('AudioFram", "dioFrameworkRecLog: getStreamInfo :ERROR: '+err.message);\n               ", "dioFrameworkRecLog: getStreamInfo  :ERROR: '+err.message);\n            re", "     var audioCapGetgetStreamInfo;\n        var setFlag;\n        var audio", "orkRecLog: Capturer getStreamInfo:');\n                console.info('Audio"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "getStreamInfo", "api_method_all": "getStreamInfo(): Promise<AudioStreamInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["   await audioCapGetgetStreamInfo.getStreamInfo().then(async function (au", "CapGetgetStreamInfo.getStreamInfo().then(async function (audioParamsGet) ", "     await audioCap.getStreamInfo().then(async function (audioParamsGet) ", "     await audioRen.getStreamInfo().then(async function (audioParamsGet) "], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "start", "api_method_all": "start(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 1221, "since": 8, "api_used": "\u662f", "lines": ["rLog: renderInstant started :SUCCESS ');\n        }).catch((err) =", "orkRecLog: Capturer start :ERROR : '+err.message);\n            re", "rLog: renderInstant start :ERROR : '+err.message);\n            re", "orkRecLog: Capturer started :SUCCESS ');\n        }).catch((err) =", "ew Date().getTime()-startTime;\n        let avgTime = waitTime/MAX", "ger(); \n        let startTime = new Date().getTime();\n        for"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "start", "api_method_all": "start(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 128, "since": 8, "api_used": "\u662f", "lines": ["wait ringtonePlayer.start().then(async function () {\n\t\t\tconsole.l", "     await audioRen.start().then(async function () {\n         con", "wait ringtonePlayer.start().then(async function () {\n\t\t\tawait sle", " ringtonePlayerTemp.start().then(async function () {\n\t\t\tconsole.l", "     await audioRen.start().then(async function (started) {\n     ", "await audioCapturer.start().then(async function (started) {\n     ", "wait ringtonePlayer.start().then(async function () {\n            ", "     ringtonePlayer.start().then(function () {\n            consol", "wait ringtonePlayer.start().then(async function () {\n\t\t\t\t\tconsole", "wait ringtonePlayer.start().then(async function () {\n\t\t\t\tconsole.", "\n\n\t\t\tringtonePlayer.start().then(async function () {\n            ", "     await audioRen.start().then(async function () {\n            ", "ait audioCapPromise.start().then(async function () {\n            ", "wait ringtonePlayer.start().then(function () {\n\t\t\t\t\tconsole.log('", "     ringtonePlayer.start().then(async function () {\n            ", "     await audioCap.start().then(async function () {\n            "], "files": ["VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "write", "api_method_all": "write(buffer: ArrayBuffer, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 310, "since": 8, "api_used": "\u662f", "lines": ["     await audioRen.write(buf);\n            if(rlen > (totalSize/", "             2.call writeBufferToPixels\n     *                 3.", "           pixelmap.writePixels(area, () => {\n                con", "workRenderLog: Buff write: Error: ${err.message}`);\n             ", "  * @tc.name      : writePixels-promise\n     * @tc.desc      : 1.", "  * @tc.name      : writeBufferToPixels-promise\n     * @tc.desc  ", "udioFramework: Buff write successful : ');\n                 resul", "             2.call writePixels\n     *                 3.call ret", "var number = fileio.writeSync(fd, buffer);\n            console.in", "              const writeColor = new ArrayBuffer(96);\n \t\tvar buff", "     await audioRen.write(buf);\n         if (rlen > (totalSize/2)", "  * @tc.name      : writePixels-callback\n     * @tc.desc      : 1", "     await audioRen.write(buf,(err, data) => {\n             if (e", "var number = fileio.writeSync(fd, buffer);\n                consol", "     await audioRen.write(buf);\n            if (rlen > (totalSize", "var number = fileio.writeSync(fd, buffer);\n                    co", "     await audioRen.write(buf);\n        }\n        console.info('A"], "files": ["AudioDecoderFormatCallbackTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "fileAssetTestCallback.test.js", "AudioEncoderFuncCallbackTest.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "image.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileTestPromise.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "write", "api_method_all": "write(buffer: ArrayBuffer): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["writeBufferToPixels(writeColor).then(() => {\n                    ", "           pixelmap.writeBufferToPixels(writeColor).then(() => {\n", "           pixelmap.writePixels(area).then(() => {\n              "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "getAudioTime", "api_method_all": "getAudioTime(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": ["cLog: AudioCapturer getAudioTime AFTER WRITE : Success' + audioTime1 );\n", "  : AudioRenderer - getAudioTime - Error\n        * @tc.size      : MEDIU", "  : AudioRenderer - getAudioTime - Play\n    * @tc.size      : MEDIUM\n   ", "FrameworkRenderLog: getAudioTime : ENTER');\n                await audioR", "  : AudioRenderer - getAudioTime - after Play\n    * @tc.desc      : Audi", "it audioCapCallBack.getAudioTime(async(err,audioTime) => {\n            i", "  : AudioRenderer - getAudioTime - Before Play\n    * @tc.desc      : Aud", "FrameworkRenderLog: getAudioTime : FAIL : '+gettime);\n            result", "FrameworkRenderLog: getAudioTime : PASS : '+data);\n            }\n       ", "  : AudioRenderer - getAudioTime - after Play\n    * @tc.size      : MEDI", "FrameworkRenderLog: getAudioTime : ERROR : '+err.message);\n            r", "FrameworkRenderLog: getAudioTime : Play iteration: Converted: '+audioTim", "FrameworkRenderLog: getAudioTime : After Stop : ORG : '+data);\n        }", "FrameworkRenderLog: getAudioTime : After Start : Converted: '+audioTimeS", "FrameworkRenderLog: getAudioTime : After Start : ORG: '+data);\n        }", "cLog: AudioCapturer getAudioTime AFTER WRITE : Success' + audioTime2 );\n", "FrameworkRenderLog: getAudioTime : FAIL : '+totalAudioTime);\n           ", "FrameworkRenderLog: getAudioTime : PASS : '+totalAudioTime);\n        }\n ", "FrameworkRenderLog: getAudioTime : ERROR : '+err.message);\n        });\n\n", "  : AudioRenderer - getAudioTime - Play\n    * @tc.desc      : AudioRende", "cLog: AudioCapturer getAudioTime AFTER START : Success' + audioTime );\n ", "FrameworkRenderLog: getAudioTime : PASS : '+gettime);\n        }\n        ", "FrameworkRenderLog: getAudioTime : Value : '+data);\n            resultFl", "  : AudioRenderer - getAudioTime - Before Play\n    * @tc.size      : MED", "FrameworkRenderLog: getAudioTime : Play iteration: ${rlen} value : ${dat", "  : AudioRenderer - getAudioTime - Error\n        * @tc.desc      : Audio", "FrameworkRenderLog: getAudioTime : ERROR : '+err.message);\n             ", "cLog: AudioCapturer getAudioTime : Success' + audioTime );\n            i", "FrameworkRenderLog: getAudioTime : After Stop : Converted: '+audioTimeEn", "cLog: AudioCapturer getAudioTime AFTER WRITE : Success' + audioTime );\n ", "FrameworkRenderLog: getAudioTime : FAIL : '+data);\n            }\n       "], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "getAudioTime", "api_method_all": "getAudioTime(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["it audioCapCallBack.getAudioTime().then(async function (audioTime1) {\n  ", "it audioCapCallBack.getAudioTime().then(async function (audioTime2) {\n  ", "it audioCapCallBack.getAudioTime().then(async function (audioTime) {\n   ", "     await audioRen.getAudioTime().then(async function (data) {\n        "], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "drain", "api_method_all": "drain(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["nc();\n     audioRen.drain((err, state) => {\n         if (err) {\n ", "RenderLog: Renderer drain failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer drain: ERROR : '+err.message);\n    });\n\n     ", "hen(async function (drained) {\n            console.info('AudioFra", "RenderLog: Renderer drain: ERROR : '+err.message);\n            re", "RenderLog: Renderer drain failed : '+err.message);\n            re", "RenderLog: Renderer drained : '+drained);\n        }).catch((err) ", "enderer drained : '+drained);\n        }).catch((err) => {\n       ", "RenderLog: Renderer drain: ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer drained');\n         }\n     });\n     await sle", "RenderLog: Renderer drained : SUCCESS');\n        }).catch((err) =", "RenderLog: Renderer drained : SUCCESS');\n     }).catch((err) => {"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "drain", "api_method_all": "drain(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["     await audioRen.drain().then(async function () {\n         con", "     await audioRen.drain().then(async function () {\n            ", "     await audioRen.drain().then(async function (drained) {\n     "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "pause", "api_method_all": "pause(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 179, "since": 7, "api_used": "\u662f", "lines": [" console.info(`case pause called`);\n            console.info(`cas", "    audioPlayer.on('pause', () => {\n            console.info('cas", " @tc.name      : 02.pause->reset\n        * @tc.desc      : Reliab", ";\n\n        audioRen.pause((err) => {\n            if (err) {\n     ", "nsole.info(`case to pause`);\n                audioPlayer.pause();", "state).assertEqual('paused');\n            testAudioPlayer.loop = ", "e      : 04.resume->pause\n        * @tc.desc      : Reliability T", "state).assertEqual('paused');\n            expect(audioPlayer.curr", "me      : 034.play->pause->seek(out of duratin)->play\n        * @", "  audioRecorder.on('pause', () => {\n            console.info('set", "dioPlayer.state == 'paused')) {\n                nextStep(mySteps,", "      audioRecorder.pause();\n                break;\n            c", " @tc.name      : 02.pause->release\n        * @tc.desc      : Reli", "me      : 032.play->pause->seek(0)->play\n        * @tc.desc      ", "me      : 03.start->pause\n        * @tc.desc      : Reliability T", "        audioPlayer.pause();\n            } else {\n               ", "nsole.info('case to pause');\n                audioRecorder.pause(", "6.play->stop->seek->pause\n        * @tc.desc      : Audio playbac", "state).assertEqual('paused');\n            audioPlayer.setVolume(M", "me      : 021.play->pause->seek->stop\n        * @tc.desc      : A", " @tc.name      : 03.pause->setVolume\n        * @tc.desc      : Re", "        audioPlayer.pause();\n    })\n\n    \n    it('SUB_MEDIA_PLAYE", "state).assertEqual('paused');\n        expect(audioPlayer.loop).as", "e.info('case now is paused');\n            expect(audioPlayer.stat", "me      : 023.play->pause->play->seek(0)->stop\n        * @tc.desc", "      audioRecorder.pause();\n    })\n\n    /* *\n        * @tc.numbe", "me      : 022.play->pause->play->seek(0)\n        * @tc.desc      ", "state).assertEqual('paused');\n            nextStep(mySteps,done);", "        audioPlayer.pause();\n                break;\n            c", "me      : 06.reset->pause\n        * @tc.desc      : Reliability T", "ame      : 05.stop->pause\n        * @tc.desc      : Reliability T", "me      : 020.play->pause->seek->reset\n        * @tc.desc      : ", "creatAudioRecorder->pause\n        * @tc.desc      : Reliability T", "e.info('setCallback pause() case callback is called');\n          ", "    audioPlayer.on('pause', () => {\n            mySteps.shift();\n", " console.info(`case pause currentTime is ${audioPlayer.currentTim", "me      : 033.play->pause->seek(duration)->play\n        * @tc.des", " @tc.name      : 09.pause three times\n        * @tc.desc      : R", " @tc.name      : 04.pause->resume\n        * @tc.desc      : Relia", "      : 02.prepare->pause\n        * @tc.desc      : Reliability T", "     : 08.all step->pause\n        * @tc.desc      : Reliability T"], "files": ["HttpPlayerFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "AudioRenderer.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "pause", "api_method_all": "pause(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": ["await videoRecorder.pause().then(() => {\n            expect(video", "  await videoPlayer.pause().then(() => {\n            console.info", "     await audioRen.pause().then(async function () {\n         con", "  await videoPlayer.pause().then(() => {\n            expect(video", "await videoRecorder.pause().then(() => {\n            console.info", "     await audioRen.pause().then(async function () {\n            "], "files": ["HttpPlayerFuncPromiseTest.test.js", "AudioRenderer.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoPlayerFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "stop", "api_method_all": "stop(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 833, "since": 8, "api_used": "\u662f", "lines": ["RenderLog: Renderer stopped : SUCCESS');\n            resultFlag=", "RenderLog: Renderer stopped');\n             resultFlag=true;\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n\n     ", "RenderLog: Renderer stop:ERROR : '+err.message);\n         result", "orkRecLog: Capturer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n     a", "RenderLog: Renderer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stop failed: Error: ${err.message}`);\n      ", "orkRecLog: Capturer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stopped : SUCCESS');\n     }).catch((err) => ", "RenderLog: Renderer stopped : SUCCESS');\n        }).catch((err) ", "    }\n     audioRen.stop((err, state) => {\n         if (err) {\n ", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n  ", "RenderLog: Renderer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n\n "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "stop", "api_method_all": "stop(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 99, "since": 8, "api_used": "\u662f", "lines": ["   eventEmitter.on('stop', () => {\n            sleep(5000).then(", "wait ringtonePlayer.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function (stopped) {\n     ", "wait ringtonePlayer.stop().then(function () {\n            consol", "await audioCapturer.stop().then(async function (data) {\n        ", "     await audioCap.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function () {\n         con", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tawait sl", "udioDecodeProcessor.stop().then(() => {\n            console.info", "     await audioRen.stop().then(async function () {\n            ", "udioDecodeProcessor.stop().then(() => {\n                console.", "wait ringtonePlayer.stop().then(async function() {\n\t\t\t\tconsole.e", "udioDecodeProcessor.stop().then(() => {\n                    cons", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tconsole.", "wait ringtonePlayer.stop().then(function () {\n                co", ");\n\t\tringtonePlayer.stop().then(function () {\n                co", "\n\t\t\t\tringtonePlayer.stop().then(function () {\n\t\t\t\tconsole.log('A", "ait audioCapPromise.stop().then(async function () {\n            ", "wait ringtonePlayer.stop().then(function(){\n\t\t\tconsole.log('Audi"], "files": ["VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 8, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 8, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "getBufferSize", "api_method_all": "getBufferSize(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": ["FrameworkRenderLog: getBufferSize :ERROR : '+err.message);\n             r", "ze = await audioRen.getBufferSize();\n     console.info('AudioFrameworkRen", "FrameworkRenderLog: getBufferSize :SUCCESS '+data);\n             bufferSi", "await audioCapturer.getBufferSize();\n        console.info('AudioFramework", "     await audioRen.getBufferSize((err,data)=> {\n         if (err) {\n    ", "FrameworkRenderLog: getBufferSize :ERROR : '+err.message);\n            re", "it audioCapCallBack.getBufferSize(async(err,cbbufferSize) => {\n          ", "it audioCapCallBack.getBufferSize();\n        console.info('AudioFramework", "ze = await audioRen.getBufferSize();\n        console.info('AudioFramework", "ait audioCapPromise.getBufferSize();\n        console.info('AudioFramework", "FrameworkRenderLog: getBufferSize :SUCCESS '+data);\n            bufferSiz", "ze = await audioCap.getBufferSize();\n        console.info('AudioFramework"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "getBufferSize", "api_method_all": "getBufferSize(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["     await audioRen.getBufferSize().then(async function (data) {\n        "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "setRenderRate", "api_method_all": "setRenderRate(rate: AudioRendererRate, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["     await audioRen.setRenderRate(audio.AudioRendererRate.RENDER_RATE_NOR", "FrameworkRenderLog: setRenderRate : RENDER_RATE_NORMAL : SUCCESS');\n     ", "     await audioRen.setRenderRate(audio.AudioRendererRate.RENDER_RATE_DOU", "           audioRen.setRenderRate(audio.AudioRendererRate.RENDER_RATE_DOU", "     await audioRen.setRenderRate(audio.AudioRendererRate.RENDER_RATE_HAL", "rameworkAudioScene: setRenderRate : RENDER_RATE_HALF : ERROR : '+err.mess", "FrameworkRenderLog: setRenderRate : RENDER_RATE_DOUBLE : SUCCESS');\n     ", "rameworkAudioScene: setRenderRate : RENDER_RATE_DOUBLE : ERROR : '+err.me", "FrameworkRenderLog: setRenderRate : RENDER_RATE_HALF : SUCCESS');\n       ", "rameworkAudioScene: setRenderRate : RENDER_RATE_NORMAL : ERROR : '+err.me"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "setRenderRate", "api_method_all": "setRenderRate(rate: AudioRendererRate): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "getRenderRate", "api_method_all": "getRenderRate(callback: AsyncCallback<AudioRendererRate>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["FrameworkRenderLog: getRenderRate : RENDER_RATE_DOUBLE : FAIL : '+data);\n", "rameworkAudioScene: getRenderRate : RENDER_RATE_DOUBLE : ERROR : '+err.me", "FrameworkRenderLog: getRenderRate : RENDER_RATE_NORMAL : PASS : '+data);\n", "FrameworkRenderLog: getRenderRate : RENDER_RATE_NORMAL : FAIL : '+data);\n", "rameworkAudioScene: getRenderRate : RENDER_RATE_NORMAL : ERROR : '+err.me", ";\n\n        audioRen.getRenderRate((err, data) => {\n            if (err) {", "FrameworkRenderLog: getRenderRate : RENDER_RATE_HALF : PASS : '+data);\n  ", "FrameworkRenderLog: getRenderRate : RENDER_RATE_DOUBLE : PASS : '+data);\n", "rameworkAudioScene: getRenderRate : RENDER_RATE_HALF : ERROR : '+err.mess", "FrameworkRenderLog: getRenderRate : RENDER_RATE_HALF : FAIL : '+data);\n  "], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "getRenderRate", "api_method_all": "getRenderRate(): Promise<AudioRendererRate>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["     await audioRen.getRenderRate().then(async function (data) {\n        "], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "on", "api_method_all": "on(type: 'interrupt', callback: Callback<InterruptEvent>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 7, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "on", "api_method_all": "on(type: \"markReach\", frame: number, callback: (position: number) => {}): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "on", "api_method_all": "on(type: \"markReach\", frame: number, callback: (position: number) => {}): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "off", "api_method_all": "off(type: \"markReach\"): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 125, "since": 7, "api_used": "\u662f", "lines": ["  }\n                offset = offset + oneSt", "   audioCapCallBack.off('markReach');\n     ", "\n            while (offset < testimagebuffe", "        inputobject.offset = 0;\n           ", "('TC_053-1 0011 ' + offset);\n            }\n", "           audioRen.off('periodReach');\n   ", "0),\n                offset: 21,\n           ", " periodReach - On - off -on\n    * @tc.desc ", "0),\n                offset: 0,\n            ", "th;\n            let offset = 0;\n           ", "fo('TC_053 0011 ' + offset);\n            }\n", "                    offset: 0,\n            ", "           offset = offset + oneStep.length", " readPixels-promise(offset > buffer)\n     *", "8),\n                offset: 0,\n            ", " markReached - On - off -on\n    * @tc.desc ", "uffer.slice(offset, offset + bufferSize);\n ", "stimagebuffer.slice(offset, offset + buffer", "   audioCapCallBack.off('periodReach');\n   ", "           audioRen.off('markReach');\n     "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "on", "api_method_all": "on(type: \"periodReach\", frame: number, callback: (position: number) => {}): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "on", "api_method_all": "on(type: \"periodReach\", frame: number, callback: (position: number) => {}): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "off", "api_method_all": "off(type: \"periodReach\"): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 125, "since": 7, "api_used": "\u662f", "lines": ["  }\n                offset = offset + oneSt", "   audioCapCallBack.off('markReach');\n     ", "\n            while (offset < testimagebuffe", "        inputobject.offset = 0;\n           ", "('TC_053-1 0011 ' + offset);\n            }\n", "           audioRen.off('periodReach');\n   ", "0),\n                offset: 21,\n           ", " periodReach - On - off -on\n    * @tc.desc ", "0),\n                offset: 0,\n            ", "th;\n            let offset = 0;\n           ", "fo('TC_053 0011 ' + offset);\n            }\n", "                    offset: 0,\n            ", "           offset = offset + oneStep.length", " readPixels-promise(offset > buffer)\n     *", "8),\n                offset: 0,\n            ", " markReached - On - off -on\n    * @tc.desc ", "uffer.slice(offset, offset + bufferSize);\n ", "stimagebuffer.slice(offset, offset + buffer", "   audioCapCallBack.off('periodReach');\n   ", "           audioRen.off('markReach');\n     "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "on", "api_method_all": "on(type: \"stateChange\", callback: Callback<AudioState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 7, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRenderer", "api_method_name": "state", "api_method_all": "readonly state: AudioState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1920, "since": 8, "api_used": "\u662f", "lines": [" STATE : '+audioRen.state);\n\n        var buff", "PASS : ' + audioRen.state);\n     }\n     else ", " STATE : '+audioCap.state);\n\n        var buff", "audioRen.stop((err, state) => {\n         if (", " STATE : '+audioRen.state);\n\n     console.inf", " STATE : '+audioRen.state);\n\n        console.", "\n\n     if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        return r", "ioRen.release((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n    //      resul", " STATE : '+audioRen.state);\n\n     await audio", " STATE : '+audioRen.state);\n\n     var samplin", " STATE : '+audioRen.state);\n\n     return resu", "PASS : ' + audioRen.state);\n    //  }\n    // ", "udioRen.drain((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n         resultFl", " STATE : '+audioRen.state);\n\n     var bufferS", " STATE : '+audioRen.state);\n\n     if (resultF", " STATE : '+audioRen.state);\n\n        await au", "   //  if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        await au"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SourceType", "api_method_all": "enum SourceType {\n    \n    SOURCE_TYPE_INVALID = -1,\n    \n    SOURCE_TYPE_MIC = 0,\n    \n    SOURCE_TYPE_VOICE_COMMUNICATION = 7\n  }", "api_method_name": "SourceType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 105, "since": 8, "api_used": "\u662f", "lines": ["       expect(audio.SourceType.SOURCE_TYPE_INVALID", "orkRecLog: Capturer SourceType:' + audioParamsGet.", "  * @tc.name      : SourceType - SOURCE_TYPE_INVAL", "      source: audio.SourceType.SOURCE_TYPE_MIC,\n  ", "  * @tc.desc      : SourceType - SOURCE_TYPE_INVAL"], "files": ["AudioCall.test.js", "RecorderLocalTestAudioFUNC.test.js", "AudioRenderer.test.js", "VideoRecorderEnumTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "SR000GHLLV.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SourceType", "api_method_name": "SOURCE_TYPE_INVALID", "api_method_all": "SOURCE_TYPE_INVALID = -1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["ct(audio.SourceType.SOURCE_TYPE_INVALID).assertEqual(-1);\n ", "     : SourceType - SOURCE_TYPE_INVALID\n                * @"], "files": ["AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SourceType", "api_method_name": "SOURCE_TYPE_MIC", "api_method_all": "SOURCE_TYPE_MIC = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 71, "since": 8, "api_used": "\u662f", "lines": ["e: audio.SourceType.SOURCE_TYPE_MIC,\n            captur", "e: audio.SourceType.SOURCE_TYPE_MIC,\n           capture"], "files": ["AudioCall.test.js", "SR000GHLLV.test.js", "VideoRecorderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SourceType", "api_method_name": "SOURCE_TYPE_VOICE_COMMUNICATION", "api_method_all": "SOURCE_TYPE_VOICE_COMMUNICATION = 7", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturerInfo", "api_method_all": "interface AudioCapturerInfo {\n    \n    source: SourceType;\n    \n    capturerFlags: number;\n  }", "api_method_name": "AudioCapturerInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 102, "since": 8, "api_used": "\u662f", "lines": ["      capturerInfo: AudioCapturerInfo\n        }\n\n        ", "     }\n\n        var AudioCapturerInfo = {\n            sou", "      }\n\n       var AudioCapturerInfo = {\n           sour", "      capturerInfo: AudioCapturerInfo\n       }\n\n       va"], "files": ["AudioCall.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturerInfo", "api_method_name": "source", "api_method_all": "source: SourceType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 345, "since": 8, "api_used": "\u662f", "lines": ["000 = {\n            source: audio.SourceType.S", "025 = {\n            source: audio.SourceType.S", "ameworkRenderLog: Resource DIR Path : '+mediaD", ":' + audioParamsGet.source);\n                c", "025 = {\n            source: 1,\n            cap", "nfo = {\n            source: audio.SourceType.S", "000 = {\n            source: 1,\n            cap", "nfo = {\n            source: 1,\n            cap", " + '/assets/entry/resources/rawfile';\n\t\tvar me", "100 = {\n            source: 1,\n            cap", ":' + audioParamsGet.source);\n            conso", "050 = {\n            source: audio.SourceType.S", "050 = {\n            source: 1,\n            cap", "Info = {\n           source: audio.SourceType.S", "100 = {\n            source: audio.SourceType.S"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "HttpPlayerCompatibilityTest.test.js", "image.test.js", "PlayerLocalTestAudioFormat.test.js", "SR000GHLLV.test.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturerInfo", "api_method_name": "capturerFlags", "api_method_all": "capturerFlags: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 104, "since": 8, "api_used": "\u662f", "lines": ["YPE_MIC,\n           capturerFlags: 1\n       }\n\n      ", "rce: 1,\n            capturerFlags : 1,\n        }\n    ", "orkRecLog: Capturer capturerFlags:' + audioParamsGet.", "PE_MIC,\n            capturerFlags: 1\n        }\n\n     ", "rce: 1,\n            capturerFlags: 1\n        }\n\n     ", "PE_MIC,\n            capturerFlags : 1,\n        }\n    ", ":' + audioParamsGet.capturerFlags);\n        }).catch(", ":' + audioParamsGet.capturerFlags);\n            }\n   ", ":' + audioParamsGet.capturerFlags);\n            }else"], "files": ["AudioCall.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturerOptions", "api_method_all": "interface AudioCapturerOptions {\n    \n    streamInfo: AudioStreamInfo;\n    \n    capturerInfo: AudioCapturerInfo;\n  }", "api_method_name": "AudioCapturerOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 128, "since": 8, "api_used": "\u662f", "lines": ["createAudioCapturer(AudioCapturerOptions,async(err,value) =>", "}\n       recPromise(AudioCapturerOptions, dirPath+'/capture_", "unction recPromise (AudioCapturerOptions, fpath, AudioScene)", "      }\n\n       var AudioCapturerOptions = {\n           stre", "nction recCallBack (AudioCapturerOptions, fpath, AudioScene)", " = await recPromise(AudioCapturerOptions, dirPath+'/capture_", "     }\n\n        var AudioCapturerOptions = {\n            str", "createAudioCapturer(AudioCapturerOptions).then(async functio"], "files": ["AudioCall.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturerOptions", "api_method_name": "streamInfo", "api_method_all": "streamInfo: AudioStreamInfo", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 201, "since": 8, "api_used": "\u662f", "lines": ["Options = {\n        streamInfo: AudioStreamInfo,\n ", "ons = {\n            streamInfo: AudioStreamInfo,\n ", "ions = {\n           streamInfo: AudioStreamInfoCap", "ions = {\n    //     streamInfo: AudioStreamInfo,\n ", "ions = {\n           streamInfo: AudioStreamInfoRen"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturerOptions", "api_method_name": "capturerInfo", "api_method_all": "capturerInfo: AudioCapturerInfo", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 90, "since": 8, "api_used": "\u662f", "lines": ["o48000,\n            capturerInfo: audioCapturerInfo4", "o32000,\n            capturerInfo: audioCapturerInfo3", "amInfo,\n            capturerInfo: AudioCapturerInfo\n", "o64000,\n            capturerInfo: audioCapturerInfo6", "o44100,\n            capturerInfo: audioCapturerInfo4", "o12000,\n            capturerInfo: audioCapturerInfo1", "o24000,\n            capturerInfo: audioCapturerInfo2", "o16000,\n            capturerInfo: audioCapturerInfo1", "o22050,\n            capturerInfo: audioCapturerInfo2", "o11025,\n            capturerInfo: audioCapturerInfo1", "InfoCap,\n           capturerInfo: AudioCapturerInfo\n", "fo8000,\n            capturerInfo: audioCapturerInfo8", "o96000,\n            capturerInfo: audioCapturerInfo9"], "files": ["AudioCall.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_all": "interface AudioCapturer {\n    \n    readonly state: AudioState;\n    \n    getCapturerInfo(callback: AsyncCallback<AudioCapturerInfo>): void;\n    \n    getCapturerInfo(): Promise<AudioCapturerInfo>;\n\n    \n    getStreamInfo(callback: AsyncCallback<AudioStreamInfo>): void;\n    \n    getStreamInfo(): Promise<AudioStreamInfo>;\n\n    \n    start(callback: AsyncCallback<void>): void;\n    \n    start(): Promise<void>;\n\n    \n    read(size: number, isBlockingRead: boolean, callback: AsyncCallback<ArrayBuffer>): void;\n    \n    read(size: number, isBlockingRead: boolean): Promise<ArrayBuffer>;\n\n    \n    getAudioTime(callback: AsyncCallback<number>): void;\n    \n    getAudioTime(): Promise<number>;\n\n    \n    stop(callback: AsyncCallback<void>): void;\n    \n    stop(): Promise<void>;\n\n    \n    release(callback: AsyncCallback<void>): void;\n    \n    release(): Promise<void>;\n\n    \n    getBufferSize(callback: AsyncCallback<number>): void;\n    \n    getBufferSize(): Promise<number>;\n\n    \n    on(type: \"markReach\", frame: number, callback: (position: number) => {}): void;\n    \n    off(type: \"markReach\"): void;\n\n    \n    on(type: \"periodReach\", frame: number, callback: (position: number) => {}): void;\n    \n    off(type: \"periodReach\"): void;\n\n    \n    on(type: \"stateChange\", callback: Callback<AudioState>): void;\n  }", "api_method_name": "AudioCapturer", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 735, "since": 8, "api_used": "\u662f", "lines": ["      capturerInfo: AudioCapturerInfo\n        }\n\n    ", "     }\n\n        var AudioCapturerOptions = {\n        ", "dioFrameworkRecLog: AudioCapturer : STATE : '+audioCa", "dioFrameworkRecLog: AudioCapturer Created : Success :", "      }\n\n       var AudioCapturerOptions = {\n        ", "      }\n\n       var AudioCapturerInfo = {\n           ", "dioFrameworkRecLog: AudioCapturer Not Created : Fail ", "unction recPromise (AudioCapturerOptions, fpath, Audi", "dioFrameworkRecLog: AudioCapturer : Path : '+fpath);\n", "dioFrameworkRecLog: AudioCapturer : START SUCCESS');\n", "  await audio.createAudioCapturer(AudioCapturerOption", "nction recCallBack (AudioCapturerOptions, fpath, Audi", "turer = audio.createAudioCapturer(streamType);\n      ", "      capturerInfo: AudioCapturerInfo\n       }\n\n     ", "dioFrameworkRecLog: AudioCapturer Created : ERROR : '", "     }\n\n        var AudioCapturerInfo = {\n           ", "createAudioCapturer(AudioCapturerOptions).then(async ", "createAudioCapturer(AudioCapturerOptions,async(err,va", " = await recPromise(AudioCapturerOptions, dirPath+'/c", "}\n       recPromise(AudioCapturerOptions, dirPath+'/c", "        audio.createAudioCapturer(AudioCapturerOption"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "getCapturerInfo", "api_method_all": "getCapturerInfo(callback: AsyncCallback<AudioCapturerInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 26, "since": 8, "api_used": "\u662f", "lines": ["     var audioCapGetgetCapturerInfo;\n        var setFlag;\n        var audio", "pGetgetCapturerInfo.getCapturerInfo(async(err,audioParamsGet) => {\n        ", "   audioCapCallBack.getCapturerInfo(async(err,audioParamsGet) => {\n        ", "\n        audioCapGetgetCapturerInfo.getCapturerInfo(async(err,audioParamsGe", "\n        audioCapGetgetCapturerInfo.release(async (err, value) => {\n       ", "         audioCapGetgetCapturerInfo = data;\n            } else {\n          ", "TE : ' + audioCapGetgetCapturerInfo.state);\n                if ((audioCapGe", "RecLog: audioParams getCapturerInfo are incorrect: ');\n                resu", "    if ((audioCapGetgetCapturerInfo.state == 4)) {\n                    cons"], "files": ["SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "getCapturerInfo", "api_method_all": "getCapturerInfo(): Promise<AudioCapturerInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["pGetgetCapturerInfo.getCapturerInfo().then(async function (audioParamsGet) ", "     await audioCap.getCapturerInfo().then(async function (audioParamsGet) ", "   await audioCapGetgetCapturerInfo.getCapturerInfo().then(async function ("], "files": ["AudioCall.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "getStreamInfo", "api_method_all": "getStreamInfo(callback: AsyncCallback<AudioStreamInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 66, "since": 8, "api_used": "\u662f", "lines": ["FrameworkRenderLog: getStreamInfo :ERROR: '+err.message);\n            res", "RecLog: audioParams getStreamInfo are incorrect: ');\n                resu", "RenderLog: Renderer getStreamInfo:');\n             console.info('AudioFra", "FrameworkRenderLog: getStreamInfo :ERROR: '+err.message);\n\t\t\tresultFlag =", "RenderLog: Renderer getStreamInfo:');\n            console.info('AudioFram", "   audioCapCallBack.getStreamInfo(async(err,audioParamsGet) => {\n        ", "FrameworkRenderLog: getStreamInfo :ERROR: '+err.message);\n        resultF", "RenderLog: Renderer getStreamInfo:');\n         console.info('AudioFramewo", "CapGetgetStreamInfo.getStreamInfo(async(err,audioParamsGet) => {\n        ", "\n        audioCapGetgetStreamInfo.release(async (err, value) => {\n       ", "dioFrameworkRecLog: getStreamInfo :ERROR: '+err.message);\n            res", "         audioCapGetgetStreamInfo = data;\n            } else {\n          ", "Rate;\n     audioRen.getStreamInfo(async (err, audioParamsGet) => {\n      ", "FrameworkRenderLog: getStreamInfo :ERROR: '+err.message);\n             re", "TE : ' + audioCapGetgetStreamInfo.state);\n                if ((audioCapGe", "dioFrameworkRecLog: getStreamInfo :ERROR: '+err.message);\n            set", "\n        audioCapGetgetStreamInfo.getStreamInfo(async(err,audioParamsGet)", "orkRecLog: Capturer getStreamInfo: PASS' );\n            }\n        }).catc", "workRecLog: Entered getStreamInfo');\n            if (err){\n              ", "    if ((audioCapGetgetStreamInfo.state == 4)) {\n                    cons", "orkRecLog: Capturer getStreamInfo:');\n            console.info('AudioFram", "dioFrameworkRecLog: getStreamInfo :ERROR: '+err.message);\n               ", "dioFrameworkRecLog: getStreamInfo  :ERROR: '+err.message);\n            re", "     var audioCapGetgetStreamInfo;\n        var setFlag;\n        var audio", "orkRecLog: Capturer getStreamInfo:');\n                console.info('Audio"], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "getStreamInfo", "api_method_all": "getStreamInfo(): Promise<AudioStreamInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["   await audioCapGetgetStreamInfo.getStreamInfo().then(async function (au", "CapGetgetStreamInfo.getStreamInfo().then(async function (audioParamsGet) ", "     await audioCap.getStreamInfo().then(async function (audioParamsGet) ", "     await audioRen.getStreamInfo().then(async function (audioParamsGet) "], "files": ["AudioCall.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "start", "api_method_all": "start(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 1221, "since": 8, "api_used": "\u662f", "lines": ["rLog: renderInstant started :SUCCESS ');\n        }).catch((err) =", "orkRecLog: Capturer start :ERROR : '+err.message);\n            re", "rLog: renderInstant start :ERROR : '+err.message);\n            re", "orkRecLog: Capturer started :SUCCESS ');\n        }).catch((err) =", "ew Date().getTime()-startTime;\n        let avgTime = waitTime/MAX", "ger(); \n        let startTime = new Date().getTime();\n        for"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "start", "api_method_all": "start(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 128, "since": 8, "api_used": "\u662f", "lines": ["wait ringtonePlayer.start().then(async function () {\n\t\t\tconsole.l", "     await audioRen.start().then(async function () {\n         con", "wait ringtonePlayer.start().then(async function () {\n\t\t\tawait sle", " ringtonePlayerTemp.start().then(async function () {\n\t\t\tconsole.l", "     await audioRen.start().then(async function (started) {\n     ", "await audioCapturer.start().then(async function (started) {\n     ", "wait ringtonePlayer.start().then(async function () {\n            ", "     ringtonePlayer.start().then(function () {\n            consol", "wait ringtonePlayer.start().then(async function () {\n\t\t\t\t\tconsole", "wait ringtonePlayer.start().then(async function () {\n\t\t\t\tconsole.", "\n\n\t\t\tringtonePlayer.start().then(async function () {\n            ", "     await audioRen.start().then(async function () {\n            ", "ait audioCapPromise.start().then(async function () {\n            ", "wait ringtonePlayer.start().then(function () {\n\t\t\t\t\tconsole.log('", "     ringtonePlayer.start().then(async function () {\n            ", "     await audioCap.start().then(async function () {\n            "], "files": ["VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "read", "api_method_all": "read(size: number, isBlockingRead: boolean, callback: AsyncCallback<ArrayBuffer>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 492, "since": 7, "api_used": "\u662f", "lines": ["er = await audioCap.read(bufferSize, true);\n            var numb", "fer(44);\n        ss.readSync(discardHeader);\n        let totalSi", "Log: Renderer after read');\n     await audioRen.getRenderRate().", "dioFramework: bytes read from file: ' +rlen);\n         await aud", "         rlen += ss.readSync(buf);\n         console.info('Buffer", "Buffer(44);\n     ss.readSync(discardHeader);\n     let totalSize ", "Log: Renderer after read');\n    \n        await audioRen.drain().", "dioFramework: bytes read from file: ' +rlen);\n            await ", "         rlen += ss.readSync(buf);\n            console.info('Buf", "Log: Renderer after read');\n\n        var gettime = audioTimeMidd"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "fileAssetTestCallback.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRenderer.test.js", "fileTestPromise.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "read", "api_method_all": "read(size: number, isBlockingRead: boolean): Promise<ArrayBuffer>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": ["           pixelmap.readPixels(area).then(()=>{\n                ", ".readPixelsToBuffer(readBuffer).then(() => {\n                   ", "           pixelmap.readPixelsToBuffer(readBuffer).then(() => {\n", "           pixelmap.readPixels(area).then(()=>{\n\t\t\t\t\tconsole.inf", "pixelmap.readPixels(readArea).then(() => {\n                     ", "           pixelmap.readPixels(readArea).then(() => {\n          ", "Log: Renderer after read');\n\n        await audioRen.drain().then", "           pixelmap.readPixels(area).then(() => {\n              "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "getAudioTime", "api_method_all": "getAudioTime(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": ["cLog: AudioCapturer getAudioTime AFTER WRITE : Success' + audioTime1 );\n", "  : AudioRenderer - getAudioTime - Error\n        * @tc.size      : MEDIU", "  : AudioRenderer - getAudioTime - Play\n    * @tc.size      : MEDIUM\n   ", "FrameworkRenderLog: getAudioTime : ENTER');\n                await audioR", "  : AudioRenderer - getAudioTime - after Play\n    * @tc.desc      : Audi", "it audioCapCallBack.getAudioTime(async(err,audioTime) => {\n            i", "  : AudioRenderer - getAudioTime - Before Play\n    * @tc.desc      : Aud", "FrameworkRenderLog: getAudioTime : FAIL : '+gettime);\n            result", "FrameworkRenderLog: getAudioTime : PASS : '+data);\n            }\n       ", "  : AudioRenderer - getAudioTime - after Play\n    * @tc.size      : MEDI", "FrameworkRenderLog: getAudioTime : ERROR : '+err.message);\n            r", "FrameworkRenderLog: getAudioTime : Play iteration: Converted: '+audioTim", "FrameworkRenderLog: getAudioTime : After Stop : ORG : '+data);\n        }", "FrameworkRenderLog: getAudioTime : After Start : Converted: '+audioTimeS", "FrameworkRenderLog: getAudioTime : After Start : ORG: '+data);\n        }", "cLog: AudioCapturer getAudioTime AFTER WRITE : Success' + audioTime2 );\n", "FrameworkRenderLog: getAudioTime : FAIL : '+totalAudioTime);\n           ", "FrameworkRenderLog: getAudioTime : PASS : '+totalAudioTime);\n        }\n ", "FrameworkRenderLog: getAudioTime : ERROR : '+err.message);\n        });\n\n", "  : AudioRenderer - getAudioTime - Play\n    * @tc.desc      : AudioRende", "cLog: AudioCapturer getAudioTime AFTER START : Success' + audioTime );\n ", "FrameworkRenderLog: getAudioTime : PASS : '+gettime);\n        }\n        ", "FrameworkRenderLog: getAudioTime : Value : '+data);\n            resultFl", "  : AudioRenderer - getAudioTime - Before Play\n    * @tc.size      : MED", "FrameworkRenderLog: getAudioTime : Play iteration: ${rlen} value : ${dat", "  : AudioRenderer - getAudioTime - Error\n        * @tc.desc      : Audio", "FrameworkRenderLog: getAudioTime : ERROR : '+err.message);\n             ", "cLog: AudioCapturer getAudioTime : Success' + audioTime );\n            i", "FrameworkRenderLog: getAudioTime : After Stop : Converted: '+audioTimeEn", "cLog: AudioCapturer getAudioTime AFTER WRITE : Success' + audioTime );\n ", "FrameworkRenderLog: getAudioTime : FAIL : '+data);\n            }\n       "], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "getAudioTime", "api_method_all": "getAudioTime(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["it audioCapCallBack.getAudioTime().then(async function (audioTime1) {\n  ", "it audioCapCallBack.getAudioTime().then(async function (audioTime2) {\n  ", "it audioCapCallBack.getAudioTime().then(async function (audioTime) {\n   ", "     await audioRen.getAudioTime().then(async function (data) {\n        "], "files": ["AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "stop", "api_method_all": "stop(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 833, "since": 8, "api_used": "\u662f", "lines": ["RenderLog: Renderer stopped : SUCCESS');\n            resultFlag=", "RenderLog: Renderer stopped');\n             resultFlag=true;\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n\n     ", "RenderLog: Renderer stop:ERROR : '+err.message);\n         result", "orkRecLog: Capturer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n     a", "RenderLog: Renderer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stop failed: Error: ${err.message}`);\n      ", "orkRecLog: Capturer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stopped : SUCCESS');\n     }).catch((err) => ", "RenderLog: Renderer stopped : SUCCESS');\n        }).catch((err) ", "    }\n     audioRen.stop((err, state) => {\n         if (err) {\n ", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n  ", "RenderLog: Renderer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n\n "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "stop", "api_method_all": "stop(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 99, "since": 8, "api_used": "\u662f", "lines": ["   eventEmitter.on('stop', () => {\n            sleep(5000).then(", "wait ringtonePlayer.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function (stopped) {\n     ", "wait ringtonePlayer.stop().then(function () {\n            consol", "await audioCapturer.stop().then(async function (data) {\n        ", "     await audioCap.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function () {\n         con", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tawait sl", "udioDecodeProcessor.stop().then(() => {\n            console.info", "     await audioRen.stop().then(async function () {\n            ", "udioDecodeProcessor.stop().then(() => {\n                console.", "wait ringtonePlayer.stop().then(async function() {\n\t\t\t\tconsole.e", "udioDecodeProcessor.stop().then(() => {\n                    cons", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tconsole.", "wait ringtonePlayer.stop().then(function () {\n                co", ");\n\t\tringtonePlayer.stop().then(function () {\n                co", "\n\t\t\t\tringtonePlayer.stop().then(function () {\n\t\t\t\tconsole.log('A", "ait audioCapPromise.stop().then(async function () {\n            ", "wait ringtonePlayer.stop().then(function(){\n\t\t\tconsole.log('Audi"], "files": ["VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 8, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 8, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "getBufferSize", "api_method_all": "getBufferSize(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": ["FrameworkRenderLog: getBufferSize :ERROR : '+err.message);\n             r", "ze = await audioRen.getBufferSize();\n     console.info('AudioFrameworkRen", "FrameworkRenderLog: getBufferSize :SUCCESS '+data);\n             bufferSi", "await audioCapturer.getBufferSize();\n        console.info('AudioFramework", "     await audioRen.getBufferSize((err,data)=> {\n         if (err) {\n    ", "FrameworkRenderLog: getBufferSize :ERROR : '+err.message);\n            re", "it audioCapCallBack.getBufferSize(async(err,cbbufferSize) => {\n          ", "it audioCapCallBack.getBufferSize();\n        console.info('AudioFramework", "ze = await audioRen.getBufferSize();\n        console.info('AudioFramework", "ait audioCapPromise.getBufferSize();\n        console.info('AudioFramework", "FrameworkRenderLog: getBufferSize :SUCCESS '+data);\n            bufferSiz", "ze = await audioCap.getBufferSize();\n        console.info('AudioFramework"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "SR000GHLLV.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "getBufferSize", "api_method_all": "getBufferSize(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["     await audioRen.getBufferSize().then(async function (data) {\n        "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "off", "api_method_all": "off(type: \"markReach\"): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 125, "since": 7, "api_used": "\u662f", "lines": ["  }\n                offset = offset + oneSt", "   audioCapCallBack.off('markReach');\n     ", "\n            while (offset < testimagebuffe", "        inputobject.offset = 0;\n           ", "('TC_053-1 0011 ' + offset);\n            }\n", "           audioRen.off('periodReach');\n   ", "0),\n                offset: 21,\n           ", " periodReach - On - off -on\n    * @tc.desc ", "0),\n                offset: 0,\n            ", "th;\n            let offset = 0;\n           ", "fo('TC_053 0011 ' + offset);\n            }\n", "                    offset: 0,\n            ", "           offset = offset + oneStep.length", " readPixels-promise(offset > buffer)\n     *", "8),\n                offset: 0,\n            ", " markReached - On - off -on\n    * @tc.desc ", "uffer.slice(offset, offset + bufferSize);\n ", "stimagebuffer.slice(offset, offset + buffer", "   audioCapCallBack.off('periodReach');\n   ", "           audioRen.off('markReach');\n     "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "off", "api_method_all": "off(type: \"periodReach\"): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 125, "since": 7, "api_used": "\u662f", "lines": ["  }\n                offset = offset + oneSt", "   audioCapCallBack.off('markReach');\n     ", "\n            while (offset < testimagebuffe", "        inputobject.offset = 0;\n           ", "('TC_053-1 0011 ' + offset);\n            }\n", "           audioRen.off('periodReach');\n   ", "0),\n                offset: 21,\n           ", " periodReach - On - off -on\n    * @tc.desc ", "0),\n                offset: 0,\n            ", "th;\n            let offset = 0;\n           ", "fo('TC_053 0011 ' + offset);\n            }\n", "                    offset: 0,\n            ", "           offset = offset + oneStep.length", " readPixels-promise(offset > buffer)\n     *", "8),\n                offset: 0,\n            ", " markReached - On - off -on\n    * @tc.desc ", "uffer.slice(offset, offset + bufferSize);\n ", "stimagebuffer.slice(offset, offset + buffer", "   audioCapCallBack.off('periodReach');\n   ", "           audioRen.off('markReach');\n     "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "on", "api_method_all": "on(type: \"stateChange\", callback: Callback<AudioState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 7, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioCapturer", "api_method_name": "state", "api_method_all": "readonly state: AudioState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1920, "since": 8, "api_used": "\u662f", "lines": [" STATE : '+audioRen.state);\n\n        var buff", "PASS : ' + audioRen.state);\n     }\n     else ", " STATE : '+audioCap.state);\n\n        var buff", "audioRen.stop((err, state) => {\n         if (", " STATE : '+audioRen.state);\n\n     console.inf", " STATE : '+audioRen.state);\n\n        console.", "\n\n     if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        return r", "ioRen.release((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n    //      resul", " STATE : '+audioRen.state);\n\n     await audio", " STATE : '+audioRen.state);\n\n     var samplin", " STATE : '+audioRen.state);\n\n     return resu", "PASS : ' + audioRen.state);\n    //  }\n    // ", "udioRen.drain((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n         resultFl", " STATE : '+audioRen.state);\n\n     var bufferS", " STATE : '+audioRen.state);\n\n     if (resultF", " STATE : '+audioRen.state);\n\n        await au", "   //  if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        await au"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}]}