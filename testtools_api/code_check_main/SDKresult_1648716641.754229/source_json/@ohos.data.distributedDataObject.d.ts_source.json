{"subsystem_ch": "\u5206\u5e03\u5f0f\u6570\u636e\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "distributeddatamgr", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.data.distributedDataObject", "api": [{"api_class_name": "distributedDataObject", "api_method_all": "declare namespace distributedDataObject {\r\n    \r\n    function createDistributedObject(source: object): DistributedObject;\r\n\r\n    \r\n    function genSessionId(): string;\r\n\r\n    \r\n    interface DistributedObject {\r\n        \r\n        setSessionId(sessionId?: string): boolean;\r\n\r\n        \r\n        on(type: 'change', callback: Callback<{ sessionId: string, fields: Array<string> }>): void;\r\n\r\n        \r\n        off(type: 'change', callback?: Callback<{ sessionId: string, fields: Array<string> }>): void;\r\n\r\n        \r\n        on(type: 'status', callback: Callback<{ sessionId: string, networkId: string, status: 'online' | 'offline' }>): void;\r\n\r\n        \r\n        off(type: 'status', callback?: Callback<{ sessionId: string, deviceId: string, status: 'online' | 'offline' }>): void;\r\n    }\r\n}", "api_method_name": "distributedDataObject", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["ct from '@ohos.data.distributedDataObject';\n\nvar baseLine = 5"], "files": ["ObjectStoreJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "distributedDataObject", "api_method_name": "createDistributedObject", "api_method_all": "function createDistributedObject(source: object): DistributedObject;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["= distributedObject.createDistributedObject({ name: undefined, ", "= distributedObject.createDistributedObject({\n            name:", "= distributedObject.createDistributedObject({ name: \"Amy\", age:", "= distributedObject.createDistributedObject({ name: \"Eric\", age"], "files": ["ObjectStoreJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "distributedDataObject", "api_method_name": "genSessionId", "api_method_all": "function genSessionId(): string;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["= distributedObject.genSessionId();\n        expect(s", "= distributedObject.genSessionId();\n        var sess"], "files": ["ObjectStoreJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DistributedObject", "api_method_all": "interface DistributedObject {\r\n        \r\n        setSessionId(sessionId?: string): boolean;\r\n\r\n        \r\n        on(type: 'change', callback: Callback<{ sessionId: string, fields: Array<string> }>): void;\r\n\r\n        \r\n        off(type: 'change', callback?: Callback<{ sessionId: string, fields: Array<string> }>): void;\r\n\r\n        \r\n        on(type: 'status', callback: Callback<{ sessionId: string, networkId: string, status: 'online' | 'offline' }>): void;\r\n\r\n        \r\n        off(type: 'status', callback?: Callback<{ sessionId: string, deviceId: string, status: 'online' | 'offline' }>): void;\r\n    }", "api_method_name": "DistributedObject", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["ributedObject.createDistributedObject({ name: undefined, ", "ributedObject.createDistributedObject({ name: \"Amy\", age:", "ributedObject.createDistributedObject({ name: \"Eric\", age", "ributedObject.createDistributedObject({\n            name:"], "files": ["ObjectStoreJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DistributedObject", "api_method_name": "setSessionId", "api_method_all": "setSessionId(sessionId?: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 19, "since": 8, "api_used": "\u662f", "lines": ["\n        objectTest.setSessionId(\"session5\");\n      ", "me = 0;\n        var setSessionIdTime = 0;\n        va", "\n        objectTest.setSessionId(\"session9\");\n      ", "\n        objectTest.setSessionId(\"session3\");\n      ", "      complexObject.setSessionId(\"session12\");\n     ", "ut(() => objectTest.setSessionId(\"session9\"), 1000);", "      complexObject.setSessionId(\"session14\");\n     ", "on14\");\n            setSessionIdTime += Date.now() -", "\n        testObject.setSessionId(\"testSession2\");\n  ", "\n        objectTest.setSessionId(\"session2\");\n      ", "       totalTime += setSessionIdTime;\n            to", "\n        objectTest.setSessionId(\"session8\");\n      ", "\n        objectTest.setSessionId(\"session6\");\n      ", "\n        objectTest.setSessionId(\"session1\");\n      ", "\n        objectTest.setSessionId(\"session13\");\n     ", "\n        testObject.setSessionId(\"testSession1\");\n  ", "            object1.setSessionId(\"session11\");\n     ", "\n        objectTest.setSessionId(\"session4\");\n      ", "\n        objectTest.setSessionId(\"session7\");\n      "], "files": ["ObjectStoreJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DistributedObject", "api_method_name": "on", "api_method_all": "on(type: 'change', callback: Callback<{ sessionId: string, fields: Array<string> }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 9120, "since": 8, "api_used": "\u662f", "lines": ["ction () {\n        console.info(TAG + 'beforeEach')\n    })\n\n  ", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ",\n                \"longValue\": -9223372036854775808,\n         ", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "('config')\n        configService.setConfig(this)\n\n        requ", "foreAll(async function () {\n        console.info(TAG + 'before", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", ",\n                \"longValue\": 9223372036854775807,\n          ", "ction () {\n        console.info(TAG + 'afterAll')\n        rdbS", "ction () {\n        console.info(TAG + 'beforeAll')\n        rdb", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "      console.info('onShow finish')\n        const core = Core.", "aType1() {\n        console.log(TAG + \"buildAllDataType1 start\"", " }\n\n    async function buildAllDataType3() {\n        console.l", "xport default {\n    onCreate() {\n        console.info('TestApp", ";\n    })\n\n    function resultSize(resultSet) {\n        if (!re", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "RDB_JSKITS _TEST]'\nconst CREATE_TABLE_ALL_DATA_TYPE_SQL = \"CRE", "fterAll(async function () {\n        console.info(TAG + 'afterA", "2, 3])\n            const valueBucket = {\n                \"inte", "w finish')\n        const core = Core.getInstance()\n        con", " }\n\n    async function buildAllDataType1() {\n        console.l", "    afterEach(function () {\n        console.info(TAG + 'afterE", "alue INTEGER , primLongValue INTEGER , \"\n+ \"primShortValue INT", "Create() {\n        console.info('TestApplication onCreate');\n ", "ata.dataAbility';\n\nconst TAG = '[RDB_JSKITS _TEST]'\nconst CREA", "getDefaultService('config')\n        configService.setConfig(th", "      }\n    }\n\n    console.log(TAG + \"*************Unit Test B", "rder` INTEGER);\";\n\nconst STORE_CONFIG = {\n    name: \"Predicate", "onShow() {\n        console.info('onShow finish')\n        const", "aType3() {\n        console.log(TAG + \"buildAllDataType3 start\"", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "   beforeEach(function () {\n        console.info(TAG + 'before", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "dicatesTest', function () {\n    beforeAll(async function () {\n", "ction () {\n        console.info(TAG + 'afterEach')\n    })\n\n   ", "fo('TestApplication onDestroy');\n    }\n};\n", ",\n                \"longValue\": 1,\n                \"shortValue\"", "itle: ''\n    },\n    onInit() {\n        this.title = this.$t('s", "01', 0, async function (done) {\n        console.log(TAG + \"***", "ore.init()\n        const configService = core.getDefaultServic", "gerValue INTEGER , longValue INTEGER , shortValue INTEGER , bo", "aType2() {\n        console.log(TAG + \"buildAllDataType2 start\"", " }\n\n    async function buildAllDataType2() {\n        console.l", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DistributedObject", "api_method_name": "off", "api_method_all": "off(type: 'change', callback?: Callback<{ sessionId: string, fields: Array<string> }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 78, "since": 8, "api_used": "\u662f", "lines": ["IJKLMN\").limitAs(3).offsetAs(1);\n        let result = await rdb", "            kvStore.off('syncComplete');\n        }catch(e) {\n  ", "            kvStore.off('dataChange', func);\n        }catch(e) ", "            kvStore.off('dataChange', func1);\n        }catch(e)", "   })\n\n    \n    it('off_0030', 0, async function (done) {\n     ", "            kvStore.off('syncComplete', func);\n            kvSt", "IJKLMN\").limitAs(3).offsetAs(0);\n        let result = await rdb", "ver);\n        mPref.off('change', observer);\n        mPref.putS", "/**\n     * @tc.name off interface test\n     * @tc.number SUB_DD", "160\n     * @tc.desc off interface test\n     */\n    it('testUnRe", "            kvStore.off('syncComplete', func1);\n            exp", "IJKLMN\").limitAs(3).offsetAs(-1);\n        let result = await rd", "IJKLMN\").limitAs(3).offsetAs(1);\n        let predicates = dataA", "console.log(TAG + \":off_0031 start\");\n        try {\n           ", "            kvStore.off('syncComplete', func);\n            expe", ";\n        kvManager.off('distributedDataServiceDie', deathCallb", "console.log(TAG + \":off_0031 end\");\n    })\n\n    \n    it('getTyp", "\n            helper.off(\n                \"dataChange\",\n        ", "@tc.name predicates offset normal test\n     * @tc.number SUB_DD", "IJKLMN\").limitAs(3).offsetAs(0);\n        let predicates = dataA", "console.log(TAG + \":off_0030 start\");\n        try {\n           ", "console.log(TAG + \":off_0030 end\");\n    })\n\n    \n    it('off_00", ");\n        rdbStore.off(\"dataChange\", (device) => {\n           ", "            kvStore.off('dataChange', func);\n            kvStor", "            kvStore.off('dataChange');\n        }catch(e) {\n    ", "            kvStore.off('syncComplete', func);\n        }catch(e", "IJKLMN\").limitAs(3).offsetAs(5);\n        let predicates = dataA", "@tc.desc predicates offset normal test\n     */\n    it('testOffs", "IJKLMN\").limitAs(3).offsetAs(5);\n        let result = await rdb", "IJKLMN\").limitAs(3).offsetAs(-1);\n        let predicates = data", "   })\n\n    \n    it('off_0031', 0, async function (done) {\n     ", " console.log(TAG + \"off dataChange success\");\n        expect(rd"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "StorageSyncJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "ObjectStoreJsunit.test.js", "KvManagerPromiseJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DistributedObject", "api_method_name": "on", "api_method_all": "on(type: 'status', callback: Callback<{ sessionId: string, networkId: string, status: 'online' | 'offline' }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 9120, "since": 8, "api_used": "\u662f", "lines": ["ction () {\n        console.info(TAG + 'beforeEach')\n    })\n\n  ", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ",\n                \"longValue\": -9223372036854775808,\n         ", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "('config')\n        configService.setConfig(this)\n\n        requ", "foreAll(async function () {\n        console.info(TAG + 'before", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", ",\n                \"longValue\": 9223372036854775807,\n          ", "ction () {\n        console.info(TAG + 'afterAll')\n        rdbS", "ction () {\n        console.info(TAG + 'beforeAll')\n        rdb", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "      console.info('onShow finish')\n        const core = Core.", "aType1() {\n        console.log(TAG + \"buildAllDataType1 start\"", " }\n\n    async function buildAllDataType3() {\n        console.l", "xport default {\n    onCreate() {\n        console.info('TestApp", ";\n    })\n\n    function resultSize(resultSet) {\n        if (!re", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "RDB_JSKITS _TEST]'\nconst CREATE_TABLE_ALL_DATA_TYPE_SQL = \"CRE", "fterAll(async function () {\n        console.info(TAG + 'afterA", "2, 3])\n            const valueBucket = {\n                \"inte", "w finish')\n        const core = Core.getInstance()\n        con", " }\n\n    async function buildAllDataType1() {\n        console.l", "    afterEach(function () {\n        console.info(TAG + 'afterE", "alue INTEGER , primLongValue INTEGER , \"\n+ \"primShortValue INT", "Create() {\n        console.info('TestApplication onCreate');\n ", "ata.dataAbility';\n\nconst TAG = '[RDB_JSKITS _TEST]'\nconst CREA", "getDefaultService('config')\n        configService.setConfig(th", "      }\n    }\n\n    console.log(TAG + \"*************Unit Test B", "rder` INTEGER);\";\n\nconst STORE_CONFIG = {\n    name: \"Predicate", "onShow() {\n        console.info('onShow finish')\n        const", "aType3() {\n        console.log(TAG + \"buildAllDataType3 start\"", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "   beforeEach(function () {\n        console.info(TAG + 'before", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "dicatesTest', function () {\n    beforeAll(async function () {\n", "ction () {\n        console.info(TAG + 'afterEach')\n    })\n\n   ", "fo('TestApplication onDestroy');\n    }\n};\n", ",\n                \"longValue\": 1,\n                \"shortValue\"", "itle: ''\n    },\n    onInit() {\n        this.title = this.$t('s", "01', 0, async function (done) {\n        console.log(TAG + \"***", "ore.init()\n        const configService = core.getDefaultServic", "gerValue INTEGER , longValue INTEGER , shortValue INTEGER , bo", "aType2() {\n        console.log(TAG + \"buildAllDataType2 start\"", " }\n\n    async function buildAllDataType2() {\n        console.l", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DistributedObject", "api_method_name": "off", "api_method_all": "off(type: 'status', callback?: Callback<{ sessionId: string, deviceId: string, status: 'online' | 'offline' }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 78, "since": 8, "api_used": "\u662f", "lines": ["IJKLMN\").limitAs(3).offsetAs(1);\n        let result = await rdb", "            kvStore.off('syncComplete');\n        }catch(e) {\n  ", "            kvStore.off('dataChange', func);\n        }catch(e) ", "            kvStore.off('dataChange', func1);\n        }catch(e)", "   })\n\n    \n    it('off_0030', 0, async function (done) {\n     ", "            kvStore.off('syncComplete', func);\n            kvSt", "IJKLMN\").limitAs(3).offsetAs(0);\n        let result = await rdb", "ver);\n        mPref.off('change', observer);\n        mPref.putS", "/**\n     * @tc.name off interface test\n     * @tc.number SUB_DD", "160\n     * @tc.desc off interface test\n     */\n    it('testUnRe", "            kvStore.off('syncComplete', func1);\n            exp", "IJKLMN\").limitAs(3).offsetAs(-1);\n        let result = await rd", "IJKLMN\").limitAs(3).offsetAs(1);\n        let predicates = dataA", "console.log(TAG + \":off_0031 start\");\n        try {\n           ", "            kvStore.off('syncComplete', func);\n            expe", ";\n        kvManager.off('distributedDataServiceDie', deathCallb", "console.log(TAG + \":off_0031 end\");\n    })\n\n    \n    it('getTyp", "\n            helper.off(\n                \"dataChange\",\n        ", "@tc.name predicates offset normal test\n     * @tc.number SUB_DD", "IJKLMN\").limitAs(3).offsetAs(0);\n        let predicates = dataA", "console.log(TAG + \":off_0030 start\");\n        try {\n           ", "console.log(TAG + \":off_0030 end\");\n    })\n\n    \n    it('off_00", ");\n        rdbStore.off(\"dataChange\", (device) => {\n           ", "            kvStore.off('dataChange', func);\n            kvStor", "            kvStore.off('dataChange');\n        }catch(e) {\n    ", "            kvStore.off('syncComplete', func);\n        }catch(e", "IJKLMN\").limitAs(3).offsetAs(5);\n        let predicates = dataA", "@tc.desc predicates offset normal test\n     */\n    it('testOffs", "IJKLMN\").limitAs(3).offsetAs(5);\n        let result = await rdb", "IJKLMN\").limitAs(3).offsetAs(-1);\n        let predicates = data", "   })\n\n    \n    it('off_0031', 0, async function (done) {\n     ", " console.log(TAG + \"off dataChange success\");\n        expect(rd"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "StorageSyncJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "ObjectStoreJsunit.test.js", "KvManagerPromiseJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}]}