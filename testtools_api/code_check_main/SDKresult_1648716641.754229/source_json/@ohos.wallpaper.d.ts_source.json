{"subsystem_ch": "Misc\u8f6f\u4ef6\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "miscservices", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.wallpaper", "api": [{"api_class_name": "wallpaper", "api_method_all": "declare namespace wallpaper {\r\n    enum WallpaperType {\r\n        \r\n        WALLPAPER_SYSTEM,\r\n        \r\n        WALLPAPER_LOCKSCREEN\r\n    }\r\n\r\n    \r\n    function getColors(wallpaperType: WallpaperType, callback: AsyncCallback<Array<RgbaColor>>): void;\r\n    function getColors(wallpaperType: WallpaperType): Promise<Array<RgbaColor>>;\r\n\r\n    \r\n    function getId(wallpaperType: WallpaperType, callback: AsyncCallback<number>): void;\r\n    function getId(wallpaperType: WallpaperType): Promise<number>;\r\n\r\n    \r\n     function getFile(wallpaperType: WallpaperType, callback: AsyncCallback<number>): void;\r\n     function getFile(wallpaperType: WallpaperType): Promise<number>;\r\n\r\n    \r\n    function getMinHeight(callback: AsyncCallback<number>): void;\r\n    function getMinHeight(): Promise<number>;\r\n\r\n    \r\n    function getMinWidth(callback: AsyncCallback<number>): void;\r\n    function getMinWidth(): Promise<number>;\r\n\r\n    \r\n    function isChangePermitted(callback: AsyncCallback<boolean>): void;\r\n    function isChangePermitted(): Promise<boolean>;\r\n\r\n    \r\n    function isOperationAllowed(callback: AsyncCallback<boolean>): void;\r\n    function isOperationAllowed(): Promise<boolean>;\r\n\r\n    \r\n    function reset(wallpaperType: WallpaperType, callback: AsyncCallback<void>): void;\r\n    function reset(wallpaperType: WallpaperType): Promise<void>;\r\n\r\n    \r\n    function setWallpaper(source: string | image.PixelMap, wallpaperType: WallpaperType, callback: AsyncCallback<void>): void;\r\n    function setWallpaper(source: string | image.PixelMap, wallpaperType: WallpaperType): Promise<void>;\r\n\r\n    \r\n    function getPixelMap(wallpaperType: WallpaperType, callback: AsyncCallback<image.PixelMap>): void;\r\n    function getPixelMap(wallpaperType: WallpaperType): Promise<image.PixelMap>;\r\n\r\n    \r\n    function screenshotLiveWallpaper(scale: number, pixelFormat: image.PixelMapFormat, callback: AsyncCallback<image.PixelMap>): void;\r\n    function screenshotLiveWallpaper(scale: number, pixelFormat: image.PixelMapFormat): Promise<image.PixelMap>;\r\n\r\n    \r\n    function on(type: 'colorChange', callback: (colors: Array<RgbaColor>, wallpaperType: WallpaperType) => void): void;\r\n\r\n    \r\n    function off(type: 'colorChange', callback?: (colors: Array<RgbaColor>, wallpaperType: WallpaperType) => void): void;\r\n\r\n    interface RgbaColor {\r\n        \r\n        red: number;\r\n        \r\n        green: number;\r\n        \r\n        blue: number;\r\n        \r\n        alpha: number;\r\n    }\r\n}", "api_method_name": "wallpaper", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getColors", "api_method_all": "function getColors(wallpaperType: WallpaperType, callback: AsyncCallback<Array<RgbaColor>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getColors", "api_method_all": "function getColors(wallpaperType: WallpaperType): Promise<Array<RgbaColor>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getId", "api_method_all": "function getId(wallpaperType: WallpaperType, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getId", "api_method_all": "function getId(wallpaperType: WallpaperType): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getFile", "api_method_all": "function getFile(wallpaperType: WallpaperType, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getFile", "api_method_all": "function getFile(wallpaperType: WallpaperType): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getMinHeight", "api_method_all": "function getMinHeight(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getMinHeight", "api_method_all": "function getMinHeight(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getMinWidth", "api_method_all": "function getMinWidth(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getMinWidth", "api_method_all": "function getMinWidth(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "isChangePermitted", "api_method_all": "function isChangePermitted(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "isChangePermitted", "api_method_all": "function isChangePermitted(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "isOperationAllowed", "api_method_all": "function isOperationAllowed(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "isOperationAllowed", "api_method_all": "function isOperationAllowed(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "reset", "api_method_all": "function reset(wallpaperType: WallpaperType, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "reset", "api_method_all": "function reset(wallpaperType: WallpaperType): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "setWallpaper", "api_method_all": "function setWallpaper(source: string | image.PixelMap, wallpaperType: WallpaperType, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "setWallpaper", "api_method_all": "function setWallpaper(source: string | image.PixelMap, wallpaperType: WallpaperType): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getPixelMap", "api_method_all": "function getPixelMap(wallpaperType: WallpaperType, callback: AsyncCallback<image.PixelMap>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "getPixelMap", "api_method_all": "function getPixelMap(wallpaperType: WallpaperType): Promise<image.PixelMap>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "screenshotLiveWallpaper", "api_method_all": "function screenshotLiveWallpaper(scale: number, pixelFormat: image.PixelMapFormat, callback: AsyncCallback<image.PixelMap>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "screenshotLiveWallpaper", "api_method_all": "function screenshotLiveWallpaper(scale: number, pixelFormat: image.PixelMapFormat): Promise<image.PixelMap>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "on", "api_method_all": "function on(type: 'colorChange', callback: (colors: Array<RgbaColor>, wallpaperType: WallpaperType) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "on", "api_method_all": "function on(type: 'colorChange', callback: (colors: Array<RgbaColor>, wallpaperType: WallpaperType) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "off", "api_method_all": "function off(type: 'colorChange', callback?: (colors: Array<RgbaColor>, wallpaperType: WallpaperType) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "wallpaper", "api_method_name": "off", "api_method_all": "function off(type: 'colorChange', callback?: (colors: Array<RgbaColor>, wallpaperType: WallpaperType) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WallpaperType", "api_method_all": "enum WallpaperType {\r\n        \r\n        WALLPAPER_SYSTEM,\r\n        \r\n        WALLPAPER_LOCKSCREEN\r\n    }", "api_method_name": "WallpaperType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WallpaperType", "api_method_name": "WALLPAPER_SYSTEM", "api_method_all": "WALLPAPER_SYSTEM,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RgbaColor", "api_method_all": "interface RgbaColor {\r\n        \r\n        red: number;\r\n        \r\n        green: number;\r\n        \r\n        blue: number;\r\n        \r\n        alpha: number;\r\n    }", "api_method_name": "RgbaColor", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RgbaColor", "api_method_name": "red", "api_method_all": "red: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": [",\n        enableMetered: false,\n        ena"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RgbaColor", "api_method_name": "green", "api_method_all": "green: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RgbaColor", "api_method_name": "blue", "api_method_all": "blue: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RgbaColor", "api_method_name": "alpha", "api_method_all": "alpha: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}