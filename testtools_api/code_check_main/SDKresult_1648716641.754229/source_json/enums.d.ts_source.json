{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\enums", "api": [{"api_class_name": "Color", "api_method_all": "declare enum Color {\n  \n  White,\n\n  \n  Black,\n\n  \n  Blue,\n\n  \n  Brown,\n\n  \n  Gray,\n\n  \n  Green,\n\n  \n  Grey,\n\n  \n  Orange,\n\n  \n  Pink,\n\n  \n  Red,\n\n  \n  Yellow,\n}", "api_method_name": "Color", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1601, "since": 7, "api_used": "\u662f", "lines": ["   .backgroundColor(Color.Green)\n        .mar", "eight(30).backgroundColor(0x00FFFF)\n      }\n ", "         .backgroundColor(0xF5DEB3)\n         ", "').fontSize(15).fontColor(0xCCCCCC).width('90", "\n        .backgroundColor(0x66b6c5d1)\n       ", "\n        .backgroundColor(0xF9CF93)\n        .", "\n        .backgroundColor(Color.Green)\n      ", "tSize(20).fontColor(Color.Black).width('100%'", "         .backgroundColor(0x4682B4)\n         ", "dding(10).backgroundColor(0xAFEEEE)\n\n      Te", "   }\n    .backgroundColor(0xf1f3f5)\n    .marg", "\n        .backgroundColor(0x317aff)\n        .", " radius: 10, color: Color.Gray, offsetX: 5, o", "k').fontSize(9).fontColor(0xCCCCCC).width('90", "0)\n      .backgroundColor(0xAFEEEE)\n    }.wid", "         .backgroundColor(0xbbb2cb)\n         ", "eight(30).backgroundColor(0xAFEEEE)\n        C", "         .backgroundColor(0xD2B48C)\n         ", "         .backgroundColor(0x4582B4)\n         ", "f\").fontSize(9).fontColor(0xCCCCCC).width('90", "margin(3).backgroundColor(0x2788D9)\n      if ", "s').fontSize(9).fontColor(0xCCCCCC).width('90", "w\").fontSize(9).fontColor(0xCCCCCC).width('90", "         .backgroundColor(0x00BFFF)\n         ", "\n        .backgroundColor(0x66bbb2cb)\n       ", "         .backgroundColor(0xF5DEB3).textAlign", "ht('40%').backgroundColor('#00ffff')\n        ", "').fontSize(20).fontColor(Color.Black).width("], "files": ["ohosPrompt.ets", "ImageJsunit.test.ets", "systemRouterA.ets", "configuration.ets", "ImageEffectsJsunit.test.ets", "Navigator.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "enumsLineCapStyle.ets", "Swiper.ets", "ScrollCodeJsunit.test.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "focus.ets", "touch.ets", "SelectJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "SpanJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "Stack.ets", "TextJsunit.test.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "BlankJsunit.test.ets", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "flexDirection.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "Select.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "ColumnSplit.ets", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "ScrollJsunit.test.ets", "imageAnimator.ets", "bindPopup.ets", "search.ets", "span.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "global.ets", "Flex.ets", "BorderJsunit.test.ets", "direction2.ets", "mouseEvent.ets", "BadgeJsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "TextInput.ets", "appear.ets", "Constants.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "curves.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "TextTimerJsunit.test.ets", "LoadingProgressJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "BindPopupJsunit.test.ets", "Link.ets", "GridItem.ets", "select.ets", "timeStamp.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "Calendar.ets", "motionPath.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "panel.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "White", "api_method_all": "White,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["ckgroundColor(Color.White).key('image1')\n  }\n", "   .fontColor(Color.White)\n        .key('Text", "ckgroundColor(Color.White)\n  }\n\n  build() {\n ", "ckgroundColor(Color.White).key('image')\n  }\n ", "ckgroundColor(Color.White).key('image2')\n  }\n", "ckgroundColor(Color.White).key('image3')\n  }\n", "  popupColor: Color.White,\n          enableAr", "   .fontColor(Color.White)\n        .fontSize("], "files": ["bindPopup.ets", "Marquee.ets", "placement.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "Black", "api_method_all": "Black,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 40, "since": 7, "api_used": "\u662f", "lines": ["       .color(Color.Black)\n    }.width('100%'", "   .fontColor(Color.Black)\n        .fontSize(", "   .fontColor(Color.Black)\n            .lette", "    dayColor: Color.Black,\n          lunarCol", "17Af7).stroke(Color.Black).strokeWidth(4)\n   ", "Color: Color= Color.Black\n  @State active: bo", "   .fontColor(Color.Black)\n        .width('90", "   .fontColor(Color.Black)\n        .key('Text", "  .trackColor(Color.Black)\n          .selecte", "ute.fontColor(Color.Black);\n      textTimerAt", "alue: Color = Color.Black;\n  @State text: str", "17Af7).stroke(Color.Black).strokeWidth(2)\n\n  ", "ckgroundColor(Color.Black)\n        .margin({b", "dsOne).stroke(Color.Black).key('path1').strok", "20).fontColor(Color.Black).width('90%').opaci", "olor: Color = Color.Black;\n  @State textAlign", "20).fontColor(Color.Black).width('100%')\n    ", "rkLunarColor: Color.Black,\n          dayFontS", "70).fontColor(Color.Black)\n        .focusable", "  .trackColor(Color.Black)\n            .selec", "   weekColor: Color.Black,\n          weekendD", "ckgroundColor(Color.Black)\n        .margin({ ", "00 0').stroke(Color.Black).strokeWidth(3).key", " showInColor: Color.Black })\n      }\n      Bu", "20).fontColor(Color.Black).width('90%')\n     ", "rder({ color: Color.Black, width: 2 })\n      ", "ff).fontColor(Color.Black)\n        Button('co", "onthDayColor: Color.Black,\n          nonCurre", "26).fontColor(Color.Black).width('90%')\n     ", "olor: Color = Color.Black\n  private timerId: "], "files": ["Shape.ets", "focus.ets", "Text.ets", "Span.ets", "Path.ets", "customDialogController.ets", "overlay.ets", "CustomDialog.ets", "layoutConstraints.ets", "TextTimerJsunit.test.ets", "marquee.ets", "textTimer.ets", "positionSetting.ets", "enumsLineCapStyle.ets", "backgroundAndSizeSetting.ets", "Marquee.ets", "slider.ets", "textInput.ets", "aboutToDisappear.ets", "Calendar.ets", "path.ets", "button.ets", "loadingProgress.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "Blue", "api_method_all": "Blue,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 56, "since": 7, "api_used": "\u662f", "lines": ["   .fontColor(Color.Blue)\n            .fontS", "w() {\n        Text('Bluetooth').fontSize(18)", "ckgroundColor(Color.Blue)\n        .onClick((", "alue: Color = Color.Blue;\n  private stateCha", "ze: 2, color: Color.Blue })\n      .key('swip", "alue: Color = Color.Blue;\n  @State calendarD", "ckgroundColor(Color.Blue)\n        }.tabBar('", "   .fontColor(Color.Blue)\n          .width(2", "selectedColor(Color.Blue)\n          .showSte", "\"colorValue\": Color.Blue,\n          }\n      ", "Color: Color= Color.Blue\n  @State background", ").assertEqual(Color.Blue);\n      }\n      var", "olor: Color = Color.Blue\n  @State eventButto", "ndLunarColor: Color.Blue,\n          weekFont", "opBlur(this.backdropBlueValue)\n        .back", "kgroundColor: Color.Blue,\n          focusedA", "olor: color = Color.Blue\n\n  private stateCha", "ckgroundColor(Color.Blue)\n            .margi", "   .fontColor(Color.Blue)\n        .fontSize(", " this.color = Color.Blue\n          }\n       ", "  .blockColor(Color.Blue)\n          .trackCo", "0;\n  @State backdropBlueValue: string= 30;\n ", "selectedColor(Color.Blue)\n          .trackCo", "selectedColor(Color.Blue)\n            .showS", "       .color(Color.Blue)\n          .width(5", "  .blockColor(Color.Blue)\n            .track", "   .fontColor(Color.Blue)\n        .key('Text", " \"fontColor\": Color.Blue\n          }\n       ", "  .caretColor(Color.Blue)\n        .height(50", "olor: Color = Color.Blue;\n  @State fontSize:"], "files": ["Tab.ets", "Stepper.ets", "mouseEvent.ets", "BadgeJsunit.test.ets", "Slider.ets", "Text.ets", "imageEffects.ets", "swiper.ets", "Span.ets", "Progress.ets", "Scroll.ets", "navigation.ets", "TextStyleJsunit.test.ets", "tabs.ets", "AlertDialog.ets", "marquee.ets", "MarqueeJsunit.test.ets", "calendar.ets", "stepper.ets", "Toggle.ets", "textArea.ets", "slider.ets", "textInput.ets", "Calendar.ets", "loadingProgress.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "Brown", "api_method_all": "Brown,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["   .fontColor(Color.Brown)\n        .key('Text", "DayMarkColor: Color.Brown,\n        })\n       "], "files": ["Calendar.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "Gray", "api_method_all": "Gray,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["s: 20, color: Color.Gray, offsetX: 10, offse", "  .trackColor(Color.Gray)\n            .selec", "thLunarColor: Color.Gray,\n          nonCurre", "ckgroundColor(Color.Gray)\n            .state", "        .fill(Color.Gray)\n        .width(150", "  .trackColor(Color.Gray)\n          .showTip", "   .fontColor(Color.Gray)\n        .key('Text", "s: 10, color: Color.Gray, offsetX: 5, offset", "crollBarColor(Color.Gray).scrollBarWidth(10)", "  lunarColor: Color.Gray,\n          markLuna", "  .trackColor(Color.Gray)\n          .selecte"], "files": ["touchAble.ets", "imageEffects.ets", "ImageEffectsJsunit.test.ets", "slider.ets", "canvas2.ets", "Calendar.ets", "Slider.ets", "canvas.ets", "Text.ets", "Link.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "Green", "api_method_all": "Green,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["  .colorBlend(Color.Green)\n        .fontSize(", "ckgroundColor(Color.Green)\n            .margi", "ckgroundColor(Color.Green)\n        .margin(30", "       .color(Color.Green)\n        .vertical(", "       .color(Color.Green)\n        .strokeWid", "ckgroundColor(Color.Green)\n        }.tabBar('", "DayMarkColor: Color.Green,\n          nonCurre"], "files": ["tabs.ets", "Tab.ets", "marquee.ets", "Calendar.ets", "Scroll.ets", "areaChange.ets", "Divider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "Grey", "api_method_all": "Grey,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["   .fontColor(Color.Grey)\n        .key('Text", "sule }).color(Color.Grey).value(50).width(12", "ipse }).color(Color.Grey).width(110)\n      }"], "files": ["Text.ets", "progress.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "Orange", "api_method_all": "Orange,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["edLunarColor: Color.Orange,\n          focusedA", "'90%')\n\n      Text('Orange 18 Normal source-sa", "kendDayColor: Color.Orange,\n          weekendL", "   .fontColor(Color.Orange)\n        .fontSize(", "   .fontColor(Color.Orange)\n        .key('Text", "DayMarkColor: Color.Orange,\n          workDayM"], "files": ["textStyle.ets", "Calendar.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "Pink", "api_method_all": "Pink,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["tColorValue\": Color.Pink\n          }\n       ", "olor: Color = Color.Pink\n\n  onPageShow() {\n ", "ckgroundColor(Color.Pink)\n        .stateEffe", " this.color = Color.Pink\n          } else {\n", "ckgroundColor(Color.Pink)\n        }.tabBar('", " .borderColor(Color.Pink)\n      .borderWidth", "        .fill(Color.Pink)\n        .width(150", "olor: Color = Color.Pink\n  @State background", "olor: Color = Color.Pink\n  @State active: bo", "olor: Color = Color.Pink\n  @State scrollBar:", " .borderColor(Color.Pink)\n    .borderWidth(2", "yle: { color: Color.Pink, fontSize: 16, badg", ").assertEqual(Color.Pink)\n      }\n      try "], "files": ["Tab.ets", "Navigator.ets", "ListItem.ets", "mouseEvent.ets", "Slider.ets", "Text.ets", "Qrcode.ets", "Row.ets", "ButtonJsunit.test.ets", "Span.ets", "Progress.ets", "Blank.ets", "Scroll.ets", "Grid.ets", "touchAble.ets", "tabs.ets", "Rating.ets", "Link.ets", "GridItem.ets", "Image.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "Red", "api_method_all": "Red,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 36, "since": 7, "api_used": "\u662f", "lines": ["one, \"color\": Color.Red })\n        .fontCol", " showInColor: Color.Red })\n      } else {\n ", "or: string = \"Color.Red\";\n  @State fontSize", "rline, color: Color.Red })\n        .fontCol", ".None, color: Color.Red }\n  @State textCase", "olor: Color = Color.Red;\n  @State fontSize:", "crollBarColor(Color.Red)\n      .scrollBarWi", "usedDayColor: Color.Red,\n          focusedL", "DayMarkColor: Color.Red,\n          offDayMa", ", badgeColor: Color.Red }\n          }) {\n  ", "Color: Color= Color.Red;\n  @State format: s", "   .fontColor(Color.Red)\n        .fontSize(", "ation, color: Color.Red })\n        .key('te", "ff).fontColor(Color.Red)\n      }.margin({ b", "olor: Color = Color.Red\n  @State strokeWidt", "ceholderColor(Color.Red)\n        .placehold", "olor: Color = Color.Red\n  @State width: str", "ckgroundColor(Color.Red)\n        .onClick((", "near }).color(Color.Red).width(200)\n\n      ", ", badgeColor: Color.Red }\n      }) {\n      ", "  .blockColor(Color.Red)\n          .selecte", "ugh, \"color\": Color.Red })\n        .fontCol", "rline, color: Color.Red }\n  @State color: C", "t : \" + e.request.isRedirect());\n\n         ", "alue: Color = Color.Red;\n  private stateCha", "ugh, \"color\": Color.Red })\n            .tex", "\"colorValue\": Color.Red,\n          }\n      ", " \"fontColor\": Color.Red\n          }\n       "], "files": ["Slider.ets", "badge.ets", "Text.ets", "textStyle.ets", "Span.ets", "Badge.ets", "curves.ets", "Scroll.ets", "customDialogController.ets", "CustomDialog.ets", "text.ets", "textClock.ets", "progress.ets", "WebPage.ets", "BlankJsunit.test.ets", "Divider.ets", "TextInputJsunit.test.ets", "textArea.ets", "image.ets", "aboutToDisappear.ets", "Calendar.ets", "search.ets", "span.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Color", "api_method_name": "Yellow", "api_method_all": "Yellow,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["ckgroundColor(Color.Yellow)\n            .margi", "ckgroundColor(Color.Yellow)\n    }\n  }\n\n  build", "   .fontColor(Color.Yellow)\n            .fontS", "   .fontColor(Color.Yellow)\n        .key('Text", "ckgroundColor(Color.Yellow)\n    }\n  }\n\n\n  buil", "ckgroundColor(Color.Yellow)\n        }.tabBar('"], "files": ["dragEvent.ets", "tabs.ets", "Span.ets", "Tab.ets", "dragEvent2.ets", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageFit", "api_method_all": "declare enum ImageFit {\n  \n  Contain,\n\n  \n  Cover,\n\n  \n  Auto,\n\n  \n  Fill,\n\n  \n  ScaleDown,\n\n  \n  None,\n}", "api_method_name": "ImageFit", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["         .objectFit(ImageFit.Contain)\n          ", "         .objectFit(ImageFit.Contain).width(110)", "         .objectFit(ImageFit.ScaleDown)\n        ", "ctFit).assertEqual('ImageFit.Contain')\n      exp", "         .objectFit(ImageFit.Auto).width(110).he", "\n        .objectFit(ImageFit.Cover)\n        .key", "         .objectFit(ImageFit.None)\n          .ob", "ctFit).assertEqual('ImageFit.None')\n      expect", "         .objectFit(ImageFit.Fill)\n          .ob", "  @State objectFit: ImageFit = Cover\n\n  build() ", "         .objectFit(ImageFit.None).width(110).he", "ctFit).assertEqual('ImageFit.Cover')\n      expec", "         .objectFit(ImageFit.Cover)\n          .o", "ctFit).assertEqual('ImageFit.ScaleDown')\n      c"], "files": ["ImageJsunit.test.ets", "imageFit.ets", "Video.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageFit", "api_method_name": "Contain", "api_method_all": "Contain,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 380, "since": 7, "api_used": "\u662f", "lines": ["dth('90%').key('gridContainer').margin({ top: 3", "lityJsunit();\n  girdContainerJsunit();\n  areaCh", "os.emitter';\n\nclass ContainerInfo {\n  label: st", "omponent\nstruct gridContainer {\n  @State sizeTy", "    uri: 'pages/gridContainer',\n      }\n      t", " }) {\n          GridContainer({ columns: 12, si", "  build() {\n    GridContainer({ sizeType: SizeT", "   }\n\n          GridContainer({ columns: \"auto\"", "nsole.info('testGirdContainer01 END');\n      do", "sole.info(\"[testGirdContainer01] obj is: \" + JS", "ground fill the box(Contain)').fontSize(9).widt", " private container: ContainerInfo[] = [\n    { l", "nsole.log(\"[testGirdContainer02] change compone", "e).assertEqual('GridContainer');\n      expect(o", "sole.info('[testGirdContainer01] START');\n     ", "  console.info(\"girdContainer after each called", "sole.info(\"push girdContainer page result:\" + J", "InspectorByKey('gridContainer');\n      let obj ", "nsole.info('testGirdContainer02 END');\n      do", "  console.info('GridContainer page build done c", "rJsunit from './GridContainerJsunit.test.ets';\n", "  console.info(\"girdContainer beforeEach start\"", "ole.error(\"push girdContainer page error:\" + er", ") {\n  describe('girdContainerTest', function ()", "sole.info(\"[testGirdContainer02] obj is: \" + JS", "e: 5 }) {\n      GridContainer({ columns: 12, si", "nsole.info(\"get girdContainer state pages:\" + J", "BarContainer(SideBarContainerType.Embed)\n    {\n", "  console.info('gridContainer page show called'", "  console.info(\"gridContainer page state change", "sole.info(\"[testGirdContainer02] start to publi", "\n        if (!(\"gridContainer\" == pages.name)) ", ";\n\n\n    it('testGirdContainer02', 0, async func", "          .overlay('Contain', { align: Alignmen", ");\n\n    it('testGirdContainer01', 0, async func", "omponent\nstruct GridContainerExample {\n  @State", "ImageSize(ImageSize.Contain)\n        .border({ ", "  console.info('GridContainer page show called'", "         }.key('gridContainer')\n          .widt", "st.ets';\nimport girdContainerJsunit from './Gri", "uild() {\n    SideBarContainer(SideBarContainerT", "nsole.info(\"get girdContainer state pages.name:", ".objectFit(ImageFit.Contain).width(110).height(", "InspectorByKey('gridContainer');\n      console.", "10 })\n    .key('gridContainer')\n  }\n\n  onPageSh", "efault function girdContainerJsunit() {\n  descr", "tent: string = \"GridContainer Page\"\n\n  onPageSh"], "files": ["backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "imageFit.ets", "GridContainerJsunit.test.ets", "ImageJsunit.test.ets", "List.test.js", "layoutConstraints.ets", "gridContainer.ets", "gridSettings.ets", "Image.ets", "sideBar.ets", "background.ets", "GridContainer.ets", "commonComponentJsApi.test.js", "GridSettingsJsunit.test.ets", "List.test.ets", "Sidebar.ets", "gridContainerProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageFit", "api_method_name": "Cover", "api_method_all": "Cover,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["ground fill the box(Cover)').fontSize(9).widt", "jectFit: ImageFit = Cover\n\n  build() {\n    Co", ".objectFit(ImageFit.Cover)\n          .objectR", ".objectFit(ImageFit.Cover)\n        .key('vide", "sertEqual('ImageFit.Cover')\n      expect(obj.", "ImageSize(ImageSize.Cover)\n        .border({ ", "ageSize = ImageSize.Cover\n  @State background"], "files": ["backgroundAndSizeSetting.ets", "imageFit.ets", "ImageJsunit.test.ets", "Video.ets", "Image.ets", "background.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageFit", "api_method_name": "Auto", "api_method_all": "Auto,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 581, "since": 7, "api_used": "\u662f", "lines": ["pAuto : this.dirPropAuto,\n             dirPr", "     this.rotatePropAutoReverse = this.$elem", "\n            dirPropAuto : this.dirPropAuto,", ".objectFit(ImageFit.Auto).width(110).height(", "se : this.rotatePropAutoReverse,\n           ", "= SwiperDisplayMode.AutoLinear\n  @State edge", "is.$element(\"dirPropAuto\").getInspector()\n  ", "        this.dirPropAuto = this.$element(\"di", "ertEqual('Direction.Auto');\n      console.in", "ertEqual(\"ItemAlign.Auto\");\n      console.in", "autoReset' + this.isAutoReset).onClick(() =>", "sertEqual('BarState.Auto')\n      console.inf", "          rotatePropAutoReverse : this.rotat", "          .overlay('Auto', { align: Alignmen", "ateValue\": BarState.Auto\n          }\n       ", "emAlign = ItemAlign.Auto\n\n  build() {\n    Fl", "Style = BorderStyle.Auto;\n  @State borderRad", "pe) {\n        case 'Auto':\n          this.si", "ll,\n         dirPropAuto : null,\n         di", "rection = Direction.Auto\n  @State position: ", "ber= 30;\n  @State isAutoReset: boolean= true", "ignSelf = ItemAlign.Auto;\n      }\n    }\n  }\n", "n\", LayoutDirection.Auto);\n      let enable2", "ImageSize(ImageSize.Auto)\n        .width('90", "ertEqual('ImageSize.Auto');\n      console.in", "AutoReset = !this.isAutoReset\n        }).mar", "pAuto : this.dirPropAuto,\n            dirPro", "ignSelf = ItemAlign.Auto;\n          break;\n ", "ertEqual(\"Direction.Auto\")\n      expect(obj.", "ection\":  Direction.Auto,\n          }\n      ", "lf) {\n        case 'Auto':\n          this.al", ",\n        rotatePropAutoReverse : null,\n    ", "sizeType = SizeType.Auto;\n          break;\n ", " {\n          this.isAutoReset = !this.isAuto", "sizeType = SizeType.Auto;\n      }\n    }\n  }\n", " sizeType: SizeType.Auto, gutter: 10, margin", "al, state: BarState.Auto }) {\n          Text", "$element(\"rotatePropAutoReverse\").getInspect", "  .autoReset(this.isAutoReset)\n        .onPa", "ull,\n        dirPropAuto : null,\n        dir", "             dirPropAuto : this.dirPropAuto,", " == LayoutDirection.Auto)\n      .assertTrue;", "ertEqual(\"ItemAlign.Auto\")\n      expect(obj.", "emAlign = ItemAlign.Auto\n  @State borderStyl"], "files": ["ratingProps.test.js", "flex.ets", "listItemGroupProps.test.js", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "tabContentProps.test.js", "textProps.test.js", "ScrollBarJsunit.test.ets", "enumsImage.ets", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "imageFit.ets", "TextJsunit.test.ets", "swiper.ets", "popupProps.test.js", "gridContainerProps.test.js", "CheckboxGroupJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "EnmusImageJsunit.test.ets", "spanProps.test.js", "stepperItemProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "enumsItemAlign.ets", "toolbarItemProps.test.js", "videoProps.test.js", "RowJsunit.test.ets", "GridContainer.ets", "inputProps.test.js", "index.js", "FlexJsunit.test.ets", "optionProps.test.js", "tabBarProps.test.js", "toggleProps.test.js", "AppStorageJsunit.test.ets", "badgeProps.test.js", "border.ets", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "Direction2Jsunit.test.ets", "gridColProps.test.js", "panelProps.test.js", "ScrollBar.ets", "menuProps.test.js", "buttonProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageFit", "api_method_name": "Fill", "api_method_all": "Fill,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 166, "since": 7, "api_used": "\u662f", "lines": ["llMode).assertEqual(FillMode.Backwards);\n   ", "ll,\n            typeFillmodeForwards :  this", "\n     it('testCircleFillOpacityPropOne', 0, ", "\n     it('testCircleFillOpacityPropThree', 0", "ole.info('testCircleFillRulePropOne START');", "ole.info('testCircleFillProp START');\n      ", "llMode).assertEqual(FillMode.Both);\n      }\n", "   it('test'+nameA+'FillPropRemove', 0, asyn", " this.$element(\"typeFillmodeForwards\").getIn", "ole.info('testCircleFillOpacityPropThree STA", ".info('test'+nameA+'FillPropFreeze START');\n", "odeNone :  this.typeFillmodeNone,\n        }\n", "\n  @State fillMode: FillMode = FillMode.None", ")\n        .fillMode(FillMode.None).iteration", "illMode: FillMode = FillMode.None\n  @State r", " this.$element(\"typeFillmodeNull\").getInspec", ": null,\n        typeFillmodeForwards : null,", ": null,\n        typeFillmodeNone : null,\n\n  ", "ole.info('testCircleFillOpacityPropOne START", "\n     it('testCircleFillProp', 0, async func", "    this.fillMode = FillMode.Backwards\n     ", "    this.fillMode = FillMode.Both\n          ", "    this.fillMode = FillMode.None\n          ", "lModeJsunit from './FillModeJsunit.test.ets'", "   it('test'+nameA+'FillPropFreeze', 0, asyn", "n6,\n            typeFillmodeNull :  this.typ", "()\n        this.typeFillmodeNull = this.$ele", "odeNull :  this.typeFillmodeNull,\n          ", ": null,\n        typeFillmodeNull : null,\n   ", "orwards :  this.typeFillmodeForwards, typeFi", ".info('test'+nameA+'FillPropRemove START');\n", "()\n        this.typeFillmodeNone = this.$ele", "ole.info('testCircleFillOpacityPropTwo START", "\n     it('testCircleFillRulePropOne', 0, asy", "llmodeForwards, typeFillmodeNone :  this.typ", ".objectFit(ImageFit.Fill)\n          .objectR", "\n     it('testCircleFillOpacityPropTwo', 0, ", "llMode).assertEqual(FillMode.None);\n      }\n", "()\n        this.typeFillmodeForwards = this.", " this.$element(\"typeFillmodeNone\").getInspec"], "files": ["pathProps.test.js", "circleProps.test.js", "imageAnimatorProps.test.js", "polylineProps.test.js", "animationStatus.ets", "fillMode.ets", "ellipseProps.test.js", "polygonProps.test.js", "index.js", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "FillModeJsunit.test.ets", "animateMotionProps.test.js", "Image.ets", "svgTextProps.test.js", "textPathProps.test.js", "imageAnimator.ets", "List.test.ets", "rectProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageFit", "api_method_name": "ScaleDown", "api_method_all": "ScaleDown,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["sertEqual('ImageFit.ScaleDown')\n      console.inf", ".objectFit(ImageFit.ScaleDown)\n          .key('im"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageFit", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BorderStyle", "api_method_all": "declare enum BorderStyle {\n  \n  Dotted,\n\n  \n  Dashed,\n\n  \n  Solid,\n}", "api_method_name": "BorderStyle", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["tyle: BorderStyle = BorderStyle.Dashed\n  @State bor", "({ width: 1, style: BorderStyle.Dashed })\n      }\n ", " this.borderStyle = BorderStyle.Solid;\n      }\n    ", " this.borderStyle = BorderStyle.Dotted;\n          b", "@State borderStyle: BorderStyle = BorderStyle.Solid", " this.borderStyle = BorderStyle.Dashed;\n          b", "Style).assertEqual(\"BorderStyle.Solid\")\n      expec", "({ width: 1, style: BorderStyle.Dashed })\n\n        ", "tyle: BorderStyle = BorderStyle.Solid\n  @State mode", " this.borderStyle = BorderStyle.Dashed\n        cons", "       .borderStyle(BorderStyle.Dashed).borderWidth", "Style).assertEqual(\"BorderStyle.Solid\");\n      cons", "Style).assertEqual(\"BorderStyle.Dotted\")\n      expe", "tyle: BorderStyle = BorderStyle.Auto;\n  @State bord", "       .borderStyle(BorderStyle.Solid)\n        .bor", "@State borderStyle: BorderStyle = BorderStyle.Dashe", "       .borderStyle(BorderStyle.Dotted)\n        .bo", "h: 1 }).borderStyle(BorderStyle.Dashed)\n           ", "       .borderStyle(BorderStyle.Solid).borderWidth(", "@State borderStyle: BorderStyle = BorderStyle.Auto;", " this.borderStyle = BorderStyle.Solid;\n          br", ", radius: 8, style: BorderStyle.Dotted })\n        .", "Style).assertEqual(\"BorderStyle.Dashed\")\n      expe"], "files": ["border.ets", "imageFit.ets", "TextJsunit.test.ets", "positionSetting.ets", "CheckboxGroupJsunit.test.ets", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "gestureMode.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BorderStyle", "api_method_name": "Dotted", "api_method_all": "Dotted,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": [" style: BorderStyle.Dotted })\n        .key(\"bo", "tEqual(\"BorderStyle.Dotted\")\n      expect(obj.", "le) {\n        case 'Dotted':\n          this.bo", "Style = BorderStyle.Dotted;\n          break;\n ", "erStyle(BorderStyle.Dotted)\n        .borderWid"], "files": ["border.ets", "TextJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BorderStyle", "api_method_name": "Dashed", "api_method_all": "Dashed,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["Style = BorderStyle.Dashed\n  @State borderRadi", "erStyle(BorderStyle.Dashed)\n            .objec", "erStyle(BorderStyle.Dashed).borderWidth(5)\n   ", "Style = BorderStyle.Dashed\n        console.log", "tEqual(\"BorderStyle.Dashed\")\n      expect(obj.", "Style = BorderStyle.Dashed;\n          break;\n ", " style: BorderStyle.Dashed })\n\n        Text('m", " style: BorderStyle.Dashed })\n\n        Text('o", "reak;\n        case 'Dashed':\n          this.bo", " style: BorderStyle.Dashed })\n      }\n    }\n  "], "files": ["border.ets", "imageFit.ets", "TextJsunit.test.ets", "positionSetting.ets", "gestureMode.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BorderStyle", "api_method_name": "Solid", "api_method_all": "Solid,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["Style = BorderStyle.Solid\n  @State mode: Gest", "ize(16)\n      Text('Solid')\n        .borderSt", "erStyle(BorderStyle.Solid).borderWidth(5).key", "Style = BorderStyle.Solid;\n          break;\n ", "tEqual(\"BorderStyle.Solid\")\n      expect(obj.", "tEqual(\"BorderStyle.Solid\");\n      console.in", "erStyle(BorderStyle.Solid)\n        .borderWid", "reak;\n        case 'Solid':\n          this.bo", "Style = BorderStyle.Solid;\n      }\n    }\n  }\n"], "files": ["border.ets", "TextJsunit.test.ets", "CheckboxGroupJsunit.test.ets", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "gestureMode.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LineJoinStyle", "api_method_all": "declare enum LineJoinStyle {\n  \n  Miter,\n\n  \n  Round,\n\n  \n  Bevel,\n}", "api_method_name": "LineJoinStyle", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["eJoin).assertEqual('LineJoinStyle.Bevel');\n      done", "eJoin).assertEqual('LineJoinStyle.Miter');\n      done", "(10).strokeLineJoin(LineJoinStyle.Round)\n      Shape(", "  \"strokeLineJoin\": LineJoinStyle.Round,\n          }\n", "    .strokeLineJoin(LineJoinStyle.Round).antiAlias(tr", "eJoin).assertEqual('LineJoinStyle.Miter');\n      awai", "eJoin).assertEqual('LineJoinStyle.Round');\n      done", "in: LineJoinStyle = LineJoinStyle.Miter;\n  @State str", "  \"strokeLineJoin\": LineJoinStyle.Bevel,\n          }\n", "ate strokeLineJoin: LineJoinStyle = LineJoinStyle.Mit", "    .strokeLineJoin(LineJoinStyle.Miter).strokeMiterL"], "files": ["shape.ets", "Shape.ets", "ShapeJsunit.test.ets", "enumsLineCapStyle.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LineJoinStyle", "api_method_name": "Miter", "api_method_all": "Miter,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 120, "since": 7, "api_used": "\u662f", "lines": ["null,\n        strokeMiterLimitProp : null,\n  ", "null,\n        strokeMiterLimitProp: null,\n   ", "terLimit(this.strokeMiterLimit)\n      .stroke", "eJoin(LineJoinStyle.Miter).strokeMiterLimit(5", "nStyle.Miter).strokeMiterLimit(5)\n    }.width", "\n        this.strokeMiterLimitProp = this.$el", ",\n            strokeMiterLimitProp: this.stro", "yle = LineJoinStyle.Miter;\n  @State strokeMit", "ter;\n  @State strokeMiterLimit: number = 4;\n ", "qual('LineJoinStyle.Miter');\n      done();\n  ", "\n            \"strokeMiterLimit\": 'aaa11111',\n", "\n            \"strokeMiterLimit\": \"string\",\n  ", "eJoin)\n      .strokeMiterLimit(this.strokeMit", "\n            \"strokeMiterLimit\": \"5\",\n       ", "ventData.data.strokeMiterLimit);\n      }\n    ", "itProp : this.strokeMiterLimitProp,\n         ", "ct(obj.$attrs.strokeMiterLimit).assertEqual('", "\n            \"strokeMiterLimit\": '-0.11111',\n", "qual('LineJoinStyle.Miter');\n      await Util", "ventData.data.strokeMiterLimit != null) {\n   ", "\n        this.strokeMiterLimit = parseInt(eve", "fy(obj.$attrs.strokeMiterLimit));\n      expec", ",\n            strokeMiterLimitProp : this.str", "his.$element(\"strokeMiterLimitProp\").getInspe", "mitProp: this.strokeMiterLimitProp,\n         "], "files": ["Shape.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LineJoinStyle", "api_method_name": "Round", "api_method_all": "Round,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["t('testlistshapemodeRound', 0, async function", "Cap == LineCapStyle.Round)\n      console.info", "This.value.shapemodeRound);\n        console.i", "      this.shapemodeRound = this.$element(\"sh", "   testlistshapemodeRound\n      * @tc.desc   ", "Round:this.shapemodeRound, shapemodeNone:this", "ineCap(LineCapStyle.Round)\n      Shape() {\n  ", "eJoin(LineJoinStyle.Round).antiAlias(true)\n  ", "ineCap(LineCapStyle.Round)\n      Row().width(", "oin\": LineJoinStyle.Round,\n          }\n      ", "sertEqual('shapemodeRound')\n        expect(ob", "Equal('LineCapStyle.Round');\n      done();\n  ", "qual('LineJoinStyle.Round');\n      done();\n  ", "ineCap(LineCapStyle.Round)\n        .vertical(", "ineCap(LineCapStyle.Round)\n      .strokeLineJ", ".$element(\"shapemodeRound\").getInspector()\n  ", "eJoin(LineJoinStyle.Round)\n      Shape() {\n  ", ",\n         shapemodeRound:null,\n         shap", "           shapemodeRound:this.shapemodeRound", "o('testlistshapemodeRound START');\n        co", "eCap\": LineCapStyle.Round,\n          }\n      "], "files": ["divider.ets", "Shape.ets", "index.js", "listProps.test.js", "ShapeJsunit.test.ets", "enumsLineCapStyle.ets", "DividerJsunit.test.ets", "Divider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LineJoinStyle", "api_method_name": "Bevel", "api_method_all": "Bevel,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["oin\": LineJoinStyle.Bevel,\n          }\n      ", "qual('LineJoinStyle.Bevel');\n      done();\n  "], "files": ["ShapeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchType", "api_method_all": "declare enum TouchType {\n  \n  Down,\n\n  \n  Up,\n\n  \n  Move,\n\n  \n  Cancel,\n}", "api_method_name": "TouchType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 39, "since": 7, "api_used": "\u662f", "lines": ["y: upY,\n      type: TouchType.Up,\n    }\n    conso", "alue,\n        type: TouchType.Down,\n      }\n     ", " if (event.type === TouchType.Move) {\n        thi", "e.info(this.text = 'TouchType:' + this.eventType\n", ", y: y_value, type: TouchType.Down\n      }\n      ", " downY,\n      type: TouchType.Down,\n    }\n    con", " if (event.type === TouchType.Down) {\n           ", " if (event.type === TouchType.Move) {\n          t", ".info('[PanGesture] TouchType:' + this.eventType)", "o('[ResponseRegion] TouchType:' + this.eventType)", " if (event.type === TouchType.Down) {\n        thi", " if (event.type === TouchType.Up) {\n        this.", " if (event.type === TouchType.Up) {\n            t", "e.log('[PanGesture] TouchType start');\n        th", "alue,\n        type: TouchType.Move,\n      }\n     ", " if (event.type === TouchType.Up) {\n          thi", ", y: y_value, type: TouchType.Move\n      }\n      ", " if (event.type === TouchType.Move) {\n           ", "* i),\n        type: TouchType.Move\n      }\n      ", ", y: y_value, type: TouchType.DOWN\n      }\n      ", " if (event.type === TouchType.Down) {\n          t", " y_value_two, type: TouchType.Move\n      }\n      "], "files": ["ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "Utils.ets", "PanGesture.ets", "PanGestureJsunit.test.ets", "touch.ets", "TapGesture.test.ets", "ResponseRegionJsunit.test.ets", "ParallelGestureJsunit.test.ets", "sourceType.ets", "SourceTypeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchType", "api_method_name": "Down", "api_method_all": "Down,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 65, "since": 7, "api_used": "\u662f", "lines": ["    if (this.isCountDown) {\n        Image($r", "   Text(this.isCountDown ? 'Count Down' : 'S", "  this.eventType = 'Down'\n          }\n      ", "  this.eventType = 'Down'\n            consol", "le.log(\"webTest : onDownloadStart url : \" + ", "      })\n        .onDownloadStart((e) => {\n ", "        this.isCountDown = !this.isCountDown", "({ count: this.countDownStartValue, costOfOn", "le.log(\"webTest : onDownloadStart contentLen", "Down = !this.isCountDown\n        })\n        ", "le.log(\"webTest : onDownloadStart origin : \"", "qual('ImageFit.ScaleDown')\n      console.inf", "le.log(\"webTest : onDownloadStart userAgent ", " this.$element(\"typeDownload\").getInspector(", "  Text(`${this.countDownStartValue}`)\n      ", "    type: TouchType.Down,\n    }\n    console.", ".type === TouchType.Down) {\n            this", ".type === TouchType.Down) {\n          this.e", "false\n  @State countDownStartValue: number =", "mponent\nstruct CountDownComponent {\n  @Prop ", ".type === TouchType.Down) {\n        this.eve", "_TYPE).assertEqual('Down')\n      }\n      var", "          this.countDownStartValue += 1\n    ", "sCountDown ? 'Count Down' : 'Stopwatch')\n   ", "})\n            CountDownComponent({ count: t", "Download : this.typeDownload, typeNone : thi", " Button(this.isCountDown ? 'Swtich to Stopwa", ": null,\n        typeDownload : null,\n       ", " : 'Switch to Count Down')\n        .onClick(", "ctFit(ImageFit.ScaleDown)\n          .key('im", "p {\n  @State isCountDown: boolean = true\n\n  ", "    type: TouchType.Down,\n      }\n      var ", "le.log(\"webTest : onDownloadStart contentDis", "touch] eventType is Down\")\n            this.", "ue, type: TouchType.Down\n      }\n      var c", "          this.countDownStartValue -= 1\n    ", "le.log(\"webTest : onDownloadStart mimetype :", "\n        Text('Pull Down and refresh: ' + th", "  this.eventType = 'Down'\n        }\n        ", "  this.eventType = 'Down'\n      }\n      if (", " this.typeText, typeDownload : this.typeDown", "()\n        this.typeDownload = this.$element", "('textTimer notCountDown utc is\uff1a' + utc + ',"], "files": ["ResponseRegion.ets", "index.js", "ImageJsunit.test.ets", "Utils.ets", "PanGesture.ets", "touch.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "Image.ets", "textTimer.ets", "aboutToDisappear.ets", "ResponseRegionJsunit.test.ets", "refresh.ets", "sourceType.ets", "SourceTypeJsunit.test.ets", "refreshProps.test.js", "Prop.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchType", "api_method_name": "Up", "api_method_all": "Up,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 162, "since": 7, "api_used": "\u662f", "lines": [" .textCase(TextCase.UpperCase)\n        .de", "sertEqual('TextCase.UpperCase')\n      expe", "sertEqual('TextCase.UpperCase');\n      don", "  })\n      .onActionUpdate((event: PanGest", "aseValue\": TextCase.UpperCase\n          }\n", "  this.eventType = 'Up'\n        }\n        ", ".type === TouchType.Up) {\n            this", "  this.eventType = 'Up'\n          }\n      ", "    console.info(\"onUpdate\");\n        })\n ", "  this.eventType = 'Up'\n            consol", " .textCase(TextCase.UpperCase)\n           ", "sion)\n        .allowUpdate(true)\n        .", ".type === TouchType.Up) {\n          this.e", "     message: 'pinchUpdate:\\n' + message\n ", "sertEqual(\"TextCase.UpperCase\")\n      expe", "  })\n      .onActionUpdate((event: Gesture", "  this.eventType = 'Up'\n      }\n      if (", "touch] eventType is Up\")\n            this.", "    type: TouchType.Up,\n    }\n    console.", ");\n    },\n\n    pinchUpdate(event){\n       ", "      })\n        .onUpdate(() => {\n       ", ".type === TouchType.Up) {\n        this.eve"], "files": ["ResponseRegion.ets", "index.js", "PanGesture.ets", "Utils.ets", "panDirection.ets", "Video.ets", "touch.ets", "FormComponentPage.ets", "TextJsunit.test.ets", "Span.ets", "gestureMode.ets", "sourceType.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchType", "api_method_name": "Move", "api_method_all": "Move,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 123, "since": 7, "api_used": "\u662f", "lines": ["    type: TouchType.Move\n      }\n      conso", "wo, type: TouchType.Move\n      }\n      var c", "ue, type: TouchType.Move\n      }\n      var c", "nsole.info('on FocusMove Start!')\n        })", " })\n  }\n  notifyDataMove(from: number, to: n", "    })\n      .onDragMove((event: DragEvent, ", ".type === TouchType.Move) {\n            this", ".assertEqual('onDragMove onAction');\n      }", "  })\n        .onItemMove((from: number, to: ", ".type === TouchType.Move) {\n        this.eve", "sole.log('onItemDragMove,itemIndex:' + itemI", ");\n    },\n\n    touchMove(event){\n        var", "  this.eventType = 'Move'\n          }\n      ", "ole.log('List onDragMove, ' + extraParams)\n ", "le.log('Ting--onDragMove')\n        console.l", "_TYPE).assertEqual('Move')\n      }\n      var", "  this.eventType = 'Move'\n      }\n      cons", "console.info(\"onDragMove start to emit actio", "console.info(\"onDragMove emit action state e", "   \"ACTION\": 'onDragMove onAction'\n         ", "  this.eventType = 'Move'\n        }\n        ", "\n        .onItemDragMove((event: ItemDragInf", "touch] eventType is Move\")\n            this.", ".type === TouchType.Move) {\n          this.e", "  this.eventType = 'Move'\n            consol", "     listener.onDataMoved(from, to)\n    })\n ", "     message: 'touchMove:\\n' +message\n      ", "ue, type: TouchType.Move\n      }\n      let p", " })\n        .onFocusMove(()=>{\n          con", "    type: TouchType.Move,\n      }\n      var "], "files": ["ResponseRegion.ets", "index.js", "dragEvent.ets", "focus.ets", "Utils.ets", "PanGesture.ets", "PanGestureJsunit.test.ets", "touch.ets", "PriorityGestureJsunit.test.ets", "lazyForEach.ets", "TapGesture.test.ets", "DragEventJsunit.test.ets", "List.ets", "dragEvent2.ets", "sourceType.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchType", "api_method_name": "Cancel", "api_method_all": "Cancel,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 197, "since": 7, "api_used": "\u662f", "lines": ["  })\n      .onActionCancel(() => {\n        con", "  })\n    )\n      .onCancel(() => {\n        con", "      console.info('Cancel')\n        })\n      ", "     message: 'touchCancel:\\n' +message\n      ", "dCount: 5\n  })\n\n  onCancel() {\n    console.inf", "le({ cancel: this.onCancel, confirm: this.onAc", " \" + e.result.handleCancel());\n          conso", "     message: 'pinchCancel:\\n' + message\n     ", "User {\n  @State autoCancel: boolean = true\n  @", "00\n    },\n  })\n\n  onCancel() {\n    console.inf", "     },\n          onCancel: () => {\n          ", "e',\n            autoCancel: true,\n            ", "s.existApp,\n    autoCancel: true,\n    offset: ", "      })\n        .onCancel(() => {\n          c", ");\n    },\n\n    touchCancel(event){\n        var", "\"TextPickerDialog:onCancel()\")\n          },\n  ", ");\n    },\n\n    pinchCancel(event){\n        var"], "files": ["AlertDialog.ets", "WebPage.ets", "longPressGesture.ets", "textPickerDialog.ets", "animationStatus.ets", "imageAnimator.ets", "gestureMode.ets", "index.js", "fillMode.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseButton", "api_method_all": "declare enum MouseButton {\n  \n  Left,\n\n  \n  Right,\n\n  \n  Middle,\n\n  \n  Back,\n\n  \n  Forward,\n\n  \n  None,\n}", "api_method_name": "MouseButton", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["f (event.button === MouseButton.None) {\n           ", "f (event.button === MouseButton.Back) {\n           "], "files": ["mouseEvent.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseButton", "api_method_name": "Left", "api_method_all": "Left,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 54, "since": 8, "api_used": "\u662f", "lines": ["tion: BadgePosition.Left,\n            maxCou", ".value.typeDirectionLeft);\n        console.i", "ement).assertEqual('Left')\n        console.i", "       placementPropLeft : this.placementPro", "tLeft:this.placementLeft,\n             place", ", left: this.paddingLeft })\n        .margin(", "sertEqual('placementLeft')\n        expect(ob", "= GradientDirection.LeftTop\n\n  build() {\n   ", "t = Placement.BottomLeft\n  @State placementT", "ement(\"typeDirectionLeft\").getInspector()\n  ", "ll,\n        typeLoopLeft : null,\n        typ", "nStyle(IndexerAlign.Left)\n        .onSelecte", "           placementLeft:this.placementLeft,", "  this.typeDirectionLeft = this.$element(\"ty", "marqueeDirectionPropLeft', 0, async function", "('GradientDirection.Left');\n      expect(obj", "('GradientDirection.LeftTop');\n      console", "('testbadgeplacementLeft START');\n        co", "ement(\"placementPropLeft\").getInspector()\n  ", "       typeDirectionLeft : this.typeDirectio", "ual(Placement.BottomLeft);\n      }\n      let", "('testbadgeplacementLeft', 0, async function", "Equal('typeDirectionLeft')\n        expect(ob", ") {\n          Text('Left').fontSize(25)\n    ", ",\n         placementLeft:null,\n         plac", "tion-'BadgePosition.Left'\" + JSON.stringify(", "  this.placementPropLeft = this.$element(\"pl", "       placementPropLeft : null,\n        pla", "('GradientDirection.LeftBottom');\n      cons", "ment = Placement.TopLeft\n  @State placementO", ": GradientDirection.Left,\n    colors: [[0xAE", ": this.typeDirectionLeft,\n            typeDi", ": GradientDirection.LeftBottom\n          }\n ", ": this.placementPropLeft,\n            placem", "            typeLoopLeft : this.typeLoopLeft", "Left : this.typeLoopLeft,\n            typeRi", "0px\"\n  @State marginLeft: string = \"10px\"\n  ", "ement(\"typeDirectionLeft\").getInspector()\n\n ", "Text(\"BadgePosition.Left\").fontSize(16)\n    ", "       this.typeLoopLeft = this.$element(\"ty", "t, left: this.marginLeft })\n        .constra", "This.value.placementLeft);\n        console.i", "       typeDirectionLeft : null,\n        typ", "  testbadgeplacementLeft\n      * @tc.desc   ", "   testPlacementPropLeft\n     * @tc.desc    ", "qual('BadgePosition.Left');\n      console.lo", "\"5\"\n  @State paddingLeft: string= \"5\"\n  @Sta", "      this.placementLeft = this.$element(\"pl", "tEqual(Placement.TopLeft);\n      }\n      let", ".$element(\"placementLeft\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "placement.ets", "GradientDirectionJsunit.test.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "colorGradient.ets", "gradientDirection.ets", "Text.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseButton", "api_method_name": "Right", "api_method_all": "Right,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 60, "since": 8, "api_used": "\u662f", "lines": ["  });\n    },\n    setRightButton(e) {\n        ", "qual('BadgePosition.RightTop');\n      console", "('testbadgeplacementRight', 0, async function", "ype: ResponseType = RightClick;\n  @Builder Co", "ual(Placement.BottomRight);\n      }\n      let", ": GradientDirection.RightBottom\n          }\n ", "('testbadgeplacementRightTop', 0, async funct", "nStyle(IndexerAlign.Right)\n        .margin({ ", ": null,\n        typeRight : null,\n    },\n\n   ", ".$element(\"placementRight\").getInspector()\n  ", "       placementPropRight : this.placementPro", "       typeDirectionRight : null,\n        typ", ",\n         placementRightTop:null,\n         p", ": this.typeDirectionRight,\n            typeLo", "tion: BadgePosition.Right,\n            maxCou", "ition-BadgePosition.Right\" + JSON.stringify(o", "htTop:this.placementRightTop,\n             pl", "  testbadgeplacementRightTop\n      * @tc.desc", "Text(\"BadgePosition.RightTop\").fontSize(16)\n ", "tion: BadgePosition.RightTop,\n            max", "           placementRightTop:this.placementRi", "This.value.placementRight);\n        console.i", "ypeRight : this.typeRight,\n        }\n    },\n\n", "       placementPropRight : null,\n        pla", "('GradientDirection.RightBottom');\n      cons", "Right:this.placementRight,\n             place", "()\n        this.typeRight = this.$element(\"ty", "  this.placementPropRight = this.$element(\"pl", "tion-'BadgePosition.RightTop'\" + JSON.stringi", "ft,\n            typeRight : this.typeRight,\n ", "      this.placementRightTop = this.$element(", "('testbadgeplacementRight START');\n        co", ",\n         placementRight:null,\n         plac", "('testbadgeplacementRightTop START');\n       ", ".$element(\"placementRightTop\").getInspector()", "sertEqual('placementRight')\n        expect(ob", "      this.placementRight = this.$element(\"pl", ") {\n          Text('Right').fontSize(25)\n    ", "t = Placement.BottomRight\n\n  @Builder popupBu", "  this.typeDirectionRight = this.$element(\"ty", "       typeDirectionRight : this.typeDirectio", "  testbadgeplacementRight\n      * @tc.desc   ", "qual('BadgePosition.Right');\n      console.lo", "ement(\"typeDirectionRight\").getInspector()\n  ", "tEqual(Placement.TopRight);\n      }\n      let", "ment = Placement.TopRight\n  @State placementT", "           placementRight:this.placementRight", ": this.placementPropRight,\n            placem", "ement(\"placementPropRight\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "GradientDirectionJsunit.test.ets", "placement.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "bindContextMenu.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseButton", "api_method_name": "Middle", "api_method_all": "Middle,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["      ctx.fillText('Middle', 55, 30);\n        ", "s.context.fillText('Middle', 225, height);\n   "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseButton", "api_method_name": "Back", "api_method_all": "Back,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 503, "since": 8, "api_used": "\u662f", "lines": [" this.stateChangCallBack);\n  }\n\n  private st", "nfo(\"[stateChangCallBack] stateChangCallBack", " this.stateChangCallBack);\n\n  }\n\n  private s", "nfo(\"[stateChangCallBack] state change calle", " page stateChangCallBack\" + JSON.stringify(e", " this.stateChangCallBack);\n\n    var stateCha", "ivate stateChangCallBack = (eventData) => {\n", " this.stateChangCallBack);\n    let spanChang", " this.stateChangCallBackTwo);\n\n    var state", " this.stateChangCallBack);\n  }\n\n  stateChang", " }\n\n  stateChangCallBack = (eventData) => {\n", " page stateChangCallBack\");\n    if (eventDat", " this.stateChangCallBack);\n\n    let priority", " this.stateChangCallBack);\n  }\n\n  build() {\n", "Back] stateChangCallBack \");\n    if (eventDa", " this.stateChangCallBack);\n    let offsetCha"], "files": ["video.ets", "Navigator.ets", "Row.ets", "Navigation.ets", "richText.ets", "column.ets", "checkboxGroup.ets", "navigation.ets", "AppearJsunit.test.ets", "basicabilityapi.test.js", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "FillModeJsunit.test.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "TouchJsunit.test.ets", "transForm.ets", "path.ets", "NavigatorCodeJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "focus.ets", "touch.ets", "background.ets", "gauge.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "flexDirection.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "row.ets", "loadingProgress.ets", "flex.ets", "gridContainer.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ConfigurationJsunit.test.ets", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "list.ets", "colorGradient.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "checkbox.ets", "circle.ets", "listItem.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "direction2.ets", "mouseEvent.ets", "ohosMatrix4.ets", "divider.ets", "ellipse.ets", "appear.ets", "rating.ets", "zIndex.ets", "fillMode.ets", "line.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "ohosRouterA.ets", "GridItem.ets", "select.ets", "slider.ets", "NavigationJsunit.test.ets", "Calendar.ets", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "panel.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseButton", "api_method_name": "Forward", "api_method_all": "Forward,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["lement(\"typeFillmodeForwards\").getInspector()\n ", "         this.accessForward = this.controller.a", "AnimatorFillmodePropForwards', 0, async functio", "PlaybackSpeed.Speed_Forward_2_00_X,\n          }", "PlaybackSpeed.Speed_Forward_1_75_X,\n          }", "PlaybackSpeed.Speed_Forward_1_00_X,\n          }", "        typeFillmodeForwards :  this.typeFillmo", "tEqual('typeFillmodeForwards')\n    expect(obj.$", ":  this.typeFillmodeForwards, typeFillmodeNone ", "   this.typeFillmodeForwards = this.$element(\"t", "PlaybackSpeed.Speed_Forward_1_25_X,\n          }", "rue;\n  @State accessForward: boolean = true;\n  ", "llMode).assertEqual(Forwards);\n      }\n      le", "  Button(this.accessForward ? '\u9875\u9762\u53ef\u524d\u8fdb' : '\u9875\u9762\u4e0d\u53ef\u524d\u8fdb", "        typeFillmodeForwards : null,\n        ty", "is.controller.accessForward()\n          })\n    ", "s.value.typeFillmodeForwards);\n    console.info", "PlaybackSpeed.Speed_Forward_0_75_X,\n          }"], "files": ["VideoJsunit.test.ets", "WebPage.ets", "ImageAnimatorJsunit.test.ets", "imageAnimatorProps.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseButton", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseAction", "api_method_all": "declare enum MouseAction {\n  \n  Press,\n\n  \n  Release,\n\n  \n  Move,\n\n  \n  Hover\n}", "api_method_name": "MouseAction", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["nt.event.action === MouseAction.Release) {\n        ", "nt.event.action === MouseAction.None) {\n           ", "nt.event.action === MouseAction.Hover) {\n          "], "files": ["mouseEvent.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseAction", "api_method_name": "Press", "api_method_all": "Press,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 137, "since": 8, "api_used": "\u662f", "lines": ["nsole.info(\"testLongPressGesture01 sendEventB", "nsole.info(\"testLongPressGesture01 get event ", "   console.log('LongPress onAction')\n      })", ");\n\n    it('testLongPressGesture01', 0, async", "  .gesture(\n    LongPressGesture({ repeat: tr", "e.Sequence,\n    LongPressGesture({ repeat: tr", "   console.log('LongPress end')\n      }),\n   ", ") {\n      Text('LongPress onAction:' + this.e", "  console.info(\"longPressGesture after each c", "      message: 'longPress'\n        });\n    },", "ole.error(\"push longPressGesture page error:\"", "});\n    },\n\n    longPress(){\n        prompt.s", "nsole.info(\"testLongPressGesture01 on events_", "st.ets';\nimport longPressGestureJsUnit from '", "    uri: 'pages/longPressGesture',\n      }\n  ", "nsole.info(\"testLongPressGesture02 sendEventB", "sole.info(\"push longPressGesture page result:", "e gesture\\n' + 'LongPress onAction:' + this.c", "nsole.info('testLongPressGesture02 END');\n   ", "  console.info(\"longPressGesture current acti", "omponent\nstruct LongPressGestureExample {\n  @", "\n        if (!(\"longPressGesture\" == pages.na", "  console.info(\"longPressGesture beforeEach s", "nsole.info('testLongPressGesture01 END');\n   ", ");\n\n    it('testLongPressGesture02', 0, async", "nsole.info(\"testLongPressGesture02 on events_", "sole.info('[testLongPressGesture02] START');\n", "eJsUnit from './LongPressGesture.test.ets';\ni", "vas2Jsunit();\n  longPressGestureJsUnit();\n  r", "efault function longPressGestureJsunit() {\n  ", ") {\n  describe('longPressGestureTest', functi", "nsole.info(\"testLongPressGesture02 get event ", "sole.info('[testLongPressGesture01] START');\n", "nsole.info(\"get longPressGesture state pages.", "nsole.info(\"get longPressGesture state pages:"], "files": ["TapGesture.test.ets", "longPressGesture.ets", "LongPressGesture.test.ets", "gestureMode.ets", "index.js", "List.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseAction", "api_method_name": "Release", "api_method_all": "Release,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["this.eventAction = 'Release'\n          }\n      ", "ion === MouseAction.Release) {\n            this"], "files": ["mouseEvent.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseAction", "api_method_name": "Move", "api_method_all": "Move,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 123, "since": 7, "api_used": "\u662f", "lines": ["    type: TouchType.Move\n      }\n      conso", "wo, type: TouchType.Move\n      }\n      var c", "ue, type: TouchType.Move\n      }\n      var c", "nsole.info('on FocusMove Start!')\n        })", " })\n  }\n  notifyDataMove(from: number, to: n", "    })\n      .onDragMove((event: DragEvent, ", ".type === TouchType.Move) {\n            this", ".assertEqual('onDragMove onAction');\n      }", "  })\n        .onItemMove((from: number, to: ", ".type === TouchType.Move) {\n        this.eve", "sole.log('onItemDragMove,itemIndex:' + itemI", ");\n    },\n\n    touchMove(event){\n        var", "  this.eventType = 'Move'\n          }\n      ", "ole.log('List onDragMove, ' + extraParams)\n ", "le.log('Ting--onDragMove')\n        console.l", "_TYPE).assertEqual('Move')\n      }\n      var", "  this.eventType = 'Move'\n      }\n      cons", "console.info(\"onDragMove start to emit actio", "console.info(\"onDragMove emit action state e", "   \"ACTION\": 'onDragMove onAction'\n         ", "  this.eventType = 'Move'\n        }\n        ", "\n        .onItemDragMove((event: ItemDragInf", "touch] eventType is Move\")\n            this.", ".type === TouchType.Move) {\n          this.e", "  this.eventType = 'Move'\n            consol", "     listener.onDataMoved(from, to)\n    })\n ", "     message: 'touchMove:\\n' +message\n      ", "ue, type: TouchType.Move\n      }\n      let p", " })\n        .onFocusMove(()=>{\n          con", "    type: TouchType.Move,\n      }\n      var "], "files": ["ResponseRegion.ets", "index.js", "dragEvent.ets", "focus.ets", "Utils.ets", "PanGesture.ets", "PanGestureJsunit.test.ets", "touch.ets", "PriorityGestureJsunit.test.ets", "lazyForEach.ets", "TapGesture.test.ets", "DragEventJsunit.test.ets", "List.ets", "dragEvent2.ets", "sourceType.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimationStatus", "api_method_all": "declare enum AnimationStatus {\n  \n  Initial,\n\n  \n  Running,\n\n  \n  Paused,\n\n  \n  Stopped,\n}", "api_method_name": "AnimationStatus", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["state).assertEqual('AnimationStatus.Initial');\n      co", "tatusJsunit from './AnimationStatusJsunit.test.ets';\nim", "       this.state = AnimationStatus.Running\n          t", ": AnimationStatus = AnimationStatus.Initial;\n  @State r", "       this.state = AnimationStatus.Stopped\n          t", "       this.state = AnimationStatus.Running\n        })\n", ": AnimationStatus = AnimationStatus.Initial\n  @State pr", "Status).assertEqual(AnimationStatus.Stopped);\n      }\n ", ".state).assertEqual(AnimationStatus.Running);\n      }\n ", "       this.state = AnimationStatus.Paused\n          tr", "       this.state = AnimationStatus.Paused\n          th", ".state).assertEqual(AnimationStatus.Stopped);\n        e", "Status).assertEqual(AnimationStatus.Paused);\n      }\n  ", "e {\n  @State state: AnimationStatus = AnimationStatus.I", ".state).assertEqual(AnimationStatus.Paused);\n        ex"], "files": ["ImageAnimatorJsunit.test.ets", "AnimationStatusJsunit.test.ets", "animationStatus.ets", "imageAnimator.ets", "List.test.ets", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimationStatus", "api_method_name": "Initial", "api_method_all": "Initial,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["al('AnimationStatus.Initial');\n      console.in", "s = AnimationStatus.Initial\n  @State preDecode:", "s = AnimationStatus.Initial;\n  @State reverse: "], "files": ["fillMode.ets", "animationStatus.ets", "imageAnimator.ets", "AnimationStatusJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimationStatus", "api_method_name": "Running", "api_method_all": "Running,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["ual(AnimationStatus.Running);\n      }\n      let", "e = AnimationStatus.Running\n          try {\n   ", "e = AnimationStatus.Running\n        })\n\n       ", "tate src: string = \"Running Marquee starts roll", "e = AnimationStatus.Running\n          this.fill"], "files": ["ImageAnimatorJsunit.test.ets", "marquee.ets", "animationStatus.ets", "imageAnimator.ets", "fillMode.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimationStatus", "api_method_name": "Paused", "api_method_all": "Paused,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["e = AnimationStatus.Paused\n          this.fill", "e = AnimationStatus.Paused\n          try {\n   ", "ual(AnimationStatus.Paused);\n        expect(in", "ual(AnimationStatus.Paused);\n      }\n      let"], "files": ["ImageAnimatorJsunit.test.ets", "AnimationStatusJsunit.test.ets", "animationStatus.ets", "imageAnimator.ets", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimationStatus", "api_method_name": "Stopped", "api_method_all": "Stopped,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["e = AnimationStatus.Stopped\n          this.fill", "e = AnimationStatus.Stopped\n          try {\n   ", "a: {\n            \"isStopped\": true,\n          }", "ual(AnimationStatus.Stopped);\n      }\n      let", "ual(AnimationStatus.Stopped);\n        expect(in", "f (eventData.data.isStopped != null) {\n        "], "files": ["VideoJsunit.test.ets", "video.ets", "ImageAnimatorJsunit.test.ets", "AnimationStatusJsunit.test.ets", "animationStatus.ets", "imageAnimator.ets", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_all": "declare enum Curve {\n  \n  Linear,\n\n  \n  Ease,\n\n  \n  EaseIn,\n\n  \n  EaseOut,\n\n  \n  EaseInOut,\n\n  \n  FastOutSlowIn,\n\n  \n  LinearOutSlowIn,\n\n  \n  FastOutLinearIn,\n\n  \n  ExtremeDeceleration,\n\n  \n  Sharp,\n\n  \n  Rhythm,\n\n  \n  Smooth,\n\n  \n  Friction,\n}", "api_method_name": "Curve", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": [" this.context.bezierCurveTo(20, 100 + height,", "let curve2 = Curves.Curve.EaseIn(0.42, 0.0, 1", "       let curve6 = Curves.LinearOutSlowIn(0.", "      path.quadraticCurveTo(50, 50, 100, 10);", "is.context.quadraticCurveTo(100 + width, 100 ", "        let curve = Curves.cubicBezier(0.25, ", "         this.bezierCurveTo();\n              ", "ation: 1200, curve: Curve.Linear })\n      .on", "      let curve12 = Curves.spring(100, 1, 228", "@ts-nocheck\n\nimport Curves from '@ohos.curves", "ation: 1500, curve: Curve.Ease })\n      .onEx", "       let curve9 = Curves.Sharp(0.33, 0.0, 0", "let curve4 = Curves.Curve.EaseInOut(0.42, 0.0", "       ctx.quadraticCurveTo(50, 50, 100, 10);", "ation: 4000, curve: Curve.Linear }, () => {\n ", "       let curve8 = Curves.ExtremeDeceleratio", "       let curve1 = Curves.init();\n          ", "      let curve11 = Curves.cubicBezier(0.1, 0", "       let curve3 = Curves.Curve.EaseOut(0.0,", "100%')\n\n      Text('Curve graphics').fontSize", ";\n        ctx.bezierCurveTo(20, 40, 80, 40, 1", "      this.quadraticCurveTo();\n              ", " 100);\n  }\n\n  bezierCurveTo() {\n    let heigh", "\n        path.bezierCurveTo(10, 50, 100, 50, ", "urvesJsunit from './CurvesJsunit.test.ets';\ni", "let curve3 = Curves.Curve.EaseOut(0.0, 0.0, 0", "       let curve5 = Curves.FastOutSlowIn(0.4,", "       let curve4 = Curves.Curve.EaseInOut(0.", "       let curve2 = Curves.Curve.EaseIn(0.42,", "      let curve10 = Curves.Rhythm(0.7, 0.0, 0", "();\n  }\n\n  quadraticCurveTo() {\n    let heigh", "tion: 2000 , curve: Curves.spring(0.25, 0.1, ", "       let curve7 = Curves.FastOutLinearIn(0."], "files": ["pageTransition2.ets", "index.js", "pageTransition.ets", "path.ets", "motionPath.ets", "Path.ets", "List.test.ets", "curves.ets", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Linear", "api_method_all": "Linear,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 59, "since": 7, "api_used": "\u662f", "lines": ["s.value.calcModePropLinear);\n        console.i", " : this.calcModePropLinear,\n            calcMo", "ransformCalcModePropLinear\n     * @tc.desc    ", "15 }) {\n      Text('Linear Progress').fontSize", "        calcModePropLinear: null,\n        calc", " this.context.createLinearGradient(50, 1900, 1", "        calcModePropLinear : this.calcModeProp", "curve).assertEqual('Linear')\n      }\n      try", "         this.createLinearGradient();\n        ", ".displayModePropAutoLinear,\n        }\n    },\n\n", "tAnimateCalcModePropLinear\n     * @tc.desc    ", "tyle: ProgressStyle.Linear }).color(Color.Red)", "qual(\"ProgressStyle.Linear\")\n      console.inf", "teMotionCalcModePropLinear\n     * @tc.desc    ", "          \"curve\": \"Linear\"\n          }\n      ", "ve7 = Curves.FastOutLinearIn(0.4, 0.0, 1.0, 1.", "let curve6 = Curves.LinearOutSlowIn(0.0, 0.0, ", "   this.calcModePropLinear = this.$element(\"ca", "tyle: ProgressStyle.Linear })\n          .value", " 1200, curve: Curve.Linear })\n      .onEnter((", "1660);\n  }\n\n  createLinearGradient() {\n    let", "iperDisplayMode.AutoLinear\n  @State edgeEffect", " 4000, curve: Curve.Linear }, () => {\n        ", ".displayModePropAutoLinear = this.$element(\"di", "radient = ctx.createLinearGradient(0,0,200,0);", "\"displayModePropAutoLinear\").getInspector()\n  ", "+nameA+'CalcModePropLinear', 0, async function", "tEqual('calcModePropLinear')\n        expect(ob", "tyle: ProgressStyle.Linear }).width(200).value", "+nameA+'CalcModePropLinear START');\n        co", " displayModePropAutoLinear: null,\n    },\n\n    ", "lement(\"calcModePropLinear\").getInspector()\n  ", " displayModePropAutoLinear: this.displayModePr", "yle = ProgressStyle.Linear\n  private stateChan"], "files": ["ProgressJsunit.test.ets", "animateTransformProps.test.js", "pageTransition2.ets", "pageTransition.ets", "progress.ets", "swiperProps.test.js", "swiper.ets", "animateMotionProps.test.js", "AnimateJsunit.test.ets", "Progress.ets", "motionPath.ets", "index.js", "curves.ets", "canvas.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Ease", "api_method_all": "Ease,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["rve3 = Curves.Curve.EaseOut(0.0, 0.0, 0.58, ", "rve2 = Curves.Curve.EaseIn(0.42, 0.0, 1.0, 1", "rve4 = Curves.Curve.EaseInOut(0.42, 0.0, 0.5", " 1500, curve: Curve.Ease })\n      .onExit((t", "curve).assertEqual('Ease')\n      }\n      try", "te curve: string = 'Ease'\n  @State iteration"], "files": ["animate.ets", "pageTransition2.ets", "pageTransition.ets", "AnimateJsunit.test.ets", "curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "EaseIn", "api_method_all": "EaseIn,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["rve4 = Curves.Curve.EaseInOut(0.42, 0.0, 0.58,", "rve2 = Curves.Curve.EaseIn(0.42, 0.0, 1.0, 1.0"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "EaseOut", "api_method_all": "EaseOut,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["rve3 = Curves.Curve.EaseOut(0.0, 0.0, 0.58, 1.0"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "EaseInOut", "api_method_all": "EaseInOut,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["rve4 = Curves.Curve.EaseInOut(0.42, 0.0, 0.58, 1."], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "FastOutSlowIn", "api_method_all": "FastOutSlowIn,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["let curve5 = Curves.FastOutSlowIn(0.4, 0.0, 0.2, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "LinearOutSlowIn", "api_method_all": "LinearOutSlowIn,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["let curve6 = Curves.LinearOutSlowIn(0.0, 0.0, 0.2, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "FastOutLinearIn", "api_method_all": "FastOutLinearIn,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["let curve7 = Curves.FastOutLinearIn(0.4, 0.0, 1.0, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "ExtremeDeceleration", "api_method_all": "ExtremeDeceleration,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["let curve8 = Curves.ExtremeDeceleration(0.0, 0.0, 0.0, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Sharp", "api_method_all": "Sharp,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["let curve9 = Curves.Sharp(0.33, 0.0, 0.67, 1."], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Rhythm", "api_method_all": "Rhythm,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["et curve10 = Curves.Rhythm(0.7, 0.0, 0.2, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Smooth", "api_method_all": "Smooth,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["          this.imageSmoothingEnabled();\n      ", ";\n    }\n  }\n\n  imageSmoothingEnabled() {\n    l", "  this.context.imageSmoothingEnabled = false\n ", "           ctx.imageSmoothingEnabled = false;\n", ", 100);\n  }\n\n  imageSmoothingQuality() {\n    l", "  this.context.imageSmoothingQuality('high');\n", "  this.context.imageSmoothingEnabled = false;\n"], "files": ["global.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Friction", "api_method_all": "Friction,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["  console.info('testFrictionProp START');\n      ", "* @tc.name      testFrictionProp\n     * @tc.desc", "    */\n\n    it('testFrictionProp', 0, async func"], "files": ["refreshProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FillMode", "api_method_all": "declare enum FillMode {\n  \n  None,\n\n  \n  Forwards,\n\n  \n  Backwards,\n\n  \n  Both,\n}", "api_method_name": "FillMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["    this.fillMode = FillMode.Both\n          try ", "illMode: FillMode = FillMode.None\n  @State rever", "\n  @State fillMode: FillMode = FillMode.None\n  @", "    this.fillMode = FillMode.None\n          try ", "llMode).assertEqual(FillMode.None);\n      }\n    ", "lModeJsunit from './FillModeJsunit.test.ets';\nim", "llMode).assertEqual(FillMode.Backwards);\n      }", ")\n        .fillMode(FillMode.None).iterations(th", "    this.fillMode = FillMode.Backwards\n         ", "llMode).assertEqual(FillMode.Both);\n      }\n    "], "files": ["FillModeJsunit.test.ets", "animationStatus.ets", "imageAnimator.ets", "List.test.ets", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FillMode", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FillMode", "api_method_name": "Forwards", "api_method_all": "Forwards,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["tEqual('typeFillmodeForwards')\n    expect(obj.$a", "        typeFillmodeForwards :  this.typeFillmod", "   this.typeFillmodeForwards = this.$element(\"ty", ":  this.typeFillmodeForwards, typeFillmodeNone :", "llMode).assertEqual(Forwards);\n      }\n      let", "AnimatorFillmodePropForwards', 0, async function", "        typeFillmodeForwards : null,\n        typ", "lement(\"typeFillmodeForwards\").getInspector()\n  ", "s.value.typeFillmodeForwards);\n    console.info("], "files": ["ImageAnimatorJsunit.test.ets", "imageAnimatorProps.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FillMode", "api_method_name": "Backwards", "api_method_all": "Backwards,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["ssertEqual(FillMode.Backwards);\n      }\n      let", "fillMode = FillMode.Backwards\n          try {\n   "], "files": ["FillModeJsunit.test.ets", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FillMode", "api_method_name": "Both", "api_method_all": "Both,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["ssertEqual(FillMode.Both);\n      }\n      let", "fillMode = FillMode.Both\n          try {\n   "], "files": ["FillModeJsunit.test.ets", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlayMode", "api_method_all": "declare enum PlayMode {\n  \n  Normal,\n\n  \n  Reverse,\n\n  \n  Alternate,\n\n  \n  AlternateReverse,\n}", "api_method_name": "PlayMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["ayMode).assertEqual(PlayMode.AlternateReverse)\n ", "y\n@Component\nstruct PlayModeExample {\n  @State p", "    this.playMode = PlayMode.AlternateReverse\n  ", "{\n  @State playMode:PlayMode = PlayMode.Normal\n\n", "yModeJsunit from './PlayModeJsunit.test.ets';\nim", "laymode: PlayMode = PlayMode.Normal\n\n  onPageSho", "playMode:PlayMode = PlayMode.Normal\n\n  build() {", "        animateTo({ PlayMode: this.playmode }, (", "\n  @State playmode: PlayMode = PlayMode.Normal\n\n", "       \"playmode\": \"PlayMode.Alternate\"\n        "], "files": ["animate.ets", "PlayModeJsunit.test.ets", "AnimateJsunit.test.ets", "playMode.ets", "List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlayMode", "api_method_name": "Normal", "api_method_all": "Normal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 102, "since": 7, "api_used": "\u662f", "lines": ["ntStyle\": FontStyle.Normal\n          }\n       ", "assertEqual('Sticky.Normal');\n      console.in", ") {\n        Text(\"3.Normal\")\n      }.type(Butt", "ertEqual('FontStyle.Normal');\n      done();\n  ", "putType = InputType.Normal;\n  @State fontSize:", "rtEqual('FontWeight.Normal');\n      done();\n  ", "sertEqual(\"TextCase.Normal\")\n      expect(obj.", "rtEqual('ButtonType.Normal')\n      console.inf", "       Text('sticky:Normal , item2222')\n      ", "       Text('sticky:Normal , click me edit lis", "ky: Sticky = Sticky.Normal;\n  @State editMode:", "emState = ItemState.Normal\n\n  build() {\n    St", "sertEqual('TextCase.Normal');\n      done();\n  ", "    Text('Orange 18 Normal source-sans-pro tex", "Waiting ? ItemState.Normal : ItemState.Waiting", "PlayMode = PlayMode.Normal\n\n  onPageShow() {\n ", "fontStyle(FontStyle.Normal)\n        .fontColor", " .textCase(TextCase.Normal)\n            .fontC", "emState = ItemState.Normal\n  @State secondStat", "  }.type(ButtonType.Normal)\n      .backgroundC", "te.Skip ? ItemState.Normal : ItemState.Skip\n  ", "emState = ItemState.Normal\n  @State disabled: ", "onType = ButtonType.Normal;\n  @State fontSizeV", "', style: FontStyle.Normal }\n  @State fontColo", "rtEqual(\"FontWeight.Normal\")\n      expect(obj.", "fontStyle(FontStyle.Normal)\n        .fontWeigh", "', style: FontStyle.Normal })\n        .key('se", "PlayMode = PlayMode.Normal\n\n  build() {\n    Fl", " { type: ButtonType.Normal })\n            .bac", "ntWeight(FontWeight.Normal)\n        .textAlign", "rtEqual('ButtonType.Normal');\n      done();\n  ", "sertEqual('TextCase.Normal')\n      expect(obj.", " TextCase= TextCase.Normal\n  @State fontSizeVa", "', style: FontStyle.Normal })\n        .selecte", "   style: FontStyle.Normal\n        })\n        ", "r, style: FontStyle.Normal })\n        .itemSiz", "', style: FontStyle.Normal\n      };\n      try ", "    }.sticky(Sticky.Normal)\n          .editabl", "', style: FontStyle.Normal })\n        .optionF", " TextCase= TextCase.Normal\n  @State decoration"], "files": ["animate.ets", "Select.ets", "SelectJsunit.test.ets", "ListItemJsunit.test.ets", "Stepper.ets", "ListItem.ets", "playMode.ets", "Text.ets", "SpanJsunit.test.ets", "textStyle.ets", "ButtonJsunit.test.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "listItemProps.test.js", "TextStyleJsunit.test.ets", "TextArea.ets", "index.js", "Link.ets", "TextInputJsunit.test.ets", "stepper.ets", "select.ets", "textArea.ets", "textInput.ets", "listItem.ets", "Button.ets", "search.ets", "button.ets", "span.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlayMode", "api_method_name": "Reverse", "api_method_all": "Reverse,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 54, "since": 7, "api_used": "\u662f", "lines": ["MotionRotatePropAutoReverse\n     * @tc.desc    ", "t('testimageAnimatorReversePropNull', 0, async ", " wrap: FlexWrap.WrapReverse, direction: FlexDir", "          .key('WrapReverse')\n        }\n       ", "()\n        this.typeReverseFalse = this.$elemen", "ameA+'RotatePropAutoReverse START');\n        co", "n-'FlexDirection.RowReverse':\" + JSON.stringify", "FlexDirection.ColumnReverse }) {\n          Text", "        .key('ColumnReverse')\n        }\n       ", "FlexDirection.ColumnReverse':\" + JSON.stringify", " this.$element(\"typeReverseFalse\").getInspector", "xt('direction:ColumnReverse').fontSize(9).fontC", ": null,\n        typeReverseFalse : null,\n      ", "= PlayMode.AlternateReverse\n          try {\n   ", "      rotatePropAutoReverse : this.rotatePropAu", " this.rotatePropAutoReverse,\n            rotate", "l('FlexDirection.RowReverse');\n      console.lo", "()\n        this.typeReverseNull = this.$element", "()\n        this.typeReverseTrue = this.$element", "InspectorByKey('WrapReverse');\n      console.in", "ment(\"rotatePropAutoReverse\").getInspector()\n  ", " this.$element(\"typeReverseTrue\").getInspector(", "value.rotatePropAutoReverse);\n        console.i", "lobalThis.value.typeReverseNull);\n        conso", " Text('direction:RowReverse').fontSize(9).fontC", "rseNull :  this.typeReverseNull,\n            ty", "rseTrue :  this.typeReverseTrue, typeReverseFal", ": null,\n        typeReverseNull : null,\n       ", "t('testimageAnimatorReversePropFalse', 0, async", "d).assertEqual('typeReverseNull')\n        expec", "{\n        Text('WrapReverse').fontSize(9).fontC", "qual('rotatePropAutoReverse')\n        expect(ob", ": null,\n        typeReverseTrue : null,\n       ", " this.$element(\"typeReverseNull\").getInspector(", "ameA+'RotatePropAutoReverse', 0, async function", "spectorByKey('ColumnReverse');\n      console.in", "l(PlayMode.AlternateReverse)\n      }\n      try ", "seFalse :  this.typeReverseFalse,\n            t", "lobalThis.value.typeReverseFalse);\n        cons", "InspectorByKey('WrapReverse');\n      let objNew", "GridDirection.ColumnReverse)\n\n      Grid() {\n  ", "ypeReverseTrue, typeReverseFalse :  this.typeRe", "spectorByKey('ColumnReverse');\n      let objNew", "n: FlexDirection.RowReverse,\n          wrap: Fl", " this.rotatePropAutoReverse = this.$element(\"ro", "ll,\n            typeReverseTrue :  this.typeRev", "      rotatePropAutoReverse : null,\n        rot", "typeIteration3, typeReverseNull :  this.typeRev"], "files": ["index.js", "playMode.ets", "PlayModeJsunit.test.ets", "Flex.ets", "animateMotionProps.test.js", "imageAnimatorProps.test.js", "grid.ets", "flexDirection.ets", "flexWrap.ets", "FlexJsunit.test.ets", "FlexDirectionJsunit.test.ets", "FlexWrapJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlayMode", "api_method_name": "Alternate", "api_method_all": "Alternate,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["laymode\": \"PlayMode.Alternate\"\n          }\n      ", "ssertEqual(PlayMode.AlternateReverse)\n      }\n   ", "playMode = PlayMode.AlternateReverse\n          tr"], "files": ["PlayModeJsunit.test.ets", "AnimateJsunit.test.ets", "playMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlayMode", "api_method_name": "AlternateReverse", "api_method_all": "AlternateReverse,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["ssertEqual(PlayMode.AlternateReverse)\n      }\n      try ", "playMode = PlayMode.AlternateReverse\n          try {\n   "], "files": ["PlayModeJsunit.test.ets", "playMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyType", "api_method_all": "declare enum KeyType {\n  \n  Down,\n\n  \n  Up,\n}", "api_method_name": "KeyType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 81, "since": 7, "api_used": "\u662f", "lines": ["rd)\n          .enterKeyType(EnterKeyType.Go)\n  ", ").assertEqual('EnterKeyType.Search')\n      cons", "er)\n          .enterKeyType(EnterKeyType.Send)\n", "rd)\n          .enterKeyType(EnterKeyType.Done)\n", " .enterKeyType(EnterKeyType.Done)\n          .pl", " .enterKeyType(EnterKeyType.Search)\n          .", "er)\n          .enterKeyType(EnterKeyType.Done)\n", "il)\n          .enterKeyType(EnterKeyType.Next)\n", "il)\n          .enterKeyType(EnterKeyType.Done)\n", "al)\n          .enterKeyType(EnterKeyType.Send)\n", "al)\n          .enterKeyType(EnterKeyType.Next)\n", "ify(obj.$attrs.enterKeyType));\n      console.in", "rd)\n          .enterKeyType(EnterKeyType.Next)\n", "al)\n          .enterKeyType(EnterKeyType.Done)\n", " .enterKeyType(EnterKeyType.Go)\n          .plac", "er)\n          .enterKeyType(EnterKeyType.Next)\n", "ect(obj.$attrs.enterKeyType).assertEqual('Enter", "al)\n          .enterKeyType(EnterKeyType.Search", "il)\n          .enterKeyType(EnterKeyType.Go)\n  ", "er)\n          .enterKeyType(EnterKeyType.Go)\n  ", " .enterKeyType(EnterKeyType.Send)\n          .pl", "rd)\n          .enterKeyType(EnterKeyType.Search", ").assertEqual('EnterKeyType.Next')\n      consol", "er)\n          .enterKeyType(EnterKeyType.Search", " .enterKeyType(EnterKeyType.Next)\n          .pl", "il)\n          .enterKeyType(EnterKeyType.Send)\n", ").assertEqual('EnterKeyType.Send')\n      consol", ").assertEqual('EnterKeyType.Go')\n      expect(o", "il)\n          .enterKeyType(EnterKeyType.Search", "rd)\n          .enterKeyType(EnterKeyType.Send)\n", "al)\n          .enterKeyType(EnterKeyType.Go)\n  "], "files": ["TextInputJsunit.test.ets", "TextInput.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyType", "api_method_name": "Down", "api_method_all": "Down,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 65, "since": 7, "api_used": "\u662f", "lines": ["    if (this.isCountDown) {\n        Image($r", "   Text(this.isCountDown ? 'Count Down' : 'S", "  this.eventType = 'Down'\n          }\n      ", "  this.eventType = 'Down'\n            consol", "le.log(\"webTest : onDownloadStart url : \" + ", "      })\n        .onDownloadStart((e) => {\n ", "        this.isCountDown = !this.isCountDown", "({ count: this.countDownStartValue, costOfOn", "le.log(\"webTest : onDownloadStart contentLen", "Down = !this.isCountDown\n        })\n        ", "le.log(\"webTest : onDownloadStart origin : \"", "qual('ImageFit.ScaleDown')\n      console.inf", "le.log(\"webTest : onDownloadStart userAgent ", " this.$element(\"typeDownload\").getInspector(", "  Text(`${this.countDownStartValue}`)\n      ", "    type: TouchType.Down,\n    }\n    console.", ".type === TouchType.Down) {\n            this", ".type === TouchType.Down) {\n          this.e", "false\n  @State countDownStartValue: number =", "mponent\nstruct CountDownComponent {\n  @Prop ", ".type === TouchType.Down) {\n        this.eve", "_TYPE).assertEqual('Down')\n      }\n      var", "          this.countDownStartValue += 1\n    ", "sCountDown ? 'Count Down' : 'Stopwatch')\n   ", "})\n            CountDownComponent({ count: t", "Download : this.typeDownload, typeNone : thi", " Button(this.isCountDown ? 'Swtich to Stopwa", ": null,\n        typeDownload : null,\n       ", " : 'Switch to Count Down')\n        .onClick(", "ctFit(ImageFit.ScaleDown)\n          .key('im", "p {\n  @State isCountDown: boolean = true\n\n  ", "    type: TouchType.Down,\n      }\n      var ", "le.log(\"webTest : onDownloadStart contentDis", "touch] eventType is Down\")\n            this.", "ue, type: TouchType.Down\n      }\n      var c", "          this.countDownStartValue -= 1\n    ", "le.log(\"webTest : onDownloadStart mimetype :", "\n        Text('Pull Down and refresh: ' + th", "  this.eventType = 'Down'\n        }\n        ", "  this.eventType = 'Down'\n      }\n      if (", " this.typeText, typeDownload : this.typeDown", "()\n        this.typeDownload = this.$element", "('textTimer notCountDown utc is\uff1a' + utc + ',"], "files": ["ResponseRegion.ets", "index.js", "ImageJsunit.test.ets", "Utils.ets", "PanGesture.ets", "touch.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "Image.ets", "textTimer.ets", "aboutToDisappear.ets", "ResponseRegionJsunit.test.ets", "refresh.ets", "sourceType.ets", "SourceTypeJsunit.test.ets", "refreshProps.test.js", "Prop.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyType", "api_method_name": "Up", "api_method_all": "Up,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 162, "since": 7, "api_used": "\u662f", "lines": [" .textCase(TextCase.UpperCase)\n        .de", "sertEqual('TextCase.UpperCase')\n      expe", "sertEqual('TextCase.UpperCase');\n      don", "  })\n      .onActionUpdate((event: PanGest", "aseValue\": TextCase.UpperCase\n          }\n", "  this.eventType = 'Up'\n        }\n        ", ".type === TouchType.Up) {\n            this", "  this.eventType = 'Up'\n          }\n      ", "    console.info(\"onUpdate\");\n        })\n ", "  this.eventType = 'Up'\n            consol", " .textCase(TextCase.UpperCase)\n           ", "sion)\n        .allowUpdate(true)\n        .", ".type === TouchType.Up) {\n          this.e", "     message: 'pinchUpdate:\\n' + message\n ", "sertEqual(\"TextCase.UpperCase\")\n      expe", "  })\n      .onActionUpdate((event: Gesture", "  this.eventType = 'Up'\n      }\n      if (", "touch] eventType is Up\")\n            this.", "    type: TouchType.Up,\n    }\n    console.", ");\n    },\n\n    pinchUpdate(event){\n       ", "      })\n        .onUpdate(() => {\n       ", ".type === TouchType.Up) {\n        this.eve"], "files": ["ResponseRegion.ets", "index.js", "PanGesture.ets", "Utils.ets", "panDirection.ets", "Video.ets", "touch.ets", "FormComponentPage.ets", "TextJsunit.test.ets", "Span.ets", "gestureMode.ets", "sourceType.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeySource", "api_method_all": "declare enum KeySource {\n  \n  Unknown,\n\n  \n  Keyboard,\n}", "api_method_name": "KeySource", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "KeySource", "api_method_name": "Unknown", "api_method_all": "Unknown,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["f (event.source === Unknown) {\n            this", "('this getHitTest : Unknown');\n            }\n  ", "tType = HitTestType.Unknown\n  controller: WebCo", " this.SourceType = 'Unknown'\n          }\n      ", "tTest = HitTestType.Unknown\n              conso"], "files": ["WebPage.ets", "sourceType.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeySource", "api_method_name": "Keyboard", "api_method_all": "Keyboard,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Edge", "api_method_all": "declare enum Edge {\n  \n  Top,\n\n  \n  Center,\n\n  \n  Bottom,\n\n  \n  Baseline,\n\n  \n  Start,\n\n  \n  Middle,\n\n  \n  End,\n}", "api_method_name": "Edge", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 26, "since": 7, "api_used": "\u662f", "lines": ["ffect: EdgeEffect = EdgeEffect.None\n\n  build", "ffectJsunit from './EdgeEffectJsunit.test.et", "      \"edgeEffect\": EdgeEffect.Spring,\n     ", "ffect: EdgeEffect = EdgeEffect.None;\n  @Stat", "ffect).assertEqual('EdgeEffect.None');\n     ", "dgeEffect: number = EdgeEffect.None\n  @State", "ffect).assertEqual('EdgeEffect.None')\n      ", " 30]\n  @State edge: Edge= Edge.Top\n  private", " @State edgeEffect: EdgeEffect = EdgeEffect.", "ffect).assertEqual('EdgeEffect.Spring');\n   ", "  })\n      .onScrollEdge((side: Edge) => {\n ", "       Text('scroll Edge')\n            .widt", "this.scroller.scrollEdge(Edge.Top)\n        }", "this.scroller.scrollEdge(Edge.Top)\n         ", "ffect).assertEqual(\"EdgeEffect.None\");\n     ", "scroller.scrollEdge(Edge.Top)\n        })\n   ", "        .edgeEffect(EdgeEffect.None)\n       ", "      \"edgeEffect\": EdgeEffect.Spring\n      ", "scroller.scrollEdge(Edge.Top)\n            })", "onScrollEdge((side: Edge) => {\n        conso", " @State edge: Edge= Edge.Top\n  private conte"], "files": ["EdgeEffectJsunit.test.ets", "swiper.ets", "list.ets", "List.ets", "ListJsunit.test.ets", "List.test.ets", "scrollCode.ets", "Scroll.ets", "edgeEffect.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Edge", "api_method_name": "Top", "api_method_all": "Top,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 174, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.TopStart)\n          .zI", "nContent: Alignment.TopStart }) {\n      Scr", "acement = Placement.TopLeft\n  @State placem", "adientDirection.LeftTop\n\n  build() {\n    Co", "acement = Placement.TopRight\n  @State place", "   Text('alignItems(Top)').fontSize(9).font", "sertEqual(Placement.TopLeft);\n      }\n     ", "         placementOnTop: this.placementOnTo", "nContent: Alignment.TopStart }) {\n      Col", "nContent: Alignment.TopStart }) {\n         ", "sertEqual(Placement.TopRight);\n      }\n    ", "('GradientDirection.Top');\n      expect(obj", "ac).align(Alignment.Top)\n      }\n      .wid", "te edge: Edge= Edge.Top\n  private content: ", "ertEqual(\"Alignment.TopStart\");\n      conso", "b3).align(Alignment.TopStart)\n        Text(", "op: this.placementOnTop,\n          onStateC", "ent.data.placementOnTop).assertEqual(false)", "nContent: Alignment.TopStart }) {\n        T", " BadgePosition.RightTop,\n            maxCou", "ignment = Alignment.TopStart;\n  @State dire", "  @State placementOnTop: boolean = false\n\n ", "ertEqual(\"Alignment.TopStart\");\n      expec", "        \"placementOnTop\": this.placementOnT", "adientDirection.LeftTop');\n      console.in", "ac).align(Alignment.Top)\n      }.width('100", "p\": this.placementOnTop,\n              }\n  ", "ler.scrollEdge(Edge.Top)\n        })\n       ", "\"align\": \"Alignment.TopStart\",\n            ", "   .align(Alignment.TopStart)\n          .he", ": GradientDirection.Top,\n        colors: [[", "b3).align(Alignment.Top)\n        Text('Seco", "\"BadgePosition.RightTop\").fontSize(16)\n    ", "s.context.fillText('Top', 60, height + 10);", "Items(VerticalAlign.Top).height('15%').bord", "ler.scrollEdge(Edge.Top)\n            })\n   ", "nContent: Alignment.Top }) {\n        Text('"], "files": ["row.ets", "direction2.ets", "placement.ets", "BadgeJsunit.test.ets", "canvas.ets", "Text.ets", "Row.ets", "Stack.ets", "TextJsunit.test.ets", "popupProps.test.js", "scrollCode.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "Scroll.ets", "AlertDialog.ets", "list.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "PlacementJsunit.test.ets", "index.js", "gradientDirection.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "badgeProps.test.js", "StackJsunit.test.ets", "bindPopup.ets", "Badge.ets", "BindPopupJsunit.test.ets", "buttonProps.test.js", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Edge", "api_method_name": "Center", "api_method_all": "Center,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1686, "since": 7, "api_used": "\u662f", "lines": ["textAlign(TextAlign.Center)\n          .fontSiz", ") {\n          Text('Center').fontSize(25)\n    ", "yContent: FlexAlign.Center\n    }) {\n      Text", "exAlign = FlexAlign.Center\n  build() {\n    Fle", "textAlign(TextAlign.Center)\n        .width('90", "ignItems: ItemAlign.Center, justifyContent: Fl", "ignItems: ItemAlign.Center,\n      justifyConte", "al('HorizontalAlign.Center');\n      console.in", "textAlign(TextAlign.Center)\n          .layoutW", "textAlign(TextAlign.Center)\n          Text('3'", "ms\":HorizontalAlign.Center\n          }\n       ", "textAlign(TextAlign.Center)\n        Text('alig", "textAlign(TextAlign.Center)\n        Text('no a", "textAlign(TextAlign.Center).fontSize(16)\n    }", "ems(HorizontalAlign.Center).width('90%').borde", "textAlign(TextAlign.Center)\n        Text('flex", "textAlign(TextAlign.Center)\n                .b", "yContent: FlexAlign.Center\n    }) {\n      Canv", "textAlign(TextAlign.Center).borderRadius(10).b", "textAlign(TextAlign.Center)\n          Text('2'", "textAlign(TextAlign.Center)\n        }\n      }.", "textAlign(TextAlign.Center)\n              .bac", "Items(VerticalAlign.Center).width('90%').heigh", "textAlign(TextAlign.Center)\n        Text('no f", "yContent: FlexAlign.Center }) {\n      Marquee(", "\"align\": \"Alignment.Center\"\n          }\n      ", "textAlign(TextAlign.Center)\n          Text('4'", "ignSelf = ItemAlign.Center;\n          break;\n ", "textAlign(TextAlign.Center)\n            .fontS", "textAlign(TextAlign.Center)\n      }\n      .key", "ignItems: ItemAlign.Center }) {\n        Text('", "ignItems: ItemAlign.Center }) {\n      Text('da", "ertEqual(\"Alignment.Center\");\n      console.in", "   .align(Alignment.Center)\n    .key('stepper'", "yContent: FlexAlign.Center }) {\n      Ellipse(", "textAlign(TextAlign.Center).fontSize(16)\n     ", "reak;\n        case 'Center':\n          this.al", "textAlign(TextAlign.Center)\n      }.width('90%"], "files": ["systemRouterA.ets", "longPressGesture.ets", "playMode.ets", "enumsHorizontalAlign.ets", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "Progress.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Swiper.ets", "OverlayJsunit.test.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "Column.ets", "scrollCode.ets", "touch.ets", "EnmusFlexAlignJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "TextArea.ets", "tapGesture.ets", "FlexJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "row.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "badge.ets", "textStyle.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "backgroundAndSizeSetting.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "bindContextMenu.ets", "divider.ets", "ScrollBar.ets", "ellipse.ets", "radio.ets", "rating.ets", "enumsFlexAlign.ets", "DataPanel.ets", "Grid.ets", "AlertDialog.ets", "RowJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "Toggle.ets", "NavigationJsunit.test.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Edge", "api_method_name": "Bottom", "api_method_all": "Bottom,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 119, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.Bottom)\n        .width('10", "adientDirection.LeftBottom\n          }\n       ", "dientDirection.RightBottom\n          }\n       ", "t: 'DialogAlignment.BottomEnd',\n            co", "ertEqual('Alignment.Bottom')\n      console.inf", "      this.placementBottom = this.$element(\"pl", "dientDirection.RightBottom');\n      console.in", "ertEqual(\"Alignment.BottomEnd\")\n      expect(o", "ertEqual('Alignment.BottomEnd')\n      console.", "nContent: Alignment.BottomEnd }) {\n        Tex", "ertEqual(\"Alignment.BottomStart\")\n      consol", " { align: Alignment.Bottom, offset: { x: 0, y:", "ignment = Alignment.Bottom\n\n  onPageShow() {\n ", ".$element(\"placementBottom\").getInspector()\n  ", "   Text('alignItems(Bottom)').fontSize(9).font", "   .align(Alignment.BottomStart)\n        .widt", "acement = Placement.BottomRight\n\n  @Builder po", "s.align = Alignment.BottomEnd;\n      } else if", "t: 'DialogAlignment.Bottom',\n            prima", "tom : this.placementBottom, placementNone : th", "Items(VerticalAlign.Bottom).justifyContent(Fle", "ertEqual(\"Alignment.Bottom\")\n      expect(obj.", "sertEqual(Placement.BottomRight);\n      }\n    ", "sertEqual(Placement.BottomLeft);\n      }\n     ", "ertEqual('Alignment.BottomStart')\n      consol", "this.currentTest = 'BottomStart'\n             ", "s.context.fillText('Bottom', 150, height - 10)", "lacement: Placement.Bottom,\n          maskColo", "adientDirection.LeftBottom');\n      console.in", "xtAlign\": Alignment.BottomEnd\n          }\n    ", "t: 'DialogAlignment.BottomStart',\n            ", "ertEqual(\"Alignment.Bottom\");\n      expect(obj", "nContent: Alignment.BottomStart }) {\n        T", "00 }\n  @State marginBottom: string = \"10px\"\n  ", "bottom: this.paddingBottom, top: this.paddingT", "l,\n        placementBottom : null,\n        pla", "acement = Placement.BottomLeft\n  @State placem", "           placementBottom : this.placementBot", ");\n    },\n\n    reachBottom(){\n        prompt.s", "px\"\n  @State paddingBottom: string= \"5\"\n  @Sta", "   .align(Alignment.BottomEnd)\n        .width(", "ignment = Alignment.Bottom\n  private content: ", " bottom: this.marginBottom, top: this.marginTo"], "files": ["placement.ets", "canvas.ets", "Text.ets", "imageFit.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "GradientDirectionJsunit.test.ets", "PositionSettingJsunit.test.ets", "touchAble.ets", "AlertDialog.ets", "positionSetting.ets", "index.js", "PlacementJsunit.test.ets", "OverlayJsunit.test.ets", "StackJsunit.test.ets", "bindPopup.ets", "row.ets", "overlay.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Edge", "api_method_name": "Baseline", "api_method_all": "Baseline,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["height);\n  }\n\n  textBaseline() {\n    let height ", "   this.context.textBaseline = 'alphabetic';\n   ", "ignSelf = ItemAlign.Baseline;\n          break;\n ", "0);\n        ctx.textBaseline = 'middle';\n       ", "   this.context.textBaseline = 'hanging';\n    th", "   this.context.textBaseline = 'top';\n    this.c", "           this.textBaseline();\n              th", "   this.context.textBaseline = 'middle';\n    thi", "';\n\n        ctx.textBaseline = 'top';\n        ct", "0);\n        ctx.textBaseline = 'bottom';\n       ", "0);\n        ctx.textBaseline = 'hanging';\n      ", "ertEqual(\"ItemAlign.Baseline\")\n      expect(obj.", "0);\n        ctx.textBaseline = 'alphabetic';\n   ", "alignSelf(ItemAlign.Baseline)\n        .borderWid", "   this.context.textBaseline = 'bottom';\n    thi", "reak;\n        case 'Baseline':\n          this.al"], "files": ["flex.ets", "TextJsunit.test.ets", "index.js", "canvas.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Edge", "api_method_name": "Start", "api_method_all": "Start,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 671, "since": 7, "api_used": "\u662f", "lines": ["log('ListItem onDragStarts, ' + extraParams)\n", "textAlign(TextAlign.Start).margin(15)\n      L", "         .onItemDragStart((event: ItemDragInf", "Equal(\"Alignment.TopStart\");\n      console.in", "ignItems: ItemAlign.Start, justifyContent: Fl", ".align(Alignment.TopStart)\n        Text('thir", "')\n          .onDragStart((event: DragEvent, ", "20).align(Alignment.Start)\n            .offse", "s.loop,\n        fromStart: this.fromStart,\n  ", "ignSelf = ItemAlign.Start;\n          break;\n ", "ertEqual('TextAlign.Start');\n      console.in", "e)\n          .onDragStart((event: DragEvent, ", "nimation complete onStart')\n          console", "ign\": \"Alignment.TopStart\",\n            \"x\": ", "   Text('alignItems(Start)').fontSize(9).font", "le.log('Ting--onDragStart--orange')\n         ", "le.log('apple onDragStart onAction')\n        ", "fo('Ting--onItemDragStart' + event.x)\n       ", "      console.info('Start')\n        })\n      ", "   \"ACTION\": 'onDragStart onAction'\n         ", "ntent: Alignment.TopStart }) {\n      Column()", "le.log('Ting--onDragStart--banana')\n         ", "20).align(Alignment.Start)\n            .posit", "ntent: Alignment.TopStart }) {\n          Row(", "reak;\n        case 'Start':\n          this.al", "op:100})\n        .onStart(() => {\n          c", "})\n          .onDragStart((event: DragEvent, ", " false\n  @State fromStart: boolean = true\n  @", "al('HorizontalAlign.Start');\n      console.in", "ertEqual(\"TextAlign.Start\");\n      console.in", ".align(Alignment.TopStart)\n          .zIndex(", "e)\n          .onDragStart(() => {\n           ", "n = HorizontalAlign.Start;\n\n  onPageShow() {\n", "ment = Alignment.TopStart;\n  @State direction", "textAlign(TextAlign.Start).margin(5)\n      Fl", "ole.log('Text onDragStarts, ' + extraParams)\n", "m: 40 })\n        .onStart(() => {\n          c", "textAlign(TextAlign.Start).margin(15)\n\n      ", "fo('Ting--onItemDragStart' + event.y)\n       ", "fromStart: this.fromStart,\n        src: this.", "Equal(\"Alignment.TopStart\");\n      expect(obj", "le.log('Ting--onDragStart--apple')\n          "], "files": ["flex.ets", "focus.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "row.ets", "DragEventJsunit.test.ets", "gridPage.ets", "canvas2.ets", "direction2.ets", "buttonProps.test.js", "canvas.ets", "Text.ets", "divider.ets", "imageFit.ets", "Stack.ets", "TextJsunit.test.ets", "SubscribaleAbstractJsunit.test.ets", "richText.ets", "column.ets", "zIndex.ets", "animationStatus.ets", "PositionSettingJsunit.test.ets", "fillMode.ets", "Prop.ets", "text.ets", "FormComponentPage.ets", "GridContainerJsunit.test.ets", "tabs.ets", "AlertDialog.ets", "WebPage.ets", "videoProps.test.js", "list.ets", "marquee.ets", "TabsJsunit.test.ets", "positionSetting.ets", "List.ets", "TabJsunit.test.ets", "GridContainer.ets", "dragEvent2.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "TextInputJsunit.test.ets", "calendar.ets", "GridItem.ets", "dragEvent.ets", "PanGesture.ets", "Marquee.ets", "Video.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "GridItem.test.ets", "textPathProps.test.js", "textInput.ets", "image.ets", "Calendar.ets", "fontWeight.ets", "imageAnimator.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "scrollCode.ets", "Column.ets", "button.ets", "span.ets", "NavigatorCode.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Edge", "api_method_name": "Middle", "api_method_all": "Middle,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["      ctx.fillText('Middle', 55, 30);\n        ", "s.context.fillText('Middle', 225, height);\n   "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Edge", "api_method_name": "End", "api_method_all": "End,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 440, "since": 7, "api_used": "\u662f", "lines": ["al('Alignment.BottomEnd')\n      console.inf", "tion = IconPosition.End;\n  @State fontStyle", "ems(HorizontalAlign.End)\n\n          GridCon", "ems(HorizontalAlign.End).width('90%').borde", "reak;\n        case 'End':\n          this.al", "olumnStart(1).columnEnd(5)\n        }\n      ", "nContent: Alignment.End }) {\n        Text('", "al('HorizontalAlign.End');\n      console.lo", "nsole.info('onActionEnd current action stat", "ntString = 'onActionEnd';\n        console.i", "++ Panel TestCase 1 End ++++++++++++++++');", "++ Panel TestCase 2 End ++++++++++++++++');", "ign(Alignment.BottomEnd)\n        .width('10", "ertEqual('Alignment.End')\n      console.inf", "ext('justifyContent(End)').fontSize(9).font", "n = Alignment.BottomEnd;\n      } else if (e", "yContent-'FlexAlign.End':\" + JSON.stringify", "ms-'HorizontalAlign.End':\" + JSON.stringify", ".align(Alignment.TopEnd)\n        .direction", "   Text('alignItems(End)').fontSize(9).font", "extAlign= TextAlign.End\n  @State lineHeight", "nContent-'FlexAlign.End':\" + JSON.stringify", "++ Panel TestCase 3 End ++++++++++++++++');", "nt: Alignment.BottomEnd }) {\n        Text('", "n\": Alignment.BottomEnd\n          }\n       ", "ssertEqual('onActionEnd')\n      }\n      let", "  })\n      .onActionEnd(() => {\n        con", "ignSelf = ItemAlign.End;\n          break;\n ", "ems(HorizontalAlign.End)\n\n        }.width('", "alignSelf(ItemAlign.End)\n        .borderWid", "   .align(Alignment.End)\n        .alignSelf", "nContent: Alignment.End }) {\n        Scroll", "ertEqual('FlexAlign.End');\n      console.lo", "nContent: FlexAlign.End,\n        }) {\n     ", "ertEqual(\"FlexAlign.End\");\n      console.lo", "  })\n      .onScrollEnd(() => {\n        con", "fyContent(FlexAlign.End)\n\n      Text('justi", "lignItems:ItemAlign.End,\n          alignCon", "ntent: Alignment.TopEnd }) {\n        Text('", "yContent: FlexAlign.End,\n          alignIte", "   }.rowStart(1).rowEnd(4)\n\n          ForEa"], "files": ["flex.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "gridPage.ets", "PieceCode.ets", "Text.ets", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "Stack.ets", "TextJsunit.test.ets", "ToggleJsunit.test.ets", "PositionSettingJsunit.test.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "AlertDialog.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "GridContainer.ets", "TabJsunit.test.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "TextInputJsunit.test.ets", "GridItem.ets", "GridItem.test.ets", "animateTransformProps.test.js", "PanGesture.ets", "scrollBar.ets", "StackJsunit.test.ets", "TextAreaJsunit.test.ets", "animateMotionProps.test.js", "NavigationJsunit.test.ets", "textareaProps.test.js", "LongPressGesture.test.ets", "Column.ets", "gestureMode.ets", "ListJsunit.test.ets", "row.ets", "scrollCode.ets", "buttonProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Week", "api_method_all": "declare enum Week {\n  \n  Mon,\n\n  \n  Tue,\n\n  \n  Wed,\n\n  \n  Thur,\n\n  \n  Fri,\n\n  \n  Sat,\n\n  \n  Sun,\n}", "api_method_name": "Week", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["info(\"[ACE_calendar_WeekStyle_weekAndDayRowS", "ed)\n        .startOfWeek(Week.Sun)\n        .", "       .startOfWeek(Week.Sun)\n        .direc", "   it('ACE_calendar_WeekStyle_weekAndDayRowS", ".log(\"[ACE_calendar_WeekStyle_weekAndDayRowS", "e)\n        .offDays(Week.Tue | Week.Wed)\n   ", "  @State weekStyle: WeekStyle = {\n    weekCo", ".offDays(Week.Tue | Week.Wed)\n        .start", "info('[ACE_calendar_WeekStyle_weekAndDayRowS"], "files": ["calendar.ets", "CalendarJsunit.test.ets", "Calendar.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Week", "api_method_name": "Mon", "api_method_all": "Mon,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 58, "since": 7, "api_used": "\u662f", "lines": ["     }, this.currentMonthday, this.preMonth", "   preData: this.preMonth,\n        nextData", "            this.curMonth.data[i].dayMarkVa", " index: 6,\n    lunarMonth: \"111\",\n    lunar", "          nonCurrentMonthOffDayMarkColor: C", "narMonth: this.lunarMonthNames[i%12],\n     ", "            this.curMonth.year = request.ye", "eMonthday, this.nextMonthday, this.calendar", "urrentData: this.curMonth,\n        preData:", "            this.preMonth.data.push({\n     ", "ay\n  };\n  @State preMonthday: MonthData = {", "State currentData_: MonthData = { year: 202", "          nonCurrentMonthLunarColor: Color.", "lunarDay: this.lunarMonthDays[i % 30],\n    ", "ntMonthday, this.preMonthday, this.nextMont", "            this.preMonth.year = request.ye", ": [] };\n  @State preMonth: MonthData = { ye", "r();\n  private lunarMonthDays: string[] = [", "               lunarMonth: this.lunarMonthN", "            this.curMonth.month = request.m", "th = request.currentMonth;\n              th", " [] };\n  @State nextMonth: MonthData = { ye", " nextData: this.nextMonth,\n        controll", "\n  @State preData_: MonthData = { year: 202", "endar {\n  @State curMonth: MonthData = { ye", "\n  @State preMonth: MonthData = { year: 0, ", "            this.curMonth.data = [];\n      ", "            this.preMonth.month = request.m", "@State preMonthday: MonthData = {\n    year:", "y\n  };\n  @State nextMonthday: MonthData = {", "          nonCurrentMonthWorkDayMarkColor: ", "            this.curMonth.data.push({\n     ", "               lunarMonth: \"five\",\n        ", "            this.preMonth.data = [];\n      ", "            this.preMonth.data[i].dayMarkVa", "\u4e09\u5341']\n  private lunarMonthNames: string[] = ", "State nextMonthday: MonthData = {\n    year:", "\n  @State curMonth: MonthData = { year: 0, ", "          nonCurrentMonthDayColor: Color.Bl", "}];\n  @State currentMonthday: MonthData = {", "  @State nextMonth: MonthData = { year: 0, ", "te currentMonthday: MonthData = {\n    year:", "  @State nextData_: MonthData = { year: 202"], "files": ["calendar.ets", "Calendar.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Week", "api_method_name": "Tue", "api_method_all": "Tue,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["      .offDays(Week.Tue | Week.Wed)\n       "], "files": ["Calendar.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Week", "api_method_name": "Wed", "api_method_all": "Wed,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ays(Week.Tue | Week.Wed)\n        .startOfWe"], "files": ["Calendar.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Week", "api_method_name": "Thur", "api_method_all": "Thur,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Week", "api_method_name": "Fri", "api_method_all": "Fri,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["  console.info('testFrictionProp START');\n ", "    */\n\n    it('testFrictionProp', 0, async", "* @tc.name      testFrictionProp\n     * @tc"], "files": ["refreshProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Week", "api_method_name": "Sat", "api_method_all": "Sat,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Week", "api_method_name": "Sun", "api_method_all": "Sun,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["  .startOfWeek(Week.Sun)\n        .direction"], "files": ["Calendar.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Direction", "api_method_all": "declare enum Direction {\n  \n  Ltr,\n\n  \n  Rtl,\n\n  \n  Auto,\n}", "api_method_name": "Direction", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 422, "since": 7, "api_used": "\u662f", "lines": ["list')\n        .listDirection(this.listDirection)", " eventData.data.listDirection;\n      }\n      if (", "ex({ direction: FlexDirection.Column, justifyCont", "layoutDirection(GridDirection.Column)\n\n      Text", "  @State direction: Direction = Direction.Rtl;\n  ", "t(300)\n      .layoutDirection(GridDirection.Colum", "n).assertEqual('FlexDirection.Row');\n      consol", "ex({ direction: FlexDirection.Column, alignItems:", "     }\n      .layoutDirection(Column)\n      .colu", "FlexDirection = FlexDirection.Row\n  private state", "       \"direction\": Direction.Ltr\n          }\n   ", "ex({ direction: FlexDirection.Column, mode:this.m", " {\n            \"listDirection\": Axis.Horizontal\n ", "ssertEqual('GradientDirection.Top');\n      expect", "ection: Direction = Direction.Rtl;\n  @State posit", "ex({ direction: FlexDirection.Row }) {\n        Te", "tate direction: FlexDirection = FlexDirection.Row", " direction: GradientDirection.Top,\n        colors", "n)\n        .key('rowDirection')\n\n        Text('po", "itionSetting004] rowDirection: \" + obj.$attrs.dir", "ssertEqual('GradientDirection.Left');\n      expec", "list')\n        .listDirection(Axis.Vertical) // \u6392", "     direction: FlexDirection.Column,\n      align", "itionSetting002] rowDirection: \" + obj.$attrs.dir", "ction).assertEqual('Direction.Ltr');\n      consol", " {\n        this.listDirection = eventData.data.li", "layoutDirection(GridDirection.ColumnReverse)\n\n   ", "SizeSetting_0200 rowDirection: \" + obj.$attrs.dir", "layoutDirection(GridDirection.Row)\n      .minCoun", "(eventData.data.listDirection != null) {\n        ", "tDirection(this.listDirection)\n        .divider({", " direction: GradientDirection.Left,\n    colors: [", "false)\n      .layoutDirection(GridDirection.Row)\n", "ction).assertEqual('Direction.Rtl');\n      consol", "pect(obj.$attrs.listDirection).assertEqual('Axis.", "ex({ direction: FlexDirection.Row, alignItems: It", "8, 9];\n  @State listDirection: Axis = Axis.Vertic", "tInspectorByKey('rowDirection');\n      console.in"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "ScrollCodeJsunit.test.ets", "Divider.ets", "scrollBar.ets", "transition.ets", "Image.ets", "List.test.ets", "scrollCode.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "PanDirectionJsunit.test.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "positionSetting.ets", "tapGesture.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "flex.ets", "marqueeProps.test.js", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "list.ets", "BackgroundJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "calendar.ets", "dragEvent.ets", "grid.ets", "Button.ets", "ScrollJsunit.test.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "rating.ets", "GradientDirectionJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "RowJsunit.test.ets", "index.js", "ohosRouterA.ets", "Link.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Direction", "api_method_name": "Ltr", "api_method_all": "Ltr,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 482, "since": 7, "api_used": "\u662f", "lines": ["ertEqual('Direction.Ltr');\n      console.in", "ull,\n        dirPropLtr : null,\n        dir", "is.$element(\"dirPropLtr\").getInspector()\n  ", "direction(Direction.Ltr)\n        .alignSelf", "  },\n    opendirPropLtr(){\n        this.$el", "             dirPropLtr : this.dirPropLtr,\n", "opLtr : this.dirPropLtr,\n             dirPr", "rection = Direction.Ltr\n  build() {\n    Col", "\n            dirPropLtr : this.dirPropLtr, ", "opLtr : this.dirPropLtr,\n            dirPro", "\n            dirPropLtr : this.dirPropLtr,\n", "opLtr : this.dirPropLtr, dirPropNone : this", "ertEqual(\"Direction.Ltr\");\n      console.in", "is.$element('dirPropLtr').show()\n    },\n   ", "ertEqual(\"Direction.Ltr\");\n      done();\n  ", "ll,\n         dirPropLtr : null,\n         di", "        this.dirPropLtr = this.$element(\"di", "rection\": Direction.Ltr\n          }\n       ", "ertEqual(\"Direction.Ltr\")\n      expect(obj."], "files": ["ratingProps.test.js", "listItemGroupProps.test.js", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "tabContentProps.test.js", "textProps.test.js", "imageAnimatorProps.test.js", "direction2.ets", "buttonProps.test.js", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "TextJsunit.test.ets", "popupProps.test.js", "refreshProps.test.js", "PositionSettingJsunit.test.ets", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "spanProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "toolbarItemProps.test.js", "videoProps.test.js", "RowJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "optionProps.test.js", "badgeProps.test.js", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "Direction2Jsunit.test.ets", "gridColProps.test.js", "panelProps.test.js", "menuProps.test.js", "gridContainerProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Direction", "api_method_name": "Rtl", "api_method_all": "Rtl,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 481, "since": 7, "api_used": "\u662f", "lines": ["direction(Direction.Rtl)\n        .alignSelf", "ll,\n         dirPropRtl : null,\n         di", "        this.dirPropRtl = this.$element(\"di", "ectPropNone, dirPropRtl : this.dirPropRtl,\n", "  },\n    opendirPropRtl(){\n        this.$el", "is.$element('dirPropRtl').show()\n    },\n   ", "ull,\n        dirPropRtl : null,\n        dir", "direction(Direction.Rtl)\n  }\n\n  onPageShow(", "rection\": Direction.Rtl,\n          }\n      ", "             dirPropRtl : this.dirPropRtl,\n", "ertEqual(\"Direction.Rtl\")\n      expect(obj.", "opRtl : this.dirPropRtl,\n            dirPro", "is.$element(\"dirPropRtl\").getInspector()\n  ", "\n            dirPropRtl : this.dirPropRtl,\n", "rection = Direction.Rtl;\n  @State position1", "ertEqual('Direction.Rtl');\n      console.in", "opRtl : this.dirPropRtl,\n             dirPr"], "files": ["ratingProps.test.js", "listItemGroupProps.test.js", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "tabContentProps.test.js", "textProps.test.js", "imageAnimatorProps.test.js", "direction2.ets", "buttonProps.test.js", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "TextJsunit.test.ets", "popupProps.test.js", "refreshProps.test.js", "PositionSettingJsunit.test.ets", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "spanProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "toolbarItemProps.test.js", "videoProps.test.js", "positionSetting.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "optionProps.test.js", "badgeProps.test.js", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "Direction2Jsunit.test.ets", "gridColProps.test.js", "panelProps.test.js", "menuProps.test.js", "gridContainerProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Direction", "api_method_name": "Auto", "api_method_all": "Auto,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 581, "since": 7, "api_used": "\u662f", "lines": ["pAuto : this.dirPropAuto,\n             dirPr", "     this.rotatePropAutoReverse = this.$elem", "\n            dirPropAuto : this.dirPropAuto,", ".objectFit(ImageFit.Auto).width(110).height(", "se : this.rotatePropAutoReverse,\n           ", "= SwiperDisplayMode.AutoLinear\n  @State edge", "is.$element(\"dirPropAuto\").getInspector()\n  ", "        this.dirPropAuto = this.$element(\"di", "ertEqual('Direction.Auto');\n      console.in", "ertEqual(\"ItemAlign.Auto\");\n      console.in", "autoReset' + this.isAutoReset).onClick(() =>", "sertEqual('BarState.Auto')\n      console.inf", "          rotatePropAutoReverse : this.rotat", "          .overlay('Auto', { align: Alignmen", "ateValue\": BarState.Auto\n          }\n       ", "emAlign = ItemAlign.Auto\n\n  build() {\n    Fl", "Style = BorderStyle.Auto;\n  @State borderRad", "pe) {\n        case 'Auto':\n          this.si", "ll,\n         dirPropAuto : null,\n         di", "rection = Direction.Auto\n  @State position: ", "ber= 30;\n  @State isAutoReset: boolean= true", "ignSelf = ItemAlign.Auto;\n      }\n    }\n  }\n", "n\", LayoutDirection.Auto);\n      let enable2", "ImageSize(ImageSize.Auto)\n        .width('90", "ertEqual('ImageSize.Auto');\n      console.in", "AutoReset = !this.isAutoReset\n        }).mar", "pAuto : this.dirPropAuto,\n            dirPro", "ignSelf = ItemAlign.Auto;\n          break;\n ", "ertEqual(\"Direction.Auto\")\n      expect(obj.", "ection\":  Direction.Auto,\n          }\n      ", "lf) {\n        case 'Auto':\n          this.al", ",\n        rotatePropAutoReverse : null,\n    ", "sizeType = SizeType.Auto;\n          break;\n ", " {\n          this.isAutoReset = !this.isAuto", "sizeType = SizeType.Auto;\n      }\n    }\n  }\n", " sizeType: SizeType.Auto, gutter: 10, margin", "al, state: BarState.Auto }) {\n          Text", "$element(\"rotatePropAutoReverse\").getInspect", "  .autoReset(this.isAutoReset)\n        .onPa", "ull,\n        dirPropAuto : null,\n        dir", "             dirPropAuto : this.dirPropAuto,", " == LayoutDirection.Auto)\n      .assertTrue;", "ertEqual(\"ItemAlign.Auto\")\n      expect(obj.", "emAlign = ItemAlign.Auto\n  @State borderStyl"], "files": ["ratingProps.test.js", "flex.ets", "listItemGroupProps.test.js", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "tabContentProps.test.js", "textProps.test.js", "ScrollBarJsunit.test.ets", "enumsImage.ets", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "imageFit.ets", "TextJsunit.test.ets", "swiper.ets", "popupProps.test.js", "gridContainerProps.test.js", "CheckboxGroupJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "EnmusImageJsunit.test.ets", "spanProps.test.js", "stepperItemProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "enumsItemAlign.ets", "toolbarItemProps.test.js", "videoProps.test.js", "RowJsunit.test.ets", "GridContainer.ets", "inputProps.test.js", "index.js", "FlexJsunit.test.ets", "optionProps.test.js", "tabBarProps.test.js", "toggleProps.test.js", "AppStorageJsunit.test.ets", "badgeProps.test.js", "border.ets", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "Direction2Jsunit.test.ets", "gridColProps.test.js", "panelProps.test.js", "ScrollBar.ets", "menuProps.test.js", "buttonProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BarState", "api_method_all": "declare enum BarState {\n  \n  Off,\n\n  \n  Auto,\n\n  \n  On,\n}", "api_method_name": "BarState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 34, "since": 7, "api_used": "\u662f", "lines": ["rollBar: BarState = BarState.On;\n  @State scroll", "llBar).assertEqual('BarState.On');\n      expect(", "on.Vertical, state: BarState.Off }) {\n          ", "Vertical).scrollBar(BarState.On)\n      .scrollBa", " @State stateValue: BarState= BarState.Off;\n\n  p", "      \"stateValue\": BarState.Auto\n          }\n  ", "  @State scrollBar: BarState= BarState.On\n  priv", "state).assertEqual('BarState.Off');\n      done()", "on.Vertical, state: BarState.On }) {\n          T", "ateValue: BarState= BarState.Off;\n\n  private sta", "crollBar: BarState= BarState.On\n  private value1", "on.Vertical, state: BarState.Auto }) {\n         ", ".Horizontal, state: BarState.Auto }) {\n         ", "      \"stateValue\":\"BarState.On\"\n          }\n   ", "state).assertEqual('BarState.On')\n      console.", "e)\n      .scrollBar(BarState.Off)\n      .scrollB", "state).assertEqual('BarState.Auto')\n      consol", "llBar).assertEqual('BarState.Off');\n      done()", "\n        .scrollBar(BarState.Off)\n        .scrol", ".Horizontal, state: BarState.On }) {\n          T", "  @State scrollBar: BarState = BarState.On;\n  @S", "      \"scrollBar\": \"BarState.Off\"\n          }\n  ", ".Horizontal, state: BarState.Off }) {\n          ", "llBar).assertEqual('BarState.Off')\n      console", "state).assertEqual('BarState.Off')\n      console"], "files": ["scrollBar.ets", "ScrollJsunit.test.ets", "canvas2.ets", "ScrollBarJsunit.test.ets", "ScrollBar.ets", "scrollCode.ets", "ScrollerBarJsunit.test.ets", "canvas.ets", "Scroll.ets", "ScrollCodeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BarState", "api_method_name": "Off", "api_method_all": "Off,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 501, "since": 7, "api_used": "\u662f", "lines": ["(eventData.data.gridOffset) {\n        this.", "pan, offset: this.smOffset },\n          md:", "ata.data.boundaryRowOffset != null) {\n     ", " {\n        this.gridOffset = eventData.data", "ridSettings009] gridOffset: \" + JSON.string", "   .onScroll((scrollOffset: number, scrollS", "gridOffset(this.gridOffset)\n        .height", "     }\n        .gridOffset(this.gridOffset)", " {\n            \"gridOffset\": 1\n          }\n", "ollOffset:' + scrollOffset)\n          conso", "ber = 2;\n  @State smOffset: number = 1;\n  @", "ata.data.boundaryRowOffset;\n        console", "ridSettings010] gridOffset: \" + JSON.string", ")\n        .key('gridOffset')\n\n        Row()", "pect(obj.$attrs.gridOffset).assertEqual(1);", " {\n            \"gridOffset\": 0x7FFFFFFF\n   ", "pect(obj.$attrs.gridOffset).assertEqual(0x7", " {\n            \"gridOffset\": 0x80000000\n   ", "ridSettings006] gridOffset: \" + JSON.string", "InspectorByKey('gridOffset');\n      console", "var offscreen = new OffscreenCanvas(300, 30", "NEOFFSET = 'baselineOffset'\nconst ATTRS_TEX", " {\n            \"gridOffset\": 'error'\n      ", "dar page boundaryRowOffset value\" + this.bo", "    this.boundaryRowOffset = eventData.data", "S_GRIDOFFSET = 'gridOffset'\nconst ATTRS_FLE", "\n          this.testOffscreenCanvas();\n    ", "ridSettings008] gridOffset: \" + JSON.string", "pect(obj.$attrs.gridOffset).assertEqual(-21", " eventData.data.gridOffset;\n      } else if", "  @State boundaryRowOffset: number = 3;\n  @", "r = 1;\n  @State gridOffset: number = 0;\n\n  ", "pan;\n        this.smOffset = eventData.data", "gify(obj.$attrs.gridOffset));\n      expect(", "height);\n  }\n\n  testOffscreenCanvas() {\n   ", "ridSettings007] gridOffset: \" + JSON.string", "pect(obj.$attrs.gridOffset).assertEqual(0);", "pect(obj.$attrs.gridOffset).assertEqual(214", "console.info('scrollOffset:' + scrollOffset"], "files": ["Shape.ets", "pathProps.test.js", "global.ets", "circleProps.test.js", "canvas2.ets", "ShapeJsunit.test.ets", "ScrollBarJsunit.test.ets", "canvas.ets", "Text.ets", "lineProps.test.js", "switchProps.test.js", "TextJsunit.test.ets", "popupProps.test.js", "Constants.ets", "polylineProps.test.js", "commonComponentJsApi.test.js", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "Scroll.ets", "CustomDialog.ets", "ellipseProps.test.js", "textClock.ets", "polygonProps.test.js", "list.ets", "List.ets", "GridContainer.ets", "enumsLineCapStyle.ets", "GridSettingsJsunit.test.ets", "index.js", "ScrollCodeJsunit.test.ets", "calendar.ets", "scrollBar.ets", "svgProps.test.js", "shape.ets", "listProps.test.js", "CalendarJsunit.test.ets", "gridSettings.ets", "ScrollJsunit.test.ets", "gridColProps.test.js", "Calendar.ets", "textPathProps.test.js", "ScrollBar.ets", "scrollCode.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BarState", "api_method_name": "Auto", "api_method_all": "Auto,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 581, "since": 7, "api_used": "\u662f", "lines": ["pAuto : this.dirPropAuto,\n             dirPr", "     this.rotatePropAutoReverse = this.$elem", "\n            dirPropAuto : this.dirPropAuto,", ".objectFit(ImageFit.Auto).width(110).height(", "se : this.rotatePropAutoReverse,\n           ", "= SwiperDisplayMode.AutoLinear\n  @State edge", "is.$element(\"dirPropAuto\").getInspector()\n  ", "        this.dirPropAuto = this.$element(\"di", "ertEqual('Direction.Auto');\n      console.in", "ertEqual(\"ItemAlign.Auto\");\n      console.in", "autoReset' + this.isAutoReset).onClick(() =>", "sertEqual('BarState.Auto')\n      console.inf", "          rotatePropAutoReverse : this.rotat", "          .overlay('Auto', { align: Alignmen", "ateValue\": BarState.Auto\n          }\n       ", "emAlign = ItemAlign.Auto\n\n  build() {\n    Fl", "Style = BorderStyle.Auto;\n  @State borderRad", "pe) {\n        case 'Auto':\n          this.si", "ll,\n         dirPropAuto : null,\n         di", "rection = Direction.Auto\n  @State position: ", "ber= 30;\n  @State isAutoReset: boolean= true", "ignSelf = ItemAlign.Auto;\n      }\n    }\n  }\n", "n\", LayoutDirection.Auto);\n      let enable2", "ImageSize(ImageSize.Auto)\n        .width('90", "ertEqual('ImageSize.Auto');\n      console.in", "AutoReset = !this.isAutoReset\n        }).mar", "pAuto : this.dirPropAuto,\n            dirPro", "ignSelf = ItemAlign.Auto;\n          break;\n ", "ertEqual(\"Direction.Auto\")\n      expect(obj.", "ection\":  Direction.Auto,\n          }\n      ", "lf) {\n        case 'Auto':\n          this.al", ",\n        rotatePropAutoReverse : null,\n    ", "sizeType = SizeType.Auto;\n          break;\n ", " {\n          this.isAutoReset = !this.isAuto", "sizeType = SizeType.Auto;\n      }\n    }\n  }\n", " sizeType: SizeType.Auto, gutter: 10, margin", "al, state: BarState.Auto }) {\n          Text", "$element(\"rotatePropAutoReverse\").getInspect", "  .autoReset(this.isAutoReset)\n        .onPa", "ull,\n        dirPropAuto : null,\n        dir", "             dirPropAuto : this.dirPropAuto,", " == LayoutDirection.Auto)\n      .assertTrue;", "ertEqual(\"ItemAlign.Auto\")\n      expect(obj.", "emAlign = ItemAlign.Auto\n  @State borderStyl"], "files": ["ratingProps.test.js", "flex.ets", "listItemGroupProps.test.js", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "tabContentProps.test.js", "textProps.test.js", "ScrollBarJsunit.test.ets", "enumsImage.ets", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "imageFit.ets", "TextJsunit.test.ets", "swiper.ets", "popupProps.test.js", "gridContainerProps.test.js", "CheckboxGroupJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "EnmusImageJsunit.test.ets", "spanProps.test.js", "stepperItemProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "enumsItemAlign.ets", "toolbarItemProps.test.js", "videoProps.test.js", "RowJsunit.test.ets", "GridContainer.ets", "inputProps.test.js", "index.js", "FlexJsunit.test.ets", "optionProps.test.js", "tabBarProps.test.js", "toggleProps.test.js", "AppStorageJsunit.test.ets", "badgeProps.test.js", "border.ets", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "Direction2Jsunit.test.ets", "gridColProps.test.js", "panelProps.test.js", "ScrollBar.ets", "menuProps.test.js", "buttonProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BarState", "api_method_name": "On", "api_method_all": "On,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1543, "since": 7, "api_used": "\u662f", "lines": ["mmands(this.commandsOne).stroke(Color.Blac", "{\n        this.widthOne = eventData.data.w", "      console.info(\"Onbounce emit action s", "      console.info(\"Onfinish emit action s", " {\n  @State commandsOne: string = 'M0 0 L9", "      console.info(\"Onstart start to emit ", "State onActionCalledOne: boolean = false;\n", "\n        this.heightOne = eventData.data.h", "var stateChangeEventOne = {\n      eventId:", "mitter.on(innerEventOne, callback1)\n      ", "e stateChangCallBackOne = (eventData) => {", " 300\n  @State heightOne: number = 10\n\n\n  o", " this.onActionCalledOne = true;\n          ", "\n          this.textOne = 'First Button on", ").height(this.heightOne).commands(this.com", "      console.info(\"Onfinish start to emit", "ackOne = (indexEventOne) => {\n        cons", ".on(stateChangeEventOne, this.stateChangCa", " this.onActionCalledOne);\n            try ", " this.onActionCalledOne,\n                }", "      console.info('Onfinish current actio", "      console.info(\"Onbounce start to emit", "h().width(this.widthOne).height(this.heigh", "mitter.on(innerEventOne, callback1);\n     ", "00 0'\n  @State widthOne: number = 300\n  @S", "stringify(indexEventOne));\n        expect(", "      console.info('Onstart current action", "exEventOne, callbackOne);\n      } catch (e", "      console.info('Onbounce current actio", "      console.info(\"Onstart emit action st", "mple {\n  @State textOne: string = ''\n  @St", "s.stateChangCallBackOne)\n\n    let sizeChan", ";\n      let callbackOne = (indexEventOne) ", "   expect(indexEventOne.data.ACTION).asser", "       this.commandsOne = eventData.data.c", "mitter.on(indexEventOne, callbackOne);\n   ", "    Button(this.textOne)\n        .backgrou", " {\n        Text('BoxOne').fontSize(9).widt", "      var innerEventOne = {\n        eventI", "\n        Text('Page One')\n          .fontS", "let stateChangeEventOne = {\n      eventId:", "      let indexEventOne = {\n        eventI"], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "canvas2.ets", "placement.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "polylineProps.test.js", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "marquee.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "dialogProps.test.js", "textArea.ets", "transition.ets", "path.ets", "scrollCode.ets", "button.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "stackProps.test.js", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "SystemAppJsunit.test.ets", "swiper.ets", "toggle.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "AnimateJsunit.test.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "Stepper.ets", "ShapeJsunit.test.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "videoProps.test.js", "MarqueeJsunit.test.ets", "List.ets", "DatePickerJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "pieceProps.test.js", "pickerProps.test.js", "listItem.ets", "selectProps.test.js", "textareaProps.test.js", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animate.ets", "direction2.ets", "canvas.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "line.ets", "ellipseProps.test.js", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "visibility.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "polygonProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "ScrollBar.ets", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EdgeEffect", "api_method_all": "declare enum EdgeEffect {\n  \n  Spring,\n\n  \n  Fade,\n\n  \n  None,\n}", "api_method_name": "EdgeEffect", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["dgeEffect: number = EdgeEffect.None\n  @State autoP", "ffect).assertEqual(\"EdgeEffect.None\");\n      done(", " @State edgeEffect: EdgeEffect = EdgeEffect.None\n\n", "ffect: EdgeEffect = EdgeEffect.None\n\n  build() {\n ", "        .edgeEffect(EdgeEffect.None)\n        .chai", "      \"edgeEffect\": EdgeEffect.Spring\n          }\n", "      \"edgeEffect\": EdgeEffect.Spring,\n          }", " @State edgeEffect: EdgeEffect = EdgeEffect.None;\n", "ffect).assertEqual('EdgeEffect.None');\n      expec", "ffect: EdgeEffect = EdgeEffect.None;\n  @State chai", "ffect).assertEqual('EdgeEffect.None')\n      expect", "ffectJsunit from './EdgeEffectJsunit.test.ets';\nim", "ffect).assertEqual('EdgeEffect.Spring');\n      con"], "files": ["EdgeEffectJsunit.test.ets", "swiper.ets", "list.ets", "List.ets", "ListJsunit.test.ets", "List.test.ets", "edgeEffect.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "EdgeEffect", "api_method_name": "Spring", "api_method_all": "Spring,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["testlistscrolleffectSpring\n      * @tc.desc   ", "ng:this.scrolleffectSpring,\n             scrol", "lement(\"scrolleffectSpring\").getInspector()\n  ", "        scrolleffectSpring:null,\n         scro", "arNone, scrolleffectSpring:this.scrolleffectSp", "testlistscrolleffectSpring', 0, async function", "Effect\": EdgeEffect.Spring\n          }\n       ", "lue.scrollEffectPropSpring); //id\n        cons", "    scrollEffectPropSpring: this.scrollEffectP", "   this.scrolleffectSpring = this.$element(\"sc", "iperScrollEffectPropSpring START');\n        co", "iperScrollEffectPropSpring', 0, async function", "rtEqual('EdgeEffect.Spring');\n      console.in", "iperScrollEffectPropSpring\n     * @tc.desc    ", "al('scrollEffectPropSpring') //ID\n        expe", "testlistscrolleffectSpring START');\n        co", "tEqual('scrolleffectSpring')\n        expect(ob", "his.scrollEffectPropSpring = this.$element(\"sc", "s.value.scrolleffectSpring);\n        console.i", "    scrollEffectPropSpring: null,\n        disp", "Effect\": EdgeEffect.Spring,\n          }\n      ", "nt(\"scrollEffectPropSpring\").getInspector()\n  ", "his.scrollEffectPropSpring,\n            displa"], "files": ["EdgeEffectJsunit.test.ets", "swiperProps.test.js", "listProps.test.js", "ListJsunit.test.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EdgeEffect", "api_method_name": "Fade", "api_method_all": "Fade,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["testlistscrolleffectFade\n      * @tc.desc   ", "iperScrollEffectPropFade\n     * @tc.desc    ", "        scrolleffectFade:this.scrolleffectFa", "nt(\"scrollEffectPropFade\").getInspector()\n  ", "his.scrollEffectPropFade = this.$element(\"sc", "lue.scrollEffectPropFade); //id\n        cons", "de:this.scrolleffectFade,\n             scrol", "s.value.scrolleffectFade);\n        console.i", "al('scrollEffectPropFade') //ID\n        expe", "tEqual('scrolleffectFade')\n        expect(ob", "iperScrollEffectPropFade START');\n        co", "    scrollEffectPropFade: null,\n        scro", "his.scrollEffectPropFade,\n            scroll", "   this.scrolleffectFade = this.$element(\"sc", "testlistscrolleffectFade', 0, async function", "iperScrollEffectPropFade', 0, async function", "    scrollEffectPropFade: this.scrollEffectP", "lement(\"scrolleffectFade\").getInspector()\n  ", "testlistscrolleffectFade START');\n        co", "        scrolleffectFade:null,\n         scro"], "files": ["swiperProps.test.js", "listProps.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EdgeEffect", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Alignment", "api_method_all": "declare enum Alignment {\n  \n  TopStart,\n\n  \n  Top,\n\n  \n  TopEnd,\n\n  \n  Start,\n\n  \n  Center,\n\n  \n  End,\n\n  \n  BottomStart,\n\n  \n  Bottom,\n\n  \n  BottomEnd,\n}", "api_method_name": "Alignment", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 112, "since": 7, "api_used": "\u662f", "lines": ["ack({ alignContent: Alignment.End }) {\n        Sc", "       \"textAlign\": Alignment.BottomEnd\n         ", "ogAlignment = DialogAlignment.Default\n  @State on", "g {\n  @State align: Alignment = Alignment.TopStar", "          \"align\": \"Alignment.TopStart\",\n        ", "c)\n          .align(Alignment.TopStart)\n         ", "ack({ alignContent: Alignment.BottomStart }) {\n  ", "ay('None', { align: Alignment.Bottom, offset: { x", "ontent: Alignment = Alignment.Bottom\n  private co", "ack({ alignContent: Alignment.Center }) {\n       ", "align).assertEqual(\"Alignment.TopStart\");\n      e", "       this.align = Alignment.BottomEnd;\n      } ", "')\n          .align(Alignment.TopStart)\n         ", "ay('Auto', { align: Alignment.Bottom, offset: { x", "align).assertEqual(\"Alignment.Bottom\");\n      exp", "lor(0xd2cab3).align(Alignment.Top)\n        Text('", " align: Alignment = Alignment.TopStart;\n  @State ", "align).assertEqual(\"Alignment.Center\");\n      con", "ack({ alignContent: Alignment.End }) {\n        Te", "          \"align\": \"Alignment.Center\"\n          }", "ack({ alignContent: Alignment.BottomEnd }) {\n    ", "ack({ alignContent: Alignment.TopStart }) {\n     ", "his.text1, { align: Alignment.Bottom, offset: { x", "  @State alignment: Alignment = Alignment.Bottom\n", "gnment: Alignment = Alignment.Bottom\n\n  onPageSho", "te alignment: DialogAlignment = DialogAlignment.D", "align).assertEqual(\"Alignment.TopStart\");\n      c", "ack({ alignContent: Alignment.Start }) {\n        ", "lor(0xc1cbac).align(Alignment.Top)\n      }\n      ", "'Contain', { align: Alignment.Bottom, offset: { x", ".fontSize(20).align(Alignment.Start)\n            ", "x\n    })\n    .align(Alignment.Center)\n    .key('s", "his.text2, { align: Alignment.Bottom, offset: { x", "lor(0xd2cab3).align(Alignment.TopStart)\n        T", "lor(0xc1cbac).align(Alignment.Top)\n      }.width(", "State alignContent: Alignment = Alignment.Bottom\n"], "files": ["Stepper.ets", "direction2.ets", "Text.ets", "imageFit.ets", "Stack.ets", "TextJsunit.test.ets", "zIndex.ets", "PositionSettingJsunit.test.ets", "customDialogController.ets", "CustomDialog.ets", "touchAble.ets", "AlertDialog.ets", "list.ets", "positionSetting.ets", "RowJsunit.test.ets", "List.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "scrollBar.ets", "StackJsunit.test.ets", "NavigationJsunit.test.ets", "scrollCode.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Alignment", "api_method_name": "TopStart", "api_method_all": "TopStart,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.TopStart)\n          .height(", "   .align(Alignment.TopStart)\n          .zIndex(", "nContent: Alignment.TopStart }) {\n          Row(", "   .align(Alignment.TopStart)\n        .alignSelf", "\"align\": \"Alignment.TopStart\",\n            \"x\": ", "ertEqual(\"Alignment.TopStart\");\n      console.in", "ertEqual(\"Alignment.TopStart\");\n      expect(obj", "ertEqual('Alignment.TopStart')\n      console.inf", "t: 'DialogAlignment.TopStart',\n            prima", "ignment = Alignment.TopStart;\n  @State direction", "nContent: Alignment.TopStart }) {\n      Scroll(t", "nContent: Alignment.TopStart }) {\n        Text('", "nContent: Alignment.TopStart }) {\n      Column()", "ertEqual(\"Alignment.TopStart\")\n      expect(obj.", "b3).align(Alignment.TopStart)\n        Text('thir"], "files": ["Stack.ets", "StackJsunit.test.ets", "AlertDialog.ets", "TextJsunit.test.ets", "list.ets", "direction2.ets", "positionSetting.ets", "List.ets", "zIndex.ets", "scrollCode.ets", "OverlayJsunit.test.ets", "Text.ets", "edgeEffect.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Alignment", "api_method_name": "Top", "api_method_all": "Top,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 174, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.TopStart)\n          .zI", "nContent: Alignment.TopStart }) {\n      Scr", "acement = Placement.TopLeft\n  @State placem", "adientDirection.LeftTop\n\n  build() {\n    Co", "acement = Placement.TopRight\n  @State place", "   Text('alignItems(Top)').fontSize(9).font", "sertEqual(Placement.TopLeft);\n      }\n     ", "         placementOnTop: this.placementOnTo", "nContent: Alignment.TopStart }) {\n      Col", "nContent: Alignment.TopStart }) {\n         ", "sertEqual(Placement.TopRight);\n      }\n    ", "('GradientDirection.Top');\n      expect(obj", "ac).align(Alignment.Top)\n      }\n      .wid", "te edge: Edge= Edge.Top\n  private content: ", "ertEqual(\"Alignment.TopStart\");\n      conso", "b3).align(Alignment.TopStart)\n        Text(", "op: this.placementOnTop,\n          onStateC", "ent.data.placementOnTop).assertEqual(false)", "nContent: Alignment.TopStart }) {\n        T", " BadgePosition.RightTop,\n            maxCou", "ignment = Alignment.TopStart;\n  @State dire", "  @State placementOnTop: boolean = false\n\n ", "ertEqual(\"Alignment.TopStart\");\n      expec", "        \"placementOnTop\": this.placementOnT", "adientDirection.LeftTop');\n      console.in", "ac).align(Alignment.Top)\n      }.width('100", "p\": this.placementOnTop,\n              }\n  ", "ler.scrollEdge(Edge.Top)\n        })\n       ", "\"align\": \"Alignment.TopStart\",\n            ", "   .align(Alignment.TopStart)\n          .he", ": GradientDirection.Top,\n        colors: [[", "b3).align(Alignment.Top)\n        Text('Seco", "\"BadgePosition.RightTop\").fontSize(16)\n    ", "s.context.fillText('Top', 60, height + 10);", "Items(VerticalAlign.Top).height('15%').bord", "ler.scrollEdge(Edge.Top)\n            })\n   ", "nContent: Alignment.Top }) {\n        Text('"], "files": ["row.ets", "direction2.ets", "placement.ets", "BadgeJsunit.test.ets", "canvas.ets", "Text.ets", "Row.ets", "Stack.ets", "TextJsunit.test.ets", "popupProps.test.js", "scrollCode.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "Scroll.ets", "AlertDialog.ets", "list.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "PlacementJsunit.test.ets", "index.js", "gradientDirection.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "badgeProps.test.js", "StackJsunit.test.ets", "bindPopup.ets", "Badge.ets", "BindPopupJsunit.test.ets", "buttonProps.test.js", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Alignment", "api_method_name": "TopEnd", "api_method_all": "TopEnd,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["nContent: Alignment.TopEnd }) {\n        Text('", "ertEqual('Alignment.TopEnd')\n      console.inf", "   .align(Alignment.TopEnd)\n        .direction", "ertEqual(\"Alignment.TopEnd\")\n      expect(obj.", "t: 'DialogAlignment.TopEnd',\n            prima"], "files": ["StackJsunit.test.ets", "AlertDialog.ets", "Stack.ets", "TextJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Alignment", "api_method_name": "Start", "api_method_all": "Start,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 671, "since": 7, "api_used": "\u662f", "lines": ["log('ListItem onDragStarts, ' + extraParams)\n", "textAlign(TextAlign.Start).margin(15)\n      L", "         .onItemDragStart((event: ItemDragInf", "Equal(\"Alignment.TopStart\");\n      console.in", "ignItems: ItemAlign.Start, justifyContent: Fl", ".align(Alignment.TopStart)\n        Text('thir", "')\n          .onDragStart((event: DragEvent, ", "20).align(Alignment.Start)\n            .offse", "s.loop,\n        fromStart: this.fromStart,\n  ", "ignSelf = ItemAlign.Start;\n          break;\n ", "ertEqual('TextAlign.Start');\n      console.in", "e)\n          .onDragStart((event: DragEvent, ", "nimation complete onStart')\n          console", "ign\": \"Alignment.TopStart\",\n            \"x\": ", "   Text('alignItems(Start)').fontSize(9).font", "le.log('Ting--onDragStart--orange')\n         ", "le.log('apple onDragStart onAction')\n        ", "fo('Ting--onItemDragStart' + event.x)\n       ", "      console.info('Start')\n        })\n      ", "   \"ACTION\": 'onDragStart onAction'\n         ", "ntent: Alignment.TopStart }) {\n      Column()", "le.log('Ting--onDragStart--banana')\n         ", "20).align(Alignment.Start)\n            .posit", "ntent: Alignment.TopStart }) {\n          Row(", "reak;\n        case 'Start':\n          this.al", "op:100})\n        .onStart(() => {\n          c", "})\n          .onDragStart((event: DragEvent, ", " false\n  @State fromStart: boolean = true\n  @", "al('HorizontalAlign.Start');\n      console.in", "ertEqual(\"TextAlign.Start\");\n      console.in", ".align(Alignment.TopStart)\n          .zIndex(", "e)\n          .onDragStart(() => {\n           ", "n = HorizontalAlign.Start;\n\n  onPageShow() {\n", "ment = Alignment.TopStart;\n  @State direction", "textAlign(TextAlign.Start).margin(5)\n      Fl", "ole.log('Text onDragStarts, ' + extraParams)\n", "m: 40 })\n        .onStart(() => {\n          c", "textAlign(TextAlign.Start).margin(15)\n\n      ", "fo('Ting--onItemDragStart' + event.y)\n       ", "fromStart: this.fromStart,\n        src: this.", "Equal(\"Alignment.TopStart\");\n      expect(obj", "le.log('Ting--onDragStart--apple')\n          "], "files": ["flex.ets", "focus.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "row.ets", "DragEventJsunit.test.ets", "gridPage.ets", "canvas2.ets", "direction2.ets", "buttonProps.test.js", "canvas.ets", "Text.ets", "divider.ets", "imageFit.ets", "Stack.ets", "TextJsunit.test.ets", "SubscribaleAbstractJsunit.test.ets", "richText.ets", "column.ets", "zIndex.ets", "animationStatus.ets", "PositionSettingJsunit.test.ets", "fillMode.ets", "Prop.ets", "text.ets", "FormComponentPage.ets", "GridContainerJsunit.test.ets", "tabs.ets", "AlertDialog.ets", "WebPage.ets", "videoProps.test.js", "list.ets", "marquee.ets", "TabsJsunit.test.ets", "positionSetting.ets", "List.ets", "TabJsunit.test.ets", "GridContainer.ets", "dragEvent2.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "TextInputJsunit.test.ets", "calendar.ets", "GridItem.ets", "dragEvent.ets", "PanGesture.ets", "Marquee.ets", "Video.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "GridItem.test.ets", "textPathProps.test.js", "textInput.ets", "image.ets", "Calendar.ets", "fontWeight.ets", "imageAnimator.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "scrollCode.ets", "Column.ets", "button.ets", "span.ets", "NavigatorCode.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Alignment", "api_method_name": "Center", "api_method_all": "Center,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1686, "since": 7, "api_used": "\u662f", "lines": ["textAlign(TextAlign.Center)\n          .fontSiz", ") {\n          Text('Center').fontSize(25)\n    ", "yContent: FlexAlign.Center\n    }) {\n      Text", "exAlign = FlexAlign.Center\n  build() {\n    Fle", "textAlign(TextAlign.Center)\n        .width('90", "ignItems: ItemAlign.Center, justifyContent: Fl", "ignItems: ItemAlign.Center,\n      justifyConte", "al('HorizontalAlign.Center');\n      console.in", "textAlign(TextAlign.Center)\n          .layoutW", "textAlign(TextAlign.Center)\n          Text('3'", "ms\":HorizontalAlign.Center\n          }\n       ", "textAlign(TextAlign.Center)\n        Text('alig", "textAlign(TextAlign.Center)\n        Text('no a", "textAlign(TextAlign.Center).fontSize(16)\n    }", "ems(HorizontalAlign.Center).width('90%').borde", "textAlign(TextAlign.Center)\n        Text('flex", "textAlign(TextAlign.Center)\n                .b", "yContent: FlexAlign.Center\n    }) {\n      Canv", "textAlign(TextAlign.Center).borderRadius(10).b", "textAlign(TextAlign.Center)\n          Text('2'", "textAlign(TextAlign.Center)\n        }\n      }.", "textAlign(TextAlign.Center)\n              .bac", "Items(VerticalAlign.Center).width('90%').heigh", "textAlign(TextAlign.Center)\n        Text('no f", "yContent: FlexAlign.Center }) {\n      Marquee(", "\"align\": \"Alignment.Center\"\n          }\n      ", "textAlign(TextAlign.Center)\n          Text('4'", "ignSelf = ItemAlign.Center;\n          break;\n ", "textAlign(TextAlign.Center)\n            .fontS", "textAlign(TextAlign.Center)\n      }\n      .key", "ignItems: ItemAlign.Center }) {\n        Text('", "ignItems: ItemAlign.Center }) {\n      Text('da", "ertEqual(\"Alignment.Center\");\n      console.in", "   .align(Alignment.Center)\n    .key('stepper'", "yContent: FlexAlign.Center }) {\n      Ellipse(", "textAlign(TextAlign.Center).fontSize(16)\n     ", "reak;\n        case 'Center':\n          this.al", "textAlign(TextAlign.Center)\n      }.width('90%"], "files": ["systemRouterA.ets", "longPressGesture.ets", "playMode.ets", "enumsHorizontalAlign.ets", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "Progress.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Swiper.ets", "OverlayJsunit.test.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "Column.ets", "scrollCode.ets", "touch.ets", "EnmusFlexAlignJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "TextArea.ets", "tapGesture.ets", "FlexJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "row.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "badge.ets", "textStyle.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "backgroundAndSizeSetting.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "bindContextMenu.ets", "divider.ets", "ScrollBar.ets", "ellipse.ets", "radio.ets", "rating.ets", "enumsFlexAlign.ets", "DataPanel.ets", "Grid.ets", "AlertDialog.ets", "RowJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "Toggle.ets", "NavigationJsunit.test.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Alignment", "api_method_name": "End", "api_method_all": "End,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 440, "since": 7, "api_used": "\u662f", "lines": ["al('Alignment.BottomEnd')\n      console.inf", "tion = IconPosition.End;\n  @State fontStyle", "ems(HorizontalAlign.End)\n\n          GridCon", "ems(HorizontalAlign.End).width('90%').borde", "reak;\n        case 'End':\n          this.al", "olumnStart(1).columnEnd(5)\n        }\n      ", "nContent: Alignment.End }) {\n        Text('", "al('HorizontalAlign.End');\n      console.lo", "nsole.info('onActionEnd current action stat", "ntString = 'onActionEnd';\n        console.i", "++ Panel TestCase 1 End ++++++++++++++++');", "++ Panel TestCase 2 End ++++++++++++++++');", "ign(Alignment.BottomEnd)\n        .width('10", "ertEqual('Alignment.End')\n      console.inf", "ext('justifyContent(End)').fontSize(9).font", "n = Alignment.BottomEnd;\n      } else if (e", "yContent-'FlexAlign.End':\" + JSON.stringify", "ms-'HorizontalAlign.End':\" + JSON.stringify", ".align(Alignment.TopEnd)\n        .direction", "   Text('alignItems(End)').fontSize(9).font", "extAlign= TextAlign.End\n  @State lineHeight", "nContent-'FlexAlign.End':\" + JSON.stringify", "++ Panel TestCase 3 End ++++++++++++++++');", "nt: Alignment.BottomEnd }) {\n        Text('", "n\": Alignment.BottomEnd\n          }\n       ", "ssertEqual('onActionEnd')\n      }\n      let", "  })\n      .onActionEnd(() => {\n        con", "ignSelf = ItemAlign.End;\n          break;\n ", "ems(HorizontalAlign.End)\n\n        }.width('", "alignSelf(ItemAlign.End)\n        .borderWid", "   .align(Alignment.End)\n        .alignSelf", "nContent: Alignment.End }) {\n        Scroll", "ertEqual('FlexAlign.End');\n      console.lo", "nContent: FlexAlign.End,\n        }) {\n     ", "ertEqual(\"FlexAlign.End\");\n      console.lo", "  })\n      .onScrollEnd(() => {\n        con", "fyContent(FlexAlign.End)\n\n      Text('justi", "lignItems:ItemAlign.End,\n          alignCon", "ntent: Alignment.TopEnd }) {\n        Text('", "yContent: FlexAlign.End,\n          alignIte", "   }.rowStart(1).rowEnd(4)\n\n          ForEa"], "files": ["flex.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "gridPage.ets", "PieceCode.ets", "Text.ets", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "Stack.ets", "TextJsunit.test.ets", "ToggleJsunit.test.ets", "PositionSettingJsunit.test.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "AlertDialog.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "GridContainer.ets", "TabJsunit.test.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "TextInputJsunit.test.ets", "GridItem.ets", "GridItem.test.ets", "animateTransformProps.test.js", "PanGesture.ets", "scrollBar.ets", "StackJsunit.test.ets", "TextAreaJsunit.test.ets", "animateMotionProps.test.js", "NavigationJsunit.test.ets", "textareaProps.test.js", "LongPressGesture.test.ets", "Column.ets", "gestureMode.ets", "ListJsunit.test.ets", "row.ets", "scrollCode.ets", "buttonProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Alignment", "api_method_name": "BottomStart", "api_method_all": "BottomStart,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["this.currentTest = 'BottomStart'\n              }\n  ", "   .align(Alignment.BottomStart)\n        .width('10", "ertEqual(\"Alignment.BottomStart\")\n      console.inf", "ertEqual('Alignment.BottomStart')\n      console.inf", "t: 'DialogAlignment.BottomStart',\n            prima", "nContent: Alignment.BottomStart }) {\n        Text('"], "files": ["StackJsunit.test.ets", "AlertDialog.ets", "Stack.ets", "TextJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Alignment", "api_method_name": "Bottom", "api_method_all": "Bottom,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 119, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.Bottom)\n        .width('10", "adientDirection.LeftBottom\n          }\n       ", "dientDirection.RightBottom\n          }\n       ", "t: 'DialogAlignment.BottomEnd',\n            co", "ertEqual('Alignment.Bottom')\n      console.inf", "      this.placementBottom = this.$element(\"pl", "dientDirection.RightBottom');\n      console.in", "ertEqual(\"Alignment.BottomEnd\")\n      expect(o", "ertEqual('Alignment.BottomEnd')\n      console.", "nContent: Alignment.BottomEnd }) {\n        Tex", "ertEqual(\"Alignment.BottomStart\")\n      consol", " { align: Alignment.Bottom, offset: { x: 0, y:", "ignment = Alignment.Bottom\n\n  onPageShow() {\n ", ".$element(\"placementBottom\").getInspector()\n  ", "   Text('alignItems(Bottom)').fontSize(9).font", "   .align(Alignment.BottomStart)\n        .widt", "acement = Placement.BottomRight\n\n  @Builder po", "s.align = Alignment.BottomEnd;\n      } else if", "t: 'DialogAlignment.Bottom',\n            prima", "tom : this.placementBottom, placementNone : th", "Items(VerticalAlign.Bottom).justifyContent(Fle", "ertEqual(\"Alignment.Bottom\")\n      expect(obj.", "sertEqual(Placement.BottomRight);\n      }\n    ", "sertEqual(Placement.BottomLeft);\n      }\n     ", "ertEqual('Alignment.BottomStart')\n      consol", "this.currentTest = 'BottomStart'\n             ", "s.context.fillText('Bottom', 150, height - 10)", "lacement: Placement.Bottom,\n          maskColo", "adientDirection.LeftBottom');\n      console.in", "xtAlign\": Alignment.BottomEnd\n          }\n    ", "t: 'DialogAlignment.BottomStart',\n            ", "ertEqual(\"Alignment.Bottom\");\n      expect(obj", "nContent: Alignment.BottomStart }) {\n        T", "00 }\n  @State marginBottom: string = \"10px\"\n  ", "bottom: this.paddingBottom, top: this.paddingT", "l,\n        placementBottom : null,\n        pla", "acement = Placement.BottomLeft\n  @State placem", "           placementBottom : this.placementBot", ");\n    },\n\n    reachBottom(){\n        prompt.s", "px\"\n  @State paddingBottom: string= \"5\"\n  @Sta", "   .align(Alignment.BottomEnd)\n        .width(", "ignment = Alignment.Bottom\n  private content: ", " bottom: this.marginBottom, top: this.marginTo"], "files": ["placement.ets", "canvas.ets", "Text.ets", "imageFit.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "GradientDirectionJsunit.test.ets", "PositionSettingJsunit.test.ets", "touchAble.ets", "AlertDialog.ets", "positionSetting.ets", "index.js", "PlacementJsunit.test.ets", "OverlayJsunit.test.ets", "StackJsunit.test.ets", "bindPopup.ets", "row.ets", "overlay.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Alignment", "api_method_name": "BottomEnd", "api_method_all": "BottomEnd,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.BottomEnd)\n        .width('10", "ertEqual(\"Alignment.BottomEnd\")\n      expect(obj.", "nContent: Alignment.BottomEnd }) {\n        Text('", "xtAlign\": Alignment.BottomEnd\n          }\n       ", "ertEqual('Alignment.BottomEnd')\n      console.inf", "s.align = Alignment.BottomEnd;\n      } else if (e", "t: 'DialogAlignment.BottomEnd',\n            confi"], "files": ["StackJsunit.test.ets", "Stack.ets", "AlertDialog.ets", "TextJsunit.test.ets", "positionSetting.ets", "PositionSettingJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TransitionType", "api_method_all": "declare enum TransitionType {\n  \n  All,\n\n  \n  Insert,\n\n  \n  Delete,\n}", "api_method_name": "TransitionType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["ransitionTypeThree: TransitionType = TransitionType.Al", "e: TransitionType = TransitionType.All\n\n  build() {\n  ", "o: TransitionType = TransitionType.Delete\n  @State tra", "e: TransitionType = TransitionType.Insert\n  @State tra", " transitionTypeTwo: TransitionType = TransitionType.De", " transitionTypeOne: TransitionType = TransitionType.In"], "files": ["transition.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TransitionType", "api_method_name": "All", "api_method_all": "All,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 613, "since": 7, "api_used": "\u662f", "lines": ["rt {describe, beforeAll, beforeEach, afterE", "ch, afterEach, afterAll, it, expect} from \""], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "CommonJsunit.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "transition.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "SystemAppJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "BasicJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "ContentStorage.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "swiperProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TransitionType", "api_method_name": "Insert", "api_method_all": "Insert,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["pe = TransitionType.Insert\n  @State transition"], "files": ["transition.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TransitionType", "api_method_name": "Delete", "api_method_all": "Delete,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["(this.arr[index] + 'Delete')\n          this.ar", " })\n  }\n  notifyDataDelete(index: number): voi", "(eventData.data.showDelete != null) {\n        ", "1\");\n      expect(isDelete)\n      .assertTrue;", "indexEvent.data.showDelete).assertEqual(true);", " {\n        this.showDelete = eventData.data.sh", " {\n        this.showDelete = true\n        try ", "lag)\n        .onItemDelete((index: number) => ", "  persistentStorage.DeleteProp(\"colorMode\");\n ", "this.arr1[index] + 'Delete')\n          this.ar", "Subscriber.aboutToBeDeleted();\n      expect(tr", "= String(AppStorage.Delete(\"PropC\"))\nvar hasVa", " eventData.data.showDelete;\n      }\n    }\n  }\n", "s.arr[index - 1] + 'Delete')\n        this.arr.", "    twoWay.aboutToBeDeleted(new SubscribedAbst", "ode)\n        .onItemDelete((index: number) => ", "talic;\n  @State showDelete :boolean = false\n  ", "    oneWay.aboutToBeDeleted(new SubscribedAbst", "\n      let aboutToBeDeleted = iPropertySubscri", "pe = TransitionType.Delete\n  @State transition", "Style)\n        .showDelete(this.showDelete)\n  ", "     listener.onDataDeleted(index)\n    })\n  }\n", "\n              \"showDelete\": this.showDelete,\n", "tMode)\n      .onItemDelete((index: number) => ", "showDelete(this.showDelete)\n        .onClose((", "owDelete\": this.showDelete,\n            }\n    ", "TART');\n      let isDelete = contentStorage.de"], "files": ["lazyForEach.ets", "list.ets", "SubscribaleAbstractJsunit.test.ets", "transition.ets", "ContentStorage.test.ets", "listItem.ets", "AppStorage.ets", "List.ets", "PieceJsunit.test.ets", "PieceCode.ets", "edgeEffect.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RelateType", "api_method_all": "declare enum RelateType {\n  \n  FILL,\n\n  \n  FIT,\n}", "api_method_name": "RelateType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RelateType", "api_method_name": "FILL", "api_method_all": "FILL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RelateType", "api_method_name": "FIT", "api_method_all": "FIT,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Visibility", "api_method_all": "declare enum Visibility {\n  \n  Visible,\n\n  \n  Hidden,\n\n  \n  None,\n}", "api_method_name": "Visibility", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 102, "since": 7, "api_used": "\u662f", "lines": [" console.info('[testVisibility02] START');\n      t", "ility).assertEqual('Visibility.Hidden');\n      con", " console.info(\"[testVisibility02] start to publish", "ility).assertEqual(\"Visibility.Visible\");\n      co", " console.info(\"[testVisibility03] obj is: \" + JSON", "  console.log(\"[testVisibility04] change component", " console.info('[testVisibility05] END');\n      don", "   });\n\n    it('testVisibility03', 0, async functi", "ility).assertEqual('Visibility.Visible');\n      co", "  console.log(\"[testVisibility02] change component", "      \"visibility\": Visibility.None,\n          }\n ", " console.info('[testVisibility04] END');\n      don", " @State visibility: Visibility = Visibility.Visibl", "  console.log(\"[testVisibility05] change component", " console.info('[testVisibility03] END');\n      don", " console.info(\"[testVisibility03] start to publish", " console.info(\"[testVisibility02] obj is: \" + JSON", " console.info(\"[testVisibility05] obj is: \" + JSON", "   });\n\n    it('testVisibility05', 0, async functi", "  console.log(\"[testVisibility03] change component", " console.info(\"[testVisibility01] obj is: \" + JSON", "   });\n\n    it('testVisibility01', 0, async functi", " console.info('[testVisibility04] START');\n      t", "   Row().visibility(Visibility.Visible).width('90%", "        .visibility(Visibility.Visible)\n          ", "   });\n\n    it('testVisibility04', 0, async functi", " console.info('[testVisibility01] START');\n      a", "ility).assertEqual('Visibility.None');\n      conso", " console.info(\"[testVisibility04] obj is: \" + JSON", " console.info('[testVisibility01] END');\n      don", "y\n@Component\nstruct VisibilityExample {\n  @State v", "      \"visibility\": Visibility.Hidden,\n          }", " console.info(\"[testVisibility04] start to publish", "   });\n\n    it('testVisibility02', 0, async functi", " console.info('[testVisibility03] START');\n      t", " console.info(\"[testVisibility05] start to publish", "ilityJsunit from './VisibilityJsunit.test.ets';\nim", " console.info('[testVisibility02] END');\n      don", "ility: Visibility = Visibility.Visible;\n\n  onPageS", " console.info('[testVisibility05] START');\n      t"], "files": ["dragEvent.ets", "visibility.ets", "CheckboxJsunit.test.ets", "VisibilityJsunit.test.ets", "TextJsunit.test.ets", "dragEvent2.ets", "List.test.ets", "Text.ets", "FormComponentPage.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Visibility", "api_method_name": "Visible", "api_method_all": "Visible,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 207, "since": 7, "api_used": "\u662f", "lines": ["ibility= Visibility.Visible\n  @State enabled: b", "bility = Visibility.Visible;\n\n  onPageShow() {\n", "sibility(this.bananaVisible)\n          .onDragS", "bility = Visibility.Visible\n  @State bananaVisi", "sible\n  @State mangoVisible: Visibility = Visib", "lity(this.strawberryVisible)\n          .onDragS", "   console.info(e.isVisible.toString())\n       ", "isibility(this.appleVisible)\n          .onDragS", "sibility(Visibility.Visible)\n          .width('", " = ''\n  @State appleVisible: Visibility = Visib", "\n  @State strawberryVisible: Visibility = Visib", "sibility(this.orangeVisible)\n          .onDragS", "bility = Visibility.Visible\n  @State select: nu", "     this.strawberryVisible = Visibility.Hidden", "bility = Visibility.Visible\n  @State orangeVisi", "        app.screenOnVisible(visible);\n      } c", "           if (!e.isVisible) {\n              th", "isibility(this.mangoVisible)\n          .onDragS", "rtEqual('Visibility.Visible');\n      console.in", "         this.bananaVisible = Visibility.Hidden", "sibility(Visibility.Visible)\n        .onAcquire", "         this.orangeVisible = Visibility.Hidden", "ible\n  @State bananaVisible: Visibility = Visib", "bility = Visibility.Visible\n  @State mangoVisib", "          this.mangoVisible = Visibility.Hidden", "bility = Visibility.Visible\n  @State strawberry", "rtEqual(\"Visibility.Visible\");\n      console.in", "sibility(this.bananaVisible)\n          .onItemD", "rtEqual(\"Visibility.Visible\")\n      expect(obj.", "          this.appleVisible = Visibility.Hidden", "sibility(Visibility.Visible).width('90%').heigh", "ible\n  @State orangeVisible: Visibility = Visib"], "files": ["dragEvent.ets", "visibility.ets", "CheckboxJsunit.test.ets", "SystemAppJsunit.test.ets", "VisibilityJsunit.test.ets", "TextJsunit.test.ets", "placement.ets", "dragEvent2.ets", "index.js", "bindPopup.ets", "Text.ets", "FormComponentPage.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Visibility", "api_method_name": "Hidden", "api_method_all": "Hidden,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 15, "since": 7, "api_used": "\u662f", "lines": ["isible = Visibility.Hidden\n            return ", "rtEqual(\"Visibility.Hidden\")\n      expect(obj.", "isible = Visibility.Hidden\n            console", "isible = Visibility.Hidden\n            let obj", "sibility(Visibility.Hidden)\n        .enabled(t", "bility\": Visibility.Hidden,\n          }\n      ", "rtEqual('Visibility.Hidden');\n      console.in"], "files": ["dragEvent.ets", "VisibilityJsunit.test.ets", "TextJsunit.test.ets", "dragEvent2.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Visibility", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LineCapStyle", "api_method_all": "declare enum LineCapStyle {\n  \n  Butt,\n\n  \n  Round,\n\n  \n  Square,\n}", "api_method_name": "LineCapStyle", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 35, "since": 7, "api_used": "\u662f", "lines": [" console.info(\"enumsLineCapStyleTest_0100 component ", "===============enumsLineCapStyle test beforeEach cal", "Cap: LineCapStyle = LineCapStyle.Butt\n  @State activ", "r)\n        .lineCap(LineCapStyle.Round)\n      Row().", "   \"strokeLineCap\": LineCapStyle.Round,\n          }\n", "7\n  @State lineCap: LineCapStyle = LineCapStyle.Butt", "t.ets';\nimport enumsLineCapStyleJsunit from './Enmus", "athJsunit();\n  enumsLineCapStyleJsunit();\n  playMode", "[20]).strokeLineCap(LineCapStyle.Round)\n      Shape(", "eforeEach push enumsLineCapStyleTest page result:' +", "j.$attrs.lineCap == LineCapStyle.Round)\n      consol", "()\n        .lineCap(LineCapStyle.Square)\n        .co", "Cap: LineCapStyle = LineCapStyle.Butt;\n  @State stro", "t(10).strokeLineCap(LineCapStyle.Butt)\n      .stroke", "beforeEach get enumsLineCapStyleTest state pages.nam", "()\n        .lineCap(LineCapStyle.Butt)\n        .stro", "beforeEach get enumsLineCapStyleTest state pages:' +", "neCap).assertEqual('LineCapStyle.Butt');\n      conso", "j.$attrs.lineCap == LineCapStyle.Square)\n      conso", " {\n  describe('enumsLineCapStyle', function () {\n   ", " console.info('enumsLineCapStyleTest_0100 END');\n   ", "Jsunit from './EnmusLineCapStyleJsunit.test.ets';\nim", "t(10).strokeLineCap(LineCapStyle.Round)\n      .strok", "eforeEach push enumsLineCapStyleTest page error:' + ", "()\n        .lineCap(LineCapStyle.Round)\n        .ver", "neCap).assertEqual('LineCapStyle.Butt');\n      done(", "neCap).assertEqual('LineCapStyle.Butt');\n      await", "  });\n\n    it('enumsLineCapStyleTest_0100', 0, async", "tate strokeLineCap: LineCapStyle = LineCapStyle.Butt", " console.info('enumsLineCapStyleTest_0100 START');\n ", "   uri: 'pages/enumsLineCapStyle',\n      }\n      try", "neCap).assertEqual('LineCapStyle.Round');\n      done"], "files": ["divider.ets", "Shape.ets", "shape.ets", "EnmusLineCapStyleJsunit.test.ets", "ShapeJsunit.test.ets", "enumsLineCapStyle.ets", "List.test.ets", "DividerJsunit.test.ets", "Divider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LineCapStyle", "api_method_name": "Butt", "api_method_all": "Butt,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 676, "since": 8, "api_used": "\u662f", "lines": ["   Column() {\n      Button('click me')\n     ", "          this.threeButtonColor = '#AFEEEE'\n", "      });\n          Button('reverse').border", "ocused'\n  @State oneButtonColor: string = '#", "is.textOne = 'First Button onBlur'\n         ", "B'\n        })\n      Button(this.textTwo)\n   ", "          this.threeButtonColor = '#FFC0CB'\n", "is.textOne = 'First Button onFocus'\n        ", ".textThree = 'Third Button onBlur'\n         ", "s.textTwo = 'Second Button onFocus'\n        ", "ey('rotate4')\n      Button(\"get Point\").padd", "\n        })\n        Button('once').key('butt", " }\n        })\n      Button('start')\n        ", "eBetween }) {\n      Button('Touch')\n        ", "s.textTwo = 'Second Button onBlur'\n         ", "Around }) {\n        Button('next')\n         ", "B'\n        })\n      Button(this.textThree)\n ", ".opacity(0.4)\n      Button(this.text)\n      ", "olor.Black)\n        Button('confirm')\n      ", "    Row() {\n        Button('reverse').key('b", "'\n          this.oneButtonColor = '#FFC0CB'\n", "groundColor(this.twoButtonColor)\n        .wi", "C0CB'\n  @State threeButtonColor: string = '#", "oundColor(this.threeButtonColor)\n        .wi", "    Row() {\n        Button('start').key('but", "FF0000'\n  @State twoButtonColor: string = '#", "n.Center,}) {\n      Button(this.show).width(", "  Row() {\n          Button('pause').borderRa", "      });\n          Button('finish').borderR", "  Row() {\n          Button('cancel').borderR", "'\n          this.twoButtonColor = '#AFEEEE'\n", "'\n          this.oneButtonColor = '#AFEEEE'\n", "\n        })\n        Button('iteration').key(", "ineCap(LineCapStyle.Butt)\n      .strokeLineJ", "his.btn1) {\n        Button() {\n          Ima", "\n        })\n        Button('pause').key('but", "groundColor(this.oneButtonColor)\n        .wi", " space:20 }){\n      Button(this.textOne)\n   ", "'\n          this.twoButtonColor = '#FFC0CB'\n", "idth('100%')\n\n      Button('edit list')\n    ", "  Row() {\n          Button('play').borderRad", "s(true)\n      .key('Butt')\n    }.width('100%", "         })\n        Button('preview')\n      ", "   Column() {\n      Button(this.changeAppear", "ceAround }) {\n      Button('disable')\n      ", "Around }) {\n        Button('cancel')\n       ", ".textThree = 'Third Button onFocus'\n        ", "      });\n          Button('update').borderR", "\n        })\n        Button('stop').key('butt"], "files": ["ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "video.ets", "placement.ets", "playMode.ets", "Navigation.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "OhosRouterJsnuit.test.ets", "marquee.ets", "textTimer.ets", "enumsLineCapStyle.ets", "Swiper.ets", "Divider.ets", "transition.ets", "textInput.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "focus.ets", "touch.ets", "XComponentPage.ets", "ButtonJsunit.test.ets", "bindMenu.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "Sidebar.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "animatorOption.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "shape.ets", "Marquee.ets", "Tab.ets", "PatternLock.ets", "textPickerDialog.ets", "ShapeJsunit.test.ets", "enable.ets", "PieceCode.ets", "badge.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "textClock.ets", "list.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "direction.ets", "Video.ets", "Button.ets", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "EnmusLineCapStyleJsunit.test.ets", "mouseEvent.ets", "ohosMatrix4.ets", "appear.ets", "animationStatus.ets", "commonComponentJsApi.test.js", "fillMode.ets", "FormComponentPage.ets", "AlertDialog.ets", "WebPage.ets", "inputProps.test.js", "index.js", "ohosRouterA.ets", "Link.ets", "timeStamp.ets", "Toggle.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "Calendar.ets", "motionPath.ets", "search.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LineCapStyle", "api_method_name": "Round", "api_method_all": "Round,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["t('testlistshapemodeRound', 0, async function", "Cap == LineCapStyle.Round)\n      console.info", "This.value.shapemodeRound);\n        console.i", "      this.shapemodeRound = this.$element(\"sh", "   testlistshapemodeRound\n      * @tc.desc   ", "Round:this.shapemodeRound, shapemodeNone:this", "ineCap(LineCapStyle.Round)\n      Shape() {\n  ", "eJoin(LineJoinStyle.Round).antiAlias(true)\n  ", "ineCap(LineCapStyle.Round)\n      Row().width(", "oin\": LineJoinStyle.Round,\n          }\n      ", "sertEqual('shapemodeRound')\n        expect(ob", "Equal('LineCapStyle.Round');\n      done();\n  ", "qual('LineJoinStyle.Round');\n      done();\n  ", "ineCap(LineCapStyle.Round)\n        .vertical(", "ineCap(LineCapStyle.Round)\n      .strokeLineJ", ".$element(\"shapemodeRound\").getInspector()\n  ", "eJoin(LineJoinStyle.Round)\n      Shape() {\n  ", ",\n         shapemodeRound:null,\n         shap", "           shapemodeRound:this.shapemodeRound", "o('testlistshapemodeRound START');\n        co", "eCap\": LineCapStyle.Round,\n          }\n      "], "files": ["divider.ets", "Shape.ets", "index.js", "listProps.test.js", "ShapeJsunit.test.ets", "enumsLineCapStyle.ets", "DividerJsunit.test.ets", "Divider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LineCapStyle", "api_method_name": "Square", "api_method_all": "Square,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["Cap == LineCapStyle.Square)\n      console.info", "ineCap(LineCapStyle.Square)\n        .color(Col"], "files": ["DividerJsunit.test.ets", "Divider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Axis", "api_method_all": "declare enum Axis {\n  \n  Vertical,\n\n  \n  Horizontal,\n}", "api_method_name": "Axis", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 33, "since": 7, "api_used": "\u662f", "lines": ["   \"listDirection\": Axis.Horizontal\n        ", "\n          lunarDayYAxisOffset: 1,\n         ", " \"decorationValue\": Axis.Horizontal\n        ", "te decorationValue: Axis = Axis.Vertical\n  @", "  @State direction: Axis= Axis.Horizontal\n  ", "Ops: {\n            xAxis: {\n                ", "         direction: Axis.Vertical\n          ", "         underscoreYAxisOffset: 1,\n         ", "     .listDirection(Axis.Vertical)\n        .", "         underscoreXAxisOffset: 1,\n         ", ": 30,\n          dayYAxisOffset: 1,\n         ", "  @State direction: Axis = Axis.Horizontal;\n", "     .listDirection(Axis.Vertical) // \u6392\u5217\u65b9\u5411\n ", "       \"direction\": Axis.Vertical,\n         ", "tate listDirection: Axis = Axis.Vertical;\n  ", "ction).assertEqual('Axis.Horizontal');\n     ", "ction).assertEqual('Axis.Vertical');\n      e", "         direction: Axis.Horizontal,\n       ", "\n        .direction(Axis.Horizontal)\n       ", "     scheduleMarkerYAxisOffset: 0,\n         ", "te direction: Axis= Axis.Horizontal\n  @State", "rationValue: Axis = Axis.Vertical\n  @State v", "stDirection: Axis = Axis.Vertical;\n  @State ", "     scheduleMarkerXAxisOffset: 0,\n         ", "e direction: Axis = Axis.Horizontal;\n  @Stat", "    },\n            yAxis: {\n                ", "ction).assertEqual('Axis.Vertical')\n      ex"], "files": ["calendar.ets", "Navigation.ets", "SliderJsunit.test.ets", "index.js", "CalendarJsunit.test.ets", "list.ets", "slider.ets", "List.ets", "Calendar.ets", "ListJsunit.test.ets", "Slider.ets", "navigation.ets", "edgeEffect.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Axis", "api_method_name": "Vertical", "api_method_all": "Vertical,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 99, "since": 7, "api_used": "\u662f", "lines": ["nValue: Axis = Axis.Vertical\n  @State value: num", "ber = 40\n  @State inVerticalSetValue: number = 4", "ble(ScrollDirection.Vertical).scrollBar(BarState", "er = 40\n  @State outVerticalSetValue: number = 4", "             this.inVerticalSetValue = value\n   ", "'ScrollBarDirection.Vertical');\n      console.in", ".listDirection(Axis.Vertical)\n        .key('Navi", " getInspectorByKey('VerticalAlign');\n      conso", "beforeEach get enumsVerticalAlign state pages.na", "th: 1 }).alignItems(VerticalAlign.Bottom).justif", "ection: Axis = Axis.Vertical;\n  @State editMode:", "n = ScrollDirection.Vertical;\n  @State scrollBar", "\n      }.alignItems(VerticalAlign.Center).height", " console.info('enumsVerticalAlignTest_0100 START", " ScrollBarDirection.Vertical;\n  @State stateValu", "'ScrollBarDirection.Vertical');\n      done();\n  ", "  \"direction\": Axis.Vertical,\n          }\n      ", "beforeEach get enumsVerticalAlign state pages:' ", "h: 1 })\n      .key('VerticalAlign')\n    }.width(", " console.info('enumsVerticalAlignTest_0100 END')", "ms: VerticalAlign = VerticalAlign.Center\n  @Stat", "   uri: 'pages/enumsVerticalAlign',\n      }\n    ", "    direction: Axis.Vertical\n          })\n      ", "ble(ScrollDirection.Vertical)\n\n        ScrollBar", "Items).assertEqual('VerticalAlign.Center');\n    ", "al('ScrollDirection.Vertical');\n      done();\n  ", ").assertEqual('Axis.Vertical');\n      expect(obj", "            this.outVerticalSetValue = value\n   ", " @State alignItems: VerticalAlign = VerticalAlig", "\": \"ScrollDirection.Vertical\"\n          }\n      ", "th: 1 }).alignItems(VerticalAlign.Center).justif", ".listDirection(Axis.Vertical) // \u6392\u5217\u65b9\u5411\n        .d", "        Text(this.inVerticalSetValue.toFixed(0))", "al('ScrollDirection.Vertical');\n      expect(obj", "1F3F5)\n\n      Text('Vertical divider').fontSize(", "eforeEach push enumsVerticalAlign page result:' ", "        if (!('enumsVerticalAlign' == pages.name", "       Text(this.outVerticalSetValue.toFixed(0))", "\n      }.alignItems(VerticalAlign.Top).height('1", "  });\n\n    it('enumsVerticalAlignTest_0100', 0, ", "\n      }.alignItems(VerticalAlign.Center).width(", "fault function enumsVerticalAlignJsunit() {\n  de", " {\n  describe('enumsVerticalAlign', function () ", "eforeEach push enumsVerticalAlign page error:' +", "     value: this.outVerticalSetValue,\n          ", "      value: this.inVerticalSetValue,\n          ", " console.info(\"enumsVerticalAlignTest_0100 compo"], "files": ["dividerProps.test.js", "canvas2.ets", "ScrollBarJsunit.test.ets", "tabsProps.test.js", "canvas.ets", "Row.ets", "Navigation.ets", "divider.ets", "enumsVerticalAlign.ets", "ScrollerBarJsunit.test.ets", "navigation.ets", "Scroll.ets", "videoProps.test.js", "EnmusHorizontalAlignJsunit.test.ets", "swiperProps.test.js", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "List.ets", "RowJsunit.test.ets", "index.js", "ScrollCodeJsunit.test.ets", "edgeEffect.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "slider.ets", "ScrollJsunit.test.ets", "Calendar.ets", "ListJsunit.test.ets", "ScrollBar.ets", "row.ets", "scrollCode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Axis", "api_method_name": "Horizontal", "api_method_all": "Horizontal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 86, "since": 7, "api_used": "\u662f", "lines": ["Items).assertEqual('HorizontalAlign.Center')\n     ", "Items).assertEqual('HorizontalAlign.End');\n      c", "  });\n\n    it('enumsHorizontalAlignTest_0100', 0, ", "   uri: 'pages/enumsHorizontalAlign',\n      }\n    ", "eforeEach push enumsHorizontalAlign page error:' +", "Items).assertEqual('HorizontalAlign.Center');\n    ", "orationValue\": Axis.Horizontal\n          }\n       ", "Column0 alignItems-'HorizontalAlign.Center':\" + JS", "istDirection\": Axis.Horizontal\n          }\n       ", "rection: Axis= Axis.Horizontal\n  @State Begin: num", ".$attrs.alignItems-'HorizontalAlign.Start':\" + JSO", " ScrollBarDirection.Horizontal\n      };\n      try ", "t.ets';\nimport enmusHorizontalAlignJsunit from './", " getInspectorByKey('HorizontalAlign');\n      conso", "eforeEach push enumsHorizontalAlign page result:' ", " {\n  describe('enumsHorizontalAlign', function () ", "Column2 alignItems-'HorizontalAlign.End':\" + JSON.", " console.info(\"enumsHorizontalAlignTest_0100 compo", "\n      }.alignItems(HorizontalAlign.Start).width('", ").assertEqual('Axis.Horizontal');\n      console.in", "\n      }.alignItems(HorizontalAlign.End).width('90", "\n      }.alignItems(HorizontalAlign.Center).width(", "beforeEach get enumsHorizontalAlign state pages:' ", "        .alignItems(HorizontalAlign.Center)\n\n     ", ": HorizontalAlign = HorizontalAlign.Start;\n\n  onPa", "Column1 alignItems-'HorizontalAlign.Start':\" + JSO", " @State alignItems: HorizontalAlign = HorizontalAl", "ingJsunit();\n  enmusHorizontalAlignJsunit();\n}", "h('100%')\n    .key('HorizontalAlign')\n  }\n}\n", "Items(this.toggle ? HorizontalAlign.Start : Horizo", "Items).assertEqual('HorizontalAlign.Start');\n     ", "       \"alignItems\":HorizontalAlign.Center\n       ", "Items).assertEqual('HorizontalAlign.Start')\n      ", "Jsunit from './EnmusHorizontalAlignJsunit.test.ets", " console.info('enumsHorizontalAlignTest_0100 START", " console.info('enumsHorizontalAlignTest_0100 END')", "    direction: Axis.Horizontal,\n          reverse:", "en }) {\n      Text('Horizontal divider').fontSize(", "beforeEach get enumsHorizontalAlign state pages.na", "ection: Axis = Axis.Horizontal;\n  @State weekStyle", "zontalAlign.Start : HorizontalAlign.Center)\n  }\n\n ", "ble(ScrollDirection.Horizontal)\n\n      Scroll() {\n", "        .alignItems(HorizontalAlign.End)\n\n        ", "        .alignItems(HorizontalAlign.Start)\n\n      ", "===============enumsHorizontalAlign test beforeEac"], "files": ["ScrollBarJsunit.test.ets", "Slider.ets", "enumsHorizontalAlign.ets", "divider.ets", "column.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "videoProps.test.js", "EnmusHorizontalAlignJsunit.test.ets", "GridContainer.ets", "index.js", "ColumnJsunit.test.ets", "calendar.ets", "progressProps.test.js", "ScrollJsunit.test.ets", "Calendar.ets", "Column.ets", "ListJsunit.test.ets", "ScrollBar.ets", "List.test.ets", "motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HorizontalAlign", "api_method_all": "declare enum HorizontalAlign {\n  \n  Start,\n\n  \n  Center,\n\n  \n  End,\n}", "api_method_name": "HorizontalAlign", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 47, "since": 7, "api_used": "\u662f", "lines": [" console.info('enumsHorizontalAlignTest_0100 END');\n   ", "t.ets';\nimport enmusHorizontalAlignJsunit from './Enmus", "\n      }.alignItems(HorizontalAlign.Center).width('90%'", "===============enumsHorizontalAlign test beforeEach cal", "Column0 alignItems-'HorizontalAlign.Center':\" + JSON.st", "Items).assertEqual('HorizontalAlign.Start');\n      cons", "zontalAlign.Start : HorizontalAlign.Center)\n  }\n\n  onPa", "Column2 alignItems-'HorizontalAlign.End':\" + JSON.strin", "Items).assertEqual('HorizontalAlign.Start')\n      conso", "        .alignItems(HorizontalAlign.Center)\n\n          ", " console.info('enumsHorizontalAlignTest_0100 START');\n ", "   uri: 'pages/enumsHorizontalAlign',\n      }\n      try", "beforeEach get enumsHorizontalAlign state pages:' + JSO", ".$attrs.alignItems-'HorizontalAlign.Start':\" + JSON.str", "  });\n\n    it('enumsHorizontalAlignTest_0100', 0, async", "       \"alignItems\":HorizontalAlign.Center\n          }\n", "Column1 alignItems-'HorizontalAlign.Start':\" + JSON.str", "\n      }.alignItems(HorizontalAlign.Start).width('90%')", "eforeEach push enumsHorizontalAlign page error:' + err)", ".$attrs.alignItems-'HorizontalAlign.Center':\" + JSON.st", " @State alignItems: HorizontalAlign = HorizontalAlign.S", "\n      }.alignItems(HorizontalAlign.End).width('90%').b", "Items).assertEqual('HorizontalAlign.End');\n      consol", ": HorizontalAlign = HorizontalAlign.Start;\n\n  onPageSho", ".$attrs.alignItems-'HorizontalAlign.End':\" + JSON.strin", "ingJsunit();\n  enmusHorizontalAlignJsunit();\n}", "h('100%')\n    .key('HorizontalAlign')\n  }\n}\n", "beforeEach get enumsHorizontalAlign state pages.name:' ", "        .alignItems(HorizontalAlign.End)\n\n          Gri", "        .alignItems(HorizontalAlign.End)\n\n        }.wid", " {\n  describe('enumsHorizontalAlign', function () {\n   ", "        .alignItems(HorizontalAlign.Start)\n\n          T", " console.info(\"enumsHorizontalAlignTest_0100 component ", "Jsunit from './EnmusHorizontalAlignJsunit.test.ets';\n\ne", "Items).assertEqual('HorizontalAlign.Center')\n      cons", "Items(this.toggle ? HorizontalAlign.Start : HorizontalA", "eforeEach push enumsHorizontalAlign page result:' + JSO", " getInspectorByKey('HorizontalAlign');\n      console.in", "Items).assertEqual('HorizontalAlign.Center');\n      con"], "files": ["GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "List.test.ets", "column.ets", "Column.ets", "motionPath.ets", "GridContainer.ets", "enumsHorizontalAlign.ets", "ColumnJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HorizontalAlign", "api_method_name": "Start", "api_method_all": "Start,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 671, "since": 7, "api_used": "\u662f", "lines": ["log('ListItem onDragStarts, ' + extraParams)\n", "textAlign(TextAlign.Start).margin(15)\n      L", "         .onItemDragStart((event: ItemDragInf", "Equal(\"Alignment.TopStart\");\n      console.in", "ignItems: ItemAlign.Start, justifyContent: Fl", ".align(Alignment.TopStart)\n        Text('thir", "')\n          .onDragStart((event: DragEvent, ", "20).align(Alignment.Start)\n            .offse", "s.loop,\n        fromStart: this.fromStart,\n  ", "ignSelf = ItemAlign.Start;\n          break;\n ", "ertEqual('TextAlign.Start');\n      console.in", "e)\n          .onDragStart((event: DragEvent, ", "nimation complete onStart')\n          console", "ign\": \"Alignment.TopStart\",\n            \"x\": ", "   Text('alignItems(Start)').fontSize(9).font", "le.log('Ting--onDragStart--orange')\n         ", "le.log('apple onDragStart onAction')\n        ", "fo('Ting--onItemDragStart' + event.x)\n       ", "      console.info('Start')\n        })\n      ", "   \"ACTION\": 'onDragStart onAction'\n         ", "ntent: Alignment.TopStart }) {\n      Column()", "le.log('Ting--onDragStart--banana')\n         ", "20).align(Alignment.Start)\n            .posit", "ntent: Alignment.TopStart }) {\n          Row(", "reak;\n        case 'Start':\n          this.al", "op:100})\n        .onStart(() => {\n          c", "})\n          .onDragStart((event: DragEvent, ", " false\n  @State fromStart: boolean = true\n  @", "al('HorizontalAlign.Start');\n      console.in", "ertEqual(\"TextAlign.Start\");\n      console.in", ".align(Alignment.TopStart)\n          .zIndex(", "e)\n          .onDragStart(() => {\n           ", "n = HorizontalAlign.Start;\n\n  onPageShow() {\n", "ment = Alignment.TopStart;\n  @State direction", "textAlign(TextAlign.Start).margin(5)\n      Fl", "ole.log('Text onDragStarts, ' + extraParams)\n", "m: 40 })\n        .onStart(() => {\n          c", "textAlign(TextAlign.Start).margin(15)\n\n      ", "fo('Ting--onItemDragStart' + event.y)\n       ", "fromStart: this.fromStart,\n        src: this.", "Equal(\"Alignment.TopStart\");\n      expect(obj", "le.log('Ting--onDragStart--apple')\n          "], "files": ["flex.ets", "focus.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "row.ets", "DragEventJsunit.test.ets", "gridPage.ets", "canvas2.ets", "direction2.ets", "buttonProps.test.js", "canvas.ets", "Text.ets", "divider.ets", "imageFit.ets", "Stack.ets", "TextJsunit.test.ets", "SubscribaleAbstractJsunit.test.ets", "richText.ets", "column.ets", "zIndex.ets", "animationStatus.ets", "PositionSettingJsunit.test.ets", "fillMode.ets", "Prop.ets", "text.ets", "FormComponentPage.ets", "GridContainerJsunit.test.ets", "tabs.ets", "AlertDialog.ets", "WebPage.ets", "videoProps.test.js", "list.ets", "marquee.ets", "TabsJsunit.test.ets", "positionSetting.ets", "List.ets", "TabJsunit.test.ets", "GridContainer.ets", "dragEvent2.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "TextInputJsunit.test.ets", "calendar.ets", "GridItem.ets", "dragEvent.ets", "PanGesture.ets", "Marquee.ets", "Video.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "GridItem.test.ets", "textPathProps.test.js", "textInput.ets", "image.ets", "Calendar.ets", "fontWeight.ets", "imageAnimator.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "scrollCode.ets", "Column.ets", "button.ets", "span.ets", "NavigatorCode.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HorizontalAlign", "api_method_name": "Center", "api_method_all": "Center,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1686, "since": 7, "api_used": "\u662f", "lines": ["textAlign(TextAlign.Center)\n          .fontSiz", ") {\n          Text('Center').fontSize(25)\n    ", "yContent: FlexAlign.Center\n    }) {\n      Text", "exAlign = FlexAlign.Center\n  build() {\n    Fle", "textAlign(TextAlign.Center)\n        .width('90", "ignItems: ItemAlign.Center, justifyContent: Fl", "ignItems: ItemAlign.Center,\n      justifyConte", "al('HorizontalAlign.Center');\n      console.in", "textAlign(TextAlign.Center)\n          .layoutW", "textAlign(TextAlign.Center)\n          Text('3'", "ms\":HorizontalAlign.Center\n          }\n       ", "textAlign(TextAlign.Center)\n        Text('alig", "textAlign(TextAlign.Center)\n        Text('no a", "textAlign(TextAlign.Center).fontSize(16)\n    }", "ems(HorizontalAlign.Center).width('90%').borde", "textAlign(TextAlign.Center)\n        Text('flex", "textAlign(TextAlign.Center)\n                .b", "yContent: FlexAlign.Center\n    }) {\n      Canv", "textAlign(TextAlign.Center).borderRadius(10).b", "textAlign(TextAlign.Center)\n          Text('2'", "textAlign(TextAlign.Center)\n        }\n      }.", "textAlign(TextAlign.Center)\n              .bac", "Items(VerticalAlign.Center).width('90%').heigh", "textAlign(TextAlign.Center)\n        Text('no f", "yContent: FlexAlign.Center }) {\n      Marquee(", "\"align\": \"Alignment.Center\"\n          }\n      ", "textAlign(TextAlign.Center)\n          Text('4'", "ignSelf = ItemAlign.Center;\n          break;\n ", "textAlign(TextAlign.Center)\n            .fontS", "textAlign(TextAlign.Center)\n      }\n      .key", "ignItems: ItemAlign.Center }) {\n        Text('", "ignItems: ItemAlign.Center }) {\n      Text('da", "ertEqual(\"Alignment.Center\");\n      console.in", "   .align(Alignment.Center)\n    .key('stepper'", "yContent: FlexAlign.Center }) {\n      Ellipse(", "textAlign(TextAlign.Center).fontSize(16)\n     ", "reak;\n        case 'Center':\n          this.al", "textAlign(TextAlign.Center)\n      }.width('90%"], "files": ["systemRouterA.ets", "longPressGesture.ets", "playMode.ets", "enumsHorizontalAlign.ets", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "Progress.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Swiper.ets", "OverlayJsunit.test.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "Column.ets", "scrollCode.ets", "touch.ets", "EnmusFlexAlignJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "TextArea.ets", "tapGesture.ets", "FlexJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "row.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "badge.ets", "textStyle.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "backgroundAndSizeSetting.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "bindContextMenu.ets", "divider.ets", "ScrollBar.ets", "ellipse.ets", "radio.ets", "rating.ets", "enumsFlexAlign.ets", "DataPanel.ets", "Grid.ets", "AlertDialog.ets", "RowJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "Toggle.ets", "NavigationJsunit.test.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HorizontalAlign", "api_method_name": "End", "api_method_all": "End,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 440, "since": 7, "api_used": "\u662f", "lines": ["al('Alignment.BottomEnd')\n      console.inf", "tion = IconPosition.End;\n  @State fontStyle", "ems(HorizontalAlign.End)\n\n          GridCon", "ems(HorizontalAlign.End).width('90%').borde", "reak;\n        case 'End':\n          this.al", "olumnStart(1).columnEnd(5)\n        }\n      ", "nContent: Alignment.End }) {\n        Text('", "al('HorizontalAlign.End');\n      console.lo", "nsole.info('onActionEnd current action stat", "ntString = 'onActionEnd';\n        console.i", "++ Panel TestCase 1 End ++++++++++++++++');", "++ Panel TestCase 2 End ++++++++++++++++');", "ign(Alignment.BottomEnd)\n        .width('10", "ertEqual('Alignment.End')\n      console.inf", "ext('justifyContent(End)').fontSize(9).font", "n = Alignment.BottomEnd;\n      } else if (e", "yContent-'FlexAlign.End':\" + JSON.stringify", "ms-'HorizontalAlign.End':\" + JSON.stringify", ".align(Alignment.TopEnd)\n        .direction", "   Text('alignItems(End)').fontSize(9).font", "extAlign= TextAlign.End\n  @State lineHeight", "nContent-'FlexAlign.End':\" + JSON.stringify", "++ Panel TestCase 3 End ++++++++++++++++');", "nt: Alignment.BottomEnd }) {\n        Text('", "n\": Alignment.BottomEnd\n          }\n       ", "ssertEqual('onActionEnd')\n      }\n      let", "  })\n      .onActionEnd(() => {\n        con", "ignSelf = ItemAlign.End;\n          break;\n ", "ems(HorizontalAlign.End)\n\n        }.width('", "alignSelf(ItemAlign.End)\n        .borderWid", "   .align(Alignment.End)\n        .alignSelf", "nContent: Alignment.End }) {\n        Scroll", "ertEqual('FlexAlign.End');\n      console.lo", "nContent: FlexAlign.End,\n        }) {\n     ", "ertEqual(\"FlexAlign.End\");\n      console.lo", "  })\n      .onScrollEnd(() => {\n        con", "fyContent(FlexAlign.End)\n\n      Text('justi", "lignItems:ItemAlign.End,\n          alignCon", "ntent: Alignment.TopEnd }) {\n        Text('", "yContent: FlexAlign.End,\n          alignIte", "   }.rowStart(1).rowEnd(4)\n\n          ForEa"], "files": ["flex.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "gridPage.ets", "PieceCode.ets", "Text.ets", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "Stack.ets", "TextJsunit.test.ets", "ToggleJsunit.test.ets", "PositionSettingJsunit.test.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "AlertDialog.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "GridContainer.ets", "TabJsunit.test.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "TextInputJsunit.test.ets", "GridItem.ets", "GridItem.test.ets", "animateTransformProps.test.js", "PanGesture.ets", "scrollBar.ets", "StackJsunit.test.ets", "TextAreaJsunit.test.ets", "animateMotionProps.test.js", "NavigationJsunit.test.ets", "textareaProps.test.js", "LongPressGesture.test.ets", "Column.ets", "gestureMode.ets", "ListJsunit.test.ets", "row.ets", "scrollCode.ets", "buttonProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexAlign", "api_method_all": "declare enum FlexAlign {\n  \n  Start,\n\n  \n  Center,\n\n  \n  End,\n\n  \n  SpaceBetween,\n\n  \n  SpaceAround,\n\n  \n  SpaceEvenly,\n}", "api_method_name": "FlexAlign", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 133, "since": 7, "api_used": "\u662f", "lines": ["    justifyContent: FlexAlign.Center\n    }) {\n   ", "Items).assertEqual('FlexAlign.SpaceEvenly');\n    ", "ntent).assertEqual('FlexAlign.Center');\n      con", "er, justifyContent: FlexAlign.Center }) {\n      E", "er, justifyContent: FlexAlign.SpaceBetween }) {\n ", "er, justifyContent: FlexAlign.Center}) {\n      Te", "rt, justifyContent: FlexAlign.Start }) {\n      Sc", "er, justifyContent: FlexAlign.Center }) {\n      M", "ontent: FlexAlign = FlexAlign.Center\n  build() {\n", "x({ justifyContent: FlexAlign.SpaceEvenly, alignI", "er, justifyContent: FlexAlign.Center }) {\n      T", "n, justifyContent:  FlexAlign.SpaceBetween, align", "er, justifyContent: FlexAlign.SpaceAround }) {\n  ", "ate justifyContent: FlexAlign = FlexAlign.Center\n", "mn, justifyContent: FlexAlign.Center, alignItems:", "   uri: 'pages/enumsFlexAlign',\n      }\n      try", "rt, justifyContent: FlexAlign.SpaceBetween }) {\n ", "x({ justifyContent: FlexAlign.SpaceAround, alignI", "x({ justifyContent: FlexAlign.SpaceAround }) {\n  ", "    justifyContent: FlexAlign.Center }) {\n      B", "x({ justifyContent: FlexAlign.SpaceBetween }) {\n ", "    justifyContent: FlexAlign.Center }) {\n      C"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "Qrcode.ets", "Span.ets", "richText.ets", "Progress.ets", "CustomDialog.ets", "marquee.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "Image.ets", "path.ets", "button.ets", "polyline.ets", "touch.ets", "EnmusFlexAlignJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "EnmusItemAlignJsunit.test.ets", "tapGesture.ets", "FlexJsunit.test.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "row.ets", "Marquee.ets", "PatternLock.ets", "Polyline.ets", "textPickerDialog.ets", "gridPage.ets", "enable.ets", "polygon.ets", "badge.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "calendar.ets", "dragEvent.ets", "circle.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "ellipse.ets", "radio.ets", "rating.ets", "Path.ets", "enumsFlexAlign.ets", "DataPanel.ets", "FormComponentPage.ets", "ohosRouterA.ets", "Link.ets", "Toggle.ets", "gestureMode.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexAlign", "api_method_name": "Start", "api_method_all": "Start,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 671, "since": 7, "api_used": "\u662f", "lines": ["log('ListItem onDragStarts, ' + extraParams)\n", "textAlign(TextAlign.Start).margin(15)\n      L", "         .onItemDragStart((event: ItemDragInf", "Equal(\"Alignment.TopStart\");\n      console.in", "ignItems: ItemAlign.Start, justifyContent: Fl", ".align(Alignment.TopStart)\n        Text('thir", "')\n          .onDragStart((event: DragEvent, ", "20).align(Alignment.Start)\n            .offse", "s.loop,\n        fromStart: this.fromStart,\n  ", "ignSelf = ItemAlign.Start;\n          break;\n ", "ertEqual('TextAlign.Start');\n      console.in", "e)\n          .onDragStart((event: DragEvent, ", "nimation complete onStart')\n          console", "ign\": \"Alignment.TopStart\",\n            \"x\": ", "   Text('alignItems(Start)').fontSize(9).font", "le.log('Ting--onDragStart--orange')\n         ", "le.log('apple onDragStart onAction')\n        ", "fo('Ting--onItemDragStart' + event.x)\n       ", "      console.info('Start')\n        })\n      ", "   \"ACTION\": 'onDragStart onAction'\n         ", "ntent: Alignment.TopStart }) {\n      Column()", "le.log('Ting--onDragStart--banana')\n         ", "20).align(Alignment.Start)\n            .posit", "ntent: Alignment.TopStart }) {\n          Row(", "reak;\n        case 'Start':\n          this.al", "op:100})\n        .onStart(() => {\n          c", "})\n          .onDragStart((event: DragEvent, ", " false\n  @State fromStart: boolean = true\n  @", "al('HorizontalAlign.Start');\n      console.in", "ertEqual(\"TextAlign.Start\");\n      console.in", ".align(Alignment.TopStart)\n          .zIndex(", "e)\n          .onDragStart(() => {\n           ", "n = HorizontalAlign.Start;\n\n  onPageShow() {\n", "ment = Alignment.TopStart;\n  @State direction", "textAlign(TextAlign.Start).margin(5)\n      Fl", "ole.log('Text onDragStarts, ' + extraParams)\n", "m: 40 })\n        .onStart(() => {\n          c", "textAlign(TextAlign.Start).margin(15)\n\n      ", "fo('Ting--onItemDragStart' + event.y)\n       ", "fromStart: this.fromStart,\n        src: this.", "Equal(\"Alignment.TopStart\");\n      expect(obj", "le.log('Ting--onDragStart--apple')\n          "], "files": ["flex.ets", "focus.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "row.ets", "DragEventJsunit.test.ets", "gridPage.ets", "canvas2.ets", "direction2.ets", "buttonProps.test.js", "canvas.ets", "Text.ets", "divider.ets", "imageFit.ets", "Stack.ets", "TextJsunit.test.ets", "SubscribaleAbstractJsunit.test.ets", "richText.ets", "column.ets", "zIndex.ets", "animationStatus.ets", "PositionSettingJsunit.test.ets", "fillMode.ets", "Prop.ets", "text.ets", "FormComponentPage.ets", "GridContainerJsunit.test.ets", "tabs.ets", "AlertDialog.ets", "WebPage.ets", "videoProps.test.js", "list.ets", "marquee.ets", "TabsJsunit.test.ets", "positionSetting.ets", "List.ets", "TabJsunit.test.ets", "GridContainer.ets", "dragEvent2.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "TextInputJsunit.test.ets", "calendar.ets", "GridItem.ets", "dragEvent.ets", "PanGesture.ets", "Marquee.ets", "Video.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "GridItem.test.ets", "textPathProps.test.js", "textInput.ets", "image.ets", "Calendar.ets", "fontWeight.ets", "imageAnimator.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "scrollCode.ets", "Column.ets", "button.ets", "span.ets", "NavigatorCode.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexAlign", "api_method_name": "Center", "api_method_all": "Center,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1686, "since": 7, "api_used": "\u662f", "lines": ["textAlign(TextAlign.Center)\n          .fontSiz", ") {\n          Text('Center').fontSize(25)\n    ", "yContent: FlexAlign.Center\n    }) {\n      Text", "exAlign = FlexAlign.Center\n  build() {\n    Fle", "textAlign(TextAlign.Center)\n        .width('90", "ignItems: ItemAlign.Center, justifyContent: Fl", "ignItems: ItemAlign.Center,\n      justifyConte", "al('HorizontalAlign.Center');\n      console.in", "textAlign(TextAlign.Center)\n          .layoutW", "textAlign(TextAlign.Center)\n          Text('3'", "ms\":HorizontalAlign.Center\n          }\n       ", "textAlign(TextAlign.Center)\n        Text('alig", "textAlign(TextAlign.Center)\n        Text('no a", "textAlign(TextAlign.Center).fontSize(16)\n    }", "ems(HorizontalAlign.Center).width('90%').borde", "textAlign(TextAlign.Center)\n        Text('flex", "textAlign(TextAlign.Center)\n                .b", "yContent: FlexAlign.Center\n    }) {\n      Canv", "textAlign(TextAlign.Center).borderRadius(10).b", "textAlign(TextAlign.Center)\n          Text('2'", "textAlign(TextAlign.Center)\n        }\n      }.", "textAlign(TextAlign.Center)\n              .bac", "Items(VerticalAlign.Center).width('90%').heigh", "textAlign(TextAlign.Center)\n        Text('no f", "yContent: FlexAlign.Center }) {\n      Marquee(", "\"align\": \"Alignment.Center\"\n          }\n      ", "textAlign(TextAlign.Center)\n          Text('4'", "ignSelf = ItemAlign.Center;\n          break;\n ", "textAlign(TextAlign.Center)\n            .fontS", "textAlign(TextAlign.Center)\n      }\n      .key", "ignItems: ItemAlign.Center }) {\n        Text('", "ignItems: ItemAlign.Center }) {\n      Text('da", "ertEqual(\"Alignment.Center\");\n      console.in", "   .align(Alignment.Center)\n    .key('stepper'", "yContent: FlexAlign.Center }) {\n      Ellipse(", "textAlign(TextAlign.Center).fontSize(16)\n     ", "reak;\n        case 'Center':\n          this.al", "textAlign(TextAlign.Center)\n      }.width('90%"], "files": ["systemRouterA.ets", "longPressGesture.ets", "playMode.ets", "enumsHorizontalAlign.ets", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "Progress.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Swiper.ets", "OverlayJsunit.test.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "Column.ets", "scrollCode.ets", "touch.ets", "EnmusFlexAlignJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "TextArea.ets", "tapGesture.ets", "FlexJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "row.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "badge.ets", "textStyle.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "backgroundAndSizeSetting.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "bindContextMenu.ets", "divider.ets", "ScrollBar.ets", "ellipse.ets", "radio.ets", "rating.ets", "enumsFlexAlign.ets", "DataPanel.ets", "Grid.ets", "AlertDialog.ets", "RowJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "Toggle.ets", "NavigationJsunit.test.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexAlign", "api_method_name": "End", "api_method_all": "End,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 440, "since": 7, "api_used": "\u662f", "lines": ["al('Alignment.BottomEnd')\n      console.inf", "tion = IconPosition.End;\n  @State fontStyle", "ems(HorizontalAlign.End)\n\n          GridCon", "ems(HorizontalAlign.End).width('90%').borde", "reak;\n        case 'End':\n          this.al", "olumnStart(1).columnEnd(5)\n        }\n      ", "nContent: Alignment.End }) {\n        Text('", "al('HorizontalAlign.End');\n      console.lo", "nsole.info('onActionEnd current action stat", "ntString = 'onActionEnd';\n        console.i", "++ Panel TestCase 1 End ++++++++++++++++');", "++ Panel TestCase 2 End ++++++++++++++++');", "ign(Alignment.BottomEnd)\n        .width('10", "ertEqual('Alignment.End')\n      console.inf", "ext('justifyContent(End)').fontSize(9).font", "n = Alignment.BottomEnd;\n      } else if (e", "yContent-'FlexAlign.End':\" + JSON.stringify", "ms-'HorizontalAlign.End':\" + JSON.stringify", ".align(Alignment.TopEnd)\n        .direction", "   Text('alignItems(End)').fontSize(9).font", "extAlign= TextAlign.End\n  @State lineHeight", "nContent-'FlexAlign.End':\" + JSON.stringify", "++ Panel TestCase 3 End ++++++++++++++++');", "nt: Alignment.BottomEnd }) {\n        Text('", "n\": Alignment.BottomEnd\n          }\n       ", "ssertEqual('onActionEnd')\n      }\n      let", "  })\n      .onActionEnd(() => {\n        con", "ignSelf = ItemAlign.End;\n          break;\n ", "ems(HorizontalAlign.End)\n\n        }.width('", "alignSelf(ItemAlign.End)\n        .borderWid", "   .align(Alignment.End)\n        .alignSelf", "nContent: Alignment.End }) {\n        Scroll", "ertEqual('FlexAlign.End');\n      console.lo", "nContent: FlexAlign.End,\n        }) {\n     ", "ertEqual(\"FlexAlign.End\");\n      console.lo", "  })\n      .onScrollEnd(() => {\n        con", "fyContent(FlexAlign.End)\n\n      Text('justi", "lignItems:ItemAlign.End,\n          alignCon", "ntent: Alignment.TopEnd }) {\n        Text('", "yContent: FlexAlign.End,\n          alignIte", "   }.rowStart(1).rowEnd(4)\n\n          ForEa"], "files": ["flex.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "gridPage.ets", "PieceCode.ets", "Text.ets", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "Stack.ets", "TextJsunit.test.ets", "ToggleJsunit.test.ets", "PositionSettingJsunit.test.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "AlertDialog.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "GridContainer.ets", "TabJsunit.test.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "TextInputJsunit.test.ets", "GridItem.ets", "GridItem.test.ets", "animateTransformProps.test.js", "PanGesture.ets", "scrollBar.ets", "StackJsunit.test.ets", "TextAreaJsunit.test.ets", "animateMotionProps.test.js", "NavigationJsunit.test.ets", "textareaProps.test.js", "LongPressGesture.test.ets", "Column.ets", "gestureMode.ets", "ListJsunit.test.ets", "row.ets", "scrollCode.ets", "buttonProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexAlign", "api_method_name": "SpaceBetween", "api_method_all": "SpaceBetween,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["yContent: FlexAlign.SpaceBetween }) {\n      Text('st", "yContent: FlexAlign.SpaceBetween }) {\n      Text('li", "yContent: FlexAlign.SpaceBetween }) {\n      Navigato", "yContent-'FlexAlign.SpaceBetween':\" + JSON.stringify", "yContent: FlexAlign.SpaceBetween }) {\n      Text('Ba", "ertEqual('FlexAlign.SpaceBetween');\n      console.lo", "Content:  FlexAlign.SpaceBetween, alignItems: ItemAl", "yContent: FlexAlign.SpaceBetween }) {\n      Text('Pa", "yContent: FlexAlign.SpaceBetween }) {\n      Text('Cl", "yContent: FlexAlign.SpaceBetween }) {\n      Calendar", "yContent: FlexAlign.SpaceBetween }) {\n      Text('se", "yContent: FlexAlign.SpaceBetween }) {\n      Text('Lo", "yContent: FlexAlign.SpaceBetween }) {\n      Text('cu", "yContent: FlexAlign.SpaceBetween }) {\n      Text('Ho", "yContent: FlexAlign.SpaceBetween }) {\n      Button('", "yContent: FlexAlign.SpaceBetween,\n          wrap: Fl", "yContent: FlexAlign.SpaceBetween }) {\n        ForEac", "ext('justifyContent:SpaceBetween').fontSize(9).fontC"], "files": ["calendar.ets", "divider.ets", "PanGesture.ets", "panDirection.ets", "layoutConstraints.ets", "touch.ets", "Flex.ets", "image.ets", "longPressGesture.ets", "rating.ets", "fontWeight.ets", "gestureMode.ets", "tapGesture.ets", "FlexJsunit.test.ets", "button.ets", "span.ets", "NavigatorCode.ets", "text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexAlign", "api_method_name": "SpaceAround", "api_method_all": "SpaceAround,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 25, "since": 7, "api_used": "\u662f", "lines": ["yContent: FlexAlign.SpaceAround }) {\n        Button", "yContent-'FlexAlign.SpaceAround':\" + JSON.stringify", "yContent: FlexAlign.SpaceAround }) {\n        Polygo", "yContent: FlexAlign.SpaceAround }) {\n        Path()", "yContent: FlexAlign.SpaceAround }) {\n      Button('", "yContent: FlexAlign.SpaceAround, alignItems: ItemAl", "ertEqual(\"FlexAlign.SpaceAround\");\n      console.lo", "yContent: FlexAlign.SpaceAround }) {\n        Polyli", "yContent: FlexAlign.SpaceAround }) {\n      Circle({", "yContent: FlexAlign.SpaceAround }) {\n        Text('", "nContent-'FlexAlign.SpaceAround':\" + JSON.stringify", "yContent: FlexAlign.SpaceAround }) {\n      Badge({\n", "nContent: FlexAlign.SpaceAround,\n          wrap: Fl", "ertEqual('FlexAlign.SpaceAround');\n      console.lo", "yContent: FlexAlign.SpaceAround,\n          alignCon"], "files": ["polyline.ets", "Flex.ets", "PatternLock.ets", "Polyline.ets", "enable.ets", "polygon.ets", "badge.ets", "swiper.ets", "Path.ets", "customDialogController.ets", "CustomDialog.ets", "dragEvent2.ets", "FlexJsunit.test.ets", "Swiper.ets", "border.ets", "dragEvent.ets", "circle.ets", "Polygon.ets", "path.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexAlign", "api_method_name": "SpaceEvenly", "api_method_all": "SpaceEvenly,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["ertEqual('FlexAlign.SpaceEvenly');\n      console.lo", "yContent: FlexAlign.SpaceEvenly,\n          alignCon", "ertEqual('FlexAlign.SpaceEvenly');\n      console.in", "yContent-'FlexAlign.SpaceEvenly':\" + JSON.stringify", "nContent-'FlexAlign.SpaceEvenly':\" + JSON.stringify", "ertEqual(\"FlexAlign.SpaceEvenly\");\n      console.lo", "yContent: FlexAlign.SpaceEvenly, alignItems: ItemAl", "nContent: FlexAlign.SpaceEvenly,\n          wrap: Fl"], "files": ["EnmusItemAlignJsunit.test.ets", "Flex.ets", "Toggle.ets", "toggle.ets", "FlexJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ItemAlign", "api_method_all": "declare enum ItemAlign {\n  \n  Auto,\n\n  \n  Start,\n\n  \n  Center,\n\n  \n  End,\n\n  \n  Baseline,\n\n  \n  Stretch,\n}", "api_method_name": "ItemAlign", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 134, "since": 7, "api_used": "\u662f", "lines": ["   this.alignSelf = ItemAlign.End;\n          brea", " console.info('enumsItemAlignTest_0100 START');\n ", ",\n      alignItems: ItemAlign.Center,\n      justi", "         .alignSelf(ItemAlign.Stretch)\n          ", "beforeEach get enumsItemAlign state pages:' + JSO", "Column, alignItems: ItemAlign.Center, justifyCont", "   this.alignSelf = ItemAlign.Center;\n          b", "Column, alignItems: ItemAlign.Start, justifyConte", "beforeEach get enumsItemAlign state pages.name:' ", "   this.alignSelf = ItemAlign.Start;\n          br", "Center, alignItems: ItemAlign.Center }) {\n      T", "   this.alignSelf = ItemAlign.Auto;\n          bre", "eforeEach push enumsItemAlignTest page error:' + ", "  });\n\n    it('enumsItemAlignTest_0100', 0, async", "   this.alignSelf = ItemAlign.Auto;\n      }\n    }", "Column, alignItems: ItemAlign.Center,}) {\n      B", "eforeEach push enumsItemAlignTest page result:' +", " {\n  describe('enumsItemAlign', function () {\n   ", "on.Row, alignItems: ItemAlign.Center, justifyCont", "on.Row, alignItems: ItemAlign.Center }) {\n       ", "s.mode, alignItems: ItemAlign.Center, justifyCont", "Column, alignItems: ItemAlign.Start }) {\n        ", "Column, alignItems: ItemAlign.Center,\n      justi", " console.info('enumsItemAlignTest_0100 END');\n   ", "Around, alignItems: ItemAlign.Center }) {\n      T", " console.info(\"enumsItemAlignTest_0100 component ", "@State alignItems : ItemAlign = ItemAlign.Auto\n\n ", "   uri: 'pages/enumsItemAlign',\n      }\n      try", "etween, alignItems: ItemAlign.Start }) {\n      th", "Items : ItemAlign = ItemAlign.Auto\n\n  build() {\n ", "nSelf).assertEqual(\"ItemAlign.Auto\");\n      conso", "   this.alignSelf = ItemAlign.Baseline;\n         ", "   this.alignSelf = ItemAlign.Stretch;\n          "], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "playMode.ets", "Qrcode.ets", "imageFit.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "richText.ets", "Progress.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "border.ets", "transition.ets", "Image.ets", "List.test.ets", "button.ets", "touch.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "text.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "tapGesture.ets", "FlexJsunit.test.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "Marquee.ets", "flex.ets", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "enumsItemAlign.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "ellipse.ets", "radio.ets", "rating.ets", "DataPanel.ets", "RowJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "Toggle.ets", "Calendar.ets", "gestureMode.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ItemAlign", "api_method_name": "Auto", "api_method_all": "Auto,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 581, "since": 7, "api_used": "\u662f", "lines": ["pAuto : this.dirPropAuto,\n             dirPr", "     this.rotatePropAutoReverse = this.$elem", "\n            dirPropAuto : this.dirPropAuto,", ".objectFit(ImageFit.Auto).width(110).height(", "se : this.rotatePropAutoReverse,\n           ", "= SwiperDisplayMode.AutoLinear\n  @State edge", "is.$element(\"dirPropAuto\").getInspector()\n  ", "        this.dirPropAuto = this.$element(\"di", "ertEqual('Direction.Auto');\n      console.in", "ertEqual(\"ItemAlign.Auto\");\n      console.in", "autoReset' + this.isAutoReset).onClick(() =>", "sertEqual('BarState.Auto')\n      console.inf", "          rotatePropAutoReverse : this.rotat", "          .overlay('Auto', { align: Alignmen", "ateValue\": BarState.Auto\n          }\n       ", "emAlign = ItemAlign.Auto\n\n  build() {\n    Fl", "Style = BorderStyle.Auto;\n  @State borderRad", "pe) {\n        case 'Auto':\n          this.si", "ll,\n         dirPropAuto : null,\n         di", "rection = Direction.Auto\n  @State position: ", "ber= 30;\n  @State isAutoReset: boolean= true", "ignSelf = ItemAlign.Auto;\n      }\n    }\n  }\n", "n\", LayoutDirection.Auto);\n      let enable2", "ImageSize(ImageSize.Auto)\n        .width('90", "ertEqual('ImageSize.Auto');\n      console.in", "AutoReset = !this.isAutoReset\n        }).mar", "pAuto : this.dirPropAuto,\n            dirPro", "ignSelf = ItemAlign.Auto;\n          break;\n ", "ertEqual(\"Direction.Auto\")\n      expect(obj.", "ection\":  Direction.Auto,\n          }\n      ", "lf) {\n        case 'Auto':\n          this.al", ",\n        rotatePropAutoReverse : null,\n    ", "sizeType = SizeType.Auto;\n          break;\n ", " {\n          this.isAutoReset = !this.isAuto", "sizeType = SizeType.Auto;\n      }\n    }\n  }\n", " sizeType: SizeType.Auto, gutter: 10, margin", "al, state: BarState.Auto }) {\n          Text", "$element(\"rotatePropAutoReverse\").getInspect", "  .autoReset(this.isAutoReset)\n        .onPa", "ull,\n        dirPropAuto : null,\n        dir", "             dirPropAuto : this.dirPropAuto,", " == LayoutDirection.Auto)\n      .assertTrue;", "ertEqual(\"ItemAlign.Auto\")\n      expect(obj.", "emAlign = ItemAlign.Auto\n  @State borderStyl"], "files": ["ratingProps.test.js", "flex.ets", "listItemGroupProps.test.js", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "tabContentProps.test.js", "textProps.test.js", "ScrollBarJsunit.test.ets", "enumsImage.ets", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "imageFit.ets", "TextJsunit.test.ets", "swiper.ets", "popupProps.test.js", "gridContainerProps.test.js", "CheckboxGroupJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "EnmusImageJsunit.test.ets", "spanProps.test.js", "stepperItemProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "enumsItemAlign.ets", "toolbarItemProps.test.js", "videoProps.test.js", "RowJsunit.test.ets", "GridContainer.ets", "inputProps.test.js", "index.js", "FlexJsunit.test.ets", "optionProps.test.js", "tabBarProps.test.js", "toggleProps.test.js", "AppStorageJsunit.test.ets", "badgeProps.test.js", "border.ets", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "Direction2Jsunit.test.ets", "gridColProps.test.js", "panelProps.test.js", "ScrollBar.ets", "menuProps.test.js", "buttonProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ItemAlign", "api_method_name": "Start", "api_method_all": "Start,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 671, "since": 7, "api_used": "\u662f", "lines": ["log('ListItem onDragStarts, ' + extraParams)\n", "textAlign(TextAlign.Start).margin(15)\n      L", "         .onItemDragStart((event: ItemDragInf", "Equal(\"Alignment.TopStart\");\n      console.in", "ignItems: ItemAlign.Start, justifyContent: Fl", ".align(Alignment.TopStart)\n        Text('thir", "')\n          .onDragStart((event: DragEvent, ", "20).align(Alignment.Start)\n            .offse", "s.loop,\n        fromStart: this.fromStart,\n  ", "ignSelf = ItemAlign.Start;\n          break;\n ", "ertEqual('TextAlign.Start');\n      console.in", "e)\n          .onDragStart((event: DragEvent, ", "nimation complete onStart')\n          console", "ign\": \"Alignment.TopStart\",\n            \"x\": ", "   Text('alignItems(Start)').fontSize(9).font", "le.log('Ting--onDragStart--orange')\n         ", "le.log('apple onDragStart onAction')\n        ", "fo('Ting--onItemDragStart' + event.x)\n       ", "      console.info('Start')\n        })\n      ", "   \"ACTION\": 'onDragStart onAction'\n         ", "ntent: Alignment.TopStart }) {\n      Column()", "le.log('Ting--onDragStart--banana')\n         ", "20).align(Alignment.Start)\n            .posit", "ntent: Alignment.TopStart }) {\n          Row(", "reak;\n        case 'Start':\n          this.al", "op:100})\n        .onStart(() => {\n          c", "})\n          .onDragStart((event: DragEvent, ", " false\n  @State fromStart: boolean = true\n  @", "al('HorizontalAlign.Start');\n      console.in", "ertEqual(\"TextAlign.Start\");\n      console.in", ".align(Alignment.TopStart)\n          .zIndex(", "e)\n          .onDragStart(() => {\n           ", "n = HorizontalAlign.Start;\n\n  onPageShow() {\n", "ment = Alignment.TopStart;\n  @State direction", "textAlign(TextAlign.Start).margin(5)\n      Fl", "ole.log('Text onDragStarts, ' + extraParams)\n", "m: 40 })\n        .onStart(() => {\n          c", "textAlign(TextAlign.Start).margin(15)\n\n      ", "fo('Ting--onItemDragStart' + event.y)\n       ", "fromStart: this.fromStart,\n        src: this.", "Equal(\"Alignment.TopStart\");\n      expect(obj", "le.log('Ting--onDragStart--apple')\n          "], "files": ["flex.ets", "focus.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "row.ets", "DragEventJsunit.test.ets", "gridPage.ets", "canvas2.ets", "direction2.ets", "buttonProps.test.js", "canvas.ets", "Text.ets", "divider.ets", "imageFit.ets", "Stack.ets", "TextJsunit.test.ets", "SubscribaleAbstractJsunit.test.ets", "richText.ets", "column.ets", "zIndex.ets", "animationStatus.ets", "PositionSettingJsunit.test.ets", "fillMode.ets", "Prop.ets", "text.ets", "FormComponentPage.ets", "GridContainerJsunit.test.ets", "tabs.ets", "AlertDialog.ets", "WebPage.ets", "videoProps.test.js", "list.ets", "marquee.ets", "TabsJsunit.test.ets", "positionSetting.ets", "List.ets", "TabJsunit.test.ets", "GridContainer.ets", "dragEvent2.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "TextInputJsunit.test.ets", "calendar.ets", "GridItem.ets", "dragEvent.ets", "PanGesture.ets", "Marquee.ets", "Video.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "GridItem.test.ets", "textPathProps.test.js", "textInput.ets", "image.ets", "Calendar.ets", "fontWeight.ets", "imageAnimator.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "scrollCode.ets", "Column.ets", "button.ets", "span.ets", "NavigatorCode.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ItemAlign", "api_method_name": "Center", "api_method_all": "Center,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1686, "since": 7, "api_used": "\u662f", "lines": ["textAlign(TextAlign.Center)\n          .fontSiz", ") {\n          Text('Center').fontSize(25)\n    ", "yContent: FlexAlign.Center\n    }) {\n      Text", "exAlign = FlexAlign.Center\n  build() {\n    Fle", "textAlign(TextAlign.Center)\n        .width('90", "ignItems: ItemAlign.Center, justifyContent: Fl", "ignItems: ItemAlign.Center,\n      justifyConte", "al('HorizontalAlign.Center');\n      console.in", "textAlign(TextAlign.Center)\n          .layoutW", "textAlign(TextAlign.Center)\n          Text('3'", "ms\":HorizontalAlign.Center\n          }\n       ", "textAlign(TextAlign.Center)\n        Text('alig", "textAlign(TextAlign.Center)\n        Text('no a", "textAlign(TextAlign.Center).fontSize(16)\n    }", "ems(HorizontalAlign.Center).width('90%').borde", "textAlign(TextAlign.Center)\n        Text('flex", "textAlign(TextAlign.Center)\n                .b", "yContent: FlexAlign.Center\n    }) {\n      Canv", "textAlign(TextAlign.Center).borderRadius(10).b", "textAlign(TextAlign.Center)\n          Text('2'", "textAlign(TextAlign.Center)\n        }\n      }.", "textAlign(TextAlign.Center)\n              .bac", "Items(VerticalAlign.Center).width('90%').heigh", "textAlign(TextAlign.Center)\n        Text('no f", "yContent: FlexAlign.Center }) {\n      Marquee(", "\"align\": \"Alignment.Center\"\n          }\n      ", "textAlign(TextAlign.Center)\n          Text('4'", "ignSelf = ItemAlign.Center;\n          break;\n ", "textAlign(TextAlign.Center)\n            .fontS", "textAlign(TextAlign.Center)\n      }\n      .key", "ignItems: ItemAlign.Center }) {\n        Text('", "ignItems: ItemAlign.Center }) {\n      Text('da", "ertEqual(\"Alignment.Center\");\n      console.in", "   .align(Alignment.Center)\n    .key('stepper'", "yContent: FlexAlign.Center }) {\n      Ellipse(", "textAlign(TextAlign.Center).fontSize(16)\n     ", "reak;\n        case 'Center':\n          this.al", "textAlign(TextAlign.Center)\n      }.width('90%"], "files": ["systemRouterA.ets", "longPressGesture.ets", "playMode.ets", "enumsHorizontalAlign.ets", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "Progress.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Swiper.ets", "OverlayJsunit.test.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "Column.ets", "scrollCode.ets", "touch.ets", "EnmusFlexAlignJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "TextArea.ets", "tapGesture.ets", "FlexJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "row.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "badge.ets", "textStyle.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "backgroundAndSizeSetting.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "bindContextMenu.ets", "divider.ets", "ScrollBar.ets", "ellipse.ets", "radio.ets", "rating.ets", "enumsFlexAlign.ets", "DataPanel.ets", "Grid.ets", "AlertDialog.ets", "RowJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "Toggle.ets", "NavigationJsunit.test.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ItemAlign", "api_method_name": "End", "api_method_all": "End,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 440, "since": 7, "api_used": "\u662f", "lines": ["al('Alignment.BottomEnd')\n      console.inf", "tion = IconPosition.End;\n  @State fontStyle", "ems(HorizontalAlign.End)\n\n          GridCon", "ems(HorizontalAlign.End).width('90%').borde", "reak;\n        case 'End':\n          this.al", "olumnStart(1).columnEnd(5)\n        }\n      ", "nContent: Alignment.End }) {\n        Text('", "al('HorizontalAlign.End');\n      console.lo", "nsole.info('onActionEnd current action stat", "ntString = 'onActionEnd';\n        console.i", "++ Panel TestCase 1 End ++++++++++++++++');", "++ Panel TestCase 2 End ++++++++++++++++');", "ign(Alignment.BottomEnd)\n        .width('10", "ertEqual('Alignment.End')\n      console.inf", "ext('justifyContent(End)').fontSize(9).font", "n = Alignment.BottomEnd;\n      } else if (e", "yContent-'FlexAlign.End':\" + JSON.stringify", "ms-'HorizontalAlign.End':\" + JSON.stringify", ".align(Alignment.TopEnd)\n        .direction", "   Text('alignItems(End)').fontSize(9).font", "extAlign= TextAlign.End\n  @State lineHeight", "nContent-'FlexAlign.End':\" + JSON.stringify", "++ Panel TestCase 3 End ++++++++++++++++');", "nt: Alignment.BottomEnd }) {\n        Text('", "n\": Alignment.BottomEnd\n          }\n       ", "ssertEqual('onActionEnd')\n      }\n      let", "  })\n      .onActionEnd(() => {\n        con", "ignSelf = ItemAlign.End;\n          break;\n ", "ems(HorizontalAlign.End)\n\n        }.width('", "alignSelf(ItemAlign.End)\n        .borderWid", "   .align(Alignment.End)\n        .alignSelf", "nContent: Alignment.End }) {\n        Scroll", "ertEqual('FlexAlign.End');\n      console.lo", "nContent: FlexAlign.End,\n        }) {\n     ", "ertEqual(\"FlexAlign.End\");\n      console.lo", "  })\n      .onScrollEnd(() => {\n        con", "fyContent(FlexAlign.End)\n\n      Text('justi", "lignItems:ItemAlign.End,\n          alignCon", "ntent: Alignment.TopEnd }) {\n        Text('", "yContent: FlexAlign.End,\n          alignIte", "   }.rowStart(1).rowEnd(4)\n\n          ForEa"], "files": ["flex.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "gridPage.ets", "PieceCode.ets", "Text.ets", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "Stack.ets", "TextJsunit.test.ets", "ToggleJsunit.test.ets", "PositionSettingJsunit.test.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "AlertDialog.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "GridContainer.ets", "TabJsunit.test.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "TextInputJsunit.test.ets", "GridItem.ets", "GridItem.test.ets", "animateTransformProps.test.js", "PanGesture.ets", "scrollBar.ets", "StackJsunit.test.ets", "TextAreaJsunit.test.ets", "animateMotionProps.test.js", "NavigationJsunit.test.ets", "textareaProps.test.js", "LongPressGesture.test.ets", "Column.ets", "gestureMode.ets", "ListJsunit.test.ets", "row.ets", "scrollCode.ets", "buttonProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ItemAlign", "api_method_name": "Baseline", "api_method_all": "Baseline,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["height);\n  }\n\n  textBaseline() {\n    let height ", "   this.context.textBaseline = 'alphabetic';\n   ", "ignSelf = ItemAlign.Baseline;\n          break;\n ", "0);\n        ctx.textBaseline = 'middle';\n       ", "   this.context.textBaseline = 'hanging';\n    th", "   this.context.textBaseline = 'top';\n    this.c", "           this.textBaseline();\n              th", "   this.context.textBaseline = 'middle';\n    thi", "';\n\n        ctx.textBaseline = 'top';\n        ct", "0);\n        ctx.textBaseline = 'bottom';\n       ", "0);\n        ctx.textBaseline = 'hanging';\n      ", "ertEqual(\"ItemAlign.Baseline\")\n      expect(obj.", "0);\n        ctx.textBaseline = 'alphabetic';\n   ", "alignSelf(ItemAlign.Baseline)\n        .borderWid", "   this.context.textBaseline = 'bottom';\n    thi", "reak;\n        case 'Baseline':\n          this.al"], "files": ["flex.ets", "TextJsunit.test.ets", "index.js", "canvas.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ItemAlign", "api_method_name": "Stretch", "api_method_all": "Stretch,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["alignSelf(ItemAlign.Stretch)\n        .borderWid", "     displayModePropStretch: null,\n        disp", "ent(\"displayModePropStretch\").getInspector()\n  ", "wiperDisplayModePropStretch\n     * @tc.desc    ", "wiperDisplayModePropStretch', 0, async function", "ertEqual(\"ItemAlign.Stretch\")\n      expect(obj.", "ignSelf = ItemAlign.Stretch;\n          break;\n ", "     displayModePropStretch: this.displayModePr", "this.displayModePropStretch,\n            displa", "this.displayModePropStretch = this.$element(\"di", "wiperDisplayModePropStretch START');\n        co", "alue.displayModePropStretch); //id\n        cons", "reak;\n        case 'Stretch':\n          this.al", "alignSelf(ItemAlign.Stretch)\n          .width('", "ual('displayModePropStretch') //ID\n        expe"], "files": ["flex.ets", "swiperProps.test.js", "TextJsunit.test.ets", "index.js", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexDirection", "api_method_all": "declare enum FlexDirection {\n  \n  Row,\n\n  \n  Column,\n\n  \n  RowReverse,\n\n  \n  ColumnReverse,\n}", "api_method_name": "FlexDirection", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 117, "since": 7, "api_used": "\u662f", "lines": ["\n  @State direction:FlexDirection = FlexDirection.Col", "  @State direction: FlexDirection = FlexDirection.Row", "({\n      direction: FlexDirection.Column,\n      align", "ion:FlexDirection = FlexDirection.Column\n  build() {\n", "  Flex({ direction: FlexDirection.Column, mode:this.m", "  Flex({ direction: FlexDirection.Column }) {\n      B", "ction).assertEqual('FlexDirection.Row');\n      consol", "   Flex({direction: FlexDirection.Column, alignItems:", "   Flex({ direction:FlexDirection.Row }) {\n          ", "  Flex({ direction: FlexDirection.ColumnReverse }) {\n", "  Flex({ direction: FlexDirection.Column, justifyCont", "  Flex({ direction: FlexDirection.Column, alignItems:", "  Flex({ direction: FlexDirection.Row }) {\n        Te", "on: FlexDirection = FlexDirection.Row\n  private state", "  Flex({ direction: FlexDirection.Column }) {\n       ", "  Flex({ direction: FlexDirection.Row, alignItems: It"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "scrollBar.ets", "transition.ets", "Image.ets", "List.test.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "text.ets", "tapGesture.ets", "flexDirection.ets", "FlexJsunit.test.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "Marquee.ets", "flex.ets", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "rating.ets", "DataPanel.ets", "FormComponentPage.ets", "ohosRouterA.ets", "Link.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexDirection", "api_method_name": "Row", "api_method_all": "Row,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 539, "since": 7, "api_used": "\u662f", "lines": ["spectorByKey('centerRow3');\n      let objNe", "InspectorByKey('gridRow');\n      console.in", "spectorByKey('centerRow');\n      console.in", "spectorByKey('centerRow5');\n      console.i", "ridSettings003] gridRow useSizeType: \" + JS", "qual('FlexDirection.Row');\n      console.in", "tion: FlexDirection.Row }) {\n        Text('", "ridSettings002] gridRow useSizeType: \" + JS", "tion: FlexDirection.Row, alignItems: ItemAl", "r(0xCCCCCC)\n        Row()\n          .visibi", "Value}`).key('centerRow8')\n\n      Text('hue", "spectorByKey('centerRow6');\n      let objNe", "spectorByKey('centerRow3');\n      let obj =", "idOffset')\n\n        Row() {\n          Text(", "        .key('centerRow')\n\n      Text('back", "        .key('centerRow3')\n\n      Text('gra", "        .key('centerRow4')\n\n      Text('bri", "eType.SM }) {\n      Row({}) {\n        Row()", "ssValue).key('centerRow5')\n\n      Text('sat", "spectorByKey('centerRow');\n      let objNew", "ion = FlexDirection.Row\n  private stateChan", ")\n        .key('gridRow')\n\n        Row() {\n", "'gridRow')\n\n        Row() {\n          Text(", "ridSettings001] gridRow useSizeType: \" + JS", "width('100%')\n      Row({ space: 10 }) {\n  ", "  Row({}) {\n        Row() {\n          Text(", "stValue).key('centerRow7')\n\n      Text('inv", "ridSettings004] gridRow useSizeType: \" + JS", "spectorByKey('centerRow6');\n      console.i", "Value}`).key('centerRow9')\n    }.width('100", "teValue).key('centerRow6')\n\n      Text('con", "ridSettings005] gridRow useSizeType: \" + JS", "spectorByKey('centerRow5');\n      let objNe", "in: 20 }) {\n        Row() {\n          Text(", "        .key('centerRow2')\n\n      Text('sha"], "files": ["flex.ets", "List.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "RowSplitJsunit.test.ets", "DirectionJsunit.test.ets", "Flex.ets", "ImageEffectsJsunit.test.ets", "gridContainer.ets", "video.ets", "row.ets", "direction2.ets", "RowSplit.ets", "background.ets", "canvas2.ets", "placement.ets", "enumsImage.ets", "canvas.ets", "ohosMatrix4.ets", "Row.ets", "divider.ets", "imageFit.ets", "imageEffects.ets", "TextInput.ets", "ellipse.ets", "enumsVerticalAlign.ets", "radio.ets", "List.test.ets", "sideBar.ets", "animationStatus.ets", "commonComponentJsApi.test.js", "Sidebar.ets", "fillMode.ets", "navigation.ets", "TransFormJsunit.test.ets", "Scroll.ets", "CustomDialog.ets", "FormComponentPage.ets", "gridRowProps.test.js", "visibility.ets", "progress.ets", "layoutConstraints.ets", "WebPage.ets", "textTimer.ets", "positionSetting.ets", "RowJsunit.test.ets", "GridContainer.ets", "animatorOption.ets", "GridSettingsJsunit.test.ets", "FlexJsunit.test.ets", "shapeClipping.ets", "dragEvent2.ets", "flexDirection.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "checkbox.ets", "Video.ets", "scrollBar.ets", "lazyForEach.ets", "CalendarJsunit.test.ets", "slider.ets", "gridSettings.ets", "grid.ets", "transForm.ets", "Calendar.ets", "bindPopup.ets", "sharedTransition.ets", "imageAnimator.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "FlexDirectionJsunit.test.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexDirection", "api_method_name": "Column", "api_method_all": "Column,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 411, "since": 7, "api_used": "\u662f", "lines": [" }\n\n  build() {\n    Column() {\n      Button(th", "0;\n\n  build() {\n    Column({ space: 20 }) {\n  ", "y\n@Component\nstruct ColumnExample {\n  @State a", " }\n\n  build() {\n    Column() {\n      Gauge({ v", " console.info('[testColumn02] START');\n      t", " console.info('[testColumn01] END');\n      don", "TopStart }) {\n      Column() {\n        List({ ", " }\n\n  build() {\n    Column() {\n      Stack() {", " {\n\n  build() {\n    Column({ space: 5 }) {\n   ", " console.info('[testColumn01] START');\n      a", " console.info(\"[testColumn02] start to publish", "';\n\n  build() {\n    Column({ space: 20 }) {\n  ", "   });\n\n    it('testColumn01', 0, async functi", " console.info(\"[testColumn02] obj is: \" + JSON", "  console.log(\"[testColumn02] change component", " Column() {\n        Column().width('50%').heig", "   Column() {\n      Column() {\n        Text('f", " }\n\n  build() {\n    Column({ space: 10 }) {\n  ", " console.info('[testColumn02] END');\n      don", "e {\n  build() {\n    Column({ space: 5 }) {\n   ", "   Column() {\n      Column() {\n        Text('B", "e;\n\n  build() {\n    Column() {\n      Text(this", " }\n\n  build() {\n    Column() {\n      Column() ", "    .key(\"alignItemsColumn\")\n      .width('90%", " }\n\n  build() {\n    Column() {\n      Text('ali", "tion: FlexDirection.Column, alignItems: ItemAl", "se\n\n  build() {\n    Column({ space:5 }) {\n    ", "tion: FlexDirection.Column,\n      alignItems: ", "r(0x00FFFF)\n        Column().width('50%').heig", " }\n\n  build() {\n    Column({ space: 5 }) {\n   ", "   Scroll() {\n      Column() {\n        Checkbo", "   });\n\n    it('testColumn02', 0, async functi", ".width('90%')\n      Column() {\n        Column(", "torByKey('alignItemsColumn');\n      let obj = ", " console.info(\"[testColumn01] obj is: \" + JSON", "maxLines(1)\n        Column() {\n          Image", "r(0xAFEEEE)\n        Column().width('50%').heig"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "ColumnSplitJsunit.test.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "richText.ets", "column.ets", "Panel.ets", "Progress.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "textTimer.ets", "Rating.ets", "enumsLineCapStyle.ets", "Swiper.ets", "Divider.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "List.test.ets", "scrollCode.ets", "button.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "DirectionJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "XComponentPage.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "FlexJsunit.test.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "PanGesture.ets", "shape.ets", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "textPickerDialog.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "polygon.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "Video.ets", "listItem.ets", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "search.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "ScrollBar.ets", "TextInput.ets", "radio.ets", "appear.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "index.js", "ColumnJsunit.test.ets", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "select.ets", "timeStamp.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "Calendar.ets", "gestureMode.ets", "refresh.ets", "enumsHorizontalAlign.ets", "panel.ets", "motionPath.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexDirection", "api_method_name": "RowReverse", "api_method_all": "RowReverse,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["    Text('direction:RowReverse').fontSize(9).fontC", "tion-'FlexDirection.RowReverse':\" + JSON.stringify", "tion: FlexDirection.RowReverse,\n          wrap: Fl", "qual('FlexDirection.RowReverse');\n      console.lo"], "files": ["FlexJsunit.test.ets", "Flex.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexDirection", "api_method_name": "ColumnReverse", "api_method_all": "ColumnReverse,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": [" getInspectorByKey('ColumnReverse');\n      let objNew", "tion: FlexDirection.ColumnReverse }) {\n          Text", "or)\n          .key('ColumnReverse')\n        }\n       ", "ction(GridDirection.ColumnReverse)\n\n      Grid() {\n  ", "tion-'FlexDirection.ColumnReverse':\" + JSON.stringify", " getInspectorByKey('ColumnReverse');\n      console.in", "    Text('direction:ColumnReverse').fontSize(9).fontC"], "files": ["FlexJsunit.test.ets", "FlexDirectionJsunit.test.ets", "flexDirection.ets", "grid.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexWrap", "api_method_all": "declare enum FlexWrap {\n  \n  NoWrap,\n\n  \n  Wrap,\n\n  \n  WrapReverse,\n}", "api_method_name": "FlexWrap", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["mn,\n          wrap: FlexWrap.NoWrap,\n          j", ".wrap).assertEqual('FlexWrap.NoWrap');\n      con", "tructor.alignItems-'FlexWrap.NoWrap':\" + JSON.st", "\n      Flex({ wrap: FlexWrap.Wrap, justifyConten", "se,\n          wrap: FlexWrap.Wrap,\n          jus", "       Flex({ wrap: FlexWrap.WrapReverse, direct", "xWrapJsunit from './FlexWrapJsunit.test.ets';\nim", "nd,\n          wrap: FlexWrap.Wrap,\n        }) {\n", "s.constructor.wrap-'FlexWrap.NoWrap':\" + JSON.st", "y\n@Component\nstruct FlexWrapExample {\n  @State w", "log(\"yr flex1 wrap-'FlexWrap.Wrap':\" + JSON.stri", "Align.Center, wrap: FlexWrap.Wrap }) {\n        T", "ow,\n          wrap: FlexWrap.Wrap,\n          jus", ".wrap).assertEqual('FlexWrap.Wrap')\n      consol", "ly,\n          wrap: FlexWrap.Wrap,\n        }) {\n", "en,\n          wrap: FlexWrap.Wrap,\n        }) {\n"], "files": ["divider.ets", "Flex.ets", "PatternLock.ets", "flexWrap.ets", "List.test.ets", "FlexJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexWrap", "api_method_name": "NoWrap", "api_method_all": "NoWrap,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["lignItems-'FlexWrap.NoWrap':\" + JSON.stringify", "     wrap: FlexWrap.NoWrap,\n          justifyC", "ctor.wrap-'FlexWrap.NoWrap':\" + JSON.stringify", "sertEqual('FlexWrap.NoWrap');\n      console.lo"], "files": ["FlexJsunit.test.ets", "Flex.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexWrap", "api_method_name": "Wrap", "api_method_all": "Wrap,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 61, "since": 7, "api_used": "\u662f", "lines": ["ckerJsunit();\n  flexWrapJsunit();\n  flexDire", "pJsunit from './FlexWrapJsunit.test.ets';\nim", "  console.info(\"flexWrap_0300 start to publi", "  console.info('flexWrap_0300 START');\n     ", "st.ets';\nimport flexWrapJsunit from './FlexW", "  console.info(\"flexWrap_0300 component objN", "   console.log(\"flexWrap_0300 change compone", "   });\n\n    it('flexWrap_0100', 0, async fun", "  console.info(\"flexWrap_0100 component obj ", "  console.info('flexWrap_0300 END');\n      d", "omponent\nstruct FlexWrapExample {\n  @State w", " getInspectorByKey('WrapReverse');\n      con", "  console.info('flexWrap_0100 END');\n      d", "   wrap: FlexWrap.NoWrap,\n          justifyC", "   Flex({ wrap: FlexWrap.WrapReverse, direct", "     wrap: FlexWrap.Wrap,\n          justifyC", "   });\n\n    it('flexWrap_0200', 0, async fun", "  console.info('flexWrap_0200 END');\n      d", "          wrap: FlexWrap.Wrap,\n        }) {\n", "  console.info('flexWrap_0100 START');\n     ", "          wrap: FlexWrap.NoWrap,\n          j", "nsole.info(\"get flexWrap state pages:\" + JSO", "  console.info('flexWrap_0200 START');\n     ", "  console.info(\"flexWrap_0200 component strJ", "nsole.info(\"get flexWrap state pages.name:\" ", "          wrap: FlexWrap.Wrap,\n          jus", "sole.info(\"push flexWrap page result:\" + JSO", ")\n            .key('WrapReverse')\n        }\n", "ole.error(\"push flexWrap page error:\" + JSON", "n.Center, wrap: FlexWrap.Wrap }) {\n        T", "   });\n\n    it('flexWrap_0300', 0, async fun", "\n        if (!(\"flexWrap\" == pages.name)) {\n", "     wrap: FlexWrap.Wrap,\n        }) {\n     ", "ter, wrap: FlexWrap.Wrap }) {\n        Text('", "efault function flexWrapJsunit() {\n  describ", "ex({ wrap: FlexWrap.WrapReverse, direction: ", " }) {\n        Text('WrapReverse').fontSize(9", "  console.info(\"flexWrap after each called\")", "  console.info(\"flexWrap_0100 component strJ", "  console.info(\"flexWrap_0200 component obj ", "    uri: 'pages/flexWrap',\n      }\n      try", " getInspectorByKey('WrapReverse');\n      let", "p).assertEqual('FlexWrap.NoWrap');\n      con"], "files": ["divider.ets", "Flex.ets", "PatternLock.ets", "flexWrap.ets", "List.test.ets", "FlexWrapJsunit.test.ets", "FlexJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexWrap", "api_method_name": "WrapReverse", "api_method_all": "WrapReverse,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": [" }) {\n        Text('WrapReverse').fontSize(9).fontC", "ex({ wrap: FlexWrap.WrapReverse, direction: FlexDir", " getInspectorByKey('WrapReverse');\n      let objNew", ")\n            .key('WrapReverse')\n        }\n       ", " getInspectorByKey('WrapReverse');\n      console.in"], "files": ["FlexWrapJsunit.test.ets", "flexWrap.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VerticalAlign", "api_method_all": "declare enum VerticalAlign {\n  \n  Top,\n\n  \n  Center,\n\n  \n  Bottom,\n}", "api_method_name": "VerticalAlign", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": [" console.info(\"enumsVerticalAlignTest_0100 component ", "h: 1 })\n      .key('VerticalAlign')\n    }.width('100%", "   uri: 'pages/enumsVerticalAlign',\n      }\n      try", "\n      }.alignItems(VerticalAlign.Center).width('90%'", "th: 1 }).alignItems(VerticalAlign.Center).justifyCont", "ems: VerticalAlign= VerticalAlign.Top\n  @State active", "        if (!('enumsVerticalAlign' == pages.name)) {\n", "  });\n\n    it('enumsVerticalAlignTest_0100', 0, async", " @State alignItems: VerticalAlign = VerticalAlign.Cen", "beforeEach get enumsVerticalAlign state pages.name:' ", " console.info('enumsVerticalAlignTest_0100 START');\n ", " console.info('enumsVerticalAlignTest_0100 END');\n   ", "th: 1 }).alignItems(VerticalAlign.Bottom).justifyCont", " {\n  describe('enumsVerticalAlign', function () {\n   ", " getInspectorByKey('VerticalAlign');\n      console.in", "ms: VerticalAlign = VerticalAlign.Center\n  @State jus", "\n      }.alignItems(VerticalAlign.Top).height('15%').", "\n      }.alignItems(VerticalAlign.Center).height('15%", "fault function enumsVerticalAlignJsunit() {\n  describ", "eforeEach push enumsVerticalAlign page result:' + JSO", " @State alignItems: VerticalAlign= VerticalAlign.Top\n", "eforeEach push enumsVerticalAlign page error:' + err)", "Items).assertEqual('VerticalAlign.Center');\n      con", "Items).assertEqual('VerticalAlign.Top')\n      console", "beforeEach get enumsVerticalAlign state pages:' + JSO"], "files": ["enumsVerticalAlign.ets", "EnmusHorizontalAlignJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "RowJsunit.test.ets", "row.ets", "Row.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VerticalAlign", "api_method_name": "Top", "api_method_all": "Top,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 174, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.TopStart)\n          .zI", "nContent: Alignment.TopStart }) {\n      Scr", "acement = Placement.TopLeft\n  @State placem", "adientDirection.LeftTop\n\n  build() {\n    Co", "acement = Placement.TopRight\n  @State place", "   Text('alignItems(Top)').fontSize(9).font", "sertEqual(Placement.TopLeft);\n      }\n     ", "         placementOnTop: this.placementOnTo", "nContent: Alignment.TopStart }) {\n      Col", "nContent: Alignment.TopStart }) {\n         ", "sertEqual(Placement.TopRight);\n      }\n    ", "('GradientDirection.Top');\n      expect(obj", "ac).align(Alignment.Top)\n      }\n      .wid", "te edge: Edge= Edge.Top\n  private content: ", "ertEqual(\"Alignment.TopStart\");\n      conso", "b3).align(Alignment.TopStart)\n        Text(", "op: this.placementOnTop,\n          onStateC", "ent.data.placementOnTop).assertEqual(false)", "nContent: Alignment.TopStart }) {\n        T", " BadgePosition.RightTop,\n            maxCou", "ignment = Alignment.TopStart;\n  @State dire", "  @State placementOnTop: boolean = false\n\n ", "ertEqual(\"Alignment.TopStart\");\n      expec", "        \"placementOnTop\": this.placementOnT", "adientDirection.LeftTop');\n      console.in", "ac).align(Alignment.Top)\n      }.width('100", "p\": this.placementOnTop,\n              }\n  ", "ler.scrollEdge(Edge.Top)\n        })\n       ", "\"align\": \"Alignment.TopStart\",\n            ", "   .align(Alignment.TopStart)\n          .he", ": GradientDirection.Top,\n        colors: [[", "b3).align(Alignment.Top)\n        Text('Seco", "\"BadgePosition.RightTop\").fontSize(16)\n    ", "s.context.fillText('Top', 60, height + 10);", "Items(VerticalAlign.Top).height('15%').bord", "ler.scrollEdge(Edge.Top)\n            })\n   ", "nContent: Alignment.Top }) {\n        Text('"], "files": ["row.ets", "direction2.ets", "placement.ets", "BadgeJsunit.test.ets", "canvas.ets", "Text.ets", "Row.ets", "Stack.ets", "TextJsunit.test.ets", "popupProps.test.js", "scrollCode.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "Scroll.ets", "AlertDialog.ets", "list.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "PlacementJsunit.test.ets", "index.js", "gradientDirection.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "badgeProps.test.js", "StackJsunit.test.ets", "bindPopup.ets", "Badge.ets", "BindPopupJsunit.test.ets", "buttonProps.test.js", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VerticalAlign", "api_method_name": "Center", "api_method_all": "Center,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1686, "since": 7, "api_used": "\u662f", "lines": ["textAlign(TextAlign.Center)\n          .fontSiz", ") {\n          Text('Center').fontSize(25)\n    ", "yContent: FlexAlign.Center\n    }) {\n      Text", "exAlign = FlexAlign.Center\n  build() {\n    Fle", "textAlign(TextAlign.Center)\n        .width('90", "ignItems: ItemAlign.Center, justifyContent: Fl", "ignItems: ItemAlign.Center,\n      justifyConte", "al('HorizontalAlign.Center');\n      console.in", "textAlign(TextAlign.Center)\n          .layoutW", "textAlign(TextAlign.Center)\n          Text('3'", "ms\":HorizontalAlign.Center\n          }\n       ", "textAlign(TextAlign.Center)\n        Text('alig", "textAlign(TextAlign.Center)\n        Text('no a", "textAlign(TextAlign.Center).fontSize(16)\n    }", "ems(HorizontalAlign.Center).width('90%').borde", "textAlign(TextAlign.Center)\n        Text('flex", "textAlign(TextAlign.Center)\n                .b", "yContent: FlexAlign.Center\n    }) {\n      Canv", "textAlign(TextAlign.Center).borderRadius(10).b", "textAlign(TextAlign.Center)\n          Text('2'", "textAlign(TextAlign.Center)\n        }\n      }.", "textAlign(TextAlign.Center)\n              .bac", "Items(VerticalAlign.Center).width('90%').heigh", "textAlign(TextAlign.Center)\n        Text('no f", "yContent: FlexAlign.Center }) {\n      Marquee(", "\"align\": \"Alignment.Center\"\n          }\n      ", "textAlign(TextAlign.Center)\n          Text('4'", "ignSelf = ItemAlign.Center;\n          break;\n ", "textAlign(TextAlign.Center)\n            .fontS", "textAlign(TextAlign.Center)\n      }\n      .key", "ignItems: ItemAlign.Center }) {\n        Text('", "ignItems: ItemAlign.Center }) {\n      Text('da", "ertEqual(\"Alignment.Center\");\n      console.in", "   .align(Alignment.Center)\n    .key('stepper'", "yContent: FlexAlign.Center }) {\n      Ellipse(", "textAlign(TextAlign.Center).fontSize(16)\n     ", "reak;\n        case 'Center':\n          this.al", "textAlign(TextAlign.Center)\n      }.width('90%"], "files": ["systemRouterA.ets", "longPressGesture.ets", "playMode.ets", "enumsHorizontalAlign.ets", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "Progress.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Swiper.ets", "OverlayJsunit.test.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "Column.ets", "scrollCode.ets", "touch.ets", "EnmusFlexAlignJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "TextArea.ets", "tapGesture.ets", "FlexJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "row.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "badge.ets", "textStyle.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "backgroundAndSizeSetting.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "bindContextMenu.ets", "divider.ets", "ScrollBar.ets", "ellipse.ets", "radio.ets", "rating.ets", "enumsFlexAlign.ets", "DataPanel.ets", "Grid.ets", "AlertDialog.ets", "RowJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "Toggle.ets", "NavigationJsunit.test.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VerticalAlign", "api_method_name": "Bottom", "api_method_all": "Bottom,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 119, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.Bottom)\n        .width('10", "adientDirection.LeftBottom\n          }\n       ", "dientDirection.RightBottom\n          }\n       ", "t: 'DialogAlignment.BottomEnd',\n            co", "ertEqual('Alignment.Bottom')\n      console.inf", "      this.placementBottom = this.$element(\"pl", "dientDirection.RightBottom');\n      console.in", "ertEqual(\"Alignment.BottomEnd\")\n      expect(o", "ertEqual('Alignment.BottomEnd')\n      console.", "nContent: Alignment.BottomEnd }) {\n        Tex", "ertEqual(\"Alignment.BottomStart\")\n      consol", " { align: Alignment.Bottom, offset: { x: 0, y:", "ignment = Alignment.Bottom\n\n  onPageShow() {\n ", ".$element(\"placementBottom\").getInspector()\n  ", "   Text('alignItems(Bottom)').fontSize(9).font", "   .align(Alignment.BottomStart)\n        .widt", "acement = Placement.BottomRight\n\n  @Builder po", "s.align = Alignment.BottomEnd;\n      } else if", "t: 'DialogAlignment.Bottom',\n            prima", "tom : this.placementBottom, placementNone : th", "Items(VerticalAlign.Bottom).justifyContent(Fle", "ertEqual(\"Alignment.Bottom\")\n      expect(obj.", "sertEqual(Placement.BottomRight);\n      }\n    ", "sertEqual(Placement.BottomLeft);\n      }\n     ", "ertEqual('Alignment.BottomStart')\n      consol", "this.currentTest = 'BottomStart'\n             ", "s.context.fillText('Bottom', 150, height - 10)", "lacement: Placement.Bottom,\n          maskColo", "adientDirection.LeftBottom');\n      console.in", "xtAlign\": Alignment.BottomEnd\n          }\n    ", "t: 'DialogAlignment.BottomStart',\n            ", "ertEqual(\"Alignment.Bottom\");\n      expect(obj", "nContent: Alignment.BottomStart }) {\n        T", "00 }\n  @State marginBottom: string = \"10px\"\n  ", "bottom: this.paddingBottom, top: this.paddingT", "l,\n        placementBottom : null,\n        pla", "acement = Placement.BottomLeft\n  @State placem", "           placementBottom : this.placementBot", ");\n    },\n\n    reachBottom(){\n        prompt.s", "px\"\n  @State paddingBottom: string= \"5\"\n  @Sta", "   .align(Alignment.BottomEnd)\n        .width(", "ignment = Alignment.Bottom\n  private content: ", " bottom: this.marginBottom, top: this.marginTo"], "files": ["placement.ets", "canvas.ets", "Text.ets", "imageFit.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "GradientDirectionJsunit.test.ets", "PositionSettingJsunit.test.ets", "touchAble.ets", "AlertDialog.ets", "positionSetting.ets", "index.js", "PlacementJsunit.test.ets", "OverlayJsunit.test.ets", "StackJsunit.test.ets", "bindPopup.ets", "row.ets", "overlay.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRepeat", "api_method_all": "declare enum ImageRepeat {\n  \n  NoRepeat,\n\n  \n  X,\n\n  \n  Y,\n\n  \n  XY,\n}", "api_method_name": "ImageRepeat", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["epeat).assertEqual('ImageRepeat.Y')\n      expect(ob", "j1[1]).assertEqual('ImageRepeat.Y');\n      console.", "e('/images/bg.jpg', ImageRepeat.Y)\n        .backgro", "e('/images/bg.jpg', ImageRepeat.X)\n        .backgro", "      .objectRepeat(ImageRepeat.X)\n          .inter", "      .objectRepeat(ImageRepeat.XY)\n          .inte", "epeat).assertEqual('ImageRepeat.NoRepeat')\n      ex", "      .objectRepeat(ImageRepeat.Y)\n          .inter", "e('/images/bg.jpg', ImageRepeat.NoRepeat)\n        .", "      .objectRepeat(ImageRepeat.NoRepeat)\n         ", "mages/download.png',ImageRepeat.Y)\n        .backgro"], "files": ["backgroundAndSizeSetting.ets", "EnmusImageJsunit.test.ets", "ImageJsunit.test.ets", "Image.ets", "background.ets", "enumsImage.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRepeat", "api_method_name": "NoRepeat", "api_method_all": "NoRepeat,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["tRepeat(ImageRepeat.NoRepeat)\n          .interpo", "tEqual('ImageRepeat.NoRepeat')\n      expect(obj.", "g.jpg', ImageRepeat.NoRepeat)\n        .backgroun"], "files": ["backgroundAndSizeSetting.ets", "background.ets", "ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRepeat", "api_method_name": "X", "api_method_all": "X,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5514, "since": 7, "api_used": "\u662f", "lines": [": 0x7FFFFFFF, offsetX: 0x7FFFFFFF, offset", ": Color.Gray, offsetX: 10, offsetY: 10\n  ", "$attrs.shadow.offsetX).assertEqual(\"0.000", "ius'\nconst ATTRS_FLEXBASIC = 'flexBasis'\n", " xStep = (upX - downX) / swipeSteps;\n    ", "g.jpg', ImageRepeat.X)\n        .backgroun", "$attrs.shadow.offsetX).assertEqual(\"5.000", "$attrs.rotate.centerX).assertEqual('50.00", "lor: 'error', offsetX: 'error', offsetY: ", " image repeat along X').fontSize(9).width", ":5, y:1, z:1, centerX:50, centerY:50})\n  ", "st ATTRS_MARKANCHOR_X = 'x'\nconst ATTRS_M", " ATTRS_SHADOW_OFFSETX = 'offsetX'\nconst A", "sertEqual('SizeType.XS');\n      expect(ob", "$attrs.shadow.offsetX).assertEqual(\"21474", "ipe(downX, downY, upX, upY, steps) {\n    ", "SizeType = SizeType.XS;\n  private stateCh", "olor'\nconst ATTRS_TEXTALIGN = 'textAlign'", "atic async drag(downX, downY, upX, upY, s", ": Color.Gray, offsetX: 5, offsetY: 5 }\n  ", ": 1,\n        x: downX + (xStep * i),\n    ", "ags(downX, downY, upX, upY, steps, true)\n", "ags(downX, downY, upX, upY, steps, drag) ", "set'\nconst ATTRS_FLEXSHRINK = 'flexShrink", "onst ATTRS_POSITION_X = 'x'\nconst ATTRS_P", "\nconst ATTRS_OFFSET_X = 'x'\nconst ATTRS_O", ": 0x80000000, offsetX: 0x80000000, offset", "Case'\nconst ATTRS_MAXLINES = 'maxLines'\nc", "reak;\n        case 'XS':\n          this.s", "OW_OFFSETX = 'offsetX'\nconst ATTRS_SHADOW", "$attrs.shadow.offsetX).assertEqual(\"10.00", "GROUNDIMAGEPOSITION_X = 'x'\nconst ATTRS_B", "sizeType = SizeType.XS;\n          break;\n", "    z: 1,\n    centerX: '50%',\n    centerY", "  id: 1,\n      x: upX,\n      y: upY,\n    ", "rag(downX, downY, upX, upY, steps) {\n    ", "tic async swipe(downX, downY, upX, upY, s", "Size'\nconst ATTRS_TEXTCASE = 'textCase'\nc", "tic async drags(downX, downY, upX, upY, s", "\n    this.drags(downX, downY, upX, upY, s", "= '$ID'\nconst Z_INDEX = '$z-index'\nconst ", "fset'\nconst ATTRS_TEXTOVERFLOW = 'textOve", "   }\n    xStep = (upX - downX) / swipeSte", "ags(downX, downY, upX, upY, steps, false)", "n'\nconst ATTRS_ZINDEX = 'zIndex'\nconst AT", "id: 1,\n      x: downX,\n      y: downY,\n  ", "ink'\nconst ATTRS_FLEXGROW = 'flexGrow'\nco"], "files": ["MotionPathJsunit.test.ets", "Utils.ets", "panDirection.ets", "VideoJsunit.test.ets", "pathProps.test.js", "ImageEffectsJsunit.test.ets", "gridContainer.ets", "circleProps.test.js", "imageAnimatorProps.test.js", "marqueeProps.test.js", "DragEventJsunit.test.ets", "mouseEvent.ets", "background.ets", "XComponentPage.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "imageEffects.ets", "ButtonJsunit.test.ets", "Constants.ets", "polylineProps.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "searchProps.test.js", "FormComponentPage.ets", "GridContainerJsunit.test.ets", "rectProps.test.js", "polygonProps.test.js", "GridContainer.ets", "dragEvent2.ets", "index.js", "toggleProps.test.js", "backgroundAndSizeSetting.ets", "calendar.ets", "animateTransformProps.test.js", "dragEvent.ets", "PanGesture.ets", "tspanProps.test.js", "svgProps.test.js", "Image.ets", "textareaProps.test.js", "svgTextProps.test.js", "transForm.ets", "gridColProps.test.js", "gestureMode.ets", "motionPath.ets", "button.ets", "gridContainerProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRepeat", "api_method_name": "Y", "api_method_all": "Y,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5435, "since": 7, "api_used": "\u662f", "lines": ["$attrs.shadow.offsetY).assertEqual(\"21474", " yStep = (upY - downY) / swipeSteps;\n    ", " x: upX,\n      y: upY,\n      type: TouchT", "etX: 'error', offsetY: 'error' };\n      t", "'\nconst ATTRS_DISPLAYPRIORITY = 'displayP", "ad.png',ImageRepeat.Y)\n        .backgroun", "onst ATTRS_POSITION_Y = 'y'\nconst ATTRS_B", " ATTRS_SHADOW_OFFSETY = 'offsetY'\nconst A", ": 0x80000000, offsetY: 0x80000000 };\n    ", " ATTRS_LAYOUTPRIORITY = 'layoutPriority'\n", "GROUNDIMAGEPOSITION_Y = 'y'\nconst ATTRS_B", "OW_OFFSETY = 'offsetY'\nconst ATTRS_WINDOW", "ownX, downY, upX, upY, steps) {\n    conso", "lur'\nconst ATTRS_GRAYSCALE = 'grayscale'\n", "st ATTRS_MARKANCHOR_Y = 'y'\nconst ATTRS_P", " offsetX: 10, offsetY: 10\n      };\n      ", "ownX, downY, upX, upY, steps, drag) {\n   ", ": 0x7FFFFFFF, offsetY: 0x7FFFFFFF };\n    ", "$attrs.shadow.offsetY).assertEqual(\"5.000", "$attrs.shadow.offsetY).assertEqual(\"10.00", "ownX, downY, upX, upY, steps, true)\n  }\n\n", "ownX, downY, upX, upY, steps, false)\n  }\n", "ight'\nconst ATTRS_LAYOUTPRIORITY = 'layou", "rity'\nconst ATTRS_LAYOUTWEIGHT = 'layoutW", ", offsetX: 5, offsetY: 5 }\n  @State grays", "nc swipe(downX, downY, upX, upY, steps) {", "g.jpg', ImageRepeat.Y)\n        .backgroun", "const ATTRS_BORDERSTYLE = 'borderStyle'\nc", "\nconst ATTRS_OFFSET_Y = 'y'\nconst ATTRS_S", "@ts-nocheck\n\nconst TYPE = '$type'\nconst I", "is.drags(downX, downY, upX, upY, steps, t", " ATTRS_WINDOWBLUR_STYLE = 'style'\nconst A", "onst ATTRS_VISIBILITY = 'visibility'\ncons", "ATTRS_DISPLAYPRIORITY = 'displayPriority'", "$attrs.shadow.offsetY).assertEqual(\"0.000", "nc drags(downX, downY, upX, upY, steps, d", " image repeat along Y').fontSize(9).width", " i),\n        y: downY + (yStep * i),\n    ", "ync drag(downX, downY, upX, upY, steps) {", ", centerX:50, centerY:50})\n  @State matri", "onst ATTRS_FONTFAMILY = 'fontFamily'\ncons", "is.drags(downX, downY, upX, upY, steps, f", "'\nconst ATTRS_FONTSTYLE = 'fontStyle'\ncon", "'\nconst ATTRS_OPACITY = 'opacity'\nconst A", "downX,\n      y: downY,\n      type: TouchT", "X: '50%',\n    centerY: '50%',\n    angle: ", "eps;\n    yStep = (upY - downY) / swipeSte"], "files": ["MotionPathJsunit.test.ets", "ImageJsunit.test.ets", "Utils.ets", "panDirection.ets", "pathProps.test.js", "configuration.ets", "ImageEffectsJsunit.test.ets", "Tab.ets", "circleProps.test.js", "DragEventJsunit.test.ets", "mouseEvent.ets", "background.ets", "enumsImage.ets", "canvas.ets", "ohosMatrix4.ets", "Text.ets", "lineProps.test.js", "imageEffects.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextInput.ets", "Span.ets", "Constants.ets", "polylineProps.test.js", "Scroll.ets", "TransFormJsunit.test.ets", "ellipseProps.test.js", "ConfigurationJsunit.test.ets", "EnmusImageJsunit.test.ets", "tabs.ets", "rectProps.test.js", "polygonProps.test.js", "TextArea.ets", "ResponseRegionJsunit.test.ets", "dragEvent2.ets", "index.js", "basicabilityapi.test.js", "backgroundAndSizeSetting.ets", "calendar.ets", "ResponseRegion.ets", "dragEvent.ets", "PanGesture.ets", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "Image.ets", "svgTextProps.test.js", "transForm.ets", "Calendar.ets", "gestureMode.ets", "motionPath.ets", "button.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRepeat", "api_method_name": "XY", "api_method_all": "XY,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["tRepeat(ImageRepeat.XY)\n          .interpo", "entAction + '\\nlocalXY=(' + event.x + ',' ", "nt.action + '\\nlocalXY=(' + event.x + ',' ", ".y + ')' + '\\nscreenXY=(' + event.screenX "], "files": ["mouseEvent.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSize", "api_method_all": "declare enum ImageSize {\n  \n  Auto,\n\n  \n  Cover,\n\n  \n  Contain,\n}", "api_method_name": "ImageSize", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 37, "since": 7, "api_used": "\u662f", "lines": ["\n        .backgroundImageSize(ImageSize.Contain)\n", "\n        .backgroundImageSize({ width: '250px', h", "     this.backgroundImageSize = eventData.data.ba", "backgroundImageSize(ImageSize.Contain)\n        .b", "\n  @State backgroundImageSize: ImageSize = ImageS", "\n        .backgroundImageSize(ImageSize.Cover)\n  ", "\n        .backgroundImageSize({ width: '500px', h", "         this.getBitImageSize();\n              th", "geSize: ImageSize = ImageSize.Cover\n  @State back", "Data.data.backgroundImageSize;\n      }\n      if (", "Data.data.backgroundImageSize != null) {\n        ", "\n        .backgroundImageSize({ width: 1000, heig", "bj.$attrs.backgroundImageSize).assertEqual('Image", "\n        .backgroundImageSize({ width: 1200, heig", "obj));\n  }\n\n  getBitImageSize() {\n    let img = n", "eSize).assertEqual('ImageSize.Auto');\n      conso", "ackgroundImageSize: ImageSize = ImageSize.Cover\n ", "GESIZE = 'backgroundImageSize'\nconst ATTRS_OFFSET", "Data.data.backgroundImageSize;\n      }\n      if(e", "backgroundImageSize(ImageSize.Auto)\n        .widt", "backgroundImageSize(ImageSize.Cover)\n        .bor", "\n        .backgroundImageSize(ImageSize.Auto)\n   "], "files": ["backgroundAndSizeSetting.ets", "EnmusImageJsunit.test.ets", "imageEffects.ets", "Constants.ets", "background.ets", "enumsImage.ets", "canvas.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSize", "api_method_name": "Auto", "api_method_all": "Auto,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 581, "since": 7, "api_used": "\u662f", "lines": ["pAuto : this.dirPropAuto,\n             dirPr", "     this.rotatePropAutoReverse = this.$elem", "\n            dirPropAuto : this.dirPropAuto,", ".objectFit(ImageFit.Auto).width(110).height(", "se : this.rotatePropAutoReverse,\n           ", "= SwiperDisplayMode.AutoLinear\n  @State edge", "is.$element(\"dirPropAuto\").getInspector()\n  ", "        this.dirPropAuto = this.$element(\"di", "ertEqual('Direction.Auto');\n      console.in", "ertEqual(\"ItemAlign.Auto\");\n      console.in", "autoReset' + this.isAutoReset).onClick(() =>", "sertEqual('BarState.Auto')\n      console.inf", "          rotatePropAutoReverse : this.rotat", "          .overlay('Auto', { align: Alignmen", "ateValue\": BarState.Auto\n          }\n       ", "emAlign = ItemAlign.Auto\n\n  build() {\n    Fl", "Style = BorderStyle.Auto;\n  @State borderRad", "pe) {\n        case 'Auto':\n          this.si", "ll,\n         dirPropAuto : null,\n         di", "rection = Direction.Auto\n  @State position: ", "ber= 30;\n  @State isAutoReset: boolean= true", "ignSelf = ItemAlign.Auto;\n      }\n    }\n  }\n", "n\", LayoutDirection.Auto);\n      let enable2", "ImageSize(ImageSize.Auto)\n        .width('90", "ertEqual('ImageSize.Auto');\n      console.in", "AutoReset = !this.isAutoReset\n        }).mar", "pAuto : this.dirPropAuto,\n            dirPro", "ignSelf = ItemAlign.Auto;\n          break;\n ", "ertEqual(\"Direction.Auto\")\n      expect(obj.", "ection\":  Direction.Auto,\n          }\n      ", "lf) {\n        case 'Auto':\n          this.al", ",\n        rotatePropAutoReverse : null,\n    ", "sizeType = SizeType.Auto;\n          break;\n ", " {\n          this.isAutoReset = !this.isAuto", "sizeType = SizeType.Auto;\n      }\n    }\n  }\n", " sizeType: SizeType.Auto, gutter: 10, margin", "al, state: BarState.Auto }) {\n          Text", "$element(\"rotatePropAutoReverse\").getInspect", "  .autoReset(this.isAutoReset)\n        .onPa", "ull,\n        dirPropAuto : null,\n        dir", "             dirPropAuto : this.dirPropAuto,", " == LayoutDirection.Auto)\n      .assertTrue;", "ertEqual(\"ItemAlign.Auto\")\n      expect(obj.", "emAlign = ItemAlign.Auto\n  @State borderStyl"], "files": ["ratingProps.test.js", "flex.ets", "listItemGroupProps.test.js", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "tabContentProps.test.js", "textProps.test.js", "ScrollBarJsunit.test.ets", "enumsImage.ets", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "imageFit.ets", "TextJsunit.test.ets", "swiper.ets", "popupProps.test.js", "gridContainerProps.test.js", "CheckboxGroupJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "EnmusImageJsunit.test.ets", "spanProps.test.js", "stepperItemProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "enumsItemAlign.ets", "toolbarItemProps.test.js", "videoProps.test.js", "RowJsunit.test.ets", "GridContainer.ets", "inputProps.test.js", "index.js", "FlexJsunit.test.ets", "optionProps.test.js", "tabBarProps.test.js", "toggleProps.test.js", "AppStorageJsunit.test.ets", "badgeProps.test.js", "border.ets", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "Direction2Jsunit.test.ets", "gridColProps.test.js", "panelProps.test.js", "ScrollBar.ets", "menuProps.test.js", "buttonProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSize", "api_method_name": "Cover", "api_method_all": "Cover,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["ground fill the box(Cover)').fontSize(9).widt", "jectFit: ImageFit = Cover\n\n  build() {\n    Co", ".objectFit(ImageFit.Cover)\n          .objectR", ".objectFit(ImageFit.Cover)\n        .key('vide", "sertEqual('ImageFit.Cover')\n      expect(obj.", "ImageSize(ImageSize.Cover)\n        .border({ ", "ageSize = ImageSize.Cover\n  @State background"], "files": ["backgroundAndSizeSetting.ets", "imageFit.ets", "ImageJsunit.test.ets", "Video.ets", "Image.ets", "background.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSize", "api_method_name": "Contain", "api_method_all": "Contain,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 380, "since": 7, "api_used": "\u662f", "lines": ["dth('90%').key('gridContainer').margin({ top: 3", "lityJsunit();\n  girdContainerJsunit();\n  areaCh", "os.emitter';\n\nclass ContainerInfo {\n  label: st", "omponent\nstruct gridContainer {\n  @State sizeTy", "    uri: 'pages/gridContainer',\n      }\n      t", " }) {\n          GridContainer({ columns: 12, si", "  build() {\n    GridContainer({ sizeType: SizeT", "   }\n\n          GridContainer({ columns: \"auto\"", "nsole.info('testGirdContainer01 END');\n      do", "sole.info(\"[testGirdContainer01] obj is: \" + JS", "ground fill the box(Contain)').fontSize(9).widt", " private container: ContainerInfo[] = [\n    { l", "nsole.log(\"[testGirdContainer02] change compone", "e).assertEqual('GridContainer');\n      expect(o", "sole.info('[testGirdContainer01] START');\n     ", "  console.info(\"girdContainer after each called", "sole.info(\"push girdContainer page result:\" + J", "InspectorByKey('gridContainer');\n      let obj ", "nsole.info('testGirdContainer02 END');\n      do", "  console.info('GridContainer page build done c", "rJsunit from './GridContainerJsunit.test.ets';\n", "  console.info(\"girdContainer beforeEach start\"", "ole.error(\"push girdContainer page error:\" + er", ") {\n  describe('girdContainerTest', function ()", "sole.info(\"[testGirdContainer02] obj is: \" + JS", "e: 5 }) {\n      GridContainer({ columns: 12, si", "nsole.info(\"get girdContainer state pages:\" + J", "BarContainer(SideBarContainerType.Embed)\n    {\n", "  console.info('gridContainer page show called'", "  console.info(\"gridContainer page state change", "sole.info(\"[testGirdContainer02] start to publi", "\n        if (!(\"gridContainer\" == pages.name)) ", ";\n\n\n    it('testGirdContainer02', 0, async func", "          .overlay('Contain', { align: Alignmen", ");\n\n    it('testGirdContainer01', 0, async func", "omponent\nstruct GridContainerExample {\n  @State", "ImageSize(ImageSize.Contain)\n        .border({ ", "  console.info('GridContainer page show called'", "         }.key('gridContainer')\n          .widt", "st.ets';\nimport girdContainerJsunit from './Gri", "uild() {\n    SideBarContainer(SideBarContainerT", "nsole.info(\"get girdContainer state pages.name:", ".objectFit(ImageFit.Contain).width(110).height(", "InspectorByKey('gridContainer');\n      console.", "10 })\n    .key('gridContainer')\n  }\n\n  onPageSh", "efault function girdContainerJsunit() {\n  descr", "tent: string = \"GridContainer Page\"\n\n  onPageSh"], "files": ["backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "imageFit.ets", "GridContainerJsunit.test.ets", "ImageJsunit.test.ets", "List.test.js", "layoutConstraints.ets", "gridContainer.ets", "gridSettings.ets", "Image.ets", "sideBar.ets", "background.ets", "GridContainer.ets", "commonComponentJsApi.test.js", "GridSettingsJsunit.test.ets", "List.test.ets", "Sidebar.ets", "gridContainerProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GradientDirection", "api_method_all": "declare enum GradientDirection {\n  \n  Left,\n\n  \n  Top,\n\n  \n  Right,\n\n  \n  Bottom,\n\n  \n  LeftTop,\n\n  \n  LeftBottom,\n\n  \n  RightTop,\n\n  \n  RightBottom,\n\n  \n  None,\n}", "api_method_name": "GradientDirection", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 53, "since": 7, "api_used": "\u662f", "lines": ["\n        direction: GradientDirection.Top,\n        colors", "      console.info('GradientDirectionTest_0400 START');\n ", "      console.info(\"GradientDirectionTest_0100 component ", ");\n    });\n\n    it('GradientDirectionTest_0200', 0, async", "  @State direction: GradientDirection = GradientDirection", "          \"ACTION\": GradientDirection.None\n          }\n  ", "      console.info('GradientDirectionTest_0100 START');\n ", "          \"ACTION\": GradientDirection.RightBottom\n       ", "       console.log(\"GradientDirectionTest_0200 change com", "ction).assertEqual('GradientDirection.RightBottom');\n    ", ");\n    });\n\n    it('GradientDirectionTest_0400', 0, async", "      console.info(\"GradientDirection page state change c", "nfo('beforeEach get GradientDirection state pages.name:' ", "GradientDirection = GradientDirection.LeftTop\n\n  build() ", "fo('beforeEach push GradientDirection page result:' + JSO", "      console.info('GradientDirectionTest_0200 END');\n   ", "      console.info(\"GradientDirectionTest_0400 start to p", "ction).assertEqual('GradientDirection.LeftTop');\n      co", "nfo('beforeEach get GradientDirection state pages:' + JSO", "      console.info('GradientDirectionTest_0300 START');\n ", "ction).assertEqual('GradientDirection.Left');\n      expec", "ction).assertEqual('GradientDirection.Top');\n      expect", ");\n    });\n\n    it('GradientDirectionTest_0100', 0, async", "      console.info(\"GradientDirectionTest_0400 component ", "or('beforeEach push GradientDirection page error:' + err)", "      console.info('GradientDirectionTest_0300 END');\n   ", "nit() {\n  describe('GradientDirectionTest', function () {", " ===================GradientDirection test beforeEach cal", " getInspectorByKey('GradientDirection');\n      console.in", "          \"ACTION\": GradientDirection.LeftBottom\n        ", "      console.info(\"GradientDirectionTest_0200 start to p", " ===================GradientDirection test after each cal", " 90,\n    direction: GradientDirection.Left,\n    colors: [", "ction).assertEqual('GradientDirection.LeftBottom');\n     ", "       console.log(\"GradientDirectionTest_0300 change com", "      console.info(\"GradientDirectionTest_0300 component ", "      console.info('GradientDirectionTest_0200 START');\n ", "0]]\n        }).key(\"GradientDirection\")\n    }\n    .width(", "       console.log(\"GradientDirectionTest_0400 change com", "      console.info(\"GradientDirectionTest_0200 component ", "      console.info(\"GradientDirectionTest_0300 start to p", ");\n    });\n\n    it('GradientDirectionTest_0300', 0, async", "      console.info('GradientDirectionTest_0100 END');\n   "], "files": ["GradientDirectionJsunit.test.ets", "List.test.ets", "colorGradient.ets", "gradientDirection.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GradientDirection", "api_method_name": "Left", "api_method_all": "Left,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 54, "since": 8, "api_used": "\u662f", "lines": ["tion: BadgePosition.Left,\n            maxCou", ".value.typeDirectionLeft);\n        console.i", "ement).assertEqual('Left')\n        console.i", "       placementPropLeft : this.placementPro", "tLeft:this.placementLeft,\n             place", ", left: this.paddingLeft })\n        .margin(", "sertEqual('placementLeft')\n        expect(ob", "= GradientDirection.LeftTop\n\n  build() {\n   ", "t = Placement.BottomLeft\n  @State placementT", "ement(\"typeDirectionLeft\").getInspector()\n  ", "ll,\n        typeLoopLeft : null,\n        typ", "nStyle(IndexerAlign.Left)\n        .onSelecte", "           placementLeft:this.placementLeft,", "  this.typeDirectionLeft = this.$element(\"ty", "marqueeDirectionPropLeft', 0, async function", "('GradientDirection.Left');\n      expect(obj", "('GradientDirection.LeftTop');\n      console", "('testbadgeplacementLeft START');\n        co", "ement(\"placementPropLeft\").getInspector()\n  ", "       typeDirectionLeft : this.typeDirectio", "ual(Placement.BottomLeft);\n      }\n      let", "('testbadgeplacementLeft', 0, async function", "Equal('typeDirectionLeft')\n        expect(ob", ") {\n          Text('Left').fontSize(25)\n    ", ",\n         placementLeft:null,\n         plac", "tion-'BadgePosition.Left'\" + JSON.stringify(", "  this.placementPropLeft = this.$element(\"pl", "       placementPropLeft : null,\n        pla", "('GradientDirection.LeftBottom');\n      cons", "ment = Placement.TopLeft\n  @State placementO", ": GradientDirection.Left,\n    colors: [[0xAE", ": this.typeDirectionLeft,\n            typeDi", ": GradientDirection.LeftBottom\n          }\n ", ": this.placementPropLeft,\n            placem", "            typeLoopLeft : this.typeLoopLeft", "Left : this.typeLoopLeft,\n            typeRi", "0px\"\n  @State marginLeft: string = \"10px\"\n  ", "ement(\"typeDirectionLeft\").getInspector()\n\n ", "Text(\"BadgePosition.Left\").fontSize(16)\n    ", "       this.typeLoopLeft = this.$element(\"ty", "t, left: this.marginLeft })\n        .constra", "This.value.placementLeft);\n        console.i", "       typeDirectionLeft : null,\n        typ", "  testbadgeplacementLeft\n      * @tc.desc   ", "   testPlacementPropLeft\n     * @tc.desc    ", "qual('BadgePosition.Left');\n      console.lo", "\"5\"\n  @State paddingLeft: string= \"5\"\n  @Sta", "      this.placementLeft = this.$element(\"pl", "tEqual(Placement.TopLeft);\n      }\n      let", ".$element(\"placementLeft\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "placement.ets", "GradientDirectionJsunit.test.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "colorGradient.ets", "gradientDirection.ets", "Text.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GradientDirection", "api_method_name": "Top", "api_method_all": "Top,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 174, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.TopStart)\n          .zI", "nContent: Alignment.TopStart }) {\n      Scr", "acement = Placement.TopLeft\n  @State placem", "adientDirection.LeftTop\n\n  build() {\n    Co", "acement = Placement.TopRight\n  @State place", "   Text('alignItems(Top)').fontSize(9).font", "sertEqual(Placement.TopLeft);\n      }\n     ", "         placementOnTop: this.placementOnTo", "nContent: Alignment.TopStart }) {\n      Col", "nContent: Alignment.TopStart }) {\n         ", "sertEqual(Placement.TopRight);\n      }\n    ", "('GradientDirection.Top');\n      expect(obj", "ac).align(Alignment.Top)\n      }\n      .wid", "te edge: Edge= Edge.Top\n  private content: ", "ertEqual(\"Alignment.TopStart\");\n      conso", "b3).align(Alignment.TopStart)\n        Text(", "op: this.placementOnTop,\n          onStateC", "ent.data.placementOnTop).assertEqual(false)", "nContent: Alignment.TopStart }) {\n        T", " BadgePosition.RightTop,\n            maxCou", "ignment = Alignment.TopStart;\n  @State dire", "  @State placementOnTop: boolean = false\n\n ", "ertEqual(\"Alignment.TopStart\");\n      expec", "        \"placementOnTop\": this.placementOnT", "adientDirection.LeftTop');\n      console.in", "ac).align(Alignment.Top)\n      }.width('100", "p\": this.placementOnTop,\n              }\n  ", "ler.scrollEdge(Edge.Top)\n        })\n       ", "\"align\": \"Alignment.TopStart\",\n            ", "   .align(Alignment.TopStart)\n          .he", ": GradientDirection.Top,\n        colors: [[", "b3).align(Alignment.Top)\n        Text('Seco", "\"BadgePosition.RightTop\").fontSize(16)\n    ", "s.context.fillText('Top', 60, height + 10);", "Items(VerticalAlign.Top).height('15%').bord", "ler.scrollEdge(Edge.Top)\n            })\n   ", "nContent: Alignment.Top }) {\n        Text('"], "files": ["row.ets", "direction2.ets", "placement.ets", "BadgeJsunit.test.ets", "canvas.ets", "Text.ets", "Row.ets", "Stack.ets", "TextJsunit.test.ets", "popupProps.test.js", "scrollCode.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "Scroll.ets", "AlertDialog.ets", "list.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "PlacementJsunit.test.ets", "index.js", "gradientDirection.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "badgeProps.test.js", "StackJsunit.test.ets", "bindPopup.ets", "Badge.ets", "BindPopupJsunit.test.ets", "buttonProps.test.js", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GradientDirection", "api_method_name": "Right", "api_method_all": "Right,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 60, "since": 8, "api_used": "\u662f", "lines": ["  });\n    },\n    setRightButton(e) {\n        ", "qual('BadgePosition.RightTop');\n      console", "('testbadgeplacementRight', 0, async function", "ype: ResponseType = RightClick;\n  @Builder Co", "ual(Placement.BottomRight);\n      }\n      let", ": GradientDirection.RightBottom\n          }\n ", "('testbadgeplacementRightTop', 0, async funct", "nStyle(IndexerAlign.Right)\n        .margin({ ", ": null,\n        typeRight : null,\n    },\n\n   ", ".$element(\"placementRight\").getInspector()\n  ", "       placementPropRight : this.placementPro", "       typeDirectionRight : null,\n        typ", ",\n         placementRightTop:null,\n         p", ": this.typeDirectionRight,\n            typeLo", "tion: BadgePosition.Right,\n            maxCou", "ition-BadgePosition.Right\" + JSON.stringify(o", "htTop:this.placementRightTop,\n             pl", "  testbadgeplacementRightTop\n      * @tc.desc", "Text(\"BadgePosition.RightTop\").fontSize(16)\n ", "tion: BadgePosition.RightTop,\n            max", "           placementRightTop:this.placementRi", "This.value.placementRight);\n        console.i", "ypeRight : this.typeRight,\n        }\n    },\n\n", "       placementPropRight : null,\n        pla", "('GradientDirection.RightBottom');\n      cons", "Right:this.placementRight,\n             place", "()\n        this.typeRight = this.$element(\"ty", "  this.placementPropRight = this.$element(\"pl", "tion-'BadgePosition.RightTop'\" + JSON.stringi", "ft,\n            typeRight : this.typeRight,\n ", "      this.placementRightTop = this.$element(", "('testbadgeplacementRight START');\n        co", ",\n         placementRight:null,\n         plac", "('testbadgeplacementRightTop START');\n       ", ".$element(\"placementRightTop\").getInspector()", "sertEqual('placementRight')\n        expect(ob", "      this.placementRight = this.$element(\"pl", ") {\n          Text('Right').fontSize(25)\n    ", "t = Placement.BottomRight\n\n  @Builder popupBu", "  this.typeDirectionRight = this.$element(\"ty", "       typeDirectionRight : this.typeDirectio", "  testbadgeplacementRight\n      * @tc.desc   ", "qual('BadgePosition.Right');\n      console.lo", "ement(\"typeDirectionRight\").getInspector()\n  ", "tEqual(Placement.TopRight);\n      }\n      let", "ment = Placement.TopRight\n  @State placementT", "           placementRight:this.placementRight", ": this.placementPropRight,\n            placem", "ement(\"placementPropRight\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "GradientDirectionJsunit.test.ets", "placement.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "bindContextMenu.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GradientDirection", "api_method_name": "Bottom", "api_method_all": "Bottom,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 119, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.Bottom)\n        .width('10", "adientDirection.LeftBottom\n          }\n       ", "dientDirection.RightBottom\n          }\n       ", "t: 'DialogAlignment.BottomEnd',\n            co", "ertEqual('Alignment.Bottom')\n      console.inf", "      this.placementBottom = this.$element(\"pl", "dientDirection.RightBottom');\n      console.in", "ertEqual(\"Alignment.BottomEnd\")\n      expect(o", "ertEqual('Alignment.BottomEnd')\n      console.", "nContent: Alignment.BottomEnd }) {\n        Tex", "ertEqual(\"Alignment.BottomStart\")\n      consol", " { align: Alignment.Bottom, offset: { x: 0, y:", "ignment = Alignment.Bottom\n\n  onPageShow() {\n ", ".$element(\"placementBottom\").getInspector()\n  ", "   Text('alignItems(Bottom)').fontSize(9).font", "   .align(Alignment.BottomStart)\n        .widt", "acement = Placement.BottomRight\n\n  @Builder po", "s.align = Alignment.BottomEnd;\n      } else if", "t: 'DialogAlignment.Bottom',\n            prima", "tom : this.placementBottom, placementNone : th", "Items(VerticalAlign.Bottom).justifyContent(Fle", "ertEqual(\"Alignment.Bottom\")\n      expect(obj.", "sertEqual(Placement.BottomRight);\n      }\n    ", "sertEqual(Placement.BottomLeft);\n      }\n     ", "ertEqual('Alignment.BottomStart')\n      consol", "this.currentTest = 'BottomStart'\n             ", "s.context.fillText('Bottom', 150, height - 10)", "lacement: Placement.Bottom,\n          maskColo", "adientDirection.LeftBottom');\n      console.in", "xtAlign\": Alignment.BottomEnd\n          }\n    ", "t: 'DialogAlignment.BottomStart',\n            ", "ertEqual(\"Alignment.Bottom\");\n      expect(obj", "nContent: Alignment.BottomStart }) {\n        T", "00 }\n  @State marginBottom: string = \"10px\"\n  ", "bottom: this.paddingBottom, top: this.paddingT", "l,\n        placementBottom : null,\n        pla", "acement = Placement.BottomLeft\n  @State placem", "           placementBottom : this.placementBot", ");\n    },\n\n    reachBottom(){\n        prompt.s", "px\"\n  @State paddingBottom: string= \"5\"\n  @Sta", "   .align(Alignment.BottomEnd)\n        .width(", "ignment = Alignment.Bottom\n  private content: ", " bottom: this.marginBottom, top: this.marginTo"], "files": ["placement.ets", "canvas.ets", "Text.ets", "imageFit.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "GradientDirectionJsunit.test.ets", "PositionSettingJsunit.test.ets", "touchAble.ets", "AlertDialog.ets", "positionSetting.ets", "index.js", "PlacementJsunit.test.ets", "OverlayJsunit.test.ets", "StackJsunit.test.ets", "bindPopup.ets", "row.ets", "overlay.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GradientDirection", "api_method_name": "LeftTop", "api_method_all": "LeftTop,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["= GradientDirection.LeftTop\n\n  build() {\n    Co", "('GradientDirection.LeftTop');\n      console.in"], "files": ["GradientDirectionJsunit.test.ets", "gradientDirection.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GradientDirection", "api_method_name": "LeftBottom", "api_method_all": "LeftBottom,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.LeftBottom');\n      console.in", ": GradientDirection.LeftBottom\n          }\n       "], "files": ["GradientDirectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GradientDirection", "api_method_name": "RightTop", "api_method_all": "RightTop,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": [".$element(\"placementRightTop\").getInspector()\n  ", "tion-'BadgePosition.RightTop'\" + JSON.stringify(", "      this.placementRightTop = this.$element(\"pl", ",\n         placementRightTop:null,\n         plac", "Text(\"BadgePosition.RightTop\").fontSize(16)\n    ", "This.value.placementRightTop);\n        console.i", "tion: BadgePosition.RightTop,\n            maxCou", "  testbadgeplacementRightTop\n      * @tc.desc   ", "sertEqual('placementRightTop')\n        expect(ob", "           placementRightTop:this.placementRight", "('testbadgeplacementRightTop START');\n        co", "qual('BadgePosition.RightTop');\n      console.lo", "htTop:this.placementRightTop,\n             place", "('testbadgeplacementRightTop', 0, async function"], "files": ["Badge.ets", "badgeProps.test.js", "BadgeJsunit.test.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GradientDirection", "api_method_name": "RightBottom", "api_method_all": "RightBottom,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.RightBottom');\n      console.in", ": GradientDirection.RightBottom\n          }\n       "], "files": ["GradientDirectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GradientDirection", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SharedTransitionEffectType", "api_method_all": "declare enum SharedTransitionEffectType {\n  \n  Static,\n\n  \n  Exchange,\n}", "api_method_name": "SharedTransitionEffectType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["a.type).assertEqual(SharedTransitionEffectType.Exchange);\n      }\n", "            \"type\": SharedTransitionEffectType.Exchange\n          ", " = 0\n  @State type: SharedTransitionEffectType = SharedTransitionE", "nsitionEffectType = SharedTransitionEffectType.Static\n\n  build() {"], "files": ["SharedTransitionJsunit.test.ets", "sharedTransition.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SharedTransitionEffectType", "api_method_name": "Static", "api_method_all": "Static,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ransitionEffectType.Static\n\n  build() {\n    Li"], "files": ["sharedTransition.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SharedTransitionEffectType", "api_method_name": "Exchange", "api_method_all": "Exchange,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["ransitionEffectType.Exchange\n          }\n       ", "ransitionEffectType.Exchange);\n      }\n      let"], "files": ["SharedTransitionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FontStyle", "api_method_all": "declare enum FontStyle {\n  \n  Normal,\n\n  \n  Italic,\n}", "api_method_name": "FontStyle", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 63, "since": 7, "api_used": "\u662f", "lines": ["ly: 'serif', style: FontStyle.Normal }\n  @State f", "sans-serif', style: FontStyle.Normal\n      };\n   ", "soft YaHei', style: FontStyle.Normal })\n         ", "Style).assertEqual(\"FontStyle.Italic\")\n      expe", "soft YaHei', style: FontStyle.Normal })\n        .", "tStyle: FontStyle = FontStyle.Italic;\n  @State fo", "Weight.Bold, style: FontStyle.Italic })\n        .", "Style).assertEqual('FontStyle.Normal');\n      don", "  @State fontStyle: FontStyle = FontStyle.Italic\n", "         .fontStyle(FontStyle.Italic)\n          .", "ight.Bolder, style: FontStyle.Normal })\n        .", "tStyle: FontStyle = FontStyle.Italic;\n  @State sh", "       \"fontStyle\": FontStyle.Normal\n          }\n", "tStyle: FontStyle = FontStyle.Italic\n  @State fon", "\n        .fontStyle(FontStyle.Italic)\n        .fo", "',\n          style: FontStyle.Normal\n        })\n ", "style).assertEqual('FontStyle.Normal');\n      don", "  @State fontStyle: FontStyle = FontStyle.Italic;", "         .fontStyle(FontStyle.Italic)\n           ", ": 'cursive', style: FontStyle.Italic })\n        .", "\n        .fontStyle(FontStyle.Normal)\n        .fo", "ly: 'serif', style: FontStyle.Normal })\n        .", "Style).assertEqual('FontStyle.Italic');\n      don"], "files": ["Select.ets", "textStyle.ets", "TextInputJsunit.test.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "SelectJsunit.test.ets", "select.ets", "Span.ets", "textArea.ets", "textInput.ets", "TextJsunit.test.ets", "AlphabetIndexer.ets", "TextAreaJsunit.test.ets", "TextArea.ets", "search.ets", "PieceCode.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FontStyle", "api_method_name": "Normal", "api_method_all": "Normal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 102, "since": 7, "api_used": "\u662f", "lines": ["ntStyle\": FontStyle.Normal\n          }\n       ", "assertEqual('Sticky.Normal');\n      console.in", ") {\n        Text(\"3.Normal\")\n      }.type(Butt", "ertEqual('FontStyle.Normal');\n      done();\n  ", "putType = InputType.Normal;\n  @State fontSize:", "rtEqual('FontWeight.Normal');\n      done();\n  ", "sertEqual(\"TextCase.Normal\")\n      expect(obj.", "rtEqual('ButtonType.Normal')\n      console.inf", "       Text('sticky:Normal , item2222')\n      ", "       Text('sticky:Normal , click me edit lis", "ky: Sticky = Sticky.Normal;\n  @State editMode:", "emState = ItemState.Normal\n\n  build() {\n    St", "sertEqual('TextCase.Normal');\n      done();\n  ", "    Text('Orange 18 Normal source-sans-pro tex", "Waiting ? ItemState.Normal : ItemState.Waiting", "PlayMode = PlayMode.Normal\n\n  onPageShow() {\n ", "fontStyle(FontStyle.Normal)\n        .fontColor", " .textCase(TextCase.Normal)\n            .fontC", "emState = ItemState.Normal\n  @State secondStat", "  }.type(ButtonType.Normal)\n      .backgroundC", "te.Skip ? ItemState.Normal : ItemState.Skip\n  ", "emState = ItemState.Normal\n  @State disabled: ", "onType = ButtonType.Normal;\n  @State fontSizeV", "', style: FontStyle.Normal }\n  @State fontColo", "rtEqual(\"FontWeight.Normal\")\n      expect(obj.", "fontStyle(FontStyle.Normal)\n        .fontWeigh", "', style: FontStyle.Normal })\n        .key('se", "PlayMode = PlayMode.Normal\n\n  build() {\n    Fl", " { type: ButtonType.Normal })\n            .bac", "ntWeight(FontWeight.Normal)\n        .textAlign", "rtEqual('ButtonType.Normal');\n      done();\n  ", "sertEqual('TextCase.Normal')\n      expect(obj.", " TextCase= TextCase.Normal\n  @State fontSizeVa", "', style: FontStyle.Normal })\n        .selecte", "   style: FontStyle.Normal\n        })\n        ", "r, style: FontStyle.Normal })\n        .itemSiz", "', style: FontStyle.Normal\n      };\n      try ", "    }.sticky(Sticky.Normal)\n          .editabl", "', style: FontStyle.Normal })\n        .optionF", " TextCase= TextCase.Normal\n  @State decoration"], "files": ["animate.ets", "Select.ets", "SelectJsunit.test.ets", "ListItemJsunit.test.ets", "Stepper.ets", "ListItem.ets", "playMode.ets", "Text.ets", "SpanJsunit.test.ets", "textStyle.ets", "ButtonJsunit.test.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "listItemProps.test.js", "TextStyleJsunit.test.ets", "TextArea.ets", "index.js", "Link.ets", "TextInputJsunit.test.ets", "stepper.ets", "select.ets", "textArea.ets", "textInput.ets", "listItem.ets", "Button.ets", "search.ets", "button.ets", "span.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FontStyle", "api_method_name": "Italic", "api_method_all": "Italic,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["d, style: FontStyle.Italic })\n        .itemSiz", "ntStyle = FontStyle.Italic;\n  @State fontWeigh", "fontStyle(FontStyle.Italic)\n          .fontCol", "ertEqual('FontStyle.Italic')\n      expect(obj.", "', style: FontStyle.Italic })\n        .textAli", "ertEqual('FontStyle.Italic')\n      console.inf", "fontStyle(FontStyle.Italic)\n        .fontColor", "\n      Text('red 20 Italic bold cursive text')", "ntStyle = FontStyle.Italic\n  @State fontSize: ", "ntStyle = FontStyle.Italic;\n  @State showDelet", "ertEqual('FontStyle.Italic');\n      done();\n  ", "fontStyle(FontStyle.Italic)\n        .fontWeigh", "fontStyle(FontStyle.Italic)\n            .key('", "ertEqual(\"FontStyle.Italic\")\n      expect(obj."], "files": ["TextInputJsunit.test.ets", "textStyle.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "textArea.ets", "textInput.ets", "AlphabetIndexer.ets", "TextArea.ets", "PieceCode.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FontWeight", "api_method_all": "declare enum FontWeight {\n  \n  Lighter,\n\n  \n  Normal,\n\n  \n  Regular,\n\n  \n  Medium,\n\n  \n  Bold,\n\n  \n  Bolder,\n}", "api_method_name": "FontWeight", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 94, "since": 7, "api_used": "\u662f", "lines": ["        .fontWeight(FontWeight.Bold)\n        }\n   ", " @State fontWeight: FontWeight= FontWeight.Bold\n  ", "        .fontWeight(FontWeight.Bold)\n        .font", "        .fontWeight(FontWeight.Bold)\n        Ratin", "        .fontWeight(FontWeight.Bold)\n      Stack({", "        .fontWeight(FontWeight.Bold)\n      Scroll(", " @State fontWeight: FontWeight = FontWeight.Medium", "        .fontWeight(FontWeight.Bold)\n        Slide", "        .fontWeight(FontWeight.Bold)\n      RowSpli", "        .fontWeight(FontWeight.Bold)\n        Progr", "        .fontWeight(FontWeight.Bold)\n      Counter", "        .fontWeight(FontWeight.Bold)\n      Column(", "        .fontWeight(FontWeight.Medium)\n        .fo", "        .fontWeight(FontWeight.Bold)\n    }.width('", "        .fontWeight(FontWeight.Bold)\n      Text('T", "        .fontWeight(FontWeight.Normal)\n        .te", "        .fontWeight(FontWeight.Bold)\n          Col", "        .fontWeight(FontWeight.Bold)\n        Image", "        .fontWeight(FontWeight.Bold)\n      Blank(1", "        .fontWeight(FontWeight.Bold)\n      Button(", "        .fontWeight(FontWeight.Bold)\n        .back", "eight).assertEqual('FontWeight.700');\n      done()", "        .fontWeight(FontWeight.Bold)\n          Bad", "        .fontWeight(FontWeight.Bold)\n        .widt", "eight).assertEqual('FontWeight.Normal');\n      don", "Weight: FontWeight= FontWeight.Bold\n  @State fontC", "eight: FontWeight = FontWeight.Medium\n  @Builder I", "        .fontWeight(FontWeight.Bolder)\n        .te", "        .fontWeight(FontWeight.Bold)\n    }\n    .wi", "eight).assertEqual('FontWeight.400');\n      done()", "        .fontWeight(FontWeight.Lighter)\n        .d", "        .fontWeight(FontWeight.Bold)\n            .", "        .fontWeight(FontWeight.Bold)\n        }\n\n  ", "        .fontWeight(FontWeight.Bold)\n      QRCode("], "files": ["systemRouterA.ets", "RowSplit.ets", "gridPage.ets", "Slider.ets", "Qrcode.ets", "Text.ets", "Counter.ets", "Stack.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "Progress.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "FormComponentPage.ets", "TextStyleJsunit.test.ets", "marquee.ets", "Rating.ets", "AppStorage.ets", "TextArea.ets", "QrCode.ets", "GridContainer.ets", "ohosRouterA.ets", "index.ets", "Link.ets", "systemRouterB.ets", "TextInputJsunit.test.ets", "TextAreaJsunit.test.ets", "textArea.ets", "textInput.ets", "Button.ets", "Image.ets", "Calendar.ets", "fontWeight.ets", "ScrollBar.ets", "ColumnSplit.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FontWeight", "api_method_name": "Lighter", "api_method_all": "Lighter,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": [" weight: FontWeight.Lighter })\n        .popupFo", "ntWeight(FontWeight.Lighter)\n        .decoratio", "rtEqual(\"FontWeight.Lighter\")\n      expect(obj."], "files": ["TextJsunit.test.ets", "AlphabetIndexer.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FontWeight", "api_method_name": "Normal", "api_method_all": "Normal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 102, "since": 7, "api_used": "\u662f", "lines": ["ntStyle\": FontStyle.Normal\n          }\n       ", "assertEqual('Sticky.Normal');\n      console.in", ") {\n        Text(\"3.Normal\")\n      }.type(Butt", "ertEqual('FontStyle.Normal');\n      done();\n  ", "putType = InputType.Normal;\n  @State fontSize:", "rtEqual('FontWeight.Normal');\n      done();\n  ", "sertEqual(\"TextCase.Normal\")\n      expect(obj.", "rtEqual('ButtonType.Normal')\n      console.inf", "       Text('sticky:Normal , item2222')\n      ", "       Text('sticky:Normal , click me edit lis", "ky: Sticky = Sticky.Normal;\n  @State editMode:", "emState = ItemState.Normal\n\n  build() {\n    St", "sertEqual('TextCase.Normal');\n      done();\n  ", "    Text('Orange 18 Normal source-sans-pro tex", "Waiting ? ItemState.Normal : ItemState.Waiting", "PlayMode = PlayMode.Normal\n\n  onPageShow() {\n ", "fontStyle(FontStyle.Normal)\n        .fontColor", " .textCase(TextCase.Normal)\n            .fontC", "emState = ItemState.Normal\n  @State secondStat", "  }.type(ButtonType.Normal)\n      .backgroundC", "te.Skip ? ItemState.Normal : ItemState.Skip\n  ", "emState = ItemState.Normal\n  @State disabled: ", "onType = ButtonType.Normal;\n  @State fontSizeV", "', style: FontStyle.Normal }\n  @State fontColo", "rtEqual(\"FontWeight.Normal\")\n      expect(obj.", "fontStyle(FontStyle.Normal)\n        .fontWeigh", "', style: FontStyle.Normal })\n        .key('se", "PlayMode = PlayMode.Normal\n\n  build() {\n    Fl", " { type: ButtonType.Normal })\n            .bac", "ntWeight(FontWeight.Normal)\n        .textAlign", "rtEqual('ButtonType.Normal');\n      done();\n  ", "sertEqual('TextCase.Normal')\n      expect(obj.", " TextCase= TextCase.Normal\n  @State fontSizeVa", "', style: FontStyle.Normal })\n        .selecte", "   style: FontStyle.Normal\n        })\n        ", "r, style: FontStyle.Normal })\n        .itemSiz", "', style: FontStyle.Normal\n      };\n      try ", "    }.sticky(Sticky.Normal)\n          .editabl", "', style: FontStyle.Normal })\n        .optionF", " TextCase= TextCase.Normal\n  @State decoration"], "files": ["animate.ets", "Select.ets", "SelectJsunit.test.ets", "ListItemJsunit.test.ets", "Stepper.ets", "ListItem.ets", "playMode.ets", "Text.ets", "SpanJsunit.test.ets", "textStyle.ets", "ButtonJsunit.test.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "listItemProps.test.js", "TextStyleJsunit.test.ets", "TextArea.ets", "index.js", "Link.ets", "TextInputJsunit.test.ets", "stepper.ets", "select.ets", "textArea.ets", "textInput.ets", "listItem.ets", "Button.ets", "search.ets", "button.ets", "span.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FontWeight", "api_method_name": "Regular", "api_method_all": "Regular,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": [" weight: FontWeight.Regular })\n        .popupFo", "ntWeight(FontWeight.Regular)\n        .fontColor", "rtEqual(\"FontWeight.Regular\")\n      expect(obj."], "files": ["TextJsunit.test.ets", "AlphabetIndexer.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FontWeight", "api_method_name": "Medium", "api_method_all": "Medium,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 468, "since": 7, "api_used": "\u662f", "lines": ["rtEqual(\"FontWeight.Medium\")\n      expect(obj.", "this.clickEffectPropMedium = this.$element(\"cl", "ent('clickEffectPropMedium').show()\n    },\n   ", "ent(\"clickEffectPropMedium\").getInspector()\n  ", "this.clickEffectPropMedium,\n             click", "     clickEffectPropMedium : null,\n         cl", "     clickEffectPropMedium : null,\n        cli", "this.clickEffectPropMedium,\n            clickE", "ntWeight(FontWeight.Medium)\n        .fontColor", "     clickEffectPropMedium : this.clickEffectP", " openclickEffectPropMedium(){\n        this.$el", "Weight = FontWeight.Medium\n  @Builder Ingredie", "(ImageInterpolation.Medium)\n          .key('im", "'ImageInterpolation.Medium')\n      console.inf"], "files": ["ratingProps.test.js", "listItemGroupProps.test.js", "ImageJsunit.test.ets", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "tabContentProps.test.js", "textProps.test.js", "imageAnimatorProps.test.js", "buttonProps.test.js", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "TextJsunit.test.ets", "popupProps.test.js", "refreshProps.test.js", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "spanProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "toolbarItemProps.test.js", "videoProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "optionProps.test.js", "badgeProps.test.js", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "Image.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "panelProps.test.js", "menuProps.test.js", "gridContainerProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FontWeight", "api_method_name": "Bold", "api_method_all": "Bold,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 72, "since": 7, "api_used": "\u662f", "lines": ["ntWeight(FontWeight.Bold)\n        .fontColor", "ntWeight(FontWeight.Bold)\n        }\n      }.", "ntWeight(FontWeight.Bold)\n      Scroll(this.", " weight: FontWeight.Bold, style: FontStyle.I", "ntWeight(FontWeight.Bold)\n      Scroll() {\n ", "ntWeight(FontWeight.Bold)\n      Text(\"Alphab", "ntWeight(FontWeight.Bold)\n        Image(\"/re", "ntWeight(FontWeight.Bold)\n        Slider({\n ", "ntWeight(FontWeight.Bold)\n        }\n      }\n", "ntWeight(FontWeight.Bold)\n            .fontS", "ntWeight(FontWeight.Bold)\n          Badge({\n", "ntWeight(FontWeight.Bold)\n      QRCode('hell", "ntWeight(FontWeight.Bold)\n      RowSplit() {", "ntWeight(FontWeight.Bold)\n          Column()", "ntWeight(FontWeight.Bold)\n        }\n\n       ", "ntWeight(FontWeight.Bold)\n      Button('1.va", "tWeight= FontWeight.Bold\n  @State fontColor:", "ntWeight(FontWeight.Bold)\n        .fontFamil", "ntWeight(FontWeight.Bold)\n        Rating({ r", "ntWeight(FontWeight.Bold)\n      Column() {\n ", "ntWeight(FontWeight.Bold)\n        .backgroun", "ntWeight(FontWeight.Bold)\n      Stack({ alig", " weight: FontWeight.Bolder, style: FontStyle", "rtEqual(\"FontWeight.Bold\")\n      expect(obj.", "ntWeight(FontWeight.Bold)\n      Blank(100)\n ", "rtEqual(\"FontWeight.Bolder\")\n      expect(ob", "ntWeight(FontWeight.Bold)\n    }\n    .width('", "ntWeight(FontWeight.Bold)\n        .width('90", "ntWeight(FontWeight.Bolder)\n        .textAli", "ntWeight(FontWeight.Bold)\n      Text('Text A", "ntWeight(FontWeight.Bold)\n          Button(t", "ntWeight(FontWeight.Bold)\n        Progress({", "ntWeight(FontWeight.Bold)\n    }.width('100%'", "ntWeight(FontWeight.Bold)\n      Counter() {\n", "ntWeight(FontWeight.Bold)\n      Button('Push"], "files": ["systemRouterA.ets", "RowSplit.ets", "gridPage.ets", "Slider.ets", "Qrcode.ets", "Text.ets", "Counter.ets", "Stack.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "Progress.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "FormComponentPage.ets", "marquee.ets", "Rating.ets", "AppStorage.ets", "TextArea.ets", "QrCode.ets", "GridContainer.ets", "ohosRouterA.ets", "index.ets", "Link.ets", "systemRouterB.ets", "TextInputJsunit.test.ets", "TextAreaJsunit.test.ets", "textArea.ets", "textInput.ets", "Button.ets", "Image.ets", "Calendar.ets", "ScrollBar.ets", "ColumnSplit.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FontWeight", "api_method_name": "Bolder", "api_method_all": "Bolder,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": [" weight: FontWeight.Bolder, style: FontStyle.N", "ntWeight(FontWeight.Bolder)\n        .textAlign", "ntWeight(FontWeight.Bolder)\n      Flex({ direc", "rtEqual(\"FontWeight.Bolder\")\n      expect(obj."], "files": ["TextJsunit.test.ets", "AlphabetIndexer.ets", "Text.ets", "FormComponentPage.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAlign", "api_method_all": "declare enum TextAlign {\n  \n  Center,\n\n  \n  Start,\n\n  \n  End,\n}", "api_method_name": "TextAlign", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 140, "since": 7, "api_used": "\u662f", "lines": ["         .textAlign(TextAlign.Center).backgroundC", "  @State textAlign: TextAlign = TextAlign.Start;\n", "         .textAlign(TextAlign.Center)\n        }\n ", "Align).assertEqual('TextAlign.Start');\n      cons", "         .textAlign(TextAlign.Center)\n           ", "\n        .textAlign(TextAlign.Center)\n        .wi", "         .textAlign(TextAlign.Center)\n      }.wid", "\n        .textAlign(TextAlign.Center).backgroundC", "\n        .textAlign(TextAlign.Start).margin(5)\n  ", "         .textAlign(TextAlign.Center)\n          T", "         .textAlign(TextAlign.Center)\n        Tex", "0xF5DEB3).textAlign(TextAlign.Center)\n      }\n   ", "ight(120).textAlign(TextAlign.Center).fontSize(16", "0xF5DEB3).textAlign(TextAlign.Center)\n        Tex", "         .textAlign(TextAlign.Center).borderRadiu", "\n        .textAlign(TextAlign.Start).margin(15)\n ", "Align).assertEqual(\"TextAlign.Start\");\n      cons", "\n        .textAlign(TextAlign.Start).margin(15)\n\n", "\n        .textAlign(TextAlign.Center)\n      Divid", "         .textAlign(TextAlign.Center)\n          ."], "files": ["flex.ets", "gridContainer.ets", "gridPage.ets", "badge.ets", "bindContextMenu.ets", "Text.ets", "textStyle.ets", "Navigation.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "text.ets", "Grid.ets", "FormComponentPage.ets", "layoutConstraints.ets", "list.ets", "List.ets", "TextArea.ets", "GridContainer.ets", "dragEvent2.ets", "Swiper.ets", "edgeEffect.ets", "backgroundAndSizeSetting.ets", "border.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "GridItem.ets", "TextAreaJsunit.test.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "listItem.ets", "grid.ets", "image.ets", "sharedTransition.ets", "ScrollBar.ets", "ColumnSplit.ets", "scrollCode.ets", "NavigatorCode.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAlign", "api_method_name": "Center", "api_method_all": "Center,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1686, "since": 7, "api_used": "\u662f", "lines": ["textAlign(TextAlign.Center)\n          .fontSiz", ") {\n          Text('Center').fontSize(25)\n    ", "yContent: FlexAlign.Center\n    }) {\n      Text", "exAlign = FlexAlign.Center\n  build() {\n    Fle", "textAlign(TextAlign.Center)\n        .width('90", "ignItems: ItemAlign.Center, justifyContent: Fl", "ignItems: ItemAlign.Center,\n      justifyConte", "al('HorizontalAlign.Center');\n      console.in", "textAlign(TextAlign.Center)\n          .layoutW", "textAlign(TextAlign.Center)\n          Text('3'", "ms\":HorizontalAlign.Center\n          }\n       ", "textAlign(TextAlign.Center)\n        Text('alig", "textAlign(TextAlign.Center)\n        Text('no a", "textAlign(TextAlign.Center).fontSize(16)\n    }", "ems(HorizontalAlign.Center).width('90%').borde", "textAlign(TextAlign.Center)\n        Text('flex", "textAlign(TextAlign.Center)\n                .b", "yContent: FlexAlign.Center\n    }) {\n      Canv", "textAlign(TextAlign.Center).borderRadius(10).b", "textAlign(TextAlign.Center)\n          Text('2'", "textAlign(TextAlign.Center)\n        }\n      }.", "textAlign(TextAlign.Center)\n              .bac", "Items(VerticalAlign.Center).width('90%').heigh", "textAlign(TextAlign.Center)\n        Text('no f", "yContent: FlexAlign.Center }) {\n      Marquee(", "\"align\": \"Alignment.Center\"\n          }\n      ", "textAlign(TextAlign.Center)\n          Text('4'", "ignSelf = ItemAlign.Center;\n          break;\n ", "textAlign(TextAlign.Center)\n            .fontS", "textAlign(TextAlign.Center)\n      }\n      .key", "ignItems: ItemAlign.Center }) {\n        Text('", "ignItems: ItemAlign.Center }) {\n      Text('da", "ertEqual(\"Alignment.Center\");\n      console.in", "   .align(Alignment.Center)\n    .key('stepper'", "yContent: FlexAlign.Center }) {\n      Ellipse(", "textAlign(TextAlign.Center).fontSize(16)\n     ", "reak;\n        case 'Center':\n          this.al", "textAlign(TextAlign.Center)\n      }.width('90%"], "files": ["systemRouterA.ets", "longPressGesture.ets", "playMode.ets", "enumsHorizontalAlign.ets", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "Progress.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Swiper.ets", "OverlayJsunit.test.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "Column.ets", "scrollCode.ets", "touch.ets", "EnmusFlexAlignJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "TextArea.ets", "tapGesture.ets", "FlexJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "row.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "badge.ets", "textStyle.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "backgroundAndSizeSetting.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "bindContextMenu.ets", "divider.ets", "ScrollBar.ets", "ellipse.ets", "radio.ets", "rating.ets", "enumsFlexAlign.ets", "DataPanel.ets", "Grid.ets", "AlertDialog.ets", "RowJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "Toggle.ets", "NavigationJsunit.test.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAlign", "api_method_name": "Start", "api_method_all": "Start,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 671, "since": 7, "api_used": "\u662f", "lines": ["log('ListItem onDragStarts, ' + extraParams)\n", "textAlign(TextAlign.Start).margin(15)\n      L", "         .onItemDragStart((event: ItemDragInf", "Equal(\"Alignment.TopStart\");\n      console.in", "ignItems: ItemAlign.Start, justifyContent: Fl", ".align(Alignment.TopStart)\n        Text('thir", "')\n          .onDragStart((event: DragEvent, ", "20).align(Alignment.Start)\n            .offse", "s.loop,\n        fromStart: this.fromStart,\n  ", "ignSelf = ItemAlign.Start;\n          break;\n ", "ertEqual('TextAlign.Start');\n      console.in", "e)\n          .onDragStart((event: DragEvent, ", "nimation complete onStart')\n          console", "ign\": \"Alignment.TopStart\",\n            \"x\": ", "   Text('alignItems(Start)').fontSize(9).font", "le.log('Ting--onDragStart--orange')\n         ", "le.log('apple onDragStart onAction')\n        ", "fo('Ting--onItemDragStart' + event.x)\n       ", "      console.info('Start')\n        })\n      ", "   \"ACTION\": 'onDragStart onAction'\n         ", "ntent: Alignment.TopStart }) {\n      Column()", "le.log('Ting--onDragStart--banana')\n         ", "20).align(Alignment.Start)\n            .posit", "ntent: Alignment.TopStart }) {\n          Row(", "reak;\n        case 'Start':\n          this.al", "op:100})\n        .onStart(() => {\n          c", "})\n          .onDragStart((event: DragEvent, ", " false\n  @State fromStart: boolean = true\n  @", "al('HorizontalAlign.Start');\n      console.in", "ertEqual(\"TextAlign.Start\");\n      console.in", ".align(Alignment.TopStart)\n          .zIndex(", "e)\n          .onDragStart(() => {\n           ", "n = HorizontalAlign.Start;\n\n  onPageShow() {\n", "ment = Alignment.TopStart;\n  @State direction", "textAlign(TextAlign.Start).margin(5)\n      Fl", "ole.log('Text onDragStarts, ' + extraParams)\n", "m: 40 })\n        .onStart(() => {\n          c", "textAlign(TextAlign.Start).margin(15)\n\n      ", "fo('Ting--onItemDragStart' + event.y)\n       ", "fromStart: this.fromStart,\n        src: this.", "Equal(\"Alignment.TopStart\");\n      expect(obj", "le.log('Ting--onDragStart--apple')\n          "], "files": ["flex.ets", "focus.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "row.ets", "DragEventJsunit.test.ets", "gridPage.ets", "canvas2.ets", "direction2.ets", "buttonProps.test.js", "canvas.ets", "Text.ets", "divider.ets", "imageFit.ets", "Stack.ets", "TextJsunit.test.ets", "SubscribaleAbstractJsunit.test.ets", "richText.ets", "column.ets", "zIndex.ets", "animationStatus.ets", "PositionSettingJsunit.test.ets", "fillMode.ets", "Prop.ets", "text.ets", "FormComponentPage.ets", "GridContainerJsunit.test.ets", "tabs.ets", "AlertDialog.ets", "WebPage.ets", "videoProps.test.js", "list.ets", "marquee.ets", "TabsJsunit.test.ets", "positionSetting.ets", "List.ets", "TabJsunit.test.ets", "GridContainer.ets", "dragEvent2.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "TextInputJsunit.test.ets", "calendar.ets", "GridItem.ets", "dragEvent.ets", "PanGesture.ets", "Marquee.ets", "Video.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "GridItem.test.ets", "textPathProps.test.js", "textInput.ets", "image.ets", "Calendar.ets", "fontWeight.ets", "imageAnimator.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "scrollCode.ets", "Column.ets", "button.ets", "span.ets", "NavigatorCode.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAlign", "api_method_name": "End", "api_method_all": "End,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 440, "since": 7, "api_used": "\u662f", "lines": ["al('Alignment.BottomEnd')\n      console.inf", "tion = IconPosition.End;\n  @State fontStyle", "ems(HorizontalAlign.End)\n\n          GridCon", "ems(HorizontalAlign.End).width('90%').borde", "reak;\n        case 'End':\n          this.al", "olumnStart(1).columnEnd(5)\n        }\n      ", "nContent: Alignment.End }) {\n        Text('", "al('HorizontalAlign.End');\n      console.lo", "nsole.info('onActionEnd current action stat", "ntString = 'onActionEnd';\n        console.i", "++ Panel TestCase 1 End ++++++++++++++++');", "++ Panel TestCase 2 End ++++++++++++++++');", "ign(Alignment.BottomEnd)\n        .width('10", "ertEqual('Alignment.End')\n      console.inf", "ext('justifyContent(End)').fontSize(9).font", "n = Alignment.BottomEnd;\n      } else if (e", "yContent-'FlexAlign.End':\" + JSON.stringify", "ms-'HorizontalAlign.End':\" + JSON.stringify", ".align(Alignment.TopEnd)\n        .direction", "   Text('alignItems(End)').fontSize(9).font", "extAlign= TextAlign.End\n  @State lineHeight", "nContent-'FlexAlign.End':\" + JSON.stringify", "++ Panel TestCase 3 End ++++++++++++++++');", "nt: Alignment.BottomEnd }) {\n        Text('", "n\": Alignment.BottomEnd\n          }\n       ", "ssertEqual('onActionEnd')\n      }\n      let", "  })\n      .onActionEnd(() => {\n        con", "ignSelf = ItemAlign.End;\n          break;\n ", "ems(HorizontalAlign.End)\n\n        }.width('", "alignSelf(ItemAlign.End)\n        .borderWid", "   .align(Alignment.End)\n        .alignSelf", "nContent: Alignment.End }) {\n        Scroll", "ertEqual('FlexAlign.End');\n      console.lo", "nContent: FlexAlign.End,\n        }) {\n     ", "ertEqual(\"FlexAlign.End\");\n      console.lo", "  })\n      .onScrollEnd(() => {\n        con", "fyContent(FlexAlign.End)\n\n      Text('justi", "lignItems:ItemAlign.End,\n          alignCon", "ntent: Alignment.TopEnd }) {\n        Text('", "yContent: FlexAlign.End,\n          alignIte", "   }.rowStart(1).rowEnd(4)\n\n          ForEa"], "files": ["flex.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "gridPage.ets", "PieceCode.ets", "Text.ets", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "Stack.ets", "TextJsunit.test.ets", "ToggleJsunit.test.ets", "PositionSettingJsunit.test.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "AlertDialog.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "GridContainer.ets", "TabJsunit.test.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "TextInputJsunit.test.ets", "GridItem.ets", "GridItem.test.ets", "animateTransformProps.test.js", "PanGesture.ets", "scrollBar.ets", "StackJsunit.test.ets", "TextAreaJsunit.test.ets", "animateMotionProps.test.js", "NavigationJsunit.test.ets", "textareaProps.test.js", "LongPressGesture.test.ets", "Column.ets", "gestureMode.ets", "ListJsunit.test.ets", "row.ets", "scrollCode.ets", "buttonProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextOverflow", "api_method_all": "declare enum TextOverflow {\n  \n\n  Clip,\n  \n\n  Ellipsis,\n\n  \n  None,\n}", "api_method_name": "TextOverflow", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["rflow).assertEqual('TextOverflow.None');\n      conso", "      .textOverflow(TextOverflow.Clip)\n        .maxL", "      .textOverflow(TextOverflow.None)\n        .text", "State textOverflow: TextOverflow = TextOverflow.Clip", "\n  @State overflow: TextOverflow = TextOverflow.Elli", "rflow<{ \"overflow\": TextOverflow }> = { \"overflow\": ", "rflow).assertEqual('TextOverflow.Clip');\n      conso", "rflow).assertEqual(\"TextOverflow.Ellipsis\")\n      ex", "low: TextOverflow = TextOverflow.Ellipsis\n  @State t", "    \"textOverflow\": TextOverflow.None,\n          }\n ", "low: TextOverflow = TextOverflow.Clip;\n  @State deco", "rflow).assertEqual(\"TextOverflow.Clip\")\n      expect"], "files": ["image.ets", "TextJsunit.test.ets", "Text.ets", "text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextOverflow", "api_method_name": "Clip", "api_method_all": "Clip,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 44, "since": 7, "api_used": "\u662f", "lines": [" = true;\n  @State isClipCircle:boolean = tru", ";\n\n    it('testShapeClipping001', 0, async f", "sole.log(\"[testShapeClipping003] change comp", "ingJsunit();\n  shapeClippingJsunit();\n  enmu", ";\n\n    it('testShapeClipping004', 0, async f", "        if (!(\"shapeClipping\" == pages.name)", ";\n\n    it('testShapeClipping002', 0, async f", "ole.info(\"[testShapeClipping003] component o", "ole.info(\"[testShapeClipping001] component o", "ole.info('[testShapeClipping004] START');\n  ", " console.info(\"shapeClipping page shape chan", "y\n@Component\nstruct ClipAndMaskExample {\n  @", "flow = TextOverflow.Clip;\n  @State decoratio", "ole.info(\"[testShapeClipping003] start to pu", "ole.info('[testShapeClipping003] START');\n  ", "ole.info('[testShapeClipping001] START');\n  ", "ole.info(\"[testShapeClipping002] component o", " console.info('shapeClipping page show calle", "   uri: 'pages/shapeClipping',\n      }\n     ", " console.info(\"shapeClipping page state chan", "Jsunit from './ShapeClippingJsunit.test.ets'", "sole.info(\"get shapeClipping state pages.nam", "sole.log(\"[testShapeClipping004] change comp", " console.info(\"shapeClipping after each call", "Equal('TextOverflow.Clip');\n      console.in", "ole.info(\"[testShapeClipping004] component o", "le.error(\"push shapeClipping page error:\" + ", "ole.info('[testShapeClipping001] END');\n    ", "Equal(\"TextOverflow.Clip\")\n      expect(obj.", "ole.info(\"push shapeClipping page result:\" +", "ole.info('[testShapeClipping003] END');\n    ", ";\n\n    it('testShapeClipping003', 0, async f", "ole.info(\"[testShapeClipping004] start to pu", "fault function shapeClippingJsunit() {\n  des", "ole.info('[testShapeClipping002] START');\n  ", "ole.info('[testShapeClipping004] END');\n    ", "erflow(TextOverflow.Clip)\n        .maxLines(", "sole.info(\"get shapeClipping state pages:\" +", " console.info(\"shapeClipping beforeEach star", "t.ets';\nimport shapeClippingJsunit from './S", "ole.info('[testShapeClipping002] END');\n    "], "files": ["TextJsunit.test.ets", "List.test.ets", "image.ets", "ShapeClippingJsunit.test.ets", "shapeClipping.ets", "Text.ets", "text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextOverflow", "api_method_name": "Ellipsis", "api_method_all": "Ellipsis,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["flow = TextOverflow.Ellipsis\n  @State textOverfl", "Equal(\"TextOverflow.Ellipsis\")\n      expect(obj."], "files": ["TextJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextOverflow", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextDecorationType", "api_method_all": "declare enum TextDecorationType {\n  \n  None,\n\n  \n  Underline,\n\n  \n  Overline,\n\n  \n  LineThrough,\n}", "api_method_name": "TextDecorationType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 25, "since": 7, "api_used": "\u662f", "lines": ["extDecorationType = TextDecorationType.None;\n\n  build() {\n", " @State decoration: TextDecorationType = TextDecorationTyp", ".decoration({ type: TextDecorationType.Overline, color: Co", ".decoration({ type: TextDecorationType.LineThrough, \"color", "tEqual(\"{\\\"type\\\":\\\"TextDecorationType.None\\\",\\\"color\\\":\\\"", "ecoration({ \"type\": TextDecorationType.LineThrough, \"color", "fy({\n        type: \"TextDecorationType.Underline\", color: ", "sertEqual('{\"type\":\"TextDecorationType.LineThrough\",\"color", "fy({\n        type: \"TextDecorationType.Noneh\", color: \"#FF", "fy({\n        type: \"TextDecorationType.None\", color: \"#FFF", "ue: object= { type: TextDecorationType.None, color: Color.", "oration<{\n    type: TextDecorationType,\n    color: Color\n ", "fy({\n        type: \"TextDecorationType.Overline\", color: \"", ".type).assertEqual('TextDecorationType.None');\n      expec", "fy({\n        type: \"TextDecorationType.LineThrough\", color", "ecoration({ \"type\": TextDecorationType.None, \"color\": Colo", "olor\n  }> = { type: TextDecorationType.Underline, color: C"], "files": ["text.ets", "TextJsunit.test.ets", "Span.ets", "image.ets", "span.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextDecorationType", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextDecorationType", "api_method_name": "Underline", "api_method_all": "Underline,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["\"TextDecorationType.Underline\", color: \"#FFFF0000", " TextDecorationType.Underline, color: Color.Red }"], "files": ["TextJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextDecorationType", "api_method_name": "Overline", "api_method_all": "Overline,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": [" TextDecorationType.Overline, color: Color.Red }", "\"TextDecorationType.Overline\", color: \"#FFFF0000"], "files": ["TextJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextDecorationType", "api_method_name": "LineThrough", "api_method_all": "LineThrough,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["\"TextDecorationType.LineThrough\", color: \"#FFFF0000", " TextDecorationType.LineThrough, \"color\": Color.Red", "\"TextDecorationType.LineThrough\",\"color\":\"#FFFF0000"], "files": ["TextJsunit.test.ets", "Span.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextCase", "api_method_all": "declare enum TextCase {\n  \n  Normal,\n\n  \n  LowerCase,\n\n  \n  UpperCase,\n}", "api_method_name": "TextCase", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": ["tCase).assertEqual('TextCase.Normal')\n      expe", "tCase).assertEqual('TextCase.Normal');\n      don", "          .textCase(TextCase.Normal)\n           ", "tCase).assertEqual('TextCase.LowerCase')\n      e", "tCase).assertEqual('TextCase.UpperCase')\n      e", "textCase: TextCase= TextCase.Normal\n  @State dec", "          .textCase(TextCase.UpperCase)\n        ", "aseValue: TextCase= TextCase.Normal\n  @State fon", "tCase).assertEqual(\"TextCase.Normal\")\n      expe", "tate textCaseValue: TextCase= TextCase.Normal\n  ", ")\n        .textCase(TextCase.LowerCase)\n        ", "          .textCase(TextCase.LowerCase)\n        ", "tCase).assertEqual('TextCase.UpperCase');\n      ", "tCase).assertEqual(\"TextCase.UpperCase\")\n      e", ")\n        .textCase(TextCase.UpperCase)\n        ", "\n  @State textCase: TextCase= TextCase.Normal\n  ", "   \"textCaseValue\": TextCase.UpperCase\n         "], "files": ["TextJsunit.test.ets", "Span.ets", "span.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextCase", "api_method_name": "Normal", "api_method_all": "Normal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 102, "since": 7, "api_used": "\u662f", "lines": ["ntStyle\": FontStyle.Normal\n          }\n       ", "assertEqual('Sticky.Normal');\n      console.in", ") {\n        Text(\"3.Normal\")\n      }.type(Butt", "ertEqual('FontStyle.Normal');\n      done();\n  ", "putType = InputType.Normal;\n  @State fontSize:", "rtEqual('FontWeight.Normal');\n      done();\n  ", "sertEqual(\"TextCase.Normal\")\n      expect(obj.", "rtEqual('ButtonType.Normal')\n      console.inf", "       Text('sticky:Normal , item2222')\n      ", "       Text('sticky:Normal , click me edit lis", "ky: Sticky = Sticky.Normal;\n  @State editMode:", "emState = ItemState.Normal\n\n  build() {\n    St", "sertEqual('TextCase.Normal');\n      done();\n  ", "    Text('Orange 18 Normal source-sans-pro tex", "Waiting ? ItemState.Normal : ItemState.Waiting", "PlayMode = PlayMode.Normal\n\n  onPageShow() {\n ", "fontStyle(FontStyle.Normal)\n        .fontColor", " .textCase(TextCase.Normal)\n            .fontC", "emState = ItemState.Normal\n  @State secondStat", "  }.type(ButtonType.Normal)\n      .backgroundC", "te.Skip ? ItemState.Normal : ItemState.Skip\n  ", "emState = ItemState.Normal\n  @State disabled: ", "onType = ButtonType.Normal;\n  @State fontSizeV", "', style: FontStyle.Normal }\n  @State fontColo", "rtEqual(\"FontWeight.Normal\")\n      expect(obj.", "fontStyle(FontStyle.Normal)\n        .fontWeigh", "', style: FontStyle.Normal })\n        .key('se", "PlayMode = PlayMode.Normal\n\n  build() {\n    Fl", " { type: ButtonType.Normal })\n            .bac", "ntWeight(FontWeight.Normal)\n        .textAlign", "rtEqual('ButtonType.Normal');\n      done();\n  ", "sertEqual('TextCase.Normal')\n      expect(obj.", " TextCase= TextCase.Normal\n  @State fontSizeVa", "', style: FontStyle.Normal })\n        .selecte", "   style: FontStyle.Normal\n        })\n        ", "r, style: FontStyle.Normal })\n        .itemSiz", "', style: FontStyle.Normal\n      };\n      try ", "    }.sticky(Sticky.Normal)\n          .editabl", "', style: FontStyle.Normal })\n        .optionF", " TextCase= TextCase.Normal\n  @State decoration"], "files": ["animate.ets", "Select.ets", "SelectJsunit.test.ets", "ListItemJsunit.test.ets", "Stepper.ets", "ListItem.ets", "playMode.ets", "Text.ets", "SpanJsunit.test.ets", "textStyle.ets", "ButtonJsunit.test.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "listItemProps.test.js", "TextStyleJsunit.test.ets", "TextArea.ets", "index.js", "Link.ets", "TextInputJsunit.test.ets", "stepper.ets", "select.ets", "textArea.ets", "textInput.ets", "listItem.ets", "Button.ets", "search.ets", "button.ets", "span.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextCase", "api_method_name": "LowerCase", "api_method_all": "LowerCase,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": [" .textCase(TextCase.LowerCase)\n        .decoratio", " .textCase(TextCase.LowerCase)\n            .fontC", "sertEqual('TextCase.LowerCase')\n      expect(obj."], "files": ["Span.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextCase", "api_method_name": "UpperCase", "api_method_all": "UpperCase,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["aseValue\": TextCase.UpperCase\n          }\n       ", " .textCase(TextCase.UpperCase)\n        .decoratio", "sertEqual('TextCase.UpperCase')\n      expect(obj.", "sertEqual('TextCase.UpperCase');\n      done();\n  ", "sertEqual(\"TextCase.UpperCase\")\n      expect(obj.", " .textCase(TextCase.UpperCase)\n            .fontC"], "files": ["TextJsunit.test.ets", "Span.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ResponseType", "api_method_all": "declare enum ResponseType {\n  \n  RightClick,\n\n  \n  LongPress,\n}", "api_method_name": "ResponseType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["State responseType: ResponseType = RightClick;\n  @Bu"], "files": ["bindContextMenu.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ResponseType", "api_method_name": "RightClick", "api_method_all": "RightClick,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ype: ResponseType = RightClick;\n  @Builder Context"], "files": ["bindContextMenu.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ResponseType", "api_method_name": "LongPress", "api_method_all": "LongPress,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": ["en }) {\n      Text('LongPress onAction:' + this.e", "lobalThis.value.typeLongPress);\n        console.i", "e.info('testMenuTypeLongPress START');\n        co", "d).assertEqual('typeLongPress')\n        expect(ob", "    it('testMenuTypeLongPress', 0, async function", ": null,\n        typeLongPress : null,\n        typ", "  console.info('testLongPressGesture01 END');\n   ", "  console.info(\"testLongPressGesture01 on events_", "()\n        this.typeLongPress = this.$element(\"ty", "uence gesture\\n' + 'LongPress onAction:' + this.c", " this.$element(\"typeLongPress\").getInspector()\n  ", ")\n    .gesture(\n    LongPressGesture({ repeat: tr", " console.info('[testLongPressGesture01] START');\n", "y\n@Component\nstruct LongPressGestureExample {\n  @", "ck,\n            typeLongPress : this.typeLongPres", "  console.info(\"testLongPressGesture02 sendEventB", "  console.info(\"testLongPressGesture02 on events_", "  console.info(\"testLongPressGesture01 sendEventB", "  console.info(\"testLongPressGesture02 get event ", "me      testMenuTypeLongPress\n     * @tc.desc    ", "       console.log('LongPress onAction')\n      })", "   });\n\n    it('testLongPressGesture02', 0, async", "  console.info('testLongPressGesture02 END');\n   ", "stureJsUnit from './LongPressGesture.test.ets';\ni", "ongPress : this.typeLongPress, typeNone : this.ty", "   });\n\n    it('testLongPressGesture01', 0, async", " console.info('[testLongPressGesture02] START');\n", "       console.log('LongPress end')\n      }),\n   ", "eMode.Sequence,\n    LongPressGesture({ repeat: tr", "  console.info(\"testLongPressGesture01 get event "], "files": ["longPressGesture.ets", "LongPressGesture.test.ets", "gestureMode.ets", "index.js", "List.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HoverEffect", "api_method_all": "declare enum HoverEffect {\n  \n  Auto,\n\n  \n  Scale,\n\n  \n  Highlight,\n\n  \n  None,\n}", "api_method_name": "HoverEffect", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HoverEffect", "api_method_name": "Auto", "api_method_all": "Auto,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 581, "since": 7, "api_used": "\u662f", "lines": ["pAuto : this.dirPropAuto,\n             dirPr", "     this.rotatePropAutoReverse = this.$elem", "\n            dirPropAuto : this.dirPropAuto,", ".objectFit(ImageFit.Auto).width(110).height(", "se : this.rotatePropAutoReverse,\n           ", "= SwiperDisplayMode.AutoLinear\n  @State edge", "is.$element(\"dirPropAuto\").getInspector()\n  ", "        this.dirPropAuto = this.$element(\"di", "ertEqual('Direction.Auto');\n      console.in", "ertEqual(\"ItemAlign.Auto\");\n      console.in", "autoReset' + this.isAutoReset).onClick(() =>", "sertEqual('BarState.Auto')\n      console.inf", "          rotatePropAutoReverse : this.rotat", "          .overlay('Auto', { align: Alignmen", "ateValue\": BarState.Auto\n          }\n       ", "emAlign = ItemAlign.Auto\n\n  build() {\n    Fl", "Style = BorderStyle.Auto;\n  @State borderRad", "pe) {\n        case 'Auto':\n          this.si", "ll,\n         dirPropAuto : null,\n         di", "rection = Direction.Auto\n  @State position: ", "ber= 30;\n  @State isAutoReset: boolean= true", "ignSelf = ItemAlign.Auto;\n      }\n    }\n  }\n", "n\", LayoutDirection.Auto);\n      let enable2", "ImageSize(ImageSize.Auto)\n        .width('90", "ertEqual('ImageSize.Auto');\n      console.in", "AutoReset = !this.isAutoReset\n        }).mar", "pAuto : this.dirPropAuto,\n            dirPro", "ignSelf = ItemAlign.Auto;\n          break;\n ", "ertEqual(\"Direction.Auto\")\n      expect(obj.", "ection\":  Direction.Auto,\n          }\n      ", "lf) {\n        case 'Auto':\n          this.al", ",\n        rotatePropAutoReverse : null,\n    ", "sizeType = SizeType.Auto;\n          break;\n ", " {\n          this.isAutoReset = !this.isAuto", "sizeType = SizeType.Auto;\n      }\n    }\n  }\n", " sizeType: SizeType.Auto, gutter: 10, margin", "al, state: BarState.Auto }) {\n          Text", "$element(\"rotatePropAutoReverse\").getInspect", "  .autoReset(this.isAutoReset)\n        .onPa", "ull,\n        dirPropAuto : null,\n        dir", "             dirPropAuto : this.dirPropAuto,", " == LayoutDirection.Auto)\n      .assertTrue;", "ertEqual(\"ItemAlign.Auto\")\n      expect(obj.", "emAlign = ItemAlign.Auto\n  @State borderStyl"], "files": ["ratingProps.test.js", "flex.ets", "listItemGroupProps.test.js", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "tabContentProps.test.js", "textProps.test.js", "ScrollBarJsunit.test.ets", "enumsImage.ets", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "imageFit.ets", "TextJsunit.test.ets", "swiper.ets", "popupProps.test.js", "gridContainerProps.test.js", "CheckboxGroupJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "EnmusImageJsunit.test.ets", "spanProps.test.js", "stepperItemProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "enumsItemAlign.ets", "toolbarItemProps.test.js", "videoProps.test.js", "RowJsunit.test.ets", "GridContainer.ets", "inputProps.test.js", "index.js", "FlexJsunit.test.ets", "optionProps.test.js", "tabBarProps.test.js", "toggleProps.test.js", "AppStorageJsunit.test.ets", "badgeProps.test.js", "border.ets", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "Direction2Jsunit.test.ets", "gridColProps.test.js", "panelProps.test.js", "ScrollBar.ets", "menuProps.test.js", "buttonProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HoverEffect", "api_method_name": "Scale", "api_method_all": "Scale,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": [".objectFit(ImageFit.ScaleDown)\n          .key", "()\n        this.typeScaleRing = this.$element", "fo('testProgressTypeScaleRing START');\n      ", "ScaleRing: this.typeScaleRing,\n            ty", "ateTransformTypePropScale\n     * @tc.desc    ", "       this.typePropScale = this.$element(\"ty", "sertEqual('ImageFit.ScaleDown')\n      console", "est'+nameA+'TypePropScale START');\n        co", "d).assertEqual('typeScaleRing')\n        expec", "lobalThis.value.typeScaleRing);\n        conso", "ng,\n            typeScaleRing: this.typeScale", " this.$element(\"typeScaleRing\").getInspector(", "Size)\n        .allowScale(false)\n        .fon", "lThis.value.typePropScale);\n        console.i", "s.$element(\"typePropScale\").getInspector()\n  ", "    testProgressTypeScaleRing\n     * @tc.desc", "it('testProgressTypeScaleRing', 0, async func", "ll,\n        typePropScale : null,\n        typ", "            typePropScale : this.typePropScal", ".scale(1.5, 1.5);// Scale to 200%\n        ctx", "e(50)\n        .allowScale(false)\n        .fon", "ssertEqual('typePropScale')\n        expect(ob", "est'+nameA+'TypePropScale', 0, async function", "qual(\"ProgressStyle.ScaleRing\")\n      console", ": null,\n        typeScaleRing: null,\n        ", "cale : this.typePropScale,\n            typePr", "tyle: ProgressStyle.ScaleRing })\n          .v"], "files": ["ProgressJsunit.test.ets", "animateTransformProps.test.js", "ImageJsunit.test.ets", "progressProps.test.js", "marquee.ets", "Image.ets", "Progress.ets", "index.js", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HoverEffect", "api_method_name": "Highlight", "api_method_all": "Highlight,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HoverEffect", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Placement", "api_method_all": "declare enum Placement {\n  \n  Left,\n\n  \n  Right,\n\n  \n  Top,\n\n  \n  Bottom,\n\n  \n  TopLeft,\n\n  \n  TopRight,\n\n  \n  BottomLeft,\n\n  \n  BottomRight,\n}", "api_method_name": "Placement", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["entTwo: Placement = Placement.BottomLeft\n  @State", "/\n    it('testButtonPlacementBottom', 0, async fu", "  console.info('testPlacementPropLeft START');\n  ", "tThree: Placement = Placement.BottomRight\n\n  @Bui", "     */\n    it('testPlacementPropLeft', 0, async ", "entOne: Placement = Placement.TopRight\n  @State p", "cement).assertEqual(Placement.BottomRight);\n     ", "name      testButtonPlacementNone\n     * @tc.desc", "     */\n    it('testPlacementPropTop', 0, async f", "ementJsunit from './PlacementJsunit.test.ets';\nim", "         placement: Placement.Bottom,\n          m", "  console.info('testPlacementPropRight START');\n ", "* @tc.name      testPlacementPropTop\n     * @tc.d", "ate placementThree: Placement = Placement.BottomR", "/\n    it('testButtonPlacementTop', 0, async funct", "name      testButtonPlacementTop\n     * @tc.desc ", "name      testButtonPlacementEnd\n     * @tc.desc ", "cement: Placement = Placement.TopLeft\n  @State pl", "/\n    it('testButtonPlacementStart', 0, async fun", "ole.info('testButtonPlacementBottom START');\n    ", "     */\n    it('testPlacementPropRight', 0, async", "State placementTwo: Placement = Placement.BottomL", "  console.info('testPlacementPropTop START');\n   ", "ole.info('testButtonPlacementStart START');\n     ", "* @tc.name      testPlacementPropRight\n     * @tc", "State placementOne: Placement = Placement.TopRigh", "name      testButtonPlacementStart\n     * @tc.des", "/\n    it('testButtonPlacementEnd', 0, async funct", "ole.info('testButtonPlacementTop START');\n       ", "/\n    it('testButtonPlacementNone', 0, async func", "y\n@Component\nstruct PlacementExample {\n  @State c", "cement).assertEqual(Placement.BottomLeft);\n      ", "  @State placement: Placement = Placement.TopLeft", "cement).assertEqual(Placement.TopLeft);\n      }\n ", "ole.info('testButtonPlacementEnd START');\n       ", "* @tc.name      testPlacementPropLeft\n     * @tc.", "ole.info('testButtonPlacementNone START');\n      ", "name      testButtonPlacementBottom\n     * @tc.de", "cement).assertEqual(Placement.TopRight);\n      }\n"], "files": ["popupProps.test.js", "List.test.ets", "placement.ets", "PlacementJsunit.test.ets", "bindPopup.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Placement", "api_method_name": "Left", "api_method_all": "Left,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 54, "since": 8, "api_used": "\u662f", "lines": ["tion: BadgePosition.Left,\n            maxCou", ".value.typeDirectionLeft);\n        console.i", "ement).assertEqual('Left')\n        console.i", "       placementPropLeft : this.placementPro", "tLeft:this.placementLeft,\n             place", ", left: this.paddingLeft })\n        .margin(", "sertEqual('placementLeft')\n        expect(ob", "= GradientDirection.LeftTop\n\n  build() {\n   ", "t = Placement.BottomLeft\n  @State placementT", "ement(\"typeDirectionLeft\").getInspector()\n  ", "ll,\n        typeLoopLeft : null,\n        typ", "nStyle(IndexerAlign.Left)\n        .onSelecte", "           placementLeft:this.placementLeft,", "  this.typeDirectionLeft = this.$element(\"ty", "marqueeDirectionPropLeft', 0, async function", "('GradientDirection.Left');\n      expect(obj", "('GradientDirection.LeftTop');\n      console", "('testbadgeplacementLeft START');\n        co", "ement(\"placementPropLeft\").getInspector()\n  ", "       typeDirectionLeft : this.typeDirectio", "ual(Placement.BottomLeft);\n      }\n      let", "('testbadgeplacementLeft', 0, async function", "Equal('typeDirectionLeft')\n        expect(ob", ") {\n          Text('Left').fontSize(25)\n    ", ",\n         placementLeft:null,\n         plac", "tion-'BadgePosition.Left'\" + JSON.stringify(", "  this.placementPropLeft = this.$element(\"pl", "       placementPropLeft : null,\n        pla", "('GradientDirection.LeftBottom');\n      cons", "ment = Placement.TopLeft\n  @State placementO", ": GradientDirection.Left,\n    colors: [[0xAE", ": this.typeDirectionLeft,\n            typeDi", ": GradientDirection.LeftBottom\n          }\n ", ": this.placementPropLeft,\n            placem", "            typeLoopLeft : this.typeLoopLeft", "Left : this.typeLoopLeft,\n            typeRi", "0px\"\n  @State marginLeft: string = \"10px\"\n  ", "ement(\"typeDirectionLeft\").getInspector()\n\n ", "Text(\"BadgePosition.Left\").fontSize(16)\n    ", "       this.typeLoopLeft = this.$element(\"ty", "t, left: this.marginLeft })\n        .constra", "This.value.placementLeft);\n        console.i", "       typeDirectionLeft : null,\n        typ", "  testbadgeplacementLeft\n      * @tc.desc   ", "   testPlacementPropLeft\n     * @tc.desc    ", "qual('BadgePosition.Left');\n      console.lo", "\"5\"\n  @State paddingLeft: string= \"5\"\n  @Sta", "      this.placementLeft = this.$element(\"pl", "tEqual(Placement.TopLeft);\n      }\n      let", ".$element(\"placementLeft\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "placement.ets", "GradientDirectionJsunit.test.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "colorGradient.ets", "gradientDirection.ets", "Text.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Placement", "api_method_name": "Right", "api_method_all": "Right,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 60, "since": 8, "api_used": "\u662f", "lines": ["  });\n    },\n    setRightButton(e) {\n        ", "qual('BadgePosition.RightTop');\n      console", "('testbadgeplacementRight', 0, async function", "ype: ResponseType = RightClick;\n  @Builder Co", "ual(Placement.BottomRight);\n      }\n      let", ": GradientDirection.RightBottom\n          }\n ", "('testbadgeplacementRightTop', 0, async funct", "nStyle(IndexerAlign.Right)\n        .margin({ ", ": null,\n        typeRight : null,\n    },\n\n   ", ".$element(\"placementRight\").getInspector()\n  ", "       placementPropRight : this.placementPro", "       typeDirectionRight : null,\n        typ", ",\n         placementRightTop:null,\n         p", ": this.typeDirectionRight,\n            typeLo", "tion: BadgePosition.Right,\n            maxCou", "ition-BadgePosition.Right\" + JSON.stringify(o", "htTop:this.placementRightTop,\n             pl", "  testbadgeplacementRightTop\n      * @tc.desc", "Text(\"BadgePosition.RightTop\").fontSize(16)\n ", "tion: BadgePosition.RightTop,\n            max", "           placementRightTop:this.placementRi", "This.value.placementRight);\n        console.i", "ypeRight : this.typeRight,\n        }\n    },\n\n", "       placementPropRight : null,\n        pla", "('GradientDirection.RightBottom');\n      cons", "Right:this.placementRight,\n             place", "()\n        this.typeRight = this.$element(\"ty", "  this.placementPropRight = this.$element(\"pl", "tion-'BadgePosition.RightTop'\" + JSON.stringi", "ft,\n            typeRight : this.typeRight,\n ", "      this.placementRightTop = this.$element(", "('testbadgeplacementRight START');\n        co", ",\n         placementRight:null,\n         plac", "('testbadgeplacementRightTop START');\n       ", ".$element(\"placementRightTop\").getInspector()", "sertEqual('placementRight')\n        expect(ob", "      this.placementRight = this.$element(\"pl", ") {\n          Text('Right').fontSize(25)\n    ", "t = Placement.BottomRight\n\n  @Builder popupBu", "  this.typeDirectionRight = this.$element(\"ty", "       typeDirectionRight : this.typeDirectio", "  testbadgeplacementRight\n      * @tc.desc   ", "qual('BadgePosition.Right');\n      console.lo", "ement(\"typeDirectionRight\").getInspector()\n  ", "tEqual(Placement.TopRight);\n      }\n      let", "ment = Placement.TopRight\n  @State placementT", "           placementRight:this.placementRight", ": this.placementPropRight,\n            placem", "ement(\"placementPropRight\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "GradientDirectionJsunit.test.ets", "placement.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "bindContextMenu.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Placement", "api_method_name": "Top", "api_method_all": "Top,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 174, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.TopStart)\n          .zI", "nContent: Alignment.TopStart }) {\n      Scr", "acement = Placement.TopLeft\n  @State placem", "adientDirection.LeftTop\n\n  build() {\n    Co", "acement = Placement.TopRight\n  @State place", "   Text('alignItems(Top)').fontSize(9).font", "sertEqual(Placement.TopLeft);\n      }\n     ", "         placementOnTop: this.placementOnTo", "nContent: Alignment.TopStart }) {\n      Col", "nContent: Alignment.TopStart }) {\n         ", "sertEqual(Placement.TopRight);\n      }\n    ", "('GradientDirection.Top');\n      expect(obj", "ac).align(Alignment.Top)\n      }\n      .wid", "te edge: Edge= Edge.Top\n  private content: ", "ertEqual(\"Alignment.TopStart\");\n      conso", "b3).align(Alignment.TopStart)\n        Text(", "op: this.placementOnTop,\n          onStateC", "ent.data.placementOnTop).assertEqual(false)", "nContent: Alignment.TopStart }) {\n        T", " BadgePosition.RightTop,\n            maxCou", "ignment = Alignment.TopStart;\n  @State dire", "  @State placementOnTop: boolean = false\n\n ", "ertEqual(\"Alignment.TopStart\");\n      expec", "        \"placementOnTop\": this.placementOnT", "adientDirection.LeftTop');\n      console.in", "ac).align(Alignment.Top)\n      }.width('100", "p\": this.placementOnTop,\n              }\n  ", "ler.scrollEdge(Edge.Top)\n        })\n       ", "\"align\": \"Alignment.TopStart\",\n            ", "   .align(Alignment.TopStart)\n          .he", ": GradientDirection.Top,\n        colors: [[", "b3).align(Alignment.Top)\n        Text('Seco", "\"BadgePosition.RightTop\").fontSize(16)\n    ", "s.context.fillText('Top', 60, height + 10);", "Items(VerticalAlign.Top).height('15%').bord", "ler.scrollEdge(Edge.Top)\n            })\n   ", "nContent: Alignment.Top }) {\n        Text('"], "files": ["row.ets", "direction2.ets", "placement.ets", "BadgeJsunit.test.ets", "canvas.ets", "Text.ets", "Row.ets", "Stack.ets", "TextJsunit.test.ets", "popupProps.test.js", "scrollCode.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "Scroll.ets", "AlertDialog.ets", "list.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "PlacementJsunit.test.ets", "index.js", "gradientDirection.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "badgeProps.test.js", "StackJsunit.test.ets", "bindPopup.ets", "Badge.ets", "BindPopupJsunit.test.ets", "buttonProps.test.js", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Placement", "api_method_name": "Bottom", "api_method_all": "Bottom,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 119, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.Bottom)\n        .width('10", "adientDirection.LeftBottom\n          }\n       ", "dientDirection.RightBottom\n          }\n       ", "t: 'DialogAlignment.BottomEnd',\n            co", "ertEqual('Alignment.Bottom')\n      console.inf", "      this.placementBottom = this.$element(\"pl", "dientDirection.RightBottom');\n      console.in", "ertEqual(\"Alignment.BottomEnd\")\n      expect(o", "ertEqual('Alignment.BottomEnd')\n      console.", "nContent: Alignment.BottomEnd }) {\n        Tex", "ertEqual(\"Alignment.BottomStart\")\n      consol", " { align: Alignment.Bottom, offset: { x: 0, y:", "ignment = Alignment.Bottom\n\n  onPageShow() {\n ", ".$element(\"placementBottom\").getInspector()\n  ", "   Text('alignItems(Bottom)').fontSize(9).font", "   .align(Alignment.BottomStart)\n        .widt", "acement = Placement.BottomRight\n\n  @Builder po", "s.align = Alignment.BottomEnd;\n      } else if", "t: 'DialogAlignment.Bottom',\n            prima", "tom : this.placementBottom, placementNone : th", "Items(VerticalAlign.Bottom).justifyContent(Fle", "ertEqual(\"Alignment.Bottom\")\n      expect(obj.", "sertEqual(Placement.BottomRight);\n      }\n    ", "sertEqual(Placement.BottomLeft);\n      }\n     ", "ertEqual('Alignment.BottomStart')\n      consol", "this.currentTest = 'BottomStart'\n             ", "s.context.fillText('Bottom', 150, height - 10)", "lacement: Placement.Bottom,\n          maskColo", "adientDirection.LeftBottom');\n      console.in", "xtAlign\": Alignment.BottomEnd\n          }\n    ", "t: 'DialogAlignment.BottomStart',\n            ", "ertEqual(\"Alignment.Bottom\");\n      expect(obj", "nContent: Alignment.BottomStart }) {\n        T", "00 }\n  @State marginBottom: string = \"10px\"\n  ", "bottom: this.paddingBottom, top: this.paddingT", "l,\n        placementBottom : null,\n        pla", "acement = Placement.BottomLeft\n  @State placem", "           placementBottom : this.placementBot", ");\n    },\n\n    reachBottom(){\n        prompt.s", "px\"\n  @State paddingBottom: string= \"5\"\n  @Sta", "   .align(Alignment.BottomEnd)\n        .width(", "ignment = Alignment.Bottom\n  private content: ", " bottom: this.marginBottom, top: this.marginTo"], "files": ["placement.ets", "canvas.ets", "Text.ets", "imageFit.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "GradientDirectionJsunit.test.ets", "PositionSettingJsunit.test.ets", "touchAble.ets", "AlertDialog.ets", "positionSetting.ets", "index.js", "PlacementJsunit.test.ets", "OverlayJsunit.test.ets", "StackJsunit.test.ets", "bindPopup.ets", "row.ets", "overlay.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Placement", "api_method_name": "TopLeft", "api_method_all": "TopLeft,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["acement = Placement.TopLeft\n  @State placementO", "sertEqual(Placement.TopLeft);\n      }\n      let"], "files": ["placement.ets", "PlacementJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Placement", "api_method_name": "TopRight", "api_method_all": "TopRight,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["acement = Placement.TopRight\n  @State placementT", "sertEqual(Placement.TopRight);\n      }\n      let"], "files": ["placement.ets", "PlacementJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Placement", "api_method_name": "BottomLeft", "api_method_all": "BottomLeft,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["sertEqual(Placement.BottomLeft);\n      }\n      let", "acement = Placement.BottomLeft\n  @State placementT"], "files": ["placement.ets", "PlacementJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Placement", "api_method_name": "BottomRight", "api_method_all": "BottomRight,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["sertEqual(Placement.BottomRight);\n      }\n      let", "acement = Placement.BottomRight\n\n  @Builder popupBu"], "files": ["placement.ets", "PlacementJsunit.test.ets"], "is_white": " ", "desc": " "}]}