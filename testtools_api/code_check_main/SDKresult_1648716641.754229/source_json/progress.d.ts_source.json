{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\progress", "api": [{"api_class_name": "ProgressOptions", "api_method_all": "declare interface ProgressOptions {\n  \n  value: number;\n\n  \n  total?: number;\n\n  \n  style?: ProgressStyle\n\n  \n  type?: ProgressType\n}", "api_method_name": "ProgressOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressOptions", "api_method_name": "value", "api_method_all": "value: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressOptions", "api_method_name": "total", "api_method_all": "total?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["pect(objConstructor.total).assertEqual(40.000", "ogress({ value: 20, total: 40, style: Progres", ".list = list\n  }\n\n  totalCount(): number {\n  ", " if (eventData.data.total != null) {\n        ", "ull) {\n        this.total = eventData.data.to", "er[] = []\n\n  public totalCount(): number {\n  ", "ogress({ value: 20, total: 150, style: Progre", "al = eventData.data.total;\n      }\n    }\n  }\n", "/image3']\n\n  public totalCount(): number {\n  ", "/image' + this.data.totalCount())\n        })\n", "umber = 20\n  @State total: number = 100\n  @St"], "files": ["ProgressJsunit.test.ets", "progress.ets", "lazyForEach.ets", "swiper.ets", "Progress.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressType", "api_method_all": "declare enum ProgressType {\n  \n  Linear,\n\n  \n  Ring,\n\n  \n  Eclipse,\n\n  \n  ScaleRing,\n\n  \n  Capsule,\n}", "api_method_name": "ProgressType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["     */\n    it('testProgressTypeHorizontal', 0, asyn", "  console.info('testProgressTypeRing START');\n      ", "  console.info('testProgressTypeScaleRing START');\n ", "* @tc.name      testProgressTypeRing\n     * @tc.desc", "* @tc.name      testProgressTypeEclipse\n     * @tc.d", "     */\n    it('testProgressTypeEclipse', 0, async f", "     */\n    it('testProgressTypeRing', 0, async func", "* @tc.name      testProgressTypeArc\n     * @tc.desc ", "  console.info('testProgressTypeEclipse START');\n   ", "* @tc.name      testProgressTypeCircular\n     * @tc.", "     */\n    it('testProgressTypeCircular', 0, async ", "* @tc.name      testProgressTypeHorizontal\n     * @t", "  console.info('testProgressTypeHorizontal START');\n", "     */\n    it('testProgressTypeScaleRing', 0, async", "     */\n    it('testProgressTypeArc', 0, async funct", "* @tc.name      testProgressTypeScaleRing\n     * @tc", "  console.info('testProgressTypeCircular START');\n  ", "  console.info('testProgressTypeArc START');\n       "], "files": ["progressProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressType", "api_method_name": "Linear", "api_method_all": "Linear,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 59, "since": 8, "api_used": "\u662f", "lines": ["s.value.calcModePropLinear);\n        console.i", " : this.calcModePropLinear,\n            calcMo", "ransformCalcModePropLinear\n     * @tc.desc    ", "15 }) {\n      Text('Linear Progress').fontSize", "        calcModePropLinear: null,\n        calc", " this.context.createLinearGradient(50, 1900, 1", "        calcModePropLinear : this.calcModeProp", "curve).assertEqual('Linear')\n      }\n      try", "         this.createLinearGradient();\n        ", ".displayModePropAutoLinear,\n        }\n    },\n\n", "tAnimateCalcModePropLinear\n     * @tc.desc    ", "tyle: ProgressStyle.Linear }).color(Color.Red)", "qual(\"ProgressStyle.Linear\")\n      console.inf", "teMotionCalcModePropLinear\n     * @tc.desc    ", "          \"curve\": \"Linear\"\n          }\n      ", "ve7 = Curves.FastOutLinearIn(0.4, 0.0, 1.0, 1.", "let curve6 = Curves.LinearOutSlowIn(0.0, 0.0, ", "   this.calcModePropLinear = this.$element(\"ca", "tyle: ProgressStyle.Linear })\n          .value", " 1200, curve: Curve.Linear })\n      .onEnter((", "1660);\n  }\n\n  createLinearGradient() {\n    let", "iperDisplayMode.AutoLinear\n  @State edgeEffect", " 4000, curve: Curve.Linear }, () => {\n        ", ".displayModePropAutoLinear = this.$element(\"di", "radient = ctx.createLinearGradient(0,0,200,0);", "\"displayModePropAutoLinear\").getInspector()\n  ", "+nameA+'CalcModePropLinear', 0, async function", "tEqual('calcModePropLinear')\n        expect(ob", "tyle: ProgressStyle.Linear }).width(200).value", "+nameA+'CalcModePropLinear START');\n        co", " displayModePropAutoLinear: null,\n    },\n\n    ", "lement(\"calcModePropLinear\").getInspector()\n  ", " displayModePropAutoLinear: this.displayModePr", "yle = ProgressStyle.Linear\n  private stateChan"], "files": ["ProgressJsunit.test.ets", "animateTransformProps.test.js", "pageTransition2.ets", "pageTransition.ets", "progress.ets", "swiperProps.test.js", "swiper.ets", "animateMotionProps.test.js", "AnimateJsunit.test.ets", "Progress.ets", "motionPath.ets", "index.js", "curves.ets", "canvas.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressType", "api_method_name": "Ring", "api_method_all": "Ring,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 28, "since": 8, "api_used": "\u662f", "lines": ["estProgressTypeScaleRing START');\n        co", "      this.typeScaleRing = this.$element(\"ty", ".$element(\"typeScaleRing\").getInspector()\n  ", " ProgressStyle.ScaleRing })\n          .value", "estProgressTypeScaleRing\n     * @tc.desc    ", "sertEqual('typeScaleRing')\n        expect(ob", "           typeScaleRing: this.typeScaleRing", " this.$element(\"typeRing\").getInspector()\n  ", "\"5\"\n  @State paddingRingt: string= \"5\"\n  @St", "tyle: ProgressStyle.Ring })\n          .value", ": null,\n        typeRing: null,\n        type", "estProgressTypeScaleRing', 0, async function", "Ring: this.typeScaleRing,\n            typeAr", " typeRing: this.typeRing,\n            typeSc", "it('testProgressTypeRing', 0, async function", "This.value.typeScaleRing);\n        console.i", ", right: this.marginRingt, left: this.margin", "lobalThis.value.typeRing);\n        console.i", "fo('testProgressTypeRing START');\n        co", "0px\"\n  @State marginRingt: string= \"10px\"\n  ", "l,\n        typeScaleRing: null,\n        type", " right: this.paddingRingt, left: this.paddin", "qual(\"ProgressStyle.Ring\")\n      console.inf", "()\n        this.typeRing = this.$element(\"ty", "d).assertEqual('typeRing')\n        expect(ob", "    testProgressTypeRing\n     * @tc.desc    ", "\"ProgressStyle.ScaleRing\")\n      console.inf", "ar,\n            typeRing: this.typeRing,\n   "], "files": ["ProgressJsunit.test.ets", "progressProps.test.js", "Progress.ets", "index.js", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressType", "api_method_name": "Eclipse", "api_method_all": "Eclipse,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["rc,\n            typeEclipse: this.typeEclipse\n ", "qual(\"ProgressStyle.Eclipse\")\n      console.inf", "    testProgressTypeEclipse\n     * @tc.desc    ", "lobalThis.value.typeEclipse);\n        console.i", "tyle: ProgressStyle.Eclipse }).color(Color.Grey", ": null,\n        typeEclipse: null\n    },\n\n    o", "()\n        this.typeEclipse = this.$element(\"ty", " this.$element(\"typeEclipse\").getInspector()\n  ", "fo('testProgressTypeEclipse START');\n        co", "d).assertEqual('typeEclipse')\n        expect(ob", "it('testProgressTypeEclipse', 0, async function", "peEclipse: this.typeEclipse\n        }\n    },\n\n ", "tyle: ProgressStyle.Eclipse })\n          .value", "h(200)\n\n      Text('Eclipse Progress').fontSize", "tyle: ProgressStyle.Eclipse }).width(100).value"], "files": ["ProgressJsunit.test.ets", "progress.ets", "progressProps.test.js", "Progress.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressType", "api_method_name": "ScaleRing", "api_method_all": "ScaleRing,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": [" this.$element(\"typeScaleRing\").getInspector()\n  ", "()\n        this.typeScaleRing = this.$element(\"ty", "    testProgressTypeScaleRing\n     * @tc.desc    ", "qual(\"ProgressStyle.ScaleRing\")\n      console.inf", "tyle: ProgressStyle.ScaleRing })\n          .value", "it('testProgressTypeScaleRing', 0, async function", "lobalThis.value.typeScaleRing);\n        console.i", "ScaleRing: this.typeScaleRing,\n            typeAr", ": null,\n        typeScaleRing: null,\n        type", "d).assertEqual('typeScaleRing')\n        expect(ob", "ng,\n            typeScaleRing: this.typeScaleRing", "fo('testProgressTypeScaleRing START');\n        co"], "files": ["ProgressJsunit.test.ets", "Progress.ets", "progressProps.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressType", "api_method_name": "Capsule", "api_method_all": "Capsule,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 22, "since": 8, "api_used": "\u662f", "lines": ["Value\": \"ButtonType.Capsule\",\n          }\n     ", "rtEqual('ButtonType.Capsule')\n      expect(obj.", "      testButtonTypeCapsule\n     * @tc.desc    ", "     }\n\n      Text('Capsule Progress').fontSize", "d).assertEqual('typeCapsule')\n        expect(ob", ") {\n        Text(\"2.Capsule\")\n      }\n      .ty", "tyle: ProgressStyle.Capsule }).color(Color.Grey", "  it('testButtonTypeCapsule', 0, async function", "rtEqual('ButtonType.Capsule');\n      done();\n  ", "tyle: ProgressStyle.Capsule })\n          .value", "tyle: ProgressStyle.Capsule }).width(100).value", "   .type(ButtonType.Capsule)\n      .stateEffect", "qual(\"ProgressStyle.Capsule\")\n      console.inf", ": this.typeArc, typeCapsule : this.typeCapsule,", ": null,\n        typeCapsule : null,\n        typ", "eCapsule : this.typeCapsule, typeCircle : this.", " this.$element(\"typeCapsule\").getInspector()\n  ", "()\n        this.typeCapsule = this.$element(\"ty", " { type: ButtonType.Capsule })\n        .backgro", "lobalThis.value.typeCapsule);\n        console.i", "info('testButtonTypeCapsule START');\n        co"], "files": ["ProgressJsunit.test.ets", "progress.ets", "ButtonJsunit.test.ets", "Button.ets", "Progress.ets", "index.js", "buttonProps.test.js", "Link.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressStyleOptions", "api_method_all": "declare interface ProgressStyleOptions {\n  \n  strokeWidth?: Length;\n\n  \n  scaleCount?: number;\n\n  \n  scaleWidth?: Length;\n}", "api_method_name": "ProgressStyleOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressStyleOptions", "api_method_name": "strokeWidth", "api_method_all": "strokeWidth?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 227, "since": 8, "api_used": "\u662f", "lines": ["(obj.$attrs.divider.strokeWidth).assertEqual(\"3.00v", "ole.log(\"cd divider strokeWidth\" + JSON.stringify(o", "stroke(Color.Black).strokeWidth(4)\n      .strokeDas", "ring = 50;\n  @State strokeWidthValue: string = 20;\n", "ical(true)\n        .strokeWidth(10)\n        .height", "ata: {\n            \"strokeWidthValue\": \"30\",\n      ", "}).stroke(0xEE8443).strokeWidth(10).strokeDashArray", "ata: {\n            \"strokeWidth\": \"3.000000vp\"\n    ", "strokeWidth(`${this.strokeWidthValue}`)\n        .wi", "ata: {\n            \"strokeWidthValue\": \"-30\",\n     ", "th = eventData.data.strokeWidth;\n      }\n      if (", "(obj.$attrs.divider.strokeWidth).assertEqual(\"2.00v", "})\n      .divider({ strokeWidth: 2, color: 0xFFFFFF", "  .stroke(0xEE8443).strokeWidth(10).strokeDashArray", "xpect(objNew.$attrs.strokeWidth).assertEqual('12111", " Color.Red\n  @State strokeWidth: number = 7\n  @Stat", "stroke(Color.Black).strokeWidth(2)\n\n      Text('bor", "leValue}`)\n        .strokeWidth(`${this.strokeWidth", "7).stroke(0xEE8443).strokeWidth(10).fillOpacity(1)\n", "  expect(obj.$attrs.strokeWidth).assertEqual('20.00", "  strokeWidth: this.strokeWidth,\n          color: t", "umber = 1;\n  @State strokeWidth: number = 1;\n  @Sta", "stroke(Color.Black).strokeWidth(3).key('path')\n\n   ", "cal(false)\n        .strokeWidth(5)\n        .color(t", "7).stroke(0xEE8443).strokeWidth(10).strokeLineJoin(", "xpect(objNew.$attrs.strokeWidth).assertEqual('-30.0", "  .strokeWidth(this.strokeWidth)\n      .antiAlias(t", "Black).key('path1').strokeWidth(3)\n\n      Text('Str", "ue = eventData.data.strokeWidthValue;\n      }\n     ", "tyle.Butt)\n        .strokeWidth(this.strokeWidth)\n ", "}).stroke(0xEE8443).strokeWidth(10).strokeOpacity(0", "                    strokeWidth: 5,\n               ", "ata: {\n            \"strokeWidthValue\": \"121111111\"\n", "tringify(obj.$attrs.strokeWidth));\n      console.lo", "  .strokeWidth(this.strokeWidth)\n        .color(thi", "  expect(obj.$attrs.strokeWidth).assertEqual(\"7.000", "lor.Green)\n        .strokeWidth(10)\n        .height", "n = false;\n  @State strokeWidth: number = 2.000000;", "ull) {\n        this.strokeWidthValue = eventData.da", "\n        .divider({ strokeWidth: 2, color: 0xFFFFFF", "divider({\n          strokeWidth: this.strokeWidth,\n", " if (eventData.data.strokeWidth != null) {\n        ", " if (eventData.data.strokeWidthValue != null) {\n   ", "ull) {\n        this.strokeWidth = eventData.data.st", "rokeOpacity)\n      .strokeWidth(this.strokeWidth)\n ", "xpect(objNew.$attrs.strokeWidth).assertEqual('30.00"], "files": ["Shape.ets", "pathProps.test.js", "circleProps.test.js", "lineProps.test.js", "divider.ets", "gauge.ets", "polylineProps.test.js", "Path.ets", "ellipseProps.test.js", "polygonProps.test.js", "list.ets", "List.ets", "dragEvent2.ets", "index.js", "enumsLineCapStyle.ets", "GaugeJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "edgeEffect.ets", "dragEvent.ets", "tspanProps.test.js", "svgProps.test.js", "shape.ets", "svgTextProps.test.js", "textPathProps.test.js", "path.ets", "ListJsunit.test.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressStyleOptions", "api_method_name": "scaleCount", "api_method_all": "scaleCount?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressStyleOptions", "api_method_name": "scaleWidth", "api_method_all": "scaleWidth?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressStyle", "api_method_all": "declare enum ProgressStyle {\n  \n  Linear,\n\n  \n  Ring,\n\n  \n  Eclipse,\n\n  \n  ScaleRing,\n\n  \n  Capsule,\n}", "api_method_name": "ProgressStyle", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": [".type).assertEqual(\"ProgressStyle.Capsule\")\n      con", ", total: 40, style: ProgressStyle.ScaleRing })\n      ", "{ value: 27, style: ProgressStyle.Capsule }).width(10", ".type).assertEqual(\"ProgressStyle.Linear\")\n      cons", ".type).assertEqual(\"ProgressStyle.Eclipse\")\n      con", " \n    //    it('testProgressStyleProp', 0, async func", "  console.info('testProgressStyleProp START');\n    //", " total: 150, style: ProgressStyle.Eclipse }).color(Co", "le: ProgressStyle = ProgressStyle.Linear\n  private st", " total: 150, style: ProgressStyle.Capsule }).color(Co", ", total: 40, style: ProgressStyle.Ring })\n          .", ", total: 40, style: ProgressStyle.Eclipse })\n        ", ".type).assertEqual(\"ProgressStyle.ScaleRing\")\n      c", "{ value: 20, style: ProgressStyle.Linear }).width(200", ", total: 40, style: ProgressStyle.Linear })\n         ", ".type).assertEqual(\"ProgressStyle.Ring\")\n      consol", " total: 150, style: ProgressStyle.Linear }).color(Col", ", total: 40, style: ProgressStyle.Capsule })\n        ", "{ value: 25, style: ProgressStyle.Eclipse }).width(10", "100\n  @State style: ProgressStyle = ProgressStyle.Lin"], "files": ["ProgressJsunit.test.ets", "Progress.ets", "progressProps.test.js", "progress.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressStyle", "api_method_name": "Linear", "api_method_all": "Linear,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 59, "since": 8, "api_used": "\u662f", "lines": ["s.value.calcModePropLinear);\n        console.i", " : this.calcModePropLinear,\n            calcMo", "ransformCalcModePropLinear\n     * @tc.desc    ", "15 }) {\n      Text('Linear Progress').fontSize", "        calcModePropLinear: null,\n        calc", " this.context.createLinearGradient(50, 1900, 1", "        calcModePropLinear : this.calcModeProp", "curve).assertEqual('Linear')\n      }\n      try", "         this.createLinearGradient();\n        ", ".displayModePropAutoLinear,\n        }\n    },\n\n", "tAnimateCalcModePropLinear\n     * @tc.desc    ", "tyle: ProgressStyle.Linear }).color(Color.Red)", "qual(\"ProgressStyle.Linear\")\n      console.inf", "teMotionCalcModePropLinear\n     * @tc.desc    ", "          \"curve\": \"Linear\"\n          }\n      ", "ve7 = Curves.FastOutLinearIn(0.4, 0.0, 1.0, 1.", "let curve6 = Curves.LinearOutSlowIn(0.0, 0.0, ", "   this.calcModePropLinear = this.$element(\"ca", "tyle: ProgressStyle.Linear })\n          .value", " 1200, curve: Curve.Linear })\n      .onEnter((", "1660);\n  }\n\n  createLinearGradient() {\n    let", "iperDisplayMode.AutoLinear\n  @State edgeEffect", " 4000, curve: Curve.Linear }, () => {\n        ", ".displayModePropAutoLinear = this.$element(\"di", "radient = ctx.createLinearGradient(0,0,200,0);", "\"displayModePropAutoLinear\").getInspector()\n  ", "+nameA+'CalcModePropLinear', 0, async function", "tEqual('calcModePropLinear')\n        expect(ob", "tyle: ProgressStyle.Linear }).width(200).value", "+nameA+'CalcModePropLinear START');\n        co", " displayModePropAutoLinear: null,\n    },\n\n    ", "lement(\"calcModePropLinear\").getInspector()\n  ", " displayModePropAutoLinear: this.displayModePr", "yle = ProgressStyle.Linear\n  private stateChan"], "files": ["ProgressJsunit.test.ets", "animateTransformProps.test.js", "pageTransition2.ets", "pageTransition.ets", "progress.ets", "swiperProps.test.js", "swiper.ets", "animateMotionProps.test.js", "AnimateJsunit.test.ets", "Progress.ets", "motionPath.ets", "index.js", "curves.ets", "canvas.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressStyle", "api_method_name": "Ring", "api_method_all": "Ring,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 28, "since": 8, "api_used": "\u662f", "lines": ["estProgressTypeScaleRing START');\n        co", "      this.typeScaleRing = this.$element(\"ty", ".$element(\"typeScaleRing\").getInspector()\n  ", " ProgressStyle.ScaleRing })\n          .value", "estProgressTypeScaleRing\n     * @tc.desc    ", "sertEqual('typeScaleRing')\n        expect(ob", "           typeScaleRing: this.typeScaleRing", " this.$element(\"typeRing\").getInspector()\n  ", "\"5\"\n  @State paddingRingt: string= \"5\"\n  @St", "tyle: ProgressStyle.Ring })\n          .value", ": null,\n        typeRing: null,\n        type", "estProgressTypeScaleRing', 0, async function", "Ring: this.typeScaleRing,\n            typeAr", " typeRing: this.typeRing,\n            typeSc", "it('testProgressTypeRing', 0, async function", "This.value.typeScaleRing);\n        console.i", ", right: this.marginRingt, left: this.margin", "lobalThis.value.typeRing);\n        console.i", "fo('testProgressTypeRing START');\n        co", "0px\"\n  @State marginRingt: string= \"10px\"\n  ", "l,\n        typeScaleRing: null,\n        type", " right: this.paddingRingt, left: this.paddin", "qual(\"ProgressStyle.Ring\")\n      console.inf", "()\n        this.typeRing = this.$element(\"ty", "d).assertEqual('typeRing')\n        expect(ob", "    testProgressTypeRing\n     * @tc.desc    ", "\"ProgressStyle.ScaleRing\")\n      console.inf", "ar,\n            typeRing: this.typeRing,\n   "], "files": ["ProgressJsunit.test.ets", "progressProps.test.js", "Progress.ets", "index.js", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressStyle", "api_method_name": "Eclipse", "api_method_all": "Eclipse,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["rc,\n            typeEclipse: this.typeEclipse\n ", "qual(\"ProgressStyle.Eclipse\")\n      console.inf", "    testProgressTypeEclipse\n     * @tc.desc    ", "lobalThis.value.typeEclipse);\n        console.i", "tyle: ProgressStyle.Eclipse }).color(Color.Grey", ": null,\n        typeEclipse: null\n    },\n\n    o", "()\n        this.typeEclipse = this.$element(\"ty", " this.$element(\"typeEclipse\").getInspector()\n  ", "fo('testProgressTypeEclipse START');\n        co", "d).assertEqual('typeEclipse')\n        expect(ob", "it('testProgressTypeEclipse', 0, async function", "peEclipse: this.typeEclipse\n        }\n    },\n\n ", "tyle: ProgressStyle.Eclipse })\n          .value", "h(200)\n\n      Text('Eclipse Progress').fontSize", "tyle: ProgressStyle.Eclipse }).width(100).value"], "files": ["ProgressJsunit.test.ets", "progress.ets", "progressProps.test.js", "Progress.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressStyle", "api_method_name": "ScaleRing", "api_method_all": "ScaleRing,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": [" this.$element(\"typeScaleRing\").getInspector()\n  ", "()\n        this.typeScaleRing = this.$element(\"ty", "    testProgressTypeScaleRing\n     * @tc.desc    ", "qual(\"ProgressStyle.ScaleRing\")\n      console.inf", "tyle: ProgressStyle.ScaleRing })\n          .value", "it('testProgressTypeScaleRing', 0, async function", "lobalThis.value.typeScaleRing);\n        console.i", "ScaleRing: this.typeScaleRing,\n            typeAr", ": null,\n        typeScaleRing: null,\n        type", "d).assertEqual('typeScaleRing')\n        expect(ob", "ng,\n            typeScaleRing: this.typeScaleRing", "fo('testProgressTypeScaleRing START');\n        co"], "files": ["ProgressJsunit.test.ets", "Progress.ets", "progressProps.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressStyle", "api_method_name": "Capsule", "api_method_all": "Capsule,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 22, "since": 8, "api_used": "\u662f", "lines": ["Value\": \"ButtonType.Capsule\",\n          }\n     ", "rtEqual('ButtonType.Capsule')\n      expect(obj.", "      testButtonTypeCapsule\n     * @tc.desc    ", "     }\n\n      Text('Capsule Progress').fontSize", "d).assertEqual('typeCapsule')\n        expect(ob", ") {\n        Text(\"2.Capsule\")\n      }\n      .ty", "tyle: ProgressStyle.Capsule }).color(Color.Grey", "  it('testButtonTypeCapsule', 0, async function", "rtEqual('ButtonType.Capsule');\n      done();\n  ", "tyle: ProgressStyle.Capsule })\n          .value", "tyle: ProgressStyle.Capsule }).width(100).value", "   .type(ButtonType.Capsule)\n      .stateEffect", "qual(\"ProgressStyle.Capsule\")\n      console.inf", ": this.typeArc, typeCapsule : this.typeCapsule,", ": null,\n        typeCapsule : null,\n        typ", "eCapsule : this.typeCapsule, typeCircle : this.", " this.$element(\"typeCapsule\").getInspector()\n  ", "()\n        this.typeCapsule = this.$element(\"ty", " { type: ButtonType.Capsule })\n        .backgro", "lobalThis.value.typeCapsule);\n        console.i", "info('testButtonTypeCapsule START');\n        co"], "files": ["ProgressJsunit.test.ets", "progress.ets", "ButtonJsunit.test.ets", "Button.ets", "Progress.ets", "index.js", "buttonProps.test.js", "Link.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressInterface", "api_method_all": "interface ProgressInterface {\n  \n  (options: ProgressOptions): ProgressAttribute;\n}", "api_method_name": "ProgressInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressInterface", "api_method_name": "options", "api_method_all": "(options: ProgressOptions): ProgressAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 791, "since": 7, "api_used": "\u662f", "lines": ["= await router.push(options);\n          await U", " start\");\n      let options = {\n        uri: 'p", "(obj.$attrs.overlay.options.offset.x).assertEqu", "(obj.$attrs.overlay.options.align).assertEqual(", "(obj.$attrs.overlay.options.offset.y).assertEqu", " (done) {\n      let options = {\n        uri: 'p"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressAttribute", "api_method_all": "declare class ProgressAttribute extends CommonMethod<ProgressAttribute> {\n  \n  value(value: number): ProgressAttribute;\n\n  \n  color(value: ResourceColor): ProgressAttribute;\n\n  \n  style(value: ProgressStyleOptions): ProgressAttribute;\n}", "api_method_name": "ProgressAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressAttribute", "api_method_name": "value", "api_method_all": "value(value: number): ProgressAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressAttribute", "api_method_name": "color", "api_method_all": "color(value: ResourceColor): ProgressAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 276, "since": 7, "api_used": "\u662f", "lines": ["(obj.$attrs.divider.color).assertEqual(\"#FFFF", "        radius: 20, color: Color.Gray, offset", "bjNew.$attrs.shadow.color).assertEqual(\"#FF00", " 2.000000;\n  @State color: string = 0xFFFFFF;", " { radius: 'error', color: 'error', offsetX: ", "rt default function colorGradientJsunit() {\n ", " if (eventData.data.colorValues != null) {\n  ", "ata: {\n            \"colorValues\": JSON.string", "  console.info(\"get colorGradient state pages", "ing = 150;\n  @State colorValues: Array = [[0x", "ull) {\n        this.color = eventData.data.co", "bjNew.$attrs.shadow.color).assertEqual(\"#8000", "bjNew.$attrs.shadow.color).assertEqual(\"#FF80", "ull) {\n        this.colorValues = JSON.parse(", "\n        }.border({ color: Color.Black, width", "TRS_SHADOW_COLOR = 'color'\nconst ATTRS_SHADOW", "ection.Top,\n        colors: [[0xAEE1E1, 0.0],", "        color: this.color,\n          startMar", "t(obj.$attrs.shadow.color).assertEqual(\"#FF80", ".border({ width: 5, color: 0x317AF7, radius: ", "    radius: 60,\n    colors:[[0xAEE1E1, 0.0], ", "r({ strokeWidth: 2, color: 0xFFFFFF, startMar", "ata: {\n            \"color\": '0xFF0000'\n      ", "(obj.$attrs.divider.color).assertEqual(\"#FF00", " console.info(\"push colorGradient page result", "radius: 0x7FFFFFFF, color: 0x7FFFFFFF, offset", "      console.info(\"colorGradient beforeEach ", "        uri: 'pages/colorGradient',\n      }\n ", "Direction.Left,\n    colors: [[0xAEE1E1, 0.0],", "s));\n        if (!(\"colorGradient\" == pages.n", " if (eventData.data.color != null) {\n        ", ",\n    end: 359,\n    colors: [[0xAEE1E1, 0.0],", "      console.info(\"colorGradient after each ", "    Text(`text font color ${this.fontColor}`)", "   Text('background color').fontSize(9).width", "arse(eventData.data.colorValues);\n      }\n   ", "ject= { radius: 10, color: Color.Gray, offset", "or = eventData.data.color;\n      }\n      if (", "console.error(\"push colorGradient page error:", "radius: 0x80000000, color: 0x80000000, offset", "bjNew.$attrs.shadow.color).assertEqual(\"#7FFF", "ata: {\n            \"color\": \"#FF0000FF\"\n     ", "fontColor)\n        .colorBlend(Color.Green)\n ", "right: 20, size: 2, color: Color.Blue })\n    ", "  if(eventData.data.colorValues != null) {\n  ", "= \"200px\";\n  @State color: Array = [[0x080808", "okeWidth,\n          color: this.color,\n      "], "files": ["ohosPrompt.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "Qrcode.ets", "Span.ets", "Progress.ets", "toolbarItemProps.test.js", "marquee.ets", "basicabilityapi.test.js", "DividerJsunit.test.ets", "Divider.ets", "border.ets", "systemPrompt.ets", "List.test.ets", "scrollCode.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "gauge.ets", "TextJsunit.test.ets", "swiper.ets", "Blank.ets", "text.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "labelProps.test.js", "image.ets", "ListJsunit.test.ets", "loadingProgress.ets", "stepperProps.test.js", "ratingProps.test.js", "ColorGradientJsunit.test.ets", "PatternLock.ets", "ShapeJsunit.test.ets", "badge.ets", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "pickerProps.test.js", "selectProps.test.js", "span.ets", "NavigatorCode.ets", "BackgroundAndSizeSettingJsunit.test.ets", "mouseEvent.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "divider.ets", "Constants.ets", "progress.ets", "sliderProps.test.js", "WebPage.ets", "inputProps.test.js", "index.js", "progressProps.test.js", "Badge.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ProgressAttribute", "api_method_name": "style", "api_method_all": "style(value: ProgressStyleOptions): ProgressAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1756, "since": 7, "api_used": "\u662f", "lines": ["ogress({ value: 25, style: ProgressStyle.Ecli", "yle));\n      expect(style.fontSize).assertEqu", "ue: 20, total: 150, style: ProgressStyle.Line", "    Text(`text font style ${this.fontStyle}`)", "ue: 20, total: 150, style: ProgressStyle.Ecli", "x317AF7, radius: 8, style: BorderStyle.Dotted", "tyle);\n      expect(style.fontSize).assertEqu", "tBadge05] component style is: \" + JSON.string", " step: 1,\n          style: SliderStyle.OutSet", ".border({ width: 1, style: BorderStyle.Dashed", " family: 'cursive', style: FontStyle.Italic }", " step: 1,\n          style: SliderStyle.InSet,", "osition: 1,\n        style: { badgeSize: 6, ba", "tep: 1,\n            style: SliderStyle.OutSet", ".border({ width: 1, style: this.borderStyle }", "  expect(fontObject.style).assertEqual('FontS", "xCount: 99,\n        style: { color: this.colo", "ue: 20, total: 150, style: ProgressStyle.Caps", "mber = 100\n  @State style: ProgressStyle = Pr", "WINDOWBLUR_STYLE = 'style'\nconst ATTRS_FONTFA", "parse(objNew.$attrs.style);\n      expect(styl", "mily: 'sans-serif', style: FontStyle.Normal\n ", "ON.parse(obj.$attrs.style);\n      expect(obj.", "parse(objNew.$attrs.style);\n      console.inf", "0, family: 'serif', style: FontStyle.Normal }", "ogress({ value: 20, style: ProgressStyle.Line", " \" + JSON.stringify(style));\n      expect(sty", "dge');\n      expect(style.fontSize).assertEqu", "ogress({ value: 27, style: ProgressStyle.Caps", "objNew));\n      let style = JSON.parse(objNew", "pValue,\n            style: SliderStyle.InSet,", "is.message,\n        style: { color: this.colo", "fy(obj));\n      let style = JSON.parse(obj.$a"], "files": ["Select.ets", "ratingProps.test.js", "SelectJsunit.test.ets", "dividerProps.test.js", "BadgeJsunit.test.ets", "Slider.ets", "badge.ets", "pickerViewProps.test.js", "qrcodeProps.test.js", "divProps.test.js", "textStyle.ets", "TextInput.ets", "AlphabetIndexer.ets", "Constants.ets", "Progress.ets", "Sidebar.ets", "Badge.ets", "SliderJsunit.test.ets", "stepperItemProps.test.js", "progress.ets", "canvasProps.test.js", "sliderProps.test.js", "toolbarItemProps.test.js", "videoProps.test.js", "positionSetting.ets", "TextArea.ets", "inputProps.test.js", "index.js", "optionProps.test.js", "border.ets", "richtextProps.test.js", "pickerProps.test.js", "select.ets", "labelProps.test.js", "textArea.ets", "slider.ets", "textInput.ets", "progressProps.test.js", "selectProps.test.js", "gestureMode.ets", "search.ets", "stepperProps.test.js"], "is_white": " ", "desc": " "}]}