{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\navigator", "api": [{"api_class_name": "NavigationType", "api_method_all": "declare enum NavigationType {\n  \n  Push,\n\n  \n  Back,\n\n  \n  Replace,\n}", "api_method_name": "NavigationType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": [".type).assertEqual('NavigationType.Push');\n      conso", ".type).assertEqual('NavigationType.Push')\n      consol", "pages/index\", type: NavigationType.Push }) {\n        T", ":\"pages/index\",type:NavigationType.Replace}){\n        ", "      \"typeValue\": \"NavigationType.Back\"\n          }\n ", "Transition2', type: NavigationType.Push }) {\n         ", " type: RouteType\t = NavigationType.Push\n\n  build() {\n ", ":\"pages/index\",type:NavigationType.Push}){\n        Tex", ".type).assertEqual('NavigationType.Back');\n      done(", ".type).assertEqual('NavigationType.Back')\n      expect", "rDetailCode', type: NavigationType.Push }) {\n        T", ".type).assertEqual('NavigationType.Replace')\n      con", "pages/index\", type: NavigationType.Back }) {\n        R", "pages/index\", type: NavigationType.Back }) {\n        C", "  @State typeValue: NavigationType = NavigationType.Ba", "pages/index\", type: NavigationType.Replace }) {\n      ", "e: NavigationType = NavigationType.Back;\n  private sta", "eTransition' ,type: NavigationType.Push}) {\n        Im", ":\"pages/index\",type:NavigationType.Back}){\n        Tex", "pages/index\", type: NavigationType.Back }) {\n        T"], "files": ["Grid.ets", "GridItem.ets", "pageTransition2.ets", "pageTransition.ets", "NavigatorJsunit.test.ets", "Navigator.ets", "sharedTransition.ets", "NavigatorCodeJsunit.test.ets", "PageTransitionJsunit.test.ets", "NavigatorCode.ets", "Row.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationType", "api_method_name": "Push", "api_method_all": "Push,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": [" \n    it('testRouterPush', 0, async function", "est page log] routerPush ohHide');\n    },\n}\n", "  uri: 'pages/routerPush/index'\n            ", "type:NavigationType.Push}){\n        Text('Na", "ole.info('testRouterPushNotExist success');\n", " \n    it('testRouterPushNotExist', 0, async ", "ole.info(\"testRouterPushNotExist getLength:\"", "ole.info('testRouterPush START');\n        le", "ype: NavigationType.Push }) {\n            Im", "ual('NavigationType.Push')\n      console.inf", "ole.info('testRouterPushNotExist END');\n    ", "e\t = NavigationType.Push\n\n  build() {\n    Co", "ual('NavigationType.Push');\n      console.in", "expect(\"pages/routerPush/\").assertEqual(page", " uri : 'pages/routerPush/index'\n        }\n  ", "ype: NavigationType.Push }) {\n        Text('", "Bold)\n      Button('Push')\n        .key('pus", "ype: NavigationType.Push}) {\n        Image($", "ole.info('testRouterPush SUCCESS');\n        ", "est page log] routerPush onShow');\n    },\n  ", "ole.info('testRouterPush END');\n        done", "ole.info('testRouterPushNotExist START');\n  ", "ole.info(\"testRouterPushNotExist getState\" +"], "files": ["pageTransition2.ets", "pageTransition.ets", "systemRouterA.ets", "NavigatorJsunit.test.ets", "Navigator.ets", "sharedTransition.ets", "index.js", "basicabilityapi.test.js", "PageTransitionJsunit.test.ets", "NavigatorCode.ets", "ohosRouterA.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationType", "api_method_name": "Back", "api_method_all": "Back,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 503, "since": 7, "api_used": "\u662f", "lines": [" this.stateChangCallBack);\n  }\n\n  private st", "nfo(\"[stateChangCallBack] stateChangCallBack", " this.stateChangCallBack);\n\n  }\n\n  private s", "nfo(\"[stateChangCallBack] state change calle", " page stateChangCallBack\" + JSON.stringify(e", " this.stateChangCallBack);\n\n    var stateCha", "ivate stateChangCallBack = (eventData) => {\n", " this.stateChangCallBack);\n    let spanChang", " this.stateChangCallBackTwo);\n\n    var state", " this.stateChangCallBack);\n  }\n\n  stateChang", " }\n\n  stateChangCallBack = (eventData) => {\n", " page stateChangCallBack\");\n    if (eventDat", " this.stateChangCallBack);\n\n    let priority", " this.stateChangCallBack);\n  }\n\n  build() {\n", "Back] stateChangCallBack \");\n    if (eventDa", " this.stateChangCallBack);\n    let offsetCha"], "files": ["video.ets", "Navigator.ets", "Row.ets", "Navigation.ets", "richText.ets", "column.ets", "checkboxGroup.ets", "navigation.ets", "AppearJsunit.test.ets", "basicabilityapi.test.js", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "FillModeJsunit.test.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "TouchJsunit.test.ets", "transForm.ets", "path.ets", "NavigatorCodeJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "focus.ets", "touch.ets", "background.ets", "gauge.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "flexDirection.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "row.ets", "loadingProgress.ets", "flex.ets", "gridContainer.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ConfigurationJsunit.test.ets", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "list.ets", "colorGradient.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "checkbox.ets", "circle.ets", "listItem.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "direction2.ets", "mouseEvent.ets", "ohosMatrix4.ets", "divider.ets", "ellipse.ets", "appear.ets", "rating.ets", "zIndex.ets", "fillMode.ets", "line.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "ohosRouterA.ets", "GridItem.ets", "select.ets", "slider.ets", "NavigationJsunit.test.ets", "Calendar.ets", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "panel.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationType", "api_method_name": "Replace", "api_method_all": "Replace,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["ole.info('testRouterReplace START');\n        le", " uri : 'pages/routerReplace/index'\n        }\n  ", " \n    it('testRouterReplaceNotExist', 0, async ", "expect(\"pages/routerReplace/\").assertEqual(page", "ole.info(\"testRouterReplaceNotExist getLength:\"", " \n    it('testRouterReplace', 0, async function", "ole.info('testRouterReplace END');\n        done", "ual('NavigationType.Replace')\n      console.inf", "ype: NavigationType.Replace }) {\n        Text('", "ole.info('testRouterReplaceNotExist END');\n    ", "ace')\n        .key('ReplaceButtonA')\n        .b", "est page log] routerReplace ohHide');\n    },\n}\n", "ole.info('testRouterReplace SUCCESS');\n        ", "ify(sendEventByKey('ReplaceButtonA', 10, \"\")));", "ole.info(\"testRouterReplaceNotExist getState\" +", "type:NavigationType.Replace}){\n        Text('Na", "  });\n      Button('Replace')\n        .key('Rep", "ole.info('testRouterReplaceNotExist START');\n  ", "est page log] routerReplace onShow');\n    },\n  "], "files": ["systemRouterA.ets", "OhosRouterJsnuit.test.ets", "NavigatorJsunit.test.ets", "Navigator.ets", "SystemRouterJsunit.test.ets", "index.js", "basicabilityapi.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigatorInterface", "api_method_all": "interface NavigatorInterface {\n  \n  (value?: { target: string; type?: NavigationType }): NavigatorAttribute;\n\n  \n  (): NavigatorAttribute;\n}", "api_method_name": "NavigatorInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NavigatorInterface", "api_method_name": "value", "api_method_all": "(value?: { target: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigatorInterface", "api_method_name": "type", "api_method_all": "type?: NavigationType }): NavigatorAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5337, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"type\": \"PanelType.Miniba", "er0100] expect(obj.$type) is: \" + (obj.$type", "is: \" + (obj.$attrs.type));\n      done();\n  ", "log0100] obj.$attrs.type is: \" + (obj.$attrs", ";\n      expect(obj.$type).assertEqual('Stepp", "    y: downY,\n      type: TouchType.Down,\n  ", "og0100] expect(obj.$type) is: \" + (obj.$type", "eck\n\nconst TYPE = '$type'\nconst ID = '$ID'\nc", "pe = eventData.data.type;\n      }\n    }\n  }\n", "        expect(obj.$type).assertEqual('Flex'", "      y: upY,\n      type: TouchType.Up,\n    ", ";\n      expect(obj.$type).assertEqual('TextA", "bj.$attrs.transform.type)\n        .assertEqu", ";\n      expect(obj.$type).assertEqual('GridC", "  expect(obj.$attrs.type).assertEqual(\"Panel", ";\n      expect(obj.$type).assertEqual('Swipe", "      .decoration({ type: this.decoration, c", "ean = true\n  @State type: PanelType = PanelT", " if (eventData.data.type != null) {\n        ", "type) is: \" + (obj.$type));\n      console.in", "pe = eventData.data.type;\n      }\n      if (", "extInput')\n        .type(this.inputType)\n   ", "          if (event.type === TouchType.Down)", ";\n      expect(obj.$type).assertEqual('Image", "          if (event.type === TouchType.Move)", ";\n      expect(obj.$type).assertEqual('Flex'", "  if(eventData.data.type != null) {\n        ", "eTest_0200 obj.obj.$type is: \" + obj.$type);", ".$type is: \" + obj.$type);\n      var res = o", "ata: {\n            \"type\": 'InputType.Email'", ";\n      expect(obj.$type).assertEqual('Gauge", "ull) {\n        this.type = eventData.data.ty", "          if (event.type === TouchType.Up) {", ";\n      expect(obj.$type).assertEqual('Text'", "   }\n      }\n      .type(this.type).mode(thi", " }\n      .type(this.type).mode(this.mode)\n  ", ";\n      expect(obj.$type).assertEqual('Row')", "yStep * i),\n        type: TouchType.Move\n   "], "files": ["pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Panel.ets", "sourceType.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "transition.ets", "textInput.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "toggle.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "span.ets", "NavigatorCode.ets", "buttonProps.test.js", "animateProps.test.js", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "Constants.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "panelProps.test.js", "sharedTransition.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigatorAttribute", "api_method_all": "declare class NavigatorAttribute extends CommonMethod<NavigatorAttribute> {\n  \n  active(value: boolean): NavigatorAttribute;\n\n  \n  type(value: NavigationType): NavigatorAttribute;\n\n  \n  target(value: string): NavigatorAttribute;\n\n  \n  params(value: object): NavigatorAttribute;\n}", "api_method_name": "NavigatorAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NavigatorAttribute", "api_method_name": "active", "api_method_all": "active(value: boolean): NavigatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 56, "since": 7, "api_used": "\u662f", "lines": ["lAlign.Top\n  @State active: boolean = false\n\n ", "er called')\n      }.active(this.active)\n      ", "izeType.XS\n  @State active: boolean = false\n  ", " state is: ' + this.active);\n            try {", "number = 0\n  @State active: boolean = false\n  ", "ck called')\n      }.active(this.active)\n      ", "ect(RefreshStatus.Inactive).assertEqual(0);\n  ", "ator\uff0cback')\n      }.active(this.active)\n      ", " '3', '4']\n  @State active: boolean = false\n\n ", "ing()\n  })\n  @State active: boolean = false\n  ", "atorCode {\n  @State active: boolean = false;\n ", ") => {\n        this.active = true\n      })\n   ", "lignItems)\n\n      }.active(this.active)\n      ", "Style.Butt\n  @State active: boolean = false\n  ", "r\uff0creplace')\n      }.active(this.active)\n      ", "t column {\n  @State active: boolean = false\n  ", " {\n            this.active = true\n            ", "{ top: 5 })\n      }.active(this.active)\n      ", "      }.active(this.active).key('NavigatorType", "ed called')\n      }.active(this.active)\n      ", "      console.info(\"active page state change c", "      }.active(this.active)\n      .key('naviga", ") => {\n        this.active = true\n        cons", "number = 1\n  @State active: boolean = false\n  ", "olor.Black\n  @State active: boolean = false\n  ", "ator\uff0cpush')\n      }.active(this.active)\n      ", "ng = 'new'\n  @State active: boolean = false\n  ", "{\n    console.info('active page show called');", "  expect(obj.$attrs.active).assertEqual('false", "an = false\n  @State active: boolean = false\n\n ", "testcase {\n  @State active: boolean = false\n  ", "      }.active(this.active)\n      .params({\n  ", " 'H', 'I']\n  @State active: boolean = false\n  ", "ing= \"100\"\n  @State active: boolean = false\n  ", "testcase {\n  @State active:boolean =false\n  @S", "Color.Pink\n  @State active: boolean = false\n  ", " state is: ' + this.active);\n        try {\n   ", "ign.Center)\n      }.active(this.active).key('N"], "files": ["pageTransition2.ets", "PatternLock.ets", "Navigator.ets", "ListItem.ets", "Text.ets", "Row.ets", "Counter.ets", "AlphabetIndexer.ets", "Blank.ets", "DataPanel.ets", "Grid.ets", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "RefreshJsunit.test.ets", "GridContainer.ets", "PageTransitionJsunit.test.ets", "Divider.ets", "GridItem.ets", "sharedTransition.ets", "NavigatorCodeJsunit.test.ets", "Column.ets", "Badge.ets", "NavigatorCode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigatorAttribute", "api_method_name": "type", "api_method_all": "type(value: NavigationType): NavigatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5337, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"type\": \"PanelType.Miniba", "er0100] expect(obj.$type) is: \" + (obj.$type", "is: \" + (obj.$attrs.type));\n      done();\n  ", "log0100] obj.$attrs.type is: \" + (obj.$attrs", ";\n      expect(obj.$type).assertEqual('Stepp", "    y: downY,\n      type: TouchType.Down,\n  ", "og0100] expect(obj.$type) is: \" + (obj.$type", "eck\n\nconst TYPE = '$type'\nconst ID = '$ID'\nc", "pe = eventData.data.type;\n      }\n    }\n  }\n", "        expect(obj.$type).assertEqual('Flex'", "      y: upY,\n      type: TouchType.Up,\n    ", ";\n      expect(obj.$type).assertEqual('TextA", "bj.$attrs.transform.type)\n        .assertEqu", ";\n      expect(obj.$type).assertEqual('GridC", "  expect(obj.$attrs.type).assertEqual(\"Panel", ";\n      expect(obj.$type).assertEqual('Swipe", "      .decoration({ type: this.decoration, c", "ean = true\n  @State type: PanelType = PanelT", " if (eventData.data.type != null) {\n        ", "type) is: \" + (obj.$type));\n      console.in", "pe = eventData.data.type;\n      }\n      if (", "extInput')\n        .type(this.inputType)\n   ", "          if (event.type === TouchType.Down)", ";\n      expect(obj.$type).assertEqual('Image", "          if (event.type === TouchType.Move)", ";\n      expect(obj.$type).assertEqual('Flex'", "  if(eventData.data.type != null) {\n        ", "eTest_0200 obj.obj.$type is: \" + obj.$type);", ".$type is: \" + obj.$type);\n      var res = o", "ata: {\n            \"type\": 'InputType.Email'", ";\n      expect(obj.$type).assertEqual('Gauge", "ull) {\n        this.type = eventData.data.ty", "          if (event.type === TouchType.Up) {", ";\n      expect(obj.$type).assertEqual('Text'", "   }\n      }\n      .type(this.type).mode(thi", " }\n      .type(this.type).mode(this.mode)\n  ", ";\n      expect(obj.$type).assertEqual('Row')", "yStep * i),\n        type: TouchType.Move\n   "], "files": ["pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Panel.ets", "sourceType.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "transition.ets", "textInput.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "toggle.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "span.ets", "NavigatorCode.ets", "buttonProps.test.js", "animateProps.test.js", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "Constants.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "panelProps.test.js", "sharedTransition.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigatorAttribute", "api_method_name": "target", "api_method_all": "target(value: string): NavigatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 51, "since": 7, "api_used": "\u662f", "lines": ["  targetProp : this.targetProp,\n            pl", "tringify(obj.$attrs.target));\n        done();\n", "arget).assertEqual('target1') //PROP AND VALUE", "'\n          + event.target.area.globalPos.x + ", "o(\"[labelProps] get target value is: \" + JSON.", "fo(\"[menuProps] get target value is: \" + JSON.", "o(\"[popupProps] get target value is: \" + JSON.", "'\n          + event.target.area.width + '\\n  h", "{\n      Navigator({ target: 'pages/pageTransit", "se(globalThis.value.targetProp); //ID\n        ", "  expect(obj.$attrs.target).assertEqual('targe", "  expect(obj.$attrs.target).assertEqual('pages", "  expect(obj.$attrs.target).assertEqual('label", "tor()\n\n        this.targetProp = this.$element", "'\\nheight\uff1a' + event.target.area.height)\n      ", "{\n      Navigator({ target: \"pages/index\", typ", "n  height\uff1a' + event.target.area.height);\n     ", "le.log('Navigator\u2018s target is ' + JSON.stringi", "{\n      Navigator({ target: 'pages/NavigatorDe", "ne : null,\n\n        targetProp : null,\n       ", "        Navigator({ target: 'pages/sharedTrans", "){\n      Navigator({target:\"pages/index\",type:", "rs.id).assertEqual('targetProp') //ID\n        ", ")\n\n      Navigator({target:\"pages/index\",type:", "'\n          + event.target.area.width + '\\nhei", "Pos.x + ',' + event.target.area.globalPos.y + ", "  expect(obj.$attrs.target).assertEqual('testT", "pNone,\n\n            targetProp : this.targetPr", "\n\n      Navigator({ target: \"pages/index\", typ", " y:' + event.y + '\\ntarget:' + '\\n  component ", "tringify(obj.$attrs.target))\n      console.log", "  expect(obj.$attrs.target).assertEqual(undefi", "op = this.$element(\"targetProp\").getInspector("], "files": ["Grid.ets", "GridItem.ets", "pageTransition2.ets", "menuProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "touch.ets", "popupProps.test.js", "labelProps.test.js", "NavigatorJsunit.test.ets", "Navigator.ets", "sharedTransition.ets", "index.js", "PageTransitionJsunit.test.ets", "button.ets", "NavigatorCode.ets", "Row.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigatorAttribute", "api_method_name": "params", "api_method_all": "params(value: object): NavigatorAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 71, "since": 0, "api_used": "\u662f", "lines": ["SystemRouterB] emit params err: \" + JSON.strin", " data: {\n          \"params\": data,\n        }\n ", "r.emit(paramsEvent, paramsData);\n    } catch (", "uterB',\n            params: {\n              da", " \" + JSON.stringify(paramsEvent));\n        exp", "ct(paramsEvent.data.params).assertEqual('B Pag", "  events_emitter.on(paramsEvent, callback);\n  ", "ageShow() {\n    let params = router.getParams(", "t));\n        expect(paramsEvent.data.params).a", "\"[OhosRouterB] emit params err: \" + JSON.strin", "    let callback = (paramsEvent) => {\n        ", ";\n    if (params && params.data) {\n      conso", "    try {\n      let paramsData = {\n        dat", "etParams();\n    if (params && params.data) {\n ", "his.getRouterParams(params.data);\n    }\n  }\n  ", "terB] start to emit params\");\n      events_emi", ";\n      }\n      let paramsEvent = {\n        ev", "events_emitter.emit(paramsEvent, paramsData);\n", "ign.Center)\n      }.params({ text: this.Text }", "tParams result: \" + params.data);\n      this.g", "}\n      }\n      let paramsEvent = {\n        ev"], "files": ["Grid.ets", "systemRouterB.ets", "GridItem.ets", "systemRouterA.ets", "Row.ets", "OhosRouterJsnuit.test.ets", "NavigatorJsunit.test.ets", "ohosRouterB.ets", "SystemRouterJsunit.test.ets", "Navigator.ets", "NavigatorCode.ets", "ohosRouterA.ets"], "is_white": " ", "desc": " "}]}