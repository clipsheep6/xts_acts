{"subsystem_ch": "\u7535\u6e90\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "powermgr", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.runninglock", "api": [{"api_class_name": "runningLock", "api_method_all": "declare namespace runningLock {\n    class RunningLock {\n        \n        lock(timeout: number): void;\n\n        \n        isUsed(): boolean;\n\n        \n        unlock(): void;\n    }\n\n    \n    export enum RunningLockType {\n        \n        BACKGROUND = 1,\n        \n        PROXIMITY_SCREEN_CONTROL\n    }\n\n    \n    function isRunningLockTypeSupported(type: RunningLockType, callback: AsyncCallback<boolean>): void;\n    function isRunningLockTypeSupported(type: RunningLockType): Promise<boolean>;\n    \n    function createRunningLock(name: string, type: RunningLockType, callback: AsyncCallback<RunningLock>): void;\n    function createRunningLock(name: string, type: RunningLockType): Promise<RunningLock>;\n}", "api_method_name": "runningLock", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 68, "since": 0, "api_used": "\u662f", "lines": ["on (done) {\n        runningLock.createRunningLock(\"", "nning_lock_test_1\", runningLock.RunningLockType.BAC", "      console.info('runningLockType = ' + runningLo", "nning_lock_test_3\", runningLock.RunningLockType.BAC", "lock_callback_test: runningLock is ' + runninglock)", "api_context'\nimport runningLock from '@ohos.running", "nning_lock_test_2\", runningLock.RunningLockType.BAC", "nning_lock_test_5\", runningLock.RunningLockType.BAC", "pe);\n        expect(runningLockType == 1).assertTru", "t runningLockType = runningLock.RunningLockType.PRO", "ingLock from '@ohos.runningLock';\nimport power from", "nning_lock_test_4\", runningLock.RunningLockType.BAC", "nningLockType = ' + runningLockType);\n        expec", " console.info('enum_runningLock_type_proximityscree", "ngLockTypeSupported(runningLock.RunningLockType.PRO", "on (done) {\n        runningLock.isRunningLockTypeSu", " console.info('enum_runningLock_type_background_tes", "t runningLockType = runningLock.RunningLockType.BAC", "on () {\n        let runningLockType = runningLock.R", "GROUND\n    it('enum_runningLock_type_background_tes", "pe);\n        expect(runningLockType == 2).assertTru", "ONTROL\n    it('enum_runningLock_type_proximityscree", "ngLockTypeSupported(runningLock.RunningLockType.BAC"], "files": ["power_manager_running_lock.test.js", "power_manager_running_lock_dev.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "runningLock", "api_method_name": "isRunningLockTypeSupported", "api_method_all": "function isRunningLockTypeSupported(type: RunningLockType, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["        runningLock.isRunningLockTypeSupported(runningLock.RunningLockType.BACKGROUND,", "    })\n    })\n    //isRunningLockTypeSupported(type: RunningLockType)  \u591a\u4f59\n    it('is_r", "        runningLock.isRunningLockTypeSupported(runningLock.RunningLockType.PROXIMITY_S", "        runningLock.isRunningLockTypeSupported(runningLock.RunningLockType.BACKGROUND)", "ess');\n    })\n    //isRunningLockTypeSupported(type: RunningLockType): Promise<boolean", "    })\n    })\n    //isRunningLockTypeSupported(type: RunningLockType, callback: AsyncC"], "files": ["power_manager_running_lock.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "runningLock", "api_method_name": "isRunningLockTypeSupported", "api_method_all": "function isRunningLockTypeSupported(type: RunningLockType): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "runningLock", "api_method_name": "createRunningLock", "api_method_all": "function createRunningLock(name: string, type: RunningLockType, callback: AsyncCallback<RunningLock>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["        runningLock.createRunningLock(\"running_lock_test_3\", runningLock.Runn", "        runningLock.createRunningLock(\"running_lock_test_1\", runningLock.Runn", "        runningLock.createRunningLock(\"running_lock_test_2\", runningLock.Runn", "**********\");\n    //createRunningLock(name: string, type: RunningLockType): P", "        runningLock.createRunningLock(\"running_lock_test_5\", runningLock.Runn", "        runningLock.createRunningLock(\"running_lock_test_4\", runningLock.Runn", "    })\n    })\n    //createRunningLock(name: string, type: RunningLockType, ca"], "files": ["power_manager_running_lock.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "runningLock", "api_method_name": "createRunningLock", "api_method_all": "function createRunningLock(name: string, type: RunningLockType): Promise<RunningLock>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RunningLock", "api_method_all": "class RunningLock {\n        \n        lock(timeout: number): void;\n\n        \n        isUsed(): boolean;\n\n        \n        unlock(): void;\n    }", "api_method_name": "RunningLock", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 60, "since": 7, "api_used": "\u662f", "lines": ["  runningLock.createRunningLock(\"running_lock_test_", "back: AsyncCallback<RunningLock>)\n    it('create_ru", "s');\n    })\n    //isRunningLockTypeSupported(type: ", "est_2\", runningLock.RunningLockType.BACKGROUND, (er", "est_1\", runningLock.RunningLockType.BACKGROUND)\n   ", "TypeSupported(type: RunningLockType): Promise<boole", "TypeSupported(type: RunningLockType, callback: Asyn", "name: string, type: RunningLockType): Promise<Runni", "pported(runningLock.RunningLockType.BACKGROUND)\n   ", "est_2\", runningLock.RunningLockType.BACKGROUND,\n   ", "gLockType): Promise<RunningLock>\n    it('create_run", "      runningLock.isRunningLockTypeSupported(runnin", "kType = runningLock.RunningLockType.BACKGROUND;\n   ", "kType = runningLock.RunningLockType.PROXIMITY_SCREE", "pported(runningLock.RunningLockType.BACKGROUND, (er", "  })\n    })\n    //isRunningLockTypeSupported(type: ", "est_5\", runningLock.RunningLockType.BACKGROUND)\n   ", "name: string, type: RunningLockType, callback: Asyn", "TypeSupported(type: RunningLockType)  \u591a\u4f59\n    it('is", "est_3\", runningLock.RunningLockType.BACKGROUND)\n   ", "\n    })\n    //createRunningLock(name: string, type:", "****\");\n    //createRunningLock(name: string, type:", "pported(runningLock.RunningLockType.PROXIMITY_SCREE", "est_4\", runningLock.RunningLockType.BACKGROUND)\n   "], "files": ["power_manager_running_lock.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RunningLock", "api_method_name": "lock", "api_method_all": "lock(timeout: number): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 176, "since": 7, "api_used": "\u662f", "lines": ["      expect(runninglock !== null).assertTru", "UND, (error, runninglock) => {\n            i", "  })\n    })\n    //unlock()\n    it('running_l", "onsole.log('running_lock_lock_test error: ' ", "        runninglock.lock(500);\n             ", "er)\n    it('running_lock_lock_test', 0, asyn", "'after lock running_lock_lock_test is used: ", "wer_manager_running_lock.test.js')\n", "gLock is ' + runninglock);\n                e", "  let used = runninglock.isUsed();\n         ", "log('create_running_lock_promise_test error:", "unningLock(\"running_lock_test_4\", runningLoc", "r lock running_lock_lock_test is used: ' + u", ".info('running_lock_lock_test is used: ' + u", "nfo('create_running_lock_callback_test: runn", "nsole.info('running_lock_isused_test used: '", "log('create_running_lock_callback_test: ' + ", "nfo('create_running_lock_callback_test succe", "nsole.info('running_lock_lock_test success')", "console.info('after lock running_lock_lock_t", ".info('running_lock_lock_test success');\n   ", "nsole.info('running_lock_isused_test success", "   it('running_lock_lock_test', 0, async fun", "console.info('after lock create_running_lock", "unningLock(\"running_lock_test_3\", runningLoc", "nfo('create_running_lock_promise_test succes", "lock create_running_lock_callback_test is us", "unningLock(\"running_lock_test_2\", runningLoc", " it('create_running_lock_callback_test', 0, ", "d()\n    it('running_lock_isused_test', 0, as", "nsole.info('running_lock_lock_test is used: ", " it('create_running_lock_promise_test', 0, a", "             runninglock.lock(500);\n        ", "e.log('running_lock_lock_test error: ' + err", "      used = runninglock.isUsed();\n         ", "    })\n    })\n    //lock(timeout: number)\n  ", "unningLock(\"running_lock_test_1\", runningLoc", "nfo('create_running_lock_callback_test is us", "onsole.log('running_lock_isused_test error: ", "       .then(runninglock => {\n              "], "files": ["List.test.js", "power_manager_running_lock.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RunningLock", "api_method_name": "isUsed", "api_method_all": "isUsed(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": [" used = runninglock.isUsed();\n                ", "    })\n    })\n    //isUsed()\n    it('running_l"], "files": ["power_manager_running_lock.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RunningLock", "api_method_name": "unlock", "api_method_all": "unlock(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["   it('running_lock_unlock_test', 0, async fun", "r lock running_lock_unlock_test is used: ' + u", "        runninglock.unlock();\n                ", "e.log('running_lock_unlock_test error: ' + err", "unlock running_lock_unlock_test is used: ' + u", ".info('running_lock_unlock_test success');\n   ", "    })\n    })\n    //unlock()\n    it('running_l", "console.info('after unlock running_lock_unlock", ".info('running_lock_unlock_test is used: ' + u"], "files": ["power_manager_running_lock.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RunningLockType", "api_method_all": "export enum RunningLockType {\n        \n        BACKGROUND = 1,\n        \n        PROXIMITY_SCREEN_CONTROL\n    }", "api_method_name": "RunningLockType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 42, "since": 7, "api_used": "\u662f", "lines": ["est_3\", runningLock.RunningLockType.BACKGROUND)\n       ", "est_4\", runningLock.RunningLockType.BACKGROUND)\n       ", "est_2\", runningLock.RunningLockType.BACKGROUND, (error,", "name: string, type: RunningLockType): Promise<RunningLo", "pported(runningLock.RunningLockType.PROXIMITY_SCREEN_CO", "TypeSupported(type: RunningLockType)  \u591a\u4f59\n    it('is_run", "est_5\", runningLock.RunningLockType.BACKGROUND)\n       ", "TypeSupported(type: RunningLockType, callback: AsyncCal", "name: string, type: RunningLockType, callback: AsyncCal", "est_2\", runningLock.RunningLockType.BACKGROUND,\n       ", "pported(runningLock.RunningLockType.BACKGROUND)\n       ", "est_1\", runningLock.RunningLockType.BACKGROUND)\n       ", "TypeSupported(type: RunningLockType): Promise<boolean>\n", "kType = runningLock.RunningLockType.BACKGROUND;\n       ", "kType = runningLock.RunningLockType.PROXIMITY_SCREEN_CO", "s');\n    })\n    //isRunningLockTypeSupported(type: Runn", "pported(runningLock.RunningLockType.BACKGROUND, (error,", "      runningLock.isRunningLockTypeSupported(runningLoc", "  })\n    })\n    //isRunningLockTypeSupported(type: Runn"], "files": ["power_manager_running_lock.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RunningLockType", "api_method_name": "BACKGROUND", "api_method_all": "BACKGROUND = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 22, "since": 0, "api_used": "\u662f", "lines": ["ock.RunningLockType.BACKGROUND;\n        console.in", "ock.RunningLockType.BACKGROUND,\n            (error", "ted_callback_test_3 BACKGROUND supported is ' + su", "rted_promise_test_2 BACKGROUND supported is ' + su", "ock.RunningLockType.BACKGROUND, (error, runningloc", "ock.RunningLockType.BACKGROUND)\n            .then(", "  //Runninglock\u9501\u7684\u7c7b\u578b\u4e3aBACKGROUND\n    it('enum_runnin", "ock.RunningLockType.BACKGROUND, (error, supported)"], "files": ["power_manager_running_lock.test.js"], "is_white": " ", "desc": " "}]}