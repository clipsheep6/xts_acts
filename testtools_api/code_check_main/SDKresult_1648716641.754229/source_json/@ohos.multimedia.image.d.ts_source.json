{"subsystem_ch": "\u5a92\u4f53\u5b50\u7cfb\u7edf", "subsystem_en": "multimedia", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.multimedia.image", "api": [{"api_class_name": "image", "api_method_all": "declare namespace image {\r\n\r\n  \r\n  enum PixelMapFormat {\r\n    \r\n    UNKNOWN = 0,\r\n\r\n    \r\n    RGB_565 = 2,\r\n\r\n    \r\n    RGBA_8888 = 3,\r\n  }\r\n\r\n  \r\n  interface Size {\r\n    \r\n    height: number;\r\n\r\n    \r\n    width: number;\r\n  }\r\n\r\n  \r\n  enum PropertyKey {\r\n    \r\n    BITS_PER_SAMPLE = \"BitsPerSample\",\r\n\r\n    \r\n    ORIENTATION = \"Orientation\",\r\n\r\n    \r\n    IMAGE_LENGTH = \"ImageLength\",\r\n\r\n    \r\n    IMAGE_WIDTH = \"ImageWidth\",\r\n\r\n    \r\n    GPS_LATITUDE = \"GPSLatitude\",\r\n\r\n    \r\n    GPS_LONGITUDE = \"GPSLongitude\",\r\n\r\n    \r\n    GPS_LATITUDE_REF = \"GPSLatitudeRef\",\r\n\r\n    \r\n    GPS_LONGITUDE_REF = \"GPSLongitudeRef\"\r\n  }\r\n\r\n  \r\n   enum ImageFormat {\r\n    \r\n    YCBCR_422_SP = 1000,\r\n\r\n    \r\n    JPEG = 2000\r\n  }\r\n\r\n  \r\n  enum ComponentType {\r\n    \r\n    YUV_Y = 1,\r\n\r\n    \r\n    YUV_U = 2,\r\n\r\n    \r\n    YUV_V = 3,\r\n\r\n    \r\n    JPEG = 4, \r\n  }\r\n\r\n  \r\n  interface Region {\r\n    \r\n    size: Size;\r\n\r\n    \r\n    x: number;\r\n\r\n    \r\n    y: number;\r\n  }\r\n\r\n  \r\n  interface PositionArea {\r\n    \r\n    pixels: ArrayBuffer;\r\n\r\n    \r\n    offset: number;\r\n\r\n    \r\n    stride: number;\r\n\r\n    \r\n    region: Region;\r\n  }\r\n\r\n  \r\n  interface ImageInfo {\r\n    \r\n    size: Size;\r\n  }\r\n\r\n  \r\n  interface PackingOption {\r\n    \r\n    format: string;\r\n\r\n    \r\n    quality: number;\r\n  }\r\n\r\n  \r\n  interface GetImagePropertyOptions {\r\n    \r\n    index?: number;\r\n\r\n    \r\n    defaultValue?: string;\r\n  }\r\n\r\n  \r\n  interface DecodingOptions {\r\n    \r\n    index?: number;\r\n\r\n    \r\n    sampleSize?: number;\r\n\r\n    \r\n    rotate?: number;\r\n\r\n    \r\n    editable?: boolean;\r\n\r\n    \r\n    desiredSize?: Size;\r\n\r\n    \r\n    desiredRegion?: Region;\r\n\r\n    \r\n    desiredPixelFormat?: PixelMapFormat;\r\n  }\r\n\r\n  \r\n   interface Component {\r\n    \r\n    readonly componentType: ComponentType;\r\n\r\n    \r\n    readonly rowStride: number;\r\n\r\n    \r\n    readonly pixelStride: number;\r\n\r\n    \r\n    readonly byteBuffer: ArrayBuffer;\r\n  }\r\n\r\n  \r\n  interface InitializationOptions {\r\n    \r\n    size: Size;\r\n\r\n    \r\n    pixelFormat?: PixelMapFormat;\r\n\r\n    \r\n    editable?: boolean;\r\n  }\r\n\r\n  \r\n  function createPixelMap(colors: ArrayBuffer, options: InitializationOptions, callback: AsyncCallback<PixelMap>): void;\r\n\r\n  \r\n  function createPixelMap(colors: ArrayBuffer, options: InitializationOptions): Promise<PixelMap>;\r\n\r\n  \r\n  function createImageSource(uri: string): ImageSource;\r\n\r\n  \r\n  function createImageSource(fd: number): ImageSource;\r\n\r\n  \r\n  function createImagePacker(): ImagePacker;\r\n\r\n  \r\n  function createImageReceiver(width: number, height: number, format: number, capacity: number): ImageReceiver;\r\n\r\n  \r\n  interface PixelMap {\r\n    \r\n    readonly isEditable: boolean;\r\n\r\n    \r\n    readPixelsToBuffer(dst: ArrayBuffer): Promise<void>;\r\n\r\n    \r\n    readPixelsToBuffer(dst: ArrayBuffer, callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    readPixels(area: PositionArea): Promise<void>;\r\n\r\n    \r\n    readPixels(area: PositionArea, callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    writePixels(area: PositionArea): Promise<void>;\r\n\r\n    \r\n    writePixels(area: PositionArea, callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    writeBufferToPixels(src: ArrayBuffer): Promise<void>;\r\n\r\n    \r\n    writeBufferToPixels(src: ArrayBuffer, callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    getImageInfo(): Promise<ImageInfo>;\r\n\r\n    \r\n    getImageInfo(callback: AsyncCallback<ImageInfo>): void;\r\n\r\n    \r\n    getBytesNumberPerRow(): number;\r\n\r\n    \r\n    getPixelBytesNumber(): number;\r\n\r\n    \r\n    release(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(): Promise<void>;\r\n  }\r\n\r\n  \r\n  interface ImageSource {\r\n    \r\n    getImageInfo(index: number, callback: AsyncCallback<ImageInfo>): void;\r\n\r\n    \r\n    getImageInfo(callback: AsyncCallback<ImageInfo>): void;\r\n\r\n    \r\n    getImageInfo(index?: number): Promise<ImageInfo>;\r\n\r\n    \r\n    createPixelMap(options?: DecodingOptions): Promise<PixelMap>;\r\n    \r\n    \r\n    createPixelMap(callback: AsyncCallback<PixelMap>): void;\r\n\r\n    \r\n    createPixelMap(options: DecodingOptions, callback: AsyncCallback<PixelMap>): void;\r\n\r\n    \r\n    getImageProperty(key:string, options?: GetImagePropertyOptions): Promise<string>;\r\n\r\n    \r\n    getImageProperty(key:string, callback: AsyncCallback<string>): void;\r\n\t\r\n    \r\n    getImageProperty(key:string, options: GetImagePropertyOptions, callback: AsyncCallback<string>): void;\r\n\r\n    \r\n    release(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(): Promise<void>;\r\n\r\n    \r\n    readonly supportedFormats: Array<string>;\r\n  }\r\n\r\n  \r\n  interface ImagePacker {\r\n    \r\n    packing(source: ImageSource, option: PackingOption, callback: AsyncCallback<ArrayBuffer>): void;\r\n\r\n    \r\n    packing(source: ImageSource, option: PackingOption): Promise<ArrayBuffer>;\r\n\r\n    \r\n     packing(source: PixelMap, option: PackingOption, callback: AsyncCallback<ArrayBuffer>): void;\r\n\r\n     \r\n     packing(source: PixelMap, option: PackingOption): Promise<ArrayBuffer>;\r\n\r\n    \r\n    release(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(): Promise<void>;\r\n\r\n    \r\n    readonly supportedFormats: Array<string>;\r\n  }\r\n\r\n  \r\n  interface Image {\r\n    \r\n    clipRect: Region;\r\n\r\n    \r\n    readonly size: Size;\r\n\r\n    \r\n    readonly format: number;\r\n\r\n    \r\n    getComponent(componentType: ComponentType, callback: AsyncCallback<Component>): void;\r\n\r\n    \r\n    getComponent(componentType: ComponentType): Promise<Component>;\r\n\r\n    \r\n    release(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(): Promise<void>;\r\n  }\r\n\r\n  \r\n  interface ImageReceiver {\r\n    \r\n    readonly size: Size;\r\n\r\n    \r\n    readonly capacity: number;\r\n\r\n    \r\n    readonly format: ImageFormat;\r\n\r\n    \r\n    getReceivingSurfaceId(callback: AsyncCallback<string>): void;\r\n\r\n    \r\n    getReceivingSurfaceId(): Promise<string>;\r\n\r\n    \r\n    readLatestImage(callback: AsyncCallback<Image>): void;\r\n\r\n    \r\n    readLatestImage(): Promise<Image>;\r\n\r\n    \r\n    readNextImage(callback: AsyncCallback<Image>): void;\r\n\r\n    \r\n    readNextImage(): Promise<Image>;\r\n\r\n    \r\n    on(type: 'imageArrival', callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(): Promise<void>;\r\n  }\r\n}", "api_method_name": "image", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 1441, "since": 0, "api_used": "\u662f", "lines": ["", "idth: 6 } }\n        image.createPixelMap(Colo", "s/account_0/appdata/image/test.gif';\n    var ", "dth: 8 } }\n         image.createPixelMap(Colo", "s/account_0/appdata/image/test_exif.jpg';\n   ", "m '@ohos.multimedia.image';\nimport fileio fro", "s/account_0/appdata/image/moving_test.gif';\n ", "s/account_0/appdata/image/test.png';\n    var ", "m '@ohos.multimedia.image'\nimport fileio from", "dth: 3 } }\n         image.createPixelMap(Colo", "idth: 8 } }\n        image.createPixelMap(colo", "s/account_0/appdata/image/test.tiff';\n    bef", "s/account_0/appdata/image/test.jpg';\n    var ", "s/account_0/appdata/image/test.bmp';\n    var ", "idth: 6 } }\n        image.createPixelMap(colo", "dia.camera';\nimport image from '@ohos.multime", "dth: -1 } }\n        image.createPixelMap(Colo", "\n    var receiver = image.createImageReceiver", "idth: 8 } }\n        image.createPixelMap(Colo"], "files": ["List.test.js", "fileAssetCallBack2.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "CameraJSUnitEnum.test.ets", "fetchFileResultCallBack.test.js", "favtrashTestPromise.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "image.test.js", "filekeyTestCallBack.test.js", "favtrashTestCallBack.test.js", "favoriteTestCallBack.test.js", "distributedPromise.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "distributed.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "distributedCallback.test.js", "albumTestCallBack.test.js", "CameraJSUnitPhotoAsync.test.ets", "fileTestPromise.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "image", "api_method_name": "createPixelMap", "api_method_all": "function createPixelMap(colors: ArrayBuffer, options: InitializationOptions, callback: AsyncCallback<PixelMap>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 173, "since": 8, "api_used": "\u662f", "lines": ["  * @tc.name      : createPixelMap(decodingOptions:index -1})-jpg\n     * @", "console.log('TC_027 createPixelMap failed error: ' + error);\n            e", "sole.info('TC_021-5 createPixelMap success');\n                done(); \n   ", "sole.info('TC_020-1 createPixelMap failed');\n                expect(false)", "idth;\n        image.createPixelMap(color, opts, (err,pixelmap) => {\n      ", "  * @tc.name      : createPixelMap(decodingOptions: index 1})-jpg\n     * @", "  * @tc.name      : createPixelMap(decodingOptions:unsupported pixelformat", "  * @tc.name      : createPixelMap(decodingOptions)-pixelformat:RGBA_8888-", "  * @tc.name      : createPixelMap(decodingOptions:rotate -10})-jpg\n     *", "6 } }\n        image.createPixelMap(color, opts, (err, pixelmap) => {\n     ", "6 } }\n        image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "sole.info('TC_021-4 createPixelMap success');\n                done(); \n   ", "sole.info('TC_022-1 createPixelMap failed');\n                expect(false)", "8 } }\n        image.createPixelMap(color, opts, (err,pixelmap) => { \n     ", "6 } }\n        image.createPixelMap(color, opts, (err,pixelmap) => {\n      ", "onsole.info('TC_023 createPixelMap failed');\n                    expect(fa", "sole.info('TC_027-1 createPixelMap failed');\n                expect(false)", "     imageSourceApi.createPixelMap(decodingOptions,(err,pixelmap) => {\n   ", "  * @tc.name      : createPixelMap(decodingOptions)-pixelformat:unknown-jp", "sole.info('TC_020-2 createPixelMap failed');\n                expect(false)", "onsole.info('TC_027 createPixelMap failed');\n                expect(false)", "1 } }\n        image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "ight;\n        image.createPixelMap(color, opts,(err,pixelmap) => {\n       ", " } }\n         image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "  * @tc.name      : createPixelMap(decodingOptions)-pixelformat:RGB_565-jp", "8 } }\n        image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "onsole.info('TC_021 createPixelMap failed');\n                    expect(fa", "  * @tc.name      : createPixelMap(decodingOptions:sampleSize -1})-jpg\n   ", "onsole.info('TC_022 createPixelMap failed');\n                    expect(fa", "     imageSourceApi.createPixelMap(decodingOptions, (err, pixelmap) => {\n ", "onsole.info('TC_020 createPixelMap failed');\n                    expect(fa", "  * @tc.name      : createPixelMap(decodingOptions:editable false})-jpg\n  ", "onsole.info('TC_024 createPixelMap failed');\n                expect(false)"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "image", "api_method_name": "createPixelMap", "api_method_all": "function createPixelMap(colors: ArrayBuffer, options: InitializationOptions): Promise<PixelMap>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["8 } }\n        image.createPixelMap(color, opts)\n        .then( pixelmap =>", "     imageSourceApi.createPixelMap().then(pixelmap => {\n                co", "6 } }\n        image.createPixelMap(color, opts)\n            .then( pixelma", " 6 }}\n        image.createPixelMap(color, opts)\n            .then( pixelma", "6 } }\n        image.createPixelMap(color, opts).then(pixelmap => {\n       ", "6 } }\n        image.createPixelMap(Color, opts)\n            .then( pixelma", "8 } }\n        image.createPixelMap(Color, opts)\n            .then( pixelma", "6 } }\n        image.createPixelMap(color, opts).then( pixelmap => {\n      "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "image", "api_method_name": "createImageSource", "api_method_all": "function createImageSource(uri: string): ImageSource;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 158, "since": 6, "api_used": "\u662f", "lines": ["geSourceApi = image.createImageSource(data);\n        expe", "geSourceApi = image.createImageSource(fdBmp);\n        exp", "geSourceApi = image.createImageSource(fdBmp);\n        if ", "  * @tc.name      : createImageSource(uri)-gif\n     * @tc", "*                 2.createImageSource\n     *             ", "geSourceApi = image.createImageSource(fdGif);\n        exp", "geSourceApi = image.createImageSource('file:///data/local", "geSourceApi = image.createImageSource(data);\n        if (", "geSourceApi = image.createImageSource(fdPng);\n        if ", "             2.call createImageSource(uri)\n     *        ", "geSourceApi = image.createImageSource(fdJpg);\n        if ", "geSourceApi = image.createImageSource(-2);\n        expect", "geSourceApi = image.createImageSource(fdGif);\n        if ", "geSourceApi = image.createImageSource(fdPng);\n        exp", "  * @tc.name      : createImageSource(fd)\n     * @tc.desc", "  * @tc.name      : createImageSource(fd) fd<0\n     * @tc", "geSourceApi = image.createImageSource('file:///multimedia", ".desc      : 1.call createImageSource\n     *             ", "  * @tc.name      : createImageSource(uri)-png\n     * @tc", ".desc      : 1.call createImageSource(uri)\n     *        ", "  * @tc.name      : createImageSource(uri)-jpg\n     * @tc", "  * @tc.name      : createImageSource(data) buffer:0\n    ", "  * @tc.name      : createImageSource(uri)-bmp\n     * @tc", "  * @tc.name      : createImageSource(data)\n     * @tc.de", "  * @tc.name      : createImageSource(uri)-wrong uri\n    ", "  * @tc.name      : createImageSource(uri)-wrong suffix f", "geSourceApi = image.createImageSource(fdJpg);\n        exp"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "image", "api_method_name": "createImageSource", "api_method_all": "function createImageSource(fd: number): ImageSource;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 158, "since": 6, "api_used": "\u662f", "lines": ["geSourceApi = image.createImageSource(data);\n        expe", "geSourceApi = image.createImageSource(fdBmp);\n        exp", "geSourceApi = image.createImageSource(fdBmp);\n        if ", "  * @tc.name      : createImageSource(uri)-gif\n     * @tc", "*                 2.createImageSource\n     *             ", "geSourceApi = image.createImageSource(fdGif);\n        exp", "geSourceApi = image.createImageSource('file:///data/local", "geSourceApi = image.createImageSource(data);\n        if (", "geSourceApi = image.createImageSource(fdPng);\n        if ", "             2.call createImageSource(uri)\n     *        ", "geSourceApi = image.createImageSource(fdJpg);\n        if ", "geSourceApi = image.createImageSource(-2);\n        expect", "geSourceApi = image.createImageSource(fdGif);\n        if ", "geSourceApi = image.createImageSource(fdPng);\n        exp", "  * @tc.name      : createImageSource(fd)\n     * @tc.desc", "  * @tc.name      : createImageSource(fd) fd<0\n     * @tc", "geSourceApi = image.createImageSource('file:///multimedia", ".desc      : 1.call createImageSource\n     *             ", "  * @tc.name      : createImageSource(uri)-png\n     * @tc", ".desc      : 1.call createImageSource(uri)\n     *        ", "  * @tc.name      : createImageSource(uri)-jpg\n     * @tc", "  * @tc.name      : createImageSource(data) buffer:0\n    ", "  * @tc.name      : createImageSource(uri)-bmp\n     * @tc", "  * @tc.name      : createImageSource(data)\n     * @tc.de", "  * @tc.name      : createImageSource(uri)-wrong uri\n    ", "  * @tc.name      : createImageSource(uri)-wrong suffix f", "geSourceApi = image.createImageSource(fdJpg);\n        exp"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "image", "api_method_name": "createImagePacker", "api_method_all": "function createImagePacker(): ImagePacker;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 14, "since": 6, "api_used": "\u662f", "lines": ["gePackerApi = image.createImagePacker();\n            if (", "  * @tc.name      : createImagePacker\n     * @tc.desc    ", "gePackerApi = image.createImagePacker();\n        if (imag"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "image", "api_method_name": "createImageReceiver", "api_method_all": "function createImageReceiver(width: number, height: number, format: number, capacity: number): ImageReceiver;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 8, "since": 9, "api_used": "\u662f", "lines": ["ar receiver = image.createImageReceiver(640, 480, 4, 8)\n   "], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMapFormat", "api_method_all": "enum PixelMapFormat {\r\n    \r\n    UNKNOWN = 0,\r\n\r\n    \r\n    RGB_565 = 2,\r\n\r\n    \r\n    RGBA_8888 = 3,\r\n  }", "api_method_name": "PixelMapFormat", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMapFormat", "api_method_name": "UNKNOWN", "api_method_all": "UNKNOWN = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 44, "since": 7, "api_used": "\u662f", "lines": ["ediaErrorCode.MSERR_UNKNOWN).assertEqual(6);\n  ", "ger Mode Changed  : UNKNOWN '+ringerMode);\n    ", "[1].DeviceType.TYPE_UNKNOWN).assertEqual(0);\n  ", "mUsage.STREAM_USAGE_UNKNOWN,\n        rendererFl", "er-isStreamActive - UNKNOWN - NOTIFICATION_RING", "Active - RINGTONE - UNKNOWN\n        * @tc.desc ", "er-isStreamActive - UNKNOWN - MEDIA\n        * @", "TypeName = 'ERROR : UNKNOWN :'+value.deviceType", "ve - SONIFICATION - UNKNOWN\n        * @tc.desc ", "ntType.CONTENT_TYPE_UNKNOWN,\n        usage: aud", "ntType.CONTENT_TYPE_UNKNOWN,\n    //     usage: ", "ve - SONIFICATION - UNKNOWN\n        * @tc.size ", "er-isStreamActive - UNKNOWN - VOICE_COMMUNICATI", "RoleName = 'ERROR : UNKNOWN : '+value.deviceRol", "Active - RINGTONE - UNKNOWN\n        * @tc.size ", "er-isStreamActive - UNKNOWN - VOICE_ASSISTANT\n "], "files": ["AudioRenderer.test.js", "VideoPlayerEnumTest.test.js", "getAllPeersDeviceTestCallback.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMapFormat", "api_method_name": "RGB_565", "api_method_all": "RGB_565 = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["ptions)-pixelformat:RGB_565-jpg\n     * @tc.desc", "ptions)-pixelformat:RGB_565-bmp\n     * @tc.desc", "ptions)-pixelformat:RGB_565-png\n     * @tc.desc"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMapFormat", "api_method_name": "RGBA_8888", "api_method_all": "RGBA_8888 = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["ptions)-pixelformat:RGBA_8888-jpg\n     * @tc.desc", "ptions)-pixelformat:RGBA_8888-bmp\n     * @tc.desc", "ptions)-pixelformat:RGBA_8888-png\n     * @tc.desc", "ptions)-pixelformat:RGBA_8888-gif\n     * @tc.desc"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_all": "interface Size {\r\n    \r\n    height: number;\r\n\r\n    \r\n    width: number;\r\n  }", "api_method_name": "Size", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 586, "since": 6, "api_used": "\u662f", "lines": ["t audioRen.getBufferSize();\n     console.inf", "t audioCap.getBufferSize();\n        console.", "Size);\n        totalSize = totalSize-44;\n   ", "  }\n\n     var bufferSize;\n     await audioRe", "fer size: ' + bufferSize);\n\n        var fd =", "\n\n        var bufferSize = await audioCap.ge", "   totalSize = totalSize-44;\n        console", "\n             bufferSize=data;\n         }\n  ", "RenderLog: getBufferSize :ERROR : '+err.mess", "   totalSize = totalSize-44;\n     let rlen =", "w ArrayBuffer(bufferSize);\n         rlen += ", "audioCap.read(bufferSize, true);\n           ", "lSize size: ' +totalSize);\n        totalSize", "RenderLog: getBufferSize :SUCCESS '+data);\n ", "talSize);\n     totalSize = totalSize-44;\n   ", "\n\n        var bufferSize;\n        await audi", "ing header: ' +totalSize);\n     await sleep(", "w ArrayBuffer(bufferSize);\n            rlen ", " while (rlen < totalSize) {\n            let ", "e);\n\n     var bufferSize = await audioRen.ge", "fer size: ' + bufferSize);\n\n     let ss = fi", " while (rlen < totalSize) {\n         let buf", "   if (rlen > (totalSize/2)){\n              ", "lSize size: ' +totalSize);\n     totalSize = ", "t audioRen.getBufferSize((err,data)=> {\n    ", "enderLog: File totalSize size: ' +totalSize)", "t audioRen.getBufferSize().then(async functi", ";\n            bufferSize=data;\n        }).ca", "der);\n     let totalSize = fileio.statSync(f", ");\n        let totalSize = fileio.statSync(f", "ar waitTime = (totalSize/88200);\n     var wa", "ing header: ' +totalSize);\n        let rlen "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "image.test.js", "CameraJSUnitVideoPromise.test.ets", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoRecorderAPICallbackTest.test.js", "SR000GHLLV.test.js", "VideoRecorderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitVideoAsync.test.ets", "VideoEncoderSoftwareFuncPromiseTest.test.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_name": "height", "api_method_all": "height: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 771, "since": 6, "api_used": "\u662f", "lines": ["rayPromise: width * height - \" +sizeArrayPromi", "th + \" * \" +data[i].height);\n                 ", " sizeArray: width * height - \" +data[i].width ", "h('640px')\n        .height('480px')\n    }\n  }\n", "sizeArrayPromise[i].height);\n            }\n   "], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_name": "width", "api_method_all": "width: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 773, "since": 6, "api_used": "\u662f", "lines": ["height - \" +data[i].width + \" * \" +data[i].he", "G_TC_019 sizeArray: width * height - \" +data[", "6 sizeArrayPromise: width * height - \" +sizeA", "P_TC_087 sizeArray: width * height - \" +data[", "G_TC_055 sizeArray: width * height - \" +data[", " size0ArrayPromise: width * height - \" +sizeA", "sizeArrayPromise[i].width + \" * \" + sizeArray", "G_TC_029 sizeArray: width * height - \" +data[", "P_TC_015 sizeArray: width * height - \" +data[", "P_TC_051 sizeArray: width * height - \" +data[", "P_TC_025 sizeArray: width * height - \" +data[", "G_TC_065 sizeArray: width * height - \" +data[", "P_TC_035 sizeArray: width * height - \" +data[", "P_TC_061 sizeArray: width * height - \" +data[", "G_TC_075 sizeArray: width * height - \" +data[", "P_TC_071 sizeArray: width * height - \" +data[", "0 sizeArrayPromise: width * height - \" +sizeA", "G_TC_039 sizeArray: width * height - \" +data[", "2 sizeArrayPromise: width * height - \" +sizeA", "        })\n        .width('640px')\n        .h"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PropertyKey", "api_method_all": "enum PropertyKey {\r\n    \r\n    BITS_PER_SAMPLE = \"BitsPerSample\",\r\n\r\n    \r\n    ORIENTATION = \"Orientation\",\r\n\r\n    \r\n    IMAGE_LENGTH = \"ImageLength\",\r\n\r\n    \r\n    IMAGE_WIDTH = \"ImageWidth\",\r\n\r\n    \r\n    GPS_LATITUDE = \"GPSLatitude\",\r\n\r\n    \r\n    GPS_LONGITUDE = \"GPSLongitude\",\r\n\r\n    \r\n    GPS_LATITUDE_REF = \"GPSLatitudeRef\",\r\n\r\n    \r\n    GPS_LONGITUDE_REF = \"GPSLongitudeRef\"\r\n  }", "api_method_name": "PropertyKey", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PropertyKey", "api_method_name": "BITS_PER_SAMPLE", "api_method_all": "BITS_PER_SAMPLE = \"BitsPerSample\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PropertyKey", "api_method_name": "ORIENTATION", "api_method_all": "ORIENTATION = \"Orientation\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [",\n    orientation: 'ORIENTATION',\n    albumId: 'ALB"], "files": ["filekeyTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PropertyKey", "api_method_name": "IMAGE_LENGTH", "api_method_all": "IMAGE_LENGTH = \"ImageLength\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PropertyKey", "api_method_name": "IMAGE_WIDTH", "api_method_all": "IMAGE_WIDTH = \"ImageWidth\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PropertyKey", "api_method_name": "GPS_LATITUDE", "api_method_all": "GPS_LATITUDE = \"GPSLatitude\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PropertyKey", "api_method_name": "GPS_LONGITUDE", "api_method_all": "GPS_LONGITUDE = \"GPSLongitude\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PropertyKey", "api_method_name": "GPS_LATITUDE_REF", "api_method_all": "GPS_LATITUDE_REF = \"GPSLatitudeRef\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PropertyKey", "api_method_name": "GPS_LONGITUDE_REF", "api_method_all": "GPS_LONGITUDE_REF = \"GPSLongitudeRef\"", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageFormat", "api_method_all": "enum ImageFormat {\r\n    \r\n    YCBCR_422_SP = 1000,\r\n\r\n    \r\n    JPEG = 2000\r\n  }", "api_method_name": "ImageFormat", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageFormat", "api_method_name": "YCBCR_422_SP", "api_method_all": "YCBCR_422_SP = 1000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageFormat", "api_method_name": "JPEG", "api_method_all": "JPEG = 2000", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 486, "since": 9, "api_used": "\u662f", "lines": ["SIZES_CAMERA_FORMAT_JPEG_TC_019 sizeArray: w", "SIZES_CAMERA_FORMAT_JPEG_TC_019 ends here\");", "SIZES_CAMERA_FORMAT_JPEG_TC_029-------------", "SIZES_CAMERA_FORMAT_JPEG_TC_019-------------", "SIZES_CAMERA_FORMAT_JPEG_TC_019', 0, async f", "SIZES_CAMERA_FORMAT_JPEG_TC_019 success\");\n ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030-----", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020 ends", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030', 0,", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020 PASS", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030 size", "SIZES_CAMERA_FORMAT_JPEG_TC_019\n      * @tc.", "SIZES_CAMERA_FORMAT_JPEG_TC_039 FAILED: \" + ", "SIZES_CAMERA_FORMAT_JPEG_TC_039\n      * @tc.", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020\n    ", "SIZES_CAMERA_FORMAT_JPEG_TC_019 data is not ", "SIZES_CAMERA_FORMAT_JPEG_TC_039-------------", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020: \");", "SIZES_CAMERA_FORMAT_JPEG_TC_029 ends here\");", "SIZES_CAMERA_FORMAT_JPEG_TC_039 data is not ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030 ends", "SIZES_CAMERA_FORMAT_JPEG_TC_029 sizeArray: w", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030: \");", "SIZES_CAMERA_FORMAT_JPEG_TC_029 FAILED: \" + ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020 FAIL", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030 FAIL", "SIZES_CAMERA_FORMAT_JPEG_TC_039 PASSED\");\n  ", "SIZES_CAMERA_FORMAT_JPEG_TC_029 success\");\n ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020', 0,", "SIZES_CAMERA_FORMAT_JPEG_TC_019 PASSED\");\n  ", "SIZES_CAMERA_FORMAT_JPEG_TC_039 success\");\n ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020-----", "SIZES_CAMERA_FORMAT_JPEG_TC_029\n      * @tc.", "SIZES_CAMERA_FORMAT_JPEG_TC_019 FAILED: \" + ", "ormat.CAMERA_FORMAT_JPEG);\n        console.i", "SIZES_CAMERA_FORMAT_JPEG_TC_029 data is not ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030 PASS", "SIZES_CAMERA_FORMAT_JPEG_TC_039', 0, async f", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020 size", "SIZES_CAMERA_FORMAT_JPEG_TC_039 sizeArray: w", "SIZES_CAMERA_FORMAT_JPEG_TC_029 PASSED\");\n  ", "SIZES_CAMERA_FORMAT_JPEG_TC_039 ends here\");", "SIZES_CAMERA_FORMAT_JPEG_TC_029', 0, async f", "ormat.CAMERA_FORMAT_JPEG, async (err, data) ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030\n    "], "files": ["CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ComponentType", "api_method_all": "enum ComponentType {\r\n    \r\n    YUV_Y = 1,\r\n\r\n    \r\n    YUV_U = 2,\r\n\r\n    \r\n    YUV_V = 3,\r\n\r\n    \r\n    JPEG = 4, \r\n  }", "api_method_name": "ComponentType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ComponentType", "api_method_name": "YUV_Y", "api_method_all": "YUV_Y = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ComponentType", "api_method_name": "YUV_U", "api_method_all": "YUV_U = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ComponentType", "api_method_name": "YUV_V", "api_method_all": "YUV_V = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ComponentType", "api_method_name": "JPEG", "api_method_all": "JPEG = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 486, "since": 9, "api_used": "\u662f", "lines": ["SIZES_CAMERA_FORMAT_JPEG_TC_019 sizeArray: w", "SIZES_CAMERA_FORMAT_JPEG_TC_019 ends here\");", "SIZES_CAMERA_FORMAT_JPEG_TC_029-------------", "SIZES_CAMERA_FORMAT_JPEG_TC_019-------------", "SIZES_CAMERA_FORMAT_JPEG_TC_019', 0, async f", "SIZES_CAMERA_FORMAT_JPEG_TC_019 success\");\n ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030-----", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020 ends", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030', 0,", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020 PASS", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030 size", "SIZES_CAMERA_FORMAT_JPEG_TC_019\n      * @tc.", "SIZES_CAMERA_FORMAT_JPEG_TC_039 FAILED: \" + ", "SIZES_CAMERA_FORMAT_JPEG_TC_039\n      * @tc.", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020\n    ", "SIZES_CAMERA_FORMAT_JPEG_TC_019 data is not ", "SIZES_CAMERA_FORMAT_JPEG_TC_039-------------", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020: \");", "SIZES_CAMERA_FORMAT_JPEG_TC_029 ends here\");", "SIZES_CAMERA_FORMAT_JPEG_TC_039 data is not ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030 ends", "SIZES_CAMERA_FORMAT_JPEG_TC_029 sizeArray: w", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030: \");", "SIZES_CAMERA_FORMAT_JPEG_TC_029 FAILED: \" + ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020 FAIL", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030 FAIL", "SIZES_CAMERA_FORMAT_JPEG_TC_039 PASSED\");\n  ", "SIZES_CAMERA_FORMAT_JPEG_TC_029 success\");\n ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020', 0,", "SIZES_CAMERA_FORMAT_JPEG_TC_019 PASSED\");\n  ", "SIZES_CAMERA_FORMAT_JPEG_TC_039 success\");\n ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020-----", "SIZES_CAMERA_FORMAT_JPEG_TC_029\n      * @tc.", "SIZES_CAMERA_FORMAT_JPEG_TC_019 FAILED: \" + ", "ormat.CAMERA_FORMAT_JPEG);\n        console.i", "SIZES_CAMERA_FORMAT_JPEG_TC_029 data is not ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030 PASS", "SIZES_CAMERA_FORMAT_JPEG_TC_039', 0, async f", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_020 size", "SIZES_CAMERA_FORMAT_JPEG_TC_039 sizeArray: w", "SIZES_CAMERA_FORMAT_JPEG_TC_029 PASSED\");\n  ", "SIZES_CAMERA_FORMAT_JPEG_TC_039 ends here\");", "SIZES_CAMERA_FORMAT_JPEG_TC_029', 0, async f", "ormat.CAMERA_FORMAT_JPEG, async (err, data) ", "SIZES_CAMERA_FORMAT_JPEG_PROMISE_TC_030\n    "], "files": ["CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Region", "api_method_all": "interface Region {\r\n    \r\n    size: Size;\r\n\r\n    \r\n    x: number;\r\n\r\n    \r\n    y: number;\r\n  }", "api_method_name": "Region", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 62, "since": 8, "api_used": "\u662f", "lines": ["odingOptions:desiredRegion>imagesize)-jpg\n    ", "odingOptions:desiredRegion>imagesize)-bmp\n    ", "             desiredRegion: { size: { height: ", "odingOptions:desiredRegion>imagesize)-gif\n    "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Region", "api_method_name": "size", "api_method_all": "size: Size", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3487, "since": 7, "api_used": "\u662f", "lines": ["- ENUM\n       * @tc.size      : MEDIUM\n     ", "workRenderLog: File size : Removing header: ", "Log: File totalSize size: ' +totalSize);\n   ", " ENAME\n       * @tc.size      : MEDIUM\n     ", "5\n            * @tc.size      : MEDIUM\n     ", "UM\n           * @tc.size      : MEDIUM\n     ", "ME\n           * @tc.size      : MEDIUM\n     ", "              * @tc.size      : MEDIUM\n     ", "eworkRecLog: buffer size: ' + bufferSize);\n\n", "eio.statSync(fpath).size;\n        console.in"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "favtrashTestPromise.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "SR000GHLLV.test.js", "SR000GHQBN.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "fileTestPromise.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Region", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8861, "since": 7, "api_used": "\u662f", "lines": ["", "rom 'deccjsunit/index'\n\nexport default {\n", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", "ach, afterAll, it, expect} from 'deccjsun", "Extend = new ExpectExtend({\n            '", "                   expect(true).assertTru", "SS ');\n            expect(true).assertTru", "            'id': 'extend'\n        })\n   ", " else{\n            expect(false).assertTr", "\n        await context.getBundleName()\n  ", "e;\n        var context = ability_featureA", "expectExtend = new ExpectExtend({\n       ", "       const expectExtend = new ExpectExt", "rom 'deccjsunit/index';\n\ndescribe('audioC", "true){\n            expect(resultFlagRen).", "ltFlag);\n \n        expect(resultFlag).ass", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "deccjsunit/index'\n\nexport default {\n    d", "tureAbility.getContext();\n        await c", "sage);\n            expect(false).assertTr", "ultFlag);\n\n        expect(resultFlag).ass"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "testImg.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Region", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 25768, "since": 7, "api_used": "\u662f", "lines": [")\n\n    beforeEach(async function () {\n   ", ": Success : Stream Type: SUCCESS');\n     ", "bility.featureAbility';\n\nimport {describe", "ererOptions).then(async function (data) {", "\n    },\n    onDestroy() {\n        console", " }\n\n    beforeAll(async function () {\n   ", "ndererInfo().then(async function (audioPa", " ms));\n    }\n\n    async function playback", "bility_featureAbility.getContext();\n     ", "oRen.drain().then(async function () {\n   ", " })\n\n    afterAll(async function () {\n   ", "})\n\n    afterEach(async function () {\n   ", "rLog: Cache directory obtained. Data: ' +", "(AudioScene).then(async function () {\n   ", ": Renderer content type:' + audioParamsGe", "en.release().then(async function () {\n   ", "AudioScene().then(async function (data) {", "Framework');\n\n    async function getPathN", "lSize = fileio.statSync(fpath).size;\n    ", ": Capturer encodingType:' + audioParamsGe", "n the cache directory. Cause:' + error.me", "       fileio.mkdirSync(dirPath);\n       ", "oParamsGet.encodingType);\n        }).catc", "  async function playbackPromise (AudioRe", "Application onDestroy');\n    }\n};\n", "urerOptions).then(async function (data) {", ": Renderer encodingType:' + audioParamsGe", "BufferSize().then(async function (data) {", "    rlen += ss.readSync(buf);\n           ", "fileio.createStreamSync(fpath, 'r');\n    ", "StreamInfo().then(async function (audioPa", "agRen;\n    }\n\n    async function recPromi", "ardHeader = new ArrayBuffer(44);\n        ", "leio';\nimport ability_featureAbility from", "4);\n        ss.readSync(discardHeader);\n ", "y from '@ohos.ability.featureAbility';\n\ni", "oRen.start().then(async function () {\n   ", "ioRen.stop().then(async function () {\n   ", "var context = ability_featureAbility.getC", "()\n    },\n    onReady() {\n    },\n}", "  let buf = new ArrayBuffer(bufferSize);\n", " Promise : Audio Playback Function');\n\n  ", "bility_featureAbility from '@ohos.ability", "ferAudioFramework: bytes read from file: "], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "testImg.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PositionArea", "api_method_all": "interface PositionArea {\r\n    \r\n    pixels: ArrayBuffer;\r\n\r\n    \r\n    offset: number;\r\n\r\n    \r\n    stride: number;\r\n\r\n    \r\n    region: Region;\r\n  }", "api_method_name": "PositionArea", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PositionArea", "api_method_name": "pixels", "api_method_all": "pixels: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["new Uint8Array(area.pixels);\n                 ", "     const area = { pixels: new ArrayBuffer(8)", "new Uint8Array(area.pixels);\n                f", " const readArea = { pixels: new ArrayBuffer(8)", "Uint8Array(readArea.pixels);\n                 ", "new Uint8Array(area.pixels);\n            for (", "     const area = { pixels: new ArrayBuffer(0)", "     const area = { pixels: new ArrayBuffer(20"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PositionArea", "api_method_name": "offset", "api_method_all": "offset: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 49, "since": 7, "api_used": "\u662f", "lines": ["stimagebuffer.slice(offset, offset + bufferSiz", "offset: '+ inBuffer.offset);\n            expec", "0),\n                offset: 21,\n              ", " readPixels-promise(offset > buffer)\n     * @t", "8),\n                offset: 0,\n               ", "uffer.slice(offset, offset + bufferSize);\n    ", "fo('TC_053 0011 ' + offset);\n            }\n   ", "           offset = offset + oneStep.length;\n ", "\n            while (offset < testimagebuffer.l", "    expect(inBuffer.offset !== undefined).asse", "0),\n                offset: 0,\n               ", "('TC_053-1 0011 ' + offset);\n            }\n   ", "                    offset: 0,\n               ", "rAvailable inBuffer.offset: '+ inBuffer.offset", "        inputobject.offset = 0;\n              ", "  }\n                offset = offset + oneStep.", "        inputObject.offset = 0;\n            in", "th;\n            let offset = 0;\n            co"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PositionArea", "api_method_name": "stride", "api_method_all": "stride: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["21,\n                stride: 8,\n               ", "                    stride: 8,\n               ", " 0,\n                stride: 8,\n               "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PositionArea", "api_method_name": "region", "api_method_all": "region: Region", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": [" 8,\n                region: { size: { height: ", "eadPixels-callback( region: { size: { height: ", "                    region: { size: { height: ", " readPixels-promise(region: { size: { height: "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageInfo", "api_method_all": "interface ImageInfo {\r\n    \r\n    size: Size;\r\n  }", "api_method_name": "ImageInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 134, "since": 6, "api_used": "\u662f", "lines": ["back: AsyncCallback<ImageInfo>)-gif\n     * @tc.de", " @tc.name      : getImageInfo-pixelmap-promise\n  ", "        pixelmap.getImageInfo().then( imageInfo =", "          2.call getImageInfo\n     *             ", "getImageInfo(index, ImageInfo)\n     *            ", "back: AsyncCallback<ImageInfo>)-png\n     * @tc.de", "   * @tc.name  : getImageInfo(index: number, call", "  imageSourceApi.getImageInfo((err,imageInfo) => ", "  imageSourceApi.getImageInfo(0, (err, imageInfo)", " @tc.name      : getImageInfo(callback: AsyncCall", ": 1.create PixelMap,ImageInfo\n     *             ", "tc.desc  : 1.create ImageInfo\n     *             ", "          2.call getImageInfo(index, ImageInfo)\n ", " @tc.name      : getImageInfo-pixelmap-callback\n ", "back: AsyncCallback<ImageInfo>)-jpg\n     * @tc.de", "esc      : 1.create ImageInfo\n     *             ", " @tc.name      : getImageInfo(index: number, call", "back: AsyncCallback<ImageInfo>)-bmp\n     * @tc.de", "cecall getImageInfo(ImageInfo)\n     *            ", "        pixelmap.getImageInfo( (err,imageInfo) =>", ".imageSourcecall getImageInfo(ImageInfo)\n     *  "], "files": ["FileAssetGetThumbnailPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageInfo", "api_method_name": "size", "api_method_all": "size: Size", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3487, "since": 7, "api_used": "\u662f", "lines": ["- ENUM\n       * @tc.size      : MEDIUM\n     ", "workRenderLog: File size : Removing header: ", "Log: File totalSize size: ' +totalSize);\n   ", " ENAME\n       * @tc.size      : MEDIUM\n     ", "5\n            * @tc.size      : MEDIUM\n     ", "UM\n           * @tc.size      : MEDIUM\n     ", "ME\n           * @tc.size      : MEDIUM\n     ", "              * @tc.size      : MEDIUM\n     ", "eworkRecLog: buffer size: ' + bufferSize);\n\n", "eio.statSync(fpath).size;\n        console.in"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "favtrashTestPromise.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "SR000GHLLV.test.js", "SR000GHQBN.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "fileTestPromise.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PackingOption", "api_method_all": "interface PackingOption {\r\n    \r\n    format: string;\r\n\r\n    \r\n    quality: number;\r\n  }", "api_method_name": "PackingOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PackingOption", "api_method_name": "format", "api_method_all": "format: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 645, "since": 6, "api_used": "\u662f", "lines": ["from camera-0 cameraformat & camerainput async", "from camera-0 cameraformat & camerainput promi", "t supported preview formats from camera-0 came", "sing camera-0 cameraformat & camerainput async", "orkRecLog: Capturer format:' + audioParamsGet.", ":' + audioParamsGet.format);\n            conso", "ams = {\n            format: audio.AudioSampleF", "sRen = {\n           format: audio.AudioSampleF", "Get supported video formats from camera-0 came", "RenderLog: Renderer format:' + audioParamsGet.", "Get supported photo format from camera-0 camer", "Rec = {\n            format: audio.AudioSampleF", "sing camera-0 cameraformat & camerainput promi"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitCameraFormat.test.ets", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PackingOption", "api_method_name": "quality", "api_method_all": "quality: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 26, "since": 6, "api_used": "\u662f", "lines": ["rmat:[\"image/gif\"], quality:98 }\n              ", "mat:[\"image/jpeg\"], quality:-1 }\n              ", ".assertEqual(\"codec_quality\");\n        expect(m", "mat:[\"image/jpeg\"], quality:1 }\n               ", "\n  rotation: 180,\n  quality: 2,\n}\nvar photosett", "mat:[\"image/jpeg\"], quality:100 }\n             ", "mat:[\"image/jpeg\"], quality:0 }\n               ", "urce - promise - no quality\n     * @tc.desc    ", "Source - callback - quality 0\n     * @tc.desc  ", "{\n  rotation: 90,\n  quality: 1,\n}\nvar photosett", "mat:[\"image/jpeg\"], quality:99 }\n              ", " - callback - wrong quality\n     * @tc.desc    ", "Source - callback - quality -1\n     * @tc.desc ", "rmat:[\"image/jpg\"], quality:101 }\n             ", "   let packOpts = { quality:50 }\n              ", "Source - callback - quality 100\n     * @tc.desc", " {\n  rotation: 0,\n  quality: 0,\n}\nvar photosett"], "files": ["CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets", "VideoHardwareEncoderEnumTest.test.js", "image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GetImagePropertyOptions", "api_method_all": "interface GetImagePropertyOptions {\r\n    \r\n    index?: number;\r\n\r\n    \r\n    defaultValue?: string;\r\n  }", "api_method_name": "GetImagePropertyOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GetImagePropertyOptions", "api_method_name": "index", "api_method_all": "index?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 350, "since": 7, "api_used": "\u662f", "lines": ["t} from 'deccjsunit/index';\n\ndescribe('audioA", "d} from \"deccjsunit/index\"\n//import {Core, Ex", "     : getImageInfo(index: number, callback: ", "ame  : getImageInfo(index: number, callback: ", "t} from 'deccjsunit/index';\n\ndescribe('audioC", "t} from 'deccjsunit/index';\n\ndescribe('audioR", "ayDeviceProp(value, index, array) {\n        v", "t} from 'deccjsunit/index';\n\nconst TAG = \"Cam", "d} from \"deccjsunit/index\"\nimport cameraKit f", "ack<ImageInfo>)-gif-index:-1\n     * @tc.desc ", "Info>)-gif(frame:1)-index:1\n     * @tc.desc  ", "     : getImageInfo(index?: number): Promise<", "d} from 'deccjsunit/index'\n\nexport default {\n", "2.call getImageInfo(index)\n     *            ", " } from 'deccjsunit/index'\nimport {testPng, t", "t} from 'deccjsunit/index';\n\nlet TAG = 'Camer", "2.call getImageInfo(index, ImageInfo)\n     * ", "t} from 'deccjsunit/index';\n\ndescribe('audioM"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GetImagePropertyOptions", "api_method_name": "defaultValue", "api_method_all": "defaultValue?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["property = {index:0,defaultValue:'9999'}\n           "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DecodingOptions", "api_method_all": "interface DecodingOptions {\r\n    \r\n    index?: number;\r\n\r\n    \r\n    sampleSize?: number;\r\n\r\n    \r\n    rotate?: number;\r\n\r\n    \r\n    editable?: boolean;\r\n\r\n    \r\n    desiredSize?: Size;\r\n\r\n    \r\n    desiredRegion?: Region;\r\n\r\n    \r\n    desiredPixelFormat?: PixelMapFormat;\r\n  }", "api_method_name": "DecodingOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DecodingOptions", "api_method_name": "index", "api_method_all": "index?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 350, "since": 7, "api_used": "\u662f", "lines": ["t} from 'deccjsunit/index';\n\ndescribe('audioA", "d} from \"deccjsunit/index\"\n//import {Core, Ex", "     : getImageInfo(index: number, callback: ", "ame  : getImageInfo(index: number, callback: ", "t} from 'deccjsunit/index';\n\ndescribe('audioC", "t} from 'deccjsunit/index';\n\ndescribe('audioR", "ayDeviceProp(value, index, array) {\n        v", "t} from 'deccjsunit/index';\n\nconst TAG = \"Cam", "d} from \"deccjsunit/index\"\nimport cameraKit f", "ack<ImageInfo>)-gif-index:-1\n     * @tc.desc ", "Info>)-gif(frame:1)-index:1\n     * @tc.desc  ", "     : getImageInfo(index?: number): Promise<", "d} from 'deccjsunit/index'\n\nexport default {\n", "2.call getImageInfo(index)\n     *            ", " } from 'deccjsunit/index'\nimport {testPng, t", "t} from 'deccjsunit/index';\n\nlet TAG = 'Camer", "2.call getImageInfo(index, ImageInfo)\n     * ", "t} from 'deccjsunit/index';\n\ndescribe('audioM"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DecodingOptions", "api_method_name": "sampleSize", "api_method_all": "sampleSize?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 64, "since": 7, "api_used": "\u662f", "lines": ["Map(decodingOptions:sampleSize -1})-jpg\n     * @tc", "                    sampleSize:1,\n                ", "Map(decodingOptions:sampleSize -1})-bmp\n     * @tc", "                    sampleSize:1\n                }", "Map(decodingOptions:sampleSize -1})-gif\n     * @tc", "= {\n                sampleSize:-1,\n               ", "= {\n                sampleSize:1,\n                "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DecodingOptions", "api_method_name": "rotate", "api_method_all": "rotate?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 66, "since": 7, "api_used": "\u662f", "lines": ["Map(decodingOptions:rotate -10})-bmp\n     * @t", "0},\n                rotate:10,\n               ", "Map(decodingOptions:rotate>360)-jpg\n     * @tc", "2},\n                rotate:-10,\n              ", "Map(decodingOptions:rotate>360)-jpg\n         *", "Map(decodingOptions:rotate -10})-gif\n     * @t", "                    rotate:500,\n              ", "2},\n                rotate:500,\n              ", "Map(decodingOptions:rotate -10})-jpg\n     * @t", "                    rotate:10,\n               ", "2},\n                rotate:10,\n               ", "Map(decodingOptions:rotate>360)-gif\n     * @tc"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DecodingOptions", "api_method_name": "editable", "api_method_all": "editable?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 92, "since": 7, "api_used": "\u662f", "lines": ["       let opts = { editable: false, pixelFormat", "-1,\n                editable: true, \n           ", "       let opts = { editable: true, pixelFormat:", ":1,\n                editable: false, \n          ", "Map(decodingOptions:editable false})-jpg\n     * ", "                    editable: true, \n           ", ":1,\n                editable: true, \n           "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DecodingOptions", "api_method_name": "desiredSize", "api_method_all": "desiredSize?: Size", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 62, "since": 7, "api_used": "\u662f", "lines": ["                    desiredSize:{ width:1, height:2", "Map(decodingOptions:desiredSize>imagesize)-gif\n    ", "Map(decodingOptions:desiredSize>imagesize)-jpg\n    ", "e, \n                desiredSize:{ width:1, height:2", "Map(decodingOptions:desiredSize>imagesize)-bmp\n    ", "e, \n                desiredSize:{ width:10000, heig"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DecodingOptions", "api_method_name": "desiredRegion", "api_method_all": "desiredRegion?: Region", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 62, "since": 7, "api_used": "\u662f", "lines": ["Map(decodingOptions:desiredRegion>imagesize)-gif\n    ", ":2,\n                desiredRegion: { size: { height: ", "Map(decodingOptions:desiredRegion>imagesize)-bmp\n    ", "Map(decodingOptions:desiredRegion>imagesize)-jpg\n    ", "60,\n                desiredRegion: { size: { height: ", ":3,\n                desiredRegion: { size: { height: ", ":0,\n                desiredRegion: { size: { height: ", "                    desiredRegion: { size: { height: "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DecodingOptions", "api_method_name": "desiredPixelFormat", "api_method_all": "desiredPixelFormat?: PixelMapFormat", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 58, "since": 7, "api_used": "\u662f", "lines": ["00,\n                desiredPixelFormat:2,\n                ", "10,\n                desiredPixelFormat:3,\n                ", "10,\n                desiredPixelFormat:60,\n               ", "10,\n                desiredPixelFormat:2,\n                ", "                    desiredPixelFormat:2,\n                ", "10,\n                desiredPixelFormat:0,\n                "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Component", "api_method_all": "interface Component {\r\n    \r\n    readonly componentType: ComponentType;\r\n\r\n    \r\n    readonly rowStride: number;\r\n\r\n    \r\n    readonly pixelStride: number;\r\n\r\n    \r\n    readonly byteBuffer: ArrayBuffer;\r\n  }", "api_method_name": "Component", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 25, "since": 9, "api_used": "\u662f", "lines": ["ModuleTest: '\nvar mXComponentController: XCompone", "      controller: mXComponentController\n      })\n", "XcomponentId2').getXComponentSurfaceId()\n    },\n}", "XcomponentId3').getXComponentSurfaceId()\n    },\n}", "mponentController: XComponentController = new XCo", "('XcomponentId').getComponentSurfaceId()\n    },\n\n", "'XcomponentId').getXComponentSurfaceId();\n    },\n", "lled!')\n          mXComponentController.setXCompo", "      surfaceId = mXComponentController.getXCompo", "    Flex() {\n      XComponent({\n        id: '',\n ", "'CameraModuleTest: XComponent onLoad surfaceId: '", "aceId: any\n\n@Entry\n@Component\nstruct CameraIndex ", "onentController.getXComponentSurfaceId()\n        ", "onentController.setXComponentSurfaceSize({ surfac", "ntController = new XComponentController()\nvar sur"], "files": ["surfaceTest2.js", "display.js", "index.js", "surfaceTest.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Component", "api_method_name": "componentType", "api_method_all": "readonly componentType: ComponentType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Component", "api_method_name": "rowStride", "api_method_all": "readonly rowStride: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Component", "api_method_name": "pixelStride", "api_method_all": "readonly pixelStride: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Component", "api_method_name": "byteBuffer", "api_method_all": "readonly byteBuffer: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InitializationOptions", "api_method_all": "interface InitializationOptions {\r\n    \r\n    size: Size;\r\n\r\n    \r\n    pixelFormat?: PixelMapFormat;\r\n\r\n    \r\n    editable?: boolean;\r\n  }", "api_method_name": "InitializationOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InitializationOptions", "api_method_name": "size", "api_method_all": "size: Size", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3487, "since": 7, "api_used": "\u662f", "lines": ["- ENUM\n       * @tc.size      : MEDIUM\n     ", "workRenderLog: File size : Removing header: ", "Log: File totalSize size: ' +totalSize);\n   ", " ENAME\n       * @tc.size      : MEDIUM\n     ", "5\n            * @tc.size      : MEDIUM\n     ", "UM\n           * @tc.size      : MEDIUM\n     ", "ME\n           * @tc.size      : MEDIUM\n     ", "              * @tc.size      : MEDIUM\n     ", "eworkRecLog: buffer size: ' + bufferSize);\n\n", "eio.statSync(fpath).size;\n        console.in"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "favtrashTestPromise.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "SR000GHLLV.test.js", "SR000GHQBN.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "fileTestPromise.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InitializationOptions", "api_method_name": "pixelFormat", "api_method_all": "pixelFormat?: PixelMapFormat", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 30, "since": 8, "api_used": "\u662f", "lines": ["= { editable: true, pixelFormat: 3, size: { height:", "= { editable: true, pixelFormat: 2, size: { height:", " { editable: false, pixelFormat: 0, size: { height:", " { editable: false, pixelFormat: 2, size: { height:", "= { editable: true, pixelFormat: 1, size: { height:", " { editable: false, pixelFormat: 3, size: { height:", "= { editable: true, pixelFormat: 0, size: { height:"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InitializationOptions", "api_method_name": "editable", "api_method_all": "editable?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 92, "since": 7, "api_used": "\u662f", "lines": ["       let opts = { editable: false, pixelFormat", "-1,\n                editable: true, \n           ", "       let opts = { editable: true, pixelFormat:", ":1,\n                editable: false, \n          ", "Map(decodingOptions:editable false})-jpg\n     * ", "                    editable: true, \n           ", ":1,\n                editable: true, \n           "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_all": "interface PixelMap {\r\n    \r\n    readonly isEditable: boolean;\r\n\r\n    \r\n    readPixelsToBuffer(dst: ArrayBuffer): Promise<void>;\r\n\r\n    \r\n    readPixelsToBuffer(dst: ArrayBuffer, callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    readPixels(area: PositionArea): Promise<void>;\r\n\r\n    \r\n    readPixels(area: PositionArea, callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    writePixels(area: PositionArea): Promise<void>;\r\n\r\n    \r\n    writePixels(area: PositionArea, callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    writeBufferToPixels(src: ArrayBuffer): Promise<void>;\r\n\r\n    \r\n    writeBufferToPixels(src: ArrayBuffer, callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    getImageInfo(): Promise<ImageInfo>;\r\n\r\n    \r\n    getImageInfo(callback: AsyncCallback<ImageInfo>): void;\r\n\r\n    \r\n    getBytesNumberPerRow(): number;\r\n\r\n    \r\n    getPixelBytesNumber(): number;\r\n\r\n    \r\n    release(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(): Promise<void>;\r\n  }", "api_method_name": "PixelMap", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 258, "since": 7, "api_used": "\u662f", "lines": ["        image.createPixelMap(Color, opts, (err, ", "esc      : 1.create PixelMap,buffer\n     *      ", "nfo('TC_020-1 createPixelMap failed');\n         ", "        image.createPixelMap(color, opts)\n      ", ".info('TC_023 createPixelMap failed');\n         ", ".info('TC_024 createPixelMap failed');\n         ", "nfo('TC_021-4 createPixelMap success');\n        ", "esc      : 1.create PixelMap\n     *             ", "        image.createPixelMap(Color, opts)\n      ", ".info('TC_020 createPixelMap failed');\n         ", "nfo('TC_021-5 createPixelMap success');\n        ", "        image.createPixelMap(color, opts, (err,p", "              2.set PixelMap\n     *             ", "esc      : 1.create PixelMap,ImageInfo\n     *   ", "        image.createPixelMap(color, opts).then( ", "        image.createPixelMap(color, opts, (err, ", "nfo('TC_022-1 createPixelMap failed');\n         ", "nfo('TC_020-2 createPixelMap failed');\n         ", ".info('TC_021 createPixelMap failed');\n         ", ".info('TC_022 createPixelMap failed');\n         "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "readPixelsToBuffer", "api_method_all": "readPixelsToBuffer(dst: ArrayBuffer): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["           pixelmap.readPixelsToBuffer(readBuffer).then(() => {\n              "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "readPixelsToBuffer", "api_method_all": "readPixelsToBuffer(dst: ArrayBuffer, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["           pixelmap.readPixelsToBuffer(readBuffer,() => {\n                    "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "readPixels", "api_method_all": "readPixels(area: PositionArea): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["           pixelmap.readPixelsToBuffer(readBuffer).then(() => {\n      ", "           pixelmap.readPixels(area).then(()=>{\n\t\t\t\t\tconsole.info('TC_", "           pixelmap.readPixels(area).then(()=>{\n                    co", "           pixelmap.readPixels(readArea).then(() => {\n                ", "           pixelmap.readPixels(area).then(()=>{\n                consol", "           pixelmap.readPixels(area).then(() => {\n                    "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "readPixels", "api_method_all": "readPixels(area: PositionArea, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : readPixels-promise(region: { size: { height: -1, w", "  * @tc.name      : readPixels-promise(offset > buffer)\n     * @tc.des", "  * @tc.name      : readPixels-promise(buffer:0)\n     * @tc.desc      ", "           pixelmap.readPixelsToBuffer(readBuffer,() => {\n            ", "           pixelmap.readPixels(area, () => {\n                    var b", "           pixelmap.readPixels(readArea,() => {\n                    va", "             2.call readPixels\n     *                 3.promise return", "  * @tc.name      : readPixels-callback( region: { size: { height: 1, "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "writePixels", "api_method_all": "writePixels(area: PositionArea): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["           pixelmap.writePixels(area).then(() => {\n                    "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "writePixels", "api_method_all": "writePixels(area: PositionArea, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : writePixels-callback\n     * @tc.desc      : 1.creat", "  * @tc.name      : writePixels-promise\n     * @tc.desc      : 1.create", "             2.call writePixels\n     *                 3.call return un", "           pixelmap.writePixels(area, () => {\n                const rea"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "writeBufferToPixels", "api_method_all": "writeBufferToPixels(src: ArrayBuffer): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["           pixelmap.writeBufferToPixels(writeColor).then(() => {\n              "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "writeBufferToPixels", "api_method_all": "writeBufferToPixels(src: ArrayBuffer, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : writeBufferToPixels-callback\n     * @tc.desc      : 1.creat", "             2.call writeBufferToPixels\n     *                 3.call return un", "  * @tc.name      : writeBufferToPixels-promise\n     * @tc.desc      : 1.create", "           pixelmap.writeBufferToPixels(writeColor,() => {\n                cons"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "getImageInfo", "api_method_all": "getImageInfo(): Promise<ImageInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["           pixelmap.getImageInfo().then( imageInfo => {\n                ", "     imageSourceApi.getImageInfo(1)\n            .then(() => {\n          ", "     imageSourceApi.getImageInfo(0)\n            .then(imageInfo => {\n   ", "     imageSourceApi.getImageInfo(-1)\n            .then(() => {\n         "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "getImageInfo", "api_method_all": "getImageInfo(callback: AsyncCallback<ImageInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 92, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-gif", "     imageSourceApi.getImageInfo(-1, (err, imageInfo) => {\n             ", "\n     * @tc.name  : getImageInfo(index: number, callback: AsyncCallback<", "     imageSourceApi.getImageInfo(1, (err, imageInfo) => {\n              ", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-bmp", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-jpg", "     imageSourceApi.getImageInfo((err,imageInfo) => {\n                co", "             2.call getImageInfo(index=-1)\n     *                 3.call", "\n     * @tc.name  : getImageInfo(index?: number): Promise<ImageInfo>-gif", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-png", "             2.call getImageInfo(index=1)\n     *             3.callback ", "  * @tc.name      : getImageInfo-pixelmap-callback\n     * @tc.desc      ", "             2.call getImageInfo(index, ImageInfo)\n     *               ", "     imageSourceApi.getImageInfo((err,imageInfo) => {\n                ex", "             2.call getImageInfo(index)\n     *                 3.callbac", "  2.imageSourcecall getImageInfo(ImageInfo)\n     *                 3.cal", "  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-png", "  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-bmp", "           pixelmap.getImageInfo( (err,imageInfo) => {\n                i", "  * @tc.name      : getImageInfo-pixelmap-promise\n     * @tc.desc      :", "     imageSourceApi.getImageInfo(0, (err, imageInfo) => {\n              ", "           pixelmap.getImageInfo( (err,imageInfo) => {\n                 ", "     imageSourceApi.getImageInfo(0,(err, imageInfo) => {\n               ", "             2.call getImageInfo(index, ImageInfo)\n     *             3.", "  * @tc.name      : getImageInfo(index: number, callback: AsyncCallback<", "             2.call getImageInfo\n     *                 3.call return im", "  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-jpg", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-gif"], "files": ["FileAssetGetThumbnailPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "getBytesNumberPerRow", "api_method_all": "getBytesNumberPerRow(): number;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : getBytesNumberPerRow\n     * @tc.desc    ", "onst num = pixelmap.getBytesNumberPerRow();\n                ", "             3.call getBytesNumberPerRow\n     *             "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "getPixelBytesNumber", "api_method_all": "getPixelBytesNumber(): number;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["onst num = pixelmap.getPixelBytesNumber();\n                ", "             3.call getPixelBytesNumber\n     *             ", "  * @tc.name      : getPixelBytesNumber\n     * @tc.desc    "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 7, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 7, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMap", "api_method_name": "isEditable", "api_method_all": "readonly isEditable: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["             2.call isEditable \n     *            ", "  * @tc.name      : isEditable\n     * @tc.desc    ", "    expect(pixelmap.isEditable == true).assertTrue"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_all": "interface ImageSource {\r\n    \r\n    getImageInfo(index: number, callback: AsyncCallback<ImageInfo>): void;\r\n\r\n    \r\n    getImageInfo(callback: AsyncCallback<ImageInfo>): void;\r\n\r\n    \r\n    getImageInfo(index?: number): Promise<ImageInfo>;\r\n\r\n    \r\n    createPixelMap(options?: DecodingOptions): Promise<PixelMap>;\r\n    \r\n    \r\n    createPixelMap(callback: AsyncCallback<PixelMap>): void;\r\n\r\n    \r\n    createPixelMap(options: DecodingOptions, callback: AsyncCallback<PixelMap>): void;\r\n\r\n    \r\n    getImageProperty(key:string, options?: GetImagePropertyOptions): Promise<string>;\r\n\r\n    \r\n    getImageProperty(key:string, callback: AsyncCallback<string>): void;\r\n\t\r\n    \r\n    getImageProperty(key:string, options: GetImagePropertyOptions, callback: AsyncCallback<string>): void;\r\n\r\n    \r\n    release(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(): Promise<void>;\r\n\r\n    \r\n    readonly supportedFormats: Array<string>;\r\n  }", "api_method_name": "ImageSource", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 191, "since": 7, "api_used": "\u662f", "lines": ["ceApi = image.createImageSource(fdJpg);\n        exp", "esc      : 1.create ImageSource\n     *             ", "ceApi = image.createImageSource(data);\n        if (", "c.name      : createImageSource(fd)\n     * @tc.desc", "     : 1.call createImageSource(uri)\n     *        ", "c.name      : createImageSource(data) buffer:0\n    ", "ceApi = image.createImageSource('file:///data/local", "ceApi = image.createImageSource('file:///multimedia", "c.name      : createImageSource(uri)-bmp\n     * @tc", "ceApi = image.createImageSource(fdGif);\n        exp", "c.name      : createImageSource(data)\n     * @tc.de", "ceApi = image.createImageSource(fdGif);\n        if ", "ceApi = image.createImageSource(fdPng);\n        exp", "c.name      : createImageSource(uri)-gif\n     * @tc", "ceApi = image.createImageSource(fdBmp);\n        exp", "     : 1.call createImageSource\n     *             ", "c.name      : createImageSource(uri)-png\n     * @tc", "ceApi = image.createImageSource(-2);\n        expect", "c.name      : createImageSource(uri)-wrong suffix f", "            2.createImageSource\n     *             ", "ceApi = image.createImageSource(fdJpg);\n        if ", "ceApi = image.createImageSource(fdBmp);\n        if ", "c.name      : createImageSource(uri)-jpg\n     * @tc", "ceApi = image.createImageSource(data);\n        expe", "ceApi = image.createImageSource(fdPng);\n        if ", "       2.call createImageSource(uri)\n     *        ", "c.name      : createImageSource(fd) fd<0\n     * @tc", "c.name      : createImageSource(uri)-wrong uri\n    "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "getImageInfo", "api_method_all": "getImageInfo(index: number, callback: AsyncCallback<ImageInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 92, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-gif", "     imageSourceApi.getImageInfo(-1, (err, imageInfo) => {\n             ", "\n     * @tc.name  : getImageInfo(index: number, callback: AsyncCallback<", "     imageSourceApi.getImageInfo(1, (err, imageInfo) => {\n              ", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-bmp", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-jpg", "     imageSourceApi.getImageInfo((err,imageInfo) => {\n                co", "             2.call getImageInfo(index=-1)\n     *                 3.call", "\n     * @tc.name  : getImageInfo(index?: number): Promise<ImageInfo>-gif", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-png", "             2.call getImageInfo(index=1)\n     *             3.callback ", "  * @tc.name      : getImageInfo-pixelmap-callback\n     * @tc.desc      ", "             2.call getImageInfo(index, ImageInfo)\n     *               ", "     imageSourceApi.getImageInfo((err,imageInfo) => {\n                ex", "             2.call getImageInfo(index)\n     *                 3.callbac", "  2.imageSourcecall getImageInfo(ImageInfo)\n     *                 3.cal", "  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-png", "  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-bmp", "           pixelmap.getImageInfo( (err,imageInfo) => {\n                i", "  * @tc.name      : getImageInfo-pixelmap-promise\n     * @tc.desc      :", "     imageSourceApi.getImageInfo(0, (err, imageInfo) => {\n              ", "           pixelmap.getImageInfo( (err,imageInfo) => {\n                 ", "     imageSourceApi.getImageInfo(0,(err, imageInfo) => {\n               ", "             2.call getImageInfo(index, ImageInfo)\n     *             3.", "  * @tc.name      : getImageInfo(index: number, callback: AsyncCallback<", "             2.call getImageInfo\n     *                 3.call return im", "  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-jpg", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-gif"], "files": ["FileAssetGetThumbnailPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "getImageInfo", "api_method_all": "getImageInfo(callback: AsyncCallback<ImageInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 92, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-gif", "     imageSourceApi.getImageInfo(-1, (err, imageInfo) => {\n             ", "\n     * @tc.name  : getImageInfo(index: number, callback: AsyncCallback<", "     imageSourceApi.getImageInfo(1, (err, imageInfo) => {\n              ", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-bmp", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-jpg", "     imageSourceApi.getImageInfo((err,imageInfo) => {\n                co", "             2.call getImageInfo(index=-1)\n     *                 3.call", "\n     * @tc.name  : getImageInfo(index?: number): Promise<ImageInfo>-gif", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-png", "             2.call getImageInfo(index=1)\n     *             3.callback ", "  * @tc.name      : getImageInfo-pixelmap-callback\n     * @tc.desc      ", "             2.call getImageInfo(index, ImageInfo)\n     *               ", "     imageSourceApi.getImageInfo((err,imageInfo) => {\n                ex", "             2.call getImageInfo(index)\n     *                 3.callbac", "  2.imageSourcecall getImageInfo(ImageInfo)\n     *                 3.cal", "  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-png", "  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-bmp", "           pixelmap.getImageInfo( (err,imageInfo) => {\n                i", "  * @tc.name      : getImageInfo-pixelmap-promise\n     * @tc.desc      :", "     imageSourceApi.getImageInfo(0, (err, imageInfo) => {\n              ", "           pixelmap.getImageInfo( (err,imageInfo) => {\n                 ", "     imageSourceApi.getImageInfo(0,(err, imageInfo) => {\n               ", "             2.call getImageInfo(index, ImageInfo)\n     *             3.", "  * @tc.name      : getImageInfo(index: number, callback: AsyncCallback<", "             2.call getImageInfo\n     *                 3.call return im", "  * @tc.name      : getImageInfo(callback: AsyncCallback<ImageInfo>)-jpg", "  * @tc.name      : getImageInfo(index?: number): Promise<ImageInfo>-gif"], "files": ["FileAssetGetThumbnailPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "getImageInfo", "api_method_all": "getImageInfo(index?: number): Promise<ImageInfo>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["           pixelmap.getImageInfo().then( imageInfo => {\n                ", "     imageSourceApi.getImageInfo(1)\n            .then(() => {\n          ", "     imageSourceApi.getImageInfo(0)\n            .then(imageInfo => {\n   ", "     imageSourceApi.getImageInfo(-1)\n            .then(() => {\n         "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "createPixelMap", "api_method_all": "createPixelMap(options?: DecodingOptions): Promise<PixelMap>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["8 } }\n        image.createPixelMap(color, opts)\n        .then( pixelmap =>", "     imageSourceApi.createPixelMap().then(pixelmap => {\n                co", "6 } }\n        image.createPixelMap(color, opts)\n            .then( pixelma", " 6 }}\n        image.createPixelMap(color, opts)\n            .then( pixelma", "6 } }\n        image.createPixelMap(color, opts).then(pixelmap => {\n       ", "6 } }\n        image.createPixelMap(Color, opts)\n            .then( pixelma", "8 } }\n        image.createPixelMap(Color, opts)\n            .then( pixelma", "6 } }\n        image.createPixelMap(color, opts).then( pixelmap => {\n      "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "createPixelMap", "api_method_all": "createPixelMap(callback: AsyncCallback<PixelMap>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 173, "since": 8, "api_used": "\u662f", "lines": ["  * @tc.name      : createPixelMap(decodingOptions:index -1})-jpg\n     * @", "console.log('TC_027 createPixelMap failed error: ' + error);\n            e", "sole.info('TC_021-5 createPixelMap success');\n                done(); \n   ", "sole.info('TC_020-1 createPixelMap failed');\n                expect(false)", "idth;\n        image.createPixelMap(color, opts, (err,pixelmap) => {\n      ", "  * @tc.name      : createPixelMap(decodingOptions: index 1})-jpg\n     * @", "  * @tc.name      : createPixelMap(decodingOptions:unsupported pixelformat", "  * @tc.name      : createPixelMap(decodingOptions)-pixelformat:RGBA_8888-", "  * @tc.name      : createPixelMap(decodingOptions:rotate -10})-jpg\n     *", "6 } }\n        image.createPixelMap(color, opts, (err, pixelmap) => {\n     ", "6 } }\n        image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "sole.info('TC_021-4 createPixelMap success');\n                done(); \n   ", "sole.info('TC_022-1 createPixelMap failed');\n                expect(false)", "8 } }\n        image.createPixelMap(color, opts, (err,pixelmap) => { \n     ", "6 } }\n        image.createPixelMap(color, opts, (err,pixelmap) => {\n      ", "onsole.info('TC_023 createPixelMap failed');\n                    expect(fa", "sole.info('TC_027-1 createPixelMap failed');\n                expect(false)", "     imageSourceApi.createPixelMap(decodingOptions,(err,pixelmap) => {\n   ", "  * @tc.name      : createPixelMap(decodingOptions)-pixelformat:unknown-jp", "sole.info('TC_020-2 createPixelMap failed');\n                expect(false)", "onsole.info('TC_027 createPixelMap failed');\n                expect(false)", "1 } }\n        image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "ight;\n        image.createPixelMap(color, opts,(err,pixelmap) => {\n       ", " } }\n         image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "  * @tc.name      : createPixelMap(decodingOptions)-pixelformat:RGB_565-jp", "8 } }\n        image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "onsole.info('TC_021 createPixelMap failed');\n                    expect(fa", "  * @tc.name      : createPixelMap(decodingOptions:sampleSize -1})-jpg\n   ", "onsole.info('TC_022 createPixelMap failed');\n                    expect(fa", "     imageSourceApi.createPixelMap(decodingOptions, (err, pixelmap) => {\n ", "onsole.info('TC_020 createPixelMap failed');\n                    expect(fa", "  * @tc.name      : createPixelMap(decodingOptions:editable false})-jpg\n  ", "onsole.info('TC_024 createPixelMap failed');\n                expect(false)"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "createPixelMap", "api_method_all": "createPixelMap(options: DecodingOptions, callback: AsyncCallback<PixelMap>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 173, "since": 8, "api_used": "\u662f", "lines": ["  * @tc.name      : createPixelMap(decodingOptions:index -1})-jpg\n     * @", "console.log('TC_027 createPixelMap failed error: ' + error);\n            e", "sole.info('TC_021-5 createPixelMap success');\n                done(); \n   ", "sole.info('TC_020-1 createPixelMap failed');\n                expect(false)", "idth;\n        image.createPixelMap(color, opts, (err,pixelmap) => {\n      ", "  * @tc.name      : createPixelMap(decodingOptions: index 1})-jpg\n     * @", "  * @tc.name      : createPixelMap(decodingOptions:unsupported pixelformat", "  * @tc.name      : createPixelMap(decodingOptions)-pixelformat:RGBA_8888-", "  * @tc.name      : createPixelMap(decodingOptions:rotate -10})-jpg\n     *", "6 } }\n        image.createPixelMap(color, opts, (err, pixelmap) => {\n     ", "6 } }\n        image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "sole.info('TC_021-4 createPixelMap success');\n                done(); \n   ", "sole.info('TC_022-1 createPixelMap failed');\n                expect(false)", "8 } }\n        image.createPixelMap(color, opts, (err,pixelmap) => { \n     ", "6 } }\n        image.createPixelMap(color, opts, (err,pixelmap) => {\n      ", "onsole.info('TC_023 createPixelMap failed');\n                    expect(fa", "sole.info('TC_027-1 createPixelMap failed');\n                expect(false)", "     imageSourceApi.createPixelMap(decodingOptions,(err,pixelmap) => {\n   ", "  * @tc.name      : createPixelMap(decodingOptions)-pixelformat:unknown-jp", "sole.info('TC_020-2 createPixelMap failed');\n                expect(false)", "onsole.info('TC_027 createPixelMap failed');\n                expect(false)", "1 } }\n        image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "ight;\n        image.createPixelMap(color, opts,(err,pixelmap) => {\n       ", " } }\n         image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "  * @tc.name      : createPixelMap(decodingOptions)-pixelformat:RGB_565-jp", "8 } }\n        image.createPixelMap(Color, opts, (err, pixelmap) => {\n     ", "onsole.info('TC_021 createPixelMap failed');\n                    expect(fa", "  * @tc.name      : createPixelMap(decodingOptions:sampleSize -1})-jpg\n   ", "onsole.info('TC_022 createPixelMap failed');\n                    expect(fa", "     imageSourceApi.createPixelMap(decodingOptions, (err, pixelmap) => {\n ", "onsole.info('TC_020 createPixelMap failed');\n                    expect(fa", "  * @tc.name      : createPixelMap(decodingOptions:editable false})-jpg\n  ", "onsole.info('TC_024 createPixelMap failed');\n                expect(false)"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "getImageProperty", "api_method_all": "getImageProperty(key:string, options?: GetImagePropertyOptions): Promise<string>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["     imageSourceApi.getImageProperty(\"GPSLatitude\")\n            .then(data =", "     imageSourceApi.getImageProperty(\"Orientation\")\n            .then(data =", "     imageSourceApi.getImageProperty(\"ImageLength\")\n            .then(data =", "     imageSourceApi.getImageProperty(\"GPSLongitude\")\n            .then(data ", "     imageSourceApi.getImageProperty(\"DateTimeOriginal\")\n            .then(d", "     imageSourceApi.getImageProperty(\"BitsPerSample\")\n            .then(data", "     imageSourceApi.getImageProperty(\"GPSLatitudeRef\")\n            .then(dat", "     imageSourceApi.getImageProperty(\"GPSLongitudeRef\")\n            .then(da", "     imageSourceApi.getImageProperty(\"ImageWidth\")\n            .then(data =>"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "getImageProperty", "api_method_all": "getImageProperty(key:string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 90, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : getImageProperty(DateTimeOriginal)\n     * @tc.desc      ", "     imageSourceApi.getImageProperty(\"ImageLength\",(error,data) => {\n       ", "     imageSourceApi.getImageProperty(\"GPSLatitudeRef\",(error,data) => {\n    ", "     imageSourceApi.getImageProperty(\"GPSLongitudeRef\",(error,data) => {\n   ", "  * @tc.name      : getImageProperty(GPSLatitude)-promise\n     * @tc.desc   ", "             2.call getImageProperty(ImageWidth)\n     *                 3.re", "sole.info('TC_172-5 getImageProperty GPSLongitude error');\n                 ", "  * @tc.name      : getImageProperty(ImageLength)-promise\n     * @tc.desc   ", "             3.call getImageProperty(GPSLatitudeRef)\n     *                 ", "     imageSourceApi.getImageProperty(\"BitsPerSample\",(error,data) => {\n     ", "     imageSourceApi.getImageProperty(\"ImageWidth\",(error,data) => {\n        ", "  * @tc.name      : getImageProperty(GPSLatitudeRef)-callback\n     * @tc.des", "sole.info('TC_172-1 getImageProperty Orientation error');\n                  ", "  * @tc.name      : getImageProperty(ImageLength)-callback\n     * @tc.desc  ", "             2.call getImageProperty(Orientation)\n     *                 3.r", "sole.info('TC_172-4 getImageProperty GPSLatitude error');\n                  ", "             2.call getImageProperty(BitsPerSample)\n     *                 3", "             2.call getImageProperty(GPSLatitudeRef)\n     *                 ", "             3.call getImageProperty(GPSLongitude)\n     *                 4.", "  * @tc.name      : getImageProperty(GPSLongitude)-promise\n     * @tc.desc  ", "  * @tc.name      : getImageProperty(ImageWidth)-promise\n     * @tc.desc    ", "  * @tc.name      : getImageProperty(GPSLatitudeRef)-promise\n     * @tc.desc", "sole.info('TC_172-3 getImageProperty ImageWidth error');\n                   ", "  * @tc.name      : getImageProperty(GPSLatitude)-callback\n     * @tc.desc  ", "  * @tc.name      : getImageProperty(GPSLongitude)-callback\n     * @tc.desc ", "  * @tc.name      : getImageProperty(GPSLongitudeRef)-callback\n     * @tc.de", "     imageSourceApi.getImageProperty(\"GPSLatitude\",(error,data) => {\n       ", "             2.call getImageProperty(ImageLength)\n     *                 3.r", "  * @tc.name      : getImageProperty(GPSLongitudeRef)-promise\n     * @tc.des", "onsole.info('TC_172 getImageProperty BitsPerSample error');\n                ", "             3.call getImageProperty(ImageLength)\n     *                 4.T", "  * @tc.name      : getImageProperty(Orientation)-callback\n     * @tc.desc  ", "  * @tc.name      : getImageProperty(Orientation)-promise\n     * @tc.desc   ", "             3.call getImageProperty(Orientation)\n     *                 4.T", "     imageSourceApi.getImageProperty(\"Orientation\",(error,data) => {\n       ", "             2.call getImageProperty(GPSLongitudeRef)\n     *                ", "             3.call getImageProperty(GPSLongitudeRef)\n     *                ", "             3.call getImageProperty(ImageWidth)\n     *                 4.Th", "sole.info('TC_172-7 getImageProperty GPSLongitudeRef error');\n              ", "             2.call getImageProperty(GPSLongitude)\n     *                 3.", "sole.info('TC_172-2 getImageProperty ImageLength error');\n                  ", "     imageSourceApi.getImageProperty(\"GPSLongitude\",(error,data) => {\n      ", "  * @tc.name      : getImageProperty(BitsPerSample)-promise\n     * @tc.desc ", "             3.call getImageProperty(BitsPerSample)\n     *                 4", "  * @tc.name      : getImageProperty(ImageWidth)-callback\n     * @tc.desc   ", "             2.call getImageProperty(GPSLatitude)\n     *                 3.r", "  * @tc.name      : getImageProperty(BitsPerSample)-callback\n     * @tc.desc", "sole.info('TC_172-6 getImageProperty GPSLatitudeRef error');\n               ", "             3.call getImageProperty(GPSLatitude)\n     *                 4.T"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "getImageProperty", "api_method_all": "getImageProperty(key:string, options: GetImagePropertyOptions, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 90, "since": 7, "api_used": "\u662f", "lines": ["  * @tc.name      : getImageProperty(DateTimeOriginal)\n     * @tc.desc      ", "     imageSourceApi.getImageProperty(\"ImageLength\",(error,data) => {\n       ", "     imageSourceApi.getImageProperty(\"GPSLatitudeRef\",(error,data) => {\n    ", "     imageSourceApi.getImageProperty(\"GPSLongitudeRef\",(error,data) => {\n   ", "  * @tc.name      : getImageProperty(GPSLatitude)-promise\n     * @tc.desc   ", "             2.call getImageProperty(ImageWidth)\n     *                 3.re", "sole.info('TC_172-5 getImageProperty GPSLongitude error');\n                 ", "  * @tc.name      : getImageProperty(ImageLength)-promise\n     * @tc.desc   ", "             3.call getImageProperty(GPSLatitudeRef)\n     *                 ", "     imageSourceApi.getImageProperty(\"BitsPerSample\",(error,data) => {\n     ", "     imageSourceApi.getImageProperty(\"ImageWidth\",(error,data) => {\n        ", "  * @tc.name      : getImageProperty(GPSLatitudeRef)-callback\n     * @tc.des", "sole.info('TC_172-1 getImageProperty Orientation error');\n                  ", "  * @tc.name      : getImageProperty(ImageLength)-callback\n     * @tc.desc  ", "             2.call getImageProperty(Orientation)\n     *                 3.r", "sole.info('TC_172-4 getImageProperty GPSLatitude error');\n                  ", "             2.call getImageProperty(BitsPerSample)\n     *                 3", "             2.call getImageProperty(GPSLatitudeRef)\n     *                 ", "             3.call getImageProperty(GPSLongitude)\n     *                 4.", "  * @tc.name      : getImageProperty(GPSLongitude)-promise\n     * @tc.desc  ", "  * @tc.name      : getImageProperty(ImageWidth)-promise\n     * @tc.desc    ", "  * @tc.name      : getImageProperty(GPSLatitudeRef)-promise\n     * @tc.desc", "sole.info('TC_172-3 getImageProperty ImageWidth error');\n                   ", "  * @tc.name      : getImageProperty(GPSLatitude)-callback\n     * @tc.desc  ", "  * @tc.name      : getImageProperty(GPSLongitude)-callback\n     * @tc.desc ", "  * @tc.name      : getImageProperty(GPSLongitudeRef)-callback\n     * @tc.de", "     imageSourceApi.getImageProperty(\"GPSLatitude\",(error,data) => {\n       ", "             2.call getImageProperty(ImageLength)\n     *                 3.r", "  * @tc.name      : getImageProperty(GPSLongitudeRef)-promise\n     * @tc.des", "onsole.info('TC_172 getImageProperty BitsPerSample error');\n                ", "             3.call getImageProperty(ImageLength)\n     *                 4.T", "  * @tc.name      : getImageProperty(Orientation)-callback\n     * @tc.desc  ", "  * @tc.name      : getImageProperty(Orientation)-promise\n     * @tc.desc   ", "             3.call getImageProperty(Orientation)\n     *                 4.T", "     imageSourceApi.getImageProperty(\"Orientation\",(error,data) => {\n       ", "             2.call getImageProperty(GPSLongitudeRef)\n     *                ", "             3.call getImageProperty(GPSLongitudeRef)\n     *                ", "             3.call getImageProperty(ImageWidth)\n     *                 4.Th", "sole.info('TC_172-7 getImageProperty GPSLongitudeRef error');\n              ", "             2.call getImageProperty(GPSLongitude)\n     *                 3.", "sole.info('TC_172-2 getImageProperty ImageLength error');\n                  ", "     imageSourceApi.getImageProperty(\"GPSLongitude\",(error,data) => {\n      ", "  * @tc.name      : getImageProperty(BitsPerSample)-promise\n     * @tc.desc ", "             3.call getImageProperty(BitsPerSample)\n     *                 4", "  * @tc.name      : getImageProperty(ImageWidth)-callback\n     * @tc.desc   ", "             2.call getImageProperty(GPSLatitude)\n     *                 3.r", "  * @tc.name      : getImageProperty(BitsPerSample)-callback\n     * @tc.desc", "sole.info('TC_172-6 getImageProperty GPSLatitudeRef error');\n               ", "             3.call getImageProperty(GPSLatitude)\n     *                 4.T"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 7, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 7, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageSource", "api_method_name": "supportedFormats", "api_method_all": "readonly supportedFormats: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 6, "api_used": "\u662f", "lines": ["Formats ${videoCaps.supportedFormats}\n            suppor", "e.max}]\n            supportedFormats ${videoCaps.support", "             2.call supportedFormats\n     * @tc.size    ", "pect(imageSourceApi.supportedFormats != undefined).asser", "pect(imagePackerApi.supportedFormats != undefined).asser", "   expect(audioCaps.supportedFormats !== undefined).asse", "Formats ${videoCaps.supportedFormats}\n        supportedH", "info(imagePackerApi.supportedFormats); \n            cons", "ole.info('audioCaps.supportedFormats: '+ audioCaps.suppo", "      : imagesource supportedFormats\n     * @tc.desc    ", "trate.max}]\n        supportedFormats ${videoCaps.support", "rmats: '+ audioCaps.supportedFormats);\n\n        // check", "      : imagepacker supportedFormats\n     * @tc.desc    ", " // check AudioCaps.supportedFormats\n        expect(audi", "info(imageSourceApi.supportedFormats); \n            cons"], "files": ["VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "image.test.js", "AudioDecoderEnumTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImagePacker", "api_method_all": "interface ImagePacker {\r\n    \r\n    packing(source: ImageSource, option: PackingOption, callback: AsyncCallback<ArrayBuffer>): void;\r\n\r\n    \r\n    packing(source: ImageSource, option: PackingOption): Promise<ArrayBuffer>;\r\n\r\n    \r\n     packing(source: PixelMap, option: PackingOption, callback: AsyncCallback<ArrayBuffer>): void;\r\n\r\n     \r\n     packing(source: PixelMap, option: PackingOption): Promise<ArrayBuffer>;\r\n\r\n    \r\n    release(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(): Promise<void>;\r\n\r\n    \r\n    readonly supportedFormats: Array<string>;\r\n  }", "api_method_name": "ImagePacker", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 18, "since": 6, "api_used": "\u662f", "lines": ["erApi = image.createImagePacker();\n            if (", "esc      : 1.create ImagePacker\n     *             ", "c.name      : createImagePacker\n     * @tc.desc    ", "name      : release ImagePacker - promise\n     * @t", "name      : release ImagePacker - callback\n     * @", "erApi = image.createImagePacker();\n        if (imag"], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImagePacker", "api_method_name": "packing", "api_method_all": "packing(source: ImageSource, option: PackingOption, callback: AsyncCallback<ArrayBuffer>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 28, "since": 6, "api_used": "\u662f", "lines": ["  * @tc.name      : packing ImageSource - callback - wrong quality\n", "  * @tc.name      : packing ImageSource - callback - wrong format\n ", "  * @tc.name      : packing ImageSource - callback\n     * @tc.desc ", "     imagePackerApi.packing(imageSourceApi, packOpts)\n             ", "  * @tc.name      : packing ImageSource - promise\n     * @tc.desc  ", "  * @tc.name      : packing ImageSource - callback - quality 100\n  ", "  * @tc.name      : packing ImageSource - callback - quality 0\n    ", "             2.call packing\n     *                 3.call return ar", "             2.call packing\n     *                 3.return array\n ", "     imagePackerApi.packing(imageSourceApi, packOpts, (err, data) =", "  * @tc.name      : packing ImageSource - callback - quality -1\n   ", "  * @tc.name      : packing ImageSource - promise - no format\n     ", "  * @tc.name      : packing ImageSource - promise - no quality\n    "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImagePacker", "api_method_name": "packing", "api_method_all": "packing(source: ImageSource, option: PackingOption): Promise<ArrayBuffer>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImagePacker", "api_method_name": "packing", "api_method_all": "packing(source: PixelMap, option: PackingOption, callback: AsyncCallback<ArrayBuffer>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 28, "since": 6, "api_used": "\u662f", "lines": ["  * @tc.name      : packing ImageSource - callback - wrong quality\n", "  * @tc.name      : packing ImageSource - callback - wrong format\n ", "  * @tc.name      : packing ImageSource - callback\n     * @tc.desc ", "     imagePackerApi.packing(imageSourceApi, packOpts)\n             ", "  * @tc.name      : packing ImageSource - promise\n     * @tc.desc  ", "  * @tc.name      : packing ImageSource - callback - quality 100\n  ", "  * @tc.name      : packing ImageSource - callback - quality 0\n    ", "             2.call packing\n     *                 3.call return ar", "             2.call packing\n     *                 3.return array\n ", "     imagePackerApi.packing(imageSourceApi, packOpts, (err, data) =", "  * @tc.name      : packing ImageSource - callback - quality -1\n   ", "  * @tc.name      : packing ImageSource - promise - no format\n     ", "  * @tc.name      : packing ImageSource - promise - no quality\n    "], "files": ["image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImagePacker", "api_method_name": "packing", "api_method_all": "packing(source: PixelMap, option: PackingOption): Promise<ArrayBuffer>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImagePacker", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 7, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImagePacker", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 7, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImagePacker", "api_method_name": "supportedFormats", "api_method_all": "readonly supportedFormats: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 6, "api_used": "\u662f", "lines": ["Formats ${videoCaps.supportedFormats}\n            suppor", "e.max}]\n            supportedFormats ${videoCaps.support", "             2.call supportedFormats\n     * @tc.size    ", "pect(imageSourceApi.supportedFormats != undefined).asser", "pect(imagePackerApi.supportedFormats != undefined).asser", "   expect(audioCaps.supportedFormats !== undefined).asse", "Formats ${videoCaps.supportedFormats}\n        supportedH", "info(imagePackerApi.supportedFormats); \n            cons", "ole.info('audioCaps.supportedFormats: '+ audioCaps.suppo", "      : imagesource supportedFormats\n     * @tc.desc    ", "trate.max}]\n        supportedFormats ${videoCaps.support", "rmats: '+ audioCaps.supportedFormats);\n\n        // check", "      : imagepacker supportedFormats\n     * @tc.desc    ", " // check AudioCaps.supportedFormats\n        expect(audi", "info(imageSourceApi.supportedFormats); \n            cons"], "files": ["VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "image.test.js", "AudioDecoderEnumTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Image", "api_method_all": "interface Image {\r\n    \r\n    clipRect: Region;\r\n\r\n    \r\n    readonly size: Size;\r\n\r\n    \r\n    readonly format: number;\r\n\r\n    \r\n    getComponent(componentType: ComponentType, callback: AsyncCallback<Component>): void;\r\n\r\n    \r\n    getComponent(componentType: ComponentType): Promise<Component>;\r\n\r\n    \r\n    release(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(): Promise<void>;\r\n  }", "api_method_name": "Image", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 553, "since": 7, "api_used": "\u662f", "lines": ["\n\tasync function getImageReceiverSurfaceId() ", "console.info(TAG + \"ImageRotation ROTATION_0 ", "   expect(cameraObj.ImageRotation.ROTATION_18", "\n\t\texpect(cameraObj.ImageRotation.ROTATION_0)", "   expect(cameraObj.ImageRotation.ROTATION_27", " + 'Entering create Image receiver')\n    var ", "  async function getImageReceiverSurfaceId() ", "console.info(TAG + \"ImageRotation ROTATION_90", "console.info(TAG + \"ImageRotation ROTATION_27", "   expect(cameraObj.ImageRotation.ROTATION_90", "\n\t\texpect(cameraObj.ImageRotation.ROTATION_90", "AG + \"--------------ImageRotation -----------", "console.info(TAG + \"ImageRotation ROTATION_18", "eiver = image.createImageReceiver(640, 480, 4", "N_0 : \" + cameraObj.ImageRotation.ROTATION_0)", "   })\n\n    \n    it('ImageRotation', 0, async ", "270 : \" + cameraObj.ImageRotation.ROTATION_27", "(TAG + 'Entering getImageReceiverSurfaceId')\n", "();\n\t})\n\t\n\t\n    it('ImageRotation', 0, async ", "   expect(cameraObj.ImageRotation.ROTATION_0)", "180 : \" + cameraObj.ImageRotation.ROTATION_18", "Id')\n      await getImageReceiverSurfaceId()\n", "\n\t\texpect(cameraObj.ImageRotation.ROTATION_27", "\n\t\texpect(cameraObj.ImageRotation.ROTATION_18", "_90 : \" + cameraObj.ImageRotation.ROTATION_90"], "files": ["CameraJSUnitEnum.test.ets", "FileAssetGetThumbnailPromise.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitPhotoAsync.test.ets", "image.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets", "FileAssetGetThumbnailCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Image", "api_method_name": "getComponent", "api_method_all": "getComponent(componentType: ComponentType, callback: AsyncCallback<Component>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 1, "since": 9, "api_used": "\u662f", "lines": ["ent('XcomponentId').getComponentSurfaceId()\n    },\n\n}"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Image", "api_method_name": "getComponent", "api_method_all": "getComponent(componentType: ComponentType): Promise<Component>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Image", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 7, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Image", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 7, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Image", "api_method_name": "clipRect", "api_method_all": "clipRect: Region", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Image", "api_method_name": "size", "api_method_all": "readonly size: Size", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3487, "since": 7, "api_used": "\u662f", "lines": ["- ENUM\n       * @tc.size      : MEDIUM\n     ", "workRenderLog: File size : Removing header: ", "Log: File totalSize size: ' +totalSize);\n   ", " ENAME\n       * @tc.size      : MEDIUM\n     ", "5\n            * @tc.size      : MEDIUM\n     ", "UM\n           * @tc.size      : MEDIUM\n     ", "ME\n           * @tc.size      : MEDIUM\n     ", "              * @tc.size      : MEDIUM\n     ", "eworkRecLog: buffer size: ' + bufferSize);\n\n", "eio.statSync(fpath).size;\n        console.in"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "favtrashTestPromise.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "SR000GHLLV.test.js", "SR000GHQBN.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "fileTestPromise.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Image", "api_method_name": "format", "api_method_all": "readonly format: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 645, "since": 6, "api_used": "\u662f", "lines": ["from camera-0 cameraformat & camerainput async", "from camera-0 cameraformat & camerainput promi", "t supported preview formats from camera-0 came", "sing camera-0 cameraformat & camerainput async", "orkRecLog: Capturer format:' + audioParamsGet.", ":' + audioParamsGet.format);\n            conso", "ams = {\n            format: audio.AudioSampleF", "sRen = {\n           format: audio.AudioSampleF", "Get supported video formats from camera-0 came", "RenderLog: Renderer format:' + audioParamsGet.", "Get supported photo format from camera-0 camer", "Rec = {\n            format: audio.AudioSampleF", "sing camera-0 cameraformat & camerainput promi"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitCameraFormat.test.ets", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_all": "interface ImageReceiver {\r\n    \r\n    readonly size: Size;\r\n\r\n    \r\n    readonly capacity: number;\r\n\r\n    \r\n    readonly format: ImageFormat;\r\n\r\n    \r\n    getReceivingSurfaceId(callback: AsyncCallback<string>): void;\r\n\r\n    \r\n    getReceivingSurfaceId(): Promise<string>;\r\n\r\n    \r\n    readLatestImage(callback: AsyncCallback<Image>): void;\r\n\r\n    \r\n    readLatestImage(): Promise<Image>;\r\n\r\n    \r\n    readNextImage(callback: AsyncCallback<Image>): void;\r\n\r\n    \r\n    readNextImage(): Promise<Image>;\r\n\r\n    \r\n    on(type: 'imageArrival', callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    release(): Promise<void>;\r\n  }", "api_method_name": "ImageReceiver", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 24, "since": 9, "api_used": "\u662f", "lines": ["Id')\n      await getImageReceiverSurfaceId()\n      aw", "  async function getImageReceiverSurfaceId() {\n    co", "eiver = image.createImageReceiver(640, 480, 4, 8)\n   ", "\n\tasync function getImageReceiverSurfaceId() {\n    co", "(TAG + 'Entering getImageReceiverSurfaceId')\n      aw"], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "getReceivingSurfaceId", "api_method_all": "getReceivingSurfaceId(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 8, "since": 9, "api_used": "\u662f", "lines": ["d1 = await receiver.getReceivingSurfaceId()\n      console.log(TAG + 'Received id:"], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "getReceivingSurfaceId", "api_method_all": "getReceivingSurfaceId(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "readLatestImage", "api_method_all": "readLatestImage(callback: AsyncCallback<Image>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "readLatestImage", "api_method_all": "readLatestImage(): Promise<Image>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "readNextImage", "api_method_all": "readNextImage(callback: AsyncCallback<Image>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "readNextImage", "api_method_all": "readNextImage(): Promise<Image>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "on", "api_method_all": "on(type: 'imageArrival', callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 7, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 7, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 7, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "size", "api_method_all": "readonly size: Size", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3487, "since": 7, "api_used": "\u662f", "lines": ["- ENUM\n       * @tc.size      : MEDIUM\n     ", "workRenderLog: File size : Removing header: ", "Log: File totalSize size: ' +totalSize);\n   ", " ENAME\n       * @tc.size      : MEDIUM\n     ", "5\n            * @tc.size      : MEDIUM\n     ", "UM\n           * @tc.size      : MEDIUM\n     ", "ME\n           * @tc.size      : MEDIUM\n     ", "              * @tc.size      : MEDIUM\n     ", "eworkRecLog: buffer size: ' + bufferSize);\n\n", "eio.statSync(fpath).size;\n        console.in"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "favtrashTestPromise.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "SR000GHLLV.test.js", "SR000GHQBN.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "fileTestPromise.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "capacity", "api_method_all": "readonly capacity: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageReceiver", "api_method_name": "format", "api_method_all": "readonly format: ImageFormat", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 645, "since": 6, "api_used": "\u662f", "lines": ["from camera-0 cameraformat & camerainput async", "from camera-0 cameraformat & camerainput promi", "t supported preview formats from camera-0 came", "sing camera-0 cameraformat & camerainput async", "orkRecLog: Capturer format:' + audioParamsGet.", ":' + audioParamsGet.format);\n            conso", "ams = {\n            format: audio.AudioSampleF", "sRen = {\n           format: audio.AudioSampleF", "Get supported video formats from camera-0 came", "RenderLog: Renderer format:' + audioParamsGet.", "Get supported photo format from camera-0 camer", "Rec = {\n            format: audio.AudioSampleF", "sing camera-0 cameraformat & camerainput promi"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitCameraFormat.test.ets", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}]}