{"subsystem_ch": "\u5143\u80fd\u529b\u5b50\u7cfb\u7edf", "subsystem_en": "aafwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\app\\appVersionInfo", "api": [{"api_class_name": "AppVersionInfo", "api_method_all": "export interface AppVersionInfo {\n\n  \n  readonly appName: string;\n\n  \n  readonly versionCode: number;\n\n  \n  readonly versionName: string;\n}", "api_method_name": "AppVersionInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["nfo('---[context_getAppVersionInfo_test_0100] check---", "ole.log(msg + \"checkAppVersionInfo appName : \" + data.", "\n    it('context_getAppVersionInfo_test_0200', 0, asyn", "e.info('[context_getAppVersionInfo_test_0200] START');", ".log(msg + \"---checkAppVersionInfo End--- \");\n    }\n  ", ".error('[context_getAppVersionInfo_test_0100] failed:'", "ck---');\n      checkAppVersionInfo('context_getAppVers", "e.info('[context_getAppVersionInfo_test_0100] data is:", "\n    it('context_getAppVersionInfo_test_0100', 0, asyn", "onContext();\n    getAppVersionInfoJsunit();\n}", "\n\n    function checkAppVersionInfo(msg, data) {\n      ", "ionTime('context_getAppVersionInfo_test_0100', timeOld", "ionInfo('context_getAppVersionInfo_test_0200', callbac", "nfo('---[context_getAppVersionInfo_test_0200] check---", "est.ets';\nimport getAppVersionInfoJsunit from './getAp", "\n        context.getAppVersionInfo((error, data) => {\n", "e.info('[context_getAppVersionInfo_test_0200] data is:", ");\n      context.getAppVersionInfo()\n        .then((da", "foJsunit from './getAppVersionInfoJsunit.test.ets';\nim", "e.info('[context_getAppVersionInfo_test_0100] START');", "ole.log(msg + \"checkAppVersionInfo versionName : \" + d", "ionTime('context_getAppVersionInfo_test_0200', timeOld", "ole.log(msg + \"checkAppVersionInfo start : \" + JSON.st", " = await context.getAppVersionInfo();\n      console.in", "ionInfo('context_getAppVersionInfo_test_0100', promise", "e.info('[context_getAppVersionInfo_test_0200] FINISH')", "ole.log(msg + \"checkAppVersionInfo versionCode : \" + d", "e.info('[context_getAppVersionInfo_test_0100] FINISH')", ".error('[context_getAppVersionInfo_test_0200] failed: "], "files": ["List.test.ets", "getAppVersionInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AppVersionInfo", "api_method_name": "appName", "api_method_all": "readonly appName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": [" appName : \" + data.appName);\n      console.log", "checkAppVersionInfo appName : \" + data.appName)", "expect(typeof (data.appName)).assertEqual(\"stri", ";\n      expect(data.appName).assertEqual(\"\");\n "], "files": ["getAppVersionInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AppVersionInfo", "api_method_name": "versionCode", "api_method_all": "readonly versionCode: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["expect(typeof (data.versionCode)).assertEqual(\"numb", "checkAppVersionInfo versionCode : \" + data.versionC", "sionCode : \" + data.versionCode);\n      console.log", ";\n      expect(data.versionCode).assertEqual(100000"], "files": ["getAppVersionInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AppVersionInfo", "api_method_name": "versionName", "api_method_all": "readonly versionName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": [";\n      expect(data.versionName).assertEqual(\"1.0.0", "checkAppVersionInfo versionName : \" + data.versionN", "sionName : \" + data.versionName);\n      expect(type", "expect(typeof (data.versionName)).assertEqual(\"stri"], "files": ["getAppVersionInfoJsunit.test.ets"], "is_white": " ", "desc": " "}]}