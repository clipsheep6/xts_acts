{"subsystem_ch": "\u5305\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "appexecfwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\bundle\\bundleInfo", "api": [{"api_class_name": "UsedScene", "api_method_all": "export interface UsedScene {\r\n  \r\n  abilities: Array<string>;\r\n\r\n  \r\n  when: string;\r\n}", "api_method_name": "UsedScene", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "UsedScene", "api_method_name": "abilities", "api_method_all": "abilities: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["peof dataInfo.reqCapabilities).assertEqual('objec", "hapModuleInfo.reqCapabilities));\n                ", "Array(data.deviceCapabilities)).assertEqual(true)", "hapModuleInfo.reqCapabilities' + JSON.stringify(h", "etails[0].usedScene.abilities[0]).assertEqual(NAM", "hapModuleInfo.reqCapabilities[i]).assertEqual('')", " app which have two abilities,\n    *          and", "hapModuleInfo.reqCapabilities).assertEqual('objec", "hapModuleInfo.reqCapabilities.length; i < len; i+"], "files": ["GetabilityInfo.test.ets", "ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UsedScene", "api_method_name": "when", "api_method_all": "when: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["etails[0].usedScene.when).assertEqual(\"alway"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ReqPermissionDetail", "api_method_all": "export interface ReqPermissionDetail {\r\n  \r\n  name: string;\r\n\r\n  \r\n  reason: string;\r\n\r\n  \r\n  usedScene: UsedScene;\r\n}", "api_method_name": "ReqPermissionDetail", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ReqPermissionDetail", "api_method_name": "name", "api_method_all": "name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 398, "since": 7, "api_used": "\u662f", "lines": ["info.get(formName), name);\n        }\n    }\n\n", "dule_1000\n    * @tc.name: getFormsInfoByModu", "dule_1200\n    * @tc.name: getFormsInfoByModu", "ect(applicationInfo.name).assertEqual(bundle", "Info_1600\n    * @tc.name: getFormsInfo : get", "dule_1800\n    * @tc.name: getFormsInfoByModu", "rtEqual('Form_JS' + name);\n        console.i", "dule_0200\n    * @tc.name: getFormsInfoByModu", "o.customizeDatas[0].name).assertEqual('origi", "me).assertEqual('JS_name1S');\n        expect", "app by wrong module name (by promise)\n    */", "   .assertEqual('[{\"name\":\"originWidgetName1", "dule_0400\n    * @tc.name: getFormsInfoByModu", "third app by bundle name and module name (by", "dule_0100\n    * @tc.name: getFormsInfoByModu", "  expect(bundleInfo.name).assertEqual(bundle", "dle name and module name (by promise)\n    */", "ormByName(dataInfo, name) {\n        console.", "dule_0600\n    * @tc.name: getFormsInfoByModu", "dule_1300\n    * @tc.name: getFormsInfoByModu", "nfo.set(dataInfo[i].name, dataInfo[i]);\n    ", "dule_0700\n    * @tc.name: getFormsInfoByModu", "dle name and module name (by callback)\n    *", "dule_1500\n    * @tc.name: getFormsInfoByModu", "me).assertEqual('JS_name1V');\n        expect", "app by wrong bundle name (by callback)\n    *", "formName, dataInfo, name, system = false, ve", "dule_1700\n    * @tc.name: getFormsInfoByModu", "app by wrong module name (by callback)\n    *", "nfo.set(dataInfo[i].name, 0)\n        }\n     ", "dule_0500\n    * @tc.name: getFormsInfoByModu", "Files(\"wrong bundle name\", (err) => {\n      ", "dule_0800\n    * @tc.name: getFormsInfoByModu", "dule_0300\n    * @tc.name: getFormsInfoByModu", "dule_1400\n    * @tc.name: getFormsInfoByModu", "    expect(dataInfo.name).assertEqual('Form_", "dule_1600\n    * @tc.name: getFormsInfoByModu", "app by wrong bundle name (by promise)\n    */", "dule_0900\n    * @tc.name: getFormsInfoByModu", "dule_1100\n    * @tc.name: getFormsInfoByModu"], "files": ["ActsBmsCleanCacheTest.test.js", "ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ActsBmsMetaDataTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "actszipfileandunzipfiletest.test.js", "ActsBmsGetBackGroundModes.test.js", "getApplicationInfoJsunit.test.ets", "ActsBmsJsTest.test.js", "GetabilityInfo.test.ets", "IsAbilityEnabledETSUnit.ets", "ActsBmsFormsInfoTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ReqPermissionDetail", "api_method_name": "reason", "api_method_all": "reason: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ermissionDetails[0].reason).assertEqual(\"Need "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ReqPermissionDetail", "api_method_name": "usedScene", "api_method_all": "usedScene: UsedScene", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["ermissionDetails[0].usedScene.abilities[0]).asser", "ermissionDetails[0].usedScene.when).assertEqual(\""], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_all": "export interface BundleInfo {\r\n  \r\n  readonly name: string;\r\n\r\n  \r\n  readonly type: string;\r\n\r\n  \r\n  readonly appId: string;\r\n\r\n  \r\n  readonly uid: number;\r\n\r\n  \r\n  readonly installTime: number;\r\n\r\n  \r\n  readonly updateTime: number;\r\n\r\n  \r\n  readonly appInfo: ApplicationInfo;\r\n\r\n  \r\n  readonly abilityInfos: Array<AbilityInfo>;\r\n\r\n  \r\n  readonly reqPermissions: Array<string>;\r\n\r\n  \r\n  readonly reqPermissionDetails: Array<ReqPermissionDetail>;\r\n\r\n  \r\n  readonly vendor: string;\r\n\r\n  \r\n  readonly versionCode: number;\r\n\r\n  \r\n  readonly versionName: string;\r\n\r\n  \r\n  readonly compatibleVersion: number;\r\n\r\n  \r\n  readonly targetVersion: number;\r\n\r\n  \r\n  readonly isCompressNativeLibs: boolean;\r\n\r\n  \r\n  readonly hapModuleInfos: Array<HapModuleInfo>;\r\n\r\n  \r\n  readonly entryModuleName: string;\r\n\r\n  \r\n  readonly cpuAbi: string;\r\n\r\n  \r\n  readonly isSilentInstallation: string;\r\n\r\n  \r\n  readonly minCompatibleVersionCode: number;\r\n\r\n  \r\n  readonly entryInstallationFree: boolean;\r\n\r\n  \r\n  readonly reqPermissionStates: Array<number>;\r\n\r\n  \r\n  readonly extensionAbilityInfo: Array<ExtensionAbilityInfo>;\r\n}", "api_method_name": "BundleInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 165, "since": 7, "api_used": "\u662f", "lines": ["t = await bundle.getBundleInfo(bundleName, 1)\n    ", "3 = await bundle.getBundleInfo(BUNDLE_NAME5, 1)\n  ", "          bundle.getBundleInfo(bundleName, 1,).the", ");\n\n    \n    it('getBundleInfoTest_100', 0, async ", "})\n\n    \n    it('getBundleInfos_0600', 0, async fu", "      await demo.getBundleInfo(NAME2, demo.BundleF", "\n    \n    it('getAllBundleInfoTest_100', 0, async ", "{\n        bundle.getBundleInfo(bundleName).then(da", " {\n\n    \n    it('getBundleInfo_0100', 0, async fun", "@tc.name BUNDLE::getBundleInfos\n     * @tc.desc Te", "    * @tc.number getBundleInfo_0200\n     * @tc.nam", " await bundle.getAllBundleInfo(1, USERID)\n        ", "\n     */\n    it('getBundleInfo_0200', 0, async fun", "})\n\n    \n    it('getBundleInfo_1200', 0, async fun", "\n     */\n    it('getBundleInfo_0700', 0, async fun", "  console.debug('getBundleInfoTest_100 start');\n  ", "          bundle.getBundleInfo(BUNDLE_NAME2, 1, (e", "   await demo.getAllBundleInfo(0, (error, data) =>", "t = await bundle.getBundleInfo(bundleName, 1);\n   ", "nfo = await demo.getBundleInfo(NAME1, \n           ", "nfo = await demo.getBundleInfo(NAME1, demo.BundleF", "})\n\n    \n    it('getBundleInfos_0100', 0, async fu", "    * @tc.number getBundleInfo_0700\n     * @tc.nam", ";\n        bundle.getBundleInfo(bundleName, 1, call", " = await demo.getAllBundleInfo(0)\n            expe", "onsole.debug('getAllBundleInfoTest_100 start');\n  ", "o = await bundle.getBundleInfo(bundleName)\n       ", "          bundle.getBundleInfo(bundleName, 16).the", "})\n\n    \n    it('getBundleInfo_1100', 0, async fun", " * @tc.desc Test getBundleInfos interfaces with tw", "          bundle.getBundleInfo(bundleName, 1, call", "       bundle.getAllBundleInfo(DEFAULT_FLAG).then(", "          bundle.getBundleInfo(bundleName, 1, asyn", "      await demo.getBundleInfo(NAME1, demo.BundleF", "@tc.name BUNDLE::getBundleInfo\n     * @tc.desc Tes", "})\n\n    \n    it('getBundleInfo_0600', 0, async fun", " * @tc.desc Test getBundleInfo interfaces with two", "    * @tc.number getBundleInfos_0200\n     * @tc.na", ";\n        bundle.getBundleInfo(LAUNCHER_BUNDLE_NAM", "nfo = await demo.getBundleInfo(NAME2, demo.BundleF", "       bundle.getAllBundleInfo(1, USERID, (err, bu"], "files": ["ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "ActsBmsJsTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "name", "api_method_all": "readonly name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 398, "since": 7, "api_used": "\u662f", "lines": ["info.get(formName), name);\n        }\n    }\n\n", "dule_1000\n    * @tc.name: getFormsInfoByModu", "dule_1200\n    * @tc.name: getFormsInfoByModu", "ect(applicationInfo.name).assertEqual(bundle", "Info_1600\n    * @tc.name: getFormsInfo : get", "dule_1800\n    * @tc.name: getFormsInfoByModu", "rtEqual('Form_JS' + name);\n        console.i", "dule_0200\n    * @tc.name: getFormsInfoByModu", "o.customizeDatas[0].name).assertEqual('origi", "me).assertEqual('JS_name1S');\n        expect", "app by wrong module name (by promise)\n    */", "   .assertEqual('[{\"name\":\"originWidgetName1", "dule_0400\n    * @tc.name: getFormsInfoByModu", "third app by bundle name and module name (by", "dule_0100\n    * @tc.name: getFormsInfoByModu", "  expect(bundleInfo.name).assertEqual(bundle", "dle name and module name (by promise)\n    */", "ormByName(dataInfo, name) {\n        console.", "dule_0600\n    * @tc.name: getFormsInfoByModu", "dule_1300\n    * @tc.name: getFormsInfoByModu", "nfo.set(dataInfo[i].name, dataInfo[i]);\n    ", "dule_0700\n    * @tc.name: getFormsInfoByModu", "dle name and module name (by callback)\n    *", "dule_1500\n    * @tc.name: getFormsInfoByModu", "me).assertEqual('JS_name1V');\n        expect", "app by wrong bundle name (by callback)\n    *", "formName, dataInfo, name, system = false, ve", "dule_1700\n    * @tc.name: getFormsInfoByModu", "app by wrong module name (by callback)\n    *", "nfo.set(dataInfo[i].name, 0)\n        }\n     ", "dule_0500\n    * @tc.name: getFormsInfoByModu", "Files(\"wrong bundle name\", (err) => {\n      ", "dule_0800\n    * @tc.name: getFormsInfoByModu", "dule_0300\n    * @tc.name: getFormsInfoByModu", "dule_1400\n    * @tc.name: getFormsInfoByModu", "    expect(dataInfo.name).assertEqual('Form_", "dule_1600\n    * @tc.name: getFormsInfoByModu", "app by wrong bundle name (by promise)\n    */", "dule_0900\n    * @tc.name: getFormsInfoByModu", "dule_1100\n    * @tc.name: getFormsInfoByModu"], "files": ["ActsBmsCleanCacheTest.test.js", "ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ActsBmsMetaDataTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "actszipfileandunzipfiletest.test.js", "ActsBmsGetBackGroundModes.test.js", "getApplicationInfoJsunit.test.ets", "ActsBmsJsTest.test.js", "GetabilityInfo.test.ets", "IsAbilityEnabledETSUnit.ets", "ActsBmsFormsInfoTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "type", "api_method_all": "readonly type: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 254, "since": 7, "api_used": "\u662f", "lines": ["r');\n        expect(typeof dataInfo.type).as", "             expect(typeof hapModuleInfo.req", "g');\n        expect(typeof dataInfo.moduleNa", "t');\n        expect(typeof dataInfo.deviceTy", "r');\n        expect(typeof dataInfo.window.a", "             expect(typeof hapModuleInfo.abi", "g');\n        expect(typeof dataInfo.updateDu", "o) {\n        expect(typeof dataInfo.name).as", "g');\n        expect(typeof dataInfo.bundleNa", "n');\n        expect(typeof dataInfo.jsCompon", "r');\n        expect(typeof dataInfo.backgrou", "g');\n        expect(typeof dataInfo.window).", "g');\n        expect(typeof dataInfo.labelId)", "r');\n        expect(typeof dataInfo.reqCapab", "r');\n        expect(typeof dataInfo.iconId).", "e();\n        expect(typeof dataInfo.name).as", "\n            expect(typeof dataInfo.customiz", "             expect(typeof data).assertEqual", "r');\n        expect(typeof dataInfo.defaultD", "r');\n        expect(typeof dataInfo.supportD", "ect(typeof dataInfo.type).assertEqual('numbe", "ef = Object.getPrototypeOf(global) || global", "t');\n        expect(typeof dataInfo.window.d", "hapModuleInfo devicetypes===' + JSON.stringi", "\n            expect(typeof data).assertEqual", "g');\n        expect(typeof dataInfo.supporte", "\n            expect(typeof err).assertEqual(", "n');\n        expect(typeof dataInfo.formConf", "=install========' + typeof installer);\n     ", "   }\n        expect(typeof dataInfo.src).ass", "             expect(typeof err).assertEqual(", "DE);\n        expect(typeof dataInfo.defaultF", "g');\n        expect(typeof dataInfo.label).a", "    expect(dataInfo.type).assertEqual(bundle", "g');\n        expect(typeof dataInfo.descript", "g');\n        expect(typeof dataInfo.abilityN", "r');\n        expect(typeof dataInfo.icon).as", "t');\n        expect(typeof dataInfo.relatedB", "g');\n        expect(typeof dataInfo.formVisi", "ime)\n        expect(typeof dataInfo.customiz"], "files": ["GetAbilityLabelJsUnit.test.ets", "ActsBmsMetaDataTest.test.js", "ActsBmsHapModuleTest.test.js", "getAllApplicationInfoJsunit.test.ets", "Utils.ets", "ExampleJsunit.test.js", "second.ets", "getApplicationInfoJsunit.test.ets", "ActsBmsJsTest.test.js", "GetabilityInfo.test.ets", "index.js", "IsApplicationEnabledETSUnit.ets", "IsAbilityEnabledETSUnit.ets", "ActsBmsFormsInfoTest.test.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "appId", "api_method_all": "readonly appId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["    expect(datainfo.appId).assertContain(NAME"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "uid", "api_method_all": "readonly uid: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["expect(typeof (data.uid)).assertEqual('numb", "NameForUid(dataInfo.uid).then(data => {\n   ", "  expect(bundleInfo.uid).assertLarger(10000", ";\n      expect(data.uid > 0).assertEqual(tr", "ect(typeof (data[i].uid)).assertEqual('numb", "    expect(datainfo.uid).assertLarger(2099)", "        if (data[i].uid !== 0) {\n          ", "     expect(data[i].uid > 0).assertEqual(tr", "NameForUid(dataInfo.uid)\n        expect(dat"], "files": ["getApplicationInfoJsunit.test.ets", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "ActsBmsJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "installTime", "api_method_all": "readonly installTime: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["    expect(datainfo.installTime).assertLarger(0)\n  "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "updateTime", "api_method_all": "readonly updateTime: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["    expect(dataInfo.updateTime).assertLarger(0)\n  ", "    expect(datainfo.updateTime).assertLarger(0)\n  "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "appInfo", "api_method_all": "readonly appInfo: ApplicationInfo", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 228, "since": 7, "api_used": "\u662f", "lines": ["    expect(datainfo.appInfo.iconId >= 0).assert", "    expect(datainfo.appInfo.systemApp).assertEq", "j = 0; j < datainfo.appInfo.moduleInfos; j++) {", "    expect(datainfo.appInfo.name).assertEqual(N", "    expect(datainfo.appInfo.enabled).assertEqua", "    expect(datainfo.appInfo.moduleInfos[j].modu", "    expect(datainfo.appInfo.description).assert", "nit() {\n  describe('appInfoTest', function () {", "    expect(datainfo.appInfo.descriptionId >= 0)", "    expect(datainfo.appInfo.labelId >= 0).asser", "    expect(datainfo.appInfo.label).assertEqual(", "    expect(datainfo.appInfo.supportedModes).ass", "    expect(datainfo.appInfo.icon).assertEqual(\""], "files": ["getApplicationInfoJsunit.test.ets", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "abilityInfos", "api_method_all": "readonly abilityInfos: Array<AbilityInfo>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 89, "since": 7, "api_used": "\u662f", "lines": ["       expect(data3.abilityInfos[3].backgroundModes)", "ata5======\" + data5.abilityInfos.length)\n           ", "e.info(\"=====>data5.abilityInfos======\" + JSON.strin", "      expect(result.abilityInfos[0].srcLanguage).ass", "et i = 0; i < data5.abilityInfos.length; i++) {\n    ", " j < bundleInfos[i].abilityInfos.length; j++) {\n    ", "         if (result.abilityInfos.length == NUM_TWO) ", "      expect(result.abilityInfos[0].srcPath).assertE", "      expect(result.abilityInfos[1].name).assertEqua", "         if (result.abilityInfos.length == NUM_FOUR)", "      expect(result.abilityInfos[0].name).assertEqua", "ON.stringify(result.abilityInfos));\n                ", "SON.stringify(data5.abilityInfos[3].backgroundModes)", "e.info(\"=====>data3.abilityInfos======\" + JSON.strin", "SON.stringify(data5.abilityInfos[2].backgroundModes)", "         if (result.abilityInfos.length == 1) {\n    ", "       expect(data3.abilityInfos[1].backgroundModes)", "SON.stringify(data3.abilityInfos[3].backgroundModes)", "gify(bundleInfos[i].abilityInfos))\n                 ", "      expect(result.abilityInfos.length).assertEqual", "ata3======\" + data3.abilityInfos.length)\n           ", "      expect(result.abilityInfos[1].srcPath).assertE", "et q = 0; q < data3.abilityInfos.length; q++) {\n    ", "       expect(data3.abilityInfos[2].backgroundModes)", "       expect(data5.abilityInfos[1].backgroundModes)", "      expect(result.abilityInfos[1].srcLanguage).ass", "   + bundleInfos[i].abilityInfos[j].name)\n          ", "pect(bundleInfos[i].abilityInfos[j].backgroundModes)", " if (bundleInfos[i].abilityInfos[j].name == 'com.exa", "SON.stringify(data3.abilityInfos[2].backgroundModes)", "       expect(data5.abilityInfos[2].backgroundModes)", "       expect(data5.abilityInfos[3].backgroundModes)"], "files": ["ActsBmsGetBackGroundModes.test.js", "ExampleJsunit.test.js", "ActsBmsJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "reqPermissions", "api_method_all": "readonly reqPermissions: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["  expect(bundleInfo.reqPermissions[4]).assertEqual(\"oh", "  expect(bundleInfo.reqPermissions.length).assertEqual", "  expect(bundleInfo.reqPermissions[1]).assertEqual(\"oh", "  expect(bundleInfo.reqPermissions[0]).assertEqual(\"oh", "    expect(dataInfo.reqPermissions.length).assertEqual", "  expect(bundleInfo.reqPermissions[3]).assertEqual(\"oh", "    expect(datainfo.reqPermissions[0]).assertEqual(\"co", "  expect(bundleInfo.reqPermissions[2]).assertEqual(\"oh", "  expect(bundleInfo.reqPermissions[5]).assertEqual(\"oh"], "files": ["ExampleJsunit.test.js", "ActsBmsAccessTokenTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "reqPermissionDetails", "api_method_all": "readonly reqPermissionDetails: Array<ReqPermissionDetail>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["    expect(datainfo.reqPermissionDetails[0].usedScene.abilit", "    expect(datainfo.reqPermissionDetails[0].reason).assertEq", "    expect(datainfo.reqPermissionDetails[0].usedScene.when).", "    expect(datainfo.reqPermissionDetails[0].name).assertEqua", "    expect(dataInfo.reqPermissionDetails.length).assertEqual"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "vendor", "api_method_all": "readonly vendor: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": ["NDLE = 'com.example.vendor1';\nconst DESIGHN_WI", "msInfo('com.example.vendor1', (err, data) => {", "eName: 'com.example.vendor1',\n                ", "me, system = false, vendor = false) {\n        ", "tion for system and vendor app (by promise)\n  ", "msInfo('com.example.vendor1');\n        expect(", "    expect(dataInfo.vendor).assertEqual(\"examp", "tion for system and vendor app (by callback)\n ", "ame1 = 'com.example.vendor1.MainAbility';\n    ", "Module('com.example.vendor1', 'entry');\n      ", "  console.debug('===vendor formInfo is ' + JSO", "    expect(datainfo.vendor).assertEqual(\"ohos\"", "  }\n            if (vendor) {\n                ", "    expect(datainfo.vendor).assertEqual(\"examp", "yName: 'com.example.vendor1.MainAbility',\n    ", "Module('com.example.vendor1', 'entry', (err, d"], "files": ["ActsBmsMetaDataTest.test.js", "ExampleJsunit.test.js", "ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "versionCode", "api_method_all": "readonly versionCode: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": ["    expect(datainfo.versionCode).assertEqual(VERSIO", "    expect(datainfo.versionCode).assertEqual(100000", "    expect(dataInfo.versionCode).assertEqual(VERSIO", "    expect(datainfo.versionCode).assertEqual(1)\n   "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "versionName", "api_method_all": "readonly versionName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": ["    expect(dataInfo.versionName).assertLarger(0)\n  ", "    expect(datainfo.versionName).assertLarger(0)\n  ", "    expect(datainfo.versionName).assertLarger(0);\n ", "    expect(datainfo.versionName.length).assertLarge"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "compatibleVersion", "api_method_all": "readonly compatibleVersion: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["    expect(dataInfo.compatibleVersion).assertEqual(5)\n   ", "    expect(datainfo.compatibleVersion).assertEqual(5)\n   "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "targetVersion", "api_method_all": "readonly targetVersion: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["    expect(dataInfo.targetVersion).assertEqual(5)\n   ", "    expect(datainfo.targetVersion).assertEqual(5)\n   "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "isCompressNativeLibs", "api_method_all": "readonly isCompressNativeLibs: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["    expect(dataInfo.isCompressNativeLibs).assertEqual(false)", "    expect(datainfo.isCompressNativeLibs).assertEqual(false)"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "hapModuleInfos", "api_method_all": "readonly hapModuleInfos: Array<HapModuleInfo>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["         if (result.hapModuleInfos.length == 2) {\n    ", "apModuleInfo(result.hapModuleInfos[1]);\n              ", "      expect(result.hapModuleInfos[1].moduleName).asse", "         if (result.hapModuleInfos.length > 0) {\n     ", "apModuleInfo = data.hapModuleInfos[0];\n               ", "      expect(result.hapModuleInfos[1].mainAbilityName)", "s = 0; s < dataInfo.hapModuleInfos; s++) {\n           ", "      expect(result.hapModuleInfos[0].mainAbilityName)", "           if (data.hapModuleInfos.length == 1) {\n    ", "s = 0; s < datainfo.hapModuleInfos; s++) {\n           ", "ModuleInfo = result.hapModuleInfos[0];\n               ", "apModuleInfo(result.hapModuleInfos[0]);\n              ", "        expect(data.hapModuleInfos.length).assertEqual", "         if (result.hapModuleInfos.length == 1) {\n    ", "e========' + result.hapModuleInfos[0].mainAbilityName)", "      expect(result.hapModuleInfos.length).assertEqual", "      expect(result.hapModuleInfos[0].moduleName).asse"], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "entryModuleName", "api_method_all": "readonly entryModuleName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["N.stringify(data[i].entryModuleName.length))\n          ", "    expect(dataInfo.entryModuleName).assertEqual(\"entry", "    expect(datainfo.entryModuleName).assertEqual(\"entry"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "cpuAbi", "api_method_all": "readonly cpuAbi: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["    expect(datainfo.cpuAbi).assertEqual(\"\")\n  "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "isSilentInstallation", "api_method_all": "readonly isSilentInstallation: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["    expect(dataInfo.isSilentInstallation.length).assertEqual", "    expect(datainfo.isSilentInstallation.length).assertEqual"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "minCompatibleVersionCode", "api_method_all": "readonly minCompatibleVersionCode: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["    expect(datainfo.minCompatibleVersionCode).assertEqual(0)\n   ", "    expect(dataInfo.minCompatibleVersionCode).assertEqual(0)\n   "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "entryInstallationFree", "api_method_all": "readonly entryInstallationFree: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["    expect(datainfo.entryInstallationFree).assertEqual(false)", "    expect(dataInfo.entryInstallationFree).assertEqual(false)"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "reqPermissionStates", "api_method_all": "readonly reqPermissionStates: Array<number>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": ["  expect(bundleInfo.reqPermissionStates[2]).assertEqual(-1)", "  expect(bundleInfo.reqPermissionStates[5]).assertEqual(0);", "  expect(bundleInfo.reqPermissionStates[0]).assertEqual(-1)", "  expect(bundleInfo.reqPermissionStates.length).assertEqual", "  expect(bundleInfo.reqPermissionStates[4]).assertEqual(0);", "  expect(bundleInfo.reqPermissionStates[3]).assertEqual(-1)", "ect(applicationInfo.reqPermissionStates.length).assertEqual", "ect(applicationInfo.reqPermissionStates.length).assertLarge", "        expect(data.reqPermissionStates.length).assertLarge", "  expect(bundleInfo.reqPermissionStates[1]).assertEqual(0);", "        expect(data.reqPermissionStates[0]).assertEqual(0);", "  expect(bundleInfo.reqPermissionStates[2]).assertEqual(0);", "        expect(data.reqPermissionStates[1]).assertEqual(0);", "  expect(bundleInfo.reqPermissionStates[3]).assertEqual(0);", "  expect(bundleInfo.reqPermissionStates[1]).assertEqual(-1)"], "files": ["ActsBmsAccessTokenTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleInfo", "api_method_name": "extensionAbilityInfo", "api_method_all": "readonly extensionAbilityInfo: Array<ExtensionAbilityInfo>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}