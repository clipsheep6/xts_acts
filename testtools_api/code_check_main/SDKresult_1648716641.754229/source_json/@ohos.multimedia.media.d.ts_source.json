{"subsystem_ch": "\u5a92\u4f53\u5b50\u7cfb\u7edf", "subsystem_en": "multimedia", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.multimedia.media", "api": [{"api_class_name": "media", "api_method_all": "declare namespace media {\n  \n  function createAudioPlayer(): AudioPlayer;\n\n  \n  function createAudioRecorder(): AudioRecorder;\n\n  \n  function createVideoPlayer(callback: AsyncCallback<VideoPlayer>): void;\n  \n  function createVideoPlayer() : Promise<VideoPlayer>;\n\n  \n  function createVideoRecorder(callback: AsyncCallback<VideoRecorder>): void;\n  \n  function createVideoRecorder(): Promise<VideoRecorder>;\n\n  \n  enum MediaErrorCode {\n    \n    MSERR_OK = 0,\n\n    \n    MSERR_NO_MEMORY = 1,\n\n    \n    MSERR_OPERATION_NOT_PERMIT = 2,\n\n    \n    MSERR_INVALID_VAL = 3,\n\n    \n    MSERR_IO = 4,\n\n    \n    MSERR_TIMEOUT = 5,\n\n    \n    MSERR_UNKNOWN = 6,\n\n    \n    MSERR_SERVICE_DIED = 7,\n\n    \n    MSERR_INVALID_STATE = 8,\n\n    \n    MSERR_UNSUPPORTED = 9,\n  }\n\n  \n  enum BufferingInfoType {\n    \n    BUFFERING_START = 1,\n\n    \n    BUFFERING_END = 2,\n\n    \n    BUFFERING_PERCENT = 3,\n\n    \n    CACHED_DURATION = 4,\n  }\n\n  \n  type AudioState = 'idle' | 'playing' | 'paused' | 'stopped' | 'error';\n\n  \n  interface AudioPlayer {\n    \n    play(): void;\n\n    \n    pause(): void;\n\n    \n    stop(): void;\n\n    \n     reset(): void;\n\n    \n    seek(timeMs: number): void;\n\n    \n    setVolume(vol: number): void;\n\n    \n    release(): void;\n    \n    getTrackDescription(callback: AsyncCallback<Array<MediaDescription>>): void;\n\n    \n    getTrackDescription() : Promise<Array<MediaDescription>>;\n\n    \n    on(type: 'bufferingUpdate', callback: (infoType: BufferingInfoType, value: number) => void): void;\n    \n    src: string;\n\n    \n    loop: boolean;\n\n    \n    readonly currentTime: number;\n\n    \n    readonly duration: number;\n\n    \n    readonly state: AudioState;\n\n    \n    on(type: 'play' | 'pause' | 'stop' | 'reset' | 'dataLoad' | 'finish' | 'volumeChange', callback: () => void): void;\n\n    \n    on(type: 'timeUpdate', callback: Callback<number>): void;\n\n    \n    on(type: 'error', callback: ErrorCallback): void;\n  }\n\n  \n  enum AudioEncoder {\n    \n    DEFAULT = 0,\n\n    \n    AMR_NB = 1,\n\n    \n    AMR_WB = 2,\n\n    \n    AAC_LC = 3,\n\n    \n    HE_AAC = 4\n  }\n\n  \n  enum AudioOutputFormat {\n    \n    DEFAULT = 0,\n\n    \n    MPEG_4 = 2,\n\n    \n    AMR_NB = 3,\n\n    \n    AMR_WB = 4,\n\n    \n    AAC_ADTS = 6\n  }\n\n  \n  interface Location {\n    \n    latitude: number;\n\n    \n    longitude: number;\n  }\n\n  \n  interface AudioRecorderConfig {\n    \n    audioEncoder?: AudioEncoder;\n\n    \n    audioEncodeBitRate?: number;\n\n    \n    audioSampleRate?: number;\n\n    \n    numberOfChannels?: number;\n\n    \n    format?: AudioOutputFormat;\n\n    \n    uri: string;\n\n    \n    location?: Location;\n\n    \n    audioEncoderMime?: CodecMimeType;\n    \n    fileFormat?: ContainerFormatType;\n  }\n\n  \n  interface AudioRecorder {\n    \n    prepare(config: AudioRecorderConfig): void;\n\n    \n    start(): void;\n\n    \n    pause(): void;\n\n    \n    resume(): void;\n\n    \n    stop(): void;\n\n    \n    release(): void;\n\n    \n    reset(): void;\n\n    \n    on(type: 'prepare' | 'start' | 'pause' | 'resume' | 'stop' | 'release' | 'reset', callback: () => void): void;\n\n    \n    on(type: 'error', callback: ErrorCallback): void;\n  }\n\n  \n  type VideoRecordState = 'idle' | 'prepared' | 'playing' | 'paused' | 'stopped' | 'error';\n\n  \n  interface VideoRecorder {\n    \n    prepare(config: VideoRecorderConfig, callback: AsyncCallback<void>): void;\n    \n    prepare(config: VideoRecorderConfig): Promise<void>;\n    \n    getInputSurface(callback: AsyncCallback<string>): void;\n    \n    getInputSurface(): Promise<string>;\n    \n    start(callback: AsyncCallback<void>): void;\n    \n    start(): Promise<void>;\n    \n    pause(callback: AsyncCallback<void>): void;\n    \n    pause(): Promise<void>;\n    \n    resume(callback: AsyncCallback<void>): void;\n    \n    resume(): Promise<void>;\n    \n    stop(callback: AsyncCallback<void>): void;\n    \n    stop(): Promise<void>;\n    \n    release(callback: AsyncCallback<void>): void;\n    \n    release(): Promise<void>;\n    \n    reset(callback: AsyncCallback<void>): void;\n     \n    reset(): Promise<void>;\n    \n    on(type: 'error', callback: ErrorCallback): void;\n\n    \n     readonly state: VideoRecordState;\n  }\n\n  \n  type VideoPlayState = 'idle' | 'prepared' | 'playing' | 'paused' | 'stopped' | 'error';\n\n  \n  enum PlaybackSpeed {\n    \n    SPEED_FORWARD_0_75_X = 0,\n    \n    SPEED_FORWARD_1_00_X = 1,\n    \n    SPEED_FORWARD_1_25_X = 2,\n    \n    SPEED_FORWARD_1_75_X = 3,\n    \n    SPEED_FORWARD_2_00_X = 4,\n  }\n\n  \n interface VideoPlayer {\n    \n    setDisplaySurface(surfaceId: string, callback: AsyncCallback<void>): void;\n    \n    setDisplaySurface(surfaceId: string): Promise<void>;\n    \n    prepare(callback: AsyncCallback<void>): void;\n     \n    prepare(): Promise<void>;\n    \n    play(callback: AsyncCallback<void>): void;\n     \n    play(): Promise<void>;\n    \n    pause(callback: AsyncCallback<void>): void;\n     \n    pause(): Promise<void>;\n    \n    stop(callback: AsyncCallback<void>): void;\n     \n    stop(): Promise<void>;\n    \n    reset(callback: AsyncCallback<void>): void;\n     \n    reset(): Promise<void>;\n    \n    seek(timeMs: number, callback: AsyncCallback<number>): void;\n    \n     seek(timeMs: number, mode:SeekMode, callback: AsyncCallback<number>): void;\n     \n    seek(timeMs: number, mode?:SeekMode): Promise<number>;\n    \n    setVolume(vol: number, callback: AsyncCallback<void>): void;\n     \n    setVolume(vol: number): Promise<void>;\n    \n    release(callback: AsyncCallback<void>): void;\n     \n    release(): Promise<void>;\n    \n    getTrackDescription(callback: AsyncCallback<Array<MediaDescription>>): void;\n\n    \n    getTrackDescription() : Promise<Array<MediaDescription>>;\n\n    \n    url: string;\n\n    \n    loop: boolean;\n\n    \n    readonly currentTime: number;\n\n    \n    readonly duration: number;\n\n    \n    readonly state: VideoPlayState;\n\n    \n    readonly width: number;\n\n    \n    readonly height: number;\n\n    \n    setSpeed(speed:number, callback: AsyncCallback<number>): void;\n    \n    setSpeed(speed:number): Promise<number>;\n\n    \n    on(type: 'playbackCompleted', callback: Callback<void>): void;\n\n    \n    on(type: 'bufferingUpdate', callback: (infoType: BufferingInfoType, value: number) => void): void;\n\n    \n    on(type: 'startRenderFrame', callback: Callback<void>): void;\n\n    \n    on(type: 'videoSizeChanged', callback: (width: number, height: number) => void): void;\n\n    \n    on(type: 'error', callback: ErrorCallback): void;\n  }\n\n  \n  enum ContainerFormatType {\n    \n    CFT_MPEG_4 = \"mp4\",\n\n    \n    CFT_MPEG_4A = \"m4a\",\n  }\n\n  \n  enum MediaType {\n    \n    MEDIA_TYPE_AUD = 0,\n    \n    MEDIA_TYPE_VID = 1,\n  }\n\n  \n  enum MediaDescriptionKey {\n    \n    MD_KEY_TRACK_INDEX = \"track_index\",\n\n    \n    MD_KEY_TRACK_TYPE = \"track_type\",\n\n    \n    MD_KEY_CODEC_MIME = \"codec_mime\",\n\n    \n    MD_KEY_DURATION = \"duration\",\n\n    \n    MD_KEY_BITRATE = \"bitrate\",\n\n    \n    MD_KEY_WIDTH = \"width\",\n\n    \n    MD_KEY_HEIGHT = \"height\",\n\n    \n    MD_KEY_FRAME_RATE = \"frame_rate\",\n\n    \n    MD_KEY_AUD_CHANNEL_COUNT = \"channel_count\",\n\n    \n    MD_KEY_AUD_SAMPLE_RATE = \"sample_rate\",\n  }\n\n  \n  interface VideoRecorderProfile {\n    \n    readonly audioBitrate: number;\n\n    \n    readonly audioChannels: number;\n\n    \n    readonly audioCodec: CodecMimeType;\n\n    \n    readonly audioSampleRate: number;\n\n    \n    readonly fileFormat: ContainerFormatType;\n\n    \n    readonly videoBitrate: number;\n\n    \n    readonly videoCodec: CodecMimeType;\n\n    \n    readonly videoFrameWidth: number;\n\n    \n    readonly videoFrameHeight: number;\n\n    \n    readonly videoFrameRate: number;\n  }\n\n  \n  enum AudioSourceType {\n    \n    AUDIO_SOURCE_TYPE_DEFAULT = 0,\n    \n    AUDIO_SOURCE_TYPE_MIC = 1,\n  }\n\n  \n  enum VideoSourceType {\n    \n    VIDEO_SOURCE_TYPE_SURFACE_YUV = 0,\n    \n    VIDEO_SOURCE_TYPE_SURFACE_ES = 1,\n  }\n\n  \n  interface VideoRecorderConfig {\n    \n    audioSourceType: AudioSourceType;\n    \n    videoSourceType: VideoSourceType;\n    \n    profile: VideoRecorderProfile;\n    \n    url: string;\n    \n    rotation?: number;\n    \n    location?: Location;\n  }\n\n  \n  interface MediaDescription {\n    \n    [key : string]: Object;\n  }\n\n  \n  enum SeekMode {\n    \n    SEEK_NEXT_SYNC = 0,\n    \n    SEEK_PREV_SYNC = 1,\n  }\n\n  \n   enum CodecMimeType {\n    \n    VIDEO_H263 = 'video/h263',\n    \n    VIDEO_AVC = 'video/avc',\n    \n    VIDEO_MPEG2 = 'video/mpeg2',\n    \n    VIDEO_MPEG4 = 'video/mp4v-es',\n\n    \n    VIDEO_VP8 = 'video/x-vnd.on2.vp8',\n\n    \n    AUDIO_AAC = 'audio/mp4a-latm',\n\n    \n    AUDIO_VORBIS = 'audio/vorbis',\n\n    \n    AUDIO_FLAC = 'audio/flac',\n  }\n}", "api_method_name": "media", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 2574, "since": 0, "api_used": "\u662f", "lines": ["ces/rawfile';\n\t\tvar mediaDirTemp = '/data'\n  ", "dioRendererOptions, mediaDir+'/StarWars10s-2C", "nction () {\n    var mediaDir;\n    var dateTim", "200);\n        //var mediaDirTemp = path1 + pa", "ramework');\n    var mediaDir;\n\n    async func", "io from '@ohos.multimedia.audio';\n\nimport {de", "dioRendererOptions, mediaDir+'/StarWars10s-1C", " - Callback- Change media Volume and check\n  ", " - Promise - Change media Volume and check\n  ", "te level');\n        mediaDir = await getPathN", "mp);\n        return mediaDirTemp;\n\n    }\n\n   ", "source DIR Path : '+mediaDirTemp);\n        re", "t sleep(200);\n\t\tvar mediaDirTemp = '/data'\n  ", "io from '@ohos.multimedia.audio';\nimport file"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "media", "api_method_name": "createAudioPlayer", "api_method_all": "function createAudioPlayer(): AudioPlayer;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 9, "since": 6, "api_used": "\u662f", "lines": ["audioPlayer = media.createAudioPlayer();\n        if (type", "et parameters after createAudioPlayer\n        * @tc.desc ", "audioPlayer = media.createAudioPlayer();\n        await ge", " @tc.name      : 01.createAudioPlayer->setVolume\n        ", "audioPlayer = media.createAudioPlayer();\n        audioPla", "AudioPlayer = media.createAudioPlayer();\n        testAudi", "audioPlayer = media.createAudioPlayer();\n    let isTimeOu", "audioPlayer = media.createAudioPlayer();\n    let loopValu"], "files": ["PlayerLocalTestAudioFUNC.test.js", "PlayerLocalTestAudioFormat.test.js", "PlayerLocalTestAudioAPI.test.js", "HttpPlayerCompatibilityTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "media", "api_method_name": "createAudioRecorder", "api_method_all": "function createAudioRecorder(): AudioRecorder;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 7, "since": 6, "api_used": "\u662f", "lines": ["'SUB_MEDIA_RECORDER_createAudioRecorder_API_0100', 0, async", "dioRecorder = media.createAudioRecorder();\n    const BASIC_", "udioRecorder= media.createAudioRecorder();\n        expect(t", "dioRecorder = media.createAudioRecorder();\n    }\n\n    befor", "dioRecorder = media.createAudioRecorder();\n    const END_ST", "dioRecorder = media.createAudioRecorder();\n    }\n\n    funct"], "files": ["RecorderLocalTestAudioAPI.test.js", "RecorderLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "media", "api_method_name": "createVideoPlayer", "api_method_all": "function createVideoPlayer(callback: AsyncCallback<VideoPlayer>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 54, "since": 8, "api_used": "\u662f", "lines": [" console.info('case createVideoPlayer success ');\n            } else {\n      ", " console.info('case createVideoPlayer success!!');\n                toNextStep", "nfo('in case error: createVideoPlayer fail');\n                done();\n       ", "ole.info('in case : createVideoPlayer success');\n            } else {\n       ", " console.info('case createVideoPlayer is failed');\n                expect().a", " console.info('case createVideoPlayer success');\n                videoPlayer ", "ft();\n        media.createVideoPlayer((err, video) => {\n            if (typeo"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "media", "api_method_name": "createVideoPlayer", "api_method_all": "function createVideoPlayer() : Promise<VideoPlayer>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 42, "since": 8, "api_used": "\u662f", "lines": ["        await media.createVideoPlayer().then((video) => {\n            if (typ"], "files": ["VideoDecoderEnumTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "media", "api_method_name": "createVideoRecorder", "api_method_all": "function createVideoRecorder(callback: AsyncCallback<VideoRecorder>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 37, "since": 9, "api_used": "\u662f", "lines": ["ft();\n        media.createVideoRecorder((err, recorder) => {\n            if (ty", "console.info(TAG + 'createVideoRecorder called')\n      videoRecorder = recorder", "rface() {\n    media.createVideoRecorder((err, recorder) => {\n      console.info", "rface() {\n    media.createVideoRecorder((err, recorder) => {\n      if (!err)\n  ", " console.info('case createVideoRecorder error hanpped');\n                toNext", " console.info('case createVideoRecorder called');\n            if (typeof (recor", "console.info(TAG + 'createVideoRecorder called')\n      videoRecorderPromise = r", "= fdPath;\n    media.createVideoRecorder((err, recorder) => {\n      console.info", " console.info('case createVideoRecorder success ');\n                videoRecord"], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "media", "api_method_name": "createVideoRecorder", "api_method_all": "function createVideoRecorder(): Promise<VideoRecorder>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 24, "since": 9, "api_used": "\u662f", "lines": ["        await media.createVideoRecorder().then((recorder) => {\n            cons"], "files": ["VideoRecorderFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_all": "enum MediaErrorCode {\n    \n    MSERR_OK = 0,\n\n    \n    MSERR_NO_MEMORY = 1,\n\n    \n    MSERR_OPERATION_NOT_PERMIT = 2,\n\n    \n    MSERR_INVALID_VAL = 3,\n\n    \n    MSERR_IO = 4,\n\n    \n    MSERR_TIMEOUT = 5,\n\n    \n    MSERR_UNKNOWN = 6,\n\n    \n    MSERR_SERVICE_DIED = 7,\n\n    \n    MSERR_INVALID_STATE = 8,\n\n    \n    MSERR_UNSUPPORTED = 9,\n  }", "api_method_name": "MediaErrorCode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["       expect(media.MediaErrorCode.MSERR_OPERATION_NOT", "       expect(media.MediaErrorCode.MSERR_TIMEOUT).asse", "       expect(media.MediaErrorCode.MSERR_UNKNOWN).asse", "       expect(media.MediaErrorCode.MSERR_OK).assertEqu", "       expect(media.MediaErrorCode.MSERR_INVALID_STATE", "       expect(media.MediaErrorCode.MSERR_SERVICE_DIED)", "       expect(media.MediaErrorCode.MSERR_IO).assertEqu", "       expect(media.MediaErrorCode.MSERR_UNSUPPORTED).", "       expect(media.MediaErrorCode.MSERR_NO_MEMORY).as", "       expect(media.MediaErrorCode.MSERR_INVALID_VAL)."], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_name": "MSERR_OK", "api_method_all": "MSERR_OK = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["edia.MediaErrorCode.MSERR_OK).assertEqual(0);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_name": "MSERR_NO_MEMORY", "api_method_all": "MSERR_NO_MEMORY = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["edia.MediaErrorCode.MSERR_NO_MEMORY).assertEqual(1);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_name": "MSERR_OPERATION_NOT_PERMIT", "api_method_all": "MSERR_OPERATION_NOT_PERMIT = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["edia.MediaErrorCode.MSERR_OPERATION_NOT_PERMIT).assertEqual(2);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_name": "MSERR_INVALID_VAL", "api_method_all": "MSERR_INVALID_VAL = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["edia.MediaErrorCode.MSERR_INVALID_VAL).assertEqual(3);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_name": "MSERR_IO", "api_method_all": "MSERR_IO = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["edia.MediaErrorCode.MSERR_IO).assertEqual(4);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_name": "MSERR_TIMEOUT", "api_method_all": "MSERR_TIMEOUT = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["edia.MediaErrorCode.MSERR_TIMEOUT).assertEqual(5);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_name": "MSERR_UNKNOWN", "api_method_all": "MSERR_UNKNOWN = 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["edia.MediaErrorCode.MSERR_UNKNOWN).assertEqual(6);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_name": "MSERR_SERVICE_DIED", "api_method_all": "MSERR_SERVICE_DIED = 7,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["edia.MediaErrorCode.MSERR_SERVICE_DIED).assertEqual(7);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_name": "MSERR_INVALID_STATE", "api_method_all": "MSERR_INVALID_STATE = 8,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["edia.MediaErrorCode.MSERR_INVALID_STATE).assertEqual(8);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaErrorCode", "api_method_name": "MSERR_UNSUPPORTED", "api_method_all": "MSERR_UNSUPPORTED = 9,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["edia.MediaErrorCode.MSERR_UNSUPPORTED).assertEqual(9);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BufferingInfoType", "api_method_all": "enum BufferingInfoType {\n    \n    BUFFERING_START = 1,\n\n    \n    BUFFERING_END = 2,\n\n    \n    BUFFERING_PERCENT = 3,\n\n    \n    CACHED_DURATION = 4,\n  }", "api_method_name": "BufferingInfoType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["       expect(media.BufferingInfoType.BUFFERING_END).asse", "       expect(media.BufferingInfoType.BUFFERING_START).as", "       expect(media.BufferingInfoType.BUFFERING_PERCENT).", "       expect(media.BufferingInfoType.CACHED_DURATION).as"], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BufferingInfoType", "api_method_name": "BUFFERING_START", "api_method_all": "BUFFERING_START = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["a.BufferingInfoType.BUFFERING_START).assertEqual(1);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BufferingInfoType", "api_method_name": "BUFFERING_END", "api_method_all": "BUFFERING_END = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["a.BufferingInfoType.BUFFERING_END).assertEqual(2);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BufferingInfoType", "api_method_name": "BUFFERING_PERCENT", "api_method_all": "BUFFERING_PERCENT = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["a.BufferingInfoType.BUFFERING_PERCENT).assertEqual(3);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BufferingInfoType", "api_method_name": "CACHED_DURATION", "api_method_all": "CACHED_DURATION = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["a.BufferingInfoType.CACHED_DURATION).assertEqual(4);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_all": "interface AudioPlayer {\n    \n    play(): void;\n\n    \n    pause(): void;\n\n    \n    stop(): void;\n\n    \n     reset(): void;\n\n    \n    seek(timeMs: number): void;\n\n    \n    setVolume(vol: number): void;\n\n    \n    release(): void;\n    \n    getTrackDescription(callback: AsyncCallback<Array<MediaDescription>>): void;\n\n    \n    getTrackDescription() : Promise<Array<MediaDescription>>;\n\n    \n    on(type: 'bufferingUpdate', callback: (infoType: BufferingInfoType, value: number) => void): void;\n    \n    src: string;\n\n    \n    loop: boolean;\n\n    \n    readonly currentTime: number;\n\n    \n    readonly duration: number;\n\n    \n    readonly state: AudioState;\n\n    \n    on(type: 'play' | 'pause' | 'stop' | 'reset' | 'dataLoad' | 'finish' | 'volumeChange', callback: () => void): void;\n\n    \n    on(type: 'timeUpdate', callback: Callback<number>): void;\n\n    \n    on(type: 'error', callback: ErrorCallback): void;\n  }", "api_method_name": "AudioPlayer", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 127, "since": 6, "api_used": "\u662f", "lines": ["t('SUB_MEDIA_PLAYER_AudioPlayer_Reset_API_0100', 0,", "t('SUB_MEDIA_PLAYER_AudioPlayer_Stop_API_0200', 0, ", "t('SUB_MEDIA_PLAYER_AudioPlayer_SetVolume_API_0300'", "t('SUB_MEDIA_PLAYER_AudioPlayer_Stop_API_0300', 0, ", "t('SUB_MEDIA_PLAYER_AudioPlayer_Release_API_0100', ", "t('SUB_MEDIA_PLAYER_AudioPlayer_Stop_API_0100', 0, ", "t('SUB_MEDIA_PLAYER_AudioPlayer_Pause_API_0300', 0,", "ame      : 01.createAudioPlayer->setVolume\n        ", "layer = media.createAudioPlayer();\n    let loopValu", "t('SUB_MEDIA_PLAYER_AudioPlayer_Play_API_0200', 0, ", "t('SUB_MEDIA_PLAYER_AudioPlayer_Seek_API_0100', 0, ", " : SUB_MEDIA_PLAYER_AudioPlayer_SetVolume_API_0100\n", " : SUB_MEDIA_PLAYER_AudioPlayer_Reset_API_0200\n    ", "t('SUB_MEDIA_PLAYER_AudioPlayer_Play_API_0400', 0, ", "t('SUB_MEDIA_PLAYER_AudioPlayer_Seek_API_0200', 0, ", "t('SUB_MEDIA_PLAYER_AudioPlayer_Play_API_0100', 0, ", " : SUB_MEDIA_PLAYER_AudioPlayer_SetVolume_API_0300\n", "STATE);\n        initAudioPlayer();\n        setCallb", "t('SUB_MEDIA_PLAYER_AudioPlayer_Play_API_0300', 0, ", "}\n\n    function initAudioPlayer() {\n        if (typ", " : SUB_MEDIA_PLAYER_AudioPlayer_Release_API_0100\n  ", " : SUB_MEDIA_PLAYER_AudioPlayer_SetVolume_API_0200\n", "layer = media.createAudioPlayer();\n        if (type", "t('SUB_MEDIA_PLAYER_AudioPlayer_Reset_API_0200', 0,", "t('SUB_MEDIA_PLAYER_AudioPlayer_Pause_API_0200', 0,", "t('SUB_MEDIA_PLAYER_AudioPlayer_Seek_API_0300', 0, ", "t('SUB_MEDIA_PLAYER_AudioPlayer_SetVolume_API_0100'", " : SUB_MEDIA_PLAYER_AudioPlayer_Release_API_0200\n  ", "t('SUB_MEDIA_PLAYER_AudioPlayer_SetVolume_API_0200'", "t('SUB_MEDIA_PLAYER_AudioPlayer_Pause_API_0100', 0,", "t('SUB_MEDIA_PLAYER_AudioPlayer_Pause_API_0400', 0,"], "files": ["PlayerLocalTestAudioFUNC.test.js", "PlayerLocalTestAudioFormat.test.js", "PlayerLocalTestAudioAPI.test.js", "HttpPlayerCompatibilityTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "play", "api_method_all": "play(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 842, "since": 6, "api_used": "\u662f", "lines": [" When stream is NOT playing\n                ", " }\n\n    function displayDeviceProp(value, in", "(500);\n       await playbackPromise(AudioRen", "\n    async function playbackPromise (AudioRe", "   value.forEach(displayDeviceProp);\n       ", " resultFlag = await playbackPromise(AudioRen", "\n    async function playbackCB (AudioRendere", "esultFlag=true;\n    playbackPromise(AudioRen", "   value.forEach(displayDeviceProp);\n\n      "], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetCallBack2.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "fileAssetPromise2.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "fileAsset2.test.js", "SR000GHQBN.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "VideoPlayerFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "AudioRenderer.test.js", "fileTestPromise.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "pause", "api_method_all": "pause(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 202, "since": 6, "api_used": "\u662f", "lines": [" @tc.name      : 02.pause->reset\n        * @t", "me      : 032.play->pause->seek(0)->play\n    ", " @tc.name      : 02.pause->release\n        * ", "state).assertEqual('paused');\n            tes", "     await audioRen.pause().then(async functi", "state).assertEqual('paused');\n            aud", "dioPlayer.state == 'paused')) {\n             ", "        audioPlayer.pause();\n    })\n\n    \n   ", "        audioPlayer.pause();\n                ", "me      : 021.play->pause->seek->stop\n       ", "me      : 033.play->pause->seek(duration)->pl", "e.info('case now is paused');\n            exp", "      audioRecorder.pause();\n                ", "e      : 04.resume->pause\n        * @tc.desc ", " @tc.name      : 03.pause->setVolume\n        ", "6.play->stop->seek->pause\n        * @tc.desc ", "      audioRecorder.pause();\n    })\n\n    /* *", "        audioPlayer.pause();\n            } el", "  audioRecorder.on('pause', () => {\n         ", "ame      : 05.stop->pause\n        * @tc.desc ", "state).assertEqual('paused');\n            exp", "creatAudioRecorder->pause\n        * @tc.desc ", "me      : 022.play->pause->play->seek(0)\n    ", " console.info(`case pause called`);\n         ", "     : 08.all step->pause\n        * @tc.desc ", "nsole.info('case to pause');\n                ", "e.info('setCallback pause() case callback is ", "    audioPlayer.on('pause', () => {\n         ", "      : 02.prepare->pause\n        * @tc.desc ", "me      : 06.reset->pause\n        * @tc.desc ", "state).assertEqual('paused');\n            nex", "state).assertEqual('paused');\n        expect(", "nsole.info(`case to pause`);\n                ", "me      : 034.play->pause->seek(out of durati", "me      : 023.play->pause->play->seek(0)->sto", "me      : 020.play->pause->seek->reset\n      ", ";\n\n        audioRen.pause((err) => {\n        ", " console.info(`case pause currentTime is ${au", "me      : 03.start->pause\n        * @tc.desc "], "files": ["HttpPlayerFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "AudioRenderer.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "stop", "api_method_all": "stop(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 932, "since": 6, "api_used": "\u662f", "lines": ["RenderLog: Renderer stopped');\n             ", "    }\n     audioRen.stop((err, state) => {\n ", "     await audioRen.stop().then(async functi", "     await audioCap.stop().then(async functi", "orkRecLog: Capturer stopped : SUCCESS');\n   ", "RenderLog: Renderer stopped : SUCCESS');\n   ", "orkRecLog: Capturer stop:ERROR : '+err.messa", "RenderLog: Renderer stop failed: Error: ${er", "RenderLog: Renderer stop:ERROR : '+err.messa"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "reset", "api_method_all": "reset(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 604, "since": 7, "api_used": "\u662f", "lines": ["resetParam success, resetAtEOS IS :' + resetA", "setWork() {\n        resetParam();\n        awa", "udioDecodeProcessor.reset().then(() => {\n    ", "fter last frame and reset\");\n        let even", "fter last frame and reset\");\n        let medi", "              await resetWork();\n            ", "   })\n\n    function resetParam(){\n        rea", " console.info(\"case reset success\");\n        ", "fore last frame and reset\");\n        let even", "       console.log(\"reset success\");\n        ", " resetAtEOS IS :' + resetAtEOS)\n             ", "\n    async function resetWork() {\n        res", "udioDecodeProcessor.reset((err) => {\n        ", "failCatch);\n        resetParam();\n        awa", "         } else if (resetAtEOS) {\n           ", "OS = false;\n        resetAtEOS = false;\n     ", "  console.log(\"case reset success\");\n        ", "setWork() {\n        resetParam();\n        aud", " eventEmitter.emit('reset');\n                ", " console.info(`case reset 1`);\n              ", "      console.info('resetParam success, reset", "   eventEmitter.on('reset', () => {\n         ", "    }\n\n    function resetParam() {\n        re", "                    resetParam();\n           ", "cess\");\n            resetParam();\n           ", "OS = false;\n    let resetAtEOS = false;\n    l", "() => {\n            resetParam();\n           ", "t running state and reset\");\n        let even", "`);\n                resetParam();\n           ", "enum = 200;\n        resetAtEOS = true;\n      ", "fore last frame and reset\");\n        let medi"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "seek", "api_method_all": "seek(timeMs: number): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 400, "since": 6, "api_used": "\u662f", "lines": ["        audioPlayer.seek(audioPlayer.duratio", " @tc.name      : 04.seek->release\n        * ", "        audioPlayer.seek(SEEK_TIME);\n       ", " console.info(`case seekDoneTime is ${seekDo", " console.info('case seek success, and seek t", "        audioPlayer.seek(mySteps[SECOND_INDE", "        if (typeof (seekDoneTime) == 'undefi", " : 021.play->pause->seek->stop\n        * @tc", "me      : 029.play->seek(out of duration)\n  ", " : 020.play->pause->seek->reset\n        * @t", " }\n            if ((seekDoneTime < audioPlay", " filed,errcode is ${seekDoneTime}`);\n       ", "e seekDoneTime is ${seekDoneTime}`);\n       ", "nd seek time is ' + seekDoneTime);\n         ", "K_TIME).assertEqual(seekDoneTime);\n         ", " console.info(`case seek called`);\n         ", "r.loop == true) && (seekDoneTime == DURATION", ".play->pause->play->seek(0)->stop\n        * ", "e seek success, and seek time is ' + seekDon", "  : 026.play->stop->seek->pause\n        * @t", " console.info(`case seek filed,errcode is ${", "  : 027.play->stop->seek->reset->play\n      ", "A_TIME).assertClose(seekDoneTime + DELTA_TIM", " console.info(`case seek to time is ${myStep", "r.on('timeUpdate', (seekDoneTime) => {\n     ", "me      : 018.play->seek->stop->reset\n      ", "  : 019.play->stop->seek\n        * @tc.desc ", "      : 030.play->->seek(rand)\n        * @tc", ".play->pause->play->seek(0)\n        * @tc.de", "me      : 028.play->seek(duration)\n        *", "ration).assertEqual(seekDoneTime);\n         ", "me      : 025.play->seek(0)\n        * @tc.de", "        if (typeof (seekDoneTime) == \"undefi", " : 032.play->pause->seek(0)->play\n        * ", "  : 024.play->stop->seek(0)->reset->play\n   "], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "setVolume", "api_method_all": "setVolume(vol: number): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 171, "since": 6, "api_used": "\u662f", "lines": ["      audioManager1.setVolume(audioMedia,highVol)", "      audioManager3.setVolume(audioMedia,highVol)", "      audioManager4.setVolume(audioMedia,lowVol);", "dioManager7 : Media setVolume promise: successful", "ioManager10 : Media setVolume promise: successful", "      audioManager7.setVolume(audioMedia,highVol)", "       audioManager.setVolume(audioMedia,outOfRan", "mise = audioManager.setVolume(audioMedia,lowVol);", "     audioManager10.setVolume(audioMedia,lowVol);", "mise = audioManager.setVolume(audioMedia,minVol);", "dioManager3 : Media setVolume promise: successful", "rameworkTest: Media setVolume promise: successful", "       audioManager.setVolume(audioMedia,minVol, ", "AudioFrameworkTest: setVolume: Out of range: Call", "      audioManager8.setVolume(audioMedia,lowVol);", "      audioManager2.setVolume(audioMedia,highVol)", "dioManager5 : Media setVolume promise: successful", "mise = audioManager.setVolume(audioRingtone,lowVo", "eworkTest: Ringtone setVolume Promise: Out of ran", "      audioManager6.setVolume(audioMedia,lowVol);", " await audioManager.setVolume(audioMedia,outOfRan", "dioManager2 : Media setVolume promise: successful", "       audioManager.setVolume(audioMedia,highVol,", "dioManager1 : Media setVolume promise: successful", "dioManager6 : Media setVolume promise: successful", "dioManager9 : Media setVolume promise: successful", "      audioManager5.setVolume(audioMedia,highVol)", "eworkTest: Ringtone setVolume Promise:Out of rang", "AudioFrameworkTest: setVolume: callback : Media O", "      audioManager9.setVolume(audioMedia,highVol)", ": callback :  Media setVolume successful `);\n    ", "mise = audioManager.setVolume(audioMedia,maxVol);", "       audioManager.setVolume(audioMedia,maxVol, ", "mise = audioManager.setVolume(audioRingtone,minVo", "eworkTest: Ringtone setVolume promise: successful", "mise = audioManager.setVolume(audioRingtone,maxVo", " await audioManager.setVolume(audioRingtone,outOf", "dioManager8 : Media setVolume promise: successful", "rameworkTest: Media setVolume Promise:Out of rang", "dioManager4 : Media setVolume promise: successful"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "release", "api_method_all": "release(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 974, "since": 6, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async functi", "RenderLog: Renderer release : SUCCESS');\n    //", "RenderLog: Renderer release :ERROR : '+err.mess", "RenderLog: Renderer release : SUCCESS');\n      ", "    }\n     audioRen.release((err, state) => {\n ", "RenderLog: Renderer released');\n         }\n    ", "orkRecLog: Capturer release : SUCCESS');\n      ", "RenderLog: Renderer release failed: Error: ${er", "RenderLog: Renderer release : SUCCESS');\n     }", "orkRecLog: Capturer release :ERROR : '+err.mess", " //  await audioRen.release().then(async functi", "     await audioRen.release().then(async functi"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "getTrackDescription", "api_method_all": "getTrackDescription(callback: AsyncCallback<Array<MediaDescription>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 20, "since": 8, "api_used": "\u662f", "lines": [" @tc.name      : 11.getTrackDescription->release\n        * @tc.desc      : Vide", " @tc.name      : 10.getTrackDescription->setspeed\n        * @tc.desc      : Vid", " @tc.name      : 11.getTrackDescription->stop\n        * @tc.desc      : Video p", " @tc.name      : 11.getTrackDescription->reset\n        * @tc.desc      : Video ", " console.info('case getTrackDescription is failed');\n                expect().a", " @tc.name      : 10.getTrackDescription->seek\n        * @tc.desc      : Video p", " @tc.name      : 10.getTrackDescription->setvolume\n        * @tc.desc      : Vi", " @tc.name      : 11.getTrackDescription->pause\n        * @tc.desc      : Video ", "t GETDESCRIPTION = 'getTrackDescription';\n    const PREPARE_EVENT = 'prepare';\n", " @tc.name      : 11.getTrackDescription->play\n        * @tc.desc      : Video p", " console.info('case getTrackDescription called!!');\n            if (typeof (arr", "        videoPlayer.getTrackDescription((err, arrlist) => {\n            if (typ"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "getTrackDescription", "api_method_all": "getTrackDescription() : Promise<Array<MediaDescription>>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["  await videoPlayer.getTrackDescription().then((arrayList) => {\n            con"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "on", "api_method_all": "on(type: 'bufferingUpdate', callback: (infoType: BufferingInfoType, value: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "on", "api_method_all": "on(type: 'bufferingUpdate', callback: (infoType: BufferingInfoType, value: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "on", "api_method_all": "on(type: 'play' | 'pause' | 'stop' | 'reset' | 'dataLoad' | 'finish' | 'volumeChange', callback: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "on", "api_method_all": "on(type: 'play' | 'pause' | 'stop' | 'reset' | 'dataLoad' | 'finish' | 'volumeChange', callback: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "on", "api_method_all": "on(type: 'timeUpdate', callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 6, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 6, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "src", "api_method_all": "src: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 116, "since": 6, "api_used": "\u662f", "lines": ["        audioPlayer.src = fdPath;\n         ", "        audioPlayer.src = fdPath;\n        s", " expect(audioPlayer.src).assertEqual(undefi", "        audioPlayer.src = fdPath;\n    })\n\n ", "et parameters after src\n        * @tc.desc ", "        audioPlayer.src = fdPath;\n        a", " expect(audioPlayer.src).assertEqual(fdPath"], "files": ["VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "loop", "api_method_all": "loop: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 96, "since": 6, "api_used": "\u662f", "lines": ["re -maxVol ,Disable loop - Callback -Get sta", "lume=minVol ,Enable loop\n                * @", "e - highVol ,Enable loop - start Callback\n  ", "e: highVol,\n        loop: true\n        };\n\n ", "ume=highVol ,Enable loop\n                * @", "ure minVol ,disable loop - promise - Get sta", "gure maxVol ,enable loop - start - Callback\n", "ume=minVol ,Disable loop\n                * @", "mise minVol ,Enable loop\n                * @", "minVol,\n            loop: false\n        };\n\n", "gure-highVol,Enable loop\n                * @", "tOfRangeVol ,Enable loop -Get STATE- Callbac", "\tvolume: maxVol,\n\t\t\tloop: true\n\t\t};\n\t\tconsol", "maxVol,\n            loop: false\n        };\n\t", "OfRangeVol ,disable loop-Get STATE- Callback", "minVol,\n            loop: true\n        };\n\n ", "se highVol ,Disable loop\n                * @", "ngeVol,\n            loop: false\n        };\n\n", "ighVol,\n            loop: true\n        };\n\n ", "ure minVol ,Disable loop - Start - callback\n", "ighVol,\n            loop: false\n        };\n\n", "e - lowVol ,Disable loop- promise\n          ", "ure -maxVol ,enable loop -start\n            ", "ume=maxVol ,Disable loop\n                * @", "re - minVol ,Enable loop  - Callback\n       ", "me=highVol ,Disable loop start - promise\n   ", "ngeVol,\n            loop: true\n        };\n\n ", "lume=maxVol ,enable loop\n                * @", "re - maxVol ,enable loop Callback - START\n  ", "gure-highVol,Enable loop- Callback -Get stat", "maxVol,\n            loop: false\n        };\n\n", "maxVol,\n            loop: true\n        };\n\t\t", "tOfRangeVol ,Enable loop\n                * @", "re highVol ,Disable loop Start - Callback\n  ", "minVol,\n            loop: false\n        };\n\t", "ighVol,\n            loop: false\n        };\n\t", "OfRangeVol ,Disable loop\n                * @", "ighVol,\n            loop: true\n        };\n\n\t", "lowVol,\n            loop: false\n        };\n\n"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "currentTime", "api_method_all": "readonly currentTime: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 130, "since": 6, "api_used": "\u662f", "lines": ["dTime = videoPlayer.currentTime;\n        expect(end", "tTime = videoPlayer.currentTime;\n        videoPlaye", "le.info(`case pause currentTime is ${audioPlayer.cu", "dTime = videoPlayer.currentTime;\n                ex", "me is ${audioPlayer.currentTime}`);\n            exp", "wTime = videoPlayer.currentTime;\n        if (videoP", "tTime = videoPlayer.currentTime;\n        await vide", " expect(audioPlayer.currentTime).assertEqual(0);\n  ", "ole.info(`case play currentTime is ${audioPlayer.cu", "ect(testAudioPlayer.currentTime).assertEqual(0);\n  ", "s ${testAudioPlayer.currentTime}`);\n            exp", "dTime = videoPlayer.currentTime;\n        if (videoP", " expect(audioPlayer.currentTime).assertClose(audioP", "ole.info(`case play currentTime is ${testAudioPlaye", " expect(audioPlayer.currentTime + DELTA_TIME).asser"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioFormat.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "duration", "api_method_all": "readonly duration: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 101, "since": 6, "api_used": "\u662f", "lines": ["ct(testVideoPlayer1.duration).assertEqual(DURATI", "ampleRate: 48000,\n  durationTime: 1000,\n  fileFo", "ect(testAudioPlayer.duration).assertEqual(DURATI", "rtClose(audioPlayer.duration, DELTA_TIME);\n     ", "   : 022.play->seek(duration)->finish (callback)", "   : 023.play->seek(duration, mode)->finish (cal", "er.seek(audioPlayer.duration);\n            } els", "5.play->seek(out of duration, mode) (callback)\n ", "9.play->seek(out of duration)\n        * @tc.desc", " expect(videoPlayer.duration).assertEqual(DURATI", "3.play->pause->seek(duration)->play\n        * @t", " expect(audioPlayer.duration).assertEqual(seekDo", " expect(audioPlayer.duration).assertEqual(DURATI", "ct(testVideoPlayer2.duration).assertEqual(DURATI", " expect(audioPlayer.duration).assertEqual(undefi", "4.play->seek(out of duration) (callback)\n       ", "   : 14.seek(out of duration)\n        * @tc.desc", "eTime < audioPlayer.duration) || (audioPlayer.st", "ATION).assertEqual(\"duration\");\n        expect(m", "   : 028.play->seek(duration)\n        * @tc.desc"], "files": ["HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "fetchFileResultPromise.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "VideoPlayerEnumTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioPlayer", "api_method_name": "state", "api_method_all": "readonly state: AudioState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1920, "since": 6, "api_used": "\u662f", "lines": [" STATE : '+audioRen.state);\n\n        var buff", "PASS : ' + audioRen.state);\n     }\n     else ", " STATE : '+audioCap.state);\n\n        var buff", "audioRen.stop((err, state) => {\n         if (", " STATE : '+audioRen.state);\n\n     console.inf", " STATE : '+audioRen.state);\n\n        console.", "\n\n     if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        return r", "ioRen.release((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n    //      resul", " STATE : '+audioRen.state);\n\n     await audio", " STATE : '+audioRen.state);\n\n     var samplin", " STATE : '+audioRen.state);\n\n     return resu", "PASS : ' + audioRen.state);\n    //  }\n    // ", "udioRen.drain((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n         resultFl", " STATE : '+audioRen.state);\n\n     var bufferS", " STATE : '+audioRen.state);\n\n     if (resultF", " STATE : '+audioRen.state);\n\n        await au", "   //  if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        await au"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioEncoder", "api_method_all": "enum AudioEncoder {\n    \n    DEFAULT = 0,\n\n    \n    AMR_NB = 1,\n\n    \n    AMR_WB = 2,\n\n    \n    AAC_LC = 3,\n\n    \n    HE_AAC = 4\n  }", "api_method_name": "AudioEncoder", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 205, "since": 6, "api_used": "\u662f", "lines": ["        media.createAudioEncoderByName('avenc_aac', ", "nsole.info(`case getAudioEncoderCaps 1`);\n          ", "entEmitter.emit('getAudioEncoderCaps');\n        })\n ", "t/index'\n\ndescribe('AudioEncoderFuncCallback', funct", "      mediaCaps.findAudioEncoder(mediaDescription2).", "t/index'\n\ndescribe('AudioEncoderFuncPromise', functi", "       mediaCaps.getAudioEncoderCaps((err, audioCaps", "oEncodeProcessor.getAudioEncoderCaps((err, Audiocaps", "oEncodeProcessor.getAudioEncoderCaps((err, AudioCaps", "le.info(`case createAudioEncoder by mime 1`);\n      ", "le.info(`case createAudioEncoder 1`);\n            au", "   console.info('getAudioEncoderCaps success');\n    ", "      mediaCaps.findAudioEncoder(mediaDescription2, ", "        media.createAudioEncoderByMime('audio/mp4a-l", "eventEmitter.on('getAudioEncoderCaps', () => {\n     ", "  console.info('findAudioEncoder success');\n        ", "       mediaCaps.getAudioEncoderCaps().then((audioCa"], "files": ["List.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRecorderEnumTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioEncoder", "api_method_name": "DEFAULT", "api_method_all": "DEFAULT = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 148, "since": 6, "api_used": "\u662f", "lines": ["ioScene.AUDIO_SCENE_DEFAULT){\n                 ", "ioScene.AUDIO_SCENE_DEFAULT);\n    await sleep(2", "cene as AUDIO_SCENE_DEFAULT to VOIP - ENAME\n   ", "cene as AUDIO_SCENE_DEFAULT - Callback - ENUM\n ", "cene as AUDIO_SCENE_DEFAULT to VOIP - Promise -", "cene as AUDIO_SCENE_DEFAULT - ENUM\n       * @tc", "cene as AUDIO_SCENE_DEFAULT to VOIP - Callback ", "cene as AUDIO_SCENE_DEFAULT to VOIP - ENUM\n    ", "cene as AUDIO_SCENE_DEFAULT - Promise - ENUM\n  ", "cene as AUDIO_SCENE_DEFAULT - ENAME\n           ", "ioScene.AUDIO_SCENE_DEFAULT);\n    await sleep(1", "cene as AUDIO_SCENE_DEFAULT - ENAME\n       * @t", "ioScene.AUDIO_SCENE_DEFAULT).then(async functio", "cene as AUDIO_SCENE_DEFAULT - ENUM\n           *", "ioScene.AUDIO_SCENE_DEFAULT){\n                c", "ioScene.AUDIO_SCENE_DEFAULT, (err) => {\n       ", "cene as AUDIO_SCENE_DEFAULT to VOIP- ENAME\n    ", "cene as AUDIO_SCENE_DEFAULT - Callback - ENAME\n"], "files": ["AudioCall.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoRecorderEnumTest.test.js", "CameraJSUnitVideoPromise.test.ets", "SR000GHLLV.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioEncoder", "api_method_name": "AMR_NB", "api_method_all": "AMR_NB = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioEncoder", "api_method_name": "AMR_WB", "api_method_all": "AMR_WB = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioEncoder", "api_method_name": "AAC_LC", "api_method_all": "AAC_LC = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["(media.AudioEncoder.AAC_LC).assertEqual(3);\n  "], "files": ["AudioRecorderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioEncoder", "api_method_name": "HE_AAC", "api_method_all": "HE_AAC = 4", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioOutputFormat", "api_method_all": "enum AudioOutputFormat {\n    \n    DEFAULT = 0,\n\n    \n    MPEG_4 = 2,\n\n    \n    AMR_NB = 3,\n\n    \n    AMR_WB = 4,\n\n    \n    AAC_ADTS = 6\n  }", "api_method_name": "AudioOutputFormat", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": ["       expect(media.AudioOutputFormat.MPEG_4).assertEqual", "       expect(media.AudioOutputFormat.AAC_ADTS).assertEqu"], "files": ["AudioRecorderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioOutputFormat", "api_method_name": "DEFAULT", "api_method_all": "DEFAULT = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 148, "since": 6, "api_used": "\u662f", "lines": ["ioScene.AUDIO_SCENE_DEFAULT){\n                 ", "ioScene.AUDIO_SCENE_DEFAULT);\n    await sleep(2", "cene as AUDIO_SCENE_DEFAULT to VOIP - ENAME\n   ", "cene as AUDIO_SCENE_DEFAULT - Callback - ENUM\n ", "cene as AUDIO_SCENE_DEFAULT to VOIP - Promise -", "cene as AUDIO_SCENE_DEFAULT - ENUM\n       * @tc", "cene as AUDIO_SCENE_DEFAULT to VOIP - Callback ", "cene as AUDIO_SCENE_DEFAULT to VOIP - ENUM\n    ", "cene as AUDIO_SCENE_DEFAULT - Promise - ENUM\n  ", "cene as AUDIO_SCENE_DEFAULT - ENAME\n           ", "ioScene.AUDIO_SCENE_DEFAULT);\n    await sleep(1", "cene as AUDIO_SCENE_DEFAULT - ENAME\n       * @t", "ioScene.AUDIO_SCENE_DEFAULT).then(async functio", "cene as AUDIO_SCENE_DEFAULT - ENUM\n           *", "ioScene.AUDIO_SCENE_DEFAULT){\n                c", "ioScene.AUDIO_SCENE_DEFAULT, (err) => {\n       ", "cene as AUDIO_SCENE_DEFAULT to VOIP- ENAME\n    ", "cene as AUDIO_SCENE_DEFAULT - Callback - ENAME\n"], "files": ["AudioCall.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoRecorderEnumTest.test.js", "CameraJSUnitVideoPromise.test.ets", "SR000GHLLV.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioOutputFormat", "api_method_name": "MPEG_4", "api_method_all": "MPEG_4 = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["ainerFormatType.CFT_MPEG_4).assertEqual(\"mp4\")", "ainerFormatType.CFT_MPEG_4,\n        }\n        ", "ainerFormatType.CFT_MPEG_4A,\n        }\n       ", "a.AudioOutputFormat.MPEG_4).assertEqual(2);\n  ", "ainerFormatType.CFT_MPEG_4A).assertEqual(\"m4a\""], "files": ["VideoPlayerEnumTest.test.js", "AudioRecorderEnumTest.test.js", "RecorderLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioOutputFormat", "api_method_name": "AMR_NB", "api_method_all": "AMR_NB = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioOutputFormat", "api_method_name": "AMR_WB", "api_method_all": "AMR_WB = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioOutputFormat", "api_method_name": "AAC_ADTS", "api_method_all": "AAC_ADTS = 6", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["a.AudioOutputFormat.AAC_ADTS).assertEqual(6);\n  "], "files": ["AudioRecorderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_all": "interface Location {\n    \n    latitude: number;\n\n    \n    longitude: number;\n  }", "api_method_name": "Location", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "latitude", "api_method_all": "latitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 6, "api_used": "\u662f", "lines": ["t: 0,\n  location: { latitude: 30, longitude: 130", "       location : { latitude : 30, longitude : 1", "       location : { latitude : 1, longitude : 1 "], "files": ["RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "longitude", "api_method_all": "longitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 6, "api_used": "\u662f", "lines": [" : { latitude : 30, longitude : 130 },\n        ma", "on: { latitude: 30, longitude: 130 },\n  maxSize: ", "n : { latitude : 1, longitude : 1 },\n    }\n\n    f", "n : { latitude : 1, longitude : 1 },\n            "], "files": ["RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorderConfig", "api_method_all": "interface AudioRecorderConfig {\n    \n    audioEncoder?: AudioEncoder;\n\n    \n    audioEncodeBitRate?: number;\n\n    \n    audioSampleRate?: number;\n\n    \n    numberOfChannels?: number;\n\n    \n    format?: AudioOutputFormat;\n\n    \n    uri: string;\n\n    \n    location?: Location;\n\n    \n    audioEncoderMime?: CodecMimeType;\n    \n    fileFormat?: ContainerFormatType;\n  }", "api_method_name": "AudioRecorderConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorderConfig", "api_method_name": "audioEncoder", "api_method_all": "audioEncoder?: AudioEncoder", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": ["me      : 014. API8 audioEncoderMime: audio/mp4a-lat", "OURCE_TYPE,\n        audioEncoder : ENCORDER_AACLC,\n ", " : 1 },\n            audioEncoderMime : media.CodecMi"], "files": ["RecorderLocalTestAudioAPI.test.js", "RecorderLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorderConfig", "api_method_name": "audioEncodeBitRate", "api_method_all": "audioEncodeBitRate?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 15, "since": 6, "api_used": "\u662f", "lines": ["        audioConfig.audioEncodeBitRate = 16000; // encodeB", "        audioConfig.audioEncodeBitRate = 64000; // encodeB", "        audioConfig.audioEncodeBitRate = 112000; // encode", "        audioConfig.audioEncodeBitRate = 32000; // encodeB", "        audioConfig.audioEncodeBitRate = 22050;\n        in", "        audioConfig.audioEncodeBitRate = -1;\n        initA", "        audioConfig.audioEncodeBitRate = 8000; // encodeBi", "RDER_AACLC,\n        audioEncodeBitRate : 22050,\n        au", "E_TYPE,\n            audioEncodeBitRate : 22050,\n          ", "        audioConfig.audioEncodeBitRate = 22050; // sampler"], "files": ["RecorderLocalTestAudioAPI.test.js", "RecorderLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorderConfig", "api_method_name": "audioSampleRate", "api_method_all": "audioSampleRate?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35, "since": 6, "api_used": "\u662f", "lines": ["        audioConfig.audioSampleRate = 96000; // sampler", "te : 22050,\n        audioSampleRate : 22050,\n        nu", "        audioConfig.audioSampleRate = 44100; // sampler", "\n        configFile.audioSampleRate = 8000;\n        con", "mp4a-latm',\n        audioSampleRate : 48000,\n        du", "\n        configFile.audioSampleRate = 44100;\n        co", "audio/mp4a-latm',\n  audioSampleRate: 48000,\n  durationT", "        audioConfig.audioSampleRate = 32000; // sampler", "        audioConfig.audioSampleRate = 22050; // encodeB", "        audioConfig.audioSampleRate = -1;\n        audio", "        audioConfig.audioSampleRate = 8000; // samplera", "        audioConfig.audioSampleRate = 22050;\n        au", "        audioConfig.audioSampleRate = 64000; // sampler", "        audioConfig.audioSampleRate = 22050; // sampler", "\n        configFile.audioSampleRate = 32000;\n        co", " 22050,\n            audioSampleRate : 22050,\n          ", "\n        configFile.audioSampleRate = 96000;\n        co"], "files": ["RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorderConfig", "api_method_name": "numberOfChannels", "api_method_all": "numberOfChannels?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 22, "since": 6, "api_used": "\u662f", "lines": ["        audioConfig.numberOfChannels = -1;\n        audio", " 22050,\n            numberOfChannels : CHANNEL_TWO,\n    ", "        audioConfig.numberOfChannels = CHANNEL_TWO;\n    ", "        audioConfig.numberOfChannels = CHANNEL_ONE;\n    ", "te : 22050,\n        numberOfChannels : CHANNEL_TWO,\n    "], "files": ["RecorderLocalTestAudioAPI.test.js", "RecorderLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorderConfig", "api_method_name": "format", "api_method_all": "format?: AudioOutputFormat", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 645, "since": 6, "api_used": "\u662f", "lines": ["from camera-0 cameraformat & camerainput async", "from camera-0 cameraformat & camerainput promi", "t supported preview formats from camera-0 came", "sing camera-0 cameraformat & camerainput async", "orkRecLog: Capturer format:' + audioParamsGet.", ":' + audioParamsGet.format);\n            conso", "ams = {\n            format: audio.AudioSampleF", "sRen = {\n           format: audio.AudioSampleF", "Get supported video formats from camera-0 came", "RenderLog: Renderer format:' + audioParamsGet.", "Get supported photo format from camera-0 camer", "Rec = {\n            format: audio.AudioSampleF", "sing camera-0 cameraformat & camerainput promi"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitCameraFormat.test.ets", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorderConfig", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 152, "since": 6, "api_used": "\u662f", "lines": ["romise  set invalid uri - Start() (Negative", "c.desc      : 1.set uri\n     *             ", " - Callback invalid uri\n                * @", "figure & get title during playback\n        ", "l createImageSource(uri)\n     *            ", "toneUri - promise - uri Null,MULTISIM ENAME", "tc.desc      : 1.seturi\n     *             ", ".info(TAG + \"Error during camera0InputPromi", "ri - Callback- Null uri -RINGTONE_TYPE_DEFA", "ngtone Get Ringtone uri: ERROR: ' + err.mes", ".info(TAG + \"Error during camera0Input with", ": createImageSource(uri)-jpg\n     * @tc.des", "- promise - Invalid uri\n                * @", ".info(TAG + \"Error during PhotoOutput with ", ": createImageSource(uri)-wrong uri\n     * @", "- Callback set null uri\n                * @", ".info(TAG + \"Error during cameraInput with ", ": createImageSource(uri)-gif\n     * @tc.des", "i - Promise invalid uri RINGTONE_TYPE_DEFAU", ".info(TAG + \"Error during videoOutput with ", ": createImageSource(uri)-png\n     * @tc.des", ": createImageSource(uri)-wrong suffix file ", ".info(TAG + \"Error during PreviewOutput wit", "geSource(uri)-wrong uri\n     * @tc.desc    ", ": createImageSource(uri)-bmp\n     * @tc.des", "allback set Invalid uri\n                * @"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoDecoderReliCallbackTest.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "fileAssetPromise2.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "fileAsset2.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorderConfig", "api_method_name": "location", "api_method_all": "location?: Location", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 6, "api_used": "\u662f", "lines": ["fd://',\n            location : { latitude : 1, l", "tation : 0,\n        location : { latitude : 30, ", "stAPI.m4a',\n        location : { latitude : 1, l", "/test.m4a',\n        location : { latitude : 1, l", "ientationHint: 0,\n  location: { latitude: 30, lo"], "files": ["RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorderConfig", "api_method_name": "audioEncoderMime", "api_method_all": "audioEncoderMime?: CodecMimeType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["me      : 014. API8 audioEncoderMime: audio/mp4a-latm,\n ", " : 1 },\n            audioEncoderMime : media.CodecMimeTy"], "files": ["RecorderLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorderConfig", "api_method_name": "fileFormat", "api_method_all": "fileFormat?: ContainerFormatType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 37, "since": 8, "api_used": "\u662f", "lines": ["IO_AAC,\n            fileFormat : media.ContainerFo", "rationTime: 1000,\n  fileFormat: 'mp4',\n  videoBitr", "        audioConfig.fileFormat = FORMAT_MP4;\n     ", "        audioConfig.fileFormat = FORMAT_M4A;\n     ", "                    fileFormat:mp4\n        * @tc.d", "                    fileFormat:m4a\n        * @tc.d", "ime : 1000,\n        fileFormat : 'mp4',\n        vi"], "files": ["RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_all": "interface AudioRecorder {\n    \n    prepare(config: AudioRecorderConfig): void;\n\n    \n    start(): void;\n\n    \n    pause(): void;\n\n    \n    resume(): void;\n\n    \n    stop(): void;\n\n    \n    release(): void;\n\n    \n    reset(): void;\n\n    \n    on(type: 'prepare' | 'start' | 'pause' | 'resume' | 'stop' | 'release' | 'reset', callback: () => void): void;\n\n    \n    on(type: 'error', callback: ErrorCallback): void;\n  }", "api_method_name": "AudioRecorder", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 210, "since": 6, "api_used": "\u662f", "lines": ["'SUB_MEDIA_RECORDER_AudioRecorder_Prepare_API_0300', ", " SUB_MEDIA_RECORDER_AudioRecorder_Start_API_0600\n    ", " SUB_MEDIA_RECORDER_AudioRecorder_Start_API_0500\n    ", "'SUB_MEDIA_RECORDER_AudioRecorder_Start_API_0100', 0,", "est.js')\nrequire('./AudioRecorderEnumTest.test.js')", " SUB_MEDIA_RECORDER_AudioRecorder_Start_API_0400\n    ", "'SUB_MEDIA_RECORDER_AudioRecorder_Prepare_API_1000', ", "'SUB_MEDIA_RECORDER_AudioRecorder_Start_API_0200', 0,", "'SUB_MEDIA_RECORDER_AudioRecorder_Prepare_API_0500', ", "t/index'\n\ndescribe('AudioRecorderEnumTest', function ", "'SUB_MEDIA_RECORDER_AudioRecorder_Start_API_0300', 0,", ") {\n        let testAudioRecorder = undefined;\n      ", "'SUB_MEDIA_RECORDER_AudioRecorder_Start_API_0500', 0,", "\n        expect(testAudioRecorder != undefined).asser", "\n        expect(testAudioRecorder != null).assertTrue", "order = media.createAudioRecorder();\n    const END_ST", "'SUB_MEDIA_RECORDER_AudioRecorder_Prepare_API_0600', ", "'SUB_MEDIA_RECORDER_AudioRecorder_Prepare_API_0800', ", "order = media.createAudioRecorder();\n    }\n\n    funct", "done) {\n        initAudioRecorder();\n        let mySt", "corder= media.createAudioRecorder();\n        expect(t", "'SUB_MEDIA_RECORDER_AudioRecorder_Start_API_0600', 0,", "'SUB_MEDIA_RECORDER_AudioRecorder_Prepare_API_1200', ", "EDIA_RECORDER_createAudioRecorder_API_0100', 0, async", "'SUB_MEDIA_RECORDER_AudioRecorder_Start_API_0400', 0,", "efined;\n        testAudioRecorder= media.createAudioR", "}\n\n    function initAudioRecorder() {\n        if (typ", " 22050;\n        initAudioRecorder();\n        let mySt", "'SUB_MEDIA_RECORDER_AudioRecorder_Prepare_API_0900', ", "'SUB_MEDIA_RECORDER_AudioRecorder_Prepare_API_0200', ", "e = -1;\n        initAudioRecorder();\n        let mySt", "'SUB_MEDIA_RECORDER_AudioRecorder_Prepare_API_1100', ", "'SUB_MEDIA_RECORDER_AudioRecorder_Prepare_API_0100', ", "th;\n        let testAudioRecorder= media.createAudioR", "True();\n        testAudioRecorder.prepare(audioConfig"], "files": ["RecorderLocalTestAudioAPI.test.js", "AudioRecorderEnumTest.test.js", "List.test.js", "RecorderLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_name": "prepare", "api_method_all": "prepare(config: AudioRecorderConfig): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 724, "since": 6, "api_used": "\u662f", "lines": ["      videoRecorder.prepare(videoConfig, (err) ", "udioDecodeProcessor.prepare((err) => {\n        ", " eventEmitter.emit('prepare');\n            })\n ", "AG + 'videoRecorder.prepare called.')\n    video", "AG + 'videoRecorder.prepare called.')\n      vid", "   eventEmitter.on('prepare', () => {\n         ", "ideoRecorderPromise.prepare(videoConfigPromise,", "       console.log(\"prepare success\");\n        ", "udioDecodeProcessor.prepare().then(() => {\n    ", " console.info(`case prepare 1`);\n              ", "AG + 'videoRecorder.prepare success.')\n      })"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_name": "start", "api_method_all": "start(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 1349, "since": 6, "api_used": "\u662f", "lines": ["     await audioRen.start().then(async functi", "orkRecLog: Capturer started :SUCCESS ');\n    ", "rLog: renderInstant started :SUCCESS ');\n    ", "orkRecLog: Capturer start :ERROR : '+err.mess", "ew Date().getTime()-startTime;\n        let av", "ger(); \n        let startTime = new Date().ge", "     await audioCap.start().then(async functi", "rLog: renderInstant start :ERROR : '+err.mess"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_name": "pause", "api_method_all": "pause(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 202, "since": 6, "api_used": "\u662f", "lines": [" @tc.name      : 02.pause->reset\n        * @t", "me      : 032.play->pause->seek(0)->play\n    ", " @tc.name      : 02.pause->release\n        * ", "state).assertEqual('paused');\n            tes", "     await audioRen.pause().then(async functi", "state).assertEqual('paused');\n            aud", "dioPlayer.state == 'paused')) {\n             ", "        audioPlayer.pause();\n    })\n\n    \n   ", "        audioPlayer.pause();\n                ", "me      : 021.play->pause->seek->stop\n       ", "me      : 033.play->pause->seek(duration)->pl", "e.info('case now is paused');\n            exp", "      audioRecorder.pause();\n                ", "e      : 04.resume->pause\n        * @tc.desc ", " @tc.name      : 03.pause->setVolume\n        ", "6.play->stop->seek->pause\n        * @tc.desc ", "      audioRecorder.pause();\n    })\n\n    /* *", "        audioPlayer.pause();\n            } el", "  audioRecorder.on('pause', () => {\n         ", "ame      : 05.stop->pause\n        * @tc.desc ", "state).assertEqual('paused');\n            exp", "creatAudioRecorder->pause\n        * @tc.desc ", "me      : 022.play->pause->play->seek(0)\n    ", " console.info(`case pause called`);\n         ", "     : 08.all step->pause\n        * @tc.desc ", "nsole.info('case to pause');\n                ", "e.info('setCallback pause() case callback is ", "    audioPlayer.on('pause', () => {\n         ", "      : 02.prepare->pause\n        * @tc.desc ", "me      : 06.reset->pause\n        * @tc.desc ", "state).assertEqual('paused');\n            nex", "state).assertEqual('paused');\n        expect(", "nsole.info(`case to pause`);\n                ", "me      : 034.play->pause->seek(out of durati", "me      : 023.play->pause->play->seek(0)->sto", "me      : 020.play->pause->seek->reset\n      ", ";\n\n        audioRen.pause((err) => {\n        ", " console.info(`case pause currentTime is ${au", "me      : 03.start->pause\n        * @tc.desc "], "files": ["HttpPlayerFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "AudioRenderer.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_name": "resume", "api_method_all": "resume(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 55, "since": 6, "api_used": "\u662f", "lines": ["nsole.info('case to resume');\n                ", " @tc.name      : 05.resume->release\n        * ", "name      : 08.all->resume\n        * @tc.desc ", "      videoRecorder.resume((err) => {\n        ", "nst RESUME_EVENT = 'resume';\n    const STOP_EV", "e      : 008.pause->resume->stop->reset\n      ", "      audioRecorder.resume();\n                ", "e      : 006.pause->resume->pause\n        * @t", "stop->reset->pause->resume->stop->reset\n      ", " @tc.name      : 08.resume 3 times\n        * @", " @tc.name      : 05.resume->reset\n        * @t", " @tc.name      : 05.resume->getInputSurface\n  ", "await videoRecorder.resume().then(() => {\n    ", " @tc.name      : 04.resume->start\n        * @t", " console.info('case resume error hanpped');\n  ", " @tc.name      : 09.resume threee times\n      ", "me      : 04.pause->resume\n        * @tc.desc ", " console.info('case resume called');\n        }", "  audioRecorder.on('resume', () => {\n         ", "creatAudioRecorder->resume\n        * @tc.desc ", "      audioRecorder.resume();\n    })\n\n    /* *", "      : 02.prepare->resume\n        * @tc.desc ", "07.getInputSurface->resume\n        * @tc.desc ", " console.info('case resume success');\n        ", "me      : 03.start->resume\n        * @tc.desc ", " : 16.start->pause->resume->releas (only video", "e      : 003.pause->resume\n        * @tc.desc ", "e.info('setCallback resume() case callback is ", " @tc.name      : 05.resume->stop\n        * @tc", " @tc.name      : 04.resume->pause\n        * @t", "ame      : 05.stop->resume\n        * @tc.desc ", "e      : 01.create->resume\n        * @tc.desc ", "me      : 06.reset->resume\n        * @tc.desc "], "files": ["RecorderLocalTestAudioFUNC.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_name": "stop", "api_method_all": "stop(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 932, "since": 6, "api_used": "\u662f", "lines": ["RenderLog: Renderer stopped');\n             ", "    }\n     audioRen.stop((err, state) => {\n ", "     await audioRen.stop().then(async functi", "     await audioCap.stop().then(async functi", "orkRecLog: Capturer stopped : SUCCESS');\n   ", "RenderLog: Renderer stopped : SUCCESS');\n   ", "orkRecLog: Capturer stop:ERROR : '+err.messa", "RenderLog: Renderer stop failed: Error: ${er", "RenderLog: Renderer stop:ERROR : '+err.messa"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_name": "release", "api_method_all": "release(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 974, "since": 6, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async functi", "RenderLog: Renderer release : SUCCESS');\n    //", "RenderLog: Renderer release :ERROR : '+err.mess", "RenderLog: Renderer release : SUCCESS');\n      ", "    }\n     audioRen.release((err, state) => {\n ", "RenderLog: Renderer released');\n         }\n    ", "orkRecLog: Capturer release : SUCCESS');\n      ", "RenderLog: Renderer release failed: Error: ${er", "RenderLog: Renderer release : SUCCESS');\n     }", "orkRecLog: Capturer release :ERROR : '+err.mess", " //  await audioRen.release().then(async functi", "     await audioRen.release().then(async functi"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_name": "reset", "api_method_all": "reset(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 604, "since": 7, "api_used": "\u662f", "lines": ["resetParam success, resetAtEOS IS :' + resetA", "setWork() {\n        resetParam();\n        awa", "udioDecodeProcessor.reset().then(() => {\n    ", "fter last frame and reset\");\n        let even", "fter last frame and reset\");\n        let medi", "              await resetWork();\n            ", "   })\n\n    function resetParam(){\n        rea", " console.info(\"case reset success\");\n        ", "fore last frame and reset\");\n        let even", "       console.log(\"reset success\");\n        ", " resetAtEOS IS :' + resetAtEOS)\n             ", "\n    async function resetWork() {\n        res", "udioDecodeProcessor.reset((err) => {\n        ", "failCatch);\n        resetParam();\n        awa", "         } else if (resetAtEOS) {\n           ", "OS = false;\n        resetAtEOS = false;\n     ", "  console.log(\"case reset success\");\n        ", "setWork() {\n        resetParam();\n        aud", " eventEmitter.emit('reset');\n                ", " console.info(`case reset 1`);\n              ", "      console.info('resetParam success, reset", "   eventEmitter.on('reset', () => {\n         ", "    }\n\n    function resetParam() {\n        re", "                    resetParam();\n           ", "cess\");\n            resetParam();\n           ", "OS = false;\n    let resetAtEOS = false;\n    l", "() => {\n            resetParam();\n           ", "t running state and reset\");\n        let even", "`);\n                resetParam();\n           ", "enum = 200;\n        resetAtEOS = true;\n      ", "fore last frame and reset\");\n        let medi"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_name": "on", "api_method_all": "on(type: 'prepare' | 'start' | 'pause' | 'resume' | 'stop' | 'release' | 'reset', callback: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_name": "on", "api_method_all": "on(type: 'prepare' | 'start' | 'pause' | 'resume' | 'stop' | 'release' | 'reset', callback: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioRecorder", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 6, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_all": "interface VideoRecorder {\n    \n    prepare(config: VideoRecorderConfig, callback: AsyncCallback<void>): void;\n    \n    prepare(config: VideoRecorderConfig): Promise<void>;\n    \n    getInputSurface(callback: AsyncCallback<string>): void;\n    \n    getInputSurface(): Promise<string>;\n    \n    start(callback: AsyncCallback<void>): void;\n    \n    start(): Promise<void>;\n    \n    pause(callback: AsyncCallback<void>): void;\n    \n    pause(): Promise<void>;\n    \n    resume(callback: AsyncCallback<void>): void;\n    \n    resume(): Promise<void>;\n    \n    stop(callback: AsyncCallback<void>): void;\n    \n    stop(): Promise<void>;\n    \n    release(callback: AsyncCallback<void>): void;\n    \n    release(): Promise<void>;\n    \n    reset(callback: AsyncCallback<void>): void;\n     \n    reset(): Promise<void>;\n    \n    on(type: 'error', callback: ErrorCallback): void;\n\n    \n     readonly state: VideoRecordState;\n  }", "api_method_name": "VideoRecorder", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 81, "since": 9, "api_used": "\u662f", "lines": ["", "  * @tc.desc      : VideoRecorder start async api\n   ", "  * @tc.name      : VideoRecorder start async api\n   ", "le.info('case createVideoRecorder called');\n         ", "  * @tc.desc      : VideoRecorder stop async api\n    ", "        media.createVideoRecorder((err, recorder) => ", "t/index'\n\ndescribe('VideoRecorderEnumTest', function ", "  * @tc.desc      : VideoRecorder stop promise api\n  ", "th;\n    media.createVideoRecorder((err, recorder) => ", ") {\n    media.createVideoRecorder((err, recorder) => ", "le.info('case createVideoRecorder error hanpped');\n  ", "t/index'\n\ndescribe('VideoRecorderFuncPromiseTest', fu", "est.js')\nrequire('./VideoRecorderEnumTest.test.js')\n", "est.js')\nrequire('./VideoRecorderFuncPromiseTest.test", "est.js')\nrequire('./VideoRecorderAPICallbackTest.test", "  await media.createVideoRecorder().then((recorder) =", "e.info(TAG + 'createVideoRecorder called')\n      vide", "  * @tc.name      : VideoRecorder stop async api\n    ", "le.info('case createVideoRecorder success ');\n       ", "  * @tc.name      : VideoRecorder stop promise api\n  ", "t/index'\n\ndescribe('VideoRecorderFuncCallbackTest', f", "t/index'\n\ndescribe('VideoRecorderAPICallbackTest', fu"], "files": ["List.test.js", "VideoRecorderEnumTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "prepare", "api_method_all": "prepare(config: VideoRecorderConfig, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 617, "since": 6, "api_used": "\u662f", "lines": ["      videoRecorder.prepare(videoConfig, (err) => {\n        console", "AG + 'videoRecorder.prepare called.')\n    videoRecorderPromise.prep", "udioDecodeProcessor.prepare((err) => {\n                expect(err).", "AG + 'videoRecorder.prepare called.')\n      videoRecorder.prepare(v", " console.info(`case prepare 1`);\n                setCallback(savepa", "       console.log(\"prepare success\");\n        }, failCallback).cat", "AG + 'videoRecorder.prepare success.')\n      })\n\n    videoRecorderP", "   eventEmitter.on('prepare', () => {\n            audioDecodeProces", "AG + 'videoRecorder.prepare success.')\n      })\n\n      videoRecorde", "ideoRecorderPromise.prepare(videoConfigPromise, (err) => {\n        ", " eventEmitter.emit('prepare');\n            })\n        });\n        e"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "prepare", "api_method_all": "prepare(config: VideoRecorderConfig): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 107, "since": 6, "api_used": "\u662f", "lines": ["  await videoPlayer.prepare().then(() => {\n            expect(video", "ideoEncodeProcessor.prepare().then(() => {\n                console.", "udioDecodeProcessor.prepare().then(() => {\n            console.log(", "udioDecodeProcessor.prepare().then(() => {\n                    cons", "ideoDecodeProcessor.prepare().then(() => {\n            console.info", "udioEncodeProcessor.prepare().then(() => {\n                    cons", "  await videoPlayer.prepare().then(() => {\n            console.info", "ideoEncodeProcessor.prepare().then(() => {\n            console.info", "  await videoPlayer.prepare().then(() => {\n            videoPlayer.", "udioEncodeProcessor.prepare().then(() => {\n            console.info", "udioDecodeProcessor.prepare().then(() => {\n            console.info"], "files": ["AudioDecoderReliabilityPromiseTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoDecoderEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "getInputSurface", "api_method_all": "getInputSurface(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 66, "since": 9, "api_used": "\u662f", "lines": [" console.info('case getInputSurface called');\n            console.info(`cas", " console.info('case getInputSurface success');\n            surfaceID = inpu", "      videoRecorder.getInputSurface((err, outPutsurface) => {\n            i", " @tc.name      : 08.getInputSurface 3 times\n        * @tc.desc      : Audio", "      videoRecorder.getInputSurface((err, id) => {\n        console.info(TAG", "ideoRecorderPromise.getInputSurface((err, id) => {\n      console.info(TAG +", "nsole.info(`case to getInputSurface`);\n                await toGetInputSurf", " console.info('case getInputSurface error hanpped');\n                toNext", " console.info('case getInputSurface success');\n                surfaceID = ", " @tc.name      : 07.getInputSurface->reset\n        * @tc.desc      : Audio ", "ole.info('in case : getInputSurface success, surfaceID ' + surfaceID);\n    ", "e      : 01.create->getInputSurface\n        * @tc.desc      : Audio recordr", " console.info(`case getInputSurface,state is ${videoRecorder.state}`);\n    ", "ideoEncodeProcessor.getInputSurface((err, inputSurface) => {\n            ex", "ame      : 06.stop->getInputSurface\n        * @tc.desc      : Audio recordr", " eventEmitter.emit('getInputSurface');\n            })\n        });\n        e", "   eventEmitter.on('getInputSurface', (done) => {\n        videoEncodeProces", "      : 02.prepare->getInputSurface\n        * @tc.desc      : Audio recordr", " console.info('case getInputSurface success :' + surfaceID);\n              ", " @tc.name      : 07.getInputSurface->stop\n        * @tc.desc      : Audio r", "me      : 07.reset->getInputSurface\n        * @tc.desc      : Audio recordr", "console.info(TAG + 'getInputSurface called')\n      videoId = id\n      conso", " eventEmitter.emit('getInputSurface', done);\n        });\n    });\n    eventE", " @tc.name      : 07.getInputSurface->pause\n        * @tc.desc      : Audio ", "console.info(TAG + 'getInputSurface called')\n        videoId = id\n        c", "   eventEmitter.on('getInputSurface', () => {\n            videoEncodeProces", "console.info(TAG + 'getInputSurface surfaceId: ' + JSON.stringify(videoId))", "GETSURFACE_EVENT = 'getInputSurface';\n    const START_EVENT = 'start';\n    ", "      videoRecorder.getInputSurface((err, outPutSurface) => {\n            i", " @tc.name      : 07.getInputSurface->resume\n        * @tc.desc      : Audio", "e      : 05.resume->getInputSurface\n        * @tc.desc      : Audio recordr", "ideoEncodeProcessor.getInputSurface((err, inputSurface) => {\n              ", "me      : 03.start->getInputSurface\n        * @tc.desc      : Audio recordr", "me      : 04.pause->getInputSurface\n        * @tc.desc      : Audio recordr"], "files": ["VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets", "VideoEncoderSoftwareFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "getInputSurface", "api_method_all": "getInputSurface(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 27, "since": 9, "api_used": "\u662f", "lines": ["await videoRecorder.getInputSurface().then((outPutSurface) => {\n           ", "ideoEncodeProcessor.getInputSurface().then((inputSurface) => {\n            "], "files": ["VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "start", "api_method_all": "start(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 1221, "since": 6, "api_used": "\u662f", "lines": ["rLog: renderInstant started :SUCCESS ');\n        }).catch((err) =", "orkRecLog: Capturer start :ERROR : '+err.message);\n            re", "rLog: renderInstant start :ERROR : '+err.message);\n            re", "orkRecLog: Capturer started :SUCCESS ');\n        }).catch((err) =", "ew Date().getTime()-startTime;\n        let avgTime = waitTime/MAX", "ger(); \n        let startTime = new Date().getTime();\n        for"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "start", "api_method_all": "start(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 128, "since": 6, "api_used": "\u662f", "lines": ["wait ringtonePlayer.start().then(async function () {\n\t\t\tconsole.l", "     await audioRen.start().then(async function () {\n         con", "wait ringtonePlayer.start().then(async function () {\n\t\t\tawait sle", " ringtonePlayerTemp.start().then(async function () {\n\t\t\tconsole.l", "     await audioRen.start().then(async function (started) {\n     ", "await audioCapturer.start().then(async function (started) {\n     ", "wait ringtonePlayer.start().then(async function () {\n            ", "     ringtonePlayer.start().then(function () {\n            consol", "wait ringtonePlayer.start().then(async function () {\n\t\t\t\t\tconsole", "wait ringtonePlayer.start().then(async function () {\n\t\t\t\tconsole.", "\n\n\t\t\tringtonePlayer.start().then(async function () {\n            ", "     await audioRen.start().then(async function () {\n            ", "ait audioCapPromise.start().then(async function () {\n            ", "wait ringtonePlayer.start().then(function () {\n\t\t\t\t\tconsole.log('", "     ringtonePlayer.start().then(async function () {\n            ", "     await audioCap.start().then(async function () {\n            "], "files": ["VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "pause", "api_method_all": "pause(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 179, "since": 6, "api_used": "\u662f", "lines": [" console.info(`case pause called`);\n            console.info(`cas", "    audioPlayer.on('pause', () => {\n            console.info('cas", " @tc.name      : 02.pause->reset\n        * @tc.desc      : Reliab", ";\n\n        audioRen.pause((err) => {\n            if (err) {\n     ", "nsole.info(`case to pause`);\n                audioPlayer.pause();", "state).assertEqual('paused');\n            testAudioPlayer.loop = ", "e      : 04.resume->pause\n        * @tc.desc      : Reliability T", "state).assertEqual('paused');\n            expect(audioPlayer.curr", "me      : 034.play->pause->seek(out of duratin)->play\n        * @", "  audioRecorder.on('pause', () => {\n            console.info('set", "dioPlayer.state == 'paused')) {\n                nextStep(mySteps,", "      audioRecorder.pause();\n                break;\n            c", " @tc.name      : 02.pause->release\n        * @tc.desc      : Reli", "me      : 032.play->pause->seek(0)->play\n        * @tc.desc      ", "me      : 03.start->pause\n        * @tc.desc      : Reliability T", "        audioPlayer.pause();\n            } else {\n               ", "nsole.info('case to pause');\n                audioRecorder.pause(", "6.play->stop->seek->pause\n        * @tc.desc      : Audio playbac", "state).assertEqual('paused');\n            audioPlayer.setVolume(M", "me      : 021.play->pause->seek->stop\n        * @tc.desc      : A", " @tc.name      : 03.pause->setVolume\n        * @tc.desc      : Re", "        audioPlayer.pause();\n    })\n\n    \n    it('SUB_MEDIA_PLAYE", "state).assertEqual('paused');\n        expect(audioPlayer.loop).as", "e.info('case now is paused');\n            expect(audioPlayer.stat", "me      : 023.play->pause->play->seek(0)->stop\n        * @tc.desc", "      audioRecorder.pause();\n    })\n\n    /* *\n        * @tc.numbe", "me      : 022.play->pause->play->seek(0)\n        * @tc.desc      ", "state).assertEqual('paused');\n            nextStep(mySteps,done);", "        audioPlayer.pause();\n                break;\n            c", "me      : 06.reset->pause\n        * @tc.desc      : Reliability T", "ame      : 05.stop->pause\n        * @tc.desc      : Reliability T", "me      : 020.play->pause->seek->reset\n        * @tc.desc      : ", "creatAudioRecorder->pause\n        * @tc.desc      : Reliability T", "e.info('setCallback pause() case callback is called');\n          ", "    audioPlayer.on('pause', () => {\n            mySteps.shift();\n", " console.info(`case pause currentTime is ${audioPlayer.currentTim", "me      : 033.play->pause->seek(duration)->play\n        * @tc.des", " @tc.name      : 09.pause three times\n        * @tc.desc      : R", " @tc.name      : 04.pause->resume\n        * @tc.desc      : Relia", "      : 02.prepare->pause\n        * @tc.desc      : Reliability T", "     : 08.all step->pause\n        * @tc.desc      : Reliability T"], "files": ["HttpPlayerFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "AudioRenderer.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "pause", "api_method_all": "pause(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 23, "since": 6, "api_used": "\u662f", "lines": ["await videoRecorder.pause().then(() => {\n            expect(video", "  await videoPlayer.pause().then(() => {\n            console.info", "     await audioRen.pause().then(async function () {\n         con", "  await videoPlayer.pause().then(() => {\n            expect(video", "await videoRecorder.pause().then(() => {\n            console.info", "     await audioRen.pause().then(async function () {\n            "], "files": ["HttpPlayerFuncPromiseTest.test.js", "AudioRenderer.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoPlayerFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "resume", "api_method_all": "resume(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 51, "since": 6, "api_used": "\u662f", "lines": ["      audioRecorder.resume();\n                break;\n            c", "e      : 01.create->resume\n        * @tc.desc      : Audio recordr", "me      : 03.start->resume\n        * @tc.desc      : Reliability T", " @tc.name      : 09.resume threee times\n        * @tc.desc      : ", " @tc.name      : 05.resume->getInputSurface\n        * @tc.desc    ", "  audioRecorder.on('resume', () => {\n            console.info('set", " @tc.name      : 04.resume->start\n        * @tc.desc      : Reliab", "me      : 03.start->resume\n        * @tc.desc      : Audio recordr", " console.info('case resume error hanpped');\n                toNext", "      : 02.prepare->resume\n        * @tc.desc      : Audio recordr", "me      : 06.reset->resume\n        * @tc.desc      : Audio recordr", "name      : 08.all->resume\n        * @tc.desc      : Reliability T", "stop->reset->pause->resume->stop->reset\n        * @tc.desc      : ", "      audioRecorder.resume();\n    })\n\n    /* *\n        * @tc.numbe", " console.info('case resume called');\n        }, failureCallback).c", " @tc.name      : 04.resume->pause\n        * @tc.desc      : Audio ", " @tc.name      : 05.resume->stop\n        * @tc.desc      : Audio r", " @tc.name      : 05.resume->release\n        * @tc.desc      : Reli", "me      : 06.reset->resume\n        * @tc.desc      : Reliability T", " console.info('case resume success');\n                sleep(RECORD", "      videoRecorder.resume((err) => {\n            if (typeof (err)", "me      : 04.pause->resume\n        * @tc.desc      : Audio recordr", "creatAudioRecorder->resume\n        * @tc.desc      : Reliability T", "e      : 008.pause->resume->stop->reset\n        * @tc.desc      : ", " @tc.name      : 08.resume 3 times\n        * @tc.desc      : Audio", " @tc.name      : 04.resume->pause\n        * @tc.desc      : Reliab", "ame      : 05.stop->resume\n        * @tc.desc      : Audio recordr", "07.getInputSurface->resume\n        * @tc.desc      : Audio recordr", "e.info('setCallback resume() case callback is called');\n          ", " @tc.name      : 05.resume->reset\n        * @tc.desc      : Audio ", " : 16.start->pause->resume->releas (only video) (promise)\n        ", "      : 02.prepare->resume\n        * @tc.desc      : Reliability T", " : 16.start->pause->resume->releas (only video) (callback)\n       ", "ame      : 05.stop->resume\n        * @tc.desc      : Reliability T", "nsole.info('case to resume');\n                audioRecorder.resume", " @tc.name      : 05.resume->reset\n        * @tc.desc      : Reliab", "e      : 003.pause->resume\n        * @tc.desc      : Audio recordr", "nst RESUME_EVENT = 'resume';\n    const STOP_EVENT = 'stop';\n    co", "me      : 04.pause->resume\n        * @tc.desc      : Reliability T", "e      : 006.pause->resume->pause\n        * @tc.desc      : Audio ", " @tc.name      : 05.resume->stop\n        * @tc.desc      : Reliabi"], "files": ["RecorderLocalTestAudioFUNC.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "resume", "api_method_all": "resume(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 4, "since": 6, "api_used": "\u662f", "lines": ["await videoRecorder.resume().then(() => {\n            expect(video"], "files": ["VideoRecorderFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "stop", "api_method_all": "stop(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 833, "since": 6, "api_used": "\u662f", "lines": ["RenderLog: Renderer stopped : SUCCESS');\n            resultFlag=", "RenderLog: Renderer stopped');\n             resultFlag=true;\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n\n     ", "RenderLog: Renderer stop:ERROR : '+err.message);\n         result", "orkRecLog: Capturer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n     a", "RenderLog: Renderer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stop failed: Error: ${err.message}`);\n      ", "orkRecLog: Capturer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stopped : SUCCESS');\n     }).catch((err) => ", "RenderLog: Renderer stopped : SUCCESS');\n        }).catch((err) ", "    }\n     audioRen.stop((err, state) => {\n         if (err) {\n ", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n  ", "RenderLog: Renderer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n\n "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "stop", "api_method_all": "stop(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 99, "since": 6, "api_used": "\u662f", "lines": ["   eventEmitter.on('stop', () => {\n            sleep(5000).then(", "wait ringtonePlayer.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function (stopped) {\n     ", "wait ringtonePlayer.stop().then(function () {\n            consol", "await audioCapturer.stop().then(async function (data) {\n        ", "     await audioCap.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function () {\n         con", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tawait sl", "udioDecodeProcessor.stop().then(() => {\n            console.info", "     await audioRen.stop().then(async function () {\n            ", "udioDecodeProcessor.stop().then(() => {\n                console.", "wait ringtonePlayer.stop().then(async function() {\n\t\t\t\tconsole.e", "udioDecodeProcessor.stop().then(() => {\n                    cons", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tconsole.", "wait ringtonePlayer.stop().then(function () {\n                co", ");\n\t\tringtonePlayer.stop().then(function () {\n                co", "\n\t\t\t\tringtonePlayer.stop().then(function () {\n\t\t\t\tconsole.log('A", "ait audioCapPromise.stop().then(async function () {\n            ", "wait ringtonePlayer.stop().then(function(){\n\t\t\tconsole.log('Audi"], "files": ["VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 6, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 6, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "reset", "api_method_all": "reset(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 563, "since": 7, "api_used": "\u662f", "lines": ["\n    async function resetWork() {\n        resetParam();\n        a", "t running state and reset\");\n        let events = require('events", " console.info(`case reset 1`);\n                eventEmitter.emit(", "cess\");\n            resetParam();\n            readFile(AUDIOPATH)", "fore last frame and reset\");\n        let events = require('events", "cess\");\n            resetParam();\n            audioDecodeProcesso", " resetAtEOS IS :' + resetAtEOS)\n                    readFile(AUDI", "udioDecodeProcessor.reset((err) => {\n                        expe", "   eventEmitter.on('reset', () => {\n            resetParam();\n   ", "() => {\n            resetParam();\n            audioDecodeProcesso", "enum = 200;\n        resetAtEOS = true;\n        needrelease = true", "t running state and reset\");\n        let mediaDescription = {\n   ", " eventEmitter.emit('reset');\n                })\n            })\n  ", "OS = false;\n        resetAtEOS = false;\n        flushAtEOS = fals", "setWork() {\n        resetParam();\n        await audioDecodeProces", "                    resetParam();\n                    readFile(AU", "fter last frame and reset\");\n        let mediaDescription = {\n   ", "setWork() {\n        resetParam();\n        audioDecodeProcessor.re", "udioDecodeProcessor.reset((err) => {\n            expect(err).asse", "fter last frame and reset\");\n        let events = require('events", "    }\n\n    function resetParam() {\n        readStreamSync = undef", "failCatch);\n        resetParam();\n        await audioDecodeProces", "      console.info('resetParam success, resetAtEOS IS :' + resetA", "udioDecodeProcessor.reset((err) => {\n                expect(err).", "   })\n\n    function resetParam(){\n        readStreamSync = undefi", "       console.log(\"reset success\");\n                }, failCallb", "enum = 200;\n        resetAtEOS = true;\n        let savepath = BAS", "                    resetParam();\n                    console.inf", "resetParam success, resetAtEOS IS :' + resetAtEOS)\n              ", " console.info(\"case reset success\");\n        }, failCallback).cat", "         } else if (resetAtEOS) {\n                    await reset", "              await resetWork();\n                } else if (flush", "`);\n                resetParam();\n                readFile(AUDIOP", "fore last frame and reset\");\n        let mediaDescription = {\n   ", "  console.log(\"case reset success\");\n                audioDecodeP", "OS = false;\n    let resetAtEOS = false;\n    let flushAtEOS = fals", "       console.log(\"reset success\");\n                        audi", " console.info(\"case reset success\");\n            if (needrelease)", "lCatch);});\n        resetParam();\n        await audioDecodeProces"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "reset", "api_method_all": "reset(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 41, "since": 7, "api_used": "\u662f", "lines": ["udioEncodeProcessor.reset().then(() => {\n                    cons", "ideoDecodeProcessor.reset().then(() => {\n            console.info", "udioEncodeProcessor.reset().then(async() => {\n            console", "await videoRecorder.reset().then(() => {\n            console.info", "     await array[j].reset().then(() => {\n                console.", "ideoDecodeProcessor.reset().then(() => {\n                console.", "ideoEncodeProcessor.reset().then(() => {\n            console.info", "udioEncodeProcessor.reset().then(() => {\n            console.info", "  await videoPlayer.reset().then(() => {\n            console.info", "udioDecodeProcessor.reset().then(() => {\n            console.info", "udioDecodeProcessor.reset().then(() => {\n                    cons", "ideoEncodeProcessor.reset().then(() => {\n                console.", "  await videoPlayer.reset().then(() => {\n            expect(video"], "files": ["VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 6, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorder", "api_method_name": "state", "api_method_all": "readonly state: VideoRecordState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1920, "since": 6, "api_used": "\u662f", "lines": [" STATE : '+audioRen.state);\n\n        var buff", "PASS : ' + audioRen.state);\n     }\n     else ", " STATE : '+audioCap.state);\n\n        var buff", "audioRen.stop((err, state) => {\n         if (", " STATE : '+audioRen.state);\n\n     console.inf", " STATE : '+audioRen.state);\n\n        console.", "\n\n     if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        return r", "ioRen.release((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n    //      resul", " STATE : '+audioRen.state);\n\n     await audio", " STATE : '+audioRen.state);\n\n     var samplin", " STATE : '+audioRen.state);\n\n     return resu", "PASS : ' + audioRen.state);\n    //  }\n    // ", "udioRen.drain((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n         resultFl", " STATE : '+audioRen.state);\n\n     var bufferS", " STATE : '+audioRen.state);\n\n     if (resultF", " STATE : '+audioRen.state);\n\n        await au", "   //  if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        await au"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_all": "enum PlaybackSpeed {\n    \n    SPEED_FORWARD_0_75_X = 0,\n    \n    SPEED_FORWARD_1_00_X = 1,\n    \n    SPEED_FORWARD_1_25_X = 2,\n    \n    SPEED_FORWARD_1_75_X = 3,\n    \n    SPEED_FORWARD_2_00_X = 4,\n  }", "api_method_name": "PlaybackSpeed", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": ["         case media.PlaybackSpeed.SPEED_FORWARD_1_00_", "ayer.setSpeed(media.PlaybackSpeed.SPEED_FORWARD_2_00_", "ayer.setSpeed(media.PlaybackSpeed.SPEED_FORWARD_1_25_", "       expect(media.PlaybackSpeed.SPEED_FORWARD_1_75_", "         case media.PlaybackSpeed.SPEED_FORWARD_1_25_", "         case media.PlaybackSpeed.SPEED_FORWARD_2_00_", "       expect(media.PlaybackSpeed.SPEED_FORWARD_1_25_", "ayer.setSpeed(media.PlaybackSpeed.SPEED_FORWARD_1_00_", "         case media.PlaybackSpeed.SPEED_FORWARD_1_75_", "       expect(media.PlaybackSpeed.SPEED_FORWARD_1_00_", "TSPEED_EVENT, media.PlaybackSpeed.SPEED_FORWARD_2_00_", ").assertEqual(media.PlaybackSpeed.SPEED_FORWARD_2_00_", "       expect(media.PlaybackSpeed.SPEED_FORWARD_0_75_", "       expect(media.PlaybackSpeed.SPEED_FORWARD_2_00_", "ayer.setSpeed(media.PlaybackSpeed.SPEED_FORWARD_0_75_", "(videoPlayer, media.PlaybackSpeed.SPEED_FORWARD_2_00_", "         case media.PlaybackSpeed.SPEED_FORWARD_0_75_", "ayer.setSpeed(media.PlaybackSpeed.SPEED_FORWARD_1_75_"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_name": "SPEED_FORWARD_0_75_X", "api_method_all": "SPEED_FORWARD_0_75_X = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["media.PlaybackSpeed.SPEED_FORWARD_0_75_X).then((speedMode) =", "media.PlaybackSpeed.SPEED_FORWARD_0_75_X:\n                  ", "media.PlaybackSpeed.SPEED_FORWARD_0_75_X).assertEqual(0);\n  "], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_name": "SPEED_FORWARD_1_00_X", "api_method_all": "SPEED_FORWARD_1_00_X = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["media.PlaybackSpeed.SPEED_FORWARD_1_00_X:\n                  ", "media.PlaybackSpeed.SPEED_FORWARD_1_00_X).assertEqual(1);\n  ", "media.PlaybackSpeed.SPEED_FORWARD_1_00_X).then((speedMode) ="], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_name": "SPEED_FORWARD_1_25_X", "api_method_all": "SPEED_FORWARD_1_25_X = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["media.PlaybackSpeed.SPEED_FORWARD_1_25_X).assertEqual(2);\n  ", "media.PlaybackSpeed.SPEED_FORWARD_1_25_X:\n                  ", "media.PlaybackSpeed.SPEED_FORWARD_1_25_X).then((speedMode) ="], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_name": "SPEED_FORWARD_1_75_X", "api_method_all": "SPEED_FORWARD_1_75_X = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["media.PlaybackSpeed.SPEED_FORWARD_1_75_X).then((speedMode) =", "media.PlaybackSpeed.SPEED_FORWARD_1_75_X).assertEqual(3);\n  ", "media.PlaybackSpeed.SPEED_FORWARD_1_75_X:\n                  "], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_name": "SPEED_FORWARD_2_00_X", "api_method_all": "SPEED_FORWARD_2_00_X = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["media.PlaybackSpeed.SPEED_FORWARD_2_00_X);\n            sleep", "media.PlaybackSpeed.SPEED_FORWARD_2_00_X).assertEqual(4);\n  ", "media.PlaybackSpeed.SPEED_FORWARD_2_00_X).then((speedMode) =", "media.PlaybackSpeed.SPEED_FORWARD_2_00_X:\n                  ", "media.PlaybackSpeed.SPEED_FORWARD_2_00_X, startTime);\n      ", "media.PlaybackSpeed.SPEED_FORWARD_2_00_X, RELEASE_EVENT, END", "media.PlaybackSpeed.SPEED_FORWARD_2_00_X);\n            conso"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_all": "interface VideoPlayer {\n    \n    setDisplaySurface(surfaceId: string, callback: AsyncCallback<void>): void;\n    \n    setDisplaySurface(surfaceId: string): Promise<void>;\n    \n    prepare(callback: AsyncCallback<void>): void;\n     \n    prepare(): Promise<void>;\n    \n    play(callback: AsyncCallback<void>): void;\n     \n    play(): Promise<void>;\n    \n    pause(callback: AsyncCallback<void>): void;\n     \n    pause(): Promise<void>;\n    \n    stop(callback: AsyncCallback<void>): void;\n     \n    stop(): Promise<void>;\n    \n    reset(callback: AsyncCallback<void>): void;\n     \n    reset(): Promise<void>;\n    \n    seek(timeMs: number, callback: AsyncCallback<number>): void;\n    \n     seek(timeMs: number, mode:SeekMode, callback: AsyncCallback<number>): void;\n     \n    seek(timeMs: number, mode?:SeekMode): Promise<number>;\n    \n    setVolume(vol: number, callback: AsyncCallback<void>): void;\n     \n    setVolume(vol: number): Promise<void>;\n    \n    release(callback: AsyncCallback<void>): void;\n     \n    release(): Promise<void>;\n    \n    getTrackDescription(callback: AsyncCallback<Array<MediaDescription>>): void;\n\n    \n    getTrackDescription() : Promise<Array<MediaDescription>>;\n\n    \n    url: string;\n\n    \n    loop: boolean;\n\n    \n    readonly currentTime: number;\n\n    \n    readonly duration: number;\n\n    \n    readonly state: VideoPlayState;\n\n    \n    readonly width: number;\n\n    \n    readonly height: number;\n\n    \n    setSpeed(speed:number, callback: AsyncCallback<number>): void;\n    \n    setSpeed(speed:number): Promise<number>;\n\n    \n    on(type: 'playbackCompleted', callback: Callback<void>): void;\n\n    \n    on(type: 'bufferingUpdate', callback: (infoType: BufferingInfoType, value: number) => void): void;\n\n    \n    on(type: 'startRenderFrame', callback: Callback<void>): void;\n\n    \n    on(type: 'videoSizeChanged', callback: (width: number, height: number) => void): void;\n\n    \n    on(type: 'error', callback: ErrorCallback): void;\n  }", "api_method_name": "VideoPlayer", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 136, "since": 8, "api_used": "\u662f", "lines": ["", "le.info('case createVideoPlayer is failed');\n      ", "D);\n        let testVideoPlayer1 = null;\n        le", "back);\n\n        testVideoPlayer1.url = fdPath;\n    ", "n case error: createVideoPlayer fail');\n           ", "le.info('case createVideoPlayer success ');\n       ", "est.js')\nrequire('./VideoPlayerAPICallbackTest.test", "t/index'\n\ndescribe('VideoPlayerFuncPromiseTest', fu", "le.info('case createVideoPlayer success');\n        ", "t/index'\n\ndescribe('VideoPlayerFuncCallbackTest', f", "le.info('case createVideoPlayer success!!');\n      ", "fo('in case : createVideoPlayer success');\n        ", "        media.createVideoPlayer((err, video) => {\n ", "est.js')\nrequire('./VideoPlayerFuncPromiseTest.test", "est.js')\nrequire('./VideoPlayerEnumTest.test.js')\n", "  await media.createVideoPlayer().then((video) => {", "                testVideoPlayer1 = video\n          ", "ll;\n        let testVideoPlayer2 = null;\n        aw", "t/index'\n\ndescribe('VideoPlayerEnumTest', function ", "t/index'\n\ndescribe('VideoPlayerAPICallbackTest', fu"], "files": ["HttpPlayerFuncPromiseTest.test.js", "List.test.js", "VideoDecoderEnumTest.test.js", "VideoPlayerEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "setDisplaySurface", "api_method_all": "setDisplaySurface(surfaceId: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 58, "since": 8, "api_used": "\u662f", "lines": [" @tc.name      : 10.setDisplaySurface->release\n        * @tc.desc      : Vide", " @tc.name      : 10.setDisplaySurface->reset\n        * @tc.desc      : Video ", " @tc.name      : 09.setDisplaySurface->seek\n        * @tc.desc      : Video p", " @tc.name      : 10.setDisplaySurface->pause\n        * @tc.desc      : Video ", " @tc.name      : 10.setDisplaySurface->stop\n        * @tc.desc      : Video p", " console.info('case setDisplaySurface success');\n            expect(testVideo", " console.info('case setDisplaySurface success');\n            expect(videoPlay", " @tc.name      : 10.setDisplaySurface->play\n        * @tc.desc      : Video p", "SETSURFACE_EVENT = 'setDisplaySurface';\n    const GETDESCRIPTION = 'getTrackD", " console.info('case setDisplaySurface success');\n        }, failureCallback).", " @tc.name      : 09.setDisplaySurface->setspeed\n        * @tc.desc      : Vid", "        videoPlayer.setDisplaySurface(surfaceID, (err) => {\n            if (t", " console.info('case setDisplaySurface success!!');\n                toNextStep", " @tc.name      : 09.setDisplaySurface->setvolume\n        * @tc.desc      : Vi"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "setDisplaySurface", "api_method_all": "setDisplaySurface(surfaceId: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 41, "since": 8, "api_used": "\u662f", "lines": ["  await videoPlayer.setDisplaySurface(surfaceID).then(() => {\n            exp", "it testVideoPlayer1.setDisplaySurface(surfaceID).then(() => {\n            con", "  await videoPlayer.setDisplaySurface(surfaceID).then(() => {\n            con", "it testVideoPlayer2.setDisplaySurface(surfaceID).then(() => {\n            con"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "prepare", "api_method_all": "prepare(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 617, "since": 6, "api_used": "\u662f", "lines": ["      videoRecorder.prepare(videoConfig, (err) => {\n        console", "AG + 'videoRecorder.prepare called.')\n    videoRecorderPromise.prep", "udioDecodeProcessor.prepare((err) => {\n                expect(err).", "AG + 'videoRecorder.prepare called.')\n      videoRecorder.prepare(v", " console.info(`case prepare 1`);\n                setCallback(savepa", "       console.log(\"prepare success\");\n        }, failCallback).cat", "AG + 'videoRecorder.prepare success.')\n      })\n\n    videoRecorderP", "   eventEmitter.on('prepare', () => {\n            audioDecodeProces", "AG + 'videoRecorder.prepare success.')\n      })\n\n      videoRecorde", "ideoRecorderPromise.prepare(videoConfigPromise, (err) => {\n        ", " eventEmitter.emit('prepare');\n            })\n        });\n        e"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "prepare", "api_method_all": "prepare(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 107, "since": 6, "api_used": "\u662f", "lines": ["  await videoPlayer.prepare().then(() => {\n            expect(video", "ideoEncodeProcessor.prepare().then(() => {\n                console.", "udioDecodeProcessor.prepare().then(() => {\n            console.log(", "udioDecodeProcessor.prepare().then(() => {\n                    cons", "ideoDecodeProcessor.prepare().then(() => {\n            console.info", "udioEncodeProcessor.prepare().then(() => {\n                    cons", "  await videoPlayer.prepare().then(() => {\n            console.info", "ideoEncodeProcessor.prepare().then(() => {\n            console.info", "  await videoPlayer.prepare().then(() => {\n            videoPlayer.", "udioEncodeProcessor.prepare().then(() => {\n            console.info", "udioDecodeProcessor.prepare().then(() => {\n            console.info"], "files": ["AudioDecoderReliabilityPromiseTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoDecoderEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "play", "api_method_all": "play(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 737, "since": 6, "api_used": "\u662f", "lines": ["(500);\n       await playbackPromise(AudioRendererOptions, mediaD", " When stream is NOT playing\n                * @tc.size      : ME", "esultFlag=true;\n    playbackPromise(AudioRendererOptions, mediaD", "   value.forEach(displayDeviceProp);\n\n                if (device", "\n    async function playbackPromise (AudioRendererOptions, fpath", " resultFlag = await playbackPromise(AudioRendererOptions, mediaD", "   value.forEach(displayDeviceProp);\n\n            if (deviceType", "   value.forEach(displayDeviceProp);\n            if (deviceTypeV", "   value.forEach(displayDeviceProp);\n                if (deviceT", "\n    async function playbackCB (AudioRendererOptions, fpath){\n\n ", " }\n\n    function displayDeviceProp(value, index, array) {\n      "], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetCallBack2.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "fileAssetPromise2.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "fileAsset2.test.js", "SR000GHQBN.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "VideoPlayerFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "AudioRenderer.test.js", "fileTestPromise.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "play", "api_method_all": "play(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 105, "since": 6, "api_used": "\u662f", "lines": ["\n        await toDisplayPage().then(() => {\n        }, failCallb", "         await toDisplayPage().then(() => {\n            }, failC", "tVideoPlayer1.setDisplaySurface(surfaceID).then(() => {\n        ", "tVideoPlayer2.setDisplaySurface(surfaceID).then(() => {\n        ", "it testVideoPlayer2.play().then(() => {\n            console.info", "t videoPlayer.getDisplaySurface().then((surface) => {\n          ", "t videoPlayer.setDisplaySurface(surfaceID).then(() => {\n        ", "         await toDisplayPage().then(() => {\n                }, f", "  await videoPlayer.play().then(() => {\n            expect(video", "it testVideoPlayer1.play().then(() => {\n            console.info", "  await videoPlayer.play().then(() => {\n            console.info", "ace(surfaceID, isDisplay).then(() => {\n            console.info("], "files": ["VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "pause", "api_method_all": "pause(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 179, "since": 6, "api_used": "\u662f", "lines": [" console.info(`case pause called`);\n            console.info(`cas", "    audioPlayer.on('pause', () => {\n            console.info('cas", " @tc.name      : 02.pause->reset\n        * @tc.desc      : Reliab", ";\n\n        audioRen.pause((err) => {\n            if (err) {\n     ", "nsole.info(`case to pause`);\n                audioPlayer.pause();", "state).assertEqual('paused');\n            testAudioPlayer.loop = ", "e      : 04.resume->pause\n        * @tc.desc      : Reliability T", "state).assertEqual('paused');\n            expect(audioPlayer.curr", "me      : 034.play->pause->seek(out of duratin)->play\n        * @", "  audioRecorder.on('pause', () => {\n            console.info('set", "dioPlayer.state == 'paused')) {\n                nextStep(mySteps,", "      audioRecorder.pause();\n                break;\n            c", " @tc.name      : 02.pause->release\n        * @tc.desc      : Reli", "me      : 032.play->pause->seek(0)->play\n        * @tc.desc      ", "me      : 03.start->pause\n        * @tc.desc      : Reliability T", "        audioPlayer.pause();\n            } else {\n               ", "nsole.info('case to pause');\n                audioRecorder.pause(", "6.play->stop->seek->pause\n        * @tc.desc      : Audio playbac", "state).assertEqual('paused');\n            audioPlayer.setVolume(M", "me      : 021.play->pause->seek->stop\n        * @tc.desc      : A", " @tc.name      : 03.pause->setVolume\n        * @tc.desc      : Re", "        audioPlayer.pause();\n    })\n\n    \n    it('SUB_MEDIA_PLAYE", "state).assertEqual('paused');\n        expect(audioPlayer.loop).as", "e.info('case now is paused');\n            expect(audioPlayer.stat", "me      : 023.play->pause->play->seek(0)->stop\n        * @tc.desc", "      audioRecorder.pause();\n    })\n\n    /* *\n        * @tc.numbe", "me      : 022.play->pause->play->seek(0)\n        * @tc.desc      ", "state).assertEqual('paused');\n            nextStep(mySteps,done);", "        audioPlayer.pause();\n                break;\n            c", "me      : 06.reset->pause\n        * @tc.desc      : Reliability T", "ame      : 05.stop->pause\n        * @tc.desc      : Reliability T", "me      : 020.play->pause->seek->reset\n        * @tc.desc      : ", "creatAudioRecorder->pause\n        * @tc.desc      : Reliability T", "e.info('setCallback pause() case callback is called');\n          ", "    audioPlayer.on('pause', () => {\n            mySteps.shift();\n", " console.info(`case pause currentTime is ${audioPlayer.currentTim", "me      : 033.play->pause->seek(duration)->play\n        * @tc.des", " @tc.name      : 09.pause three times\n        * @tc.desc      : R", " @tc.name      : 04.pause->resume\n        * @tc.desc      : Relia", "      : 02.prepare->pause\n        * @tc.desc      : Reliability T", "     : 08.all step->pause\n        * @tc.desc      : Reliability T"], "files": ["HttpPlayerFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "AudioRenderer.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "pause", "api_method_all": "pause(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 23, "since": 6, "api_used": "\u662f", "lines": ["await videoRecorder.pause().then(() => {\n            expect(video", "  await videoPlayer.pause().then(() => {\n            console.info", "     await audioRen.pause().then(async function () {\n         con", "  await videoPlayer.pause().then(() => {\n            expect(video", "await videoRecorder.pause().then(() => {\n            console.info", "     await audioRen.pause().then(async function () {\n            "], "files": ["HttpPlayerFuncPromiseTest.test.js", "AudioRenderer.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoPlayerFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "stop", "api_method_all": "stop(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 833, "since": 6, "api_used": "\u662f", "lines": ["RenderLog: Renderer stopped : SUCCESS');\n            resultFlag=", "RenderLog: Renderer stopped');\n             resultFlag=true;\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n\n     ", "RenderLog: Renderer stop:ERROR : '+err.message);\n         result", "orkRecLog: Capturer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n     a", "RenderLog: Renderer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stop failed: Error: ${err.message}`);\n      ", "orkRecLog: Capturer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stopped : SUCCESS');\n     }).catch((err) => ", "RenderLog: Renderer stopped : SUCCESS');\n        }).catch((err) ", "    }\n     audioRen.stop((err, state) => {\n         if (err) {\n ", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n  ", "RenderLog: Renderer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n\n "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "stop", "api_method_all": "stop(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 99, "since": 6, "api_used": "\u662f", "lines": ["   eventEmitter.on('stop', () => {\n            sleep(5000).then(", "wait ringtonePlayer.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function (stopped) {\n     ", "wait ringtonePlayer.stop().then(function () {\n            consol", "await audioCapturer.stop().then(async function (data) {\n        ", "     await audioCap.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function () {\n         con", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tawait sl", "udioDecodeProcessor.stop().then(() => {\n            console.info", "     await audioRen.stop().then(async function () {\n            ", "udioDecodeProcessor.stop().then(() => {\n                console.", "wait ringtonePlayer.stop().then(async function() {\n\t\t\t\tconsole.e", "udioDecodeProcessor.stop().then(() => {\n                    cons", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tconsole.", "wait ringtonePlayer.stop().then(function () {\n                co", ");\n\t\tringtonePlayer.stop().then(function () {\n                co", "\n\t\t\t\tringtonePlayer.stop().then(function () {\n\t\t\t\tconsole.log('A", "ait audioCapPromise.stop().then(async function () {\n            ", "wait ringtonePlayer.stop().then(function(){\n\t\t\tconsole.log('Audi"], "files": ["VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "reset", "api_method_all": "reset(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 563, "since": 7, "api_used": "\u662f", "lines": ["\n    async function resetWork() {\n        resetParam();\n        a", "t running state and reset\");\n        let events = require('events", " console.info(`case reset 1`);\n                eventEmitter.emit(", "cess\");\n            resetParam();\n            readFile(AUDIOPATH)", "fore last frame and reset\");\n        let events = require('events", "cess\");\n            resetParam();\n            audioDecodeProcesso", " resetAtEOS IS :' + resetAtEOS)\n                    readFile(AUDI", "udioDecodeProcessor.reset((err) => {\n                        expe", "   eventEmitter.on('reset', () => {\n            resetParam();\n   ", "() => {\n            resetParam();\n            audioDecodeProcesso", "enum = 200;\n        resetAtEOS = true;\n        needrelease = true", "t running state and reset\");\n        let mediaDescription = {\n   ", " eventEmitter.emit('reset');\n                })\n            })\n  ", "OS = false;\n        resetAtEOS = false;\n        flushAtEOS = fals", "setWork() {\n        resetParam();\n        await audioDecodeProces", "                    resetParam();\n                    readFile(AU", "fter last frame and reset\");\n        let mediaDescription = {\n   ", "setWork() {\n        resetParam();\n        audioDecodeProcessor.re", "udioDecodeProcessor.reset((err) => {\n            expect(err).asse", "fter last frame and reset\");\n        let events = require('events", "    }\n\n    function resetParam() {\n        readStreamSync = undef", "failCatch);\n        resetParam();\n        await audioDecodeProces", "      console.info('resetParam success, resetAtEOS IS :' + resetA", "udioDecodeProcessor.reset((err) => {\n                expect(err).", "   })\n\n    function resetParam(){\n        readStreamSync = undefi", "       console.log(\"reset success\");\n                }, failCallb", "enum = 200;\n        resetAtEOS = true;\n        let savepath = BAS", "                    resetParam();\n                    console.inf", "resetParam success, resetAtEOS IS :' + resetAtEOS)\n              ", " console.info(\"case reset success\");\n        }, failCallback).cat", "         } else if (resetAtEOS) {\n                    await reset", "              await resetWork();\n                } else if (flush", "`);\n                resetParam();\n                readFile(AUDIOP", "fore last frame and reset\");\n        let mediaDescription = {\n   ", "  console.log(\"case reset success\");\n                audioDecodeP", "OS = false;\n    let resetAtEOS = false;\n    let flushAtEOS = fals", "       console.log(\"reset success\");\n                        audi", " console.info(\"case reset success\");\n            if (needrelease)", "lCatch);});\n        resetParam();\n        await audioDecodeProces"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "reset", "api_method_all": "reset(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 41, "since": 7, "api_used": "\u662f", "lines": ["udioEncodeProcessor.reset().then(() => {\n                    cons", "ideoDecodeProcessor.reset().then(() => {\n            console.info", "udioEncodeProcessor.reset().then(async() => {\n            console", "await videoRecorder.reset().then(() => {\n            console.info", "     await array[j].reset().then(() => {\n                console.", "ideoDecodeProcessor.reset().then(() => {\n                console.", "ideoEncodeProcessor.reset().then(() => {\n            console.info", "udioEncodeProcessor.reset().then(() => {\n            console.info", "  await videoPlayer.reset().then(() => {\n            console.info", "udioDecodeProcessor.reset().then(() => {\n            console.info", "udioDecodeProcessor.reset().then(() => {\n                    cons", "ideoEncodeProcessor.reset().then(() => {\n                console.", "  await videoPlayer.reset().then(() => {\n            expect(video"], "files": ["VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "seek", "api_method_all": "seek(timeMs: number, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 362, "since": 6, "api_used": "\u662f", "lines": ["K_TIME).assertEqual(seekDoneTime);\n                isToDuration ", "me      : 029.play->seek(out of duration)\n        * @tc.desc    ", "r.on('timeUpdate', (seekDoneTime) => {\n            if (typeof (s", "  : 019.play->stop->seek\n        * @tc.desc      : Audio playbac", " : 020.play->pause->seek->reset\n        * @tc.desc      : Audio ", ".play->pause->play->seek(0)\n        * @tc.desc      : Audio play", " filed,errcode is ${seekDoneTime}`);\n                return;\n   ", " : 032.play->pause->seek(0)->play\n        * @tc.desc      : Audi", "        audioPlayer.seek(SEEK_TIME);\n            }\n        });\n ", "  : 024.play->stop->seek(0)->reset->play\n        * @tc.desc     ", "        audioPlayer.seek(mySteps[SECOND_INDEX]);\n               ", " console.info(`case seek to time is ${mySteps[SECOND_INDEX]}`);\n", ".play->pause->play->seek(0)->stop\n        * @tc.desc      : Audi", "  : 026.play->stop->seek->pause\n        * @tc.desc      : Audio ", "        if (typeof (seekDoneTime) == 'undefined') {\n            ", " : 021.play->pause->seek->stop\n        * @tc.desc      : Audio p", "        audioPlayer.seek(audioPlayer.duration);\n            } el", "r.loop == true) && (seekDoneTime == DURATION_TIME)) {\n          ", "  : 027.play->stop->seek->reset->play\n        * @tc.desc      : ", " console.info(`case seek called`);\n            expect(audioPlaye", "e seekDoneTime is ${seekDoneTime}`);\n            console.info(`c", "me      : 028.play->seek(duration)\n        * @tc.desc      : Aud", "ration).assertEqual(seekDoneTime);\n            }\n        });\n   ", "        if (typeof (seekDoneTime) == \"undefined\") {\n            ", " }\n            if ((seekDoneTime < audioPlayer.duration) || (aud", " console.info('case seek success, and seek time is ' + seekDoneT", "me      : 018.play->seek->stop->reset\n        * @tc.desc      : ", "nd seek time is ' + seekDoneTime);\n            if (!isToDuration", "e seek success, and seek time is ' + seekDoneTime);\n            ", "me      : 025.play->seek(0)\n        * @tc.desc      : Audio play", " console.info(`case seekDoneTime is ${seekDoneTime}`);\n         ", " console.info(`case seek filed,errcode is ${seekDoneTime}`);\n   ", " filed,errcode is ${seekDoneTime}`);\n                audioPlayer", "A_TIME).assertClose(seekDoneTime + DELTA_TIME, DELTA_TIME);\n    ", "      : 030.play->->seek(rand)\n        * @tc.desc      : Audio p", " @tc.name      : 04.seek->release\n        * @tc.desc      : Reli"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "seek", "api_method_all": "seek(timeMs: number, mode:SeekMode, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 362, "since": 6, "api_used": "\u662f", "lines": ["K_TIME).assertEqual(seekDoneTime);\n                isToDuration ", "me      : 029.play->seek(out of duration)\n        * @tc.desc    ", "r.on('timeUpdate', (seekDoneTime) => {\n            if (typeof (s", "  : 019.play->stop->seek\n        * @tc.desc      : Audio playbac", " : 020.play->pause->seek->reset\n        * @tc.desc      : Audio ", ".play->pause->play->seek(0)\n        * @tc.desc      : Audio play", " filed,errcode is ${seekDoneTime}`);\n                return;\n   ", " : 032.play->pause->seek(0)->play\n        * @tc.desc      : Audi", "        audioPlayer.seek(SEEK_TIME);\n            }\n        });\n ", "  : 024.play->stop->seek(0)->reset->play\n        * @tc.desc     ", "        audioPlayer.seek(mySteps[SECOND_INDEX]);\n               ", " console.info(`case seek to time is ${mySteps[SECOND_INDEX]}`);\n", ".play->pause->play->seek(0)->stop\n        * @tc.desc      : Audi", "  : 026.play->stop->seek->pause\n        * @tc.desc      : Audio ", "        if (typeof (seekDoneTime) == 'undefined') {\n            ", " : 021.play->pause->seek->stop\n        * @tc.desc      : Audio p", "        audioPlayer.seek(audioPlayer.duration);\n            } el", "r.loop == true) && (seekDoneTime == DURATION_TIME)) {\n          ", "  : 027.play->stop->seek->reset->play\n        * @tc.desc      : ", " console.info(`case seek called`);\n            expect(audioPlaye", "e seekDoneTime is ${seekDoneTime}`);\n            console.info(`c", "me      : 028.play->seek(duration)\n        * @tc.desc      : Aud", "ration).assertEqual(seekDoneTime);\n            }\n        });\n   ", "        if (typeof (seekDoneTime) == \"undefined\") {\n            ", " }\n            if ((seekDoneTime < audioPlayer.duration) || (aud", " console.info('case seek success, and seek time is ' + seekDoneT", "me      : 018.play->seek->stop->reset\n        * @tc.desc      : ", "nd seek time is ' + seekDoneTime);\n            if (!isToDuration", "e seek success, and seek time is ' + seekDoneTime);\n            ", "me      : 025.play->seek(0)\n        * @tc.desc      : Audio play", " console.info(`case seekDoneTime is ${seekDoneTime}`);\n         ", " console.info(`case seek filed,errcode is ${seekDoneTime}`);\n   ", " filed,errcode is ${seekDoneTime}`);\n                audioPlayer", "A_TIME).assertClose(seekDoneTime + DELTA_TIME, DELTA_TIME);\n    ", "      : 030.play->->seek(rand)\n        * @tc.desc      : Audio p", " @tc.name      : 04.seek->release\n        * @tc.desc      : Reli"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "seek", "api_method_all": "seek(timeMs: number, mode?:SeekMode): Promise<number>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 38, "since": 6, "api_used": "\u662f", "lines": ["  await videoPlayer.seek(DURATION_TIME).then((seekDoneTime) => {", "ION_TIME + 1).then((seekDoneTime) => {\n            expect(videoP", "  await videoPlayer.seek(DURATION_TIME + 1).then((seekDoneTime) ", "ek(SEEK_TIME).then((seekDoneTime) => {\n            expect(videoP", "layer.seek(0).then((seekDoneTime) => {\n            expect(videoP", "EK_PREV_SYNC).then((seekDoneTime) => {\n            expect(videoP", "  await videoPlayer.seek(0, media.SeekMode.SEEK_PREV_SYNC).then(", "  await videoPlayer.seek(0).then((seekDoneTime) => {\n           ", "URATION_TIME).then((seekDoneTime) => {\n            expect(videoP", "  await videoPlayer.seek(SEEK_TIME).then((seekDoneTime) => {\n   ", "EK_NEXT_SYNC).then((seekDoneTime) => {\n            expect(videoP", "  await videoPlayer.seek(0, media.SeekMode.SEEK_NEXT_SYNC).then(", "ek(SEEK_TIME).then((seekDoneTime) => {\n            console.info("], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "setVolume", "api_method_all": "setVolume(vol: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 162, "since": 6, "api_used": "\u662f", "lines": ["dioManager1 : Media setVolume promise: successful');\n            audi", "       audioManager.setVolume(audioMedia,outOfRangeVol, (err) => {\n  ", "dioManager3 : Media setVolume promise: successful');\n            audi", "mise = audioManager.setVolume(audioMedia,lowVol);\n        promise.the", "eworkTest: Ringtone setVolume Promise:Out of range: PASS :' + (err.me", "       audioManager.setVolume(audioRingtone,highVol, (err) => {\n     ", "dioManager6 : Media setVolume promise: successful');\n            audi", "mise = audioManager.setVolume(audioRingtone,minVol);\n        promise.", ": callback :  Media setVolume successful `);\n                audioMan", "dioManager2 : Media setVolume promise: successful');\n            audi", "dioManager5 : Media setVolume promise: successful');\n            audi", "rameworkTest: Media setVolume Promise:Out of range: PASS :' + err.mes", "eworkTest: Ringtone setVolume Promise: Out of range: Setvol 30');\n   ", "rameworkTest: Media setVolume promise: successful');\n            audi", "AudioFrameworkTest: setVolume: Out of range: Callback: PASS:  ${err.m", "dioManager7 : Media setVolume promise: successful');\n            audi", "      audioManager5.setVolume(audioMedia,highVol);\n            consol", "       audioManager.setVolume(audioMedia,minVol, (err) => {\n         ", "eworkTest: Ringtone setVolume Promise:Out of range: FAIL');\n         ", "      audioManager3.setVolume(audioMedia,highVol);\n            consol", "       audioManager.setVolume(audioMedia,highVol, (err) => {\n        ", "dioManager4 : Media setVolume promise: successful');\n            audi", "dioManager9 : Media setVolume promise: successful');\n            audi", "      audioManager4.setVolume(audioMedia,lowVol);\n            console", "       audioManager.setVolume(audioMedia,maxVol, (err) => {\n         ", "      audioManager7.setVolume(audioMedia,highVol);\n            consol", "mise = audioManager.setVolume(audioRingtone,maxVol);\n        promise.", "rameworkTest: Media setVolume Promise:Out of range: FAIL');\n         ", "dioManager8 : Media setVolume promise: successful');\n            audi", "mise = audioManager.setVolume(audioMedia,maxVol);\n        promise.the", "      audioManager2.setVolume(audioMedia,highVol);\n            consol", "mise = audioManager.setVolume(audioMedia,minVol);\n        promise.the", "mise = audioManager.setVolume(audioRingtone,lowVol);\n        promise.", "      audioManager9.setVolume(audioMedia,highVol);\n            consol", "      audioManager8.setVolume(audioMedia,lowVol);\n            console", "AudioFrameworkTest: setVolume: callback : Media Out of range: FAIL');", "      audioManager1.setVolume(audioMedia,highVol);\n            consol", "     audioManager10.setVolume(audioMedia,lowVol);\n            console", "eworkTest: Ringtone setVolume promise: successful');\n            audi", "rameworkTest: Media setVolume promise: successful');\n\n            aud", "      audioManager6.setVolume(audioMedia,lowVol);\n            console", "ioManager10 : Media setVolume promise: successful');\n            audi", "rameworkTest: Media setVolume Promise:Out of range: Setvol 100');\n   "], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "setVolume", "api_method_all": "setVolume(vol: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 9, "since": 6, "api_used": "\u662f", "lines": ["  await videoPlayer.setVolume(1).then(() => {\n            expect(vide", "  await videoPlayer.setVolume(i * 0.2).then(() => {\n                e", "  await videoPlayer.setVolume(1).then(() => {\n            console.inf", " await audioManager.setVolume(audioMedia,outOfRangeVol).then(() => {\n", " await audioManager.setVolume(audioRingtone,-1).then(() => {\n        ", " await audioManager.setVolume(audioMedia,-1).then(() => {\n           ", " await audioManager.setVolume(audioRingtone,outOfRangeVol).then(() =>"], "files": ["HttpPlayerFuncPromiseTest.test.js", "AudioFramework.test.js", "VideoPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 6, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 6, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "getTrackDescription", "api_method_all": "getTrackDescription(callback: AsyncCallback<Array<MediaDescription>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 20, "since": 8, "api_used": "\u662f", "lines": [" @tc.name      : 11.getTrackDescription->release\n        * @tc.desc      : Vide", " @tc.name      : 10.getTrackDescription->setspeed\n        * @tc.desc      : Vid", " @tc.name      : 11.getTrackDescription->stop\n        * @tc.desc      : Video p", " @tc.name      : 11.getTrackDescription->reset\n        * @tc.desc      : Video ", " console.info('case getTrackDescription is failed');\n                expect().a", " @tc.name      : 10.getTrackDescription->seek\n        * @tc.desc      : Video p", " @tc.name      : 10.getTrackDescription->setvolume\n        * @tc.desc      : Vi", " @tc.name      : 11.getTrackDescription->pause\n        * @tc.desc      : Video ", "t GETDESCRIPTION = 'getTrackDescription';\n    const PREPARE_EVENT = 'prepare';\n", " @tc.name      : 11.getTrackDescription->play\n        * @tc.desc      : Video p", " console.info('case getTrackDescription called!!');\n            if (typeof (arr", "        videoPlayer.getTrackDescription((err, arrlist) => {\n            if (typ"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "getTrackDescription", "api_method_all": "getTrackDescription() : Promise<Array<MediaDescription>>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["  await videoPlayer.getTrackDescription().then((arrayList) => {\n            con"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "setSpeed", "api_method_all": "setSpeed(speed:number, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 24, "since": 8, "api_used": "\u662f", "lines": ["  await videoPlayer.setSpeed(media.PlaybackSpeed.SPEED_FORWARD_2_00_", "  await videoPlayer.setSpeed(media.PlaybackSpeed.SPEED_FORWARD_1_75_", " console.info('case setSpeed success and speedMode is '+ speedMode);", " console.info('case setSpeed called and speedMode is ' + speedMode);", "  await videoPlayer.setSpeed(media.PlaybackSpeed.SPEED_FORWARD_0_75_", "  await videoPlayer.setSpeed(media.PlaybackSpeed.SPEED_FORWARD_1_25_", "        videoPlayer.setSpeed(speedValue, (err, speedMode) => {\n     ", "  await videoPlayer.setSpeed(media.PlaybackSpeed.SPEED_FORWARD_1_00_"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "setSpeed", "api_method_all": "setSpeed(speed:number): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "on", "api_method_all": "on(type: 'playbackCompleted', callback: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 6, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "on", "api_method_all": "on(type: 'bufferingUpdate', callback: (infoType: BufferingInfoType, value: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "on", "api_method_all": "on(type: 'bufferingUpdate', callback: (infoType: BufferingInfoType, value: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "on", "api_method_all": "on(type: 'startRenderFrame', callback: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 6, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "on", "api_method_all": "on(type: 'videoSizeChanged', callback: (width: number, height: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "on", "api_method_all": "on(type: 'videoSizeChanged', callback: (width: number, height: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 41984, "since": 0, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 6, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "url", "api_method_all": "url: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 109, "since": 8, "api_used": "\u662f", "lines": ["le: videoProfile,\n  url: 'file:///data/medi", "        videoPlayer.url = HTTP_SOURCE;\n    ", "   testVideoPlayer2.url = fdPath;\n        a", "');\n    videoConfig.url = fdPath;\n    media", "        videoPlayer.url = fdPath;\n        v", "file: configFile,\n  url: 'file:///data/medi", "        videoPlayer.url = path;\n        awa", "        videoPlayer.url = fdPath;\n        a", "   testVideoPlayer1.url = fdPath;\n        a", "eoProfilePromise,\n  url: 'file:///data/medi"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "loop", "api_method_all": "loop: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 96, "since": 6, "api_used": "\u662f", "lines": ["re -maxVol ,Disable loop - Callback -Get sta", "lume=minVol ,Enable loop\n                * @", "e - highVol ,Enable loop - start Callback\n  ", "e: highVol,\n        loop: true\n        };\n\n ", "ume=highVol ,Enable loop\n                * @", "ure minVol ,disable loop - promise - Get sta", "gure maxVol ,enable loop - start - Callback\n", "ume=minVol ,Disable loop\n                * @", "mise minVol ,Enable loop\n                * @", "minVol,\n            loop: false\n        };\n\n", "gure-highVol,Enable loop\n                * @", "tOfRangeVol ,Enable loop -Get STATE- Callbac", "\tvolume: maxVol,\n\t\t\tloop: true\n\t\t};\n\t\tconsol", "maxVol,\n            loop: false\n        };\n\t", "OfRangeVol ,disable loop-Get STATE- Callback", "minVol,\n            loop: true\n        };\n\n ", "se highVol ,Disable loop\n                * @", "ngeVol,\n            loop: false\n        };\n\n", "ighVol,\n            loop: true\n        };\n\n ", "ure minVol ,Disable loop - Start - callback\n", "ighVol,\n            loop: false\n        };\n\n", "e - lowVol ,Disable loop- promise\n          ", "ure -maxVol ,enable loop -start\n            ", "ume=maxVol ,Disable loop\n                * @", "re - minVol ,Enable loop  - Callback\n       ", "me=highVol ,Disable loop start - promise\n   ", "ngeVol,\n            loop: true\n        };\n\n ", "lume=maxVol ,enable loop\n                * @", "re - maxVol ,enable loop Callback - START\n  ", "gure-highVol,Enable loop- Callback -Get stat", "maxVol,\n            loop: false\n        };\n\n", "maxVol,\n            loop: true\n        };\n\t\t", "tOfRangeVol ,Enable loop\n                * @", "re highVol ,Disable loop Start - Callback\n  ", "minVol,\n            loop: false\n        };\n\t", "ighVol,\n            loop: false\n        };\n\t", "OfRangeVol ,Disable loop\n                * @", "ighVol,\n            loop: true\n        };\n\n\t", "lowVol,\n            loop: false\n        };\n\n"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "currentTime", "api_method_all": "readonly currentTime: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 130, "since": 6, "api_used": "\u662f", "lines": ["dTime = videoPlayer.currentTime;\n        expect(end", "tTime = videoPlayer.currentTime;\n        videoPlaye", "le.info(`case pause currentTime is ${audioPlayer.cu", "dTime = videoPlayer.currentTime;\n                ex", "me is ${audioPlayer.currentTime}`);\n            exp", "wTime = videoPlayer.currentTime;\n        if (videoP", "tTime = videoPlayer.currentTime;\n        await vide", " expect(audioPlayer.currentTime).assertEqual(0);\n  ", "ole.info(`case play currentTime is ${audioPlayer.cu", "ect(testAudioPlayer.currentTime).assertEqual(0);\n  ", "s ${testAudioPlayer.currentTime}`);\n            exp", "dTime = videoPlayer.currentTime;\n        if (videoP", " expect(audioPlayer.currentTime).assertClose(audioP", "ole.info(`case play currentTime is ${testAudioPlaye", " expect(audioPlayer.currentTime + DELTA_TIME).asser"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioFormat.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "duration", "api_method_all": "readonly duration: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 101, "since": 6, "api_used": "\u662f", "lines": ["ct(testVideoPlayer1.duration).assertEqual(DURATI", "ampleRate: 48000,\n  durationTime: 1000,\n  fileFo", "ect(testAudioPlayer.duration).assertEqual(DURATI", "rtClose(audioPlayer.duration, DELTA_TIME);\n     ", "   : 022.play->seek(duration)->finish (callback)", "   : 023.play->seek(duration, mode)->finish (cal", "er.seek(audioPlayer.duration);\n            } els", "5.play->seek(out of duration, mode) (callback)\n ", "9.play->seek(out of duration)\n        * @tc.desc", " expect(videoPlayer.duration).assertEqual(DURATI", "3.play->pause->seek(duration)->play\n        * @t", " expect(audioPlayer.duration).assertEqual(seekDo", " expect(audioPlayer.duration).assertEqual(DURATI", "ct(testVideoPlayer2.duration).assertEqual(DURATI", " expect(audioPlayer.duration).assertEqual(undefi", "4.play->seek(out of duration) (callback)\n       ", "   : 14.seek(out of duration)\n        * @tc.desc", "eTime < audioPlayer.duration) || (audioPlayer.st", "ATION).assertEqual(\"duration\");\n        expect(m", "   : 028.play->seek(duration)\n        * @tc.desc"], "files": ["HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "fetchFileResultPromise.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "VideoPlayerEnumTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "state", "api_method_all": "readonly state: VideoPlayState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1920, "since": 6, "api_used": "\u662f", "lines": [" STATE : '+audioRen.state);\n\n        var buff", "PASS : ' + audioRen.state);\n     }\n     else ", " STATE : '+audioCap.state);\n\n        var buff", "audioRen.stop((err, state) => {\n         if (", " STATE : '+audioRen.state);\n\n     console.inf", " STATE : '+audioRen.state);\n\n        console.", "\n\n     if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        return r", "ioRen.release((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n    //      resul", " STATE : '+audioRen.state);\n\n     await audio", " STATE : '+audioRen.state);\n\n     var samplin", " STATE : '+audioRen.state);\n\n     return resu", "PASS : ' + audioRen.state);\n    //  }\n    // ", "udioRen.drain((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n         resultFl", " STATE : '+audioRen.state);\n\n     var bufferS", " STATE : '+audioRen.state);\n\n     if (resultF", " STATE : '+audioRen.state);\n\n        await au", "   //  if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        await au"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "width", "api_method_all": "readonly width: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 773, "since": 8, "api_used": "\u662f", "lines": ["height - \" +data[i].width + \" * \" +data[i].he", "G_TC_019 sizeArray: width * height - \" +data[", "6 sizeArrayPromise: width * height - \" +sizeA", "P_TC_087 sizeArray: width * height - \" +data[", "G_TC_055 sizeArray: width * height - \" +data[", " size0ArrayPromise: width * height - \" +sizeA", "sizeArrayPromise[i].width + \" * \" + sizeArray", "G_TC_029 sizeArray: width * height - \" +data[", "P_TC_015 sizeArray: width * height - \" +data[", "P_TC_051 sizeArray: width * height - \" +data[", "P_TC_025 sizeArray: width * height - \" +data[", "G_TC_065 sizeArray: width * height - \" +data[", "P_TC_035 sizeArray: width * height - \" +data[", "P_TC_061 sizeArray: width * height - \" +data[", "G_TC_075 sizeArray: width * height - \" +data[", "P_TC_071 sizeArray: width * height - \" +data[", "0 sizeArrayPromise: width * height - \" +sizeA", "G_TC_039 sizeArray: width * height - \" +data[", "2 sizeArrayPromise: width * height - \" +sizeA", "        })\n        .width('640px')\n        .h"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoPlayer", "api_method_name": "height", "api_method_all": "readonly height: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 771, "since": 8, "api_used": "\u662f", "lines": ["rayPromise: width * height - \" +sizeArrayPromi", "th + \" * \" +data[i].height);\n                 ", " sizeArray: width * height - \" +data[i].width ", "h('640px')\n        .height('480px')\n    }\n  }\n", "sizeArrayPromise[i].height);\n            }\n   "], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContainerFormatType", "api_method_all": "enum ContainerFormatType {\n    \n    CFT_MPEG_4 = \"mp4\",\n\n    \n    CFT_MPEG_4A = \"m4a\",\n  }", "api_method_name": "ContainerFormatType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["       expect(media.ContainerFormatType.CFT_MPEG_4).assertE", " fileFormat : media.ContainerFormatType.CFT_MPEG_4,\n       ", " fileFormat : media.ContainerFormatType.CFT_MPEG_4A,\n      ", "       expect(media.ContainerFormatType.CFT_MPEG_4A).assert"], "files": ["VideoPlayerEnumTest.test.js", "RecorderLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContainerFormatType", "api_method_name": "CFT_MPEG_4", "api_method_all": "CFT_MPEG_4 = \"mp4\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["ContainerFormatType.CFT_MPEG_4A,\n        }\n       ", "ContainerFormatType.CFT_MPEG_4,\n        }\n        ", "ContainerFormatType.CFT_MPEG_4).assertEqual(\"mp4\")", "ContainerFormatType.CFT_MPEG_4A).assertEqual(\"m4a\""], "files": ["VideoPlayerEnumTest.test.js", "RecorderLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContainerFormatType", "api_method_name": "CFT_MPEG_4A", "api_method_all": "CFT_MPEG_4A = \"m4a\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["ContainerFormatType.CFT_MPEG_4A).assertEqual(\"m4a\")", "ContainerFormatType.CFT_MPEG_4A,\n        }\n        "], "files": ["VideoPlayerEnumTest.test.js", "RecorderLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaType", "api_method_all": "enum MediaType {\n    \n    MEDIA_TYPE_AUD = 0,\n    \n    MEDIA_TYPE_VID = 1,\n  }", "api_method_name": "MediaType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 149, "since": 8, "api_used": "\u662f", "lines": ["Type = mediaLibrary.MediaType.AUDIO;\nconst fileFe", "Type = mediaLibrary.MediaType.AUDIO;\n\nlet allType", "Type = mediaLibrary.MediaType.IMAGE;\nlet videoTyp", "Type = mediaLibrary.MediaType.AUDIO;\n    const co", "sset.mediaType = newMediaType;\n\n            await", "Type = mediaLibrary.MediaType.IMAGE;\nconst videoT", "Type = mediaLibrary.MediaType.VIDEO;\n    let publ", "       expect(media.MediaType.MEDIA_TYPE_AUD).ass", "       expect(media.MediaType.MEDIA_TYPE_SUBTITLE", "Type = mediaLibrary.MediaType.FILE;\nlet imageType", "Type = mediaLibrary.MediaType.VIDEO;\nlet audioTyp", "       expect(media.MediaType.MEDIA_TYPE_VID).ass", "Type = mediaLibrary.MediaType.VIDEO;\nconst audioT", "Type = mediaLibrary.MediaType.AUDIO;\n    let imag", "Type = mediaLibrary.MediaType.VIDEO;\n        let ", "           const newMediaType = 'newMediaType';\n\n", "Type = mediaLibrary.MediaType.VIDEO;\n    let audi", "Type = mediaLibrary.MediaType.IMAGE;\n    let vide", "sset.mediaType = newMediaType;\n\n            asset", "Type = mediaLibrary.MediaType.AUDIO;\n\nlet getFile", " newMediaType = 'newMediaType';\n\n            asse", "Type = mediaLibrary.MediaType.FILE;\nconst imageTy"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "VideoPlayerEnumTest.test.js", "albumTestPromise.test.js", "fileAssetPromise2.test.js", "fileAssetUriTestCallBack.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaType", "api_method_name": "MEDIA_TYPE_AUD", "api_method_all": "MEDIA_TYPE_AUD = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ect(media.MediaType.MEDIA_TYPE_AUD).assertEqual(0);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaType", "api_method_name": "MEDIA_TYPE_VID", "api_method_all": "MEDIA_TYPE_VID = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ect(media.MediaType.MEDIA_TYPE_VID).assertEqual(1);\n  "], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_all": "enum MediaDescriptionKey {\n    \n    MD_KEY_TRACK_INDEX = \"track_index\",\n\n    \n    MD_KEY_TRACK_TYPE = \"track_type\",\n\n    \n    MD_KEY_CODEC_MIME = \"codec_mime\",\n\n    \n    MD_KEY_DURATION = \"duration\",\n\n    \n    MD_KEY_BITRATE = \"bitrate\",\n\n    \n    MD_KEY_WIDTH = \"width\",\n\n    \n    MD_KEY_HEIGHT = \"height\",\n\n    \n    MD_KEY_FRAME_RATE = \"frame_rate\",\n\n    \n    MD_KEY_AUD_CHANNEL_COUNT = \"channel_count\",\n\n    \n    MD_KEY_AUD_SAMPLE_RATE = \"sample_rate\",\n  }", "api_method_name": "MediaDescriptionKey", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 25, "since": 8, "api_used": "\u662f", "lines": ["       expect(media.MediaDescriptionKey.MD_KEY_CUSTOM).asse", "       expect(media.MediaDescriptionKey.MD_KEY_BITRATE).ass", "       expect(media.MediaDescriptionKey.MD_KEY_MAX_ENCODER_", "       expect(media.MediaDescriptionKey.MD_KEY_CAPTURE_RATE", "       expect(media.MediaDescriptionKey.MD_KEY_HEIGHT).asse", "       expect(media.MediaDescriptionKey.MD_KEY_AUD_CHANNEL_", "       expect(media.MediaDescriptionKey.MD_KEY_VIDEO_ENCODE", "       expect(media.MediaDescriptionKey.MD_KEY_TRACK_TYPE).", "       expect(media.MediaDescriptionKey.MD_KEY_MAX_INPUT_SI", "       expect(media.MediaDescriptionKey.MD_KEY_CODEC_MIME).", "       expect(media.MediaDescriptionKey.MD_KEY_FRAME_RATE).", "       expect(media.MediaDescriptionKey.MD_KEY_PROFILE).ass", "       expect(media.MediaDescriptionKey.MD_KEY_WIDTH).asser", "       expect(media.MediaDescriptionKey.MD_KEY_AUD_SAMPLE_R", "       expect(media.MediaDescriptionKey.MD_KEY_QUALITY).ass", "       expect(media.MediaDescriptionKey.MD_KEY_SUSPEND_INPU", "       expect(media.MediaDescriptionKey.MD_KEY_DURATION).as", "       expect(media.MediaDescriptionKey.MD_KEY_TRACK_INDEX)", "       expect(media.MediaDescriptionKey.MD_KEY_PIXEL_FORMAT", "RDWARE_ENCODER_ENUM_MediaDescriptionKey_0100', 0, async fun", "       expect(media.MediaDescriptionKey.MD_KEY_REQUEST_I_FR", "       expect(media.MediaDescriptionKey.MD_KEY_I_FRAME_INTE", "       expect(media.MediaDescriptionKey.MD_KEY_REPEAT_FRAME"], "files": ["VideoPlayerEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_name": "MD_KEY_TRACK_INDEX", "api_method_all": "MD_KEY_TRACK_INDEX = \"track_index\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["MediaDescriptionKey.MD_KEY_TRACK_INDEX).assertEqual(\"track"], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_name": "MD_KEY_TRACK_TYPE", "api_method_all": "MD_KEY_TRACK_TYPE = \"track_type\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["MediaDescriptionKey.MD_KEY_TRACK_TYPE).assertEqual(\"track"], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_name": "MD_KEY_CODEC_MIME", "api_method_all": "MD_KEY_CODEC_MIME = \"codec_mime\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["MediaDescriptionKey.MD_KEY_CODEC_MIME).assertEqual(\"codec"], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_name": "MD_KEY_DURATION", "api_method_all": "MD_KEY_DURATION = \"duration\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["MediaDescriptionKey.MD_KEY_DURATION).assertEqual(\"durat"], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_name": "MD_KEY_BITRATE", "api_method_all": "MD_KEY_BITRATE = \"bitrate\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["MediaDescriptionKey.MD_KEY_BITRATE).assertEqual(\"bitra"], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_name": "MD_KEY_WIDTH", "api_method_all": "MD_KEY_WIDTH = \"width\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["MediaDescriptionKey.MD_KEY_WIDTH).assertEqual(\"width"], "files": ["VideoPlayerEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_name": "MD_KEY_HEIGHT", "api_method_all": "MD_KEY_HEIGHT = \"height\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["MediaDescriptionKey.MD_KEY_HEIGHT).assertEqual(\"heigh"], "files": ["VideoPlayerEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_name": "MD_KEY_FRAME_RATE", "api_method_all": "MD_KEY_FRAME_RATE = \"frame_rate\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["MediaDescriptionKey.MD_KEY_FRAME_RATE).assertEqual(\"frame"], "files": ["VideoHardwareEncoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_name": "MD_KEY_AUD_CHANNEL_COUNT", "api_method_all": "MD_KEY_AUD_CHANNEL_COUNT = \"channel_count\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["MediaDescriptionKey.MD_KEY_AUD_CHANNEL_COUNT).assertEqual(\"chann"], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescriptionKey", "api_method_name": "MD_KEY_AUD_SAMPLE_RATE", "api_method_all": "MD_KEY_AUD_SAMPLE_RATE = \"sample_rate\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["MediaDescriptionKey.MD_KEY_AUD_SAMPLE_RATE).assertEqual(\"sampl"], "files": ["VideoPlayerEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_all": "interface VideoRecorderProfile {\n    \n    readonly audioBitrate: number;\n\n    \n    readonly audioChannels: number;\n\n    \n    readonly audioCodec: CodecMimeType;\n\n    \n    readonly audioSampleRate: number;\n\n    \n    readonly fileFormat: ContainerFormatType;\n\n    \n    readonly videoBitrate: number;\n\n    \n    readonly videoCodec: CodecMimeType;\n\n    \n    readonly videoFrameWidth: number;\n\n    \n    readonly videoFrameHeight: number;\n\n    \n    readonly videoFrameRate: number;\n  }", "api_method_name": "VideoRecorderProfile", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_name": "audioBitrate", "api_method_all": "readonly audioBitrate: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 15, "since": 9, "api_used": "\u662f", "lines": ["figFile = {\n        audioBitrate : 48000,\n        au", "\n        configFile.audioBitrate = 8000;\n        con", " videoProfile = {\n  audioBitrate: 48000,\n  audioChan", "\n        configFile.audioBitrate = 32000;\n        co", "\n        configFile.audioBitrate = 16000;\n        co", "\n        configFile.audioBitrate = 112000;\n        c", "rofilePromise = {\n  audioBitrate: 48000,\n  audioChan", "et configFile = {\n  audioBitrate: 48000,\n  audioChan"], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_name": "audioChannels", "api_method_all": "readonly audioChannels: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 9, "api_used": "\u662f", "lines": ["ioBitrate: 48000,\n  audioChannels: 2,\n  audioCodec: '", "te : 48000,\n        audioChannels : 2,\n        audioC"], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_name": "audioCodec", "api_method_all": "readonly audioCodec: CodecMimeType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 9, "api_used": "\u662f", "lines": ["annels : 2,\n        audioCodec : 'audio/mp4a-latm'", "audioChannels: 2,\n  audioCodec: 'audio/mp4a-latm',"], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_name": "audioSampleRate", "api_method_all": "readonly audioSampleRate: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35, "since": 6, "api_used": "\u662f", "lines": ["        audioConfig.audioSampleRate = 96000; // sampler", "te : 22050,\n        audioSampleRate : 22050,\n        nu", "        audioConfig.audioSampleRate = 44100; // sampler", "\n        configFile.audioSampleRate = 8000;\n        con", "mp4a-latm',\n        audioSampleRate : 48000,\n        du", "\n        configFile.audioSampleRate = 44100;\n        co", "audio/mp4a-latm',\n  audioSampleRate: 48000,\n  durationT", "        audioConfig.audioSampleRate = 32000; // sampler", "        audioConfig.audioSampleRate = 22050; // encodeB", "        audioConfig.audioSampleRate = -1;\n        audio", "        audioConfig.audioSampleRate = 8000; // samplera", "        audioConfig.audioSampleRate = 22050;\n        au", "        audioConfig.audioSampleRate = 64000; // sampler", "        audioConfig.audioSampleRate = 22050; // sampler", "\n        configFile.audioSampleRate = 32000;\n        co", " 22050,\n            audioSampleRate : 22050,\n          ", "\n        configFile.audioSampleRate = 96000;\n        co"], "files": ["RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_name": "fileFormat", "api_method_all": "readonly fileFormat: ContainerFormatType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 37, "since": 8, "api_used": "\u662f", "lines": ["IO_AAC,\n            fileFormat : media.ContainerFo", "rationTime: 1000,\n  fileFormat: 'mp4',\n  videoBitr", "        audioConfig.fileFormat = FORMAT_MP4;\n     ", "        audioConfig.fileFormat = FORMAT_M4A;\n     ", "                    fileFormat:mp4\n        * @tc.d", "                    fileFormat:m4a\n        * @tc.d", "ime : 1000,\n        fileFormat : 'mp4',\n        vi"], "files": ["RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_name": "videoBitrate", "api_method_all": "readonly videoBitrate: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 9, "api_used": "\u662f", "lines": ["ileFormat: 'mp4',\n  videoBitrate: 48000,\n  videoCode", "\n        configFile.videoBitrate = 8000;\n        awa", "\n        configFile.videoBitrate = 32000;\n        aw", "\n        configFile.videoBitrate = 112000;\n        a", "at : 'mp4',\n        videoBitrate : 48000,\n        vi", "\n        configFile.videoBitrate = 16000;\n        aw"], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_name": "videoCodec", "api_method_all": "readonly videoCodec: CodecMimeType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 9, "api_used": "\u662f", "lines": ["te : 48000,\n        videoCodec : 'video/mp4v-es',\n", "eoBitrate: 48000,\n  videoCodec: 'video/mp4v-es',\n "], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_name": "videoFrameWidth", "api_method_all": "readonly videoFrameWidth: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 9, "api_used": "\u662f", "lines": [" 'video/mp4v-es',\n  videoFrameWidth: 640,\n  videoFrameH", "o/mp4v-es',\n        videoFrameWidth : 640,\n        vide"], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_name": "videoFrameHeight", "api_method_all": "readonly videoFrameHeight: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 9, "api_used": "\u662f", "lines": ["oFrameWidth: 640,\n  videoFrameHeight: 480,\n  videoFrameR", "idth : 640,\n        videoFrameHeight : 480,\n        vide"], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderProfile", "api_method_name": "videoFrameRate", "api_method_all": "readonly videoFrameRate: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 22, "since": 9, "api_used": "\u662f", "lines": ["        videoConfig.videoFrameRate = 60;\n        let v", "ight : 480,\n        videoFrameRate : 10\n    }\n\n    let", " @tc.name      : 24.videoFrameRate 60 (callback)\n     ", " @tc.name      : 23.videoFrameRate 30 (callback)\n     ", "        videoConfig.videoFrameRate = 30;\n        let v", " @tc.name      : 22.videoFrameRate 20 (promise)\n      ", " @tc.name      : 24.videoFrameRate 60 (promise)\n      ", "FrameHeight: 480,\n  videoFrameRate: 10\n}\n\nlet videoCon", "FrameHeight: 480,\n  videoFrameRate: 30\n}\nvar videoConf", "        videoConfig.videoFrameRate = 20;\n        await", "        videoConfig.videoFrameRate = 30;\n        await", " @tc.name      : 23.videoFrameRate 30 (promise)\n      ", "        videoConfig.videoFrameRate = 20;\n        let v", "        videoConfig.videoFrameRate = 60;\n        await", " @tc.name      : 22.videoFrameRate 20 (callback)\n     ", "ight : 480,\n        videoFrameRate : 10\n    }\n    // r"], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSourceType", "api_method_all": "enum AudioSourceType {\n    \n    AUDIO_SOURCE_TYPE_DEFAULT = 0,\n    \n    AUDIO_SOURCE_TYPE_MIC = 1,\n  }", "api_method_name": "AudioSourceType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 9, "api_used": "\u662f", "lines": ["       expect(media.AudioSourceType.AUDIO_SOURCE_TYPE_M", "       expect(media.AudioSourceType.AUDIO_SOURCE_TYPE_D"], "files": ["VideoRecorderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSourceType", "api_method_name": "AUDIO_SOURCE_TYPE_DEFAULT", "api_method_all": "AUDIO_SOURCE_TYPE_DEFAULT = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 9, "api_used": "\u662f", "lines": ["dia.AudioSourceType.AUDIO_SOURCE_TYPE_DEFAULT).assertEqual(0);\n  "], "files": ["VideoRecorderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioSourceType", "api_method_name": "AUDIO_SOURCE_TYPE_MIC", "api_method_all": "AUDIO_SOURCE_TYPE_MIC = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 9, "api_used": "\u662f", "lines": ["dia.AudioSourceType.AUDIO_SOURCE_TYPE_MIC).assertEqual(1);\n  "], "files": ["VideoRecorderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoSourceType", "api_method_all": "enum VideoSourceType {\n    \n    VIDEO_SOURCE_TYPE_SURFACE_YUV = 0,\n    \n    VIDEO_SOURCE_TYPE_SURFACE_ES = 1,\n  }", "api_method_name": "VideoSourceType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 9, "api_used": "\u662f", "lines": ["       expect(media.VideoSourceType.VIDEO_SOURCE_TYPE_S"], "files": ["VideoRecorderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoSourceType", "api_method_name": "VIDEO_SOURCE_TYPE_SURFACE_YUV", "api_method_all": "VIDEO_SOURCE_TYPE_SURFACE_YUV = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 9, "api_used": "\u662f", "lines": ["dia.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_YUV).assertEqual(0);\n  "], "files": ["VideoRecorderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoSourceType", "api_method_name": "VIDEO_SOURCE_TYPE_SURFACE_ES", "api_method_all": "VIDEO_SOURCE_TYPE_SURFACE_ES = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 9, "api_used": "\u662f", "lines": ["dia.VideoSourceType.VIDEO_SOURCE_TYPE_SURFACE_ES).assertEqual(1);\n  "], "files": ["VideoRecorderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderConfig", "api_method_all": "interface VideoRecorderConfig {\n    \n    audioSourceType: AudioSourceType;\n    \n    videoSourceType: VideoSourceType;\n    \n    profile: VideoRecorderProfile;\n    \n    url: string;\n    \n    rotation?: number;\n    \n    location?: Location;\n  }", "api_method_name": "VideoRecorderConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderConfig", "api_method_name": "audioSourceType", "api_method_all": "audioSourceType: AudioSourceType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 9, "api_used": "\u662f", "lines": ["oConfig = {\n        audioSourceType : SOURCE_TYPE,\n    ", "ConfigPromise = {\n  audioSourceType: 1,\n  videoSourceTy", "r videoConfig = {\n  audioSourceType: 1,\n  videoSourceTy", "t videoConfig = {\n  audioSourceType: 1,\n  videoSourceTy", "fig = {\n            audioSourceType : SOURCE_TYPE,\n    ", "oConfig = {\n        audioSourceType : 1,\n        videoS"], "files": ["RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderConfig", "api_method_name": "videoSourceType", "api_method_all": "videoSourceType: VideoSourceType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 9, "api_used": "\u662f", "lines": ["dioSourceType: 1,\n  videoSourceType: 0,\n  profile: vide", "ceType : 1,\n        videoSourceType : 0,\n        profil", "dioSourceType: 1,\n  videoSourceType: 0,\n  profile: conf", "oConfig = {\n        videoSourceType : 0,\n        profil"], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderConfig", "api_method_name": "profile", "api_method_all": "profile: VideoRecorderProfile", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 21, "since": 9, "api_used": "\u662f", "lines": [".assertEqual(\"codec_profile\");        \n        ", "ceType : 0,\n        profile : onlyVideoProfile,", "        view[2] = ((profile - 1) << 6) + (freqI", "deoSourceType: 0,\n  profile: videoProfilePromis", "deoSourceType: 0,\n  profile: configFile,\n  url:", " length\n        let profile = 2; // 2: AAC LC  ", "deoSourceType: 0,\n  profile: videoProfile,\n  ur", "ceType : 0,\n        profile : configFile,\n     "], "files": ["AudioEncoderFuncPromiseTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "AudioEncoderReliabilityPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderConfig", "api_method_name": "url", "api_method_all": "url: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 109, "since": 8, "api_used": "\u662f", "lines": ["le: videoProfile,\n  url: 'file:///data/medi", "        videoPlayer.url = HTTP_SOURCE;\n    ", "   testVideoPlayer2.url = fdPath;\n        a", "');\n    videoConfig.url = fdPath;\n    media", "        videoPlayer.url = fdPath;\n        v", "file: configFile,\n  url: 'file:///data/medi", "        videoPlayer.url = path;\n        awa", "        videoPlayer.url = fdPath;\n        a", "   testVideoPlayer1.url = fdPath;\n        a", "eoProfilePromise,\n  url: 'file:///data/medi"], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderConfig", "api_method_name": "rotation", "api_method_all": "rotation?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 36, "since": 8, "api_used": "\u662f", "lines": ["hotosettings2 = {\n  rotation: 90,\n  quality: 1,\n", "hotosettings4 = {\n  rotation: 270\n}\n\nexport defa", "hotosettings4 = {\n  rotation: 270\n}\n\nvar Permiss", " @tc.name      : 21.rotation 270 (callback)\n    ", "e : 10\n    }\n    // rotation 0, 90, 180, 270\n   ", " @tc.name      : 21.rotation 270 (promise)\n     ", "        videoConfig.rotation = 270;\n        awai", " @tc.name      : 19.rotation 90 (promise)\n      ", "        videoConfig.rotation = 270;\n        let ", "        videoConfig.rotation = 180;\n        let ", "        videoConfig.rotation = 180;\n        awai", "hotosettings1 = {\n  rotation: 0,\n  quality: 0,\n}", " @tc.name      : 20.rotation 180 (callback)\n    ", "a/API.mp4',\n        rotation : 0,\n        locati", " @tc.name      : 19.rotation 90 (callback)\n     ", "        videoConfig.rotation = 90;\n        let v", "        videoConfig.rotation = 90;\n        await", " @tc.name      : 20.rotation 180 (promise)\n     ", "ia/01.mp4',\n        rotation : 0,\n        locati", "hotosettings3 = {\n  rotation: 180,\n  quality: 2,"], "files": ["CameraJSUnitPhotoAsync.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoRecorderConfig", "api_method_name": "location", "api_method_all": "location?: Location", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 6, "api_used": "\u662f", "lines": ["fd://',\n            location : { latitude : 1, l", "tation : 0,\n        location : { latitude : 30, ", "stAPI.m4a',\n        location : { latitude : 1, l", "/test.m4a',\n        location : { latitude : 1, l", "ientationHint: 0,\n  location: { latitude: 30, lo"], "files": ["RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescription", "api_method_all": "interface MediaDescription {\n    \n    [key : string]: Object;\n  }", "api_method_name": "MediaDescription", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 112, "since": 8, "api_used": "\u662f", "lines": ["Description().then((MediaDescription) => {\n             ", "nfo(\"case get OutputMediaDescription success\");\n        ", "eProcessor.getOutputMediaDescription().then((MediaDescri", "iaDescription((err, MediaDescription) => {\n             ", "ole.info(\"get OutputMediaDescription success\");\n        ", "sole.log(\"get OutputMediaDescription success\");\n        ", "iaDescription : ' + MediaDescription);\n                 ", "eProcessor.getOutputMediaDescription((err, MediaDescript", "sole.log('get outputMediaDescription : ' + MediaDescript", "ole.info('get outputMediaDescription : ' + MediaDescript"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaDescription", "api_method_name": "key", "api_method_all": "[key : string]: Object", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 31, "since": 8, "api_used": "\u662f", "lines": ["ontext);\n\nconst filekeys = {\n    parent: 'P", " console.info('case key is  '+ i);\n        ", "js')\nrequire('./filekeyTestCallBack.test.js", "js')\nrequire('./filekeyTestPromise.test.js'", "info('video encoder key is ' + item);\n     ", "{\n        if (asset[key] == undefined) {\n  ", "info(`${key}: asset[key]`);\n    }\n}\nfunctio", "    console.info(`${key}: asset[key]`);\n   ", "t) {\n    for (const key in asset) {\n       ", " {\n\n}\ndescribe('filekeyTestPromise.test.js'", "ons: fileKeyObj[filekeys[type]] + '= ?',\n  ", "rue;\n    for (const key in asset) {\n       "], "files": ["HttpPlayerFuncPromiseTest.test.js", "List.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetPromise2.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "filekeyTestCallBack.test.js", "fileAsset2.test.js", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SeekMode", "api_method_all": "enum SeekMode {\n    \n    SEEK_NEXT_SYNC = 0,\n    \n    SEEK_PREV_SYNC = 1,\n  }", "api_method_name": "SeekMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 48, "since": 8, "api_used": "\u662f", "lines": ["         case media.SeekMode.SEEK_NEXT_SYNC:\n   ", "E_TIME + 100, media.SeekMode.SEEK_NEXT_SYNC).the", "       expect(media.SeekMode.SEEK_CLOSEST_SYNC).", "ODE_EVENT, 0, media.SeekMode.SEEK_NEXT_SYNC, \n  ", "checkSeekTime(media.SeekMode.SEEK_NEXT_SYNC, see", "ION_TIME + 1, media.SeekMode.SEEK_PREV_SYNC,\n   ", "T, SEEK_TIME, media.SeekMode.SEEK_PREV_SYNC,RELE", "T, SEEK_TIME, media.SeekMode.SEEK_PREV_SYNC, PLA", "URATION_TIME, media.SeekMode.SEEK_NEXT_SYNC).the", "       expect(media.SeekMode.SEEK_CLOSEST).asser", "URATION_TIME, media.SeekMode.SEEK_NEXT_SYNC, REL", "URATION_TIME, media.SeekMode.SEEK_PREV_SYNC).the", "layer.seek(0, media.SeekMode.SEEK_PREV_SYNC).the", "ION_TIME + 1, media.SeekMode.SEEK_PREV_SYNC).the", "         case media.SeekMode.SEEK_PREV_SYNC:\n   ", "ODE_EVENT, 0, media.SeekMode.SEEK_PREV_SYNC, PAU", "E_TIME - 100, media.SeekMode.SEEK_NEXT_SYNC).the", "URATION_TIME, media.SeekMode.SEEK_PREV_SYNC,\n   ", "ek(SEEK_TIME, media.SeekMode.SEEK_NEXT_SYNC).the", "eek(seekTime, media.SeekMode.SEEK_NEXT_SYNC, (er", "ek(SEEK_TIME, media.SeekMode.SEEK_PREV_SYNC).the", "E_TIME + 100, media.SeekMode.SEEK_PREV_SYNC).the", "T, SEEK_TIME, media.SeekMode.SEEK_NEXT_SYNC,\n   ", "ION_TIME + 1, media.SeekMode.SEEK_NEXT_SYNC, REL", "layer.seek(0, media.SeekMode.SEEK_NEXT_SYNC).the", "       expect(media.SeekMode.SEEK_PREV_SYNC).ass", "ION_TIME + 1, media.SeekMode.SEEK_NEXT_SYNC).the", "       expect(media.SeekMode.SEEK_NEXT_SYNC).ass", "checkSeekTime(media.SeekMode.SEEK_PREV_SYNC, see", "E_TIME - 100, media.SeekMode.SEEK_PREV_SYNC).the"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SeekMode", "api_method_name": "SEEK_NEXT_SYNC", "api_method_all": "SEEK_NEXT_SYNC = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 24, "since": 8, "api_used": "\u662f", "lines": ["+ 1, media.SeekMode.SEEK_NEXT_SYNC, RELEASE_EVENT, END", "case media.SeekMode.SEEK_NEXT_SYNC:\n                if", "IME, media.SeekMode.SEEK_NEXT_SYNC,\n            SEEK_M", "k(0, media.SeekMode.SEEK_NEXT_SYNC).then((seekDoneTime", "+ 1, media.SeekMode.SEEK_NEXT_SYNC).then((seekDoneTime", "100, media.SeekMode.SEEK_NEXT_SYNC).then((seekDoneTime", "Time(media.SeekMode.SEEK_NEXT_SYNC, seekTime, seekDone", "pect(media.SeekMode.SEEK_NEXT_SYNC).assertEqual(0);\n  ", ", 0, media.SeekMode.SEEK_NEXT_SYNC, \n            SEEK_", "IME, media.SeekMode.SEEK_NEXT_SYNC, RELEASE_EVENT, END", "ime, media.SeekMode.SEEK_NEXT_SYNC, (err, seekDoneTime", "IME, media.SeekMode.SEEK_NEXT_SYNC).then((seekDoneTime"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SeekMode", "api_method_name": "SEEK_PREV_SYNC", "api_method_all": "SEEK_PREV_SYNC = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 22, "since": 8, "api_used": "\u662f", "lines": ["+ 1, media.SeekMode.SEEK_PREV_SYNC,\n            SEEK_M", "IME, media.SeekMode.SEEK_PREV_SYNC,\n            SEEK_M", "case media.SeekMode.SEEK_PREV_SYNC:\n                if", "IME, media.SeekMode.SEEK_PREV_SYNC,RELEASE_EVENT, END_", "IME, media.SeekMode.SEEK_PREV_SYNC).then((seekDoneTime", "k(0, media.SeekMode.SEEK_PREV_SYNC).then((seekDoneTime", "+ 1, media.SeekMode.SEEK_PREV_SYNC).then((seekDoneTime", "100, media.SeekMode.SEEK_PREV_SYNC).then((seekDoneTime", ", 0, media.SeekMode.SEEK_PREV_SYNC, PAUSE_EVENT, STOP_", "Time(media.SeekMode.SEEK_PREV_SYNC, seekTime, seekDone", "pect(media.SeekMode.SEEK_PREV_SYNC).assertEqual(1);\n  ", "IME, media.SeekMode.SEEK_PREV_SYNC, PLAY_EVENT, RELEAS"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CodecMimeType", "api_method_all": "enum CodecMimeType {\n    \n    VIDEO_H263 = 'video/h263',\n    \n    VIDEO_AVC = 'video/avc',\n    \n    VIDEO_MPEG2 = 'video/mpeg2',\n    \n    VIDEO_MPEG4 = 'video/mp4v-es',\n\n    \n    VIDEO_VP8 = 'video/x-vnd.on2.vp8',\n\n    \n    AUDIO_AAC = 'audio/mp4a-latm',\n\n    \n    AUDIO_VORBIS = 'audio/vorbis',\n\n    \n    AUDIO_FLAC = 'audio/flac',\n  }", "api_method_name": "CodecMimeType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["EncoderMime : media.CodecMimeType.AUDIO_AAC,\n        ", "       expect(media.CodecMimeType.AUDIO_FLAC).assertE", "       expect(media.CodecMimeType.VIDEO_MPEG2).assert", "       expect(media.CodecMimeType.AUDIO_VORBIS).asser", "_VIDEO_DECODER_ENUM_CodecMimeType_0100', 0, async fun", "_AUDIO_DECODER_ENUM_CodecMimeType_0100', 0, async fun", "       expect(media.CodecMimeType.AUDIO_AAC).assertEq", "       expect(media.CodecMimeType.VIDEO_AVC).assertEq", "       expect(media.CodecMimeType.VIDEO_H263).assertE", "       expect(media.CodecMimeType.VIDEO_VP8).assertEq", "       expect(media.CodecMimeType.VIDEO_MPEG4).assert"], "files": ["VideoDecoderEnumTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "AudioDecoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CodecMimeType", "api_method_name": "VIDEO_H263", "api_method_all": "VIDEO_H263 = 'video/h263',", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["media.CodecMimeType.VIDEO_H263).assertEqual('video"], "files": ["VideoDecoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CodecMimeType", "api_method_name": "VIDEO_AVC", "api_method_all": "VIDEO_AVC = 'video/avc',", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["media.CodecMimeType.VIDEO_AVC).assertEqual('video"], "files": ["VideoDecoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CodecMimeType", "api_method_name": "VIDEO_MPEG2", "api_method_all": "VIDEO_MPEG2 = 'video/mpeg2',", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["media.CodecMimeType.VIDEO_MPEG2).assertEqual('video"], "files": ["VideoDecoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CodecMimeType", "api_method_name": "VIDEO_MPEG4", "api_method_all": "VIDEO_MPEG4 = 'video/mp4v-es',", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["media.CodecMimeType.VIDEO_MPEG4).assertEqual('video"], "files": ["VideoDecoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CodecMimeType", "api_method_name": "VIDEO_VP8", "api_method_all": "VIDEO_VP8 = 'video/x-vnd.on2.vp8',", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["media.CodecMimeType.VIDEO_VP8).assertEqual('video"], "files": ["VideoDecoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CodecMimeType", "api_method_name": "AUDIO_AAC", "api_method_all": "AUDIO_AAC = 'audio/mp4a-latm',", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["SUB_SCANNER_CB_SCAN_AUDIO_AAC_FILE_015', 0, async", "SUB_SCANNER_CB_SCAN_AUDIO_AAC_FILE_015 : PASS');\n", "SUB_SCANNER_CB_SCAN_AUDIO_AAC_FILE_015 : FAIL');\n", "media.CodecMimeType.AUDIO_AAC).assertEqual('audio", "media.CodecMimeType.AUDIO_AAC,\n            fileFo"], "files": ["MediaScannerFrameWork1.0.js", "RecorderLocalTestAudioFUNC.test.js", "AudioDecoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CodecMimeType", "api_method_name": "AUDIO_VORBIS", "api_method_all": "AUDIO_VORBIS = 'audio/vorbis',", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["media.CodecMimeType.AUDIO_VORBIS).assertEqual('audio"], "files": ["AudioDecoderEnumTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CodecMimeType", "api_method_name": "AUDIO_FLAC", "api_method_all": "AUDIO_FLAC = 'audio/flac',", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["SUB_SCANNER_CB_SCAN_AUDIO_FLAC_FILE_016 : PASS');\n", "SUB_SCANNER_CB_SCAN_AUDIO_FLAC_FILE_016', 0, async", "media.CodecMimeType.AUDIO_FLAC).assertEqual('audio", "SUB_SCANNER_CB_SCAN_AUDIO_FLAC_FILE_016 : FAIL');\n"], "files": ["MediaScannerFrameWork1.0.js", "AudioDecoderEnumTest.test.js"], "is_white": " ", "desc": " "}]}