{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\page_transition", "api": [{"api_class_name": "RouteType", "api_method_all": "declare enum RouteType {\n  \n  None,\n  \n  Push,\n  \n  Pop,\n}", "api_method_name": "RouteType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["alse\n  @State type: RouteType\t = NavigationType.P", "a.type).assertEqual(RouteType.Pop);\n      }\n     ", "     .onExit((type: RouteType, progress: number) ", "    .onEnter((type: RouteType, progress: number) "], "files": ["pageTransition2.ets", "pageTransition.ets", "PageTransitionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RouteType", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RouteType", "api_method_name": "Push", "api_method_all": "Push,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": [" \n    it('testRouterPush', 0, async function", "est page log] routerPush ohHide');\n    },\n}\n", "  uri: 'pages/routerPush/index'\n            ", "type:NavigationType.Push}){\n        Text('Na", "ole.info('testRouterPushNotExist success');\n", " \n    it('testRouterPushNotExist', 0, async ", "ole.info(\"testRouterPushNotExist getLength:\"", "ole.info('testRouterPush START');\n        le", "ype: NavigationType.Push }) {\n            Im", "ual('NavigationType.Push')\n      console.inf", "ole.info('testRouterPushNotExist END');\n    ", "e\t = NavigationType.Push\n\n  build() {\n    Co", "ual('NavigationType.Push');\n      console.in", "expect(\"pages/routerPush/\").assertEqual(page", " uri : 'pages/routerPush/index'\n        }\n  ", "ype: NavigationType.Push }) {\n        Text('", "Bold)\n      Button('Push')\n        .key('pus", "ype: NavigationType.Push}) {\n        Image($", "ole.info('testRouterPush SUCCESS');\n        ", "est page log] routerPush onShow');\n    },\n  ", "ole.info('testRouterPush END');\n        done", "ole.info('testRouterPushNotExist START');\n  ", "ole.info(\"testRouterPushNotExist getState\" +"], "files": ["pageTransition2.ets", "pageTransition.ets", "systemRouterA.ets", "NavigatorJsunit.test.ets", "Navigator.ets", "sharedTransition.ets", "index.js", "basicabilityapi.test.js", "PageTransitionJsunit.test.ets", "NavigatorCode.ets", "ohosRouterA.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RouteType", "api_method_name": "Pop", "api_method_all": "Pop,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 154, "since": 7, "api_used": "\u662f", "lines": ["alse\n  @State customPopupTwo: boolean = fal", "         this.customPopupThree = !this.cust", "indPopup(this.customPopupThree, {\n         ", "\n      Text('Custom PopupTwo').fontSize(12)", "Popup = !this.customPopup\n          try{\n  ", "nsole.info(\"get bindPopup state success \" +", "    })\n        .bindPopup(this.customPopupO", "    uri: 'pages/bindPopup',\n      }\n      t", "\n      Text('Custom PopupThree').fontSize(1", "\n      Text('Custom Popup').fontSize(12).ke", "         this.customPopupTwo = !this.custom", "indPopup(this.customPopup, {\n          buil", "alse\n  @State customPopupOne: boolean = fal", "alse\n  @State handlePopup: boolean = false\n", "upOne = !this.customPopupOne\n          try{", "\n        if (!(\"bindPopup\" == pages.name)) ", "dPopup(this.noHandlePopup, {\n          mess", "y\n@Component\nstruct PopupExample {\n  @State", "\n      Text('Custom Popup').fontSize(12)\n  ", "         this.customPopup = false\n         ", "(){\n  describe('bindPopupTest', function ()", "pup = !this.noHandlePopup\n          try {\n ", "Popup = !this.customPopup\n          try {\n ", "\n      Text('Custom PopupOne').fontSize(12)", "         this.customPopupThree = false\n    ", "alse\n  @State customPopupThree: boolean = f", "indPopup(this.customPopupOne, {\n          b", "console.info(\"customPopupOption page state ", "console.info('customPopupOption page show c", "         this.customPopupTwo = false\n      ", "       this.noHandlePopup = !this.noHandleP", "alse\n  @State customPopup: boolean = false\n", "    })\n        .bindPopup(this.customPopup,", "         this.customPopupOne = !this.custom", "         this.customPopup = !this.customPop", "    })\n        .bindPopup(this.noHandlePopu", "    })\n        .bindPopup(this.customPopupT", "       this.noHandlePopup = false\n         ", "le {\n  @State customPopup: boolean = false\n", "indPopup(this.customPopupTwo, {\n          b", "ault function customPopupOptionJsunit(){\n  ", "Three = !this.customPopupThree\n          tr", "         this.customPopupOne = false\n      ", " {\n  @State noHandlePopup: boolean = false\n", "upTwo = !this.customPopupTwo\n          try{"], "files": ["popupProps.test.js", "List.test.ets", "AlphabetIndexer.ets", "placement.ets", "commonComponentJsApi.test.js", "bindPopup.ets", "BindPopupJsunit.test.ets", "PageTransitionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SlideEffect", "api_method_all": "declare enum SlideEffect {\n  \n  Left,\n\n  \n  Right,\n\n  \n  Top,\n\n  \n  Bottom,\n}", "api_method_name": "SlideEffect", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SlideEffect", "api_method_name": "Left", "api_method_all": "Left,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 54, "since": 7, "api_used": "\u662f", "lines": ["tion: BadgePosition.Left,\n            maxCou", ".value.typeDirectionLeft);\n        console.i", "ement).assertEqual('Left')\n        console.i", "       placementPropLeft : this.placementPro", "tLeft:this.placementLeft,\n             place", ", left: this.paddingLeft })\n        .margin(", "sertEqual('placementLeft')\n        expect(ob", "= GradientDirection.LeftTop\n\n  build() {\n   ", "t = Placement.BottomLeft\n  @State placementT", "ement(\"typeDirectionLeft\").getInspector()\n  ", "ll,\n        typeLoopLeft : null,\n        typ", "nStyle(IndexerAlign.Left)\n        .onSelecte", "           placementLeft:this.placementLeft,", "  this.typeDirectionLeft = this.$element(\"ty", "marqueeDirectionPropLeft', 0, async function", "('GradientDirection.Left');\n      expect(obj", "('GradientDirection.LeftTop');\n      console", "('testbadgeplacementLeft START');\n        co", "ement(\"placementPropLeft\").getInspector()\n  ", "       typeDirectionLeft : this.typeDirectio", "ual(Placement.BottomLeft);\n      }\n      let", "('testbadgeplacementLeft', 0, async function", "Equal('typeDirectionLeft')\n        expect(ob", ") {\n          Text('Left').fontSize(25)\n    ", ",\n         placementLeft:null,\n         plac", "tion-'BadgePosition.Left'\" + JSON.stringify(", "  this.placementPropLeft = this.$element(\"pl", "       placementPropLeft : null,\n        pla", "('GradientDirection.LeftBottom');\n      cons", "ment = Placement.TopLeft\n  @State placementO", ": GradientDirection.Left,\n    colors: [[0xAE", ": this.typeDirectionLeft,\n            typeDi", ": GradientDirection.LeftBottom\n          }\n ", ": this.placementPropLeft,\n            placem", "            typeLoopLeft : this.typeLoopLeft", "Left : this.typeLoopLeft,\n            typeRi", "0px\"\n  @State marginLeft: string = \"10px\"\n  ", "ement(\"typeDirectionLeft\").getInspector()\n\n ", "Text(\"BadgePosition.Left\").fontSize(16)\n    ", "       this.typeLoopLeft = this.$element(\"ty", "t, left: this.marginLeft })\n        .constra", "This.value.placementLeft);\n        console.i", "       typeDirectionLeft : null,\n        typ", "  testbadgeplacementLeft\n      * @tc.desc   ", "   testPlacementPropLeft\n     * @tc.desc    ", "qual('BadgePosition.Left');\n      console.lo", "\"5\"\n  @State paddingLeft: string= \"5\"\n  @Sta", "      this.placementLeft = this.$element(\"pl", "tEqual(Placement.TopLeft);\n      }\n      let", ".$element(\"placementLeft\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "placement.ets", "GradientDirectionJsunit.test.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "colorGradient.ets", "gradientDirection.ets", "Text.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SlideEffect", "api_method_name": "Right", "api_method_all": "Right,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 60, "since": 7, "api_used": "\u662f", "lines": ["  });\n    },\n    setRightButton(e) {\n        ", "qual('BadgePosition.RightTop');\n      console", "('testbadgeplacementRight', 0, async function", "ype: ResponseType = RightClick;\n  @Builder Co", "ual(Placement.BottomRight);\n      }\n      let", ": GradientDirection.RightBottom\n          }\n ", "('testbadgeplacementRightTop', 0, async funct", "nStyle(IndexerAlign.Right)\n        .margin({ ", ": null,\n        typeRight : null,\n    },\n\n   ", ".$element(\"placementRight\").getInspector()\n  ", "       placementPropRight : this.placementPro", "       typeDirectionRight : null,\n        typ", ",\n         placementRightTop:null,\n         p", ": this.typeDirectionRight,\n            typeLo", "tion: BadgePosition.Right,\n            maxCou", "ition-BadgePosition.Right\" + JSON.stringify(o", "htTop:this.placementRightTop,\n             pl", "  testbadgeplacementRightTop\n      * @tc.desc", "Text(\"BadgePosition.RightTop\").fontSize(16)\n ", "tion: BadgePosition.RightTop,\n            max", "           placementRightTop:this.placementRi", "This.value.placementRight);\n        console.i", "ypeRight : this.typeRight,\n        }\n    },\n\n", "       placementPropRight : null,\n        pla", "('GradientDirection.RightBottom');\n      cons", "Right:this.placementRight,\n             place", "()\n        this.typeRight = this.$element(\"ty", "  this.placementPropRight = this.$element(\"pl", "tion-'BadgePosition.RightTop'\" + JSON.stringi", "ft,\n            typeRight : this.typeRight,\n ", "      this.placementRightTop = this.$element(", "('testbadgeplacementRight START');\n        co", ",\n         placementRight:null,\n         plac", "('testbadgeplacementRightTop START');\n       ", ".$element(\"placementRightTop\").getInspector()", "sertEqual('placementRight')\n        expect(ob", "      this.placementRight = this.$element(\"pl", ") {\n          Text('Right').fontSize(25)\n    ", "t = Placement.BottomRight\n\n  @Builder popupBu", "  this.typeDirectionRight = this.$element(\"ty", "       typeDirectionRight : this.typeDirectio", "  testbadgeplacementRight\n      * @tc.desc   ", "qual('BadgePosition.Right');\n      console.lo", "ement(\"typeDirectionRight\").getInspector()\n  ", "tEqual(Placement.TopRight);\n      }\n      let", "ment = Placement.TopRight\n  @State placementT", "           placementRight:this.placementRight", ": this.placementPropRight,\n            placem", "ement(\"placementPropRight\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "GradientDirectionJsunit.test.ets", "placement.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "bindContextMenu.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SlideEffect", "api_method_name": "Top", "api_method_all": "Top,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 174, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.TopStart)\n          .zI", "nContent: Alignment.TopStart }) {\n      Scr", "acement = Placement.TopLeft\n  @State placem", "adientDirection.LeftTop\n\n  build() {\n    Co", "acement = Placement.TopRight\n  @State place", "   Text('alignItems(Top)').fontSize(9).font", "sertEqual(Placement.TopLeft);\n      }\n     ", "         placementOnTop: this.placementOnTo", "nContent: Alignment.TopStart }) {\n      Col", "nContent: Alignment.TopStart }) {\n         ", "sertEqual(Placement.TopRight);\n      }\n    ", "('GradientDirection.Top');\n      expect(obj", "ac).align(Alignment.Top)\n      }\n      .wid", "te edge: Edge= Edge.Top\n  private content: ", "ertEqual(\"Alignment.TopStart\");\n      conso", "b3).align(Alignment.TopStart)\n        Text(", "op: this.placementOnTop,\n          onStateC", "ent.data.placementOnTop).assertEqual(false)", "nContent: Alignment.TopStart }) {\n        T", " BadgePosition.RightTop,\n            maxCou", "ignment = Alignment.TopStart;\n  @State dire", "  @State placementOnTop: boolean = false\n\n ", "ertEqual(\"Alignment.TopStart\");\n      expec", "        \"placementOnTop\": this.placementOnT", "adientDirection.LeftTop');\n      console.in", "ac).align(Alignment.Top)\n      }.width('100", "p\": this.placementOnTop,\n              }\n  ", "ler.scrollEdge(Edge.Top)\n        })\n       ", "\"align\": \"Alignment.TopStart\",\n            ", "   .align(Alignment.TopStart)\n          .he", ": GradientDirection.Top,\n        colors: [[", "b3).align(Alignment.Top)\n        Text('Seco", "\"BadgePosition.RightTop\").fontSize(16)\n    ", "s.context.fillText('Top', 60, height + 10);", "Items(VerticalAlign.Top).height('15%').bord", "ler.scrollEdge(Edge.Top)\n            })\n   ", "nContent: Alignment.Top }) {\n        Text('"], "files": ["row.ets", "direction2.ets", "placement.ets", "BadgeJsunit.test.ets", "canvas.ets", "Text.ets", "Row.ets", "Stack.ets", "TextJsunit.test.ets", "popupProps.test.js", "scrollCode.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "Scroll.ets", "AlertDialog.ets", "list.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "PlacementJsunit.test.ets", "index.js", "gradientDirection.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "badgeProps.test.js", "StackJsunit.test.ets", "bindPopup.ets", "Badge.ets", "BindPopupJsunit.test.ets", "buttonProps.test.js", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SlideEffect", "api_method_name": "Bottom", "api_method_all": "Bottom,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 119, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.Bottom)\n        .width('10", "adientDirection.LeftBottom\n          }\n       ", "dientDirection.RightBottom\n          }\n       ", "t: 'DialogAlignment.BottomEnd',\n            co", "ertEqual('Alignment.Bottom')\n      console.inf", "      this.placementBottom = this.$element(\"pl", "dientDirection.RightBottom');\n      console.in", "ertEqual(\"Alignment.BottomEnd\")\n      expect(o", "ertEqual('Alignment.BottomEnd')\n      console.", "nContent: Alignment.BottomEnd }) {\n        Tex", "ertEqual(\"Alignment.BottomStart\")\n      consol", " { align: Alignment.Bottom, offset: { x: 0, y:", "ignment = Alignment.Bottom\n\n  onPageShow() {\n ", ".$element(\"placementBottom\").getInspector()\n  ", "   Text('alignItems(Bottom)').fontSize(9).font", "   .align(Alignment.BottomStart)\n        .widt", "acement = Placement.BottomRight\n\n  @Builder po", "s.align = Alignment.BottomEnd;\n      } else if", "t: 'DialogAlignment.Bottom',\n            prima", "tom : this.placementBottom, placementNone : th", "Items(VerticalAlign.Bottom).justifyContent(Fle", "ertEqual(\"Alignment.Bottom\")\n      expect(obj.", "sertEqual(Placement.BottomRight);\n      }\n    ", "sertEqual(Placement.BottomLeft);\n      }\n     ", "ertEqual('Alignment.BottomStart')\n      consol", "this.currentTest = 'BottomStart'\n             ", "s.context.fillText('Bottom', 150, height - 10)", "lacement: Placement.Bottom,\n          maskColo", "adientDirection.LeftBottom');\n      console.in", "xtAlign\": Alignment.BottomEnd\n          }\n    ", "t: 'DialogAlignment.BottomStart',\n            ", "ertEqual(\"Alignment.Bottom\");\n      expect(obj", "nContent: Alignment.BottomStart }) {\n        T", "00 }\n  @State marginBottom: string = \"10px\"\n  ", "bottom: this.paddingBottom, top: this.paddingT", "l,\n        placementBottom : null,\n        pla", "acement = Placement.BottomLeft\n  @State placem", "           placementBottom : this.placementBot", ");\n    },\n\n    reachBottom(){\n        prompt.s", "px\"\n  @State paddingBottom: string= \"5\"\n  @Sta", "   .align(Alignment.BottomEnd)\n        .width(", "ignment = Alignment.Bottom\n  private content: ", " bottom: this.marginBottom, top: this.marginTo"], "files": ["placement.ets", "canvas.ets", "Text.ets", "imageFit.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "GradientDirectionJsunit.test.ets", "PositionSettingJsunit.test.ets", "touchAble.ets", "AlertDialog.ets", "positionSetting.ets", "index.js", "PlacementJsunit.test.ets", "OverlayJsunit.test.ets", "StackJsunit.test.ets", "bindPopup.ets", "row.ets", "overlay.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonTransition", "api_method_all": "declare class CommonTransition<T> {\n  \n  constructor();\n  \n  slide(value: SlideEffect): T;\n\n  \n  translate(value: { x?: number | string; y?: number | string; z?: number | string }): T;\n\n  \n  scale(value: { x?: number; y?: number; z?: number; centerX?: number | string; centerY?: number | string }): T;\n\n  \n  opacity(value: number): T;\n}", "api_method_name": "CommonTransition", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonTransition", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonTransition", "api_method_name": "slide", "api_method_all": "slide(value: SlideEffect): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 290, "since": 7, "api_used": "\u662f", "lines": [" console.info(\"push slider page success \" + J", "ue)\n          .key('slider2')\n      }.width(3", "it.test.ets'\nimport sliderJsunit from './Slid", "sMatrix4Jsunit();\n  sliderJsunit();\n  edgeEff", "0\")\n          .key('slider1')\n        Slider(", "        uri: 'pages/slider/router/index'\n    ", "        uri: 'pages/slider/prop/index'\n      ", "'80%')\n\n      Text('slider in set').fontSize(", " 5 }) {\n      Text('slider out set').fontSize", "console.error(\"push slider page error: \" + er", "rt default function sliderJsunit() {\n\n  funct", "{\n    console.info(\"slider page state change ", "s));\n        if (!(\"slider\" == pages.name)) {", "console.error(\"push sliderProps page error \" ", "()\n  spanJsunit()\n  sliderJsunit()\n  badgeJsu", "      console.info(\"slider after each called\"", "/index';\n\ndescribe('sliderPropsJsTest', funct", "  console.info(\"get slider state success \" + ", "$type).assertEqual('slider')\n        expect(o", "      expect(\"pages/slider/router/\").assertEq", "est.js')\nrequire('./sliderProps.test.js')\nreq", "{\n    console.info('slider page show called')", "     console.info('[sliderPropsJsTest] after ", ") {\n          Text('slider in direction set')", ") {\n          Text('slider out direction set'", "rt default function sliderJsunit() {\n  descri", "nsole.info(\"[router.slider] getState\" + JSON.", " console.info(\"push sliderProps page success ", " getInspectorByKey('slider');\n      let objNe", "y\n@Component\nstruct slider {\n  @State inSetVa", " getInspectorByKey('slider2');\n      let obj ", "  console.info(\"get slider success \" + JSON.s", "        uri: 'pages/slider',\n      }\n      tr", "     console.info('[sliderPropsJsTest] before", "     console.info(\"[sliderProps] get globalTh", " getInspectorByKey('slider');\n      console.i", "     console.info(\"[sliderProps] get inspecto", "t.test.ets';\nimport sliderJsunit from './Slid", " getInspectorByKey('slider1');\n      let obj ", ")\n            .key('slider')\n            .blo"], "files": ["SliderJsunit.test.ets", "List.test.js", "sliderProps.test.js", "slider.ets", "commonComponentJsApi.test.js", "Slider.ets", "List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonTransition", "api_method_name": "translate", "api_method_all": "translate(value: { x?: number | string; y?: number | string; z?: number | string }): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 280, "since": 7, "api_used": "\u662f", "lines": ["(Matrix4.identity().translate(eventData.data.matr", "     Row()\n        .translate(this.transformValue", "form: {\n            translate: '-120px',\n        ", "tate')\n\n      Text('translate').width('10%').font", "entity()\n          .translate(eventData.data.matr", "form: {\n            translateX: '100px',\n        ", " Matrix4.identity().translate({ x: 300 }).copy()\n", "'gestureMode')\n    .translate({ x: this.offsetX, ", "('PanGesture')\n    .translate({ x: this.offsetX, ", "Transform();\n  }\n\n  translate() {\n    this.contex", " Matrix4.identity().translate({x:100, y:200, z:30", "e: 300\n  }\n  @State translateValue: object= { x: ", " Matrix4.identity().translate(eventData.data.matr", " }).margin(80)\n    .translate({ x: this.offsetX, ", ");\n    this.context.translate(50, 50);\n    this.c", "tate')\n\n      Text('translate').width('90%').font", "100px',\n            translateY: '0px',\n          ", " '0px',\n            translateZ: '20px',\n         ", "form: {\n            translateX: '0px',\n          ", "(Matrix4.identity().translate({ x: 100, y: 100, z", " Matrix4.identity().translate({ x: 100, y: 100, z", "\n              this.translate();\n              th", " '0px',\n            translateY: '5px',\n          "], "files": ["animateTransformProps.test.js", "PanGesture.ets", "panDirection.ets", "pathProps.test.js", "rectProps.test.js", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "transForm.ets", "ellipseProps.test.js", "gestureMode.ets", "index.js", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonTransition", "api_method_name": "scale", "api_method_all": "scale(value: { x?: number; y?: number; z?: number; centerX?: number | string; centerY?: number | string }): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1026, "since": 7, "api_used": "\u662f", "lines": ["(eventData.data.grayscaleValue != null) {\n   ", "RS_GRAYSCALE = 'grayscale'\nconst ATTRS_BLUR =", "  expect(obj.$attrs.scale.y).assertEqual('0.5", "   }\n      })\n    }.scale({ x: this.scale }).", "')\n\n      Text('grayscale').fontSize(15).font", "        .scale(this.scaleValue)\n        .widt", "ep(1000);\n      let scaleValue = { x: 1, y: 1", " eventData.data.grayscaleValue;\n      }\n     ", " Matrix4.identity().scale({ x: 3 }).copy()\n  ", "Y: 5 }\n  @State grayscaleValue: string= 10;\n ", "xpect(objNew.$attrs.scale.y).assertEqual('1.0", ".transitionTypeOne, scale: { x: 0, y: 1.0, z:", "  }.scale({ x: this.scale }).opacity(this.opa", "     \"scale\" : this.scale,\n              \"opa", "context.filter('grayscale(50%)');\n    this.co", "00, y: 5 }\n  @State scaleValue: object= { x: ", "arse(eventData.data.scaleValue);\n      }\n    ", " Matrix4.identity().scale(eventData.data.matr", "ue\": JSON.stringify(scaleValue)\n          }\n ", "  expect(obj.$attrs.scale.x).assertEqual('2.0", "ull) {\n        this.scaleValue = JSON.parse(e", "ata: {\n            \"scaleValue\": JSON.stringi", "ep(1000);\n      let scaleValue = {\n        x:", "xpect(objNew.$attrs.scale.x).assertEqual('1.0", "ate2')\n\n      Text('scale').width('90%').font", "nExample {\n  @State scale: number = 1\n  @Stat", ".transitionTypeTwo, scale: { x: 1.0, y: 0.0 }", "ayscale(`${this.grayscaleValue}`)\n        .ke", " if (eventData.data.scaleValue != null) {\n   ", "     Row()\n        .scale(this.scaleValue)\n  ", " {\n        this.grayscaleValue = eventData.da", "Example1 {\n  @State scale: number = 1\n  @Stat", "pect(obj.$attrs.grayscale).assertEqual(0);\n  ", "ht(40)\n        .grayscale(`${this.grayscaleVa", "a: {\n              \"scale\" : this.scale,\n    ", " Matrix4.identity().scale({x:5, y:1, z:1, cen"], "files": ["pageTransition2.ets", "pathProps.test.js", "circleProps.test.js", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "imageEffects.ets", "Constants.ets", "polylineProps.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "polygonProps.test.js", "index.js", "PageTransitionJsunit.test.ets", "animateTransformProps.test.js", "svgProps.test.js", "progressProps.test.js", "transition.ets", "transForm.ets", "sharedTransition.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonTransition", "api_method_name": "opacity", "api_method_all": "opacity(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 532, "since": 7, "api_used": "\u662f", "lines": ["ale }).opacity(this.opacity)\n  }\n  pageTransiti", "pacityValue}`).key(\"opacity\")\n        Text('top", "%').opacity(`${this.opacityValue}`).key(\"opacit", " if (eventData.data.opacity != null) {\n        ", "xpect(objNew.$attrs.opacity).assertEqual(2);\n  ", "({ x: this.scale }).opacity(this.opacity)\n  }\n ", "      .opacity(this.opacity)\n        .onClick((", ".0 }, opacity: this.opacity })\n      }\n    }.he", "eInt(eventData.data.opacity);\n      }\n    }\n  }", "ale,\n              \"opacity\" : this.opacity,\n  ", " getInspectorByKey('opacity');\n      let obj = ", "(0x317aff)\n        .opacity(0.4)\n      Button(t", "ue = eventData.data.opacityValue;\n      }\n    }", "le = 1\n        this.opacity = progress\n      })", "ogress\n        this.opacity = 1\n      })\n  }\n\n ", " getInspectorByKey('opacity');\n      let objNew", "number = 1\n  @State opacity: number = 1\n  @Stat", "ale }).opacity(this.opacity)\n  }\n\n  pageTransit", "st ATTRS_OPACITY = 'opacity'\nconst ATTRS_DIRECT", "0}) {\n        Text('opacity(1)').fontSize(20).f", "  expect(obj.$attrs.opacity).assertEqual(1);\n  ", "   \"opacity\" : this.opacity,\n              \"typ", "ata: {\n            \"opacityValue\": \"0.7\"\n      ", "Black).width('90%').opacity(`${this.opacityValu", " if (eventData.data.opacityValue) {\n        thi", ".0 }, opacity: this.opacity })\n        .key('bu", "ata: {\n            \"opacity\": 'a',\n          }\n", ", y: 1.0, z: 1.0 }, opacity: this.opacity })\n  ", "0, y: 15};\n  @State opacityValue: string = 1;\n\n", "xpect(objNew.$attrs.opacity).assertEqual(0.7);\n", "xpect(objNew.$attrs.opacity).assertEqual(null);", "g = \"show\"\n  @State opacity: number = 1\n  @Stat", "('button')\n        .opacity(this.opacity)\n     ", "ull) {\n        this.opacity = parseInt(eventDat", "ata: {\n            \"opacity\": 2,\n          }\n  ", "{ x: 1.0, y: 0.0 }, opacity: this.opacity })\n  ", "({ x: this.scale }).opacity(this.opacity)\n  }\n\n", "lue) {\n        this.opacityValue = eventData.da"], "files": ["pageTransition2.ets", "pathProps.test.js", "circleProps.test.js", "enable.ets", "Text.ets", "lineProps.test.js", "TextJsunit.test.ets", "Constants.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "ellipseProps.test.js", "listItemProps.test.js", "TransitionJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "polygonProps.test.js", "positionSetting.ets", "index.js", "PageTransitionJsunit.test.ets", "tspanProps.test.js", "svgProps.test.js", "transition.ets", "svgTextProps.test.js", "textPathProps.test.js", "sharedTransition.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionEnterInterfaceextendsCommonTransition", "api_method_all": "interface PageTransitionEnterInterface extends CommonTransition<PageTransitionEnterInterface> {\n  \n  (value: { type?: RouteType; duration?: number; curve?: Curve | string; delay?: number }): PageTransitionEnterInterface;\n\n  \n  onEnter(event: (type?: RouteType, progress?: number) => void): PageTransitionEnterInterface;\n}", "api_method_name": "PageTransitionEnterInterfaceextendsCommonTransition", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionEnterInterfaceextendsCommonTransition", "api_method_name": "value", "api_method_all": "(value: { type?: RouteType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionEnterInterfaceextendsCommonTransition", "api_method_name": "duration", "api_method_all": "duration?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 240, "since": 7, "api_used": "\u662f", "lines": ["reateAnimator({\n    duration: 3000,\n    fill: 'f", "ata: {\n            \"duration\": \"nan\"\n          }", "xpect(objNew.$attrs.duration).assertEqual('500.0", "ull) {\n        this.duration = parseInt(eventDat", "he text is hidden', duration: 2000 })\n          ", "nsole.info(\"button6 duration value is : \" + this", "value is : \" + this.duration)\n          animateT", "xpect(objNew.$attrs.duration).assertEqual('nan')", "ata: {\n            \"duration\": \"500\"\n          }", "        animateTo({ duration: this.duration }, (", "To({ duration: this.duration }, () => {\n        ", "gify(this.matrix1), duration: 200 })\n          t", "nsole.info(\"button6 duration test animateTo STAR", " if (eventData.data.duration != null) {\n        ", "3.jpg',\n            duration: 500,\n            w", "ssage: \"sucessful\", duration: 200 })\n          t", "     .duration(this.duration)\n      .vertical(th", "s = {\n              duration: 5000,\n            ", "        animateTo({ duration: 1000 }, () => {\n  ", "nsole.info(\"button1 duration test animateTo STAR", "nsole.info(\"button1 duration value is : \" + this", " {\n                \"duration\": this.duration,\n  ", "an = false\n  @State duration: number = 100\n  @St", "2.jpg',\n            duration: 500,\n            w", "options = {\n        duration: 2000,\n        iter", "   \"duration\": this.duration,\n              }\n  ", "  expect(obj.$attrs.duration).assertEqual('1000.", "4.jpg',\n            duration: 500,\n            w", "nsole.info(\"button7 duration test animateTo STAR", "eInt(eventData.data.duration);\n      }\n      if ", "an = false\n  @State duration: number = 1000\n  @S", "nsole.info(\"button7 duration value is : \" + this", "The text is shown', duration: 2000 })\n          ", "p(this.loop)\n      .duration(this.duration)\n    ", "1.jpg',\n            duration: 500,\n            w"], "files": ["animate.ets", "pageTransition2.ets", "ohosPrompt.ets", "imageAnimatorProps.test.js", "ohosMatrix4.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "fillMode.ets", "curves.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "geometryTransition.ets", "swiperProps.test.js", "AnimateJsunit.test.ets", "animatorOption.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "transition.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionEnterInterfaceextendsCommonTransition", "api_method_name": "curve", "api_method_all": "curve?: Curve | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 51, "since": 7, "api_used": "\u662f", "lines": [")=> {\n          let curve = Curves.cubicBezie", "ata: {\n            \"curve\": 123\n          }\n ", "value is : \" + this.curve)\n          animateT", "ept(indexEvent.data.curve).assertEqual('Ease'", "   this.widthSize = curve.interpolate(0.5) * ", "  console.info(\"get curves state pages:\" + JS", "console.error(\"push curves page error:\" + err", "nsole.info(\"button2 curve value is : \" + this", "ept(indexEvent.data.curve).assertEqual('Linea", "nsole.info(\"button2 curve test animateTo STAR", "r({ duration: 1200, curve: Curve.Linear })\n  ", " if (eventData.data.curve != null) {\n        ", "mber = 100\n  @State curve: string = 'Ease'\n  ", "ept(indexEvent.data.curve).assertEqual('123')", "1.0);\n          let curve6 = Curves.LinearOut", "n({duration: 2000 , curve: Curves.spring(0.25", "        uri: 'pages/curves',\n      }\n      tr", "1.0);\n          let curve8 = Curves.ExtremeDe", "1.0);\n          let curve1 = Curves.init();\n ", " console.info(\"push curves page result:\" + JS", "1.0);\n          let curve9 = Curves.Sharp(0.3", "it();\n          let curve2 = Curves.Curve.Eas", "s));\n        if (!(\"curves\" == pages.name)) {", " Curves from '@ohos.curves'\n\n@Entry\n@Componen", " {\n                \"curve\": this.curve,\n     ", "      \"curve\": this.curve,\n              }\n  ", "o({ duration: 4000, curve: Curve.Linear }, ()", "1.0);\n          let curve10 = Curves.Rhythm(0", "  this.heightSize = curve.interpolate(0.5) * ", "ull) {\n        this.curve = eventData.data.cu", "        animateTo({ curve: this.curve }, () =", "1.0);\n          let curve4 = Curves.Curve.Eas", "t({ duration: 1500, curve: Curve.Ease })\n    ", "rt default function curvesJsunit() {\n  descri", "ve = eventData.data.curve;\n      }\n      if (", "1.0);\n          let curve3 = Curves.Curve.Eas", "  console.info(\"get curves state pages.name:\"", "ept(indexEvent.data.curve).assertEqual('abc')", "      console.info(\"curves beforeEach start\")", "      console.info(\"curves after each called\"", "ateTo({ curve: this.curve }, () => {\n        ", "1.0);\n          let curve5 = Curves.FastOutSl", "ata: {\n            \"curve\": \"Linear\"\n        ", "1.0);\n          let curve11 = Curves.cubicBez", "t.test.ets';\nimport curvesJsunit from './Curv", "1.0);\n          let curve12 = Curves.spring(1", "ata: {\n            \"curve\": 'abc'\n          }", "1.0);\n          let curve7 = Curves.FastOutLi"], "files": ["animate.ets", "pageTransition2.ets", "pageTransition.ets", "AnimateJsunit.test.ets", "motionPath.ets", "List.test.ets", "curves.ets", "CurvesJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionEnterInterfaceextendsCommonTransition", "api_method_name": "delay", "api_method_all": "delay?: number }): PageTransitionEnterInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 59, "since": 7, "api_used": "\u662f", "lines": [" 2000,\n            \"delay\": 5,\n            \"t", "\n                  \"delay\": this.delay,\n     ", "(indexEventOne.data.delay).assertEqual(5);\n  ", "ion: this.duration, delay: this.delay, type: ", "ber = 1000\n  @State delay: number = 0\n  @Stat", "ull) {\n        this.delay = eventData.data.de", " if (eventData.data.delay != null) {\n        ", "sing: 'friction',\n  delay: 100,\n  fill: 'forw", "      \"delay\": this.delay,\n                  ", "ay = eventData.data.delay;\n      }\n      if (", "ration, delay: this.delay, type: this.type })", "ng: 'friction',\n    delay: 100,\n    fill: 'fo"], "files": ["SharedTransitionJsunit.test.ets", "sharedTransition.ets", "basicabilityapi.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionEnterInterfaceextendsCommonTransition", "api_method_name": "onEnterevent", "api_method_all": "onEnter(event: (type?: RouteType, progress?: number) => void): PageTransitionEnterInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionExitInterfaceextendsCommonTransition", "api_method_all": "interface PageTransitionExitInterface extends CommonTransition<PageTransitionExitInterface> {\n  \n  (value: { type?: RouteType; duration?: number; curve?: Curve | string; delay?: number }): PageTransitionExitInterface;\n\n  \n  onExit(event: (type?: RouteType, progress?: number) => void): PageTransitionExitInterface;\n}", "api_method_name": "PageTransitionExitInterfaceextendsCommonTransition", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionExitInterfaceextendsCommonTransition", "api_method_name": "value", "api_method_all": "(value: { type?: RouteType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionExitInterfaceextendsCommonTransition", "api_method_name": "duration", "api_method_all": "duration?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 240, "since": 7, "api_used": "\u662f", "lines": ["reateAnimator({\n    duration: 3000,\n    fill: 'f", "ata: {\n            \"duration\": \"nan\"\n          }", "xpect(objNew.$attrs.duration).assertEqual('500.0", "ull) {\n        this.duration = parseInt(eventDat", "he text is hidden', duration: 2000 })\n          ", "nsole.info(\"button6 duration value is : \" + this", "value is : \" + this.duration)\n          animateT", "xpect(objNew.$attrs.duration).assertEqual('nan')", "ata: {\n            \"duration\": \"500\"\n          }", "        animateTo({ duration: this.duration }, (", "To({ duration: this.duration }, () => {\n        ", "gify(this.matrix1), duration: 200 })\n          t", "nsole.info(\"button6 duration test animateTo STAR", " if (eventData.data.duration != null) {\n        ", "3.jpg',\n            duration: 500,\n            w", "ssage: \"sucessful\", duration: 200 })\n          t", "     .duration(this.duration)\n      .vertical(th", "s = {\n              duration: 5000,\n            ", "        animateTo({ duration: 1000 }, () => {\n  ", "nsole.info(\"button1 duration test animateTo STAR", "nsole.info(\"button1 duration value is : \" + this", " {\n                \"duration\": this.duration,\n  ", "an = false\n  @State duration: number = 100\n  @St", "2.jpg',\n            duration: 500,\n            w", "options = {\n        duration: 2000,\n        iter", "   \"duration\": this.duration,\n              }\n  ", "  expect(obj.$attrs.duration).assertEqual('1000.", "4.jpg',\n            duration: 500,\n            w", "nsole.info(\"button7 duration test animateTo STAR", "eInt(eventData.data.duration);\n      }\n      if ", "an = false\n  @State duration: number = 1000\n  @S", "nsole.info(\"button7 duration value is : \" + this", "The text is shown', duration: 2000 })\n          ", "p(this.loop)\n      .duration(this.duration)\n    ", "1.jpg',\n            duration: 500,\n            w"], "files": ["animate.ets", "pageTransition2.ets", "ohosPrompt.ets", "imageAnimatorProps.test.js", "ohosMatrix4.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "fillMode.ets", "curves.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "geometryTransition.ets", "swiperProps.test.js", "AnimateJsunit.test.ets", "animatorOption.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "transition.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionExitInterfaceextendsCommonTransition", "api_method_name": "curve", "api_method_all": "curve?: Curve | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 51, "since": 7, "api_used": "\u662f", "lines": [")=> {\n          let curve = Curves.cubicBezie", "ata: {\n            \"curve\": 123\n          }\n ", "value is : \" + this.curve)\n          animateT", "ept(indexEvent.data.curve).assertEqual('Ease'", "   this.widthSize = curve.interpolate(0.5) * ", "  console.info(\"get curves state pages:\" + JS", "console.error(\"push curves page error:\" + err", "nsole.info(\"button2 curve value is : \" + this", "ept(indexEvent.data.curve).assertEqual('Linea", "nsole.info(\"button2 curve test animateTo STAR", "r({ duration: 1200, curve: Curve.Linear })\n  ", " if (eventData.data.curve != null) {\n        ", "mber = 100\n  @State curve: string = 'Ease'\n  ", "ept(indexEvent.data.curve).assertEqual('123')", "1.0);\n          let curve6 = Curves.LinearOut", "n({duration: 2000 , curve: Curves.spring(0.25", "        uri: 'pages/curves',\n      }\n      tr", "1.0);\n          let curve8 = Curves.ExtremeDe", "1.0);\n          let curve1 = Curves.init();\n ", " console.info(\"push curves page result:\" + JS", "1.0);\n          let curve9 = Curves.Sharp(0.3", "it();\n          let curve2 = Curves.Curve.Eas", "s));\n        if (!(\"curves\" == pages.name)) {", " Curves from '@ohos.curves'\n\n@Entry\n@Componen", " {\n                \"curve\": this.curve,\n     ", "      \"curve\": this.curve,\n              }\n  ", "o({ duration: 4000, curve: Curve.Linear }, ()", "1.0);\n          let curve10 = Curves.Rhythm(0", "  this.heightSize = curve.interpolate(0.5) * ", "ull) {\n        this.curve = eventData.data.cu", "        animateTo({ curve: this.curve }, () =", "1.0);\n          let curve4 = Curves.Curve.Eas", "t({ duration: 1500, curve: Curve.Ease })\n    ", "rt default function curvesJsunit() {\n  descri", "ve = eventData.data.curve;\n      }\n      if (", "1.0);\n          let curve3 = Curves.Curve.Eas", "  console.info(\"get curves state pages.name:\"", "ept(indexEvent.data.curve).assertEqual('abc')", "      console.info(\"curves beforeEach start\")", "      console.info(\"curves after each called\"", "ateTo({ curve: this.curve }, () => {\n        ", "1.0);\n          let curve5 = Curves.FastOutSl", "ata: {\n            \"curve\": \"Linear\"\n        ", "1.0);\n          let curve11 = Curves.cubicBez", "t.test.ets';\nimport curvesJsunit from './Curv", "1.0);\n          let curve12 = Curves.spring(1", "ata: {\n            \"curve\": 'abc'\n          }", "1.0);\n          let curve7 = Curves.FastOutLi"], "files": ["animate.ets", "pageTransition2.ets", "pageTransition.ets", "AnimateJsunit.test.ets", "motionPath.ets", "List.test.ets", "curves.ets", "CurvesJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionExitInterfaceextendsCommonTransition", "api_method_name": "delay", "api_method_all": "delay?: number }): PageTransitionExitInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 59, "since": 7, "api_used": "\u662f", "lines": [" 2000,\n            \"delay\": 5,\n            \"t", "\n                  \"delay\": this.delay,\n     ", "(indexEventOne.data.delay).assertEqual(5);\n  ", "ion: this.duration, delay: this.delay, type: ", "ber = 1000\n  @State delay: number = 0\n  @Stat", "ull) {\n        this.delay = eventData.data.de", " if (eventData.data.delay != null) {\n        ", "sing: 'friction',\n  delay: 100,\n  fill: 'forw", "      \"delay\": this.delay,\n                  ", "ay = eventData.data.delay;\n      }\n      if (", "ration, delay: this.delay, type: this.type })", "ng: 'friction',\n    delay: 100,\n    fill: 'fo"], "files": ["SharedTransitionJsunit.test.ets", "sharedTransition.ets", "basicabilityapi.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PageTransitionExitInterfaceextendsCommonTransition", "api_method_name": "onExitevent", "api_method_all": "onExit(event: (type?: RouteType, progress?: number) => void): PageTransitionExitInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}