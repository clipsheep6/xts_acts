{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\pattern_lock", "api": [{"api_class_name": "PatternLockController", "api_method_all": "declare class PatternLockController {\r\n  \r\n  constructor();\r\n\r\n  \r\n  reset();\r\n}", "api_method_name": "PatternLockController", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["ockController = new PatternLockController()\n  @State onAction", "ternLockController: PatternLockController = new PatternLockCo", "ockController = new PatternLockController();\n  onPageShow() {"], "files": ["PatternLock.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockController", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 80, "since": 0, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockController", "api_method_name": "reset", "api_method_all": "reset();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["   })\n      Button('reset button').margin(30)", ", 80, 80);\n    this.resetShadow(false);\n  }\n\n", "--\" + data);\n  }\n\n  resetTransform() {\n    th", " offscreenCanvasCtx.resetTransform();\n       ", "      console.info(\"reset button emit action ", "tternLockController.reset()\n            retur", ", 80, 80);\n    this.resetShadow(true);\n  }\n\n ", "s.myTimerController.reset();\n        });\n    ", "tternLockController.reset()\n        }).margin", "adow(false);\n  }\n\n  resetShadow(isX) {\n    th", "       console.log('reset all value')\n    },\n", "});\n        Button(\"reset\").onClick(() => {\n ", " {\n    this.context.resetTransform();\n  }\n\n  ", "tternLockController.reset()\n        this.pass", "      console.info(\"reset button start to emi"], "files": ["PatternLock.ets", "textTimer.ets", "index.js", "canvas.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockInterface", "api_method_all": "interface PatternLockInterface {\r\n  (controller?: PatternLockController): PatternLockAttribute;\r\n}", "api_method_name": "PatternLockInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockInterface", "api_method_name": "controller", "api_method_all": "(controller?: PatternLockController): PatternLockAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 50, "since": 8, "api_used": "\u662f", "lines": [" {\n            this.controller.stop()\n          })", " {\n            this.controller.onInactive()\n      ", " {\n            this.controller.loadData({\n        ", "s.accessStep = this.controller.accessStep(1)\n     ", ".nextMonth,\n        controller: this.Controller\n  ", "t getHitTest = this.controller.getHitTest()\n      ", "string= ''\n  @State controller: SearchController= ", " {\n            this.controller.registerJavaScriptP", "cessBackward = this.controller.accessBackward()\n  ", "', controller: this.controller })\n        .searchB", " {\n            this.controller.forward()\n         ", "on.Start, index: 1, controller: this.controller })", " {\n            this.controller.runJavaScript({\n   ", " {\n            this.controller.requestFocus()\n    ", " {\n            this.controller.clearHistory()\n    ", ")=>{\n          this.controller.stop()\n          th", "tion.End, index: 1, controller: this.controller })", "gressRates,\n        controller: this.myVideoContro", " {\n            this.controller.refresh()\n         ", " {\n            this.controller.onActive()\n        ", " {\n            this.controller.close()\n           ", "{\n      TextTimer({ controller: this.myTimerContro", "8, controller: this.controller})\n        .key('tex", "ccessForward = this.controller.accessForward()\n   ", "r: 'input content', controller: this.controller })", " {\n            this.controller.deleteJavaScriptReg", "1, controller: this.controller }) {\n        TabCon", "previewUri,\n        controller: this.myVideoContro", "tTestType.Unknown\n  controller: WebController = ne", "timeZoneOffset: -8, controller: this.controller})\n", ", libraryname: '3', controller: this.xComponentCon", "omDialogExample {\n  controller: CustomDialogContro", "Example {\n  private controller: TabsController = n", " boolean = false;\n  controller: TextClockControlle", " {\n            this.controller.loadUrl({\n         ", " {\n            this.controller.backward()\n        ", "=> {\n          this.controller.caretPosition(4)\n  ", "n = false\n  private controller: TabsController = n", ": this.barPosition, controller: this.controller, i", "('indextest.html'), controller: this.controller })", "), controller: this.controller })\n        .domStor", "n, controller: this.controller, index: this.index ", "=> {\n          this.controller.changeIndex(0)\n    ", "rl);\n          this.controller.runJavaScript('test", ")=>{\n          this.controller.start()\n        })\n"], "files": ["textClock.ets", "tabs.ets", "Video.ets", "WebPage.ets", "video.ets", "Tab.ets", "textInput.ets", "textTimer.ets", "Calendar.ets", "XComponentPage.ets", "search.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_all": "declare class PatternLockAttribute extends CommonMethod<PatternLockAttribute> {\r\n  \r\n  sideLength(value: Length): PatternLockAttribute;\r\n\r\n  \r\n  circleRadius(value: Length): PatternLockAttribute;\r\n\r\n  \r\n  backgroundColor(value: ResourceColor): PatternLockAttribute;\r\n\r\n  \r\n  regularColor(value: ResourceColor): PatternLockAttribute;\r\n\r\n  \r\n  selectedColor(value: ResourceColor): PatternLockAttribute;\r\n\r\n  \r\n  activeColor(value: ResourceColor): PatternLockAttribute;\r\n\r\n  \r\n  pathColor(value: ResourceColor): PatternLockAttribute;\r\n\r\n  \r\n  pathStrokeWidth(value: number | string): PatternLockAttribute;\r\n\r\n  \r\n  onPatternComplete(callback: (input: Array<number>) => void): PatternLockAttribute;\r\n\r\n  \r\n  autoReset(value: boolean): PatternLockAttribute;\r\n}", "api_method_name": "PatternLockAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "sideLength", "api_method_all": "sideLength(value: Length): PatternLockAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["  if(eventData.data.sideLength != null) {\n        ", "ontroller)\n        .sideLength(this.sideLength)\n  ", "ull) {\n        this.sideLength = eventData.data.si", "   .sideLength(this.sideLength)\n        .circleRad", "ontroller)\n        .sideLength(this.length)\n      ", "(8)\n        Button('sideLength' + this.length).onC", " password'\n  @State sideLength: number = 150;\n  @S", "th = eventData.data.sideLength;\n      }\n      if(e"], "files": ["PatternLock.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "circleRadius", "api_method_all": "circleRadius(value: Length): PatternLockAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["(8)\n        Button('circleRadius' + this.redius).onC", "is.length)\n        .circleRadius(this.redius)\n      ", "ull) {\n        this.circleRadius = eventData.data.ci", "ber = 150;\n  @State circleRadius: number = 7;\n  @Sta", " .circleRadius(this.circleRadius)\n        .pathStrok", "us = eventData.data.circleRadius;\n      }\n      if(e", "ideLength)\n        .circleRadius(this.circleRadius)\n", "  if(eventData.data.circleRadius != null) {\n        "], "files": ["PatternLock.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "backgroundColor", "api_method_all": "backgroundColor(value: ResourceColor): PatternLockAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 627, "since": 8, "api_used": "\u662f", "lines": ["', height: '60%' }).backgroundColor(0xbbb2cb)\n         ", "  if(eventData.data.backgroundColor != null) {\n        ", "ter)\n              .backgroundColor(0xbbb2cb)\n         ", "', height: '80%' }).backgroundColor(0xd2cab3).align(Ali", "_BACKGROUNDCOLOR = 'backgroundColor'\nconst ATTRS_ALIGNS", "00%').height('40%').backgroundColor('#00ffff')\n        ", "ight(70)\n          .backgroundColor(0xF5DEB3)\n         ", "ht(50)\n            .backgroundColor(0x4582B4)\n         ", "h('50%').height(30).backgroundColor(0x00FFFF)\n      }\n ", "ht(120).padding(10).backgroundColor(0xAFEEEE)\n\n      Te", "n('Touch')\n        .backgroundColor(0x2788D9)\n        .", "ight(80)\n          .backgroundColor(0xF5DEB3).textAlign", "ght(100)\n          .backgroundColor(0xF5DEB3).textAlign", "ht(\"100%\")\n        .backgroundColor(0x66bbb2cb)\n       ", "y('text1')\n        .backgroundColor(Color.Green)\n      ", "led(false)\n        .backgroundColor(0x317aff)\n        .", "h('50%').height(30).backgroundColor(0xAFEEEE)\n        C", "(item)\n            .backgroundColor(0xbbb2cb)\n         ", "ight: 100 })\n      .backgroundColor(0xd2cab3)\n      .cl", "0)\n                .backgroundColor(0xFFFFFF)\n         ", "0%').height('100%').backgroundColor(0xDCDCDC).padding({", "ight.Bold)\n        .backgroundColor(Color.Black)\n      ", "ght(200)\n    }\n    .backgroundColor(0xf1f3f5)\n    .marg", "ntSize(16)\n        .backgroundColor(0xF9CF93)\n        .", "Index].size)\n      .backgroundColor(0xd2cab3)\n    }.pad", "ight(70)\n          .backgroundColor(0xD2B48C)\n         ", "       }).margin(3).backgroundColor(0x2788D9)\n      if ", "tem)\n              .backgroundColor(0xbbb2cb)\n         ", "'50%' })\n          .backgroundColor(0xc1cbac)\n         ", "'enabled')\n        .backgroundColor(0x317aff)\n        .", ".padding(10)\n      .backgroundColor(0xAFEEEE)\n    }.wid", "ht(50)\n            .backgroundColor(0x00BFFF)\n         ", "ight: 165 })\n      .backgroundColor(0xd2cab3)\n\n      Te", "t(160)\n            .backgroundColor(0xAFEEEE)\n         ", "ht(\"100%\")\n        .backgroundColor(0x66b6c5d1)\n       ", "ight(80)\n          .backgroundColor(0xAFEEEE)\n         ", "ht(50)\n            .backgroundColor(0x4682B4)\n         "], "files": ["ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Navigation.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Swiper.ets", "ResponseRegion.ets", "scrollBar.ets", "transition.ets", "systemPrompt.ets", "gridSettings.ets", "transForm.ets", "Column.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Text.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "sideBar.ets", "Badge.ets", "Scroll.ets", "customDialogController.ets", "positionSetting.ets", "animatorOption.ets", "flexDirection.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "gridPage.ets", "enable.ets", "badge.ets", "imageEffects.ets", "ColumnSplit.ets", "tabs.ets", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "global.ets", "Flex.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "divider.ets", "appear.ets", "Constants.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "fillMode.ets", "curves.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "AlertDialog.ets", "LoadingProgressJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "timeStamp.ets", "motionPath.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "panel.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "regularColor", "api_method_all": "regularColor(value: ResourceColor): PatternLockAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["(8)\n        Button('regularColor').onClick(() => {\n ", "is.color1)\n        .regularColor(this.color2)\n      "], "files": ["PatternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "selectedColor", "api_method_all": "selectedColor(value: ResourceColor): PatternLockAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 36, "since": 8, "api_used": "\u662f", "lines": ["xpect(objNew.$attrs.selectedColor).assertEqual('#FF00", "cted: 0 })\n        .selectedColor(0xffffff)\n        .", "t: 50 })\n          .selectedColor('#FFFF0000')\n      ", "r.Black)\n          .selectedColor(0xCCCCCC)\n         ", "false })\n          .selectedColor('#FFFF0000')\n      ", "t(false)\n          .selectedColor(0x39a2db)\n         ", "or.Gray)\n          .selectedColor(Color.Blue)\n       ", "\n        }\n        .selectedColor(0x39a2db)\n        .", " if (eventData.data.selectedColor != null) {\n        ", "ata: {\n            \"selectedColor\": '-a',\n          }", ".selectedColor(this.selectedColor)\n        .onChange(", "or = eventData.data.selectedColor;\n      }\n      if (", ".Gray)\n            .selectedColor(Color.Blue)\n       ", "ata: {\n            \"selectedColor\": '#330A59F8',\n    ", "FF0000')\n          .selectedColor('#FF0000FF')\n      ", "('toggle')\n        .selectedColor(this.selectedColor)", "Black)\n            .selectedColor(0xCCCCCC)\n         ", "heckbox1')\n        .selectedColor(0xed6f21)\n        .", "ata: {\n            \"selectedColor\": '-0.1',\n         ", "  expect(obj.$attrs.selectedColor).assertEqual('#330A", "  expect(obj.$attrs.selectedColor).assertEqual('#FFFF", "FF00DDDD')\n        .selectedColor(0xffffff)\n        .", "is.color2)\n        .selectedColor(this.color3)\n      ", "Group'})\n          .selectedColor(0xed6f21)\n         ", "ull) {\n        this.selectedColor = eventData.data.se", "eExample {\n  @State selectedColor: Color = '#330A59F7", "(8)\n        Button('selectedColor').onClick(() => {\n ", "xpect(objNew.$attrs.selectedColor).assertEqual('#330A", "heckbox2')\n        .selectedColor(0x39a2db)\n        .", "ct(true)\n          .selectedColor(0x39a2db)\n         ", "lor.Red)\n          .selectedColor(Color.Blue)\n       ", "n: true })\n        .selectedColor(0x39a2db)\n        .", " true })\n          .selectedColor('#FFFF0000')\n      "], "files": ["ResponseRegion.ets", "checkbox.ets", "Toggle.ets", "AlphabetIndexer.ets", "slider.ets", "ToggleJsunit.test.ets", "PatternLock.ets", "toggle.ets", "checkboxGroup.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "activeColor", "api_method_all": "activeColor(value: ResourceColor): PatternLockAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["is.color3)\n        .activeColor(this.color4)\n      ", "(8)\n        Button('activeColor').onClick(() => {\n "], "files": ["PatternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "pathColor", "api_method_all": "pathColor(value: ResourceColor): PatternLockAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["(8)\n        Button('pathColor').onClick(() => {\n ", "is.color4)\n        .pathColor(this.color5)\n      "], "files": ["PatternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "pathStrokeWidth", "api_method_all": "pathStrokeWidth(value: number | string): PatternLockAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["cleRadius)\n        .pathStrokeWidth(this.pathStrokeWidt", "  if(eventData.data.pathStrokeWidth != null) {\n        ", "th = eventData.data.pathStrokeWidth;\n      }\n      if(e", "athStrokeWidth(this.pathStrokeWidth)\n        .backgroun", "ternLock')\n        .pathStrokeWidth(this.stroke)\n      ", "(8)\n        Button('pathStrokeWidth' + this.stroke).onC", "umber = 7;\n  @State pathStrokeWidth: number = 17;\n  @St", "ull) {\n        this.pathStrokeWidth = eventData.data.pa"], "files": ["PatternLock.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "onPatternCompletecallback", "api_method_all": "onPatternComplete(callback: (input: Array<number>) => void): PatternLockAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "onPatternCompletecallback", "api_method_all": "onPatternComplete(callback: (input: Array<number>) => void): PatternLockAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PatternLockAttribute", "api_method_name": "autoReset", "api_method_all": "autoReset(value: boolean): PatternLockAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["(8)\n        Button('autoReset' + this.isAutoReset", "    .autoReset(this.autoReset)\n        .key('Patt", "et = eventData.data.autoReset;\n      }\n    }\n  }\n", "ull) {\n        this.autoReset = eventData.data.au", "  if(eventData.data.autoReset != null) {\n        ", "ndColor}`)\n        .autoReset(this.autoReset)\n   ", "FF008000\";\n  @State autoReset: boolean = true;\n  ", "is.stroke)\n        .autoReset(this.isAutoReset)\n "], "files": ["PatternLock.ets", "patternLock.ets"], "is_white": " ", "desc": " "}]}