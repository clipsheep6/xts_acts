{"subsystem_ch": "\u5a92\u4f53\u5b50\u7cfb\u7edf", "subsystem_en": "multimedia", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.multimedia.mediaLibrary", "api": [{"api_class_name": "mediaLibrary", "api_method_all": "declare namespace mediaLibrary {\n  \n  function getMediaLibrary(): MediaLibrary;\n  \n  function getMediaLibrary(context: Context): MediaLibrary;\n\n  \n  enum MediaType {\n    \n    FILE = 0,\n    \n    IMAGE,\n    \n    VIDEO,\n    \n    AUDIO\n  }\n\n  \n  interface MediaAssetOption {\n    \n    src: string;\n    \n    mimeType: string;\n    \n    relativePath?: string;\n  }\n\n  \n  interface MediaSelectOption {\n    \n    type: 'image' | 'video' | 'media';\n    \n    count: number;\n  }\n\n  \n  interface FileAsset {\n    \n    readonly id: number;\n    \n    readonly uri: string;\n    \n    readonly mimeType: string;\n    \n    readonly mediaType: MediaType;\n    \n    displayName: string;\n    \n    title: string;\n    \n    relativePath: string;\n    \n    readonly parent: number;\n    \n    readonly size: number;\n    \n    readonly dateAdded: number;\n    \n    readonly dateModified: number;\n    \n    readonly dateTaken: number;\n    \n    readonly artist: string;\n    \n    readonly audioAlbum: string;\n    \n    readonly width: number;\n    \n    readonly height: number;\n    \n    orientation: number;\n    \n    readonly duration: number;\n    \n    readonly albumId: number;\n    \n    readonly albumUri: string;\n    \n    readonly albumName: string;\n\n    \n    isDirectory(callback: AsyncCallback<boolean>): void;\n    \n    isDirectory():Promise<boolean>;\n    \n    commitModify(callback: AsyncCallback<void>): void;\n    \n    commitModify(): Promise<void>;\n    \n    open(mode: string, callback: AsyncCallback<number>): void;\n    \n    open(mode: string): Promise<number>;\n    \n    close(fd: number, callback: AsyncCallback<void>): void;\n    \n    close(fd: number): Promise<void>;\n    \n    getThumbnail(callback: AsyncCallback<image.PixelMap>): void;\n    \n    getThumbnail(size: Size, callback: AsyncCallback<image.PixelMap>): void;\n    \n    getThumbnail(size?: Size): Promise<image.PixelMap>;\n    \n    favorite(isFavorite: boolean, callback: AsyncCallback<void>): void;\n    \n    favorite(isFavorite: boolean): Promise<void>;\n    \n    isFavorite(callback: AsyncCallback<boolean>): void;\n    \n    isFavorite():Promise<boolean>;\n    \n    trash(isTrash: boolean, callback: AsyncCallback<void>): void;\n    \n    trash(isTrash: boolean): Promise<void>;\n    \n    isTrash(callback: AsyncCallback<boolean>): void;\n    \n    isTrash():Promise<boolean>;\n  }\n\n  \n  enum FileKey {\n    \n    ID = \"file_id\",\n    \n    RELATIVE_PATH = \"relative_path\",\n    \n    DISPLAY_NAME = \"display_name\",\n    \n    PARENT = \"parent\",\n    \n    MIME_TYPE = \"mime_type\",\n    \n    MEDIA_TYPE = \"media_type\",\n    \n    SIZE = \"size\",\n    \n    DATE_ADDED = \"date_added\",\n    \n    DATE_MODIFIED = \"date_modified\",\n    \n    DATE_TAKEN = \"date_taken\",\n    \n    TITLE = \"title\",\n    \n    ARTIST = \"artist\",\n    \n    AUDIOALBUM = \"audio_album\",\n    \n    DURATION = \"duration\",\n    \n    WIDTH = \"width\",\n    \n    HEIGHT = \"height\",\n    \n    ORIENTATION = \"orientation\",\n    \n    ALBUM_ID = \"bucket_id\",\n    \n    ALBUM_NAME = \"bucket_display_name\",\n  }\n\n  \n  interface MediaFetchOptions {\n    \n    selections: string;\n    \n    selectionArgs: Array<string>;\n    \n    order?: string;\n    \n    uri?: string;\n    \n    networkId?: string;\n    \n    extendArgs?: string;\n  }\n\n  \n  interface FetchFileResult {\n    \n    getCount(): number;\n    \n    isAfterLast(): boolean;\n    \n    close(): void;\n    \n    getFirstObject(callback: AsyncCallback<FileAsset>): void;\n    \n    getFirstObject(): Promise<FileAsset>;\n    \n    getNextObject(callback: AsyncCallback<FileAsset>): void;\n    \n    getNextObject(): Promise<FileAsset>;\n    \n    getLastObject(callback: AsyncCallback<FileAsset>): void;\n    \n    getLastObject(): Promise<FileAsset>;\n    \n    getPositionObject(index: number, callback: AsyncCallback<FileAsset>): void;\n    \n    getPositionObject(index: number): Promise<FileAsset>;\n     \n    getAllObject(callback: AsyncCallback<Array<FileAsset>>): void;\n    \n    getAllObject(): Promise<Array<FileAsset>>;\n  }\n\n  \n  interface Album {\n    \n    readonly albumId: number;\n    \n    albumName: string;\n    \n    readonly albumUri: string;\n    \n    readonly dateModified: number;\n    \n    readonly count: number;\n    \n    readonly relativePath: string;\n    \n    readonly coverUri: string;\n\n    \n    commitModify(callback: AsyncCallback<void>): void;\n    \n    commitModify(): Promise<void>;\n    \n    getFileAssets(callback: AsyncCallback<FetchFileResult>): void;\n    \n    getFileAssets(options: MediaFetchOptions, callback: AsyncCallback<FetchFileResult>): void;\n    \n    getFileAssets(options?: MediaFetchOptions): Promise<FetchFileResult>;\n  }\n\n  \n  enum DirectoryType {\n    \n    DIR_CAMERA = 0,\n    \n    DIR_VIDEO,\n    \n    DIR_IMAGE,\n    \n    DIR_AUDIO,\n    \n    DIR_DOCUMENTS,\n    \n    DIR_DOWNLOAD\n  }\n\n  \n  interface MediaLibrary {\n    \n    getPublicDirectory(type: DirectoryType, callback: AsyncCallback<string>): void;\n    \n    getPublicDirectory(type: DirectoryType): Promise<string>;\n    \n    getFileAssets(options: MediaFetchOptions, callback: AsyncCallback<FetchFileResult>): void;\n    \n    getFileAssets(options: MediaFetchOptions): Promise<FetchFileResult>;\n    \n    on(type: 'deviceChange'|'albumChange'|'imageChange'|'audioChange'|'videoChange'|'fileChange'|'remoteFileChange', callback: Callback<void>): void;\n    \n     off(type: 'deviceChange'|'albumChange'|'imageChange'|'audioChange'|'videoChange'|'fileChange'|'remoteFileChange', callback?: Callback<void>): void;\n    \n    createAsset(mediaType: MediaType, displayName: string, relativePath: string, callback: AsyncCallback<FileAsset>): void;\n    \n    createAsset(mediaType: MediaType, displayName: string, relativePath: string): Promise<FileAsset>;\n    \n    deleteAsset(uri: string, callback: AsyncCallback<void>): void;\n    \n    deleteAsset(uri: string): Promise<void>;\n    \n    getAlbums(options: MediaFetchOptions, callback: AsyncCallback<Array<Album>>): void;\n    \n    getAlbums(options: MediaFetchOptions): Promise<Array<Album>>;\n    \n    storeMediaAsset(option: MediaAssetOption, callback: AsyncCallback<string>): void;\n    \n    storeMediaAsset(option: MediaAssetOption): Promise<string>;\n    \n    startImagePreview(images: Array<string>, index: number, callback: AsyncCallback<void>): void;\n    \n    startImagePreview(images: Array<string>, callback: AsyncCallback<void>): void;\n    \n    startImagePreview(images: Array<string>, index?: number): Promise<void>;\n    \n    startMediaSelect(option: MediaSelectOption, callback: AsyncCallback<Array<string>>): void;\n    \n    startMediaSelect(option: MediaSelectOption): Promise<Array<string>>;\n    \n    getActivePeers(callback: AsyncCallback<Array<PeerInfo>>): void;\n    \n    getActivePeers(): Promise<Array<PeerInfo>>;\n    \n    getAllPeers(callback: AsyncCallback<Array<PeerInfo>>): void;\n    \n    getAllPeers(): Promise<Array<PeerInfo>>;\n    \n    release(callback: AsyncCallback<void>): void;\n    \n    release(): Promise<void>;\n  }\n\n  \n  interface Size {\n    \n    width: number;\n    \n    height: number;\n  }\n  \n  \n  interface PeerInfo {\n    \n    readonly deviceName: string;\n    \n    readonly networkId: string;\n    \n    readonly deviceType: DeviceType;\n    \n    readonly isOnline: boolean;\n  }\n\n  \n  enum DeviceType {\n    \n    TYPE_UNKNOWN = 0,\n    \n    TYPE_LAPTOP,\n    \n    TYPE_PHONE,\n    \n    TYPE_TABLET,\n    \n    TYPE_WATCH,\n    \n    TYPE_CAR,\n    \n    TYPE_TV\n  }\n}", "api_method_name": "mediaLibrary", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 373, "since": 0, "api_used": "\u662f", "lines": ["  const mediaTest = mediaLibrary.getMediaLibrary();\n", "     console.info('[mediaLibrary] case fileAsset is ", "     console.info('[mediaLibrary] case close fd succ", "m '@ohos.multimedia.mediaLibrary'\nimport fileio from", "    let mediaType = mediaLibrary.MediaType.VIDEO;\n  ", "edia.camera'\nimport mediaLibrary from '@ohos.multime", ".getPublicDirectory(mediaLibrary.DirectoryType.DIR_V", "     console.info('[mediaLibrary] case close fd fail", "   let fileKeyObj = mediaLibrary.FileKey;\n    let me", "m '@ohos.multimedia.mediaLibrary'\nimport {describe, ", "   let fileKeyObj = mediaLibrary.FileKey;\n        le", "m '@ohos.multimedia.mediaLibrary'\nimport abilityAcce", "\n\t\tlet scannerObj = mediaLibrary.getScannerInstance(", " mediaLibInstance = mediaLibrary.getMediaLibrary();\n", "ohos.bundle'\nimport mediaLibrary from '@ohos.multime", "edia.audio';\nimport mediaLibrary from '@ohos.multime", "media.media'\nimport mediaLibrary from '@ohos.multime"], "files": ["getPermission.test.js", "List.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favtrashTestCallBack.test.js", "favoriteTestCallBack.test.js", "distributedPromise.test.js", "getAllPeersTestPromise.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "getAllPeersTestCallback.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "getAllPeersDeviceTestCallback.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "mediaLibrary", "api_method_name": "getMediaLibrary", "api_method_all": "function getMediaLibrary(): MediaLibrary;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 86, "since": 6, "api_used": "\u662f", "lines": [";\n    console.info('getMediaLibrary OUT');\n    beforeAl", "'MediaLibraryTest : getMediaLibrary OUT');\n    beforeAl", "ance = mediaLibrary.getMediaLibrary();\n\tlet ringtonePla", ";\n    console.info('getMediaLibrary IN');\n    var media", "Test = mediaLibrary.getMediaLibrary();\n    let fileKeyO", "Test = mediaLibrary.getMediaLibrary();\n        let file", "'MediaLibraryTest : getMediaLibrary OUT');\n    let file", "'MediaLibraryTest : getMediaLibrary IN');\n    var media", "edia = mediaLibrary.getMediaLibrary(context);\n    conso", "edia = mediaLibrary.getMediaLibrary(context);\n    befor"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favtrashTestCallBack.test.js", "favoriteTestCallBack.test.js", "distributedPromise.test.js", "getAllPeersTestPromise.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "getAllPeersTestCallback.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "getAllPeersDeviceTestCallback.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "mediaLibrary", "api_method_name": "getMediaLibrary", "api_method_all": "function getMediaLibrary(context: Context): MediaLibrary;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 86, "since": 6, "api_used": "\u662f", "lines": [";\n    console.info('getMediaLibrary OUT');\n    beforeAl", "'MediaLibraryTest : getMediaLibrary OUT');\n    beforeAl", "ance = mediaLibrary.getMediaLibrary();\n\tlet ringtonePla", ";\n    console.info('getMediaLibrary IN');\n    var media", "Test = mediaLibrary.getMediaLibrary();\n    let fileKeyO", "Test = mediaLibrary.getMediaLibrary();\n        let file", "'MediaLibraryTest : getMediaLibrary OUT');\n    let file", "'MediaLibraryTest : getMediaLibrary IN');\n    var media", "edia = mediaLibrary.getMediaLibrary(context);\n    conso", "edia = mediaLibrary.getMediaLibrary(context);\n    befor"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favtrashTestCallBack.test.js", "favoriteTestCallBack.test.js", "distributedPromise.test.js", "getAllPeersTestPromise.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "getAllPeersTestCallback.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "getAllPeersDeviceTestCallback.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaType", "api_method_all": "enum MediaType {\n    \n    FILE = 0,\n    \n    IMAGE,\n    \n    VIDEO,\n    \n    AUDIO\n  }", "api_method_name": "MediaType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 149, "since": 8, "api_used": "\u662f", "lines": ["Type = mediaLibrary.MediaType.AUDIO;\nconst fileFe", "Type = mediaLibrary.MediaType.AUDIO;\n\nlet allType", "Type = mediaLibrary.MediaType.IMAGE;\nlet videoTyp", "Type = mediaLibrary.MediaType.AUDIO;\n    const co", "sset.mediaType = newMediaType;\n\n            await", "Type = mediaLibrary.MediaType.IMAGE;\nconst videoT", "Type = mediaLibrary.MediaType.VIDEO;\n    let publ", "       expect(media.MediaType.MEDIA_TYPE_AUD).ass", "       expect(media.MediaType.MEDIA_TYPE_SUBTITLE", "Type = mediaLibrary.MediaType.FILE;\nlet imageType", "Type = mediaLibrary.MediaType.VIDEO;\nlet audioTyp", "       expect(media.MediaType.MEDIA_TYPE_VID).ass", "Type = mediaLibrary.MediaType.VIDEO;\nconst audioT", "Type = mediaLibrary.MediaType.AUDIO;\n    let imag", "Type = mediaLibrary.MediaType.VIDEO;\n        let ", "           const newMediaType = 'newMediaType';\n\n", "Type = mediaLibrary.MediaType.VIDEO;\n    let audi", "Type = mediaLibrary.MediaType.IMAGE;\n    let vide", "sset.mediaType = newMediaType;\n\n            asset", "Type = mediaLibrary.MediaType.AUDIO;\n\nlet getFile", " newMediaType = 'newMediaType';\n\n            asse", "Type = mediaLibrary.MediaType.FILE;\nconst imageTy"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "VideoPlayerEnumTest.test.js", "albumTestPromise.test.js", "fileAssetPromise2.test.js", "fileAssetUriTestCallBack.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaType", "api_method_name": "FILE", "api_method_all": "FILE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 171, "since": 8, "api_used": "\u662f", "lines": ["a.AACProfile.AAC_PROFILE_LC).assertEqual(0);", "a.AACProfile.AAC_PROFILE_HE).assertEqual(3);", "a.AACProfile.AAC_PROFILE_LD).assertEqual(5);", "iptionKey.MD_KEY_PROFILE).assertEqual(\"codec", "a.AACProfile.AAC_PROFILE_MAIN).assertEqual(6", "iaLibrary.MediaType.FILE;\nconst imageType = ", "iaLibrary.MediaType.FILE;\nlet imageType = me", "cLog: ---------OPEN FILE IN APPEND MODE-----", "a.AACProfile.AAC_PROFILE_ELD).assertEqual(1)", "a.AACProfile.AAC_PROFILE_HE_V2).assertEqual(", "cLog: ---------OPEN FILE---------');\n       ", "a.AACProfile.AAC_PROFILE_ERLC).assertEqual(2"], "files": ["AudioDecoderEnumTest.test.js", "fileAssetCallBack2.test.js", "fileAssetTestCallback.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "favoriteTestCallBack.test.js", "fileAssetTestPromise.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "SR000GHLLV.test.js", "mediaLibraryTestPromiseOnOff.test.js", "fileTestCallBack.test.js", "filekeyTestPromise.test.js", "fileTestPromise.test.js", "favoriteTestPromise.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaType", "api_method_name": "IMAGE", "api_method_all": "IMAGE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 81, "since": 8, "api_used": "\u662f", "lines": ["iaLibrary.MediaType.IMAGE;\n    let videoType ", ".DIR_VIDEO;\nlet DIR_IMAGE = mediaLibrary.Dire", "y.DirectoryType.DIR_IMAGE;\nlet DIR_AUDIO = me", "            let DIR_IMAGE = mediaLibrary.Dire", "PublicDirectory(DIR_IMAGE, async (err, dicRes", "iaLibrary.MediaType.IMAGE;\n            let fi", "y.DirectoryType.DIR_IMAGE;\n\n            media", "iaLibrary.MediaType.IMAGE;\n            let fe", "=================== IMAGE END ===============", "iaLibrary.MediaType.IMAGE;\nconst videoType = ", "iaLibrary.MediaType.IMAGE;\nlet videoType = me", "PublicDirectory DIR_IMAGE\n     * @tc.size    ", "y.DirectoryType.DIR_IMAGE);\n            const", "=================== IMAGE BEGIN =============", "y.DirectoryType.DIR_IMAGE);\n\n            cons"], "files": ["fileAssetCallBack2.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "fileTestCallBack.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "favoriteTestPromise.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaType", "api_method_name": "VIDEO", "api_method_all": "VIDEO,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1720, "since": 8, "api_used": "\u662f", "lines": ["  it('GET_SUPPORTED_VIDEO_FORMATS_CAMINPUT1_T", "ering GET_SUPPORTED_VIDEO_FORMATS_CAMINPUT2_T", "    : GET_SUPPORTED_VIDEO_FORMATS_PROMISE_CAM", "------GET_SUPPORTED_VIDEO_FORMATS_CAMINPUT1_T", "------GET_SUPPORTED_VIDEO_FORMATS_PROMISE_CAM", "ering GET_SUPPORTED_VIDEO_FORMATS_CAMINPUT1_T", "ering GET_SUPPORTED_VIDEO_FORMATS_TC_013 FAIL", "------GET_SUPPORTED_VIDEO_FORMATS_TC_013-----", "ering GET_SUPPORTED_VIDEO_FORMATS_TC_013 came", "ering GET_SUPPORTED_VIDEO_FORMATS_TC_013 PASS", "  it('GET_SUPPORTED_VIDEO_FORMATS_PROMISE_TC_", "  it('GET_SUPPORTED_VIDEO_FORMATS_CAMINPUT2_T", "    : GET_SUPPORTED_VIDEO_FORMATS_CAMINPUT1_T", "ering GET_SUPPORTED_VIDEO_FORMATS_PROMISE_TC_", "ORTED_PREVIEW_PHOTO_VIDEO_FORMATS_SIZE_TC*/\n ", "ering GET_SUPPORTED_VIDEO_FORMATS_PROMISE_CAM", "    : GET_SUPPORTED_VIDEO_FORMATS_PROMISE_TC_", "------GET_SUPPORTED_VIDEO_FORMATS_PROMISE_TC_", "ering GET_SUPPORTED_VIDEO_FORMATS_TC_013 succ", "------GET_SUPPORTED_VIDEO_FORMATS_CAMINPUT2_T", "  it('GET_SUPPORTED_VIDEO_FORMATS_PROMISE_CAM", "ering GET_SUPPORTED_VIDEO_FORMATS_TC_013 ends", "  it('GET_SUPPORTED_VIDEO_FORMATS_TC_013', 0,", "    : GET_SUPPORTED_VIDEO_FORMATS_CAMINPUT2_T", "ering GET_SUPPORTED_VIDEO_FORMATS_TC_013 data"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "HttpPlayerFuncPromiseTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "VideoRecorderEnumTest.test.js", "fetchFileResultPromise.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderEnumTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "fileAssetPromise2.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaAssetOption", "api_method_all": "interface MediaAssetOption {\n    \n    src: string;\n    \n    mimeType: string;\n    \n    relativePath?: string;\n  }", "api_method_name": "MediaAssetOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaAssetOption", "api_method_name": "src", "api_method_all": "src: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 116, "since": 6, "api_used": "\u662f", "lines": ["        audioPlayer.src = fdPath;\n         ", "        audioPlayer.src = fdPath;\n        s", " expect(audioPlayer.src).assertEqual(undefi", "        audioPlayer.src = fdPath;\n    })\n\n ", "et parameters after src\n        * @tc.desc ", "        audioPlayer.src = fdPath;\n        a", " expect(audioPlayer.src).assertEqual(fdPath"], "files": ["VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaAssetOption", "api_method_name": "mimeType", "api_method_all": "mimeType: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 23, "since": 6, "api_used": "\u662f", "lines": [" expect(firstObject.mimeType == 'image/*').asser", "          codecInfo.mimeType ${videoCaps.codecIn", "    if (firstObject.mimeType != 'image/*') {\n   ", "videoCaps.codecInfo.mimeType}\n        codecInfo.", "ryTest :firstObject.mimeType:' + firstObject.mim", "e.info('avCodecInfo.mimeType: '+ avCodecInfo.mim", "ype:' + firstObject.mimeType);\n                 ", "videoCaps.codecInfo.mimeType}\n            codecI", " expect(avCodecInfo.mimeType !== undefined).asse", "ype: '+ avCodecInfo.mimeType);\n        expect(av", "}\n        codecInfo.mimeType ${videoCaps.codecIn", "ype:' + firstObject.mimeType);\n            }\n\n  ", "rent: 'PARENT',\n    mimeType: 'MIME_TYPE',\n    s", "FileAssetsBy(done, 'mimeType');\n    });\n\n    \n  "], "files": ["VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "fetchFileResultPromise.test.js", "AudioDecoderEnumTest.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "VideoDecoderFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaAssetOption", "api_method_name": "relativePath", "api_method_all": "relativePath?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 65, "since": 6, "api_used": "\u662f", "lines": ["    if (firstObject.relativePath != 'Camera/') {\n   ", "\n\n            asset.relativePath = newrelativePath;\n", "um ${testNum} album.relativePath: ${album.relativePa", "t.relativePath = newrelativePath;\n            const ", "expect(targetObject.relativePath == 'Camera/').asser", " expect(firstObject.relativePath == 'Camera/').asser", "\n            let newrelativePath = path1;\n          ", "  expect(lastObject.relativePath == 'Camera/').asser", "();\n            let relativePath = asset.relativePat", "ath:' + firstObject.relativePath);\n            }\n\n  ", "lativePath: ${album.relativePath}`);\n    console.inf", "elativePath = asset.relativePath;\n            let ne", "\n                newrelativePath = path2;\n          ", "ath:' + firstObject.relativePath);\n                 ", "h1;\n            if (relativePath == path1) {\n       ", ".relativePath == newrelativePath) {\n                ", "  expect(nextObject.relativePath == 'Camera/').asser", "t.id == id && asset.relativePath == newrelativePath)", "ryTest :firstObject.relativePath:' + firstObject.rel", "ed ||\n        album.relativePath == undefined ||\n   "], "files": ["albumTestCallBack.test.js", "albumTestPromise.test.js", "fileTestPromise.test.js", "fetchFileResultPromise.test.js", "fileAssetPromise2.test.js", "fileAssetCallBack2.test.js", "fileAsset2.test.js", "fileTestCallBack.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaSelectOption", "api_method_all": "interface MediaSelectOption {\n    \n    type: 'image' | 'video' | 'media';\n    \n    count: number;\n  }", "api_method_name": "MediaSelectOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaSelectOption", "api_method_name": "type", "api_method_all": "type: 'image' | 'video' | 'media'", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3051, "since": 6, "api_used": "\u662f", "lines": ["UM\n           * @tc.type      : Function\n   ", "              * @tc.type      : Function\n   ", "g: Renderer content type:' + audioParamsGet.", "ameworkTest: device type: ${devTypeName}`);\n", "MEDIUM\n       * @tc.type      : Function\n   ", "M\n            * @tc.type      : Function\n   "], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "favtrashTestPromise.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "favtrashTestCallBack.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "SR000GHQBN.test.js", "AudioEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "index.ets", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "filekeyTestPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "fileTestCallBack.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaSelectOption", "api_method_name": "count", "api_method_all": "count: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 203, "since": 6, "api_used": "\u662f", "lines": ["           \"channel_count\": 1,\n              ", "= '/data/accounts/account_0/applications/';\n ", "= '/data/accounts/account_0/appdata/image/mov", "= '/data/accounts/account_0/applications'+'/R", " dirPath = '/data/accounts/account_0/applicat", "ar path1 = '/data/accounts/account_0/applicat", "= '/data/accounts/account_0/appdata/ohos.acts", "ovingGif = '/data/accounts/account_0/appdata/", " pathJpg = '/data/accounts/account_0/appdata/", "= '/data/accounts/account_0/appdata/image/tes", "URCEPATH = '/data/accounts/account_0/appdata/", "           \"channel_count\": 2,\n              ", "pathTiff = '/data/accounts/account_0/appdata/", "           \"channel_count\": 1,\n            \"s", " pathBmp = '/data/accounts/account_0/appdata/", " pathPng = '/data/accounts/account_0/appdata/", "           \"channel_count\": 2,\n            \"s", "hExifJpg = '/data/accounts/account_0/appdata/", "= '/data/accounts/account_0/appdata/RecTest'+", " dirPath = '/data/accounts/account_0/appdata/", " pathGif = '/data/accounts/account_0/appdata/"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_all": "interface FileAsset {\n    \n    readonly id: number;\n    \n    readonly uri: string;\n    \n    readonly mimeType: string;\n    \n    readonly mediaType: MediaType;\n    \n    displayName: string;\n    \n    title: string;\n    \n    relativePath: string;\n    \n    readonly parent: number;\n    \n    readonly size: number;\n    \n    readonly dateAdded: number;\n    \n    readonly dateModified: number;\n    \n    readonly dateTaken: number;\n    \n    readonly artist: string;\n    \n    readonly audioAlbum: string;\n    \n    readonly width: number;\n    \n    readonly height: number;\n    \n    orientation: number;\n    \n    readonly duration: number;\n    \n    readonly albumId: number;\n    \n    readonly albumUri: string;\n    \n    readonly albumName: string;\n\n    \n    isDirectory(callback: AsyncCallback<boolean>): void;\n    \n    isDirectory():Promise<boolean>;\n    \n    commitModify(callback: AsyncCallback<void>): void;\n    \n    commitModify(): Promise<void>;\n    \n    open(mode: string, callback: AsyncCallback<number>): void;\n    \n    open(mode: string): Promise<number>;\n    \n    close(fd: number, callback: AsyncCallback<void>): void;\n    \n    close(fd: number): Promise<void>;\n    \n    getThumbnail(callback: AsyncCallback<image.PixelMap>): void;\n    \n    getThumbnail(size: Size, callback: AsyncCallback<image.PixelMap>): void;\n    \n    getThumbnail(size?: Size): Promise<image.PixelMap>;\n    \n    favorite(isFavorite: boolean, callback: AsyncCallback<void>): void;\n    \n    favorite(isFavorite: boolean): Promise<void>;\n    \n    isFavorite(callback: AsyncCallback<boolean>): void;\n    \n    isFavorite():Promise<boolean>;\n    \n    trash(isTrash: boolean, callback: AsyncCallback<void>): void;\n    \n    trash(isTrash: boolean): Promise<void>;\n    \n    isTrash(callback: AsyncCallback<boolean>): void;\n    \n    isTrash():Promise<boolean>;\n  }", "api_method_name": "FileAsset", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 579, "since": 7, "api_used": "\u662f", "lines": ["           media.getFileAssets(fileFetchOp, (erro", "lt = await album.getFileAssets(imageAndVideoAlbum", "lt = await album.getFileAssets(coverUrifetchOp);\n", "o('ALBUM_PROMISE getFileAssets 002_07 passed');\n ", "lt = await album.getFileAssets(allTypefetchOp);\n\n", "lt = await album.getFileAssets(imageAlbumfetchOp)", "lt = await album.getFileAssets(videoAlbumfetchOp)", "o('ALBUM_PROMISE getFileAssets 002_08 passed');\n ", "('ALBUM_CALLBACK getFileAssets 002_08 passed');\n ", "           album.getFileAssets(imageAndAudioAlbum", "           album.getFileAssets(videoAlbumfetchOp,", "\n\ndescribe('albumGetFileAssetsCallback.test.js', ", "lt = await album.getFileAssets(imgAndVideoAndAudi", "('ALBUM_CALLBACK getFileAssets 002_06 passed');\n ", " await mediaTest.getFileAssets(fetchOp);\n        ", "           album.getFileAssets(allTypefetchOp, (e", "           album.getFileAssets(imageAndVideoAlbum", "o('ALBUM_PROMISE getFileAssets 002_06 passed');\n ", "           album.getFileAssets(albumfetchOpOne, (", "\n\ndescribe('albumGetFileAssetsPromise.test.js', a", "           album.getFileAssets(audioAlbumfetchOp,", "lt = await album.getFileAssets(albumfetchOpOne);\n", "lt = await album.getFileAssets(allTypefetchOp);\n ", "('ALBUM_CALLBACK getFileAssets 002_07 passed');\n ", "lt = await album.getFileAssets(videoAndAudioAlbum", " await mediaTest.getFileAssets(fetchOp);\n      fi", "           album.getFileAssets(imageAlbumfetchOp,", "           album.getFileAssets(imgAndVideoAndAudi", "           album.getFileAssets(videoAndAudioAlbum", "lt = await album.getFileAssets(audioAlbumfetchOp)", "lt = await album.getFileAssets(imageAndAudioAlbum"], "files": ["List.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "isDirectory", "api_method_all": "isDirectory(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["SUB_MEDIA_FILEASSET_isDirectory_promise_001', 0, async function (done) ", ";\n            asset.isDirectory((err, isDir) => {\n                if(is", "isDir = await asset.isDirectory();\n            expect(!isDir).assertTru", "ole.info('FileAsset isDirectory 001 failed, message = ' + error);\n     ", "SUB_MEDIA_FILEASSET_isDirectory_callback_001', 0, async function (done)"], "files": ["fileAssetCallBack2.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "isDirectory", "api_method_all": "isDirectory():Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "commitModify", "api_method_all": "commitModify(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 116, "since": 8, "api_used": "\u662f", "lines": ["SUB_MEDIA_FILEASSET_commitModify_promise_006', 0, async function (done) ", "ole.info('FileAsset commitModify 001 failed, message = ' + error);\n     ", "LBACK Modify 003_03 commitModify failed, message = ' + error);\n         ", "SUB_MEDIA_FILEASSET_commitModify_promise_002', 0, async function (done) ", "        await asset.commitModify();\n\n            console.info('FileAsset", "ole.info('FileAsset commitModify 005 passed');\n            expect(true).", "ole.info('FileAsset commitModify 003 failed, message = ' + error);\n     ", "LBACK Modify 003_04 commitModify failed, message = ' + error);\n         ", "SUB_MEDIA_FILEASSET_commitModify_promise_004', 0, async function (done) ", "LBACK Modify 003_02 commitModify failed, message = ' + error);\n         ", "        await album.commitModify();\n            console.info('ALBUM_PROM", "  * @tc.name      : commitModify\n     * @tc.desc      : Modify Album nam", "\n\n            album.commitModify(async () => {\n                try {\n   ", "SUB_MEDIA_FILEASSET_commitModify_promise_005', 0, async function (done) ", "        await asset.commitModify();\n\n            const fetchFileResult2 ", "        await album.commitModify();\n            const newAlbumList = awa", "ole.info('FileAsset commitModify 002 failed, message = ' + error);\n     ", ";\n            album.commitModify(async () => {\n                try {\n   ", "SUB_MEDIA_FILEASSET_commitModify_promise_003', 0, async function (done) ", "LBACK Modify 003_01 commitModify failed, message = ' + error);\n         ", "LBACK Modify 003_05 commitModify failed, message = ' + error);\n         ", "ole.info('FileAsset commitModify 006 failed');\n            expect(false)", "  * @tc.name      : commitModify\n     * @tc.desc      : Modify Album alb", "SUB_MEDIA_FILEASSET_commitModify_promise_001', 0, async function (done) ", "ole.info('FileAsset commitModify 005 failed');\n            expect(false)", "ole.info('FileAsset commitModify 004 failed, message = ' + error);\n     "], "files": ["MediaScannerFrameWork1.0.js", "albumTestCallBack.test.js", "albumTestPromise.test.js", "fileTestPromise.test.js", "fileAssetPromise2.test.js", "fileAssetCallBack2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "fileTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "commitModify", "api_method_all": "commitModify(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "open", "api_method_all": "open(mode: string, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 471, "since": 8, "api_used": "\u662f", "lines": ["        fd = fileio.openSync(fpath, 0o2002, 0o666);\n        if (", "    var fd = fileio.openSync(fpath, 0o102, 0o777);\n        if (f", "workRecLog: file fd opened : Append Mode :PASS');\n        }\n    ", "workRecLog: file fd opened : Append Mode :PASS');\n        } else"], "files": ["PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoPlayerFuncCallbackTest.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHLLV.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "fileTestCallBack.test.js", "RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitPhotoAsync.test.ets", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "open", "api_method_all": "open(mode: string): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["teAsset(mediaType, \"open_close_scan_audio.mp3\", path1).then (fun", "       await fileIO.open(AUDIO_SOURCE).then((fdNumber) => {\n    ", "       await fileIO.open(pathName).then((fdNumber) => {\n        "], "files": ["MediaScannerFrameWork1.0.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "PlayerLocalTestAudioAPI.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "close", "api_method_all": "close(fd: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 394, "since": 8, "api_used": "\u662f", "lines": ["   : get flash mode close camera0 api\n      * @tc.desc      : get", "[mediaLibrary] case close fd success');\n      }).catch((err) => {", "   : set flash mode close camera0 api\n      * @tc.size      : MED", "check if flash mode close is supported-camera0Input api\n      * @", "}\n\n  async function closeFd() {\n    if (fileAsset != null) {\n    ", "lag;\n     }\n     ss.closeSync();\n     audioRen.drain((err, state)", "[mediaLibrary] case close fd failed');\n      });\n    } else {\n   ", "on () {\n      await closeFd();\n      console.info('afterEach case", "   : set flash mode close camera0 api\n      * @tc.desc      : set", "   : get flash mode close camera0 api\n      * @tc.size      : MED"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "CameraJSUnitPhotoAsync.test.ets", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "close", "api_method_all": "close(fd: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [" await fileAsset[0].close(fdNumber).then(() => {\n        console.", " await fileAsset[0].close(fdNumber).then(() => {\n                ", "et(mediaType, \"open_close_scan_audio.mp3\", path1).then (function "], "files": ["MediaScannerFrameWork1.0.js", "RecorderLocalTestAudioFUNC.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "getThumbnail", "api_method_all": "getThumbnail(callback: AsyncCallback<image.PixelMap>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 182, "since": 8, "api_used": "\u662f", "lines": ["'MediaLibraryTest : getThumbnail 001_03 passed');\n                      ", "'MediaLibraryTest : getThumbnail 001_04 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_04 passed');\n                      ", "'MediaLibraryTest : getThumbnail 002_02 passed');\n                    do", "'MediaLibraryTest : getThumbnail 001_06 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_01 failed');\n                      ", "'MediaLibraryTest : getThumbnail 002_03 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 001_07 failed ' + error.message);\n     ", ";\n            asset.getThumbnail(size,async (err, pixelmap) => {\n       ", "'MediaLibraryTest : getThumbnail 001_05 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_07 failed');\n                      ", "'MediaLibraryTest : getThumbnail 002_03 passed');\n                    do", "elmap = await asset.getThumbnail(size, async (err, pixelmap) => {\n      ", "'MediaLibraryTest : getThumbnail 002_06 passed');\n                    ex", "'MediaLibraryTest : getThumbnail 002_04 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 001_05 passed');\n                    do", "'MediaLibraryTest : getThumbnail 003_01 failed');\n                    ex", "'MediaLibraryTest : getThumbnail 001_01 passed');\n                      ", "'MediaLibraryTest : getThumbnail 002_05 passed');\n                    ex", "'MediaLibraryTest : getThumbnail 002_03 Successfull ' + pixelmap);\n     ", "'MediaLibraryTest : getThumbnail 002_01 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_02 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_02 passed');\n                      ", "'MediaLibraryTest : getThumbnail 002_05 failed');\n                    ex", "'MediaLibraryTest : getThumbnail 002_01 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 001_03 failed');\n                    do", ";\n            asset.getThumbnail(async (err,pixelmap) => {\n             ", "'MediaLibraryTest : getThumbnail 001_03 failed ' + error.message);\n     ", ";\n            asset.getThumbnail(size, async (err, pixelmap) => {\n      ", "'MediaLibraryTest : getThumbnail 001_03 failed');\n                      ", "'MediaLibraryTest : getThumbnail 001_07 passed');\n                      ", "'MediaLibraryTest : getThumbnail 001_02 failed');\n                      ", "'MediaLibraryTest : getThumbnail 002_02 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 002_05 failed');\n            expect(fal", "'MediaLibraryTest : getThumbnail 001_04 failed');\n                      ", "'MediaLibraryTest : getThumbnail 002_03 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_01 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_02 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 002_01 passed');\n                    do", "'MediaLibraryTest : getThumbnail 001_01 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 002_02 failed');\n                    do", ";\n            asset.getThumbnail(async (err, pixelmap) => {\n            "], "files": ["FileAssetGetThumbnailPromise.test.js", "FileAssetGetThumbnailCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "getThumbnail", "api_method_all": "getThumbnail(size: Size, callback: AsyncCallback<image.PixelMap>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 182, "since": 8, "api_used": "\u662f", "lines": ["'MediaLibraryTest : getThumbnail 001_03 passed');\n                      ", "'MediaLibraryTest : getThumbnail 001_04 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_04 passed');\n                      ", "'MediaLibraryTest : getThumbnail 002_02 passed');\n                    do", "'MediaLibraryTest : getThumbnail 001_06 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_01 failed');\n                      ", "'MediaLibraryTest : getThumbnail 002_03 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 001_07 failed ' + error.message);\n     ", ";\n            asset.getThumbnail(size,async (err, pixelmap) => {\n       ", "'MediaLibraryTest : getThumbnail 001_05 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_07 failed');\n                      ", "'MediaLibraryTest : getThumbnail 002_03 passed');\n                    do", "elmap = await asset.getThumbnail(size, async (err, pixelmap) => {\n      ", "'MediaLibraryTest : getThumbnail 002_06 passed');\n                    ex", "'MediaLibraryTest : getThumbnail 002_04 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 001_05 passed');\n                    do", "'MediaLibraryTest : getThumbnail 003_01 failed');\n                    ex", "'MediaLibraryTest : getThumbnail 001_01 passed');\n                      ", "'MediaLibraryTest : getThumbnail 002_05 passed');\n                    ex", "'MediaLibraryTest : getThumbnail 002_03 Successfull ' + pixelmap);\n     ", "'MediaLibraryTest : getThumbnail 002_01 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_02 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_02 passed');\n                      ", "'MediaLibraryTest : getThumbnail 002_05 failed');\n                    ex", "'MediaLibraryTest : getThumbnail 002_01 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 001_03 failed');\n                    do", ";\n            asset.getThumbnail(async (err,pixelmap) => {\n             ", "'MediaLibraryTest : getThumbnail 001_03 failed ' + error.message);\n     ", ";\n            asset.getThumbnail(size, async (err, pixelmap) => {\n      ", "'MediaLibraryTest : getThumbnail 001_03 failed');\n                      ", "'MediaLibraryTest : getThumbnail 001_07 passed');\n                      ", "'MediaLibraryTest : getThumbnail 001_02 failed');\n                      ", "'MediaLibraryTest : getThumbnail 002_02 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 002_05 failed');\n            expect(fal", "'MediaLibraryTest : getThumbnail 001_04 failed');\n                      ", "'MediaLibraryTest : getThumbnail 002_03 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_01 failed');\n                    do", "'MediaLibraryTest : getThumbnail 001_02 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 002_01 passed');\n                    do", "'MediaLibraryTest : getThumbnail 001_01 failed ' + error.message);\n     ", "'MediaLibraryTest : getThumbnail 002_02 failed');\n                    do", ";\n            asset.getThumbnail(async (err, pixelmap) => {\n            "], "files": ["FileAssetGetThumbnailPromise.test.js", "FileAssetGetThumbnailCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "getThumbnail", "api_method_all": "getThumbnail(size?: Size): Promise<image.PixelMap>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "favorite", "api_method_all": "favorite(isFavorite: boolean, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 186, "since": 8, "api_used": "\u662f", "lines": ["g()],\n};\n\ndescribe('favoriteTestCallBack.test.js', function () {\n   ", "              asset.favorite('true', () => {\n                       ", "              asset.favorite('false', () => {\n                      ", "              asset.favorite(true, () => {\n                         ", "  * @tc.name      : favorite\n     * @tc.desc      : favorite(image) ", "  * @tc.name      : favorite\n     * @tc.desc      : favorite(video) ", "              asset.favorite(666, () => {\n                          ", "  * @tc.desc      : favorite(video) by false\n     * @tc.size      : ", "              asset.favorite(false, () => {\n                        ", "  * @tc.desc      : favorite(video) by 'true'\n     * @tc.size      :", "  * @tc.desc      : favorite(image) by no arg\n     * @tc.size      :", "  * @tc.desc      : favorite(video) by 666\n     * @tc.size      : ME", "              asset.favorite('fav', () => {\n                        ", "              asset.favorite(true, () => {\n                        a", "  * @tc.desc      : favorite(video) by 'false'\n     * @tc.size      ", "  * @tc.desc      : favorite(video) by 'fav'\n     * @tc.size      : ", "              asset.favorite(() => {\n                            con", "  * @tc.desc      : favorite(video) by true\n     * @tc.size      : M"], "files": ["List.test.js", "favtrashTestCallBack.test.js", "favoriteTestCallBack.test.js", "favoriteTestPromise.test.js", "favtrashTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "favorite", "api_method_all": "favorite(isFavorite: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "isFavorite", "api_method_all": "isFavorite(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 270, "since": 8, "api_used": "\u662f", "lines": ["                if (isFavorite) {\n                                    ", "t.isFavorite((err1, isFavorite) => {\n                        if (isFav", "              asset.isFavorite((err1, isFavorite) => {\n               ", "t.isFavorite((err1, isFavorite) => {\n                            if (i", "t.isFavorite((err1, isFavorite) => {\n                        if (!isFa", "t.isFavorite((err1, isFavorite) => {\n                                 ", "               if (!isFavorite) {\n                                    ", "                if (isFavorite) {\n                            console.", "               if (!isFavorite) {\n                            asset.fa", "                if (isFavorite) {\n                            asset.fa", "                if (isFavorite) {\n                                cons"], "files": ["favoriteTestCallBack.test.js", "favoriteTestPromise.test.js", "favtrashTestPromise.test.js", "favtrashTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "isFavorite", "api_method_all": "isFavorite():Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "trash", "api_method_all": "trash(isTrash: boolean, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 56, "since": 8, "api_used": "\u662f", "lines": ["        await asset.trash('666');\n            console.info('Media", "st : ASSET_CALLBACK trash 009_05 fail ,message = ', err);\n       ", "st : ASSET_CALLBACK trash 009_03 fail ,message = ', err);\n       ", "st : ASSET_CALLBACK trash 0010_02');\n                expect(true)", "st : ASSET_CALLBACK trash 009_01');\n                expect(true).", "st : ASSET_CALLBACK trash 0010_01');\n                expect(true)", "st : ASSET_CALLBACK trash 009_06 fail ,message = ', err);\n       ", "est : ASSET_PROMISE trash 009_05');\n            expect(false).ass", "st : ASSET_CALLBACK trash 0010_01 fail ,message = ', err);\n      ", "st : ASSET_CALLBACK trash 009_02 fail ,message = ', err);\n       ", "est : ASSET_PROMISE trash 009_03');\n            expect(false).ass", "        await asset.trash();\n            console.info('MediaLibra", "est : ASSET_PROMISE trash 009_04');\n            expect(false).ass", "ath);\n        asset.trash(true, (err) => {\n            if (err ==", "ath);\n        asset.trash(false, (err) => {\n            if (err =", "est : ASSET_PROMISE trash 009_02 fail ,message = ', trashError);\n", "ath);\n        asset.trash(0.666, (err) => {\n            if (err =", "        await asset.trash(666);\n            console.info('MediaLi", "        await asset.trash(true);\n            console.info('MediaL", "st : ASSET_CALLBACK trash 009_06');\n                expect(false)", "st : ASSET_CALLBACK trash 009_04 fail ,message = ', err);\n       ", "st : ASSET_CALLBACK trash 009_02');\n                expect(true).", "est : ASSET_PROMISE trash 009_03 fail ,message = ' + trashError);", "est : ASSET_PROMISE trash 009_04 fail ,message = ' + trashError);", " fail ,message = ', trashError);\n            expect(false).assert", "est : ASSET_PROMISE trash 009_01');\n            expect(true).asse", "est : ASSET_PROMISE trash 009_05 fail ,message = ' + trashError);", "fail ,message = ' + trashError);\n            expect(true).assertT", "st : ASSET_CALLBACK trash 009_05');\n                expect(false)", "st : ASSET_CALLBACK trash 009_04');\n                expect(false)", "ath);\n        asset.trash(666, (err) => {\n            if (err == ", "        await asset.trash(false);\n            console.info('Media", "st : ASSET_CALLBACK trash 009_03');\n                expect(false)", "st : ASSET_CALLBACK trash 0010_02 fail ,message = ', err);\n      ", "ath);\n        asset.trash('666', (err) => {\n            if (err =", ");\n        } catch (trashError) {\n            console.info('Media", "        await asset.trash(false);\n        asset.isTrash((err, isT", "est : ASSET_PROMISE trash 009_01 fail ,message = ', trashError);\n", "est : ASSET_PROMISE trash 009_02');\n            expect(true).asse", "st : ASSET_CALLBACK trash 009_01 fail ,message = ', err);\n       ", "ath);\n        asset.trash(null, (err) => {\n            if (err ==", "        await asset.trash(0.666);\n            console.info('Media", "        await asset.trash(true);\n        asset.isTrash((err, isTr"], "files": ["favtrashTestPromise.test.js", "favtrashTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "trash", "api_method_all": "trash(isTrash: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "isTrash", "api_method_all": "isTrash(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 20, "since": 8, "api_used": "\u662f", "lines": ["est : ASSET_PROMISE isTrash 0010_01 fail, message = ' + error);\n   ", "lse);\n        asset.isTrash((err, isTrash) => {\n            if (err", "  * @tc.desc      : isTrash false\n     * @tc.size      : MEDIUM\n   ", "est : ASSET_PROMISE isTrash 0010_02 fail, message = ' + error);\n   ", "err == undefined && isTrash == true) {\n                console.info", "Trash = await asset.isTrash();\n            console.info('MediaLibra", "err == undefined && isTrash == false) {\n                console.inf", "rue);\n        asset.isTrash((err, isTrash) => {\n            if (err", "e);\n            let isTrash = await asset.isTrash();\n            co", "h);\n            if (isTrash) {\n                expect(true).assertT", ");\n            if (!isTrash) {\n                expect(true).assertT", "Trash 0010_01 = ' + isTrash);\n            if (isTrash) {\n          ", "Trash 0010_02 = ' + isTrash);\n            if (!isTrash) {\n         ", "asset.isTrash((err, isTrash) => {\n            if (err == undefined ", "  * @tc.name      : isTrash\n     * @tc.desc      : isTrash false\n  "], "files": ["favtrashTestPromise.test.js", "favtrashTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "isTrash", "api_method_all": "isTrash():Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "id", "api_method_all": "readonly id: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6103, "since": 6, "api_used": "\u662f", "lines": ["      let audioTimeMiddle;\n        console", "gettime = audioTimeMiddle-audioTimeStart;\n", "_TC_015 sizeArray: width * height - \" +dat", "       })\n        .width('640px')\n        ", "eUri - Promise invalid uri RINGTONE_TYPE_D", "- Callback set Invalid uri\n               ", "romise.getSupportedVideoFormats();\n       ", "({\n                'id': 'extend'\n        ", "romise.getSupportedVideoFormats(async (err", "CapturerOptionsInvalid = {\n            str", "./test/CameraJSUnitVideoAsync.test'\n\n\nlet ", "CapturerOptionsInvalid).then(async functio", "- Promise  set invalid uri - Start() (Nega", "ri - promise - Invalid uri\n               ", "og({\n////          'id': 'report', 'unity'", "tend({\n            'id': 'extend'\n        ", "Component({\n        id: '',\n        type: ", "mise -enum (2) invalid value\n             ", "dio State is : invalid');\n                ", "   : Get supported video formats from came", "          audioTimeMiddle = (data-audioTim", "Uri - Callback Invalid RINGTONE_TYPE_MULTI", "log(TAG + 'Received id: ' + JSON.stringify", "tend({\n//          'id': 'extend'\n//      ", "Uri - Callback invalid uri\n               ", "./test/CameraJSUnitVideoPromise.test'\nimpo"], "files": ["List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "VideoPlayerFuncCallbackTest.test.js", "Camera.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "VideoRecorderEnumTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderEnumTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "fileAssetPromise2.test.js", "fileAssetUriTestCallBack.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "index.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "uri", "api_method_all": "readonly uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 152, "since": 7, "api_used": "\u662f", "lines": ["romise  set invalid uri - Start() (Negative", "c.desc      : 1.set uri\n     *             ", " - Callback invalid uri\n                * @", "figure & get title during playback\n        ", "l createImageSource(uri)\n     *            ", "toneUri - promise - uri Null,MULTISIM ENAME", "tc.desc      : 1.seturi\n     *             ", ".info(TAG + \"Error during camera0InputPromi", "ri - Callback- Null uri -RINGTONE_TYPE_DEFA", "ngtone Get Ringtone uri: ERROR: ' + err.mes", ".info(TAG + \"Error during camera0Input with", ": createImageSource(uri)-jpg\n     * @tc.des", "- promise - Invalid uri\n                * @", ".info(TAG + \"Error during PhotoOutput with ", ": createImageSource(uri)-wrong uri\n     * @", "- Callback set null uri\n                * @", ".info(TAG + \"Error during cameraInput with ", ": createImageSource(uri)-gif\n     * @tc.des", "i - Promise invalid uri RINGTONE_TYPE_DEFAU", ".info(TAG + \"Error during videoOutput with ", ": createImageSource(uri)-png\n     * @tc.des", ": createImageSource(uri)-wrong suffix file ", ".info(TAG + \"Error during PreviewOutput wit", "geSource(uri)-wrong uri\n     * @tc.desc    ", ": createImageSource(uri)-bmp\n     * @tc.des", "allback set Invalid uri\n                * @"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoDecoderReliCallbackTest.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "fileAssetPromise2.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "fileAsset2.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "mimeType", "api_method_all": "readonly mimeType: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 23, "since": 6, "api_used": "\u662f", "lines": [" expect(firstObject.mimeType == 'image/*').asser", "          codecInfo.mimeType ${videoCaps.codecIn", "    if (firstObject.mimeType != 'image/*') {\n   ", "videoCaps.codecInfo.mimeType}\n        codecInfo.", "ryTest :firstObject.mimeType:' + firstObject.mim", "e.info('avCodecInfo.mimeType: '+ avCodecInfo.mim", "ype:' + firstObject.mimeType);\n                 ", "videoCaps.codecInfo.mimeType}\n            codecI", " expect(avCodecInfo.mimeType !== undefined).asse", "ype: '+ avCodecInfo.mimeType);\n        expect(av", "}\n        codecInfo.mimeType ${videoCaps.codecIn", "ype:' + firstObject.mimeType);\n            }\n\n  ", "rent: 'PARENT',\n    mimeType: 'MIME_TYPE',\n    s", "FileAssetsBy(done, 'mimeType');\n    });\n\n    \n  "], "files": ["VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "fetchFileResultPromise.test.js", "AudioDecoderEnumTest.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "VideoDecoderFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "mediaType", "api_method_all": "readonly mediaType: MediaType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 123, "since": 8, "api_used": "\u662f", "lines": ["t media.createAsset(mediaType, 'image05.jpg', pat", "ileKey;\n        let mediaType = mediaLibrary.Medi", "t media.createAsset(mediaType, 'image10.jpg', pat", "t media.createAsset(mediaType, 'image0702.jpg', p", "t media.createAsset(mediaType, 'image15.jpg', pat", " expect(firstObject.mediaType == imageType).asser", "t media.createAsset(mediaType, 'image13.jpg', pat", "t media.createAsset(mediaType, 'image12.jpg', pat", "ry.FileKey;\n    let mediaType = mediaLibrary.Medi", "diaTest.createAsset(mediaType, displayName, publi", "t media.createAsset(mediaType, 'image02.jpg', pat", "t media.createAsset(mediaType, 'image04.jpg', pat", "t media.createAsset(mediaType, 'image11.jpg', pat", "t media.createAsset(mediaType, 'image09.jpg', pat", "ryTest :firstObject.mediaType:' + firstObject.med", "    if (firstObject.mediaType != imageType) {\n   ", "ype:' + firstObject.mediaType);\n                 ", "t media.createAsset(mediaType, 'image06.jpg', pat", "t media.createAsset(mediaType, 'image01.jpg', pat", "t media.createAsset(mediaType, 'image14.jpg', pat", "t media.createAsset(mediaType, 'image03.jpg', pat", "t media.createAsset(mediaType, 'image07.jpg', pat", "t media.createAsset(mediaType, 'image08.jpg', pat"], "files": ["MediaScannerFrameWork1.0.js", "RecorderLocalTestAudioFUNC.test.js", "fileTestPromise.test.js", "fetchFileResultPromise.test.js", "fetchFileResultCallBack.test.js", "fileAssetPromise2.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAsset2.test.js", "favtrashTestCallBack.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "fileTestCallBack.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets", "favtrashTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "displayName", "api_method_all": "displayName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 58, "since": 7, "api_used": "\u662f", "lines": ["eateAsset(fileType, displayName, path);\n           ", "ateAsset(mediaType, displayName, publicPath);\n    i", "e(fd1);\n            displayName = `${new Date().get", " expect(firstObject.displayName == '01.jpg').assert", "ateAsset(audioType, displayName, path);\n           ", "sset.displayName == displayName).assertTrue();\n    ", "sset.displayName == displayName).assertTrue();\n\n   ", "et presetAsset;\nlet displayName;\nlet id;\nlet mediaT", "    if (firstObject.displayName != '01.jpg') {\n    ", "                    displayName = `${new Date().get", "ateAsset(imageType, displayName, path);\n           ", "ateAsset(videoType, displayName, path);\n           ", "       expect(asset.displayName == displayName).ass", "pathName) {\n    let displayName = pathName;\n    con", "Name) {\n        let displayName = pathName;\n       ", "ateAsset(mediaType, displayName, publicPath);\n     ", "t.id == id && asset.displayName == newName) {\n     ", ";\n            asset.displayName = newName;\n        "], "files": ["RecorderLocalTestAudioFUNC.test.js", "fileTestPromise.test.js", "fetchFileResultPromise.test.js", "fetchFileResultCallBack.test.js", "fileAssetPromise2.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAsset2.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileTestCallBack.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "title", "api_method_all": "title: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 101, "since": 7, "api_used": "\u662f", "lines": ["it() {\n        this.title = this.$t('strings.", " expect(firstObject.title == '01').assertTrue", ";\n            asset.title = newTitle;\n       ", "ryTest :firstObject.title:' + firstObject.tit", "t.id == id && asset.title == newTitle) {\n    ", "    if (firstObject.title != '01') {\n        ", "tle:' + firstObject.title);\n            }\n\n  ", "tle:' + firstObject.title);\n                 ", "    data: {\n        title: \"\"\n    },\n    onIn", "nish')\n        this.title = this.$t('strings.", "  : Configure & get title during playback\n   ", "  : Configure & get title\n                * @"], "files": ["MediaScannerFrameWork1.0.js", "surfaceTest2.js", "fileTestPromise.test.js", "fetchFileResultPromise.test.js", "fileAssetPromise2.test.js", "fileAssetCallBack2.test.js", "display.js", "filekeyTestCallBack.test.js", "fileAsset2.test.js", "filekeyTestPromise.test.js", "index.js", "mediaLibraryTestPromiseOnOff.test.js", "fileTestCallBack.test.js", "fetchFileResultCallBack.test.js", "surfaceTest.js", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "relativePath", "api_method_all": "relativePath: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 65, "since": 6, "api_used": "\u662f", "lines": ["    if (firstObject.relativePath != 'Camera/') {\n   ", "\n\n            asset.relativePath = newrelativePath;\n", "um ${testNum} album.relativePath: ${album.relativePa", "t.relativePath = newrelativePath;\n            const ", "expect(targetObject.relativePath == 'Camera/').asser", " expect(firstObject.relativePath == 'Camera/').asser", "\n            let newrelativePath = path1;\n          ", "  expect(lastObject.relativePath == 'Camera/').asser", "();\n            let relativePath = asset.relativePat", "ath:' + firstObject.relativePath);\n            }\n\n  ", "lativePath: ${album.relativePath}`);\n    console.inf", "elativePath = asset.relativePath;\n            let ne", "\n                newrelativePath = path2;\n          ", "ath:' + firstObject.relativePath);\n                 ", "h1;\n            if (relativePath == path1) {\n       ", ".relativePath == newrelativePath) {\n                ", "  expect(nextObject.relativePath == 'Camera/').asser", "t.id == id && asset.relativePath == newrelativePath)", "ryTest :firstObject.relativePath:' + firstObject.rel", "ed ||\n        album.relativePath == undefined ||\n   "], "files": ["albumTestCallBack.test.js", "albumTestPromise.test.js", "fileTestPromise.test.js", "fetchFileResultPromise.test.js", "fileAssetPromise2.test.js", "fileAssetCallBack2.test.js", "fileAsset2.test.js", "fileTestCallBack.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "parent", "api_method_all": "readonly parent: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["st filekeys = {\n    parent: 'PARENT',\n    mime", " expect(firstObject.parent != undefined).asser", "ryTest :firstObject.parent == undefined');\n   ", "FileAssetsBy(done, 'parent');\n    });\n\n    \n  ", "    if (firstObject.parent == undefined) {\n   "], "files": ["filekeyTestCallBack.test.js", "fetchFileResultPromise.test.js", "filekeyTestPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "size", "api_method_all": "readonly size: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3487, "since": 7, "api_used": "\u662f", "lines": ["- ENUM\n       * @tc.size      : MEDIUM\n     ", "workRenderLog: File size : Removing header: ", "Log: File totalSize size: ' +totalSize);\n   ", " ENAME\n       * @tc.size      : MEDIUM\n     ", "5\n            * @tc.size      : MEDIUM\n     ", "UM\n           * @tc.size      : MEDIUM\n     ", "ME\n           * @tc.size      : MEDIUM\n     ", "              * @tc.size      : MEDIUM\n     ", "eworkRecLog: buffer size: ' + bufferSize);\n\n", "eio.statSync(fpath).size;\n        console.in"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "favtrashTestPromise.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "SR000GHLLV.test.js", "SR000GHQBN.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "fileTestPromise.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "dateAdded", "api_method_all": "readonly dateAdded: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["ded:' + firstObject.dateAdded);\n                 ", "ded:' + firstObject.dateAdded);\n            }\n\n  ", "    if (firstObject.dateAdded == undefined) {\n   ", " expect(firstObject.dateAdded != undefined).asser", "  size: 'SIZE',\n    dateAdded: 'DATE_ADDED',\n    ", "FileAssetsBy(done, 'dateAdded');\n    });\n\n    \n  ", "ryTest :firstObject.dateAdded:' + firstObject.dat"], "files": ["filekeyTestCallBack.test.js", "fetchFileResultPromise.test.js", "filekeyTestPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "dateModified", "api_method_all": "readonly dateModified: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 44, "since": 7, "api_used": "\u662f", "lines": ["teModified: ${album.dateModified}`);\n    console.inf", " Access to the file dateModified and validation is n", "um ${testNum} album.dateModified: ${album.dateModifi", "       if (newAsset.dateModified != asset.dateModifi", "teModified != asset.dateModified) {\n                ", "          if (asset.dateModified != undefined) {\n   ", "} else if (newAsset.dateModified != undefined) {\n   ", ": 'AUDIOALBUM',\n    dateModified: 'DATE_MODIFIED',\n ", "FileAssetsBy(done, 'dateModified');\n    });\n\n    \n  "], "files": ["albumTestCallBack.test.js", "albumTestPromise.test.js", "fileTestPromise.test.js", "filekeyTestCallBack.test.js", "fileTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "dateTaken", "api_method_all": "readonly dateTaken: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["FileAssetsBy(done, 'dateTaken');\n    });\n\n    \n  ", "ken:' + firstObject.dateTaken);\n            }\n\n  ", "ryTest :firstObject.dateTaken:' + firstObject.dat", "ken:' + firstObject.dateTaken);\n                 ", "DATE_MODIFIED',\n    dateTaken: 'DATE_TAKEN',\n}\n\na", "    if (firstObject.dateTaken != 0) {\n           ", " expect(firstObject.dateTaken == 0).assertTrue();"], "files": ["filekeyTestCallBack.test.js", "fetchFileResultPromise.test.js", "filekeyTestPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "artist", "api_method_all": "readonly artist: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": [": 'ALBUM_NAME',\n    artist: 'ARTIST',\n    audi", " expect(firstObject.artist == '').assertTrue()", "ist:' + firstObject.artist);\n            }\n\n  ", "ryTest :firstObject.artist:' + firstObject.art", "ist:' + firstObject.artist);\n                 ", "    if (firstObject.artist != '') {\n          ", "oAlbum' || type == 'artist' || type == 'durati", "FileAssetsBy(done, 'artist');\n    });\n\n    \n  "], "files": ["filekeyTestCallBack.test.js", "fetchFileResultPromise.test.js", "filekeyTestPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "audioAlbum", "api_method_all": "readonly audioAlbum: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 28, "since": 8, "api_used": "\u662f", "lines": ["toString()],\n};\nlet audioAlbumfetchOp = {\n    sele", "bum:' + firstObject.audioAlbum);\n            }\n\n  ", "tist: 'ARTIST',\n    audioAlbum: 'AUDIOALBUM',\n    ", "    media.getAlbums(audioAlbumfetchOp, (err, album", "scannerObj.scanFile(audioAlbumPath,async (err, dat", "album.getFileAssets(audioAlbumfetchOp);\n          ", "hOp\n    if(type == 'audioAlbum' || type == 'artist", "FileAssetsBy(done, 'audioAlbum');\n    });\n});\n", "DIR_AUDIO);\n    let audioAlbumPath = path1+\"/NONEX", "y {\n            let audioAlbumfetchOp = {\n        ", "album.getFileAssets(audioAlbumfetchOp, (error, fet", " expect(firstObject.audioAlbum == '').assertTrue()", "    if (firstObject.audioAlbum != '') {\n          ", "ait media.getAlbums(audioAlbumfetchOp);\n          ", "file');\n        let audioAlbumPath = \"\";\n        i", "bum:' + firstObject.audioAlbum);\n                 ", "ryTest :firstObject.audioAlbum:' + firstObject.aud"], "files": ["MediaScannerFrameWork1.0.js", "albumGetFileAssetsPromise.test.js", "albumTestCallBack.test.js", "albumTestPromise.test.js", "fetchFileResultPromise.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "width", "api_method_all": "readonly width: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 773, "since": 7, "api_used": "\u662f", "lines": ["height - \" +data[i].width + \" * \" +data[i].he", "G_TC_019 sizeArray: width * height - \" +data[", "6 sizeArrayPromise: width * height - \" +sizeA", "P_TC_087 sizeArray: width * height - \" +data[", "G_TC_055 sizeArray: width * height - \" +data[", " size0ArrayPromise: width * height - \" +sizeA", "sizeArrayPromise[i].width + \" * \" + sizeArray", "G_TC_029 sizeArray: width * height - \" +data[", "P_TC_015 sizeArray: width * height - \" +data[", "P_TC_051 sizeArray: width * height - \" +data[", "P_TC_025 sizeArray: width * height - \" +data[", "G_TC_065 sizeArray: width * height - \" +data[", "P_TC_035 sizeArray: width * height - \" +data[", "P_TC_061 sizeArray: width * height - \" +data[", "G_TC_075 sizeArray: width * height - \" +data[", "P_TC_071 sizeArray: width * height - \" +data[", "0 sizeArrayPromise: width * height - \" +sizeA", "G_TC_039 sizeArray: width * height - \" +data[", "2 sizeArrayPromise: width * height - \" +sizeA", "        })\n        .width('640px')\n        .h"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "height", "api_method_all": "readonly height: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 771, "since": 7, "api_used": "\u662f", "lines": ["rayPromise: width * height - \" +sizeArrayPromi", "th + \" * \" +data[i].height);\n                 ", " sizeArray: width * height - \" +data[i].width ", "h('640px')\n        .height('480px')\n    }\n  }\n", "sizeArrayPromise[i].height);\n            }\n   "], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "orientation", "api_method_all": "orientation: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 47, "since": 7, "api_used": "\u662f", "lines": ["ion:' + firstObject.orientation);\n            }\n\n  ", "ta/media/01.mp4',\n  orientationHint: 0,\n  location:", "FileAssetsBy(done, 'orientation');\n    });\n\n    \n  ", "\n                neworientation = 0;\n            }\n", "}\n            asset.orientation = neworientation;\n ", "ryTest :firstObject.orientation:' + firstObject.ori", "\nlet mediaType;\nlet orientation = 0;\ndescribe('file", "    if (firstObject.orientation != 0) {\n           ", "       expect(asset.orientation == orientation).ass", "et.orientation = neworientation;\n            const ", "t.orientation == neworientation) {\n                ", "          if (asset.orientation == 1) {\n           ", "ion:' + firstObject.orientation);\n                 ", "ight: 'HEIGHT',\n    orientation: 'ORIENTATION',\n   ", "\n            let neworientation = 1;\n            if", " expect(firstObject.orientation == 0).assertTrue();", "sset.orientation == orientation).assertTrue();\n    ", "t.id == id && asset.orientation == neworientation) "], "files": ["fileTestPromise.test.js", "fetchFileResultPromise.test.js", "fetchFileResultCallBack.test.js", "fileAssetPromise2.test.js", "CameraJSUnitVideoPromise.test.ets", "fileAssetCallBack2.test.js", "filekeyTestCallBack.test.js", "fileAsset2.test.js", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "duration", "api_method_all": "readonly duration: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 101, "since": 8, "api_used": "\u662f", "lines": ["ct(testVideoPlayer1.duration).assertEqual(DURATI", "ampleRate: 48000,\n  durationTime: 1000,\n  fileFo", "ect(testAudioPlayer.duration).assertEqual(DURATI", "rtClose(audioPlayer.duration, DELTA_TIME);\n     ", "   : 022.play->seek(duration)->finish (callback)", "   : 023.play->seek(duration, mode)->finish (cal", "er.seek(audioPlayer.duration);\n            } els", "5.play->seek(out of duration, mode) (callback)\n ", "9.play->seek(out of duration)\n        * @tc.desc", " expect(videoPlayer.duration).assertEqual(DURATI", "3.play->pause->seek(duration)->play\n        * @t", " expect(audioPlayer.duration).assertEqual(seekDo", " expect(audioPlayer.duration).assertEqual(DURATI", "ct(testVideoPlayer2.duration).assertEqual(DURATI", " expect(audioPlayer.duration).assertEqual(undefi", "4.play->seek(out of duration) (callback)\n       ", "   : 14.seek(out of duration)\n        * @tc.desc", "eTime < audioPlayer.duration) || (audioPlayer.st", "ATION).assertEqual(\"duration\");\n        expect(m", "   : 028.play->seek(duration)\n        * @tc.desc"], "files": ["HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "fetchFileResultPromise.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "VideoPlayerEnumTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "albumId", "api_method_all": "readonly albumId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 70, "since": 7, "api_used": "\u662f", "lines": ["um.albumId: ${album.albumId}`);\n    console.inf", "lbum id = ' + album.albumId);\n                 ", " if (\n        album.albumId == undefined ||\n   ", "          if (album.albumId == albumId && album", "f (album.albumId == albumId && album.albumName ", "              const albumId = album.albumId;\n  ", "nst albumId = album.albumId;\n\n            conso", "nst albumId = album.albumId;\n                  ", "          if (album.albumId == albumId) {\n     ", "um ${testNum} album.albumId: ${album.albumId}`)", "f (album.albumId == albumId) {\n                ", ";\n            const albumId = album.albumId;\n\n "], "files": ["MediaScannerFrameWork1.0.js", "albumTestCallBack.test.js", "albumTestPromise.test.js", "fetchFileResultPromise.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "albumUri", "api_method_all": "readonly albumUri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": [";\n            album.albumUri = 'testalbumUri';\n ", "um ${testNum} album.albumUri: ${album.albumUri}`", "m.albumUri: ${album.albumUri}`);\n    console.inf", "bum.albumUri = 'testalbumUri';\n            expec", "     : Modify Album albumUri\n     * @tc.size    ", "fy 006_01 003 album.albumUri error =  album.cove", " expect(firstObject.albumUri != undefined).asser", "ryTest :firstObject.albumUri:' + firstObject.alb", "Uri:' + firstObject.albumUri);\n            }\n\n  ", "Uri:' + firstObject.albumUri);\n                 ", "    if (firstObject.albumUri == undefined) {\n   ", "bum.albumUri = 'testalbumUri';\n            await", "{\n            album.albumUri = 'testalbumUri';\n ", "umUri error = album.albumUri has no setter');\n  ", "ed ||\n        album.albumUri == undefined ||\n   ", "fy 006_01 003 album.albumUri error = album.album"], "files": ["albumTestCallBack.test.js", "albumTestPromise.test.js", "fetchFileResultCallBack.test.js", "fetchFileResultPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAsset", "api_method_name": "albumName", "api_method_all": "readonly albumName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 73, "since": 7, "api_used": "\u662f", "lines": ["ed ||\n        album.albumName == undefined ||\n   ", "}\n            album.albumName = newName;\n\n       ", "me(old) = ' + album.albumName);\n            let n", "me(old) = ' + album.albumName);\n            const", "Modify 003_04 album.albumName(old) = ' + album.al", ";\n            album.albumName = newName;\n        ", "    if (firstObject.albumName != 'Camera') {\n    ", "Modify 003_03 album.albumName(old) = ' + album.al", "Modify 003_01 album.albumName(old) = ' + album.al", ".albumName: ${album.albumName}`);\n    console.inf", "Modify 003_02 album.albumName(old) = ' + album.al", "um name = ' + album.albumName);\n            conso", "Modify 003_06 album.albumName(old) = ' + album.al", "um name = ' + album.albumName);\n                 ", "um ${testNum} album.albumName: ${album.albumName}", "== albumId && album.albumName == newName) {\n     ", ";\n            album.albumName = newName;\n\n       ", "Modify 003_05 album.albumName(old) = ' + album.al", " expect(firstObject.albumName == 'Camera').assert"], "files": ["MediaScannerFrameWork1.0.js", "albumTestCallBack.test.js", "albumTestPromise.test.js", "fetchFileResultPromise.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_all": "enum FileKey {\n    \n    ID = \"file_id\",\n    \n    RELATIVE_PATH = \"relative_path\",\n    \n    DISPLAY_NAME = \"display_name\",\n    \n    PARENT = \"parent\",\n    \n    MIME_TYPE = \"mime_type\",\n    \n    MEDIA_TYPE = \"media_type\",\n    \n    SIZE = \"size\",\n    \n    DATE_ADDED = \"date_added\",\n    \n    DATE_MODIFIED = \"date_modified\",\n    \n    DATE_TAKEN = \"date_taken\",\n    \n    TITLE = \"title\",\n    \n    ARTIST = \"artist\",\n    \n    AUDIOALBUM = \"audio_album\",\n    \n    DURATION = \"duration\",\n    \n    WIDTH = \"width\",\n    \n    HEIGHT = \"height\",\n    \n    ORIENTATION = \"orientation\",\n    \n    ALBUM_ID = \"bucket_id\",\n    \n    ALBUM_NAME = \"bucket_display_name\",\n  }", "api_method_name": "FileKey", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": ["yObj = mediaLibrary.FileKey;\nlet fetchOp = {\n  ", "yObj = mediaLibrary.FileKey;\n        let mediaT", "yObj = mediaLibrary.FileKey;\n\n    //===========", "yObj = mediaLibrary.FileKey;\n\n    let imageType", "yObj = mediaLibrary.FileKey;\nlet fileType = med", "yObj = mediaLibrary.FileKey;\n    let imageType ", "yObj = mediaLibrary.FileKey;\nlet imageType = me", "yObj = mediaLibrary.FileKey;\nconst fileType = m", "yObj = mediaLibrary.FileKey;\n    let imagetype ", "yObj = mediaLibrary.FileKey;\n\nlet fileType = me", "yObj = mediaLibrary.FileKey;\n    let mediaType ", "yObj = mediaLibrary.FileKey;\n    //============"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "ID", "api_method_all": "ID = \"file_id\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3266, "since": 8, "api_used": "\u662f", "lines": ["ring GET_SUPPORTED_VIDEO_FORMATS_TC_013 PA", "Entering GET_CAMERA_ID_TC_007 PASSED with ", " ENCODING_TYPE_INVALID\n                * @", "dio.DeviceType.INVALID).assertEqual(0);\n  ", "Entering GET_CAMERA_ID_PROMISE_TC_008 FAIL", "_CAPTURER_INFO_INVALID_070', 0, async func", "- STATE_FORMAT_INVALID\n                * @", "\n    it('GET_CAMERA_ID_PROMISE_TC_008', 0,", "Entering GET_CAMERA_ID_PROMISE_TC_008 ends", "ring GET_SUPPORTED_VIDEO_FORMATS_TC_013 FA", "IO_STREAM_INFO_INVALID_069', 0, async func", "pe.SOURCE_TYPE_INVALID).assertEqual(-1);\n ", "Entering GET_CAMERA_ID_PROMISE_TC_008 came", "Entering GET_CAMERA_ID_TC_007 FAILED: \" + ", "_CAPTURER_INFO_INVALID_070\n               ", "Entering GET_CAMERA_ID_TC_007 ends here\");", "ring GET_SUPPORTED_VIDEO_FORMATS_TC_013 ca", ",100);\n        tokenID = appInfo.accessTok", "dioState.STATE_INVALID).assertEqual(-1);\n ", "IO_STREAM_INFO_INVALID_069\n               ", ".ENCODING_TYPE_INVALID).assertEqual(-1);\n ", "\", TokenID:\" + tokenID);\n        done();\n ", " + result + \", TokenID:\" + tokenID);\n     ", "STATE----------INVALID--------------');\n  ", ".SAMPLE_FORMAT_INVALID).assertEqual(-1);\n ", "ring GET_SUPPORTED_VIDEO_FORMATS_TC_013 en", "ntedPermission(tokenID, permissionNameUser", "5 PASSED with CameraID :\" + camerasArray[0", "   : GET_SUPPORTED_VIDEO_FORMATS_PROMISE_T", "oState - STATE_INVALID\n                * @", "\n    it('GET_CAMERA_ID_TC_007', 0, async f", "Entering GET_CAMERA_ID_TC_007 data is not ", "-----GET_SUPPORTED_VIDEO_FORMATS_TC_013---", "Entering GET_CAMERA_ID_PROMISE_TC_008 PASS", "ring GET_SUPPORTED_VIDEO_FORMATS_TC_013 su", " - SOURCE_TYPE_INVALID\n                * @", "n.CAMERA\";\nvar tokenID = undefined\n\n\nexpor", " it('GET_SUPPORTED_VIDEO_FORMATS_TC_013', ", "ring GET_SUPPORTED_VIDEO_FORMATS_TC_013 da", ": DeviceType - INVALID\n                * @", "7 PASSED with CameraID :\" + CameraId0);\n  "], "files": ["getPermission.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "HttpPlayerFuncPromiseTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "VideoRecorderEnumTest.test.js", "fetchFileResultPromise.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderEnumTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "fileAssetPromise2.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "SR000GHQBN.test.js", "SR000GHLLV.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "getAllPeersDeviceTestCallback.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "RELATIVE_PATH", "api_method_all": "RELATIVE_PATH = \"relative_path\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["ctions : fileKeyObj.RELATIVE_PATH + '= ?',\n    select", " AND ' + fileKeyObj.RELATIVE_PATH + '= ?',\n    select", "ections: fileKeyObj.RELATIVE_PATH + '= ? AND ' + file"], "files": ["albumTestCallBack.test.js", "albumTestPromise.test.js", "fetchFileResultCallBack.test.js", "fetchFileResultPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "DISPLAY_NAME", "api_method_all": "DISPLAY_NAME = \"display_name\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["ctions : fileKeyObj.DISPLAY_NAME + '=?',\n    selecti", "ctions : fileKeyObj.DISPLAY_NAME + '= ? AND ' + file"], "files": ["fetchFileResultPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "PARENT", "api_method_all": "PARENT = \"parent\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["ys = {\n    parent: 'PARENT',\n    mimeType: 'MI"], "files": ["filekeyTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "MIME_TYPE", "api_method_all": "MIME_TYPE = \"mime_type\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["NT',\n    mimeType: 'MIME_TYPE',\n    size: 'SIZE',"], "files": ["filekeyTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "MEDIA_TYPE", "api_method_all": "MEDIA_TYPE = \"media_type\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 198, "since": 8, "api_used": "\u662f", "lines": ["? or ' + fileKeyObj.MEDIA_TYPE + '= ? or '\n       ", "ect(media.MediaType.MEDIA_TYPE_AUD).assertEqual(0)", "ctions : fileKeyObj.MEDIA_TYPE + '= ?',\n          ", "ect(media.MediaType.MEDIA_TYPE_VID).assertEqual(1)", "ections: fileKeyObj.MEDIA_TYPE + '= ? or ' + fileK", "ctions : fileKeyObj.MEDIA_TYPE + '= ? AND date_add", "? or ' + fileKeyObj.MEDIA_TYPE + '= ?',\n    select", "ections: fileKeyObj.MEDIA_TYPE + '= ?',\n    select", "? or ' + fileKeyObj.MEDIA_TYPE + '= ?',\n          ", "A_VIDEO_PLAYER_ENUM_MEDIA_TYPE_00_0100', 0, async ", "ect(media.MediaType.MEDIA_TYPE_SUBTITLE).assertEqu", "       + fileKeyObj.MEDIA_TYPE + '= ?',\n          ", "ctions : fileKeyObj.MEDIA_TYPE + '= ? or ' + fileK", "ections: fileKeyObj.MEDIA_TYPE + ' = ?',\n         "], "files": ["fileAssetCallBack2.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "VideoPlayerEnumTest.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "fileTestCallBack.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "favoriteTestPromise.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "SIZE", "api_method_all": "SIZE = \"size\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1059, "since": 8, "api_used": "\u662f", "lines": ["-----------GET_SUPP_SIZES_CAMERA_FORMAT_JPEG", " \"Entering GET_SUPP_SIZES_CAMERA_FORMAT_JPEG", "P_CAP_CB_GET_BUFFER_SIZE_009', 0, async func", ": Entering GET_SUPP_SIZES_CAMERA_FORMAT_YCRC", "-AFTER CHECK BUFFER SIZE : PASS---------')\n ", "BEFORE CHECK BUFFER SIZE---------');\n       ", "umber    : GET_SUPP_SIZES_CAMERA_FORMAT_YCRC", "_PROMISE_GET_BUFFER_SIZE_019', 0, async func", "*/\n    it('GET_SUPP_SIZES_CAMERA_FORMAT_YCRC", " \"Entering GET_SUPP_SIZES_CAMERA_FORMAT_YCRC", "umber    : GET_SUPP_SIZES_CAMERA_FORMAT_JPEG", "-----------GET_SUPP_SIZES_CAMERA_FORMAT_YCRC", "_PROMISE_GET_BUFFER_SIZE_019\n               ", "---------GET BUFFER SIZE---------');\n       ", "*/\n    it('GET_SUPP_SIZES_CAMERA_FORMAT_JPEG"], "files": ["VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "SR000GHLLV.test.js", "VideoHardwareEncoderEnumTest.test.js", "filekeyTestCallBack.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "AudioEncoderReliabilityPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "DATE_ADDED", "api_method_all": "DATE_ADDED = \"date_added\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["  order: fileKeyObj.DATE_ADDED,\n    };\n    let vid", " order : fileKeyObj.DATE_ADDED + \" DESC LIMIT 0,1\"", "E',\n    dateAdded: 'DATE_ADDED',\n    title: 'TITLE", " order : fileKeyObj.DATE_ADDED + \" DESC LIMIT 0,10", "  order: fileKeyObj.DATE_ADDED,\n    };\n    beforeA", " order : fileKeyObj.DATE_ADDED + \" DESC LIMIT 0,2\"", "  order: fileKeyObj.DATE_ADDED,\n    };\n    let aud"], "files": ["FileAssetGetThumbnailPromise.test.js", "fetchFileResultPromise.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "fetchFileResultCallBack.test.js", "FileAssetGetThumbnailCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "DATE_MODIFIED", "api_method_all": "DATE_MODIFIED = \"date_modified\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["\n    dateModified: 'DATE_MODIFIED',\n    dateTaken: 'D"], "files": ["filekeyTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "DATE_TAKEN", "api_method_all": "DATE_TAKEN = \"date_taken\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["D',\n    dateTaken: 'DATE_TAKEN',\n}\n\nasync function"], "files": ["filekeyTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "TITLE", "api_method_all": "TITLE = \"title\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["dioFrameworkTestRM: TITLE : FAIL : '+data);\n\t", "dioFrameworkTestRM: TITLE : FAIL : ' + data);", "dioFrameworkTestRM: TITLE : PASS : '+data);\n\t", "dioFrameworkTestRM: TITLE : PASS : ' + data);", "ADDED',\n    title: 'TITLE',\n    duration: 'DU", "aType.MEDIA_TYPE_SUBTITLE).assertEqual(2);\n  "], "files": ["filekeyTestCallBack.test.js", "VideoPlayerEnumTest.test.js", "filekeyTestPromise.test.js", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "ARTIST", "api_method_all": "ARTIST = \"artist\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["NAME',\n    artist: 'ARTIST',\n    audioAlbum: '"], "files": ["filekeyTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "AUDIOALBUM", "api_method_all": "AUDIOALBUM = \"audio_album\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["',\n    audioAlbum: 'AUDIOALBUM',\n    dateModified:"], "files": ["filekeyTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "DURATION", "api_method_all": "DURATION = \"duration\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 112, "since": 8, "api_used": "\u662f", "lines": ["_STATE, SEEK_STATE, DURATION_TIME / RAND_NUM, EN", "_STATE, SEEK_STATE, DURATION_TIME,\n            P", "_STATE, SEEK_STATE, DURATION_TIME, PLAY_STATE,\n ", "neTime).assertEqual(DURATION_TIME);\n            ", "_STATE, SEEK_STATE, DURATION_TIME + DELTA_TIME,\n", "     if (seekTime > DURATION_TIME) {\n           ", "&& (seekDoneTime == DURATION_TIME)) {\n          ", "_STATE, SEEK_STATE, DURATION_TIME + DELTA_TIME, ", "lse if (seekTime == DURATION_TIME) {\n           ", "_STATE, SEEK_STATE, DURATION_TIME / RAND_NUM,\n  ", "_STATE, SEEK_STATE, DURATION_TIME, FINISH_STATE,", "ATE = 11;\n    const DURATION_TIME = 219600;\n    ", "it videoPlayer.seek(DURATION_TIME, media.SeekMod", "E = 3000;\n    const DURATION_TIME = 219600;\n    ", "         seekTime = DURATION_TIME;\n             ", "UE = 480;\n    const DURATION_TIME = 10034;\n    c", "ration).assertEqual(DURATION_TIME);\n        expe", "estAudioPlayer.seek(DURATION_TIME);\n        });\n", "ration).assertEqual(DURATION_TIME);\n            "], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "filekeyTestCallBack.test.js", "PlayerLocalTestAudioAPI.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "WIDTH", "api_method_all": "WIDTH = \"width\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 53, "since": 8, "api_used": "\u662f", "lines": ["SEST = 3;\n    const WIDTH_VALUE = 720;\n    co", "E = 2100;\n    const WIDTH_VALUE = 720;\n    co", "scriptionKey.MD_KEY_WIDTH).assertEqual(\"width", "E = 5000;\n    const WIDTH_VALUE = 720;\n    co", "(width).assertEqual(WIDTH_VALUE);\n           ", ".width).assertEqual(WIDTH_VALUE);\n           "], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "HEIGHT", "api_method_all": "HEIGHT = \"height\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 53, "since": 8, "api_used": "\u662f", "lines": ["UE = 720;\n    const HEIGHT_VALUE = 480;\n    co", "height).assertEqual(HEIGHT_VALUE);\n           ", "height).assertEqual(HEIGHT_VALUE);\n        }, ", "scriptionKey.MD_KEY_HEIGHT).assertEqual(\"heigh"], "files": ["HttpPlayerFuncPromiseTest.test.js", "VideoPlayerEnumTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "ORIENTATION", "api_method_all": "ORIENTATION = \"orientation\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [",\n    orientation: 'ORIENTATION',\n    albumId: 'ALB"], "files": ["filekeyTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "ALBUM_ID", "api_method_all": "ALBUM_ID = \"bucket_id\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["ION',\n    albumId: 'ALBUM_ID',\n    albumName: 'A"], "files": ["filekeyTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileKey", "api_method_name": "ALBUM_NAME", "api_method_all": "ALBUM_NAME = \"bucket_display_name\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["D',\n    albumName: 'ALBUM_NAME',\n    artist: 'ARTI", " AND ' + fileKeyObj.ALBUM_NAME + '= ?',\n    select"], "files": ["albumTestCallBack.test.js", "albumTestPromise.test.js", "filekeyTestPromise.test.js", "filekeyTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaFetchOptions", "api_method_all": "interface MediaFetchOptions {\n    \n    selections: string;\n    \n    selectionArgs: Array<string>;\n    \n    order?: string;\n    \n    uri?: string;\n    \n    networkId?: string;\n    \n    extendArgs?: string;\n  }", "api_method_name": "MediaFetchOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaFetchOptions", "api_method_name": "selections", "api_method_all": "selections: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 235, "since": 7, "api_used": "\u662f", "lines": ["fetchOp = {\n        selections: fileKeyObj.ID + \"=", "= {\n                selections : fileKeyObj.ID + \"", "TypefetchOp = {\n    selections: '',\n    selectionA", "= {\n                selections : '',\n             ", "rUrifetchOp = {\n    selections: fileKeyObj.RELATIV", "Op5 = {\n            selections: '666' + '= ?',\n   ", "lbumfetchOp = {\n    selections: fileKeyObj.MEDIA_T", "= {\n                selections: '',\n              ", "Op3 = {\n            selections: fileKeyObj.MEDIA_T", "= {\n                selections : fileKeyObj.MEDIA_", "Op4 = {\n            selections: '666' + '= ?',\n   ", "letefetchOp = {\n    selections: fileKeyObj.RELATIV"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaFetchOptions", "api_method_name": "selectionArgs", "api_method_all": "selectionArgs: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 235, "since": 7, "api_used": "\u662f", "lines": ["' = ?',\n            selectionArgs: ['666'],\n        }", "'',\n                selectionArgs : [],\n             ", "?',\n                selectionArgs : [ imageType.toStr", "M_NAME + '= ?',\n    selectionArgs: ['Pictures/','weix", "A_TYPE + '= ?',\n    selectionArgs: [videoType.toStrin", "'',\n                selectionArgs: [],\n              ", "A_TYPE + '= ?',\n    selectionArgs: [imageType.toStrin", "?\",\n                selectionArgs : [args],\n         ", "?',\n                selectionArgs : [ videoType.toStr", " '= ?',\n            selectionArgs: [videoType.toStrin", ".ID + \"=?\",\n        selectionArgs: [args],\n      }\n  ", "selections: '',\n    selectionArgs: [],\n};\nlet albumDe", "?',\n                selectionArgs : [ audioType.toStr", " '= ?',\n            selectionArgs: ['666'],\n        }", "A_TYPE + '= ?',\n    selectionArgs: [audioType.toStrin", "0',\n                selectionArgs : [ imageType.toStr", "0',\n                selectionArgs : [ videoType.toStr", "0',\n                selectionArgs : [ audioType.toStr", "M_NAME + '= ?',\n    selectionArgs: ['Pictures/','Dele"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaFetchOptions", "api_method_name": "order", "api_method_all": "order?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1200, "since": 7, "api_used": "\u662f", "lines": ["ecorderPromise = recorder\n      console.info(", "led')\n      videoRecorderPromise = recorder\n ", "wOutput\nvar videoRecorder\nvar videoProfile = ", "ed.')\n      videoRecorder.prepare(videoConfig", "e()\n        videoRecorderPromise.release()\n  ", " == null || videoRecorderPromise == undefined", "e')\n        videoRecorderPromise.stop()\n     ", "e')\n        videoRecorder.start()\n\t\tconsole.i", "{\n      if (videoRecorder == null || videoRec", "EASE_TC_051 videoRecorder == null || undefine", "Promise\nvar videoRecorderPromise\nvar videoPro", "(1)\n        videoRecorder.stop()\n        cons", "eoRecorder((err, recorder) => {\n      if (!er", "info(TAG + 'videoRecorder.prepare called.')\n ", "lled.')\n    videoRecorderPromise.prepare(vide", "eoRecorder((err, recorder) => {\n      console", "media.createVideoRecorder((err, recorder) => ", "info(TAG + 'videoRecorder is :' + JSON.string", "e')\n        videoRecorderPromise.start()\n    ", "N.stringify(videoRecorder))\n\n      console.in", "  })\n\n      videoRecorder.getInputSurface((er", "e()\n        videoRecorder.release()\n        c", "desc      : VideoRecorder stop promise api\n  ", "info(TAG + 'videoRecorder.prepare success.')\n", "led')\n      videoRecorder = recorder\n      co", " videoRecorder = recorder\n      console.info(", "name      : VideoRecorder start async api\n   ", "desc      : VideoRecorder stop async api\n    ", "wOutput\nvar videoRecorder\nlet fdPath;\nlet fil", "    })\n\n    videoRecorderPromise.getInputSurf", "TART_TC_049 videoRecorder == null || undefine", "N.stringify(videoRecorderPromise))\n\n    conso", " == null || videoRecorder == undefined) {\n   ", "desc      : VideoRecorder start async api\n   ", "name      : VideoRecorder stop async api\n    ", "AG + 'createVideoRecorder called')\n      vide", "{\n      if (videoRecorderPromise == null || v", "name      : VideoRecorder stop promise api\n  ", "MISE_TC_049 videoRecorderPromise == null || u"], "files": ["List.test.js", "VideoRecorderFuncPromiseTest.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "VideoRecorderEnumTest.test.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "albumGetFileAssetsPromise.test.js", "albumTestPromise.test.js", "RecorderLocalTestAudioAPI.test.js", "FileAssetGetThumbnailCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaFetchOptions", "api_method_name": "uri", "api_method_all": "uri?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 152, "since": 7, "api_used": "\u662f", "lines": ["romise  set invalid uri - Start() (Negative", "c.desc      : 1.set uri\n     *             ", " - Callback invalid uri\n                * @", "figure & get title during playback\n        ", "l createImageSource(uri)\n     *            ", "toneUri - promise - uri Null,MULTISIM ENAME", "tc.desc      : 1.seturi\n     *             ", ".info(TAG + \"Error during camera0InputPromi", "ri - Callback- Null uri -RINGTONE_TYPE_DEFA", "ngtone Get Ringtone uri: ERROR: ' + err.mes", ".info(TAG + \"Error during camera0Input with", ": createImageSource(uri)-jpg\n     * @tc.des", "- promise - Invalid uri\n                * @", ".info(TAG + \"Error during PhotoOutput with ", ": createImageSource(uri)-wrong uri\n     * @", "- Callback set null uri\n                * @", ".info(TAG + \"Error during cameraInput with ", ": createImageSource(uri)-gif\n     * @tc.des", "i - Promise invalid uri RINGTONE_TYPE_DEFAU", ".info(TAG + \"Error during videoOutput with ", ": createImageSource(uri)-png\n     * @tc.des", ": createImageSource(uri)-wrong suffix file ", ".info(TAG + \"Error during PreviewOutput wit", "geSource(uri)-wrong uri\n     * @tc.desc    ", ": createImageSource(uri)-bmp\n     * @tc.des", "allback set Invalid uri\n                * @"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoDecoderReliCallbackTest.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "fileAssetPromise2.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "fileAsset2.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaFetchOptions", "api_method_name": "networkId", "api_method_all": "networkId?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["                  + networkId);\n                 ", "llPeers 001_01 peer.networkId = '\n               ", "Id = allPeerList[0].networkId;\n            consol", "eers();\n            networkId = allPeerList[0].ne", "Id = allPeerList[0].networkId;\n                  ", "                    networkId = allPeerList[0].ne", "eer.networkId = ' + networkId);\n        } catch (", "llPeers 001_01 peer.networkId = ' + networkId);\n "], "files": ["getAllPeersDeviceTestCallback.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaFetchOptions", "api_method_name": "extendArgs", "api_method_all": "extendArgs?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["ESC LIMIT 0,2\",\n    extendArgs : \"\",\n};\n\nlet getFi", "ESC LIMIT 0,1\",\n    extendArgs : \"\",\n}\n\nlet getAll", "ESC LIMIT 0,5\",\n    extendArgs : \"\",\n}\n\nlet getAll", "C LIMIT 0,100\",\n    extendArgs : \"\",\n}\n\nlet getFil", "C LIMIT 0,100\",\n    extendArgs : \"\",\n};\n\nlet getFi", "C LIMIT 0,100\",\n    extendArgs : \"\",\n}\n\ndescribe('", "SC LIMIT 0,10\",\n    extendArgs : \"\",\n};\n\nlet getFi", "ESC LIMIT 0,1\",\n    extendArgs : \"\",\n};\n\nlet getFi"], "files": ["fetchFileResultPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_all": "interface FetchFileResult {\n    \n    getCount(): number;\n    \n    isAfterLast(): boolean;\n    \n    close(): void;\n    \n    getFirstObject(callback: AsyncCallback<FileAsset>): void;\n    \n    getFirstObject(): Promise<FileAsset>;\n    \n    getNextObject(callback: AsyncCallback<FileAsset>): void;\n    \n    getNextObject(): Promise<FileAsset>;\n    \n    getLastObject(callback: AsyncCallback<FileAsset>): void;\n    \n    getLastObject(): Promise<FileAsset>;\n    \n    getPositionObject(index: number, callback: AsyncCallback<FileAsset>): void;\n    \n    getPositionObject(index: number): Promise<FileAsset>;\n     \n    getAllObject(callback: AsyncCallback<Array<FileAsset>>): void;\n    \n    getAllObject(): Promise<Array<FileAsset>>;\n  }", "api_method_name": "FetchFileResult", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getCount", "api_method_all": "getCount(): number;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 54, "since": 7, "api_used": "\u662f", "lines": ["yTest : FETCHRESULT getCount 001_01 failed, mess", "yTest : FETCHRESULT getCount 001_02 count:' + fe", "ait fetchFileResult.getCount();\n            let ", "tCount():\" + result.getCount());\n            ass", "ect(fetchFileResult.getCount() <= count).assertT", "    fetchFileResult.getCount();\n                ", "yTest : FETCHRESULT getCount 001_02 failed, mess", "yTest : FETCHRESULT getCount 001_03:' + fetchCou", "Test :  FETCHRESULT getCount 001_04 end');\n     ", "ryTest :FETCHRESULT getCount 001_03 begin');\n   ", "ryTest :FETCHRESULT getCount 001_03 end');\n     ", "Test :  FETCHRESULT getCount 001_04 begin');\n   ", "yTest : FETCHRESULT getCount 001_03 failed, mess", "ait fetchFileResult.getCount();\n            try ", "Test :  FETCHRESULT getCount 001_01 begin');\n   ", "yTest : FETCHRESULT getCount 001_02 end');\n     ", "ait fetchFileResult.getCount();\n            cons", "yTest : FETCHRESULT getCount 001_01 end');\n     ", "yTest : FETCHRESULT getCount 001_02 begin');\n   ", "yTest : FETCHRESULT getCount 001_04 failed, mess", "yTest : FETCHRESULT getCount 001_01 count:' + fe", "ait fetchFileResult.getCount();\n            fetc", "erachUri + \",result.getCount():\" + result.getCou", "Test :  FETCHRESULT getCount 001_04 count:' + fe"], "files": ["albumGetFileAssetsPromise.test.js", "fetchFileResultPromise.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "albumGetFileAssetsCallback.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "isAfterLast", "api_method_all": "isAfterLast(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["ULT isAfterLast 002 isAfterLast:' + result);\n      ", "t = fetchFileResult.isAfterLast();\n                ", "ULT isAfterLast 002 isAfterLast end');\n            ", "yTest : FETCHRESULT isAfterLast 002 isAfterLast end", "'MediaLibraryTest : isAfterLast begin');\n          ", "yTest : FETCHRESULT isAfterLast 002 isLast');\n     ", "yTest : FETCHRESULT isAfterLast 002 isAfterLast:' +", "yTest : FETCHRESULT isAfterLast 002 failed, message"], "files": ["fetchFileResultPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "close", "api_method_all": "close(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 402, "since": 8, "api_used": "\u662f", "lines": ["on () {\n      await closeFd();\n      console.", "   : get flash mode close camera0 api\n      *", "[mediaLibrary] case close fd failed');\n      ", "   : set flash mode close camera0 api\n      *", "[mediaLibrary] case close fd success');\n     ", "check if flash mode close is supported-camera", "}\n\n  async function closeFd() {\n    if (fileA", "lag;\n     }\n     ss.closeSync();\n     audioRe", " await fileAsset[0].close(fdNumber).then(() ="], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "CameraJSUnitPhotoAsync.test.ets", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getFirstObject", "api_method_all": "getFirstObject(callback: AsyncCallback<FileAsset>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 128, "since": 7, "api_used": "\u662f", "lines": ["media.getFileAssets(getFirstObjectOp);\n            const count = await fet", "LIBRARY_FETCHRESULT_getFirstObject_PROMISE_009_01\n     * @tc.name      : g", "yTest : FETCHRESULT getFirstObject begin');\n            let fetchFileResul", "yTest : FETCHRESULT getFirstObject 004 end');\n                    done();\n", "LIBRARY_FETCHRESULT_getFirstObject_CALLBACK_009_01', 0, async function(don", "yTest : FETCHRESULT getFirstObject 004 end');\n            done();\n        ", "ait fetchFileResult.getFirstObject();\n            const newTitle = 'newTit", "yTest : FETCHRESULT getFirstObject 004 failed, message = ' + error);\n     ", "ait fetchFileResult.getFirstObject();\n            const id = asset.id;\n   ", "ait fetchFileResult.getFirstObject();\n            for (var i = 1; i < fetc", "ait fetchFileResult.getFirstObject();\n\n            printAttr(asset);\n     ", "media.getFileAssets(getFirstObjectOp);\n            fetchFileResult.getPosi", "  * @tc.name      : getFirstObject\n     * @tc.desc      : Get FetchResult,", "ait fetchFileResult.getFirstObject();\n            printAttr(asset);\n      ", "ait fetchFileResult.getFirstObject();\n                    if (asset == und", "ait fetchFileResult.getFirstObject();\n            const isDir = await asse", "dArgs : \"\",\n};\n\nlet getFirstObjectOp = {\n    selections : fileKeyObj.RELAT", "ait fetchFileResult.getFirstObject();\n                expect(false).assert", "media.getFileAssets(getFirstObjectOp);\n            let targetObject = awai", "media.getFileAssets(getFirstObjectOp);\n            let firstObject = await", "ait fetchFileResult.getFirstObject();\n            let relativePath = asset", "media.getFileAssets(getFirstObjectOp);\n            let lastObject = await ", "LIBRARY_FETCHRESULT_getFirstObject_PROMISE_009_01', 0, async function(done", "ait fetchFileResult.getFirstObject();\n            let neworientation = 1;\n", "ait fetchFileResult.getFirstObject();\n            expect(firstObject.id !=", "media.getFileAssets(getFirstObjectOp);\n            fetchFileResult.getFirs", "ait fetchFileResult.getFirstObject();\n            if (asset == undefined) ", "media.getFileAssets(getFirstObjectOp);\n            fetchFileResult.getLast", "ait fetchFileResult.getFirstObject();\n            const newName = 'newName", "    fetchFileResult.getFirstObject(async (error, firstObject) => {\n       ", ": FETCHRESULT close getFirstObject 003 failed');\n                fileAsset", "ait fetchFileResult.getFirstObject();\n            expect(firstObject.relat"], "files": ["mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "albumTestCallBack.test.js", "albumTestPromise.test.js", "fileTestPromise.test.js", "fetchFileResultPromise.test.js", "fileAssetPromise2.test.js", "fileAssetCallBack2.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "fileAsset2.test.js", "fileTestCallBack.test.js", "mediaLibraryTestPromiseOnOff.test.js", "fileAssetUriTestPromiese.test.js", "fileAssetUriTestCallBack.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getFirstObject", "api_method_all": "getFirstObject(): Promise<FileAsset>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getNextObject", "api_method_all": "getNextObject(callback: AsyncCallback<FileAsset>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": ["ait fetchFileResult.getNextObject();\n                if (i == fetchCount ", "yTest : FETCHRESULT getNextObject 005 begin');\n            let fetchFileR", "yTest : FETCHRESULT getNextObject 005  fail');\n                } else {\n ", "yTest : FETCHRESULT getNextObject 005  end');\n        } catch (error) {\n ", "yTest : FETCHRESULT getNextObject 007_01  fail');\n                    don", "yTest : FETCHRESULT getNextObject 004  fail');\n                    done()", "yTest : FETCHRESULT getNextObject 007_02  fail');\n                    don", "yTest : FETCHRESULT getNextObject 007_04  fail');\n                       ", "yTest : FETCHRESULT getNextObject 008_03  fail');\n                    don", "yTest : FETCHRESULT getNextObject 006  end');\n                    done();", "yTest : FETCHRESULT getNextObject 007_03  fail');\n                    don", "ait fetchFileResult.getNextObject();\n                expect(false).assert", ": FETCHRESULT close getNextObject 003 failed');\n                fileAsset", "yTest : FETCHRESULT getNextObject 005  end');\n                    done();", "yTest : FETCHRESULT getNextObject 005 failed, message = ' + error);\n     ", "    fetchFileResult.getNextObject(async (error, nextObject) => {\n        ", "yTest : FETCHRESULT getNextObject 008_01  fail');\n                    don", "yTest : FETCHRESULT getNextObject 004  fail');\n                } else {\n ", "yTest : FETCHRESULT getNextObject 006  fail');\n                    done()", "ait fetchFileResult.getNextObject();\n            expect(nextObject.relati"], "files": ["fetchFileResultPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getNextObject", "api_method_all": "getNextObject(): Promise<FileAsset>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getLastObject", "api_method_all": "getLastObject(callback: AsyncCallback<FileAsset>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["yTest : FETCHRESULT getLastObject 006 failed, message = ' + error);\n     ", "yTest : FETCHRESULT getLastObject 006 end');\n            done();\n        ", "ait fetchFileResult.getLastObject();\n            expect(lastObject.relati", "yTest : FETCHRESULT getLastObject begin');\n            let fetchFileResul", "ait fetchFileResult.getLastObject();\n                expect(false).assert", "    fetchFileResult.getLastObject(async (error, lastObject) => {\n        ", ": FETCHRESULT close getLastObject 003 failed');\n                let targe"], "files": ["fetchFileResultPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getLastObject", "api_method_all": "getLastObject(): Promise<FileAsset>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getPositionObject", "api_method_all": "getPositionObject(index: number, callback: AsyncCallback<FileAsset>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35, "since": 7, "api_used": "\u662f", "lines": ["Test :  FETCHRESULT getPositionObject 007_04 end');\n        } catch (error) {", ": FETCHRESULT close getPositionObject 003 failed');\n                s\n       ", "ait fetchFileResult.getPositionObject(count - 1);\n            expect(targetOb", "yTest : FETCHRESULT getPositionObject 007_04 failed, message = ' + error);\n  ", "Test :  FETCHRESULT getPositionObject 007_04 begin');\n            let fetchFi", "yTest : FETCHRESULT getPositionObject 007_01 end');\n        } catch (error) {", "ait fetchFileResult.getPositionObject(count + 100);\n                if (targe", "    fetchFileResult.getPositionObject(1, async (error, targetObject) => {\n   ", "    fetchFileResult.getPositionObject(0, async (error, targetObject) => {\n   ", "yTest : FETCHRESULT getPositionObject 007_03 failed, message = ' + error);\n  ", "yTest : FETCHRESULT getPositionObject 007_02 begin');\n            let fetchFi", "yTest : FETCHRESULT getPositionObject 007_03 end');\n        } catch (error) {", "yTest : FETCHRESULT getPositionObject 007_01 failed, message = ' + error);\n  ", "yTest : FETCHRESULT getPositionObject 007_01 end');\n                    done(", "yTest : FETCHRESULT getPositionObject 007_03 begin');\n            let fetchFi", "yTest : FETCHRESULT getPositionObject 007_02 end');\n        } catch (error) {", "yTest : FETCHRESULT getPositionObject 007_03 end');\n                    done(", "yTest : FETCHRESULT getPositionObject 007_02 failed, message = ' + error);\n  ", "ait fetchFileResult.getPositionObject(0);\n            expect(targetObject.rel", "ait fetchFileResult.getPositionObject(0);\n                expect(false).asser", "yTest : FETCHRESULT getPositionObject 008_01 end');\n                    done(", "yTest : FETCHRESULT getPositionObject 007_02 end');\n                    done(", "yTest : FETCHRESULT getPositionObject 007_04 end');\n                        d", "yTest : FETCHRESULT getPositionObject 007_01 begin');\n            let fetchFi", "    fetchFileResult.getPositionObject(count - 1, async (error, targetObject) ", "    fetchFileResult.getPositionObject(count + 100, async (error, targetObject", "ait fetchFileResult.getPositionObject(1);\n            expect(targetObject.rel"], "files": ["fetchFileResultPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getPositionObject", "api_method_all": "getPositionObject(index: number): Promise<FileAsset>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getAllObject", "api_method_all": "getAllObject(callback: AsyncCallback<Array<FileAsset>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 260, "since": 7, "api_used": "\u662f", "lines": [" = await fileAssets.getAllObject();\n            const asset = dataList[0", "         fileAssets.getAllObject((error, dataList) => {\n                ", "ait fetchFileResult.getAllObject();\n\n            const assetsLength = da", "ait fetchFileResult.getAllObject();\n\n            for (let j = 0; j < dat", "ait fetchFileResult.getAllObject();\n      fdNumber = await fileAsset[0].", "ait fetchFileResult.getAllObject();\n            fdNumber = await fileAss"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "favoriteTestCallBack.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FetchFileResult", "api_method_name": "getAllObject", "api_method_all": "getAllObject(): Promise<Array<FileAsset>>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_all": "interface Album {\n    \n    readonly albumId: number;\n    \n    albumName: string;\n    \n    readonly albumUri: string;\n    \n    readonly dateModified: number;\n    \n    readonly count: number;\n    \n    readonly relativePath: string;\n    \n    readonly coverUri: string;\n\n    \n    commitModify(callback: AsyncCallback<void>): void;\n    \n    commitModify(): Promise<void>;\n    \n    getFileAssets(callback: AsyncCallback<FetchFileResult>): void;\n    \n    getFileAssets(options: MediaFetchOptions, callback: AsyncCallback<FetchFileResult>): void;\n    \n    getFileAssets(options?: MediaFetchOptions): Promise<FetchFileResult>;\n  }", "api_method_name": "Album", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 378, "since": 8, "api_used": "\u662f", "lines": [".getFileAssets(videoAlbumfetchOp, (error, fet", "   let imageAndVideoAlbumfetchOp = {\n        ", "edia.getAlbums(imageAlbumfetchOp);\n          ", "st = await media.getAlbums(imgAndVideoAndAudi", "           let imageAlbumfetchOp = {\n        ", ".getFileAssets(videoAlbumfetchOp);\n          ", " imgAndVideoAndAudioAlbumfetchOp = {\n        ", "st = await media.getAlbums(videoAlbumfetchOp)", "Assets(videoAndAudioAlbumfetchOp, (error, fet", "st = await media.getAlbums(allTypefetchOp);\n ", "   let imageAndAudioAlbumfetchOp = {\n        ", ".getFileAssets(audioAlbumfetchOp);\n          ", "           media.getAlbums(albumfetchOpNone, ", "           let videoAlbumfetchOp = {\n        ", "Assets(imageAndVideoAlbumfetchOp, (error, fet", "Albums(imageAndVideoAlbumfetchOp);\n          ", "st = await media.getAlbums(imageAndVideoAlbum", ".getFileAssets(audioAlbumfetchOp, (error, fet", "Assets(imageAndAudioAlbumfetchOp, (error, fet", ".getFileAssets(imageAlbumfetchOp);\n          ", "edia.getAlbums(audioAlbumfetchOp);\n          ", "(imgAndVideoAndAudioAlbumfetchOp);\n          ", "Albums(videoAndAudioAlbumfetchOp);\n          ", "st = await media.getAlbums(imageAlbumfetchOp)", "(imgAndVideoAndAudioAlbumfetchOp, (error, fet", "Albums(imageAndAudioAlbumfetchOp);\n          ", "st = await media.getAlbums(videoAndAudioAlbum", "st = await media.getAlbums(audioAlbumfetchOp)", "           let audioAlbumfetchOp = {\n        ", "edia.getAlbums(videoAlbumfetchOp);\n          ", "st = await media.getAlbums(albumfetchOpOne);\n", ".getFileAssets(imageAlbumfetchOp, (error, fet", "   let videoAndAudioAlbumfetchOp = {\n        ", "st = await media.getAlbums(imageAndAudioAlbum"], "files": ["MediaScannerFrameWork1.0.js", "albumGetFileAssetsPromise.test.js", "albumTestCallBack.test.js", "albumTestPromise.test.js", "fetchFileResultPromise.test.js", "fileAssetPromise2.test.js", "fileAssetCallBack2.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "fileAsset2.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "commitModify", "api_method_all": "commitModify(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 116, "since": 8, "api_used": "\u662f", "lines": ["SUB_MEDIA_FILEASSET_commitModify_promise_006', 0, async function (done) ", "ole.info('FileAsset commitModify 001 failed, message = ' + error);\n     ", "LBACK Modify 003_03 commitModify failed, message = ' + error);\n         ", "SUB_MEDIA_FILEASSET_commitModify_promise_002', 0, async function (done) ", "        await asset.commitModify();\n\n            console.info('FileAsset", "ole.info('FileAsset commitModify 005 passed');\n            expect(true).", "ole.info('FileAsset commitModify 003 failed, message = ' + error);\n     ", "LBACK Modify 003_04 commitModify failed, message = ' + error);\n         ", "SUB_MEDIA_FILEASSET_commitModify_promise_004', 0, async function (done) ", "LBACK Modify 003_02 commitModify failed, message = ' + error);\n         ", "        await album.commitModify();\n            console.info('ALBUM_PROM", "  * @tc.name      : commitModify\n     * @tc.desc      : Modify Album nam", "\n\n            album.commitModify(async () => {\n                try {\n   ", "SUB_MEDIA_FILEASSET_commitModify_promise_005', 0, async function (done) ", "        await asset.commitModify();\n\n            const fetchFileResult2 ", "        await album.commitModify();\n            const newAlbumList = awa", "ole.info('FileAsset commitModify 002 failed, message = ' + error);\n     ", ";\n            album.commitModify(async () => {\n                try {\n   ", "SUB_MEDIA_FILEASSET_commitModify_promise_003', 0, async function (done) ", "LBACK Modify 003_01 commitModify failed, message = ' + error);\n         ", "LBACK Modify 003_05 commitModify failed, message = ' + error);\n         ", "ole.info('FileAsset commitModify 006 failed');\n            expect(false)", "  * @tc.name      : commitModify\n     * @tc.desc      : Modify Album alb", "SUB_MEDIA_FILEASSET_commitModify_promise_001', 0, async function (done) ", "ole.info('FileAsset commitModify 005 failed');\n            expect(false)", "ole.info('FileAsset commitModify 004 failed, message = ' + error);\n     "], "files": ["MediaScannerFrameWork1.0.js", "albumTestCallBack.test.js", "albumTestPromise.test.js", "fileTestPromise.test.js", "fileAssetPromise2.test.js", "fileAssetCallBack2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "fileTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "commitModify", "api_method_all": "commitModify(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "getFileAssets", "api_method_all": "getFileAssets(callback: AsyncCallback<FetchFileResult>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 525, "since": 7, "api_used": "\u662f", "lines": ["esult = await album.getFileAssets(albumfetchOpOne);\n            expect(fe", "info('ALBUM_PROMISE getFileAssets 002_06 passed');\n            expect(fal", "info('ALBUM_PROMISE getFileAssets 002_07 passed');\n            expect(fal", "esult = await album.getFileAssets(coverUrifetchOp);\n            const ass", ";\n            album.getFileAssets(imgAndVideoAndAudioAlbumfetchOp, (error", ";\n            album.getFileAssets(albumfetchOpOne, (error, fetchFileResul", ";\n            album.getFileAssets(audioAlbumfetchOp, (error, fetchFileRes", ";\n            album.getFileAssets(videoAndAudioAlbumfetchOp, (error, fetc", "esult = await album.getFileAssets(audioAlbumfetchOp);\n            expect(", "esult = await album.getFileAssets(allTypefetchOp);\n\n            let datas", "{\n            media.getFileAssets(fileFetchOp, (error, fileAssets) => {\n ", "t = await mediaTest.getFileAssets(fetchOp);\n      fileAsset = await fetch", "esult = await album.getFileAssets(imageAndVideoAlbumfetchOp);\n           ", "esult = await album.getFileAssets(videoAndAudioAlbumfetchOp);\n           ", "esult = await album.getFileAssets(videoAlbumfetchOp);\n            expect(", ";\n            album.getFileAssets(imageAlbumfetchOp, (error, fetchFileRes", ";\n            album.getFileAssets(videoAlbumfetchOp, (error, fetchFileRes", ";\n            album.getFileAssets(imageAndAudioAlbumfetchOp, (error, fetc", "esult = await album.getFileAssets(imgAndVideoAndAudioAlbumfetchOp);\n     ", "esult = await album.getFileAssets(allTypefetchOp);\n            expect(fet", ";\n            album.getFileAssets(allTypefetchOp, (error, fetchFileResult", "esult = await album.getFileAssets(imageAlbumfetchOp);\n            expect(", "{\n            media.getFileAssets(imageFetchOp, (error, fileAssets) => {\n", "esult = await album.getFileAssets(coverUrifetchOp);\n                    c", "nfo('ALBUM_CALLBACK getFileAssets 002_08 passed');\n            expect(fal", "esult = await album.getFileAssets(imageAndAudioAlbumfetchOp);\n           ", "nfo('ALBUM_CALLBACK getFileAssets 002_07 passed');\n            expect(fal", "t = await mediaTest.getFileAssets(fetchOp);\n            fileAsset = await", "nfo('ALBUM_CALLBACK getFileAssets 002_06 passed');\n            expect(fal", ";\n            album.getFileAssets(imageAndVideoAlbumfetchOp, (error, fetc", "info('ALBUM_PROMISE getFileAssets 002_08 passed');\n            expect(fal"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "getFileAssets", "api_method_all": "getFileAssets(options: MediaFetchOptions, callback: AsyncCallback<FetchFileResult>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 525, "since": 7, "api_used": "\u662f", "lines": ["esult = await album.getFileAssets(albumfetchOpOne);\n            expect(fe", "info('ALBUM_PROMISE getFileAssets 002_06 passed');\n            expect(fal", "info('ALBUM_PROMISE getFileAssets 002_07 passed');\n            expect(fal", "esult = await album.getFileAssets(coverUrifetchOp);\n            const ass", ";\n            album.getFileAssets(imgAndVideoAndAudioAlbumfetchOp, (error", ";\n            album.getFileAssets(albumfetchOpOne, (error, fetchFileResul", ";\n            album.getFileAssets(audioAlbumfetchOp, (error, fetchFileRes", ";\n            album.getFileAssets(videoAndAudioAlbumfetchOp, (error, fetc", "esult = await album.getFileAssets(audioAlbumfetchOp);\n            expect(", "esult = await album.getFileAssets(allTypefetchOp);\n\n            let datas", "{\n            media.getFileAssets(fileFetchOp, (error, fileAssets) => {\n ", "t = await mediaTest.getFileAssets(fetchOp);\n      fileAsset = await fetch", "esult = await album.getFileAssets(imageAndVideoAlbumfetchOp);\n           ", "esult = await album.getFileAssets(videoAndAudioAlbumfetchOp);\n           ", "esult = await album.getFileAssets(videoAlbumfetchOp);\n            expect(", ";\n            album.getFileAssets(imageAlbumfetchOp, (error, fetchFileRes", ";\n            album.getFileAssets(videoAlbumfetchOp, (error, fetchFileRes", ";\n            album.getFileAssets(imageAndAudioAlbumfetchOp, (error, fetc", "esult = await album.getFileAssets(imgAndVideoAndAudioAlbumfetchOp);\n     ", "esult = await album.getFileAssets(allTypefetchOp);\n            expect(fet", ";\n            album.getFileAssets(allTypefetchOp, (error, fetchFileResult", "esult = await album.getFileAssets(imageAlbumfetchOp);\n            expect(", "{\n            media.getFileAssets(imageFetchOp, (error, fileAssets) => {\n", "esult = await album.getFileAssets(coverUrifetchOp);\n                    c", "nfo('ALBUM_CALLBACK getFileAssets 002_08 passed');\n            expect(fal", "esult = await album.getFileAssets(imageAndAudioAlbumfetchOp);\n           ", "nfo('ALBUM_CALLBACK getFileAssets 002_07 passed');\n            expect(fal", "t = await mediaTest.getFileAssets(fetchOp);\n            fileAsset = await", "nfo('ALBUM_CALLBACK getFileAssets 002_06 passed');\n            expect(fal", ";\n            album.getFileAssets(imageAndVideoAlbumfetchOp, (error, fetc", "info('ALBUM_PROMISE getFileAssets 002_08 passed');\n            expect(fal"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "getFileAssets", "api_method_all": "getFileAssets(options?: MediaFetchOptions): Promise<FetchFileResult>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "albumId", "api_method_all": "readonly albumId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 70, "since": 7, "api_used": "\u662f", "lines": ["um.albumId: ${album.albumId}`);\n    console.inf", "lbum id = ' + album.albumId);\n                 ", " if (\n        album.albumId == undefined ||\n   ", "          if (album.albumId == albumId && album", "f (album.albumId == albumId && album.albumName ", "              const albumId = album.albumId;\n  ", "nst albumId = album.albumId;\n\n            conso", "nst albumId = album.albumId;\n                  ", "          if (album.albumId == albumId) {\n     ", "um ${testNum} album.albumId: ${album.albumId}`)", "f (album.albumId == albumId) {\n                ", ";\n            const albumId = album.albumId;\n\n "], "files": ["MediaScannerFrameWork1.0.js", "albumTestCallBack.test.js", "albumTestPromise.test.js", "fetchFileResultPromise.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "albumName", "api_method_all": "albumName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 73, "since": 7, "api_used": "\u662f", "lines": ["ed ||\n        album.albumName == undefined ||\n   ", "}\n            album.albumName = newName;\n\n       ", "me(old) = ' + album.albumName);\n            let n", "me(old) = ' + album.albumName);\n            const", "Modify 003_04 album.albumName(old) = ' + album.al", ";\n            album.albumName = newName;\n        ", "    if (firstObject.albumName != 'Camera') {\n    ", "Modify 003_03 album.albumName(old) = ' + album.al", "Modify 003_01 album.albumName(old) = ' + album.al", ".albumName: ${album.albumName}`);\n    console.inf", "Modify 003_02 album.albumName(old) = ' + album.al", "um name = ' + album.albumName);\n            conso", "Modify 003_06 album.albumName(old) = ' + album.al", "um name = ' + album.albumName);\n                 ", "um ${testNum} album.albumName: ${album.albumName}", "== albumId && album.albumName == newName) {\n     ", ";\n            album.albumName = newName;\n\n       ", "Modify 003_05 album.albumName(old) = ' + album.al", " expect(firstObject.albumName == 'Camera').assert"], "files": ["MediaScannerFrameWork1.0.js", "albumTestCallBack.test.js", "albumTestPromise.test.js", "fetchFileResultPromise.test.js", "filekeyTestCallBack.test.js", "filekeyTestPromise.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "albumUri", "api_method_all": "readonly albumUri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": [";\n            album.albumUri = 'testalbumUri';\n ", "um ${testNum} album.albumUri: ${album.albumUri}`", "m.albumUri: ${album.albumUri}`);\n    console.inf", "bum.albumUri = 'testalbumUri';\n            expec", "     : Modify Album albumUri\n     * @tc.size    ", "fy 006_01 003 album.albumUri error =  album.cove", " expect(firstObject.albumUri != undefined).asser", "ryTest :firstObject.albumUri:' + firstObject.alb", "Uri:' + firstObject.albumUri);\n            }\n\n  ", "Uri:' + firstObject.albumUri);\n                 ", "    if (firstObject.albumUri == undefined) {\n   ", "bum.albumUri = 'testalbumUri';\n            await", "{\n            album.albumUri = 'testalbumUri';\n ", "umUri error = album.albumUri has no setter');\n  ", "ed ||\n        album.albumUri == undefined ||\n   ", "fy 006_01 003 album.albumUri error = album.album"], "files": ["albumTestCallBack.test.js", "albumTestPromise.test.js", "fetchFileResultCallBack.test.js", "fetchFileResultPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "dateModified", "api_method_all": "readonly dateModified: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 44, "since": 7, "api_used": "\u662f", "lines": ["teModified: ${album.dateModified}`);\n    console.inf", " Access to the file dateModified and validation is n", "um ${testNum} album.dateModified: ${album.dateModifi", "       if (newAsset.dateModified != asset.dateModifi", "teModified != asset.dateModified) {\n                ", "          if (asset.dateModified != undefined) {\n   ", "} else if (newAsset.dateModified != undefined) {\n   ", ": 'AUDIOALBUM',\n    dateModified: 'DATE_MODIFIED',\n ", "FileAssetsBy(done, 'dateModified');\n    });\n\n    \n  "], "files": ["albumTestCallBack.test.js", "albumTestPromise.test.js", "fileTestPromise.test.js", "filekeyTestCallBack.test.js", "fileTestCallBack.test.js", "filekeyTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "count", "api_method_all": "readonly count: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 203, "since": 6, "api_used": "\u662f", "lines": ["           \"channel_count\": 1,\n              ", "= '/data/accounts/account_0/applications/';\n ", "= '/data/accounts/account_0/appdata/image/mov", "= '/data/accounts/account_0/applications'+'/R", " dirPath = '/data/accounts/account_0/applicat", "ar path1 = '/data/accounts/account_0/applicat", "= '/data/accounts/account_0/appdata/ohos.acts", "ovingGif = '/data/accounts/account_0/appdata/", " pathJpg = '/data/accounts/account_0/appdata/", "= '/data/accounts/account_0/appdata/image/tes", "URCEPATH = '/data/accounts/account_0/appdata/", "           \"channel_count\": 2,\n              ", "pathTiff = '/data/accounts/account_0/appdata/", "           \"channel_count\": 1,\n            \"s", " pathBmp = '/data/accounts/account_0/appdata/", " pathPng = '/data/accounts/account_0/appdata/", "           \"channel_count\": 2,\n            \"s", "hExifJpg = '/data/accounts/account_0/appdata/", "= '/data/accounts/account_0/appdata/RecTest'+", " dirPath = '/data/accounts/account_0/appdata/", " pathGif = '/data/accounts/account_0/appdata/"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "relativePath", "api_method_all": "readonly relativePath: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 65, "since": 6, "api_used": "\u662f", "lines": ["    if (firstObject.relativePath != 'Camera/') {\n   ", "\n\n            asset.relativePath = newrelativePath;\n", "um ${testNum} album.relativePath: ${album.relativePa", "t.relativePath = newrelativePath;\n            const ", "expect(targetObject.relativePath == 'Camera/').asser", " expect(firstObject.relativePath == 'Camera/').asser", "\n            let newrelativePath = path1;\n          ", "  expect(lastObject.relativePath == 'Camera/').asser", "();\n            let relativePath = asset.relativePat", "ath:' + firstObject.relativePath);\n            }\n\n  ", "lativePath: ${album.relativePath}`);\n    console.inf", "elativePath = asset.relativePath;\n            let ne", "\n                newrelativePath = path2;\n          ", "ath:' + firstObject.relativePath);\n                 ", "h1;\n            if (relativePath == path1) {\n       ", ".relativePath == newrelativePath) {\n                ", "  expect(nextObject.relativePath == 'Camera/').asser", "t.id == id && asset.relativePath == newrelativePath)", "ryTest :firstObject.relativePath:' + firstObject.rel", "ed ||\n        album.relativePath == undefined ||\n   "], "files": ["albumTestCallBack.test.js", "albumTestPromise.test.js", "fileTestPromise.test.js", "fetchFileResultPromise.test.js", "fileAssetPromise2.test.js", "fileAssetCallBack2.test.js", "fileAsset2.test.js", "fileTestCallBack.test.js", "fetchFileResultCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Album", "api_method_name": "coverUri", "api_method_all": "readonly coverUri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": ["      : check album.coverUri\n     * @tc.size    ", "mUri error =  album.coverUri has no setter');\n  ", "ed ||\n        album.coverUri == undefined\n    ) ", "(asset.uri == album.coverUri).assertTrue();\n    ", "y {\n            let coverUrifetchOp = {\n        ", "m.coverUri: ${album.coverUri}`);\n}\nfunction chec", "um ${testNum} album.coverUri: ${album.coverUri}`", "overuri = ' + album.coverUri);\n                 ", "bum.coverUri = 'testcoverUri';\n            expec", "overuri = ' + album.coverUri);\n                c", "bum.coverUri = 'testcoverUri';\n            await", ";\n            album.coverUri = 'testcoverUri';\n ", "{\n            album.coverUri = 'testcoverUri';\n ", "album.getFileAssets(coverUrifetchOp);\n          ", "c.name      : album.coverUri\n     * @tc.desc    "], "files": ["albumTestCallBack.test.js", "albumTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DirectoryType", "api_method_all": "enum DirectoryType {\n    \n    DIR_CAMERA = 0,\n    \n    DIR_VIDEO,\n    \n    DIR_IMAGE,\n    \n    DIR_AUDIO,\n    \n    DIR_DOCUMENTS,\n    \n    DIR_DOWNLOAD\n  }", "api_method_name": "DirectoryType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["ectory(mediaLibrary.DirectoryType.DIR_IMAGE);\n       ", "UDIO = mediaLibrary.DirectoryType.DIR_AUDIO;\n\n       ", "ectory(mediaLibrary.DirectoryType.DIR_VIDEO);\n    let", "MERA = mediaLibrary.DirectoryType.DIR_CAMERA;\n\n      ", "ectory(mediaLibrary.DirectoryType.DIR_VIDEO);\n\n      ", "ENTS = mediaLibrary.DirectoryType.DIR_DOCUMENTS;\n\nlet", "IDEO = mediaLibrary.DirectoryType.DIR_VIDEO;\nlet DIR_", "ectory(mediaLibrary.DirectoryType.DIR_IMAGE);\n\n      ", "UDIO = mediaLibrary.DirectoryType.DIR_AUDIO;\nlet DIR_", "IDEO = mediaLibrary.DirectoryType.DIR_VIDEO;\n\n       ", "MERA = mediaLibrary.DirectoryType.DIR_CAMERA;\nlet DIR", "ectory(mediaLibrary.DirectoryType.DIR_DOWNLOAD);\n    ", "ectory(mediaLibrary.DirectoryType.DIR_AUDIO);\n       ", "MAGE = mediaLibrary.DirectoryType.DIR_IMAGE;\nlet DIR_", "ENTS = mediaLibrary.DirectoryType.DIR_DOCUMENTS;\n\n   ", "eObj = mediaLibrary.DirectoryType;\n\nlet DIR_CAMERA = ", "MAGE = mediaLibrary.DirectoryType.DIR_IMAGE;\n\n       ", "ectory(mediaLibrary.DirectoryType.DIR_VIDEO);\n       "], "files": ["mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "RecorderLocalTestAudioFUNC.test.js", "fileTestPromise.test.js", "fileAssetPromise2.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAsset2.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileTestCallBack.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DirectoryType", "api_method_name": "DIR_CAMERA", "api_method_all": "DIR_CAMERA = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["brary.DirectoryType.DIR_CAMERA;\n\n            const", "brary.DirectoryType.DIR_CAMERA;\n\n            media", "brary.DirectoryType.DIR_CAMERA;\nlet DIR_VIDEO = me", " {\n\n            let DIR_CAMERA = mediaLibrary.Dire", ".getPublicDirectory(DIR_CAMERA);\n\n            expe", ".getPublicDirectory(DIR_CAMERA, async (err, dicRes", "DirectoryType;\n\nlet DIR_CAMERA = mediaLibrary.Dire", "y {\n            let DIR_CAMERA = mediaLibrary.Dire"], "files": ["mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DirectoryType", "api_method_name": "DIR_VIDEO", "api_method_all": "DIR_VIDEO,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 28, "since": 8, "api_used": "\u662f", "lines": ["brary.DirectoryType.DIR_VIDEO);\n    let mediaType", "brary.DirectoryType.DIR_VIDEO);\n    let dataUri =", "brary.DirectoryType.DIR_VIDEO;\nlet DIR_IMAGE = me", "brary.DirectoryType.DIR_VIDEO;\n\n            media", "brary.DirectoryType.DIR_VIDEO;\n\n            const", "brary.DirectoryType.DIR_VIDEO);\n        let media", "brary.DirectoryType.DIR_VIDEO);\n\n            cons", "y {\n            let DIR_VIDEO = mediaLibrary.Dire", ".getPublicDirectory(DIR_VIDEO);\n            conso", ".getPublicDirectory(DIR_VIDEO, async (err, dicRes", "ype.DIR_CAMERA;\nlet DIR_VIDEO = mediaLibrary.Dire", "brary.DirectoryType.DIR_VIDEO);\n        let dataU", "brary.DirectoryType.DIR_VIDEO);\n            const"], "files": ["mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "RecorderLocalTestAudioFUNC.test.js", "fileTestPromise.test.js", "fileAssetPromise2.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAsset2.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileTestCallBack.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DirectoryType", "api_method_name": "DIR_IMAGE", "api_method_all": "DIR_IMAGE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 30, "since": 8, "api_used": "\u662f", "lines": [".getPublicDirectory(DIR_IMAGE, async (err, dicRes", "brary.DirectoryType.DIR_IMAGE;\n\n            media", "brary.DirectoryType.DIR_IMAGE);\n\n            cons", "brary.DirectoryType.DIR_IMAGE);\n            const", "brary.DirectoryType.DIR_IMAGE;\nlet DIR_AUDIO = me", " getPublicDirectory DIR_IMAGE\n     * @tc.size    ", "brary.DirectoryType.DIR_IMAGE);\n        let media", "brary.DirectoryType.DIR_IMAGE);\n    let mediaType", "Type.DIR_VIDEO;\nlet DIR_IMAGE = mediaLibrary.Dire", "y {\n            let DIR_IMAGE = mediaLibrary.Dire", ".getPublicDirectory(DIR_IMAGE);\n\n            expe", "brary.DirectoryType.DIR_IMAGE;\n\n            const"], "files": ["mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fileTestPromise.test.js", "fileAssetPromise2.test.js", "fileAssetCallBack2.test.js", "fileAsset2.test.js", "fileTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DirectoryType", "api_method_name": "DIR_AUDIO", "api_method_all": "DIR_AUDIO,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 25, "since": 8, "api_used": "\u662f", "lines": ["brary.DirectoryType.DIR_AUDIO;\n\n            const", "brary.DirectoryType.DIR_AUDIO);\n    let mediaType", "y {\n            let DIR_AUDIO = mediaLibrary.Dire", "Type.DIR_IMAGE;\nlet DIR_AUDIO = mediaLibrary.Dire", "brary.DirectoryType.DIR_AUDIO);\n            const", "brary.DirectoryType.DIR_AUDIO;\n\n            media", "brary.DirectoryType.DIR_AUDIO);\n        let media", "brary.DirectoryType.DIR_AUDIO);\n    let audioAlbu", ".getPublicDirectory(DIR_AUDIO, async (err, dicRes", ".getPublicDirectory(DIR_AUDIO);\n\n            expe", "brary.DirectoryType.DIR_AUDIO;\nlet DIR_DOCUMENTS "], "files": ["mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fileTestPromise.test.js", "fileTestCallBack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DirectoryType", "api_method_name": "DIR_DOCUMENTS", "api_method_all": "DIR_DOCUMENTS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["y {\n            let DIR_DOCUMENTS = mediaLibrary.Dire", "brary.DirectoryType.DIR_DOCUMENTS);\n    let mediaType", "Type.DIR_AUDIO;\nlet DIR_DOCUMENTS = mediaLibrary.Dire", "brary.DirectoryType.DIR_DOCUMENTS;\n\n            media", ".getPublicDirectory(DIR_DOCUMENTS);\n\n            expe", "brary.DirectoryType.DIR_DOCUMENTS;\n\nlet imageType = m", ".getPublicDirectory(DIR_DOCUMENTS, async (err, dicRes", "brary.DirectoryType.DIR_DOCUMENTS);\n        let media", "brary.DirectoryType.DIR_DOCUMENTS;\n\n            const"], "files": ["mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_all": "interface MediaLibrary {\n    \n    getPublicDirectory(type: DirectoryType, callback: AsyncCallback<string>): void;\n    \n    getPublicDirectory(type: DirectoryType): Promise<string>;\n    \n    getFileAssets(options: MediaFetchOptions, callback: AsyncCallback<FetchFileResult>): void;\n    \n    getFileAssets(options: MediaFetchOptions): Promise<FetchFileResult>;\n    \n    on(type: 'deviceChange'|'albumChange'|'imageChange'|'audioChange'|'videoChange'|'fileChange'|'remoteFileChange', callback: Callback<void>): void;\n    \n     off(type: 'deviceChange'|'albumChange'|'imageChange'|'audioChange'|'videoChange'|'fileChange'|'remoteFileChange', callback?: Callback<void>): void;\n    \n    createAsset(mediaType: MediaType, displayName: string, relativePath: string, callback: AsyncCallback<FileAsset>): void;\n    \n    createAsset(mediaType: MediaType, displayName: string, relativePath: string): Promise<FileAsset>;\n    \n    deleteAsset(uri: string, callback: AsyncCallback<void>): void;\n    \n    deleteAsset(uri: string): Promise<void>;\n    \n    getAlbums(options: MediaFetchOptions, callback: AsyncCallback<Array<Album>>): void;\n    \n    getAlbums(options: MediaFetchOptions): Promise<Array<Album>>;\n    \n    storeMediaAsset(option: MediaAssetOption, callback: AsyncCallback<string>): void;\n    \n    storeMediaAsset(option: MediaAssetOption): Promise<string>;\n    \n    startImagePreview(images: Array<string>, index: number, callback: AsyncCallback<void>): void;\n    \n    startImagePreview(images: Array<string>, callback: AsyncCallback<void>): void;\n    \n    startImagePreview(images: Array<string>, index?: number): Promise<void>;\n    \n    startMediaSelect(option: MediaSelectOption, callback: AsyncCallback<Array<string>>): void;\n    \n    startMediaSelect(option: MediaSelectOption): Promise<Array<string>>;\n    \n    getActivePeers(callback: AsyncCallback<Array<PeerInfo>>): void;\n    \n    getActivePeers(): Promise<Array<PeerInfo>>;\n    \n    getAllPeers(callback: AsyncCallback<Array<PeerInfo>>): void;\n    \n    getAllPeers(): Promise<Array<PeerInfo>>;\n    \n    release(callback: AsyncCallback<void>): void;\n    \n    release(): Promise<void>;\n  }", "api_method_name": "MediaLibrary", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 1320, "since": 6, "api_used": "\u662f", "lines": ["e = mediaLibrary.getMediaLibrary();\n\tlet ringtonePla", "                   'MediaLibraryTest : SUB_MEDIA_MED", "diaLibraryTest : getMediaLibrary IN');\n    var media", "istributed. Promise MediaLibraryTest: afterAll\uff1a  Tes", "t = mediaLibrary.getMediaLibrary();\n        let file", "t = mediaLibrary.getMediaLibrary();\n    let fileKeyO", "diaLibraryTest : getMediaLibrary OUT');\n    beforeAl", "istributed. Promise MediaLibraryTest: beforeAll\uff1a Pre", "istributed. Promise MediaLibraryTest: afterEach\uff1a Tes", ";\n    console.info('MediaLibraryTest : getMediaLibra", "a = mediaLibrary.getMediaLibrary(context);\n    befor", "      console.info('MediaLibraryTest : SUB_MEDIA_MED", "istributed. Promise MediaLibraryTest: beforeEach\uff1aPre", "a = mediaLibrary.getMediaLibrary(context);\n    conso"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "fetchFileResultCallBack.test.js", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favtrashTestCallBack.test.js", "favoriteTestCallBack.test.js", "distributedPromise.test.js", "getAllPeersTestPromise.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "getAllPeersTestCallback.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "getAllPeersDeviceTestCallback.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "getPublicDirectory", "api_method_all": "getPublicDirectory(type: DirectoryType, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 93, "since": 8, "api_used": "\u662f", "lines": ["`MediaLibraryTest : getPublicDirectory 001 failed, error: ${error}`);\n        ", "`MediaLibraryTest : getPublicDirectory 005 failed, error: ${error}`);\n        ", " path = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_IMAGE);\n", "path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_IMAGE);\n", "esult = await media.getPublicDirectory(DIR_CAMERA);\n\n            expect(dicRes", "`MediaLibraryTest : getPublicDirectory 004 failed, error: ${error}`);\n        ", " path = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_AUDIO);\n", "`MediaLibraryTest : getPublicDirectory 002 failed, error: ${error}`);\n        ", "\n\n            media.getPublicDirectory(DIR_CAMERA, async (err, dicResult) => {", "\n\n            media.getPublicDirectory(DIR_IMAGE, async (err, dicResult) => {\n", "  * @tc.desc      : getPublicDirectory 110\n     * @tc.size      : MEDIUM\n     ", "esult = await media.getPublicDirectory(DIR_VIDEO);\n            console.log(dic", " path = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_VIDEO);\n", "  * @tc.name      : getPublicDirectory\n     * @tc.desc      : getPublicDirecto", " path = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_DOWNLOAD", "\n\n            media.getPublicDirectory(DIR_AUDIO, async (err, dicResult) => {\n", "`MediaLibraryTest : getPublicDirectory 006 failed, error: ${error}`);\n        ", "\n\n            media.getPublicDirectory(DIR_DOCUMENTS, async (err, dicResult) =", "{\n            media.getPublicDirectory(110, async (err, dicResult) => {\n      ", "\n\n            media.getPublicDirectory(DIR_VIDEO, async (err, dicResult) => {\n", "path2 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_VIDEO);\n", "  * @tc.desc      : getPublicDirectory DIR_IMAGE\n     * @tc.size      : MEDIUM", "`MediaLibraryTest : getPublicDirectory 003 failed, error: ${error}`);\n        ", "h = await mediaTest.getPublicDirectory(mediaLibrary.DirectoryType.DIR_VIDEO);\n"], "files": ["mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "RecorderLocalTestAudioFUNC.test.js", "fileTestPromise.test.js", "fileAssetPromise2.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAsset2.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileTestCallBack.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "getPublicDirectory", "api_method_all": "getPublicDirectory(type: DirectoryType): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "getFileAssets", "api_method_all": "getFileAssets(options: MediaFetchOptions, callback: AsyncCallback<FetchFileResult>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 525, "since": 7, "api_used": "\u662f", "lines": ["esult = await album.getFileAssets(albumfetchOpOne);\n            expect(fe", "info('ALBUM_PROMISE getFileAssets 002_06 passed');\n            expect(fal", "info('ALBUM_PROMISE getFileAssets 002_07 passed');\n            expect(fal", "esult = await album.getFileAssets(coverUrifetchOp);\n            const ass", ";\n            album.getFileAssets(imgAndVideoAndAudioAlbumfetchOp, (error", ";\n            album.getFileAssets(albumfetchOpOne, (error, fetchFileResul", ";\n            album.getFileAssets(audioAlbumfetchOp, (error, fetchFileRes", ";\n            album.getFileAssets(videoAndAudioAlbumfetchOp, (error, fetc", "esult = await album.getFileAssets(audioAlbumfetchOp);\n            expect(", "esult = await album.getFileAssets(allTypefetchOp);\n\n            let datas", "{\n            media.getFileAssets(fileFetchOp, (error, fileAssets) => {\n ", "t = await mediaTest.getFileAssets(fetchOp);\n      fileAsset = await fetch", "esult = await album.getFileAssets(imageAndVideoAlbumfetchOp);\n           ", "esult = await album.getFileAssets(videoAndAudioAlbumfetchOp);\n           ", "esult = await album.getFileAssets(videoAlbumfetchOp);\n            expect(", ";\n            album.getFileAssets(imageAlbumfetchOp, (error, fetchFileRes", ";\n            album.getFileAssets(videoAlbumfetchOp, (error, fetchFileRes", ";\n            album.getFileAssets(imageAndAudioAlbumfetchOp, (error, fetc", "esult = await album.getFileAssets(imgAndVideoAndAudioAlbumfetchOp);\n     ", "esult = await album.getFileAssets(allTypefetchOp);\n            expect(fet", ";\n            album.getFileAssets(allTypefetchOp, (error, fetchFileResult", "esult = await album.getFileAssets(imageAlbumfetchOp);\n            expect(", "{\n            media.getFileAssets(imageFetchOp, (error, fileAssets) => {\n", "esult = await album.getFileAssets(coverUrifetchOp);\n                    c", "nfo('ALBUM_CALLBACK getFileAssets 002_08 passed');\n            expect(fal", "esult = await album.getFileAssets(imageAndAudioAlbumfetchOp);\n           ", "nfo('ALBUM_CALLBACK getFileAssets 002_07 passed');\n            expect(fal", "t = await mediaTest.getFileAssets(fetchOp);\n            fileAsset = await", "nfo('ALBUM_CALLBACK getFileAssets 002_06 passed');\n            expect(fal", ";\n            album.getFileAssets(imageAndVideoAlbumfetchOp, (error, fetc", "info('ALBUM_PROMISE getFileAssets 002_08 passed');\n            expect(fal"], "files": ["fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "fetchFileResultPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "albumTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "fileAssetPromise2.test.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "RecorderLocalTestAudioAPI.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "albumTestCallBack.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "getFileAssets", "api_method_all": "getFileAssets(options: MediaFetchOptions): Promise<FetchFileResult>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "on", "api_method_all": "on(type: 'deviceChange'|'albumChange'|'imageChange'|'audioChange'|'videoChange'|'fileChange'|'remoteFileChange', callback: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 6, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "off", "api_method_all": "off(type: 'deviceChange'|'albumChange'|'imageChange'|'audioChange'|'videoChange'|'fileChange'|'remoteFileChange', callback?: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 125, "since": 8, "api_used": "\u662f", "lines": ["           audioRen.off('markReach');\n            audioRen.on('", "8),\n                offset: 0,\n                stride: 8,\n     ", "0),\n                offset: 21,\n                stride: 8,\n    ", "0),\n                offset: 0,\n                stride: 8,\n     ", " readPixels-promise(offset > buffer)\n     * @tc.desc      : 1.c", "th;\n            let offset = 0;\n            const incSouce = im", "('TC_053-1 0011 ' + offset);\n            }\n            if (ret)", "fo('TC_053 0011 ' + offset);\n            }\n            if (ret)", "stimagebuffer.slice(offset, offset + bufferSize);\n             ", " periodReach - On - off -on\n    * @tc.desc      : AudioRenderer", "           offset = offset + oneStep.length;\n                co", "           audioRen.off('periodReach');\n            });\n\n      ", "   audioCapCallBack.off('periodReach');\n        await sleep(100", "           audioRen.off('periodReach');\n            audioRen.on", "                    offset: 0,\n                    stride: 8,\n ", "\n            while (offset < testimagebuffer.length) {\n        ", "  }\n                offset = offset + oneStep.length;\n         ", "        inputobject.offset = 0;\n                if (frameCnt==1", "   audioCapCallBack.off('markReach');\n        await sleep(1000)", "                    offset: 0,\n                        stride: ", "        inputobject.offset = 0;\n                inputobject.len", "           audioRen.off('periodReach');\n        });\n\n        co", " markReached - On - off -on\n    * @tc.desc      : AudioRenderer", "uffer.slice(offset, offset + bufferSize);\n                conso"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "createAsset", "api_method_all": "createAsset(mediaType: MediaType, displayName: string, relativePath: string, callback: AsyncCallback<FileAsset>): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 200, "since": 8, "api_used": "\u662f", "lines": ["asset = await media.createAsset(mediaType, 'image08.jpg', path);\n      ", ";\n            media.createAsset(\n                imageType,\n           ", "sset2 = await media.createAsset(videoType, displayName, path);\n        ", "i = await mediaTest.createAsset(mediaType, displayName, publicPath);\n  ", "nfo('ASSET_CALLBACK createAsset 001_11 failed, message = ' + error);\n  ", "nfo('ASSET_CALLBACK createAsset 002_08 failed, message = ' + error);\n  ", "asset = await media.createAsset(mediaType, 'image01.jpg', path);\n      ", "nfo('ASSET_CALLBACK createAsset 002_11 failed, message = ' + error);\n  ", "sset2 = await media.createAsset(imageType, displayName, path);\n        ", "asset = await media.createAsset(mediaType, 'image09.jpg', path);\n      ", "asset = await media.createAsset(mediaType, 'image13.jpg', path);\n      ", "asset = await media.createAsset(mediaType, 'image07.jpg', path);\n      ", "asset = await media.createAsset(mediaType, 'image03.jpg', path);\n      ", "asset = await media.createAsset(mediaType, 'image05.jpg', path);\n      ", "asset = await media.createAsset(mediaType, 'image14.jpg', path);\n      ", "asset = await media.createAsset(mediaType, 'image12.jpg', path);\n      ", "nfo('ASSET_CALLBACK createAsset 001_08 failed, message = ' + error);\n  ", "asset = await media.createAsset(mediaType, 'image02.jpg', path);\n      ", "asset = await media.createAsset(mediaType, 'image04.jpg', path);\n      ", "nfo('ASSET_CALLBACK createAsset 002_01 failed' + error);\n            ex", "asset = await media.createAsset(mediaType, 'image06.jpg', path);\n      ", "asset = await media.createAsset(mediaType, 'image0702.jpg', path);\n    ", ";\n            media.createAsset(\n                audioType,\n           ", "asset = await media.createAsset(mediaType, 'image15.jpg', path);\n      ", "asset = await media.createAsset(mediaType, 'image11.jpg', path);\n      ", "asset = await media.createAsset(mediaType, 'image10.jpg', path);\n      ", ";\n            media.createAsset(\n                videoType,\n           ", "nfo('ASSET_CALLBACK createAsset 001_01 failed, message = ' + error);\n  "], "files": ["mediaLibraryTestPromise.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "RecorderLocalTestAudioFUNC.test.js", "fileTestPromise.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileTestCallBack.test.js", "favtrashTestCallBack.test.js", "VideoRecorderFuncCallbackTest.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets", "favtrashTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "createAsset", "api_method_all": "createAsset(mediaType: MediaType, displayName: string, relativePath: string): Promise<FileAsset>;", "api_type": "Promise", "api_args_count": 3, "api_level": 21, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["GE;\n    await media.createAsset(mediaType, \"image.jpg\", path1).then (fu", "IO;\n    await media.createAsset(mediaType, \"audio.mp3\", path1).then (fu", "EO;\n    await media.createAsset(mediaType, \"video.mp4\", path1).then (fu", "IO;\n    await media.createAsset(mediaType, \"audio.0GG\", path1).then (fu", "        await media.createAsset(mediaType, \"audio.aac\", path1).then (fu", "LE;\n    await media.createAsset(mediaType, \"Scan_Doc.txt\", path1).then ", "        await media.createAsset(mediaType, \"audio.flac\", path1).then (f", "        await media.createAsset(mediaType, \"audio.wav\", path1).then (fu", "        await media.createAsset(mediaType, \"Doc.txt\", path1).then (func"], "files": ["MediaScannerFrameWork1.0.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "deleteAsset", "api_method_all": "deleteAsset(uri: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["`MediaLibraryTest : deleteAsset 002 failed, error: ${error}`);\n        ", "  * @tc.name      : deleteAsset\n     * @tc.desc      : Delete File Asse", "  * @tc.name      : deleteAsset\n     * @tc.desc      : Delete File by A", "        await media.deleteAsset('aaaa' + asset1.uri + 'aaaa', async () ", "        await media.deleteAsset(asset1.uri);\n\n            const fetchFi", "  * @tc.name      : deleteAsset\n     * @tc.desc      : delete album\n   ", "'MediaLibraryTest : deleteAsset 002 passed');\n            expect(true).", "`MediaLibraryTest : deleteAsset 001 failed, error: ${error}`);\n        ", "        await media.deleteAsset(asset.uri);\n                }\n         ", "\n\n            media.deleteAsset(asset1.uri, async () => {\n             ", "        await media.deleteAsset(asset.uri);\n            }\n\n            ", "'MediaLibraryTest : deleteAsset 002 failed');\n            expect(false)", "        await media.deleteAsset('aaaa' + asset1.uri + 'aaaa');\n        ", "              media.deleteAsset(asset.uri, async () => {\n              "], "files": ["albumTestCallBack.test.js", "mediaLibraryTestCallBack.test.js", "albumTestPromise.test.js", "mediaLibraryTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "deleteAsset", "api_method_all": "deleteAsset(uri: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "getAlbums", "api_method_all": "getAlbums(options: MediaFetchOptions, callback: AsyncCallback<Array<Album>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 93, "since": 7, "api_used": "\u662f", "lines": ["{\n            media.getAlbums(audioAlbumfetchOp, (err, albumList) => ", "mList = await media.getAlbums(videoAlbumfetchOp);\n            const a", "{\n            media.getAlbums(fileHasArgsfetchOp4, (err, albumList) =", "{\n            media.getAlbums(videoAlbumfetchOp, (err, albumList) => ", "{\n            media.getAlbums('666', (err, albumList) => {\n          ", "{\n            media.getAlbums(666, (err, albumList) => {\n            ", "mList = await media.getAlbums(allTypefetchOp);\n                    le", "mList = await media.getAlbums(allTypefetchOp);\n            const albu", "mList = await media.getAlbums(audioAlbumfetchOp);\n            const a", "{\n            media.getAlbums(imageAlbumfetchOp, (err, albumList) => ", "mList = await media.getAlbums(imageAndAudioAlbumfetchOp);\n           ", "mList = await media.getAlbums(imgAndVideoAndAudioAlbumfetchOp);\n     ", "{\n            media.getAlbums(true, (err, albumList) => {\n           ", "mList = await media.getAlbums(imageAlbumfetchOp);\n            const a", "mList = await media.getAlbums(imageAndVideoAlbumfetchOp);\n           ", "{\n            media.getAlbums(0, (err, albumList) => {\n              ", "mList = await media.getAlbums(videoAndAudioAlbumfetchOp);\n           ", "mList = await media.getAlbums(albumfetchOpNone);\n            console.", "{\n            media.getAlbums(fileHasArgsfetchOp5, (err, albumList) =", "{\n            media.getAlbums(imageAndAudioAlbumfetchOp, (err, albumL", "mList = await media.getAlbums(albumfetchOpOne);\n            const alb", "{\n            media.getAlbums(false, (err, albumList) => {\n          ", "{\n            media.getAlbums(videoAndAudioAlbumfetchOp, (err, albumL", ";\n            media.getAlbums(albumfetchOpNone, (error, albumList) =>", "{\n            media.getAlbums(allTypefetchOp, (err, albumList) => {\n ", "{\n            media.getAlbums(fileHasArgsfetchOp3, (err, albumList) =", "\n\n            media.getAlbums(albumfetchOpNone, (error, albumList) =>", "{\n            media.getAlbums(imageAndVideoAlbumfetchOp, (err, albumL"], "files": ["MediaScannerFrameWork1.0.js", "albumGetFileAssetsPromise.test.js", "albumTestCallBack.test.js", "albumTestPromise.test.js", "fileAssetPromise2.test.js", "fileAssetCallBack2.test.js", "fileAsset2.test.js", "albumGetFileAssetsCallback.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "getAlbums", "api_method_all": "getAlbums(options: MediaFetchOptions): Promise<Array<Album>>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "storeMediaAsset", "api_method_all": "storeMediaAsset(option: MediaAssetOption, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "storeMediaAsset", "api_method_all": "storeMediaAsset(option: MediaAssetOption): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "startImagePreview", "api_method_all": "startImagePreview(images: Array<string>, index: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "startImagePreview", "api_method_all": "startImagePreview(images: Array<string>, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "startImagePreview", "api_method_all": "startImagePreview(images: Array<string>, index?: number): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "startMediaSelect", "api_method_all": "startMediaSelect(option: MediaSelectOption, callback: AsyncCallback<Array<string>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "startMediaSelect", "api_method_all": "startMediaSelect(option: MediaSelectOption): Promise<Array<string>>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "getActivePeers", "api_method_all": "getActivePeers(callback: AsyncCallback<Array<PeerInfo>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 31, "since": 8, "api_used": "\u662f", "lines": ["ACTIVE_PEER_PROMISE getActivePeers 001_03 activePeer.deviceName = '\n      ", "rList = await media.getActivePeers();\n            isOnline = allPeerList[0", ";\n            media.getActivePeers((error, allPeerList) => {\n             ", "ACTIVE_PEER_PROMISE getActivePeers 001_04 activePeer.deviceName = '\n      ", "ACTIVE_PEER_PROMISE getActivePeers 001_01 fail, message = ' + error);\n    ", "CTIVE_PEER_CALLBACK getActivePeers 001_02 fail, message = ' + error);\n    ", "rList = await media.getActivePeers();\n            activePeer = activePeerL", "CTIVE_PEER_CALLBACK getActivePeers 001_04 activePeer.deviceName = '\n      ", "CTIVE_PEER_CALLBACK getActivePeers 001_03 activePeer.deviceName = '\n      ", "peers = await media.getActivePeers();\n            console.info('MediaLibra", "rList = await media.getActivePeers();\n            networkId = allPeerList[", "CTIVE_PEER_CALLBACK getActivePeers 001_03 fail, message = ' + error);\n    ", ";\n            media.getActivePeers((error, activePeerList) => {\n          ", "ACTIVE_PEER_PROMISE getActivePeers 001_02 activePeer.deviceName = '\n      ", "CTIVE_PEER_CALLBACK getActivePeers 001_01 fail, message = ' + error);\n    ", "ACTIVE_PEER_PROMISE getActivePeers 001_02 fail, message = ' + error);\n    ", "ACTIVE_PEER_PROMISE getActivePeers 001_04 fail, message = ' + error);\n    ", "ACTIVE_PEER_PROMISE getActivePeers 001_03 fail, message = ' + error);\n    ", "ACTIVE_PEER_PROMISE getActivePeers 001_01 activePeer.deviceName = '\n      ", "CTIVE_PEER_CALLBACK getActivePeers 001_02 activePeer.deviceName = '\n      ", "CTIVE_PEER_CALLBACK getActivePeers 001_04 fail, message = ' + error);\n    ", "CTIVE_PEER_CALLBACK getActivePeers 001_01 activePeer.deviceName = '\n      ", ";\n            media.getActivePeers((error, peers) => {\n                exp"], "files": ["getAllPeersTestCallback.test.js", "getAllPeersTestPromise.test.js", "distributedCallback.test.js", "getAllPeersDeviceTestCallback.test.js", "distributedPromise.test.js", "distributed.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "getActivePeers", "api_method_all": "getActivePeers(): Promise<Array<PeerInfo>>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "getAllPeers", "api_method_all": "getAllPeers(callback: AsyncCallback<Array<PeerInfo>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 65, "since": 8, "api_used": "\u662f", "lines": [": ALL_PEER_CALLBACK getAllPeers 001_02 fail, message = ' + error);\n    ", "peers = await media.getAllPeers();\n            done();\n        } catch ", ": ALL_PEER_CALLBACK getAllPeers 001_02 peer.deviceName = '\n            ", ": ALL_PEER_CALLBACK getAllPeers 001_05 peer.deviceName = '\n            ", " : ALL_PEER_PROMISE getAllPeers 001_01 fail, message = ' + error);\n    ", " : ALL_PEER_PROMISE getAllPeers 001_02 peer.deviceName = ' + peer.devic", " : ALL_PEER_PROMISE getAllPeers 001_01 peer.networkId = ' + networkId);", ": ALL_PEER_CALLBACK getAllPeers 001_01 peer.deviceName = '\n            ", "rList = await media.getAllPeers();\n            console.info('MediaLibra", ": ALL_PEER_CALLBACK getAllPeers 001_03 peer.deviceName = '\n            ", "/index';\n\ndescribe('getAllPeersTestCallback.test.js', function() {\n    ", ": ALL_PEER_CALLBACK getAllPeers 001_06 peer.deviceName = '\n            ", "rList = await media.getAllPeers();\n        expect(allPeerList[1].Device", ": ALL_PEER_CALLBACK getAllPeers 001_04 peer.deviceName = '\n            ", ";\n            media.getAllPeers((error, allPeerList) => {\n             ", "ne();\n        media.getAllPeers((error, allPeerList) => {\n            i", ": ALL_PEER_CALLBACK getAllPeers 001_03 fail, message = ' + error);\n    ", ": ALL_PEER_CALLBACK getAllPeers 001_06 fail, message = ' + error);\n    ", ";\n            media.getAllPeers((error, peers) => {\n                exp", "/index';\n\ndescribe('getAllPeersDeviceTestCallback.test.js', function() ", ": ALL_PEER_CALLBACK getAllPeers 001_01 fail, message = ' + error);\n    ", ": ALL_PEER_CALLBACK getAllPeers 001_05 fail, message = ' + error);\n    ", " : ALL_PEER_PROMISE getAllPeers 001_01 peer.deviceName = ' + peer.devic", "rList = await media.getAllPeers();\n            peer = allPeerList[0];\n ", "rList = await media.getAllPeers();\n            peer = allPeerList[1];\n ", ": ALL_PEER_CALLBACK getAllPeers 001_01 peer.networkId = '\n             ", " : ALL_PEER_PROMISE getAllPeers 001_02 fail, message = ' + error);\n    ", " : ALL_PEER_PROMISE getAllPeers 001_01 peer.isOnline = ' + isOnline);\n ", ": ALL_PEER_CALLBACK getAllPeers 001_01 peer.isOnline = ' + isOnline);\n ", "/index';\n\ndescribe('getAllPeersDeviceTestPromise.test.js', function() {", "/index';\n\ndescribe('getAllPeersTestPromise.test.js', function() {\n    v", ": ALL_PEER_CALLBACK getAllPeers 001_04 fail, message = ' + error);\n    "], "files": ["getAllPeersTestCallback.test.js", "getAllPeersTestPromise.test.js", "List.test.js", "distributedCallback.test.js", "getAllPeersDeviceTestCallback.test.js", "distributedPromise.test.js", "distributed.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "getAllPeers", "api_method_all": "getAllPeers(): Promise<Array<PeerInfo>>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 8, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaLibrary", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 8, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_all": "interface Size {\n    \n    width: number;\n    \n    height: number;\n  }", "api_method_name": "Size", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 586, "since": 8, "api_used": "\u662f", "lines": ["t audioRen.getBufferSize();\n     console.inf", "t audioCap.getBufferSize();\n        console.", "Size);\n        totalSize = totalSize-44;\n   ", "  }\n\n     var bufferSize;\n     await audioRe", "fer size: ' + bufferSize);\n\n        var fd =", "\n\n        var bufferSize = await audioCap.ge", "   totalSize = totalSize-44;\n        console", "\n             bufferSize=data;\n         }\n  ", "RenderLog: getBufferSize :ERROR : '+err.mess", "   totalSize = totalSize-44;\n     let rlen =", "w ArrayBuffer(bufferSize);\n         rlen += ", "audioCap.read(bufferSize, true);\n           ", "lSize size: ' +totalSize);\n        totalSize", "RenderLog: getBufferSize :SUCCESS '+data);\n ", "talSize);\n     totalSize = totalSize-44;\n   ", "\n\n        var bufferSize;\n        await audi", "ing header: ' +totalSize);\n     await sleep(", "w ArrayBuffer(bufferSize);\n            rlen ", " while (rlen < totalSize) {\n            let ", "e);\n\n     var bufferSize = await audioRen.ge", "fer size: ' + bufferSize);\n\n     let ss = fi", " while (rlen < totalSize) {\n         let buf", "   if (rlen > (totalSize/2)){\n              ", "lSize size: ' +totalSize);\n     totalSize = ", "t audioRen.getBufferSize((err,data)=> {\n    ", "enderLog: File totalSize size: ' +totalSize)", "t audioRen.getBufferSize().then(async functi", ";\n            bufferSize=data;\n        }).ca", "der);\n     let totalSize = fileio.statSync(f", ");\n        let totalSize = fileio.statSync(f", "ar waitTime = (totalSize/88200);\n     var wa", "ing header: ' +totalSize);\n        let rlen "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "image.test.js", "CameraJSUnitVideoPromise.test.ets", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoRecorderAPICallbackTest.test.js", "SR000GHLLV.test.js", "VideoRecorderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitVideoAsync.test.ets", "VideoEncoderSoftwareFuncPromiseTest.test.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_name": "width", "api_method_all": "width: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 773, "since": 7, "api_used": "\u662f", "lines": ["height - \" +data[i].width + \" * \" +data[i].he", "G_TC_019 sizeArray: width * height - \" +data[", "6 sizeArrayPromise: width * height - \" +sizeA", "P_TC_087 sizeArray: width * height - \" +data[", "G_TC_055 sizeArray: width * height - \" +data[", " size0ArrayPromise: width * height - \" +sizeA", "sizeArrayPromise[i].width + \" * \" + sizeArray", "G_TC_029 sizeArray: width * height - \" +data[", "P_TC_015 sizeArray: width * height - \" +data[", "P_TC_051 sizeArray: width * height - \" +data[", "P_TC_025 sizeArray: width * height - \" +data[", "G_TC_065 sizeArray: width * height - \" +data[", "P_TC_035 sizeArray: width * height - \" +data[", "P_TC_061 sizeArray: width * height - \" +data[", "G_TC_075 sizeArray: width * height - \" +data[", "P_TC_071 sizeArray: width * height - \" +data[", "0 sizeArrayPromise: width * height - \" +sizeA", "G_TC_039 sizeArray: width * height - \" +data[", "2 sizeArrayPromise: width * height - \" +sizeA", "        })\n        .width('640px')\n        .h"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_name": "height", "api_method_all": "height: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 771, "since": 7, "api_used": "\u662f", "lines": ["rayPromise: width * height - \" +sizeArrayPromi", "th + \" * \" +data[i].height);\n                 ", " sizeArray: width * height - \" +data[i].width ", "h('640px')\n        .height('480px')\n    }\n  }\n", "sizeArrayPromise[i].height);\n            }\n   "], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PeerInfo", "api_method_all": "interface PeerInfo {\n    \n    readonly deviceName: string;\n    \n    readonly networkId: string;\n    \n    readonly deviceType: DeviceType;\n    \n    readonly isOnline: boolean;\n  }", "api_method_name": "PeerInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PeerInfo", "api_method_name": "deviceName", "api_method_all": "readonly deviceName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": ["             + peer.deviceName);\n                 ", "s 001_02 activePeer.deviceName = '\n               ", "llPeers 001_02 peer.deviceName = ' + peer.deviceNa", "viceName = ' + peer.deviceName);\n            done(", "       + activePeer.deviceName);\n        } catch (", "llPeers 001_04 peer.deviceName = '\n               ", "llPeers 001_01 peer.deviceName = '\n               ", "       + activePeer.deviceName);\n                 ", "llPeers 001_06 peer.deviceName = '\n               ", "llPeers 001_05 peer.deviceName = '\n               ", "s 001_01 activePeer.deviceName = '\n               ", "llPeers 001_01 peer.deviceName = ' + peer.deviceNa", "llPeers 001_06 peer.deviceName = ' + peer.deviceNa", "s 001_03 activePeer.deviceName = '\n               ", "s 001_04 activePeer.deviceName = '\n               ", "llPeers 001_03 peer.deviceName = ' + peer.deviceNa", "llPeers 001_02 peer.deviceName = '\n               ", "       + activePeer.deviceName);\n            done(", "llPeers 001_04 peer.deviceName = ' + peer.deviceNa", "llPeers 001_03 peer.deviceName = '\n               ", "llPeers 001_05 peer.deviceName = ' + peer.deviceNa"], "files": ["getAllPeersTestCallback.test.js", "getAllPeersTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PeerInfo", "api_method_name": "networkId", "api_method_all": "readonly networkId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["                  + networkId);\n                 ", "llPeers 001_01 peer.networkId = '\n               ", "Id = allPeerList[0].networkId;\n            consol", "eers();\n            networkId = allPeerList[0].ne", "Id = allPeerList[0].networkId;\n                  ", "                    networkId = allPeerList[0].ne", "eer.networkId = ' + networkId);\n        } catch (", "llPeers 001_01 peer.networkId = ' + networkId);\n "], "files": ["getAllPeersDeviceTestCallback.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PeerInfo", "api_method_name": "deviceType", "api_method_all": "readonly deviceType: DeviceType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 73, "since": 8, "api_used": "\u662f", "lines": [":' + audioParamsGet.deviceType);\n        }).catch(", " : UNKNOWN :'+value.deviceType;\n        }\n\n       ", ");\n\n            if (deviceTypeValue != null && dev", "                if (deviceTypeValue != null && dev", "     else if (value.deviceType == 2){\n            ", "p);\n            if (deviceTypeValue != null && dev", "     else if (value.deviceType == 15){\n           ", "ypeName}`);\n        deviceTypeValue = value.device", "lue = null;\n        deviceTypeValue = null;\n      ", "ceTypeValue = value.deviceType;\n\n    }\n\n    before", "     else if (value.deviceType == 8){\n            ", "lue = null;\n    var deviceTypeValue = null;\n    va", "DEVICE,\n            deviceType: audio.DeviceType.M", "orkRecLog: Capturer deviceType:' + audioParamsGet.", "\n\n        if (value.deviceType == 1) {\n           ", "     else if (value.deviceType == 3){\n            ", "     else if (value.deviceType == 7){\n            "], "files": ["AudioVOIP.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PeerInfo", "api_method_name": "isOnline", "api_method_all": "readonly isOnline: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["llPeers 001_01 peer.isOnline = ' + isOnline);\n  ", "eers();\n            isOnline = allPeerList[0].is", "ne = allPeerList[0].isOnline;\n            consol", "                    isOnline = allPeerList[0].is", "peer.isOnline = ' + isOnline);\n                 ", "peer.isOnline = ' + isOnline);\n        } catch (", "ne = allPeerList[0].isOnline;\n                  "], "files": ["getAllPeersDeviceTestCallback.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_all": "enum DeviceType {\n    \n    TYPE_UNKNOWN = 0,\n    \n    TYPE_LAPTOP,\n    \n    TYPE_PHONE,\n    \n    TYPE_TABLET,\n    \n    TYPE_WATCH,\n    \n    TYPE_CAR,\n    \n    TYPE_TV\n  }", "api_method_name": "DeviceType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 60, "since": 8, "api_used": "\u662f", "lines": ["eActive(audio.ActiveDeviceType.SPEAKER,(err, value", "  * @tc.desc      : DeviceType - USB_HEADSET\n     ", "eActive(audio.ActiveDeviceType.SPEAKER).then(funct", "eActive(audio.ActiveDeviceType.SPEAKER,true,(err, ", "       expect(audio.DeviceType.INVALID).assertEqua", "eActive(audio.ActiveDeviceType.SPEAKER,true, (err)", "eActive(audio.ActiveDeviceType.BLUETOOTH_SCO,true)", "eActive(audio.ActiveDeviceType.BLUETOOTH_SCO,false", "eActive(audio.ActiveDeviceType.BLUETOOTH_SCO,true,", "eActive(audio.ActiveDeviceType.BLUETOOTH_SCO,(err,", "  * @tc.name      : DeviceType - WIRED_HEADSET\n   ", ": SUB_AUDIO_MANAGER_DeviceType_003\n               ", "('SUB_AUDIO_MANAGER_DeviceType_003', 0, async func", "  deviceType: audio.DeviceType.MIC\n        };\n \n  ", "eActive(audio.ActiveDeviceType.SPEAKER,true);\n    ", "eActive(audio.ActiveDeviceType.SPEAKER,true).then(", "  * @tc.name      : DeviceType - USB_HEADSET\n     ", ": SUB_AUDIO_MANAGER_DeviceType_002\n               ", "pect(allPeerList[1].DeviceType.TYPE_TABLET).assert", ": SUB_AUDIO_MANAGER_DeviceType_001\n               ", "pect(allPeerList[1].DeviceType.TYPE_UNKNOWN).asser", "DSET == 22 || audio.DeviceType.USB_HEADSET == unde", "       expect(audio.DeviceType.WIRED_HEADSET).asse", "  * @tc.name      : DeviceType - INVALID\n         ", "pect(allPeerList[1].DeviceType.TYPE_LAPTOP).assert", "eActive(audio.ActiveDeviceType.SPEAKER,false).then", "eActive(audio.ActiveDeviceType.SPEAKER);\n         ", "eActive(audio.ActiveDeviceType.BLUETOOTH_SCO).then", "eActive(audio.ActiveDeviceType.SPEAKER,false, (err", ";\n        if (audio.DeviceType.USB_HEADSET == 22 |", "  deviceType: audio.DeviceType.MIC\n        };\n\n   ", "  * @tc.desc      : DeviceType - INVALID\n         ", "pect(allPeerList[1].DeviceType.TYPE_PHONE).assertE", "('SUB_AUDIO_MANAGER_DeviceType_001', 0, async func", "  * @tc.desc      : DeviceType - WIRED_HEADSET\n   "], "files": ["AudioVOIP.test.js", "AudioPerf.test.js", "getAllPeersDeviceTestCallback.test.js", "AudioFramework.test.js", "SR000GHQBN.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "TYPE_UNKNOWN", "api_method_all": "TYPE_UNKNOWN = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["ContentType.CONTENT_TYPE_UNKNOWN,\n        usage: aud", "rList[1].DeviceType.TYPE_UNKNOWN).assertEqual(0);\n  ", "ContentType.CONTENT_TYPE_UNKNOWN,\n    //     usage: "], "files": ["getAllPeersDeviceTestPromise.test.js", "AudioRenderer.test.js", "getAllPeersDeviceTestCallback.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "TYPE_LAPTOP", "api_method_all": "TYPE_LAPTOP,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["rList[1].DeviceType.TYPE_LAPTOP).assertEqual(1);\n  "], "files": ["getAllPeersDeviceTestCallback.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "TYPE_PHONE", "api_method_all": "TYPE_PHONE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["rList[1].DeviceType.TYPE_PHONE).assertEqual(2);\n  ", "rList[1].DeviceType.TYPE_PHONE).assertEqual(2);\n\n "], "files": ["getAllPeersDeviceTestCallback.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "TYPE_TABLET", "api_method_all": "TYPE_TABLET,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["rList[1].DeviceType.TYPE_TABLET).assertEqual(3);\n\n ", "rList[1].DeviceType.TYPE_TABLET).assertEqual(3);\n  "], "files": ["getAllPeersDeviceTestCallback.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "TYPE_WATCH", "api_method_all": "TYPE_WATCH,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["rList[1].DeviceType.TYPE_WATCH).assertEqual(4);\n\n ", "rList[1].DeviceType.TYPE_WATCH).assertEqual(4);\n  "], "files": ["getAllPeersDeviceTestCallback.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceType", "api_method_name": "TYPE_CAR", "api_method_all": "TYPE_CAR,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["rList[1].DeviceType.TYPE_CAR).assertEqual(5);\n  ", "rList[1].DeviceType.TYPE_CAR).assertEqual(5);\n\n "], "files": ["getAllPeersDeviceTestCallback.test.js", "getAllPeersDeviceTestPromise.test.js"], "is_white": " ", "desc": " "}]}