{"subsystem_ch": "\u5347\u7ea7\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "updater", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.update", "api": [{"api_class_name": "update", "api_method_all": "declare namespace update {\n    \n    export enum PackageTypes {\n        PACKAGE_TYPE_NORMAL = 1,\n        PACKAGE_TYPE_BASE = 2,\n        PACKAGE_TYPE_CUST = 3,\n        PACKAGE_TYPE_PRELOAD = 4,\n        PACKAGE_TYPE_COTA = 5,\n        PACKAGE_TYPE_VERSION = 6,\n        PACKAGE_TYPE_PATCH = 7\n    }\n\n    \n    export interface CheckResult {\n        \n        versionName: number;\n\n        \n        versionCode: string;\n\n        \n        size: number;\n\n        \n        verifyInfo: string;\n\n        \n        packageType: PackageTypes;\n\n        \n        descriptionId: string;\n    }\n\n    \n    export interface DescriptionInfo {\n        \n        descriptionId: string;\n\n        \n        content: string;\n    }\n\n    \n    export enum NewVersionStatus {\n        \n        VERSION_STATUS_ERR = -1,\n\n        \n        VERSION_STATUS_NEW = 0,\n\n        \n        VERSION_STATUS_NONE = 1,\n\n        \n        VERSION_STATUS_BUSY = 2\n    }\n\n    \n    export interface NewVersionInfo {\n        \n        status: NewVersionStatus;\n\n        \n        errMsg: string;\n\n        \n        checkResults: Array<CheckResult>;\n\n        \n        descriptionInfo: Array<DescriptionInfo>;\n    }\n\n    \n    export enum UpdateState {\n        UPDATE_STATE_INIT = 0,\n        UPDATE_STATE_CHECK_VERSION_ON = 10,\n        UPDATE_STATE_CHECK_VERSION_FAIL,\n        UPDATE_STATE_CHECK_VERSION_SUCCESS,\n        UPDATE_STATE_DOWNLOAD_ON = 20,\n        UPDATE_STATE_DOWNLOAD_PAUSE,\n        UPDATE_STATE_DOWNLOAD_CANCEL,\n        UPDATE_STATE_DOWNLOAD_FAIL,\n        UPDATE_STATE_DOWNLOAD_SUCCESS,\n        UPDATE_STATE_VERIFY_ON = 30,\n        UPDATE_STATE_VERIFY_FAIL,\n        UPDATE_STATE_VERIFY_SUCCESS,\n        UPDATE_STATE_PACKAGE_TRANS_ON = 70,\n        UPDATE_STATE_PACKAGE_TRANS_FAIL,\n        UPDATE_STATE_PACKAGE_TRANS_SUCCESS,\n        UPDATE_STATE_INSTALL_ON = 80,\n        UPDATE_STATE_INSTALL_FAIL,\n        UPDATE_STATE_INSTALL_SUCCESS,\n        UPDATE_STATE_UPDATE_ON = 90,\n        UPDATE_STATE_UPDATE_FAIL,\n        UPDATE_STATE_UPDATE_SUCCESS\n    }\n\n    \n    export interface Progress {\n        \n        percent: number;\n\n        \n        status: UpdateState;\n\n        \n        endReason: string;\n    }\n\n    \n    export enum InstallMode {\n        \n        INSTALL_MODE_NORMAL,\n\n        \n        INSTALL_MODE_NIGHT,\n\n        \n        INSTALL_MODE_AUTO\n    }\n\n    \n    export interface UpdatePolicy {\n        \n        autoDownload: boolean;\n\n        \n        installMode: INSTALL_MODE;\n\n        \n        autoUpgradeInterval: Array<number>;\n    }\n\n    \n    export interface UpdateProgressCallback {\n        (progress: Progress): void;\n    }\n\n    \n    export interface Updater {\n        \n        checkNewVersion(callback: AsyncCallback<NewVersionInfo>): void;\n        checkNewVersion(): Promise<NewVersionInfo>;\n\n        \n        download(): void;\n\n        \n        upgrade(): void;\n\n        \n        getNewVersionInfo(callback: AsyncCallback<NewVersionInfo>): void;\n        getNewVersionInfo(): Promise<NewVersionInfo>;\n\n        \n        getUpdatePolicy(callback: AsyncCallback<UpdatePolicy>): void;\n        getUpdatePolicy(): Promise<UpdatePolicy>;\n\n        \n        setUpdatePolicy(policy: UpdatePolicy, callback: AsyncCallback<number>): void;\n        setUpdatePolicy(policy: UpdatePolicy): Promise<number>;\n\n        \n        applyNewVersion(callback: AsyncCallback<number>): void;\n        applyNewVersion(): Promise<number>;\n\n        \n        rebootAndCleanCache(callback: AsyncCallback<number>): void;\n        rebootAndCleanCache(): Promise<number>;\n\t\n\t\n        rebootAndCleanUserData(callback: AsyncCallback<number>): void;\n        rebootAndCleanUserData(): Promise<number>;\n\n        \n        verifyUpdatePackage(upgradeFile: string, certsFile: string): void;\n\n        \n        on(eventType: 'downloadProgress', callback: UpdateProgressCallback): void;\n        on(eventType: 'upgradeProgress', callback: UpdateProgressCallback): void;\n        on(eventType: 'verifyProgress', callback: UpdateProgressCallback): void;\n\n        \n        off(eventType: 'downloadProgress', callback?: UpdateProgressCallback): void;\n        off(eventType: 'upgradeProgress', callback?: UpdateProgressCallback): void;\n        off(eventType: 'verifyProgress', callback?: UpdateProgressCallback): void;\n\n\t\n        cancel(): void;\n    }\n\n    export type UpdateTypes =\n        'OTA' |\n        'patch';\n\n    \n    function getUpdater(upgradeFile: string, updateType?: UpdateTypes): Updater;\n\n    \n    function getUpdaterForOther(upgradeFile: string, device: string, updateType?: UpdateTypes): Updater;\n\n    \n    function getUpdaterFromOther(upgradeFile: string, device: string, updateType?: UpdateTypes): Updater;\n}", "api_method_name": "update", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 204, "since": 0, "api_used": "\u662f", "lines": ["          let ret = updater.setUpdatePolicy(po", "          let ret = updater.checkNewVersion();", "          let ret = updater.getUpdatePolicy(fu", "foreEach updater\" + updater);\n        }\n    })", "ion() {\n        if (updater === undefined) {\n ", "t.getUpdater('/data/updater/updater.zip', 'OTA", "          let ret = updater.checkNewVersion(fu", "ect_value = 0;\n\nlet updateState = {\n    UPDATE", ".desc      Test get update, policy func 001.\n ", "ater('/data/updater/updater.zip', 'patch');\n  ", "ePolicy001 START' + updater);\n        // Set s", "t.getUpdater('/data/updater/updater.zip', 'pat", "t.getUpdater('/data/updater/updater.zip', '444", "          let ret = updater.checkNewVersion(pa", " client from '@ohos.update';\n\nlet updater;\nlet", "unction() {\n        updater = None;\n    });\n  ", "          let ret = updater.checkNewVersion(2,", "          let ret = updater.checkNewVersion(2)", "st.js')", "le.info(\"beforeEach updater\" + updater);\n     ", "ePolicy002 START' + updater);\n        let poli", "ater('/data/updater/updater.zip', 'OTA');\n    ", "ater('/data/updater/updater.zip', '44444');\n  ", " : 92\n};\n\ndescribe('updateclient', function() ", "          let ret = updater.getNewVersionInfo(", "ePolicy003 START' + updater);\n        // Set s", "          let ret = updater.checkNewVersion(\"3", "@ohos.update';\n\nlet updater;\nlet param_value1 ", "nfo(\"testGetUpdate3 updater\" + tmpUpdater);\n  ", "ined) {\n            updater = client.getUpdate", ".error(\"Fail to get updater\");\n               ", "          let ret = updater.checkNewVersion()."], "files": ["List.test.js", "update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "update", "api_method_name": "getUpdater", "api_method_all": "function getUpdater(upgradeFile: string, updateType?: UpdateTypes): Updater;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["rFromOther = client.getUpdaterFromOther('/data/upd", "   updater = client.getUpdater('/data/updater/upda", " @tc.desc      Test getUpdaterForOther obj.\n     *", "nsole.info('[client.getUpdaterForOther] success.')", " @tc.desc      Test getUpdaterFromOther obj.\n     ", "tmpUpdater = client.getUpdater(param_value1, param", "nsole.info('[client.getUpdaterFromOther] success.'", "tmpUpdater = client.getUpdater('/data/updater/upda", "erForOther = client.getUpdaterForOther('/data/upda", "tmpUpdater = client.getUpdater(function(){\n       "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "update", "api_method_name": "getUpdaterForOther", "api_method_all": "function getUpdaterForOther(upgradeFile: string, device: string, updateType?: UpdateTypes): Updater;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 3, "since": 6, "api_used": "\u662f", "lines": [" @tc.desc      Test getUpdaterForOther obj.\n     */\n    it", "nsole.info('[client.getUpdaterForOther] success.');\n      ", "erForOther = client.getUpdaterForOther('/data/updater/upda"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "update", "api_method_name": "getUpdaterFromOther", "api_method_all": "function getUpdaterFromOther(upgradeFile: string, device: string, updateType?: UpdateTypes): Updater;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["nsole.info('[client.getUpdaterFromOther] success.');\n      ", " @tc.desc      Test getUpdaterFromOther obj.\n     */\n    it", "rFromOther = client.getUpdaterFromOther('/data/updater/upda"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PackageTypes", "api_method_all": "export enum PackageTypes {\n        PACKAGE_TYPE_NORMAL = 1,\n        PACKAGE_TYPE_BASE = 2,\n        PACKAGE_TYPE_CUST = 3,\n        PACKAGE_TYPE_PRELOAD = 4,\n        PACKAGE_TYPE_COTA = 5,\n        PACKAGE_TYPE_VERSION = 6,\n        PACKAGE_TYPE_PATCH = 7\n    }", "api_method_name": "PackageTypes", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 13, "since": 6, "api_used": "\u662f", "lines": ["     expect(updater.PackageTypes.PACKAGE_TYPE_BASE).", "  console.info('testPackageTypes END');\n    });\n\t\n\t/", "console.error('[testPackageTypes] fail.' + e);\n     ", "    */\n     it('testPackageTypes', 0, function() {\n ", "     expect(updater.PackageTypes.PACKAGE_TYPE_PATCH)", "     expect(updater.PackageTypes.PACKAGE_TYPE_NORMAL", "     expect(updater.PackageTypes.PACKAGE_TYPE_PRELOA", "     expect(updater.PackageTypes.PACKAGE_TYPE_COTA).", "     expect(updater.PackageTypes.PACKAGE_TYPE_VERSIO", "* @tc.name      testPackageTypes\n     * @tc.desc    ", "     console.info('[PackageTypes] success.');\n      ", "     expect(updater.PackageTypes.PACKAGE_TYPE_CUST).", "  console.info('testPackageTypes START');\n        tr"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PackageTypes", "api_method_name": "PACKAGE_TYPE_NORMAL", "api_method_all": "PACKAGE_TYPE_NORMAL = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": ["kResult.packageType.PACKAGE_TYPE_NORMAL).assertEqual(1);\t\t\t", "pdater.PackageTypes.PACKAGE_TYPE_NORMAL).assertEqual(1); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PackageTypes", "api_method_name": "PACKAGE_TYPE_BASE", "api_method_all": "PACKAGE_TYPE_BASE = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["pdater.PackageTypes.PACKAGE_TYPE_BASE).assertEqual(2); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PackageTypes", "api_method_name": "PACKAGE_TYPE_CUST", "api_method_all": "PACKAGE_TYPE_CUST = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["pdater.PackageTypes.PACKAGE_TYPE_CUST).assertEqual(3); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PackageTypes", "api_method_name": "PACKAGE_TYPE_PRELOAD", "api_method_all": "PACKAGE_TYPE_PRELOAD = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["pdater.PackageTypes.PACKAGE_TYPE_PRELOAD).assertEqual(4); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PackageTypes", "api_method_name": "PACKAGE_TYPE_COTA", "api_method_all": "PACKAGE_TYPE_COTA = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["pdater.PackageTypes.PACKAGE_TYPE_COTA).assertEqual(5); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PackageTypes", "api_method_name": "PACKAGE_TYPE_VERSION", "api_method_all": "PACKAGE_TYPE_VERSION = 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["pdater.PackageTypes.PACKAGE_TYPE_VERSION).assertEqual(6); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PackageTypes", "api_method_name": "PACKAGE_TYPE_PATCH", "api_method_all": "PACKAGE_TYPE_PATCH = 7", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["pdater.PackageTypes.PACKAGE_TYPE_PATCH).assertEqual(7); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckResult", "api_method_all": "export interface CheckResult {\n        \n        versionName: number;\n\n        \n        versionCode: string;\n\n        \n        size: number;\n\n        \n        verifyInfo: string;\n\n        \n        packageType: PackageTypes;\n\n        \n        descriptionId: string;\n    }", "api_method_name": "CheckResult", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": ["  console.info('testCheckResultAndDescriptionInfo E", "  console.info('testCheckResultAndDescriptionInfo S", "console.error('[testCheckResultAndDescriptionInfo] ", "* @tc.name      testCheckResultAndDescriptionInfo\n ", "     console.info('[CheckResultAndDescriptionInfo] ", "     expect(updater.CheckResult.packageType.PACKAGE"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckResult", "api_method_name": "versionName", "api_method_all": "versionName: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": ["  console.log(`info versionName = ` + data.checkRes", "ata.checkResults[0].versionName);\n                c"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckResult", "api_method_name": "versionCode", "api_method_all": "versionCode: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": ["  console.log(`info versionCode = ` + data.checkRes", "ata.checkResults[0].versionCode);\n                c"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckResult", "api_method_name": "size", "api_method_all": "size: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 6, "api_used": "\u662f", "lines": ["ata.checkResults[0].size);\n            }).ca", "  console.log(`info size = ` + data.checkRes", "ata.checkResults[0].size);\n            },\n  ", "t(data.checkResults.size > 0).assertTrue();\n"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckResult", "api_method_name": "verifyInfo", "api_method_all": "verifyInfo: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": ["  console.log(`info verifyInfo = ` + data.checkRes", "ata.checkResults[0].verifyInfo);\n                c"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckResult", "api_method_name": "packageType", "api_method_all": "packageType: PackageTypes", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": ["updater.CheckResult.packageType.PACKAGE_TYPE_NORMAL", "@tc.desc      check packageTypes is defined correct"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CheckResult", "api_method_name": "descriptionId", "api_method_all": "descriptionId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": ["ata.checkResults[0].descriptionId);\n                c", "  console.log(`info descriptionId = ` + data.checkRes"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptionInfo", "api_method_all": "export interface DescriptionInfo {\n        \n        descriptionId: string;\n\n        \n        content: string;\n    }", "api_method_name": "DescriptionInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 7, "since": 6, "api_used": "\u662f", "lines": ["'[testCheckResultAndDescriptionInfo] fail.' + e);\n     ", "\tconsole.info('test DescriptionInfo.content is ' + desc", "  testCheckResultAndDescriptionInfo\n     * @tc.desc    ", "('testCheckResultAndDescriptionInfo START');\n        tr", "ptionInfo = updater.DescriptionInfo.content;\n\t\t\tconsole", "nfo('[CheckResultAndDescriptionInfo] success.');\n      ", "('testCheckResultAndDescriptionInfo END');\n    });\n\n   "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptionInfo", "api_method_name": "descriptionId", "api_method_all": "descriptionId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": ["ata.checkResults[0].descriptionId);\n                c", "  console.log(`info descriptionId = ` + data.checkRes"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptionInfo", "api_method_name": "content", "api_method_all": "content: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 6, "api_used": "\u662f", "lines": ["est DescriptionInfo.content is ' + descriptionI", "  console.log(`info content = ` + data.descript", "ter.DescriptionInfo.content;\n\t\t\tconsole.info('t", ".descriptionInfo[0].content);\n                c"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NewVersionStatus", "api_method_all": "export enum NewVersionStatus {\n        \n        VERSION_STATUS_ERR = -1,\n\n        \n        VERSION_STATUS_NEW = 0,\n\n        \n        VERSION_STATUS_NONE = 1,\n\n        \n        VERSION_STATUS_BUSY = 2\n    }", "api_method_name": "NewVersionStatus", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 11, "since": 6, "api_used": "\u662f", "lines": ["     */\n    it('testNewVersionStatus', 0, function() {\n ", "     expect(updater.NewVersionStatus.VERSION_STATUS_NONE", "  console.info('testNewVersionStatus START');\n        tr", "console.error('[testNewVersionStatus] fail.' + e);\n     ", "@tc.desc      check NewVersionStatus is defined correct.", "  console.info('testNewVersionStatus END');\n    });\n\n\t/*", "* @tc.name      testNewVersionStatus\n     * @tc.desc    ", "     expect(updater.NewVersionStatus.VERSION_STATUS_BUSY", "     expect(updater.NewVersionStatus.VERSION_STATUS_ERR)", "     console.info('[NewVersionStatus] success.');\n      ", "     expect(updater.NewVersionStatus.VERSION_STATUS_NEW)"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NewVersionStatus", "api_method_name": "VERSION_STATUS_ERR", "api_method_all": "VERSION_STATUS_ERR = -1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["er.NewVersionStatus.VERSION_STATUS_ERR).assertEqual(-1); \n"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NewVersionStatus", "api_method_name": "VERSION_STATUS_NEW", "api_method_all": "VERSION_STATUS_NEW = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["er.NewVersionStatus.VERSION_STATUS_NEW).assertEqual(0); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NewVersionStatus", "api_method_name": "VERSION_STATUS_NONE", "api_method_all": "VERSION_STATUS_NONE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["er.NewVersionStatus.VERSION_STATUS_NONE).assertEqual(1); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NewVersionStatus", "api_method_name": "VERSION_STATUS_BUSY", "api_method_all": "VERSION_STATUS_BUSY = 2", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["er.NewVersionStatus.VERSION_STATUS_BUSY).assertEqual(2); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NewVersionInfo", "api_method_all": "export interface NewVersionInfo {\n        \n        status: NewVersionStatus;\n\n        \n        errMsg: string;\n\n        \n        checkResults: Array<CheckResult>;\n\n        \n        descriptionInfo: Array<DescriptionInfo>;\n    }", "api_method_name": "NewVersionInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 63, "since": 6, "api_used": "\u662f", "lines": ["   \n     it('testGetNewVersionInfoPromise', 0, functio", "et ret = updater.getNewVersionInfo(param_value1, param", "  console.error(\"getNewVersionInfo catch \" + e);\n     ", "onsole.info('testGetNewVersionInfo5 END');\n        } c", "onsole.info('testGetNewVersionInfoPromise2 END');\n    ", "onsole.info('testGetNewVersionInfoPromise3 END');\n    ", "    \n    it('testGetNewVersionInfo1', 0, function() {\n", "onsole.info('testGetNewVersionInfoPromise END');\n    }", "    \n    it('testGetNewVersionInfo4', 0, function() {\n", "et ret = updater.getNewVersionInfo(param_value1).then(", "onsole.info('testGetNewVersionInfoPromise2 START');\n  ", "et ret = updater.getNewVersionInfo();\n            expe", "  console.info('[getNewVersionInfo] success.');\n      ", "et ret = updater.getNewVersionInfo(function(err, data)", "onsole.info('testGetNewVersionInfo1 END');\n    });\n\n  ", "   \n     it('testGetNewVersionInfo5', 0, function() {\n", "  console.error(\"getNewVersionInfo catch \" + error)\n  ", "et ret = updater.getNewVersionInfo().then(data => {\n  ", "    console.log(\"getNewVersionInfo success\" + data);\n ", "onsole.info('testGetNewVersionInfo4 START');\n        t", "   \n     it('testGetNewVersionInfoPromise4', 0, functi", "onsole.info('testGetNewVersionInfoPromise START');\n   ", "    console.log(\"getNewVersionInfo success  \" + data);", "   \n     it('testGetNewVersionInfoPromise3', 0, functi", "onsole.info('testGetNewVersionInfo5 START');\n        t", "onsole.info('testGetNewVersionInfo2 START');\n        t", "et ret = updater.getNewVersionInfo(\"dddddd\");\n        ", "onsole.info('testGetNewVersionInfo2 END');\n        } c", "   \n     it('testGetNewVersionInfo2', 0, function() {\n", "    \n    it('testGetNewVersionInfo3', 0, function() {\n", "et ret = updater.getNewVersionInfo(param_value1);\n    ", "   \n     it('testGetNewVersionInfoPromise2', 0, functi", "onsole.info('testGetNewVersionInfoPromise3 START');\n  ", "onsole.info('testGetNewVersionInfo3 START');\n        t", "onsole.info('testGetNewVersionInfo1 START');\n        t"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NewVersionInfo", "api_method_name": "status", "api_method_all": "status: NewVersionStatus", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 50, "since": 6, "api_used": "\u662f", "lines": ["tatus: ` + progress.status);\n                c", "tatus: ` + progress.status);\n            conso", "        expect(data.status).assertEqual(0);\n  ", "og(`upgradeProgress status: ` + progress.statu", "log(`verifyProgress status: ` + progress.statu", "        expect(data.status).assertEqual(0); //", "           progress.status === updateState.UPD", "g(`downloadProgress status: ` + progress.statu", "       if (progress.status === updateState.UPD"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NewVersionInfo", "api_method_name": "errMsg", "api_method_all": "errMsg: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NewVersionInfo", "api_method_name": "checkResults", "api_method_all": "checkResults: Array<CheckResult>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 6, "api_used": "\u662f", "lines": ["sionCode = ` + data.checkResults[0].versionCode);\n  ", "sionName = ` + data.checkResults[0].versionName);\n  ", "        expect(data.checkResults.size > 0).assertTru", "iptionId = ` + data.checkResults[0].descriptionId);\n", "rifyInfo = ` + data.checkResults[0].verifyInfo);\n   ", "nfo size = ` + data.checkResults[0].size);\n         "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NewVersionInfo", "api_method_name": "descriptionInfo", "api_method_all": "descriptionInfo: Array<DescriptionInfo>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": [" content = ` + data.descriptionInfo[0].content);\n      ", "y {\n            let descriptionInfo = updater.Descripti", "Info.content is ' + descriptionInfo);\n            expec", "eck checkResult and descriptionInfo is defined correct."], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_all": "export enum UpdateState {\n        UPDATE_STATE_INIT = 0,\n        UPDATE_STATE_CHECK_VERSION_ON = 10,\n        UPDATE_STATE_CHECK_VERSION_FAIL,\n        UPDATE_STATE_CHECK_VERSION_SUCCESS,\n        UPDATE_STATE_DOWNLOAD_ON = 20,\n        UPDATE_STATE_DOWNLOAD_PAUSE,\n        UPDATE_STATE_DOWNLOAD_CANCEL,\n        UPDATE_STATE_DOWNLOAD_FAIL,\n        UPDATE_STATE_DOWNLOAD_SUCCESS,\n        UPDATE_STATE_VERIFY_ON = 30,\n        UPDATE_STATE_VERIFY_FAIL,\n        UPDATE_STATE_VERIFY_SUCCESS,\n        UPDATE_STATE_PACKAGE_TRANS_ON = 70,\n        UPDATE_STATE_PACKAGE_TRANS_FAIL,\n        UPDATE_STATE_PACKAGE_TRANS_SUCCESS,\n        UPDATE_STATE_INSTALL_ON = 80,\n        UPDATE_STATE_INSTALL_FAIL,\n        UPDATE_STATE_INSTALL_SUCCESS,\n        UPDATE_STATE_UPDATE_ON = 90,\n        UPDATE_STATE_UPDATE_FAIL,\n        UPDATE_STATE_UPDATE_SUCCESS\n    }", "api_method_name": "UpdateState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_INIT", "api_method_all": "UPDATE_STATE_INIT = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["updateState = {\n    UPDATE_STATE_INIT : 0,\n    UPDATE_STA"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_CHECK_VERSION_ON", "api_method_all": "UPDATE_STATE_CHECK_VERSION_ON = 10,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["STATE_INIT : 0,\n    UPDATE_STATE_CHECK_VERSION_ON : 10,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_CHECK_VERSION_FAIL", "api_method_all": "UPDATE_STATE_CHECK_VERSION_FAIL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["ERSION_ON : 10,\n    UPDATE_STATE_CHECK_VERSION_FAIL : 11,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_CHECK_VERSION_SUCCESS", "api_method_all": "UPDATE_STATE_CHECK_VERSION_SUCCESS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["SION_FAIL : 11,\n    UPDATE_STATE_CHECK_VERSION_SUCCESS : 12,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_DOWNLOAD_ON", "api_method_all": "UPDATE_STATE_DOWNLOAD_ON = 20,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["N_SUCCESS : 12,\n    UPDATE_STATE_DOWNLOAD_ON : 20,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_DOWNLOAD_PAUSE", "api_method_all": "UPDATE_STATE_DOWNLOAD_PAUSE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["WNLOAD_ON : 20,\n    UPDATE_STATE_DOWNLOAD_PAUSE : 21,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_DOWNLOAD_CANCEL", "api_method_all": "UPDATE_STATE_DOWNLOAD_CANCEL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["OAD_PAUSE : 21,\n    UPDATE_STATE_DOWNLOAD_CANCEL : 22,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_DOWNLOAD_FAIL", "api_method_all": "UPDATE_STATE_DOWNLOAD_FAIL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["AD_CANCEL : 22,\n    UPDATE_STATE_DOWNLOAD_FAIL : 23,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_DOWNLOAD_SUCCESS", "api_method_all": "UPDATE_STATE_DOWNLOAD_SUCCESS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 11, "since": 6, "api_used": "\u662f", "lines": ["LOAD_FAIL : 23,\n    UPDATE_STATE_DOWNLOAD_SUCCESS : 24,\n    UPDATE_ST", "tus === updateState.UPDATE_STATE_DOWNLOAD_SUCCESS ||\n                "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_VERIFY_ON", "api_method_all": "UPDATE_STATE_VERIFY_ON = 30,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["D_SUCCESS : 24,\n    UPDATE_STATE_VERIFY_ON : 30,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_VERIFY_FAIL", "api_method_all": "UPDATE_STATE_VERIFY_FAIL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["VERIFY_ON : 30,\n    UPDATE_STATE_VERIFY_FAIL : 31,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_VERIFY_SUCCESS", "api_method_all": "UPDATE_STATE_VERIFY_SUCCESS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 11, "since": 6, "api_used": "\u662f", "lines": ["RIFY_FAIL : 31,\n    UPDATE_STATE_VERIFY_SUCCESS : 32,\n    UPDATE_ST", "tus === updateState.UPDATE_STATE_VERIFY_SUCCESS) {\n                "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_PACKAGE_TRANS_ON", "api_method_all": "UPDATE_STATE_PACKAGE_TRANS_ON = 70,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["Y_SUCCESS : 32,\n    UPDATE_STATE_PACKAGE_TRANS_ON : 70,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_PACKAGE_TRANS_FAIL", "api_method_all": "UPDATE_STATE_PACKAGE_TRANS_FAIL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["_TRANS_ON : 70,\n    UPDATE_STATE_PACKAGE_TRANS_FAIL : 71,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_PACKAGE_TRANS_SUCCESS", "api_method_all": "UPDATE_STATE_PACKAGE_TRANS_SUCCESS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["RANS_FAIL : 71,\n    UPDATE_STATE_PACKAGE_TRANS_SUCCESS : 72,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_INSTALL_ON", "api_method_all": "UPDATE_STATE_INSTALL_ON = 80,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["S_SUCCESS : 72,\n    UPDATE_STATE_INSTALL_ON : 80,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_INSTALL_FAIL", "api_method_all": "UPDATE_STATE_INSTALL_FAIL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["NSTALL_ON : 80,\n    UPDATE_STATE_INSTALL_FAIL : 81,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_INSTALL_SUCCESS", "api_method_all": "UPDATE_STATE_INSTALL_SUCCESS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["TALL_FAIL : 81,\n    UPDATE_STATE_INSTALL_SUCCESS : 82,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_UPDATE_ON", "api_method_all": "UPDATE_STATE_UPDATE_ON = 90,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["L_SUCCESS : 82,\n    UPDATE_STATE_UPDATE_ON : 90,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateState", "api_method_name": "UPDATE_STATE_UPDATE_FAIL", "api_method_all": "UPDATE_STATE_UPDATE_FAIL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["UPDATE_ON : 90,\n    UPDATE_STATE_UPDATE_FAIL : 91,\n    UPDATE_ST"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Progress", "api_method_all": "export interface Progress {\n        \n        percent: number;\n\n        \n        status: UpdateState;\n\n        \n        endReason: string;\n    }", "api_method_name": "Progress", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 87, "since": 6, "api_used": "\u662f", "lines": ["onsole.log(\"downloadProgress on\" + progress);\n  ", "updater.off(\"upgradeProgress\", testFunction);\n  ", "console.log(`upgradeProgress endReason: ` + prog", "onsole.log(`downloadProgress endReason: ` + prog", "pdater.off(\"downloadProgress\", testFunction);\n  ", " updater.on('upgradeProgress');\n            expe", "console.log(`upgradeProgress percent: ` + progre", "updater.on('downloadProgress', progress => {\n   ", "updater.on('downloadProgress');\n            expe", " updater.on(\"upgradeProgress\");\n            expe", "updater.off(\"upgradeProgress\");\n            expe", "pdater.off(\"downloadProgress\");\n            expe", " updater.on(\"upgradeProgress\", function(){});\n  ", "onsole.log(`downloadProgress status: ` + progres", " updater.on('upgradeProgress', progress => {\n   ", "updater.on('downloadProgress', testFunction);\n  ", "console.log(`upgradeProgress status: ` + progres", "updater.off(\"upgradeProgress\");\n                ", " updater.on('upgradeProgress', testFunction);\n  ", "onsole.log(`downloadProgress percent: ` + progre", "console.log(\"upgradeProgress on\" + progress);\n  ", "pdater.off(\"downloadProgress\");\n                "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Progress", "api_method_name": "percent", "api_method_all": "percent: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 36, "since": 6, "api_used": "\u662f", "lines": ["rcent: ` + progress.percent);\n                c", "og(`upgradeProgress percent: ` + progress.perce", "g(`downloadProgress percent: ` + progress.perce", "    expect(progress.percent).assertEqual(expect", "log(`verifyProgress percent: ` + progress.perce", "rcent: ` + progress.percent);\n            conso"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Progress", "api_method_name": "status", "api_method_all": "status: UpdateState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 50, "since": 6, "api_used": "\u662f", "lines": ["tatus: ` + progress.status);\n                c", "tatus: ` + progress.status);\n            conso", "        expect(data.status).assertEqual(0);\n  ", "og(`upgradeProgress status: ` + progress.statu", "log(`verifyProgress status: ` + progress.statu", "        expect(data.status).assertEqual(0); //", "           progress.status === updateState.UPD", "g(`downloadProgress status: ` + progress.statu", "       if (progress.status === updateState.UPD"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Progress", "api_method_name": "endReason", "api_method_all": "endReason: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 26, "since": 6, "api_used": "\u662f", "lines": ["eason: ` + progress.endReason);\n        }\n       ", "og(`upgradeProgress endReason: ` + progress.endRe", "g(`downloadProgress endReason: ` + progress.endRe", "log(`verifyProgress endReason: ` + progress.endRe", "eason: ` + progress.endReason);\n                i"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallMode", "api_method_all": "export enum InstallMode {\n        \n        INSTALL_MODE_NORMAL,\n\n        \n        INSTALL_MODE_NIGHT,\n\n        \n        INSTALL_MODE_AUTO\n    }", "api_method_name": "InstallMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 11, "since": 6, "api_used": "\u662f", "lines": ["@tc.desc      check InstallMode is defined correct.", "     expect(updater.InstallMode.INSTALL_MODE_NORMAL", "  console.info('testInstallMode START');\n        tr", "     console.info('[InstallMode] success.');\n      ", "     expect(updater.InstallMode.INSTALL_MODE_NIGHT)", "* @tc.name      testInstallMode\n     * @tc.desc    ", "     expect(updater.InstallMode.INSTALL_MODE_AUTO).", "     */\n    it('testInstallMode', 0, function() {\n ", "console.error('[testInstallMode] fail.' + e);\n     ", "  console.info('testInstallMode END');\n    });\n\t\n\t/"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallMode", "api_method_name": "INSTALL_MODE_NORMAL", "api_method_all": "INSTALL_MODE_NORMAL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["updater.InstallMode.INSTALL_MODE_NORMAL).assertEqual(0); \n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallMode", "api_method_name": "INSTALL_MODE_NIGHT", "api_method_all": "INSTALL_MODE_NIGHT,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["updater.InstallMode.INSTALL_MODE_NIGHT).assertEqual(1);\n  "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdatePolicy", "api_method_all": "export interface UpdatePolicy {\n        \n        autoDownload: boolean;\n\n        \n        installMode: INSTALL_MODE;\n\n        \n        autoUpgradeInterval: Array<number>;\n    }", "api_method_name": "UpdatePolicy", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 165, "since": 6, "api_used": "\u662f", "lines": ["  console.info('[setUpdatePolicy] success.');\n      ", "onsole.info('testGetUpdatePolicy003 END');\n    });\n\n", "onsole.info('testSetUpdatePolicy001 START' + updater", "sole.error('[testSetUpdatePolicy001] fail.' + e);\n  ", "onsole.info('testGetUpdatePolicy001 START');\n       ", "et ret = updater.setUpdatePolicy(policy, function(er", "onsole.info('testSetUpdatePolicy001 END');\n    });\n\n", "onsole.info('testGetUpdatePolicy002 END');\n    });\n\n", "onsole.info('testGetUpdatePolicy002 START');\n       ", "tc.name      testGetUpdatePolicy003\n     * @tc.desc ", "  */\n    it('testSetUpdatePolicy004', 0, function() ", "tc.name      testSetUpdatePolicy003\n     * @tc.desc ", "tc.name      testSetUpdatePolicy001\n     * @tc.desc ", "sole.error('[testGetUpdatePolicy001] fail.' + e);\n  ", "tc.name      testSetUpdatePolicy004\n     * @tc.desc ", "tc.name      testGetUpdatePolicy001\n     * @tc.desc ", "  console.info('[getUpdatePolicy] success.');\n      ", "onsole.info('testSetUpdatePolicy003 END');\n    });\n\n", "tc.name      testGetUpdatePolicy002\n     * @tc.desc ", "  */\n    it('testGetUpdatePolicy001', 0, function() ", "sole.error('[testGetUpdatePolicy003] fail.' + e);\n  ", "onsole.info('testGetUpdatePolicy001 END');\n    });\n\n", "  */\n    it('testSetUpdatePolicy003', 0, function() ", "onsole.info('testSetUpdatePolicy003 START' + updater", "    console.log(\"setUpdatePolicy success\" + data);\n ", "  */\n    it('testSetUpdatePolicy001', 0, function() ", "onsole.info('testSetUpdatePolicy002 START' + updater", "tc.name      testSetUpdatePolicy002\n     * @tc.desc ", "sole.error('[testGetUpdatePolicy002] fail.' + e);\n  ", "  */\n    it('testSetUpdatePolicy002', 0, function() ", "  */\n    it('testGetUpdatePolicy003', 0, function() ", "sole.error('[testSetUpdatePolicy002] fail.' + e);\n  ", "    console.log(\"getUpdatePolicy success\" + data);\n ", "et ret = updater.getUpdatePolicy(function(err, data)", "onsole.info('testSetUpdatePolicy002 END');\n    });\n\n", "  */\n    it('testGetUpdatePolicy002', 0, function() ", "onsole.info('testGetUpdatePolicy003 START ' + update", "sole.error('[testSetUpdatePolicy003] fail.' + e);\n  "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdatePolicy", "api_method_name": "autoDownload", "api_method_all": "autoDownload: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 32, "since": 6, "api_used": "\u662f", "lines": [" false,\n            autoDownloadNet: true,\n         ", "        expect(data.autoDownloadNet).assertEqual(tru", "        expect(data.autoDownload).assertEqual(true);", "        expect(data.autoDownload).assertEqual(false)", "icy = {\n            autoDownload: true,\n            ", "        expect(data.autoDownloadNet).assertEqual(fal", ": true,\n            autoDownloadNet: true,\n         ", "icy = {\n            autoDownload: false,\n           ", " false,\n            autoDownloadNet: false,\n        "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdatePolicy", "api_method_name": "installMode", "api_method_all": "installMode: INSTALL_MODE", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "UpdatePolicy", "api_method_name": "autoUpgradeInterval", "api_method_all": "autoUpgradeInterval: Array<number>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 24, "since": 6, "api_used": "\u662f", "lines": ["        expect(data.autoUpgradeInterval[0]).assertEqual(2);", "ode: 2,\n            autoUpgradeInterval: [ 2, 3 ],\n        ", "        expect(data.autoUpgradeInterval[1]).assertEqual(exp", "        expect(data.autoUpgradeInterval[1]).assertEqual(3);", "ode: 1,\n            autoUpgradeInterval: [ 100, 100],\n     ", "        expect(data.autoUpgradeInterval[0]).assertEqual(exp"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateProgressCallback", "api_method_all": "export interface UpdateProgressCallback {\n        (progress: Progress): void;\n    }", "api_method_name": "UpdateProgressCallback", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "UpdateProgressCallback", "api_method_name": "progress", "api_method_all": "(progress: Progress): void", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 95, "since": 6, "api_used": "\u662f", "lines": ["nloadProgress on\" + progress);\n                c", "'downloadProgress', progress => {\n              ", "gradeProgress on\" + progress);\n                c", "rogress status: ` + progress.status);\n          ", "                    progress.status === updateSt", "nloadProgress on\" + progress);\n            conso", " = updater.download(progress => {\n              ", "                if (progress.status === updateSt", "nction testFunction(progress) {\n            cons", "ress endReason: ` + progress.endReason);\n       ", "             expect(progress.percent).assertEqua", "t = updater.upgrade(progress => {\n              ", "ogress percent: ` + progress.percent);\n         ", "('upgradeProgress', progress => {\n              "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_all": "export interface Updater {\n        \n        checkNewVersion(callback: AsyncCallback<NewVersionInfo>): void;\n        checkNewVersion(): Promise<NewVersionInfo>;\n\n        \n        download(): void;\n\n        \n        upgrade(): void;\n\n        \n        getNewVersionInfo(callback: AsyncCallback<NewVersionInfo>): void;\n        getNewVersionInfo(): Promise<NewVersionInfo>;\n\n        \n        getUpdatePolicy(callback: AsyncCallback<UpdatePolicy>): void;\n        getUpdatePolicy(): Promise<UpdatePolicy>;\n\n        \n        setUpdatePolicy(policy: UpdatePolicy, callback: AsyncCallback<number>): void;\n        setUpdatePolicy(policy: UpdatePolicy): Promise<number>;\n\n        \n        applyNewVersion(callback: AsyncCallback<number>): void;\n        applyNewVersion(): Promise<number>;\n\n        \n        rebootAndCleanCache(callback: AsyncCallback<number>): void;\n        rebootAndCleanCache(): Promise<number>;\n\t\n\t\n        rebootAndCleanUserData(callback: AsyncCallback<number>): void;\n        rebootAndCleanUserData(): Promise<number>;\n\n        \n        verifyUpdatePackage(upgradeFile: string, certsFile: string): void;\n\n        \n        on(eventType: 'downloadProgress', callback: UpdateProgressCallback): void;\n        on(eventType: 'upgradeProgress', callback: UpdateProgressCallback): void;\n        on(eventType: 'verifyProgress', callback: UpdateProgressCallback): void;\n\n        \n        off(eventType: 'downloadProgress', callback?: UpdateProgressCallback): void;\n        off(eventType: 'upgradeProgress', callback?: UpdateProgressCallback): void;\n        off(eventType: 'verifyProgress', callback?: UpdateProgressCallback): void;\n\n\t\n        cancel(): void;\n    }", "api_method_name": "Updater", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 39, "since": 6, "api_used": "\u662f", "lines": ["le.info('[client.getUpdaterForOther] success.')", "tc.name      testGetUpdaterFromOther\n     * @tc", "  */\n    it('testGetUpdaterFromOther', 0, funct", "le.info('[client.getUpdaterFromOther] success.'", "          expect(tmpUpdater != undefined).asser", "Updater = client.getUpdater('/data/updater/upda", "omOther = client.getUpdaterFromOther('/data/upd", "onsole.info('testGetUpdaterFromOther START');\n ", "sole.error('[testGetUpdaterForOther] fail.' + e", "\n            if (tmpUpdater === undefined) {\n  ", "\n            let tmpUpdater = client.getUpdater", "          let tmpGetUpdaterForOther = client.ge", "onsole.info('testGetUpdaterFromOther END');\n   ", "orOther = client.getUpdaterForOther('/data/upda", "          expect(tmpUpdater === undefined).asse", "sole.error('[testGetUpdaterFromOther] fail.' + ", "c.desc      Test getUpdaterFromOther obj.\n     ", "       expect(tmpGetUpdaterForOther != undefine", "          let tmpGetUpdaterFromOther = client.g", "Updater = client.getUpdater(param_value1, param", "onsole.info('testGetUpdaterForOther END');\n    ", "  */\n    it('testGetUpdaterForOther', 0, functi", "date3 updater\" + tmpUpdater);\n            expec", "updater = client.getUpdater('/data/updater/upda", "Updater = client.getUpdater(function(){\n       ", "       expect(tmpGetUpdaterFromOther != undefin", "tc.name      testGetUpdaterForOther\n     * @tc.", "c.desc      Test getUpdaterForOther obj.\n     *", "onsole.info('testGetUpdaterForOther START');\n  "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "checkNewVersion", "api_method_all": "checkNewVersion(callback: AsyncCallback<NewVersionInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 33, "since": 6, "api_used": "\u662f", "lines": ["       console.log(\"checkNewVersion success\" + data);\n                expec", "  let ret = updater.checkNewVersion(param_value1);\n            expect(ret !", "     console.error(\"checkNewVersion catch \" + e);\n        }\n        console", "     console.error(\"checkNewVersion error \" + error)\n            );\n       ", "     console.error(\"checkNewVersion catch \" + e)\n        }\n        console.", "  let ret = updater.checkNewVersion(function(err, data){\n                co", "     console.info('[checkNewVersion] success.');\n        console.info('test", "  let ret = updater.checkNewVersion(param_value1, param_value2);\n          ", "  let ret = updater.checkNewVersion();\n            expect(ret != 0).assertT", "     console.info('[checkNewVersion] success.' + ret);\n            console.", "     console.error(\"checkNewVersion catch \" + e);\n        }\n    });\n\n    /*", "  let ret = updater.checkNewVersion(\"33333\");\n            expect(ret != 0).", "       console.log(\"checkNewVersion error\" + error)\n            });\n       "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "checkNewVersion", "api_method_all": "checkNewVersion(): Promise<NewVersionInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["  let ret = updater.checkNewVersion(2, 4).then(data => {\n            }).cat", "  let ret = updater.checkNewVersion().then(data => {\n                consol", "  let ret = updater.checkNewVersion(2).then(data => {\n            }).catch(", "  let ret = updater.checkNewVersion(\"3333\", \"44444\").then(data => {\n       ", "  let ret = updater.checkNewVersion(\"3333\").then(data => {\n            }).c"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "download", "api_method_all": "download(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 60, "since": 6, "api_used": "\u662f", "lines": ["_off = updater.off(\"downloadProgress\");\n        ", "_off = updater.off(\"downloadProgress\", testFunct", "            // Open download monitor.\n          ", "t ret = updater.on('downloadProgress');\n        ", "            let ret_download = updater.download(", "       console.log(`downloadProgress status: ` +", "       updater.off(\"downloadProgress\");\n        ", "  let ret = updater.download();\n            // C", "         expect(ret_download).assertInstanceOf('", "_download = updater.download();\n            expe", "  let ret = updater.download();\n            expe", "       console.log(`downloadProgress endReason: ", "');\n        // Open download monitor\n        try", "     console.info('[downloadVersion] success.');", "       console.log(\"downloadProgress on\" + progr", "       console.log(`downloadProgress percent: ` ", "        updater.on('downloadProgress', progress ", "t ret = updater.on('downloadProgress', testFunct", "sc      Test Cancel download.\n     */\n    it('te", " @tc.desc      Test download parameter, callback", "  let ret = updater.download(progress => {\n     ", "');\n        // Open download monitor.\n        tr"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "upgrade", "api_method_all": "upgrade(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 51, "since": 6, "api_used": "\u662f", "lines": ["     console.info('[upgrade] success.');\n      ", "       updater.off(\"upgradeProgress\");\n        ", "esc      Set policy upgrade interval.\n     */\n ", "       console.log(\"upgradeProgress on\" + progr", "       console.log(`upgradeProgress percent: ` ", "t_upgrade = updater.upgrade();\n            expe", "t ret = updater.on('upgradeProgress', testFunct", "et_on = updater.on('upgradeProgress', progress ", " ret = updater.off(\"upgradeProgress\");\n        ", "  let ret = updater.upgrade();\n            expe", "        updater.on('upgradeProgress', progress ", "            let ret_upgrade = updater.upgrade()", "_off = updater.off(\"upgradeProgress\", testFunct", " ret = updater.off(\"upgradeProgress\", \"33333333", " ret = updater.off(\"upgradeProgress\", param_val", "         expect(ret_upgrade).assertInstanceOf('", "t ret = updater.on(\"upgradeProgress\", function(", "t ret = updater.on(\"upgradeProgress\");\n        ", "t ret = updater.on(\"upgradeProgress\", param_val", "   Test and set the upgrade strategy, check whe", "_off = updater.off(\"upgradeProgress\");\n        ", "      Obtain policy upgrade interval.\n     */\n ", "  let ret = updater.upgrade(progress => {\n     ", "       console.log(`upgradeProgress status: ` +", "       console.log(`upgradeProgress endReason: ", "t ret = updater.on('upgradeProgress');\n        ", "esc      Modify the upgrade strategy and check ", "t ret = updater.on(\"upgradeProgress\", \"33333333"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "getNewVersionInfo", "api_method_all": "getNewVersionInfo(callback: AsyncCallback<NewVersionInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 28, "since": 6, "api_used": "\u662f", "lines": ["  let ret = updater.getNewVersionInfo();\n            expect(ret != 0).assertT", "  let ret = updater.getNewVersionInfo(\"dddddd\");\n            expect(ret != 0)", "  let ret = updater.getNewVersionInfo(function(err, data){\n                co", "  let ret = updater.getNewVersionInfo(param_value1);\n            expect(ret !", "     console.error(\"getNewVersionInfo catch \" + error)\n            );\n       ", "     console.error(\"getNewVersionInfo catch \" + e);\n        }\n        console", "       console.log(\"getNewVersionInfo success  \" + data);\n            }).catc", "       console.log(\"getNewVersionInfo success  \" + data);\n                exp", "       console.log(\"getNewVersionInfo success\" + data);\n                expec", "  let ret = updater.getNewVersionInfo(param_value1, param_value2);\n          ", "     console.error(\"getNewVersionInfo error \" + error)\n            );\n       ", "     console.info('[getNewVersionInfo] success.');\n        console.info('test", "     console.info('[getNewVersionInfo] success.');\n            console.info('"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "getNewVersionInfo", "api_method_all": "getNewVersionInfo(): Promise<NewVersionInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["  let ret = updater.getNewVersionInfo(\"44444444\").then(data => {\n            ", "  let ret = updater.getNewVersionInfo(param_value1).then(data => {\n          ", "  let ret = updater.getNewVersionInfo().then(data => {\n                consol", "  let ret = updater.getNewVersionInfo(param_value1, param_value2).then(data =", "  let ret = updater.getNewVersionInfo(\"44444444\", \"5555555\").then(data => {\n "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "getUpdatePolicy", "api_method_all": "getUpdatePolicy(callback: AsyncCallback<UpdatePolicy>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 27, "since": 6, "api_used": "\u662f", "lines": ["       console.log(\"getUpdatePolicy success\" + data);\n                expec", "  let ret = updater.getUpdatePolicy(function(err, data){\n                co", "     console.info('[getUpdatePolicy] catch ' + e)\n        }\n        console", "  let ret = updater.getUpdatePolicy(\"\", function(err, data){\n            })", "     console.error(\"getUpdatePolicy catch \" + error)\n            );\n       ", "     console.info('[getUpdatePolicy] success.');\n        console.info('test", "     console.info('[getUpdatePolicy] error ' + error)\n            })\n      "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "getUpdatePolicy", "api_method_all": "getUpdatePolicy(): Promise<UpdatePolicy>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["  let ret = updater.getUpdatePolicy(param_value1).then(data => {\n          ", "  let ret = updater.getUpdatePolicy().then(data => {\n                consol"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "setUpdatePolicy", "api_method_all": "setUpdatePolicy(policy: UpdatePolicy, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 32, "since": 6, "api_used": "\u662f", "lines": ["     console.info('[setUpdatePolicy] catch ' + e);\n        }\n        consol", "  let ret = updater.setUpdatePolicy(policy, function(err, data){\n          ", "    console.error('[setUpdatePolicy] fail.' + e);\n        }\n        console", "     console.error(\"setUpdatePolicy error \" + error)\n            );\n       ", "     console.info('[setUpdatePolicy] error ' + error)\n            })\n      ", "  let ret = updater.setUpdatePolicy(\"\", function(err, data){\n              ", "       console.log(\"setUpdatePolicy success\" + data);\n                expec", "       console.log(\"setUpdatePolicy success\" + data);\n            expect(da", "     console.info('[setUpdatePolicy] success.');\n        console.info('test"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "setUpdatePolicy", "api_method_all": "setUpdatePolicy(policy: UpdatePolicy): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["  let ret = updater.setUpdatePolicy(policy).then(data => {\n                ", "  let ret = updater.setUpdatePolicy(\"\").then(data => {\n                cons"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "applyNewVersion", "api_method_all": "applyNewVersion(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "applyNewVersion", "api_method_all": "applyNewVersion(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "rebootAndCleanCache", "api_method_all": "rebootAndCleanCache(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "rebootAndCleanCache", "api_method_all": "rebootAndCleanCache(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "rebootAndCleanUserData", "api_method_all": "rebootAndCleanUserData(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "rebootAndCleanUserData", "api_method_all": "rebootAndCleanUserData(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "verifyUpdatePackage", "api_method_all": "verifyUpdatePackage(upgradeFile: string, certsFile: string): void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["  let ret = updater.verifyUpdatePackage('/data/updater/upda", "et_verify = updater.verifyUpdatePackage('/data/updater/upda", "et_verify = updater.verifyUpdatePackage();\n            expe"], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "on", "api_method_all": "on(eventType: 'downloadProgress', callback: UpdateProgressCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 1008, "since": 6, "api_used": "\u662f", "lines": ["        }\n\n        console.info('[client.getUpdate] success.')", "h(e) {\n            console.error('[testGetUpdate4] fail.' + e)", "    afterEach(function() {\n        updater = None;\n    });\n   ", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", " {\n                console.error(\"client not defined\");\n      ", "nction() {\n        console.info('testGetUpdate4 START');\n     ", "nction() {\n        console.info('testGetUpdate2 START');\n     ", "uccess.');\n        console.info('testGetUpdate3 END');\n    });", "uccess.');\n        console.info('testGetUpdate2 END');\n    });", "   beforeEach(function() {\n        if (updater === undefined) ", "e.info('AceApplication onDestroy');\n    }\n};\n", "uccess.');\n        console.info('testGetUpdate END');\n    });\n", "tUpdate5', 0, function() {\n        console.info('testGetUpdate", "nt.getUpdater(function(){\n            });\n            expect(t", " 'deccjsunit/lite'\nconst core = Core.getInstance()\ncore.init()", "\n        updater = None;\n    });\n    afterAll(function() {\n   ", "nction() {\n        console.info('testGetUpdate5 START');\n     ", "tUpdate4', 0, function() {\n        console.info('testGetUpdate", "nction() {\n        console.info('testGetUpdate3 START');\n     ", "uccess.');\n        console.info('testGetUpdate4 END');\n    });", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "\n    afterAll(function() {\n        param_value1 = 0;\n        p", "xport default {\n    onCreate() {\n        console.info('AceAppl", " {\n                console.error(\"Fail to get updater\");\n     ", "nction() {\n        console.info('testGetUpdate START');\n      ", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "    beforeAll(function() {\n        param_value1 = 444;\n       ", "OTA');\n            console.info(\"beforeEach updater\" + updater", "etUpdate', 0, function() {\n        console.info('testGetUpdate", "tUpdate2', 0, function() {\n        console.info('testGetUpdate", "444');\n            console.info(\"testGetUpdate3 updater\" + tmp", "tch');\n            console.info(\"testGetUpdate3 updater\" + tmp", "h(e) {\n            console.error('[testGetUpdate] fail.' + e);", "pdateclient', function() {\n    beforeAll(function() {\n        ", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "tUpdate3', 0, function() {\n        console.info('testGetUpdate", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["app.js", "update.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "on", "api_method_all": "on(eventType: 'upgradeProgress', callback: UpdateProgressCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 1008, "since": 6, "api_used": "\u662f", "lines": ["        }\n\n        console.info('[client.getUpdate] success.')", "h(e) {\n            console.error('[testGetUpdate4] fail.' + e)", "    afterEach(function() {\n        updater = None;\n    });\n   ", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", " {\n                console.error(\"client not defined\");\n      ", "nction() {\n        console.info('testGetUpdate4 START');\n     ", "nction() {\n        console.info('testGetUpdate2 START');\n     ", "uccess.');\n        console.info('testGetUpdate3 END');\n    });", "uccess.');\n        console.info('testGetUpdate2 END');\n    });", "   beforeEach(function() {\n        if (updater === undefined) ", "e.info('AceApplication onDestroy');\n    }\n};\n", "uccess.');\n        console.info('testGetUpdate END');\n    });\n", "tUpdate5', 0, function() {\n        console.info('testGetUpdate", "nt.getUpdater(function(){\n            });\n            expect(t", " 'deccjsunit/lite'\nconst core = Core.getInstance()\ncore.init()", "\n        updater = None;\n    });\n    afterAll(function() {\n   ", "nction() {\n        console.info('testGetUpdate5 START');\n     ", "tUpdate4', 0, function() {\n        console.info('testGetUpdate", "nction() {\n        console.info('testGetUpdate3 START');\n     ", "uccess.');\n        console.info('testGetUpdate4 END');\n    });", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "\n    afterAll(function() {\n        param_value1 = 0;\n        p", "xport default {\n    onCreate() {\n        console.info('AceAppl", " {\n                console.error(\"Fail to get updater\");\n     ", "nction() {\n        console.info('testGetUpdate START');\n      ", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "    beforeAll(function() {\n        param_value1 = 444;\n       ", "OTA');\n            console.info(\"beforeEach updater\" + updater", "etUpdate', 0, function() {\n        console.info('testGetUpdate", "tUpdate2', 0, function() {\n        console.info('testGetUpdate", "444');\n            console.info(\"testGetUpdate3 updater\" + tmp", "tch');\n            console.info(\"testGetUpdate3 updater\" + tmp", "h(e) {\n            console.error('[testGetUpdate] fail.' + e);", "pdateclient', function() {\n    beforeAll(function() {\n        ", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "tUpdate3', 0, function() {\n        console.info('testGetUpdate", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["app.js", "update.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "on", "api_method_all": "on(eventType: 'verifyProgress', callback: UpdateProgressCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 1008, "since": 6, "api_used": "\u662f", "lines": ["        }\n\n        console.info('[client.getUpdate] success.')", "h(e) {\n            console.error('[testGetUpdate4] fail.' + e)", "    afterEach(function() {\n        updater = None;\n    });\n   ", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", " {\n                console.error(\"client not defined\");\n      ", "nction() {\n        console.info('testGetUpdate4 START');\n     ", "nction() {\n        console.info('testGetUpdate2 START');\n     ", "uccess.');\n        console.info('testGetUpdate3 END');\n    });", "uccess.');\n        console.info('testGetUpdate2 END');\n    });", "   beforeEach(function() {\n        if (updater === undefined) ", "e.info('AceApplication onDestroy');\n    }\n};\n", "uccess.');\n        console.info('testGetUpdate END');\n    });\n", "tUpdate5', 0, function() {\n        console.info('testGetUpdate", "nt.getUpdater(function(){\n            });\n            expect(t", " 'deccjsunit/lite'\nconst core = Core.getInstance()\ncore.init()", "\n        updater = None;\n    });\n    afterAll(function() {\n   ", "nction() {\n        console.info('testGetUpdate5 START');\n     ", "tUpdate4', 0, function() {\n        console.info('testGetUpdate", "nction() {\n        console.info('testGetUpdate3 START');\n     ", "uccess.');\n        console.info('testGetUpdate4 END');\n    });", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "\n    afterAll(function() {\n        param_value1 = 0;\n        p", "xport default {\n    onCreate() {\n        console.info('AceAppl", " {\n                console.error(\"Fail to get updater\");\n     ", "nction() {\n        console.info('testGetUpdate START');\n      ", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "    beforeAll(function() {\n        param_value1 = 444;\n       ", "OTA');\n            console.info(\"beforeEach updater\" + updater", "etUpdate', 0, function() {\n        console.info('testGetUpdate", "tUpdate2', 0, function() {\n        console.info('testGetUpdate", "444');\n            console.info(\"testGetUpdate3 updater\" + tmp", "tch');\n            console.info(\"testGetUpdate3 updater\" + tmp", "h(e) {\n            console.error('[testGetUpdate] fail.' + e);", "pdateclient', function() {\n    beforeAll(function() {\n        ", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "tUpdate3', 0, function() {\n        console.info('testGetUpdate", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["app.js", "update.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "off", "api_method_all": "off(eventType: 'downloadProgress', callback?: UpdateProgressCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35, "since": 6, "api_used": "\u662f", "lines": ["  let ret = updater.off(\"upgradeProgress\", \"6\");\n            ex", "t ret_off = updater.off(\"verifyProgress\");\n            expect(r", "            updater.off(\"verifyProgress\");\n            expect(r", "            updater.off(\"downloadProgress\");\n                }\n", "            updater.off(\"verifyProgress\");\n                }\n  ", "         expect(ret_off).assertInstanceOf('Number');\n        } ", "t ret_off = updater.off(\"upgradeProgress\");\n            expect(", "  let ret = updater.off(function(){});\n            expect(ret !", "  let ret = updater.off(\"upgradeProgress\");\n            expect(", "            updater.off(\"upgradeProgress\");\n                }\n ", "  let ret = updater.off();\n            expect(ret != 0).assertT", "t ret_off = updater.off(\"downloadProgress\");\n            expect", "            let ret_off = updater.off(\"upgradeProgress\", testFu", "            updater.off(\"downloadProgress\");\n            expect", "  let ret = updater.off(param_value2, \"4444444444444\");\n       ", "  let ret = updater.off(\"upgradeProgress\", \"333333333\");\n      ", "  let ret = updater.off(\"upgradeProgress\", param_value2, \"44444", "            let ret_off = updater.off(\"upgradeProgress\");\n     ", "t ret_off = updater.off(\"upgradeProgress\", testFunction);\n     ", "            let ret_off = updater.off(\"verifyProgress\", testFun", "            let ret_off = updater.off(\"downloadProgress\", testF", "            let ret_off = updater.off(\"verifyProgress\");\n      ", "t ret_off = updater.off(\"verifyProgress\", testFunction);\n      ", "  let ret = updater.off(\"333333333\");\n            expect(ret).a", "            let ret_off = updater.off(\"downloadProgress\");\n    ", "t ret_off = updater.off(\"downloadProgress\", testFunction);\n    "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "off", "api_method_all": "off(eventType: 'upgradeProgress', callback?: UpdateProgressCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35, "since": 6, "api_used": "\u662f", "lines": ["  let ret = updater.off(\"upgradeProgress\", \"6\");\n            ex", "t ret_off = updater.off(\"verifyProgress\");\n            expect(r", "            updater.off(\"verifyProgress\");\n            expect(r", "            updater.off(\"downloadProgress\");\n                }\n", "            updater.off(\"verifyProgress\");\n                }\n  ", "         expect(ret_off).assertInstanceOf('Number');\n        } ", "t ret_off = updater.off(\"upgradeProgress\");\n            expect(", "  let ret = updater.off(function(){});\n            expect(ret !", "  let ret = updater.off(\"upgradeProgress\");\n            expect(", "            updater.off(\"upgradeProgress\");\n                }\n ", "  let ret = updater.off();\n            expect(ret != 0).assertT", "t ret_off = updater.off(\"downloadProgress\");\n            expect", "            let ret_off = updater.off(\"upgradeProgress\", testFu", "            updater.off(\"downloadProgress\");\n            expect", "  let ret = updater.off(param_value2, \"4444444444444\");\n       ", "  let ret = updater.off(\"upgradeProgress\", \"333333333\");\n      ", "  let ret = updater.off(\"upgradeProgress\", param_value2, \"44444", "            let ret_off = updater.off(\"upgradeProgress\");\n     ", "t ret_off = updater.off(\"upgradeProgress\", testFunction);\n     ", "            let ret_off = updater.off(\"verifyProgress\", testFun", "            let ret_off = updater.off(\"downloadProgress\", testF", "            let ret_off = updater.off(\"verifyProgress\");\n      ", "t ret_off = updater.off(\"verifyProgress\", testFunction);\n      ", "  let ret = updater.off(\"333333333\");\n            expect(ret).a", "            let ret_off = updater.off(\"downloadProgress\");\n    ", "t ret_off = updater.off(\"downloadProgress\", testFunction);\n    "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "off", "api_method_all": "off(eventType: 'verifyProgress', callback?: UpdateProgressCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35, "since": 6, "api_used": "\u662f", "lines": ["  let ret = updater.off(\"upgradeProgress\", \"6\");\n            ex", "t ret_off = updater.off(\"verifyProgress\");\n            expect(r", "            updater.off(\"verifyProgress\");\n            expect(r", "            updater.off(\"downloadProgress\");\n                }\n", "            updater.off(\"verifyProgress\");\n                }\n  ", "         expect(ret_off).assertInstanceOf('Number');\n        } ", "t ret_off = updater.off(\"upgradeProgress\");\n            expect(", "  let ret = updater.off(function(){});\n            expect(ret !", "  let ret = updater.off(\"upgradeProgress\");\n            expect(", "            updater.off(\"upgradeProgress\");\n                }\n ", "  let ret = updater.off();\n            expect(ret != 0).assertT", "t ret_off = updater.off(\"downloadProgress\");\n            expect", "            let ret_off = updater.off(\"upgradeProgress\", testFu", "            updater.off(\"downloadProgress\");\n            expect", "  let ret = updater.off(param_value2, \"4444444444444\");\n       ", "  let ret = updater.off(\"upgradeProgress\", \"333333333\");\n      ", "  let ret = updater.off(\"upgradeProgress\", param_value2, \"44444", "            let ret_off = updater.off(\"upgradeProgress\");\n     ", "t ret_off = updater.off(\"upgradeProgress\", testFunction);\n     ", "            let ret_off = updater.off(\"verifyProgress\", testFun", "            let ret_off = updater.off(\"downloadProgress\", testF", "            let ret_off = updater.off(\"verifyProgress\");\n      ", "t ret_off = updater.off(\"verifyProgress\", testFunction);\n      ", "  let ret = updater.off(\"333333333\");\n            expect(ret).a", "            let ret_off = updater.off(\"downloadProgress\");\n    ", "t ret_off = updater.off(\"downloadProgress\", testFunction);\n    "], "files": ["update.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Updater", "api_method_name": "cancel", "api_method_all": "cancel(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 20, "since": 6, "api_used": "\u662f", "lines": ["     console.info('[cancelUpgrade] success.');", "     console.info('[cancel] success.');\n      ", "     console.info('[cancel] catch ' + e);\n    ", "      ret = updater.cancel();\n            cons", "nsole.info('updater.cancelUpgrade' + ret);\n   ", "nsole.info('updater.cancel' + ret);\n          ", "  let ret = updater.cancel();\n            cons", "  let ret = updater.cancel(\"\");\n            co", "  let ret = updater.cancel(function(){});\n    "], "files": ["update.test.js"], "is_white": " ", "desc": " "}]}