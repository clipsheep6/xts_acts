{"subsystem_ch": "\u77ed\u8ddd\u901a\u4fe1\u5b50\u7cfb\u7edf", "subsystem_en": "communication", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.bluetooth", "api": [{"api_class_name": "bluetooth", "api_method_all": "declare namespace bluetooth {\r\n    \r\n    function getState(): BluetoothState;\r\n\r\n    \r\n    function getBtConnectionState(): ProfileConnectionState;\r\n\r\n    \r\n    function pairDevice(deviceId: string): boolean;\r\n\r\n    \r\n    function cancelPairedDevice(deviceId: string): boolean;\r\n\r\n    \r\n    function getRemoteDeviceName(deviceId: string): string;\r\n\r\n    \r\n    function getRemoteDeviceClass(deviceId: string): DeviceClass;\r\n\r\n    \r\n    function enableBluetooth(): boolean;\r\n\r\n    \r\n    function disableBluetooth(): boolean;\r\n\r\n    \r\n    function getLocalName(): string;\r\n\r\n    \r\n    function getPairedDevices(): Array<string>;\r\n\r\n    \r\n    function getProfileConnState(profileId: ProfileId): ProfileConnectionState;\r\n\r\n    \r\n    function setDevicePairingConfirmation(device: string, accept: boolean): boolean;\r\n\r\n    \r\n    function setLocalName(name: string): boolean;\r\n\r\n    \r\n    function setBluetoothScanMode(mode: ScanMode, duration: number): boolean;\r\n\r\n    \r\n    function getBluetoothScanMode(): ScanMode;\r\n\r\n    \r\n    function startBluetoothDiscovery(): boolean;\r\n\r\n    \r\n    function stopBluetoothDiscovery(): boolean;\r\n\r\n    \r\n    function on(type: \"bluetoothDeviceFind\", callback: Callback<Array<string>>): void;\r\n\r\n    \r\n    function off(type: \"bluetoothDeviceFind\", callback?: Callback<Array<string>>): void;\r\n\r\n    \r\n    function on(type: \"bondStateChange\", callback: Callback<BondStateParam>): void;\r\n\r\n    \r\n    function off(type: \"bondStateChange\", callback?: Callback<BondStateParam>): void;\r\n\r\n    \r\n    function on(type: \"pinRequired\", callback: Callback<PinRequiredParam>): void;\r\n\r\n    \r\n    function off(type: \"pinRequired\", callback?: Callback<PinRequiredParam>): void;\r\n\r\n    \r\n    function on(type: \"stateChange\", callback: Callback<BluetoothState>): void;\r\n\r\n    \r\n    function off(type: \"stateChange\", callback?: Callback<BluetoothState>): void;\r\n\r\n    \r\n    function sppListen(name: string, option: SppOption, callback: AsyncCallback<number>): void;\r\n\r\n    \r\n    function sppAccept(serverSocket: number, callback: AsyncCallback<number>): void;\r\n\r\n    \r\n    function sppConnect(device: string, option: SppOption, callback: AsyncCallback<number>): void;\r\n\r\n    \r\n    function sppCloseServerSocket(socket: number): void;\r\n\r\n    \r\n    function sppCloseClientSocket(socket: number): void;\r\n\r\n    \r\n    function sppWrite(clientSocket: number, data: ArrayBuffer): boolean;\r\n\r\n    \r\n    function on(type: \"sppRead\", clientSocket: number, callback: Callback<ArrayBuffer>): void;\r\n\r\n    \r\n    function off(type: \"sppRead\", clientSocket: number, callback?: Callback<ArrayBuffer>): void;\r\n\r\n    \r\n    function getProfile(profileId: ProfileId): A2dpSourceProfile | HandsFreeAudioGatewayProfile;\r\n\r\n    \r\n    interface BaseProfile {\r\n        \r\n        getConnectionDevices(): Array<string>;\r\n\r\n        \r\n        getDeviceState(device: string): ProfileConnectionState;\r\n    }\r\n\r\n    \r\n    interface A2dpSourceProfile extends BaseProfile {\r\n        \r\n        connect(device: string): boolean;\r\n\r\n        \r\n        disconnect(device: string): boolean;\r\n\r\n        \r\n        on(type: \"connectionStateChange\", callback: Callback<StateChangeParam>): void;\r\n\r\n        \r\n        off(type: \"connectionStateChange\", callback?: Callback<StateChangeParam>): void;\r\n\r\n        \r\n        getPlayingState(device: string): PlayingState;\r\n    }\r\n\r\n    \r\n    interface HandsFreeAudioGatewayProfile extends BaseProfile {\r\n        \r\n        connect(device: string): boolean;\r\n\r\n        \r\n        disconnect(device: string): boolean;\r\n\r\n        \r\n        on(type: \"connectionStateChange\", callback: Callback<StateChangeParam>): void;\r\n\r\n        \r\n        off(type: \"connectionStateChange\", callback?: Callback<StateChangeParam>): void;\r\n    }\r\n\r\n    namespace BLE {\r\n        \r\n        function createGattServer(): GattServer;\r\n\r\n        \r\n        function createGattClientDevice(deviceId: string): GattClientDevice;\r\n\r\n        \r\n        function getConnectedBLEDevices(): Array<string>;\r\n\r\n        \r\n        function startBLEScan(filters: Array<ScanFilter>, options?: ScanOptions): void;\r\n\r\n        \r\n        function stopBLEScan(): void;\r\n\r\n        \r\n        function on(type: \"BLEDeviceFind\", callback: Callback<Array<ScanResult>>): void;\r\n\r\n        \r\n        function off(type: \"BLEDeviceFind\", callback?: Callback<Array<ScanResult>>): void;\r\n    }\r\n\r\n    \r\n    interface GattServer {\r\n        \r\n        startAdvertising(setting: AdvertiseSetting, advData: AdvertiseData, advResponse?: AdvertiseData): void;\r\n\r\n        \r\n        stopAdvertising(): void;\r\n\r\n        \r\n        addService(service: GattService): boolean;\r\n\r\n        \r\n        removeService(serviceUuid: string): boolean;\r\n\r\n        \r\n        close(): void;\r\n\r\n        \r\n        notifyCharacteristicChanged(deviceId: string, notifyCharacteristic: NotifyCharacteristic): boolean;\r\n\r\n        \r\n        sendResponse(serverResponse: ServerResponse): boolean;\r\n\r\n        \r\n        on(type: \"characteristicRead\", callback: Callback<CharacteristicReadReq>): void;\r\n\r\n        \r\n        off(type: \"characteristicRead\", callback?: Callback<CharacteristicReadReq>): void;\r\n\r\n        \r\n        on(type: \"characteristicWrite\", callback: Callback<CharacteristicWriteReq>): void;\r\n\r\n        \r\n        off(type: \"characteristicWrite\", callback?: Callback<CharacteristicWriteReq>): void;\r\n\r\n        \r\n        on(type: \"descriptorRead\", callback: Callback<DescriptorReadReq>): void;\r\n\r\n        \r\n        off(type: \"descriptorRead\", callback?: Callback<DescriptorReadReq>): void;\r\n\r\n        \r\n        on(type: \"descriptorWrite\", callback: Callback<DescriptorWriteReq>): void;\r\n\r\n        \r\n        off(type: \"descriptorWrite\", callback?: Callback<DescriptorWriteReq>): void;\r\n\r\n        \r\n        on(type: \"connectStateChange\", callback: Callback<BLEConnectChangedState>): void;\r\n\r\n        \r\n        off(type: \"connectStateChange\", callback?: Callback<BLEConnectChangedState>): void;\r\n    }\r\n\r\n    \r\n    interface GattClientDevice {\r\n\r\n        \r\n        connect(): boolean;\r\n\r\n        \r\n        disconnect(): boolean;\r\n\r\n        \r\n        close(): boolean;\r\n\r\n        \r\n        getDeviceName(callback: AsyncCallback<string>): void;\r\n        getDeviceName(): Promise<string>;\r\n\r\n        \r\n        getServices(callback: AsyncCallback<Array<GattService>>): void;\r\n        getServices(): Promise<Array<GattService>>;\r\n\r\n        \r\n        readCharacteristicValue(characteristic: BLECharacteristic, callback: AsyncCallback<BLECharacteristic>): void;\r\n        readCharacteristicValue(characteristic: BLECharacteristic): Promise<BLECharacteristic>;\r\n\r\n        \r\n        readDescriptorValue(descriptor: BLEDescriptor, callback: AsyncCallback<BLEDescriptor>): void;\r\n        readDescriptorValue(descriptor: BLEDescriptor): Promise<BLEDescriptor>;\r\n\r\n        \r\n        writeCharacteristicValue(characteristic: BLECharacteristic): boolean;\r\n\r\n        \r\n        writeDescriptorValue(descriptor: BLEDescriptor): boolean;\r\n\r\n        \r\n        getRssiValue(callback: AsyncCallback<number>): void;\r\n        getRssiValue(): Promise<number>;\r\n\r\n        \r\n        setBLEMtuSize(mtu: number): boolean;\r\n\r\n        \r\n        setNotifyCharacteristicChanged(characteristic: BLECharacteristic, enable: boolean): boolean;\r\n\r\n        \r\n        on(type: \"BLECharacteristicChange\", callback: Callback<BLECharacteristic>): void;\r\n\r\n        \r\n        off(type: \"BLECharacteristicChange\", callback?: Callback<BLECharacteristic>): void;\r\n\r\n        \r\n        on(type: \"BLEConnectionStateChange\", callback: Callback<BLEConnectChangedState>): void;\r\n\r\n        \r\n        off(type: \"BLEConnectionStateChange\", callback?: Callback<BLEConnectChangedState>): void;\r\n    }\r\n\r\n    \r\n    interface GattService {\r\n        \r\n        serviceUuid: string;\r\n        \r\n        isPrimary: boolean;\r\n        \r\n        characteristics: Array<BLECharacteristic>;\r\n        \r\n        includeServices?: Array<GattService>;\r\n    }\r\n\r\n    \r\n    interface BLECharacteristic {\r\n        \r\n        serviceUuid: string;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        characteristicValue: ArrayBuffer;\r\n        \r\n        descriptors: Array<BLEDescriptor>;\r\n    }\r\n\r\n    \r\n    interface BLEDescriptor {\r\n        \r\n        serviceUuid: string;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        descriptorUuid: string;\r\n        \r\n        descriptorValue: ArrayBuffer;\r\n    }\r\n\r\n    \r\n    interface NotifyCharacteristic {\r\n        \r\n        serviceUuid: string;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        characteristicValue: ArrayBuffer;\r\n        \r\n        confirm: boolean;\r\n    }\r\n\r\n    \r\n    interface CharacteristicReadReq {\r\n        \r\n        deviceId: string;\r\n        \r\n        transId: number;\r\n        \r\n        offset: number;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        serviceUuid: string;\r\n    }\r\n\r\n    \r\n    interface CharacteristicWriteReq {\r\n        \r\n        deviceId: string;\r\n        \r\n        transId: number;\r\n        \r\n        offset: number;\r\n        \r\n        isPrep: boolean;\r\n        \r\n        needRsp: boolean;\r\n        \r\n        value: ArrayBuffer;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        serviceUuid: string;\r\n    }\r\n\r\n    \r\n    interface DescriptorReadReq {\r\n        \r\n        deviceId: string;\r\n        \r\n        transId: number;\r\n        \r\n        offset: number;\r\n        \r\n        descriptorUuid: string;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        serviceUuid: string;\r\n    }\r\n\r\n    \r\n    interface DescriptorWriteReq {\r\n        \r\n        deviceId: string;\r\n        \r\n        transId: number;\r\n        \r\n        offset: number;\r\n        \r\n        isPrep: boolean;\r\n        \r\n        needRsp: boolean;\r\n        \r\n        value: ArrayBuffer;\r\n        \r\n        descriptorUuid: string;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        serviceUuid: string;\r\n    }\r\n\r\n    \r\n    interface ServerResponse {\r\n        \r\n        deviceId: string;\r\n        \r\n        transId: number;\r\n        \r\n        status: number;\r\n        \r\n        offset: number;\r\n        \r\n        value: ArrayBuffer;\r\n    }\r\n\r\n    \r\n    interface BLEConnectChangedState {\r\n        \r\n        deviceId: string;\r\n        \r\n        state: ProfileConnectionState;\r\n    }\r\n\r\n    \r\n    interface ScanResult {\r\n        \r\n        deviceId: string;\r\n        \r\n        rssi: number;\r\n        \r\n        data: ArrayBuffer;\r\n    }\r\n\r\n    \r\n    interface AdvertiseSetting {\r\n        \r\n        interval?: number;\r\n        \r\n        txPower?: number;\r\n        \r\n        connectable?: boolean;\r\n    }\r\n\r\n    \r\n    interface AdvertiseData {\r\n        \r\n        serviceUuids: Array<string>;\r\n        \r\n        manufactureData: Array<ManufactureData>;\r\n        \r\n        serviceData: Array<ServiceData>;\r\n    }\r\n\r\n    \r\n    interface ManufactureData {\r\n        \r\n        manufactureId: number;\r\n        \r\n        manufactureValue: ArrayBuffer;\r\n    }\r\n\r\n    \r\n    interface ServiceData {\r\n        \r\n        serviceUuid: string;\r\n        \r\n        serviceValue: ArrayBuffer;\r\n    }\r\n\r\n    \r\n    interface ScanFilter {\r\n        \r\n        deviceId?: string;\r\n        \r\n        name?: string;\r\n        \r\n        serviceUuid?: string;\r\n    }\r\n\r\n    \r\n    interface ScanOptions {\r\n        \r\n        interval?: number;\r\n        \r\n        dutyMode?: ScanDuty;\r\n        \r\n        matchMode?: MatchMode;\r\n    }\r\n\r\n    \r\n    interface SppOption {\r\n        \r\n        uuid: string;\r\n        \r\n        secure: boolean;\r\n        \r\n        type: SppType;\r\n    }\r\n\r\n    \r\n    interface PinRequiredParam {\r\n        deviceId: string;\r\n        pinCode: string;\r\n    }\r\n\r\n    \r\n    interface DeviceClass {\r\n        majorClass: MajorClass;\r\n        majorMinorClass: MajorMinorClass;\r\n        classOfDevice: number;\r\n    }\r\n\r\n    \r\n    interface BondStateParam {\r\n        deviceId: string;\r\n        state: BondState;\r\n    }\r\n\r\n    enum ScanDuty {\r\n        \r\n        SCAN_MODE_LOW_POWER = 0,\r\n        \r\n        SCAN_MODE_BALANCED = 1,\r\n        \r\n        SCAN_MODE_LOW_LATENCY = 2\r\n    }\r\n\r\n    enum MatchMode {\r\n        \r\n        MATCH_MODE_AGGRESSIVE = 1,\r\n        \r\n        MATCH_MODE_STICKY = 2\r\n    }\r\n\r\n    enum ProfileConnectionState {\r\n        \r\n        STATE_DISCONNECTED = 0,\r\n        \r\n        STATE_CONNECTING = 1,\r\n        \r\n        STATE_CONNECTED = 2,\r\n        \r\n        STATE_DISCONNECTING = 3\r\n    }\r\n\r\n    enum BluetoothState {\r\n        \r\n        STATE_OFF = 0,\r\n        \r\n        STATE_TURNING_ON = 1,\r\n        \r\n        STATE_ON = 2,\r\n        \r\n        STATE_TURNING_OFF = 3,\r\n        \r\n        STATE_BLE_TURNING_ON = 4,\r\n        \r\n        STATE_BLE_ON = 5,\r\n        \r\n        STATE_BLE_TURNING_OFF = 6\r\n    }\r\n\r\n    \r\n    enum SppType {\r\n        \r\n        SPP_RFCOMM\r\n    }\r\n\r\n    \r\n    enum ScanMode {\r\n        \r\n        SCAN_MODE_NONE = 0,\r\n        \r\n        SCAN_MODE_CONNECTABLE = 1,\r\n        \r\n        SCAN_MODE_GENERAL_DISCOVERABLE = 2,\r\n        \r\n        SCAN_MODE_LIMITED_DISCOVERABLE = 3,\r\n        \r\n        SCAN_MODE_CONNECTABLE_GENERAL_DISCOVERABLE = 4,\r\n        \r\n        SCAN_MODE_CONNECTABLE_LIMITED_DISCOVERABLE = 5\r\n    }\r\n\r\n    \r\n    enum BondState {\r\n        \r\n        BOND_STATE_INVALID = 0,\r\n        \r\n        BOND_STATE_BONDING = 1,\r\n        \r\n        BOND_STATE_BONDED = 2\r\n    }\r\n\r\n    \r\n    enum MajorClass {\r\n        MAJOR_MISC = 0x0000,\r\n        MAJOR_COMPUTER = 0x0100,\r\n        MAJOR_PHONE = 0x0200,\r\n        MAJOR_NETWORKING = 0x0300,\r\n        MAJOR_AUDIO_VIDEO = 0x0400,\r\n        MAJOR_PERIPHERAL = 0x0500,\r\n        MAJOR_IMAGING = 0x0600,\r\n        MAJOR_WEARABLE = 0x0700,\r\n        MAJOR_TOY = 0x0800,\r\n        MAJOR_HEALTH = 0x0900,\r\n        MAJOR_UNCATEGORIZED = 0x1F00\r\n    }\r\n\r\n    \r\n    enum MajorMinorClass {\r\n        // The Minor Device Class field\r\n        // Computer Major Class\r\n        COMPUTER_UNCATEGORIZED = 0x0100,\r\n        COMPUTER_DESKTOP = 0x0104,\r\n        COMPUTER_SERVER = 0x0108,\r\n        COMPUTER_LAPTOP = 0x010C,\r\n        COMPUTER_HANDHELD_PC_PDA = 0x0110,\r\n        COMPUTER_PALM_SIZE_PC_PDA = 0x0114,\r\n        COMPUTER_WEARABLE = 0x0118,\r\n        COMPUTER_TABLET = 0x011C,\r\n\r\n        // Phone Major Class\r\n        PHONE_UNCATEGORIZED = 0x0200,\r\n        PHONE_CELLULAR = 0x0204,\r\n        PHONE_CORDLESS = 0x0208,\r\n        PHONE_SMART = 0x020C,\r\n        PHONE_MODEM_OR_GATEWAY = 0x0210,\r\n        PHONE_ISDN = 0x0214,\r\n\r\n        // LAN/Network Access Point Major Class\r\n        NETWORK_FULLY_AVAILABLE = 0x0300,\r\n        NETWORK_1_TO_17_UTILIZED = 0x0320,\r\n        NETWORK_17_TO_33_UTILIZED = 0x0340,\r\n        NETWORK_33_TO_50_UTILIZED = 0x0360,\r\n        NETWORK_60_TO_67_UTILIZED = 0x0380,\r\n        NETWORK_67_TO_83_UTILIZED = 0x03A0,\r\n        NETWORK_83_TO_99_UTILIZED = 0x03C0,\r\n        NETWORK_NO_SERVICE = 0x03E0,\r\n\r\n        // Audio/Video Major Class\r\n        AUDIO_VIDEO_UNCATEGORIZED = 0x0400,\r\n        AUDIO_VIDEO_WEARABLE_HEADSET = 0x0404,\r\n        AUDIO_VIDEO_HANDSFREE = 0x0408,\r\n        AUDIO_VIDEO_MICROPHONE = 0x0410,\r\n        AUDIO_VIDEO_LOUDSPEAKER = 0x0414,\r\n        AUDIO_VIDEO_HEADPHONES = 0x0418,\r\n        AUDIO_VIDEO_PORTABLE_AUDIO = 0x041C,\r\n        AUDIO_VIDEO_CAR_AUDIO = 0x0420,\r\n        AUDIO_VIDEO_SET_TOP_BOX = 0x0424,\r\n        AUDIO_VIDEO_HIFI_AUDIO = 0x0428,\r\n        AUDIO_VIDEO_VCR = 0x042C,\r\n        AUDIO_VIDEO_VIDEO_CAMERA = 0x0430,\r\n        AUDIO_VIDEO_CAMCORDER = 0x0434,\r\n        AUDIO_VIDEO_VIDEO_MONITOR = 0x0438,\r\n        AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER = 0x043C,\r\n        AUDIO_VIDEO_VIDEO_CONFERENCING = 0x0440,\r\n        AUDIO_VIDEO_VIDEO_GAMING_TOY = 0x0448,\r\n\r\n        // Peripheral Major Class\r\n        PERIPHERAL_NON_KEYBOARD_NON_POINTING = 0x0500,\r\n        PERIPHERAL_KEYBOARD = 0x0540,\r\n        PERIPHERAL_POINTING_DEVICE = 0x0580,\r\n        PERIPHERAL_KEYBOARD_POINTING = 0x05C0,\r\n        PERIPHERAL_UNCATEGORIZED = 0x0500,\r\n        PERIPHERAL_JOYSTICK = 0x0504,\r\n        PERIPHERAL_GAMEPAD = 0x0508,\r\n        PERIPHERAL_REMOTE_CONTROL = 0x05C0,\r\n        PERIPHERAL_SENSING_DEVICE = 0x0510,\r\n        PERIPHERAL_DIGITIZER_TABLET = 0x0514,\r\n        PERIPHERAL_CARD_READER = 0x0518,\r\n        PERIPHERAL_DIGITAL_PEN = 0x051C,\r\n        PERIPHERAL_SCANNER_RFID = 0x0520,\r\n        PERIPHERAL_GESTURAL_INPUT = 0x0522,\r\n\r\n        // Imaging Major Class\r\n        IMAGING_UNCATEGORIZED = 0x0600,\r\n        IMAGING_DISPLAY = 0x0610,\r\n        IMAGING_CAMERA = 0x0620,\r\n        IMAGING_SCANNER = 0x0640,\r\n        IMAGING_PRINTER = 0x0680,\r\n\r\n        // Wearable Major Class\r\n        WEARABLE_UNCATEGORIZED = 0x0700,\r\n        WEARABLE_WRIST_WATCH = 0x0704,\r\n        WEARABLE_PAGER = 0x0708,\r\n        WEARABLE_JACKET = 0x070C,\r\n        WEARABLE_HELMET = 0x0710,\r\n        WEARABLE_GLASSES = 0x0714,\r\n\r\n        // Minor Device Class field - Toy Major Class\r\n        TOY_UNCATEGORIZED = 0x0800,\r\n        TOY_ROBOT = 0x0804,\r\n        TOY_VEHICLE = 0x0808,\r\n        TOY_DOLL_ACTION_FIGURE = 0x080C,\r\n        TOY_CONTROLLER = 0x0810,\r\n        TOY_GAME = 0x0814,\r\n\r\n        // Minor Device Class field - Health\r\n        HEALTH_UNCATEGORIZED = 0x0900,\r\n        HEALTH_BLOOD_PRESSURE = 0x0904,\r\n        HEALTH_THERMOMETER = 0x0908,\r\n        HEALTH_WEIGHING = 0x090C,\r\n        HEALTH_GLUCOSE = 0x0910,\r\n        HEALTH_PULSE_OXIMETER = 0x0914,\r\n        HEALTH_PULSE_RATE = 0x0918,\r\n        HEALTH_DATA_DISPLAY = 0x091C,\r\n        HEALTH_STEP_COUNTER = 0x0920,\r\n        HEALTH_BODY_COMPOSITION_ANALYZER = 0x0924,\r\n        HEALTH_PEAK_FLOW_MOITOR = 0x0928,\r\n        HEALTH_MEDICATION_MONITOR = 0x092C,\r\n        HEALTH_KNEE_PROSTHESIS = 0x0930,\r\n        HEALTH_ANKLE_PROSTHESIS = 0x0934,\r\n        HEALTH_GENERIC_HEALTH_MANAGER = 0x0938,\r\n        HEALTH_PERSONAL_MOBILITY_DEVICE = 0x093C,\r\n    }\r\n\r\n    \r\n    interface StateChangeParam {\r\n        \r\n        deviceId: string;\r\n\r\n        \r\n        state: ProfileConnectionState;\r\n    }\r\n\r\n    \r\n    enum PlayingState {\r\n        STATE_NOT_PLAYING,\r\n        STATE_PLAYING,\r\n    }\r\n\r\n    \r\n    enum ProfileId {\r\n        PROFILE_A2DP_SOURCE = 1,\r\n        PROFILE_HANDS_FREE_AUDIO_GATEWAY = 4,\r\n    }\r\n}", "api_method_name": "bluetooth", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 415, "since": 0, "api_used": "\u662f", "lines": ["", "       let result = bluetooth.BLE.getConnectedBLE", "       let result = bluetooth.BLE.createGattServe", "     console.info('[bluetooth_js] BLE stop advert", "     console.info('[bluetooth_js] BLE get rssi1 s", "     console.info('[bluetooth_js] BLE get device ", "     console.info('[bluetooth_js] createGattServe", "('SUB_COMMUNACATION_bluetooth_GATT_CONNRCT_0001',", "     console.info('[bluetooth_js] BLE advertising", "uetooth from '@ohos.bluetooth';\nimport {describe,", "     console.info('[bluetooth_js] getState On = '", "   let gattServer = bluetooth.BLE.createGattServe", "     console.info('[bluetooth_js] bt turn on:'+ J", "     console.error(`bluetooth getRssiValue has er", "     console.info('[bluetooth_js] enable success'", "{\n        let sta = bluetooth.getState();\n       ", "     console.info('[bluetooth_js] getConnectedBLE", "('SUB_COMMUNACATION_bluetooth_GET_DEVICE_NAME_PRO", "     console.info('[bluetooth_js] enable start');", "('SUB_COMMUNACATION_bluetooth_STOP_ADVERTISING_00", "('SUB_COMMUNACATION_bluetooth_ENABLE_0001', 0, as", "x1F00\n}\n\n\ndescribe('bluetoothhostTest', function(", "     console.info(\"[bluetooth_js] createGattServe", "('SUB_COMMUNACATION_bluetooth_GATT_GETSERVICES_CA", "     console.info('[bluetooth_js] bt turn off:'+ ", "     console.info('[bluetooth_js] bt turning on:'", "));\n                bluetooth.enableBluetooth();\n", "       gattServer = bluetooth.BLE.createGattServe", "   let gattClient = bluetooth.BLE.createGattClien", "('SUB_COMMUNACATION_bluetoothble_GET_CONNECTED_BL", "('SUB_COMMUNACATION_bluetooth_START_ADVERTISING_0", "     console.info('[bluetooth_js] bt turning off:", "     console.info('[bluetooth_js] startAdv res: '", "        let state = bluetooth.getState();\n       ", "('SUB_COMMUNACATION_bluetooth_GET_RSSI_VALUE_CALL", "     console.info('[bluetooth_js] rssi err:' + JS", "       gattClient = bluetooth.BLE.createGattClien", "('SUB_COMMUNACATION_bluetoothble_CREATE_GATT_SERV", "     console.info('[bluetooth_js] gatt connect st", "     console.info(\"[bluetooth_js] getConnDev:\" + ", "     console.info('[bluetooth_js] BLE get rssi st", "     console.info('[bluetooth_js] getServices cal", "     console.info('[bluetooth_js] BLE read rssi '", "     console.info('[bluetooth_js] device name' + ", "('SUB_COMMUNACATION_bluetooth_GET_RSSI_VALUE_PROM"], "files": ["BluetoothBle.test.js", "Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "getState", "api_method_all": "function getState(): BluetoothState;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["t state = bluetooth.getState();\n        expect(s", "t state = bluetooth.getState();\n        console.", "let sta = bluetooth.getState();\n        switch(s", "t state = bluetooth.getState();\n        expect(t", "nfo('[bluetooth_js] getState On = '+ JSON.string", "nfo('[bluetooth_js] getState start');\n        aw"], "files": ["BluetoothBle.test.js", "Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "getBtConnectionState", "api_method_all": "function getBtConnectionState(): ProfileConnectionState;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["nnState = bluetooth.getBtConnectionState();\n        console."], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "pairDevice", "api_method_all": "function pairDevice(deviceId: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": [" result = bluetooth.pairDevice(\"00:00:00:00:00:00\"", "enable3 = bluetooth.pairDevice(\"00:00:00:00:00:00\"", "enable4 = bluetooth.pairDevice(\"00:00:00:00:00:00\""], "files": ["Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "cancelPairedDevice", "api_method_all": "function cancelPairedDevice(deviceId: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] cancelPairedDevice ret2 : ' + JSON.str", "let ret = bluetooth.cancelPairedDevice(\"00:00:00:00:00:00\"", "nfo('[bluetooth_js] cancelPairedDevice start');\n        aw"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "getRemoteDeviceName", "api_method_all": "function getRemoteDeviceName(deviceId: string): string;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] getRemoteDeviceName start');\n        aw", "let ret = bluetooth.getRemoteDeviceName(\"00:00:00:00:00:00\"", "nfo('[bluetooth_js] getRemoteDeviceName ret2 : ' + JSON.str"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "getRemoteDeviceClass", "api_method_all": "function getRemoteDeviceClass(deviceId: string): DeviceClass;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] getRemoteDeviceClass start');\n        aw", "let ret = bluetooth.getRemoteDeviceClass(\"00:00:00:00:00:00\"", "nfo('[bluetooth_js] getRemoteDeviceClass ret2 :' + JSON.stri"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "enableBluetooth", "api_method_all": "function enableBluetooth(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["          bluetooth.enableBluetooth();\n                "], "files": ["BluetoothBle.test.js", "Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "disableBluetooth", "api_method_all": "function disableBluetooth(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["disable = bluetooth.disableBluetooth();\n        console."], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "getLocalName", "api_method_all": "function getLocalName(): string;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["calName = bluetooth.getLocalName();\n        expect(t", "calName = bluetooth.getLocalName();\n        let name", "calName = bluetooth.getLocalName();\n        console.", "nfo('[bluetooth_js] getLocalName result1 = ' + JSON."], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "getPairedDevices", "api_method_all": "function getPairedDevices(): Array<string>;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["devices = bluetooth.getPairedDevices();\n        console."], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "getProfileConnState", "api_method_all": "function getProfileConnState(profileId: ProfileId): ProfileConnectionState;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "setDevicePairingConfirmation", "api_method_all": "function setDevicePairingConfirmation(device: string, accept: boolean): boolean;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["          bluetooth.setDevicePairingConfirmation(result,false);\n    "], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "setLocalName", "api_method_all": "function setLocalName(name: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] setLocalName result9 = '+ JSON.s", "et name = bluetooth.setLocalName(Btname.MIXES);\n    ", "et name = bluetooth.setLocalName(Btname.MIXES3);\n   ", "et name = bluetooth.setLocalName(Btname.MIXES6);\n   ", "nfo('[bluetooth_js] setLocalName result7 = '+ JSON.s", "et name = bluetooth.setLocalName(Btname.CHINESES_TES", "et name = bluetooth.setLocalName('');\n        expect", "et name = bluetooth.setLocalName('bluetooth_test');\n", "nfo('[bluetooth_js] setLocalName result13 = '+ JSON.", "    * @tc.desc Test setLocalName api.\n     * @tc.siz", "et name = bluetooth.setLocalName();\n        console.", "et name = bluetooth.setLocalName(Btname.MIXES2);\n   ", "     * @tc.name testsetLocalName\n     * @tc.desc Tes", "nfo('[bluetooth_js] setLocalName result10 = '+ JSON.", "et name = bluetooth.setLocalName(Btname.NUM_TEST1);\n", "et name = bluetooth.setLocalName(Btname.LETTERS_TEST", "et name = bluetooth.setLocalName(Btname.MIXES4);\n   ", "et name = bluetooth.setLocalName(Btname.SYMBOL_TEST)", "nfo('[bluetooth_js] setLocalName result11 = '+ JSON.", "et name = bluetooth.setLocalName(Btname.MIXES7);\n   ", "nfo('[bluetooth_js] setLocalName result8 = '+ JSON.s", "nfo('[bluetooth_js] setLocalName result12 = '+ JSON.", "et name = bluetooth.setLocalName(Btname.NUM_TEST);\n ", "et name = bluetooth.setLocalName(Btname.MIXES5);\n   "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "setBluetoothScanMode", "api_method_all": "function setBluetoothScanMode(mode: ScanMode, duration: number): boolean;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [" result = bluetooth.setBluetoothScanMode(1,10000);\n        e"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "getBluetoothScanMode", "api_method_all": "function getBluetoothScanMode(): ScanMode;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["canMode = bluetooth.getBluetoothScanMode();\n        console."], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "startBluetoothDiscovery", "api_method_all": "function startBluetoothDiscovery(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [" result = bluetooth.startBluetoothDiscovery();\n        console.", "    await bluetooth.startBluetoothDiscovery();\n        await bl"], "files": ["Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "stopBluetoothDiscovery", "api_method_all": "function stopBluetoothDiscovery(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["      console.info(\"stopBluetoothDiscovery :\" + JSON.stringify", " result = bluetooth.stopBluetoothDiscovery();\n        console."], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "on", "api_method_all": "function on(type: \"bluetoothDeviceFind\", callback: Callback<Array<string>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "off", "api_method_all": "function off(type: \"bluetoothDeviceFind\", callback?: Callback<Array<string>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "on", "api_method_all": "function on(type: \"bondStateChange\", callback: Callback<BondStateParam>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "off", "api_method_all": "function off(type: \"bondStateChange\", callback?: Callback<BondStateParam>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "on", "api_method_all": "function on(type: \"pinRequired\", callback: Callback<PinRequiredParam>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "off", "api_method_all": "function off(type: \"pinRequired\", callback?: Callback<PinRequiredParam>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "on", "api_method_all": "function on(type: \"stateChange\", callback: Callback<BluetoothState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "off", "api_method_all": "function off(type: \"stateChange\", callback?: Callback<BluetoothState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "sppListen", "api_method_all": "function sppListen(name: string, option: SppOption, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [";\n        bluetooth.sppListen('server1', sppOption, function(code, se"], "files": ["Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "sppAccept", "api_method_all": "function sppAccept(serverSocket: number, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": [";\n        bluetooth.sppAccept(-1, function(code, clientSocketNumber) "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "sppConnect", "api_method_all": "function sppConnect(device: string, option: SppOption, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": [";\n        bluetooth.sppConnect(55, sppOption, function(code, clientSoc"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "sppCloseServerSocket", "api_method_all": "function sppCloseServerSocket(socket: number): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["tooth_js] bluetooth sppCloseServerSocket ret : ' + ret);\n   ", "let ret = bluetooth.sppCloseServerSocket(-1);\n        consol"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "sppCloseClientSocket", "api_method_all": "function sppCloseClientSocket(socket: number): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "sppWrite", "api_method_all": "function sppWrite(clientSocket: number, data: ArrayBuffer): boolean;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["tooth_js] bluetooth sppWrite ret : ' + ret);\n   ", "let ret = bluetooth.sppWrite(-1, arrayBuffer);\n "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "on", "api_method_all": "function on(type: \"sppRead\", clientSocket: number, callback: Callback<ArrayBuffer>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "off", "api_method_all": "function off(type: \"sppRead\", clientSocket: number, callback?: Callback<ArrayBuffer>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bluetooth", "api_method_name": "getProfile", "api_method_all": "function getProfile(profileId: ProfileId): A2dpSourceProfile | HandsFreeAudioGatewayProfile;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BaseProfile", "api_method_all": "interface BaseProfile {\r\n        \r\n        getConnectionDevices(): Array<string>;\r\n\r\n        \r\n        getDeviceState(device: string): ProfileConnectionState;\r\n    }", "api_method_name": "BaseProfile", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BaseProfile", "api_method_name": "getConnectionDevices", "api_method_all": "getConnectionDevices(): Array<string>;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BaseProfile", "api_method_name": "getDeviceState", "api_method_all": "getDeviceState(device: string): ProfileConnectionState;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "A2dpSourceProfile", "api_method_all": "interface A2dpSourceProfile extends BaseProfile {\r\n        \r\n        connect(device: string): boolean;\r\n\r\n        \r\n        disconnect(device: string): boolean;\r\n\r\n        \r\n        on(type: \"connectionStateChange\", callback: Callback<StateChangeParam>): void;\r\n\r\n        \r\n        off(type: \"connectionStateChange\", callback?: Callback<StateChangeParam>): void;\r\n\r\n        \r\n        getPlayingState(device: string): PlayingState;\r\n    }", "api_method_name": "A2dpSourceProfile", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "A2dpSourceProfile", "api_method_name": "connect", "api_method_all": "connect(device: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 67, "since": 8, "api_used": "\u662f", "lines": ["et ret = gattClient.connect();\n        expect(r", "        expect(wifi.connectToNetwork(netWorkId)", "     };\n        let connect = {\n            onC", "le.info(\"[wifi_test]connectdevice result: \" + w", "luetooth_js] get bt connection state result' + ", "      console.info(\"connectState: \" + result.co", "uetooth_js] gatt disconnect ret:' + ret);\n     ", "led')\n        await connectAbility().then((remo", "@tc.desc       Test connectToDevice 10 bits WEP", "},\n            onDisconnect:function (elementNa", ".assertEqual(result.connectState ==P2pConnectSt", "uetooth_js] gatt disconnect start');\n        aw", "g(\"[wifi_test] wifi connectToDevice result: \" +", ".desc       Test disconnect Deviceconfig\n    */", "     expect(wifi.disconnect()).assertTrue();\n  ", "wait gattServer.on('connectStateChange', functi", "= 31;\n\n    function connectAbility() {\n        ", "c.desc       Test reconnect wifi\n    */\n   it('", "ce result: \" + wifi.connectToNetwork(netWorkId)", "nfo(\"[bluetooth_js] connectStaOn jsonData -> \" ", "ait gattServer.off('connectStateChange', functi", "ctState: \" + result.connectState + \n           ", " let result1 = wifi.connectToDevice(wifiDeviceC", "      expect(wifi.reconnect()).assertTrue();\n  ", "'[bluetooth_js] get connection state start');\n ", "[bluetooth_js] gatt connect start');\n        aw", "og(\"RpcClient: onDisconnect\")\n            },\n  ", "@tc.desc       Test connectToDevice 26 bits WEP", "onnectAbility(want, connect)\n        return new", "ret = gattClient.disconnect();\n        console.", "@tc.desc       Test connectToDevice 5bits ASCLL", "'[bluetooth_js] spp_connect start');\n        aw", "60,\n                connectable:true,\n         ", " console.log(\"start connect local ability, wait", "      };\n        FA.connectAbility(want, connec", "nfo(\"[bluetooth_js] connectStateChange_off Data"], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSta.test.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "A2dpSourceProfile", "api_method_name": "disconnect", "api_method_all": "disconnect(device: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["et ret = gattClient.disconnect();\n        console.", "        expect(wifi.disconnect()).assertTrue();\n  ", "@tc.desc       Test disconnect Deviceconfig\n    */", "[bluetooth_js] gatt disconnect ret:' + ret);\n     ", "[bluetooth_js] gatt disconnect start');\n        aw"], "files": ["BluetoothBle.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "A2dpSourceProfile", "api_method_name": "on", "api_method_all": "on(type: \"connectionStateChange\", callback: Callback<StateChangeParam>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "A2dpSourceProfile", "api_method_name": "off", "api_method_all": "off(type: \"connectionStateChange\", callback?: Callback<StateChangeParam>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "A2dpSourceProfile", "api_method_name": "getPlayingState", "api_method_all": "getPlayingState(device: string): PlayingState;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HandsFreeAudioGatewayProfile", "api_method_all": "interface HandsFreeAudioGatewayProfile extends BaseProfile {\r\n        \r\n        connect(device: string): boolean;\r\n\r\n        \r\n        disconnect(device: string): boolean;\r\n\r\n        \r\n        on(type: \"connectionStateChange\", callback: Callback<StateChangeParam>): void;\r\n\r\n        \r\n        off(type: \"connectionStateChange\", callback?: Callback<StateChangeParam>): void;\r\n    }", "api_method_name": "HandsFreeAudioGatewayProfile", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HandsFreeAudioGatewayProfile", "api_method_name": "connect", "api_method_all": "connect(device: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 67, "since": 8, "api_used": "\u662f", "lines": ["et ret = gattClient.connect();\n        expect(r", "        expect(wifi.connectToNetwork(netWorkId)", "     };\n        let connect = {\n            onC", "le.info(\"[wifi_test]connectdevice result: \" + w", "luetooth_js] get bt connection state result' + ", "      console.info(\"connectState: \" + result.co", "uetooth_js] gatt disconnect ret:' + ret);\n     ", "led')\n        await connectAbility().then((remo", "@tc.desc       Test connectToDevice 10 bits WEP", "},\n            onDisconnect:function (elementNa", ".assertEqual(result.connectState ==P2pConnectSt", "uetooth_js] gatt disconnect start');\n        aw", "g(\"[wifi_test] wifi connectToDevice result: \" +", ".desc       Test disconnect Deviceconfig\n    */", "     expect(wifi.disconnect()).assertTrue();\n  ", "wait gattServer.on('connectStateChange', functi", "= 31;\n\n    function connectAbility() {\n        ", "c.desc       Test reconnect wifi\n    */\n   it('", "ce result: \" + wifi.connectToNetwork(netWorkId)", "nfo(\"[bluetooth_js] connectStaOn jsonData -> \" ", "ait gattServer.off('connectStateChange', functi", "ctState: \" + result.connectState + \n           ", " let result1 = wifi.connectToDevice(wifiDeviceC", "      expect(wifi.reconnect()).assertTrue();\n  ", "'[bluetooth_js] get connection state start');\n ", "[bluetooth_js] gatt connect start');\n        aw", "og(\"RpcClient: onDisconnect\")\n            },\n  ", "@tc.desc       Test connectToDevice 26 bits WEP", "onnectAbility(want, connect)\n        return new", "ret = gattClient.disconnect();\n        console.", "@tc.desc       Test connectToDevice 5bits ASCLL", "'[bluetooth_js] spp_connect start');\n        aw", "60,\n                connectable:true,\n         ", " console.log(\"start connect local ability, wait", "      };\n        FA.connectAbility(want, connec", "nfo(\"[bluetooth_js] connectStateChange_off Data"], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSta.test.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HandsFreeAudioGatewayProfile", "api_method_name": "disconnect", "api_method_all": "disconnect(device: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["et ret = gattClient.disconnect();\n        console.", "        expect(wifi.disconnect()).assertTrue();\n  ", "@tc.desc       Test disconnect Deviceconfig\n    */", "[bluetooth_js] gatt disconnect ret:' + ret);\n     ", "[bluetooth_js] gatt disconnect start');\n        aw"], "files": ["BluetoothBle.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HandsFreeAudioGatewayProfile", "api_method_name": "on", "api_method_all": "on(type: \"connectionStateChange\", callback: Callback<StateChangeParam>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HandsFreeAudioGatewayProfile", "api_method_name": "off", "api_method_all": "off(type: \"connectionStateChange\", callback?: Callback<StateChangeParam>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLE", "api_method_all": "namespace BLE {\r\n        \r\n        function createGattServer(): GattServer;\r\n\r\n        \r\n        function createGattClientDevice(deviceId: string): GattClientDevice;\r\n\r\n        \r\n        function getConnectedBLEDevices(): Array<string>;\r\n\r\n        \r\n        function startBLEScan(filters: Array<ScanFilter>, options?: ScanOptions): void;\r\n\r\n        \r\n        function stopBLEScan(): void;\r\n\r\n        \r\n        function on(type: \"BLEDeviceFind\", callback: Callback<Array<ScanResult>>): void;\r\n\r\n        \r\n        function off(type: \"BLEDeviceFind\", callback?: Callback<Array<ScanResult>>): void;\r\n    }", "api_method_name": "BLE", "api_type": "", "api_level": 35, "api_args_count": 0, "api_used_count": 122, "since": 8, "api_used": "\u662f", "lines": ["_bluetooth_GATT_SET_BLE_MTUSIZE_0001\n     *", "nfo('[bluetooth_js] BLE get device name pro", "nfo('[bluetooth_js] BLE read rssi ' + JSON.", "('[bluetooth_js] setBLEMtuSize start');\n   ", "ret = gattClient.setBLEMtuSize(128);\n      ", "600,\n    MAJOR_WEARABLE : 0x0700,\n    MAJOR", "tServer = bluetooth.BLE.createGattServer();", " result = bluetooth.BLE.getConnectedBLEDevi", "  * @tc.name testSetBLEMtuSize\n     * @tc.d", "nfo('[bluetooth_js] BLE get rssi start');\n ", "oth_js] getConnectedBLEDevices test start .", "NETWORK_FULLY_AVAILABLE : 0x0300,\n    NETWO", " result = bluetooth.BLE.createGattServer();", "_bluetooth_GATT_SET_BLE_MTUSIZE_0001', 0, a", "118,\n    COMPUTER_TABLET : 0x011C,\n    PHON", "nfo('[bluetooth_js] BLE advertising start')", "oth.BLE.getConnectedBLEDevices();\n        c", "CATION_bluetooth_ENABLE_0001', 0, async fun", "   AUDIO_VIDEO_WEARABLE_HEADSET : 0x0404,\n ", "nfo('[bluetooth_js] BLE stop advertising st", "nfo('[bluetooth_js] BLE get rssi1 start');\n", ",\n    COMPUTER_WEARABLE : 0x0118,\n    COMPU", "nfo('[bluetooth_js] BLEDescriptor data:' + ", " * @tc.desc Test SetBLEMtuSize api.\n     * ", "tClient = bluetooth.BLE.createGattClientDev", "tServer = bluetooth.BLE.createGattServer()\n", "   AUDIO_VIDEO_PORTABLE_AUDIO : 0x041C,\n   ", "IPHERAL_DIGITIZER_TABLET : 0x0514,\n    PERI", "th_js] bluetooth setBLEMtuSize ret:' + ret)", "thble_GET_CONNECTED_BLEDEVICES_0001', 0, as"], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSta.test.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLE", "api_method_name": "createGattServer", "api_method_all": "function createGattServer(): GattServer;", "api_type": "", "api_args_count": 0, "api_level": 35, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["ver = bluetooth.BLE.createGattServer();\n        let desc", "ult = bluetooth.BLE.createGattServer();\n        let resu", "ver = bluetooth.BLE.createGattServer()\n        let array", "ver = bluetooth.BLE.createGattServer()\n            let r", "ver = bluetooth.BLE.createGattServer();\n        let stop", "nfo(\"[bluetooth_js] createGattServer:\" + JSON.stringify(", "ver = bluetooth.BLE.createGattServer()\n        let descr", "nfo('[bluetooth_js] createGattServer test start ...');\n ", "ver = bluetooth.BLE.createGattServer();\n        gattClie", "ver = bluetooth.BLE.createGattServer()\n            let s", "ver = bluetooth.BLE.createGattServer();\n        let ret "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLE", "api_method_name": "createGattClientDevice", "api_method_all": "function createGattClientDevice(deviceId: string): GattClientDevice;", "api_type": "", "api_args_count": 1, "api_level": 35, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["ent = bluetooth.BLE.createGattClientDevice(\"00:00:00:00:00:00\""], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLE", "api_method_name": "getConnectedBLEDevices", "api_method_all": "function getConnectedBLEDevices(): Array<string>;", "api_type": "", "api_args_count": 0, "api_level": 35, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] getConnectedBLEDevices test start ...');\n ", "ult = bluetooth.BLE.getConnectedBLEDevices();\n        console."], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLE", "api_method_name": "startBLEScan", "api_method_all": "function startBLEScan(filters: Array<ScanFilter>, options?: ScanOptions): void;", "api_type": "", "api_args_count": 2, "api_level": 35, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["      bluetooth.BLE.startBLEScan([{}]);\n            "], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLE", "api_method_name": "stopBLEScan", "api_method_all": "function stopBLEScan(): void;", "api_type": "", "api_args_count": 0, "api_level": 35, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ult = bluetooth.BLE.stopBLEScan();\n            cons"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLE", "api_method_name": "on", "api_method_all": "function on(type: \"BLEDeviceFind\", callback: Callback<Array<ScanResult>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 35, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLE", "api_method_name": "off", "api_method_all": "function off(type: \"BLEDeviceFind\", callback?: Callback<Array<ScanResult>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 35, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_all": "interface GattServer {\r\n        \r\n        startAdvertising(setting: AdvertiseSetting, advData: AdvertiseData, advResponse?: AdvertiseData): void;\r\n\r\n        \r\n        stopAdvertising(): void;\r\n\r\n        \r\n        addService(service: GattService): boolean;\r\n\r\n        \r\n        removeService(serviceUuid: string): boolean;\r\n\r\n        \r\n        close(): void;\r\n\r\n        \r\n        notifyCharacteristicChanged(deviceId: string, notifyCharacteristic: NotifyCharacteristic): boolean;\r\n\r\n        \r\n        sendResponse(serverResponse: ServerResponse): boolean;\r\n\r\n        \r\n        on(type: \"characteristicRead\", callback: Callback<CharacteristicReadReq>): void;\r\n\r\n        \r\n        off(type: \"characteristicRead\", callback?: Callback<CharacteristicReadReq>): void;\r\n\r\n        \r\n        on(type: \"characteristicWrite\", callback: Callback<CharacteristicWriteReq>): void;\r\n\r\n        \r\n        off(type: \"characteristicWrite\", callback?: Callback<CharacteristicWriteReq>): void;\r\n\r\n        \r\n        on(type: \"descriptorRead\", callback: Callback<DescriptorReadReq>): void;\r\n\r\n        \r\n        off(type: \"descriptorRead\", callback?: Callback<DescriptorReadReq>): void;\r\n\r\n        \r\n        on(type: \"descriptorWrite\", callback: Callback<DescriptorWriteReq>): void;\r\n\r\n        \r\n        off(type: \"descriptorWrite\", callback?: Callback<DescriptorWriteReq>): void;\r\n\r\n        \r\n        on(type: \"connectStateChange\", callback: Callback<BLEConnectChangedState>): void;\r\n\r\n        \r\n        off(type: \"connectStateChange\", callback?: Callback<BLEConnectChangedState>): void;\r\n    }", "api_method_name": "GattServer", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["bluetooth.BLE.createGattServer();\n        gattClie", "bluetooth.BLE.createGattServer()\n        let array", "bluetooth.BLE.createGattServer();\n        let stop", "bluetooth.BLE.createGattServer()\n            let s", "bluetooth_js] createGattServer:\" + JSON.stringify(", "bluetooth.BLE.createGattServer();\n        let resu", "bluetooth.BLE.createGattServer();\n        let desc", "bluetooth.BLE.createGattServer();\n        let ret ", "bluetooth.BLE.createGattServer()\n        let descr", "bluetooth_js] createGattServer test start ...');\n ", "bluetooth.BLE.createGattServer()\n            let r"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "startAdvertising", "api_method_all": "startAdvertising(setting: AdvertiseSetting, advData: AdvertiseData, advResponse?: AdvertiseData): void;", "api_type": "", "api_args_count": 3, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": [" start = gattServer.startAdvertising({\n                i"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "stopAdvertising", "api_method_all": "stopAdvertising(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["t stop = gattServer.stopAdvertising();\n        expect(s"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "addService", "api_method_all": "addService(service: GattService): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["tooth_js] bluetooth addService ret : ' + ret);\n   ", "    })\n        core.addService('expect', expectExt", "nfo('[bluetooth_js] addService start');\n        aw", "et ret = gattServer.addService(service);\n        c"], "files": ["BluetoothBle.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "removeService", "api_method_all": "removeService(serviceUuid: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] removeService ret : ' + ret);\n   ", "nfo('[bluetooth_js] removeService start');\n        aw", "et ret = gattServer.removeService('00001810-0000-1000"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "close", "api_method_all": "close(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 34, "since": 7, "api_used": "\u662f", "lines": ["\n            ashmem.closeAshmem()\n\n          ", "console.info(\"after close fd, write again\")\n ", "\n            ashmem.closeAshmem();\n        }c", "result = gattServer.close();\n            cons", "\n            ashmem.closeAshmem()\n        }ca", "\n            ashmem.closeAshmem()\n           ", "      }\n        let close =wifi.isWifiActive(", "result = gattClient.close();\n            cons", " status result: \" + close);\n        expect(cl", "\"[bluetooth_js] spp closeServerSocket start\")", "        replyAshmem.closeAshmem();\n//        ", "\n            ashmem.closeAshmem();\n          ", "/            ashmem.closeAshmem();\n//        ", "();\n\n        ashmem.closeAshmem()\n    }catch(", "te of wifi, if it's close, open it.\");\n      ", "se);\n        expect(close).assertFalse();\n   ", "  rpc.MessageParcel.closeFileDescriptor(dupFd", "\n            ashmem.closeAshmem()\n\n        }c", "g(\"[wifi_test] wifi close result: \" + disable", "  rpc.MessageParcel.closeFileDescriptor(fd);\n", "          newashmem.closeAshmem();\n        }c"], "files": ["BluetoothBle.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "notifyCharacteristicChanged", "api_method_all": "notifyCharacteristicChanged(deviceId: string, notifyCharacteristic: NotifyCharacteristic): boolean;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["et ret = gattServer.notifyCharacteristicChanged('00:00:00:00:00:00'", "nfo('[bluetooth_js] notifyCharacteristicChanged ret : ' + ret);\n   ", "nfo('[bluetooth_js] notifyCharacteristicChanged start');\n        aw"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "sendResponse", "api_method_all": "sendResponse(serverResponse: ServerResponse): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["result = gattServer.sendResponse(serverResponse);\n  ", "et ret = gattServer.sendResponse(serverResponse);\n  ", "nfo('[bluetooth_js] sendResponse ret : ' + ret);\n\n  ", "nfo('[bluetooth_js] sendResponse start');\n        aw"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "on", "api_method_all": "on(type: \"characteristicRead\", callback: Callback<CharacteristicReadReq>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "off", "api_method_all": "off(type: \"characteristicRead\", callback?: Callback<CharacteristicReadReq>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "on", "api_method_all": "on(type: \"characteristicWrite\", callback: Callback<CharacteristicWriteReq>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "off", "api_method_all": "off(type: \"characteristicWrite\", callback?: Callback<CharacteristicWriteReq>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "on", "api_method_all": "on(type: \"descriptorRead\", callback: Callback<DescriptorReadReq>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "off", "api_method_all": "off(type: \"descriptorRead\", callback?: Callback<DescriptorReadReq>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "on", "api_method_all": "on(type: \"descriptorWrite\", callback: Callback<DescriptorWriteReq>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "off", "api_method_all": "off(type: \"descriptorWrite\", callback?: Callback<DescriptorWriteReq>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "on", "api_method_all": "on(type: \"connectStateChange\", callback: Callback<BLEConnectChangedState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattServer", "api_method_name": "off", "api_method_all": "off(type: \"connectStateChange\", callback?: Callback<BLEConnectChangedState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_all": "interface GattClientDevice {\r\n\r\n        \r\n        connect(): boolean;\r\n\r\n        \r\n        disconnect(): boolean;\r\n\r\n        \r\n        close(): boolean;\r\n\r\n        \r\n        getDeviceName(callback: AsyncCallback<string>): void;\r\n        getDeviceName(): Promise<string>;\r\n\r\n        \r\n        getServices(callback: AsyncCallback<Array<GattService>>): void;\r\n        getServices(): Promise<Array<GattService>>;\r\n\r\n        \r\n        readCharacteristicValue(characteristic: BLECharacteristic, callback: AsyncCallback<BLECharacteristic>): void;\r\n        readCharacteristicValue(characteristic: BLECharacteristic): Promise<BLECharacteristic>;\r\n\r\n        \r\n        readDescriptorValue(descriptor: BLEDescriptor, callback: AsyncCallback<BLEDescriptor>): void;\r\n        readDescriptorValue(descriptor: BLEDescriptor): Promise<BLEDescriptor>;\r\n\r\n        \r\n        writeCharacteristicValue(characteristic: BLECharacteristic): boolean;\r\n\r\n        \r\n        writeDescriptorValue(descriptor: BLEDescriptor): boolean;\r\n\r\n        \r\n        getRssiValue(callback: AsyncCallback<number>): void;\r\n        getRssiValue(): Promise<number>;\r\n\r\n        \r\n        setBLEMtuSize(mtu: number): boolean;\r\n\r\n        \r\n        setNotifyCharacteristicChanged(characteristic: BLECharacteristic, enable: boolean): boolean;\r\n\r\n        \r\n        on(type: \"BLECharacteristicChange\", callback: Callback<BLECharacteristic>): void;\r\n\r\n        \r\n        off(type: \"BLECharacteristicChange\", callback?: Callback<BLECharacteristic>): void;\r\n\r\n        \r\n        on(type: \"BLEConnectionStateChange\", callback: Callback<BLEConnectChangedState>): void;\r\n\r\n        \r\n        off(type: \"BLEConnectionStateChange\", callback?: Callback<BLEConnectChangedState>): void;\r\n    }", "api_method_name": "GattClientDevice", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["bluetooth.BLE.createGattClientDevice(\"00:00:00:00:00:00\""], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "connect", "api_method_all": "connect(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 67, "since": 8, "api_used": "\u662f", "lines": ["et ret = gattClient.connect();\n        expect(r", "        expect(wifi.connectToNetwork(netWorkId)", "     };\n        let connect = {\n            onC", "le.info(\"[wifi_test]connectdevice result: \" + w", "luetooth_js] get bt connection state result' + ", "      console.info(\"connectState: \" + result.co", "uetooth_js] gatt disconnect ret:' + ret);\n     ", "led')\n        await connectAbility().then((remo", "@tc.desc       Test connectToDevice 10 bits WEP", "},\n            onDisconnect:function (elementNa", ".assertEqual(result.connectState ==P2pConnectSt", "uetooth_js] gatt disconnect start');\n        aw", "g(\"[wifi_test] wifi connectToDevice result: \" +", ".desc       Test disconnect Deviceconfig\n    */", "     expect(wifi.disconnect()).assertTrue();\n  ", "wait gattServer.on('connectStateChange', functi", "= 31;\n\n    function connectAbility() {\n        ", "c.desc       Test reconnect wifi\n    */\n   it('", "ce result: \" + wifi.connectToNetwork(netWorkId)", "nfo(\"[bluetooth_js] connectStaOn jsonData -> \" ", "ait gattServer.off('connectStateChange', functi", "ctState: \" + result.connectState + \n           ", " let result1 = wifi.connectToDevice(wifiDeviceC", "      expect(wifi.reconnect()).assertTrue();\n  ", "'[bluetooth_js] get connection state start');\n ", "[bluetooth_js] gatt connect start');\n        aw", "og(\"RpcClient: onDisconnect\")\n            },\n  ", "@tc.desc       Test connectToDevice 26 bits WEP", "onnectAbility(want, connect)\n        return new", "ret = gattClient.disconnect();\n        console.", "@tc.desc       Test connectToDevice 5bits ASCLL", "'[bluetooth_js] spp_connect start');\n        aw", "60,\n                connectable:true,\n         ", " console.log(\"start connect local ability, wait", "      };\n        FA.connectAbility(want, connec", "nfo(\"[bluetooth_js] connectStateChange_off Data"], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSta.test.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "disconnect", "api_method_all": "disconnect(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["et ret = gattClient.disconnect();\n        console.", "        expect(wifi.disconnect()).assertTrue();\n  ", "@tc.desc       Test disconnect Deviceconfig\n    */", "[bluetooth_js] gatt disconnect ret:' + ret);\n     ", "[bluetooth_js] gatt disconnect start');\n        aw"], "files": ["BluetoothBle.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "close", "api_method_all": "close(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 34, "since": 7, "api_used": "\u662f", "lines": ["\n            ashmem.closeAshmem()\n\n          ", "console.info(\"after close fd, write again\")\n ", "\n            ashmem.closeAshmem();\n        }c", "result = gattServer.close();\n            cons", "\n            ashmem.closeAshmem()\n        }ca", "\n            ashmem.closeAshmem()\n           ", "      }\n        let close =wifi.isWifiActive(", "result = gattClient.close();\n            cons", " status result: \" + close);\n        expect(cl", "\"[bluetooth_js] spp closeServerSocket start\")", "        replyAshmem.closeAshmem();\n//        ", "\n            ashmem.closeAshmem();\n          ", "/            ashmem.closeAshmem();\n//        ", "();\n\n        ashmem.closeAshmem()\n    }catch(", "te of wifi, if it's close, open it.\");\n      ", "se);\n        expect(close).assertFalse();\n   ", "  rpc.MessageParcel.closeFileDescriptor(dupFd", "\n            ashmem.closeAshmem()\n\n        }c", "g(\"[wifi_test] wifi close result: \" + disable", "  rpc.MessageParcel.closeFileDescriptor(fd);\n", "          newashmem.closeAshmem();\n        }c"], "files": ["BluetoothBle.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "getDeviceName", "api_method_all": "getDeviceName(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "getDeviceName", "api_method_all": "getDeviceName(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["         gattClient.getDeviceName().then((data) => {\n                cons"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "getServices", "api_method_all": "getServices(callback: AsyncCallback<Array<GattService>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] getServices promise start');\n        await tryToEna", "nfo('[bluetooth_js] getServices successfully:'+JSON.stringify(object));", "nfo('[bluetooth_js] getServices callback start');\n        await tryToEn", "         gattClient.getServices((err, data)=> {\n                console", "le.error(`bluetooth getServices has error: ${err}`);\n                ex"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "getServices", "api_method_all": "getServices(): Promise<Array<GattService>>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["         gattClient.getServices().then((object) => {\n                if"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "readCharacteristicValue", "api_method_all": "readCharacteristicValue(characteristic: BLECharacteristic, callback: AsyncCallback<BLECharacteristic>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] readCharacteristicValue start');\n        await tryToEnableBt();", "le.error(`bluetooth readCharacteristicValue has error: ${err}`);\n                ex"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "readCharacteristicValue", "api_method_all": "readCharacteristicValue(characteristic: BLECharacteristic): Promise<BLECharacteristic>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["         gattClient.readCharacteristicValue(characteristic).then((object) => {\n    "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "readDescriptorValue", "api_method_all": "readDescriptorValue(descriptor: BLEDescriptor, callback: AsyncCallback<BLEDescriptor>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] readDescriptorValue start');\n        await tryToEnableBt();", "le.error(`bluetooth readDescriptorValue has error: ${err}`);\n                ex"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "readDescriptorValue", "api_method_all": "readDescriptorValue(descriptor: BLEDescriptor): Promise<BLEDescriptor>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["         gattClient.readDescriptorValue(descriptor).then((object) => {\n        "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "writeCharacteristicValue", "api_method_all": "writeCharacteristicValue(characteristic: BLECharacteristic): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["et ret = gattClient.writeCharacteristicValue(characteristic);\n  ", "nfo('[bluetooth_js] writeCharacteristicValue ret : ' + ret);\n   ", "nfo('[bluetooth_js] writeCharacteristicValue start');\n        aw"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "writeDescriptorValue", "api_method_all": "writeDescriptorValue(descriptor: BLEDescriptor): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["tooth_js] bluetooth writeDescriptorValue ret : ' + ret);\n   ", "nfo('[bluetooth_js] writeDescriptorValue start');\n        aw", "et ret = gattClient.writeDescriptorValue(descriptor);\n      "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "getRssiValue", "api_method_all": "getRssiValue(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["         gattClient.getRssiValue((err, data)=> {\n                console", "le.error(`bluetooth getRssiValue has error: ${err}`);\n                ex"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "getRssiValue", "api_method_all": "getRssiValue(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["         gattClient.getRssiValue().then((data) => {\n                if ("], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "setBLEMtuSize", "api_method_all": "setBLEMtuSize(mtu: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] setBLEMtuSize start');\n        aw", "et ret = gattClient.setBLEMtuSize(128);\n        conso", "tooth_js] bluetooth setBLEMtuSize ret:' + ret);\n     "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "setNotifyCharacteristicChanged", "api_method_all": "setNotifyCharacteristicChanged(characteristic: BLECharacteristic, enable: boolean): boolean;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["et ret = gattClient.setNotifyCharacteristicChanged(characteristic, fal", "nfo('[bluetooth_js] setNotifyCharacteristicChanged ret:' + ret);\n     ", "nfo('[bluetooth_js] setNotifyCharacteristicChanged start');\n        aw"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "on", "api_method_all": "on(type: \"BLECharacteristicChange\", callback: Callback<BLECharacteristic>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "off", "api_method_all": "off(type: \"BLECharacteristicChange\", callback?: Callback<BLECharacteristic>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "on", "api_method_all": "on(type: \"BLEConnectionStateChange\", callback: Callback<BLEConnectChangedState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattClientDevice", "api_method_name": "off", "api_method_all": "off(type: \"BLEConnectionStateChange\", callback?: Callback<BLEConnectChangedState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattService", "api_method_all": "interface GattService {\r\n        \r\n        serviceUuid: string;\r\n        \r\n        isPrimary: boolean;\r\n        \r\n        characteristics: Array<BLECharacteristic>;\r\n        \r\n        includeServices?: Array<GattService>;\r\n    }", "api_method_name": "GattService", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GattService", "api_method_name": "serviceUuid", "api_method_all": "serviceUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["erviceUuid:' + data.serviceUuid);\n                e", "  let descriptor = {serviceUuid: '00001810-0000-100", "t characteristic = {serviceUuid: '00001810-0000-100", "erviceUuid:' + data.serviceUuid);\n                l", "erviceUuid:' + data.serviceUuid +\n                '", "                    serviceUuid:\"1234\",\n           ", "      descriptor = {serviceUuid: '00001810-0000-100", "haracteristicUuid +'serviceUuid:' + data.serviceUui", "descriptorNotify = {serviceUuid: '00001810-0000-100", "},{\n                serviceUuids:[\"12\"],\n          ", "     let service = {serviceUuid: '00001810-0000-100", "                    serviceUuid:\"1794\",\n           ", "aracteristicUuid + 'serviceUuid:' + data.serviceUui"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattService", "api_method_name": "isPrimary", "api_method_all": "isPrimary: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["B34FB',\n            isPrimary: true, characterist"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattService", "api_method_name": "characteristics", "api_method_all": "characteristics: Array<BLECharacteristic>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["   isPrimary: true, characteristics: characteristics, i", "riptor;\n        let characteristics = [];\n        let a", "e, characteristics: characteristics, includeServices: [", "scriptors};\n        characteristics[0] = characteristic"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GattService", "api_method_name": "includeServices", "api_method_all": "includeServices?: Array<GattService>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["s: characteristics, includeServices: []};\n        let r"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLECharacteristic", "api_method_all": "interface BLECharacteristic {\r\n        \r\n        serviceUuid: string;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        characteristicValue: ArrayBuffer;\r\n        \r\n        descriptors: Array<BLEDescriptor>;\r\n    }", "api_method_name": "BLECharacteristic", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["ait gattClient.off('BLECharacteristicChange', function (d", "wait gattClient.on('BLECharacteristicChange', function (d", "nfo('[bluetooth_js] BLECharacteristicChangeOn test start ", "nfo('[bluetooth_js] BLECharacteristicChangeOff test start", "nfo(\"[bluetooth_js] BLECharacteristicChange data \" + JSON"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLECharacteristic", "api_method_name": "serviceUuid", "api_method_all": "serviceUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["erviceUuid:' + data.serviceUuid);\n                e", "  let descriptor = {serviceUuid: '00001810-0000-100", "t characteristic = {serviceUuid: '00001810-0000-100", "erviceUuid:' + data.serviceUuid);\n                l", "erviceUuid:' + data.serviceUuid +\n                '", "                    serviceUuid:\"1234\",\n           ", "      descriptor = {serviceUuid: '00001810-0000-100", "haracteristicUuid +'serviceUuid:' + data.serviceUui", "descriptorNotify = {serviceUuid: '00001810-0000-100", "},{\n                serviceUuids:[\"12\"],\n          ", "     let service = {serviceUuid: '00001810-0000-100", "                    serviceUuid:\"1794\",\n           ", "aracteristicUuid + 'serviceUuid:' + data.serviceUui"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLECharacteristic", "api_method_name": "characteristicUuid", "api_method_all": "characteristicUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": [" 'charUuid:' + data.characteristicUuid + 'serviceUuid:' + ", "               data.characteristicUuid + 'serviceUuid:' + ", " 'charUuid:' + data.characteristicUuid +'serviceUuid:' + d", "B',\n                characteristicUuid: '00001820-0000-100", "a.descriptorUuid + 'characteristicUuid:' + \n              ", "B34FB',\n            characteristicUuid: '00001820-0000-100"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLECharacteristic", "api_method_name": "characteristicValue", "api_method_all": "characteristicValue: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["B34FB',\n            characteristicValue: arrayBufferCCC, de", "B34FB',\n            characteristicValue: cccValue,\n        ", "B',\n                characteristicValue: arrayBufferCCC, de"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLECharacteristic", "api_method_name": "descriptors", "api_method_all": "descriptors: Array<BLEDescriptor>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 24, "since": 0, "api_used": "\u662f", "lines": ["uffer};\n            descriptors[0] = descriptor;\n  ", "rayBuffer};\n        descriptors[0] = descriptor;\n  ", "cValue,\n            descriptors:descriptors,confirm", "ue: arrayBufferCCC, descriptors:descriptors};\n     ", "or objects based on descriptors\n     * @tc.desc    ", "rver();\n        let descriptors = [];\n        let a", "        descriptors:descriptors,confirm:'false'};\n ", "descriptor;\n        descriptors[1] = descriptorNoti", "> {\n            let descriptors = [];\n            l", "0:00\");\n        let descriptors = [];\n        let a", "erver()\n        let descriptors = [];\n        let a", "ferCCC, descriptors:descriptors};\n        let ret =", "tifyValue};\n        descriptors[0] = descriptor;\n  ", "ferCCC, descriptors:descriptors};\n            let g", "ferCCC, descriptors:descriptors};\n        character", "ferNotify};\n        descriptors[0] = descriptor;\n  "], "files": ["RpcClientJsunit.test.js", "BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLEDescriptor", "api_method_all": "interface BLEDescriptor {\r\n        \r\n        serviceUuid: string;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        descriptorUuid: string;\r\n        \r\n        descriptorValue: ArrayBuffer;\r\n    }", "api_method_name": "BLEDescriptor", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["nfo('[bluetooth_js] BLEDescriptor data:' + JSON.strin"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLEDescriptor", "api_method_name": "serviceUuid", "api_method_all": "serviceUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["erviceUuid:' + data.serviceUuid);\n                e", "  let descriptor = {serviceUuid: '00001810-0000-100", "t characteristic = {serviceUuid: '00001810-0000-100", "erviceUuid:' + data.serviceUuid);\n                l", "erviceUuid:' + data.serviceUuid +\n                '", "                    serviceUuid:\"1234\",\n           ", "      descriptor = {serviceUuid: '00001810-0000-100", "haracteristicUuid +'serviceUuid:' + data.serviceUui", "descriptorNotify = {serviceUuid: '00001810-0000-100", "},{\n                serviceUuids:[\"12\"],\n          ", "     let service = {serviceUuid: '00001810-0000-100", "                    serviceUuid:\"1794\",\n           ", "aracteristicUuid + 'serviceUuid:' + data.serviceUui"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLEDescriptor", "api_method_name": "characteristicUuid", "api_method_all": "characteristicUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": [" 'charUuid:' + data.characteristicUuid + 'serviceUuid:' + ", "               data.characteristicUuid + 'serviceUuid:' + ", " 'charUuid:' + data.characteristicUuid +'serviceUuid:' + d", "B',\n                characteristicUuid: '00001820-0000-100", "a.descriptorUuid + 'characteristicUuid:' + \n              ", "B34FB',\n            characteristicUuid: '00001820-0000-100"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLEDescriptor", "api_method_name": "descriptorUuid", "api_method_all": "descriptorUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["B34FB',\n            descriptorUuid: '00001830-0000-100", "riptorUuid:' + data.descriptorUuid + \n                ", "riptorUuid:' + data.descriptorUuid + 'characteristicUu", "B',\n                descriptorUuid: '00001830-0000-100", "B34FB',\n            descriptorUuid: '00002902-0000-100", "      data.offset +'descriptorUuid:' + data.descriptor"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLEDescriptor", "api_method_name": "descriptorValue", "api_method_all": "descriptorValue: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["8000-00805F9B34FB', descriptorValue: desValue};\n       ", "B34FB',\n            descriptorValue: arrayBufferNotify}", "8000-00805F9B34FB', descriptorValue: arrayBuffer};\n    ", "B34FB',\n            descriptorValue: arrayBuffer};\n    ", "B34FB',\n            descriptorValue: descNotifyValue};\n"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NotifyCharacteristic", "api_method_all": "interface NotifyCharacteristic {\r\n        \r\n        serviceUuid: string;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        characteristicValue: ArrayBuffer;\r\n        \r\n        confirm: boolean;\r\n    }", "api_method_name": "NotifyCharacteristic", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": [" * @tc.desc Test SetNotifyCharacteristicChanged api.\n     * ", "     * @tc.name testNotifyCharacteristicChanged\n     * @tc.d", "ret = gattClient.setNotifyCharacteristicChanged(characterist", "('[bluetooth_js] setNotifyCharacteristicChanged start');\n   ", "    * @tc.desc Test NotifyCharacteristicChanged api.\n     * ", "('[bluetooth_js] setNotifyCharacteristicChanged ret:' + ret)", "  * @tc.name testSetNotifyCharacteristicChanged\n     * @tc.d"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NotifyCharacteristic", "api_method_name": "serviceUuid", "api_method_all": "serviceUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["erviceUuid:' + data.serviceUuid);\n                e", "  let descriptor = {serviceUuid: '00001810-0000-100", "t characteristic = {serviceUuid: '00001810-0000-100", "erviceUuid:' + data.serviceUuid);\n                l", "erviceUuid:' + data.serviceUuid +\n                '", "                    serviceUuid:\"1234\",\n           ", "      descriptor = {serviceUuid: '00001810-0000-100", "haracteristicUuid +'serviceUuid:' + data.serviceUui", "descriptorNotify = {serviceUuid: '00001810-0000-100", "},{\n                serviceUuids:[\"12\"],\n          ", "     let service = {serviceUuid: '00001810-0000-100", "                    serviceUuid:\"1794\",\n           ", "aracteristicUuid + 'serviceUuid:' + data.serviceUui"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NotifyCharacteristic", "api_method_name": "characteristicUuid", "api_method_all": "characteristicUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": [" 'charUuid:' + data.characteristicUuid + 'serviceUuid:' + ", "               data.characteristicUuid + 'serviceUuid:' + ", " 'charUuid:' + data.characteristicUuid +'serviceUuid:' + d", "B',\n                characteristicUuid: '00001820-0000-100", "a.descriptorUuid + 'characteristicUuid:' + \n              ", "B34FB',\n            characteristicUuid: '00001820-0000-100"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NotifyCharacteristic", "api_method_name": "characteristicValue", "api_method_all": "characteristicValue: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["B34FB',\n            characteristicValue: arrayBufferCCC, de", "B34FB',\n            characteristicValue: cccValue,\n        ", "B',\n                characteristicValue: arrayBufferCCC, de"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NotifyCharacteristic", "api_method_name": "confirm", "api_method_all": "confirm: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["riptors:descriptors,confirm:'false'};\n        l"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicReadReq", "api_method_all": "interface CharacteristicReadReq {\r\n        \r\n        deviceId: string;\r\n        \r\n        transId: number;\r\n        \r\n        offset: number;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        serviceUuid: string;\r\n    }", "api_method_name": "CharacteristicReadReq", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicReadReq", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicReadReq", "api_method_name": "transId", "api_method_all": "transId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": [" + data.deviceId + 'transId:' + data.transId + ", " +\n                'transId:' + data.transId + ", "  'transId:' + data.transId + 'offset:' + data.", "    \"transId\": data.transId,\n                  ", ": '00:00:00:00:00', transId: 1,\n            sta", "                   \"transId\": data.transId,\n   ", "+ 'transId:' + data.transId + 'offset:' + \n    "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicReadReq", "api_method_name": "offset", "api_method_all": "offset: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                  ", " + 'offset:' + data.offset + 'charUuid:' +\n   ", "               data.offset +'descriptorUuid:' ", "                   \"offset\": data.offset,\n    ", "         status: 0, offset: 0, value: arrayBuf", "' + data.transId + 'offset:' + data.offset + '", "ead response\", data.offset),\n                }", " + 'offset:' + data.offset + 'isPrep:' + data.", "' + data.transId + 'offset:' + \n              "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicReadReq", "api_method_name": "characteristicUuid", "api_method_all": "characteristicUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": [" 'charUuid:' + data.characteristicUuid + 'serviceUuid:' + ", "               data.characteristicUuid + 'serviceUuid:' + ", " 'charUuid:' + data.characteristicUuid +'serviceUuid:' + d", "B',\n                characteristicUuid: '00001820-0000-100", "a.descriptorUuid + 'characteristicUuid:' + \n              ", "B34FB',\n            characteristicUuid: '00001820-0000-100"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicReadReq", "api_method_name": "serviceUuid", "api_method_all": "serviceUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["erviceUuid:' + data.serviceUuid);\n                e", "  let descriptor = {serviceUuid: '00001810-0000-100", "t characteristic = {serviceUuid: '00001810-0000-100", "erviceUuid:' + data.serviceUuid);\n                l", "erviceUuid:' + data.serviceUuid +\n                '", "                    serviceUuid:\"1234\",\n           ", "      descriptor = {serviceUuid: '00001810-0000-100", "haracteristicUuid +'serviceUuid:' + data.serviceUui", "descriptorNotify = {serviceUuid: '00001810-0000-100", "},{\n                serviceUuids:[\"12\"],\n          ", "     let service = {serviceUuid: '00001810-0000-100", "                    serviceUuid:\"1794\",\n           ", "aracteristicUuid + 'serviceUuid:' + data.serviceUui"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicWriteReq", "api_method_all": "interface CharacteristicWriteReq {\r\n        \r\n        deviceId: string;\r\n        \r\n        transId: number;\r\n        \r\n        offset: number;\r\n        \r\n        isPrep: boolean;\r\n        \r\n        needRsp: boolean;\r\n        \r\n        value: ArrayBuffer;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        serviceUuid: string;\r\n    }", "api_method_name": "CharacteristicWriteReq", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicWriteReq", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicWriteReq", "api_method_name": "transId", "api_method_all": "transId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": [" + data.deviceId + 'transId:' + data.transId + ", " +\n                'transId:' + data.transId + ", "  'transId:' + data.transId + 'offset:' + data.", "    \"transId\": data.transId,\n                  ", ": '00:00:00:00:00', transId: 1,\n            sta", "                   \"transId\": data.transId,\n   ", "+ 'transId:' + data.transId + 'offset:' + \n    "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicWriteReq", "api_method_name": "offset", "api_method_all": "offset: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                  ", " + 'offset:' + data.offset + 'charUuid:' +\n   ", "               data.offset +'descriptorUuid:' ", "                   \"offset\": data.offset,\n    ", "         status: 0, offset: 0, value: arrayBuf", "' + data.transId + 'offset:' + data.offset + '", "ead response\", data.offset),\n                }", " + 'offset:' + data.offset + 'isPrep:' + data.", "' + data.transId + 'offset:' + \n              "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicWriteReq", "api_method_name": "isPrep", "api_method_all": "isPrep: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": [" + 'isPrep:' + data.isPrep +\n                '", ":' + data.offset + 'isPrep:' + data.isPrep +\n ", " + 'isPrep:' + data.isPrep );\n                ", "' + data.needRsp + 'isPrep:' + data.isPrep );\n"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicWriteReq", "api_method_name": "needRsp", "api_method_all": "needRsp: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": [" + 'needRsp' + data.needRsp + 'isPrep:' + data.", "e:' + data.value + 'needRsp' + data.needRsp + '", " + 'needRsp' + data.needRsp);\n                i", "           if (data.needRsp == false) {\n       ", "e:' + data.value + 'needRsp' + data.needRsp);\n "], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicWriteReq", "api_method_name": "value", "api_method_all": "value: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 39, "since": 0, "api_used": "\u662f", "lines": [" interface, illegal value validation\n     * @", "log(`[bluetooth_js] value: ${ab2hex(data.valu", " interface, illegal value verification\n     *", "@tc.name    Illegal value passed in from writ", "  console.log(`data.value is ArraryBuffer: ${", "      \"value\": data.value,\n                };", "fer(8);\n        let value =  new Uint8Array(a", "           if (data.value instanceof ArrayBuf", "interface, boundary value verification\n     *", "                   \"value\": str2ab(\"character", "SON.stringify(err)+'value:'+JSON.stringify(da", "    'value:' + data.value + 'needRsp' + data.", " +\n                'value:' + data.value + 'n", "rayBuffer);\n        value[0] = 1;\n        let", "alue: ${ab2hex(data.value)}`)\n               ", "atus: 0, offset: 0, value: arrayBuffer};\n    ", "                   \"value\": data.value,\n     ", "ffer: ${ab2hex(data.value)}`)\n               "], "files": ["RpcJsunit.test.js", "RpcClientJsunit.test.js", "BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicWriteReq", "api_method_name": "characteristicUuid", "api_method_all": "characteristicUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": [" 'charUuid:' + data.characteristicUuid + 'serviceUuid:' + ", "               data.characteristicUuid + 'serviceUuid:' + ", " 'charUuid:' + data.characteristicUuid +'serviceUuid:' + d", "B',\n                characteristicUuid: '00001820-0000-100", "a.descriptorUuid + 'characteristicUuid:' + \n              ", "B34FB',\n            characteristicUuid: '00001820-0000-100"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CharacteristicWriteReq", "api_method_name": "serviceUuid", "api_method_all": "serviceUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["erviceUuid:' + data.serviceUuid);\n                e", "  let descriptor = {serviceUuid: '00001810-0000-100", "t characteristic = {serviceUuid: '00001810-0000-100", "erviceUuid:' + data.serviceUuid);\n                l", "erviceUuid:' + data.serviceUuid +\n                '", "                    serviceUuid:\"1234\",\n           ", "      descriptor = {serviceUuid: '00001810-0000-100", "haracteristicUuid +'serviceUuid:' + data.serviceUui", "descriptorNotify = {serviceUuid: '00001810-0000-100", "},{\n                serviceUuids:[\"12\"],\n          ", "     let service = {serviceUuid: '00001810-0000-100", "                    serviceUuid:\"1794\",\n           ", "aracteristicUuid + 'serviceUuid:' + data.serviceUui"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorReadReq", "api_method_all": "interface DescriptorReadReq {\r\n        \r\n        deviceId: string;\r\n        \r\n        transId: number;\r\n        \r\n        offset: number;\r\n        \r\n        descriptorUuid: string;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        serviceUuid: string;\r\n    }", "api_method_name": "DescriptorReadReq", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorReadReq", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorReadReq", "api_method_name": "transId", "api_method_all": "transId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": [" + data.deviceId + 'transId:' + data.transId + ", " +\n                'transId:' + data.transId + ", "  'transId:' + data.transId + 'offset:' + data.", "    \"transId\": data.transId,\n                  ", ": '00:00:00:00:00', transId: 1,\n            sta", "                   \"transId\": data.transId,\n   ", "+ 'transId:' + data.transId + 'offset:' + \n    "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorReadReq", "api_method_name": "offset", "api_method_all": "offset: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                  ", " + 'offset:' + data.offset + 'charUuid:' +\n   ", "               data.offset +'descriptorUuid:' ", "                   \"offset\": data.offset,\n    ", "         status: 0, offset: 0, value: arrayBuf", "' + data.transId + 'offset:' + data.offset + '", "ead response\", data.offset),\n                }", " + 'offset:' + data.offset + 'isPrep:' + data.", "' + data.transId + 'offset:' + \n              "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorReadReq", "api_method_name": "descriptorUuid", "api_method_all": "descriptorUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["B34FB',\n            descriptorUuid: '00001830-0000-100", "riptorUuid:' + data.descriptorUuid + \n                ", "riptorUuid:' + data.descriptorUuid + 'characteristicUu", "B',\n                descriptorUuid: '00001830-0000-100", "B34FB',\n            descriptorUuid: '00002902-0000-100", "      data.offset +'descriptorUuid:' + data.descriptor"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorReadReq", "api_method_name": "characteristicUuid", "api_method_all": "characteristicUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": [" 'charUuid:' + data.characteristicUuid + 'serviceUuid:' + ", "               data.characteristicUuid + 'serviceUuid:' + ", " 'charUuid:' + data.characteristicUuid +'serviceUuid:' + d", "B',\n                characteristicUuid: '00001820-0000-100", "a.descriptorUuid + 'characteristicUuid:' + \n              ", "B34FB',\n            characteristicUuid: '00001820-0000-100"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorReadReq", "api_method_name": "serviceUuid", "api_method_all": "serviceUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["erviceUuid:' + data.serviceUuid);\n                e", "  let descriptor = {serviceUuid: '00001810-0000-100", "t characteristic = {serviceUuid: '00001810-0000-100", "erviceUuid:' + data.serviceUuid);\n                l", "erviceUuid:' + data.serviceUuid +\n                '", "                    serviceUuid:\"1234\",\n           ", "      descriptor = {serviceUuid: '00001810-0000-100", "haracteristicUuid +'serviceUuid:' + data.serviceUui", "descriptorNotify = {serviceUuid: '00001810-0000-100", "},{\n                serviceUuids:[\"12\"],\n          ", "     let service = {serviceUuid: '00001810-0000-100", "                    serviceUuid:\"1794\",\n           ", "aracteristicUuid + 'serviceUuid:' + data.serviceUui"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorWriteReq", "api_method_all": "interface DescriptorWriteReq {\r\n        \r\n        deviceId: string;\r\n        \r\n        transId: number;\r\n        \r\n        offset: number;\r\n        \r\n        isPrep: boolean;\r\n        \r\n        needRsp: boolean;\r\n        \r\n        value: ArrayBuffer;\r\n        \r\n        descriptorUuid: string;\r\n        \r\n        characteristicUuid: string;\r\n        \r\n        serviceUuid: string;\r\n    }", "api_method_name": "DescriptorWriteReq", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorWriteReq", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorWriteReq", "api_method_name": "transId", "api_method_all": "transId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": [" + data.deviceId + 'transId:' + data.transId + ", " +\n                'transId:' + data.transId + ", "  'transId:' + data.transId + 'offset:' + data.", "    \"transId\": data.transId,\n                  ", ": '00:00:00:00:00', transId: 1,\n            sta", "                   \"transId\": data.transId,\n   ", "+ 'transId:' + data.transId + 'offset:' + \n    "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorWriteReq", "api_method_name": "offset", "api_method_all": "offset: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                  ", " + 'offset:' + data.offset + 'charUuid:' +\n   ", "               data.offset +'descriptorUuid:' ", "                   \"offset\": data.offset,\n    ", "         status: 0, offset: 0, value: arrayBuf", "' + data.transId + 'offset:' + data.offset + '", "ead response\", data.offset),\n                }", " + 'offset:' + data.offset + 'isPrep:' + data.", "' + data.transId + 'offset:' + \n              "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorWriteReq", "api_method_name": "isPrep", "api_method_all": "isPrep: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": [" + 'isPrep:' + data.isPrep +\n                '", ":' + data.offset + 'isPrep:' + data.isPrep +\n ", " + 'isPrep:' + data.isPrep );\n                ", "' + data.needRsp + 'isPrep:' + data.isPrep );\n"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorWriteReq", "api_method_name": "needRsp", "api_method_all": "needRsp: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": [" + 'needRsp' + data.needRsp + 'isPrep:' + data.", "e:' + data.value + 'needRsp' + data.needRsp + '", " + 'needRsp' + data.needRsp);\n                i", "           if (data.needRsp == false) {\n       ", "e:' + data.value + 'needRsp' + data.needRsp);\n "], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorWriteReq", "api_method_name": "value", "api_method_all": "value: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 39, "since": 0, "api_used": "\u662f", "lines": [" interface, illegal value validation\n     * @", "log(`[bluetooth_js] value: ${ab2hex(data.valu", " interface, illegal value verification\n     *", "@tc.name    Illegal value passed in from writ", "  console.log(`data.value is ArraryBuffer: ${", "      \"value\": data.value,\n                };", "fer(8);\n        let value =  new Uint8Array(a", "           if (data.value instanceof ArrayBuf", "interface, boundary value verification\n     *", "                   \"value\": str2ab(\"character", "SON.stringify(err)+'value:'+JSON.stringify(da", "    'value:' + data.value + 'needRsp' + data.", " +\n                'value:' + data.value + 'n", "rayBuffer);\n        value[0] = 1;\n        let", "alue: ${ab2hex(data.value)}`)\n               ", "atus: 0, offset: 0, value: arrayBuffer};\n    ", "                   \"value\": data.value,\n     ", "ffer: ${ab2hex(data.value)}`)\n               "], "files": ["RpcJsunit.test.js", "RpcClientJsunit.test.js", "BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorWriteReq", "api_method_name": "descriptorUuid", "api_method_all": "descriptorUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["B34FB',\n            descriptorUuid: '00001830-0000-100", "riptorUuid:' + data.descriptorUuid + \n                ", "riptorUuid:' + data.descriptorUuid + 'characteristicUu", "B',\n                descriptorUuid: '00001830-0000-100", "B34FB',\n            descriptorUuid: '00002902-0000-100", "      data.offset +'descriptorUuid:' + data.descriptor"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorWriteReq", "api_method_name": "characteristicUuid", "api_method_all": "characteristicUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": [" 'charUuid:' + data.characteristicUuid + 'serviceUuid:' + ", "               data.characteristicUuid + 'serviceUuid:' + ", " 'charUuid:' + data.characteristicUuid +'serviceUuid:' + d", "B',\n                characteristicUuid: '00001820-0000-100", "a.descriptorUuid + 'characteristicUuid:' + \n              ", "B34FB',\n            characteristicUuid: '00001820-0000-100"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DescriptorWriteReq", "api_method_name": "serviceUuid", "api_method_all": "serviceUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["erviceUuid:' + data.serviceUuid);\n                e", "  let descriptor = {serviceUuid: '00001810-0000-100", "t characteristic = {serviceUuid: '00001810-0000-100", "erviceUuid:' + data.serviceUuid);\n                l", "erviceUuid:' + data.serviceUuid +\n                '", "                    serviceUuid:\"1234\",\n           ", "      descriptor = {serviceUuid: '00001810-0000-100", "haracteristicUuid +'serviceUuid:' + data.serviceUui", "descriptorNotify = {serviceUuid: '00001810-0000-100", "},{\n                serviceUuids:[\"12\"],\n          ", "     let service = {serviceUuid: '00001810-0000-100", "                    serviceUuid:\"1794\",\n           ", "aracteristicUuid + 'serviceUuid:' + data.serviceUui"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ServerResponse", "api_method_all": "interface ServerResponse {\r\n        \r\n        deviceId: string;\r\n        \r\n        transId: number;\r\n        \r\n        status: number;\r\n        \r\n        offset: number;\r\n        \r\n        value: ArrayBuffer;\r\n    }", "api_method_name": "ServerResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ServerResponse", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ServerResponse", "api_method_name": "transId", "api_method_all": "transId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": [" + data.deviceId + 'transId:' + data.transId + ", " +\n                'transId:' + data.transId + ", "  'transId:' + data.transId + 'offset:' + data.", "    \"transId\": data.transId,\n                  ", ": '00:00:00:00:00', transId: 1,\n            sta", "                   \"transId\": data.transId,\n   ", "+ 'transId:' + data.transId + 'offset:' + \n    "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ServerResponse", "api_method_name": "status", "api_method_all": "status: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 0, "api_used": "\u662f", "lines": ["o(\"[wifi_test] wifi status result: \" + close);", "sId: 1,\n            status: 0, offset: 0, valu", "nfo(\"wifi_test/wifi status:\" + wifi.isWifiActi", "[wifi_test] Hotspot status result -> \" + wifi.", "                   \"status\": 0,\n              "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ServerResponse", "api_method_name": "offset", "api_method_all": "offset: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                  ", " + 'offset:' + data.offset + 'charUuid:' +\n   ", "               data.offset +'descriptorUuid:' ", "                   \"offset\": data.offset,\n    ", "         status: 0, offset: 0, value: arrayBuf", "' + data.transId + 'offset:' + data.offset + '", "ead response\", data.offset),\n                }", " + 'offset:' + data.offset + 'isPrep:' + data.", "' + data.transId + 'offset:' + \n              "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ServerResponse", "api_method_name": "value", "api_method_all": "value: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 39, "since": 0, "api_used": "\u662f", "lines": [" interface, illegal value validation\n     * @", "log(`[bluetooth_js] value: ${ab2hex(data.valu", " interface, illegal value verification\n     *", "@tc.name    Illegal value passed in from writ", "  console.log(`data.value is ArraryBuffer: ${", "      \"value\": data.value,\n                };", "fer(8);\n        let value =  new Uint8Array(a", "           if (data.value instanceof ArrayBuf", "interface, boundary value verification\n     *", "                   \"value\": str2ab(\"character", "SON.stringify(err)+'value:'+JSON.stringify(da", "    'value:' + data.value + 'needRsp' + data.", " +\n                'value:' + data.value + 'n", "rayBuffer);\n        value[0] = 1;\n        let", "alue: ${ab2hex(data.value)}`)\n               ", "atus: 0, offset: 0, value: arrayBuffer};\n    ", "                   \"value\": data.value,\n     ", "ffer: ${ab2hex(data.value)}`)\n               "], "files": ["RpcJsunit.test.js", "RpcClientJsunit.test.js", "BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLEConnectChangedState", "api_method_all": "interface BLEConnectChangedState {\r\n        \r\n        deviceId: string;\r\n        \r\n        state: ProfileConnectionState;\r\n    }", "api_method_name": "BLEConnectChangedState", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BLEConnectChangedState", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BLEConnectChangedState", "api_method_name": "state", "api_method_all": "state: ProfileConnectionState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 8, "api_used": "\u662f", "lines": ["nge state:' +  data.state);\n            expec", "E_BLE_TURNING_ON != state).assertTrue();\n    ", "True();\n        let state = bluetooth.getStat", "_js] get connection state start');\n        aw", "= '+ JSON.stringify(state));\n        expect(s", "ate.STATE_BLE_ON != state).assertTrue();\n    ", "_BLE_TURNING_OFF != state).assertTrue();\n    ", "wait bluetooth.off('stateChange', result => {", "('[bluetooth_js] bt state:' + JSON.stringify(", ":' + JSON.stringify(state));\n        done();\n", "Id + 'state:'+ data.state);\n                e", "e();\n        expect(state).assertEqual(2);\n  ", "] get bt connection state result' + JSON.stri", "ifi_test] check the state of wifi, if it's cl", " + 'bondStateChange state:' +  data.state);\n ", "othState.STATE_ON)==state);\n        let name ", "leBt();\n        let state = bluetooth.getStat", "STATE_TURNING_ON != state).assertTrue();\n    ", "hState.STATE_OFF != state).assertTrue();\n    ", "ifi_test] check the state of Hotspot\" );\n    ", "await bluetooth.on(\"stateChange\", onReceiveEv", " + data.deviceId + 'state:'+ data.state);\n   ", "e));\n        expect(state).assertEqual(2);\n  ", "fi_test]  check the state of wifi: \" + wifi.i", "e));\n        expect(state).assertEqual(blueto", "TATE_TURNING_OFF != state).assertTrue();\n    ", "h_js] get bluetooth state result = '+ JSON.st"], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanResult", "api_method_all": "interface ScanResult {\r\n        \r\n        deviceId: string;\r\n        \r\n        rssi: number;\r\n        \r\n        data: ArrayBuffer;\r\n    }", "api_method_name": "ScanResult", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScanResult", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanResult", "api_method_name": "rssi", "api_method_all": "rssi: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["             expect(rssiLength).assertEqual(", "                let rssiLength = Object.keys", "rssi: \" + result[j].rssi + \"band: \" + result", " + result.chload + \"rssi \" + result.rssi + \"", "                   \"rssi: \" + result[j].rssi", "uetooth_js] BLE get rssi start');\n        aw", "nfo('[bluetooth_js] rssi err:' + JSON.string", "etooth_js] BLE read rssi ' + JSON.stringify(", " + \"rssi \" + result.rssi + \"netWorkId: \" + r", "_test] check the 5G rssi assgined to level t", "est] check the 2.4G rssi assgined to level t", "uetooth_js] BLE get rssi1 start');\n        a"], "files": ["BluetoothBle.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanResult", "api_method_name": "data", "api_method_all": "data: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 800, "since": 8, "api_used": "\u662f", "lines": ["h_js] BLEDescriptor data:' + JSON.stringify(", ":\" + JSON.stringify(data));\n                ", "h_js] charaRead off data:\" + JSON.stringify(", "= '+ JSON.stringify(data));\n                ", "t(true).assertEqual(data ==null);\n          ", "ticRead', function (data) {\n                ", "         \"transId\": data.transId,\n          ", "             expect(data).assertNull();\n    ", "tDeviceName().then((data) => {\n             ", "teChange state:' +  data.state);\n           ", "edReq deviceId: ' + data.deviceId +\n        ", "ansId + 'offset:' + data.offset + 'charUuid:", "t.getServices((err, data)=> {\n              ", "      'charUuid:' + data.characteristicUuid ", ":' + JSON.stringify(data));\n                ", "ue:'+JSON.stringify(data));\n                ", " ' + JSON.stringify(data));\n                ", "ansId + 'offset:' + data.offset + 'isPrep:' ", "          \"offset\": data.offset,\n           ", "ength = Object.keys(data).length;\n          ", "' +\n                data.characteristicUuid ", "etRssiValue().then((data) => {\n             ", "                if (data != null) {\n        ", ") {\n            if (data == bluetooth.Blueto", "js] readCharacValue data:' + JSON.stringify(", " + 'serviceUuid:' + data.serviceUuid);\n     ", "e' + JSON.stringify(data)+ 'length' + data.l", "Change deviceId:' + data.deviceId + 'bondSta", "ffset + 'isPrep:' + data.isPrep +\n          ", "e' + JSON.stringify(data))\n                e", "       'transId:' + data.transId + 'offset:'", "tic read response\", data.offset),\n          ", "        \"deviceId\": data.deviceId,\n         ", "1' + JSON.stringify(data));\n                ", "icWrite', function (data) {\n\n               ", "         'value:' + data.value + 'needRsp' +", ".getRssiValue((err, data)=> {\n              ", " + 'serviceUuid:' + data.serviceUuid +\n     ", "tion onReceiveEvent(data) {\n            cons", "tion onReceiveEvent(data) {\n                ", "riReq deviceId: ' + data.deviceId +\n        ", "xport default {\n    data: {\n        title: \"", "tion onReceiveEvent(data) {\n            if (", "y(data)+ 'length' + data.length)\n           ", "             expect(data.length).assertLarge", "\n            expect(data.length).assertLarge"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AdvertiseSetting", "api_method_all": "interface AdvertiseSetting {\r\n        \r\n        interval?: number;\r\n        \r\n        txPower?: number;\r\n        \r\n        connectable?: boolean;\r\n    }", "api_method_name": "AdvertiseSetting", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AdvertiseSetting", "api_method_name": "interval", "api_method_all": "interval?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["g({\n                interval:150,\n              "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AdvertiseSetting", "api_method_name": "txPower", "api_method_all": "txPower?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["50,\n                txPower:60,\n               "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AdvertiseSetting", "api_method_name": "connectable", "api_method_all": "connectable?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["60,\n                connectable:true,\n            }"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AdvertiseData", "api_method_all": "interface AdvertiseData {\r\n        \r\n        serviceUuids: Array<string>;\r\n        \r\n        manufactureData: Array<ManufactureData>;\r\n        \r\n        serviceData: Array<ServiceData>;\r\n    }", "api_method_name": "AdvertiseData", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AdvertiseData", "api_method_name": "serviceUuids", "api_method_all": "serviceUuids: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["},{\n                serviceUuids:[\"12\"],\n           "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AdvertiseData", "api_method_name": "manufactureData", "api_method_all": "manufactureData: Array<ManufactureData>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["\"],\n                manufactureData:[{\n                "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AdvertiseData", "api_method_name": "serviceData", "api_method_all": "serviceData: Array<ServiceData>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["}],\n                serviceData:[{\n                "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ManufactureData", "api_method_all": "interface ManufactureData {\r\n        \r\n        manufactureId: number;\r\n        \r\n        manufactureValue: ArrayBuffer;\r\n    }", "api_method_name": "ManufactureData", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ManufactureData", "api_method_name": "manufactureId", "api_method_all": "manufactureId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["                    manufactureId:1789,\n             ", "                    manufactureId:4567,\n             "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ManufactureData", "api_method_name": "manufactureValue", "api_method_all": "manufactureValue: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["fer[1] = 2;\n        manufactureValueBuffer[2] = 3;\n     ", "fer[0] = 1;\n        manufactureValueBuffer[1] = 2;\n     ", "fer[2] = 3;\n        manufactureValueBuffer[3] = 4;\n     ", "                    manufactureValue:manufactureValueBuf", "   manufactureValue:manufactureValueBuffer.buffer\n      ", "leBt();\n        let manufactureValueBuffer = new Uint8Ar", "t8Array(4);\n        manufactureValueBuffer[0] = 1;\n     "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ServiceData", "api_method_all": "interface ServiceData {\r\n        \r\n        serviceUuid: string;\r\n        \r\n        serviceValue: ArrayBuffer;\r\n    }", "api_method_name": "ServiceData", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ServiceData", "api_method_name": "serviceUuid", "api_method_all": "serviceUuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["erviceUuid:' + data.serviceUuid);\n                e", "  let descriptor = {serviceUuid: '00001810-0000-100", "t characteristic = {serviceUuid: '00001810-0000-100", "erviceUuid:' + data.serviceUuid);\n                l", "erviceUuid:' + data.serviceUuid +\n                '", "                    serviceUuid:\"1234\",\n           ", "      descriptor = {serviceUuid: '00001810-0000-100", "haracteristicUuid +'serviceUuid:' + data.serviceUui", "descriptorNotify = {serviceUuid: '00001810-0000-100", "},{\n                serviceUuids:[\"12\"],\n          ", "     let service = {serviceUuid: '00001810-0000-100", "                    serviceUuid:\"1794\",\n           ", "aracteristicUuid + 'serviceUuid:' + data.serviceUui"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ServiceData", "api_method_name": "serviceValue", "api_method_all": "serviceValue: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["fer[1] = 6;\n        serviceValueBuffer[2] = 7;\n     ", "                    serviceValue:serviceValueBuffer.", "fer[0] = 4;\n        serviceValueBuffer[1] = 6;\n     ", "3] = 4;\n        let serviceValueBuffer = new Uint8Ar", "t8Array(4);\n        serviceValueBuffer[0] = 4;\n     ", "       serviceValue:serviceValueBuffer.buffer\n      ", "fer[2] = 7;\n        serviceValueBuffer[3] = 8;\n     "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanFilter", "api_method_all": "interface ScanFilter {\r\n        \r\n        deviceId?: string;\r\n        \r\n        name?: string;\r\n        \r\n        serviceUuid?: string;\r\n    }", "api_method_name": "ScanFilter", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScanFilter", "api_method_name": "deviceId", "api_method_all": "deviceId?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanFilter", "api_method_name": "name", "api_method_all": "name?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 232, "since": 7, "api_used": "\u662f", "lines": ["AME_0001\n     * @tc.name testGetRemoteDevice", "_js] BLE get device name promise start');\n  ", "(true).assertTrue(Btname.LETTERS_TEST == JSO", "=' + JSON.stringify(name));\n        expect(n", "DEV_0001\n     * @tc.name testCancelPairedDev", "(true).assertTrue(Btname.CHINESES_TEST == JS", "RCT_0001\n     * @tc.name testDisConnect\n    ", "(true).assertTrue(Btname.NUM_TEST == JSON.st", "T1);\n        expect(name).assertTrue();\n    ", "ST);\n        expect(name).assertTrue();\n    ", "etooth_js] set localname start');\n        aw", "leBt();\n        let name = bluetooth.setLoca", "ooth.setLocalName(Btname.LETTERS_TEST);\n    ", "AME_0002\n     * @tc.name testsetLocalName\n  ", "ooth.setLocalName(Btname.NUM_TEST);\n        ", "'');\n        expect(name).assertFalse();\n   ", "ICE_0001\n     * @tc.name testAddService\n    ", "ICE_0001\n     * @tc.name testRemoveService\n ", "e));\n        expect(name).assertNull();\n    ", "AME_0006\n     * @tc.name testsetLocalName\n  ", "sertTrue(localName==name);\n        console.i", "Name();\n        let name = bluetooth.setLoca", "GED_0001\n     * @tc.name testNotifyCharacter", "ON.stringify(err) +'name1' + JSON.stringify(", "luetooth_js] device name err1 ' + JSON.strin", "AME_0005\n     * @tc.name testsetLocalName\n  ", "OSE_0001\n     * @tc.name testBlePeripheralMa", "ooth.setLocalName(Btname.CHINESES_TEST);\n   ", "IZE_0001\n     * @tc.name testSetBLEMtuSize\n ", "GED_0001\n     * @tc.name testSetNotifyCharac", "= '+ JSON.stringify(name));\n        expect(n", "unit/index'\n\n\nlet Btname = {\n    NUM_TEST :'", "NSE_0001\n     * @tc.name testSendResponse\n  ", "AME_0001\n     * @tc.name testsetLocalName\n  ", "ASS_0001\n     * @tc.name testGetRemoteDevice", "state);\n        let name = bluetooth.setLoca", "ooth.setLocalName(Btname.NUM_TEST1);\n       ", "(true).assertTrue(Btname.NUM_TEST1 == JSON.s", "luetooth_js] device name' + JSON.stringify(d", "AME_0007\n     * @tc.name testsetLocalName\n  ", "OSE_0001\n     * @tc.name testGattClientClose", "AME_0003\n     * @tc.name testsetLocalName\n  ", "AME_0004\n     * @tc.name testsetLocalName\n  ", "e));\n        expect(name).assertEqual(true);"], "files": ["RpcJsunit.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanFilter", "api_method_name": "serviceUuid", "api_method_all": "serviceUuid?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["erviceUuid:' + data.serviceUuid);\n                e", "  let descriptor = {serviceUuid: '00001810-0000-100", "t characteristic = {serviceUuid: '00001810-0000-100", "erviceUuid:' + data.serviceUuid);\n                l", "erviceUuid:' + data.serviceUuid +\n                '", "                    serviceUuid:\"1234\",\n           ", "      descriptor = {serviceUuid: '00001810-0000-100", "haracteristicUuid +'serviceUuid:' + data.serviceUui", "descriptorNotify = {serviceUuid: '00001810-0000-100", "},{\n                serviceUuids:[\"12\"],\n          ", "     let service = {serviceUuid: '00001810-0000-100", "                    serviceUuid:\"1794\",\n           ", "aracteristicUuid + 'serviceUuid:' + data.serviceUui"], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanOptions", "api_method_all": "interface ScanOptions {\r\n        \r\n        interval?: number;\r\n        \r\n        dutyMode?: ScanDuty;\r\n        \r\n        matchMode?: MatchMode;\r\n    }", "api_method_name": "ScanOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScanOptions", "api_method_name": "interval", "api_method_all": "interval?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["g({\n                interval:150,\n              "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanOptions", "api_method_name": "dutyMode", "api_method_all": "dutyMode?: ScanDuty", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScanOptions", "api_method_name": "matchMode", "api_method_all": "matchMode?: MatchMode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SppOption", "api_method_all": "interface SppOption {\r\n        \r\n        uuid: string;\r\n        \r\n        secure: boolean;\r\n        \r\n        type: SppType;\r\n    }", "api_method_name": "SppOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SppOption", "api_method_name": "uuid", "api_method_all": "uuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["   let sppOption = {uuid: '00001810-0000-100"], "files": ["Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SppOption", "api_method_name": "secure", "api_method_all": "secure: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["B34FB',\n            secure: false, type: 0};\n ", "B34FB',\n            secure: true, type: 0};\n  "], "files": ["Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SppOption", "api_method_name": "type", "api_method_all": "type: SppType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 41, "since": 8, "api_used": "\u662f", "lines": ["ef = Object.getPrototypeOf(global) || global", "omise, read various types of arrays in order", "o pass an object of type iremoteobject acros", "     secure: false, type: 0};\n        blueto", "e MEDIUM\n     * @tc.type Function\n     * @tc", "      secure: true, type: 0};\n        blueto"], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PinRequiredParam", "api_method_all": "interface PinRequiredParam {\r\n        deviceId: string;\r\n        pinCode: string;\r\n    }", "api_method_name": "PinRequiredParam", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PinRequiredParam", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PinRequiredParam", "api_method_name": "pinCode", "api_method_all": "pinCode: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceClass", "api_method_all": "interface DeviceClass {\r\n        majorClass: MajorClass;\r\n        majorMinorClass: MajorMinorClass;\r\n        classOfDevice: number;\r\n    }", "api_method_name": "DeviceClass", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["etooth_js] getRemoteDeviceClass ret2 :' + JSON.stri", " bluetooth.getRemoteDeviceClass(\"00:00:00:00:00:00\"", "c.name testGetRemoteDeviceClass\n     * @tc.desc Tes", "etooth_js] getRemoteDeviceClass start');\n        aw", ".desc Test GetRemoteDeviceClass api.\n     * @tc.siz"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceClass", "api_method_name": "majorClass", "api_method_all": "majorClass: MajorClass", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["N.stringify(ret) + 'majorClass:' +\n        ret.maj", "ass:' +\n        ret.majorClass + 'majorMinorClass:", "\n        expect(ret.majorClass).assertEqual(0);\n  "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceClass", "api_method_name": "majorMinorClass", "api_method_all": "majorMinorClass: MajorMinorClass", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["  ret.majorClass + 'majorMinorClass:'+ ret.majorMinorCl", "orMinorClass:'+ ret.majorMinorClass + 'classOfDevice:' "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceClass", "api_method_name": "classOfDevice", "api_method_all": "classOfDevice: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["assOfDevice:' + ret.classOfDevice);\n        expect(re", ".majorMinorClass + 'classOfDevice:' + ret.classOfDevi"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BondStateParam", "api_method_all": "interface BondStateParam {\r\n        deviceId: string;\r\n        state: BondState;\r\n    }", "api_method_name": "BondStateParam", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BondStateParam", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BondStateParam", "api_method_name": "state", "api_method_all": "state: BondState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 8, "api_used": "\u662f", "lines": ["nge state:' +  data.state);\n            expec", "E_BLE_TURNING_ON != state).assertTrue();\n    ", "True();\n        let state = bluetooth.getStat", "_js] get connection state start');\n        aw", "= '+ JSON.stringify(state));\n        expect(s", "ate.STATE_BLE_ON != state).assertTrue();\n    ", "_BLE_TURNING_OFF != state).assertTrue();\n    ", "wait bluetooth.off('stateChange', result => {", "('[bluetooth_js] bt state:' + JSON.stringify(", ":' + JSON.stringify(state));\n        done();\n", "Id + 'state:'+ data.state);\n                e", "e();\n        expect(state).assertEqual(2);\n  ", "] get bt connection state result' + JSON.stri", "ifi_test] check the state of wifi, if it's cl", " + 'bondStateChange state:' +  data.state);\n ", "othState.STATE_ON)==state);\n        let name ", "leBt();\n        let state = bluetooth.getStat", "STATE_TURNING_ON != state).assertTrue();\n    ", "hState.STATE_OFF != state).assertTrue();\n    ", "ifi_test] check the state of Hotspot\" );\n    ", "await bluetooth.on(\"stateChange\", onReceiveEv", " + data.deviceId + 'state:'+ data.state);\n   ", "e));\n        expect(state).assertEqual(2);\n  ", "fi_test]  check the state of wifi: \" + wifi.i", "e));\n        expect(state).assertEqual(blueto", "TATE_TURNING_OFF != state).assertTrue();\n    ", "h_js] get bluetooth state result = '+ JSON.st"], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanDuty", "api_method_all": "enum ScanDuty {\r\n        \r\n        SCAN_MODE_LOW_POWER = 0,\r\n        \r\n        SCAN_MODE_BALANCED = 1,\r\n        \r\n        SCAN_MODE_LOW_LATENCY = 2\r\n    }", "api_method_name": "ScanDuty", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["stringify(bluetooth.ScanDuty.SCAN_MODE_LOW_POWER", "stringify(bluetooth.ScanDuty.SCAN_MODE_BALANCED)"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanDuty", "api_method_name": "SCAN_MODE_LOW_POWER", "api_method_all": "SCAN_MODE_LOW_POWER = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["(bluetooth.ScanDuty.SCAN_MODE_LOW_POWER) !=result );\n      "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanDuty", "api_method_name": "SCAN_MODE_BALANCED", "api_method_all": "SCAN_MODE_BALANCED = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["(bluetooth.ScanDuty.SCAN_MODE_BALANCED) != result );\n     ", "(bluetooth.ScanDuty.SCAN_MODE_BALANCED) != result);\n      "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanDuty", "api_method_name": "SCAN_MODE_LOW_LATENCY", "api_method_all": "SCAN_MODE_LOW_LATENCY = 2", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MatchMode", "api_method_all": "enum MatchMode {\r\n        \r\n        MATCH_MODE_AGGRESSIVE = 1,\r\n        \r\n        MATCH_MODE_STICKY = 2\r\n    }", "api_method_name": "MatchMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["P_RFCOMM : 0\n}\n\nlet MatchMode = {\n    MATCH_MODE_"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MatchMode", "api_method_name": "MATCH_MODE_AGGRESSIVE", "api_method_all": "MATCH_MODE_AGGRESSIVE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["t MatchMode = {\n    MATCH_MODE_AGGRESSIVE : 1,\n    MATCH_MODE"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MatchMode", "api_method_name": "MATCH_MODE_STICKY", "api_method_all": "MATCH_MODE_STICKY = 2", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["AGGRESSIVE : 1,\n    MATCH_MODE_STICKY : 2\n}\n\nlet MajorCla"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProfileConnectionState", "api_method_all": "enum ProfileConnectionState {\r\n        \r\n        STATE_DISCONNECTED = 0,\r\n        \r\n        STATE_CONNECTING = 1,\r\n        \r\n        STATE_CONNECTED = 2,\r\n        \r\n        STATE_DISCONNECTING = 3\r\n    }", "api_method_name": "ProfileConnectionState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["sertEqual(bluetooth.ProfileConnectionState.STATE_DISCONNECTED)", "ssertTrue(bluetooth.ProfileConnectionState.STATE_CONNECTED!= c", "ssertTrue(bluetooth.ProfileConnectionState.STATE_DISCONNECTING", "ssertTrue(bluetooth.ProfileConnectionState.STATE_CONNECTING!= "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProfileConnectionState", "api_method_name": "STATE_DISCONNECTED", "api_method_all": "STATE_DISCONNECTED = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["fileConnectionState.STATE_DISCONNECTED);\n        expect(tr"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProfileConnectionState", "api_method_name": "STATE_CONNECTING", "api_method_all": "STATE_CONNECTING = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["fileConnectionState.STATE_CONNECTING!= connState );\n    "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProfileConnectionState", "api_method_name": "STATE_CONNECTED", "api_method_all": "STATE_CONNECTED = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["fileConnectionState.STATE_CONNECTED!= connState );\n    "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProfileConnectionState", "api_method_name": "STATE_DISCONNECTING", "api_method_all": "STATE_DISCONNECTING = 3", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["fileConnectionState.STATE_DISCONNECTING!= connState );\n    "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BluetoothState", "api_method_all": "enum BluetoothState {\r\n        \r\n        STATE_OFF = 0,\r\n        \r\n        STATE_TURNING_ON = 1,\r\n        \r\n        STATE_ON = 2,\r\n        \r\n        STATE_TURNING_OFF = 3,\r\n        \r\n        STATE_BLE_TURNING_ON = 4,\r\n        \r\n        STATE_BLE_ON = 5,\r\n        \r\n        STATE_BLE_TURNING_OFF = 6\r\n    }", "api_method_name": "BluetoothState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["stringify(bluetooth.BluetoothState.STATE_ON)==state);\n", " (data == bluetooth.BluetoothState.STATE_ON) {\n       ", "   expect(bluetooth.BluetoothState.STATE_TURNING_OFF !", "sertEqual(bluetooth.BluetoothState.STATE_ON);\n        ", "   expect(bluetooth.BluetoothState.STATE_BLE_TURNING_O", "   expect(bluetooth.BluetoothState.STATE_OFF != state)", "   expect(bluetooth.BluetoothState.STATE_BLE_ON != sta", "   expect(bluetooth.BluetoothState.STATE_TURNING_ON !="], "files": ["Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BluetoothState", "api_method_name": "STATE_OFF", "api_method_all": "STATE_OFF = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["ooth.BluetoothState.STATE_OFF != state).assertTru"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BluetoothState", "api_method_name": "STATE_TURNING_ON", "api_method_all": "STATE_TURNING_ON = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["ooth.BluetoothState.STATE_TURNING_ON != state).assertTru"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BluetoothState", "api_method_name": "STATE_ON", "api_method_all": "STATE_ON = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["ooth.BluetoothState.STATE_ON) {\n                ", "ooth.BluetoothState.STATE_ON)==state);\n        l", "ooth.BluetoothState.STATE_ON);\n        expect(bl"], "files": ["Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BluetoothState", "api_method_name": "STATE_TURNING_OFF", "api_method_all": "STATE_TURNING_OFF = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["ooth.BluetoothState.STATE_TURNING_OFF != state).assertTru"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BluetoothState", "api_method_name": "STATE_BLE_TURNING_ON", "api_method_all": "STATE_BLE_TURNING_ON = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["ooth.BluetoothState.STATE_BLE_TURNING_ON != state).assertTru"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BluetoothState", "api_method_name": "STATE_BLE_ON", "api_method_all": "STATE_BLE_ON = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["ooth.BluetoothState.STATE_BLE_ON != state).assertTru"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BluetoothState", "api_method_name": "STATE_BLE_TURNING_OFF", "api_method_all": "STATE_BLE_TURNING_OFF = 6", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["ooth.BluetoothState.STATE_BLE_TURNING_OFF != state).assertTru"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SppType", "api_method_all": "enum SppType {\r\n        \r\n        SPP_RFCOMM\r\n    }", "api_method_name": "SppType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["jsunit/index'\n\n\nlet SppType = {\n    SPP_RFCOMM "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanMode", "api_method_all": "enum ScanMode {\r\n        \r\n        SCAN_MODE_NONE = 0,\r\n        \r\n        SCAN_MODE_CONNECTABLE = 1,\r\n        \r\n        SCAN_MODE_GENERAL_DISCOVERABLE = 2,\r\n        \r\n        SCAN_MODE_LIMITED_DISCOVERABLE = 3,\r\n        \r\n        SCAN_MODE_CONNECTABLE_GENERAL_DISCOVERABLE = 4,\r\n        \r\n        SCAN_MODE_CONNECTABLE_LIMITED_DISCOVERABLE = 5\r\n    }", "api_method_name": "ScanMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["uetooth.setBluetoothScanMode(1,10000);\n        e", "ssertTrue(bluetooth.ScanMode.SCAN_MODE_GENERAL_D", "uetooth.getBluetoothScanMode();\n        console.", "ssertTrue(bluetooth.ScanMode.SCAN_MODE_LIMITED_D", "ssertTrue(bluetooth.ScanMode.SCAN_MODE_NONE != s", "ssertTrue(bluetooth.ScanMode.SCAN_MODE_CONNECTAB"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanMode", "api_method_name": "SCAN_MODE_NONE", "api_method_all": "SCAN_MODE_NONE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["(bluetooth.ScanMode.SCAN_MODE_NONE != scanMode);\n     "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanMode", "api_method_name": "SCAN_MODE_CONNECTABLE", "api_method_all": "SCAN_MODE_CONNECTABLE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["(bluetooth.ScanMode.SCAN_MODE_CONNECTABLE_GENERAL_DISCOVERABL", "(bluetooth.ScanMode.SCAN_MODE_CONNECTABLE != scanMode);\n     ", "(bluetooth.ScanMode.SCAN_MODE_CONNECTABLE_LIMITED_DISCOVERABL"], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanMode", "api_method_name": "SCAN_MODE_GENERAL_DISCOVERABLE", "api_method_all": "SCAN_MODE_GENERAL_DISCOVERABLE = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["(bluetooth.ScanMode.SCAN_MODE_GENERAL_DISCOVERABLE != scanMode);\n     "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanMode", "api_method_name": "SCAN_MODE_LIMITED_DISCOVERABLE", "api_method_all": "SCAN_MODE_LIMITED_DISCOVERABLE = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["(bluetooth.ScanMode.SCAN_MODE_LIMITED_DISCOVERABLE != scanMode);\n     "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanMode", "api_method_name": "SCAN_MODE_CONNECTABLE_GENERAL_DISCOVERABLE", "api_method_all": "SCAN_MODE_CONNECTABLE_GENERAL_DISCOVERABLE = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["(bluetooth.ScanMode.SCAN_MODE_CONNECTABLE_GENERAL_DISCOVERABLE != scanMode);\n     "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScanMode", "api_method_name": "SCAN_MODE_CONNECTABLE_LIMITED_DISCOVERABLE", "api_method_all": "SCAN_MODE_CONNECTABLE_LIMITED_DISCOVERABLE = 5", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["(bluetooth.ScanMode.SCAN_MODE_CONNECTABLE_LIMITED_DISCOVERABLE != scanMode);\n     "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BondState", "api_method_all": "enum BondState {\r\n        \r\n        BOND_STATE_INVALID = 0,\r\n        \r\n        BOND_STATE_BONDING = 1,\r\n        \r\n        BOND_STATE_BONDED = 2\r\n    }", "api_method_name": "BondState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["   expect(bluetooth.BondState.BOND_STATE_BONDING ", "   expect(bluetooth.BondState.BOND_STATE_BONDED =", "   expect(bluetooth.BondState.BOND_STATE_INVALID "], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BondState", "api_method_name": "BOND_STATE_INVALID", "api_method_all": "BOND_STATE_INVALID = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["bluetooth.BondState.BOND_STATE_INVALID == 0).assertTrue();"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BondState", "api_method_name": "BOND_STATE_BONDING", "api_method_all": "BOND_STATE_BONDING = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["bluetooth.BondState.BOND_STATE_BONDING == 1).assertTrue();"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BondState", "api_method_name": "BOND_STATE_BONDED", "api_method_all": "BOND_STATE_BONDED = 2", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["bluetooth.BondState.BOND_STATE_BONDED == 2).assertTrue();"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_all": "enum MajorClass {\r\n        MAJOR_MISC = 0x0000,\r\n        MAJOR_COMPUTER = 0x0100,\r\n        MAJOR_PHONE = 0x0200,\r\n        MAJOR_NETWORKING = 0x0300,\r\n        MAJOR_AUDIO_VIDEO = 0x0400,\r\n        MAJOR_PERIPHERAL = 0x0500,\r\n        MAJOR_IMAGING = 0x0600,\r\n        MAJOR_WEARABLE = 0x0700,\r\n        MAJOR_TOY = 0x0800,\r\n        MAJOR_HEALTH = 0x0900,\r\n        MAJOR_UNCATEGORIZED = 0x1F00\r\n    }", "api_method_name": "MajorClass", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["E_STICKY : 2\n}\n\nlet MajorClass = {\n    MAJOR_MISC "], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_MISC", "api_method_all": "MAJOR_MISC = 0x0000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": [" MajorClass = {\n    MAJOR_MISC : 0x0000,\n    MAJOR"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_COMPUTER", "api_method_all": "MAJOR_COMPUTER = 0x0100,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["_MISC : 0x0000,\n    MAJOR_COMPUTER : 0x0100,\n    MAJOR"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_PHONE", "api_method_all": "MAJOR_PHONE = 0x0200,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["PUTER : 0x0100,\n    MAJOR_PHONE : 0x0200,\n    MAJOR"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_NETWORKING", "api_method_all": "MAJOR_NETWORKING = 0x0300,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["PHONE : 0x0200,\n    MAJOR_NETWORKING : 0x0300,\n    MAJOR"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_AUDIO_VIDEO", "api_method_all": "MAJOR_AUDIO_VIDEO = 0x0400,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RKING : 0x0300,\n    MAJOR_AUDIO_VIDEO : 0x0400,\n    MAJOR"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_PERIPHERAL", "api_method_all": "MAJOR_PERIPHERAL = 0x0500,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["VIDEO : 0x0400,\n    MAJOR_PERIPHERAL : 0x0500,\n    MAJOR"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_IMAGING", "api_method_all": "MAJOR_IMAGING = 0x0600,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["HERAL : 0x0500,\n    MAJOR_IMAGING : 0x0600,\n    MAJOR"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_WEARABLE", "api_method_all": "MAJOR_WEARABLE = 0x0700,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["AGING : 0x0600,\n    MAJOR_WEARABLE : 0x0700,\n    MAJOR"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_TOY", "api_method_all": "MAJOR_TOY = 0x0800,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RABLE : 0x0700,\n    MAJOR_TOY : 0x0800,\n    MAJOR"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_HEALTH", "api_method_all": "MAJOR_HEALTH = 0x0900,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["R_TOY : 0x0800,\n    MAJOR_HEALTH : 0x0900,\n    MAJOR"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorClass", "api_method_name": "MAJOR_UNCATEGORIZED", "api_method_all": "MAJOR_UNCATEGORIZED = 0x1F00", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["EALTH : 0x0900,\n    MAJOR_UNCATEGORIZED : 0x1F00\n}\n\n\ndescri"], "files": ["BluetoothBle.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_all": "enum MajorMinorClass {\r\n        // The Minor Device Class field\r\n        // Computer Major Class\r\n        COMPUTER_UNCATEGORIZED = 0x0100,\r\n        COMPUTER_DESKTOP = 0x0104,\r\n        COMPUTER_SERVER = 0x0108,\r\n        COMPUTER_LAPTOP = 0x010C,\r\n        COMPUTER_HANDHELD_PC_PDA = 0x0110,\r\n        COMPUTER_PALM_SIZE_PC_PDA = 0x0114,\r\n        COMPUTER_WEARABLE = 0x0118,\r\n        COMPUTER_TABLET = 0x011C,\r\n\r\n        // Phone Major Class\r\n        PHONE_UNCATEGORIZED = 0x0200,\r\n        PHONE_CELLULAR = 0x0204,\r\n        PHONE_CORDLESS = 0x0208,\r\n        PHONE_SMART = 0x020C,\r\n        PHONE_MODEM_OR_GATEWAY = 0x0210,\r\n        PHONE_ISDN = 0x0214,\r\n\r\n        // LAN/Network Access Point Major Class\r\n        NETWORK_FULLY_AVAILABLE = 0x0300,\r\n        NETWORK_1_TO_17_UTILIZED = 0x0320,\r\n        NETWORK_17_TO_33_UTILIZED = 0x0340,\r\n        NETWORK_33_TO_50_UTILIZED = 0x0360,\r\n        NETWORK_60_TO_67_UTILIZED = 0x0380,\r\n        NETWORK_67_TO_83_UTILIZED = 0x03A0,\r\n        NETWORK_83_TO_99_UTILIZED = 0x03C0,\r\n        NETWORK_NO_SERVICE = 0x03E0,\r\n\r\n        // Audio/Video Major Class\r\n        AUDIO_VIDEO_UNCATEGORIZED = 0x0400,\r\n        AUDIO_VIDEO_WEARABLE_HEADSET = 0x0404,\r\n        AUDIO_VIDEO_HANDSFREE = 0x0408,\r\n        AUDIO_VIDEO_MICROPHONE = 0x0410,\r\n        AUDIO_VIDEO_LOUDSPEAKER = 0x0414,\r\n        AUDIO_VIDEO_HEADPHONES = 0x0418,\r\n        AUDIO_VIDEO_PORTABLE_AUDIO = 0x041C,\r\n        AUDIO_VIDEO_CAR_AUDIO = 0x0420,\r\n        AUDIO_VIDEO_SET_TOP_BOX = 0x0424,\r\n        AUDIO_VIDEO_HIFI_AUDIO = 0x0428,\r\n        AUDIO_VIDEO_VCR = 0x042C,\r\n        AUDIO_VIDEO_VIDEO_CAMERA = 0x0430,\r\n        AUDIO_VIDEO_CAMCORDER = 0x0434,\r\n        AUDIO_VIDEO_VIDEO_MONITOR = 0x0438,\r\n        AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER = 0x043C,\r\n        AUDIO_VIDEO_VIDEO_CONFERENCING = 0x0440,\r\n        AUDIO_VIDEO_VIDEO_GAMING_TOY = 0x0448,\r\n\r\n        // Peripheral Major Class\r\n        PERIPHERAL_NON_KEYBOARD_NON_POINTING = 0x0500,\r\n        PERIPHERAL_KEYBOARD = 0x0540,\r\n        PERIPHERAL_POINTING_DEVICE = 0x0580,\r\n        PERIPHERAL_KEYBOARD_POINTING = 0x05C0,\r\n        PERIPHERAL_UNCATEGORIZED = 0x0500,\r\n        PERIPHERAL_JOYSTICK = 0x0504,\r\n        PERIPHERAL_GAMEPAD = 0x0508,\r\n        PERIPHERAL_REMOTE_CONTROL = 0x05C0,\r\n        PERIPHERAL_SENSING_DEVICE = 0x0510,\r\n        PERIPHERAL_DIGITIZER_TABLET = 0x0514,\r\n        PERIPHERAL_CARD_READER = 0x0518,\r\n        PERIPHERAL_DIGITAL_PEN = 0x051C,\r\n        PERIPHERAL_SCANNER_RFID = 0x0520,\r\n        PERIPHERAL_GESTURAL_INPUT = 0x0522,\r\n\r\n        // Imaging Major Class\r\n        IMAGING_UNCATEGORIZED = 0x0600,\r\n        IMAGING_DISPLAY = 0x0610,\r\n        IMAGING_CAMERA = 0x0620,\r\n        IMAGING_SCANNER = 0x0640,\r\n        IMAGING_PRINTER = 0x0680,\r\n\r\n        // Wearable Major Class\r\n        WEARABLE_UNCATEGORIZED = 0x0700,\r\n        WEARABLE_WRIST_WATCH = 0x0704,\r\n        WEARABLE_PAGER = 0x0708,\r\n        WEARABLE_JACKET = 0x070C,\r\n        WEARABLE_HELMET = 0x0710,\r\n        WEARABLE_GLASSES = 0x0714,\r\n\r\n        // Minor Device Class field - Toy Major Class\r\n        TOY_UNCATEGORIZED = 0x0800,\r\n        TOY_ROBOT = 0x0804,\r\n        TOY_VEHICLE = 0x0808,\r\n        TOY_DOLL_ACTION_FIGURE = 0x080C,\r\n        TOY_CONTROLLER = 0x0810,\r\n        TOY_GAME = 0x0814,\r\n\r\n        // Minor Device Class field - Health\r\n        HEALTH_UNCATEGORIZED = 0x0900,\r\n        HEALTH_BLOOD_PRESSURE = 0x0904,\r\n        HEALTH_THERMOMETER = 0x0908,\r\n        HEALTH_WEIGHING = 0x090C,\r\n        HEALTH_GLUCOSE = 0x0910,\r\n        HEALTH_PULSE_OXIMETER = 0x0914,\r\n        HEALTH_PULSE_RATE = 0x0918,\r\n        HEALTH_DATA_DISPLAY = 0x091C,\r\n        HEALTH_STEP_COUNTER = 0x0920,\r\n        HEALTH_BODY_COMPOSITION_ANALYZER = 0x0924,\r\n        HEALTH_PEAK_FLOW_MOITOR = 0x0928,\r\n        HEALTH_MEDICATION_MONITOR = 0x092C,\r\n        HEALTH_KNEE_PROSTHESIS = 0x0930,\r\n        HEALTH_ANKLE_PROSTHESIS = 0x0934,\r\n        HEALTH_GENERIC_HEALTH_MANAGER = 0x0938,\r\n        HEALTH_PERSONAL_MOBILITY_DEVICE = 0x093C,\r\n    }", "api_method_name": "MajorMinorClass", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["cjsunit/index'\n\nlet MajorMinorClass = {\n    COMPUTER_UN"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "COMPUTER_UNCATEGORIZED", "api_method_all": "COMPUTER_UNCATEGORIZED = 0x0100,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["rMinorClass = {\n    COMPUTER_UNCATEGORIZED : 0x0100,\n    COMPU"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "COMPUTER_DESKTOP", "api_method_all": "COMPUTER_DESKTOP = 0x0104,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RIZED : 0x0100,\n    COMPUTER_DESKTOP : 0x0104,\n    COMPU"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "COMPUTER_SERVER", "api_method_all": "COMPUTER_SERVER = 0x0108,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["SKTOP : 0x0104,\n    COMPUTER_SERVER : 0x0108,\n    COMPU"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "COMPUTER_LAPTOP", "api_method_all": "COMPUTER_LAPTOP = 0x010C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ERVER : 0x0108,\n    COMPUTER_LAPTOP : 0x010C,\n    COMPU"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "COMPUTER_HANDHELD_PC_PDA", "api_method_all": "COMPUTER_HANDHELD_PC_PDA = 0x0110,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["APTOP : 0x010C,\n    COMPUTER_HANDHELD_PC_PDA : 0x0110,\n    COMPU"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "COMPUTER_PALM_SIZE_PC_PDA", "api_method_all": "COMPUTER_PALM_SIZE_PC_PDA = 0x0114,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["C_PDA : 0x0110,\n    COMPUTER_PALM_SIZE_PC_PDA : 0x0114,\n    COMPU"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "COMPUTER_WEARABLE", "api_method_all": "COMPUTER_WEARABLE = 0x0118,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["C_PDA : 0x0114,\n    COMPUTER_WEARABLE : 0x0118,\n    COMPU"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "COMPUTER_TABLET", "api_method_all": "COMPUTER_TABLET = 0x011C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RABLE : 0x0118,\n    COMPUTER_TABLET : 0x011C,\n    PHONE"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PHONE_UNCATEGORIZED", "api_method_all": "PHONE_UNCATEGORIZED = 0x0200,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ABLET : 0x011C,\n    PHONE_UNCATEGORIZED : 0x0200,\n    PHONE"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PHONE_CELLULAR", "api_method_all": "PHONE_CELLULAR = 0x0204,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RIZED : 0x0200,\n    PHONE_CELLULAR : 0x0204,\n    PHONE"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PHONE_CORDLESS", "api_method_all": "PHONE_CORDLESS = 0x0208,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["LULAR : 0x0204,\n    PHONE_CORDLESS : 0x0208,\n    PHONE"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PHONE_SMART", "api_method_all": "PHONE_SMART = 0x020C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["DLESS : 0x0208,\n    PHONE_SMART : 0x020C,\n    PHONE"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PHONE_MODEM_OR_GATEWAY", "api_method_all": "PHONE_MODEM_OR_GATEWAY = 0x0210,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["SMART : 0x020C,\n    PHONE_MODEM_OR_GATEWAY : 0x0210,\n    PHONE"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PHONE_ISDN", "api_method_all": "PHONE_ISDN = 0x0214,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["TEWAY : 0x0210,\n    PHONE_ISDN : 0x0214,\n    NETWO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "NETWORK_FULLY_AVAILABLE", "api_method_all": "NETWORK_FULLY_AVAILABLE = 0x0300,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["_ISDN : 0x0214,\n    NETWORK_FULLY_AVAILABLE : 0x0300,\n    NETWO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "NETWORK_1_TO_17_UTILIZED", "api_method_all": "NETWORK_1_TO_17_UTILIZED = 0x0320,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["LABLE : 0x0300,\n    NETWORK_1_TO_17_UTILIZED : 0x0320,\n    NETWO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "NETWORK_17_TO_33_UTILIZED", "api_method_all": "NETWORK_17_TO_33_UTILIZED = 0x0340,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["LIZED : 0x0320,\n    NETWORK_17_TO_33_UTILIZED : 0x0340,\n    NETWO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "NETWORK_33_TO_50_UTILIZED", "api_method_all": "NETWORK_33_TO_50_UTILIZED = 0x0360,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["LIZED : 0x0340,\n    NETWORK_33_TO_50_UTILIZED : 0x0360,\n    NETWO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "NETWORK_60_TO_67_UTILIZED", "api_method_all": "NETWORK_60_TO_67_UTILIZED = 0x0380,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["LIZED : 0x0360,\n    NETWORK_60_TO_67_UTILIZED : 0x0380,\n    NETWO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "NETWORK_67_TO_83_UTILIZED", "api_method_all": "NETWORK_67_TO_83_UTILIZED = 0x03A0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["LIZED : 0x0380,\n    NETWORK_67_TO_83_UTILIZED : 0x03A0,\n    NETWO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "NETWORK_83_TO_99_UTILIZED", "api_method_all": "NETWORK_83_TO_99_UTILIZED = 0x03C0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["LIZED : 0x03A0,\n    NETWORK_83_TO_99_UTILIZED : 0x03C0,\n    NETWO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "NETWORK_NO_SERVICE", "api_method_all": "NETWORK_NO_SERVICE = 0x03E0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["LIZED : 0x03C0,\n    NETWORK_NO_SERVICE : 0x03E0,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_UNCATEGORIZED", "api_method_all": "AUDIO_VIDEO_UNCATEGORIZED = 0x0400,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RVICE : 0x03E0,\n    AUDIO_VIDEO_UNCATEGORIZED : 0x0400,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_WEARABLE_HEADSET", "api_method_all": "AUDIO_VIDEO_WEARABLE_HEADSET = 0x0404,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RIZED : 0x0400,\n    AUDIO_VIDEO_WEARABLE_HEADSET : 0x0404,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_HANDSFREE", "api_method_all": "AUDIO_VIDEO_HANDSFREE = 0x0408,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ADSET : 0x0404,\n    AUDIO_VIDEO_HANDSFREE : 0x0408,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_MICROPHONE", "api_method_all": "AUDIO_VIDEO_MICROPHONE = 0x0410,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["SFREE : 0x0408,\n    AUDIO_VIDEO_MICROPHONE : 0x0410,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_LOUDSPEAKER", "api_method_all": "AUDIO_VIDEO_LOUDSPEAKER = 0x0414,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["PHONE : 0x0410,\n    AUDIO_VIDEO_LOUDSPEAKER : 0x0414,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_HEADPHONES", "api_method_all": "AUDIO_VIDEO_HEADPHONES = 0x0418,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["EAKER : 0x0414,\n    AUDIO_VIDEO_HEADPHONES : 0x0418,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_PORTABLE_AUDIO", "api_method_all": "AUDIO_VIDEO_PORTABLE_AUDIO = 0x041C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["HONES : 0x0418,\n    AUDIO_VIDEO_PORTABLE_AUDIO : 0x041C,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_CAR_AUDIO", "api_method_all": "AUDIO_VIDEO_CAR_AUDIO = 0x0420,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["AUDIO : 0x041C,\n    AUDIO_VIDEO_CAR_AUDIO : 0x0420,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_SET_TOP_BOX", "api_method_all": "AUDIO_VIDEO_SET_TOP_BOX = 0x0424,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["AUDIO : 0x0420,\n    AUDIO_VIDEO_SET_TOP_BOX : 0x0424,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_HIFI_AUDIO", "api_method_all": "AUDIO_VIDEO_HIFI_AUDIO = 0x0428,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["P_BOX : 0x0424,\n    AUDIO_VIDEO_HIFI_AUDIO : 0x0428,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_VCR", "api_method_all": "AUDIO_VIDEO_VCR = 0x042C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["AUDIO : 0x0428,\n    AUDIO_VIDEO_VCR : 0x042C,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_VIDEO_CAMERA", "api_method_all": "AUDIO_VIDEO_VIDEO_CAMERA = 0x0430,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["O_VCR : 0x042C,\n    AUDIO_VIDEO_VIDEO_CAMERA : 0x0430,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_CAMCORDER", "api_method_all": "AUDIO_VIDEO_CAMCORDER = 0x0434,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["AMERA : 0x0430,\n    AUDIO_VIDEO_CAMCORDER : 0x0434,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_VIDEO_MONITOR", "api_method_all": "AUDIO_VIDEO_VIDEO_MONITOR = 0x0438,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ORDER : 0x0434,\n    AUDIO_VIDEO_VIDEO_MONITOR : 0x0438,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER", "api_method_all": "AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER = 0x043C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["NITOR : 0x0438,\n    AUDIO_VIDEO_VIDEO_DISPLAY_AND_LOUDSPEAKER : 0x043C,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_VIDEO_CONFERENCING", "api_method_all": "AUDIO_VIDEO_VIDEO_CONFERENCING = 0x0440,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["EAKER : 0x043C,\n    AUDIO_VIDEO_VIDEO_CONFERENCING : 0x0440,\n    AUDIO"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "AUDIO_VIDEO_VIDEO_GAMING_TOY", "api_method_all": "AUDIO_VIDEO_VIDEO_GAMING_TOY = 0x0448,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["NCING : 0x0440,\n    AUDIO_VIDEO_VIDEO_GAMING_TOY : 0x0448,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_NON_KEYBOARD_NON_POINTING", "api_method_all": "PERIPHERAL_NON_KEYBOARD_NON_POINTING = 0x0500,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["G_TOY : 0x0448,\n    PERIPHERAL_NON_KEYBOARD_NON_POINTING : 0x0500,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_KEYBOARD", "api_method_all": "PERIPHERAL_KEYBOARD = 0x0540,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["EVICE : 0x0580,\n    PERIPHERAL_KEYBOARD_POINTING : 0x05C0,\n", "NTING : 0x0500,\n    PERIPHERAL_KEYBOARD : 0x0540,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_POINTING_DEVICE", "api_method_all": "PERIPHERAL_POINTING_DEVICE = 0x0580,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["BOARD : 0x0540,\n    PERIPHERAL_POINTING_DEVICE : 0x0580,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_KEYBOARD_POINTING", "api_method_all": "PERIPHERAL_KEYBOARD_POINTING = 0x05C0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["EVICE : 0x0580,\n    PERIPHERAL_KEYBOARD_POINTING : 0x05C0,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_UNCATEGORIZED", "api_method_all": "PERIPHERAL_UNCATEGORIZED = 0x0500,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["NTING : 0x05C0,\n    PERIPHERAL_UNCATEGORIZED : 0x0500,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_JOYSTICK", "api_method_all": "PERIPHERAL_JOYSTICK = 0x0504,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RIZED : 0x0500,\n    PERIPHERAL_JOYSTICK : 0x0504,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_GAMEPAD", "api_method_all": "PERIPHERAL_GAMEPAD = 0x0508,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["STICK : 0x0504,\n    PERIPHERAL_GAMEPAD : 0x0508,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_REMOTE_CONTROL", "api_method_all": "PERIPHERAL_REMOTE_CONTROL = 0x05C0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["MEPAD : 0x0508,\n    PERIPHERAL_REMOTE_CONTROL : 0x05C0,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_SENSING_DEVICE", "api_method_all": "PERIPHERAL_SENSING_DEVICE = 0x0510,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["NTROL : 0x05C0,\n    PERIPHERAL_SENSING_DEVICE : 0x0510,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_DIGITIZER_TABLET", "api_method_all": "PERIPHERAL_DIGITIZER_TABLET = 0x0514,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["EVICE : 0x0510,\n    PERIPHERAL_DIGITIZER_TABLET : 0x0514,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_CARD_READER", "api_method_all": "PERIPHERAL_CARD_READER = 0x0518,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ABLET : 0x0514,\n    PERIPHERAL_CARD_READER : 0x0518,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_DIGITAL_PEN", "api_method_all": "PERIPHERAL_DIGITAL_PEN = 0x051C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["EADER : 0x0518,\n    PERIPHERAL_DIGITAL_PEN : 0x051C,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_SCANNER_RFID", "api_method_all": "PERIPHERAL_SCANNER_RFID = 0x0520,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["L_PEN : 0x051C,\n    PERIPHERAL_SCANNER_RFID : 0x0520,\n    PERIP"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "PERIPHERAL_GESTURAL_INPUT", "api_method_all": "PERIPHERAL_GESTURAL_INPUT = 0x0522,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["_RFID : 0x0520,\n    PERIPHERAL_GESTURAL_INPUT : 0x0522,\n    IMAGI"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "IMAGING_UNCATEGORIZED", "api_method_all": "IMAGING_UNCATEGORIZED = 0x0600,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["INPUT : 0x0522,\n    IMAGING_UNCATEGORIZED : 0x0600,\n    IMAGI"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "IMAGING_DISPLAY", "api_method_all": "IMAGING_DISPLAY = 0x0610,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RIZED : 0x0600,\n    IMAGING_DISPLAY : 0x0610,\n    IMAGI"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "IMAGING_CAMERA", "api_method_all": "IMAGING_CAMERA = 0x0620,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["SPLAY : 0x0610,\n    IMAGING_CAMERA : 0x0620,\n    IMAGI"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "IMAGING_SCANNER", "api_method_all": "IMAGING_SCANNER = 0x0640,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["AMERA : 0x0620,\n    IMAGING_SCANNER : 0x0640,\n    IMAGI"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "IMAGING_PRINTER", "api_method_all": "IMAGING_PRINTER = 0x0680,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ANNER : 0x0640,\n    IMAGING_PRINTER : 0x0680,\n    WEARA"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "WEARABLE_UNCATEGORIZED", "api_method_all": "WEARABLE_UNCATEGORIZED = 0x0700,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["INTER : 0x0680,\n    WEARABLE_UNCATEGORIZED : 0x0700,\n    WEARA"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "WEARABLE_WRIST_WATCH", "api_method_all": "WEARABLE_WRIST_WATCH = 0x0704,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RIZED : 0x0700,\n    WEARABLE_WRIST_WATCH : 0x0704,\n    WEARA"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "WEARABLE_PAGER", "api_method_all": "WEARABLE_PAGER = 0x0708,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["WATCH : 0x0704,\n    WEARABLE_PAGER : 0x0708,\n    WEARA"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "WEARABLE_JACKET", "api_method_all": "WEARABLE_JACKET = 0x070C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["PAGER : 0x0708,\n    WEARABLE_JACKET : 0x070C,\n    WEARA"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "WEARABLE_HELMET", "api_method_all": "WEARABLE_HELMET = 0x0710,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ACKET : 0x070C,\n    WEARABLE_HELMET : 0x0710,\n    WEARA"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "WEARABLE_GLASSES", "api_method_all": "WEARABLE_GLASSES = 0x0714,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ELMET : 0x0710,\n    WEARABLE_GLASSES : 0x0714,\n    TOY_U"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "TOY_UNCATEGORIZED", "api_method_all": "TOY_UNCATEGORIZED = 0x0800,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ASSES : 0x0714,\n    TOY_UNCATEGORIZED : 0x0800,\n    TOY_R"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "TOY_ROBOT", "api_method_all": "TOY_ROBOT = 0x0804,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RIZED : 0x0800,\n    TOY_ROBOT : 0x0804,\n    TOY_V"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "TOY_VEHICLE", "api_method_all": "TOY_VEHICLE = 0x0808,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ROBOT : 0x0804,\n    TOY_VEHICLE : 0x0808,\n    TOY_D"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "TOY_DOLL_ACTION_FIGURE", "api_method_all": "TOY_DOLL_ACTION_FIGURE = 0x080C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["HICLE : 0x0808,\n    TOY_DOLL_ACTION_FIGURE : 0x080C,\n    TOY_C"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "TOY_CONTROLLER", "api_method_all": "TOY_CONTROLLER = 0x0810,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["IGURE : 0x080C,\n    TOY_CONTROLLER : 0x0810,\n    TOY_G"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "TOY_GAME", "api_method_all": "TOY_GAME = 0x0814,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["OLLER : 0x0810,\n    TOY_GAME : 0x0814,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_UNCATEGORIZED", "api_method_all": "HEALTH_UNCATEGORIZED = 0x0900,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["_GAME : 0x0814,\n    HEALTH_UNCATEGORIZED : 0x0900,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_BLOOD_PRESSURE", "api_method_all": "HEALTH_BLOOD_PRESSURE = 0x0904,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["RIZED : 0x0900,\n    HEALTH_BLOOD_PRESSURE : 0x0904,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_THERMOMETER", "api_method_all": "HEALTH_THERMOMETER = 0x0908,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["SSURE : 0x0904,\n    HEALTH_THERMOMETER : 0x0908,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_WEIGHING", "api_method_all": "HEALTH_WEIGHING = 0x090C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["METER : 0x0908,\n    HEALTH_WEIGHING : 0x090C,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_GLUCOSE", "api_method_all": "HEALTH_GLUCOSE = 0x0910,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["GHING : 0x090C,\n    HEALTH_GLUCOSE : 0x0910,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_PULSE_OXIMETER", "api_method_all": "HEALTH_PULSE_OXIMETER = 0x0914,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["UCOSE : 0x0910,\n    HEALTH_PULSE_OXIMETER : 0x0914,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_PULSE_RATE", "api_method_all": "HEALTH_PULSE_RATE = 0x0918,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["METER : 0x0914,\n    HEALTH_PULSE_RATE : 0x0918,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_DATA_DISPLAY", "api_method_all": "HEALTH_DATA_DISPLAY = 0x091C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["_RATE : 0x0918,\n    HEALTH_DATA_DISPLAY : 0x091C,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_STEP_COUNTER", "api_method_all": "HEALTH_STEP_COUNTER = 0x0920,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["SPLAY : 0x091C,\n    HEALTH_STEP_COUNTER : 0x0920,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_BODY_COMPOSITION_ANALYZER", "api_method_all": "HEALTH_BODY_COMPOSITION_ANALYZER = 0x0924,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["UNTER : 0x0920,\n    HEALTH_BODY_COMPOSITION_ANALYZER : 0x0924,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_PEAK_FLOW_MOITOR", "api_method_all": "HEALTH_PEAK_FLOW_MOITOR = 0x0928,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["LYZER : 0x0924,\n    HEALTH_PEAK_FLOW_MOITOR : 0x0928,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_MEDICATION_MONITOR", "api_method_all": "HEALTH_MEDICATION_MONITOR = 0x092C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["OITOR : 0x0928,\n    HEALTH_MEDICATION_MONITOR : 0x092C,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_KNEE_PROSTHESIS", "api_method_all": "HEALTH_KNEE_PROSTHESIS = 0x0930,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["NITOR : 0x092C,\n    HEALTH_KNEE_PROSTHESIS : 0x0930,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_ANKLE_PROSTHESIS", "api_method_all": "HEALTH_ANKLE_PROSTHESIS = 0x0934,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["HESIS : 0x0930,\n    HEALTH_ANKLE_PROSTHESIS : 0x0934,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_GENERIC_HEALTH_MANAGER", "api_method_all": "HEALTH_GENERIC_HEALTH_MANAGER = 0x0938,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["HESIS : 0x0934,\n    HEALTH_GENERIC_HEALTH_MANAGER : 0x0938,\n    HEALT"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MajorMinorClass", "api_method_name": "HEALTH_PERSONAL_MOBILITY_DEVICE", "api_method_all": "HEALTH_PERSONAL_MOBILITY_DEVICE = 0x093C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["NAGER : 0x0938,\n    HEALTH_PERSONAL_MOBILITY_DEVICE : 0x093C,\n    HEALT", "EVICE : 0x093C,\n    HEALTH_PERSONAL_MOBILITY_DEVICE : 0x093C\n};\n\n\ndescr"], "files": ["BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StateChangeParam", "api_method_all": "interface StateChangeParam {\r\n        \r\n        deviceId: string;\r\n\r\n        \r\n        state: ProfileConnectionState;\r\n    }", "api_method_name": "StateChangeParam", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "StateChangeParam", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t serverResponse = {deviceId: '00:00:00:00:00', ", " +\n                'deviceId:' + data.deviceId +", "'deviceId: ' + data.deviceId + 'state:'+ data.st", ")\n                +'deviceId: ' + data.deviceId ", "  +'bondStateChange deviceId:' + data.deviceId +", "                   \"deviceId\": data.deviceId,\n  ", " deviceId: ' + data.deviceId +\n                '", "'deviceId: ' + data.deviceId + 'transId:' + data", "   \"deviceId\": data.deviceId,\n                  ", "ooth_js] CharWriReq deviceId: ' + data.deviceId ", "ooth_js] CharRedReq deviceId: ' + data.deviceId ", " 'deviceId:' + data.deviceId + 'transId:' + data", " +\n                'deviceId: ' + data.deviceId ", "e deviceId:' + data.deviceId + 'bondStateChange "], "files": ["BluetoothBle.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StateChangeParam", "api_method_name": "state", "api_method_all": "state: ProfileConnectionState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 8, "api_used": "\u662f", "lines": ["nge state:' +  data.state);\n            expec", "E_BLE_TURNING_ON != state).assertTrue();\n    ", "True();\n        let state = bluetooth.getStat", "_js] get connection state start');\n        aw", "= '+ JSON.stringify(state));\n        expect(s", "ate.STATE_BLE_ON != state).assertTrue();\n    ", "_BLE_TURNING_OFF != state).assertTrue();\n    ", "wait bluetooth.off('stateChange', result => {", "('[bluetooth_js] bt state:' + JSON.stringify(", ":' + JSON.stringify(state));\n        done();\n", "Id + 'state:'+ data.state);\n                e", "e();\n        expect(state).assertEqual(2);\n  ", "] get bt connection state result' + JSON.stri", "ifi_test] check the state of wifi, if it's cl", " + 'bondStateChange state:' +  data.state);\n ", "othState.STATE_ON)==state);\n        let name ", "leBt();\n        let state = bluetooth.getStat", "STATE_TURNING_ON != state).assertTrue();\n    ", "hState.STATE_OFF != state).assertTrue();\n    ", "ifi_test] check the state of Hotspot\" );\n    ", "await bluetooth.on(\"stateChange\", onReceiveEv", " + data.deviceId + 'state:'+ data.state);\n   ", "e));\n        expect(state).assertEqual(2);\n  ", "fi_test]  check the state of wifi: \" + wifi.i", "e));\n        expect(state).assertEqual(blueto", "TATE_TURNING_OFF != state).assertTrue();\n    ", "h_js] get bluetooth state result = '+ JSON.st"], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlayingState", "api_method_all": "enum PlayingState {\r\n        STATE_NOT_PLAYING,\r\n        STATE_PLAYING,\r\n    }", "api_method_name": "PlayingState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PlayingState", "api_method_name": "STATE_NOT_PLAYING", "api_method_all": "STATE_NOT_PLAYING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PlayingState", "api_method_name": "STATE_PLAYING", "api_method_all": "STATE_PLAYING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProfileId", "api_method_all": "enum ProfileId {\r\n        PROFILE_A2DP_SOURCE = 1,\r\n        PROFILE_HANDS_FREE_AUDIO_GATEWAY = 4,\r\n    }", "api_method_name": "ProfileId", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProfileId", "api_method_name": "PROFILE_A2DP_SOURCE", "api_method_all": "PROFILE_A2DP_SOURCE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProfileId", "api_method_name": "PROFILE_HANDS_FREE_AUDIO_GATEWAY", "api_method_all": "PROFILE_HANDS_FREE_AUDIO_GATEWAY = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}