{"subsystem_ch": "\u516c\u5171\u57fa\u7840\u7c7b\u5e93", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.util", "api": [{"api_class_name": "util", "api_method_all": "declare namespace util {\r\n    \r\n    function printf(format: string, ...args: Object[]): string;\r\n\r\n    \r\n    function getErrorString(errno: number): string;\r\n\r\n    \r\n    function callbackWrapper(original: Function): (err: Object, value: Object) => void;\r\n\r\n    \r\n    function promiseWrapper(original: (err: Object, value: Object) => void): Object;\r\n\r\n    class TextDecoder {\r\n        \r\n        readonly encoding: string;\r\n\r\n        \r\n        readonly fatal: boolean;\r\n\r\n        \r\n        readonly ignoreBOM = false;\r\n\r\n        \r\n        constructor(\r\n            encoding?: string,\r\n            options?: { fatal?: boolean; ignoreBOM?: boolean },\r\n        );\r\n\r\n        \r\n        decode(input: Uint8Array, options?: { stream?: false }): string;\r\n    }\r\n\r\n    class TextEncoder {\r\n        \r\n        readonly encoding = \"utf-8\";\r\n\r\n        \r\n        constructor();\r\n\r\n        \r\n        encode(input?: string): Uint8Array;\r\n\r\n        \r\n        encodeInto(\r\n            input: string,\r\n            dest: Uint8Array,\r\n        ): { read: number; written: number };\r\n    }\r\n\r\n    class RationalNumber {\r\n        \r\n        constructor(numerator: number, denominator: number);\r\n        \r\n        static createRationalFromString(rationalString: string): RationalNumber\u200b;\r\n        \r\n        compareTo(another :RationalNumber): number;\r\n        \r\n        equals(obj: Object): boolean;\r\n        \r\n        valueOf(): number;\r\n        \r\n        static getCommonDivisor(number1: number, number2: number): number;\r\n        \r\n        getDenominator(): number;\r\n        \r\n        getNumerator(): number;\r\n        \r\n        isFinite() : boolean;\r\n        \r\n        isNaN(): boolean;\r\n        \r\n        isZero(): boolean;\r\n        \r\n        toString(): string;\r\n    }\r\n\r\n    class LruBuffer {\r\n        \r\n        constructor(capacity?:number);\r\n        \r\n        updateCapacity(newCapacity: number):void\r\n        \r\n        toString():string\r\n        \r\n        length:number\r\n        \r\n        getCapacity(): number;\r\n        \r\n        clear(): void;\r\n        \r\n        getCreateCount(): number;\r\n        \r\n        getMissCount(): number;\r\n        \r\n        getRemovalCount(): number;\r\n        \r\n        getMatchCount(): number;\r\n        \r\n        getPutCount(): number;\r\n        \r\n        isEmpty(): boolean;\r\n        \r\n        get(key: K): V | undefined;\r\n        \r\n        put(key: K, value: V): V;\r\n        \r\n        values(): V[];\r\n        \r\n        keys(): K[];\r\n        \r\n        remove(key: K): V | undefined;\r\n        \r\n        afterRemoval(isEvict: boolean, key: K, value: V, newValue: V): void;\r\n        \r\n        contains(key: K): boolean;\r\n        \r\n        createDefault(key: K): V;\r\n        \r\n        entries(): IterableIterator<[K, V]>;\r\n        \r\n        [Symbol.iterator](): IterableIterator<[K, V]>;\r\n    }\r\n    interface ScopeComparable {\r\n        \r\n        compareTo(other: ScopeComparable): boolean;\r\n    }\r\n    \r\n    type ScopeType = ScopeComparable | number;\r\n\r\n    class Scope{\r\n        \r\n        constructor(lowerObj: ScopeType, upperObj: ScopeType);\r\n        \r\n        toString(): string;\r\n        \r\n        intersect(range: Scope): Scope;\r\n        \r\n        intersect(lowerObj: ScopeType, upperObj: ScopeType): Scope;\r\n        \r\n        getUpper(): ScopeType;\r\n        \r\n        getLower(): ScopeType;\r\n        \r\n        expand(lowerObj: ScopeType, upperObj: ScopeType): Scope;\r\n        \r\n        expand(range: Scope): Scope;\r\n        \r\n        expand(value: ScopeType): Scope;\r\n        \r\n        contains(value: ScopeType): boolean;\r\n        \r\n        contains(range: Scope): boolean;\r\n        \r\n        clamp(value: ScopeType): ScopeType;\r\n    }\r\n\r\n    class Base64{\r\n        \r\n        constructor();\r\n        \r\n        encodeSync(src: Uint8Array): Uint8Array;\r\n        \r\n        encodeToStringSync(src: Uint8Array): string;\r\n        \r\n        decodeSync(src: Uint8Array | string): Uint8Array;\r\n        \r\n        encode(src: Uint8Array): Promise<Uint8Array>;\r\n        \r\n         encodeToString(src: Uint8Array): Promise<string>;\r\n        \r\n        decode(src: Uint8Array | string): Promise<Uint8Array>;\r\n    }\r\n\r\n    class types{\r\n        \r\n        constructor();\r\n        \r\n        isAnyArrayBuffer(value: Object): boolean;\r\n        \r\n        isArrayBufferView(value: Object): boolean;\r\n        \r\n        isArgumentsObject(value: Object): boolean;\r\n        \r\n        isArrayBuffer(value: Object): boolean;\r\n        \r\n        isAsyncFunction(value: Object): boolean;\r\n        \r\n        isBigInt64Array(value: Object): boolean;\r\n        \r\n        isBigUint64Array(value: Object): boolean;\r\n        \r\n        isBooleanObject(value: Object): boolean;\r\n        \r\n        isBoxedPrimitive(value: Object): boolean;\r\n        \r\n        isDataView(value: Object): boolean;\r\n        \r\n        isDate(value: Object): boolean;\r\n        \r\n        isExternal(value: Object): boolean;\r\n        \r\n        isFloat32Array(value: Object): boolean;\r\n        \r\n        isFloat64Array(value: Object): boolean;\r\n        \r\n        isGeneratorFunction(value: Object): boolean;\r\n        \r\n        isGeneratorObject(value: Object): boolean;\r\n        \r\n        isInt8Array(value: Object): boolean;\r\n        \r\n        isInt16Array(value: Object): boolean;\r\n        \r\n        isInt32Array(value: Object): boolean;\r\n        \r\n        isMap(value: Object): boolean;\r\n        \r\n        isMapIterator(value: Object): boolean;\r\n        \r\n        isModuleNamespaceObject(value: Object): boolean;\r\n        \r\n        isNativeError(value: Object): boolean;\r\n        \r\n        isNumberObject(value: Object): boolean;\r\n        \r\n        isPromise(value: Object): boolean;\r\n        \r\n        isProxy(value: Object): boolean;\r\n        \r\n        isRegExp(value: Object): boolean;\r\n        \r\n        isSet(value: Object): boolean;\r\n        \r\n        isSetIterator(value: Object): boolean;\r\n        \r\n        isSharedArrayBuffer(value: Object): boolean;\r\n        \r\n        isStringObject(value: Object): boolean;\r\n        \r\n        isSymbolObject(value: Object): boolean;\r\n        \r\n        isTypedArray(value: Object): boolean;\r\n        \r\n        isUint8Array(value: Object): boolean;\r\n        \r\n        isUint8ClampedArray(value: Object): boolean;\r\n        \r\n        isUint16Array(value: Object): boolean;\r\n        \r\n        isUint32Array(value: Object): boolean;\r\n        \r\n        isWeakMap(value: Object): boolean;\r\n        \r\n        isWeakSet(value: Object): boolean;\r\n    }\r\n}", "api_method_name": "util", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 483, "since": 0, "api_used": "\u662f", "lines": ["const value = await util.promiseWrapper(fn)(", ";\n        const a = util.promiseWrapper((cb)", "{\n        const a = util.promiseWrapper(func", "    var  that = new util.TextDecoder('utf-8'", "t Stack from \"@ohos.util.Stack\";\n\ndescribe(\"", "HashMap from \"@ohos.util.HashMap\";\n\ndescribe", "t Deque from \"@ohos.util.Deque\";\n\ndescribe(\"", "kedList from \"@ohos.util.LinkedList\";\n\ndescr", "       var result = util.getErrorString(errn", " }\n        var cb = util.callbackWrapper(pro", "ightSet from \"@ohos.util.LightWeightSet\";\n\nd", "TreeSet from \"@ohos.util.TreeSet\";\n\ndescribe", "\nvar rangeFir = new util.Scope(tempMiDF, tem", "TreeMap from \"@ohos.util.TreeMap\";\n\ndescribe", "     var that = new util.TextDecoder('utf-16", "\nvar rangeThi = new util.Scope(tempLess, tem", "\nvar rangeFif = new util.Scope(tempMiDF, tem", ";\n        const b = util.promiseWrapper(() =", "rayList from \"@ohos.util.ArrayList\";\n\ndescri", ";\n        const b = util.promiseWrapper(a);\n", "t Queue from \"@ohos.util.Queue\";\n\ndescribe(\"", ");\n\nvar range = new util.Scope(tempLower, te", "    const thrower = util.promiseWrapper(func", "\nvar rangeSec = new util.Scope(tempLess, tem", "       var result = util.printf(format, valu", "let newPromiseObj = util.promiseWrapper(aysn", "  try {\n            util.callbackWrapper(pro", "HashSet from \"@ohos.util.HashSet\";\n\ndescribe", "inArray from \"@ohos.util.PlainArray\";\n\ndescr", " Vector from \"@ohos.util.Vector\";\n\ndescribe(", "sunit/index'\nimport util from '@ohos.util'\ni", "rt List from \"@ohos.util.List\";\n\ndescribe(\"L", "\n        const fn = util.promiseWrapper(func", "t.js');", "rt util from '@ohos.util'\nimport url from '@", "ightMap from \"@ohos.util.LightWeightMap\";\n\nd"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "util", "api_method_name": "printf", "api_method_all": "function printf(format: string, ...args: Object[]): string;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["  var result = util.printf(format, value1, val", "  var result = util.printf(format, value);\n   "], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "util", "api_method_name": "getErrorString", "api_method_all": "function getErrorString(errno: number): string;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["  var result = util.getErrorString(errnum);\n        ex"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "util", "api_method_name": "callbackWrapper", "api_method_all": "function callbackWrapper(original: Function): (err: Object, value: Object) => void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["      var cb = util.callbackWrapper(promiseFn);\n        cb(1, 2, (err, ret)", " {\n            util.callbackWrapper(promiseFn);\n        } catch(e) {\n      ", "      var cb = util.callbackWrapper(promiseFn);\n        cb((err, ret) => {\n", "      var cb = util.callbackWrapper(promiseFn);\n        try {\n            c"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "util", "api_method_name": "callbackWrapperoriginal", "api_method_all": "function callbackWrapper(original: Function): (err: Object, value: Object) => void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "util", "api_method_name": "promiseWrapperoriginal", "api_method_all": "function promiseWrapper(original: (err: Object, value: Object) => void): Object;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "util", "api_method_name": "promiseWrapperoriginal", "api_method_all": "function promiseWrapper(original: (err: Object, value: Object) => void): Object;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextDecoder", "api_method_all": "class TextDecoder {\r\n        \r\n        readonly encoding: string;\r\n\r\n        \r\n        readonly fatal: boolean;\r\n\r\n        \r\n        readonly ignoreBOM = false;\r\n\r\n        \r\n        constructor(\r\n            encoding?: string,\r\n            options?: { fatal?: boolean; ignoreBOM?: boolean },\r\n        );\r\n\r\n        \r\n        decode(input: Uint8Array, options?: { stream?: false }): string;\r\n    }", "api_method_name": "TextDecoder", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["var that = new util.TextDecoder('utf-16le', { ignor", "var that = new util.TextDecoder('utf-16be');\n      ", "var that = new util.TextDecoder('utf-8')\n        va", "var that = new util.TextDecoder('utf-16be', { ignor", "var that = new util.TextDecoder('utf-16be', { fatal", "ar  that = new util.TextDecoder('utf-8', { ignoreBO", "ar that = new  util.TextDecoder('utf-8', { ignoreBO", "var that = new util.TextDecoder('utf-8');\n        v", "var that = new util.TextDecoder('utf-16le')\n       ", "var that = new util.TextDecoder('utf-16be')\n       "], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextDecoder", "api_method_name": "constructor", "api_method_all": "constructor(\r\n            encoding?: string,\r\n            options?: { fatal?: boolean; ignoreBOM?: boolean },\r\n        )", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextDecoder", "api_method_name": "decode", "api_method_all": "decode(input: Uint8Array, options?: { stream?: false }): string;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 40, "since": 7, "api_used": "\u662f", "lines": ["  var retStr = that.decode(arr)\n        var re", "  var retStr = that.decode(arr, { stream : fal", ",51]);\n        that.decode(buff).then(val=>{\n ", " 52]);\n        that.decode(buff).then(val=>{\n ", "255]);\n        that.decode(array).then(val=>{\n", "e to asynchronously decode a Base64-encoded st", "  var retStr = that.decode(arr);\n        var r", " 52]);\n        that.decode(array).then(val=>{\n", " running encoding's decoder.\n     * @tc.requir", "  var retStr = that.decode(arr, {stream:true})", "  var result = that.decodeSync(buff);\n        ", "255]);\n        that.decode(buff).then(val=>{\n ", "115]);\n        that.decode(buff).then(val=>{\n ", "115]);\n        that.decode(array).then(val=>{\n", "  var result = that.decodeSync(array);\n       ", ",51]);\n        that.decode(array).then(val=>{\n"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextDecoder", "api_method_name": "encoding", "api_method_all": "readonly encoding: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 124, "since": 7, "api_used": "\u662f", "lines": ["      '            \"encoding\": \"utf-8\"\\n'+\n     ", "tc.desc: The source encoding's name, lowercased.", ":\"1.0\",'+\n        '\"encoding\":\"utf-8\"}},'+\n     ", ":\"1.0\",'+\n        '\"encoding\":\"utf-8\"}}}'\n      ", "<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n      ", "-16le')\n        var encodingStr = that.encoding\n", " encodingStr = that.encoding\n        expect(enco", "<?xml version=\"1.0\" encoding=\"utf-8\"?>';\n       ", "  var retStr = that.encoding\n        expect(retS"], "files": ["xml.test.js", "convertxml.test.js", "util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextDecoder", "api_method_name": "fatal", "api_method_all": "readonly fatal: boolean", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["coder('utf-16be', { fatal : true })\n        v", "atal\n        expect(fatalStr).assertEqual(tru", "utf-8')\n        var fatalStr = that.fatal\n   ", "-16le')\n        var fatalStr = that.fatal\n   ", "-16be')\n        var fatalStr = that.fatal\n   ", "coder('utf-16be', { fatal : false })\n        ", "true })\n        var fatalStr = that.fatal\n   ", "atal\n        expect(fatalStr).assertEqual(fal", "alse })\n        var fatalStr = that.fatal\n   ", "var fatalStr = that.fatal\n        expect(fata", "` if error mode is \"fatal\", and `false` other"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextEncoder", "api_method_all": "class TextEncoder {\r\n        \r\n        readonly encoding = \"utf-8\";\r\n\r\n        \r\n        constructor();\r\n\r\n        \r\n        encode(input?: string): Uint8Array;\r\n\r\n        \r\n        encodeInto(\r\n            input: string,\r\n            dest: Uint8Array,\r\n        ): { read: number; written: number };\r\n    }", "api_method_name": "TextEncoder", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["mpMore);\n\ndescribe('TextEncoderTest', function () {", "var that = new util.TextEncoder()\n        var buffe", "var that = new util.TextEncoder()\n        var str ="], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextEncoder", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextEncoder", "api_method_name": "encode", "api_method_all": "encode(input?: string): Uint8Array;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 82, "since": 7, "api_used": "\u662f", "lines": ["  var result = that.encodeSync(array);\n       ", "04\n     * @tc.desc: encode string, write the r", "07\n     * @tc.desc: encode string, write the r", "      result = that.encode('\u00a5\u00a5')\n        expec", "      result = that.encodeInto('\\uD800A\\uDF06A", "      result = that.encodeInto('abc\\u2603d', d", "      result = that.encode('123\u00a5\\uD800\u697c')\n    ", "03\n     * @tc.desc: encode string, write the r", "06\n     * @tc.desc: encode string, write the r", "      result = that.encode('123\\uD800\u697c\u697c')\n    ", "      result = that.encode('a\\uD800\u697c\u697c')\n      ", "  var result = that.encodeToStringSync(array);", "08\n     * @tc.desc: encode string, write the r", "c: Decodes a Base64 encoded String or input u8", "      result = that.encode('abc\\uD800\u697c\u697c')\n    ", "02\n     * @tc.desc: encode string, write the r", "      result = that.encode('\\uD800\u697c\u697c')\n       ", "  var result = that.encodeToStringSync(array)\n", "      result = that.encodeInto('12ab', dest)\n ", "      result = that.encode('$$')\n        expec", "      result = that.encodeInto('123 4*!@#', de", "01\n     * @tc.desc: encode string, write the r", "      result = that.encodeInto('12345', dest)\n", "      result = that.encode('abc')\n        expe", "turns the result of encoder.\n     * @tc.requir", "      result = that.encodeInto('abcd', dest)\n ", "      result = that.encodeInto('', dest)\n     ", "05\n     * @tc.desc: encode string, write the r"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextEncoder", "api_method_name": "encodeInto", "api_method_all": "encodeInto(\r\n            input: string,\r\n            dest: Uint8Array,\r\n        ): { read: number;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["      result = that.encodeInto('12345', dest)\n    ", "      result = that.encodeInto('123 4*!@#', dest)\n", "      result = that.encodeInto('abcd', dest)\n     ", "      result = that.encodeInto('12ab', dest)\n     ", "      result = that.encodeInto('\\uD800A\\uDF06A\u697cHiA", "      result = that.encodeInto('abc\\u2603d', dest)", "      result = that.encodeInto('', dest)\n        e"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextEncoder", "api_method_name": "written", "api_method_all": "written: number }", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["      expect(result.written).assertEqual(6)\n   ", "      expect(result.written).assertEqual(0)\n   ", "      expect(result.written).assertEqual(4)\n   ", "      expect(result.written).assertEqual(13)\n  "], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_all": "class RationalNumber {\r\n        \r\n        constructor(numerator: number, denominator: number);\r\n        \r\n        static createRationalFromString(rationalString: string): RationalNumber\u200b;\r\n        \r\n        compareTo(another :RationalNumber): number;\r\n        \r\n        equals(obj: Object): boolean;\r\n        \r\n        valueOf(): number;\r\n        \r\n        static getCommonDivisor(number1: number, number2: number): number;\r\n        \r\n        getDenominator(): number;\r\n        \r\n        getNumerator(): number;\r\n        \r\n        isFinite() : boolean;\r\n        \r\n        isNaN(): boolean;\r\n        \r\n        isZero(): boolean;\r\n        \r\n        toString(): string;\r\n    }", "api_method_name": "RationalNumber", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 154, "since": 7, "api_used": "\u662f", "lines": ["     */\n    it('testRationalNumberValueOf001', 0, func", "alue of the current RationalNumber object as a number.", " var pro = new util.RationalNumber(2, 1)\n        var p", "ompares the current RationalNumber object with a given", "var proc = new util.RationalNumber(2, 1)\n        var r", "var proc = new util.RationalNumber(0, 2)\n        var r", " var pro = new util.RationalNumber(-2, 0)\n        var ", "var proc = new util.RationalNumber(0, 0)\n        var r", "    * @tc.name: testRationalNumberCreateRationalFromSt", "     */\n    it('testRationalNumberCreateRationalFromSt", "     */\n    it('testRationalNumberEquals003', 0, funct", " var pro = new util.RationalNumber(1, 2)\n        var r", "     */\n    it('testRationalNumberEquals004', 0, funct", " var pro = new util.RationalNumber(0, 1)\n        var p", "var proc = new util.RationalNumber(2, 0)\n        var r", "   })\n})\n\ndescribe('RationalNumberFunTest', function (", "var proc = new util.RationalNumber(4, 2)\n        var r", "var proc = new util.RationalNumber(8, 3)\n        var r", "@tc.desc: Creates a RationalNumber object based on a g", " var pro = new util.RationalNumber(0, 0)\n        var p", "    * @tc.name: testRationalNumberEquals004\n     * @tc", "    * @tc.name: testRationalNumberEquals003\n     * @tc", "same as the current RationalNumber object.\n     * @tc.", "var proc = new util.RationalNumber(3, 4)\n        var r", "    * @tc.name: testRationalNumberValueOf001\n     * @t"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "constructor", "api_method_all": "constructor(numerator: number, denominator: number)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "createRationalFromString", "api_method_all": "static createRationalFromString(rationalString: string): RationalNumber\u200b;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["      var res = pro.createRationalFromString('+3/4')\n        var", "      var res = pro.createRationalFromString('+2:-4')\n        va", "      var res = pro.createRationalFromString('-1:2')\n        var", "      var res = pro.createRationalFromString('+3:-4')\n        va", "      var res = pro.createRationalFromString('+2:4')\n        var"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "compareTo", "api_method_all": "compareTo(another :RationalNumber): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["      var res = pro.compareTo(proc)\n        expec", " = value;\n    }\n    compareTo(value) {\n        re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "equals", "api_method_all": "equals(obj: Object): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["   let res = gaogao.equals(gaogao1);\n        e", "      var res = pro.equals(proc)\n        expec"], "files": ["util.test.js", "uri.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "valueOf", "api_method_all": "valueOf(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["      var res = pro.valueOf()\n        expect(re", "  var result1 = res.valueOf()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "getCommonDivisor", "api_method_all": "static getCommonDivisor(number1: number, number2: number): number;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["      var res = pro.getCommonDivisor(8, 4)\n        expec", "      var res = pro.getCommonDivisor(10, 15)\n        exp", "      var res = pro.getCommonDivisor(4, 8)\n        expec", "      var res = pro.getCommonDivisor(8, 16)\n        expe", "      var res = pro.getCommonDivisor(2, 16)\n        expe"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "getDenominator", "api_method_all": "getDenominator(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["      var res = pro.getDenominator()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "getNumerator", "api_method_all": "getNumerator(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["      var res = pro.getNumerator()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "isFinite", "api_method_all": "isFinite() : boolean;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["      var res = pro.isFinite()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "isNaN", "api_method_all": "isNaN(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["      var res = pro.isNaN()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "isZero", "api_method_all": "isZero(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["      var res = pro.isZero()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RationalNumber", "api_method_name": "toString", "api_method_all": "toString(): string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 131, "since": 8, "api_used": "\u662f", "lines": ["      expect(result.toString()).assertEqual('')\n", "      expect(result.toString()).assertEqual(\"DEF", "   let res = vector.toString();\n    expect(res).", "      expect(result.toString()).assertEqual(\"da,", "   var res = params.toString();\n        expect(r", "es = lightWeightMap.toString();\n    expect(res).", "t res1 = plainArray.toString();\n    expect(res1)", "      expect(result.toString()).assertEqual(\"val", "\n        expect(res.toString()).assertEqual(\"htt", "es = lightWeightSet.toString();\n    expect(res).", "et res = plainArray.toString();\n    expect(res).", "var result = params.toString()\n        expect(re", "var result = params.toString();\n        expect(r", "   let res = gaogao.toString();\n        expect(r", "         expect(err.toString()).assertEqual(\"Err"], "files": ["LightWeightSet.test.js", "url.test.js", "util.test.js", "uri.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_all": "class LruBuffer {\r\n        \r\n        constructor(capacity?:number);\r\n        \r\n        updateCapacity(newCapacity: number):void\r\n        \r\n        toString():string\r\n        \r\n        length:number\r\n        \r\n        getCapacity(): number;\r\n        \r\n        clear(): void;\r\n        \r\n        getCreateCount(): number;\r\n        \r\n        getMissCount(): number;\r\n        \r\n        getRemovalCount(): number;\r\n        \r\n        getMatchCount(): number;\r\n        \r\n        getPutCount(): number;\r\n        \r\n        isEmpty(): boolean;\r\n        \r\n        get(key: K): V | undefined;\r\n        \r\n        put(key: K, value: V): V;\r\n        \r\n        values(): V[];\r\n        \r\n        keys(): K[];\r\n        \r\n        remove(key: K): V | undefined;\r\n        \r\n        afterRemoval(isEvict: boolean, key: K, value: V, newValue: V): void;\r\n        \r\n        contains(key: K): boolean;\r\n        \r\n        createDefault(key: K): V;\r\n        \r\n        entries(): IterableIterator<[K, V]>;\r\n        \r\n        [Symbol.iterator](): IterableIterator<[K, V]>;\r\n    }", "api_method_name": "LruBuffer", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 337, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.name: testLruBufferGet003\n     * @tc.de", "var that = new util.LruBuffer(200)\n        that.u", "    * @tc.name: testLruBufferPut003\n     * @tc.de", "    * @tc.name: testLruBufferGet001\n     * @tc.de", "     */\n    it('testLruBufferGet001', 0, function", "    * @tc.name: testLruBufferGet004\n     * @tc.de", "    * @tc.name: testLruBufferUpdateGetCapacity003", "     */\n    it('testLruBufferUpdateGetCapacity004", "    * @tc.name: testLruBufferGet002\n     * @tc.de", "    * @tc.name: testLruBufferGet005\n     * @tc.de", "     */\n    it('testLruBufferGet005', 0, function", "    * @tc.name: testLruBufferUpdateGetCapacity004", "     */\n    it('testLruBufferPut004', 0, function", "     */\n    it('testLruBufferPut002', 0, function", "    * @tc.name: testLruBufferUpdateGetCapacity005", "     */\n    it('testLruBufferUpdateGetCapacity002", "var that = new util.LruBuffer(100)\n        that.p", "     */\n    it('testLruBufferGetCreateCount001', ", "var that = new util.LruBuffer()\n        that.upda", "     */\n    it('testLruBufferGet004', 0, function", "    * @tc.name: testLruBufferPut004\n     * @tc.de", "     */\n    it('testLruBufferPut001', 0, function", "    * @tc.name: testLruBufferPut005\n     * @tc.de", "     */\n    it('testLruBufferGet003', 0, function", "     */\n    it('testLruBufferPut005', 0, function", "var that = new util.LruBuffer(50)\n        that.up", "     */\n    it('testLruBufferPut003', 0, function", "var that = new util.LruBuffer()\n        that.put(", "var that = new util.LruBuffer()\n        var temp ", "    * @tc.name: testLruBufferUpdateGetCapacity001", "     */\n    it('testLruBufferUpdateGetCapacity003", "     */\n    it('testLruBufferGet002', 0, function", "    * @tc.name: testLruBufferGetCreateCount001\n  ", "    * @tc.name: testLruBufferPut002\n     * @tc.de", "     */\n    it('testLruBufferUpdateGetCapacity005", "    * @tc.name: testLruBufferPut001\n     * @tc.de", "     */\n    it('testLruBufferUpdateGetCapacity001", "var that = new util.LruBuffer(100)\n        that.u", "    * @tc.name: testLruBufferUpdateGetCapacity002", "var that = new util.LruBuffer()\n        var temp1", "    * @tc.name: testLruBufferGetCreateCount002\n  ", "   })\n})\n\ndescribe('LruBufferFunTest', function ("], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "constructor", "api_method_all": "constructor(capacity?:number)", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "updateCapacity", "api_method_all": "updateCapacity(newCapacity: number):void\r\n        \r\n        toString():string\r\n        \r\n        length:number\r\n        \r\n        getCapacity(): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["caxb')\n        that.updateCapacity(2)\n        that.put", "r(100)\n        that.updateCapacity(20)\n        var res", "d',15)\n        that.updateCapacity(2)\n        that.put", "d',15)\n        that.updateCapacity(3)\n        that.put", "ffer()\n        that.updateCapacity(10)\n        var res", "t(2,5)\n        that.updateCapacity(2)\n        var temp", "ffer()\n        that.updateCapacity(2147483646)\n       ", "d',20)\n        that.updateCapacity(3);\n        that.pu", "ffer()\n        that.updateCapacity(50)\n        var res", "r(100)\n        that.updateCapacity(10)\n        var res", "ing');\n        that.updateCapacity(2);\n        var res", "5,33);\n        that.updateCapacity(3);\n        var res", "(2,10)\n        that.updateCapacity(2)\n        that.put", "er(50)\n        that.updateCapacity(2)\n        var resu", "r(200)\n        that.updateCapacity(100)\n        var re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "toString", "api_method_all": "toString():string\r\n        \r\n        length:number\r\n        \r\n        getCapacity(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 131, "since": 8, "api_used": "\u662f", "lines": ["      expect(result.toString()).assertEqual('')\n", "      expect(result.toString()).assertEqual(\"DEF", "   let res = vector.toString();\n    expect(res).", "      expect(result.toString()).assertEqual(\"da,", "   var res = params.toString();\n        expect(r", "es = lightWeightMap.toString();\n    expect(res).", "t res1 = plainArray.toString();\n    expect(res1)", "      expect(result.toString()).assertEqual(\"val", "\n        expect(res.toString()).assertEqual(\"htt", "es = lightWeightSet.toString();\n    expect(res).", "et res = plainArray.toString();\n    expect(res).", "var result = params.toString()\n        expect(re", "var result = params.toString();\n        expect(r", "   let res = gaogao.toString();\n        expect(r", "         expect(err.toString()).assertEqual(\"Err"], "files": ["LightWeightSet.test.js", "url.test.js", "util.test.js", "uri.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "getCapacity", "api_method_all": "getCapacity(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 24, "since": 8, "api_used": "\u662f", "lines": ["t capacity = vector.getCapacity();\n    try {\n      ", "t capacity = vector.getCapacity();\n    vector.remov", "let res = arrayList.getCapacity();\n    expect(res).", "   let res = vector.getCapacity();\n    expect(res).", "t capacity = vector.getCapacity();\n    vector.inser", "  var result = that.getCapacity()\n        expect(re"], "files": ["Vector.test.js", "util.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "clear", "api_method_all": "clear(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 30, "since": 8, "api_used": "\u662f", "lines": ["t.add(14);\n    list.clear();\n    let res = li", "\n    lightWeightMap.clear();\n    let res = li", "ual(5);\n    hashSet.clear();\n    let res1 = h", "  let res = hashSet.clear();\n    expect(res).", "5,33);\n        that.clear()\n        var resul", "(5);\n    plainArray.clear();\n    let res1 = p", "add(5);\n    hashSet.clear();\n    let res = ha", ".add(\"a\");\n    list.clear();\n    let res = li", "ew List();\n    list.clear();\n    let res1 = l", "\n    lightWeightSet.clear();\n    let res = li", ", \"a\");\n    treeMap.clear();\n    expect(treeM", "\n    lightWeightSet.clear();\n    let res1 = l", "hMap();\n    hashMap.clear();\n    let res = ha", "add(2);\n    treeSet.clear();\n    let res = tr", "add(14);\n    vector.clear();\n    let res = ve", ", \"c\");\n    treeMap.clear();\n    let res = tr", "t();\n    linkedList.clear();\n    const len = ", "length\n        that.clear()\n        var resul", "ual(5);\n    hashMap.clear();\n    let res1 = h", "(0);\n    plainArray.clear();\n    let res2 = p", "(14);\n    arrayList.clear();\n    let res = ar", ", \"E\");\n    hashMap.clear();\n    let res = ha"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "getCreateCount", "api_method_all": "getCreateCount(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["  var result = that.getCreateCount()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "getMissCount", "api_method_all": "getMissCount(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["  var result = that.getMissCount()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "getRemovalCount", "api_method_all": "getRemovalCount(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["  var result = that.getRemovalCount()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "getMatchCount", "api_method_all": "getMatchCount(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["  var result = that.getMatchCount()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "getPutCount", "api_method_all": "getPutCount(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["  var result = that.getPutCount()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "isEmpty", "api_method_all": "isEmpty(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 34, "since": 8, "api_used": "\u662f", "lines": ["  let res = hashSet.isEmpty();\n    expect(res).", "ty = lightWeightMap.isEmpty();\n    expect(isEmp", " it(\"SR000GGR47_testisEmpty057\", 0, function ()", " +\n            info.isEmptyElementTag()+ info.i", "s2 = lightWeightMap.isEmpty();\n    expect(res2)", "    let res = stack.isEmpty();\n    expect(res).", "et res = plainArray.isEmpty();\n    expect(res).", "   let res = vector.isEmpty();\n    expect(res).", " it(\"SR000GGR44_testisEmpty031\", 0, function ()", " it(\"SR000GGR44_testisEmpty030\", 0, function ()", " let res1 = hashMap.isEmpty();\n    expect(res).", "\n    let res = list.isEmpty();\n    expect(res).", " it(\"SR000GGR47_testisEmpty058\", 0, function ()", "s1 = lightWeightMap.isEmpty();\n    expect(res1)", " let res1 = treeSet.isEmpty();\n    expect(res1)", "rtEqual(0);\n    let isEmpty = lightWeightMap.is", "es = lightWeightSet.isEmpty();\n    expect(res).", "let res = arrayList.isEmpty();\n    expect(res).", " let res2 = treeSet.isEmpty();\n    expect(res2)", "Empty();\n    expect(isEmpty).assertEqual(true);", "  var result = that.isEmpty()\n        expect(re"], "files": ["LightWeightSet.test.js", "List.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "get", "api_method_all": "get(key: K): V | undefined;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 517, "since": 7, "api_used": "\u662f", "lines": ["onfigService = core.getDefaultService('conf", "     var info = app.getInfo()\n        expec", "    let res = deque.getLast();\n    expect(r", "    let res = deque.getLast();\n      expect", "let res = arrayList.getIndexOf(\"A\");\n    ex", "\n    let res = list.getIndexOf(\"b\");\n    ex", "et res1 = arrayList.getLastIndexOf(1);\n    ", "let res = arrayList.getLastIndexOf(1);\n    ", "et res = linkedList.get(0);\n    expect(res)", "  const core = Core.getInstance()\n        c", "let res = arrayList.getCapacity();\n    expe", "\n    let res = list.getLastIndexOf(\"f\");\n  ", "et res1 = arrayList.getIndexOf(1);\n    expe", "let res = arrayList.getIndexOf(99);\n    let", "    let res = deque.getFirst();\n    expect(", "    let res = deque.getFirst();\n      expec", "\n    let res = list.getIndexOf(\"f\");\n    ex", "t res1 = linkedList.get(1);\n    expect(res1", "\n    let res = list.getLastIndexOf(\"a\");\n  "], "files": ["ExampleJsunit.test.js", "List.test.js", "LightWeightSet.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "put", "api_method_all": "put(key: K, value: V): V;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 313, "since": 7, "api_used": "\u662f", "lines": [" \n    it('testGetOutput002', 0, async funct", "encoded string or input u8\n\t   array into a", "r(100)\n        that.put(1,2)\n        var re", " it('testGetErrorOutput003', 0, async funct", " it('testGetErrorOutput005', 0, async funct", "sertEqual(\"Error: input type err\");\n       ", " \n    it('testGetOutput004', 0, async funct", " \n    it('testGetOutput001', 0, async funct", "encoded string or input u8 array\n\t   into a", " \n    it('testGetOutput005', 0, async funct", " it('testGetErrorOutput004', 0, async funct", " it('testGetErrorOutput002', 0, async funct", "  await child.getOutput().then(val=>{\n     ", "r(100)\n        that.put(1,2)\n        that.p", "t(1,2)\n        that.put(2,10)\n        that.", " it('testGetErrorOutput001', 0, async funct", "encoded String or input u8 array into a new", " \n    it('testGetOutput003', 0, async funct", "it child.getErrorOutput().then(val=>{\n     "], "files": ["util.test.js", "uri.test.js", "Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "values", "api_method_all": "values(): V[];", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 71, "since": 8, "api_used": "\u662f", "lines": ["ar value  of params.values()) {\n            ar", " [1, 2, 5];\n    let values = [\"A\", \"B\", \"E\"];\n", "  let res = treeMap.values();\n    expect(res.n", "re several matching values, this method delete", "es that the queried values are successfully ma", "i++) {\n      expect(values[i]).assertEqual(pla", "  let res = hashSet.values();\n    for (let i =", ", 3, 4, 5];\n    let values = [\"A\", \"B\", \"C\", \"", "  let res = treeSet.values();\n    expect(res.n", "  let res = hashMap.values();\n    for (let i =", "g to go through all values contained in this o", "es that the queried values are not matched.\n  ", "es = lightWeightSet.values();\n    expect(res.n", "umber of times that values are added to the bu", "the total number of values in the current buff", "umber of times that values are evicted from th", ", 3, 4, 5];\n    let values = [\"A\", \"B\", \"V\", \"", "es = lightWeightMap.values();\n    expect(res.n"], "files": ["LightWeightSet.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "PlainArray.test.js", "TreeMap.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "keys", "api_method_all": "keys(): K[];", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 38, "since": 8, "api_used": "\u662f", "lines": ["  let res = hashMap.keys();\n    for (let i =", "From(2, 2);\n    let keys = [1, 2, 5];\n    le", "qual(plainArray.get(keys[i]));\n    }\n    try", " vals = [];\n    let keys = [];\n    hashMap.f", "g to go through all keys contained in this o", ": Obtains a list of keys for the values in t", "for (let i = 0; i < keys.length; i++) {\n    ", "dd(5, \"E\");\n    let keys = [1, 2, 3, 4, 5];\n", "  let res = treeMap.keys();\n    expect(res.n", "At(2, \"V\");\n    let keys = [1, 2, 3, 4, 5];\n", "c.isMapIterator(map.keys());\n        expect(", "c.isSetIterator(set.keys());\n        expect(", "qual(plainArray.get(keys[i]));\n    }\n  });\n ", "  var result = that.keys()\n        expect(re", "as = hashMap.hasKey(keys[i]);\n      expect(h", "r(var key of params.keys()) {\n            ar", "es = lightWeightMap.keys();\n    expect(res.n", "ue, key) => {\n      keys.push(key);\n      va"], "files": ["url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "PlainArray.test.js", "TreeMap.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "remove", "api_method_all": "remove(key: K): V | undefined;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 93, "since": 8, "api_used": "\u662f", "lines": ["d(1);\n    arrayList.removeByRange(1, 3);\n    l", "  let res = hashSet.remove(1);\n    expect(res)", "3) {\n        vector.remove(123);\n      } else ", "es = lightWeightMap.remove(3);\n    expect(res)", "\n    let res = list.removeFirstFound(\"b\");\n   ", "et res = linkedList.removeFirst();\n    expect(", " try {\n      vector.removeByRange(1, 7);\n    }", "acity();\n    vector.removeByRange(0, capacity)", "\n    let res = list.remove(\"d\");\n    expect(re", "8) {\n        vector.remove(8);\n      }\n    }\n ", "let res = arrayList.removeByRange(6, 8);\n    }", "dd(\"a\");\n    vector.removeByIndex(2);\n    let ", " try {\n      vector.removeByIndex(12);\n    } c", " try {\n      vector.removeByRange(3, 1);\n    }", "dd(\"a\");\n    vector.remove(\"\u4e09\");\n    let res =", "\"a\");\n    arrayList.remove(\"\u4e09\");\n    let res =", "\"a\");\n    arrayList.removeByIndex(2);\n    let ", "acity();\n    vector.removeByRange(0, capacity ", "\n    let res = list.removeByIndex(2);\n    let ", "\n    let res = list.removeLastFound(\"b\");\n    ", "\n    let res = list.removeLast();\n    expect(r", "   let res = vector.remove(2);\n    expect(res)", "let res = arrayList.removeByIndex(5);\n    } ca", "     let res = list.removeByIndex(10);\n    } c", "\n    let res = list.remove(\"a\");\n    let arr =", "  let res = hashMap.remove(3);\n    expect(res)", "{\n        arrayList.remove(item);\n      }\n    ", "es = lightWeightMap.removeAt(1);\n    expect(re", "    let res = list1.removeLast();\n    expect(r", "let res = arrayList.removeByRange(3, 1);\n    }", " try {\n      vector.removeByRange(length + 1, ", "\n    let res = list.remove();\n    expect(res).", "let res = arrayList.remove(\"A\");\n    expect(re", "et res = linkedList.removeByIndex(1);\n    } ca", "ssage).assertEqual(\"removeByIndex is out-of-bo", "d(1);\n    arrayList.removeByRange(0, 9);\n    l", ".add(\"b\");\n    list.removeByIndex(2);\n    let ", " try {\n      vector.removeByRange(-1, capacity", "     let res = list.removeByIndex(5);\n    } ca", "s3 = lightWeightMap.removeAt(10);\n    expect(r", ".add(1);\n    vector.removeByRange(1, 3);\n    l", "     let res = list.removeByIndex(1);\n    } ca"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "afterRemoval", "api_method_all": "afterRemoval(isEvict: boolean, key: K, value: V, newValue: V): void;", "api_type": "", "api_args_count": 4, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["uffer.getInstance().afterRemoval(false,10,30,null)\n ", "uffer.getInstance().afterRemoval(false,'abc',30,'str", "      }\n            afterRemoval(isEvict, key, value", "uffer.getInstance().afterRemoval(true,'abc','ab','st", "uffer.getInstance().afterRemoval(false,'string',10,n", "uffer.getInstance().afterRemoval(false,10,30,12)\n   "], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "contains", "api_method_all": "contains(key: K): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 45, "since": 8, "api_used": "\u662f", "lines": [" the current buffer contains a specified key.\n  ", " var result = range.contains(rangeThi)\n        e", " var result = range.contains(tempMiDF)\n        e", "  var result = that.contains(0)\n        expect(r", " var result = range.contains(tempLess)\n        e", " var result = range.contains(tempLower)\n        ", "ring')\n        that.contains(10)\n        var res", "get(1)\n        that.contains('abc')\n        var ", " var result = range.contains(rangeFif)\n        e", "abcd')\n        that.contains(20)\n        var res", " var result = range.contains(rangeFir)\n        e", "get(3)\n        that.contains(1)\n        var i=0;", " var result2 = that.contains('string')\n        v", "get(3)\n        that.contains(1)\n        var resu", " var result3 = that.contains(0)\n        expect(r", " var result = range.contains(range)\n        expe", "  var result = that.contains(1)\n        expect(r", "ring')\n        that.contains(2)\n        that.con", "abcd')\n        that.contains(2)\n        that.con", "et(10)\n        that.contains(2)\n        that.con", " var result2 = that.contains(20)\n        expect(", "abcd')\n        that.contains('string')\n        t", "ins(2)\n        that.contains(6)\n        var resu", " var result1 = that.contains(1)\n        var resu", "ins(2)\n        that.contains('abcd')\n        tha", "ove(5)\n        that.contains(3)\n        that.get", "get(1)\n        that.contains(5)\n        var resu", " var result = range.contains(tempUpper)\n        ", " var result = range.contains(rangeSec)\n        e", " var result = range.contains(tempMore)\n        e"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "createDefault", "api_method_all": "createDefault(key: K): V;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": [" var result2 = that.createDefault('ab')\n        expec", "  var result = that.createDefault(1)\n        expect(r", "  var result = that.createDefault(0)\n        expect(r", "  var result = that.createDefault('string')\n        e", "the number of times createDefault(Object) returned a ", "  var result = that.createDefault(10)\n        expect(", " var result1 = that.createDefault('abc')\n        var "], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LruBuffer", "api_method_name": "entries", "api_method_all": "entries(): IterableIterator<[K, V]>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": [" (let entry of that.entries()) {\n            ar", "c.isSetIterator(set.entries());\n        expect(", "  let res = hashMap.entries();\n    let arr = []", "{\n      let entry = entries.next().value;\n     ", "(var pair of params.entries()) {\n            ar", "et(4, \"g\");\n    let entries = treeMap.entries()", "es = lightWeightMap.entries();\n    expect(JSON.", "  let res = hashSet.entries();\n    for (let i =", "  let res = hashMap.entries();\n    expect(undef", "es = lightWeightSet.entries();\n    expect(JSON.", "t entries = treeMap.entries();\n    let flag = t", "c.isMapIterator(map.entries());\n        expect(", "  let res = treeSet.entries();\n    expect(JSON.", "  let res = hashSet.entries();\n    expect(res.n"], "files": ["LightWeightSet.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "TreeMap.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScopeComparable", "api_method_all": "interface ScopeComparable {\r\n        \r\n        compareTo(other: ScopeComparable): boolean;\r\n    }", "api_method_name": "ScopeComparable", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScopeComparable", "api_method_name": "compareTo", "api_method_all": "compareTo(other: ScopeComparable): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["      var res = pro.compareTo(proc)\n        expec", " = value;\n    }\n    compareTo(value) {\n        re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_all": "class Scope{\r\n        \r\n        constructor(lowerObj: ScopeType, upperObj: ScopeType);\r\n        \r\n        toString(): string;\r\n        \r\n        intersect(range: Scope): Scope;\r\n        \r\n        intersect(lowerObj: ScopeType, upperObj: ScopeType): Scope;\r\n        \r\n        getUpper(): ScopeType;\r\n        \r\n        getLower(): ScopeType;\r\n        \r\n        expand(lowerObj: ScopeType, upperObj: ScopeType): Scope;\r\n        \r\n        expand(range: Scope): Scope;\r\n        \r\n        expand(value: ScopeType): Scope;\r\n        \r\n        contains(value: ScopeType): boolean;\r\n        \r\n        contains(range: Scope): boolean;\r\n        \r\n        clamp(value: ScopeType): ScopeType;\r\n    }", "api_method_name": "Scope", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["rangeFir = new util.Scope(tempMiDF, tempMidS)", "rangeFif = new util.Scope(tempMiDF, tempMore)", "rangeThi = new util.Scope(tempLess, tempMiDF)", "   })\n})\n\ndescribe('ScopeTest', function () {", "ar range = new util.Scope(tempLower, tempUppe", "rangeSec = new util.Scope(tempLess, tempMore)"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "constructor", "api_method_all": "constructor(lowerObj: ScopeType, upperObj: ScopeType)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "toString", "api_method_all": "toString(): string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 131, "since": 8, "api_used": "\u662f", "lines": ["      expect(result.toString()).assertEqual('')\n", "      expect(result.toString()).assertEqual(\"DEF", "   let res = vector.toString();\n    expect(res).", "      expect(result.toString()).assertEqual(\"da,", "   var res = params.toString();\n        expect(r", "es = lightWeightMap.toString();\n    expect(res).", "t res1 = plainArray.toString();\n    expect(res1)", "      expect(result.toString()).assertEqual(\"val", "\n        expect(res.toString()).assertEqual(\"htt", "es = lightWeightSet.toString();\n    expect(res).", "et res = plainArray.toString();\n    expect(res).", "var result = params.toString()\n        expect(re", "var result = params.toString();\n        expect(r", "   let res = gaogao.toString();\n        expect(r", "         expect(err.toString()).assertEqual(\"Err"], "files": ["LightWeightSet.test.js", "url.test.js", "util.test.js", "uri.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "intersect", "api_method_all": "intersect(range: Scope): Scope;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 20, "since": 8, "api_used": "\u662f", "lines": [" var result = range.intersect(rangeFir)\n        e", "c.desc: Returns the intersection of the current r", " var result = range.intersect(tempMiDF, tempMidS)", " var result = range.intersect(tempLess, tempMiDF)", " var result = range.intersect(tempLess, tempMore)", " var result = range.intersect(tempMiDF, tempMore)", " var result = range.intersect(tempLower, tempUppe", " var result = range.intersect(range)\n        expe", " var result = range.intersect(rangeThi)\n        e", " var result = range.intersect(rangeFif)\n        e", " var result = range.intersect(rangeSec)\n        e", "c.desc: Returns the intersection of a given range"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "intersect", "api_method_all": "intersect(lowerObj: ScopeType, upperObj: ScopeType): Scope;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 20, "since": 8, "api_used": "\u662f", "lines": [" var result = range.intersect(rangeFir)\n        e", "c.desc: Returns the intersection of the current r", " var result = range.intersect(tempMiDF, tempMidS)", " var result = range.intersect(tempLess, tempMiDF)", " var result = range.intersect(tempLess, tempMore)", " var result = range.intersect(tempMiDF, tempMore)", " var result = range.intersect(tempLower, tempUppe", " var result = range.intersect(range)\n        expe", " var result = range.intersect(rangeThi)\n        e", " var result = range.intersect(rangeFif)\n        e", " var result = range.intersect(rangeSec)\n        e", "c.desc: Returns the intersection of a given range"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "getUpper", "api_method_all": "getUpper(): ScopeType;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": [" var result = range.getUpper()\n        expect(re", "r result = rangeFif.getUpper()\n        expect(re", "r result = rangeFir.getUpper()\n        expect(re", "r result = rangeThi.getUpper()\n        expect(re", "r result = rangeSec.getUpper()\n        expect(re"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "getLower", "api_method_all": "getLower(): ScopeType;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["r result = rangeSec.getLower()\n        expect(re", "  let res = treeMap.getLowerKey(2);\n    expect(r", "r result = rangeThi.getLower()\n        expect(re", "  let res = treeSet.getLowerValue(2);\n    expect", "r result = rangeFif.getLower()\n        expect(re", "r result = rangeFir.getLower()\n        expect(re", " var result = range.getLower()\n        expect(re"], "files": ["TreeMap.test.js", "util.test.js", "TreeSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "expand", "api_method_all": "expand(lowerObj: ScopeType, upperObj: ScopeType): Scope;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": [" var result = range.expand(tempLess, tempMiDF)", " var result = range.expand(tempLower)\n        ", " var result = range.expand(tempUpper)\n        ", " var result = range.expand(rangeFir)\n        e", " var result = range.expand(rangeSec)\n        e", " var result = range.expand(range)\n        expe", " var result = range.expand(tempMiDF, tempMidS)", " var result = range.expand(tempMiDF, tempMore)", " var result = range.expand(tempMiDF)\n        e", " var result = range.expand(rangeThi)\n        e", " var result = range.expand(tempMore)\n        e", " var result = range.expand(tempLess, tempMore)", " var result = range.expand(rangeFif)\n        e", " var result = range.expand(tempLower, tempUppe", " var result = range.expand(tempLess)\n        e"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "expand", "api_method_all": "expand(range: Scope): Scope;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": [" var result = range.expand(tempLess, tempMiDF)", " var result = range.expand(tempLower)\n        ", " var result = range.expand(tempUpper)\n        ", " var result = range.expand(rangeFir)\n        e", " var result = range.expand(rangeSec)\n        e", " var result = range.expand(range)\n        expe", " var result = range.expand(tempMiDF, tempMidS)", " var result = range.expand(tempMiDF, tempMore)", " var result = range.expand(tempMiDF)\n        e", " var result = range.expand(rangeThi)\n        e", " var result = range.expand(tempMore)\n        e", " var result = range.expand(tempLess, tempMore)", " var result = range.expand(rangeFif)\n        e", " var result = range.expand(tempLower, tempUppe", " var result = range.expand(tempLess)\n        e"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "expand", "api_method_all": "expand(value: ScopeType): Scope;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": [" var result = range.expand(tempLess, tempMiDF)", " var result = range.expand(tempLower)\n        ", " var result = range.expand(tempUpper)\n        ", " var result = range.expand(rangeFir)\n        e", " var result = range.expand(rangeSec)\n        e", " var result = range.expand(range)\n        expe", " var result = range.expand(tempMiDF, tempMidS)", " var result = range.expand(tempMiDF, tempMore)", " var result = range.expand(tempMiDF)\n        e", " var result = range.expand(rangeThi)\n        e", " var result = range.expand(tempMore)\n        e", " var result = range.expand(tempLess, tempMore)", " var result = range.expand(rangeFif)\n        e", " var result = range.expand(tempLower, tempUppe", " var result = range.expand(tempLess)\n        e"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "contains", "api_method_all": "contains(value: ScopeType): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 45, "since": 8, "api_used": "\u662f", "lines": [" the current buffer contains a specified key.\n  ", " var result = range.contains(rangeThi)\n        e", " var result = range.contains(tempMiDF)\n        e", "  var result = that.contains(0)\n        expect(r", " var result = range.contains(tempLess)\n        e", " var result = range.contains(tempLower)\n        ", "ring')\n        that.contains(10)\n        var res", "get(1)\n        that.contains('abc')\n        var ", " var result = range.contains(rangeFif)\n        e", "abcd')\n        that.contains(20)\n        var res", " var result = range.contains(rangeFir)\n        e", "get(3)\n        that.contains(1)\n        var i=0;", " var result2 = that.contains('string')\n        v", "get(3)\n        that.contains(1)\n        var resu", " var result3 = that.contains(0)\n        expect(r", " var result = range.contains(range)\n        expe", "  var result = that.contains(1)\n        expect(r", "ring')\n        that.contains(2)\n        that.con", "abcd')\n        that.contains(2)\n        that.con", "et(10)\n        that.contains(2)\n        that.con", " var result2 = that.contains(20)\n        expect(", "abcd')\n        that.contains('string')\n        t", "ins(2)\n        that.contains(6)\n        var resu", " var result1 = that.contains(1)\n        var resu", "ins(2)\n        that.contains('abcd')\n        tha", "ove(5)\n        that.contains(3)\n        that.get", "get(1)\n        that.contains(5)\n        var resu", " var result = range.contains(tempUpper)\n        ", " var result = range.contains(rangeSec)\n        e", " var result = range.contains(tempMore)\n        e"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "contains", "api_method_all": "contains(range: Scope): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 45, "since": 8, "api_used": "\u662f", "lines": [" the current buffer contains a specified key.\n  ", " var result = range.contains(rangeThi)\n        e", " var result = range.contains(tempMiDF)\n        e", "  var result = that.contains(0)\n        expect(r", " var result = range.contains(tempLess)\n        e", " var result = range.contains(tempLower)\n        ", "ring')\n        that.contains(10)\n        var res", "get(1)\n        that.contains('abc')\n        var ", " var result = range.contains(rangeFif)\n        e", "abcd')\n        that.contains(20)\n        var res", " var result = range.contains(rangeFir)\n        e", "get(3)\n        that.contains(1)\n        var i=0;", " var result2 = that.contains('string')\n        v", "get(3)\n        that.contains(1)\n        var resu", " var result3 = that.contains(0)\n        expect(r", " var result = range.contains(range)\n        expe", "  var result = that.contains(1)\n        expect(r", "ring')\n        that.contains(2)\n        that.con", "abcd')\n        that.contains(2)\n        that.con", "et(10)\n        that.contains(2)\n        that.con", " var result2 = that.contains(20)\n        expect(", "abcd')\n        that.contains('string')\n        t", "ins(2)\n        that.contains(6)\n        var resu", " var result1 = that.contains(1)\n        var resu", "ins(2)\n        that.contains('abcd')\n        tha", "ove(5)\n        that.contains(3)\n        that.get", "get(1)\n        that.contains(5)\n        var resu", " var result = range.contains(tempUpper)\n        ", " var result = range.contains(rangeSec)\n        e", " var result = range.contains(tempMore)\n        e"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scope", "api_method_name": "clamp", "api_method_all": "clamp(value: ScopeType): ScopeType;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["  var result =range.clamp(tempLess)\n        e", "  var result =range.clamp(tempMiDF)\n        e", "or naPi_ uint8_\n\t   clamped_ array or naPi_ i", "  var result =range.clamp(tempUpper)\n        ", "  var result =range.clamp(tempLower)\n        ", "  var result =range.clamp(tempMore)\n        e", "\t   or naPi_ uint8_ clamped_ array or naPi_ i", "ray or naPi_ uint8_ clamped_ array or naPi_ i"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Base64", "api_method_all": "class Base64{\r\n        \r\n        constructor();\r\n        \r\n        encodeSync(src: Uint8Array): Uint8Array;\r\n        \r\n        encodeToStringSync(src: Uint8Array): string;\r\n        \r\n        decodeSync(src: Uint8Array | string): Uint8Array;\r\n        \r\n        encode(src: Uint8Array): Promise<Uint8Array>;\r\n        \r\n         encodeToString(src: Uint8Array): Promise<string>;\r\n        \r\n        decode(src: Uint8Array | string): Promise<Uint8Array>;\r\n    }", "api_method_name": "Base64", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 101, "since": 8, "api_used": "\u662f", "lines": [" a String using the Base64 encoding scheme.\n  ", "@tc.desc: Decodes a Base64 encoded String or i", "var that = new util.Base64()\n        var buff ", "\t   array using the Base64 encoding scheme.\n  ", "   })\n})\n\ndescribe('Base64Test', function () {", "var that = new util.Base64()\n        var array"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Base64", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Base64", "api_method_name": "encodeSync", "api_method_all": "encodeSync(src: Uint8Array): Uint8Array;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["  var result = that.encodeSync(array);\n        for"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Base64", "api_method_name": "encodeToStringSync", "api_method_all": "encodeToStringSync(src: Uint8Array): string;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["  var result = that.encodeToStringSync(array)\n        expe", "  var result = that.encodeToStringSync(array);\n        exp"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Base64", "api_method_name": "decodeSync", "api_method_all": "decodeSync(src: Uint8Array | string): Uint8Array;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["  var result = that.decodeSync(buff);\n        for ", "  var result = that.decodeSync(array);\n        for"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Base64", "api_method_name": "encode", "api_method_all": "encode(src: Uint8Array): Promise<Uint8Array>;", "api_type": "Promise", "api_args_count": 1, "api_level": 11, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": [",61]);\n        that.encodeToString(array).then(val=>{\n            ", " 52]);\n        that.encodeToString(array).then(val=>{\n            ", " 48]);\n        that.encode(array).then(val=>{\n            for (var", "255]);\n        that.encodeToString(array).then(val=>{\n            ", "122]);\n        that.encode(array).then(val=>{\n            for (var", ",51]);\n        that.encodeToString(array).then(val=>{\n            ", "115]);\n        that.encodeToString(array).then(val=>{\n            ", ",61]);\n        that.encode(array).then(val=>{\n            for (var"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Base64", "api_method_name": "encodeToString", "api_method_all": "encodeToString(src: Uint8Array): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": [" 52]);\n        that.encodeToString(array).then(val=>{\n            expect(v", "115]);\n        that.encodeToString(array).then(val=>{\n            expect(v", ",61]);\n        that.encodeToString(array).then(val=>{\n            expect(v", "255]);\n        that.encodeToString(array).then(val=>{\n            expect(v", ",51]);\n        that.encodeToString(array).then(val=>{\n            expect(v"], "files": ["util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Base64", "api_method_name": "decode", "api_method_all": "decode(src: Uint8Array | string): Promise<Uint8Array>;", "api_type": "Promise", "api_args_count": 1, "api_level": 11, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["255]);\n        that.decode(array).then(val=>{\n            for (var", "255]);\n        that.decode(buff).then(val=>{\n            for (var ", " 52]);\n        that.decode(buff).then(val=>{\n            for (var ", "115]);\n        that.decode(buff).then(val=>{\n            for (var ", "115]);\n        that.decode(array).then(val=>{\n            for (var", " 52]);\n        that.decode(array).then(val=>{\n            for (var", ",51]);\n        that.decode(buff).then(val=>{\n            for (var ", ",51]);\n        that.decode(array).then(val=>{\n            for (var"], "files": ["util.test.js"], "is_white": " ", "desc": " "}]}