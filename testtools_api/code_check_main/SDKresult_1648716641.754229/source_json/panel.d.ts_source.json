{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\panel", "api": [{"api_class_name": "PanelMode", "api_method_all": "declare enum PanelMode {\n  \n  Mini,\n\n  \n  Half,\n\n  \n  Full,\n}", "api_method_name": "PanelMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["           \"mode\": \"PanelMode.Mini\"\n          }\n ", "able\n  @State mode: PanelMode = PanelMode.Half\n\n ", ".mode).assertEqual('PanelMode.Full')\n      expect", "e mode: PanelMode = PanelMode.Half\n\n  private sta", "ldable)\n      .mode(PanelMode.Half)\n      .dragBa", "porary)\n      .mode(PanelMode.Full)\n      .dragBa", ".mode).assertEqual('PanelMode.Mini')\n      expect", "inibar)\n      .mode(PanelMode.Mini)\n      .dragBa", ".mode).assertEqual('PanelMode.Half')\n      expect", ".mode).assertEqual(\"PanelMode.Mini\");\n      conso"], "files": ["panel.ets", "PanelJsunit.test.ets", "Panel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelMode", "api_method_name": "Mini", "api_method_all": "Mini,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 42, "since": 7, "api_used": "\u662f", "lines": ["ll,\n        modePropMini : null,\n        mod", "  console.info('testMiniHeightPro START');\n ", "/\n    it('testSliderMiniconNone', 0, async f", "Mini : this.modePropMini,\n            modePr", "ertEqual(\"PanelMode.Mini\");\n      console.in", "    .mode(PanelMode.Mini)\n      .dragBar(tru", "ertEqual(\"PanelType.Minibar\");\n      console", "name      testSliderMiniconNone\n     * @tc.d", "ole.info('testSliderMinicon START');\n       ", "NavigationTitleMode.Mini)\n\n      Navigation(", "me      testTypePropMinibar\n     * @tc.desc ", "* @tc.name      testMiniHeightPro\n     * @tc", "ertEqual('PanelMode.Mini')\n      expect(obj.", "            modePropMini : this.modePropMini", "ole.info('testSliderMiniconNone START');\n   ", "s.$element(\"typePropMinibar\").getInspector()", "     */\n    it('testMiniHeightPro', 0, async", "s.$element(\"modePropMini\").getInspector()\n  ", "    it('testTypePropMinibar', 0, async funct", "    it('testModePropMini', 0, async function", "e.info('testModePropMini START');\n        co", "\n     it('testSliderMinicon', 0, async funct", "lThis.value.modePropMini); //ID\n        cons", " \"mode\": \"PanelMode.Mini\"\n          }\n      ", "    .type(PanelType.Minibar)\n      .mode(Pan", "e.info('testTypePropMinibar START');\n       ", "name      testSliderMinicon\n     * @tc.desc ", "ibar : this.typePropMinibar,\n            typ", "me      testModePropMini\n     * @tc.desc    ", " \"type\": \"PanelType.Minibar\"\n          }\n   ", "ertEqual('PanelType.Minibar')\n      expect(o", "       this.typePropMinibar = this.$element(", "            typePropMinibar : this.typePropM", "       this.modePropMini = this.$element(\"mo", "ll,\n        typePropMinibar : null,\n        ", "ssertEqual('typePropMinibar') //ID\n        e", "ssertEqual('modePropMini') //ID\n        expe", "lThis.value.typePropMinibar); //ID\n        c"], "files": ["Navigation.ets", "PanelJsunit.test.ets", "sliderProps.test.js", "panelProps.test.js", "Panel.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelMode", "api_method_name": "Half", "api_method_all": "Half,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["Half : this.modePropHalf,\n            modePr", "            modePropHalf : this.modePropHalf", "nelMode = PanelMode.Half\n\n  private stateCha", "ssertEqual('modePropHalf') //ID\n        expe", "s.$element(\"modePropHalf\").getInspector()\n  ", "e.info('testModePropHalf START');\n        co", "ertEqual('PanelMode.Half')\n      expect(obj.", "  console.info('testHalfHeightPro START');\n ", "     */\n    it('testHalfHeightPro', 0, async", "me      testModePropHalf\n     * @tc.desc    ", "       this.modePropHalf = this.$element(\"mo", "    .mode(PanelMode.Half)\n      .dragBar(tru", "ll,\n        modePropHalf: null,\n        mode", "lThis.value.modePropHalf); //ID\n        cons", "* @tc.name      testHalfHeightPro\n     * @tc", "    it('testModePropHalf', 0, async function"], "files": ["PanelJsunit.test.ets", "panelProps.test.js", "Panel.ets", "index.js", "panel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelMode", "api_method_name": "Full", "api_method_all": "Full,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": ["ction7 video requestFullscreen.'\n        })\n", "       this.modePropFull = this.$element(\"mo", "            modePropFull : this.modePropFull", "ll,\n        modePropFull: null,\n        drag", "lThis.value.modePropFull); //ID\n        cons", "Full : this.modePropFull,\n            dragBa", "    it('testModePropFull', 0, async function", "ertEqual('PanelMode.Full')\n      expect(obj.", "s.$element(\"modePropFull\").getInspector()\n  ", "me      testModePropFull\n     * @tc.desc    ", "* @tc.name      testFullHeightPro\n     * @tc", "      function8.exitFullscreen();\n        pr", "NavigationTitleMode.Full)\n      .hideTitleBa", "e.info('testModePropFull START');\n        co", "  console.info('testFullHeightPro START');\n ", "   function7.requestFullscreen({\n           ", "\n        app.requestFullWindow(a);\n      } c", "     */\n    it('testFullHeightPro', 0, async", "    .mode(PanelMode.Full)\n      .dragBar(tru", "ssertEqual('modePropFull') //ID\n        expe", "function8 video exitFullscreen.'\n        })\n"], "files": ["Navigation.ets", "PanelJsunit.test.ets", "SystemAppJsunit.test.ets", "Panel.ets", "panelProps.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelType", "api_method_all": "declare enum PanelType {\n  \n  Minibar,\n\n  \n  Foldable,\n\n  \n  Temporary,\n}", "api_method_name": "PanelType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["           \"type\": \"PanelType.Minibar\"\n          ", "max: 100, type: DataPanelType.Line })\n        .wi", "gify(obj.$attrs.DataPanelType));\n      console.lo", "e).assertEqual(\"DataPanelType.Circle\")\n      cons", "max: 100, type: DataPanelType.Circle})\n        .w", "e type: PanelType = PanelType.Foldable\n  @State m", ".type).assertEqual('PanelType.Minibar')\n      exp", ".type).assertEqual(\"PanelType.Minibar\");\n      co", ".type).assertEqual('PanelType.Foldable')\n      ex", "true\n  @State type: PanelType = PanelType.Foldabl", "anel3')\n      .type(PanelType.Temporary)\n      .m", ".type).assertEqual('PanelType.Temporary')\n      e", "anel2')\n      .type(PanelType.Minibar)\n      .mod", "panel')\n      .type(PanelType.Foldable)\n      .mo", "g(\"cd DataPanel dataPanelType\" + JSON.stringify(o"], "files": ["DataPanelJsunit.test.ets", "PanelJsunit.test.ets", "Panel.ets", "panel.ets", "DataPanel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelType", "api_method_name": "Minibar", "api_method_all": "Minibar,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["            typePropMinibar : this.typePropMini", "lThis.value.typePropMinibar); //ID\n        cons", "ibar : this.typePropMinibar,\n            typePr", "ssertEqual('typePropMinibar') //ID\n        expe", "       this.typePropMinibar = this.$element(\"ty", "ertEqual(\"PanelType.Minibar\");\n      console.in", "    .type(PanelType.Minibar)\n      .mode(PanelM", "me      testTypePropMinibar\n     * @tc.desc    ", " \"type\": \"PanelType.Minibar\"\n          }\n      ", "    it('testTypePropMinibar', 0, async function", "e.info('testTypePropMinibar START');\n        co", "s.$element(\"typePropMinibar\").getInspector()\n  ", "ertEqual('PanelType.Minibar')\n      expect(obj.", "ll,\n        typePropMinibar : null,\n        typ"], "files": ["panelProps.test.js", "PanelJsunit.test.ets", "Panel.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelType", "api_method_name": "Foldable", "api_method_all": "Foldable,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["    .type(PanelType.Foldable)\n      .mode(PanelM", "nelType = PanelType.Foldable\n  @State mode: Pane", "ertEqual('PanelType.Foldable')\n      expect(obj."], "files": ["panel.ets", "PanelJsunit.test.ets", "Panel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelType", "api_method_name": "Temporary", "api_method_all": "Temporary,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["ll,\n        typePropTemporary : null,\n        mod", "lThis.value.typePropTemporary); //ID\n        cons", "            typePropTemporary : this.typePropTemp", "e.info('testTypePropTemporary START');\n        co", "    it('testTypePropTemporary', 0, async function", "s.$element(\"typePropTemporary\").getInspector()\n  ", "    .type(PanelType.Temporary)\n      .mode(PanelM", "ssertEqual('typePropTemporary') //ID\n        expe", "       this.typePropTemporary = this.$element(\"ty", "me      testTypePropTemporary\n     * @tc.desc    ", "rary : this.typePropTemporary,\n            modePr", "ertEqual('PanelType.Temporary')\n      expect(obj."], "files": ["panelProps.test.js", "PanelJsunit.test.ets", "Panel.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelInterface", "api_method_all": "interface PanelInterface {\n  \n  (show: boolean): PanelAttribute;\n}", "api_method_name": "PanelInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PanelInterface", "api_method_name": "show", "api_method_all": "(show: boolean): PanelAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3848, "since": 7, "api_used": "\u662f", "lines": ["CCCCC)\n            .showSteps(false)\n       ", "info('Calendar page show called');\n    var s", "nfo('[enabled] page show called ');\n    var ", "ps(true)\n          .showTips(true)\n         ", "{\n      Button(this.show).width(80).height(3", "info('Checkbox page show called');\n    var s", "             prompt.showToast({\n            ", "\n              this.show = \"show\"\n          ", "ole.info('flex page show called');\n    var s", "false)\n            .showTips(false)\n        ", "info('[column] page show called');\n    var s", "info('[zIndex] page show called ');\n    var ", "le.info('gauge page show called');\n    var s", "or.Blue)\n          .showSteps(true)\n        ", "info('[appear] page show called');\n    var s", "'checkboxGroup page show called');\n    var s", "\n            prompt.showToast({ message: 'Th", "ate show: string = \"show\"\n\n  build() {\n    F", ".info('stepper page show called');\n    var s", "ssage: 'The text is shown', duration: 2000 }", "nfo('[ellipse] page show called');\n    var s", "       this.show = \"show\"\n            }\n    ", ".Blue)\n            .showSteps(true)\n        ", "e.info('[list] page show called');\n    var s", "is.swiperController.showPrevious()\n         ", "is.swiperController.showNext();\n            ", "'gridContainer page show called');\n    var s", "s(false)\n          .showTips(false)\n        ", "fo('background page show called');\n    var s", "xCCCCCC)\n          .showSteps(false)\n       ", "fo('edgeEffect page show called');\n    var s", "e.info('swiper page show called');\n    var s", "'shapeClipping page show called');\n    var s", "('imageEffects page show called');\n    var s", "e.info('border page show called');\n    var s", "an = false\n  @State show: string = \"show\"\n\n ", "\n              this.show = \"hide\"\n          ", ".info('[touch] page show called');\n    var s", "ansFormExample page show called');\n    var s", "nfo('[overlay] page show called ');\n    var ", "o('[TouchAble] page show called');\n    var s", "ColorGradient] page show called');\n    var s", "(true)\n            .showTips(true)\n         ", " {\n          prompt.showToast({ message: JSO", "e.info('select page show called');\n    var s", "e.info('slider page show called');\n    var s", "ansFormExample page show called');\n\n    var ", "le.info('focus page show called');\n    var s"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "dividerProps.test.js", "video.ets", "tabContentProps.test.js", "textProps.test.js", "Navigator.ets", "playMode.ets", "toolbarProps.test.js", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "column.ets", "Panel.ets", "Progress.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "toolbarItemProps.test.js", "Rating.ets", "PieceJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "Divider.ets", "badgeProps.test.js", "border.ets", "scrollBar.ets", "dialogProps.test.js", "textArea.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "RichText.ets", "formProps.test.js", "focus.ets", "touch.ets", "background.ets", "Slider.ets", "stackProps.test.js", "Text.ets", "PanelJsunit.test.ets", "Counter.ets", "gauge.ets", "Stack.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "refreshProps.test.js", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "TextArea.ets", "animatorOption.ets", "flexDirection.ets", "shapeClipping.ets", "edgeEffect.ets", "stepper.ets", "shape.ets", "labelProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "flex.ets", "ratingProps.test.js", "Shape.ets", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "Polyline.ets", "imageAnimatorProps.test.js", "textPickerDialog.ets", "gridPage.ets", "enable.ets", "PieceCode.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "popupProps.test.js", "AlphabetIndexer.ets", "ColumnSplit.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "videoProps.test.js", "list.ets", "colorGradient.ets", "AppStorage.ets", "QrCode.ets", "GridContainer.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "checkbox.ets", "Video.ets", "pieceProps.test.js", "pickerProps.test.js", "circle.ets", "listItem.ets", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "Polygon.ets", "gridColProps.test.js", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "Rect.ets", "divProps.test.js", "switchProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "appear.ets", "rating.ets", "zIndex.ets", "Path.ets", "line.ets", "DataPanel.ets", "chartProps.test.js", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "sliderProps.test.js", "swiperProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "Link.ets", "imageProps.test.js", "select.ets", "Toggle.ets", "listProps.test.js", "slider.ets", "progressProps.test.js", "aboutToDisappear.ets", "Calendar.ets", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "panel.ets", "menuProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelAttribute", "api_method_all": "declare class PanelAttribute extends CommonMethod<PanelAttribute> {\n  \n  mode(value: PanelMode): PanelAttribute;\n\n  \n  type(value: PanelType): PanelAttribute;\n\n  \n  dragBar(value: boolean): PanelAttribute;\n\n  \n  fullHeight(value: number | string): PanelAttribute;\n\n  \n  halfHeight(value: number | string): PanelAttribute;\n\n  \n  miniHeight(value: number | string): PanelAttribute;\n\n  \n  show(value: boolean): PanelAttribute;\n\n  \n  onChange(\n    event: (\n      \n      width: number,\n\n      \n      height: number,\n\n      \n      mode: PanelMode,\n    ) => void,\n  ): PanelAttribute;\n}", "api_method_name": "PanelAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PanelAttribute", "api_method_name": "mode", "api_method_all": "mode(value: PanelMode): PanelAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 277, "since": 7, "api_used": "\u662f", "lines": ["   .type(this.type).mode(this.mode)\n      .d", "nge((value: number, mode: SliderChangeMode) ", "= 1000\n  @State playmode: PlayMode = PlayMod", " {\n            \"playmode\": \"123456\"\n        ", "exDirection.Column, mode:this.mode, alignIte", "indexEvent.data.playmode).assertEqual('norma", " {\n            \"playmode\": \"aaa\"\n          }", "e.Foldable\n  @State mode: PanelMode = PanelM", "indexEvent.data.playmode).assertEqual('aaa')", "playmode\": this.playmode,\n              }\n  ", "e.Temporary)\n      .mode(PanelMode.Full)\n   ", "+ value + 'mode:' + mode.toString())\n       ", "               \"playmode\": this.playmode,\n  ", "ata: {\n            \"mode\": \"PanelMode.Mini\"\n", " {\n            \"playmode\": \"PlayMode.Alterna", "eight},mode:${value.mode}`)\n      })\n\n    }.", "n.Column, mode:this.mode, alignItems: ItemAl", "e.info(\"button5 playmode value is : \" + this", "eight},mode:${value.mode}`)\n      })\n    }.w", " eventData.data.playmode;\n      }\n    }\n  }\n", "       this.Begin = mode\n            console", "ype.Minibar)\n      .mode(PanelMode.Mini)\n   ", "pe.Foldable)\n      .mode(PanelMode.Half)\n   ", " PlayMode: this.playmode }, () => {\n        ", "e is : \" + this.playmode)\n          animateT", "ue: ' + value + '---mode: ' + mode)\n        ", "  expect(obj.$attrs.mode).assertEqual(\"Panel", "his.type).mode(this.mode)\n      .dragBar(tru", "indexEvent.data.playmode).assertEqual('alter", "ght:${value.height},mode:${value.mode}`)\n   ", "tyle.Solid\n  @State mode: GestureMode = Gest", "(eventData.data.playmode != null) {\n        ", "eight},mode:${value.mode}`)\n      })\n\n      ", "'value:' + value + 'mode:' + mode.toString()", " {\n        this.playmode = eventData.data.pl", "indexEvent.data.playmode).assertEqual('12345"], "files": ["animate.ets", "animateTransformProps.test.js", "index.js", "PanelJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "slider.ets", "AnimateJsunit.test.ets", "imageAnimatorProps.test.js", "Panel.ets", "panelProps.test.js", "gestureMode.ets", "Slider.ets", "tabBarProps.test.js", "panel.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelAttribute", "api_method_name": "type", "api_method_all": "type(value: PanelType): PanelAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5337, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"type\": \"PanelType.Miniba", "er0100] expect(obj.$type) is: \" + (obj.$type", "is: \" + (obj.$attrs.type));\n      done();\n  ", "log0100] obj.$attrs.type is: \" + (obj.$attrs", ";\n      expect(obj.$type).assertEqual('Stepp", "    y: downY,\n      type: TouchType.Down,\n  ", "og0100] expect(obj.$type) is: \" + (obj.$type", "eck\n\nconst TYPE = '$type'\nconst ID = '$ID'\nc", "pe = eventData.data.type;\n      }\n    }\n  }\n", "        expect(obj.$type).assertEqual('Flex'", "      y: upY,\n      type: TouchType.Up,\n    ", ";\n      expect(obj.$type).assertEqual('TextA", "bj.$attrs.transform.type)\n        .assertEqu", ";\n      expect(obj.$type).assertEqual('GridC", "  expect(obj.$attrs.type).assertEqual(\"Panel", ";\n      expect(obj.$type).assertEqual('Swipe", "      .decoration({ type: this.decoration, c", "ean = true\n  @State type: PanelType = PanelT", " if (eventData.data.type != null) {\n        ", "type) is: \" + (obj.$type));\n      console.in", "pe = eventData.data.type;\n      }\n      if (", "extInput')\n        .type(this.inputType)\n   ", "          if (event.type === TouchType.Down)", ";\n      expect(obj.$type).assertEqual('Image", "          if (event.type === TouchType.Move)", ";\n      expect(obj.$type).assertEqual('Flex'", "  if(eventData.data.type != null) {\n        ", "eTest_0200 obj.obj.$type is: \" + obj.$type);", ".$type is: \" + obj.$type);\n      var res = o", "ata: {\n            \"type\": 'InputType.Email'", ";\n      expect(obj.$type).assertEqual('Gauge", "ull) {\n        this.type = eventData.data.ty", "          if (event.type === TouchType.Up) {", ";\n      expect(obj.$type).assertEqual('Text'", "   }\n      }\n      .type(this.type).mode(thi", " }\n      .type(this.type).mode(this.mode)\n  ", ";\n      expect(obj.$type).assertEqual('Row')", "yStep * i),\n        type: TouchType.Move\n   "], "files": ["pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Panel.ets", "sourceType.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "transition.ets", "textInput.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "toggle.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "span.ets", "NavigatorCode.ets", "buttonProps.test.js", "animateProps.test.js", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "Constants.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "panelProps.test.js", "sharedTransition.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelAttribute", "api_method_name": "dragBar", "api_method_all": "dragBar(value: boolean): PanelAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 28, "since": 7, "api_used": "\u662f", "lines": ["onsole.log('Panel\u2018s dragBar is ' + JSON.stringi", "se(globalThis.value.dragBarPropTrue); //ID\n    ", "tringify(obj.$attrs.dragBar))\n      console.log", "ctor()\n        this.dragBarPropTrue = this.$ele", "ctor()\n        this.dragBarPropFalse = this.$el", "BarPropFalse : this.dragBarPropFalse,\n\n        ", "  expect(obj.$attrs.dragBar).assertEqual(\"true\"", "ue = this.$element(\"dragBarPropTrue\").getInspec", "  expect(obj.$attrs.dragBar).assertEqual('true'", "True: null,\n        dragBarPropFalse: null,\n   ", "rs.id).assertEqual('dragBarPropFalse') //ID\n   ", "elMode.Full)\n      .dragBar(true)\n      .fullHe", "Full: null,\n        dragBarPropTrue: null,\n    ", "gBarPropTrue : this.dragBarPropTrue,\n          ", "elMode.Mini)\n      .dragBar(true)\n      .fullHe", "e(this.mode)\n      .dragBar(true)\n      .halfHe", "se = this.$element(\"dragBarPropFalse\").getInspe", "rs.id).assertEqual('dragBarPropTrue') //ID\n    ", "opFull,\n            dragBarPropTrue : this.drag", "elMode.Half)\n      .dragBar(true)\n      .fullHe", "se(globalThis.value.dragBarPropFalse); //ID\n   ", "opTrue,\n            dragBarPropFalse : this.dra"], "files": ["PanelJsunit.test.ets", "panelProps.test.js", "Panel.ets", "index.js", "panel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelAttribute", "api_method_name": "fullHeight", "api_method_all": "fullHeight(value: number | string): PanelAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["False,\n\n            fullHeightPro : this.fullHeigh", "tringify(obj.$attrs.fullHeight))\n      console.log", "rs.id).assertEqual('fullHeightPro') //ID\n        e", "ragBar(true)\n      .fullHeight(500)\n      .halfHei", "onsole.log('Panel\u2018s fullHeight is ' + JSON.stringi", "ullHeightPro : this.fullHeightPro,\n            hal", "  expect(obj.$attrs.fullHeight).assertEqual(\"0.000", "alse: null,\n        fullHeightPro: null,\n        h", "ro = this.$element(\"fullHeightPro\").getInspector()", "se(globalThis.value.fullHeightPro); //ID\n        c", "  expect(obj.$attrs.fullHeight).assertEqual('500.0", "ctor()\n        this.fullHeightPro = this.$element("], "files": ["panelProps.test.js", "PanelJsunit.test.ets", "Panel.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelAttribute", "api_method_name": "halfHeight", "api_method_all": "halfHeight(value: number | string): PanelAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": ["ctor()\n        this.halfHeightPro = this.$element(", "alfHeightPro : this.halfHeightPro,\n            min", "tPro: null,\n        halfHeightPro: null,\n        m", "ro = this.$element(\"halfHeightPro\").getInspector()", "se(globalThis.value.halfHeightPro); //ID\n        c", "tringify(obj.$attrs.halfHeight))\n      console.log", "lHeight(500)\n      .halfHeight(250)\n      .miniHei", "ghtPro,\n            halfHeightPro : this.halfHeigh", "ragBar(true)\n      .halfHeight(500)\n      .key('Pa", "  expect(obj.$attrs.halfHeight).assertEqual(\"500.0", "  expect(obj.$attrs.halfHeight).assertEqual('250.0", "rs.id).assertEqual('halfHeightPro') //ID\n        e", "onsole.log('Panel\u2018s halfHeight is ' + JSON.stringi"], "files": ["PanelJsunit.test.ets", "panelProps.test.js", "Panel.ets", "index.js", "panel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelAttribute", "api_method_name": "miniHeight", "api_method_all": "miniHeight(value: number | string): PanelAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["rs.id).assertEqual('miniHeightPro') //ID\n        e", "onsole.log('Panel\u2018s miniHeight is ' + JSON.stringi", "iniHeightPro : this.miniHeightPro,\n\n        }\n    ", "ro = this.$element(\"miniHeightPro\").getInspector()", "  expect(obj.$attrs.miniHeight).assertEqual('100.0", "  expect(obj.$attrs.miniHeight).assertEqual(\"0.000", "fHeight(250)\n      .miniHeight(100)\n      .onChang", "tringify(obj.$attrs.miniHeight))\n      expect(obj.", "ctor()\n        this.miniHeightPro = this.$element(", "se(globalThis.value.miniHeightPro); //ID\n        c", "ghtPro,\n            miniHeightPro : this.miniHeigh", "tPro: null,\n        miniHeightPro: null\n    },\n\n  "], "files": ["panelProps.test.js", "PanelJsunit.test.ets", "Panel.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelAttribute", "api_method_name": "show", "api_method_all": "show(value: boolean): PanelAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3848, "since": 7, "api_used": "\u662f", "lines": ["CCCCC)\n            .showSteps(false)\n       ", "info('Calendar page show called');\n    var s", "nfo('[enabled] page show called ');\n    var ", "ps(true)\n          .showTips(true)\n         ", "{\n      Button(this.show).width(80).height(3", "info('Checkbox page show called');\n    var s", "             prompt.showToast({\n            ", "\n              this.show = \"show\"\n          ", "ole.info('flex page show called');\n    var s", "false)\n            .showTips(false)\n        ", "info('[column] page show called');\n    var s", "info('[zIndex] page show called ');\n    var ", "le.info('gauge page show called');\n    var s", "or.Blue)\n          .showSteps(true)\n        ", "info('[appear] page show called');\n    var s", "'checkboxGroup page show called');\n    var s", "\n            prompt.showToast({ message: 'Th", "ate show: string = \"show\"\n\n  build() {\n    F", ".info('stepper page show called');\n    var s", "ssage: 'The text is shown', duration: 2000 }", "nfo('[ellipse] page show called');\n    var s", "       this.show = \"show\"\n            }\n    ", ".Blue)\n            .showSteps(true)\n        ", "e.info('[list] page show called');\n    var s", "is.swiperController.showPrevious()\n         ", "is.swiperController.showNext();\n            ", "'gridContainer page show called');\n    var s", "s(false)\n          .showTips(false)\n        ", "fo('background page show called');\n    var s", "xCCCCCC)\n          .showSteps(false)\n       ", "fo('edgeEffect page show called');\n    var s", "e.info('swiper page show called');\n    var s", "'shapeClipping page show called');\n    var s", "('imageEffects page show called');\n    var s", "e.info('border page show called');\n    var s", "an = false\n  @State show: string = \"show\"\n\n ", "\n              this.show = \"hide\"\n          ", ".info('[touch] page show called');\n    var s", "ansFormExample page show called');\n    var s", "nfo('[overlay] page show called ');\n    var ", "o('[TouchAble] page show called');\n    var s", "ColorGradient] page show called');\n    var s", "(true)\n            .showTips(true)\n         ", " {\n          prompt.showToast({ message: JSO", "e.info('select page show called');\n    var s", "e.info('slider page show called');\n    var s", "ansFormExample page show called');\n\n    var ", "le.info('focus page show called');\n    var s"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "dividerProps.test.js", "video.ets", "tabContentProps.test.js", "textProps.test.js", "Navigator.ets", "playMode.ets", "toolbarProps.test.js", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "column.ets", "Panel.ets", "Progress.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "toolbarItemProps.test.js", "Rating.ets", "PieceJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "Divider.ets", "badgeProps.test.js", "border.ets", "scrollBar.ets", "dialogProps.test.js", "textArea.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "RichText.ets", "formProps.test.js", "focus.ets", "touch.ets", "background.ets", "Slider.ets", "stackProps.test.js", "Text.ets", "PanelJsunit.test.ets", "Counter.ets", "gauge.ets", "Stack.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "refreshProps.test.js", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "TextArea.ets", "animatorOption.ets", "flexDirection.ets", "shapeClipping.ets", "edgeEffect.ets", "stepper.ets", "shape.ets", "labelProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "flex.ets", "ratingProps.test.js", "Shape.ets", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "Polyline.ets", "imageAnimatorProps.test.js", "textPickerDialog.ets", "gridPage.ets", "enable.ets", "PieceCode.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "popupProps.test.js", "AlphabetIndexer.ets", "ColumnSplit.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "videoProps.test.js", "list.ets", "colorGradient.ets", "AppStorage.ets", "QrCode.ets", "GridContainer.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "checkbox.ets", "Video.ets", "pieceProps.test.js", "pickerProps.test.js", "circle.ets", "listItem.ets", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "Polygon.ets", "gridColProps.test.js", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "Rect.ets", "divProps.test.js", "switchProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "appear.ets", "rating.ets", "zIndex.ets", "Path.ets", "line.ets", "DataPanel.ets", "chartProps.test.js", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "sliderProps.test.js", "swiperProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "Link.ets", "imageProps.test.js", "select.ets", "Toggle.ets", "listProps.test.js", "slider.ets", "progressProps.test.js", "aboutToDisappear.ets", "Calendar.ets", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "panel.ets", "menuProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanelAttribute", "api_method_name": "onChange  ", "api_method_all": "onChange(\n    event: (\n      \n      width: number,\n\n      \n      height: number,\n\n      \n      mode: PanelMode,\n    ) => void,\n  ): PanelAttribute;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PanelAttribute", "api_method_name": "event", "api_method_all": "event: (\n      \n      width: number,\n\n      \n      height: number,\n\n      \n      mode: PanelMode,\n    ) => void,\n  ): PanelAttribute;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 9576, "since": 7, "api_used": "\u662f", "lines": ["= {\n                eventId: 59,\n            ", "t = {\n              eventId: 62,\n            ", "58,\n      priority: events_emitter.EventPrior", "ntData));\n      if (eventData.data.isShow != ", "s-nocheck\n\n\n\nimport events_emitter from '@oho", "CallBack\");\n    if (eventData != null) {\n    ", "angeEvent = {\n      eventId: 58,\n      priori", "ventThree = {\n      eventId: 908,\n      prior", "08,\n      priority: events_emitter.EventPrior", "ateChangCallBack = (eventData) => {\n    conso", "ate\")\n              events_emitter.emit(backE", "ntData));\n      if (eventData.data.width != n", "ts-nocheck\n\n\nimport events_emitter from '@oho", "angeEvent = {\n      eventId: 92,\n      priori", "state\")\n            events_emitter.emit(backE", ":\" + JSON.stringify(eventData));\n      if (ev", "entData));\n      if(eventData.data.alignItems", "angeEvent = {\n      eventId: 93,\n      priori", ";\n      }\n      if (eventData.data.height != ", "92,\n      priority: events_emitter.EventPrior", "= {\n                eventId: 60,\n            ", "          priority: events_emitter.EventPrior", "eEventTwo = {\n      eventId: 907,\n      prior", "ority.LOW\n    }\n    events_emitter.on(stateCh", "      this.isShow = eventData.data.isShow;\n  ", "       this.width = eventData.data.width;\n   ", "  this.alignItems = eventData.data.alignItems", "07,\n      priority: events_emitter.EventPrior", "t = {\n              eventId: 61,\n            ", ":\" + JSON.stringify(eventData));\n      if(eve", "      this.height = eventData.data.height;\n  ", "angeEvent = {\n      eventId: 192,\n      prior"], "files": ["ohosPrompt.ets", "configuration.ets", "ImageEffectsJsunit.test.ets", "video.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "richText.ets", "column.ets", "checkboxGroup.ets", "sourceType.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "TextStyleJsunit.test.ets", "geometryTransition.ets", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "border.ets", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "scrollBar.ets", "FillModeJsunit.test.ets", "CalendarJsunit.test.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "TouchJsunit.test.ets", "transForm.ets", "LongPressGesture.test.ets", "path.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "focus.ets", "VideoJsunit.test.ets", "touch.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "background.ets", "SourceTypeJsunit.test.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "gauge.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "customDialogController.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "SearchJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "tapGesture.ets", "flexDirection.ets", "FlexJsunit.test.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "ListJsunit.test.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "ColorGradientJsunit.test.ets", "flex.ets", "MotionPathJsunit.test.ets", "gridContainer.ets", "gridPage.ets", "ShapeJsunit.test.ets", "enable.ets", "PieceCode.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "list.ets", "colorGradient.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "DatePickerJsunit.test.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "checkbox.ets", "TextAreaJsunit.test.ets", "circle.ets", "listItem.ets", "CustomDialogControllerJsunit.test.ets", "imageAnimator.ets", "bindPopup.ets", "search.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "direction2.ets", "mouseEvent.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "ohosMatrix4.ets", "CircleJsunit.test.ets", "divider.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "line.ets", "TransFormJsunit.test.ets", "priorityGesture.ets", "touchAble.ets", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "progress.ets", "datePicker.ets", "pageTransition.ets", "TabsJsunit.test.ets", "ShapeClippingJsunit.test.ets", "GridSettingsJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "areaChange.ets", "BindPopupJsunit.test.ets", "parallelGesture.ets", "select.ets", "timeStamp.ets", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "sharedTransition.ets", "gestureMode.ets", "refresh.ets", "motionPath.ets", "panel.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}]}