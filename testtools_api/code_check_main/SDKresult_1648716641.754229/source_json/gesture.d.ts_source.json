{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\gesture", "api": [{"api_class_name": "PanDirection", "api_method_all": "declare enum PanDirection {\n  \n  None,\n\n  \n  Horizontal,\n\n  \n  Left,\n\n  \n  Right,\n\n  \n  Vertical,\n\n  \n  Up,\n\n  \n  Down,\n\n  \n  All,\n}", "api_method_name": "PanDirection", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["ctionJsunit from './PanDirectionJsunit.test.ets';\nim", "      .setDirection(PanDirection.All)\n      .setDist", "calendarJsunit();\n  PanDirectionJsunit();\n  geometry", "  @State direction: PanDirection = PanDirection.All\n", "ion: PanDirection = PanDirection.All\n\n  build() {\n  ", "t.test.ets';\nimport PanDirectionJsunit from './PanDi"], "files": ["List.test.ets", "PanGesture.ets", "panDirection.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanDirection", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanDirection", "api_method_name": "Horizontal", "api_method_all": "Horizontal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 86, "since": 7, "api_used": "\u662f", "lines": ["Items).assertEqual('HorizontalAlign.Center')\n     ", "Items).assertEqual('HorizontalAlign.End');\n      c", "  });\n\n    it('enumsHorizontalAlignTest_0100', 0, ", "   uri: 'pages/enumsHorizontalAlign',\n      }\n    ", "eforeEach push enumsHorizontalAlign page error:' +", "Items).assertEqual('HorizontalAlign.Center');\n    ", "orationValue\": Axis.Horizontal\n          }\n       ", "Column0 alignItems-'HorizontalAlign.Center':\" + JS", "istDirection\": Axis.Horizontal\n          }\n       ", "rection: Axis= Axis.Horizontal\n  @State Begin: num", ".$attrs.alignItems-'HorizontalAlign.Start':\" + JSO", " ScrollBarDirection.Horizontal\n      };\n      try ", "t.ets';\nimport enmusHorizontalAlignJsunit from './", " getInspectorByKey('HorizontalAlign');\n      conso", "eforeEach push enumsHorizontalAlign page result:' ", " {\n  describe('enumsHorizontalAlign', function () ", "Column2 alignItems-'HorizontalAlign.End':\" + JSON.", " console.info(\"enumsHorizontalAlignTest_0100 compo", "\n      }.alignItems(HorizontalAlign.Start).width('", ").assertEqual('Axis.Horizontal');\n      console.in", "\n      }.alignItems(HorizontalAlign.End).width('90", "\n      }.alignItems(HorizontalAlign.Center).width(", "beforeEach get enumsHorizontalAlign state pages:' ", "        .alignItems(HorizontalAlign.Center)\n\n     ", ": HorizontalAlign = HorizontalAlign.Start;\n\n  onPa", "Column1 alignItems-'HorizontalAlign.Start':\" + JSO", " @State alignItems: HorizontalAlign = HorizontalAl", "ingJsunit();\n  enmusHorizontalAlignJsunit();\n}", "h('100%')\n    .key('HorizontalAlign')\n  }\n}\n", "Items(this.toggle ? HorizontalAlign.Start : Horizo", "Items).assertEqual('HorizontalAlign.Start');\n     ", "       \"alignItems\":HorizontalAlign.Center\n       ", "Items).assertEqual('HorizontalAlign.Start')\n      ", "Jsunit from './EnmusHorizontalAlignJsunit.test.ets", " console.info('enumsHorizontalAlignTest_0100 START", " console.info('enumsHorizontalAlignTest_0100 END')", "    direction: Axis.Horizontal,\n          reverse:", "en }) {\n      Text('Horizontal divider').fontSize(", "beforeEach get enumsHorizontalAlign state pages.na", "ection: Axis = Axis.Horizontal;\n  @State weekStyle", "zontalAlign.Start : HorizontalAlign.Center)\n  }\n\n ", "ble(ScrollDirection.Horizontal)\n\n      Scroll() {\n", "        .alignItems(HorizontalAlign.End)\n\n        ", "        .alignItems(HorizontalAlign.Start)\n\n      ", "===============enumsHorizontalAlign test beforeEac"], "files": ["ScrollBarJsunit.test.ets", "Slider.ets", "enumsHorizontalAlign.ets", "divider.ets", "column.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "videoProps.test.js", "EnmusHorizontalAlignJsunit.test.ets", "GridContainer.ets", "index.js", "ColumnJsunit.test.ets", "calendar.ets", "progressProps.test.js", "ScrollJsunit.test.ets", "Calendar.ets", "Column.ets", "ListJsunit.test.ets", "ScrollBar.ets", "List.test.ets", "motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanDirection", "api_method_name": "Left", "api_method_all": "Left,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 54, "since": 7, "api_used": "\u662f", "lines": ["tion: BadgePosition.Left,\n            maxCou", ".value.typeDirectionLeft);\n        console.i", "ement).assertEqual('Left')\n        console.i", "       placementPropLeft : this.placementPro", "tLeft:this.placementLeft,\n             place", ", left: this.paddingLeft })\n        .margin(", "sertEqual('placementLeft')\n        expect(ob", "= GradientDirection.LeftTop\n\n  build() {\n   ", "t = Placement.BottomLeft\n  @State placementT", "ement(\"typeDirectionLeft\").getInspector()\n  ", "ll,\n        typeLoopLeft : null,\n        typ", "nStyle(IndexerAlign.Left)\n        .onSelecte", "           placementLeft:this.placementLeft,", "  this.typeDirectionLeft = this.$element(\"ty", "marqueeDirectionPropLeft', 0, async function", "('GradientDirection.Left');\n      expect(obj", "('GradientDirection.LeftTop');\n      console", "('testbadgeplacementLeft START');\n        co", "ement(\"placementPropLeft\").getInspector()\n  ", "       typeDirectionLeft : this.typeDirectio", "ual(Placement.BottomLeft);\n      }\n      let", "('testbadgeplacementLeft', 0, async function", "Equal('typeDirectionLeft')\n        expect(ob", ") {\n          Text('Left').fontSize(25)\n    ", ",\n         placementLeft:null,\n         plac", "tion-'BadgePosition.Left'\" + JSON.stringify(", "  this.placementPropLeft = this.$element(\"pl", "       placementPropLeft : null,\n        pla", "('GradientDirection.LeftBottom');\n      cons", "ment = Placement.TopLeft\n  @State placementO", ": GradientDirection.Left,\n    colors: [[0xAE", ": this.typeDirectionLeft,\n            typeDi", ": GradientDirection.LeftBottom\n          }\n ", ": this.placementPropLeft,\n            placem", "            typeLoopLeft : this.typeLoopLeft", "Left : this.typeLoopLeft,\n            typeRi", "0px\"\n  @State marginLeft: string = \"10px\"\n  ", "ement(\"typeDirectionLeft\").getInspector()\n\n ", "Text(\"BadgePosition.Left\").fontSize(16)\n    ", "       this.typeLoopLeft = this.$element(\"ty", "t, left: this.marginLeft })\n        .constra", "This.value.placementLeft);\n        console.i", "       typeDirectionLeft : null,\n        typ", "  testbadgeplacementLeft\n      * @tc.desc   ", "   testPlacementPropLeft\n     * @tc.desc    ", "qual('BadgePosition.Left');\n      console.lo", "\"5\"\n  @State paddingLeft: string= \"5\"\n  @Sta", "      this.placementLeft = this.$element(\"pl", "tEqual(Placement.TopLeft);\n      }\n      let", ".$element(\"placementLeft\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "placement.ets", "GradientDirectionJsunit.test.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "colorGradient.ets", "gradientDirection.ets", "Text.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanDirection", "api_method_name": "Right", "api_method_all": "Right,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 60, "since": 7, "api_used": "\u662f", "lines": ["  });\n    },\n    setRightButton(e) {\n        ", "qual('BadgePosition.RightTop');\n      console", "('testbadgeplacementRight', 0, async function", "ype: ResponseType = RightClick;\n  @Builder Co", "ual(Placement.BottomRight);\n      }\n      let", ": GradientDirection.RightBottom\n          }\n ", "('testbadgeplacementRightTop', 0, async funct", "nStyle(IndexerAlign.Right)\n        .margin({ ", ": null,\n        typeRight : null,\n    },\n\n   ", ".$element(\"placementRight\").getInspector()\n  ", "       placementPropRight : this.placementPro", "       typeDirectionRight : null,\n        typ", ",\n         placementRightTop:null,\n         p", ": this.typeDirectionRight,\n            typeLo", "tion: BadgePosition.Right,\n            maxCou", "ition-BadgePosition.Right\" + JSON.stringify(o", "htTop:this.placementRightTop,\n             pl", "  testbadgeplacementRightTop\n      * @tc.desc", "Text(\"BadgePosition.RightTop\").fontSize(16)\n ", "tion: BadgePosition.RightTop,\n            max", "           placementRightTop:this.placementRi", "This.value.placementRight);\n        console.i", "ypeRight : this.typeRight,\n        }\n    },\n\n", "       placementPropRight : null,\n        pla", "('GradientDirection.RightBottom');\n      cons", "Right:this.placementRight,\n             place", "()\n        this.typeRight = this.$element(\"ty", "  this.placementPropRight = this.$element(\"pl", "tion-'BadgePosition.RightTop'\" + JSON.stringi", "ft,\n            typeRight : this.typeRight,\n ", "      this.placementRightTop = this.$element(", "('testbadgeplacementRight START');\n        co", ",\n         placementRight:null,\n         plac", "('testbadgeplacementRightTop START');\n       ", ".$element(\"placementRightTop\").getInspector()", "sertEqual('placementRight')\n        expect(ob", "      this.placementRight = this.$element(\"pl", ") {\n          Text('Right').fontSize(25)\n    ", "t = Placement.BottomRight\n\n  @Builder popupBu", "  this.typeDirectionRight = this.$element(\"ty", "       typeDirectionRight : this.typeDirectio", "  testbadgeplacementRight\n      * @tc.desc   ", "qual('BadgePosition.Right');\n      console.lo", "ement(\"typeDirectionRight\").getInspector()\n  ", "tEqual(Placement.TopRight);\n      }\n      let", "ment = Placement.TopRight\n  @State placementT", "           placementRight:this.placementRight", ": this.placementPropRight,\n            placem", "ement(\"placementPropRight\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "GradientDirectionJsunit.test.ets", "placement.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "bindContextMenu.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanDirection", "api_method_name": "Vertical", "api_method_all": "Vertical,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 99, "since": 7, "api_used": "\u662f", "lines": ["nValue: Axis = Axis.Vertical\n  @State value: num", "ber = 40\n  @State inVerticalSetValue: number = 4", "ble(ScrollDirection.Vertical).scrollBar(BarState", "er = 40\n  @State outVerticalSetValue: number = 4", "             this.inVerticalSetValue = value\n   ", "'ScrollBarDirection.Vertical');\n      console.in", ".listDirection(Axis.Vertical)\n        .key('Navi", " getInspectorByKey('VerticalAlign');\n      conso", "beforeEach get enumsVerticalAlign state pages.na", "th: 1 }).alignItems(VerticalAlign.Bottom).justif", "ection: Axis = Axis.Vertical;\n  @State editMode:", "n = ScrollDirection.Vertical;\n  @State scrollBar", "\n      }.alignItems(VerticalAlign.Center).height", " console.info('enumsVerticalAlignTest_0100 START", " ScrollBarDirection.Vertical;\n  @State stateValu", "'ScrollBarDirection.Vertical');\n      done();\n  ", "  \"direction\": Axis.Vertical,\n          }\n      ", "beforeEach get enumsVerticalAlign state pages:' ", "h: 1 })\n      .key('VerticalAlign')\n    }.width(", " console.info('enumsVerticalAlignTest_0100 END')", "ms: VerticalAlign = VerticalAlign.Center\n  @Stat", "   uri: 'pages/enumsVerticalAlign',\n      }\n    ", "    direction: Axis.Vertical\n          })\n      ", "ble(ScrollDirection.Vertical)\n\n        ScrollBar", "Items).assertEqual('VerticalAlign.Center');\n    ", "al('ScrollDirection.Vertical');\n      done();\n  ", ").assertEqual('Axis.Vertical');\n      expect(obj", "            this.outVerticalSetValue = value\n   ", " @State alignItems: VerticalAlign = VerticalAlig", "\": \"ScrollDirection.Vertical\"\n          }\n      ", "th: 1 }).alignItems(VerticalAlign.Center).justif", ".listDirection(Axis.Vertical) // \u6392\u5217\u65b9\u5411\n        .d", "        Text(this.inVerticalSetValue.toFixed(0))", "al('ScrollDirection.Vertical');\n      expect(obj", "1F3F5)\n\n      Text('Vertical divider').fontSize(", "eforeEach push enumsVerticalAlign page result:' ", "        if (!('enumsVerticalAlign' == pages.name", "       Text(this.outVerticalSetValue.toFixed(0))", "\n      }.alignItems(VerticalAlign.Top).height('1", "  });\n\n    it('enumsVerticalAlignTest_0100', 0, ", "\n      }.alignItems(VerticalAlign.Center).width(", "fault function enumsVerticalAlignJsunit() {\n  de", " {\n  describe('enumsVerticalAlign', function () ", "eforeEach push enumsVerticalAlign page error:' +", "     value: this.outVerticalSetValue,\n          ", "      value: this.inVerticalSetValue,\n          ", " console.info(\"enumsVerticalAlignTest_0100 compo"], "files": ["dividerProps.test.js", "canvas2.ets", "ScrollBarJsunit.test.ets", "tabsProps.test.js", "canvas.ets", "Row.ets", "Navigation.ets", "divider.ets", "enumsVerticalAlign.ets", "ScrollerBarJsunit.test.ets", "navigation.ets", "Scroll.ets", "videoProps.test.js", "EnmusHorizontalAlignJsunit.test.ets", "swiperProps.test.js", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "List.ets", "RowJsunit.test.ets", "index.js", "ScrollCodeJsunit.test.ets", "edgeEffect.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "slider.ets", "ScrollJsunit.test.ets", "Calendar.ets", "ListJsunit.test.ets", "ScrollBar.ets", "row.ets", "scrollCode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanDirection", "api_method_name": "Up", "api_method_all": "Up,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 162, "since": 7, "api_used": "\u662f", "lines": [" .textCase(TextCase.UpperCase)\n        .de", "sertEqual('TextCase.UpperCase')\n      expe", "sertEqual('TextCase.UpperCase');\n      don", "  })\n      .onActionUpdate((event: PanGest", "aseValue\": TextCase.UpperCase\n          }\n", "  this.eventType = 'Up'\n        }\n        ", ".type === TouchType.Up) {\n            this", "  this.eventType = 'Up'\n          }\n      ", "    console.info(\"onUpdate\");\n        })\n ", "  this.eventType = 'Up'\n            consol", " .textCase(TextCase.UpperCase)\n           ", "sion)\n        .allowUpdate(true)\n        .", ".type === TouchType.Up) {\n          this.e", "     message: 'pinchUpdate:\\n' + message\n ", "sertEqual(\"TextCase.UpperCase\")\n      expe", "  })\n      .onActionUpdate((event: Gesture", "  this.eventType = 'Up'\n      }\n      if (", "touch] eventType is Up\")\n            this.", "    type: TouchType.Up,\n    }\n    console.", ");\n    },\n\n    pinchUpdate(event){\n       ", "      })\n        .onUpdate(() => {\n       ", ".type === TouchType.Up) {\n        this.eve"], "files": ["ResponseRegion.ets", "index.js", "PanGesture.ets", "Utils.ets", "panDirection.ets", "Video.ets", "touch.ets", "FormComponentPage.ets", "TextJsunit.test.ets", "Span.ets", "gestureMode.ets", "sourceType.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanDirection", "api_method_name": "Down", "api_method_all": "Down,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 65, "since": 7, "api_used": "\u662f", "lines": ["    if (this.isCountDown) {\n        Image($r", "   Text(this.isCountDown ? 'Count Down' : 'S", "  this.eventType = 'Down'\n          }\n      ", "  this.eventType = 'Down'\n            consol", "le.log(\"webTest : onDownloadStart url : \" + ", "      })\n        .onDownloadStart((e) => {\n ", "        this.isCountDown = !this.isCountDown", "({ count: this.countDownStartValue, costOfOn", "le.log(\"webTest : onDownloadStart contentLen", "Down = !this.isCountDown\n        })\n        ", "le.log(\"webTest : onDownloadStart origin : \"", "qual('ImageFit.ScaleDown')\n      console.inf", "le.log(\"webTest : onDownloadStart userAgent ", " this.$element(\"typeDownload\").getInspector(", "  Text(`${this.countDownStartValue}`)\n      ", "    type: TouchType.Down,\n    }\n    console.", ".type === TouchType.Down) {\n            this", ".type === TouchType.Down) {\n          this.e", "false\n  @State countDownStartValue: number =", "mponent\nstruct CountDownComponent {\n  @Prop ", ".type === TouchType.Down) {\n        this.eve", "_TYPE).assertEqual('Down')\n      }\n      var", "          this.countDownStartValue += 1\n    ", "sCountDown ? 'Count Down' : 'Stopwatch')\n   ", "})\n            CountDownComponent({ count: t", "Download : this.typeDownload, typeNone : thi", " Button(this.isCountDown ? 'Swtich to Stopwa", ": null,\n        typeDownload : null,\n       ", " : 'Switch to Count Down')\n        .onClick(", "ctFit(ImageFit.ScaleDown)\n          .key('im", "p {\n  @State isCountDown: boolean = true\n\n  ", "    type: TouchType.Down,\n      }\n      var ", "le.log(\"webTest : onDownloadStart contentDis", "touch] eventType is Down\")\n            this.", "ue, type: TouchType.Down\n      }\n      var c", "          this.countDownStartValue -= 1\n    ", "le.log(\"webTest : onDownloadStart mimetype :", "\n        Text('Pull Down and refresh: ' + th", "  this.eventType = 'Down'\n        }\n        ", "  this.eventType = 'Down'\n      }\n      if (", " this.typeText, typeDownload : this.typeDown", "()\n        this.typeDownload = this.$element", "('textTimer notCountDown utc is\uff1a' + utc + ',"], "files": ["ResponseRegion.ets", "index.js", "ImageJsunit.test.ets", "Utils.ets", "PanGesture.ets", "touch.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "Image.ets", "textTimer.ets", "aboutToDisappear.ets", "ResponseRegionJsunit.test.ets", "refresh.ets", "sourceType.ets", "SourceTypeJsunit.test.ets", "refreshProps.test.js", "Prop.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanDirection", "api_method_name": "All", "api_method_all": "All,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 613, "since": 7, "api_used": "\u662f", "lines": ["rt {describe, beforeAll, beforeEach, afterE", "ch, afterEach, afterAll, it, expect} from \""], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "CommonJsunit.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "transition.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "SystemAppJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "BasicJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "ContentStorage.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "swiperProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SwipeDirection", "api_method_all": "declare enum SwipeDirection {\n  \n  None,\n\n  \n  Horizontal,\n\n  \n  Vertical,\n\n  \n  All,\n}", "api_method_name": "SwipeDirection", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SwipeDirection", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SwipeDirection", "api_method_name": "Horizontal", "api_method_all": "Horizontal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 86, "since": 7, "api_used": "\u662f", "lines": ["Items).assertEqual('HorizontalAlign.Center')\n     ", "Items).assertEqual('HorizontalAlign.End');\n      c", "  });\n\n    it('enumsHorizontalAlignTest_0100', 0, ", "   uri: 'pages/enumsHorizontalAlign',\n      }\n    ", "eforeEach push enumsHorizontalAlign page error:' +", "Items).assertEqual('HorizontalAlign.Center');\n    ", "orationValue\": Axis.Horizontal\n          }\n       ", "Column0 alignItems-'HorizontalAlign.Center':\" + JS", "istDirection\": Axis.Horizontal\n          }\n       ", "rection: Axis= Axis.Horizontal\n  @State Begin: num", ".$attrs.alignItems-'HorizontalAlign.Start':\" + JSO", " ScrollBarDirection.Horizontal\n      };\n      try ", "t.ets';\nimport enmusHorizontalAlignJsunit from './", " getInspectorByKey('HorizontalAlign');\n      conso", "eforeEach push enumsHorizontalAlign page result:' ", " {\n  describe('enumsHorizontalAlign', function () ", "Column2 alignItems-'HorizontalAlign.End':\" + JSON.", " console.info(\"enumsHorizontalAlignTest_0100 compo", "\n      }.alignItems(HorizontalAlign.Start).width('", ").assertEqual('Axis.Horizontal');\n      console.in", "\n      }.alignItems(HorizontalAlign.End).width('90", "\n      }.alignItems(HorizontalAlign.Center).width(", "beforeEach get enumsHorizontalAlign state pages:' ", "        .alignItems(HorizontalAlign.Center)\n\n     ", ": HorizontalAlign = HorizontalAlign.Start;\n\n  onPa", "Column1 alignItems-'HorizontalAlign.Start':\" + JSO", " @State alignItems: HorizontalAlign = HorizontalAl", "ingJsunit();\n  enmusHorizontalAlignJsunit();\n}", "h('100%')\n    .key('HorizontalAlign')\n  }\n}\n", "Items(this.toggle ? HorizontalAlign.Start : Horizo", "Items).assertEqual('HorizontalAlign.Start');\n     ", "       \"alignItems\":HorizontalAlign.Center\n       ", "Items).assertEqual('HorizontalAlign.Start')\n      ", "Jsunit from './EnmusHorizontalAlignJsunit.test.ets", " console.info('enumsHorizontalAlignTest_0100 START", " console.info('enumsHorizontalAlignTest_0100 END')", "    direction: Axis.Horizontal,\n          reverse:", "en }) {\n      Text('Horizontal divider').fontSize(", "beforeEach get enumsHorizontalAlign state pages.na", "ection: Axis = Axis.Horizontal;\n  @State weekStyle", "zontalAlign.Start : HorizontalAlign.Center)\n  }\n\n ", "ble(ScrollDirection.Horizontal)\n\n      Scroll() {\n", "        .alignItems(HorizontalAlign.End)\n\n        ", "        .alignItems(HorizontalAlign.Start)\n\n      ", "===============enumsHorizontalAlign test beforeEac"], "files": ["ScrollBarJsunit.test.ets", "Slider.ets", "enumsHorizontalAlign.ets", "divider.ets", "column.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "videoProps.test.js", "EnmusHorizontalAlignJsunit.test.ets", "GridContainer.ets", "index.js", "ColumnJsunit.test.ets", "calendar.ets", "progressProps.test.js", "ScrollJsunit.test.ets", "Calendar.ets", "Column.ets", "ListJsunit.test.ets", "ScrollBar.ets", "List.test.ets", "motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwipeDirection", "api_method_name": "Vertical", "api_method_all": "Vertical,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 99, "since": 7, "api_used": "\u662f", "lines": ["nValue: Axis = Axis.Vertical\n  @State value: num", "ber = 40\n  @State inVerticalSetValue: number = 4", "ble(ScrollDirection.Vertical).scrollBar(BarState", "er = 40\n  @State outVerticalSetValue: number = 4", "             this.inVerticalSetValue = value\n   ", "'ScrollBarDirection.Vertical');\n      console.in", ".listDirection(Axis.Vertical)\n        .key('Navi", " getInspectorByKey('VerticalAlign');\n      conso", "beforeEach get enumsVerticalAlign state pages.na", "th: 1 }).alignItems(VerticalAlign.Bottom).justif", "ection: Axis = Axis.Vertical;\n  @State editMode:", "n = ScrollDirection.Vertical;\n  @State scrollBar", "\n      }.alignItems(VerticalAlign.Center).height", " console.info('enumsVerticalAlignTest_0100 START", " ScrollBarDirection.Vertical;\n  @State stateValu", "'ScrollBarDirection.Vertical');\n      done();\n  ", "  \"direction\": Axis.Vertical,\n          }\n      ", "beforeEach get enumsVerticalAlign state pages:' ", "h: 1 })\n      .key('VerticalAlign')\n    }.width(", " console.info('enumsVerticalAlignTest_0100 END')", "ms: VerticalAlign = VerticalAlign.Center\n  @Stat", "   uri: 'pages/enumsVerticalAlign',\n      }\n    ", "    direction: Axis.Vertical\n          })\n      ", "ble(ScrollDirection.Vertical)\n\n        ScrollBar", "Items).assertEqual('VerticalAlign.Center');\n    ", "al('ScrollDirection.Vertical');\n      done();\n  ", ").assertEqual('Axis.Vertical');\n      expect(obj", "            this.outVerticalSetValue = value\n   ", " @State alignItems: VerticalAlign = VerticalAlig", "\": \"ScrollDirection.Vertical\"\n          }\n      ", "th: 1 }).alignItems(VerticalAlign.Center).justif", ".listDirection(Axis.Vertical) // \u6392\u5217\u65b9\u5411\n        .d", "        Text(this.inVerticalSetValue.toFixed(0))", "al('ScrollDirection.Vertical');\n      expect(obj", "1F3F5)\n\n      Text('Vertical divider').fontSize(", "eforeEach push enumsVerticalAlign page result:' ", "        if (!('enumsVerticalAlign' == pages.name", "       Text(this.outVerticalSetValue.toFixed(0))", "\n      }.alignItems(VerticalAlign.Top).height('1", "  });\n\n    it('enumsVerticalAlignTest_0100', 0, ", "\n      }.alignItems(VerticalAlign.Center).width(", "fault function enumsVerticalAlignJsunit() {\n  de", " {\n  describe('enumsVerticalAlign', function () ", "eforeEach push enumsVerticalAlign page error:' +", "     value: this.outVerticalSetValue,\n          ", "      value: this.inVerticalSetValue,\n          ", " console.info(\"enumsVerticalAlignTest_0100 compo"], "files": ["dividerProps.test.js", "canvas2.ets", "ScrollBarJsunit.test.ets", "tabsProps.test.js", "canvas.ets", "Row.ets", "Navigation.ets", "divider.ets", "enumsVerticalAlign.ets", "ScrollerBarJsunit.test.ets", "navigation.ets", "Scroll.ets", "videoProps.test.js", "EnmusHorizontalAlignJsunit.test.ets", "swiperProps.test.js", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "List.ets", "RowJsunit.test.ets", "index.js", "ScrollCodeJsunit.test.ets", "edgeEffect.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "slider.ets", "ScrollJsunit.test.ets", "Calendar.ets", "ListJsunit.test.ets", "ScrollBar.ets", "row.ets", "scrollCode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwipeDirection", "api_method_name": "All", "api_method_all": "All,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 613, "since": 7, "api_used": "\u662f", "lines": ["rt {describe, beforeAll, beforeEach, afterE", "ch, afterEach, afterAll, it, expect} from \""], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "CommonJsunit.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "transition.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "SystemAppJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "BasicJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "ContentStorage.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "swiperProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureMode", "api_method_all": "declare enum GestureMode {\n  \n  Sequence,\n\n  \n  Parallel,\n\n  \n  Exclusive,\n}", "api_method_name": "GestureMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["olid\n  @State mode: GestureMode = GestureMode.Seque", "playModeJsunit();\n  GestureModeJsunit();\n  basicJsu", "eModeJsunit from './GestureModeJsunit.test.ets';\nim", "e(\n    GestureGroup(GestureMode.Sequence,\n    LongP", "mode: GestureMode = GestureMode.Sequence\n\n  build()", "t.test.ets';\nimport GestureModeJsunit from './Gestu"], "files": ["List.test.ets", "gestureMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureMode", "api_method_name": "Sequence", "api_method_all": "Sequence,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["reGroup(GestureMode.Sequence,\n    LongPressGestu", "eMode = GestureMode.Sequence\n\n  build() {\n    Fl"], "files": ["gestureMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureMode", "api_method_name": "Parallel", "api_method_all": "Parallel,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["stureJsunit from './ParallelGestureJsunit.test.e"], "files": ["List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureMode", "api_method_name": "Exclusive", "api_method_all": "Exclusive,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GestureMask", "api_method_all": "declare enum GestureMask {\n  \n  Normal,\n\n  \n  IgnoreInternal,\n}", "api_method_name": "GestureMask", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["onAction'\n      }), GestureMask.IgnoreInternal\n    "], "files": ["priorityGesture.ets", "parallelGesture.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureMask", "api_method_name": "Normal", "api_method_all": "Normal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 102, "since": 7, "api_used": "\u662f", "lines": ["ntStyle\": FontStyle.Normal\n          }\n       ", "assertEqual('Sticky.Normal');\n      console.in", ") {\n        Text(\"3.Normal\")\n      }.type(Butt", "ertEqual('FontStyle.Normal');\n      done();\n  ", "putType = InputType.Normal;\n  @State fontSize:", "rtEqual('FontWeight.Normal');\n      done();\n  ", "sertEqual(\"TextCase.Normal\")\n      expect(obj.", "rtEqual('ButtonType.Normal')\n      console.inf", "       Text('sticky:Normal , item2222')\n      ", "       Text('sticky:Normal , click me edit lis", "ky: Sticky = Sticky.Normal;\n  @State editMode:", "emState = ItemState.Normal\n\n  build() {\n    St", "sertEqual('TextCase.Normal');\n      done();\n  ", "    Text('Orange 18 Normal source-sans-pro tex", "Waiting ? ItemState.Normal : ItemState.Waiting", "PlayMode = PlayMode.Normal\n\n  onPageShow() {\n ", "fontStyle(FontStyle.Normal)\n        .fontColor", " .textCase(TextCase.Normal)\n            .fontC", "emState = ItemState.Normal\n  @State secondStat", "  }.type(ButtonType.Normal)\n      .backgroundC", "te.Skip ? ItemState.Normal : ItemState.Skip\n  ", "emState = ItemState.Normal\n  @State disabled: ", "onType = ButtonType.Normal;\n  @State fontSizeV", "', style: FontStyle.Normal }\n  @State fontColo", "rtEqual(\"FontWeight.Normal\")\n      expect(obj.", "fontStyle(FontStyle.Normal)\n        .fontWeigh", "', style: FontStyle.Normal })\n        .key('se", "PlayMode = PlayMode.Normal\n\n  build() {\n    Fl", " { type: ButtonType.Normal })\n            .bac", "ntWeight(FontWeight.Normal)\n        .textAlign", "rtEqual('ButtonType.Normal');\n      done();\n  ", "sertEqual('TextCase.Normal')\n      expect(obj.", " TextCase= TextCase.Normal\n  @State fontSizeVa", "', style: FontStyle.Normal })\n        .selecte", "   style: FontStyle.Normal\n        })\n        ", "r, style: FontStyle.Normal })\n        .itemSiz", "', style: FontStyle.Normal\n      };\n      try ", "    }.sticky(Sticky.Normal)\n          .editabl", "', style: FontStyle.Normal })\n        .optionF", " TextCase= TextCase.Normal\n  @State decoration"], "files": ["animate.ets", "Select.ets", "SelectJsunit.test.ets", "ListItemJsunit.test.ets", "Stepper.ets", "ListItem.ets", "playMode.ets", "Text.ets", "SpanJsunit.test.ets", "textStyle.ets", "ButtonJsunit.test.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "listItemProps.test.js", "TextStyleJsunit.test.ets", "TextArea.ets", "index.js", "Link.ets", "TextInputJsunit.test.ets", "stepper.ets", "select.ets", "textArea.ets", "textInput.ets", "listItem.ets", "Button.ets", "search.ets", "button.ets", "span.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureMask", "api_method_name": "IgnoreInternal", "api_method_all": "IgnoreInternal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["    }), GestureMask.IgnoreInternal\n    )\n  }\n}"], "files": ["priorityGesture.ets", "parallelGesture.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FingerInfo", "api_method_all": "interface FingerInfo {\n  \n  id: number;\n\n  \n  globalX: number;\n\n  \n  globalY: number;\n\n  \n  localX: number;\n\n  \n  localY: number;\n}", "api_method_name": "FingerInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["ole.log('PanGesture FingerInfo' + event.fingerList", " + event.fingerList.FingerInfo);\n        console.l"], "files": ["PanGesture.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FingerInfo", "api_method_name": "id", "api_method_all": "id: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8283, "since": 8, "api_used": "\u662f", "lines": ["emsColumn\")\n      .width('90%')\n      .bor", "eAppear: string = 'Hide Text'\n  private my", "nSelf,height:100').width('34%').height(100", "        this.strokeWidthValue = eventData.", "Basis\")\n          .width('60%')\n          ", "ole.log(\"imageData_width=\" + imageData.wid", "')\n      .border({ width: 1 })\n      .alig", "key('flex')\n      .width('90%')\n      .hei", "entData.data.strokeWidthValue != null) {\n ", ".context)\n        .width('100%').height('4", "hrink\")\n          .width('50%')\n          ", "/bg.jpg\");\n    let width = img.width;\n    ", "{\n        Column().width('50%').height(30)", "idth(`${this.strokeWidthValue}`)\n        .", "gn.Center)\n      }.width('90%').height(120", ".alignItems)\n    }.width('100%').padding({", "gnSelf,height:80').width('33%').height(80)", "50;\n  @State strokeWidthValue: string = 20", "   let width = img.width;\n    let height =", "ontColor(0xCCCCCC).width('90%')\n      Flex", "if (eventData.data.width != null) {\n      ", "hrink')\n          .width('40%')\n          ", "}`)\n        .strokeWidth(`${this.strokeWid", "\n    }.padding(30).width('100%')\n  }\n}", "ontColor(0xCCCCCC).width('90%')\n      Colu", "gebitmap_width=\" + width);\n    console.log", "entData.data.strokeWidthValue;\n      }\n   ", "rink(2)\n          .width('40%')\n          ", "se().width(`${this.width}`).height(`${this", ";\n        })\n    }.width('100%').height('1", " {\n      Ellipse().width(`${this.width}`).", "tretch)\n          .width('33%')\n          ", "sage: 'The text is hidden', duration: 2000", ": 30 })\n    }\n    .width('100%').height('1", ")\n        Column().width('50%').height(30)", "nabled)\n    }\n    .width('100%')\n    .padd", "or(0xAFEEEE)\n    }.width('100%').margin({ ", "is.changeAppear = 'Hide Text'\n            ", "hValue}`)\n        .width(200)\n        .hei", "h = eventData.data.width;\n      }\n      if", "y('ellipse')\n    }.width('100%').height('1", ".height(200)\n    }.width('100%').margin({ ", "e.log(\"imagebitmap_width=\" + width);\n    c", "Example {\n  @State width: string = \"200px\"", "ll) {\n        this.width = eventData.data."], "files": ["pageTransition2.ets", "ohosPrompt.ets", "listItemGroupProps.test.js", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "tabContentProps.test.js", "textProps.test.js", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "placement.ets", "playMode.ets", "toolbarProps.test.js", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "column.ets", "Panel.ets", "Progress.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "toolbarItemProps.test.js", "TapGesture.test.ets", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "DividerJsunit.test.ets", "ScrollCodeJsunit.test.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "badgeProps.test.js", "scrollBar.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "formProps.test.js", "focus.ets", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "stackProps.test.js", "Text.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "GridJsunit.test.ets", "refreshProps.test.js", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "PanGesture.ets", "richtextProps.test.js", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "imageAnimatorProps.test.js", "enumsImage.ets", "enable.ets", "PieceCode.ets", "tabsProps.test.js", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "popupProps.test.js", "SubscribaleAbstractJsunit.test.ets", "ohosRouterB.ets", "ColumnSplit.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "BackgroundJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "animateTransformProps.test.js", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pieceProps.test.js", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "animateMotionProps.test.js", "selectProps.test.js", "grid.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "gridColProps.test.js", "textareaProps.test.js", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animateProps.test.js", "animate.ets", "buttonProps.test.js", "List.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "BorderJsunit.test.ets", "direction2.ets", "mouseEvent.ets", "RowSplit.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "switchProps.test.js", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "enumsFlexAlign.ets", "Path.ets", "commonComponentJsApi.test.js", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "chartProps.test.js", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "TabsJsunit.test.ets", "swiperProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "timeStamp.ets", "Toggle.ets", "slider.ets", "NavigationJsunit.test.ets", "listProps.test.js", "aboutToDisappear.ets", "progressProps.test.js", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FingerInfo", "api_method_name": "globalX", "api_method_all": "globalX: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2114, "since": 8, "api_used": "\u662f", "lines": ["ole.log('PanGesture globalX' + event.globalX);\n", "t.changedTouches[0].globalX\n        var changeG", "nt.type\n        var globalX = event.globalX\n   ", "     var message = 'globalX--' + globalX + ',gl", "pe + ',globalX--' + globalX +\n        ',globalY", "'type--' + type + ',globalX--' + globalX +\n    ", " = event.touches[0].globalX\n        var globalY", "re globalX' + event.globalX);\n        console.l", "var globalX = event.globalX\n        var globalY", "age = 'globalX--' + globalX + ',globalY--' + gl", "event){\n        var globalX = event.touches[0]."], "files": ["PanGesture.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FingerInfo", "api_method_name": "globalY", "api_method_all": "globalY: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2114, "since": 8, "api_used": "\u662f", "lines": ["globalX +\n        ',globalY--' + globalY + ',ti", " = event.touches[0].globalY\n        var localX ", "lX--' + globalX + ',globalY--' + globalY +\n    ", "lX + ',globalY--' + globalY +\n        ',localX-", "t.changedTouches[0].globalY\n        var changeL", "     ',globalY--' + globalY + ',timestamp--' + ", "globalX\n        var globalY = event.touches[0].", "var globalY = event.globalY\n        var timesta", "globalX\n        var globalY = event.globalY\n   ", "ole.log('PanGesture globalY' + event.globalY);\n", "re globalY' + event.globalY);\n        console.l"], "files": ["PanGesture.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FingerInfo", "api_method_name": "localX", "api_method_all": "localX: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 884, "since": 8, "api_used": "\u662f", "lines": ["ole.log('PanGesture localX' + event.localX);\n ", "ure localX' + event.localX);\n        console.l", "is.eventAction + '\\nlocalXY=(' + event.x + ','", "globalY +\n        ',localX--' + localX + ',loc", "t.changedTouches[0].localX\n        var changeL", "globalY\n        var localX = event.touches[0].", " = event.touches[0].localX\n        var localY ", "+ event.action + '\\nlocalXY=(' + event.x + ','", "      ',localX--' + localX + ',localY--' + loc"], "files": ["mouseEvent.ets", "PanGesture.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FingerInfo", "api_method_name": "localY", "api_method_all": "localY: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 882, "since": 8, "api_used": "\u662f", "lines": [" = event.touches[0].localY\n        var size = ", "alX--' + localX + ',localY--' + localY  + ',si", "ure localY' + event.localY);\n        console.l", "t.changedTouches[0].localY\n        var changeS", "ole.log('PanGesture localY' + event.localY);\n ", "alX + ',localY--' + localY  + ',size--' + size", ".localX\n        var localY = event.touches[0]."], "files": ["PanGesture.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureEvent", "api_method_all": "interface GestureEvent extends BaseEvent {\n  \n  repeat: boolean;\n\n  \n  fingerList: FingerInfo[];\n\n  \n  offsetX: number;\n\n  \n  offsetY: number;\n\n  \n  angle: number;\n\n  \n  speed: number;\n\n  \n  scale: number;\n\n  \n  pinchCenterX: number;\n\n  \n  pinchCenterY: number;\n}", "api_method_name": "GestureEvent", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["onUpdate((event: PanGestureEvent) => {\n        this.", "ctionUpdate((event: GestureEvent) => {\n        this.", "ionStart((event: PanGestureEvent) => {\n        conso", "  .onAction((event: GestureEvent) => {\n        if (e"], "files": ["PanGesture.ets", "panDirection.ets", "gestureMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureEvent", "api_method_name": "repeat", "api_method_all": "repeat: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 342, "since": 7, "api_used": "\u662f", "lines": ["attrs.sweepGradient.repeating).assertEqual('tr", "t(() => {\n      var repeatoptions = {\n        ", "attrs.sweepGradient.repeating).assertEqual('fa", "{\n        if (event.repeat) {this.count++}\n   ", "xFCD1D1, 1.0]],\n    repeating: true\n  };\n  @St", "t('background image repeat along Y').fontSize(", "tring).assertEqual('repeat');\n      }\n      le", "None: null,\n        repeatCountProp : null,\n  ", "ntProp,\n            repeatCountPropNone : this", "is.animation.update(repeatoptions);\n      this", "createPattern(img, 'repeat');\n    this.context", "ctor()\n        this.repeatCountPropNone = this", "ttrs.radialGradient.repeating).assertEqual('fa", "ctor()\n        this.repeatCountProp = this.$el", "ttrs.radialGradient.repeating).assertEqual('tr", "eatCountProp : this.repeatCountProp,\n         ", "ne = this.$element(\"repeatCountPropNone\").getI", "ttrs.linearGradient.repeating).assertEqual('tr", "   this.animation.onrepeat(() => {\n      var r", "ttrs.linearGradient.repeating).assertEqual('fa", "rop : null,\n        repeatCountPropNone : null", "opNone,\n            repeatCountProp : this.rep", "1D1, 1.0]],\n        repeating: false\n      };\n", "op = this.$element(\"repeatCountProp\").getInspe", "t('background image repeat along X').fontSize(", "xFCD1D1, 1.0]],\n    repeating: true\n  };\n\n  pr", " LongPressGesture({ repeat: true })\n      .onA", "ountPropNone : this.repeatCountPropNone,\n     "], "files": ["backgroundAndSizeSetting.ets", "animateTransformProps.test.js", "index.js", "animateProps.test.js", "animateMotionProps.test.js", "ImageAnimatorJsunit.test.ets", "longPressGesture.ets", "background.ets", "animatorOption.ets", "gestureMode.ets", "enumsImage.ets", "colorGradient.ets", "canvas.ets", "basicabilityapi.test.js", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureEvent", "api_method_name": "fingerList", "api_method_all": "fingerList: FingerInfo[]", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["FingerInfo' + event.fingerList.FingerInfo);\n      ", "ole.log('PanGesture fingerList' + event.fingerList", "fingerList' + event.fingerList);\n        console.l"], "files": ["PanGesture.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureEvent", "api_method_name": "offsetX", "api_method_all": "offsetX: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": [" color: 0x80000000, offsetX: 0x80000000, offset", "number = 0\n  @State offsetX: number = 0\n  @Stat", "bjNew.$attrs.shadow.offsetX).assertEqual(\"21474", "bjNew.$attrs.shadow.offsetX).assertEqual(\"0.000", "eExample {\n  @State offsetX: number = 0\n  @Stat", " color: 0x7FFFFFFF, offsetX: 0x7FFFFFFF, offset", "bjNew.$attrs.shadow.offsetX).assertEqual(\"10.00", "S_SHADOW_OFFSETX = 'offsetX'\nconst ATTRS_SHADOW", "his.offsetX = event.offsetX\n        this.offset", " color: Color.Gray, offsetX: 10, offsetY: 10\n  ", " color: Color.Gray, offsetX: 5, offsetY: 5 }\n  ", "r', color: 'error', offsetX: 'error', offsetY: ", "translate({ x: this.offsetX, y: this.offsetY, z", "t(obj.$attrs.shadow.offsetX).assertEqual(\"5.000", ") => {\n        this.offsetX = event.offsetX\n   ", "hExample {\n  @State offsetX: number = 0\n  @Stat", "ffset:\\nX: ' + this.offsetX + '\\n' + 'Y: ' + th"], "files": ["PanGesture.ets", "panDirection.ets", "imageEffects.ets", "ImageEffectsJsunit.test.ets", "Constants.ets", "gestureMode.ets", "motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureEvent", "api_method_name": "offsetY", "api_method_all": "offsetY: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["'\\n' + 'Y: ' + this.offsetY)\n    }\n    .height(", "is.offsetX, y: this.offsetY, z: 5 })\n    .heigh", "r.Gray, offsetX: 5, offsetY: 5 }\n  @State grays", "S_SHADOW_OFFSETY = 'offsetY'\nconst ATTRS_WINDOW", "t(obj.$attrs.shadow.offsetY).assertEqual(\"5.000", "his.offsetY = event.offsetY\n      })\n      .onA", "is.offsetX, y: this.offsetY, z: 5 })\n    .gestu", "bjNew.$attrs.shadow.offsetY).assertEqual(\"21474", "ffsetX\n        this.offsetY = event.offsetY\n   ", "bjNew.$attrs.shadow.offsetY).assertEqual(\"10.00", "bjNew.$attrs.shadow.offsetY).assertEqual(\"0.000", "'\\n' + 'Y: ' + this.offsetY)\n    }\n    .key('ge", "ffsetX: 0x80000000, offsetY: 0x80000000 };\n    ", "ffsetX: 0x7FFFFFFF, offsetY: 0x7FFFFFFF };\n    ", ", offsetX: 'error', offsetY: 'error' };\n      t", "'\\n' + 'Y: ' + this.offsetY)\n    }\n    .key('pa", "number = 0\n  @State offsetY: number = 0\n  @Stat", ".Gray, offsetX: 10, offsetY: 10\n      };\n      ", "is.offsetX, y: this.offsetY, z: 5 })\n    .touch", "his.offsetY = event.offsetY\n        console.log"], "files": ["PanGesture.ets", "panDirection.ets", "imageEffects.ets", "ImageEffectsJsunit.test.ets", "Constants.ets", "gestureMode.ets", "motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureEvent", "api_method_name": "angle", "api_method_all": "angle: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["centerY: '50%',\n    angle: 300\n  }\n  @State t", "ttrs.linearGradient.angle).assertEqual('80.00", "t(obj.$attrs.rotate.angle).assertEqual('300.0", "ate({x:1, y:1, z:2, angle:30})\n  @State matri", "ntValue = {\n        angle: 80,\n        direct", "bjNew.$attrs.rotate.angle).assertEqual('100.0", "    // Draw red rectangle after clip\n        ", "%', centerY: '60%', angle: 100}\n      try {\n ", "  // Non-skewed rectangles\n        offscreenC", "lue: object = {\n    angle: 90,\n    direction:", "; // Rotate the rectangle 45 degrees\n        ", "reate a 100*100 rectangle at (20, 20)\n       ", "ttrs.linearGradient.angle).assertEqual('90.00", "radient({\n          angle: 45,\n          dire"], "files": ["gradientDirection.ets", "transForm.ets", "index.js", "colorGradient.ets", "TransFormJsunit.test.ets", "ohosMatrix4.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureEvent", "api_method_name": "speed", "api_method_all": "speed: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 22, "since": 8, "api_used": "\u662f", "lines": ["ole.log('PanGesture speed' + event.speed);\n  ", "ne = this.$element(\"speedPropNone\").getInspec", "rs.id).assertEqual('speedProp')\n        expec", "rs.id).assertEqual('speedPropNone')\n        e", "op = this.$element(\"speedProp\").getInspector(", "edProp,\n            speedPropNone : this.spee", "ctor()\n        this.speedPropNone = this.$ele", "   speedProp : this.speedProp,\n            sp", "tringify(obj.$attrs.speed));\n        done();\n", "opNone,\n            speedProp : this.speedPro", "o(\"[videoProps] get speed value is: \" + JSON.", "peedPropNone : this.speedPropNone,\n        }\n", "rop : null,\n        speedPropNone : null,\n   ", "ture speed' + event.speed);\n        console.l", "  expect(obj.$attrs.speed).assertEqual('1.0')", "one : null,\n        speedProp : null,\n       ", "ctor()\n        this.speedProp = this.$element", "se(globalThis.value.speedProp);\n        conso", "  expect(obj.$attrs.speed).assertEqual('1')\n ", "se(globalThis.value.speedPropNone);\n        c"], "files": ["PanGesture.ets", "videoProps.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureEvent", "api_method_name": "scale", "api_method_all": "scale: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1026, "since": 7, "api_used": "\u662f", "lines": ["(eventData.data.grayscaleValue != null) {\n   ", "RS_GRAYSCALE = 'grayscale'\nconst ATTRS_BLUR =", "  expect(obj.$attrs.scale.y).assertEqual('0.5", "   }\n      })\n    }.scale({ x: this.scale }).", "')\n\n      Text('grayscale').fontSize(15).font", "        .scale(this.scaleValue)\n        .widt", "ep(1000);\n      let scaleValue = { x: 1, y: 1", " eventData.data.grayscaleValue;\n      }\n     ", " Matrix4.identity().scale({ x: 3 }).copy()\n  ", "Y: 5 }\n  @State grayscaleValue: string= 10;\n ", "xpect(objNew.$attrs.scale.y).assertEqual('1.0", ".transitionTypeOne, scale: { x: 0, y: 1.0, z:", "  }.scale({ x: this.scale }).opacity(this.opa", "     \"scale\" : this.scale,\n              \"opa", "context.filter('grayscale(50%)');\n    this.co", "00, y: 5 }\n  @State scaleValue: object= { x: ", "arse(eventData.data.scaleValue);\n      }\n    ", " Matrix4.identity().scale(eventData.data.matr", "ue\": JSON.stringify(scaleValue)\n          }\n ", "  expect(obj.$attrs.scale.x).assertEqual('2.0", "ull) {\n        this.scaleValue = JSON.parse(e", "ata: {\n            \"scaleValue\": JSON.stringi", "ep(1000);\n      let scaleValue = {\n        x:", "xpect(objNew.$attrs.scale.x).assertEqual('1.0", "ate2')\n\n      Text('scale').width('90%').font", "nExample {\n  @State scale: number = 1\n  @Stat", ".transitionTypeTwo, scale: { x: 1.0, y: 0.0 }", "ayscale(`${this.grayscaleValue}`)\n        .ke", " if (eventData.data.scaleValue != null) {\n   ", "     Row()\n        .scale(this.scaleValue)\n  ", " {\n        this.grayscaleValue = eventData.da", "Example1 {\n  @State scale: number = 1\n  @Stat", "pect(obj.$attrs.grayscale).assertEqual(0);\n  ", "ht(40)\n        .grayscale(`${this.grayscaleVa", "a: {\n              \"scale\" : this.scale,\n    ", " Matrix4.identity().scale({x:5, y:1, z:1, cen"], "files": ["pageTransition2.ets", "pathProps.test.js", "circleProps.test.js", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "imageEffects.ets", "Constants.ets", "polylineProps.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "polygonProps.test.js", "index.js", "PageTransitionJsunit.test.ets", "animateTransformProps.test.js", "svgProps.test.js", "progressProps.test.js", "transition.ets", "transForm.ets", "sharedTransition.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureEvent", "api_method_name": "pinchCenterX", "api_method_all": "pinchCenterX: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 706, "since": 7, "api_used": "\u662f", "lines": ["',pinchCenterX--' + pinchCenterX +\n        ',pinchCe", "ole.log('PanGesture pinchCenterX' + event.pinchCente", "t.scale\n        var pinchCenterX = event.pinchCenter", "nchCenterX' + event.pinchCenterX);\n        console.l", "cale--' + scale + ',pinchCenterX--' + pinchCenterX +", "inchCenterX = event.pinchCenterX\n        var pinchCe"], "files": ["PanGesture.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureEvent", "api_method_name": "pinchCenterY", "api_method_all": "pinchCenterY: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 706, "since": 7, "api_used": "\u662f", "lines": ["CenterX\n        var pinchCenterY = event.pinchCenter", "CenterX +\n        ',pinchCenterY--' + pinchCenterY;\n", "ole.log('PanGesture pinchCenterY' + event.pinchCente", "inchCenterY = event.pinchCenterY\n        var message", "nchCenterY' + event.pinchCenterY);\n      })\n      .o", "',pinchCenterY--' + pinchCenterY;\n        prompt.sho"], "files": ["PanGesture.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TapGestureInterface", "api_method_all": "interface TapGestureInterface {\n  \n  (value?: { count?: number; fingers?: number }): TapGestureInterface;\n\n  \n  onAction(event: (event?: GestureEvent) => void): TapGestureInterface;\n}", "api_method_name": "TapGestureInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TapGestureInterface", "api_method_name": "value", "api_method_all": "(value?: { count?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TapGestureInterface", "api_method_name": "fingers", "api_method_all": "fingers?: number }): TapGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TapGestureInterface", "api_method_name": "onActionevent", "api_method_all": "onAction(event: (event?: GestureEvent) => void): TapGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LongPressGestureInterface", "api_method_all": "interface LongPressGestureInterface {\n  \n  (value?: { fingers?: number; repeat?: boolean; duration?: number }): LongPressGestureInterface;\n\n  \n  onAction(event: (event?: GestureEvent) => void): LongPressGestureInterface;\n\n  \n  onActionEnd(event: (event?: GestureEvent) => void): LongPressGestureInterface;\n\n  \n  onActionCancel(event: () => void): LongPressGestureInterface;\n}", "api_method_name": "LongPressGestureInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LongPressGestureInterface", "api_method_name": "value", "api_method_all": "(value?: { fingers?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LongPressGestureInterface", "api_method_name": "repeat", "api_method_all": "repeat?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 342, "since": 7, "api_used": "\u662f", "lines": ["attrs.sweepGradient.repeating).assertEqual('tr", "t(() => {\n      var repeatoptions = {\n        ", "attrs.sweepGradient.repeating).assertEqual('fa", "{\n        if (event.repeat) {this.count++}\n   ", "xFCD1D1, 1.0]],\n    repeating: true\n  };\n  @St", "t('background image repeat along Y').fontSize(", "tring).assertEqual('repeat');\n      }\n      le", "None: null,\n        repeatCountProp : null,\n  ", "ntProp,\n            repeatCountPropNone : this", "is.animation.update(repeatoptions);\n      this", "createPattern(img, 'repeat');\n    this.context", "ctor()\n        this.repeatCountPropNone = this", "ttrs.radialGradient.repeating).assertEqual('fa", "ctor()\n        this.repeatCountProp = this.$el", "ttrs.radialGradient.repeating).assertEqual('tr", "eatCountProp : this.repeatCountProp,\n         ", "ne = this.$element(\"repeatCountPropNone\").getI", "ttrs.linearGradient.repeating).assertEqual('tr", "   this.animation.onrepeat(() => {\n      var r", "ttrs.linearGradient.repeating).assertEqual('fa", "rop : null,\n        repeatCountPropNone : null", "opNone,\n            repeatCountProp : this.rep", "1D1, 1.0]],\n        repeating: false\n      };\n", "op = this.$element(\"repeatCountProp\").getInspe", "t('background image repeat along X').fontSize(", "xFCD1D1, 1.0]],\n    repeating: true\n  };\n\n  pr", " LongPressGesture({ repeat: true })\n      .onA", "ountPropNone : this.repeatCountPropNone,\n     "], "files": ["backgroundAndSizeSetting.ets", "animateTransformProps.test.js", "index.js", "animateProps.test.js", "animateMotionProps.test.js", "ImageAnimatorJsunit.test.ets", "longPressGesture.ets", "background.ets", "animatorOption.ets", "gestureMode.ets", "enumsImage.ets", "colorGradient.ets", "canvas.ets", "basicabilityapi.test.js", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LongPressGestureInterface", "api_method_name": "duration", "api_method_all": "duration?: number }): LongPressGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 240, "since": 7, "api_used": "\u662f", "lines": ["reateAnimator({\n    duration: 3000,\n    fill: 'f", "ata: {\n            \"duration\": \"nan\"\n          }", "xpect(objNew.$attrs.duration).assertEqual('500.0", "ull) {\n        this.duration = parseInt(eventDat", "he text is hidden', duration: 2000 })\n          ", "nsole.info(\"button6 duration value is : \" + this", "value is : \" + this.duration)\n          animateT", "xpect(objNew.$attrs.duration).assertEqual('nan')", "ata: {\n            \"duration\": \"500\"\n          }", "        animateTo({ duration: this.duration }, (", "To({ duration: this.duration }, () => {\n        ", "gify(this.matrix1), duration: 200 })\n          t", "nsole.info(\"button6 duration test animateTo STAR", " if (eventData.data.duration != null) {\n        ", "3.jpg',\n            duration: 500,\n            w", "ssage: \"sucessful\", duration: 200 })\n          t", "     .duration(this.duration)\n      .vertical(th", "s = {\n              duration: 5000,\n            ", "        animateTo({ duration: 1000 }, () => {\n  ", "nsole.info(\"button1 duration test animateTo STAR", "nsole.info(\"button1 duration value is : \" + this", " {\n                \"duration\": this.duration,\n  ", "an = false\n  @State duration: number = 100\n  @St", "2.jpg',\n            duration: 500,\n            w", "options = {\n        duration: 2000,\n        iter", "   \"duration\": this.duration,\n              }\n  ", "  expect(obj.$attrs.duration).assertEqual('1000.", "4.jpg',\n            duration: 500,\n            w", "nsole.info(\"button7 duration test animateTo STAR", "eInt(eventData.data.duration);\n      }\n      if ", "an = false\n  @State duration: number = 1000\n  @S", "nsole.info(\"button7 duration value is : \" + this", "The text is shown', duration: 2000 })\n          ", "p(this.loop)\n      .duration(this.duration)\n    ", "1.jpg',\n            duration: 500,\n            w"], "files": ["animate.ets", "pageTransition2.ets", "ohosPrompt.ets", "imageAnimatorProps.test.js", "ohosMatrix4.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "fillMode.ets", "curves.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "geometryTransition.ets", "swiperProps.test.js", "AnimateJsunit.test.ets", "animatorOption.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "transition.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LongPressGestureInterface", "api_method_name": "onActionevent", "api_method_all": "onAction(event: (event?: GestureEvent) => void): LongPressGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LongPressGestureInterface", "api_method_name": "onActionEndevent", "api_method_all": "onActionEnd(event: (event?: GestureEvent) => void): LongPressGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LongPressGestureInterface", "api_method_name": "onActionCancelevent", "api_method_all": "onActionCancel(event: () => void): LongPressGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureOptions", "api_method_all": "declare class PanGestureOptions {\n  \n  constructor(value?: { fingers?: number; direction?: PanDirection; distance?: number });\n\n  \n  setDirection(value: PanDirection);\n\n  \n  setDistance(value: number);\n\n  \n  setFingers(value: number);\n}", "api_method_name": "PanGestureOptions", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureOptions", "api_method_name": "constructor", "api_method_all": "constructor(value?: { fingers?: number; direction?: PanDirection; distance?: number })", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureOptions", "api_method_name": "setDirection", "api_method_all": "setDirection(value: PanDirection);", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["nGesture({})\n      .setDirection(PanDirection.All)\n ", "s.direction)\n      .setDirection(this.direction)\n   "], "files": ["PanGesture.ets", "panDirection.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureOptions", "api_method_name": "setDistance", "api_method_all": "setDistance(value: number);", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["rection.All)\n      .setDistance(1)\n      .setFinger"], "files": ["PanGesture.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureOptions", "api_method_name": "setFingers", "api_method_all": "setFingers(value: number);", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tDistance(1)\n      .setFingers(1)\n      .onActionS"], "files": ["PanGesture.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureInterface", "api_method_all": "interface PanGestureInterface {\n  \n  (value?: { fingers?: number; direction?: PanDirection; distance?: number } | PanGestureOptions): PanGestureInterface;\n\n  \n  onActionStart(event: (event?: GestureEvent) => void): PanGestureInterface;\n\n  \n  onActionUpdate(event: (event?: GestureEvent) => void): PanGestureInterface;\n\n  \n  onActionEnd(event: (event?: GestureEvent) => void): PanGestureInterface;\n\n  \n  onActionCancel(event: () => void): PanGestureInterface;\n}", "api_method_name": "PanGestureInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureInterface", "api_method_name": "value", "api_method_all": "(value?: { fingers?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureInterface", "api_method_name": "direction", "api_method_all": "direction?: PanDirection", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 596, "since": 7, "api_used": "\u662f", "lines": ["lder() {\n    Flex({ direction: FlexDirection.Colu", "on = eventData.data.direction;\n        console.lo", "ata: {\n            \"direction\": Direction.Ltr\n   ", "ll: 'forwards',\n    direction: \"normal\",\n    begi", " if (eventData.data.direction != null) {\n        ", "uild() {\n    Flex({ direction: FlexDirection.Colu", " angle: 80,\n        direction: GradientDirection.", "ion: \" + obj.$attrs.direction);\n      expect(obj.", "'90%')\n      Flex({ direction: FlexDirection.Row,", "  expect(obj.$attrs.direction).assertEqual('Direc", ".$attrs.constructor.direction).assertEqual('FlexD", " {\n    Flex({\n      direction: FlexDirection.Colu", "    .direction(this.direction)\n        .key('rowD", "gin(5)\n      Flex({ direction: FlexDirection.Row,", "dth('90%')\n        .direction(this.direction)\n   ", "  events_emitter.on(directionChangeEvent, this.st", "    Text('slider in direction set').fontSize(9).f", "   Text('slider out direction set').fontSize(9).f", ".InSet,\n            direction: this.decorationVal", ".TopStart;\n  @State direction: Direction = Direct", "gn')\n\n        Text('direction').fontSize(20).font", "ction value\" + this.direction);\n      }\n    }\n  }", "'90%')\n      Flex({ direction: FlexDirection.Row ", "xExample {\n  @State direction: FlexDirection = Fl", "umber = 3;\n  @State direction: Axis = Axis.Horizo", "weekStyle)\n        .direction(this.direction)\n   ", "uild() {\n    Flex({ direction: FlexDirection.Row,", "OutSet,\n            direction: Axis.Vertical\n    ", " ATTRS_DIRECTION = 'direction'\nconst ATTRS_ALIGN ", "\n    angle: 90,\n    direction: GradientDirection.", "rations: 1,\n        direction: 'alternate',\n     ", " if (eventData.data.direction) {\n        this.dir", "CallBack);\n\n    let directionChangeEvent = {\n    ", "ion) {\n        this.direction = eventData.data.di", "ull) {\n        this.direction = eventData.data.di", "on = eventData.data.direction;\n      } else if (e", ".log(\"Calendar page direction value\" + this.direc", "    .direction(this.direction)\n        .backgroun", "ttrs.linearGradient.direction).assertEqual('Gradi"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "Qrcode.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "transition.ets", "Image.ets", "List.test.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "positionSetting.ets", "animatorOption.ets", "tapGesture.ets", "FlexJsunit.test.ets", "flexDirection.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "flex.ets", "marqueeProps.test.js", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "BackgroundJsunit.test.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "GradientDirectionJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "RowJsunit.test.ets", "index.js", "ohosRouterA.ets", "Link.ets", "slider.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureInterface", "api_method_name": "distance", "api_method_all": "distance?: number } | PanGestureOptions): PanGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 176, "since": 7, "api_used": "\u662f", "lines": ["ar distance = event.distance;\n        var messag", "n + ',distance--' + distance;\n        prompt.sho", "ection;\n        var distance = event.distance;\n ", "--' + direction + ',distance--' + distance;\n    "], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureInterface", "api_method_name": "onActionStartevent", "api_method_all": "onActionStart(event: (event?: GestureEvent) => void): PanGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureInterface", "api_method_name": "onActionUpdateevent", "api_method_all": "onActionUpdate(event: (event?: GestureEvent) => void): PanGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureInterface", "api_method_name": "onActionEndevent", "api_method_all": "onActionEnd(event: (event?: GestureEvent) => void): PanGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PanGestureInterface", "api_method_name": "onActionCancelevent", "api_method_all": "onActionCancel(event: () => void): PanGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SwipeGestureInterface", "api_method_all": "interface SwipeGestureInterface {\n  \n  (value?: { fingers?: number; direction?: SwipeDirection; speed?: number }): SwipeGestureInterface;\n\n  \n  onAction(event: (event?: GestureEvent) => void): SwipeGestureInterface;\n}", "api_method_name": "SwipeGestureInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SwipeGestureInterface", "api_method_name": "value", "api_method_all": "(value?: { fingers?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SwipeGestureInterface", "api_method_name": "direction", "api_method_all": "direction?: SwipeDirection", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 596, "since": 7, "api_used": "\u662f", "lines": ["lder() {\n    Flex({ direction: FlexDirection.Colu", "on = eventData.data.direction;\n        console.lo", "ata: {\n            \"direction\": Direction.Ltr\n   ", "ll: 'forwards',\n    direction: \"normal\",\n    begi", " if (eventData.data.direction != null) {\n        ", "uild() {\n    Flex({ direction: FlexDirection.Colu", " angle: 80,\n        direction: GradientDirection.", "ion: \" + obj.$attrs.direction);\n      expect(obj.", "'90%')\n      Flex({ direction: FlexDirection.Row,", "  expect(obj.$attrs.direction).assertEqual('Direc", ".$attrs.constructor.direction).assertEqual('FlexD", " {\n    Flex({\n      direction: FlexDirection.Colu", "    .direction(this.direction)\n        .key('rowD", "gin(5)\n      Flex({ direction: FlexDirection.Row,", "dth('90%')\n        .direction(this.direction)\n   ", "  events_emitter.on(directionChangeEvent, this.st", "    Text('slider in direction set').fontSize(9).f", "   Text('slider out direction set').fontSize(9).f", ".InSet,\n            direction: this.decorationVal", ".TopStart;\n  @State direction: Direction = Direct", "gn')\n\n        Text('direction').fontSize(20).font", "ction value\" + this.direction);\n      }\n    }\n  }", "'90%')\n      Flex({ direction: FlexDirection.Row ", "xExample {\n  @State direction: FlexDirection = Fl", "umber = 3;\n  @State direction: Axis = Axis.Horizo", "weekStyle)\n        .direction(this.direction)\n   ", "uild() {\n    Flex({ direction: FlexDirection.Row,", "OutSet,\n            direction: Axis.Vertical\n    ", " ATTRS_DIRECTION = 'direction'\nconst ATTRS_ALIGN ", "\n    angle: 90,\n    direction: GradientDirection.", "rations: 1,\n        direction: 'alternate',\n     ", " if (eventData.data.direction) {\n        this.dir", "CallBack);\n\n    let directionChangeEvent = {\n    ", "ion) {\n        this.direction = eventData.data.di", "ull) {\n        this.direction = eventData.data.di", "on = eventData.data.direction;\n      } else if (e", ".log(\"Calendar page direction value\" + this.direc", "    .direction(this.direction)\n        .backgroun", "ttrs.linearGradient.direction).assertEqual('Gradi"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "Qrcode.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "transition.ets", "Image.ets", "List.test.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "positionSetting.ets", "animatorOption.ets", "tapGesture.ets", "FlexJsunit.test.ets", "flexDirection.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "flex.ets", "marqueeProps.test.js", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "BackgroundJsunit.test.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "GradientDirectionJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "RowJsunit.test.ets", "index.js", "ohosRouterA.ets", "Link.ets", "slider.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwipeGestureInterface", "api_method_name": "speed", "api_method_all": "speed?: number }): SwipeGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 22, "since": 8, "api_used": "\u662f", "lines": ["ole.log('PanGesture speed' + event.speed);\n  ", "ne = this.$element(\"speedPropNone\").getInspec", "rs.id).assertEqual('speedProp')\n        expec", "rs.id).assertEqual('speedPropNone')\n        e", "op = this.$element(\"speedProp\").getInspector(", "edProp,\n            speedPropNone : this.spee", "ctor()\n        this.speedPropNone = this.$ele", "   speedProp : this.speedProp,\n            sp", "tringify(obj.$attrs.speed));\n        done();\n", "opNone,\n            speedProp : this.speedPro", "o(\"[videoProps] get speed value is: \" + JSON.", "peedPropNone : this.speedPropNone,\n        }\n", "rop : null,\n        speedPropNone : null,\n   ", "ture speed' + event.speed);\n        console.l", "  expect(obj.$attrs.speed).assertEqual('1.0')", "one : null,\n        speedProp : null,\n       ", "ctor()\n        this.speedProp = this.$element", "se(globalThis.value.speedProp);\n        conso", "  expect(obj.$attrs.speed).assertEqual('1')\n ", "se(globalThis.value.speedPropNone);\n        c"], "files": ["PanGesture.ets", "videoProps.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SwipeGestureInterface", "api_method_name": "onActionevent", "api_method_all": "onAction(event: (event?: GestureEvent) => void): SwipeGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PinchGestureInterface", "api_method_all": "interface PinchGestureInterface {\n  \n  (value?: { fingers?: number; distance?: number }): PinchGestureInterface;\n\n  \n  onActionStart(event: (event?: GestureEvent) => void): PinchGestureInterface;\n\n  \n  onActionUpdate(event: (event?: GestureEvent) => void): PinchGestureInterface;\n\n  \n  onActionEnd(event: (event?: GestureEvent) => void): PinchGestureInterface;\n\n  \n  onActionCancel(event: () => void): PinchGestureInterface;\n}", "api_method_name": "PinchGestureInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PinchGestureInterface", "api_method_name": "value", "api_method_all": "(value?: { fingers?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PinchGestureInterface", "api_method_name": "distance", "api_method_all": "distance?: number }): PinchGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 176, "since": 7, "api_used": "\u662f", "lines": ["ar distance = event.distance;\n        var messag", "n + ',distance--' + distance;\n        prompt.sho", "ection;\n        var distance = event.distance;\n ", "--' + direction + ',distance--' + distance;\n    "], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PinchGestureInterface", "api_method_name": "onActionStartevent", "api_method_all": "onActionStart(event: (event?: GestureEvent) => void): PinchGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PinchGestureInterface", "api_method_name": "onActionUpdateevent", "api_method_all": "onActionUpdate(event: (event?: GestureEvent) => void): PinchGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PinchGestureInterface", "api_method_name": "onActionEndevent", "api_method_all": "onActionEnd(event: (event?: GestureEvent) => void): PinchGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PinchGestureInterface", "api_method_name": "onActionCancelevent", "api_method_all": "onActionCancel(event: () => void): PinchGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RotationGestureInterface", "api_method_all": "interface RotationGestureInterface {\n  \n  (value?: { fingers?: number; angle?: number }): RotationGestureInterface;\n\n  \n  onActionStart(event: (event?: GestureEvent) => void): RotationGestureInterface;\n\n  \n  onActionUpdate(event: (event?: GestureEvent) => void): RotationGestureInterface;\n\n  \n  onActionEnd(event: (event?: GestureEvent) => void): RotationGestureInterface;\n\n  \n  onActionCancel(event: () => void): RotationGestureInterface;\n}", "api_method_name": "RotationGestureInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RotationGestureInterface", "api_method_name": "value", "api_method_all": "(value?: { fingers?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RotationGestureInterface", "api_method_name": "angle", "api_method_all": "angle?: number }): RotationGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["centerY: '50%',\n    angle: 300\n  }\n  @State t", "ttrs.linearGradient.angle).assertEqual('80.00", "t(obj.$attrs.rotate.angle).assertEqual('300.0", "ate({x:1, y:1, z:2, angle:30})\n  @State matri", "ntValue = {\n        angle: 80,\n        direct", "bjNew.$attrs.rotate.angle).assertEqual('100.0", "    // Draw red rectangle after clip\n        ", "%', centerY: '60%', angle: 100}\n      try {\n ", "  // Non-skewed rectangles\n        offscreenC", "lue: object = {\n    angle: 90,\n    direction:", "; // Rotate the rectangle 45 degrees\n        ", "reate a 100*100 rectangle at (20, 20)\n       ", "ttrs.linearGradient.angle).assertEqual('90.00", "radient({\n          angle: 45,\n          dire"], "files": ["gradientDirection.ets", "transForm.ets", "index.js", "colorGradient.ets", "TransFormJsunit.test.ets", "ohosMatrix4.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RotationGestureInterface", "api_method_name": "onActionStartevent", "api_method_all": "onActionStart(event: (event?: GestureEvent) => void): RotationGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RotationGestureInterface", "api_method_name": "onActionUpdateevent", "api_method_all": "onActionUpdate(event: (event?: GestureEvent) => void): RotationGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RotationGestureInterface", "api_method_name": "onActionEndevent", "api_method_all": "onActionEnd(event: (event?: GestureEvent) => void): RotationGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RotationGestureInterface", "api_method_name": "onActionCancelevent", "api_method_all": "onActionCancel(event: () => void): RotationGestureInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GestureGroupInterface", "api_method_all": "interface GestureGroupInterface {\n  \n  (mode: GestureMode, ...gesture: GestureType[]): GestureGroupInterface;\n\n  \n  onCancel(event: () => void): GestureGroupInterface;\n}", "api_method_name": "GestureGroupInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GestureGroupInterface", "api_method_name": "mode", "api_method_all": "(mode: GestureMode, ...gesture: GestureType[]): GestureGroupInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 277, "since": 7, "api_used": "\u662f", "lines": ["   .type(this.type).mode(this.mode)\n      .d", "nge((value: number, mode: SliderChangeMode) ", "= 1000\n  @State playmode: PlayMode = PlayMod", " {\n            \"playmode\": \"123456\"\n        ", "exDirection.Column, mode:this.mode, alignIte", "indexEvent.data.playmode).assertEqual('norma", " {\n            \"playmode\": \"aaa\"\n          }", "e.Foldable\n  @State mode: PanelMode = PanelM", "indexEvent.data.playmode).assertEqual('aaa')", "playmode\": this.playmode,\n              }\n  ", "e.Temporary)\n      .mode(PanelMode.Full)\n   ", "+ value + 'mode:' + mode.toString())\n       ", "               \"playmode\": this.playmode,\n  ", "ata: {\n            \"mode\": \"PanelMode.Mini\"\n", " {\n            \"playmode\": \"PlayMode.Alterna", "eight},mode:${value.mode}`)\n      })\n\n    }.", "n.Column, mode:this.mode, alignItems: ItemAl", "e.info(\"button5 playmode value is : \" + this", "eight},mode:${value.mode}`)\n      })\n    }.w", " eventData.data.playmode;\n      }\n    }\n  }\n", "       this.Begin = mode\n            console", "ype.Minibar)\n      .mode(PanelMode.Mini)\n   ", "pe.Foldable)\n      .mode(PanelMode.Half)\n   ", " PlayMode: this.playmode }, () => {\n        ", "e is : \" + this.playmode)\n          animateT", "ue: ' + value + '---mode: ' + mode)\n        ", "  expect(obj.$attrs.mode).assertEqual(\"Panel", "his.type).mode(this.mode)\n      .dragBar(tru", "indexEvent.data.playmode).assertEqual('alter", "ght:${value.height},mode:${value.mode}`)\n   ", "tyle.Solid\n  @State mode: GestureMode = Gest", "(eventData.data.playmode != null) {\n        ", "eight},mode:${value.mode}`)\n      })\n\n      ", "'value:' + value + 'mode:' + mode.toString()", " {\n        this.playmode = eventData.data.pl", "indexEvent.data.playmode).assertEqual('12345"], "files": ["animate.ets", "animateTransformProps.test.js", "index.js", "PanelJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "slider.ets", "AnimateJsunit.test.ets", "imageAnimatorProps.test.js", "Panel.ets", "panelProps.test.js", "gestureMode.ets", "Slider.ets", "tabBarProps.test.js", "panel.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GestureGroupInterface", "api_method_name": "onCancelevent", "api_method_all": "onCancel(event: () => void): GestureGroupInterface", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}