{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\image", "api": [{"api_class_name": "ImageRenderMode", "api_method_all": "declare enum ImageRenderMode {\n  \n  Original,\n\n  \n  Template,\n}", "api_method_name": "ImageRenderMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["        .renderMode(ImageRenderMode.Template)\n         ", "rMode).assertEqual('ImageRenderMode.Original')\n      ex", "rMode).assertEqual('ImageRenderMode.Template')\n      co", "        .renderMode(ImageRenderMode.Original)\n         "], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRenderMode", "api_method_name": "Original", "api_method_all": "Original,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["ngify(obj.$attrs.fitOriginalSize));\n      consol", "al('ImageRenderMode.Original')\n      expect(obj.", "alse)\n          .fitOriginalSize(false)\n        ", "ode(ImageRenderMode.Original)\n          .autoRes", "sole.log(\"image1 fitOriginalSize\" + JSON.stringi"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRenderMode", "api_method_name": "Template", "api_method_all": "Template,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 45, "since": 7, "api_used": "\u662f", "lines": ["fr')\n          .rowsTemplate('1fr 1fr 1fr 1fr 1f", "(eventData.data.rowsTemplate != null) {\n        ", "r 1fr'\n  @State rowsTemplate: string = '1fr 1fr ", "wsTemplate(this.rowsTemplate)\n        .width('90", "t04 ] attribute rowsTemplate after change is: ' ", "hange.$attrs.columnsTemplate).assertEqual('1fr 1", "al('ImageRenderMode.Template')\n      console.inf", "plate)\n        .rowsTemplate(this.rowsTemplate)\n", "gify(obj.$attrs.rowsTemplate))\n      console.log", "y(obj.$attrs.columnsTemplate));\n      expect(obj", " {\n            \"rowsTemplate\": '1fr 1fr 1fr 1fr'", "fr 1fr')\n      .rowsTemplate('1fr 1fr 1fr 1fr 1f", "emplate(this.columnsTemplate)\n        .rowsTempl", "t04 ] attribute rowsTemplate before change is: '", "erChange.$attrs.rowsTemplate).assertEqual('1fr 1", " ] attribute columnsTemplate after change is: ' ", "entData.data.columnsTemplate != null) {\n        ", " ] attribute columnsTemplate before change is: '", "px'\n  @State columnsTemplate: string = '1fr 1fr ", "t(obj.$attrs.columnsTemplate).assertEqual('1fr 1", "        this.columnsTemplate = eventData.data.co", " {\n        this.rowsTemplate = eventData.data.ro", "ode(ImageRenderMode.Template)\n          .key('im", "    }\n      .columnsTemplate('1fr 1fr 1fr 1fr 1f", " eventData.data.rowsTemplate\n      }\n    }\n  }\n\n", "pect(obj.$attrs.rowsTemplate).assertEqual('1fr 1", "lumn)\n      .columnsTemplate('1fr 1fr 1fr 1fr 1f", "}\n          .columnsTemplate('1fr 1fr 1fr 1fr 1f", "y(obj.$attrs.columnsTemplate))\n      console.log", "gify(obj.$attrs.rowsTemplate));\n      expect(obj", "            \"columnsTemplate\": '1fr 1fr 1fr 1fr'", "ap)\n        .columnsTemplate(this.columnsTemplat", "hange.$attrs.columnsTemplate));\n      expect(obj", "erChange.$attrs.rowsTemplate));\n      expect(obj", "    }\n      .columnsTemplate('1fr 1fr 1fr')\n    ", "entData.data.columnsTemplate\n      }\n      if (e"], "files": ["Grid.ets", "GridItem.ets", "ImageJsunit.test.ets", "layoutConstraints.ets", "Image.ets", "grid.ets", "gridPage.ets", "GridJsunit.test.ets", "GridJsnuit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageInterpolation", "api_method_all": "declare enum ImageInterpolation {\n  \n  None,\n\n  \n  Low,\n\n  \n  Medium,\n\n  \n  High,\n}", "api_method_name": "ImageInterpolation", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["ation).assertEqual('ImageInterpolation.High')\n      expect", "     .interpolation(ImageInterpolation.Low)\n          .key", "     .interpolation(ImageInterpolation.High)\n          .re", "     .interpolation(ImageInterpolation.None)\n          .re", "     .interpolation(ImageInterpolation.Medium)\n          .", "ation).assertEqual('ImageInterpolation.Low')\n      console", "ation).assertEqual('ImageInterpolation.Medium')\n      cons", "ation).assertEqual('ImageInterpolation.None')\n      expect"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageInterpolation", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageInterpolation", "api_method_name": "Low", "api_method_all": "Low,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["(ImageInterpolation.Low)\n          .key('im", "'ImageInterpolation.Low')\n      console.inf", "sertEqual('TextCase.LowerCase')\n      expec", " .textCase(TextCase.LowerCase)\n            ", " .textCase(TextCase.LowerCase)\n        .dec"], "files": ["ImageJsunit.test.ets", "Span.ets", "Image.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageInterpolation", "api_method_name": "Medium", "api_method_all": "Medium,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 468, "since": 7, "api_used": "\u662f", "lines": ["rtEqual(\"FontWeight.Medium\")\n      expect(obj.", "this.clickEffectPropMedium = this.$element(\"cl", "ent('clickEffectPropMedium').show()\n    },\n   ", "ent(\"clickEffectPropMedium\").getInspector()\n  ", "this.clickEffectPropMedium,\n             click", "     clickEffectPropMedium : null,\n         cl", "     clickEffectPropMedium : null,\n        cli", "this.clickEffectPropMedium,\n            clickE", "ntWeight(FontWeight.Medium)\n        .fontColor", "     clickEffectPropMedium : this.clickEffectP", " openclickEffectPropMedium(){\n        this.$el", "Weight = FontWeight.Medium\n  @Builder Ingredie", "(ImageInterpolation.Medium)\n          .key('im", "'ImageInterpolation.Medium')\n      console.inf"], "files": ["ratingProps.test.js", "listItemGroupProps.test.js", "ImageJsunit.test.ets", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "tabContentProps.test.js", "textProps.test.js", "imageAnimatorProps.test.js", "buttonProps.test.js", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "TextJsunit.test.ets", "popupProps.test.js", "refreshProps.test.js", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "spanProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "toolbarItemProps.test.js", "videoProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "optionProps.test.js", "badgeProps.test.js", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "Image.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "panelProps.test.js", "menuProps.test.js", "gridContainerProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageInterpolation", "api_method_name": "High", "api_method_all": "High,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["'ImageInterpolation.High')\n      expect(obj.", "(ImageInterpolation.High)\n          .renderM"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageInterface", "api_method_all": "interface ImageInterface {\n  \n  (src: string | PixelMap | Resource): ImageAttribute;\n}", "api_method_name": "ImageInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageInterface", "api_method_name": "src", "api_method_all": "(src: string | PixelMap | Resource): ImageAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 90, "since": 7, "api_used": "\u662f", "lines": ["  if(eventData.data.srcValue != null) {\n   ", "mage();\n        img.src = 'common/images/su", " if (eventData.data.srcValue != null) {\n   ", "jpg\"},\n            {src: \"/common/images/im", "      {\n            src: '/comment/bg1.jpg'", "number = 3\n  @State src: string = \"Running ", "ges: [\n            {src: \"/common/images/im", "r sres = obj.$attrs.src.slice(res, res + 16", "      {\n            src: '/comment/bg.jpg',", "      {\n            src: '/comment/bg2.jpg'", "ew Image();\n    img.src = \"/images/bg.jpg\";", "{\n        src: this.srcs,\n        previewUr", ",\n        src: this.src\n      })\n        .f", "omponent {\n  @State srcs: string = \"/images", "  expect(obj.$attrs.src.slice(res, res + 16", "    Video({\n        src: this.srcs,\n       ", "omponent {\n  @State srcs: string = '/resour", ",\n        src: this.src\n      })\n        .k", "ar res = obj.$attrs.src.indexOf('rawfile/te", "     }\n\n      Web({ src: $rawfile('indextes", " is: \" + obj.$attrs.src);\n      console.inf", "ample.com'\n  @State src: string = this.on\n ", "est_0200 obj.$attrs.src is: \" + obj.$attrs.", "      {\n            src: '/comment/bg3.jpg'", ".fromStart,\n        src: this.src\n      })\n", "mage();\n        img.src = 'common/images/im", "ull) {\n        this.srcValue = eventData.da", "ue = eventData.data.srcValue;\n      }\n    }", "      {\n            src: '/comment/bg4.jpg'"], "files": ["backgroundAndSizeSetting.ets", "imageFit.ets", "ImageJsunit.test.ets", "Video.ets", "videoProps.test.js", "global.ets", "TextJsunit.test.ets", "video.ets", "WebPage.ets", "marquee.ets", "imageProps.test.js", "animationStatus.ets", "background.ets", "imageAnimator.ets", "index.js", "fillMode.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_all": "declare class ImageAttribute extends CommonMethod<ImageAttribute> {\n  \n  alt(value: string | Resource): ImageAttribute;\n\n  \n  matchTextDirection(value: boolean): ImageAttribute;\n\n  \n  fitOriginalSize(value: boolean): ImageAttribute;\n\n  \n  fillColor(value: ResourceColor): ImageAttribute;\n\n  \n  objectFit(value: ImageFit): ImageAttribute;\n\n  \n  objectRepeat(value: ImageRepeat): ImageAttribute;\n\n  \n  autoResize(value: boolean): ImageAttribute;\n\n  \n  renderMode(value: ImageRenderMode): ImageAttribute;\n\n  \n  interpolation(value: ImageInterpolation): ImageAttribute;\n\n  \n  sourceSize(value: { width: number; height: number }): ImageAttribute;\n\n  \n  syncLoad(value: boolean): ImageAttribute;\n\n  \n  onComplete(\n    callback: (event?: {\n      width: number;\n      height: number;\n      componentWidth: number;\n      componentHeight: number;\n      loadingStatus: number;\n    }) => void,\n  ): ImageAttribute;\n\n  \n  onError(callback: (event?: { componentWidth: number; componentHeight: number }) => void): ImageAttribute;\n\n  \n  onFinish(event: () => void): ImageAttribute;\n}", "api_method_name": "ImageAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "alt", "api_method_all": "alt(value: string | Resource): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": [": 100 })\n          .alt(\"/resources/rawfile", "console.log(\"image1 alt\" + JSON.stringify(o", "Image('/images/ic_health_heart.png')\n      ", "e = ($rawfile(\"ic_health_heart.png\"))\n  sel", "itmap('/images/ic_health_heart.png');\n    l", "o(\"[imageProps] get alt value is: \" + JSON.", "ymode).assertEqual('alternate')\n      }\n   ", "  expect(obj.$attrs.alt).assertEqual('commo", "        direction: 'alternate',\n        beg", "tringify(obj.$attrs.alt));\n        done();\n", "tringify(obj.$attrs.alt));\n      expect(obj", "mage($rawfile('ic_health_heart.png'))\n     ", "  expect(obj.$attrs.alt).assertEqual('/reso", "  expect(obj.$attrs.alt).assertEqual(undefi", "mage($rawfile('ic_health_heart.png')).width"], "files": ["sharedTransition2.ets", "imageFit.ets", "pageTransition2.ets", "pageTransition.ets", "ImageJsunit.test.ets", "geometryTransition.ets", "imageProps.test.js", "AnimateJsunit.test.ets", "Image.ets", "aboutToDisappear.ets", "sideBar.ets", "positionSetting.ets", "sharedTransition.ets", "animatorOption.ets", "bindPopup.ets", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "matchTextDirection", "api_method_all": "matchTextDirection(value: boolean): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["nd.png\")\n          .matchTextDirection(false)\n          .f", "tringify(obj.$attrs.matchTextDirection));\n      console.lo", "console.log(\"image1 matchTextDirection\" + JSON.stringify(o"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "fitOriginalSize", "api_method_all": "fitOriginalSize(value: boolean): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["tringify(obj.$attrs.fitOriginalSize));\n      console.lo", "n(false)\n          .fitOriginalSize(false)\n          .f", "console.log(\"image1 fitOriginalSize\" + JSON.stringify(o"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "fillColor", "api_method_all": "fillColor(value: ResourceColor): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["console.log(\"image1 fillColor\" + JSON.stringify(o", "tringify(obj.$attrs.fillColor));\n      console.lo", "e(false)\n          .fillColor(0xCCCCCC)\n         ", "                    fillColor: '#ffffff',\n       ", "f',\n                fillColor: '#cce5ff',\n       "], "files": ["index.js", "ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "objectFit", "api_method_all": "objectFit(value: ImageFit): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["nd.png\")\n          .objectFit(ImageFit.Fill)\n    ", "nd.png\")\n          .objectFit(ImageFit.None)\n    ", "tringify(obj.$attrs.objectFit));\n      expect(obj", "ashed)\n            .objectFit(ImageFit.Auto).widt", "console.log(\"image3 objectFit\" + JSON.stringify(o", "console.log(\"image4 objectFit\" + JSON.stringify(o", "nd.png\")\n          .objectFit(ImageFit.Contain)\n ", "loop(true)\n        .objectFit(ImageFit.Cover)\n   ", " = this.on\n  @State objectFit: ImageFit = Cover\n\n", "  expect(obj.$attrs.objectFit).assertEqual('Image", " }) {\n        Text('objectFit').fontSize(16).font", "ashed)\n            .objectFit(ImageFit.None).widt", "console.log(\"image2 objectFit\" + JSON.stringify(o", "console.log(\"image5 objectFit\" + JSON.stringify(o", "tringify(obj.$attrs.objectFit));\n      console.lo", "nd.png\")\n          .objectFit(ImageFit.ScaleDown)", "xCCCCCC)\n          .objectFit(ImageFit.Cover)\n   ", "tringify(obj.$attrs.objectFit));\n      console.in", "ashed)\n            .objectFit(ImageFit.Contain).w", "nsole.log(\"cd video objectFit\" + JSON.stringify(o", "console.log(\"image1 objectFit\" + JSON.stringify(o"], "files": ["ImageJsunit.test.ets", "imageFit.ets", "VideoJsunit.test.ets", "Video.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "objectRepeat", "api_method_all": "objectRepeat(value: ImageRepeat): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["console.log(\"image2 objectRepeat\" + JSON.stringify(o", "  expect(obj.$attrs.objectRepeat).assertEqual('Image", "it.Fill)\n          .objectRepeat(ImageRepeat.Y)\n    ", "console.log(\"image4 objectRepeat\" + JSON.stringify(o", "Contain)\n          .objectRepeat(ImageRepeat.X)\n    ", "it.None)\n          .objectRepeat(ImageRepeat.XY)\n   ", "console.log(\"image1 objectRepeat\" + JSON.stringify(o", "console.log(\"image3 objectRepeat\" + JSON.stringify(o", "tringify(obj.$attrs.objectRepeat));\n      console.lo", "t.Cover)\n          .objectRepeat(ImageRepeat.NoRepea"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "autoResize", "api_method_all": "autoResize(value: boolean): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["riginal)\n          .autoResize(false)\n          .s", "tringify(obj.$attrs.autoResize));\n      console.lo", "console.log(\"image1 autoResize\" + JSON.stringify(o"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "renderMode", "api_method_all": "renderMode(value: ImageRenderMode): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["tringify(obj.$attrs.renderMode));\n      console.lo", "console.log(\"image2 renderMode\" + JSON.stringify(o", "console.log(\"image1 renderMode\" + JSON.stringify(o", "tringify(obj.$attrs.renderMode));\n      expect(obj", "on.High)\n          .renderMode(ImageRenderMode.Tem", "  expect(obj.$attrs.renderMode).assertEqual('Image", "on.None)\n          .renderMode(ImageRenderMode.Ori"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "interpolation", "api_method_all": "interpolation(value: ImageInterpolation): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["tringify(obj.$attrs.interpolation));\n      console.lo", "console.log(\"image4 interpolation\" + JSON.stringify(o", "console.log(\"image1 interpolation\" + JSON.stringify(o", "peat.XY)\n          .interpolation(ImageInterpolation.", "oRepeat)\n          .interpolation(ImageInterpolation.", "console.log(\"image2 interpolation\" + JSON.stringify(o", "epeat.X)\n          .interpolation(ImageInterpolation.", "epeat.Y)\n          .interpolation(ImageInterpolation.", "console.log(\"image3 interpolation\" + JSON.stringify(o", "  expect(obj.$attrs.interpolation).assertEqual('Image", "tringify(obj.$attrs.interpolation));\n      expect(obj"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "sourceSize", "api_method_all": "sourceSize(value: { width: number; height: number }): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["console.log(\"image1 sourceSize\" + JSON.stringify(o", "d(false)\n          .sourceSize({ width: 200, heigh", "tringify(obj.$attrs.sourceSize));\n      console.lo", "  expect(obj.$attrs.sourceSize).assertEqual(\"[200."], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "syncLoad", "api_method_all": "syncLoad(value: boolean): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["tringify(obj.$attrs.syncLoad));\n      console.lo", "e(false)\n          .syncLoad(false)\n          .s", "console.log(\"image1 syncLoad\" + JSON.stringify(o", "  expect(obj.$attrs.syncLoad).assertEqual('false"], "files": ["ImageJsunit.test.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "onComplete   ", "api_method_all": "onComplete(\n    callback: (event?: {\n      width: number;\n      height: number;\n      componentWidth: number;\n      componentHeight: number;\n      loadingStatus: number;\n    }) => void,\n  ): ImageAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "callback", "api_method_all": "callback: (event?: {\n      width: number;\n      height: number;\n      componentWidth: number;\n      componentHeight: number;\n      loadingStatus: number;\n    }) => void,\n  ): ImageAttribute;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 214, "since": 7, "api_used": "\u662f", "lines": ["r.on(innerEventTwo, callbackTwo)\n      } catch (err) {\n        conso", "oid>): void {\n      callback(\"callback\");\n    }\n\n    let errorCallba", "nction () {\n    let callback: Callback<void> = (data) => {\n      con", "nfo('dialog success callback\uff0cclick button : ' + data.index);\n       ", "ep(1000);\n      let callback = (indexEvent) => {\n        console.inf", "ep(1500);\n      let callbackOne = (indexEventOne) => {\n        conso", "nction callbackTest(callback: Callback<void>): void {\n      callback", "ep(1500);\n      var callback1 = (eventData) => {\n        console.inf", "e.info('dialog fail callback' + data.errMsg);\n            },\n       ", "c01] START');\n      callbackTest(callback);\n      console.info('[tes", "info('dialog cancel callback');\n            },\n          });\n       ", "ep(1000);\n      var callbackTwo = (eventData) => {\n        console.i", "tter.on(indexEvent, callback);\n      } catch (err) {\n        console", "nfo('dialog success callback\uff0cclick button : ' + data.tapIndex);\n    ", "r.on(innerEventOne, callback1)\n      } catch (err) {\n        console", "ep(1500);\n      let callback = (indexEvent) => {\n        console.inf", "d {\n      callback(\"callback\");\n    }\n\n    let errorCallback: ErrorC", "tter.on(innerEvent, callback)\n      } catch (err) {\n        console.", "r.on(indexEventOne, callbackOne);\n      } catch (err) {\n        cons", "\n      callbackTest(callback);\n      console.info('[testBasic01] END", "ep(1000);\n      var callback1 = (eventData) => {\n        console.inf", "    }\n\n    function callbackTest(callback: Callback<void>): void {\n ", "eep(1000)\n      var callback = (eventData) => {\n        console.info", "r.on(innerEventOne, callback1);\n      } catch (err) {\n        consol", " START');\n      var callback = (eventData) => {\n        console.info", "ole.info('Click the callback in the blank area')\n  }\n\n  build() {\n  "], "files": ["MotionPathJsunit.test.ets", "ohosPrompt.ets", "AnimationStatusJsunit.test.ets", "DragEventJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "ParallelGestureJsunit.test.ets", "SourceTypeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "PlayModeJsunit.test.ets", "TouchAbleJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "customDialogController.ets", "CustomDialog.ets", "PatternLockJsunit.test.ets", "TransitionJsunit.test.ets", "SharedTransitionJsunit.test.ets", "BindMenuJsunit.test.ets", "AreaChangeJsunit.test.ets", "OhosRouterJsnuit.test.ets", "TapGesture.test.ets", "WebPage.ets", "AnimateJsunit.test.ets", "TabsJsunit.test.ets", "MarqueeJsunit.test.ets", "ResponseRegionJsunit.test.ets", "DatePickerJsunit.test.ets", "BasicJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "SwiperJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "PageTransitionJsunit.test.ets", "basicabilityapi.test.js", "ScrollCodeJsunit.test.ets", "TimeStampJsunit.test.ets", "PriorityGestureJsunit.test.ets", "FillModeJsunit.test.ets", "systemPrompt.ets", "NavigationJsunit.test.ets", "CustomDialogControllerJsunit.test.ets", "LongPressGesture.test.ets", "NavigatorCodeJsunit.test.ets", "BindPopupJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "onErrorcallback", "api_method_all": "onError(callback: (event?: { componentWidth: number; componentHeight: number }) => void): ImageAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "onErrorcallback", "api_method_all": "onError(callback: (event?: { componentWidth: number; componentHeight: number }) => void): ImageAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "onFinishevent", "api_method_all": "onFinish(event: () => void): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ImageAttribute", "api_method_name": "onFinishevent", "api_method_all": "onFinish(event: () => void): ImageAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}