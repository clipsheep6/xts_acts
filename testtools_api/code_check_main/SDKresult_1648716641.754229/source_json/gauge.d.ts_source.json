{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\gauge", "api": [{"api_class_name": "GaugeInterface", "api_method_all": "interface GaugeInterface {\n  \n  (options: { value: number; min?: number; max?: number }): GaugeAttribute;\n}", "api_method_name": "GaugeInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GaugeInterface", "api_method_name": "options", "api_method_all": "(options: { value: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 791, "since": 8, "api_used": "\u662f", "lines": ["= await router.push(options);\n          await U", " start\");\n      let options = {\n        uri: 'p", "(obj.$attrs.overlay.options.offset.x).assertEqu", "(obj.$attrs.overlay.options.align).assertEqual(", "(obj.$attrs.overlay.options.offset.y).assertEqu", " (done) {\n      let options = {\n        uri: 'p"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GaugeInterface", "api_method_name": "min", "api_method_all": "min?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 99, "since": 8, "api_used": "\u662f", "lines": ["808080')\n          .minLabel('10')\n        ", "fHeight(250)\n      .miniHeight(100)\n      .", "  Gauge({ value: 0, min: 0, max: 100 })\n   ", ": {\n                min: 0,\n               ", "tringify(obj.$attrs.min));\n      console.lo", "arWidth(240)\n      .minSideBarWidth(210)\n  ", "tringify(obj.$attrs.miniHeight))\n      expe", "SetValue,\n          min: 0,\n          max: ", "  expect(obj.$attrs.min).assertEqual('100.0", ", this.foodItem.vitaminC + 'mg')\n    }\n    ", ".$attrs.constructor.min).assertEqual(0.0000", "onsole.log('Panel\u2018s miniHeight is ' + JSON.", "tValue,\n            min: 0,\n            max", "ro = this.$element(\"miniHeightPro\").getInsp", "ART');\n      app.terminate();\n      console", "tringify(obj.$attrs.minFontSize));\n      co", " 20, maxWidth: 200, minHeight: 0, maxHeight", "edientItem('', 'VitaminC', this.foodItem.vi", "alue: 40,\n          min: 0,\n          max: ", "nsole.log(\"cd blank min\" + JSON.stringify(o", "iniHeightPro : this.miniHeightPro,\n\n       ", "  expect(obj.$attrs.min).assertEqual('0.00p", ".fontSize)\n        .minFontSize(this.minFon", "  .minFontSize(this.minFontSize)\n        .l", "   .constraintSize({minWidth: '10%', maxWid", "ghtPro,\n            miniHeightPro : this.mi", "rection.Row)\n      .minCount(1)\n      .cell", "eBarWidth(240)\n    .minSideBarWidth(210)\n  ", "umber = 15\n  @State minFontSize: number = 1", "  expect(obj.$attrs.miniHeight).assertEqual", "tPro: null,\n        miniHeightPro: null\n   ", "ctor()\n        this.miniHeightPro = this.$e", "onsole.log(\"cd text minFontSize\" + JSON.str", " constraintSize = { minWidth: 20, maxWidth:"], "files": ["Slider.ets", "Text.ets", "PanelJsunit.test.ets", "gauge.ets", "SystemAppJsunit.test.ets", "TextJsunit.test.ets", "sideBar.ets", "Panel.ets", "Sidebar.ets", "SliderJsunit.test.ets", "sliderProps.test.js", "BlankJsunit.test.ets", "index.js", "mediaquery.test.js", "backgroundAndSizeSetting.ets", "slider.ets", "grid.ets", "fontWeight.ets", "panelProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GaugeInterface", "api_method_name": "max", "api_method_all": "max?: number }): GaugeAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 147, "since": 8, "api_used": "\u662f", "lines": ["overflow }\n  @State maxLines: number = 2\n  ", "lues: [20, 40, 20], max: 100})\n        .wid", "tringify(obj.$attrs.maxFontSize));\n      co", "arWidth(210)\n      .maxSideBarWidth(260)\n  ", "ineOffset)\n        .maxLines(2)\n        .te", "erSpacing)\n        .maxFontSize(this.maxFon", "fontColor(0xCCCCCC).maxLines(1)\n        Col", "  expect(obj.$attrs.maxCount).assertEqual('", "his.counts,\n        maxCount: 99,\n        s", "eBarWidth(210)\n    .maxSideBarWidth(260)\n  ", "umber = 15\n  @State maxFontSize: number = 1", "e = { minWidth: 20, maxWidth: 200, minHeigh", "tringify(obj.$attrs.maxCount))\n      consol", "onsole.log(\"cd text maxFontSize\" + JSON.str", "onsole.log(\"cd text maxLines\" + JSON.string", ".$attrs.constructor.max).assertEqual(100.00", ".Right,\n            maxCount: 99,\n         ", "tringify(obj.$attrs.maxLines));\n      conso", "tringify(obj.$attrs.max));\n      console.lo", "  expect(obj.$attrs.maxLines).assertEqual(\"", "flow.Clip)\n        .maxLines(2)\n        .te", "e({minWidth: '10%', maxWidth: '50%', height", "sole.log(\"yr badge0 maxCount-'99'\" + JSON.s", ".log(\"cd  DataPanel max\" + JSON.stringify(o", "  expect(obj.$attrs.max).assertEqual(100.00", "el('10')\n          .maxLabel('10')\n        ", "n.Left,\n            maxCount: 99,\n         ", "{ value: 0, min: 0, max: 100 })\n        .ke", "lues: [20, 40, 20], max: 100, type: DataPan", "  min: 0,\n          max: 100,\n          ste", "ghtTop,\n            maxCount: 99,\n         ", " 200, minHeight: 0, maxHeight: 50 }\n  @Stat", "FF0000')\n          .maxLength(10)\n         ", "min: 0,\n            max: 100,\n            s", "t ATTRS_MAXLINES = 'maxLines'\nconst ATTRS_D", "  .maxFontSize(this.maxFontSize)\n        .f"], "files": ["BadgeJsunit.test.ets", "Slider.ets", "badge.ets", "Text.ets", "gauge.ets", "TextInput.ets", "TextJsunit.test.ets", "Constants.ets", "sideBar.ets", "Sidebar.ets", "DataPanel.ets", "SliderJsunit.test.ets", "sliderProps.test.js", "inputProps.test.js", "index.js", "mediaquery.test.js", "backgroundAndSizeSetting.ets", "badgeProps.test.js", "DataPanelJsunit.test.ets", "slider.ets", "textareaProps.test.js", "Badge.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GaugeAttribute", "api_method_all": "declare class GaugeAttribute extends CommonMethod<GaugeAttribute> {\n  \n  value(value: number): GaugeAttribute;\n\n  \n  startAngle(angle: number): GaugeAttribute;\n\n  \n  endAngle(angle: number): GaugeAttribute;\n\n  \n  colors(colors: Array<any>): GaugeAttribute;\n\n  \n  strokeWidth(length: Length): GaugeAttribute;\n}", "api_method_name": "GaugeAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GaugeAttribute", "api_method_name": "value", "api_method_all": "value(value: number): GaugeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 14499, "since": 8, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GaugeAttribute", "api_method_name": "startAngle", "api_method_all": "startAngle(angle: number): GaugeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.startAngleValue != null) {\n   ", "geValue}`)\n        .startAngle(`${this.startAngleV", "ata: {\n            \"startAngleValue\": \"-10\"\n      ", "xpect(objNew.$attrs.startAngle).assertEqual('-10.0", "ata: {\n            \"startAngleValue\": \"nan\"\n      ", "xpect(objNew.$attrs.startAngle).assertEqual('nan')", ".startAngle(`${this.startAngleValue}`)\n        .en", "ue = eventData.data.startAngleValue;\n      }\n     ", "ull) {\n        this.startAngleValue = eventData.da", "xpect(objNew.$attrs.startAngle).assertEqual('200.0", "ring = 20;\n  @State startAngleValue: string = 210;", "ata: {\n            \"startAngleValue\": \"200\"\n      "], "files": ["GaugeJsunit.test.ets", "gauge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GaugeAttribute", "api_method_name": "endAngle", "api_method_all": "endAngle(angle: number): GaugeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["ata: {\n            \"endAngleValue\": \"200\"\n      ", " if (eventData.data.endAngleValue != null) {\n   ", "xpect(objNew.$attrs.endAngle).assertEqual('-10.0", "ing = 210;\n  @State endAngleValue: string = 150;", "ata: {\n            \"endAngleValue\": \"nan\"\n      ", "ue = eventData.data.endAngleValue;\n      }\n     ", "leValue}`)\n        .endAngle(`${this.endAngleVal", "xpect(objNew.$attrs.endAngle).assertEqual('nan')", "ull) {\n        this.endAngleValue = eventData.da", "  .endAngle(`${this.endAngleValue}`)\n        .st", "ata: {\n            \"endAngleValue\": \"-10\"\n      ", "xpect(objNew.$attrs.endAngle).assertEqual('200.0"], "files": ["GaugeJsunit.test.ets", "gauge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GaugeAttribute", "api_method_name": "colors", "api_method_all": "colors(colors: Array<any>): GaugeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["    radius: 60,\n    colors:[[0xAEE1E1, 0.0], [", "ection.Top,\n        colors: [[0xAEE1E1, 0.0], ", "  end: 356,\n        colors: [[0xAEE1E1, 0.0], ", "irection,\n          colors: [[0xAEE1E1, 0.0], ", ",\n    end: 359,\n    colors: [[0xAEE1E1, 0.0], ", "Direction.Left,\n    colors: [[0xAEE1E1, 0.0], ", "radius: 70,\n        colors: [[0xAEE1E1, 0.0], "], "files": ["colorGradient.ets", "gradientDirection.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GaugeAttribute", "api_method_name": "strokeWidth", "api_method_all": "strokeWidth(length: Length): GaugeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 227, "since": 0, "api_used": "\u662f", "lines": ["(obj.$attrs.divider.strokeWidth).assertEqual(\"3.00v", "ole.log(\"cd divider strokeWidth\" + JSON.stringify(o", "stroke(Color.Black).strokeWidth(4)\n      .strokeDas", "ring = 50;\n  @State strokeWidthValue: string = 20;\n", "ical(true)\n        .strokeWidth(10)\n        .height", "ata: {\n            \"strokeWidthValue\": \"30\",\n      ", "}).stroke(0xEE8443).strokeWidth(10).strokeDashArray", "ata: {\n            \"strokeWidth\": \"3.000000vp\"\n    ", "strokeWidth(`${this.strokeWidthValue}`)\n        .wi", "ata: {\n            \"strokeWidthValue\": \"-30\",\n     ", "th = eventData.data.strokeWidth;\n      }\n      if (", "(obj.$attrs.divider.strokeWidth).assertEqual(\"2.00v", "})\n      .divider({ strokeWidth: 2, color: 0xFFFFFF", "  .stroke(0xEE8443).strokeWidth(10).strokeDashArray", "xpect(objNew.$attrs.strokeWidth).assertEqual('12111", " Color.Red\n  @State strokeWidth: number = 7\n  @Stat", "stroke(Color.Black).strokeWidth(2)\n\n      Text('bor", "leValue}`)\n        .strokeWidth(`${this.strokeWidth", "7).stroke(0xEE8443).strokeWidth(10).fillOpacity(1)\n", "  expect(obj.$attrs.strokeWidth).assertEqual('20.00", "  strokeWidth: this.strokeWidth,\n          color: t", "umber = 1;\n  @State strokeWidth: number = 1;\n  @Sta", "stroke(Color.Black).strokeWidth(3).key('path')\n\n   ", "cal(false)\n        .strokeWidth(5)\n        .color(t", "7).stroke(0xEE8443).strokeWidth(10).strokeLineJoin(", "xpect(objNew.$attrs.strokeWidth).assertEqual('-30.0", "  .strokeWidth(this.strokeWidth)\n      .antiAlias(t", "Black).key('path1').strokeWidth(3)\n\n      Text('Str", "ue = eventData.data.strokeWidthValue;\n      }\n     ", "tyle.Butt)\n        .strokeWidth(this.strokeWidth)\n ", "}).stroke(0xEE8443).strokeWidth(10).strokeOpacity(0", "                    strokeWidth: 5,\n               ", "ata: {\n            \"strokeWidthValue\": \"121111111\"\n", "tringify(obj.$attrs.strokeWidth));\n      console.lo", "  .strokeWidth(this.strokeWidth)\n        .color(thi", "  expect(obj.$attrs.strokeWidth).assertEqual(\"7.000", "lor.Green)\n        .strokeWidth(10)\n        .height", "n = false;\n  @State strokeWidth: number = 2.000000;", "ull) {\n        this.strokeWidthValue = eventData.da", "\n        .divider({ strokeWidth: 2, color: 0xFFFFFF", "divider({\n          strokeWidth: this.strokeWidth,\n", " if (eventData.data.strokeWidth != null) {\n        ", " if (eventData.data.strokeWidthValue != null) {\n   ", "ull) {\n        this.strokeWidth = eventData.data.st", "rokeOpacity)\n      .strokeWidth(this.strokeWidth)\n ", "xpect(objNew.$attrs.strokeWidth).assertEqual('30.00"], "files": ["Shape.ets", "pathProps.test.js", "circleProps.test.js", "lineProps.test.js", "divider.ets", "gauge.ets", "polylineProps.test.js", "Path.ets", "ellipseProps.test.js", "polygonProps.test.js", "list.ets", "List.ets", "dragEvent2.ets", "index.js", "enumsLineCapStyle.ets", "GaugeJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "edgeEffect.ets", "dragEvent.ets", "tspanProps.test.js", "svgProps.test.js", "shape.ets", "svgTextProps.test.js", "textPathProps.test.js", "path.ets", "ListJsunit.test.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}]}