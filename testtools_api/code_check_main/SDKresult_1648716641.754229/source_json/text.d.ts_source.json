{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\text", "api": [{"api_class_name": "TextInterface", "api_method_all": "interface TextInterface {\n  \n  (content?: string | Resource): TextAttribute;\n}", "api_method_name": "TextInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextInterface", "api_method_name": "content", "api_method_all": "(content?: string | Resource): TextAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 127, "since": 7, "api_used": "\u662f", "lines": [");\n      let keys = contentStorage.keys();\n    ", "      let hasKey2 = contentStorage.has(\"key2\");", "      let isClear = contentStorage.clear(\"key1\"", "Obj) {\n        this.content = pieceObj.content;", "      let hasKey3 = contentStorage.has(\"key3\");", "  expect(obj.$attrs.content).assertEqual('strin", "100] START');\n      contentStorage.set<string>(", "ieceCode {\n  @State content: string = \"piece\";\n", ", \"value11\");\n      contentStorage.set<int>(\"ke", "n() {\n      Piece({ content: this.content , ico", "st ATTRS_CONTENT = 'content'\n\n\n\n\n", ");\n      let key4 = contentStorage.get<string>(", " is: \" + obj.$attrs.content);\n      expect(obj.", "      let hasKey4 = contentStorage.has(\"key4\");", "100] START');\n      contentStorage.setOrCreate<", "    let isMutable = contentStorage.isMutable(\"k", "PropertyJsunit();\n  contentStorageJsunit();\n  t", "t.test.ets';\nimport contentStorageJsunit from '", "(\"key2\", 12);\n      contentStorage.set<boolean>", "      let hasKey1 = contentStorage.has(\"key1\");", "e;\n      let size = contentStorage.size();\n    ", " message: 'content1 content1',\n          placem", "1\", \"value\");\n      contentStorage.setOrCreate<", ");\n      let key2 = contentStorage.get<int>(\"ke", ");\n      let key3 = contentStorage.get<boolean>", "placeholder: 'input content', controller: this.", ";\n\n      let link = contentStorage.link(\"key1\")", "ey3\", false);\n      contentStorage.set<string>(", ");\n      let key1 = contentStorage.get<string>(", "nction () {\n    let contentStorage = new Conten", "     let isDelete = contentStorage.delete(\"key1", ".content = pieceObj.content;\n        this.icon ", "est_0100 obj.$attrs.content is: \" + obj.$attrs.", ");\n      let prop = contentStorage.prop(\"key1\")", "(\"key2\", 11);\n      contentStorage.setOrCreate<", "          message: 'content1 content1',\n       ", "ece({ content: this.content , icon: this.icon }", ");\n      let size = contentStorage.size();\n    "], "files": ["ImageJsunit.test.ets", "search.ets", "Flex.ets", "Tab.ets", "ContentStorage.test.ets", "RowSplit.ets", "PieceCode.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "Stack.ets", "List.test.ets", "AlphabetIndexer.ets", "Constants.ets", "commonComponentJsApi.test.js", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "DataPanel.ets", "WebPage.ets", "AppStorage.ets", "GridContainer.ets", "PropJsunit.test.ets", "index.js", "AppStorageJsunit.test.ets", "Divider.ets", "Link.ets", "pieceProps.test.js", "Button.ets", "bindPopup.ets", "Column.ets", "ScrollBar.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_all": "declare class TextAttribute extends CommonMethod<TextAttribute> {\n  \n  fontColor(value: ResourceColor): TextAttribute;\n\n  \n  fontSize(value: number | string | Resource): TextAttribute;\n\n  \n  minFontSize(value: number | string | Resource): TextAttribute;\n\n  \n  maxFontSize(value: number | string | Resource): TextAttribute;\n\n  \n  fontStyle(value: FontStyle): TextAttribute;\n\n  \n  fontWeight(value: number | FontWeight | string): TextAttribute;\n\n  \n  textAlign(value: TextAlign): TextAttribute;\n\n  \n  lineHeight(value: number | string | Resource): TextAttribute;\n\n  \n  textOverflow(value: { overflow: TextOverflow }): TextAttribute;\n\n  \n  fontFamily(value: string | Resource): TextAttribute;\n\n  \n  maxLines(value: number): TextAttribute;\n\n  \n  decoration(value: { type: TextDecorationType; color?: ResourceColor }): TextAttribute;\n\n  \n  letterSpacing(value: number | string): TextAttribute;\n\n  \n  textCase(value: TextCase): TextAttribute;\n\n  \n  baselineOffset(value: number | string): TextAttribute;\n}", "api_method_name": "TextAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "fontColor", "api_method_all": "fontColor(value: ResourceColor): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 384, "since": 7, "api_used": "\u662f", "lines": ["Size(35)\n          .fontColor(Color.Blue)\n       ", " {\n                \"fontColor\": this.fontColor,\n ", "ize(9).width('90%').fontColor(0xCCCCCC)\n        R", "hrink').fontSize(9).fontColor(0xCCCCCC).width('90", "extStyle {\n  @State fontColor: Color = Color.Red;", "grid').fontSize(20).fontColor(Color.Black).width(", "pect(eventData.data.fontColor).assertEqual(Color.", "\"[testTextStyle001] fontColor: \" + obj.$attrs.fon", "Blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ness').fontSize(15).fontColor(0xCCCCCC).width('90", "rast').fontSize(15).fontColor(0xCCCCCC).width('90", "ty 4').fontSize(20).fontColor(Color.Black).width(", "s rolling\"\n  @State fontColor: Color = Color.Blue", "blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ive text')\n        .fontColor(Color.Red)\n        ", "lor) {\n        this.fontColor = eventData.data.fo", "vert').fontSize(15).fontColor(0xCCCCCC).width('90", "'marquee')\n        .fontColor(this.fontColor)\n   ", "      .fontSize(12).fontColor(0xCCCCCC).maxLines(", "adow').fontSize(15).fontColor(0xCCCCCC).width('90", "tate').fontSize(15).fontColor(0xCCCCCC).width('90", "    .fontColor(this.fontColor)\n        .colorBlen", "  \"fontColor\": this.fontColor,\n              }\n  ", "xGrow\").fontSize(9).fontColor(0xCCCCCC).width('90", " row').fontSize(20).fontColor(Color.Black).width(", "  expect(obj.$attrs.fontColor).assertEqual('#FFFF", "e(20)\n        .key('fontColor')\n\n      Text(`text", "Items').fontSize(9).fontColor(0xCCCCCC).width('90", "or = eventData.data.fontColor;\n      } else if (e", "pro text')\n        .fontColor(Color.Orange)\n     ", "cale').fontSize(15).fontColor(0xCCCCCC).width('90", "ntColor}`)\n        .fontColor(this.fontColor)\n   ", "lor: \" + obj.$attrs.fontColor);\n      expect(obj.", "\"[testTextStyle002] fontColor: \" + obj.$attrs.fon", "ageShow() {\n    let fontColorChangeEvent = {\n    ", "    .fontColor(this.fontColor)\n        .fontSize(", " getInspectorByKey('fontColor');\n      console.in", "  events_emitter.on(fontColorChangeEvent, this.te", "rate').fontSize(15).fontColor(0xCCCCCC).width('90", "Basis').fontSize(9).fontColor(0xCCCCCC).width('90", " state is: ' + this.fontColor);\n          try {\n ", "ata: {\n            \"fontColor\": Color.Blue\n      ", "t font color ${this.fontColor}`)\n        .fontCol", "nSelf\").fontSize(9).fontColor(0xCCCCCC).width('90", " if (eventData.data.fontColor) {\n        this.fon"], "files": ["enumsHorizontalAlign.ets", "imageFit.ets", "Span.ets", "column.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "textArea.ets", "textInput.ets", "transForm.ets", "path.ets", "Column.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "PatternLock.ets", "Stepper.ets", "enumsImage.ets", "PieceCode.ets", "textStyle.ets", "imageEffects.ets", "textClock.ets", "layoutConstraints.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "Path.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "TextTimerJsunit.test.ets", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "ColumnSplit.ets", "colorGradient.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "fontSize", "api_method_all": "fontSize(value: number | string | Resource): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 588, "since": 7, "api_used": "\u662f", "lines": ["lor.Green)\n        .fontSize(this.fontSize)\n    ", "w').key(\"flexGrow\").fontSize(9).fontColor(0xCCCC", "t('4')\n            .fontSize(20)\n            .us", "ge Two')\n          .fontSize(35)\n          .font", "  Text('grayscale').fontSize(15).fontColor(0xCCC", "     Text('shadow').fontSize(15).fontColor(0xCCC", "  Text('hueRotate').fontSize(15).fontColor(0xCCC", "t('1')\n            .fontSize(20)\n            .us", "     Text('invert').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backdr", "ETS TEST')\n        .fontSize(50)\n        .fontWe", "g container: grid').fontSize(20).fontColor(Color", "(60)\n              .fontSize(18)\n              .", "0)\n                .fontSize(16)\n               ", "ext('default text').fontSize(20)\n\n      Text(`te", " {\n                \"fontSize\": this.fontSize,\n  ", "   \"fontSize\": this.fontSize,\n              }\n  ", "2cb)\n              .fontSize(40)\n              .", "     Text('Center').fontSize(25)\n        }\n     ", "     .fontSize(this.fontSize)\n        .allowScal", "bb2cb)\n            .fontSize(20)\n            .as", "').key(\"alignSelf\").fontSize(9).fontColor(0xCCCC", "  Text('font blur').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backgr", "ng container: row').fontSize(20).fontColor(Color", "Color.Red;\n  @State fontSize: string = 20;\n  @St", "xt font size ${this.fontSize}`)\n        .fontSiz", "enter)\n            .fontSize(20)\n        }, item", "fontColor)\n        .fontSize(20)\n        .key('f", "t('3')\n            .fontSize(20)\n            .us", "e four')\n          .fontSize(35)\n          .font", " Text('brightness').fontSize(15).fontColor(0xCCC", "margin(30)\n        .fontSize(20)\n        .onClic", " Text('alignItems').fontSize(9).fontColor(0xCCCC", " state is: ' + this.fontSize);\n          try {\n ", "displayPriority 4').fontSize(20).fontColor(Color", " layer')\n          .fontSize(12).fontColor(0xCCC", "olor.Blue;\n  @State fontSize: number = 50;\n  @St", "  Text('flexBasis').fontSize(9).fontColor(0xCCCC", "   Text('saturate').fontSize(15).fontColor(0xCCC", "ext('backdropBlur').fontSize(15).fontColor(0xCCC", "ge One')\n          .fontSize(35)\n          .font", "   Text('contrast').fontSize(15).fontColor(0xCCC", "t('2')\n            .fontSize(20)\n            .us", "       Text('Left').fontSize(25)\n        }\n     ", "      Text('Right').fontSize(25)\n        }\n     ", " Three')\n          .fontSize(35)\n          .font", " Text('flexShrink').fontSize(9).fontColor(0xCCCC"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "placement.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "Stack.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "stepper.ets", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "MarqueeJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "lazyForEach.ets", "listItem.ets", "grid.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "rating.ets", "Path.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "Toggle.ets", "slider.ets", "Calendar.ets", "refresh.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "minFontSize", "api_method_all": "minFontSize(value: number | string | Resource): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["tringify(obj.$attrs.minFontSize));\n      console.lo", ".fontSize)\n        .minFontSize(this.minFontSize)\n ", "onsole.log(\"cd text minFontSize\" + JSON.stringify(o", "  .minFontSize(this.minFontSize)\n        .letterSpa", "umber = 15\n  @State minFontSize: number = 15\n  @Sta"], "files": ["TextJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "maxFontSize", "api_method_all": "maxFontSize(value: number | string | Resource): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["umber = 15\n  @State maxFontSize: number = 15\n  @Sta", "tringify(obj.$attrs.maxFontSize));\n      console.lo", "  .maxFontSize(this.maxFontSize)\n        .fontWeigh", "erSpacing)\n        .maxFontSize(this.maxFontSize)\n ", "onsole.log(\"cd text maxFontSize\" + JSON.stringify(o"], "files": ["TextJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "fontStyle", "api_method_all": "fontStyle(value: FontStyle): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 62, "since": 7, "api_used": "\u662f", "lines": ["gCallBack);\n    let fontStyleChangeEvent = {\n    ", "\"[testTextStyle014] fontStyle: \" + obj.$attrs.fon", "ull) {\n        this.fontStyle = eventData.data.fo", "  expect(obj.$attrs.fontStyle).assertEqual('FontS", "  events_emitter.on(fontStyleChangeEvent, this.te", "le = eventData.data.fontStyle;\n      }\n      if(e", "ata: {\n            \"fontStyle\": FontStyle.Normal\n", "t font style ${this.fontStyle}`)\n        .fontSty", "ntSize(20)\n        .fontStyle(FontStyle.Normal)\n ", "ntStyle}`)\n        .fontStyle(this.fontStyle)\n   ", "number = 1\n  @State fontStyle: FontStyle = FontSt", "\"[testTextStyle015] fontStyle: \" + obj.$attrs.fon", "ntSize(20)\n        .fontStyle(FontStyle.Italic)\n ", "\"[testTextStyle012] fontStyle: \" + obj.$attrs.fon", ".Bold)\n            .fontStyle(FontStyle.Italic)\n ", "\"[testTextStyle011] fontStyle: \" + obj.$attrs.fon", "ring = 20;\n  @State fontStyle: FontStyle = FontSt", "else {\n        this.fontStyle = eventData.data.fo", "    .fontStyle(this.fontStyle)\n        .fontSize(", " getInspectorByKey('fontStyle');\n      console.in", "ata: {\n            \"fontStyle\": 0x80000000\n      ", "ns-serif\")\n        .fontStyle(FontStyle.Normal)\n ", " ATTRS_FONTSTYLE = 'fontStyle'\nconst ATTRS_FONTSI", "ition.End;\n  @State fontStyle: FontStyle = FontSt", "le = eventData.data.fontStyle;\n      }\n    }\n  }\n", "  if(eventData.data.fontStyle != null) {\n        ", "ata: {\n            \"fontStyle\": 'error'\n         ", "yle: \" + obj.$attrs.fontStyle);\n      expect(obj.", "ata: {\n            \"fontStyle\": 0x7FFFFFFF\n      ", "    .fontStyle(this.fontStyle)\n        .showDelet", "his.Color)\n        .fontStyle(this.fontStyle)\n   ", "e(20)\n        .key('fontStyle')\n\n      Text(`text", "\"[testTextStyle013] fontStyle: \" + obj.$attrs.fon"], "files": ["TextInputJsunit.test.ets", "textStyle.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "textArea.ets", "textInput.ets", "Constants.ets", "TextArea.ets", "PieceCode.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "fontWeight", "api_method_all": "fontWeight(value: number | FontWeight | string): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 147, "since": 7, "api_used": "\u662f", "lines": [": FoodData\n  @State fontWeight: FontWeight = FontW", "\"[testTextStyle020] fontWeight: \" + obj.$attrs.fon", "Size(17.4)\n        .fontWeight(this.fontWeight)\n  ", "ata: {\n            \"fontWeight\": 0x80000000\n      ", "(2)\n    }\n    .key('fontWeight')\n  }\n\n  build() {\n", "ata: {\n            \"fontWeight\": 400\n          }\n ", "ata: {\n            \"fontWeight\": 0x7FFFFFFF\n      ", "  expect(obj.$attrs.fontWeight).assertEqual('FontW", "ght) {\n        this.fontWeight = eventData.data.fo", " getInspectorByKey('fontWeight');\n      console.in", "ATTRS_FONTWEIGHT = 'fontWeight'\nconst ATTRS_FONTST", "ntSize(50)\n        .fontWeight(FontWeight.Bold)\n  ", "\"[testTextStyle018] fontWeight: \" + obj.$attrs.fon", "   .fontWeight(this.fontWeight)\n        .fontSize(", "tWeight}`)\n        .fontWeight(this.fontWeight)\n  ", "gCallBack);\n    let fontWeightChangeEvent = {\n    ", "t fontWeight ${this.fontWeight}`)\n        .fontWei", "  events_emitter.on(fontWeightChangeEvent, this.te", ".fontSize)\n        .fontWeight(FontWeight.Bold)\n  ", "le.Italic;\n  @State fontWeight: string = 700;\n  @S", "ht = eventData.data.fontWeight;\n      } else if (e", "e(20)\n        .key('fontWeight')\n\n      Text(`text", "le.Italic)\n        .fontWeight(700)\n        .fontF", "ata: {\n            \"fontWeight\": 'error'\n         ", "ale(false)\n        .fontWeight(FontWeight.Bold)\n  ", "ght: \" + obj.$attrs.fontWeight);\n      expect(obj.", "\"[testTextStyle017] fontWeight: \" + obj.$attrs.fon", "le.Normal)\n        .fontWeight(400)\n        .fontF", ")\n\n      Text(`text fontWeight ${this.fontWeight}`", "\"[testTextStyle016] fontWeight: \" + obj.$attrs.fon", "\"[testTextStyle019] fontWeight: \" + obj.$attrs.fon", "   .fontWeight(this.fontWeight)\n        .layoutWei", " if (eventData.data.fontWeight) {\n        this.fon"], "files": ["systemRouterA.ets", "RowSplit.ets", "gridPage.ets", "Slider.ets", "PanDirectionJsunit.test.ets", "Qrcode.ets", "Text.ets", "textStyle.ets", "Counter.ets", "Stack.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "Constants.ets", "ohosRouterB.ets", "Progress.ets", "Blank.ets", "ColumnSplit.ets", "Prop.ets", "Scroll.ets", "FormComponentPage.ets", "GestureModeJsunit.test.ets", "TextStyleJsunit.test.ets", "marquee.ets", "Rating.ets", "AppStorage.ets", "TextArea.ets", "QrCode.ets", "GridContainer.ets", "direction.ets", "ohosRouterA.ets", "index.ets", "Link.ets", "systemRouterB.ets", "TextInputJsunit.test.ets", "TextAreaJsunit.test.ets", "textArea.ets", "textInput.ets", "Button.ets", "Image.ets", "Calendar.ets", "fontWeight.ets", "ScrollBar.ets", "Badge.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "textAlign", "api_method_all": "textAlign(value: TextAlign): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 199, "since": 7, "api_used": "\u662f", "lines": ["wberry')\n          .textAlign(TextAlign.Center).b", "ign: \" + obj.$attrs.textAlign);\n      expect(obj.", "th(120).height(120).textAlign(TextAlign.Center).f", "PositionSetting001] textAlign: \" + obj.$attrs.tex", "xD2B48C)\n          .textAlign(TextAlign.Center)\n ", "(10)\n              .textAlign(TextAlign.Center).b", "dth('90%')\n        .textAlign(TextAlign.Start).ma", "'mango')\n          .textAlign(TextAlign.Center).b", "0BFFF)\n            .textAlign(TextAlign.Center)\n ", "Radius(10)\n        .textAlign(TextAlign.Center).b", "682B4)\n            .textAlign(TextAlign.Center)\n ", "'cursive')\n        .textAlign(TextAlign.Center)\n ", "banana')\n          .textAlign(TextAlign.Center).b", "  expect(obj.$attrs.textAlign).assertEqual('TextA", " if (eventData.data.textAlign) {\n        this.ali", "PositionSetting003] textAlign: \" + obj.$attrs.tex", "FEEEE)\n            .textAlign(TextAlign.Center)\n ", " ATTRS_TEXTALIGN = 'textAlign'\nconst ATTRS_CONTEN", "height(50)\n        .textAlign(TextAlign.Center)\n ", "  expect(obj.$attrs.textAlign).assertEqual(\"TextA", "oundColor(0xF5DEB3).textAlign(TextAlign.Center)\n ", " getInspectorByKey('textAlign');\n      console.in", "xFFEFD5)\n          .textAlign(TextAlign.Center)\n ", "xF5DEB3)\n          .textAlign(TextAlign.Center)\n ", "orange')\n          .textAlign(TextAlign.Center).b", "582B4)\n            .textAlign(TextAlign.Center)\n ", "C4)\n          .key('textAlign')\n\n        Text('di", "6)\n                .textAlign(TextAlign.Center)\n ", "6)\n                .textAlign(TextAlign.Center).b", "(18)\n              .textAlign(TextAlign.Center)\n ", "'apple')\n          .textAlign(TextAlign.Center).b", "ata: {\n            \"textAlign\": Alignment.BottomE"], "files": ["flex.ets", "gridContainer.ets", "gridPage.ets", "canvas.ets", "badge.ets", "bindContextMenu.ets", "Text.ets", "textStyle.ets", "Navigation.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "Constants.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "text.ets", "Grid.ets", "FormComponentPage.ets", "layoutConstraints.ets", "list.ets", "positionSetting.ets", "List.ets", "TextArea.ets", "GridContainer.ets", "dragEvent2.ets", "index.js", "Swiper.ets", "edgeEffect.ets", "backgroundAndSizeSetting.ets", "border.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "GridItem.ets", "TextAreaJsunit.test.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "listItem.ets", "grid.ets", "image.ets", "sharedTransition.ets", "ScrollBar.ets", "ColumnSplit.ets", "scrollCode.ets", "NavigatorCode.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "lineHeight", "api_method_all": "lineHeight(value: number | string | Resource): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 29, "since": 7, "api_used": "\u662f", "lines": ["tAlign.End\n  @State lineHeight: string= '15fp'\n  @", "dth(200)\n          .lineHeight(50)\n          .marg", "tOverflow)\n        .lineHeight(this.lineHeight)\n  ", "onsole.log(\"cd text lineHeight\" + JSON.stringify(o", "ght(100)\n          .lineHeight(70)\n          .back", "tringify(obj.$attrs.lineHeight));\n      console.lo", "  expect(obj.$attrs.lineHeight).assertEqual(\"15\")\n", "ight(80)\n          .lineHeight(70)\n          .back", "   .lineHeight(this.lineHeight)\n        .baselineO", "Size(16)\n          .lineHeight(37)\n          .bord", "en }) {\n      Text('lineHeightt')\n        .fontSiz", "ATTRS_LINEHEIGHT = 'lineHeight'\nconst ATTRS_FONTCO"], "files": ["flex.ets", "stepper.ets", "TextJsunit.test.ets", "Constants.ets", "Stepper.ets", "badge.ets", "Text.ets", "text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "textOverflow", "api_method_all": "textOverflow(value: { overflow: TextOverflow }): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 33, "since": 7, "api_used": "\u662f", "lines": ["textAlign)\n        .textOverflow(this.textOverflow)\n", "  expect(obj.$attrs.textOverflow).assertEqual(\"TextO", "onsole.log(\"cd text textOverflow\" + JSON.stringify(o", "TRS_TEXTOVERFLOW = 'textOverflow'\nconst ATTRS_LINEHE", "State textOverflow: textOverflow<{ \"overflow\": TextO", "ata: {\n            \"textOverflow\": TextOverflow.None", "gn.Center)\n        .textOverflow(TextOverflow.None)\n", "ull) {\n        this.textOverflow = parseInt(eventDat", " if (eventData.data.textOverflow != null) {\n        ", "nsole.log(\"cd text1 textOverflow\" + JSON.stringify(o", "ign.Start;\n  @State textOverflow: TextOverflow = Tex", "ign.Start)\n        .textOverflow(TextOverflow.Clip)\n", "w.Ellipsis\n  @State textOverflow: textOverflow<{ \"ov", "nsole.log(\"cd text2 textOverflow\" + JSON.stringify(o", "textAlign)\n        .textOverflow({ overflow: this.te", "ow({ overflow: this.textOverflow })\n        .decorat", "eInt(eventData.data.textOverflow);\n      }\n    }\n  }", " .textOverflow(this.textOverflow)\n        .lineHeigh", "xpect(objNew.$attrs.textOverflow).assertEqual('TextO", "  expect(obj.$attrs.textOverflow).assertEqual('TextO", "tringify(obj.$attrs.textOverflow));\n      console.lo"], "files": ["TextJsunit.test.ets", "Constants.ets", "image.ets", "Text.ets", "text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "fontFamily", "api_method_all": "fontFamily(value: string | Resource): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 48, "since": 7, "api_used": "\u662f", "lines": ["gCallBack);\n    let fontFamilyChangeEvent = {\n    ", "\"[testTextStyle023] fontFamily: \" + obj.$attrs.fon", "ily: \" + obj.$attrs.fontFamily);\n      expect(obj.", "  expect(obj.$attrs.fontFamily).assertEqual('cursi", "\"[testTextStyle022] fontFamily: \" + obj.$attrs.fon", "  events_emitter.on(fontFamilyChangeEvent, this.te", "  expect(obj.$attrs.fontFamily).assertEqual('sans-", "e(20)\n        .key('fontFamily')\n\n      Text('red ", "tringify(obj.$attrs.fontFamily));\n      console.lo", "fontStyle)\n        .fontFamily(\"sans-serif\")\n     ", "  expect(obj.$attrs.fontFamily).assertEqual(\"sans-", "eight(700)\n        .fontFamily('cursive')\n        ", "ht.Bold)\n          .fontFamily('cursive')\n        ", "eight(400)\n        .fontFamily('source-sans-pro,cu", "ight.Bold)\n        .fontFamily('cursive')\n        ", "onsole.log(\"cd text fontFamily\" + JSON.stringify(o", "ily) {\n        this.fontFamily = eventData.data.fo", "ATTRS_FONTFAMILY = 'fontFamily'\nconst ATTRS_FONTWE", "tFamily}`)\n        .fontFamily(this.fontFamily)\n  ", "99')\n              .fontFamily('source-sans-pro,cu", "ly = eventData.data.fontFamily;\n      } else {\n   ", "t fontFamily ${this.fontFamily}`)\n        .fontFam", "ata: {\n            \"fontFamily\": 'Arial'\n         ", "\"[testTextStyle021] fontFamily: \" + obj.$attrs.fon", "  expect(obj.$attrs.fontFamily).assertEqual('Arial", "  expect(obj.$attrs.fontFamily).assertEqual('error", " getInspectorByKey('fontFamily');\n      console.in", " if (eventData.data.fontFamily) {\n        this.fon", "ing = 700;\n  @State fontFamily: string = 'sans-ser", "ight.Bold)\n        .fontFamily(\"sans-serif\")\n     ", "ing(5)\n            .fontFamily(\"sans-serif\")\n     ", "   .fontFamily(this.fontFamily)\n        .fontSize(", ")\n\n      Text(`text fontFamily ${this.fontFamily}`", "ata: {\n            \"fontFamily\": 'error'\n         "], "files": ["TextInputJsunit.test.ets", "textStyle.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "textArea.ets", "textInput.ets", "Constants.ets", "sideBar.ets", "TextArea.ets", "Marquee.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "maxLines", "api_method_all": "maxLines(value: number): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["t ATTRS_MAXLINES = 'maxLines'\nconst ATTRS_DECORA", "tringify(obj.$attrs.maxLines));\n      console.lo", "fontColor(0xCCCCCC).maxLines(1)\n        Column()", "onsole.log(\"cd text maxLines\" + JSON.stringify(o", "ineOffset)\n        .maxLines(2)\n        .textCas", "flow.Clip)\n        .maxLines(2)\n        .textCas", "  expect(obj.$attrs.maxLines).assertEqual(\"2\")\n ", "overflow }\n  @State maxLines: number = 2\n  @Stat"], "files": ["TextJsunit.test.ets", "Text.ets", "overlay.ets", "Constants.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "decoration", "api_method_all": "decoration(value: { type: TextDecorationType; color?: ResourceColor }): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 70, "since": 7, "api_used": "\u662f", "lines": ["tion);\n      expect(decoration.type).assertEqual('", "ase.Normal\n  @State decoration: decoration<{\n    t", "LowerCase)\n        .decoration({ \"type\": TextDecor", "    direction: this.decorationValue\n          })\n ", "t.Lighter)\n        .decoration({ type: TextDecorat", " @State decoration: decoration<{\n    type: TextDec", "strJson);\n      let decoration = JSON.parse(obj.$a", "   .decoration(this.decoration)\n        .aspectRat", "flow.Clip;\n  @State decoration: TextDecorationType", "fo(\"[testSlider002] decoration:\" + obj.$attrs.deco", "number = 1\n  @State decorationValue: Axis = Axis.V", " getInspectorByKey('decoration');\n      console.in", "tion:\" + obj.$attrs.decoration);\n      expect(obj.", " if (eventData.data.decorationValue != null) {\n   ", "   .decoration(this.decorationValue).key('decorati", "verflow })\n        .decoration({ type: this.decora", "ration({ type: this.decoration, color: Color.Red }", "  expect(obj.$attrs.decoration).assertEqual(\"{\\\"ty", "tringify(obj.$attrs.decoration));\n      expect(obj", "demo')\n            .decoration({ type: TextDecorat", "arse(eventData.data.decorationValue);\n      }\n    ", "ata: {\n            \"decorationValue\": Axis.Horizon", "seValue)\n          .decoration(this.decorationValu", "  expect(obj.$attrs.decoration).assertEqual(undefi", "ON.parse(obj.$attrs.decoration);\n      expect(deco", "ull) {\n        this.decorationValue = JSON.parse(e", "ATTRS_DECORATION = 'decoration'\nconst ATTRS_BASELI", ".textCase)\n        .decoration(this.decoration)\n  ", "one');\n      expect(decoration.color).assertEqual(", "console.info(\"span1 decoration\" + JSON.stringify(o", "fo(\"[testSlider001] decoration:\" + JSON.stringify(", "tringify(obj.$attrs.decoration))\n      console.inf", "nExample {\n  @State decorationValue: object= { typ", "UpperCase)\n        .decoration({ \"type\": TextDecor", "corationValue).key('decoration')\n      }\n    }.wid"], "files": ["SpanJsunit.test.ets", "SliderJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "slider.ets", "Constants.ets", "image.ets", "span.ets", "Text.ets", "text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "letterSpacing", "api_method_all": "letterSpacing(value: number | string): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["tringify(obj.$attrs.letterSpacing))\n      expect(obj.", "tringify(obj.$attrs.letterSpacing));\n      console.lo", "console.info(\"span1 letterSpacing\" + JSON.stringify(o", ".letterSpacing(this.letterSpacing)\n        .maxFontSi", "onsole.log(\"cd text letterSpacing\" + JSON.stringify(o", "20fp\")\n            .letterSpacing(5)\n            .fon", "Black)\n            .letterSpacing('5')\n            .f", "umber = 15\n  @State letterSpacing: number= 10\n  @Stat", "nFontSize)\n        .letterSpacing(this.letterSpacing)"], "files": ["TextJsunit.test.ets", "Span.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "textCase", "api_method_all": "textCase(value: TextCase): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 51, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.textCase).assertEqual(\"TextC", "number = 0\n  @State textCase: TextCase= TextCase", "tringify(obj.$attrs.textCase));\n      console.lo", "nsole.log(\"cd text1 textCase\" + JSON.stringify(o", "info(\"[testSpan002] textCase:\" + obj.$attrs.text", "ata: {\n            \"textCaseValue\": -1\n         ", "demo')\n            .textCase(TextCase.LowerCase)", "axLines(2)\n        .textCase(TextCase.LowerCase)", "flow.None)\n        .textCase(TextCase.UpperCase)", "info(\"[testSpan007] textCase:\" + obj);\n      exp", "alue).textCase(this.textCaseValue)\n          .de", "Case:\" + obj.$attrs.textCase);\n      expect(obj.", "console.info(\"span2 textCase\" + JSON.stringify(o", "nsole.log(\"cd text2 textCase\" + JSON.stringify(o", "this.fontSizeValue).textCase(this.textCaseValue)", "Red })\n            .textCase(TextCase.UpperCase)", "demo')\n            .textCase(TextCase.Normal)\n  ", "console.info(\"span1 textCase\" + JSON.stringify(o", "  expect(obj.$attrs.textCase).assertEqual('TextC", "console.info(\"span3 textCase\" + JSON.stringify(o", "ue = eventData.data.textCaseValue;\n      }\n     ", "tringify(obj.$attrs.textCase))\n      console.inf", " if (eventData.data.textCaseValue != null) {\n   ", "ata: {\n            \"textCaseValue\": a\n          ", "info(\"[testSpan006] textCase:\" + obj);\n      exp", "axLines(2)\n        .textCase(this.textCase)\n    ", "onsole.log(\"cd text textCase\" + JSON.stringify(o", "ull) {\n        this.textCaseValue = eventData.da", "olor.Red }\n  @State textCaseValue: TextCase= Tex", "     .textCase(this.textCase)\n        .decoratio", "ata: {\n            \"textCaseValue\": TextCase.Upp", "info(\"[testSpan003] textCase:\" + obj.$attrs.text", "t ATTRS_TEXTCASE = 'textCase'\nconst ATTRS_MAXLIN"], "files": ["TextJsunit.test.ets", "Span.ets", "Constants.ets", "span.ets", "Text.ets", "SpanJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAttribute", "api_method_name": "baselineOffset", "api_method_all": "baselineOffset(value: number | string): TextAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["ineHeight)\n        .baselineOffset(this.baselineOffset", "S_BASELINEOFFSET = 'baselineOffset'\nconst ATTRS_TEXTOV", "baselineOffset(this.baselineOffset)\n        .maxLines(", "tringify(obj.$attrs.baselineOffset));\n      console.lo", "  expect(obj.$attrs.baselineOffset).assertEqual(\"0\")\n ", "onsole.log(\"cd text baselineOffset\" + JSON.stringify(o", "number = 2\n  @State baselineOffset: number = 0\n  @Stat"], "files": ["TextJsunit.test.ets", "Text.ets", "Constants.ets"], "is_white": " ", "desc": " "}]}