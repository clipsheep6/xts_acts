{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\time_picker", "api": [{"api_class_name": "TimePickerResult", "api_method_all": "declare interface TimePickerResult {\n  \n  hour?: number;\n\n  \n  minute?: number;\n}", "api_method_name": "TimePickerResult", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerResult", "api_method_name": "hour", "api_method_all": "hour?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["   this.timevalue=e.hour+\":\"+e.minute+\":\"+e.", "w Date();\n    const hours = date.getHours();", "message:\"Time:\" + e.hour + \":\" + e.minute })", "return `${this.fill(hours)}:${this.fill(minu", "lue;\n  },\n\n  concat(hours, minutes) {\n    re", " return this.concat(hours, minutes);\n  },\n\n ", " = this.concat(data.hour, data.minute);\n  },", "message:\"Time:\" + e.hour + \":\" + e.minute + ", "nth+\"-\"+e.day+\" \"+e.hour+\":\"+e.minute;\n    p", "+1)+\"-\"+e.day+\" \"+e.hour+\":\"+e.minute })\n  }", "   this.timevalue=e.hour+\":\"+e.minute;\n     "], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerResult", "api_method_name": "minute", "api_method_all": "minute?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["evalue=e.hour+\":\"+e.minute+\":\"+e.second;\n     ", "ay+\" \"+e.hour+\":\"+e.minute })\n  },\n  datetimeo", "cat(data.hour, data.minute);\n  },\n  now() {\n  ", "hours)}:${this.fill(minutes)}`;\n  },\n  multiTe", " + e.hour + \":\" + e.minute + \":\" + e.second })", "evalue=e.hour+\":\"+e.minute;\n      prompt.showT", " + e.hour + \":\" + e.minute })\n    }},\n  timeon", "tHours();\n    const minutes = date.getMinutes(", " this.concat(hours, minutes);\n  },\n\n  fill(val", "},\n\n  concat(hours, minutes) {\n    return `${t", "ay+\" \"+e.hour+\":\"+e.minute;\n    prompt.showToa"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerOptions", "api_method_all": "declare interface TimePickerOptions {\n  \n  selected?: Date;\n}", "api_method_name": "TimePickerOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerOptions", "api_method_name": "selected", "api_method_all": "selected?: Date", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 185, "since": 0, "api_used": "\u662f", "lines": ["or = eventData.data.selectedColor;\n      }\n     ", "\n        }\n        .selectedColor(0x39a2db)\n    ", "FF0000')\n          .selectedColor('#FF0000FF')\n ", " if (eventData.data.selectedColor != null) {\n   ", "opup(true)\n        .selectedFont({ size: 16, wei", "ample01 {\n  private selectedDate: Date = new Dat", "ent === item ? this.selectedIcon : this.normalIc", "lor.Red)\n          .selectedColor(Color.Blue)\n  ", "ct(true)\n          .selectedColor(0x39a2db)\n    ", "FF00DDDD')\n        .selectedColor(0xffffff)\n    ", "ata: {\n            \"selectedColor\": '#330A59F8',", "eExample {\n  @State selectedColor: Color = '#330", "t(false)\n          .selectedColor(0x39a2db)\n    ", "     selected: this.selectedDate,\n        type: ", "s.fruits,\n          selected: this.select,\n     ", "  expect(obj.$attrs.selectedColor).assertEqual('", "ata: {\n            \"selectedColor\": '-0.1',\n    ", "n: true })\n        .selectedColor(0x39a2db)\n    ", "Black)\n            .selectedColor(0xCCCCCC)\n    ", "xpect(objNew.$attrs.selectedColor).assertEqual('", "ata: {\n            \"selectedColor\": '-a',\n      ", "select = jsonString.selectedIndex\n            re", "r.Black)\n          .selectedColor(0xCCCCCC)\n    ", "Group'})\n          .selectedColor(0xed6f21)\n    ", "heckbox2')\n        .selectedColor(0x39a2db)\n    ", ".selectedColor(this.selectedColor)\n        .onCh", "s.splice(jsonString.selectedIndex, 1)\n          ", ".numbers[jsonString.selectedIndex]\n            t", "mg.png\"}])\n        .selected(2)\n        .value('", "t ATTRS_SELECTED = 'selected'\nconst ATTRS_LONG_C", "yValue: this.value, selected: 0 })\n        .colo", "or.Gray)\n          .selectedColor(Color.Blue)\n  ", "alth_heart.png\"))\n  selectedIcon: Resource = ($r", "fontColor)\n        .selectedOptionFont({size: 40", "ull) {\n        this.selectedColor = eventData.da", "heckbox1')\n        .selectedColor(0xed6f21)\n    ", "('toggle')\n        .selectedColor(this.selectedC", ".Gray)\n            .selectedColor(Color.Blue)\n  ", "FF737373')\n        .selectedBackgroundColor('#FF", "2200-1-1'),\n        selected: this.selectedDate,"], "files": ["Select.ets", "PatternLock.ets", "textPickerDialog.ets", "Slider.ets", "AlphabetIndexer.ets", "Constants.ets", "ToggleJsunit.test.ets", "sideBar.ets", "toggle.ets", "checkboxGroup.ets", "datePicker.ets", "dragEvent2.ets", "index.js", "inputProps.test.js", "optionProps.test.js", "ResponseRegion.ets", "dragEvent.ets", "checkbox.ets", "select.ets", "Toggle.ets", "listProps.test.js", "slider.ets", "textareaProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerInterface", "api_method_all": "interface TimePickerInterface {\n  \n  (options?: TimePickerOptions): TimePickerAttribute;\n}", "api_method_name": "TimePickerInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerInterface", "api_method_name": "options", "api_method_all": "(options?: TimePickerOptions): TimePickerAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 791, "since": 8, "api_used": "\u662f", "lines": ["= await router.push(options);\n          await U", " start\");\n      let options = {\n        uri: 'p", "(obj.$attrs.overlay.options.offset.x).assertEqu", "(obj.$attrs.overlay.options.align).assertEqual(", "(obj.$attrs.overlay.options.offset.y).assertEqu", " (done) {\n      let options = {\n        uri: 'p"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerAttribute", "api_method_all": "declare class TimePickerAttribute extends CommonMethod<TimePickerAttribute> {\n  \n  useMilitaryTime(value: boolean): TimePickerAttribute;\n\n  \n  onChange(callback: (value: TimePickerResult) => void): TimePickerAttribute;\n}", "api_method_name": "TimePickerAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerAttribute", "api_method_name": "useMilitaryTime", "api_method_all": "useMilitaryTime(value: boolean): TimePickerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.useMilitaryTime).assertEqual('true'", "ull) {\n        this.useMilitaryTime = eventData.data.us", " {\n                \"useMilitaryTime\" : this.useMilitary", "ata: {\n            \"useMilitaryTime\": \"false\",\n        ", "seMilitaryTime(this.useMilitaryTime)\n        .onChange(", "21-08-08')\n  @State useMilitaryTime: boolean = true\n  b", "unar(true)\n        .useMilitaryTime(this.useMilitaryTim", " if (eventData.data.useMilitaryTime != null) {\n        ", "me = eventData.data.useMilitaryTime;\n      }\n    }\n  }\n", "  expect(obj.$attrs.useMilitaryTime).assertEqual('false", "ilitaryTime\" : this.useMilitaryTime,\n              }\n  "], "files": ["DatePickerJsunit.test.ets", "datePicker.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerAttribute", "api_method_name": "onChangecallback", "api_method_all": "onChange(callback: (value: TimePickerResult) => void): TimePickerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerAttribute", "api_method_name": "onChangecallback", "api_method_all": "onChange(callback: (value: TimePickerResult) => void): TimePickerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerDialogOptions", "api_method_all": "declare interface TimePickerDialogOptions extends TimePickerOptions {\n  \n  useMilitaryTime?: boolean;\n  \n  onAccept?: (value: TimePickerResult) => void;\n  \n  onCancel?: () => void;\n  \n  onChange?: (value: TimePickerResult) => void;\n}", "api_method_name": "TimePickerDialogOptions", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerDialogOptions", "api_method_name": "onAccept", "api_method_all": "onAccept?: (value: TimePickerResult) => void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["o(\"TextPickerDialog:onAccept()\" + JSON.stringify", " is clicked')\n  }\n  onAccept() {\n    console.inf", "ncel, confirm: this.onAccept }),\n    cancel: thi", "ight: 20,\n          onAccept: (value: TextPicker", "is clicked')\n  }\n\n  onAccept() {\n    console.inf"], "files": ["textPickerDialog.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerDialogOptions", "api_method_name": "onCancel", "api_method_all": "onCancel?: () => void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["        })\n        .onCancel(() => {\n          c", " 100\n    },\n  })\n\n  onCancel() {\n    console.inf", "    })\n      .onActionCancel(() => {\n        con", "o(\"TextPickerDialog:onCancel()\")\n          },\n  ", "    })\n    )\n      .onCancel(() => {\n        con", "ridCount: 5\n  })\n\n  onCancel() {\n    console.inf", "       },\n          onCancel: () => {\n          ", "mple({ cancel: this.onCancel, confirm: this.onAc"], "files": ["longPressGesture.ets", "textPickerDialog.ets", "animationStatus.ets", "imageAnimator.ets", "gestureMode.ets", "fillMode.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerDialogOptions", "api_method_name": "onChange", "api_method_all": "onChange?: (value: TimePickerResult) => void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 62, "since": 8, "api_used": "\u662f", "lines": ["      console.info(\"onChange start to emit actio", "ey('swiper')\n      .onChange((index: number) => ", "ts_emitter.on(positionChangeEvent, this.stateCha", "ck);\n\n    let positionChangeEvent = {\n      even", "       },\n          onChange: (value: TextPicker", "s(false)\n          .onChange((value: number, mod", "itaryTime)\n        .onChange((date: DatePickerRe", "s_emitter.on(directionChangeEvent, this.stateCha", "ctedColor)\n        .onChange((isOn: boolean) => ", "(0x39a2db)\n        .onChange((isOn: boolean) => ", "pSize(0.5)\n        .onChange((value: number) => ", "uration(400)\n      .onChange((index: number) => ", "        })\n        .onChange((value: string) => ", "(0xed6f21)\n        .onChange((value: boolean) =>", "radio2')\n          .onChange((value: boolean) =>", "nSkip')\n    })\n    .onChange((prevIndex: number,", "(true)\n            .onChange((value: number, mod", "radio3')\n          .onChange((value: boolean) =>", "iHeight(100)\n      .onChange((value: any) => {\n ", "key('Panel')\n      .onChange((value: any) => {\n ", "xGroup')\n          .onChange((itemName:CheckboxG", "(0x39a2db)\n        .onChange((value: boolean) =>", "k);\n\n    let directionChangeEvent = {\n      even", "      console.info('onChange current action stat", "ps(true)\n          .onChange((value: number, mod", "radio1')\n          .onChange((value: boolean) =>", "ess(1)\n            .onChange((value: number, mod", "y('sidebar')\n      .onChange((value: boolean) =>", "      console.info(\"onChange emit action state e", "ht: 400 })\n        .onChange((isOn: boolean) => ", ".key('tabs')\n      .onChange((index: number) => ", "      })\n          .onChange((value: number) => ", "o(\"TextPickerDialog:onChange()\" + JSON.stringify", "eBarWidth(260)\n    .onChange((value: boolean) =>", "x39a2db)\n          .onChange((value: boolean) =>", "itemSpace(0)\n      .onChange((index: number) => "], "files": ["Tab.ets", "Stepper.ets", "textPickerDialog.ets", "Slider.ets", "TextInput.ets", "radio.ets", "swiper.ets", "rating.ets", "sideBar.ets", "toggle.ets", "Panel.ets", "checkboxGroup.ets", "Sidebar.ets", "textClock.ets", "tabs.ets", "datePicker.ets", "Rating.ets", "positionSetting.ets", "TextArea.ets", "Swiper.ets", "ResponseRegion.ets", "checkbox.ets", "stepper.ets", "Toggle.ets", "textArea.ets", "slider.ets", "textInput.ets", "search.ets", "panel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerDialogOptions", "api_method_name": "useMilitaryTime", "api_method_all": "useMilitaryTime?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.useMilitaryTime).assertEqual('true'", "ull) {\n        this.useMilitaryTime = eventData.data.us", " {\n                \"useMilitaryTime\" : this.useMilitary", "ata: {\n            \"useMilitaryTime\": \"false\",\n        ", "seMilitaryTime(this.useMilitaryTime)\n        .onChange(", "21-08-08')\n  @State useMilitaryTime: boolean = true\n  b", "unar(true)\n        .useMilitaryTime(this.useMilitaryTim", " if (eventData.data.useMilitaryTime != null) {\n        ", "me = eventData.data.useMilitaryTime;\n      }\n    }\n  }\n", "  expect(obj.$attrs.useMilitaryTime).assertEqual('false", "ilitaryTime\" : this.useMilitaryTime,\n              }\n  "], "files": ["DatePickerJsunit.test.ets", "datePicker.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerDialog", "api_method_all": "declare class TimePickerDialog {\n  \n  static show(options?: TimePickerDialogOptions);\n}", "api_method_name": "TimePickerDialog", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TimePickerDialog", "api_method_name": "show", "api_method_all": "static show(options?: TimePickerDialogOptions);", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 3848, "since": 0, "api_used": "\u662f", "lines": ["CCCCC)\n            .showSteps(false)\n       ", "info('Calendar page show called');\n    var s", "nfo('[enabled] page show called ');\n    var ", "ps(true)\n          .showTips(true)\n         ", "{\n      Button(this.show).width(80).height(3", "info('Checkbox page show called');\n    var s", "             prompt.showToast({\n            ", "\n              this.show = \"show\"\n          ", "ole.info('flex page show called');\n    var s", "false)\n            .showTips(false)\n        ", "info('[column] page show called');\n    var s", "info('[zIndex] page show called ');\n    var ", "le.info('gauge page show called');\n    var s", "or.Blue)\n          .showSteps(true)\n        ", "info('[appear] page show called');\n    var s", "'checkboxGroup page show called');\n    var s", "\n            prompt.showToast({ message: 'Th", "ate show: string = \"show\"\n\n  build() {\n    F", ".info('stepper page show called');\n    var s", "ssage: 'The text is shown', duration: 2000 }", "nfo('[ellipse] page show called');\n    var s", "       this.show = \"show\"\n            }\n    ", ".Blue)\n            .showSteps(true)\n        ", "e.info('[list] page show called');\n    var s", "is.swiperController.showPrevious()\n         ", "is.swiperController.showNext();\n            ", "'gridContainer page show called');\n    var s", "s(false)\n          .showTips(false)\n        ", "fo('background page show called');\n    var s", "xCCCCCC)\n          .showSteps(false)\n       ", "fo('edgeEffect page show called');\n    var s", "e.info('swiper page show called');\n    var s", "'shapeClipping page show called');\n    var s", "('imageEffects page show called');\n    var s", "e.info('border page show called');\n    var s", "an = false\n  @State show: string = \"show\"\n\n ", "\n              this.show = \"hide\"\n          ", ".info('[touch] page show called');\n    var s", "ansFormExample page show called');\n    var s", "nfo('[overlay] page show called ');\n    var ", "o('[TouchAble] page show called');\n    var s", "ColorGradient] page show called');\n    var s", "(true)\n            .showTips(true)\n         ", " {\n          prompt.showToast({ message: JSO", "e.info('select page show called');\n    var s", "e.info('slider page show called');\n    var s", "ansFormExample page show called');\n\n    var ", "le.info('focus page show called');\n    var s"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "dividerProps.test.js", "video.ets", "tabContentProps.test.js", "textProps.test.js", "Navigator.ets", "playMode.ets", "toolbarProps.test.js", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "column.ets", "Panel.ets", "Progress.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "toolbarItemProps.test.js", "Rating.ets", "PieceJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "Divider.ets", "badgeProps.test.js", "border.ets", "scrollBar.ets", "dialogProps.test.js", "textArea.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "RichText.ets", "formProps.test.js", "focus.ets", "touch.ets", "background.ets", "Slider.ets", "stackProps.test.js", "Text.ets", "PanelJsunit.test.ets", "Counter.ets", "gauge.ets", "Stack.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "refreshProps.test.js", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "TextArea.ets", "animatorOption.ets", "flexDirection.ets", "shapeClipping.ets", "edgeEffect.ets", "stepper.ets", "shape.ets", "labelProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "flex.ets", "ratingProps.test.js", "Shape.ets", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "Polyline.ets", "imageAnimatorProps.test.js", "textPickerDialog.ets", "gridPage.ets", "enable.ets", "PieceCode.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "popupProps.test.js", "AlphabetIndexer.ets", "ColumnSplit.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "videoProps.test.js", "list.ets", "colorGradient.ets", "AppStorage.ets", "QrCode.ets", "GridContainer.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "checkbox.ets", "Video.ets", "pieceProps.test.js", "pickerProps.test.js", "circle.ets", "listItem.ets", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "Polygon.ets", "gridColProps.test.js", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "Rect.ets", "divProps.test.js", "switchProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "appear.ets", "rating.ets", "zIndex.ets", "Path.ets", "line.ets", "DataPanel.ets", "chartProps.test.js", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "sliderProps.test.js", "swiperProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "Link.ets", "imageProps.test.js", "select.ets", "Toggle.ets", "listProps.test.js", "slider.ets", "progressProps.test.js", "aboutToDisappear.ets", "Calendar.ets", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "panel.ets", "menuProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}]}