{"subsystem_ch": "\u77ed\u8ddd\u901a\u4fe1\u5b50\u7cfb\u7edf", "subsystem_en": "communication", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.wifi", "api": [{"api_class_name": "wifi", "api_method_all": "declare namespace wifi {\n    \n    function enableWifi(): boolean;\n\n    \n    function disableWifi(): boolean;\n\n    \n    function isWifiActive(): boolean;\n\n    \n    function scan(): boolean;\n\n    \n    function getScanInfos(): Promise<Array<WifiScanInfo>>;\n    function getScanInfos(callback: AsyncCallback<Array<WifiScanInfo>>): void;\n\n    \n    function addDeviceConfig(config: WifiDeviceConfig): Promise<number>;\n    function addDeviceConfig(config: WifiDeviceConfig, callback: AsyncCallback<number>): void;\n\n    \n     function addUntrustedConfig(config: WifiDeviceConfig): Promise<boolean>;\n     function addUntrustedConfig(config: WifiDeviceConfig, callback: AsyncCallback<boolean>): void;\n \n     \n     function removeUntrustedConfig(config: WifiDeviceConfig): Promise<boolean>;\n     function removeUntrustedConfig(config: WifiDeviceConfig, callback: AsyncCallback<boolean>): void;\n\n    \n    function connectToNetwork(networkId: number): boolean;\n\n    \n    function connectToDevice(config: WifiDeviceConfig): boolean;\n\n    \n    function disconnect(): boolean;\n\n    \n    function getSignalLevel(rssi: number, band: number): number;\n\n    \n    function getLinkedInfo(): Promise<WifiLinkedInfo>;\n    function getLinkedInfo(callback: AsyncCallback<WifiLinkedInfo>): void;\n\n    \n    function isConnected(): boolean;\n\n    \n    function getSupportedFeatures(): number;\n\n    \n    function isFeatureSupported(featureId: number): boolean;\n\n    \n    function getDeviceMacAddress(): string[];\n\n    \n    function getIpInfo(): IpInfo;\n\n    \n    function getCountryCode(): string;\n\n    \n    function reassociate(): boolean;\n\n    \n    function reconnect(): boolean;\n\n    \n    function getDeviceConfigs(): Array<WifiDeviceConfig>;\n\n    \n    function updateNetwork(config: WifiDeviceConfig): number;\n\n    \n    function disableNetwork(netId: number): boolean;\n\n    \n    function removeAllNetwork(): boolean;\n\n    \n    function removeDevice(id: number): boolean;\n\n    \n    function enableHotspot(): boolean;\n\n    \n    function disableHotspot(): boolean;\n\n    \n     function isHotspotDualBandSupported(): boolean;\n\n    \n    function isHotspotActive(): boolean;\n\n    \n    function setHotspotConfig(config: HotspotConfig): boolean;\n\n    \n    function getHotspotConfig(): HotspotConfig;\n\n    \n    function getStations(): Array<StationInfo>;\n\n    \n    function getP2pLinkedInfo(): Promise<WifiP2pLinkedInfo>;\n    function getP2pLinkedInfo(callback: AsyncCallback<WifiP2pLinkedInfo>): void;\n\n    \n    function getCurrentGroup(): Promise<WifiP2pGroupInfo>;\n    function getCurrentGroup(callback: AsyncCallback<WifiP2pGroupInfo>): void;\n\n    \n    function getP2pPeerDevices(): Promise<WifiP2pDevice[]>;\n    function getP2pPeerDevices(callback: AsyncCallback<WifiP2pDevice[]>): void;\n\n    \n    function createGroup(config: WifiP2PConfig): boolean;\n\n    \n    function removeGroup(): boolean;\n\n    \n    function p2pConnect(config: WifiP2PConfig): boolean;\n\n    \n    function p2pCancelConnect(): boolean;\n\n    \n    function startDiscoverDevices(): boolean;\n\n    \n    function stopDiscoverDevices(): boolean;\n\n    \n    function deletePersistentGroup(netId: number): boolean;\n\n    \n    function setDeviceName(devName: string): boolean;\n\n    \n    function on(type: \"wifiStateChange\", callback: Callback<number>): void;\n\n    \n    function off(type: \"wifiStateChange\", callback?: Callback<number>): void;\n\n    \n    function on(type: \"wifiConnectionChange\", callback: Callback<number>): void;\n\n    \n    function off(type: \"wifiConnectionChange\", callback?: Callback<number>): void;\n\n    \n    function on(type: \"wifiScanStateChange\", callback: Callback<number>): void;\n\n    \n    function off(type: \"wifiScanStateChange\", callback?: Callback<number>): void;\n\n    \n    function on(type: \"wifiRssiChange\", callback: Callback<number>): void;\n\n    \n    function off(type: \"wifiRssiChange\", callback?: Callback<number>): void;\n\n    \n     function on(type: \"streamChange\", callback: Callback<number>): void;\n\n     \n     function off(type: \"streamChange\", callback?: Callback<number>): void;\n\n    \n    function on(type: \"hotspotStateChange\", callback: Callback<number>): void;\n\n    \n    function off(type: \"hotspotStateChange\", callback?: Callback<number>): void;\n\n    \n    function on(type: \"hotspotStaJoin\", callback: Callback<StationInfo>): void;\n\n    \n    function off(type: \"hotspotStaJoin\", callback?: Callback<StationInfo>): void;\n\n    \n    function on(type: \"hotspotStaLeave\", callback: Callback<StationInfo>): void;\n\n    \n    function off(type: \"hotspotStaLeave\", callback?: Callback<StationInfo>): void;\n\n    \n    function on(type: \"p2pStateChange\", callback: Callback<number>): void;\n\n    \n    function off(type: \"p2pStateChange\", callback?: Callback<number>): void;\n\n    \n    function on(type: \"p2pConnectionChange\", callback: Callback<WifiP2pLinkedInfo>): void;\n\n    \n    function off(type: \"p2pConnectionChange\", callback?: Callback<WifiP2pLinkedInfo>): void;\n\n    \n    function on(type: \"p2pDeviceChange\", callback: Callback<WifiP2pDevice>): void;\n\n    \n    function off(type: \"p2pDeviceChange\", callback?: Callback<WifiP2pDevice>): void;\n\n    \n    function on(type: \"p2pPeerDeviceChange\", callback: Callback<WifiP2pDevice[]>): void;\n\n    \n    function off(type: \"p2pPeerDeviceChange\", callback?: Callback<WifiP2pDevice[]>): void;\n\n    \n    function on(type: \"p2pPersistentGroupChange\", callback: Callback<void>): void;\n\n    \n    function off(type: \"p2pPersistentGroupChange\", callback?: Callback<void>): void;\n\n    \n    function on(type: \"p2pDiscoveryChange\", callback: Callback<number>): void;\n\n    \n    function off(type: \"p2pDiscoveryChange\", callback?: Callback<number>): void;\n\n    \n    interface WifiDeviceConfig {\n        \n        ssid: string;\n\n        \n        bssid: string;\n\n        \n        preSharedKey: string;\n\n        \n        isHiddenSsid: boolean;\n\n        \n        securityType: WifiSecurityType;\n\n        \n        \n        creatorUid: number;\n\n        \n        \n        disableReason: number;\n\n        \n        \n        netId: number;\n\n        \n        \n        randomMacType: number;\n\n        \n        \n        randomMacAddr: string;\n\n        \n        \n        ipType: IpType;\n\n        \n        \n        staticIp: IpConfig;\n    }\n\n    \n    interface IpConfig {\n        ipAddress: number;\n        gateway: number;\n        dnsServers: number[];\n        domains: Array<string>;\n    }\n\n    \n    interface WifiScanInfo {\n        \n        ssid: string;\n\n        \n        bssid: string;\n\n        \n        capabilities: string;\n\n        \n        securityType: WifiSecurityType;\n\n        \n        rssi: number;\n\n        \n        band: number;\n\n        \n        frequency: number;\n\n        \n        channelWidth: number;\n\n        \n        timestamp: number;\n    }\n\n    \n    enum WifiSecurityType {\n        \n        WIFI_SEC_TYPE_INVALID = 0,\n\n        \n        WIFI_SEC_TYPE_OPEN = 1,\n\n        \n        WIFI_SEC_TYPE_WEP = 2,\n\n        \n        WIFI_SEC_TYPE_PSK = 3,\n\n        \n        WIFI_SEC_TYPE_SAE = 4,\n    }\n\n    \n    interface WifiLinkedInfo {\n        \n        ssid: string;\n\n        \n        bssid: string;\n\n        \n        \n        networkId: number;\n\n        \n        rssi: number;\n\n        \n        band: number;\n\n        \n        linkSpeed: number;\n\n        \n        frequency: number;\n\n        \n        isHidden: boolean;\n\n        \n        isRestricted: boolean;\n\n        \n        \n        chload: number;\n\n        \n        \n        snr: number;\n\n        \n        macAddress: string;\n\n        \n        ipAddress: number;\n\n        \n        \n        suppState: SuppState;\n\n        \n        connState: ConnState;\n    }\n\n    \n    interface IpInfo {\n        \n        ipAddress: number;\n\n        \n        gateway: number;\n\n        \n        netmask: number;\n\n        \n        primaryDns: number;\n\n        \n        secondDns: number;\n\n        \n        serverIp: number;\n\n        \n        leaseDuration: number;\n    }\n\n    \n    interface HotspotConfig {\n        \n        ssid: string;\n\n        \n        securityType: WifiSecurityType;\n\n        \n        band: number;\n\n        \n        preSharedKey: string;\n\n        \n        maxConn: number;\n    }\n\n    \n    interface StationInfo {\n        \n        name: string;\n\n        \n        macAddress: string;\n\n        \n        ipAddress: string;\n    }\n\n    \n     enum IpType {\n        \n        STATIC,\n\n        \n        DHCP,\n\n        \n        UNKNOWN,\n    }\n\n    \n    export enum SuppState {\n        \n        DISCONNECTED,\n\n        \n        INTERFACE_DISABLED,\n\n        \n        INACTIVE,\n\n        \n        SCANNING,\n\n        \n        AUTHENTICATING,\n\n        \n        ASSOCIATING,\n\n        \n        ASSOCIATED,\n\n        \n        FOUR_WAY_HANDSHAKE,\n\n        \n        GROUP_HANDSHAKE,\n\n        \n        COMPLETED,\n\n        \n        UNINITIALIZED,\n\n        \n        INVALID\n    }\n\n    \n    export enum ConnState {\n        \n        SCANNING,\n\n        \n        CONNECTING,\n\n        \n        AUTHENTICATING,\n\n        \n        OBTAINING_IPADDR,\n\n        \n        CONNECTED,\n\n        \n        DISCONNECTING,\n\n        \n        DISCONNECTED,\n\n        \n        UNKNOWN\n    }\n\n    \n    interface WifiP2pDevice {\n        \n        deviceName: string;\n\n        \n        deviceAddress: string;\n\n        \n        primaryDeviceType: string;\n\n        \n        deviceStatus: P2pDeviceStatus;\n\n        \n        groupCapabilitys: number;\n    }\n\n    \n    interface WifiP2PConfig {\n        \n        deviceAddress: string;\n\n        \n        netId: number;\n\n        \n        passphrase: string;\n\n        \n        groupName: string;\n\n        \n        goBand: GroupOwnerBand;\n    }\n\n    \n    interface WifiP2pGroupInfo {\n        \n        isP2pGo: boolean;\n\n        \n        ownerInfo: WifiP2pDevice;\n\n        \n        passphrase: string;\n\n        \n        interface: string;\n\n        \n        groupName: string;\n\n        \n        networkId: number;\n\n        \n        frequency: number;\n\n        \n        clientDevices: WifiP2pDevice[];\n\n        \n        goIpAddress: string;\n    }\n\n    \n    enum P2pConnectState {\n        DISCONNECTED = 0,\n        CONNECTED = 1,\n    }\n\n    \n    interface WifiP2pLinkedInfo {\n        \n        connectState: P2pConnectState;\n\n        \n        isGroupOwner: boolean;\n\n        \n        groupOwnerAddr: string;\n    }\n\n    \n    enum P2pDeviceStatus {\n        CONNECTED = 0,\n        INVITED = 1,\n        FAILED = 2,\n        AVAILABLE = 3,\n        UNAVAILABLE = 4,\n    }\n\n    \n    enum GroupOwnerBand {\n        GO_BAND_AUTO = 0,\n        GO_BAND_2GHZ = 1,\n        GO_BAND_5GHZ = 2,\n    }\n}", "api_method_name": "wifi", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 635, "since": 0, "api_used": "\u662f", "lines": ["Wifi();\n        if (wifi.isHotspotActive()) ", "   let isSuccess5 = wifi.setHotspotConfig(Ho", "let hotspotConfigS= wifi.getHotspotConfig();", "          let off = wifi.disableHotspot();\n ", "sableWifi(){\n    if(wifi.isWifiActive()){\n  ", "let hotspotConfig = wifi.getHotspotConfig();", "      console.log(\"[wifi_test] set invalid b", "est/wifi status:\" + wifi.isWifiActive());\n}\n", "tatus result -> \" + wifi.isHotspotActive());", "   let isSuccess2 = wifi.setHotspotConfig(Ho", "      let disable = wifi.disableWifi();\n    ", "      console.info(\"wifi_test/disable wifi:\"", "      console.log(\"[wifi_test] set max preSh", "());\n        expect(wifi.isHotspotActive()).", "done) {\n        if (wifi.isWifiActive()) {\n ", "unit/index'\n\nimport wifi from '@ohos.wifi'\n\n", "           let on = wifi.enableHotspot();\n  ", "et hotspotConfig5 = wifi.getHotspotConfig();", "     console.info(\"[wifi_test] disableHotspo", "(\"wifi_test/disable wifi:\" + wifi.disableWif", "\n        let close =wifi.isWifiActive();\n   ", "st/disable wifi:\" + wifi.disableWifi());\n   ", "       let config = wifi.getHotspotConfig();", "rt wifi from '@ohos.wifi'\n\nfunction sleep(de", "     console.info(\"[wifi_test] wifi status r", "ole.info(\"wifi_test/wifi status:\" + wifi.isW", "      console.log(\"[wifi_test] getHotspotCon", "   let isSuccess1 = wifi.setHotspotConfig(Ho", "e.info(\"[wifi_test] wifi status result: \" + ", "    let isSuccess = wifi.setHotspotConfig(Ho", "}\n    console.info(\"wifi_test/wifi status:\" ", "     console.info(\"[wifi_test] Hotspot statu", "lse();\n        if (!wifi.isHotspotActive()) "], "files": ["WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "enableWifi", "api_method_all": "function enableWifi(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 6, "api_used": "\u662f", "lines": ["nable wifi:\" + wifi.enableWifi());\n        await s", "  let enable = wifi.enableWifi();\n            awai", "  let enable = wifi.enableWifi();\n        await sl"], "files": ["WifiP2P.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "disableWifi", "api_method_all": "function disableWifi(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 6, "api_used": "\u662f", "lines": ["sable wifi:\" + wifi.disableWifi());\n        await s", " let disable = wifi.disableWifi()\n        await sle", " let disable = wifi.disableWifi();\n        await sl", " let disable = wifi.disableWifi();\n            awai"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "isWifiActive", "api_method_all": "function isWifiActive(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 31, "since": 6, "api_used": "\u662f", "lines": ["ifi status:\" + wifi.isWifiActive());\n}\n\nlet WifiSecu", "ifi(){\n    if(!wifi.isWifiActive()){\n        console", "e of wifi: \" + wifi.isWifiActive());\n        expect(", "        expect(wifi.isWifiActive()).assertTrue();\n  ", "  let active = wifi.isWifiActive();\n        if (!act", " {\n        if (wifi.isWifiActive()) {\n            le", "ifi status:\" + wifi.isWifiActive());\n}\n\nlet GroupOwn", "\n       expect(wifi.isWifiActive()).assertTrue();\n  ", "e of wifi: \" + wifi.isWifiActive());   \n        done", "Wifi(){\n    if(wifi.isWifiActive()){\n        console", "    let close =wifi.isWifiActive();\n        console.", "        expect(wifi.isWifiActive()).assertFalse();\n "], "files": ["WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "scan", "api_method_all": "function scan(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 30, "since": 6, "api_used": "\u662f", "lines": ["  });  \n        let scan = wifi.scan();\n    ", "    let scan = wifi.scan();\n        await sl", "RAL_DISCOVERABLE != scanMode);\n        expec", "e));\n        expect(scanMode).assertEqual(1)", "00);\n        expect(scanConfig).assertTrue()", "'[bluetooth_js] BLE scan start without scan ", "ifi_test] open wifi scan result: \" + scan);\n", " ' + JSON.stringify(scanMode));\n        expe", "an);\n        expect(scan).assertTrue();\n\n   ", "Wifi();\n        let scan = wifi.scan();\n    ", "'[bluetooth_js] set scan mode start');\n     ", "'[bluetooth_js] BLE scan device find result3", "TED_DISCOVERABLE != scanMode);\n        expec", "True();\n        let scanConfig = wifi.startD", "'[bluetooth_js] get scan mode result2 = ' + ", "e.SCAN_MODE_NONE != scanMode);\n        expec", "'[bluetooth_js] BLE scan start end');\n      ", "MODE_CONNECTABLE != scanMode);\n        expec", "TED_DISCOVERABLE != scanMode);\n        done(", "(true);\n        let scanMode = bluetooth.get", "\"[bluetooth_js] BLE scan device find off2:\" ", "fi scan result: \" + scan);\n        expect(sc", "'[bluetooth_js] get scan mode start');\n     ", " scan start without scan options start');\n  "], "files": ["WifiSta.test.js", "WifiP2P.test.js", "Bluetooth.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getScanInfos", "api_method_all": "function getScanInfos(): Promise<Array<WifiScanInfo>>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["\n        await wifi.getScanInfos()\n            .then(result => {\n       "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getScanInfos", "api_method_all": "function getScanInfos(callback: AsyncCallback<Array<WifiScanInfo>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 6, "api_used": "\u662f", "lines": ["e.info(\"[wifi_test] getScanInfos promise result \" + JSON.stringify(resul", "e.info(\"[wifi_test] getScanInfos callback result: \" + JSON.stringify(res", "  });\n\n        wifi.getScanInfos(\n            (err,result) => {\n        ", "g(\"[wifi_test] wifi getScanInfos failed \" + err);\n                }\n    "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "addDeviceConfig", "api_method_all": "function addDeviceConfig(config: WifiDeviceConfig): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 6, "api_used": "\u662f", "lines": ["\n        await wifi.addDeviceConfig(wifiDeviceConfigT)\n            .then(ne", "\n        await wifi.addDeviceConfig(wifiDeviceConfigU)\n            .then(ne", "\n        await wifi.addDeviceConfig(wifiDeviceConfigK)\n            .then(ne", "\n        await wifi.addDeviceConfig(wifiDeviceConfig1)\n            .then(ne", "\n        await wifi.addDeviceConfig(wifiDeviceConfigD)\n            .then(ne", "\n        await wifi.addDeviceConfig(wifiDeviceConfigZ)\n            .then(ne"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "addDeviceConfig", "api_method_all": "function addDeviceConfig(config: WifiDeviceConfig, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3, "since": 6, "api_used": "\u662f", "lines": [" {\n            wifi.addDeviceConfig(wifiDeviceConfig2,\n                (err", "  });\n\n        wifi.addDeviceConfig(wifiDeviceConfig1,\n            (err, ne", " {\n            wifi.addDeviceConfig(wifiDeviceConfig1,\n                (err"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "addUntrustedConfig", "api_method_all": "function addUntrustedConfig(config: WifiDeviceConfig): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "addUntrustedConfig", "api_method_all": "function addUntrustedConfig(config: WifiDeviceConfig, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "removeUntrustedConfig", "api_method_all": "function removeUntrustedConfig(config: WifiDeviceConfig): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "removeUntrustedConfig", "api_method_all": "function removeUntrustedConfig(config: WifiDeviceConfig, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "connectToNetwork", "api_method_all": "function connectToNetwork(networkId: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 7, "since": 6, "api_used": "\u662f", "lines": ["ce result: \" + wifi.connectToNetwork(netWorkId));\n      ", "        expect(wifi.connectToNetwork(netWorkId)).assertT"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "connectToDevice", "api_method_all": "function connectToDevice(config: WifiDeviceConfig): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 26, "since": 6, "api_used": "\u662f", "lines": ["@tc.desc       Test connectToDevice 26 bits WEP Devicec", "g(\"[wifi_test] wifi connectToDevice result: \" + result1", " let result1 = wifi.connectToDevice(wifiDeviceConfigIp)", "@tc.desc       Test connectToDevice 13bits ASCLL WEP De", "@tc.desc       Test connectToDevice 5bits ASCLL WEP Dev", "@tc.desc       Test connectToDevice 8bits ASCLL PSK Dev", " let result1 = wifi.connectToDevice(wifiDeviceConfig1);", "@tc.desc       Test connectToDevice 63bits ASCLL PSK De", "@tc.desc       Test connectToDevice 10 bits WEP Devicec", " let result1 = wifi.connectToDevice(wifiDeviceConfigCon"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "disconnect", "api_method_all": "function disconnect(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["et ret = gattClient.disconnect();\n        console.", "        expect(wifi.disconnect()).assertTrue();\n  ", "@tc.desc       Test disconnect Deviceconfig\n    */", "[bluetooth_js] gatt disconnect ret:' + ret);\n     ", "[bluetooth_js] gatt disconnect start');\n        aw"], "files": ["BluetoothBle.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getSignalLevel", "api_method_all": "function getSignalLevel(rssi: number, band: number): number;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 18, "since": 6, "api_used": "\u662f", "lines": ["        expect(wifi.getSignalLevel(-65, 2)).assertEqua", "        expect(wifi.getSignalLevel(-79, 2)).assertEqua", "        expect(wifi.getSignalLevel(-89, 1)).assertEqua", "        expect(wifi.getSignalLevel(-127, 2)).assertEqu", "        expect(wifi.getSignalLevel(-66, 1)).assertEqua", "        expect(wifi.getSignalLevel(-86, 2)).assertEqua", "        expect(wifi.getSignalLevel(-83, 1)).assertEqua", "        expect(wifi.getSignalLevel(-85, 2)).assertEqua", "        expect(wifi.getSignalLevel(-76, 1)).assertEqua", "        expect(wifi.getSignalLevel(-65, 1)).assertEqua", "        expect(wifi.getSignalLevel(-82, 1)).assertEqua", "        expect(wifi.getSignalLevel(-127, 1)).assertEqu", "        expect(wifi.getSignalLevel(-66, 2)).assertEqua", "        expect(wifi.getSignalLevel(-75, 1)).assertEqua", "        expect(wifi.getSignalLevel(-73, 2)).assertEqua", "        expect(wifi.getSignalLevel(-88, 1)).assertEqua", "        expect(wifi.getSignalLevel(-72, 2)).assertEqua", "        expect(wifi.getSignalLevel(-80, 2)).assertEqua"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getLinkedInfo", "api_method_all": "function getLinkedInfo(): Promise<WifiLinkedInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["\n        await wifi.getLinkedInfo()\n            .then((result) => {\n     "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getLinkedInfo", "api_method_all": "function getLinkedInfo(callback: AsyncCallback<WifiLinkedInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["\n        await wifi.getLinkedInfo(\n            (err,result) => {\n        ", "g(\"[wifi_test] wifi getLinkedInfo failed \" + err);\n                }\n    ", "@tc.desc       Test getLinkedInfo information\n     */\n    it('SUB_Communi", "@tc.desc       Test getLinkedInfo callback information\n     */\n    it('SU", "e.info(\"[wifi_test] getLinkedInfo callback result: \" + JSON.stringify(res"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "isConnected", "api_method_all": "function isConnected(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": ["onnected : \" + wifi.isConnected());\n        expect(", "d();\n        expect(isConnected).assertFalse();\n\n  ", "        expect(wifi.isConnected()).assertFalse();\n ", "rue();\n\n        let isConnected= wifi.isConnected()", "le.info(\"[wifi_test]isConnected : \" + wifi.isConnec", "t isConnected= wifi.isConnected();\n        expect(i", "d();\n        expect(isConnected).assertFalse();\n   ", "True();\n        let isConnected= wifi.isConnected()", "e();\n  \n        let isConnected= wifi.isConnected()", "wifi\");\n        let isConnected= wifi.isConnected()", "d();\n        expect(isConnected).assertFalse();\n \n "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getSupportedFeatures", "api_method_all": "function getSupportedFeatures(): number;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["  let result = wifi.getSupportedFeatures();\n        console."], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "isFeatureSupported", "api_method_all": "function isFeatureSupported(featureId: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["        expect(wifi.isFeatureSupported(result)).assertTrue", "result +\"->\" + wifi.isFeatureSupported(result));\n        e", "e.info(\"[wifi_test] isFeatureSupported: \" + result +\"->\" +"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getDeviceMacAddress", "api_method_all": "function getDeviceMacAddress(): string[];", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["e.info('[wifi_test] getDeviceMacAddress test start ...');\n ", "  let result = wifi.getDeviceMacAddress();\n       console.i", "e.info(\"[wifi_test] getDeviceMacAddress -> \" + JSON.stringi"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getIpInfo", "api_method_all": "function getIpInfo(): IpInfo;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["  let ipInfo = wifi.getIpInfo();\n        expect(J"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getCountryCode", "api_method_all": "function getCountryCode(): string;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": [".info(\" [wifi_test] getCountryCode start ... \");\n     ", " countryCode = wifi.getCountryCode();\n        console.", "e.info(\"[wifi_test] getCountryCode -> \" + JSON.stringi"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "reassociate", "api_method_all": "function reassociate(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["    let reass= wifi.reassociate();\n        expect(r"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "reconnect", "api_method_all": "function reconnect(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["        expect(wifi.reconnect()).assertTrue();\n  ", "@tc.desc       Test reconnect wifi\n    */\n   it('"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getDeviceConfigs", "api_method_all": "function getDeviceConfigs(): Array<WifiDeviceConfig>;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 36, "since": 7, "api_used": "\u662f", "lines": ["o(\"[wifi_test] wifi getDeviceConfigs result1 : \" + JSON.", " let configs = wifi.getDeviceConfigs();\n                ", "o(\"[wifi_test] wifi getDeviceConfigs result : \" + JSON.s", "let configs2 = wifi.getDeviceConfigs();\n                ", "let configs1 = wifi.getDeviceConfigs();\n                ", "o(\"[wifi_test] wifi getDeviceConfigs result2 : \" + JSON.", " let configs = wifi.getDeviceConfigs();\n        console."], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "updateNetwork", "api_method_all": "function updateNetwork(config: WifiDeviceConfig): number;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["e).assertEqual(wifi.updateNetwork(wifiDeviceConfigU) "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "disableNetwork", "api_method_all": "function disableNetwork(netId: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["et disconNet = wifi.disableNetwork(netWorkId);\n       "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "removeAllNetwork", "api_method_all": "function removeAllNetwork(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["et isRemoved = wifi.removeAllNetwork();\n        expect(i", "et isRemoved = wifi.removeAllNetwork();\n                ", "ifi();\n        wifi.removeAllNetwork();\n        let wifi", "et isRemoved = wifi.removeAllNetwork();\n        console."], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "removeDevice", "api_method_all": "function removeDevice(id: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["et isRemoved = wifi.removeDevice(netWorkId);\n       "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "enableHotspot", "api_method_all": "function enableHotspot(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["      let on = wifi.enableHotspot();\n            awai"], "files": ["WifiSoftAP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "disableHotspot", "api_method_all": "function disableHotspot(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["     let off = wifi.disableHotspot();\n            awai", "e.info(\"[wifi_test] disableHotspot result -> \" + off);"], "files": ["WifiSoftAP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "isHotspotDualBandSupported", "api_method_all": "function isHotspotDualBandSupported(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["let DualBand = wifi.isHotspotDualBandSupported();\n        console.", "e.info(\"[wifi_test] isHotspotDualBandSupported -> \" + JSON.stringi", ".info(\" [wifi_test] isHotspotDualBandSupported start ... \");\n     "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "isHotspotActive", "api_method_all": "function isHotspotActive(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 45, "since": 7, "api_used": "\u662f", "lines": ["rue();\n\n        let isHotspotActive = wifi.isHotspotAct", "ve);\n        expect(isHotspotActive).assertFalse();\n\n  ", "ve);\n        expect(isHotspotActive).assertTrue();\n    ", "otspotActive = wifi.isHotspotActive();\n        console.", "      }\n        let isHotspotActive = wifi.isHotspotAct", "        expect(wifi.isHotspotActive()).assertTrue();\n  ", "otspotActive -> \" + isHotspotActive);\n        expect(is", "        expect(wifi.isHotspotActive()).assertFalse();\n ", " result -> \" + wifi.isHotspotActive());\n        expect(", ";\n        if (!wifi.isHotspotActive()) {\n            le", " {\n        if (wifi.isHotspotActive()) {\n            le", "ve);\n        expect(isHotspotActive).assertFalse();\n   ", " result -> \" + wifi.isHotspotActive());\n        let Hot", "e.info(\"[wifi_test] isHotspotActive -> \" + isHotspotAct", "pot\" );\n        let isHotspotActive = wifi.isHotspotAct", ");\n        if (wifi.isHotspotActive()) {\n            le"], "files": ["WifiSoftAP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "setHotspotConfig", "api_method_all": "function setHotspotConfig(config: HotspotConfig): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["t isSuccess1 = wifi.setHotspotConfig(HotspotConfigWep);\n", "t isSuccess3 = wifi.setHotspotConfig(HotspotConfigC);\n  ", "t isSuccess1 = wifi.setHotspotConfig(HotspotConfigPSK);\n", "t isSuccess1 = wifi.setHotspotConfig(HotspotConfig1);\n  ", "t isSuccess2 = wifi.setHotspotConfig(HotspotConfigI2);\n ", "t isSuccess1 = wifi.setHotspotConfig(HotspotConfigS);\n  ", "t isSuccess2 = wifi.setHotspotConfig(HotspotConfigM1);\n ", "t isSuccess1 = wifi.setHotspotConfig(HotspotConfigI);\n  ", "t isSuccess2 = wifi.setHotspotConfig(HotspotConfigS1);\n ", "t isSuccess2 = wifi.setHotspotConfig(HotspotConfigSAE);\n", "t isSuccess1 = wifi.setHotspotConfig(HotspotConfigWO);\n ", "t isSuccess1 = wifi.setHotspotConfig(HotspotConfigM);\n  ", "t isSuccess1 = wifi.setHotspotConfig(HotspotConfigN);\n  ", "et isSuccess = wifi.setHotspotConfig(HotspotConfig);\n   ", "t isSuccess1 = wifi.setHotspotConfig(HotspotConfigO);\n  ", "t isSuccess1 = wifi.setHotspotConfig(HotspotConfigC);\n  ", "t isSuccess5 = wifi.setHotspotConfig(HotspotConfig5G);\n "], "files": ["WifiSoftAP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getHotspotConfig", "api_method_all": "function getHotspotConfig(): HotspotConfig;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["otspotConfigS= wifi.getHotspotConfig();\n        console.", "tspotConfig5 = wifi.getHotspotConfig();\n        console.", "otspotConfig = wifi.getHotspotConfig();\n        console.", "  let config = wifi.getHotspotConfig();\n        console.", "le.log(\"[wifi_test] getHotspotConfig  result: \" + JSON.s", " let config1 = wifi.getHotspotConfig();\n        console.", "e.info(\"[wifi_test] getHotspotConfig result -> \" + JSON."], "files": ["WifiSoftAP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getStations", "api_method_all": "function getStations(): Array<StationInfo>;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["e.info(\"[wifi_test] getStations result ->\" + JSON.s", " stationInfo = wifi.getStations();\n        console."], "files": ["WifiSoftAP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getP2pLinkedInfo", "api_method_all": "function getP2pLinkedInfo(): Promise<WifiP2pLinkedInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["\n        await wifi.getP2pLinkedInfo()\n            .then((data)  => {\n      ", "le.info(\"[wifi_test]getP2pLinkedInfo promise then error.\" + JSON.stringify(e"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getP2pLinkedInfo", "api_method_all": "function getP2pLinkedInfo(callback: AsyncCallback<WifiP2pLinkedInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["e.info(\"[wifi_test] getP2pLinkedInfo  [promise] result -> \" + JSON.stringify", "\n        await wifi.getP2pLinkedInfo((err, result) => {\n            if (err)", "le.error('failed to getP2pLinkedInfo callback  ' + JSON.stringify(err));\n   ", "e.info(\"[wifi_test] getP2pLinkedInfo [callback] -> \" + JSON.stringify(result"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getCurrentGroup", "api_method_all": "function getCurrentGroup(): Promise<WifiP2pGroupInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["sole.info(\"[wifi_js]getCurrentGroup promise then error.\" + JSON.stringify(e", "\n        await wifi.getCurrentGroup()\n            .then((data)  => {\n      ", "le.info(\"[wifi_test]getCurrentGroup promise then error.\" + JSON.stringify(e"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getCurrentGroup", "api_method_all": "function getCurrentGroup(callback: AsyncCallback<WifiP2pGroupInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": [");\n            wifi.getCurrentGroup((err, data) => {\n                if (er", "fo(\"wifi_test / get getCurrentGroup [callback] -> \" + JSON.stringify(data))", "e.info(\"[wifi_test] getCurrentGroup [promise] result -> \" + JSON.stringify(", "est / failed to get getCurrentGroup: ' + JSON.stringify(err));\n            ", "\n        await wifi.getCurrentGroup(\n            (err, result) => {\n       ", "e.info(\"[wifi_test] getCurrentGroup  [promise] result -> \" + JSON.stringify", "e.info(\"[wifi_test] getCurrentGroup [callback] -> \" + JSON.stringify(result"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getP2pPeerDevices", "api_method_all": "function getP2pPeerDevices(): Promise<WifiP2pDevice[]>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["le.info(\"[wifi_test]getP2pPeerDevices promise then error.\" + JSON.stringify(e", "\n        await wifi.getP2pPeerDevices()\n            .then((data)  => {\n      "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "getP2pPeerDevices", "api_method_all": "function getP2pPeerDevices(callback: AsyncCallback<WifiP2pDevice[]>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["e.info(\"[wifi_test] getP2pPeerDevices [callback] -> \" + JSON.stringify(result", "\n        await wifi.getP2pPeerDevices((err, result) => {\n            if (err)", "le.error('failed to getP2pPeerDevices infos callback because ' + JSON.stringi", "e.info(\"[wifi_test] getP2pPeerDevices  [promise] result -> \" + JSON.stringify"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "createGroup", "api_method_all": "function createGroup(config: WifiP2PConfig): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["et addConfig = wifi.createGroup(WifiP2PConfig);\n   ", "et addConfig = wifi.createGroup(config);\n          ", "et addConfig = wifi.createGroup(WifiP2PConfig2);\n  "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "removeGroup", "api_method_all": "function removeGroup(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["removeConfig = wifi.removeGroup();\n        console.", "fi_test] test start removeGroup\" + removeConfig);\n ", "removeConfig = wifi.removeGroup();\n        expect(r", "removeConfig = wifi.removeGroup();\n            expe", "removeConfig = wifi.removeGroup();\n                "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "p2pConnect", "api_method_all": "function p2pConnect(config: WifiP2PConfig): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["     await wifi.on('p2pConnectionChange', recvP2pC", "e.info(\"[wifi_test] p2pConnectionChange result -> ", "               wifi.p2pConnect(config);\n          ", "      console.info(\"p2pConnectionChange callback\" ", "t connConfig = wifi.p2pConnect(WifiP2PConfig3);\n  ", "o(\"[wifi_test] test p2pConnect result.\" + connConf", "          wifi.off('p2pConnectionChange', recvP2pC", "munication_WiFi_P2P_p2pConnectionChange_0002', 0, ", "e.info(\"wifi_test / p2pConnect: -> \" + data[i].dev"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "p2pCancelConnect", "api_method_all": "function p2pCancelConnect(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["o(\"[wifi_test] test p2pCancelConnect result.\" + disConn)", " let disConn = wifi.p2pCancelConnect();\n        await sl"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "startDiscoverDevices", "api_method_all": "function startDiscoverDevices(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["t scanConfig = wifi.startDiscoverDevices();\n        await sl"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "stopDiscoverDevices", "api_method_all": "function stopDiscoverDevices(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["let stopScan = wifi.stopDiscoverDevices();\n            expe", "let stopScan = wifi.stopDiscoverDevices();\n        console.", "o(\"[wifi_test] test stopDiscoverDevices result.\" + stopScan"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "deletePersistentGroup", "api_method_all": "function deletePersistentGroup(netId: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["emovePConfig = wifi.deletePersistentGroup(data.networkId);\n  "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "setDeviceName", "api_method_all": "function setDeviceName(devName: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": [" let devName = wifi.setDeviceName(\"P2PTest\");\n       ", "o(\"[wifi_test] test setDeviceName start.\");\n        l", "fi_test] test start setDeviceName->\" + devName);\n    "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"wifiStateChange\", callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"wifiStateChange\", callback?: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"wifiConnectionChange\", callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"wifiConnectionChange\", callback?: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"wifiScanStateChange\", callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"wifiScanStateChange\", callback?: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"wifiRssiChange\", callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"wifiRssiChange\", callback?: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"streamChange\", callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"streamChange\", callback?: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"hotspotStateChange\", callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"hotspotStateChange\", callback?: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"hotspotStaJoin\", callback: Callback<StationInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"hotspotStaJoin\", callback?: Callback<StationInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"hotspotStaLeave\", callback: Callback<StationInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"hotspotStaLeave\", callback?: Callback<StationInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"p2pStateChange\", callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"p2pStateChange\", callback?: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"p2pConnectionChange\", callback: Callback<WifiP2pLinkedInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"p2pConnectionChange\", callback?: Callback<WifiP2pLinkedInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"p2pDeviceChange\", callback: Callback<WifiP2pDevice>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"p2pDeviceChange\", callback?: Callback<WifiP2pDevice>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"p2pPeerDeviceChange\", callback: Callback<WifiP2pDevice[]>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"p2pPeerDeviceChange\", callback?: Callback<WifiP2pDevice[]>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"p2pPersistentGroupChange\", callback: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"p2pPersistentGroupChange\", callback?: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "on", "api_method_all": "function on(type: \"p2pDiscoveryChange\", callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 6, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "wifi", "api_method_name": "off", "api_method_all": "function off(type: \"p2pDiscoveryChange\", callback?: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_all": "interface WifiDeviceConfig {\n        \n        ssid: string;\n\n        \n        bssid: string;\n\n        \n        preSharedKey: string;\n\n        \n        isHiddenSsid: boolean;\n\n        \n        securityType: WifiSecurityType;\n\n        \n        \n        creatorUid: number;\n\n        \n        \n        disableReason: number;\n\n        \n        \n        netId: number;\n\n        \n        \n        randomMacType: number;\n\n        \n        \n        randomMacAddr: string;\n\n        \n        \n        ipType: IpType;\n\n        \n        \n        staticIp: IpConfig;\n    }", "api_method_name": "WifiDeviceConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "ssid", "api_method_all": "ssid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 97, "since": 0, "api_used": "\u662f", "lines": ["igC= {\n            \"ssid\": \"test123\",\n      ", "      console.info(\"ssid: \" + result[j].ssid", "gr2\",\n            \"bssid\": \"\",\n            \"", "gr1\",\n            \"bssid\": \"\",\n            \"", " result[j].ssid + \"bssid: \" + result[j].bssi", "g2 = {\n            \"ssid\": \"TESTWgr2\",\n     ", ".assertEqual(config.ssid==HotspotConfigC.ssi", "igC= {\n            \"ssid\": \"\u6d4b\u8bd5123\uff01@#\uffe5%\u2026\u2026&*\uff08 ", "WEP\",\n            \"bssid\": \"\",\n            \"", "g1 = {\n            \"ssid\": \"TESTWgr1\",\n     ", "igO= {\n            \"ssid\": \"test123\",\n      ", "5G = {\n            \"ssid\": \"testWgr\",\n      ", "PEN\",\n            \"bssid\": \"\",\n            \"", "= wifiDeviceConfig1.ssid);\n            });\n\n", "igI= {\n            \"ssid\": \"testWgr\",\n      ", "sid==HotspotConfigC.ssid);\n        done();\n ", "g1 = {\n            \"ssid\": \"TEST_OPEN\",\n    ", "fi_test] set a null ssid invalid hotspot con", "Wep= {\n            \"ssid\": \"test123\",\n      ", "= wifiDeviceConfig1.ssid);\n\n                ", "igS= {\n            \"ssid\": \"testWgr123testWg", "gI2= {\n            \"ssid\": \"testWgr\",\n      ", "STD\",\n            \"bssid\": \"\",\n            \"", "      expect(config.ssid).assertEqual('WIFIT", "spotConfig = {\n    \"ssid\": \"testWgr\",\n    \"b", "      expect(config.ssid.length).assertEqual", "SAE= {\n            \"ssid\": \"test123\",\n      ", "      console.info(\"ssid: \" + stationInfo.na", "PSK= {\n            \"ssid\": \"test123\",\n      ", "gD = {\n            \"ssid\": \"TESTD\",\n        ", "gS1= {\n            \"ssid\": \"testWgr123testWg", "igM= {\n            \"ssid\": \"testWgr\",\n      ", "gM1= {\n            \"ssid\": \"testWgr\",\n      ", "g1 = {\n            \"ssid\": \"TEST_PSK\",\n     ", "g1 = {\n            \"ssid\": \"TEST_WEP\",\n     ", "ig1= {\n            \"ssid\": \"testWgr\",\n      ", "ifi_test] set 33bit ssid invalid hotspot con", "sid: \" + result[j].bssid + \n                ", "ssid: \" + result[j].ssid + \"bssid: \" + resul", "ertEqual(configs[0].ssid == wifiDeviceConfig", "gWO= {\n            \"ssid\": \"WIFITEST\",\n     ", "PSK\",\n            \"bssid\": \"\",\n            \"", "igN= {\n            \"ssid\": \"\",\n            \"", "rtEqual(configs1[0].ssid == wifiDeviceConfig"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "bssid", "api_method_all": "bssid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 25, "since": 0, "api_used": "\u662f", "lines": ["EST7\",\n            \"bssid\": \"\",\n            \"", "TEST\",\n            \"bssid\": \"\",\n            \"", "test\",\n            \"bssid\": \"\",\n            \"", "_WEP\",\n            \"bssid\": \"\",\n            \"", "ST26\",\n            \"bssid\": \"\",\n            \"", "EST5\",\n            \"bssid\": \"\",\n            \"", "CONN\",\n            \"bssid\": \"\",\n            \"", " + \"bssid:\"+ result.bssid +\"band: \" + result.", " \" + result.ssid + \"bssid:\"+ result.bssid +\"b", "Wgr1\",\n            \"bssid\": \"\",\n            \"", "OPEN\",\n            \"bssid\": \"\",\n            \"", "%&*/\",\n            \"bssid\": \"\",\n            \"", "ssid: \" + result[j].bssid + \n                ", "ST10\",\n            \"bssid\": \"\",\n            \"", "+ result[j].ssid + \"bssid: \" + result[j].bssi", "_PSK\",\n            \"bssid\": \"\",\n            \"", "ST13\",\n            \"bssid\": \"\",\n            \"", "EST1\",\n            \"bssid\": \"\",\n            \"", "text\",\n            \"bssid\": \"\",\n            \"", "Wgr2\",\n            \"bssid\": \"\",\n            \"", "TDIS\",\n            \"bssid\": \"\",\n            \"", "ESTD\",\n            \"bssid\": \"\",\n            \"", "SSID\",\n            \"bssid\": \"\",\n            \""], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "preSharedKey", "api_method_all": "preSharedKey: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 64, "since": 0, "api_used": "\u662f", "lines": ["[wifi_test] set max preSharedKey valid hotspot confi", "= wifiDeviceConfigZ.preSharedKey);\n\n                ", "      console.info(\"preSharedKey: \" + config.preShar", "\": 21,\n            \"preSharedKey\": \"12345678\",\n     ", "    \"band\": 1,\n    \"preSharedKey\": \"12345678\",\n    \"", "      expect(config.preSharedKey.length).assertEqual", "d\": 1,\n            \"preSharedKey\": \"1234567891234567", "d\": 1,\n            \"preSharedKey\": \"12345678\",\n     ", "     expect(config1.preSharedKey.length).assertEqual", "ertEqual(configs[0].preSharedKey == wifiDeviceConfig", "\": \"\",\n            \"preSharedKey\": \"12345678\",\n     ", "aredKey: \" + config.preSharedKey);\n        expect(co", "= wifiDeviceConfigK.preSharedKey);\n\n                ", "pect(hotspotConfigS.preSharedKey.length).assertEqual", "= wifiDeviceConfig1.preSharedKey);\n                e", "  wifiDeviceConfigU.preSharedKey = \"1234567890\";\n   ", "\": \"\",\n            \"preSharedKey\": \"123456789\",\n    ", "test] set a invalid preSharedKey hotspot config  res", "= wifiDeviceConfigU.preSharedKey);\n\n                ", "\": \"\",\n            \"preSharedKey\": \"\",\n            \"", "fi_test] set a open preSharedKey hotspot config  res", "d\": 2,\n            \"preSharedKey\": \"12345678\",\n     ", "d\": 1,\n            \"preSharedKey\": \"123456789\",\n    ", "d\": 1,\n            \"preSharedKey\": \"1234567\",\n      ", "rtEqual(configs1[1].preSharedKey == wifiDeviceConfig", "\": \"\",\n            \"preSharedKey\": \"ABCDEF1234\",\n   ", "d\": 1,\n            \"preSharedKey\": \"\",\n            \"", "ifi_test] set a psk preSharedKey hotspot config resu"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "isHiddenSsid", "api_method_all": "isHiddenSsid: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 31, "since": 0, "api_used": "\u662f", "lines": ["6789\",\n            \"isHiddenSsid\": false,\n          ", "3456\",\n            \"isHiddenSsid\": false,\n          ", "5678\",\n            \"isHiddenSsid\": false,\n          ", "1234\",\n            \"isHiddenSsid\": false,\n          ", "\": \"\",\n            \"isHiddenSsid\": false,\n          ", "4567\",\n            \"isHiddenSsid\": false,\n          ", "EFGH\",\n            \"isHiddenSsid\": false,\n          ", "rtEqual(configs1[0].isHiddenSsid == wifiDeviceConfig", "= wifiDeviceConfig1.isHiddenSsid);\n                e", "gGzZ\",\n            \"isHiddenSsid\": false,\n          ", "B1@g\",\n            \"isHiddenSsid\": false,\n          ", "= wifiDeviceConfigT.isHiddenSsid);\n\n                ", "ertEqual(configs[0].isHiddenSsid == wifiDeviceConfig", "5678\",\n            \"isHiddenSsid\": true,\n           "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "securityType", "api_method_all": "securityType: WifiSecurityType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 52, "since": 0, "api_used": "\u662f", "lines": ["7891\",\n            \"securityType\": WifiSecurityType.", "\": \"\",\n            \"securityType\":WifiSecurityType.W", "Type: \" + result[j].securityType + \n                ", "= wifiDeviceConfig1.securityType);\n                e", "5678\",\n            \"securityType\":WifiSecurityType.W", "5678\",\n            \"securityType\":12,\n            \"m", "ertEqual(configs[0].securityType == wifiDeviceConfig", "6789\",\n            \"securityType\": WifiSecurityType.", "      expect(config.securityType).assertEqual(1);\n  ", "4567\",\n            \"securityType\": WifiSecurityType.", "\": \"12345678\",\n    \"securityType\": WifiSecurityType.", "                   \"securityType: \" + result[j].secu", " true,\n            \"securityType\": WifiSecurityType.", "      expect(config.securityType).assertEqual(3);\n  ", "rtEqual(configs1[0].securityType == wifiDeviceConfig", "false,\n            \"securityType\": WifiSecurityType.", "5678\",\n            \"securityType\": WifiSecurityType."], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "creatorUid", "api_method_all": "creatorUid: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": ["e\": 1,\n            \"creatorUid\": 7,\n            \"d", ".DHCP,\n            \"creatorUid\": 7,\n            \"d"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "disableReason", "api_method_all": "disableReason: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": ["d\": 7,\n            \"disableReason\": 0,\n            \"r"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "netId", "api_method_all": "netId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 26, "since": 7, "api_used": "\u662f", "lines": ["00:00\",\n            netId : -1,\n            p", "E_WEP,\n            \"netId\": -1,\n            \"", "E_PSK,\n            \"netId\": -1,\n            \"", "                   \"netId\":-1,\n              ", "\",\n                \"netId\":-2,\n              ", "_OPEN,\n            \"netId\": -1,\n            \"", "00:00\",\n            netId : -2,\n            p"], "files": ["WifiP2P.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "randomMacType", "api_method_all": "randomMacType: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": ["n\": 0,\n            \"randomMacType\": 0,\n            \"r"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "randomMacAddr", "api_method_all": "randomMacAddr: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": ["e\": 0,\n            \"randomMacAddr\": \"11:22:33:44:55:6"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "ipType", "api_method_all": "ipType: IpType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": ["\": -1,\n            \"ipType\": IpType.DHCP,\n    ", "\": -1,\n            \"ipType\": 1,\n            \"c"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiDeviceConfig", "api_method_name": "staticIp", "api_method_all": "staticIp: IpConfig", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": ["5:66\",\n            \"staticIp\": {\"ipAddress\": 128", "5:66\",\n            \"staticIp\": ipConfig,    \n   "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpConfig", "api_method_all": "interface IpConfig {\n        ipAddress: number;\n        gateway: number;\n        dnsServers: number[];\n        domains: Array<string>;\n    }", "api_method_name": "IpConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "IpConfig", "api_method_name": "ipAddress", "api_method_all": "ipAddress: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 25, "since": 7, "api_used": "\u662f", "lines": ["ss: \" + stationInfo.ipAddress);\n        expect(st", "+ ipInfo.gateway + \"ipAddress: \" + ipInfo.ipAddre", "Address + \n        \"ipAddress: \" + stationInfo.ip", "Address: \" + result.ipAddress + \n                ", "t ipConfig = {\n    \"ipAddress\": 1284752956,\n    \"", "      \"staticIp\": {\"ipAddress\": 1284752956,\"gatew", "Address: \" + ipInfo.ipAddress\n         + \"leaseDu", "esult.macAddress + \"ipAddress: \" + result.ipAddre"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpConfig", "api_method_name": "gateway", "api_method_all": "gateway: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["dress\": 1284752956,\"gateway\": 1284752936},\n    ", "\": 1284752956,\n    \"gateway\": 17017024,\n    \"dn", "gateway: \" + ipInfo.gateway + \"ipAddress: \" + i", "      console.info(\"gateway: \" + ipInfo.gateway", "fo)).assertContain(\"gateway\");\n        console."], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpConfig", "api_method_name": "dnsServers", "api_method_all": "dnsServers: number[]", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ay\": 17017024,\n    \"dnsServers\": 12345678,\n    \"do"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpConfig", "api_method_name": "domains", "api_method_all": "domains: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["rs\": 12345678,\n    \"domains\": [\"aaa\"],\n}\n\nlet I"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiScanInfo", "api_method_all": "interface WifiScanInfo {\n        \n        ssid: string;\n\n        \n        bssid: string;\n\n        \n        capabilities: string;\n\n        \n        securityType: WifiSecurityType;\n\n        \n        rssi: number;\n\n        \n        band: number;\n\n        \n        frequency: number;\n\n        \n        channelWidth: number;\n\n        \n        timestamp: number;\n    }", "api_method_name": "WifiScanInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WifiScanInfo", "api_method_name": "ssid", "api_method_all": "ssid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 97, "since": 0, "api_used": "\u662f", "lines": ["igC= {\n            \"ssid\": \"test123\",\n      ", "      console.info(\"ssid: \" + result[j].ssid", "gr2\",\n            \"bssid\": \"\",\n            \"", "gr1\",\n            \"bssid\": \"\",\n            \"", " result[j].ssid + \"bssid: \" + result[j].bssi", "g2 = {\n            \"ssid\": \"TESTWgr2\",\n     ", ".assertEqual(config.ssid==HotspotConfigC.ssi", "igC= {\n            \"ssid\": \"\u6d4b\u8bd5123\uff01@#\uffe5%\u2026\u2026&*\uff08 ", "WEP\",\n            \"bssid\": \"\",\n            \"", "g1 = {\n            \"ssid\": \"TESTWgr1\",\n     ", "igO= {\n            \"ssid\": \"test123\",\n      ", "5G = {\n            \"ssid\": \"testWgr\",\n      ", "PEN\",\n            \"bssid\": \"\",\n            \"", "= wifiDeviceConfig1.ssid);\n            });\n\n", "igI= {\n            \"ssid\": \"testWgr\",\n      ", "sid==HotspotConfigC.ssid);\n        done();\n ", "g1 = {\n            \"ssid\": \"TEST_OPEN\",\n    ", "fi_test] set a null ssid invalid hotspot con", "Wep= {\n            \"ssid\": \"test123\",\n      ", "= wifiDeviceConfig1.ssid);\n\n                ", "igS= {\n            \"ssid\": \"testWgr123testWg", "gI2= {\n            \"ssid\": \"testWgr\",\n      ", "STD\",\n            \"bssid\": \"\",\n            \"", "      expect(config.ssid).assertEqual('WIFIT", "spotConfig = {\n    \"ssid\": \"testWgr\",\n    \"b", "      expect(config.ssid.length).assertEqual", "SAE= {\n            \"ssid\": \"test123\",\n      ", "      console.info(\"ssid: \" + stationInfo.na", "PSK= {\n            \"ssid\": \"test123\",\n      ", "gD = {\n            \"ssid\": \"TESTD\",\n        ", "gS1= {\n            \"ssid\": \"testWgr123testWg", "igM= {\n            \"ssid\": \"testWgr\",\n      ", "gM1= {\n            \"ssid\": \"testWgr\",\n      ", "g1 = {\n            \"ssid\": \"TEST_PSK\",\n     ", "g1 = {\n            \"ssid\": \"TEST_WEP\",\n     ", "ig1= {\n            \"ssid\": \"testWgr\",\n      ", "ifi_test] set 33bit ssid invalid hotspot con", "sid: \" + result[j].bssid + \n                ", "ssid: \" + result[j].ssid + \"bssid: \" + resul", "ertEqual(configs[0].ssid == wifiDeviceConfig", "gWO= {\n            \"ssid\": \"WIFITEST\",\n     ", "PSK\",\n            \"bssid\": \"\",\n            \"", "igN= {\n            \"ssid\": \"\",\n            \"", "rtEqual(configs1[0].ssid == wifiDeviceConfig"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiScanInfo", "api_method_name": "bssid", "api_method_all": "bssid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 25, "since": 0, "api_used": "\u662f", "lines": ["EST7\",\n            \"bssid\": \"\",\n            \"", "TEST\",\n            \"bssid\": \"\",\n            \"", "test\",\n            \"bssid\": \"\",\n            \"", "_WEP\",\n            \"bssid\": \"\",\n            \"", "ST26\",\n            \"bssid\": \"\",\n            \"", "EST5\",\n            \"bssid\": \"\",\n            \"", "CONN\",\n            \"bssid\": \"\",\n            \"", " + \"bssid:\"+ result.bssid +\"band: \" + result.", " \" + result.ssid + \"bssid:\"+ result.bssid +\"b", "Wgr1\",\n            \"bssid\": \"\",\n            \"", "OPEN\",\n            \"bssid\": \"\",\n            \"", "%&*/\",\n            \"bssid\": \"\",\n            \"", "ssid: \" + result[j].bssid + \n                ", "ST10\",\n            \"bssid\": \"\",\n            \"", "+ result[j].ssid + \"bssid: \" + result[j].bssi", "_PSK\",\n            \"bssid\": \"\",\n            \"", "ST13\",\n            \"bssid\": \"\",\n            \"", "EST1\",\n            \"bssid\": \"\",\n            \"", "text\",\n            \"bssid\": \"\",\n            \"", "Wgr2\",\n            \"bssid\": \"\",\n            \"", "TDIS\",\n            \"bssid\": \"\",\n            \"", "ESTD\",\n            \"bssid\": \"\",\n            \"", "SSID\",\n            \"bssid\": \"\",\n            \""], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiScanInfo", "api_method_name": "capabilities", "api_method_all": "capabilities: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ult[j].timestamp + \"capabilities\" + result[j].capabi", "lities\" + result[j].capabilities\n                   "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiScanInfo", "api_method_name": "securityType", "api_method_all": "securityType: WifiSecurityType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 52, "since": 0, "api_used": "\u662f", "lines": ["7891\",\n            \"securityType\": WifiSecurityType.", "\": \"\",\n            \"securityType\":WifiSecurityType.W", "Type: \" + result[j].securityType + \n                ", "= wifiDeviceConfig1.securityType);\n                e", "5678\",\n            \"securityType\":WifiSecurityType.W", "5678\",\n            \"securityType\":12,\n            \"m", "ertEqual(configs[0].securityType == wifiDeviceConfig", "6789\",\n            \"securityType\": WifiSecurityType.", "      expect(config.securityType).assertEqual(1);\n  ", "4567\",\n            \"securityType\": WifiSecurityType.", "\": \"12345678\",\n    \"securityType\": WifiSecurityType.", "                   \"securityType: \" + result[j].secu", " true,\n            \"securityType\": WifiSecurityType.", "      expect(config.securityType).assertEqual(3);\n  ", "rtEqual(configs1[0].securityType == wifiDeviceConfig", "false,\n            \"securityType\": WifiSecurityType.", "5678\",\n            \"securityType\": WifiSecurityType."], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiScanInfo", "api_method_name": "rssi", "api_method_all": "rssi: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["             expect(rssiLength).assertEqual(", "                let rssiLength = Object.keys", "rssi: \" + result[j].rssi + \"band: \" + result", " + result.chload + \"rssi \" + result.rssi + \"", "                   \"rssi: \" + result[j].rssi", "uetooth_js] BLE get rssi start');\n        aw", "nfo('[bluetooth_js] rssi err:' + JSON.string", "etooth_js] BLE read rssi ' + JSON.stringify(", " + \"rssi \" + result.rssi + \"netWorkId: \" + r", "_test] check the 5G rssi assgined to level t", "est] check the 2.4G rssi assgined to level t", "uetooth_js] BLE get rssi1 start');\n        a"], "files": ["BluetoothBle.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiScanInfo", "api_method_name": "band", "api_method_all": "band: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 6, "api_used": "\u662f", "lines": ["i_test] set invalid band hotspot config  res", "2356\",\n            \"band\": 1,\n            \"p", "3567\",\n            \"band\": 1,\n            \"p", "d:\"+ result.bssid +\"band: \" + result.band+\n ", "d\": \"testWgr\",\n    \"band\": 1,\n    \"preShared", "TEST\",\n            \"band\": 1,\n            \"p", "band: \" + result[j].band + \n                ", "tWgr\",\n            \"band\": 1,\n            \"p", "t123\",\n            \"band\": 1,\n            \"p", "\": \"\",\n            \"band\": 1,\n            \"p", "+ result[j].rssi + \"band: \" + result[j].band", "lt)).assertContain('band');\n                ", "tWgr\",\n            \"band\": 21,\n            \"", "tWgr\",\n            \"band\": 2,\n            \"p", "pect(hotspotConfig5.band).assertEqual(2);\n  ", "&*\uff08 \",\n            \"band\": 1,\n            \"p", " +\"band: \" + result.band+\n                \"i", "xpect(hotspotConfig.band).assertEqual(1);\n  "], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiScanInfo", "api_method_name": "frequency", "api_method_all": "frequency: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["equency: \" + result.frequency + \"goIpAddress: \" +", "                 + \"frequency: \" + result.frequen", "ency: \" + result[j].frequency +\n                 ", "result.linkSpeed + \"frequency:\" \n                ", "                   \"frequency: \" + result[j].freq", "           + result.frequency +\"snr:\" + result.sn"], "files": ["WifiP2P.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiScanInfo", "api_method_name": "channelWidth", "api_method_all": "channelWidth: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["idth: \" + result[j].channelWidth);\n                 ", "                 + \"channelWidth: \" + result[j].chan"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiScanInfo", "api_method_name": "timestamp", "api_method_all": "timestamp: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["                   \"timestamp\" + result[j].timest", "estamp\" + result[j].timestamp + \"capabilities\" + "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiSecurityType", "api_method_all": "enum WifiSecurityType {\n        \n        WIFI_SEC_TYPE_INVALID = 0,\n\n        \n        WIFI_SEC_TYPE_OPEN = 1,\n\n        \n        WIFI_SEC_TYPE_WEP = 2,\n\n        \n        WIFI_SEC_TYPE_PSK = 3,\n\n        \n        WIFI_SEC_TYPE_SAE = 4,\n    }", "api_method_name": "WifiSecurityType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 41, "since": 6, "api_used": "\u662f", "lines": ["     \"securityType\":WifiSecurityType.WIFI_SEC_TYPE_OPEN,", "     \"securityType\":WifiSecurityType.WIFI_SEC_TYPE_SAE,\n", "    \"securityType\": WifiSecurityType.WIFI_SEC_TYPE_PSK,\n", "    \"securityType\": WifiSecurityType.WIFI_SEC_TYPE_OPEN,", "     \"securityType\":WifiSecurityType.WIFI_SEC_TYPE_WEP,\n", "fiActive());\n}\n\nlet WifiSecurityType = {\n    WIFI_SEC_TY", "    \"securityType\": WifiSecurityType.WIFI_SEC_TYPE_WEP,\n", "     \"securityType\":WifiSecurityType.WIFI_SEC_TYPE_PSK,\n"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiSecurityType", "api_method_name": "WIFI_SEC_TYPE_INVALID", "api_method_all": "WIFI_SEC_TYPE_INVALID = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ecurityType = {\n    WIFI_SEC_TYPE_INVALID: 0,\n    WIFI_SEC_TY", "ecurityType = {\n    WIFI_SEC_TYPE_INVALID : 0,\n    WIFI_SEC_T"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiSecurityType", "api_method_name": "WIFI_SEC_TYPE_OPEN", "api_method_all": "WIFI_SEC_TYPE_OPEN = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["\": WifiSecurityType.WIFI_SEC_TYPE_OPEN,\n            \"netId", "PE_INVALID : 0,\n    WIFI_SEC_TYPE_OPEN : 1,\n    WIFI_SEC_T", "YPE_INVALID: 0,\n    WIFI_SEC_TYPE_OPEN: 1,\n    WIFI_SEC_TY", "e\":WifiSecurityType.WIFI_SEC_TYPE_OPEN,\n            \"maxCo", "\": WifiSecurityType.WIFI_SEC_TYPE_OPEN,\n        };\n       "], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiSecurityType", "api_method_name": "WIFI_SEC_TYPE_WEP", "api_method_all": "WIFI_SEC_TYPE_WEP = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["C_TYPE_OPEN: 1,\n    WIFI_SEC_TYPE_WEP: 2,\n    WIFI_SEC_TY", "\": WifiSecurityType.WIFI_SEC_TYPE_WEP,\n            \"netId", "_TYPE_OPEN : 1,\n    WIFI_SEC_TYPE_WEP : 2,\n    WIFI_SEC_T", "e\":WifiSecurityType.WIFI_SEC_TYPE_WEP,\n            \"maxCo"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiSecurityType", "api_method_name": "WIFI_SEC_TYPE_PSK", "api_method_all": "WIFI_SEC_TYPE_PSK = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 31, "since": 0, "api_used": "\u662f", "lines": ["e\":WifiSecurityType.WIFI_SEC_TYPE_PSK,\n            \"maxCo", "C_TYPE_WEP : 2,\n    WIFI_SEC_TYPE_PSK : 3,\n    WIFI_SEC_T", "\": WifiSecurityType.WIFI_SEC_TYPE_PSK,\n        };\n       ", "\": WifiSecurityType.WIFI_SEC_TYPE_PSK,\n            \"netId", "EC_TYPE_WEP: 2,\n    WIFI_SEC_TYPE_PSK: 3,\n    WIFI_SEC_TY", "\": WifiSecurityType.WIFI_SEC_TYPE_PSK,\n            \"maxCo", "\": WifiSecurityType.WIFI_SEC_TYPE_PSK,\n    \"maxConn\": 8\n}"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiSecurityType", "api_method_name": "WIFI_SEC_TYPE_SAE", "api_method_all": "WIFI_SEC_TYPE_SAE = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["C_TYPE_PSK : 3,\n    WIFI_SEC_TYPE_SAE : 4,\n}\n\nlet Hotspot", "e\":WifiSecurityType.WIFI_SEC_TYPE_SAE,\n            \"maxCo", "EC_TYPE_PSK: 3,\n    WIFI_SEC_TYPE_SAE: 4,\n}\n\nlet SuppStat"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_all": "interface WifiLinkedInfo {\n        \n        ssid: string;\n\n        \n        bssid: string;\n\n        \n        \n        networkId: number;\n\n        \n        rssi: number;\n\n        \n        band: number;\n\n        \n        linkSpeed: number;\n\n        \n        frequency: number;\n\n        \n        isHidden: boolean;\n\n        \n        isRestricted: boolean;\n\n        \n        \n        chload: number;\n\n        \n        \n        snr: number;\n\n        \n        macAddress: string;\n\n        \n        ipAddress: number;\n\n        \n        \n        suppState: SuppState;\n\n        \n        connState: ConnState;\n    }", "api_method_name": "WifiLinkedInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "ssid", "api_method_all": "ssid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 97, "since": 0, "api_used": "\u662f", "lines": ["igC= {\n            \"ssid\": \"test123\",\n      ", "      console.info(\"ssid: \" + result[j].ssid", "gr2\",\n            \"bssid\": \"\",\n            \"", "gr1\",\n            \"bssid\": \"\",\n            \"", " result[j].ssid + \"bssid: \" + result[j].bssi", "g2 = {\n            \"ssid\": \"TESTWgr2\",\n     ", ".assertEqual(config.ssid==HotspotConfigC.ssi", "igC= {\n            \"ssid\": \"\u6d4b\u8bd5123\uff01@#\uffe5%\u2026\u2026&*\uff08 ", "WEP\",\n            \"bssid\": \"\",\n            \"", "g1 = {\n            \"ssid\": \"TESTWgr1\",\n     ", "igO= {\n            \"ssid\": \"test123\",\n      ", "5G = {\n            \"ssid\": \"testWgr\",\n      ", "PEN\",\n            \"bssid\": \"\",\n            \"", "= wifiDeviceConfig1.ssid);\n            });\n\n", "igI= {\n            \"ssid\": \"testWgr\",\n      ", "sid==HotspotConfigC.ssid);\n        done();\n ", "g1 = {\n            \"ssid\": \"TEST_OPEN\",\n    ", "fi_test] set a null ssid invalid hotspot con", "Wep= {\n            \"ssid\": \"test123\",\n      ", "= wifiDeviceConfig1.ssid);\n\n                ", "igS= {\n            \"ssid\": \"testWgr123testWg", "gI2= {\n            \"ssid\": \"testWgr\",\n      ", "STD\",\n            \"bssid\": \"\",\n            \"", "      expect(config.ssid).assertEqual('WIFIT", "spotConfig = {\n    \"ssid\": \"testWgr\",\n    \"b", "      expect(config.ssid.length).assertEqual", "SAE= {\n            \"ssid\": \"test123\",\n      ", "      console.info(\"ssid: \" + stationInfo.na", "PSK= {\n            \"ssid\": \"test123\",\n      ", "gD = {\n            \"ssid\": \"TESTD\",\n        ", "gS1= {\n            \"ssid\": \"testWgr123testWg", "igM= {\n            \"ssid\": \"testWgr\",\n      ", "gM1= {\n            \"ssid\": \"testWgr\",\n      ", "g1 = {\n            \"ssid\": \"TEST_PSK\",\n     ", "g1 = {\n            \"ssid\": \"TEST_WEP\",\n     ", "ig1= {\n            \"ssid\": \"testWgr\",\n      ", "ifi_test] set 33bit ssid invalid hotspot con", "sid: \" + result[j].bssid + \n                ", "ssid: \" + result[j].ssid + \"bssid: \" + resul", "ertEqual(configs[0].ssid == wifiDeviceConfig", "gWO= {\n            \"ssid\": \"WIFITEST\",\n     ", "PSK\",\n            \"bssid\": \"\",\n            \"", "igN= {\n            \"ssid\": \"\",\n            \"", "rtEqual(configs1[0].ssid == wifiDeviceConfig"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "bssid", "api_method_all": "bssid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 25, "since": 0, "api_used": "\u662f", "lines": ["EST7\",\n            \"bssid\": \"\",\n            \"", "TEST\",\n            \"bssid\": \"\",\n            \"", "test\",\n            \"bssid\": \"\",\n            \"", "_WEP\",\n            \"bssid\": \"\",\n            \"", "ST26\",\n            \"bssid\": \"\",\n            \"", "EST5\",\n            \"bssid\": \"\",\n            \"", "CONN\",\n            \"bssid\": \"\",\n            \"", " + \"bssid:\"+ result.bssid +\"band: \" + result.", " \" + result.ssid + \"bssid:\"+ result.bssid +\"b", "Wgr1\",\n            \"bssid\": \"\",\n            \"", "OPEN\",\n            \"bssid\": \"\",\n            \"", "%&*/\",\n            \"bssid\": \"\",\n            \"", "ssid: \" + result[j].bssid + \n                ", "ST10\",\n            \"bssid\": \"\",\n            \"", "+ result[j].ssid + \"bssid: \" + result[j].bssi", "_PSK\",\n            \"bssid\": \"\",\n            \"", "ST13\",\n            \"bssid\": \"\",\n            \"", "EST1\",\n            \"bssid\": \"\",\n            \"", "text\",\n            \"bssid\": \"\",\n            \"", "Wgr2\",\n            \"bssid\": \"\",\n            \"", "TDIS\",\n            \"bssid\": \"\",\n            \"", "ESTD\",\n            \"bssid\": \"\",\n            \"", "SSID\",\n            \"bssid\": \"\",\n            \""], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "networkId", "api_method_all": "networkId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 6, "api_used": "\u662f", "lines": ["ult.clientDevices +\"networkId: \" + result.network", "tworkId: \" + result.networkId \n                 +", "ersistentGroup(data.networkId);\n            expec"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "rssi", "api_method_all": "rssi: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["             expect(rssiLength).assertEqual(", "                let rssiLength = Object.keys", "rssi: \" + result[j].rssi + \"band: \" + result", " + result.chload + \"rssi \" + result.rssi + \"", "                   \"rssi: \" + result[j].rssi", "uetooth_js] BLE get rssi start');\n        aw", "nfo('[bluetooth_js] rssi err:' + JSON.string", "etooth_js] BLE read rssi ' + JSON.stringify(", " + \"rssi \" + result.rssi + \"netWorkId: \" + r", "_test] check the 5G rssi assgined to level t", "est] check the 2.4G rssi assgined to level t", "uetooth_js] BLE get rssi1 start');\n        a"], "files": ["BluetoothBle.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "band", "api_method_all": "band: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 6, "api_used": "\u662f", "lines": ["i_test] set invalid band hotspot config  res", "2356\",\n            \"band\": 1,\n            \"p", "3567\",\n            \"band\": 1,\n            \"p", "d:\"+ result.bssid +\"band: \" + result.band+\n ", "d\": \"testWgr\",\n    \"band\": 1,\n    \"preShared", "TEST\",\n            \"band\": 1,\n            \"p", "band: \" + result[j].band + \n                ", "tWgr\",\n            \"band\": 1,\n            \"p", "t123\",\n            \"band\": 1,\n            \"p", "\": \"\",\n            \"band\": 1,\n            \"p", "+ result[j].rssi + \"band: \" + result[j].band", "lt)).assertContain('band');\n                ", "tWgr\",\n            \"band\": 21,\n            \"", "tWgr\",\n            \"band\": 2,\n            \"p", "pect(hotspotConfig5.band).assertEqual(2);\n  ", "&*\uff08 \",\n            \"band\": 1,\n            \"p", " +\"band: \" + result.band+\n                \"i", "xpect(hotspotConfig.band).assertEqual(1);\n  "], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "linkSpeed", "api_method_all": "linkSpeed: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["+ \n                \"linkSpeed: \" + result.linkSpe", "nkSpeed: \" + result.linkSpeed + \"frequency:\" \n   "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "frequency", "api_method_all": "frequency: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["equency: \" + result.frequency + \"goIpAddress: \" +", "                 + \"frequency: \" + result.frequen", "ency: \" + result[j].frequency +\n                 ", "result.linkSpeed + \"frequency:\" \n                ", "                   \"frequency: \" + result[j].freq", "           + result.frequency +\"snr:\" + result.sn"], "files": ["WifiP2P.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "isHidden", "api_method_all": "isHidden: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 33, "since": 0, "api_used": "\u662f", "lines": ["= wifiDeviceConfig1.isHiddenSsid);\n             ", "d+\n                \"isHidden: \" + result.isHidde", "5678\",\n            \"isHiddenSsid\": true,\n       ", "rtEqual(configs1[0].isHiddenSsid == wifiDeviceCo", "= wifiDeviceConfigT.isHiddenSsid);\n\n            ", "3456\",\n            \"isHiddenSsid\": false,\n      ", "B1@g\",\n            \"isHiddenSsid\": false,\n      ", "gGzZ\",\n            \"isHiddenSsid\": false,\n      ", "\": \"\",\n            \"isHiddenSsid\": false,\n      ", "4567\",\n            \"isHiddenSsid\": false,\n      ", "5678\",\n            \"isHiddenSsid\": false,\n      ", "ertEqual(configs[0].isHiddenSsid == wifiDeviceCo", "1234\",\n            \"isHiddenSsid\": false,\n      ", "6789\",\n            \"isHiddenSsid\": false,\n      ", "EFGH\",\n            \"isHiddenSsid\": false,\n      ", "sHidden: \" + result.isHidden + \"isRestricted: \" "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "isRestricted", "api_method_all": "isRestricted: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [" result.isHidden + \"isRestricted: \" + result.isRestr", "tricted: \" + result.isRestricted +\n                \""], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "chload", "api_method_all": "chload: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [" +\n                \"chload: \" + result.chload ", "\"chload: \" + result.chload + \"rssi \" + result."], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "snr", "api_method_all": "snr: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [" result.frequency +\"snr:\" + result.snr+\n   ", "cy +\"snr:\" + result.snr+\n                \"m"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "macAddress", "api_method_all": "macAddress: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["Address: \" + result.macAddress + \"ipAddress: \" + r", "r+\n                \"macAddress: \" + result.macAddr", "fo.name +\n         \"macAddress: \" + stationInfo.ma", "ss: \" + stationInfo.macAddress + \n        \"ipAddre"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "ipAddress", "api_method_all": "ipAddress: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 25, "since": 7, "api_used": "\u662f", "lines": ["ss: \" + stationInfo.ipAddress);\n        expect(st", "+ ipInfo.gateway + \"ipAddress: \" + ipInfo.ipAddre", "Address + \n        \"ipAddress: \" + stationInfo.ip", "Address: \" + result.ipAddress + \n                ", "t ipConfig = {\n    \"ipAddress\": 1284752956,\n    \"", "      \"staticIp\": {\"ipAddress\": 1284752956,\"gatew", "Address: \" + ipInfo.ipAddress\n         + \"leaseDu", "esult.macAddress + \"ipAddress: \" + result.ipAddre"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "suppState", "api_method_all": "suppState: SuppState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ppState: \" + result.suppState + \"connState: \" + r", "+ \n                \"suppState: \" + result.suppSta"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiLinkedInfo", "api_method_name": "connState", "api_method_all": "connState: ConnState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["result.suppState + \"connState: \" + result.connSta", "nnState: \" + result.connState);\n                d", "e.STATE_CONNECTED!= connState );\n        expect(t", "t' + JSON.stringify(connState));\n        expect(c", "e));\n        expect(connState).assertEqual(blueto", "ATE_DISCONNECTING!= connState );\n        done();\n", "leBt();\n        let connState = bluetooth.getBtCo", ".STATE_CONNECTING!= connState );\n        expect(t"], "files": ["WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpInfo", "api_method_all": "interface IpInfo {\n        \n        ipAddress: number;\n\n        \n        gateway: number;\n\n        \n        netmask: number;\n\n        \n        primaryDns: number;\n\n        \n        secondDns: number;\n\n        \n        serverIp: number;\n\n        \n        leaseDuration: number;\n    }", "api_method_name": "IpInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["et ipInfo = wifi.getIpInfo();\n        expect(J", "desc       Test get IpInfo information\n    */\n"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpInfo", "api_method_name": "ipAddress", "api_method_all": "ipAddress: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 25, "since": 7, "api_used": "\u662f", "lines": ["ss: \" + stationInfo.ipAddress);\n        expect(st", "+ ipInfo.gateway + \"ipAddress: \" + ipInfo.ipAddre", "Address + \n        \"ipAddress: \" + stationInfo.ip", "Address: \" + result.ipAddress + \n                ", "t ipConfig = {\n    \"ipAddress\": 1284752956,\n    \"", "      \"staticIp\": {\"ipAddress\": 1284752956,\"gatew", "Address: \" + ipInfo.ipAddress\n         + \"leaseDu", "esult.macAddress + \"ipAddress: \" + result.ipAddre"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpInfo", "api_method_name": "gateway", "api_method_all": "gateway: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["dress\": 1284752956,\"gateway\": 1284752936},\n    ", "\": 1284752956,\n    \"gateway\": 17017024,\n    \"dn", "gateway: \" + ipInfo.gateway + \"ipAddress: \" + i", "      console.info(\"gateway: \" + ipInfo.gateway", "fo)).assertContain(\"gateway\");\n        console."], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpInfo", "api_method_name": "netmask", "api_method_all": "netmask: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["uration + \n        \"netmask: \" + ipInfo.netmask", "netmask: \" + ipInfo.netmask + \"primaryDns:\" + i"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpInfo", "api_method_name": "primaryDns", "api_method_all": "primaryDns: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["+ ipInfo.netmask + \"primaryDns:\" + ipInfo.primaryD", "imaryDns:\" + ipInfo.primaryDns +\n        \"secondDn"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpInfo", "api_method_name": "secondDns", "api_method_all": "secondDns: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["condDns: \" + ipInfo.secondDns + \"serverIp: \" + ip", "imaryDns +\n        \"secondDns: \" + ipInfo.secondD"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpInfo", "api_method_name": "serverIp", "api_method_all": "serverIp: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["erverIp: \" + ipInfo.serverIp );\n        \n       ", "ipInfo.secondDns + \"serverIp: \" + ipInfo.serverI"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpInfo", "api_method_name": "leaseDuration", "api_method_all": "leaseDuration: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["Address\n         + \"leaseDuration: \" + ipInfo.leaseDu", "uration + \n        \"leaseDuration: \" + ipInfo.leaseDu", "uration: \" + ipInfo.leaseDuration + \n        \"leaseDu", "uration: \" + ipInfo.leaseDuration + \n        \"netmask"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HotspotConfig", "api_method_all": "interface HotspotConfig {\n        \n        ssid: string;\n\n        \n        securityType: WifiSecurityType;\n\n        \n        band: number;\n\n        \n        preSharedKey: string;\n\n        \n        maxConn: number;\n    }", "api_method_name": "HotspotConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 82, "since": 7, "api_used": "\u662f", "lines": ["      }\n        let HotspotConfigN= {\n            \"ss", "rue();\n\n        let HotspotConfigM1= {\n            \"s", "sSuccess1 = wifi.setHotspotConfig(HotspotConfigM);\n  ", "      }\n        let HotspotConfigWep= {\n            \"", "sSuccess5 = wifi.setHotspotConfig(HotspotConfig5G);\n ", "nfo(\"[wifi_test] getHotspotConfig result -> \" + JSON.", "fi.setHotspotConfig(HotspotConfigI2);\n        expect(", "      }\n        let HotspotConfigM= {\n            \"ss", "fi.setHotspotConfig(HotspotConfig5G);\n        expect(", "log(\"[wifi_test] getHotspotConfig  result: \" + JSON.s", "sSuccess2 = wifi.setHotspotConfig(HotspotConfigM1);\n ", "rue();\n\n        let HotspotConfigS1= {\n            \"s", "fi.setHotspotConfig(HotspotConfigC);\n        expect(i", "fi.setHotspotConfig(HotspotConfig);\n        expect(is", "sSuccess1 = wifi.setHotspotConfig(HotspotConfigS);\n  ", "sSuccess1 = wifi.setHotspotConfig(HotspotConfigN);\n  ", "potConfig = wifi.getHotspotConfig();\n        console.", "fi.setHotspotConfig(HotspotConfigN);\n        console.", "lse();\n\n        let HotspotConfigS= {\n            \"ss", "sSuccess1 = wifi.setHotspotConfig(HotspotConfig1);\n  ", "fi.setHotspotConfig(HotspotConfigS1);\n        console", "      }\n        let HotspotConfig1= {\n            \"ss", "sSuccess2 = wifi.setHotspotConfig(HotspotConfigS1);\n ", "sSuccess1 = wifi.setHotspotConfig(HotspotConfigI);\n  ", "fi.setHotspotConfig(HotspotConfigS);\n        expect(i", "      }\n        let HotspotConfigC= {\n            \"ss", "tEqual(config.ssid==HotspotConfigC.ssid);\n        don", "fi.setHotspotConfig(HotspotConfigM);\n        console.", "fi.setHotspotConfig(HotspotConfigI);\n        expect(i", "potConfigS= wifi.getHotspotConfig();\n        console.", "al(8);\n\n        let HotspotConfigI2= {\n            \"s", "isSuccess = wifi.setHotspotConfig(HotspotConfig);\n   ", "otConfig5 = wifi.getHotspotConfig();\n        console.", "fi.setHotspotConfig(HotspotConfig1);\n        console.", "sSuccess2 = wifi.setHotspotConfig(HotspotConfigI2);\n ", "sSuccess1 = wifi.setHotspotConfig(HotspotConfigC);\n  ", "     }\n\n        let HotspotConfigI= {\n            \"ss", "YPE_SAE : 4,\n}\n\nlet HotspotConfig = {\n    \"ssid\": \"te", "ive());\n        let HotspotConfig5G = {\n            \"", "t config1 = wifi.getHotspotConfig();\n        console.", "sSuccess1 = wifi.setHotspotConfig(HotspotConfigWep);\n", "et config = wifi.getHotspotConfig();\n        console.", "fi.setHotspotConfig(HotspotConfigM1);\n        expect("], "files": ["WifiSoftAP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HotspotConfig", "api_method_name": "ssid", "api_method_all": "ssid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 97, "since": 0, "api_used": "\u662f", "lines": ["igC= {\n            \"ssid\": \"test123\",\n      ", "      console.info(\"ssid: \" + result[j].ssid", "gr2\",\n            \"bssid\": \"\",\n            \"", "gr1\",\n            \"bssid\": \"\",\n            \"", " result[j].ssid + \"bssid: \" + result[j].bssi", "g2 = {\n            \"ssid\": \"TESTWgr2\",\n     ", ".assertEqual(config.ssid==HotspotConfigC.ssi", "igC= {\n            \"ssid\": \"\u6d4b\u8bd5123\uff01@#\uffe5%\u2026\u2026&*\uff08 ", "WEP\",\n            \"bssid\": \"\",\n            \"", "g1 = {\n            \"ssid\": \"TESTWgr1\",\n     ", "igO= {\n            \"ssid\": \"test123\",\n      ", "5G = {\n            \"ssid\": \"testWgr\",\n      ", "PEN\",\n            \"bssid\": \"\",\n            \"", "= wifiDeviceConfig1.ssid);\n            });\n\n", "igI= {\n            \"ssid\": \"testWgr\",\n      ", "sid==HotspotConfigC.ssid);\n        done();\n ", "g1 = {\n            \"ssid\": \"TEST_OPEN\",\n    ", "fi_test] set a null ssid invalid hotspot con", "Wep= {\n            \"ssid\": \"test123\",\n      ", "= wifiDeviceConfig1.ssid);\n\n                ", "igS= {\n            \"ssid\": \"testWgr123testWg", "gI2= {\n            \"ssid\": \"testWgr\",\n      ", "STD\",\n            \"bssid\": \"\",\n            \"", "      expect(config.ssid).assertEqual('WIFIT", "spotConfig = {\n    \"ssid\": \"testWgr\",\n    \"b", "      expect(config.ssid.length).assertEqual", "SAE= {\n            \"ssid\": \"test123\",\n      ", "      console.info(\"ssid: \" + stationInfo.na", "PSK= {\n            \"ssid\": \"test123\",\n      ", "gD = {\n            \"ssid\": \"TESTD\",\n        ", "gS1= {\n            \"ssid\": \"testWgr123testWg", "igM= {\n            \"ssid\": \"testWgr\",\n      ", "gM1= {\n            \"ssid\": \"testWgr\",\n      ", "g1 = {\n            \"ssid\": \"TEST_PSK\",\n     ", "g1 = {\n            \"ssid\": \"TEST_WEP\",\n     ", "ig1= {\n            \"ssid\": \"testWgr\",\n      ", "ifi_test] set 33bit ssid invalid hotspot con", "sid: \" + result[j].bssid + \n                ", "ssid: \" + result[j].ssid + \"bssid: \" + resul", "ertEqual(configs[0].ssid == wifiDeviceConfig", "gWO= {\n            \"ssid\": \"WIFITEST\",\n     ", "PSK\",\n            \"bssid\": \"\",\n            \"", "igN= {\n            \"ssid\": \"\",\n            \"", "rtEqual(configs1[0].ssid == wifiDeviceConfig"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HotspotConfig", "api_method_name": "securityType", "api_method_all": "securityType: WifiSecurityType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 52, "since": 0, "api_used": "\u662f", "lines": ["7891\",\n            \"securityType\": WifiSecurityType.", "\": \"\",\n            \"securityType\":WifiSecurityType.W", "Type: \" + result[j].securityType + \n                ", "= wifiDeviceConfig1.securityType);\n                e", "5678\",\n            \"securityType\":WifiSecurityType.W", "5678\",\n            \"securityType\":12,\n            \"m", "ertEqual(configs[0].securityType == wifiDeviceConfig", "6789\",\n            \"securityType\": WifiSecurityType.", "      expect(config.securityType).assertEqual(1);\n  ", "4567\",\n            \"securityType\": WifiSecurityType.", "\": \"12345678\",\n    \"securityType\": WifiSecurityType.", "                   \"securityType: \" + result[j].secu", " true,\n            \"securityType\": WifiSecurityType.", "      expect(config.securityType).assertEqual(3);\n  ", "rtEqual(configs1[0].securityType == wifiDeviceConfig", "false,\n            \"securityType\": WifiSecurityType.", "5678\",\n            \"securityType\": WifiSecurityType."], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HotspotConfig", "api_method_name": "band", "api_method_all": "band: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 6, "api_used": "\u662f", "lines": ["i_test] set invalid band hotspot config  res", "2356\",\n            \"band\": 1,\n            \"p", "3567\",\n            \"band\": 1,\n            \"p", "d:\"+ result.bssid +\"band: \" + result.band+\n ", "d\": \"testWgr\",\n    \"band\": 1,\n    \"preShared", "TEST\",\n            \"band\": 1,\n            \"p", "band: \" + result[j].band + \n                ", "tWgr\",\n            \"band\": 1,\n            \"p", "t123\",\n            \"band\": 1,\n            \"p", "\": \"\",\n            \"band\": 1,\n            \"p", "+ result[j].rssi + \"band: \" + result[j].band", "lt)).assertContain('band');\n                ", "tWgr\",\n            \"band\": 21,\n            \"", "tWgr\",\n            \"band\": 2,\n            \"p", "pect(hotspotConfig5.band).assertEqual(2);\n  ", "&*\uff08 \",\n            \"band\": 1,\n            \"p", " +\"band: \" + result.band+\n                \"i", "xpect(hotspotConfig.band).assertEqual(1);\n  "], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HotspotConfig", "api_method_name": "preSharedKey", "api_method_all": "preSharedKey: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 64, "since": 0, "api_used": "\u662f", "lines": ["[wifi_test] set max preSharedKey valid hotspot confi", "= wifiDeviceConfigZ.preSharedKey);\n\n                ", "      console.info(\"preSharedKey: \" + config.preShar", "\": 21,\n            \"preSharedKey\": \"12345678\",\n     ", "    \"band\": 1,\n    \"preSharedKey\": \"12345678\",\n    \"", "      expect(config.preSharedKey.length).assertEqual", "d\": 1,\n            \"preSharedKey\": \"1234567891234567", "d\": 1,\n            \"preSharedKey\": \"12345678\",\n     ", "     expect(config1.preSharedKey.length).assertEqual", "ertEqual(configs[0].preSharedKey == wifiDeviceConfig", "\": \"\",\n            \"preSharedKey\": \"12345678\",\n     ", "aredKey: \" + config.preSharedKey);\n        expect(co", "= wifiDeviceConfigK.preSharedKey);\n\n                ", "pect(hotspotConfigS.preSharedKey.length).assertEqual", "= wifiDeviceConfig1.preSharedKey);\n                e", "  wifiDeviceConfigU.preSharedKey = \"1234567890\";\n   ", "\": \"\",\n            \"preSharedKey\": \"123456789\",\n    ", "test] set a invalid preSharedKey hotspot config  res", "= wifiDeviceConfigU.preSharedKey);\n\n                ", "\": \"\",\n            \"preSharedKey\": \"\",\n            \"", "fi_test] set a open preSharedKey hotspot config  res", "d\": 2,\n            \"preSharedKey\": \"12345678\",\n     ", "d\": 1,\n            \"preSharedKey\": \"123456789\",\n    ", "d\": 1,\n            \"preSharedKey\": \"1234567\",\n      ", "rtEqual(configs1[1].preSharedKey == wifiDeviceConfig", "\": \"\",\n            \"preSharedKey\": \"ABCDEF1234\",\n   ", "d\": 1,\n            \"preSharedKey\": \"\",\n            \"", "ifi_test] set a psk preSharedKey hotspot config resu"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HotspotConfig", "api_method_name": "maxConn", "api_method_all": "maxConn: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 23, "since": 0, "api_used": "\u662f", "lines": ["E_PSK,\n            \"maxConn\": 8\n        };\n    ", "     expect(config1.maxConn).assertEqual(8);\n  ", "ifi_test] set  more maxConn invalid hotspot con", "E_WEP,\n            \"maxConn\": 8\n        };\n    ", "      expect(config.maxConn).assertEqual(8);\n\n ", "_OPEN,\n            \"maxConn\": 8\n        }\n     ", "E_SAE,\n            \"maxConn\": 8\n        };\n    ", "E_PSK,\n            \"maxConn\": 8\n        }\n     ", "e\":12,\n            \"maxConn\": 8\n        };\n    ", "og(\"[wifi_test] set maxConn valid hotspot confi", "_SEC_TYPE_PSK,\n    \"maxConn\": 8\n}\n\ndescribe('AC", "E_PSK,\n            \"maxConn\": 9\n        };\n    "], "files": ["WifiSoftAP.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StationInfo", "api_method_all": "interface StationInfo {\n        \n        name: string;\n\n        \n        macAddress: string;\n\n        \n        ipAddress: string;\n    }", "api_method_name": "StationInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "StationInfo", "api_method_name": "name", "api_method_all": "name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 232, "since": 6, "api_used": "\u662f", "lines": ["AME_0001\n     * @tc.name testGetRemoteDevice", "_js] BLE get device name promise start');\n  ", "(true).assertTrue(Btname.LETTERS_TEST == JSO", "=' + JSON.stringify(name));\n        expect(n", "DEV_0001\n     * @tc.name testCancelPairedDev", "(true).assertTrue(Btname.CHINESES_TEST == JS", "RCT_0001\n     * @tc.name testDisConnect\n    ", "(true).assertTrue(Btname.NUM_TEST == JSON.st", "T1);\n        expect(name).assertTrue();\n    ", "ST);\n        expect(name).assertTrue();\n    ", "etooth_js] set localname start');\n        aw", "leBt();\n        let name = bluetooth.setLoca", "ooth.setLocalName(Btname.LETTERS_TEST);\n    ", "AME_0002\n     * @tc.name testsetLocalName\n  ", "ooth.setLocalName(Btname.NUM_TEST);\n        ", "'');\n        expect(name).assertFalse();\n   ", "ICE_0001\n     * @tc.name testAddService\n    ", "ICE_0001\n     * @tc.name testRemoveService\n ", "e));\n        expect(name).assertNull();\n    ", "AME_0006\n     * @tc.name testsetLocalName\n  ", "sertTrue(localName==name);\n        console.i", "Name();\n        let name = bluetooth.setLoca", "GED_0001\n     * @tc.name testNotifyCharacter", "ON.stringify(err) +'name1' + JSON.stringify(", "luetooth_js] device name err1 ' + JSON.strin", "AME_0005\n     * @tc.name testsetLocalName\n  ", "OSE_0001\n     * @tc.name testBlePeripheralMa", "ooth.setLocalName(Btname.CHINESES_TEST);\n   ", "IZE_0001\n     * @tc.name testSetBLEMtuSize\n ", "GED_0001\n     * @tc.name testSetNotifyCharac", "= '+ JSON.stringify(name));\n        expect(n", "unit/index'\n\n\nlet Btname = {\n    NUM_TEST :'", "NSE_0001\n     * @tc.name testSendResponse\n  ", "AME_0001\n     * @tc.name testsetLocalName\n  ", "ASS_0001\n     * @tc.name testGetRemoteDevice", "state);\n        let name = bluetooth.setLoca", "ooth.setLocalName(Btname.NUM_TEST1);\n       ", "(true).assertTrue(Btname.NUM_TEST1 == JSON.s", "luetooth_js] device name' + JSON.stringify(d", "AME_0007\n     * @tc.name testsetLocalName\n  ", "OSE_0001\n     * @tc.name testGattClientClose", "AME_0003\n     * @tc.name testsetLocalName\n  ", "AME_0004\n     * @tc.name testsetLocalName\n  ", "e));\n        expect(name).assertEqual(true);"], "files": ["RpcJsunit.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StationInfo", "api_method_name": "macAddress", "api_method_all": "macAddress: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["Address: \" + result.macAddress + \"ipAddress: \" + r", "r+\n                \"macAddress: \" + result.macAddr", "fo.name +\n         \"macAddress: \" + stationInfo.ma", "ss: \" + stationInfo.macAddress + \n        \"ipAddre"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StationInfo", "api_method_name": "ipAddress", "api_method_all": "ipAddress: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 25, "since": 7, "api_used": "\u662f", "lines": ["ss: \" + stationInfo.ipAddress);\n        expect(st", "+ ipInfo.gateway + \"ipAddress: \" + ipInfo.ipAddre", "Address + \n        \"ipAddress: \" + stationInfo.ip", "Address: \" + result.ipAddress + \n                ", "t ipConfig = {\n    \"ipAddress\": 1284752956,\n    \"", "      \"staticIp\": {\"ipAddress\": 1284752956,\"gatew", "Address: \" + ipInfo.ipAddress\n         + \"leaseDu", "esult.macAddress + \"ipAddress: \" + result.ipAddre"], "files": ["WifiSoftAP.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpType", "api_method_all": "enum IpType {\n        \n        STATIC,\n\n        \n        DHCP,\n\n        \n        UNKNOWN,\n    }", "api_method_name": "IpType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["          \"ipType\": IpType.DHCP,\n            \"", "s\": [\"aaa\"],\n}\n\nlet IpType = {\n    STATIC : 0,"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpType", "api_method_name": "STATIC", "api_method_all": "STATIC,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["\nlet IpType = {\n    STATIC : 0,\n    DHCP : 1,\n"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpType", "api_method_name": "DHCP", "api_method_all": "DHCP,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["   \"ipType\": IpType.DHCP,\n            \"creat", "    STATIC : 0,\n    DHCP : 1,\n    UNKNOWN: 2"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IpType", "api_method_name": "UNKNOWN", "api_method_all": "UNKNOWN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ISCONNECTED: 6,\n    UNKNOWN: 7,\n}\n\nlet ipConfig", ",\n    DHCP : 1,\n    UNKNOWN: 2\n}\n\ndescribe('ACT"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_all": "export enum SuppState {\n        \n        DISCONNECTED,\n\n        \n        INTERFACE_DISABLED,\n\n        \n        INACTIVE,\n\n        \n        SCANNING,\n\n        \n        AUTHENTICATING,\n\n        \n        ASSOCIATING,\n\n        \n        ASSOCIATED,\n\n        \n        FOUR_WAY_HANDSHAKE,\n\n        \n        GROUP_HANDSHAKE,\n\n        \n        COMPLETED,\n\n        \n        UNINITIALIZED,\n\n        \n        INVALID\n    }", "api_method_name": "SuppState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["TYPE_SAE: 4,\n}\n\nlet SuppState = {\n    DISCONNECTE"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "DISCONNECTED", "api_method_all": "DISCONNECTED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["nnectionState.STATE_DISCONNECTED);\n        expect(tr", "ate = {\n            DISCONNECTED :0,\n            CON", "t SuppState = {\n    DISCONNECTED: 0,\n    INTERFACE_D", "SCONNECTING: 5,\n    DISCONNECTED: 6,\n    UNKNOWN: 7,"], "files": ["WifiSta.test.js", "WifiP2P.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "INTERFACE_DISABLED", "api_method_all": "INTERFACE_DISABLED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["ISCONNECTED: 0,\n    INTERFACE_DISABLED: 1,\n    INACTIVE : "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "INACTIVE", "api_method_all": "INACTIVE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["CE_DISABLED: 1,\n    INACTIVE : 2,\n    SCANNING: "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "SCANNING", "api_method_all": "SCANNING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t ConnState = {\n    SCANNING: 0,\n    CONNECTING:", "  INACTIVE : 2,\n    SCANNING: 3,\n    AUTHENTICAT"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "AUTHENTICATING", "api_method_all": "AUTHENTICATING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [" CONNECTING: 1,\n    AUTHENTICATING: 2,\n    OBTAINING_I", "   SCANNING: 3,\n    AUTHENTICATING: 4,\n    ASSOCIATING"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "ASSOCIATING", "api_method_all": "ASSOCIATING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["HENTICATING: 4,\n    ASSOCIATING: 5,\n    ASSOCIATED:"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "ASSOCIATED", "api_method_all": "ASSOCIATED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["ASSOCIATING: 5,\n    ASSOCIATED: 6,\n    FOUR_WAY_HA"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "FOUR_WAY_HANDSHAKE", "api_method_all": "FOUR_WAY_HANDSHAKE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": [" ASSOCIATED: 6,\n    FOUR_WAY_HANDSHAKE: 7,\n    GROUP_HANDS"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "GROUP_HANDSHAKE", "api_method_all": "GROUP_HANDSHAKE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["Y_HANDSHAKE: 7,\n    GROUP_HANDSHAKE: 8,\n    COMPLETED: "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "COMPLETED", "api_method_all": "COMPLETED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["P_HANDSHAKE: 8,\n    COMPLETED: 9,\n    UNINITIALIZ"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SuppState", "api_method_name": "UNINITIALIZED", "api_method_all": "UNINITIALIZED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["  COMPLETED: 9,\n    UNINITIALIZED: 10,\n    INVALID: 1"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnState", "api_method_all": "export enum ConnState {\n        \n        SCANNING,\n\n        \n        CONNECTING,\n\n        \n        AUTHENTICATING,\n\n        \n        OBTAINING_IPADDR,\n\n        \n        CONNECTED,\n\n        \n        DISCONNECTING,\n\n        \n        DISCONNECTED,\n\n        \n        UNKNOWN\n    }", "api_method_name": "ConnState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["INVALID: 11,\n}\n\nlet ConnState = {\n    SCANNING: 0"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnState", "api_method_name": "SCANNING", "api_method_all": "SCANNING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t ConnState = {\n    SCANNING: 0,\n    CONNECTING:", "  INACTIVE : 2,\n    SCANNING: 3,\n    AUTHENTICAT"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnState", "api_method_name": "CONNECTING", "api_method_all": "CONNECTING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["ctionState.STATE_DISCONNECTING!= connState );\n    ", "ONNECTED: 4,\n    DISCONNECTING: 5,\n    DISCONNECTE", "   SCANNING: 0,\n    CONNECTING: 1,\n    AUTHENTICAT", "nnectionState.STATE_CONNECTING!= connState );\n    "], "files": ["WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnState", "api_method_name": "AUTHENTICATING", "api_method_all": "AUTHENTICATING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [" CONNECTING: 1,\n    AUTHENTICATING: 2,\n    OBTAINING_I", "   SCANNING: 3,\n    AUTHENTICATING: 4,\n    ASSOCIATING"], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnState", "api_method_name": "OBTAINING_IPADDR", "api_method_all": "OBTAINING_IPADDR,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["HENTICATING: 2,\n    OBTAINING_IPADDR: 3,\n    CONNECTED: "], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnState", "api_method_name": "CONNECTED", "api_method_all": "CONNECTED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["nnectionState.STATE_CONNECTED!= connState );\n    ", "ctionState.STATE_DISCONNECTED);\n        expect(tr", "NING_IPADDR: 3,\n    CONNECTED: 4,\n    DISCONNECTI", "tus = {\n            CONNECTED : 0,\n            IN", "NNECTING: 5,\n    DISCONNECTED: 6,\n    UNKNOWN: 7,", "TED :0,\n            CONNECTED : 1,\n        };\n   ", "e ==P2pConnectState.CONNECTED);\n        });\n     ", "s ==P2pDeviceStatus.CONNECTED){\n                 ", "ON_bluetoothble_GET_CONNECTED_BLEDEVICES_0001', 0", " = {\n            DISCONNECTED :0,\n            CON", "uppState = {\n    DISCONNECTED: 0,\n    INTERFACE_D"], "files": ["WifiSta.test.js", "WifiP2P.test.js", "BluetoothBle.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnState", "api_method_name": "DISCONNECTING", "api_method_all": "DISCONNECTING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["  CONNECTED: 4,\n    DISCONNECTING: 5,\n    DISCONNECTE", "nnectionState.STATE_DISCONNECTING!= connState );\n    "], "files": ["WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnState", "api_method_name": "DISCONNECTED", "api_method_all": "DISCONNECTED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["nnectionState.STATE_DISCONNECTED);\n        expect(tr", "ate = {\n            DISCONNECTED :0,\n            CON", "t SuppState = {\n    DISCONNECTED: 0,\n    INTERFACE_D", "SCONNECTING: 5,\n    DISCONNECTED: 6,\n    UNKNOWN: 7,"], "files": ["WifiSta.test.js", "WifiP2P.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pDevice", "api_method_all": "interface WifiP2pDevice {\n        \n        deviceName: string;\n\n        \n        deviceAddress: string;\n\n        \n        primaryDeviceType: string;\n\n        \n        deviceStatus: P2pDeviceStatus;\n\n        \n        groupCapabilitys: number;\n    }", "api_method_name": "WifiP2pDevice", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pDevice", "api_method_name": "deviceName", "api_method_all": "deviceName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": [" + result.ownerInfo.deviceName + \n                ", "Name: \" + result[j].deviceName + \n                ", "+ \n                \"deviceName: \" + result.ownerIn", "        if (data[i].deviceName === \"GRE\") {\n      ", "      console.info(\"deviceName: \" + result[j].devi"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pDevice", "api_method_name": "deviceAddress", "api_method_all": "deviceAddress: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["ig3 = {\n            deviceAddress : \"00:00:00:00:00:0", " {\n                \"deviceAddress\" : \"02:11:65:f2:0d:", "ig2 = {\n            deviceAddress : \"00:00:00:00:00:0", "                   \"deviceAddress\":data[i].deviceAddr", " + result.ownerInfo.deviceAddress +\n                \"", "                   \"deviceAddress: \" + result[j].devi", "ress: \" + result[j].deviceAddress + \n                ", "ect: -> \" + data[i].deviceAddress);\n                 ", "iceAddress\":data[i].deviceAddress,\n                  ", "fig = {\n            deviceAddress : \"00:00:00:00:00:0", "+ \n                \"deviceAddress: \" + result.ownerIn"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pDevice", "api_method_name": "primaryDeviceType", "api_method_all": "primaryDeviceType: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["Type: \" + result[j].primaryDeviceType + \n                ", " +\n                \"primaryDeviceType: \" + result.ownerIn", " + result.ownerInfo.primaryDeviceType + \n                ", "                   \"primaryDeviceType: \" + result[j].prim"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pDevice", "api_method_name": "deviceStatus", "api_method_all": "deviceStatus: P2pDeviceStatus", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": ["+ \n                \"deviceStatus: \" + result.ownerIn", "       if(result[j].deviceStatus ==P2pDeviceStatus.C", "       if(result[j].deviceStatus ==P2pDeviceStatus.A", " + result.ownerInfo.deviceStatus + \n                ", "      console.info(\"deviceStatus: \" + result[j].devi", "atus: \" + result[j].deviceStatus +\n                 ", "       if(result[j].deviceStatus ==P2pDeviceStatus.F", "       if(result[j].deviceStatus ==P2pDeviceStatus.I", "atus: \" + result[j].deviceStatus);\n                }", "       if(result[j].deviceStatus ==P2pDeviceStatus.U", "                   \"deviceStatus: \" + result[j].devi"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pDevice", "api_method_name": "groupCapabilitys", "api_method_all": "groupCapabilitys: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["                   \"groupCapabilitys: \" + result[j].grou", "+ \n                \"groupCapabilitys: \" + result.ownerIn", " + result.ownerInfo.groupCapabilitys + \n                ", "itys: \" + result[j].groupCapabilitys );\n                "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2PConfig", "api_method_all": "interface WifiP2PConfig {\n        \n        deviceAddress: string;\n\n        \n        netId: number;\n\n        \n        passphrase: string;\n\n        \n        groupName: string;\n\n        \n        goBand: GroupOwnerBand;\n    }", "api_method_name": "WifiP2PConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": [" = wifi.createGroup(WifiP2PConfig);\n        await sle", "Wifi();\n        let WifiP2PConfig2 = {\n            de", "g = wifi.p2pConnect(WifiP2PConfig3);\n        console.", " = wifi.createGroup(WifiP2PConfig2);\n        await sl", "Wifi();\n        let WifiP2PConfig = {\n            dev", "Wifi();\n        let WifiP2PConfig3 = {\n            de"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2PConfig", "api_method_name": "deviceAddress", "api_method_all": "deviceAddress: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["ig3 = {\n            deviceAddress : \"00:00:00:00:00:0", " {\n                \"deviceAddress\" : \"02:11:65:f2:0d:", "ig2 = {\n            deviceAddress : \"00:00:00:00:00:0", "                   \"deviceAddress\":data[i].deviceAddr", " + result.ownerInfo.deviceAddress +\n                \"", "                   \"deviceAddress: \" + result[j].devi", "ress: \" + result[j].deviceAddress + \n                ", "ect: -> \" + data[i].deviceAddress);\n                 ", "iceAddress\":data[i].deviceAddress,\n                  ", "fig = {\n            deviceAddress : \"00:00:00:00:00:0", "+ \n                \"deviceAddress: \" + result.ownerIn"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2PConfig", "api_method_name": "netId", "api_method_all": "netId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 26, "since": 7, "api_used": "\u662f", "lines": ["00:00\",\n            netId : -1,\n            p", "E_WEP,\n            \"netId\": -1,\n            \"", "E_PSK,\n            \"netId\": -1,\n            \"", "                   \"netId\":-1,\n              ", "\",\n                \"netId\":-2,\n              ", "_OPEN,\n            \"netId\": -1,\n            \"", "00:00\",\n            netId : -2,\n            p"], "files": ["WifiP2P.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2PConfig", "api_method_name": "passphrase", "api_method_all": "passphrase: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["                   \"passphrase\":\"\",\n              ", "+ \n                \"passphrase: \" + result.passphr", "d : -1,\n            passphrase : \"12345678\",\n     ", "sphrase: \" + result.passphrase + \"interface: \"+ re", "d : -2,\n            passphrase : \"12345678\",\n     ", "2,\n                \"passphrase\":\"\",\n              "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2PConfig", "api_method_name": "groupName", "api_method_all": "groupName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["\",\n                \"groupName\":\"\",\n              ", "45678\",\n            groupName : \"AAAZZZ\",\n       ", "                   \"groupName\":\"\",\n              ", "oupName: \" + result.groupName + \n                ", "\n                + \"groupName: \" + result.groupNa"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2PConfig", "api_method_name": "goBand", "api_method_all": "goBand: GroupOwnerBand", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["AAZZZ\",\n            goBand : 0\n        };\n\n   ", "AAZZZ\",\n            goBand : 0\n        };\n    ", "AAZZZ\",\n            goBand : 1\n        };\n\n   ", "\",\n                \"goBand\":0,\n            };\n", "                   \"goBand\":0,\n               "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pGroupInfo", "api_method_all": "interface WifiP2pGroupInfo {\n        \n        isP2pGo: boolean;\n\n        \n        ownerInfo: WifiP2pDevice;\n\n        \n        passphrase: string;\n\n        \n        interface: string;\n\n        \n        groupName: string;\n\n        \n        networkId: number;\n\n        \n        frequency: number;\n\n        \n        clientDevices: WifiP2pDevice[];\n\n        \n        goIpAddress: string;\n    }", "api_method_name": "WifiP2pGroupInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pGroupInfo", "api_method_name": "isP2pGo", "api_method_all": "isP2pGo: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["isP2pGo: \" + result.isP2pGo + \n                ", "      console.info(\"isP2pGo: \" + result.isP2pGo"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pGroupInfo", "api_method_name": "ownerInfo", "api_method_all": "ownerInfo: WifiP2pDevice", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["iceType: \" + result.ownerInfo.primaryDeviceType +", "iceName: \" + result.ownerInfo.deviceName + \n     ", "eStatus: \" + result.ownerInfo.deviceStatus + \n   ", "Address: \" + result.ownerInfo.deviceAddress +\n   ", "bilitys: \" + result.ownerInfo.groupCapabilitys + "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pGroupInfo", "api_method_name": "passphrase", "api_method_all": "passphrase: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["                   \"passphrase\":\"\",\n              ", "+ \n                \"passphrase: \" + result.passphr", "d : -1,\n            passphrase : \"12345678\",\n     ", "sphrase: \" + result.passphrase + \"interface: \"+ re", "d : -2,\n            passphrase : \"12345678\",\n     ", "2,\n                \"passphrase\":\"\",\n              "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pGroupInfo", "api_method_name": "interface", "api_method_all": "interface: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 70, "since": 6, "api_used": "\u662f", "lines": ["ll the writeboolean interface to write the data t", "tc.name    Writeint interface, illegal value veri", "c.name    Mapashmem interface creates shared file", "preadandwriteashmem interface creates a shared fi", "c.name    Writebyte interface, illegal value veri", "e writesequenceable interface to write the custom", "ame    Writeboolean interface, illegal value veri", "name    Writestring interface, illegal value veri", "tc.name    Setflags interface outlier detection\n ", "c.name    Writelong interface, boundary value ver", "  Call the parallel interface to read and write d", "c.name    Writechar interface, illegal value veri", " Call the writebyte interface to write data to th", "tesequenceablearray interface to write the custom", "the writeshortarray interface, write the short in", "Call the writefloat interface to write data to th", "  The writetoashmem interface writes the shared f", "l the getashmemsize interface to get the size of ", "n from writerawdata interface\n     * @tc.desc    ", "c.name    Writebyte interface, boundary value ver", "c.name    Writelong interface, illegal value veri", "name    Writedouble interface, boundary value ver", "name    Writedouble interface, illegal value vali", "e writeremoteobject interface to serialize the re", "scriptor to get the interface description\n     * ", "r to get the object interface description\n     * ", "    Writeshortarray interface, boundary value ver", "l sendrequestresult interface to send data\n     *", ".name    Writefloat interface, boundary value ver", "all the writestring interface to write the data t", "  Mapreadonlyashmem interface creates a shared fi", "teremoteobjectarray interface to write the object", "   * @tc.name    Getinterfacedescriptor to get th", " Call the writechar interface to write the data t", "c.name    Querylocalinterface searches for object", "tc.name    Writeint interface, boundary value ver", "f the flushcommands interface\n     * @tc.desc    ", ".name    Writefloat interface, illegal value vali", "e    Call writelong interface to write long integ", "  Call the writeint interface to write the data t"], "files": ["WifiP2P.test.js", "RpcJsunit.test.js", "RpcClientJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pGroupInfo", "api_method_name": "groupName", "api_method_all": "groupName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["\",\n                \"groupName\":\"\",\n              ", "45678\",\n            groupName : \"AAAZZZ\",\n       ", "                   \"groupName\":\"\",\n              ", "oupName: \" + result.groupName + \n                ", "\n                + \"groupName: \" + result.groupNa"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pGroupInfo", "api_method_name": "networkId", "api_method_all": "networkId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 6, "api_used": "\u662f", "lines": ["ult.clientDevices +\"networkId: \" + result.network", "tworkId: \" + result.networkId \n                 +", "ersistentGroup(data.networkId);\n            expec"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pGroupInfo", "api_method_name": "frequency", "api_method_all": "frequency: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["equency: \" + result.frequency + \"goIpAddress: \" +", "                 + \"frequency: \" + result.frequen", "ency: \" + result[j].frequency +\n                 ", "result.linkSpeed + \"frequency:\" \n                ", "                   \"frequency: \" + result[j].freq", "           + result.frequency +\"snr:\" + result.sn"], "files": ["WifiP2P.test.js", "WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pGroupInfo", "api_method_name": "clientDevices", "api_method_all": "clientDevices: WifiP2pDevice[]", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["+ \n                \"clientDevices: \" + result.clientD", "Devices: \" + result.clientDevices +\"networkId: \" + re"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pGroupInfo", "api_method_name": "goIpAddress", "api_method_all": "goIpAddress: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["Address: \" + result.goIpAddress);\n                l", "result.frequency + \"goIpAddress: \" + result.goIpAdd"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "P2pConnectState", "api_method_all": "enum P2pConnectState {\n        DISCONNECTED = 0,\n        CONNECTED = 1,\n    }", "api_method_name": "P2pConnectState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["Wifi();\n        let P2pConnectState = {\n            DIS", "sult.connectState ==P2pConnectState.CONNECTED);\n       "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "P2pConnectState", "api_method_name": "DISCONNECTED", "api_method_all": "DISCONNECTED = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["nnectionState.STATE_DISCONNECTED);\n        expect(tr", "ate = {\n            DISCONNECTED :0,\n            CON", "t SuppState = {\n    DISCONNECTED: 0,\n    INTERFACE_D", "SCONNECTING: 5,\n    DISCONNECTED: 6,\n    UNKNOWN: 7,"], "files": ["WifiSta.test.js", "WifiP2P.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "P2pConnectState", "api_method_name": "CONNECTED", "api_method_all": "CONNECTED = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["nnectionState.STATE_CONNECTED!= connState );\n    ", "ctionState.STATE_DISCONNECTED);\n        expect(tr", "NING_IPADDR: 3,\n    CONNECTED: 4,\n    DISCONNECTI", "tus = {\n            CONNECTED : 0,\n            IN", "NNECTING: 5,\n    DISCONNECTED: 6,\n    UNKNOWN: 7,", "TED :0,\n            CONNECTED : 1,\n        };\n   ", "e ==P2pConnectState.CONNECTED);\n        });\n     ", "s ==P2pDeviceStatus.CONNECTED){\n                 ", "ON_bluetoothble_GET_CONNECTED_BLEDEVICES_0001', 0", " = {\n            DISCONNECTED :0,\n            CON", "uppState = {\n    DISCONNECTED: 0,\n    INTERFACE_D"], "files": ["WifiSta.test.js", "WifiP2P.test.js", "BluetoothBle.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pLinkedInfo", "api_method_all": "interface WifiP2pLinkedInfo {\n        \n        connectState: P2pConnectState;\n\n        \n        isGroupOwner: boolean;\n\n        \n        groupOwnerAddr: string;\n    }", "api_method_name": "WifiP2pLinkedInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pLinkedInfo", "api_method_name": "connectState", "api_method_all": "connectState: P2pConnectState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": [".assertEqual(result.connectState ==P2pConnectState.C", "ctState: \" + result.connectState + \n                ", "wait gattServer.on('connectStateChange', function (d", "      console.info(\"connectState: \" + result.connect", "ait gattServer.off('connectStateChange', function (d", "nfo(\"[bluetooth_js] connectStateChange_off Data:\" + "], "files": ["WifiP2P.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pLinkedInfo", "api_method_name": "isGroupOwner", "api_method_all": "isGroupOwner: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [" \n                 \"isGroupOwner: \" + result.isGroup", "upOwner: \" + result.isGroupOwner + \n              \"g"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WifiP2pLinkedInfo", "api_method_name": "groupOwnerAddr", "api_method_all": "groupOwnerAddr: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["nerAddr: \" + result.groupOwnerAddr);\n            expec", "r + \n              \"groupOwnerAddr: \" + result.groupOw"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "P2pDeviceStatus", "api_method_all": "enum P2pDeviceStatus {\n        CONNECTED = 0,\n        INVITED = 1,\n        FAILED = 2,\n        AVAILABLE = 3,\n        UNAVAILABLE = 4,\n    }", "api_method_name": "P2pDeviceStatus", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["t[j].deviceStatus ==P2pDeviceStatus.UNAVAILABLE){\n     ", "t[j].deviceStatus ==P2pDeviceStatus.INVITED){\n         ", "t[j].deviceStatus ==P2pDeviceStatus.CONNECTED){\n       ", "Wifi();\n        let P2pDeviceStatus = {\n            CON", "t[j].deviceStatus ==P2pDeviceStatus.FAILED){\n          ", "t[j].deviceStatus ==P2pDeviceStatus.AVAILABLE){\n       "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "P2pDeviceStatus", "api_method_name": "CONNECTED", "api_method_all": "CONNECTED = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["nnectionState.STATE_CONNECTED!= connState );\n    ", "ctionState.STATE_DISCONNECTED);\n        expect(tr", "NING_IPADDR: 3,\n    CONNECTED: 4,\n    DISCONNECTI", "tus = {\n            CONNECTED : 0,\n            IN", "NNECTING: 5,\n    DISCONNECTED: 6,\n    UNKNOWN: 7,", "TED :0,\n            CONNECTED : 1,\n        };\n   ", "e ==P2pConnectState.CONNECTED);\n        });\n     ", "s ==P2pDeviceStatus.CONNECTED){\n                 ", "ON_bluetoothble_GET_CONNECTED_BLEDEVICES_0001', 0", " = {\n            DISCONNECTED :0,\n            CON", "uppState = {\n    DISCONNECTED: 0,\n    INTERFACE_D"], "files": ["WifiSta.test.js", "WifiP2P.test.js", "BluetoothBle.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "P2pDeviceStatus", "api_method_name": "INVITED", "api_method_all": "INVITED = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["ED : 0,\n            INVITED : 1,\n            FA", "s ==P2pDeviceStatus.INVITED){\n                 "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "P2pDeviceStatus", "api_method_name": "FAILED", "api_method_all": "FAILED = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["s ==P2pDeviceStatus.FAILED){\n                 ", "ED : 1,\n            FAILED : 2,\n            AV"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "P2pDeviceStatus", "api_method_name": "AVAILABLE", "api_method_all": "AVAILABLE = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["s ==P2pDeviceStatus.AVAILABLE){\n                 ", ",\n    NETWORK_FULLY_AVAILABLE : 0x0300,\n    NETWO", "==P2pDeviceStatus.UNAVAILABLE){\n                 ", "ED : 2,\n            AVAILABLE : 3,\n            UN", " : 3,\n            UNAVAILABLE : 4,\n        };\n   "], "files": ["WifiP2P.test.js", "BluetoothOn.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "P2pDeviceStatus", "api_method_name": "UNAVAILABLE", "api_method_all": "UNAVAILABLE = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["LE : 3,\n            UNAVAILABLE : 4,\n        };\n   ", "s ==P2pDeviceStatus.UNAVAILABLE){\n                 "], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GroupOwnerBand", "api_method_all": "enum GroupOwnerBand {\n        GO_BAND_AUTO = 0,\n        GO_BAND_2GHZ = 1,\n        GO_BAND_5GHZ = 2,\n    }", "api_method_name": "GroupOwnerBand", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["fiActive());\n}\n\nlet GroupOwnerBand = {\n    GO_BAND_AUT"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GroupOwnerBand", "api_method_name": "GO_BAND_AUTO", "api_method_all": "GO_BAND_AUTO = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["upOwnerBand = {\n    GO_BAND_AUTO : 0,\n    GO_BAND_2G"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GroupOwnerBand", "api_method_name": "GO_BAND_2GHZ", "api_method_all": "GO_BAND_2GHZ = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["_BAND_AUTO : 0,\n    GO_BAND_2GHZ : 1,\n    GO_BAND_5G"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GroupOwnerBand", "api_method_name": "GO_BAND_5GHZ", "api_method_all": "GO_BAND_5GHZ = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["_BAND_2GHZ : 1,\n    GO_BAND_5GHZ : 2,\n}\n\ndescribe('A"], "files": ["WifiP2P.test.js"], "is_white": " ", "desc": " "}]}