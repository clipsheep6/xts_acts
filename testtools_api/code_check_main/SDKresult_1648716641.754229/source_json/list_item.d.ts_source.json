{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\list_item", "api": [{"api_class_name": "Sticky", "api_method_all": "declare enum Sticky {\n  \n  None,\n\n  \n  Normal,\n\n  \n  Opacity,\n}", "api_method_name": "Sticky", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["\n          }.sticky(Sticky.Normal)\n          .", "          \"sticky\": Sticky.None\n          }\n  ", "ticky).assertEqual('Sticky.Normal')\n      expe", "ticky).assertEqual('Sticky.None')\n      expect", "ticky).assertEqual('Sticky.Opacity')\n      exp", "ticky).assertEqual('Sticky.Normal');\n      con", "\n          }.sticky(Sticky.Opacity)\n          ", "\n          }.sticky(Sticky.None)\n          .ed", "ticky).assertEqual('Sticky.None');\n      conso", "te sticky: Sticky = Sticky.Normal;\n  @State ed", "e;\n  @State sticky: Sticky = Sticky.Normal;\n  "], "files": ["ListItem.ets", "listItem.ets", "ListItemJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Sticky", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Sticky", "api_method_name": "Normal", "api_method_all": "Normal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 102, "since": 7, "api_used": "\u662f", "lines": ["ntStyle\": FontStyle.Normal\n          }\n       ", "assertEqual('Sticky.Normal');\n      console.in", ") {\n        Text(\"3.Normal\")\n      }.type(Butt", "ertEqual('FontStyle.Normal');\n      done();\n  ", "putType = InputType.Normal;\n  @State fontSize:", "rtEqual('FontWeight.Normal');\n      done();\n  ", "sertEqual(\"TextCase.Normal\")\n      expect(obj.", "rtEqual('ButtonType.Normal')\n      console.inf", "       Text('sticky:Normal , item2222')\n      ", "       Text('sticky:Normal , click me edit lis", "ky: Sticky = Sticky.Normal;\n  @State editMode:", "emState = ItemState.Normal\n\n  build() {\n    St", "sertEqual('TextCase.Normal');\n      done();\n  ", "    Text('Orange 18 Normal source-sans-pro tex", "Waiting ? ItemState.Normal : ItemState.Waiting", "PlayMode = PlayMode.Normal\n\n  onPageShow() {\n ", "fontStyle(FontStyle.Normal)\n        .fontColor", " .textCase(TextCase.Normal)\n            .fontC", "emState = ItemState.Normal\n  @State secondStat", "  }.type(ButtonType.Normal)\n      .backgroundC", "te.Skip ? ItemState.Normal : ItemState.Skip\n  ", "emState = ItemState.Normal\n  @State disabled: ", "onType = ButtonType.Normal;\n  @State fontSizeV", "', style: FontStyle.Normal }\n  @State fontColo", "rtEqual(\"FontWeight.Normal\")\n      expect(obj.", "fontStyle(FontStyle.Normal)\n        .fontWeigh", "', style: FontStyle.Normal })\n        .key('se", "PlayMode = PlayMode.Normal\n\n  build() {\n    Fl", " { type: ButtonType.Normal })\n            .bac", "ntWeight(FontWeight.Normal)\n        .textAlign", "rtEqual('ButtonType.Normal');\n      done();\n  ", "sertEqual('TextCase.Normal')\n      expect(obj.", " TextCase= TextCase.Normal\n  @State fontSizeVa", "', style: FontStyle.Normal })\n        .selecte", "   style: FontStyle.Normal\n        })\n        ", "r, style: FontStyle.Normal })\n        .itemSiz", "', style: FontStyle.Normal\n      };\n      try ", "    }.sticky(Sticky.Normal)\n          .editabl", "', style: FontStyle.Normal })\n        .optionF", " TextCase= TextCase.Normal\n  @State decoration"], "files": ["animate.ets", "Select.ets", "SelectJsunit.test.ets", "ListItemJsunit.test.ets", "Stepper.ets", "ListItem.ets", "playMode.ets", "Text.ets", "SpanJsunit.test.ets", "textStyle.ets", "ButtonJsunit.test.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "listItemProps.test.js", "TextStyleJsunit.test.ets", "TextArea.ets", "index.js", "Link.ets", "TextInputJsunit.test.ets", "stepper.ets", "select.ets", "textArea.ets", "textInput.ets", "listItem.ets", "Button.ets", "search.ets", "button.ets", "span.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Sticky", "api_method_name": "Opacity", "api_method_all": "Opacity,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 784, "since": 7, "api_used": "\u662f", "lines": ["(eventData.data.fillOpacity);\n      }\n      if ", ",\n            strokeOpacityPropTwo : this.strok", "= 4;\n  @State strokeOpacity: number = 1;\n  @Sta", "null,\n        strokeOpacityPropTwo : null,\n    ", "pect(obj.$attrs.fillOpacity).assertEqual('0.000", "ropOne : this.strokeOpacityPropOne,\n           ", "(eventData.data.fillOpacity != null) {\n        ", "pect(obj.$attrs.fillOpacity).assertEqual('nan')", "strokeWidth(10).fillOpacity(1)\n      .strokeLin", " {\n            \"fillOpacity\": \"aa12345\",\n      ", "       Text('sticky:Opacity , item4444')\n      ", " {\n            \"fillOpacity\": \"1\",\n          }\n", "    }.sticky(Sticky.Opacity)\n          .editabl", "ventData.data.strokeOpacity != null) {\n        ", " {\n        this.fillOpacity = parseInt(eventDat", "rokeWidth(10).strokeOpacity(0.5)\n      Shape() ", "yPropTwo : this.fillOpacityPropTwo,\n           ", "illOpacity(this.fillOpacity)\n      .mesh([], 1,", "tiAlias)\n      .fillOpacity(this.fillOpacity)\n ", "ne,\n            fillOpacityPropThree : this.fil", " {\n            \"fillOpacity\": \"-1\",\n          }", " {\n            \"fillOpacity\": \"aaaaaaa\",\n      ", ": null,\n        fillOpacityPropTwo : null,\n    ", "null,\n        strokeOpacityPropOne : null,\n    ", ": null,\n        fillOpacityPropThree : null,\n  ", "ropThree : this.fillOpacityPropThree,\n         ", "assertEqual('Sticky.Opacity')\n      expect(obj.", "ropTwo : this.strokeOpacityPropTwo,\n           ", "ventData.data.strokeOpacity);\n      }\n      if ", "eOpacity(this.strokeOpacity)\n      .strokeWidth", "yPropOne : this.fillOpacityPropOne,\n           ", "gify(obj.$attrs.fillOpacity));\n      expect(obj", "Limit)\n      .strokeOpacity(this.strokeOpacity)", "null,\n        strokeOpacityPropThree : null,\n  ", "       Text('sticky:Opacity , item3333')\n      ", "op,\n            fillOpacityPropTwo : this.fillO", " [20];\n  @State fillOpacity: number = 0;\n  @Sta", "wo,\n            fillOpacityPropOne : this.fillO", "pect(obj.$attrs.fillOpacity).assertEqual('1.000", "\n        this.strokeOpacity = parseInt(eventDat", "ct(obj.$attrs.strokeOpacity).assertEqual('1.000", ": null,\n        fillOpacityPropOne : null,\n    ", ",\n            strokeOpacityPropOne : this.strok"], "files": ["Shape.ets", "tspanProps.test.js", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "ListItemJsunit.test.ets", "circleProps.test.js", "polylineProps.test.js", "ListItem.ets", "svgTextProps.test.js", "textPathProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "listItemProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EditMode", "api_method_all": "declare enum EditMode {\n  \n  None,\n\n  \n  Deletable,\n\n  \n  Movable,\n}", "api_method_name": "EditMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["          .editable(EditMode.None)\n          .ke", "table).assertEqual('EditMode.Deletable')\n      c", "table).assertEqual('EditMode.Movable')\n      con", "          .editable(EditMode.Movable)\n          ", "          .editable(EditMode.Deletable)\n        "], "files": ["ListItem.ets", "ListItemJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "EditMode", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EditMode", "api_method_name": "Deletable", "api_method_all": "Deletable,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [" .editable(EditMode.Deletable)\n          .key('li", "sertEqual('EditMode.Deletable')\n      console.inf"], "files": ["ListItem.ets", "ListItemJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "EditMode", "api_method_name": "Movable", "api_method_all": "Movable,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["sertEqual('EditMode.Movable')\n      console.inf", " .editable(EditMode.Movable)\n          .key('li"], "files": ["ListItem.ets", "ListItemJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ListItemInterface", "api_method_all": "interface ListItemInterface {\n  \n  (value?: string): ListItemAttribute;\n}", "api_method_name": "ListItemInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ListItemInterface", "api_method_name": "value", "api_method_all": "(value?: string): ListItemAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ListItemAttribute", "api_method_all": "declare class ListItemAttribute extends CommonMethod<ListItemAttribute> {\n  \n  sticky(value: Sticky): ListItemAttribute;\n\n  \n  editable(value: boolean | EditMode): ListItemAttribute;\n\n  \n  selectable(value: boolean): ListItemAttribute;\n\n  \n  onSelect(event: (isSelected: boolean) => void): ListItemAttribute;\n}", "api_method_name": "ListItemAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ListItemAttribute", "api_method_name": "sticky", "api_method_all": "sticky(value: Sticky): ListItemAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 84, "since": 7, "api_used": "\u662f", "lines": ["ty = this.$element(\"stickyOpacity\").getInspect", "ky = eventData.data.sticky;\n      }\n    }\n    ", "tor()\n         this.stickyNo = this.$element(\"", "ormal,\n             stickyOpacity:this.stickyO", "city:null,\n         stickyNo:null,\n         cl", "le.log('ListItem3\u2018s sticky is ' + JSON.stringi", "ne = this.$element(\"stickyNone\").getInspector(", "ize(12)\n          }.sticky(Sticky.Normal)\n    ", "tor()\n         this.stickyNormal = this.$eleme", "ull) {\n        this.sticky = eventData.data.st", "acity,\n             stickyNo:this.stickyNo,\n  ", ") {\n          Text('sticky:Normal , click me e", "      stickyNo:this.stickyNo,\n             cli", "ize(12)\n          }.sticky(Sticky.None)\n      ", "le.log('ListItem2\u2018s sticky is ' + JSON.stringi", "ata: {\n            \"sticky\": Sticky.None\n     ", "ize(12)\n          }.sticky(Sticky.Opacity)\n   ", "tringify(obj.$attrs.sticky))\n      console.log", "tor()\n         this.stickyNone = this.$element", "None:null,\n         stickyNormal:null,\n       ", "{\n            Text('sticky:Opacity , item4444'", "None:null,\n         stickyNone:null,\n         ", "  stickyNormal:this.stickyNormal,\n            ", "le.log('ListItem1\u2018s sticky is ' + JSON.stringi", "n = false;\n  @State sticky: Sticky = Sticky.No", "  expect(obj.$attrs.sticky).assertEqual('Stick", "rmal:null,\n         stickyOpacity:null,\n      ", "      }.sticky(this.sticky).key('ListItem')\n\n ", "nNone,\n             stickyNone:this.stickyNone", "yNone,\n             stickyNormal:this.stickyNo", "  if(eventData.data.sticky != null) {\n        ", "{\n            Text('sticky:Opacity , item3333'", "tor()\n         this.stickyOpacity = this.$elem", "al = this.$element(\"stickyNormal\").getInspecto", "le.log('ListItem4\u2018s sticky is ' + JSON.stringi", "    stickyNone:this.stickyNone,\n             s", " stickyOpacity:this.stickyOpacity,\n           ", "No = this.$element(\"stickyNo\").getInspector()\n", "{\n            Text('sticky:Normal , item2222')", "       })\n        }.sticky(this.sticky).key('L", "{\n            Text('sticky:None , item1111')\n "], "files": ["listItem.ets", "ListItemJsunit.test.ets", "ListItem.ets", "index.js", "listItemProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ListItemAttribute", "api_method_name": "editable", "api_method_all": "editable(value: boolean | EditMode): ListItemAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["FFFFFF)\n          }.editable(this.editFlag)\n    ", "  expect(obj.$attrs.editable).assertEqual('EditM", "  expect(obj.$attrs.editable).assertEqual('false", "le.log('ListItem3\u2018s editable is ' + JSON.stringi", "ky.None)\n          .editable(true)\n          .ke", "le.log('ListItem2\u2018s editable is ' + JSON.stringi", "le.log('ListItem1\u2018s editable is ' + JSON.stringi", "  expect(obj.$attrs.editable).assertEqual('true'", "tringify(obj.$attrs.editable))\n      expect(obj.", "le.log('ListItem4\u2018s editable is ' + JSON.stringi", "FFFF)\n            }.editable(true)\n          }, ", "tringify(obj.$attrs.editable))\n      await sleep", ".Normal)\n          .editable(EditMode.Deletable)", "nter)\n            }.editable(true)\n          }, ", "Opacity)\n          .editable(EditMode.Movable)\n ", "Opacity)\n          .editable(EditMode.None)\n    "], "files": ["Navigation.ets", "listItem.ets", "list.ets", "ListItemJsunit.test.ets", "ListItem.ets", "List.ets", "navigation.ets", "edgeEffect.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ListItemAttribute", "api_method_name": "selectable", "api_method_all": "selectable(value: boolean): ListItemAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["r)\n                .selectable(true)\n            }"], "files": ["grid.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ListItemAttribute", "api_method_name": "onSelectevent", "api_method_all": "onSelect(event: (isSelected: boolean) => void): ListItemAttribute;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ListItemAttribute", "api_method_name": "onSelectevent", "api_method_all": "onSelect(event: (isSelected: boolean) => void): ListItemAttribute;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}