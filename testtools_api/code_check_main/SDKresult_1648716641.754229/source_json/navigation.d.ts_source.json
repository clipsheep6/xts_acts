{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\navigation", "api": [{"api_class_name": "NavigationTitleMode", "api_method_all": "declare enum NavigationTitleMode {\n  \n  Free = 0,\n\n  \n  Full,\n\n  \n  Mini,\n}", "api_method_name": "NavigationTitleMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["e)\n      .titleMode(NavigationTitleMode.Mini)\n\n      Naviga", "hanged((titleModel: NavigationTitleMode) => {\n        conso", "Change((titleModel: NavigationTitleMode) => {\n        conso", "vigationTitleMode = NavigationTitleMode.Free\n\n  private sta", "1)\n      .titleMode(NavigationTitleMode.Full)\n      .hideTi", "  @State titleMode: NavigationTitleMode = NavigationTitleMo", "s)\n      .titleMode(NavigationTitleMode.Free)\n      .hideTi", "')\n      .titleMode(NavigationTitleMode.Free)\n    }\n  }\n}\n\n"], "files": ["Navigation.ets", "navigation.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationTitleMode", "api_method_name": "Free", "api_method_all": "Free = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 31, "since": 8, "api_used": "\u662f", "lines": ["       this.fillPropFreeze = this.$element(\"", "lThis.value.fillPropFreeze);\n        console", "s.$element(\"fillPropFreeze\").getInspector()\n", "NavigationTitleMode.Free)\n      .hideTitleBa", "ssertEqual('fillPropFreeze')\n        expect(", "ble(ScrollDirection.Free)\n      .scrollBar(B", "est'+nameA+'FillPropFreeze START');\n        ", "eeze : this.fillPropFreeze,\n            fill", "ll,\n        fillPropFreeze : null,\n        f", "est'+nameA+'FillPropFreeze', 0, async functi", "NavigationTitleMode.Free)\n    }\n  }\n}\n\n\n", "NavigationTitleMode.Free\n\n  private stateCha", "            fillPropFreeze : this.fillPropFr"], "files": ["animateTransformProps.test.js", "Navigation.ets", "animateMotionProps.test.js", "index.js", "navigation.ets", "Scroll.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationTitleMode", "api_method_name": "Full", "api_method_all": "Full,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": ["ction7 video requestFullscreen.'\n        })\n", "       this.modePropFull = this.$element(\"mo", "            modePropFull : this.modePropFull", "ll,\n        modePropFull: null,\n        drag", "lThis.value.modePropFull); //ID\n        cons", "Full : this.modePropFull,\n            dragBa", "    it('testModePropFull', 0, async function", "ertEqual('PanelMode.Full')\n      expect(obj.", "s.$element(\"modePropFull\").getInspector()\n  ", "me      testModePropFull\n     * @tc.desc    ", "* @tc.name      testFullHeightPro\n     * @tc", "      function8.exitFullscreen();\n        pr", "NavigationTitleMode.Full)\n      .hideTitleBa", "e.info('testModePropFull START');\n        co", "  console.info('testFullHeightPro START');\n ", "   function7.requestFullscreen({\n           ", "\n        app.requestFullWindow(a);\n      } c", "     */\n    it('testFullHeightPro', 0, async", "    .mode(PanelMode.Full)\n      .dragBar(tru", "ssertEqual('modePropFull') //ID\n        expe", "function8 video exitFullscreen.'\n        })\n"], "files": ["Navigation.ets", "PanelJsunit.test.ets", "SystemAppJsunit.test.ets", "Panel.ets", "panelProps.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationTitleMode", "api_method_name": "Mini", "api_method_all": "Mini,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 42, "since": 8, "api_used": "\u662f", "lines": ["ll,\n        modePropMini : null,\n        mod", "  console.info('testMiniHeightPro START');\n ", "/\n    it('testSliderMiniconNone', 0, async f", "Mini : this.modePropMini,\n            modePr", "ertEqual(\"PanelMode.Mini\");\n      console.in", "    .mode(PanelMode.Mini)\n      .dragBar(tru", "ertEqual(\"PanelType.Minibar\");\n      console", "name      testSliderMiniconNone\n     * @tc.d", "ole.info('testSliderMinicon START');\n       ", "NavigationTitleMode.Mini)\n\n      Navigation(", "me      testTypePropMinibar\n     * @tc.desc ", "* @tc.name      testMiniHeightPro\n     * @tc", "ertEqual('PanelMode.Mini')\n      expect(obj.", "            modePropMini : this.modePropMini", "ole.info('testSliderMiniconNone START');\n   ", "s.$element(\"typePropMinibar\").getInspector()", "     */\n    it('testMiniHeightPro', 0, async", "s.$element(\"modePropMini\").getInspector()\n  ", "    it('testTypePropMinibar', 0, async funct", "    it('testModePropMini', 0, async function", "e.info('testModePropMini START');\n        co", "\n     it('testSliderMinicon', 0, async funct", "lThis.value.modePropMini); //ID\n        cons", " \"mode\": \"PanelMode.Mini\"\n          }\n      ", "    .type(PanelType.Minibar)\n      .mode(Pan", "e.info('testTypePropMinibar START');\n       ", "name      testSliderMinicon\n     * @tc.desc ", "ibar : this.typePropMinibar,\n            typ", "me      testModePropMini\n     * @tc.desc    ", " \"type\": \"PanelType.Minibar\"\n          }\n   ", "ertEqual('PanelType.Minibar')\n      expect(o", "       this.typePropMinibar = this.$element(", "            typePropMinibar : this.typePropM", "       this.modePropMini = this.$element(\"mo", "ll,\n        typePropMinibar : null,\n        ", "ssertEqual('typePropMinibar') //ID\n        e", "ssertEqual('modePropMini') //ID\n        expe", "lThis.value.typePropMinibar); //ID\n        c"], "files": ["Navigation.ets", "PanelJsunit.test.ets", "sliderProps.test.js", "panelProps.test.js", "Panel.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationMenuItem", "api_method_all": "declare interface NavigationMenuItem {\n  \n  value: string;\n  \n  icon?: string;\n  \n  action?: () => void;\n}", "api_method_name": "NavigationMenuItem", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationMenuItem", "api_method_name": "action", "api_method_all": "action?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 398, "since": 8, "api_used": "\u662f", "lines": ["info(\"click to emit action state\")\n           ", "start start to emit action state\")\n           ", "le.info(\"apple emit action state err: \" + JSON", "info(\"onChange emit action state err: \" + JSON", "info(\"Onfinish emit action state err: \" + JSON", ".info(\"Onstart emit action state err: \" + JSON", "nfo(\"touchFlag emit action state err: \" + JSON", "fo('button1 current action state is: ' + this.", "\"disAppearFlag emit action state err: \" + JSON", "hange start to emit action state\")\n          e", " console.info(\"emit action state err: \" + JSON", "inish start to emit action state\")\n           ", "fo(\"appearFlag emit action state err: \" + JSON", "utton start to emit action state\")\n           ", "fo('Onstart current action state is: ' + this.", ".info(\"button2 emit action state err: \" + JSON", ".info(\"button1 emit action state err: \" + JSON", "o('Onbounce current action state is: ' + this.", "hange start to emit action state\")\n           ", "'appearFlag current action state is: ' + this.", "o(\"onDragEnter emit action state err: \" + JSON", "info(\"start to emit action state\")\n           ", "Able] start to emit action state\")\n           ", "o('onChange current action state is: ' + this.", "console.info(\"click action state err: \" + JSON", "nAreaChange current action state is: ' + this.", "hFlag start to emit action state\")\n           ", "apple start to emit action state\")\n           ", "fo('button2 current action state is: ' + this.", "o('Onfinish current action state is: ' + this.", "Enter start to emit action state\")\n          e", "ounce start to emit action state\")\n           ", "rFlag start to emit action state\")\n           ", "tton1 start to emit action state\")\n           ", "Click start to emit action state\")\n           ", "o(\"[TouchAble] emit action state err: \" + JSON", "(\"onAreaChange emit action state err: \" + JSON", "sAppearFlag current action state is: ' + this.", "tton2 start to emit action state\")\n           ", ".info(\"onClick emit action state err: \" + JSON", "e.info(\"button emit action state err: \" + JSON", "gMove start to emit action state\")\n          e", "info(\"Onbounce emit action state err: \" + JSON"], "files": ["animate.ets", "ohosPrompt.ets", "touch.ets", "configuration.ets", "longPressGesture.ets", "mouseEvent.ets", "placement.ets", "playMode.ets", "PieceCode.ets", "ohosMatrix4.ets", "bindMenu.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "sourceType.ets", "fillMode.ets", "navigation.ets", "customDialogController.ets", "priorityGesture.ets", "touchAble.ets", "pageTransition.ets", "textClock.ets", "geometryTransition.ets", "tabs.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "marquee.ets", "tapGesture.ets", "index.js", "areaChange.ets", "ResponseRegion.ets", "dragEvent.ets", "PanGesture.ets", "parallelGesture.ets", "timeStamp.ets", "transition.ets", "aboutToDisappear.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets", "bindPopup.ets", "scrollCode.ets", "button.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationMenuItem", "api_method_name": "value", "api_method_all": "value: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 8, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationMenuItem", "api_method_name": "icon", "api_method_all": "icon?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 222, "since": 8, "api_used": "\u662f", "lines": ["ontent , icon: this.icon })\n        .iconPos", "        showpasswordiconFalse : null,\n      ", "= \"piece\";\n  @State icon: string = \"1\";\n  @S", "       {value:'bbb',icon: \"/common/2.png\"},\n", "elect([{value:'aaa',icon: \"/images/img.png\"}", "  if(eventData.data.iconPosition != null) {\n", ",\n            headericon : this.headericon, ", "ull) {\n        this.iconPosition = eventData", "{\n    Image('common/icon.png')\n      .width(", "ue = eventData.data.iconsValue;\n      }\n    ", "ctor()\n        this.icon = this.$element(\"ic", " .iconPosition(this.iconPosition)\n        .f", "       {value:'ccc',icon: \"/common/3.png\"},\n", "ne = this.$element(\"iconNone\").getInspector(", "    { value: 'add', icon: 'images/add.svg', ", "ent: this.content , icon: this.icon })\n     ", "elect([{value:'aaa',icon: \"/common/1.png\"},\n", "ctor()\n        this.iconNone = this.$element", " if (eventData.data.iconsValue != null) {\n  ", "ueNone, icon : this.icon, iconNone : this.ic", "ericon : this.headericon, headericonNone : t", "       {value:'bbb',icon: \"/images/img.png\"}", "ull) {\n        this.iconsValue = eventData.d", "con : null,\n        iconNone : null,\n       ", "on, iconNone : this.iconNone,\n            pl", "null,\n        headericon : null,\n        hea", "is.icon })\n        .iconPosition(this.iconPo", "        showpasswordiconTrue : null,\n       ", "ntent;\n        this.icon = pieceObj.icon;\n  ", "        showpasswordiconNone : null\n    },\n\n", "e : this.valueNone, icon : this.icon, iconNo", "FF008000\";\n  @State iconPosition: IconPositi", "null,\n        headericonNone : null,\n       ", "onNone : this.headericonNone,\n            sh", "{ value: 'collect', icon: 'images/collect.sv", "one : null,\n        icon : null,\n        ico", "Image($r('app.media.icon')).width(80).height", "s.headericon, headericonNone : this.headeric", "Style.left\n  @State iconsValue: object= { sh", "       {value:'ddd',icon: \"/common/4.png\"}])", "       {value:'ccc',icon: \"/images/img.png\"}", "edNone, showpasswordiconTrue : this.showpass", "       {value:'ddd',icon: \"/images/img.png\"}", "his.icon = pieceObj.icon;\n      }\n      if(e", ", icon : this.icon, iconNone : this.iconNone", "    { value: 'app', icon: 'images/grid.svg',", " : this.showpasswordiconTrue,\n            sh", "on = this.$element(\"icon\").getInspector()\n  ", "on = eventData.data.iconPosition;\n      }\n  ", "ight: 12,\n          icon: \"/common/1.png\"\n  "], "files": ["Select.ets", "Navigation.ets", "index.js", "sliderProps.test.js", "optionProps.test.js", "toolbarItemProps.test.js", "select.ets", "textareaProps.test.js", "sideBar.ets", "inputProps.test.js", "Sidebar.ets", "PieceCode.ets", "navigation.ets", "CustomDialog.ets", "searchProps.test.js", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationInterface", "api_method_all": "interface NavigationInterface {\n  \n  (): NavigationAttribute;\n}", "api_method_name": "NavigationInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_all": "declare class NavigationAttribute extends CommonMethod<NavigationAttribute> {\n  \n  title(value: string | CustomBuilder): NavigationAttribute;\n\n  \n  subTitle(value: string): NavigationAttribute;\n\n  \n  hideTitleBar(value: boolean): NavigationAttribute;\n\n  \n  hideBackButton(value: boolean): NavigationAttribute;\n\n  \n  titleMode(value: NavigationTitleMode): NavigationAttribute;\n\n  \n  menus(value: Array<NavigationMenuItem> | CustomBuilder): NavigationAttribute;\n\n  \n  toolBar(value: object | CustomBuilder): NavigationAttribute;\n\n  \n  hideToolBar(value: boolean): NavigationAttribute;\n\n  \n  onTitleModeChange(callback: (titleMode: NavigationTitleMode) => void): NavigationAttribute;\n}", "api_method_name": "NavigationAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_name": "title", "api_method_all": "title(value: string | CustomBuilder): NavigationAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 81, "since": 8, "api_used": "\u662f", "lines": ["       console.log('titleMode')\n      })\n    ", "ialog({\n            title: 'Title Info',\n    ", "\n      console.log(\"title\")\n    })\n  }\n\n  @Bu", "ull) {\n        this.title = eventData.data.ti", " \"<div class=\\\"item-title\\\"><h1>\u6587\u672c\u6d4b\u8bd5(h1\u6d4b\u8bd5)</h", "ull) {\n        this.titleMode = eventData.dat", "nMenu({\n            title: 'Title Info',\n    ", "lder IngredientItem(title:string, name: strin", "       console.log('titleMode:' + titleModel)", "itle: string = 'old title'\n  @State x: number", "  {\n                title: 'title',\n         ", " if (eventData.data.title != null) {\n        ", "            title: 'title',\n                m", "le = eventData.data.title\n      }\n      if (e", "(obj.$attrs.overlay.title).assertEqual(\"new t", "an = false\n  @State titleMode: NavigationTitl", "yExample {\n  @State title: string = 'old titl", "de = eventData.data.titleMode;\n      }\n      ", "      \"title\": \"new title\"\n          }\n      ", "umn() {\n      Text('title')\n        .width(80", "      .subTitle('subtitle')\n      .menus(this", ".onTitleModeChange((titleModel: NavigationTit", "ationMenus1)\n      .titleMode(NavigationTitle", "ata: {\n            \"title\": \"new title\"\n     ", "e).assertEqual(\"old title\");\n      expect(obj", "0 })\n      }\n      .title(this.NavigationTitl", "wDialog({\n          title: 'Title Info',\n    ", "eight('50%')\n      .title('title')\n      .sub", "e).assertEqual(\"new title\");\n      console.in", "enu({\n              title: 'Title Info',\n    ", "gationMenus)\n      .titleMode(NavigationTitle", "      .overlay(this.title,\n              { al", ".show({\n            title: 'Title',\n         ", "onTitleModeChanged((titleModel: NavigationTit", "ogressChange: \" + e.title);\n        })\n      ", "Flex() {\n      Text(title)\n        .fontSize(", "50%')\n      .title('title')\n      .subTitle('", "(obj.$attrs.overlay.title).assertEqual(\"old t"], "files": ["Navigation.ets", "ohosPrompt.ets", "AlertDialog.ets", "WebPage.ets", "systemPrompt.ets", "NavigationJsunit.test.ets", "fontWeight.ets", "index.js", "basicabilityapi.test.js", "menuProps.test.js", "navigation.ets", "overlay.ets", "OverlayJsunit.test.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_name": "subTitle", "api_method_all": "subTitle(value: string): NavigationAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["tle('title')\n      .subTitle('subtitle')\n      .", "gationTitle)\n      .subTitle('subtitle')\n      ."], "files": ["Navigation.ets", "navigation.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_name": "hideTitleBar", "api_method_all": "hideTitleBar(value: boolean): NavigationAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.hideTitleBar != null) {\n        ", "eInt(eventData.data.hideTitleBar);\n      }\n      if ", "ull) {\n        this.hideTitleBar = parseInt(eventDat", "  expect(obj.$attrs.hideTitleBar).assertFalse()\n    ", "an = false\n  @State hideTitleBar: boolean = false\n  ", "leMode.Free)\n      .hideTitleBar(false)\n      .hideB", "  expect(obj.$attrs.hideTitleBar).assertTrue()\n     ", "leMode.Full)\n      .hideTitleBar(false)\n      .hideT", "avigation2')\n      .hideTitleBar(true)\n      .hideBa"], "files": ["Navigation.ets", "navigation.ets", "NavigationJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_name": "hideBackButton", "api_method_all": "hideBackButton(value: boolean): NavigationAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["eInt(eventData.data.hideBackButton);\n      }\n    }\n  }", " if (eventData.data.hideBackButton != null) {\n        ", "ull) {\n        this.hideBackButton = parseInt(eventDat", "leBar(false)\n      .hideBackButton(false)\n      .onTit", "  expect(obj.$attrs.hideBackButton).assertTrue()\n     ", "an = false\n  @State hideBackButton: boolean = false\n  ", "  expect(obj.$attrs.hideBackButton).assertFalse()\n    ", "olBar(false)\n      .hideBackButton(false)\n      .toolB", "tleBar(true)\n      .hideBackButton(true)\n      .titleM"], "files": ["Navigation.ets", "navigation.ets", "NavigationJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_name": "titleMode", "api_method_all": "titleMode(value: NavigationTitleMode): NavigationAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": [".onTitleModeChange((titleModel: NavigationTitleMo", ".log('titleMode:' + titleModel)\n      })\n\n      N", "       console.log('titleMode')\n      })\n      .t", "       console.log('titleMode:' + titleModel)\n   ", "an = false\n  @State titleMode: NavigationTitleMod", "ull) {\n        this.titleMode = eventData.data.ti", "gationMenus)\n      .titleMode(NavigationTitleMode", "eight('10%')\n      .titleMode(NavigationTitleMode", "onTitleModeChanged((titleModel: NavigationTitleMo", "de = eventData.data.titleMode;\n      }\n      if (", "Button(true)\n      .titleMode(NavigationTitleMode", "ationMenus1)\n      .titleMode(NavigationTitleMode"], "files": ["Navigation.ets", "navigation.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_name": "menus", "api_method_all": "menus(value: Array<NavigationMenuItem> | CustomBuilder): NavigationAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["('subtitle')\n      .menus(this.NavigationMenu"], "files": ["Navigation.ets", "navigation.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_name": "toolBar", "api_method_all": "toolBar(value: object | CustomBuilder): NavigationAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["ean = true\n  @State toolBar: boolean = true\n  @", "e')\n      })\n      .toolBar({ items: [\n        ", "utton(false)\n      .toolBar({ items: [\n        "], "files": ["Navigation.ets", "navigation.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_name": "hideToolBar", "api_method_all": "hideToolBar(value: boolean): NavigationAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["eInt(eventData.data.hideToolBar);\n      }\n      if ", "ean = true\n  @State hideToolBar: boolean = false\n  ", "leBar(false)\n      .hideToolBar(false)\n      .hideB", "     } }] })\n      .hideToolBar(this.hideBar)\n    }", " if (eventData.data.hideToolBar != null) {\n        ", "ull) {\n        this.hideToolBar = parseInt(eventDat"], "files": ["Navigation.ets", "navigation.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_name": "onTitleModeChangecallback", "api_method_all": "onTitleModeChange(callback: (titleMode: NavigationTitleMode) => void): NavigationAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NavigationAttribute", "api_method_name": "onTitleModeChangecallback", "api_method_all": "onTitleModeChange(callback: (titleMode: NavigationTitleMode) => void): NavigationAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}