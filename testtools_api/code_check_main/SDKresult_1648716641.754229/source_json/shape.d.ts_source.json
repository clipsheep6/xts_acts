{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\shape", "api": [{"api_class_name": "ShapeInterface", "api_method_all": "interface ShapeInterface {\n  \n  new (value?: PixelMap): ShapeAttribute;\n\n  \n  (value?: PixelMap): ShapeAttribute;\n}", "api_method_name": "ShapeInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeInterface", "api_method_name": "new", "api_method_all": "new (value?: PixelMap): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 445, "since": 7, "api_used": "\u662f", "lines": ["      let storage = new Storage();\n      co", "     })\n      Text('new area is: \\n' + this", "onst expectExtend = new ExpectExtend({\n    ", "PropertySubscriber =new IPropertySubscriber", ": VideoController = new VideoController();\n", "ge((oldValue: Area, newValue: Area) => {\n  ", " CommonShapeMethod= new Circle({ width: 280", "Storage(AppStorage, new Storage());\n      p", "yncedPropertyTwoWay(new SubscribedAbstractP", "    var offscreen = new OffscreenCanvas(300", "   let subscriber = new IPropertySubscriber", "title).assertEqual(\"new title\");\n      cons", "ata: MyDataSource = new MyDataSource()\n  bu", "et contentStorage = new ContentStorage();\n\n", "xtTimerController = new TextTimerController", "ay.aboutToBeDeleted(new SubscribedAbstractP", "onst reportExtend = new ReportExtend(file);", "e() {\n    let img = new ImageBitmap(\"/image", "> {\n            var newoptions = {\n        ", "is ${JSON.stringify(newValue)}`)\n          ", "xtClockController = new TextClockController", "\n      let oneWay = new SyncedPropertyOneWa", "ernLockController = new PatternLockControll", "is.animation.update(newoptions);\n          ", "tringify(oldValue)} newvalue is ${JSON.stri", "yncedPropertyOneWay(new SubscribedAbstractP", "  }\n    this.data = new MyDataSource(list)\n", "ze = JSON.stringify(newValue)\n          thi", "    this.maskType = new Circle({ width: 280", "     let abstract = new SubscribaleAbstract", "alendarController = new CalendarController(", "(time) {\n    return new Promise((resolve, r", "          \"title\": \"new title\"\n          }\n", "ata: MyDataSource = new MyDataSource([])\n  ", "mDialogController = new CustomDialogControl", "e() {\n    var img = new Image(\"/images/bg.j", "persistentStorage = new PersistentStorage(A", "   let subscriber = new ISinglePropertyChan", " CommonShapeMethod= new Rect({ width: 280, ", "2d\");\n    var img = new Image();\n    img.sr", " SwiperController = new SwiperController()\n", "\n      let twoWay = new SyncedPropertyTwoWa", "    this.clipType = new Rect({ width: 280, "], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "video.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "canvas2.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "CustomDialog.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "textTimer.ets", "Swiper.ets", "OverlayJsunit.test.ets", "DividerJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "scrollBar.ets", "dialogProps.test.js", "LinkJsunit.test.ets", "GridJsnuit.test.ets", "scrollCode.ets", "formProps.test.js", "VideoJsunit.test.ets", "circleProps.test.js", "XComponentPage.ets", "stackProps.test.js", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "Scroll.ets", "customDialogController.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "shapeClipping.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "index.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "Tab.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "videoProps.test.js", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "calendar.ets", "TextInputJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "Video.ets", "StackJsunit.test.ets", "TextAreaJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "animateMotionProps.test.js", "pieceProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "search.ets", "NavigatorCode.ets", "patternLock.ets", "animateProps.test.js", "buttonProps.test.js", "global.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "canvas.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "commonComponentJsApi.test.js", "ellipseProps.test.js", "chartProps.test.js", "SliderJsunit.test.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Calendar.ets", "panelProps.test.js", "ScrollBar.ets", "Badge.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeInterface", "api_method_name": "value", "api_method_all": "(value?: PixelMap): ShapeAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_all": "declare class ShapeAttribute extends CommonMethod<ShapeAttribute> {\n  \n  viewPort(value: { x?: number | string; y?: number | string; width?: number | string; height?: number | string }): ShapeAttribute;\n\n  \n  stroke(value: ResourceColor): ShapeAttribute;\n\n  \n  fill(value: ResourceColor): ShapeAttribute;\n\n  \n  strokeDashOffset(value: number | string): ShapeAttribute;\n\n  \n  strokeDashArray(value: Array<any>): ShapeAttribute;\n\n  \n  strokeLineCap(value: LineCapStyle): ShapeAttribute;\n\n  \n  strokeLineJoin(value: LineJoinStyle): ShapeAttribute;\n\n  \n  strokeMiterLimit(value: number | string): ShapeAttribute;\n\n  \n  strokeOpacity(value: number | string | Resource): ShapeAttribute;\n\n  \n  fillOpacity(value: number | string | Resource): ShapeAttribute;\n\n  \n  strokeWidth(value: number | string): ShapeAttribute;\n\n  \n  antiAlias(value: boolean): ShapeAttribute;\n  \n  \n  mesh(value: Array<any>, column: number, row: number): ShapeAttribute;\n}", "api_method_name": "ShapeAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "viewPort", "api_method_all": "viewPort(value: { x?: number | string; y?: number | string; width?: number | string; height?: number | string }): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": [" Z')\n      }\n      .viewPort({ x: -80, y: -5, wi", " 0 L900 0')\n      }.viewPort({ x: 0, y: -5, widt", "key('shape')\n      .viewPort({ x: -2, y: -2, wid", " 0')\n      }\n      .viewPort({ x: 0, y: -5, widt", ".height(50)\n      }.viewPort({ x: -1, y: -1, wid", "100)\n      }\n      .viewPort({ x: -5, y: -5, wid", "0 })\n      }\n      .viewPort({ x: -2, y: -2, wid"], "files": ["shape.ets", "Shape.ets", "enumsLineCapStyle.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "stroke", "api_method_all": "stroke(value: ResourceColor): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1910, "since": 7, "api_used": "\u662f", "lines": ["0;\n    this.context.strokeStyle = '#0000ff';\n ", "xpect(objNew.$attrs.strokeWidth).assertEqual('", "strokeWidth(`${this.strokeWidthValue}`)\n      ", "  strokeWidth: this.strokeWidth,\n          col", "\n              this.strokeRect();\n            ", "neCap' + obj.$attrs.strokeLineCap)\n      expec", " if (eventData.data.strokeWidth != null) {\n   ", "ue = eventData.data.strokeWidthValue;\n      }\n", "    .fill(0x317Af7).stroke(Color.Black).stroke", "ata: {\n            \"strokeWidth\": \"3.000000vp\"", "ata: {\n            \"strokeWidthValue\": \"-30\",\n", "leValue}`)\n        .strokeWidth(`${this.stroke", "n = false;\n  @State strokeWidth: number = 2.00", "trokeDashOffset(10).strokeLineCap(LineCapStyle", "pStyle.Butt)\n      .strokeLineJoin(LineJoinSty", "rokeWidth(4)\n      .strokeDashArray([20]).stro", "ata: {\n            \"strokeWidthValue\": \"30\",\n ", "th = eventData.data.strokeWidth;\n      }\n     ", "ull) {\n        this.strokeWidthValue = eventDa", "25, 55, 75);\n  }\n\n  strokeStyle() {\n    this.c", "\n              this.strokeStyle();\n           ", "\n        .divider({ strokeWidth: 2, color: 0xF", "ata: {\n            \"strokeWidthValue\": \"121111", "stroke(Color.Black).strokeWidth(4)\n      .stro", "ull) {\n        this.strokeWidth = eventData.da", "ring = 50;\n  @State strokeWidthValue: string =", "\n              this.strokeText();\n            ", "5;\n    this.context.strokeRect(25, 25, 55, 75)", "';\n    this.context.strokeRect(115, 25, 75, 55", ");\n    this.context.stroke();\n    this.context", " if (eventData.data.strokeWidthValue != null) ", ");\n    this.context.stroke();\n  }\n\n  lineJoin(", "Black).key('path1').strokeWidth(3)\n\n      Text", "  expect(obj.$attrs.strokeWidth).assertEqual('", "le.info('obj.$attrs.strokeLineCap' + obj.$attr", ");\n    this.context.stroke();\n  }\n\n  font() {\n", "rokeDashArray([20]).strokeDashOffset(10).strok", "})\n      .divider({ strokeWidth: 2, color: 0xF", "  expect(obj.$attrs.strokeLineCap).assertEqual", ");\n    this.context.stroke();\n  }\n\n  miterLimi", "s(this.commandsOne).stroke(Color.Black).key('p", "(obj.$attrs.divider.strokeWidth).assertEqual(\"", "divider({\n          strokeWidth: this.strokeWi"], "files": ["Shape.ets", "pathProps.test.js", "PatternLock.ets", "circleProps.test.js", "EnmusLineCapStyleJsunit.test.ets", "ShapeJsunit.test.ets", "canvas.ets", "lineProps.test.js", "divider.ets", "gauge.ets", "polylineProps.test.js", "Path.ets", "ellipseProps.test.js", "polygonProps.test.js", "list.ets", "List.ets", "dragEvent2.ets", "enumsLineCapStyle.ets", "GaugeJsunit.test.ets", "index.js", "DividerJsunit.test.ets", "Divider.ets", "edgeEffect.ets", "dragEvent.ets", "tspanProps.test.js", "svgProps.test.js", "shape.ets", "svgTextProps.test.js", "textPathProps.test.js", "path.ets", "ListJsunit.test.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "fill", "api_method_all": "fill(value: ResourceColor): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1166, "since": 7, "api_used": "\u662f", "lines": [");\n    });\n\n    it('fillModeTest_0200', 0, a", "pped\n          this.fillMode = FillMode.None", "   \"fillMode\": this.fillMode\n              }", "      console.info(\"fillModeTest_0300 get st", "s));\n        if (!('fillMode' == pages.name)", "        uri: 'pages/fillMode',\n      }\n     ", "      console.info(\"fillModeTest_0200 click ", "preDecode)\n        .fillMode(this.fillMode).", " {\n                \"fillMode\": this.fillMode", "      console.info('fillModeTest_0200 START'", "nfo('beforeEach get fillMode state pages:' +", "      console.info('fillModeTest_0200 END');", "ning\n          this.fillMode = FillMode.Back", ");\n    });\n\n    it('fillModeTest_0100', 0, a", "      console.info(\"fillModeTest_0200 get st", "    Rect()\n        .fill(Color.Gray)\n       ", "      console.info('fillModeTest_0300 START'", "used\n          this.fillMode = FillMode.Both", "      console.info(\"fillModeTest_0100 get st", "      console.info('fillModeTest beforeEach ", "      console.info('fillModeTest_0100 END');", "or('beforeEach push fillMode page error:' + ", "number = 0\n  @State fillMode: FillMode = Fil", "ect(indexEvent.data.fillMode).assertEqual(Fi", "     .fillMode(this.fillMode).iterations(thi", "      console.info(\"fillModeTest_0100 click ", "      console.info('fillMode test after each", "      console.info('fillModeTest_0100 START'", "t.test.ets';\nimport fillModeJsunit from './F", "   Text('background fill the box(Cover)').fo", "rt default function fillModeJsunit(){\n  desc", "      console.info(\"fillModeTest_0200 on eve", " Ellipse()\n        .fill(Color.Pink)\n       ", "fo('beforeEach push fillMode page result:' +", "      console.info(\"fillModeTest_0300 on eve", "y\n@Component\nstruct fillModeExample {\n  @Sta", "      console.info(\"fillModeTest_0300 click ", "      console.info('fillModeTest_0300 END');", "   Text('background fill the box(Contain)').", "nfo('beforeEach get fillMode state pages.nam", ");\n    });\n\n    it('fillModeTest_0300', 0, a", "unit(){\n  describe('fillModeTest', function ", "  selectJsunit();\n  fillModeJsunit();\n  enum", "      console.info(\"fillModeTest_0100 on eve"], "files": ["ImageJsunit.test.ets", "Shape.ets", "pathProps.test.js", "circleProps.test.js", "imageAnimatorProps.test.js", "background.ets", "canvas2.ets", "ShapeJsunit.test.ets", "canvas.ets", "ImageAnimatorJsunit.test.ets", "polylineProps.test.js", "animationStatus.ets", "fillMode.ets", "ellipseProps.test.js", "GestureModeJsunit.test.ets", "touchAble.ets", "polygonProps.test.js", "animatorOption.ets", "enumsLineCapStyle.ets", "index.js", "backgroundAndSizeSetting.ets", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "FillModeJsunit.test.ets", "shape.ets", "animateMotionProps.test.js", "Image.ets", "svgTextProps.test.js", "textPathProps.test.js", "imageAnimator.ets", "List.test.ets", "rectProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "strokeDashOffset", "api_method_all": "strokeDashOffset(value: number | string): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 66, "since": 7, "api_used": "\u662f", "lines": ["ashOffsetProp: this.strokeDashOffsetProp,\n            st", "rop : null,\n        strokeDashOffsetProp : null,\n       ", "rokeDashArray([20]).strokeDashOffset(10)\n      Shape() {", "shOffsetProp : this.strokeDashOffsetProp,\n            st", "ctor()\n        this.strokeDashOffsetProp = this.$element", "eExample {\n  @State strokeDashOffset: number = 0;\n  @Sta", "rokeDashArray([20]).strokeDashOffset(10).strokeLineCap(L", " if (eventData.data.strokeDashOffset != null) {\n        ", "rokeDashOffset(this.strokeDashOffset)\n      .strokeLineC", "Prop: null,\n        strokeDashOffsetProp: null,\n        ", "ayProp,\n            strokeDashOffsetProp: this.strokeDas", "  expect(obj.$attrs.strokeDashOffset).assertEqual('0.00v", "op = this.$element(\"strokeDashOffsetProp\").getInspector(", "ayProp,\n            strokeDashOffsetProp : this.strokeDa", "ull) {\n        this.strokeDashOffset = parseInt(eventDat", "eInt(eventData.data.strokeDashOffset);\n      }\n      if ", "keDashArray)\n      .strokeDashOffset(this.strokeDashOffs"], "files": ["Shape.ets", "enumsLineCapStyle.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "strokeDashArray", "api_method_all": "strokeDashArray(value: Array<any>): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 84, "since": 7, "api_used": "\u662f", "lines": ["eInt(eventData.data.strokeDashArrayOne);\n      }\n      ", "ull) {\n        this.strokeDashArray[0] = parseInt(event", "rop : null,\n        strokeDashArrayProp : null,\n       ", " if (eventData.data.strokeDashArrayOne != null) {\n     ", "keProp,\n            strokeDashArrayProp : this.strokeDa", "43).strokeWidth(10).strokeDashArray([20])\n      Shape()", "ull) {\n        this.strokeDashArray[2] = parseInt(event", "ata: {\n            \"strokeDashArrayThree\": \"4\",\n       ", "trokeDashArray(this.strokeDashArray)\n      .strokeDashO", "43).strokeWidth(10).strokeDashArray([20]).strokeLineCap", "rokeWidth(4)\n      .strokeDashArray([20]).strokeDashOff", "keProp,\n            strokeDashArrayProp: this.strokeDas", "  expect(obj.$attrs.strokeDashArray[1]).assertEqual('4.", "Prop: null,\n        strokeDashArrayProp: null,\n        ", "tringify(obj.$attrs.strokeDashArray[0]));\n      expect(", " if (eventData.data.strokeDashArrayTwo != null) {\n     ", "ull) {\n        this.strokeDashArray[1] = parseInt(event", "ctor()\n        this.strokeDashArrayProp = this.$element", "op = this.$element(\"strokeDashArrayProp\").getInspector(", "  expect(obj.$attrs.strokeDashArray[2]).assertEqual('4.", "  expect(obj.$attrs.strokeDashArray[0]).assertEqual('4.", "ashArrayProp : this.strokeDashArrayProp,\n            st", "ata: {\n            \"strokeDashArrayOne\": \"4\",\n         ", "ata: {\n            \"strokeDashArrayTwo\": \"4\",\n         ", "  expect(obj.$attrs.strokeDashArray[0]).assertEqual('20", "an = true;\n  @State strokeDashArray: Array<Length> = [2", "43).strokeWidth(10).strokeDashArray([20]).strokeDashOff", "eInt(eventData.data.strokeDashArrayTwo);\n      }\n      ", "strokeValue)\n      .strokeDashArray(this.strokeDashArra", "DashArrayProp: this.strokeDashArrayProp,\n            st", "eInt(eventData.data.strokeDashArrayThree);\n      }\n    ", "tringify(obj.$attrs.strokeDashArray[1]));\n      expect(", "  expect(obj.$attrs.strokeDashArray[1]).assertEqual('20", " if (eventData.data.strokeDashArrayThree != null) {\n   "], "files": ["Shape.ets", "enumsLineCapStyle.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "strokeLineCap", "api_method_all": "strokeLineCap(value: LineCapStyle): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 238, "since": 7, "api_used": "\u662f", "lines": ["eCapPropThree: this.strokeLineCapPropThree,\n         ", ".strokeLineCap(this.strokeLineCap)\n      .strokeLineJ", "neCap' + obj.$attrs.strokeLineCap)\n      expect(obj.$", "le.info('obj.$attrs.strokeLineCap' + obj.$attrs.strok", "ata: {\n            \"strokeLineCap\": 'string'\n        ", "ne = this.$element(\"strokeLineCapPropOne\").getInspect", "pTwo: null,\n        strokeLineCapPropThree: null,\n   ", "tringify(obj.$attrs.strokeLineCap));\n      expect(obj", "ap = eventData.data.strokeLineCap;\n      }\n      if (", "ropOne,\n            strokeLineCapPropTwo : this.strok", "ropOne,\n            strokeLineCapPropTwo: this.stroke", "  expect(obj.$attrs.strokeLineCap).assertEqual('LineC", "CapPropThree : this.strokeLineCapPropThree,\n         ", "ull) {\n        this.strokeLineCap = eventData.data.st", "rokeDashArray([20]).strokeLineCap(LineCapStyle.Round)", "Two : null,\n        strokeLineCapPropThree : null,\n  ", "trokeDashOffset(10).strokeLineCap(LineCapStyle.Butt)\n", "One : null,\n        strokeLineCapPropTwo : null,\n    ", "ineCapPropOne: this.strokeLineCapPropOne,\n           ", " if (eventData.data.strokeLineCap != null) {\n        ", "neCapPropTwo : this.strokeLineCapPropTwo,\n           ", "neCapPropOne : this.strokeLineCapPropOne,\n           ", "umber = 0;\n  @State strokeLineCap: LineCapStyle = Lin", "pOne: null,\n        strokeLineCapPropTwo: null,\n     ", "ctor()\n        this.strokeLineCapPropTwo = this.$elem", "ropTwo,\n            strokeLineCapPropThree : this.str", "ineCapPropTwo: this.strokeLineCapPropTwo,\n           ", "ree : null,\n        strokeLineCapPropOne : null,\n    ", "pThree,\n            strokeLineCapPropOne: this.stroke", "trokeDashOffset(10).strokeLineCap(LineCapStyle.Round)", "wo = this.$element(\"strokeLineCapPropTwo\").getInspect", "eDashOffset)\n      .strokeLineCap(this.strokeLineCap)", "pThree,\n            strokeLineCapPropOne : this.strok", "ee = this.$element(\"strokeLineCapPropThree\").getInspe", "ata: {\n            \"strokeLineCap\": LineCapStyle.Roun", "ctor()\n        this.strokeLineCapPropOne = this.$elem", "ropTwo,\n            strokeLineCapPropThree: this.stro", "ctor()\n        this.strokeLineCapPropThree = this.$el", "hree: null,\n        strokeLineCapPropOne: null,\n     ", "ata: {\n            \"strokeLineCap\": '-0.2'\n          "], "files": ["index.js", "Shape.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "EnmusLineCapStyleJsunit.test.ets", "ShapeJsunit.test.ets", "enumsLineCapStyle.ets", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "strokeLineJoin", "api_method_all": "strokeLineJoin(value: LineJoinStyle): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 191, "since": 7, "api_used": "\u662f", "lines": ["eJoinPropOne : this.strokeLineJoinPropOne,\n           ", "strokeLineJoin(this.strokeLineJoin)\n      .strokeMiter", "ctor()\n        this.strokeLineJoinPropOne = this.$elem", "rokeLineCap)\n      .strokeLineJoin(this.strokeLineJoin", "43).strokeWidth(10).strokeLineJoin(LineJoinStyle.Round", "ata: {\n            \"strokeLineJoin\": 0.11111,\n        ", "One : null,\n        strokeLineJoinPropThree : null,\n  ", "ctor()\n        this.strokeLineJoinPropTwo = this.$elem", "pTwo: null,\n        strokeLineJoinPropOne: null,\n     ", "ata: {\n            \"strokeLineJoin\": 'nothing',\n      ", "etProp,\n            strokeLineJoinPropTwo : this.strok", "pStyle.Butt)\n      .strokeLineJoin(LineJoinStyle.Round", "ropTwo,\n            strokeLineJoinPropOne : this.strok", " if (eventData.data.strokeLineJoin != null) {\n        ", "pOne: null,\n        strokeLineJoinPropThree: null,\n   ", "ctor()\n        this.strokeLineJoinPropThree = this.$el", "in = eventData.data.strokeLineJoin;\n      }\n      if (", "ropOne,\n            strokeLineJoinPropThree: this.stro", "JoinPropThree: this.strokeLineJoinPropThree,\n         ", "  expect(obj.$attrs.strokeLineJoin).assertEqual('LineJ", "ata: {\n            \"strokeLineJoin\": LineJoinStyle.Bev", "wo = this.$element(\"strokeLineJoinPropTwo\").getInspect", "neJoinPropTwo: this.strokeLineJoinPropTwo,\n           ", "ull) {\n        this.strokeLineJoin = eventData.data.st", "ee = this.$element(\"strokeLineJoinPropThree\").getInspe", "neJoinPropOne: this.strokeLineJoinPropOne,\n           ", "Prop: null,\n        strokeLineJoinPropTwo: null,\n     ", "oinPropThree : this.strokeLineJoinPropThree,\n         ", "ropTwo,\n            strokeLineJoinPropOne: this.stroke", "etProp,\n            strokeLineJoinPropTwo: this.stroke", "ropOne,\n            strokeLineJoinPropThree : this.str", "tyle.Butt;\n  @State strokeLineJoin: LineJoinStyle = Li", "ne = this.$element(\"strokeLineJoinPropOne\").getInspect", "tringify(obj.$attrs.strokeLineJoin));\n      expect(obj", "llOpacity(1)\n      .strokeLineJoin(LineJoinStyle.Miter", "Style.Round)\n      .strokeLineJoin(LineJoinStyle.Round", "Two : null,\n        strokeLineJoinPropOne : null,\n    ", "rop : null,\n        strokeLineJoinPropTwo : null,\n    ", "eJoinPropTwo : this.strokeLineJoinPropTwo,\n           ", "ata: {\n            \"strokeLineJoin\": LineJoinStyle.Rou"], "files": ["Shape.ets", "enumsLineCapStyle.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "strokeMiterLimit", "api_method_all": "strokeMiterLimit(value: number | string): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 76, "since": 7, "api_used": "\u662f", "lines": ["okeLineJoin)\n      .strokeMiterLimit(this.strokeMiterLim", "  expect(obj.$attrs.strokeMiterLimit).assertEqual('4.000", "yle.Miter;\n  @State strokeMiterLimit: number = 4;\n  @Sta", " if (eventData.data.strokeMiterLimit != null) {\n        ", "  expect(obj.$attrs.strokeMiterLimit).assertEqual('5.000", "ata: {\n            \"strokeMiterLimit\": '-0.11111',\n     ", "ata: {\n            \"strokeMiterLimit\": 'aaa11111',\n     ", "op = this.$element(\"strokeMiterLimitProp\").getInspector(", "ull) {\n        this.strokeMiterLimit = parseInt(eventDat", "pThree,\n            strokeMiterLimitProp : this.strokeMi", "pThree,\n            strokeMiterLimitProp: this.strokeMit", "hree: null,\n        strokeMiterLimitProp: null,\n        ", "ree : null,\n        strokeMiterLimitProp : null,\n       ", "ata: {\n            \"strokeMiterLimit\": \"string\",\n       ", "terLimitProp : this.strokeMiterLimitProp,\n            st", "rokeMiterLimit(this.strokeMiterLimit)\n      .strokeOpaci", "tringify(obj.$attrs.strokeMiterLimit));\n      expect(obj", "ineJoinStyle.Miter).strokeMiterLimit(5)\n    }.width('100", "iterLimitProp: this.strokeMiterLimitProp,\n            st", "ata: {\n            \"strokeMiterLimit\": \"5\",\n          }\n", "eInt(eventData.data.strokeMiterLimit);\n      }\n      if ", "ctor()\n        this.strokeMiterLimitProp = this.$element"], "files": ["Shape.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "strokeOpacity", "api_method_all": "strokeOpacity(value: number | string | Resource): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 284, "since": 7, "api_used": "\u662f", "lines": ["pOne: null,\n        strokeOpacityPropTwo: null,\n     ", "ropTwo,\n            strokeOpacityPropThree: this.stro", "ee = this.$element(\"strokeOpacityPropThree\").getInspe", "pacityPropTwo: this.strokeOpacityPropTwo,\n           ", "ctor()\n        this.strokeOpacityPropOne = this.$elem", "ropOne,\n            strokeOpacityPropTwo: this.stroke", "43).strokeWidth(10).strokeOpacity(0.5)\n      Shape() ", "itProp,\n            strokeOpacityPropOne : this.strok", "ne = this.$element(\"strokeOpacityPropOne\").getInspect", "One : null,\n        strokeOpacityPropTwo : null,\n    ", " if (eventData.data.strokeOpacity != null) {\n        ", "ropTwo,\n            strokeOpacityPropThree : this.str", "pacityPropOne: this.strokeOpacityPropOne,\n           ", "umber = 4;\n  @State strokeOpacity: number = 1;\n  @Sta", "eInt(eventData.data.strokeOpacity);\n      }\n      if ", "ropOne,\n            strokeOpacityPropTwo : this.strok", "ctor()\n        this.strokeOpacityPropThree = this.$el", "acityPropTwo : this.strokeOpacityPropTwo,\n           ", "pTwo: null,\n        strokeOpacityPropThree: null,\n   ", "itProp,\n            strokeOpacityPropOne: this.stroke", "Prop: null,\n        strokeOpacityPropOne: null,\n     ", "  expect(obj.$attrs.strokeOpacity).assertEqual('1.000", "rop : null,\n        strokeOpacityPropOne : null,\n    ", "ityPropThree : this.strokeOpacityPropThree,\n         ", "ull) {\n        this.strokeOpacity = parseInt(eventDat", "eMiterLimit)\n      .strokeOpacity(this.strokeOpacity)", "ctor()\n        this.strokeOpacityPropTwo = this.$elem", ".strokeOpacity(this.strokeOpacity)\n      .strokeWidth", "Two : null,\n        strokeOpacityPropThree : null,\n  ", "acityPropOne : this.strokeOpacityPropOne,\n           ", "wo = this.$element(\"strokeOpacityPropTwo\").getInspect", "cityPropThree: this.strokeOpacityPropThree,\n         "], "files": ["Shape.ets", "tspanProps.test.js", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "fillOpacity", "api_method_all": "fillOpacity(value: number | string | Resource): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 269, "since": 7, "api_used": "\u662f", "lines": ["ee = this.$element(\"fillOpacityPropThree\").getInspe", "  expect(obj.$attrs.fillOpacity).assertEqual('0.000", "pacityPropOne: this.fillOpacityPropOne,\n           ", "  .fillOpacity(this.fillOpacity)\n      .mesh([], 1,", "ata: {\n            \"fillOpacity\": \"aa12345\",\n      ", "ull) {\n        this.fillOpacity = parseInt(eventDat", "ne = this.$element(\"fillOpacityPropOne\").getInspect", "ityPropThree : this.fillOpacityPropThree,\n         ", "ata: {\n            \"fillOpacity\": \"-1\",\n          }", "llProp,\n            fillOpacityPropTwo: this.fillOp", "ctor()\n        this.fillOpacityPropTwo = this.$elem", "ata: {\n            \"fillOpacity\": \"1\",\n          }\n", "wo = this.$element(\"fillOpacityPropTwo\").getInspect", "rop : null,\n        fillOpacityPropTwo : null,\n    ", "Two : null,\n        fillOpacityPropOne : null,\n    ", "pacityPropTwo: this.fillOpacityPropTwo,\n           ", "ropOne,\n            fillOpacityPropThree : this.fil", "  expect(obj.$attrs.fillOpacity).assertEqual('nan')", "pOne: null,\n        fillOpacityPropThree: null,\n   ", "h> = [20];\n  @State fillOpacity: number = 0;\n  @Sta", "Prop: null,\n        fillOpacityPropTwo: null,\n     ", "43).strokeWidth(10).fillOpacity(1)\n      .strokeLin", "ropTwo,\n            fillOpacityPropOne: this.fillOp", "ropTwo,\n            fillOpacityPropOne : this.fillO", "ropOne,\n            fillOpacityPropThree: this.fill", "acityPropTwo : this.fillOpacityPropTwo,\n           ", "tringify(obj.$attrs.fillOpacity));\n      expect(obj", "cityPropThree: this.fillOpacityPropThree,\n         ", "ctor()\n        this.fillOpacityPropOne = this.$elem", "One : null,\n        fillOpacityPropThree : null,\n  ", "ata: {\n            \"fillOpacity\": \"aaaaaaa\",\n      ", "s.antiAlias)\n      .fillOpacity(this.fillOpacity)\n ", "  expect(obj.$attrs.fillOpacity).assertEqual('1.000", "ctor()\n        this.fillOpacityPropThree = this.$el", "pTwo: null,\n        fillOpacityPropOne: null,\n     ", "llProp,\n            fillOpacityPropTwo : this.fillO", "acityPropOne : this.fillOpacityPropOne,\n           ", " if (eventData.data.fillOpacity != null) {\n        ", "eInt(eventData.data.fillOpacity);\n      }\n      if "], "files": ["Shape.ets", "tspanProps.test.js", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "strokeWidth", "api_method_all": "strokeWidth(value: number | string): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 227, "since": 7, "api_used": "\u662f", "lines": ["(obj.$attrs.divider.strokeWidth).assertEqual(\"3.00v", "ole.log(\"cd divider strokeWidth\" + JSON.stringify(o", "stroke(Color.Black).strokeWidth(4)\n      .strokeDas", "ring = 50;\n  @State strokeWidthValue: string = 20;\n", "ical(true)\n        .strokeWidth(10)\n        .height", "ata: {\n            \"strokeWidthValue\": \"30\",\n      ", "}).stroke(0xEE8443).strokeWidth(10).strokeDashArray", "ata: {\n            \"strokeWidth\": \"3.000000vp\"\n    ", "strokeWidth(`${this.strokeWidthValue}`)\n        .wi", "ata: {\n            \"strokeWidthValue\": \"-30\",\n     ", "th = eventData.data.strokeWidth;\n      }\n      if (", "(obj.$attrs.divider.strokeWidth).assertEqual(\"2.00v", "})\n      .divider({ strokeWidth: 2, color: 0xFFFFFF", "  .stroke(0xEE8443).strokeWidth(10).strokeDashArray", "xpect(objNew.$attrs.strokeWidth).assertEqual('12111", " Color.Red\n  @State strokeWidth: number = 7\n  @Stat", "stroke(Color.Black).strokeWidth(2)\n\n      Text('bor", "leValue}`)\n        .strokeWidth(`${this.strokeWidth", "7).stroke(0xEE8443).strokeWidth(10).fillOpacity(1)\n", "  expect(obj.$attrs.strokeWidth).assertEqual('20.00", "  strokeWidth: this.strokeWidth,\n          color: t", "umber = 1;\n  @State strokeWidth: number = 1;\n  @Sta", "stroke(Color.Black).strokeWidth(3).key('path')\n\n   ", "cal(false)\n        .strokeWidth(5)\n        .color(t", "7).stroke(0xEE8443).strokeWidth(10).strokeLineJoin(", "xpect(objNew.$attrs.strokeWidth).assertEqual('-30.0", "  .strokeWidth(this.strokeWidth)\n      .antiAlias(t", "Black).key('path1').strokeWidth(3)\n\n      Text('Str", "ue = eventData.data.strokeWidthValue;\n      }\n     ", "tyle.Butt)\n        .strokeWidth(this.strokeWidth)\n ", "}).stroke(0xEE8443).strokeWidth(10).strokeOpacity(0", "                    strokeWidth: 5,\n               ", "ata: {\n            \"strokeWidthValue\": \"121111111\"\n", "tringify(obj.$attrs.strokeWidth));\n      console.lo", "  .strokeWidth(this.strokeWidth)\n        .color(thi", "  expect(obj.$attrs.strokeWidth).assertEqual(\"7.000", "lor.Green)\n        .strokeWidth(10)\n        .height", "n = false;\n  @State strokeWidth: number = 2.000000;", "ull) {\n        this.strokeWidthValue = eventData.da", "\n        .divider({ strokeWidth: 2, color: 0xFFFFFF", "divider({\n          strokeWidth: this.strokeWidth,\n", " if (eventData.data.strokeWidth != null) {\n        ", " if (eventData.data.strokeWidthValue != null) {\n   ", "ull) {\n        this.strokeWidth = eventData.data.st", "rokeOpacity)\n      .strokeWidth(this.strokeWidth)\n ", "xpect(objNew.$attrs.strokeWidth).assertEqual('30.00"], "files": ["Shape.ets", "pathProps.test.js", "circleProps.test.js", "lineProps.test.js", "divider.ets", "gauge.ets", "polylineProps.test.js", "Path.ets", "ellipseProps.test.js", "polygonProps.test.js", "list.ets", "List.ets", "dragEvent2.ets", "index.js", "enumsLineCapStyle.ets", "GaugeJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "edgeEffect.ets", "dragEvent.ets", "tspanProps.test.js", "svgProps.test.js", "shape.ets", "svgTextProps.test.js", "textPathProps.test.js", "path.ets", "ListJsunit.test.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "antiAlias", "api_method_all": "antiAlias(value: boolean): ShapeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["ull) {\n        this.antiAlias = eventData.data.an", "ineJoinStyle.Round).antiAlias(true)\n      .key('B", "  expect(obj.$attrs.antiAlias).assertEqual('false", "ata: {\n            \"antiAlias\": aaaaa,\n          ", "    .antiAlias(this.antiAlias)\n      .fillOpacity", "ineJoinStyle.Round).antiAlias(true)\n      Shape()", "  expect(obj.$attrs.antiAlias).assertEqual('true'", "ata: {\n            \"antiAlias\": \"false\",\n        ", "ata: {\n            \"antiAlias\": -0.1,\n          }", " if (eventData.data.antiAlias != null) {\n        ", "strokeWidth)\n      .antiAlias(this.antiAlias)\n   ", "tringify(obj.$attrs.antiAlias));\n      expect(obj", "umber = 1;\n  @State antiAlias: boolean = true;\n  ", "as = eventData.data.antiAlias;\n      }\n      if ("], "files": ["shape.ets", "Shape.ets", "ShapeJsunit.test.ets", "enumsLineCapStyle.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ShapeAttribute", "api_method_name": "mesh", "api_method_all": "mesh(value: Array<any>, column: number, row: number): ShapeAttribute;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["fillOpacity)\n      .mesh([], 1, 1)\n    }.wid"], "files": ["shape.ets"], "is_white": " ", "desc": " "}]}