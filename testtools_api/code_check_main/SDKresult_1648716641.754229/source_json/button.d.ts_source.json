{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\button", "api": [{"api_class_name": "ButtonType", "api_method_all": "declare enum ButtonType {\n  \n  Capsule,\n\n  \n  Circle,\n\n  \n  Normal,\n}", "api_method_name": "ButtonType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 36, "since": 7, "api_used": "\u662f", "lines": ["* @tc.name      testButtonTypeDownload\n     * @tc.", "\"buttonTypeValue\": \"ButtonType.Capsule\",\n         ", "ean = true\n  @State ButtonType: ButtonType = Butto", "('1.value', { type: ButtonType.Circle, stateEffect", "     */\n    it('testButtonTypeDownload', 0, async ", "ect false\", { type: ButtonType.Normal })\n         ", "* @tc.name      testButtonTypeText\n     * @tc.desc", "  console.info('testButtonTypeCircle START');\n    ", "te buttonTypeValue: ButtonType = ButtonType.Normal", ".type).assertEqual('ButtonType.Capsule');\n      do", "     */\n    it('testButtonTypeCapsule', 0, async f", "     */\n    it('testButtonTypeCircle', 0, async fu", "  console.info('testButtonTypeText START');\n      ", "* @tc.name      testButtonTypeCircle\n     * @tc.de", "  console.info('testButtonTypeNone START');\n      ", ".type).assertEqual('ButtonType.Capsule')\n      exp", "  console.info('testButtonTypeArc START');\n       ", "     */\n    it('testButtonTypeText', 0, async func", ".type).assertEqual('ButtonType.Normal');\n      don", "Value: ButtonType = ButtonType.Normal;\n  @State fo", "* @tc.name      testButtonTypeArc\n     * @tc.desc ", "  console.info('testButtonTypeDownload START');\n  ", "teEffect \", { type: ButtonType.Capsule })\n        ", "rmal\")\n      }.type(ButtonType.Normal)\n      .back", "  console.info('testButtonTypeCapsule START');\n   ", "* @tc.name      testButtonTypeNone\n     * @tc.desc", "* @tc.name      testButtonTypeCapsule\n     * @tc.d", "      }\n      .type(ButtonType.Capsule)\n      .sta", "     */\n    it('testButtonTypeNone', 0, async func", ".type).assertEqual('ButtonType.Normal')\n      cons", " @State ButtonType: ButtonType = ButtonType.Circle", "     */\n    it('testButtonTypeArc', 0, async funct", ".type).assertEqual('ButtonType.Circle')\n      expe", "nType: ButtonType = ButtonType.Circle\n  private co"], "files": ["ButtonJsunit.test.ets", "Button.ets", "button.ets", "buttonProps.test.js", "Link.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonType", "api_method_name": "Capsule", "api_method_all": "Capsule,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["Value\": \"ButtonType.Capsule\",\n          }\n     ", "rtEqual('ButtonType.Capsule')\n      expect(obj.", "      testButtonTypeCapsule\n     * @tc.desc    ", "     }\n\n      Text('Capsule Progress').fontSize", "d).assertEqual('typeCapsule')\n        expect(ob", ") {\n        Text(\"2.Capsule\")\n      }\n      .ty", "tyle: ProgressStyle.Capsule }).color(Color.Grey", "  it('testButtonTypeCapsule', 0, async function", "rtEqual('ButtonType.Capsule');\n      done();\n  ", "tyle: ProgressStyle.Capsule })\n          .value", "tyle: ProgressStyle.Capsule }).width(100).value", "   .type(ButtonType.Capsule)\n      .stateEffect", "qual(\"ProgressStyle.Capsule\")\n      console.inf", ": this.typeArc, typeCapsule : this.typeCapsule,", ": null,\n        typeCapsule : null,\n        typ", "eCapsule : this.typeCapsule, typeCircle : this.", " this.$element(\"typeCapsule\").getInspector()\n  ", "()\n        this.typeCapsule = this.$element(\"ty", " { type: ButtonType.Capsule })\n        .backgro", "lobalThis.value.typeCapsule);\n        console.i", "info('testButtonTypeCapsule START');\n        co"], "files": ["ProgressJsunit.test.ets", "progress.ets", "ButtonJsunit.test.ets", "Button.ets", "Progress.ets", "index.js", "buttonProps.test.js", "Link.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonType", "api_method_name": "Circle", "api_method_all": "Circle,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 116, "since": 7, "api_used": "\u662f", "lines": ["  console.info('testCircleFillOpacityPropOne S", "  console.info('testCircleOpacityPropTwo START", "shape).assertEqual('Circle');\n      console.in", "type: DataPanelType.Circle})\n        .width(th", "\n     \n     it('testCircleFillOpacityPropOne',", "  console.info('testCircleOpacityPropThree STA", "ceAround }) {\n      Circle({ width: 150, heigh", "monShapeMethod= new Circle({ width: 280, heigh", "\n     \n     it('testCircleFillOpacityPropThree", " this.$element(\"typeCircle\").getInspector()\n  ", ",\n        qrcodeTypeCircle : null,\n        qrc", "ircleJsunit from './CircleJsunit.test.ets';\nim", "  console.info('testCircleFillOpacityPropTwo S", "\n     \n     it('testCircleOpacityPropOne', 0, ", "rue;\n  @State isClipCircle:boolean = true;\n  @", "  it('testButtonTypeCircle', 0, async function", "peCircle : this.typeCircle,\n            typeTe", "      testButtonTypeCircle\n     * @tc.desc    ", "\n     \n     it('testCircleFillProp', 0, async ", "info('testButtonTypeCircle START');\n        co", "  console.info('testCircleFillRulePropOne STAR", "\n     \n     it('testCircleFillOpacityPropTwo',", "  console.info('testCircleOpacityPropOne START", "\n     \n     it('testCircleOpacityPropTwo', 0, ", "\n     \n     it('testCircleFillRulePropTwo', 0,", "shape).assertEqual('Circle');\n      let strJso", "$element(\"qrcodeTypeCircle\").getInspector()\n  ", "qual(\"DataPanelType.Circle\")\n      console.log", "onType = ButtonType.Circle\n  private content: ", "lobalThis.value.typeCircle);\n        console.i", "  console.info('testCircleStrokeProp START');\n", "  console.info('testCircleFillRulePropTwo STAR", "d).assertEqual('typeCircle')\n        expect(ob", ": null,\n        typeCircle : null,\n        typ", "\n     \n     it('testCircleOpacityPropThree', 0", "  console.info('testCircleFillProp START');\n  ", "()\n        this.typeCircle = this.$element(\"ty", "y\n@Component\nstruct CircleExample {\n  @State w", "is.typeCapsule, typeCircle : this.typeCircle,\n", "rtEqual('ButtonType.Circle')\n      expect(obj.", "     this.qrcodeTypeCircle = this.$element(\"qr", "  console.info('testCircleFillOpacityPropThree", "\n     \n     it('testCircleStrokeProp', 0, asyn", "\n     \n     it('testCircleFillRulePropOne', 0,", "le : this.qrcodeTypeCircle,\n            qrcode", "\n     \n     it('testCircleStrokeDashArrayProp'", "          qrcodeTypeCircle : this.qrcodeTypeCi", "eight: 150 })\n      Circle()\n        .width(`$", "this.maskType = new Circle({ width: 280, heigh", " { type: ButtonType.Circle, stateEffect: this."], "files": ["DataPanelJsunit.test.ets", "ButtonJsunit.test.ets", "circle.ets", "List.test.ets", "circleProps.test.js", "Button.ets", "ShapeClippingJsunit.test.ets", "commonComponentJsApi.test.js", "index.js", "shapeClipping.ets", "qrcodeProps.test.js", "DataPanel.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonType", "api_method_name": "Normal", "api_method_all": "Normal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 102, "since": 7, "api_used": "\u662f", "lines": ["ntStyle\": FontStyle.Normal\n          }\n       ", "assertEqual('Sticky.Normal');\n      console.in", ") {\n        Text(\"3.Normal\")\n      }.type(Butt", "ertEqual('FontStyle.Normal');\n      done();\n  ", "putType = InputType.Normal;\n  @State fontSize:", "rtEqual('FontWeight.Normal');\n      done();\n  ", "sertEqual(\"TextCase.Normal\")\n      expect(obj.", "rtEqual('ButtonType.Normal')\n      console.inf", "       Text('sticky:Normal , item2222')\n      ", "       Text('sticky:Normal , click me edit lis", "ky: Sticky = Sticky.Normal;\n  @State editMode:", "emState = ItemState.Normal\n\n  build() {\n    St", "sertEqual('TextCase.Normal');\n      done();\n  ", "    Text('Orange 18 Normal source-sans-pro tex", "Waiting ? ItemState.Normal : ItemState.Waiting", "PlayMode = PlayMode.Normal\n\n  onPageShow() {\n ", "fontStyle(FontStyle.Normal)\n        .fontColor", " .textCase(TextCase.Normal)\n            .fontC", "emState = ItemState.Normal\n  @State secondStat", "  }.type(ButtonType.Normal)\n      .backgroundC", "te.Skip ? ItemState.Normal : ItemState.Skip\n  ", "emState = ItemState.Normal\n  @State disabled: ", "onType = ButtonType.Normal;\n  @State fontSizeV", "', style: FontStyle.Normal }\n  @State fontColo", "rtEqual(\"FontWeight.Normal\")\n      expect(obj.", "fontStyle(FontStyle.Normal)\n        .fontWeigh", "', style: FontStyle.Normal })\n        .key('se", "PlayMode = PlayMode.Normal\n\n  build() {\n    Fl", " { type: ButtonType.Normal })\n            .bac", "ntWeight(FontWeight.Normal)\n        .textAlign", "rtEqual('ButtonType.Normal');\n      done();\n  ", "sertEqual('TextCase.Normal')\n      expect(obj.", " TextCase= TextCase.Normal\n  @State fontSizeVa", "', style: FontStyle.Normal })\n        .selecte", "   style: FontStyle.Normal\n        })\n        ", "r, style: FontStyle.Normal })\n        .itemSiz", "', style: FontStyle.Normal\n      };\n      try ", "    }.sticky(Sticky.Normal)\n          .editabl", "', style: FontStyle.Normal })\n        .optionF", " TextCase= TextCase.Normal\n  @State decoration"], "files": ["animate.ets", "Select.ets", "SelectJsunit.test.ets", "ListItemJsunit.test.ets", "Stepper.ets", "ListItem.ets", "playMode.ets", "Text.ets", "SpanJsunit.test.ets", "textStyle.ets", "ButtonJsunit.test.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "listItemProps.test.js", "TextStyleJsunit.test.ets", "TextArea.ets", "index.js", "Link.ets", "TextInputJsunit.test.ets", "stepper.ets", "select.ets", "textArea.ets", "textInput.ets", "listItem.ets", "Button.ets", "search.ets", "button.ets", "span.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonOptions", "api_method_all": "declare interface ButtonOptions {\n  \n  type?: ButtonType;\n\n  \n  stateEffect?: boolean;\n}", "api_method_name": "ButtonOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonOptions", "api_method_name": "type", "api_method_all": "type?: ButtonType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5337, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"type\": \"PanelType.Miniba", "er0100] expect(obj.$type) is: \" + (obj.$type", "is: \" + (obj.$attrs.type));\n      done();\n  ", "log0100] obj.$attrs.type is: \" + (obj.$attrs", ";\n      expect(obj.$type).assertEqual('Stepp", "    y: downY,\n      type: TouchType.Down,\n  ", "og0100] expect(obj.$type) is: \" + (obj.$type", "eck\n\nconst TYPE = '$type'\nconst ID = '$ID'\nc", "pe = eventData.data.type;\n      }\n    }\n  }\n", "        expect(obj.$type).assertEqual('Flex'", "      y: upY,\n      type: TouchType.Up,\n    ", ";\n      expect(obj.$type).assertEqual('TextA", "bj.$attrs.transform.type)\n        .assertEqu", ";\n      expect(obj.$type).assertEqual('GridC", "  expect(obj.$attrs.type).assertEqual(\"Panel", ";\n      expect(obj.$type).assertEqual('Swipe", "      .decoration({ type: this.decoration, c", "ean = true\n  @State type: PanelType = PanelT", " if (eventData.data.type != null) {\n        ", "type) is: \" + (obj.$type));\n      console.in", "pe = eventData.data.type;\n      }\n      if (", "extInput')\n        .type(this.inputType)\n   ", "          if (event.type === TouchType.Down)", ";\n      expect(obj.$type).assertEqual('Image", "          if (event.type === TouchType.Move)", ";\n      expect(obj.$type).assertEqual('Flex'", "  if(eventData.data.type != null) {\n        ", "eTest_0200 obj.obj.$type is: \" + obj.$type);", ".$type is: \" + obj.$type);\n      var res = o", "ata: {\n            \"type\": 'InputType.Email'", ";\n      expect(obj.$type).assertEqual('Gauge", "ull) {\n        this.type = eventData.data.ty", "          if (event.type === TouchType.Up) {", ";\n      expect(obj.$type).assertEqual('Text'", "   }\n      }\n      .type(this.type).mode(thi", " }\n      .type(this.type).mode(this.mode)\n  ", ";\n      expect(obj.$type).assertEqual('Row')", "yStep * i),\n        type: TouchType.Move\n   "], "files": ["pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Panel.ets", "sourceType.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "transition.ets", "textInput.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "toggle.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "span.ets", "NavigatorCode.ets", "buttonProps.test.js", "animateProps.test.js", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "Constants.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "panelProps.test.js", "sharedTransition.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonOptions", "api_method_name": "stateEffect", "api_method_all": "stateEffect?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["nsole.log(\"yr link0 stateEffect-'false'\" + JSON.str", "ype.Capsule)\n      .stateEffect(false)\n      .backg", "layButton {\n  @Link stateEffect: boolean\n\n  build()", "    Button(\"Button2 stateEffect \", { type: ButtonTy", "  .stateEffect(this.stateEffect)\n        .key(\"Butt", "testcase {\n  @State stateEffect: boolean = true\n  @", ", stateEffect: this.stateEffect })\n        .fontSiz", "olor.Pink)\n        .stateEffect(this.stateEffect)\n ", "       PlayButton({ stateEffect: $isPlaying })\n    ", "tringify(obj.$attrs.stateEffect))\n      console.inf", "nsole.log(\"yr link1 stateEffect-'false'\" + JSON.str", "is.buttonTypeValue, stateEffect: true })\n        .b", "    Button(\"Button1 stateEffect false\", { type: But", "  expect(obj.$attrs.stateEffect).assertEqual('true'", ".Gray)\n            .stateEffect(this.isPlaying)\n   ", " ButtonType.Circle, stateEffect: this.stateEffect }", "  expect(obj.$attrs.stateEffect).assertEqual('false"], "files": ["ButtonJsunit.test.ets", "Button.ets", "LinkJsunit.test.ets", "button.ets", "Link.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonInterface", "api_method_all": "interface ButtonInterface {\n  \n  (): ButtonAttribute;\n\n  \n  (options: ButtonOptions): ButtonAttribute;\n\n  \n  (label: ResourceStr, options?: ButtonOptions): ButtonAttribute;\n}", "api_method_name": "ButtonInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonInterface", "api_method_name": "options", "api_method_all": "(options: ButtonOptions): ButtonAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 791, "since": 7, "api_used": "\u662f", "lines": ["= await router.push(options);\n          await U", " start\");\n      let options = {\n        uri: 'p", "(obj.$attrs.overlay.options.offset.x).assertEqu", "(obj.$attrs.overlay.options.align).assertEqual(", "(obj.$attrs.overlay.options.offset.y).assertEqu", " (done) {\n      let options = {\n        uri: 'p"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonInterface", "api_method_name": "label", "api_method_all": "(label: ResourceStr, options?: ButtonOptions): ButtonAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 498, "since": 7, "api_used": "\u662f", "lines": ["opNone,\n            labelTarget: this.labelTa", "log(\"yr AppStorage7 label-'20'\" + JSON.string", "tor()\n         this.label = this.$element(\"la", "log(\"yr AppStorage0 label-'47'\" + JSON.string", "None:null,\n         label:null,\n         labe", "ize: '97%' },\n    { label: 'Small container',", "log(\"yr AppStorage6 label-'47'\" + JSON.string", "log(\"yr AppStorage5 label-'PropA'\" + JSON.str", "     labelNone:this.labelNone,\n         }\n   ", "ne = this.$element(\"labelNone\").getInspector(", "log(\"yr AppStorage8 label-'1'\" + JSON.stringi", "  expect(obj.$attrs.label).assertEqual('true'", "log(\"yr AppStorage2 label-'50'\" + JSON.string", "log(\"yr AppStorage9 label-' '\" + JSON.stringi", "         label:this.label,\n             label", "  expect(obj.$attrs.label).assertEqual('1.val", "  expect(obj.$attrs.label).assertEqual('false", "s ContainerInfo {\n  label: string = ''\n  size", "  expect(obj.$attrs.label).assertEqual('50');", "log(\"yr AppStorage3 label-'47'\" + JSON.string", "label,\n             labelNone:this.labelNone,", "el = this.$element(\"label\").getInspector()\n  ", "  expect(obj.$attrs.label).assertEqual('20');", "s () {\n        this.labelTarget = this.$eleme", "tringify(obj.$attrs.label))\n      console.inf", "  labelTarget: this.labelTarget,\n        }\n  ", "  expect(obj.$attrs.label).assertEqual('PropB", "  expect(obj.$attrs.label).assertEqual('47');", "  expect(obj.$attrs.label).assertEqual('1');\n", "tor()\n         this.labelNone = this.$element", "abel:null,\n         labelNone:null,\n         ", "log(\"yr AppStorage1 label-'47'\" + JSON.string", "log(\"yr AppStorage4 label-' '\" + JSON.stringi", "gNone,\n             label:this.label,\n       ", "one : null,\n        labelTarget: null,\n    },", "nerInfo[] = [\n    { label: 'Big container', s", "og(\"yr AppStorage11 label-'50'\" + JSON.string"], "files": ["animateTransformProps.test.js", "badgeProps.test.js", "List.test.js", "stepperItemProps.test.js", "tspanProps.test.js", "ButtonJsunit.test.ets", "layoutConstraints.ets", "toolbarItemProps.test.js", "animateMotionProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "commonComponentJsApi.test.js", "index.js", "AppStorageJsunit.test.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonAttribute", "api_method_all": "declare class ButtonAttribute extends CommonMethod<ButtonAttribute> {\n  \n  type(value: ButtonType): ButtonAttribute;\n\n  \n  stateEffect(value: boolean): ButtonAttribute;\n\n  \n  fontColor(value: ResourceColor): ButtonAttribute;\n\n  \n  fontSize(value: Length): ButtonAttribute;\n\n  \n  fontWeight(value: number | FontWeight | string): ButtonAttribute;\n\n  \n  fontStyle(value: FontStyle): ButtonAttribute;\n\n  \n  fontFamily(value: string | Resource): ButtonAttribute;\n}", "api_method_name": "ButtonAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonAttribute", "api_method_name": "type", "api_method_all": "type(value: ButtonType): ButtonAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5337, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"type\": \"PanelType.Miniba", "er0100] expect(obj.$type) is: \" + (obj.$type", "is: \" + (obj.$attrs.type));\n      done();\n  ", "log0100] obj.$attrs.type is: \" + (obj.$attrs", ";\n      expect(obj.$type).assertEqual('Stepp", "    y: downY,\n      type: TouchType.Down,\n  ", "og0100] expect(obj.$type) is: \" + (obj.$type", "eck\n\nconst TYPE = '$type'\nconst ID = '$ID'\nc", "pe = eventData.data.type;\n      }\n    }\n  }\n", "        expect(obj.$type).assertEqual('Flex'", "      y: upY,\n      type: TouchType.Up,\n    ", ";\n      expect(obj.$type).assertEqual('TextA", "bj.$attrs.transform.type)\n        .assertEqu", ";\n      expect(obj.$type).assertEqual('GridC", "  expect(obj.$attrs.type).assertEqual(\"Panel", ";\n      expect(obj.$type).assertEqual('Swipe", "      .decoration({ type: this.decoration, c", "ean = true\n  @State type: PanelType = PanelT", " if (eventData.data.type != null) {\n        ", "type) is: \" + (obj.$type));\n      console.in", "pe = eventData.data.type;\n      }\n      if (", "extInput')\n        .type(this.inputType)\n   ", "          if (event.type === TouchType.Down)", ";\n      expect(obj.$type).assertEqual('Image", "          if (event.type === TouchType.Move)", ";\n      expect(obj.$type).assertEqual('Flex'", "  if(eventData.data.type != null) {\n        ", "eTest_0200 obj.obj.$type is: \" + obj.$type);", ".$type is: \" + obj.$type);\n      var res = o", "ata: {\n            \"type\": 'InputType.Email'", ";\n      expect(obj.$type).assertEqual('Gauge", "ull) {\n        this.type = eventData.data.ty", "          if (event.type === TouchType.Up) {", ";\n      expect(obj.$type).assertEqual('Text'", "   }\n      }\n      .type(this.type).mode(thi", " }\n      .type(this.type).mode(this.mode)\n  ", ";\n      expect(obj.$type).assertEqual('Row')", "yStep * i),\n        type: TouchType.Move\n   "], "files": ["pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Panel.ets", "sourceType.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "transition.ets", "textInput.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "toggle.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "span.ets", "NavigatorCode.ets", "buttonProps.test.js", "animateProps.test.js", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "Constants.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "panelProps.test.js", "sharedTransition.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonAttribute", "api_method_name": "stateEffect", "api_method_all": "stateEffect(value: boolean): ButtonAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["nsole.log(\"yr link0 stateEffect-'false'\" + JSON.str", "ype.Capsule)\n      .stateEffect(false)\n      .backg", "layButton {\n  @Link stateEffect: boolean\n\n  build()", "    Button(\"Button2 stateEffect \", { type: ButtonTy", "  .stateEffect(this.stateEffect)\n        .key(\"Butt", "testcase {\n  @State stateEffect: boolean = true\n  @", ", stateEffect: this.stateEffect })\n        .fontSiz", "olor.Pink)\n        .stateEffect(this.stateEffect)\n ", "       PlayButton({ stateEffect: $isPlaying })\n    ", "tringify(obj.$attrs.stateEffect))\n      console.inf", "nsole.log(\"yr link1 stateEffect-'false'\" + JSON.str", "is.buttonTypeValue, stateEffect: true })\n        .b", "    Button(\"Button1 stateEffect false\", { type: But", "  expect(obj.$attrs.stateEffect).assertEqual('true'", ".Gray)\n            .stateEffect(this.isPlaying)\n   ", " ButtonType.Circle, stateEffect: this.stateEffect }", "  expect(obj.$attrs.stateEffect).assertEqual('false"], "files": ["ButtonJsunit.test.ets", "Button.ets", "LinkJsunit.test.ets", "button.ets", "Link.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonAttribute", "api_method_name": "fontColor", "api_method_all": "fontColor(value: ResourceColor): ButtonAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 384, "since": 7, "api_used": "\u662f", "lines": ["Size(35)\n          .fontColor(Color.Blue)\n       ", " {\n                \"fontColor\": this.fontColor,\n ", "ize(9).width('90%').fontColor(0xCCCCCC)\n        R", "hrink').fontSize(9).fontColor(0xCCCCCC).width('90", "extStyle {\n  @State fontColor: Color = Color.Red;", "grid').fontSize(20).fontColor(Color.Black).width(", "pect(eventData.data.fontColor).assertEqual(Color.", "\"[testTextStyle001] fontColor: \" + obj.$attrs.fon", "Blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ness').fontSize(15).fontColor(0xCCCCCC).width('90", "rast').fontSize(15).fontColor(0xCCCCCC).width('90", "ty 4').fontSize(20).fontColor(Color.Black).width(", "s rolling\"\n  @State fontColor: Color = Color.Blue", "blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ive text')\n        .fontColor(Color.Red)\n        ", "lor) {\n        this.fontColor = eventData.data.fo", "vert').fontSize(15).fontColor(0xCCCCCC).width('90", "'marquee')\n        .fontColor(this.fontColor)\n   ", "      .fontSize(12).fontColor(0xCCCCCC).maxLines(", "adow').fontSize(15).fontColor(0xCCCCCC).width('90", "tate').fontSize(15).fontColor(0xCCCCCC).width('90", "    .fontColor(this.fontColor)\n        .colorBlen", "  \"fontColor\": this.fontColor,\n              }\n  ", "xGrow\").fontSize(9).fontColor(0xCCCCCC).width('90", " row').fontSize(20).fontColor(Color.Black).width(", "  expect(obj.$attrs.fontColor).assertEqual('#FFFF", "e(20)\n        .key('fontColor')\n\n      Text(`text", "Items').fontSize(9).fontColor(0xCCCCCC).width('90", "or = eventData.data.fontColor;\n      } else if (e", "pro text')\n        .fontColor(Color.Orange)\n     ", "cale').fontSize(15).fontColor(0xCCCCCC).width('90", "ntColor}`)\n        .fontColor(this.fontColor)\n   ", "lor: \" + obj.$attrs.fontColor);\n      expect(obj.", "\"[testTextStyle002] fontColor: \" + obj.$attrs.fon", "ageShow() {\n    let fontColorChangeEvent = {\n    ", "    .fontColor(this.fontColor)\n        .fontSize(", " getInspectorByKey('fontColor');\n      console.in", "  events_emitter.on(fontColorChangeEvent, this.te", "rate').fontSize(15).fontColor(0xCCCCCC).width('90", "Basis').fontSize(9).fontColor(0xCCCCCC).width('90", " state is: ' + this.fontColor);\n          try {\n ", "ata: {\n            \"fontColor\": Color.Blue\n      ", "t font color ${this.fontColor}`)\n        .fontCol", "nSelf\").fontSize(9).fontColor(0xCCCCCC).width('90", " if (eventData.data.fontColor) {\n        this.fon"], "files": ["enumsHorizontalAlign.ets", "imageFit.ets", "Span.ets", "column.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "textArea.ets", "textInput.ets", "transForm.ets", "path.ets", "Column.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "PatternLock.ets", "Stepper.ets", "enumsImage.ets", "PieceCode.ets", "textStyle.ets", "imageEffects.ets", "textClock.ets", "layoutConstraints.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "Path.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "TextTimerJsunit.test.ets", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "ColumnSplit.ets", "colorGradient.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonAttribute", "api_method_name": "fontSize", "api_method_all": "fontSize(value: Length): ButtonAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 588, "since": 7, "api_used": "\u662f", "lines": ["lor.Green)\n        .fontSize(this.fontSize)\n    ", "w').key(\"flexGrow\").fontSize(9).fontColor(0xCCCC", "t('4')\n            .fontSize(20)\n            .us", "ge Two')\n          .fontSize(35)\n          .font", "  Text('grayscale').fontSize(15).fontColor(0xCCC", "     Text('shadow').fontSize(15).fontColor(0xCCC", "  Text('hueRotate').fontSize(15).fontColor(0xCCC", "t('1')\n            .fontSize(20)\n            .us", "     Text('invert').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backdr", "ETS TEST')\n        .fontSize(50)\n        .fontWe", "g container: grid').fontSize(20).fontColor(Color", "(60)\n              .fontSize(18)\n              .", "0)\n                .fontSize(16)\n               ", "ext('default text').fontSize(20)\n\n      Text(`te", " {\n                \"fontSize\": this.fontSize,\n  ", "   \"fontSize\": this.fontSize,\n              }\n  ", "2cb)\n              .fontSize(40)\n              .", "     Text('Center').fontSize(25)\n        }\n     ", "     .fontSize(this.fontSize)\n        .allowScal", "bb2cb)\n            .fontSize(20)\n            .as", "').key(\"alignSelf\").fontSize(9).fontColor(0xCCCC", "  Text('font blur').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backgr", "ng container: row').fontSize(20).fontColor(Color", "Color.Red;\n  @State fontSize: string = 20;\n  @St", "xt font size ${this.fontSize}`)\n        .fontSiz", "enter)\n            .fontSize(20)\n        }, item", "fontColor)\n        .fontSize(20)\n        .key('f", "t('3')\n            .fontSize(20)\n            .us", "e four')\n          .fontSize(35)\n          .font", " Text('brightness').fontSize(15).fontColor(0xCCC", "margin(30)\n        .fontSize(20)\n        .onClic", " Text('alignItems').fontSize(9).fontColor(0xCCCC", " state is: ' + this.fontSize);\n          try {\n ", "displayPriority 4').fontSize(20).fontColor(Color", " layer')\n          .fontSize(12).fontColor(0xCCC", "olor.Blue;\n  @State fontSize: number = 50;\n  @St", "  Text('flexBasis').fontSize(9).fontColor(0xCCCC", "   Text('saturate').fontSize(15).fontColor(0xCCC", "ext('backdropBlur').fontSize(15).fontColor(0xCCC", "ge One')\n          .fontSize(35)\n          .font", "   Text('contrast').fontSize(15).fontColor(0xCCC", "t('2')\n            .fontSize(20)\n            .us", "       Text('Left').fontSize(25)\n        }\n     ", "      Text('Right').fontSize(25)\n        }\n     ", " Three')\n          .fontSize(35)\n          .font", " Text('flexShrink').fontSize(9).fontColor(0xCCCC"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "placement.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "Stack.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "stepper.ets", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "MarqueeJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "lazyForEach.ets", "listItem.ets", "grid.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "rating.ets", "Path.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "Toggle.ets", "slider.ets", "Calendar.ets", "refresh.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonAttribute", "api_method_name": "fontWeight", "api_method_all": "fontWeight(value: number | FontWeight | string): ButtonAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 147, "since": 7, "api_used": "\u662f", "lines": [": FoodData\n  @State fontWeight: FontWeight = FontW", "\"[testTextStyle020] fontWeight: \" + obj.$attrs.fon", "Size(17.4)\n        .fontWeight(this.fontWeight)\n  ", "ata: {\n            \"fontWeight\": 0x80000000\n      ", "(2)\n    }\n    .key('fontWeight')\n  }\n\n  build() {\n", "ata: {\n            \"fontWeight\": 400\n          }\n ", "ata: {\n            \"fontWeight\": 0x7FFFFFFF\n      ", "  expect(obj.$attrs.fontWeight).assertEqual('FontW", "ght) {\n        this.fontWeight = eventData.data.fo", " getInspectorByKey('fontWeight');\n      console.in", "ATTRS_FONTWEIGHT = 'fontWeight'\nconst ATTRS_FONTST", "ntSize(50)\n        .fontWeight(FontWeight.Bold)\n  ", "\"[testTextStyle018] fontWeight: \" + obj.$attrs.fon", "   .fontWeight(this.fontWeight)\n        .fontSize(", "tWeight}`)\n        .fontWeight(this.fontWeight)\n  ", "gCallBack);\n    let fontWeightChangeEvent = {\n    ", "t fontWeight ${this.fontWeight}`)\n        .fontWei", "  events_emitter.on(fontWeightChangeEvent, this.te", ".fontSize)\n        .fontWeight(FontWeight.Bold)\n  ", "le.Italic;\n  @State fontWeight: string = 700;\n  @S", "ht = eventData.data.fontWeight;\n      } else if (e", "e(20)\n        .key('fontWeight')\n\n      Text(`text", "le.Italic)\n        .fontWeight(700)\n        .fontF", "ata: {\n            \"fontWeight\": 'error'\n         ", "ale(false)\n        .fontWeight(FontWeight.Bold)\n  ", "ght: \" + obj.$attrs.fontWeight);\n      expect(obj.", "\"[testTextStyle017] fontWeight: \" + obj.$attrs.fon", "le.Normal)\n        .fontWeight(400)\n        .fontF", ")\n\n      Text(`text fontWeight ${this.fontWeight}`", "\"[testTextStyle016] fontWeight: \" + obj.$attrs.fon", "\"[testTextStyle019] fontWeight: \" + obj.$attrs.fon", "   .fontWeight(this.fontWeight)\n        .layoutWei", " if (eventData.data.fontWeight) {\n        this.fon"], "files": ["systemRouterA.ets", "RowSplit.ets", "gridPage.ets", "Slider.ets", "PanDirectionJsunit.test.ets", "Qrcode.ets", "Text.ets", "textStyle.ets", "Counter.ets", "Stack.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "Constants.ets", "ohosRouterB.ets", "Progress.ets", "Blank.ets", "ColumnSplit.ets", "Prop.ets", "Scroll.ets", "FormComponentPage.ets", "GestureModeJsunit.test.ets", "TextStyleJsunit.test.ets", "marquee.ets", "Rating.ets", "AppStorage.ets", "TextArea.ets", "QrCode.ets", "GridContainer.ets", "direction.ets", "ohosRouterA.ets", "index.ets", "Link.ets", "systemRouterB.ets", "TextInputJsunit.test.ets", "TextAreaJsunit.test.ets", "textArea.ets", "textInput.ets", "Button.ets", "Image.ets", "Calendar.ets", "fontWeight.ets", "ScrollBar.ets", "Badge.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonAttribute", "api_method_name": "fontStyle", "api_method_all": "fontStyle(value: FontStyle): ButtonAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 62, "since": 8, "api_used": "\u662f", "lines": ["gCallBack);\n    let fontStyleChangeEvent = {\n    ", "\"[testTextStyle014] fontStyle: \" + obj.$attrs.fon", "ull) {\n        this.fontStyle = eventData.data.fo", "  expect(obj.$attrs.fontStyle).assertEqual('FontS", "  events_emitter.on(fontStyleChangeEvent, this.te", "le = eventData.data.fontStyle;\n      }\n      if(e", "ata: {\n            \"fontStyle\": FontStyle.Normal\n", "t font style ${this.fontStyle}`)\n        .fontSty", "ntSize(20)\n        .fontStyle(FontStyle.Normal)\n ", "ntStyle}`)\n        .fontStyle(this.fontStyle)\n   ", "number = 1\n  @State fontStyle: FontStyle = FontSt", "\"[testTextStyle015] fontStyle: \" + obj.$attrs.fon", "ntSize(20)\n        .fontStyle(FontStyle.Italic)\n ", "\"[testTextStyle012] fontStyle: \" + obj.$attrs.fon", ".Bold)\n            .fontStyle(FontStyle.Italic)\n ", "\"[testTextStyle011] fontStyle: \" + obj.$attrs.fon", "ring = 20;\n  @State fontStyle: FontStyle = FontSt", "else {\n        this.fontStyle = eventData.data.fo", "    .fontStyle(this.fontStyle)\n        .fontSize(", " getInspectorByKey('fontStyle');\n      console.in", "ata: {\n            \"fontStyle\": 0x80000000\n      ", "ns-serif\")\n        .fontStyle(FontStyle.Normal)\n ", " ATTRS_FONTSTYLE = 'fontStyle'\nconst ATTRS_FONTSI", "ition.End;\n  @State fontStyle: FontStyle = FontSt", "le = eventData.data.fontStyle;\n      }\n    }\n  }\n", "  if(eventData.data.fontStyle != null) {\n        ", "ata: {\n            \"fontStyle\": 'error'\n         ", "yle: \" + obj.$attrs.fontStyle);\n      expect(obj.", "ata: {\n            \"fontStyle\": 0x7FFFFFFF\n      ", "    .fontStyle(this.fontStyle)\n        .showDelet", "his.Color)\n        .fontStyle(this.fontStyle)\n   ", "e(20)\n        .key('fontStyle')\n\n      Text(`text", "\"[testTextStyle013] fontStyle: \" + obj.$attrs.fon"], "files": ["TextInputJsunit.test.ets", "textStyle.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "textArea.ets", "textInput.ets", "Constants.ets", "TextArea.ets", "PieceCode.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ButtonAttribute", "api_method_name": "fontFamily", "api_method_all": "fontFamily(value: string | Resource): ButtonAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 48, "since": 0, "api_used": "\u662f", "lines": ["gCallBack);\n    let fontFamilyChangeEvent = {\n    ", "\"[testTextStyle023] fontFamily: \" + obj.$attrs.fon", "ily: \" + obj.$attrs.fontFamily);\n      expect(obj.", "  expect(obj.$attrs.fontFamily).assertEqual('cursi", "\"[testTextStyle022] fontFamily: \" + obj.$attrs.fon", "  events_emitter.on(fontFamilyChangeEvent, this.te", "  expect(obj.$attrs.fontFamily).assertEqual('sans-", "e(20)\n        .key('fontFamily')\n\n      Text('red ", "tringify(obj.$attrs.fontFamily));\n      console.lo", "fontStyle)\n        .fontFamily(\"sans-serif\")\n     ", "  expect(obj.$attrs.fontFamily).assertEqual(\"sans-", "eight(700)\n        .fontFamily('cursive')\n        ", "ht.Bold)\n          .fontFamily('cursive')\n        ", "eight(400)\n        .fontFamily('source-sans-pro,cu", "ight.Bold)\n        .fontFamily('cursive')\n        ", "onsole.log(\"cd text fontFamily\" + JSON.stringify(o", "ily) {\n        this.fontFamily = eventData.data.fo", "ATTRS_FONTFAMILY = 'fontFamily'\nconst ATTRS_FONTWE", "tFamily}`)\n        .fontFamily(this.fontFamily)\n  ", "99')\n              .fontFamily('source-sans-pro,cu", "ly = eventData.data.fontFamily;\n      } else {\n   ", "t fontFamily ${this.fontFamily}`)\n        .fontFam", "ata: {\n            \"fontFamily\": 'Arial'\n         ", "\"[testTextStyle021] fontFamily: \" + obj.$attrs.fon", "  expect(obj.$attrs.fontFamily).assertEqual('Arial", "  expect(obj.$attrs.fontFamily).assertEqual('error", " getInspectorByKey('fontFamily');\n      console.in", " if (eventData.data.fontFamily) {\n        this.fon", "ing = 700;\n  @State fontFamily: string = 'sans-ser", "ight.Bold)\n        .fontFamily(\"sans-serif\")\n     ", "ing(5)\n            .fontFamily(\"sans-serif\")\n     ", "   .fontFamily(this.fontFamily)\n        .fontSize(", ")\n\n      Text(`text fontFamily ${this.fontFamily}`", "ata: {\n            \"fontFamily\": 'error'\n         "], "files": ["TextInputJsunit.test.ets", "textStyle.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "textArea.ets", "textInput.ets", "Constants.ets", "sideBar.ets", "TextArea.ets", "Marquee.ets", "Text.ets"], "is_white": " ", "desc": " "}]}