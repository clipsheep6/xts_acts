{"subsystem_ch": "\u5206\u5e03\u5f0f\u6570\u636e\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "distributeddatamgr", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.data.rdb", "api": [{"api_class_name": "rdb", "api_method_all": "declare namespace rdb {\n    \n    function getRdbStore(context: Context, config: StoreConfig, version: number, callback: AsyncCallback<RdbStore>): void;\n    function getRdbStore(context: Context, config: StoreConfig, version: number): Promise<RdbStore>;\n\n    \n    function deleteRdbStore(context: Context, name: string, callback: AsyncCallback<void>): void;\n    function deleteRdbStore(context: Context, name: string): Promise<void>;\n\n    \n    enum SyncMode {\n        \n        SYNC_MODE_PUSH = 0,\n\n        \n        SYNC_MODE_PULL = 1,\n    }\n\n    \n    enum SubscribeType {\n        \n        SUBSCRIBE_TYPE_REMOTE = 0,\n    }\n\n    \n    interface RdbStore {\n        \n        insert(name: string, values: ValuesBucket, callback: AsyncCallback<number>): void;\n        insert(name: string, values: ValuesBucket): Promise<number>;\n\n        \n        update(values: ValuesBucket, rdbPredicates: RdbPredicates, callback: AsyncCallback<number>): void;\n        update(values: ValuesBucket, rdbPredicates: RdbPredicates): Promise<number>;\n\n        \n        delete(rdbPredicates: RdbPredicates, callback: AsyncCallback<number>): void;\n        delete(rdbPredicates: RdbPredicates): Promise<number>;\n\n        \n        query(rdbPredicates: RdbPredicates, columns: Array<string>, callback: AsyncCallback<ResultSet>): void;\n        query(rdbPredicates: RdbPredicates, columns?: Array<string>): Promise<ResultSet>;\n\n        \n        querySql(sql: string, bindArgs: Array<ValueType>, callback: AsyncCallback<ResultSet>): void;\n        querySql(sql: string, bindArgs?: Array<ValueType>): Promise<ResultSet>;\n\n        \n        executeSql(sql: string, bindArgs: Array<ValueType>, callback: AsyncCallback<void>): void;\n        executeSql(sql: string, bindArgs?: Array<ValueType>): Promise<void>;\n\n        \n        beginTransaction():void;\n\n        \n        commit():void;\n\n        \n        rollBack():void;\n\n        \n        setDistributedTables(tables: Array<string>, callback: AsyncCallback<void>): void;\n        setDistributedTables(tables: Array<string>): Promise<void>;\n\n        \n        obtainDistributedTableName(device: string, table: string, callback: AsyncCallback<string>): void;\n        obtainDistributedTableName(device: string, table: string): Promise<string>;\n\n        \n        sync(mode: SyncMode, predicates: RdbPredicates, callback: AsyncCallback<Array<[string, number]>>): void;\n        sync(mode: SyncMode, predicates: RdbPredicates): Promise<Array<[string, number]>>;\n\n        \n        on(event: 'dataChange', type: SubscribeType, observer: Callback<Array<string>>): void;\n\n        \n        off(event:'dataChange', type: SubscribeType, observer: Callback<Array<string>>): void;\n    }\n\n    \n    type ValueType = number | string | boolean;\n\n    \n    type ValuesBucket = {\n        [key: string]: ValueType | Uint8Array | null;\n    }\n\n    \n    interface StoreConfig {\n        name: string;\n    }\n\n    \n    class RdbPredicates {\n        \n        constructor(name: string)\n\n        \n        inDevices(devices: Array<string>): RdbPredicates;\n\n        \n        inAllDevices(): RdbPredicates;\n\n        \n        equalTo(field: string, value: ValueType): RdbPredicates;\n\n        \n        notEqualTo(field: string, value: ValueType): RdbPredicates;\n\n        \n        beginWrap(): RdbPredicates;\n\n        \n        endWrap(): RdbPredicates;\n\n        \n        or(): RdbPredicates;\n\n        \n        and(): RdbPredicates;\n\n        \n        contains(field: string, value: string): RdbPredicates;\n\n        \n        beginsWith(field: string, value: string): RdbPredicates;\n\n        \n        endsWith(field: string, value: string): RdbPredicates;\n\n        \n        isNull(field: string): RdbPredicates;\n\n        \n        isNotNull(field: string): RdbPredicates;\n\n        \n        like(field: string, value: string): RdbPredicates;\n\n        \n        glob(field: string, value: string): RdbPredicates;\n\n        \n        between(field: string, low: ValueType, high: ValueType): RdbPredicates;\n\n        \n        notBetween(field: string, low: ValueType, high: ValueType): RdbPredicates;\n\n        \n        greaterThan(field: string, value: ValueType): RdbPredicates;\n\n        \n        lessThan(field: string, value: ValueType): RdbPredicates;\n\n        \n        greaterThanOrEqualTo(field: string, value: ValueType): RdbPredicates;\n\n        \n        lessThanOrEqualTo(field: string, value: ValueType): RdbPredicates;\n\n        \n        orderByAsc(field: string): RdbPredicates;\n\n        \n        orderByDesc(field: string): RdbPredicates;\n\n        \n        distinct(): RdbPredicates;\n\n        \n        limitAs(value: number): RdbPredicates;\n\n        \n        offsetAs(rowOffset: number): RdbPredicates;\n\n        \n        groupBy(fields: Array<string>): RdbPredicates;\n\n        \n        indexedBy(field: string): RdbPredicates;\n\n        \n        in(field: string, value: Array<ValueType>): RdbPredicates;\n\n        \n        notIn(field: string, value: Array<ValueType>): RdbPredicates;\n    }\n}", "api_method_name": "rdb", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 530, "since": 0, "api_used": "\u662f", "lines": [", 1);\n        await rdbStore.executeSql(CRE", "db from '@ohos.data.rdb';\nimport dataAbilit", "beforeAll')\n        rdbStore = await dataRd", "edicates.db\",\n}\nvar rdbStore = undefined;\nv", " let result = await rdbStore.query(predicat", "}\n            await rdbStore.insert(\"AllDat", "'afterAll')\n        rdbStore = null\n       "], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "rdb", "api_method_name": "getRdbStore", "api_method_all": "function getRdbStore(context: Context, config: StoreConfig, version: number, callback: AsyncCallback<RdbStore>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["ore = await dataRdb.getRdbStore(STORE_CONFIG, CURRENT_STORE_VERSION);\n ", "rePromise = dataRdb.getRdbStore(storeConfig, 4);\n        storePromise.t", "rePromise = dataRdb.getRdbStore(STORE_CONFIG, 6);\n        storePromise.", "rePromise = dataRdb.getRdbStore(STORE_CONFIG, 2);\n        storePromise.", "ore = await dataRdb.getRdbStore(config, 1);\n            console.log(TAG", " console.log(TAG + \"getRdbStore done: \" + store);\n                await", "rePromise = dataRdb.getRdbStore(STORE_CONFIG, 1);\n        storePromise.", "ore = await dataRdb.getRdbStore(STORE_CONFIG, 1);\n        await rdbStor", " console.log(TAG + \"getRdbStore with wrong path\");\n        })\n        s", " console.log(TAG + \"getRdbStore done: \" + store);\n            } catch (", " console.log(TAG + \"getRdbStore done\" + ret);\n            expect(null)."], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "rdb", "api_method_name": "getRdbStore", "api_method_all": "function getRdbStore(context: Context, config: StoreConfig, version: number): Promise<RdbStore>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "rdb", "api_method_name": "deleteRdbStore", "api_method_all": "function deleteRdbStore(context: Context, name: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["      await dataRdb.deleteRdbStore(\"InsertTest.db\");\n    })\n\n    console.l", "      await dataRdb.deleteRdbStore('Delete.db');\n    })\n\n    afterAll(asyn", "      await dataRdb.deleteRdbStore(\"Delete.db\");\n    })\n\n    afterAll(asyn", "      await dataRdb.deleteRdbStore(STORE_NAME);\n    })\n\n    console.log(TA", "      await dataRdb.deleteRdbStore(\"Predicates.db\");\n    })\n\n    function ", "      await dataRdb.deleteRdbStore(\"InsertTest.db\");\n        rdbStore = nu", "      await dataRdb.deleteRdbStore(\"ExcuteSqlTest.db\");\n    })\n\n    \n    i", "      await dataRdb.deleteRdbStore(\"rdbstore.db\");\n    })\n\n    afterAll(as", "      await dataRdb.deleteRdbStore('Resultset.db');\n    })\n    //\u63d2\u5165\u6570\u636e\n    "], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "rdb", "api_method_name": "deleteRdbStore", "api_method_all": "function deleteRdbStore(context: Context, name: string): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SyncMode", "api_method_all": "enum SyncMode {\n        \n        SYNC_MODE_PUSH = 0,\n\n        \n        SYNC_MODE_PULL = 1,\n    }", "api_method_name": "SyncMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": [" var mode = factory.SyncMode.PULL_ONLY;\n        ", " pullonly = factory.SyncMode.PULL_ONLY;\n        ", " var mode = factory.SyncMode.PUSH_ONLY;\n        ", " var mode = factory.SyncMode.PUSH_PULL;\n        ", " pushpull = factory.SyncMode.PUSH_PULL;\n        ", " pushonly = factory.SyncMode.PUSH_ONLY;\n        ", "bStore.sync(dataRdb.SyncMode.SYNC_MODE_PULL, pre", "bStore.sync(dataRdb.SyncMode.SYNC_MODE_PUSH, pre"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SyncMode", "api_method_name": "SYNC_MODE_PUSH", "api_method_all": "SYNC_MODE_PUSH = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["nc(dataRdb.SyncMode.SYNC_MODE_PUSH, predicates);\n     "], "files": ["RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SyncMode", "api_method_name": "SYNC_MODE_PULL", "api_method_all": "SYNC_MODE_PULL = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["nc(dataRdb.SyncMode.SYNC_MODE_PULL, predicates);\n     "], "files": ["RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeType", "api_method_all": "enum SubscribeType {\n        \n        SUBSCRIBE_TYPE_REMOTE = 0,\n    }", "api_method_name": "SubscribeType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["t('testSubscribetypeSubscribeTypeAll_001', 0, functio", "var local = factory.SubscribeType.SUBSCRIBE_TYPE_LOCA", "  var all = factory.SubscribeType.SUBSCRIBE_TYPE_ALL;", "ataChange', factory.SubscribeType.SUBSCRIBE_TYPE_ALL,", "t('testSubscribetypeSubscribeTypeLocal_001', 0, funct", "ar remote = factory.SubscribeType.SUBSCRIBE_TYPE_REMO", "t('testSubscribetypeSubscribeTypeRemote_001', 0, func"], "files": ["SingleKvStorePromiseJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeType", "api_method_name": "SUBSCRIBE_TYPE_REMOTE", "api_method_all": "SUBSCRIBE_TYPE_REMOTE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["ctory.SubscribeType.SUBSCRIBE_TYPE_REMOTE;\n        console.in", "Value Subscribetype.SUBSCRIBE_TYPE_REMOTE\n     */\n    it('tes", "-API8]Subscribetype.SUBSCRIBE_TYPE_REMOTE\n     * @tc.desc Tes"], "files": ["SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_all": "interface RdbStore {\n        \n        insert(name: string, values: ValuesBucket, callback: AsyncCallback<number>): void;\n        insert(name: string, values: ValuesBucket): Promise<number>;\n\n        \n        update(values: ValuesBucket, rdbPredicates: RdbPredicates, callback: AsyncCallback<number>): void;\n        update(values: ValuesBucket, rdbPredicates: RdbPredicates): Promise<number>;\n\n        \n        delete(rdbPredicates: RdbPredicates, callback: AsyncCallback<number>): void;\n        delete(rdbPredicates: RdbPredicates): Promise<number>;\n\n        \n        query(rdbPredicates: RdbPredicates, columns: Array<string>, callback: AsyncCallback<ResultSet>): void;\n        query(rdbPredicates: RdbPredicates, columns?: Array<string>): Promise<ResultSet>;\n\n        \n        querySql(sql: string, bindArgs: Array<ValueType>, callback: AsyncCallback<ResultSet>): void;\n        querySql(sql: string, bindArgs?: Array<ValueType>): Promise<ResultSet>;\n\n        \n        executeSql(sql: string, bindArgs: Array<ValueType>, callback: AsyncCallback<void>): void;\n        executeSql(sql: string, bindArgs?: Array<ValueType>): Promise<void>;\n\n        \n        beginTransaction():void;\n\n        \n        commit():void;\n\n        \n        rollBack():void;\n\n        \n        setDistributedTables(tables: Array<string>, callback: AsyncCallback<void>): void;\n        setDistributedTables(tables: Array<string>): Promise<void>;\n\n        \n        obtainDistributedTableName(device: string, table: string, callback: AsyncCallback<string>): void;\n        obtainDistributedTableName(device: string, table: string): Promise<string>;\n\n        \n        sync(mode: SyncMode, predicates: RdbPredicates, callback: AsyncCallback<Array<[string, number]>>): void;\n        sync(mode: SyncMode, predicates: RdbPredicates): Promise<Array<[string, number]>>;\n\n        \n        on(event: 'dataChange', type: SubscribeType, observer: Callback<Array<string>>): void;\n\n        \n        off(event:'dataChange', type: SubscribeType, observer: Callback<Array<string>>): void;\n    }", "api_method_name": "RdbStore", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 123, "since": 7, "api_used": "\u662f", "lines": [" = await dataRdb.getRdbStore(STORE_CONFIG, 1);\n ", "await dataRdb.deleteRdbStore(STORE_NAME);\n    })", ")\n\n    \n    it('testRdbStoreDelete0003', 0, asyn", " \"************* testRdbStoreDistributed001 end *", " '************* testRdbStoreDelete0004 end *****", " '************* testRdbStoreDelete0001 start ***", " \"************* testRdbStoreDistributed0008 end ", " \"************* testRdbStoreDistributed004 end *", " '************* testRdbStoreDelete0006 start ***", " \"************* testRdbStoreDistributed006 start", " '************* testRdbStoreDelete0005 start ***", " '************* testRdbStoreDelete0001 end *****", " \"************* testRdbStoreDistributed003 start", ")\n\n    \n    it('testRdbStoreDistributed0006', 0,", " \"************* testRdbStoreDistributed002 start", ")\n\n    \n    it('testRdbStoreDistributed0007', 0,", " '************* testRdbStoreDelete0005 end *****", "est.js')\nrequire('./RdbStoreResultSetJsunit.test", " \"************* testRdbStoreDistributed005 end *", " \"************* testRdbStoreDistributed0007 star", "await dataRdb.deleteRdbStore(\"Predicates.db\");\n ", ";\n\n    \n    it('testRdbStoreDistributed0001', 0,", " \"************* testRdbStoreDistributed003 end *", ")\n\n    \n    it('testRdbStoreDelete0004', 0, asyn", " = await dataRdb.getRdbStore(config, 1);\n       ", " \"************* testRdbStoreDistributed002 end *", ");\n    \n    it('testRdbStoreDelete0001', 0, asyn", " '************* testRdbStoreDelete0003 end *****", "await dataRdb.deleteRdbStore('Delete.db');\n    }", " '************* testRdbStoreDelete0004 start ***", ")\n\n    \n    it('testRdbStoreDistributed0003', 0,", ")\n\n    \n    it('testRdbStoreDelete0005', 0, asyn", "st.js')\t\nrequire('./RdbStoreDistributedJsunit.te", " '************* testRdbStoreDelete0002 start ***", " \"************* testRdbStoreDistributed001 start", " \"************* testRdbStoreDistributed006 end *", ")\n\n    \n    it('testRdbStoreDistributed0008', 0,", ")\n\n    \n    it('testRdbStoreDistributed0004', 0,", " \"************* testRdbStoreDistributed004 start", ")\n\n    \n    it('testRdbStoreDistributed0005', 0,", " \"************* testRdbStoreDistributed0007 end ", ")\n\n    \n    it('testRdbStoreDistributed0002', 0,", " \"************* testRdbStoreDistributed005 start", ")\n\n    \n    it('testRdbStoreDelete0002', 0, asyn", " '************* testRdbStoreDelete0002 end *****", " '************* testRdbStoreDelete0006 end *****", " '************* testRdbStoreDelete0003 start ***", " \"************* testRdbStoreDistributed0008 star", ")\n\n    \n    it('testRdbStoreDelete0006', 0, asyn"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "insert", "api_method_all": "insert(name: string, values: ValuesBucket, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 123, "since": 7, "api_used": "\u662f", "lines": ["console.log(TAG + \":insert_promise_0091 end\");\n    })\n\n    /**\n   ", "UB_DDM_DataShare_JS_insert_promise_0091\n     * @tc.desc data share", "@tc.name data share insert_callback test\n     * @tc.number SUB_DDM", "est\n     */\n    it('insert_promise_0091', 0, async function (done)", "est\n     */\n    it('insert_callback_0090', 0, async function (done", "console.log(TAG + \":insert_callback_0090 start\");\n        try {\n  ", "console.log(TAG + \":insert_callback_0092 start\");\n        try {\n  ", "@tc.name data share insert_promise test\n     * @tc.number SUB_DDM_", "UB_DDM_DataShare_JS_insert_callback_0090\n     * @tc.desc data shar", " console.log(TAG + \"insert one record success \" + rowId)\n         ", "     await rdbStore.insert(\"test\", valueBucket)\n        }\n\n       ", "     await rdbStore.insert(\"test\", valueBucket)\n        }\n        ", "     await rdbStore.insert(\"AllDataType\", valueBucket)\n        }\n ", "@tc.desc data share insert_callback test\n     */\n    it('insert_ca", "       console.log(\"insert1 error \" + e);\n        }\n        result", "\n            helper.insert(\n                URI,\n                v", " console.log(TAG + \"insert one record failed\");\n            expect", "===================>insertCallback=======================>\");\n    ", "est\n     */\n    it('insert_callback_0092', 0, async function (done", "Id = await rdbStore.insert(\"employee\", record)\n            console", "UB_DDM_DataShare_JS_insert_callback_0092\n     * @tc.desc data shar", "  }\n            let insertPromise = rdbStore.insert(\"wrong\", value", "\n            helper.insert(\n                null,\n                ", "     await rdbStore.insert('test', valueBucket)\n        }\n        ", "console.log(TAG + \":insert_promise_0081 start\");\n        try {\n   ", "@tc.desc data share insert_promise test\n     */\n    it('insert_pro", "console.log(TAG + \":insert_callback_0092 end\");\n    })\n\n    /**\n  ", "console.log(TAG + \":insert_callback_0090 end\");\n    })\n\n    /**\n  "], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "insert", "api_method_all": "insert(name: string, values: ValuesBucket): Promise<number>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["Bucket)\n            insertPromise.then(async (ret) => {\n          "], "files": ["RdbstoreStoreExcuteSqlJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbstoreUpdateJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "update", "api_method_all": "update(values: ValuesBucket, rdbPredicates: RdbPredicates, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 70, "since": 7, "api_used": "\u662f", "lines": [" console.log(TAG + \"update done: \" + ret);\n                    exp", "UB_DDM_DataShare_JS_update_promise_0121\n     * @tc.desc data share", "                let updatePromise = rdbStore.update(valueBucket, p", "est\n     */\n    it('update_callback_0122', 0, async function (done", "                let updatePromise = rdbStore.update(emptyBucket, p", "ePromise = rdbStore.update(emptyBucket, predicates)\n              ", "console.log(TAG + \":update_callback_0123 start\");\n        try {\n  ", "Id = await rdbStore.update(record, predicate);\n                con", "@tc.name data share update_promise test\n     * @tc.number SUB_DDM_", "\n            helper.update(\n                URI,\n                v", "est\n     */\n    it('update_promise_0121', 0, async function (done)", " console.log(TAG + \"update error\");\n                expect(null).a", " console.log(TAG + \"update done: \" + ret);\n                let res", "est\n     */\n    it('update_callback_0123', 0, async function (done", "            //await updatePromise\n        }\n        done();\n      ", "console.log(TAG + \":update_callback_0122 start\");\n        try {\n  ", " console.log(TAG + \"update one record failed\");\n                ex", "\n            helper.update(\n                URI,\n                n", "ePromise = rdbStore.update(valueBucket, predicates)\n              ", "console.log(TAG + \":update_callback_0120 start\");\n        try {\n  ", "est\n     */\n    it('update_callback_0120', 0, async function (done", "console.log(TAG + \":update_callback_0123 end\");\n    })\n\n    /**\n  ", " console.log(TAG + \"update one record success \" + rowId)\n         ", " console.log(TAG + \"update done: \" + ret);\n            }).catch((e", "===================>updateCallback=======================>\");\n    ", "\n            helper.update(\n                null,\n                ", " console.log(TAG + \"update with null table name\");\n               ", "@tc.name data share update_callback test\n     * @tc.number SUB_DDM", "console.log(TAG + \":update_promise_0121 start\");\n        try {\n   ", "console.log(TAG + \":update_callback_0120 end\");\n    })\n\n    /**\n  ", "@tc.desc data share update_callback test\n     */\n    it('update_ca", "UB_DDM_DataShare_JS_update_callback_0123\n     * @tc.desc data shar", "UB_DDM_DataShare_JS_update_callback_0122\n     * @tc.desc data shar", "1\")\n            let updatePromise = rdbStore.update(valueBucket, p", " console.log(TAG + \"update with wrong valueBucket\");\n             ", "ePromise = rdbStore.update(valueBucket, predicates)\n            up", " console.log(TAG + \"update with wrong condition\");\n               ", "console.log(TAG + \":update_promise_0121 end\");\n    })\n\n    /**\n   ", "UB_DDM_DataShare_JS_update_callback_0120\n     * @tc.desc data shar", "@tc.desc data share update_promise test\n     */\n    it('update_pro", "console.log(TAG + \":update_callback_0122 end\");\n    })\n\n    /**\n  "], "files": ["DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "SchemaJsunit.test.js", "RdbstoreUpdateJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "update", "api_method_all": "update(values: ValuesBucket, rdbPredicates: RdbPredicates): Promise<number>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["es)\n                updatePromise.then(async (ret) => {\n          ", "icates)\n            updatePromise.then(async (ret) => {\n          "], "files": ["RdbstoreUpdateJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "delete", "api_method_all": "delete(rdbPredicates: RdbPredicates, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 224, "since": 7, "api_used": "\u662f", "lines": [" console.log(TAG + 'delete done: ' + ret)\n                expect(n", "console.log(TAG + \":delete_callback_0113 end\");\n    })\n\n    /**\n  ", "est\n     */\n    it('delete_callback_0112', 0, async function (done", "console.log(TAG + \":delete_callback_0113 start\");\n        try {\n  ", "'')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "@tc.name data share delete_callback test\n     * @tc.number SUB_DDM", "console.log(TAG + \":delete_callback_0110 start\");\n        try {\n  ", "t')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "console.log(TAG + \":delete_promise_0111 end\");\n    })\n\n    /**\n   ", "UB_DDM_DataShare_JS_delete_callback_0110\n     * @tc.desc data shar", "UB_DDM_DataShare_JS_delete_promise_0111\n     * @tc.desc data share", "est\n     */\n    it('delete_promise_0111', 0, async function (done)", "console.log(TAG + \":delete_callback_0112 start\");\n        try {\n  ", "console.log(TAG + \":delete_promise_0111 start\");\n        try {\n   ", "\n            helper.delete(\n                null,\n                ", "@tc.desc data share delete_callback test\n     */\n    it('delete_ca", "ePromise = rdbStore.delete(predicates)\n            deletePromise.t", " console.log(TAG + 'delete with wrong conditions')\n            })\n", "      await dataRdb.deleteRdbStore(\"Predicates.db\");\n    })\n\n    f", "@tc.name data share delete_promise test\n     * @tc.number SUB_DDM_", "i')\n            let deletePromise = rdbStore.delete(predicates)\n  ", ")\n            await deletePromise\n        }\n        //\u5220\u9664\u540e\u67e5\u8be2\n      ", "UB_DDM_DataShare_JS_delete_callback_0112\n     * @tc.desc data shar", "console.log(TAG + \":delete_callback_0110 end\");\n    })\n\n    /**\n  ", "UB_DDM_DataShare_JS_delete_callback_0113\n     * @tc.desc data shar", "===================>deleteCallback=======================>\");\n    ", "      await dataRdb.deleteRdbStore('Delete.db');\n    })\n\n    after", " 1)\n            let deletePromise = rdbStore.delete(predicates)\n  ", "est\n     */\n    it('delete_callback_0110', 0, async function (done", "\n            helper.delete(\n                URI,\n                d", "@tc.desc data share delete_promise test\n     */\n    it('delete_pro", "est\n     */\n    it('delete_callback_0113', 0, async function (done", ")\n            await deletePromise\n        }\n        done()\n       ", "n')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "28)\n            let deletePromise = rdbStore.delete(predicates)\n  ", "console.log(TAG + \":delete_callback_0112 end\");\n    })\n\n    /**\n  "], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "delete", "api_method_all": "delete(rdbPredicates: RdbPredicates): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["      await kvStore.deleteBatch(keys).then((err) => {\n            ", "      await kvStore.delete(KEY_TEST_FLOAT_ELEMENT).then((data) => ", "icates)\n            deletePromise.then(async (ret) => {\n          ", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME).then(() => {\n ", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME, data[i]).then(", "      await kvStore.delete(KEY_TEST_BOOLEAN_ELEMENT).then((data) =", "      await kvStore.delete(KEY_TEST_INT_ELEMENT).then((data) => {\n", "      await kvStore.delete(KEY_TEST_STRING_ELEMENT).then((data) =>"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "query", "api_method_all": "query(rdbPredicates: RdbPredicates, columns: Array<string>, callback: AsyncCallback<ResultSet>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 1277, "since": 7, "api_used": "\u662f", "lines": ["lt = await rdbStore.query(predicates);\n        expect(0).assertEq", "lt = await rdbStore.query(predicates);\n            expect(0).asse", "lt = await rdbStore.query(predicates);\n            expect(1).asse", "lt = await rdbStore.query(predicates);\n            expect(true).a", "lt = await rdbStore.query(predicates);\n            expect(3).asse", "lt = await rdbStore.query(predicates);\n            expect(2).asse", "lt = await rdbStore.query(predicates);\n        expect(-1).assertE", "lt = await rdbStore.query(predicates);\n        expect(3).assertEq"], "files": ["QueryJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "query", "api_method_all": "query(rdbPredicates: RdbPredicates, columns?: Array<string>): Promise<ResultSet>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["tSet(localDeviceId, query).then((result) => {\n                con", " kvStore.getEntries(query).then((entrys) => {\n                   ", " kvStore.getEntries(query).then((entries) => {\n                co", "ries(localDeviceId, query).then((entrys) => {\n                   ", "vStore.getResultSet(query).then((result) => {\n                con", " test\")\n            querySqlPromise.then(async (resultSet) => {\n ", "Size(localDeviceId, query).then((resultSize) => {\n               ", "Store.getResultSize(query).then((resultSize) => {\n               ", "    num =  rdbStore.query(predicates)\n            num.then(async "], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SchemaJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "querySql", "api_method_all": "querySql(sql: string, bindArgs: Array<ValueType>, callback: AsyncCallback<ResultSet>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["et = await rdbStore.querySql(\n            \"SELECT * FROM user INNER ", "lPromise = rdbStore.querySql(\"SELECT * FROM test\")\n            query", "et = await rdbStore.querySql(\"\" +\n            \"SELECT * FROM user  C", "  {\n            let querySqlPromise = rdbStore.querySql(\"SELECT * FR", "et = await rdbStore.querySql(\"\" +\n            \"SELECT * FROM user LE", ")\n            await querySqlPromise\n        }\n        done();\n      "], "files": ["RdbstoreStoreExcuteSqlJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "querySql", "api_method_all": "querySql(sql: string, bindArgs?: Array<ValueType>): Promise<ResultSet>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [" test\")\n            querySqlPromise.then(async (resultSet) => {\n    "], "files": ["RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "executeSql", "api_method_all": "executeSql(sql: string, bindArgs: Array<ValueType>, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["     await rdbStore.executeSql(sqlStatement, null)\n                con", "     await rdbStore.executeSql(CREATE_TABLE_TEST, null);\n    })\n\n    b", "        await store.executeSql(CREATE_TABLE_TEST);\n            } catch", "lPromise = rdbStore.executeSql(\"DELETE FROM test WHERE age = ? OR age ", "lPromise = rdbStore.executeSql(\"DROP TABLE IF EXISTS test\")\n          ", "     await rdbStore.executeSql(BOOK_TABLE);\n\n        var books = [\n   ", "     await rdbStore.executeSql('DELETE FROM test');\n        rdbStore =", "     await rdbStore.executeSql(\"DELETE FROM test\");\n        console.in", "     await rdbStore.executeSql(CREATE_TABLE_ALL_DATA_TYPE_SQL, null);\n", "     await rdbStore.executeSql(CREATE_TABLE_TEST, null);\n        await", "     await rdbStore.executeSql(\"DELETE FROM test\");\n        rdbStore =", "  {\n            let executeSqlPromise = rdbStore.executeSql(\"DELETE FR", "     await rdbStore.executeSql(BOOK_BULK_INSERT_STATEMENT, objects);\n ", " console.log(TAG + \"executeSql done: \" + resultSet);\n            }).ca", "     await rdbStore.executeSql(\"DELETE FROM test\");\n    })\n\n    afterE", ")\n            await executeSqlPromise\n        }\n        {\n            ", " console.log(TAG + \"executeSql done\");\n            }).catch((err) => {", "lPromise = rdbStore.executeSql(\"DELETE FROM test WHERE name = 'lisi'\")", "     await rdbStore.executeSql(CREATE_TABLE_TEST, null);\n    })\n\n    a", "     await rdbStore.executeSql(USER_BULK_INSERT_STATEMENT, objects);\n ", "     await rdbStore.executeSql(USER_TABLE);\n\n        const users = [\n "], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "executeSql", "api_method_all": "executeSql(sql: string, bindArgs?: Array<ValueType>): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [" \"20\"])\n            executeSqlPromise.then(async (resultSet) => {\n    ", "lisi'\")\n            executeSqlPromise.then(async () => {\n             "], "files": ["RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "beginTransaction", "api_method_all": "beginTransaction():void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["     await rdbStore.beginTransaction()\n            const", "           rdbStore.beginTransaction()\n            const"], "files": ["RdbstoreTransactionJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "commit", "api_method_all": "commit():void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 67, "since": 8, "api_used": "\u662f", "lines": ["startTransaction101 commit success');\n        ", "      await kvStore.commit().then(async (err) ", "eKvStoreRollback102 commit success');\n        ", "startTransaction001 commit success');\n        ", "eKvStoreRollback101 commit fail');\n           ", "iceKvStoreCommit103 commit fail');\n           ", "eKvStoreRollback102 commit fail');\n           ", "     await rdbStore.commit()\n\n            let ", "iceKvStoreCommit001 commit success');\n        ", "      await kvStore.commit(async function (err", "iceKvStoreCommit102 commit success');\n        ", "gleKvStoreCommit102 commit success');\n        ", "iceKvStoreCommit101 commit success');\n        ", "iceKvStoreCommit101 commit fail');\n           ", "iceKvStoreCommit001 commit fail ' + err);\n    ", "gleKvStoreCommit103 commit success');\n        ", "      await kvStore.commit(2.000, function (er", "      await kvStore.commit('test_string').then", "iceKvStoreCommit002 commit fail ' + err);\n    ", "iceKvStoreCommit002 commit success');\n        ", "eKvStoreRollback101 commit success');\n        ", "startTransaction001 commit fail ' + err);\n    ", "iceKvStoreCommit003 commit success');\n        ", "     await rdbStore.commit()\n            await", "gleKvStoreCommit101 commit fail');\n           ", "      await kvStore.commit(1, function (err,da", "      await kvStore.commit(1).then(async (err)", "iceKvStoreCommit103 commit success');\n        ", "gleKvStoreCommit101 commit success');\n        ", "eKvStoreRollback103 commit success');\n        ", "gleKvStoreCommit102 commit fail');\n           ", "iceKvStoreCommit003 commit fail ' + err);\n    ", "      await kvStore.commit(2.000).then(async (", "gleKvStoreCommit103 commit fail');\n           ", "iceKvStoreCommit102 commit fail');\n           ", "     await rdbStore.commit()\n        } catch (", "      await kvStore.commit('test_string', func", "eKvStoreRollback103 commit fail');\n           "], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "rollBack", "api_method_all": "rollBack():void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["     await rdbStore.rollBack()\n\n            awai", "     await rdbStore.rollBack()\n            let p", "     await rdbStore.rollBack()\n            conso"], "files": ["RdbstoreTransactionJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "setDistributedTables", "api_method_all": "setDistributedTables(tables: Array<string>, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["     await rdbStore.setDistributedTables(['employee', 'product'])\n            co", "     await rdbStore.setDistributedTables([])\n            console.log(TAG + \"set ", "     await rdbStore.setDistributedTables(['employee'])\n            console.log(T"], "files": ["RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "setDistributedTables", "api_method_all": "setDistributedTables(tables: Array<string>): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "obtainDistributedTableName", "api_method_all": "obtainDistributedTableName(device: string, table: string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "obtainDistributedTableName", "api_method_all": "obtainDistributedTableName(device: string, table: string): Promise<string>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "sync", "api_method_all": "sync(mode: SyncMode, predicates: RdbPredicates, callback: AsyncCallback<Array<[string, number]>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 1305, "since": 7, "api_used": "\u662f", "lines": ["IsNotNull0004', 0, async function (done) {\n        console.log(T", "otEqualTo0008', 0, async function (done) {\n        console.log(T", "OrEqualTo0002', 0, async function (done) {\n        console.log(T", "tLessThan0001', 0, async function (done) {\n        console.log(T", "stEqualTo0002', 0, async function (done) {\n        console.log(T", "tLessThan0002', 0, async function (done) {\n        console.log(T", "estIsNull0001', 0, async function (done) {\n        console.log(T", "eaterThan0008', 0, async function (done) {\n        console.log(T", "tLessThan0004', 0, async function (done) {\n        console.log(T", "      }\n    }\n\n    async function buildAllDataType2() {\n        ", "stEqualTo0004', 0, async function (done) {\n        console.log(T", "tLessThan0003', 0, async function (done) {\n        console.log(T", "tLessThan0006', 0, async function (done) {\n        console.log(T", "  })\n\n    afterAll(async function () {\n        console.info(TAG ", "otEqualTo0001', 0, async function (done) {\n        console.log(T", "eaterThan0004', 0, async function (done) {\n        console.log(T", "stEqualTo0008', 0, async function (done) {\n        console.log(T", "stEqualTo0003', 0, async function (done) {\n        console.log(T", "OrEqualTo0001', 0, async function (done) {\n        console.log(T", "eaterThan0007', 0, async function (done) {\n        console.log(T", "tLessThan0007', 0, async function (done) {\n        console.log(T", "IsNotNull0003', 0, async function (done) {\n        console.log(T", "OrEqualTo0004', 0, async function (done) {\n        console.log(T", " count;\n    }\n\n    async function buildAllDataType1() {\n        ", "eaterThan0001', 0, async function (done) {\n        console.log(T", "eaterThan0003', 0, async function (done) {\n        console.log(T", "otEqualTo0007', 0, async function (done) {\n        console.log(T", "estIsNull0002', 0, async function (done) {\n        console.log(T", "eaterThan0005', 0, async function (done) {\n        console.log(T", "eaterThan0002', 0, async function (done) {\n        console.log(T", "otEqualTo0002', 0, async function (done) {\n        console.log(T", "otEqualTo0003', 0, async function (done) {\n        console.log(T", "eaterThan0006', 0, async function (done) {\n        console.log(T", "estIsNull0004', 0, async function (done) {\n        console.log(T", "IsNotNull0002', 0, async function (done) {\n        console.log(T", "IsNotNull0001', 0, async function (done) {\n        console.log(T", "OrEqualTo0003', 0, async function (done) {\n        console.log(T", "tLessThan0005', 0, async function (done) {\n        console.log(T", "stEqualTo0005', 0, async function (done) {\n        console.log(T", "tLessThan0008', 0, async function (done) {\n        console.log(T", "otEqualTo0006', 0, async function (done) {\n        console.log(T", "stEqualTo0001', 0, async function (done) {\n        console.log(T", "stEqualTo0007', 0, async function (done) {\n        console.log(T", "stEqualTo0006', 0, async function (done) {\n        console.log(T", "() {\n    beforeAll(async function () {\n        console.info(TAG ", "otEqualTo0005', 0, async function (done) {\n        console.log(T", "estIsNull0003', 0, async function (done) {\n        console.log(T", "otEqualTo0004', 0, async function (done) {\n        console.log(T", "      }\n    }\n\n    async function buildAllDataType3() {\n        "], "files": ["RdbstorePredicatesJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "sync", "api_method_all": "sync(mode: SyncMode, predicates: RdbPredicates): Promise<Array<[string, number]>>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 147, "since": 7, "api_used": "\u662f", "lines": ["insertPromise.then(async (ret) => {\n                expect(6).as", "uteSqlPromise.then(async () => {\n                await console.l", "insertPromise.then(async (ret) => {\n                expect(2).as", "RING_ELEMENT).then(async (data) => {\n                console.log", " storePromise.then(async (ret) => {\n            await console.lo", "          num.then(async (ret) => {\n                console.log(", "deletePromise.then(async (ret) => {\n                console.log(", "          num.then(async (ret) => {\n                expect(2).as", "insertPromise.then(async (ret) => {\n                expect(9).as", "updatePromise.then(async (ret) => {\n                await expect", "insertPromise.then(async (ret) => {\n                expect(5).as", " storePromise.then(async (store) => {\n            try {\n        ", "_INT_ELEMENT).then(async (data) => {\n                console.log", "erySqlPromise.then(async (resultSet) => {\n                await ", "insertPromise.then(async (ret) => {\n                expect(4).as", "ELEMENT, str).then(async (data) => {\n                console.log", "uteSqlPromise.then(async (resultSet) => {\n                await ", "insertPromise.then(async (ret) => {\n                expect(7).as", "insertPromise.then(async (ret) => {\n                expect(1).as", "updatePromise.then(async (ret) => {\n                    await co", "deletePromise.then(async (ret) => {\n                expect(1).as", "T, boolValue).then(async (data) => {\n                console.log", "_ID, kvStore).then(async () => {\n            console.log('afterE", "deletePromise.then(async (ret) => {\n                expect(2).as", "deletePromise.then(async (ret) => {\n                await expect", "insertPromise.then(async (ret) => {\n                expect(3).as", "NT, intValue).then(async (data) => {\n                console.log", "deletePromise.then(async (ret) => {\n                expect(3).as", "insertPromise.then(async (ret) => {\n                expect(8).as", ", floatValue).then(async (data) => {\n                console.log"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "on", "api_method_all": "on(event: 'dataChange', type: SubscribeType, observer: Callback<Array<string>>): void;", "api_type": "", "api_args_count": 3, "api_level": 21, "api_used_count": 9171, "since": 7, "api_used": "\u662f", "lines": ["      console.info('onShow finish')\n      ", " }\n\n    async function buildAllDataType2()", "ction () {\n        console.info(TAG + 'aft", ".info('TestApplication onDestroy');\n    }\n", "fo('TestApplication onCreate');\n    },\n   ", "   beforeEach(function () {\n        consol", "ction () {\n        console.info(TAG + 'bef", " }\n\n    async function buildAllDataType3()", "aType2() {\n        console.log(TAG + \"buil", "deccjsunit/index'\n\nconst injectRef = Objec", ",\n                \"longValue\": 92233720368", "01', 0, async function (done) {\n        co", "  configService.setConfig(this)\n\n        r", ",\n                \"longValue\": -9223372036", " }\n\n    async function buildAllDataType1()", "      }\n    }\n\n    console.log(TAG + \"****", "dicatesTest', function () {\n    beforeAll(", "2, 3])\n            const valueBucket = {\n ", "rder` INTEGER);\";\n\nconst STORE_CONFIG = {\n", "Create() {\n        console.info('TestAppli", "Instance()\n        const expectExtend = ne", "world');\n    },\n    onShow() {\n        con", "xecute()\n    },\n    onReady() {\n    },\n}", "xport default {\n    onCreate() {\n        c", "estroy() {\n        console.info('TestAppli", "aType3() {\n        console.log(TAG + \"buil", "    afterEach(function () {\n        consol", "alue INTEGER , primLongValue INTEGER , \"\n+", ",\n                \"longValue\": 1,\n        ", ".info('TestApplication onCreate');\n    },\n", "ata.dataAbility';\n\nconst TAG = '[RDB_JSKIT", "reate');\n    },\n    onDestroy() {\n        ", "gerValue INTEGER , longValue INTEGER , sho", ";\n    })\n\n    function resultSize(resultSe", "getDefaultService('config')\n        config", "foreAll(async function () {\n        consol", "('config')\n        configService.setConfig", "fo('TestApplication onDestroy');\n    }\n};\n", "itle: ''\n    },\n    onInit() {\n        thi", "onShow() {\n        console.info('onShow fi", "ore.init()\n        const configService = c", "RDB_JSKITS _TEST]'\nconst CREATE_TABLE_ALL_", "fterAll(async function () {\n        consol", "aType1() {\n        console.log(TAG + \"buil", "it()\n        const configService = core.ge", "w finish')\n        const core = Core.getIn"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbStore", "api_method_name": "off", "api_method_all": "off(event:'dataChange', type: SubscribeType, observer: Callback<Array<string>>): void;", "api_type": "", "api_args_count": 3, "api_level": 21, "api_used_count": 78, "since": 8, "api_used": "\u662f", "lines": ["            kvStore.off('syncComplete');\n  ", "            kvStore.off('syncComplete', fun", ";\n        kvManager.off('distributedDataSer", "@tc.desc predicates offset normal test\n    ", "   })\n\n    \n    it('off_0031', 0, async fun", "IJKLMN\").limitAs(3).offsetAs(1);\n        le", "            kvStore.off('dataChange');\n    ", "/**\n     * @tc.name off interface test\n    ", "IJKLMN\").limitAs(3).offsetAs(5);\n        le", "            kvStore.off('dataChange', func1", "IJKLMN\").limitAs(3).offsetAs(-1);\n        l", "@tc.name predicates offset normal test\n    ", "console.log(TAG + \":off_0030 start\");\n     ", "            kvStore.off('dataChange', func)", "console.log(TAG + \":off_0030 end\");\n    })\n", "ver);\n        mPref.off('change', observer)", "   })\n\n    \n    it('off_0030', 0, async fun", "\n            helper.off(\n                \"d", " console.log(TAG + \"off dataChange success\"", "IJKLMN\").limitAs(3).offsetAs(0);\n        le", "console.log(TAG + \":off_0031 end\");\n    })\n", "console.log(TAG + \":off_0031 start\");\n     ", "160\n     * @tc.desc off interface test\n    ", ");\n        rdbStore.off(\"dataChange\", (devi"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "StorageSyncJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "ObjectStoreJsunit.test.js", "KvManagerPromiseJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StoreConfig", "api_method_all": "interface StoreConfig {\n        name: string;\n    }", "api_method_name": "StoreConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "StoreConfig", "api_method_name": "name", "api_method_all": "name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 983, "since": 7, "api_used": "\u662f", "lines": ["\n    /**\n     * @tc.name testNotBetween0003\n", "\n    /**\n     * @tc.name predicates greaterT", "\n    /**\n     * @tc.name resultSet isNull no", "\n    /**\n     * @tc.name predicates isNull n", "\n    /**\n     * @tc.name predicates lessThan", "\n    /**\n     * @tc.name testNotBetween0002\n", "\n    /**\n     * @tc.name predicates notEqual", "TORE_CONFIG = {\n    name: \"Predicates.db\",\n}", "\n    /**\n     * @tc.name testGlob0001\n     *", "\n    /**\n     * @tc.name predicates between ", "\n    /**\n     * @tc.name testGlob0003\n     *", "\n    /**\n     * @tc.name predicates isNotNul", "\n    /**\n     * @tc.name testNotBetween0004\n", "\n    /**\n     * @tc.name testGlob0004\n     *", "\n    /**\n     * @tc.name testGlob0002\n     *", "\n    /**\n     * @tc.name testNotBetween0001\n"], "files": ["RdbstorePredicatesJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_all": "class RdbPredicates {\n        \n        constructor(name: string)\n\n        \n        inDevices(devices: Array<string>): RdbPredicates;\n\n        \n        inAllDevices(): RdbPredicates;\n\n        \n        equalTo(field: string, value: ValueType): RdbPredicates;\n\n        \n        notEqualTo(field: string, value: ValueType): RdbPredicates;\n\n        \n        beginWrap(): RdbPredicates;\n\n        \n        endWrap(): RdbPredicates;\n\n        \n        or(): RdbPredicates;\n\n        \n        and(): RdbPredicates;\n\n        \n        contains(field: string, value: string): RdbPredicates;\n\n        \n        beginsWith(field: string, value: string): RdbPredicates;\n\n        \n        endsWith(field: string, value: string): RdbPredicates;\n\n        \n        isNull(field: string): RdbPredicates;\n\n        \n        isNotNull(field: string): RdbPredicates;\n\n        \n        like(field: string, value: string): RdbPredicates;\n\n        \n        glob(field: string, value: string): RdbPredicates;\n\n        \n        between(field: string, low: ValueType, high: ValueType): RdbPredicates;\n\n        \n        notBetween(field: string, low: ValueType, high: ValueType): RdbPredicates;\n\n        \n        greaterThan(field: string, value: ValueType): RdbPredicates;\n\n        \n        lessThan(field: string, value: ValueType): RdbPredicates;\n\n        \n        greaterThanOrEqualTo(field: string, value: ValueType): RdbPredicates;\n\n        \n        lessThanOrEqualTo(field: string, value: ValueType): RdbPredicates;\n\n        \n        orderByAsc(field: string): RdbPredicates;\n\n        \n        orderByDesc(field: string): RdbPredicates;\n\n        \n        distinct(): RdbPredicates;\n\n        \n        limitAs(value: number): RdbPredicates;\n\n        \n        offsetAs(rowOffset: number): RdbPredicates;\n\n        \n        groupBy(fields: Array<string>): RdbPredicates;\n\n        \n        indexedBy(field: string): RdbPredicates;\n\n        \n        in(field: string, value: Array<ValueType>): RdbPredicates;\n\n        \n        notIn(field: string, value: Array<ValueType>): RdbPredicates;\n    }", "api_method_name": "RdbPredicates", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 344, "since": 7, "api_used": "\u662f", "lines": ["= dataAbility.createRdbPredicates(\"AllDataType\", data"], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "constructor", "api_method_all": "constructor(name: string)", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["@tc.desc predicates constructor test\n     */\n    it", "@tc.name predicates constructor test\n     * @tc.num"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "inDevices", "api_method_all": "inDevices(devices: Array<string>): RdbPredicates;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["icates = predicates.inDevices(\"1234567890\");\n    ", "icates = predicates.inDevices(\"12345678abcd\");\n  ", " console.log(TAG + \"inDevices success\");\n        ", " console.log(TAG + \"inDevices failed\");\n         "], "files": ["RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "inAllDevices", "api_method_all": "inAllDevices(): RdbPredicates;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": [" console.log(TAG + \"inAllDevices success\");\n        ", "icates = predicates.inAllDevices();\n            cons", " console.log(TAG + \"inAllDevices failed\");\n         "], "files": ["RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "equalTo", "api_method_all": "equalTo(field: string, value: ValueType): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 122, "since": 7, "api_used": "\u662f", "lines": ["         predicates.equalTo('age', 28)\n        ", "         predicates.equalTo(\"stringValue\", \"ABC", "()\n                .equalTo(\"characterValue\", '", "         predicates.equalTo('name', 'zhangsan')", "eValue\", -128).or().equalTo(\"byteValue\", 1);\n  ", "\")\n                .equalTo(\"characterValue\", '", "         predicates.equalTo('name', 'lisi')\n   ", "taAbilityPredicates.equalTo(\"integerValue\", 1);", "         predicates.equalTo(\"shortValue\", -3276", "()\n                .equalTo(\"integerValue\", 1);", "         predicates.equalTo(\"longValue\", 1);\n  ", "taAbilityPredicates.equalTo(\"shortValue\", -3276", "\n        predicates.equalTo(\"name\", \"zhangsan\")", "          predicate.equalTo(\"id\", 1);\n         ", "taAbilityPredicates.equalTo(\"longValue\", 1);\n  ", "         predicates.equalTo(\"booleanValue\", tru", "taAbilityPredicates.equalTo(\"booleanValue\", tru", "         predicates.equalTo(\"byteValue\", -128).", "         predicates.equalTo(\"floatValue\", -0.12", "         predicates.equalTo(\"doubleValue\", DOUB", "         predicates.equalTo(\"integerValue\", 1);", "taAbilityPredicates.equalTo(\"byteValue\", -128).", "HIJKLMN\").or().or().equalTo(\"integerValue\", 1);", "()\n                .equalTo(\"integerValue\", 214", "taAbilityPredicates.equalTo(\"doubleValue\", DOUB", "taAbilityPredicates.equalTo(\"stringValue\", \"ABC", "IJKLMN\").or().and().equalTo(\"integerValue\", 1);", "()\n                .equalTo(\"integerValue\", 1)\n", "         predicates.equalTo('aaa id', 1)\n      ", "taAbilityPredicates.equalTo(\"floatValue\", -0.12"], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "notEqualTo", "api_method_all": "notEqualTo(field: string, value: ValueType): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 59, "since": 7, "api_used": "\u662f", "lines": ["taAbilityPredicates.notEqualTo(\"shortValue\", -3276", "@tc.desc predicates notEqualTo normal test\n     */", "         predicates.notEqualTo(\"floatValue\", -0.12", ";\n            query.notEqualTo(\"key\", 0);\n        ", "taAbilityPredicates.notEqualTo(\"floatValue\", -0.12", "         predicates.notEqualTo(\"doubleValue\", DOUB", "taAbilityPredicates.notEqualTo(\"stringValue\", \"ABC", "         predicates.notEqualTo(\"integerValue\", 1);", ";\n            query.notEqualTo(\"key2\", 5.0);\n     ", "         predicates.notEqualTo(\"shortValue\", -3276", "         predicates.notEqualTo(\"stringValue\", \"ABC", "taAbilityPredicates.notEqualTo(\"byteValue\", -128);", "alTo(\"key2\", \"str\").notEqualTo(\"key3\", false);\n   ", "lTo(\"key\", 0).and().notEqualTo(\"key\", 1).and();\n  ", ";\n            query.notEqualTo(\"key\", \"V0\").orderB", ";\n            query.notEqualTo(\"key\", false).order", "         predicates.notEqualTo(\"booleanValue\", tru", "@tc.name predicates notEqualTo normal test\n     * ", "taAbilityPredicates.notEqualTo(\"byteValue\", 1);\n  ", ";\n            query.notEqualTo(\"key3\", false);\n   ", "r(\"key\", [1, 7, 8]).notEqualTo(\"kkk\", 5);\n        ", "[\"v1\", \"v2\", \"v3\"]).notEqualTo(\"kkk\", \"v3\");\n     ", "taAbilityPredicates.notEqualTo(\"doubleValue\", DOUB", ";\n            query.notEqualTo(\"key1\", \"value\", \"t", "query.isNull(\"key\").notEqualTo(\"key1\", 4).isNull(\"", "taAbilityPredicates.notEqualTo(\"integerValue\", 1);", ";\n            query.notEqualTo(\"key4\", \"string\");\n", "taAbilityPredicates.notEqualTo(\"booleanValue\", tru", ";\n            query.notEqualTo(\"key\", 0).or(1).not", ";\n            query.notEqualTo(\"key2\", NaN);\n     ", ";\n            query.notEqualTo(\"key\", \"v1\");\n     ", ";\n            query.notEqualTo(\"key\", 0).and().not", ";\n            query.notEqualTo(\"key\", 5);\n        ", ";\n            query.notEqualTo(\"key0\", 5).equalTo(", "         predicates.notEqualTo(\"longValue\", 1);\n  ", "taAbilityPredicates.notEqualTo(\"longValue\", 1);\n  ", "         predicates.notEqualTo(\"byteValue\", -128);", ";\n            query.notEqualTo(\"key\", 0).and(1).no", ";\n            query.notEqualTo(\"key\", 0).or();\n   ", ";\n            query.notEqualTo(\"key1\", 5);\n       ", ".equalTo(\"key1\", 5).notEqualTo(\"key2\", \"str\").notE", "         predicates.notEqualTo(\"byteValue\", 1);\n  "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "beginWrap", "api_method_all": "beginWrap(): RdbPredicates;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": ["@tc.name predicates beginWrap normal test\n     * ", "@tc.desc predicates beginWrap normal test\n     */", "\")\n                .beginWrap()\n                ."], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "endWrap", "api_method_all": "endWrap(): RdbPredicates;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["7)\n                .endWrap();\n            let ", "')\n                .endWrap();\n            let "], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "or", "api_method_all": "or(): RdbPredicates;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6347, "since": 7, "api_used": "\u662f", "lines": ["", "\n                \"shortValue\": -32768,\n   ", "ribe, beforeAll, beforeEach, afterEach, af", "ait dataRdb.getRdbStore(STORE_CONFIG, 1);\n", "result = await rdbStore.query(predicates);", "NTEGER , \"\n+ \"primShortValue INTEGER , pri", "ist.test')\n        core.execute()\n    },\n ", "sh')\n        const core = Core.getInstance", "unction () {\n    beforeAll(async function ", "rimCharValue TEXT, `order` INTEGER);\";\n\nco", "eccjsunit/index'\nimport dataRdb from '@oho", "e/regenerator')\n\nexport default {\n    data", "st configService = core.getDefaultService(", "\n                \"shortValue\": 1,\n        ", "mport {describe, beforeAll, beforeEach, af", "         await rdbStore.insert(\"AllDataTyp", "@ohos.data.rdb';\nimport dataAbility from '", "ngValue INTEGER , shortValue INTEGER , boo", "tes.db\",\n}\nvar rdbStore = undefined;\nvar D", "= this.$t('strings.world');\n    },\n    onS", "sole.info(TAG + 'beforeEach')\n    })\n\n    ", "sole.info(TAG + 'beforeAll')\n        rdbSt", "\n        await rdbStore.executeSql(CREATE_", "        })\n        core.addService('expect", "ectExtend)\n        core.init()\n        con", "\n                \"shortValue\": 32767,\n    ", "(\"byteValue\", -128).or().equalTo(\"byteValu", "      const core = Core.getInstance()\n    ", "3();\n    })\n\n    beforeEach(function () {\n", "el/runtime/regenerator')\n\nexport default {", "eAll')\n        rdbStore = await dataRdb.ge", "\ninjectRef.regeneratorRuntime = require('@", "edicates.equalTo(\"shortValue\", -32768.0);\n", "rAll')\n        rdbStore = null\n        awa", " dataRdb.deleteRdbStore(\"Predicates.db\");\n"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "and", "api_method_all": "and(): RdbPredicates;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 36, "since": 7, "api_used": "\u662f", "lines": ["CDEFGHIJKLMN\").or().and().equalTo(\"integerV", " * @tc.desc the min and max value test with", "TAG + \"set employee and product to be distr", "   * @tc.desc begin and end with ? by glob.", ".equalTo(\"key1\", 0).and().equalTo(\"key2\", \"", "@tc.desc the common and min value test with", "otEqualTo(\"key\", 0).and().notEqualTo(\"key\",", ";\n            query.and();\n            quer", "otEqualTo(\"key\", 0).and(1).notInNumber(\"key", "otEqualTo(\"key\", 1).and();\n            expe", "request\" + \" with \\\"and\\\" or use or() befor", "\")\n                .and()\n                .", "@tc.desc predicates and normal test\n     */", "@tc.desc the common and max value test with", "@tc.name predicates and normal test\n     * ", "y.isNotNull(\"key1\").and().notEqualTo(\"key1\"", "   * @tc.desc begin and end with * by glob."], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "contains", "api_method_all": "contains(field: string, value: string): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["taAbilityPredicates.contains(\"characterValue\", \"", "\n        predicates.contains(\"characterValue\", \"", "@tc.desc predicates contains normal test\n     */", "\n        predicates.contains(\"stringValue\", \"DEF", "@tc.name predicates contains normal test\n     * ", "taAbilityPredicates.contains(\"stringValue\", \"DEF"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "beginsWith", "api_method_all": "beginsWith(field: string, value: string): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["@tc.desc predicates beginsWith normal test\n     */", "taAbilityPredicates.beginsWith(\"characterValue\", \"", "taAbilityPredicates.beginsWith(\"stringValue\", \"ABC", "\n        predicates.beginsWith(\"characterValue\", \"", "\n        predicates.beginsWith(\"stringValue\", \"ABC", "@tc.name predicates beginsWith normal test\n     * "], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "endsWith", "api_method_all": "endsWith(field: string, value: string): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["\n        predicates.endsWith(\"characterValue\", \"", "taAbilityPredicates.endsWith(\"stringValue\", \"LMN", "taAbilityPredicates.endsWith(\"characterValue\", \"", "@tc.name predicates endsWith normal test\n     * ", "@tc.desc predicates endsWith normal test\n     */", "\n        predicates.endsWith(\"stringValue\", \"LMN"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "isNull", "api_method_all": "isNull(field: string): RdbPredicates;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": ["taAbilityPredicates.isNull(\"longValue\");\n     ", " @tc.desc resultSet isNull normal test\n     */", ";\n            query.isNull(\"key2\");\n          ", "\n        predicates.isNull(\"stringValue\");\n   ", "tEqualTo(\"key1\", 4).isNull(\"key2\");\n          ", " @tc.name resultSet isNull normal test\n     * ", "taAbilityPredicates.isNull(\"stringValue\");\n   ", ";\n            query.isNull(0);\n            con", "@tc.desc predicates isNull normal test\n     */", ";\n            query.isNull(\"key\").notEqualTo(\"", "\n        predicates.isNull(\"primLongValue\");\n ", ";\n            query.isNull(\"key\");\n           ", ";\n            query.isNull(\"key\", 0);\n        ", "taAbilityPredicates.isNull(\"primLongValue\");\n ", "taAbilityPredicates.isNull(\"stringValueX\");\n  ", "\n        predicates.isNull(\"longValue\");\n     ", "@tc.name predicates isNull normal test\n     * ", "\n        predicates.isNull(\"stringValueX\");\n  "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "isNotNull", "api_method_all": "isNotNull(field: string): RdbPredicates;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["\n        predicates.isNotNull(\"primLongValue\");\n ", "\n        predicates.isNotNull(\"longValue\");\n     ", "@tc.name predicates isNotNull normal test\n     * ", "taAbilityPredicates.isNotNull(\"longValue\");\n     ", "\n        predicates.isNotNull(\"stringValueX\");\n  ", ";\n            query.isNotNull(1);\n            con", ";\n            query.isNotNull(\"key1\").and().notEq", ";\n            query.isNotNull(\"key\");\n           ", "\n        predicates.isNotNull(\"stringValue\");\n   ", "@tc.desc predicates isNotNull normal test\n     */", "taAbilityPredicates.isNotNull(\"stringValueX\");\n  ", ";\n            query.isNotNull(\"key2\", \"any\");\n   ", "taAbilityPredicates.isNotNull(\"stringValue\");\n   ", "taAbilityPredicates.isNotNull(\"primLongValue\");\n ", ";\n            query.isNotNull(\"$.name\");\n        "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "like", "api_method_all": "like(field: string, value: string): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 78, "since": 7, "api_used": "\u662f", "lines": ["\n        predicates.like(\"stringValue\", \"\u4e2d\")", "@tc.name predicates like normal test\n     * ", "taAbilityPredicates.like(\"stringValue\", \"%LM", "@tc.desc predicates like normal test\n     */", "\n        predicates.like(\"stringValue\", \"ABC", "taAbilityPredicates.like(\"stringValue\", \"ABC", "\n        predicates.like(\"stringValue\", \"%LM", "\n        predicates.like(\"characterValue\", \"", "taAbilityPredicates.like(\"stringValue\", \"\u4e2d\")", "taAbilityPredicates.like(\"characterValue\", \""], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "glob", "api_method_all": "glob(field: string, value: string): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": ["esc begin with * by glob.\n     */\n    it('te", "totypeOf(global) || global\ninjectRef.regener", "ject.getPrototypeOf(global) || global\ninject", "taAbilityPredicates.glob(\"stringValue\", \"*LM", ".desc end with ? by glob.\n     */\n    it('te", "n and end with ? by glob.\n     */\n    it('te", "taAbilityPredicates.glob(\"stringValue\", \"ABC", "taAbilityPredicates.glob(\"stringValue\", \"*FG", "         predicates.glob(\"stringValue\", \"*LM", "         predicates.glob(\"stringValue\", \"?BC", "esc begin with ? by glob.\n     */\n    it('te", "         predicates.glob(\"stringValue\", \"ABC", "taAbilityPredicates.glob(\"stringValue\", \"?BC", "         predicates.glob(\"stringValue\", \"*FG", "n and end with * by glob.\n     */\n    it('te"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "between", "api_method_all": "between(field: string, low: ValueType, high: ValueType): RdbPredicates;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 48, "since": 7, "api_used": "\u662f", "lines": ["taAbilityPredicates.between(\"doubleValue\", DOUB", "         predicates.between(\"longValue\", 2, -1)", "taAbilityPredicates.between(\"integerValue\", 1, ", "         predicates.between(\"integerValue\", 1, ", "@tc.desc predicates between normal test\n     */", "@tc.name predicates between normal test\n     * ", "taAbilityPredicates.between(\"doubleValue\", 0.0,", "         predicates.between(\"stringValue\", \"ABB", "         predicates.between(\"doubleValue\", 0.0,", "taAbilityPredicates.between(\"longValue\", 0, 2);", "taAbilityPredicates.between(\"longValue\", 2, -1)", "taAbilityPredicates.between(\"integerValue\", 0, ", "         predicates.between(\"integerValue\", 0, ", "taAbilityPredicates.between(\"stringValue\", \"ABB", "         predicates.between(\"doubleValue\", DOUB", "         predicates.between(\"longValue\", 0, 2);"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "notBetween", "api_method_all": "notBetween(field: string, low: ValueType, high: ValueType): RdbPredicates;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["         predicates.notBetween(\"integerValue\", 0, ", "taAbilityPredicates.notBetween(\"integerValue\", 0, ", "taAbilityPredicates.notBetween(\"longValue\", 0, 2);", "         predicates.notBetween(\"doubleValue\", 0.0,", "         predicates.notBetween(\"longValue\", 0, 2);", "t double value with notBetween.\n     */\n    it('te", "         predicates.notBetween(\"stringValue\", \"ABB", "taAbilityPredicates.notBetween(\"stringValue\", \"ABB", "est long value with notBetween.\n     */\n    it('te", "taAbilityPredicates.notBetween(\"doubleValue\", 0.0,", " integer value with notBetween.\n     */\n    it('te", "t string value with notBetween.\n     */\n    it('te"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "greaterThan", "api_method_all": "greaterThan(field: string, value: ValueType): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 92, "since": 7, "api_used": "\u662f", "lines": ["taAbilityPredicates.greaterThan(\"longValue\", -999);", "taAbilityPredicates.greaterThan(\"integerValue\", -99", "         predicates.greaterThan(\"stringValue\", \"ABC", "         predicates.greaterThan(\"integerValue\", 1);", "taAbilityPredicates.greaterThanOrEqualTo(\"longValue", "taAbilityPredicates.greaterThan(\"doubleValue\", 999.", "taAbilityPredicates.greaterThan(\"stringValue\", \"ABC", "@tc.name predicates greaterThan normal test\n     * ", "taAbilityPredicates.greaterThanOrEqualTo(\"stringVal", "taAbilityPredicates.greaterThan(\"doubleValue\", 0.0)", "taAbilityPredicates.greaterThanOrEqualTo(\"doubleVal", "taAbilityPredicates.greaterThanOrEqualTo(\"integerVa", "         predicates.greaterThan(\"doubleValue\", 0.0)", "taAbilityPredicates.greaterThan(\"stringValue\", \"ZZZ", "@tc.desc predicates greaterThanOrEqualTo normal tes", "@tc.name predicates greaterThanOrEqualTo normal tes", "         predicates.greaterThan(\"longValue\", 1);\n  ", "taAbilityPredicates.greaterThan(\"longValue\", 1);\n  ", "@tc.desc predicates greaterThan normal test\n     */", "taAbilityPredicates.greaterThan(\"integerValue\", 1);"], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "lessThan", "api_method_all": "lessThan(field: string, value: ValueType): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 92, "since": 7, "api_used": "\u662f", "lines": ["taAbilityPredicates.lessThan(\"longValue\", -92233", "taAbilityPredicates.lessThan(\"longValue\", 1);\n  ", "taAbilityPredicates.lessThan(\"doubleValue\", 1.0)", "taAbilityPredicates.lessThanOrEqualTo(\"longValue", "         predicates.lessThan(\"doubleValue\", 0.0)", "taAbilityPredicates.lessThan(\"integerValue\", 1);", "         predicates.lessThan(\"integerValue\", 1);", "         predicates.lessThan(\"longValue\", 1);\n  ", "@tc.desc predicates lessThanOrEqualTo normal tes", "taAbilityPredicates.lessThanOrEqualTo(\"stringVal", "@tc.name predicates lessThanOrEqualTo normal tes", "taAbilityPredicates.lessThan(\"stringValue\", \"ABD", "         predicates.lessThan(\"stringValue\", \"ABD", "taAbilityPredicates.lessThanOrEqualTo(\"integerVa", "taAbilityPredicates.lessThan(\"doubleValue\", 0.0)", "taAbilityPredicates.lessThanOrEqualTo(\"doubleVal", "taAbilityPredicates.lessThan(\"integerValue\", -21", "@tc.desc predicates lessThan normal test\n     */", "@tc.name predicates lessThan normal test\n     * "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "greaterThanOrEqualTo", "api_method_all": "greaterThanOrEqualTo(field: string, value: ValueType): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 34, "since": 7, "api_used": "\u662f", "lines": [";\n            query.greaterThanOrEqualTo(\"key1\", \"value\", \"t", ";\n            query.greaterThanOrEqualTo(\"key3\", true);\n    ", ";\n            query.greaterThanOrEqualTo(\"key4\", \"string\");\n", ";\n            query.greaterThanOrEqualTo(\"key1\", 5);\n       ", ";\n            query.greaterThanOrEqualTo(\"key2\", 5.0);\n     ", "5)\n                .greaterThanOrEqualTo(\"key1\", \"v5\")\n     ", "\")\n                .greaterThanOrEqualTo(\"key3\", false);\n   ", "         predicates.greaterThanOrEqualTo(\"stringValue\", \"ABC", "         predicates.greaterThanOrEqualTo(\"integerValue\", 1);", ";\n            query.greaterThanOrEqualTo(\"key0\", 5)\n        ", "@tc.name predicates greaterThanOrEqualTo normal test\n     * ", "taAbilityPredicates.greaterThanOrEqualTo(\"stringValue\", \"ABC", "         predicates.greaterThanOrEqualTo(\"doubleValue\", 0.0)", "         predicates.greaterThanOrEqualTo(\"longValue\", 1);\n  ", ";\n            query.greaterThanOrEqualTo(\"key\", 5);\n        ", ";\n            query.greaterThanOrEqualTo(\"key2\", NaN);\n     ", "@tc.desc predicates greaterThanOrEqualTo normal test\n     */", "taAbilityPredicates.greaterThanOrEqualTo(\"doubleValue\", 0.0)", "taAbilityPredicates.greaterThanOrEqualTo(\"integerValue\", 1);", "taAbilityPredicates.greaterThanOrEqualTo(\"longValue\", 1);\n  "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "lessThanOrEqualTo", "api_method_all": "lessThanOrEqualTo(field: string, value: ValueType): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 34, "since": 7, "api_used": "\u662f", "lines": ["ualTo(\"key1\", \"v5\").lessThanOrEqualTo(\"key3\", false);\n   ", ";\n            query.lessThanOrEqualTo(\"key4\", \"string\");\n", "taAbilityPredicates.lessThanOrEqualTo(\"integerValue\", 1);", ";\n            query.lessThanOrEqualTo(\"key2\", 5.0);\n     ", "@tc.name predicates lessThanOrEqualTo normal test\n     * ", "         predicates.lessThanOrEqualTo(\"doubleValue\", 0.0)", ";\n            query.lessThanOrEqualTo(\"key1\", \"value\", \"t", "rEqualTo(\"key0\", 5).lessThanOrEqualTo(\"key1\", \"v5\").lessT", ";\n            query.lessThanOrEqualTo(\"key\", 5);\n        ", "@tc.desc predicates lessThanOrEqualTo normal test\n     */", ";\n            query.lessThanOrEqualTo(\"key3\", true);\n    ", "taAbilityPredicates.lessThanOrEqualTo(\"stringValue\", \"ABD", ";\n            query.lessThanOrEqualTo(\"key2\", NaN);\n     ", "         predicates.lessThanOrEqualTo(\"stringValue\", \"ABD", "taAbilityPredicates.lessThanOrEqualTo(\"longValue\", 1);\n  ", "taAbilityPredicates.lessThanOrEqualTo(\"doubleValue\", 0.0)", ";\n            query.lessThanOrEqualTo(\"key0\", 5).lessThan", "         predicates.lessThanOrEqualTo(\"integerValue\", 1);", "         predicates.lessThanOrEqualTo(\"longValue\", 1);\n  ", ";\n            query.lessThanOrEqualTo(\"key1\", 5);\n       "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "orderByAsc", "api_method_all": "orderByAsc(field: string): RdbPredicates;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["qualTo(\"key\", \"V0\").orderByAsc(\"sortbykey1\").order", ";\n            query.orderByAsc();\n            cons", ", \"ABCDEFGHIJKLMN\").orderByAsc(\"integerValue\").dis", "ualTo(\"key\", false).orderByAsc(1);\n            con", ", \"ABCDEFGHIJKLMN\").orderByAsc(\"integerValueX\").di", ";\n            query.orderByAsc(\"sortbykey\");\n     ", "ByAsc(\"sortbykey1\").orderByAsc(\"sortbykey2\");\n    "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "orderByDesc", "api_method_all": "orderByDesc(field: string): RdbPredicates;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["qualTo(\"key\", \"V0\").orderByDesc(\"sortbykey1\").order", ";\n            query.orderByDesc();\n            cons", "yDesc(\"sortbykey1\").orderByDesc(\"sortbykey2\");\n    ", ";\n            query.orderByDesc(\"sortbykey\");\n     ", ", \"ABCDEFGHIJKLMN\").orderByDesc(\"integerValueX\").di", "ualTo(\"key\", false).orderByDesc(1);\n            con", ", \"ABCDEFGHIJKLMN\").orderByDesc(\"integerValue\").dis"], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "distinct", "api_method_all": "distinct(): RdbPredicates;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["Asc(\"integerValue\").distinct();\n            let ", "sc(\"integerValueX\").distinct();\n            let ", "esc(\"integerValue\").distinct();\n            let "], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "limitAs", "api_method_all": "limitAs(value: number): RdbPredicates;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": [", \"ABCDEFGHIJKLMN\").limitAs(3).offsetAs(-1);\n  ", ", \"ABCDEFGHIJKLMN\").limitAs(3);\n        let res", ", \"ABCDEFGHIJKLMN\").limitAs(100);\n        let r", ", \"ABCDEFGHIJKLMN\").limitAs(-1);\n        let pr", ", \"ABCDEFGHIJKLMN\").limitAs(1);\n        let res", ", \"ABCDEFGHIJKLMN\").limitAs(-1);\n        let re", ", \"ABCDEFGHIJKLMN\").limitAs(0);\n        let res", ", \"ABCDEFGHIJKLMN\").limitAs(100);\n        let p", ", \"ABCDEFGHIJKLMN\").limitAs(3).offsetAs(1);\n   ", "\"stringValue\", \"\u4e2d\").limitAs(1);\n        let res", ", \"ABCDEFGHIJKLMN\").limitAs(0);\n        let pre", ", \"ABCDEFGHIJKLMN\").limitAs(1);\n        let pre", ", \"ABCDEFGHIJKLMN\").limitAs(3).offsetAs(5);\n   ", "\"stringValue\", \"\u4e2d\").limitAs(1);\n        let pre", ", \"ABCDEFGHIJKLMN\").limitAs(3);\n        let pre", ", \"ABCDEFGHIJKLMN\").limitAs(3).offsetAs(0);\n   "], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "offsetAs", "api_method_all": "offsetAs(rowOffset: number): RdbPredicates;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["IJKLMN\").limitAs(3).offsetAs(5);\n        let res", "IJKLMN\").limitAs(3).offsetAs(1);\n        let pre", "IJKLMN\").limitAs(3).offsetAs(5);\n        let pre", "IJKLMN\").limitAs(3).offsetAs(0);\n        let pre", "IJKLMN\").limitAs(3).offsetAs(1);\n        let res", "IJKLMN\").limitAs(3).offsetAs(0);\n        let res", "IJKLMN\").limitAs(3).offsetAs(-1);\n        let re", "IJKLMN\").limitAs(3).offsetAs(-1);\n        let pr"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "groupBy", "api_method_all": "groupBy(fields: Array<string>): RdbPredicates;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": [", \"ABCDEFGHIJKLMN\").groupBy([\"characterValue\"])", "@tc.name predicates groupBy test\n     * @tc.num", "@tc.desc predicates groupBy test\n     */\n    it", ", \"ABCDEFGHIJKLMN\").groupBy([\"characterValueX\"]"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "indexedBy", "api_method_all": "indexedBy(field: string): RdbPredicates;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": [", \"ABCDEFGHIJKLMN\").indexedBy([\"characterValueX\"]", ", \"ABCDEFGHIJKLMN\").indexedBy([\"characterValue\"])", "@tc.name predicates indexedBy test\n     * @tc.num", "@tc.desc predicates indexedBy test\n     */\n    it"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "in", "api_method_all": "in(field: string, value: Array<ValueType>): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 3573, "since": 7, "api_used": "\u662f", "lines": ["redicates.lessThan(\"integerValue\", 1);\n   ", ".lessThanOrEqualTo(\"integerValue\", 1);\n   ", "icates.lessThan(\"stringValue\", \"ABD\");\n   ", "AUTOINCREMENT, \"\n+ \"integerValue INTEGER ,", "eaterThanOrEqualTo(\"integerValue\", 1);\n   ", ") {\n        console.info(TAG + 'beforeAll'", " {\n                \"integerValue\": -214748", "Predicates.equalTo(\"integerValue\", 1);\n   ", "edicates.isNull(\"stringValueX\");\n        l", ") {\n        console.info(TAG + 'beforeEach", "t} from 'deccjsunit/index'\nimport dataRdb ", ") {\n        console.info('onShow finish')\n", "      var u8 = new Uint8Array([1, 2, 3])\n ", "                \"stringValue\": \"ABCDEFGHIJ", "d} from 'deccjsunit/index'\n\nconst injectRe", "redicates.lessThan(\"integerValue\", -214748", "cates.isNotNull(\"stringValueX\");\n        l", "tes.greaterThan(\"stringValue\", \"ABC\");\n   ", "dicates.equalTo(\"stringValue\", \"ABCDEFGHIJ", "cates.isNotNull(\"stringValue\");\n        le", "ates.notEqualTo(\"stringValue\", \"ABCDEFGHIJ", "title = this.$t('strings.world');\n    },\n ", ") {\n        console.info('TestApplication ", " {\n                \"integerValue\": 2147483", " {\n                \"integerValue\": 1,\n    ", "loatValue REAL , stringValue TEXT , blobVa", "icates.greaterThan(\"integerValue\", 1);\n   ", "tes.greaterThan(\"stringValue\", \"ZZZ\");\n   ", "nsole.info('onShow finish')\n        const ", ") {\n        console.info(TAG + 'afterAll')", "f(global) || global\ninjectRef.regeneratorR", "dicates.notEqualTo(\"integerValue\", 1);\n   ", "erThanOrEqualTo(\"stringValue\", \"ABC\");\n   ", "ssThanOrEqualTo(\"stringValue\", \"ABD\");\n   ", "xtend)\n        core.init()\n        const c", "*******Unit Test Begin*************\");\n\n  ", "sunit/index'\n\nconst injectRef = Object.get", "     await rdbStore.insert(\"AllDataType\", ", ") {\n        console.info(TAG + 'afterEach'", "icates.greaterThan(\"integerValue\", -999);\n", "edicates.isNull(\"stringValue\");\n        le", "var rdbStore = undefined;\nvar DOUBLE_MAX ="], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RdbPredicates", "api_method_name": "notIn", "api_method_all": "notIn(field: string, value: Array<ValueType>): RdbPredicates;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": [";\n            query.notInNumber(\"key\", [1, 2]", ";\n            query.notInNumber(\"key\", [1000]", ";\n            query.notInString(\"key\", [\"\", \"", "r(\"key\", [1, 2, 3]).notInNumber(\"key\", [1, 7,", "To(\"key\", 0).and(1).notInNumber(\"key\", [1, 3]", ";\n            query.notInNumber(\"key\", [1, 2,", ";\n            query.notInString(\"key\", [\"v1\",", ";\n            query.notInNumber(\"key\", [\"stri", ";\n            query.notInString(\"key\", [1, 2]", "\n        predicates.notIn(\"integerValue\", val", "lTo(\"key\", 0).or(1).notInNumber(\"key\", [1, 3]", ";\n            query.notInNumber(\"key\", [1], 2", "taAbilityPredicates.notIn(\"integerValue\", val"], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}]}