{"subsystem_ch": "\u5305\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "appexecfwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\bundle\\hapModuleInfo", "api": [{"api_class_name": "HapModuleInfo", "api_method_all": "export interface HapModuleInfo {\r\n  \r\n  readonly name: string;\r\n  \r\n  readonly description: string;\r\n  \r\n  readonly descriptionId: number;\r\n  \r\n  readonly icon: string;\r\n  \r\n  readonly label: string;\r\n  \r\n  readonly labelId: number;\r\n  \r\n  readonly iconId: number;\r\n  \r\n  readonly backgroundImg: string;\r\n  \r\n  readonly supportedModes: number;\r\n  \r\n  readonly reqCapabilities: Array<string>;\r\n  \r\n  readonly deviceTypes: Array<string>;\r\n  \r\n  readonly abilityInfo: Array<AbilityInfo>;\r\n  \r\n  readonly moduleName: string;\r\n  \r\n  readonly mainAbilityName: string;\r\n  \r\n  readonly installationFree: boolean;\r\n\r\n  \r\n  readonly mainElementName: string;\r\n\r\n  \r\n  readonly extensionAbilityInfo: Array<ExtensionAbilityInfo>;\r\n  \r\n  readonly metadata: Array<Metadata>;\r\n}", "api_method_name": "HapModuleInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": ["=======begin bms_getHapModuleInfo_0300===========')\n ", "    \n    it('bms_getHapModuleInfo_0400', 0, async fun", "    \n    it('bms_getHapModuleInfo_0200', 0, async fun", "=======begin bms_getHapModuleInfo_0200===========')\n ", "               checkHapModuleInfo(result.hapModuleInf", "       title: 'Test HapModuleInfo'\n    },\n    onInit(", "    \n    it('bms_getHapModuleInfo_0500', 0, async fun", " this.title = 'Test HapModuleInfo';\n    },\n    onShow", "=======begin bms_getHapModuleInfo_0400===========')\n ", "\n\n    function checkHapModuleInfo(dataInfo) {\n       ", "=======begin bms_getHapModuleInfo_0100===========')\n ", "=======begin bms_getHapModuleInfo_0600===========')\n ", "    \n    it('bms_getHapModuleInfo_0600', 0, async fun", "=======begin bms_getHapModuleInfo_0500===========')\n ", "               checkHapModuleInfo(hapModuleInfo);\n   ", "    \n    it('bms_getHapModuleInfo_0100', 0, async fun", "    \n    it('bms_getHapModuleInfo_0300', 0, async fun"], "files": ["ActsBmsHapModuleTest.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "name", "api_method_all": "readonly name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 398, "since": 7, "api_used": "\u662f", "lines": ["info.get(formName), name);\n        }\n    }\n\n", "dule_1000\n    * @tc.name: getFormsInfoByModu", "dule_1200\n    * @tc.name: getFormsInfoByModu", "ect(applicationInfo.name).assertEqual(bundle", "Info_1600\n    * @tc.name: getFormsInfo : get", "dule_1800\n    * @tc.name: getFormsInfoByModu", "rtEqual('Form_JS' + name);\n        console.i", "dule_0200\n    * @tc.name: getFormsInfoByModu", "o.customizeDatas[0].name).assertEqual('origi", "me).assertEqual('JS_name1S');\n        expect", "app by wrong module name (by promise)\n    */", "   .assertEqual('[{\"name\":\"originWidgetName1", "dule_0400\n    * @tc.name: getFormsInfoByModu", "third app by bundle name and module name (by", "dule_0100\n    * @tc.name: getFormsInfoByModu", "  expect(bundleInfo.name).assertEqual(bundle", "dle name and module name (by promise)\n    */", "ormByName(dataInfo, name) {\n        console.", "dule_0600\n    * @tc.name: getFormsInfoByModu", "dule_1300\n    * @tc.name: getFormsInfoByModu", "nfo.set(dataInfo[i].name, dataInfo[i]);\n    ", "dule_0700\n    * @tc.name: getFormsInfoByModu", "dle name and module name (by callback)\n    *", "dule_1500\n    * @tc.name: getFormsInfoByModu", "me).assertEqual('JS_name1V');\n        expect", "app by wrong bundle name (by callback)\n    *", "formName, dataInfo, name, system = false, ve", "dule_1700\n    * @tc.name: getFormsInfoByModu", "app by wrong module name (by callback)\n    *", "nfo.set(dataInfo[i].name, 0)\n        }\n     ", "dule_0500\n    * @tc.name: getFormsInfoByModu", "Files(\"wrong bundle name\", (err) => {\n      ", "dule_0800\n    * @tc.name: getFormsInfoByModu", "dule_0300\n    * @tc.name: getFormsInfoByModu", "dule_1400\n    * @tc.name: getFormsInfoByModu", "    expect(dataInfo.name).assertEqual('Form_", "dule_1600\n    * @tc.name: getFormsInfoByModu", "app by wrong bundle name (by promise)\n    */", "dule_0900\n    * @tc.name: getFormsInfoByModu", "dule_1100\n    * @tc.name: getFormsInfoByModu"], "files": ["ActsBmsCleanCacheTest.test.js", "ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ActsBmsMetaDataTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "actszipfileandunzipfiletest.test.js", "ActsBmsGetBackGroundModes.test.js", "getApplicationInfoJsunit.test.ets", "ActsBmsJsTest.test.js", "GetabilityInfo.test.ets", "IsAbilityEnabledETSUnit.ets", "ActsBmsFormsInfoTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "description", "api_method_all": "readonly description: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 124, "since": 7, "api_used": "\u662f", "lines": ["xpect(parameters[i].description).assertEqual('$stri", "expect(typeof (info.descriptionId)).assertEqual(\"nu", "$string:mainability_description\"\nconst START_ABILIT", "xpect(hapModuleInfo.descriptionId).assertEqual(0);\n", ";\n      expect(data.descriptionId > 0).assertEqual(", ")\n      expect(info.description).assertEqual(\"$stri", "    expect(dataInfo.description).assertEqual('JS1V ", ";\n      expect(data.description).assertEqual(\"$stri", "ct(datainfo.appInfo.descriptionId >= 0).assertTrue(", "t(typeof results[i].description).assertEqual('strin", "$string:mainability_description');\n      expect(dat", "expect(typeof (info.description)).assertEqual(\"stri", ";\n      expect(data.description).assertEqual('$stri", "$string:mainability_description');\n          if (da", "ect(typeof (data[i].description)).assertEqual('stri", ")\n      expect(info.descriptionId > 0).assertTrue()", "$string:mainability_description\")\n      expect(type", "     expect(data[i].descriptionId > 0).assertEqual(", "$string:mainability_description\");\n      expect(typ", "    expect(dataInfo.description).assertEqual('JS1S ", "    expect(dataInfo.descriptionId >= 0).assertTrue(", "        if (data[i].descriptionId !== 0) {\n        ", "expect(typeof (data.description)).assertEqual(\"stri", "ect(typeof (data[i].descriptionId)).assertEqual('nu", "$string:mainability_description');\n                ", "ect(typeof dataInfo.description).assertEqual('strin", "ypeof parameters[i].description).assertEqual('strin", "xpect(hapModuleInfo.description).assertEqual('');\n ", "  expect(results[i].description).assertEqual('$stri", "expect(typeof (data.description)).assertEqual('stri", "ct(datainfo.appInfo.description).assertEqual(DESCRI", "expect(typeof (data.descriptionId)).assertEqual('nu", "ect(typeof dataInfo.descriptionId).assertEqual('num", "     expect(data[i].description).assertEqual('$stri"], "files": ["ActsBmsMetaDataTest.test.js", "ActsBmsHapModuleTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets", "ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "descriptionId", "api_method_all": "readonly descriptionId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 41, "since": 7, "api_used": "\u662f", "lines": ["        if (data[i].descriptionId !== 0) {\n          ", "ct(datainfo.appInfo.descriptionId >= 0).assertTrue()\n", ";\n      expect(data.descriptionId > 0).assertEqual(tr", "    expect(datainfo.descriptionId >= 0).assertTrue()\n", ")\n      expect(info.descriptionId > 0).assertTrue()\n ", "ct(dataInfo.appInfo.descriptionId >= 0).assertTrue()\n", "nfo.applicationInfo.descriptionId >= 0).assertTrue()\n", "expect(typeof (info.descriptionId)).assertEqual(\"numb", "    expect(dataInfo.descriptionId >= 0).assertTrue();", "     expect(data[i].descriptionId > 0).assertEqual(tr", "xpect(hapModuleInfo.descriptionId).assertEqual(0);\n  ", "expect(typeof (data.descriptionId)).assertEqual('numb", "ect(typeof dataInfo.descriptionId).assertEqual('numbe", "ect(typeof (data[i].descriptionId)).assertEqual('numb", "    expect(datainfo.descriptionId).assertLarger(0)\n  "], "files": ["ActsBmsHapModuleTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets", "ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "icon", "api_method_all": "readonly icon: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 144, "since": 7, "api_used": "\u662f", "lines": ["xpect(hapModuleInfo.icon).assertEqual('');\n ", "assertEqual(\"$media:icon\");\n      expect(typ", "ect(typeof dataInfo.iconId).assertEqual('num", "assertEqual(\"$media:icon\")\n                e", " expect(datainfo[i].icon.length).assertLarge", "assertEqual(\"$media:icon\")\n      expect(type", "     expect(data[i].icon).assertEqual('$medi", "expect(typeof (info.iconId)).assertEqual(\"nu", "expect(typeof (data.icon)).assertEqual('stri", "ct(datainfo.appInfo.icon).assertEqual(\"$medi", "assertEqual(\"$media:icon\")\n            expec", "ect(typeof (data[i].iconId)).assertEqual('nu", ";\n      expect(data.icon).assertEqual('$medi", "    expect(datainfo.icon).assertEqual(\"$medi", "ect(typeof dataInfo.icon).assertEqual('strin", "ct(datainfo.appInfo.iconId >= 0).assertTrue(", ";\n      expect(data.iconId > 0).assertEqual(", "xpect(hapModuleInfo.iconId).assertEqual(0);\n", "expect(typeof (data.iconId)).assertEqual('nu", ")\n      expect(info.icon).assertEqual(\"$medi", "ect(typeof (data[i].icon)).assertEqual('stri", ";\n      expect(data.icon).assertEqual(\"$medi", "expect(typeof (data.icon)).assertEqual(\"stri", "assertEqual('$media:icon');\n          expect", "ect(data[i].appInfo.icon.length).assertLarge", "expect(typeof (info.icon)).assertEqual(\"stri", ")\n      expect(info.iconId > 0).assertTrue()", "assertEqual('$media:icon');\n      expect(dat", "     expect(data[i].iconId > 0).assertEqual("], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "getAllApplicationInfoJsunit.test.ets", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "label", "api_method_all": "readonly label: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 103, "since": 7, "api_used": "\u662f", "lines": ["ect(typeof dataInfo.labelId).assertEqual('num", "ct(datainfo.appInfo.label).assertEqual(\"$stri", "ect(typeof (data[i].labelId)).assertEqual('nu", "expect(typeof (info.label)).assertEqual(\"stri", "t(parseInt(datainfo.labelId)).assertLarger(0)", "xpect(hapModuleInfo.labelId).assertEqual(0);\n", "expect(typeof (data.label)).assertEqual('stri", "expect(typeof (data.label)).assertEqual(\"stri", ";\n      expect(data.labelId > 0).assertEqual(", "     expect(data[i].labelId > 0).assertEqual(", "expect(typeof (data.labelId)).assertEqual('nu", "ect(typeof dataInfo.label).assertEqual('strin", "     expect(data[i].label).assertEqual('$stri", "        if (data[i].label !== 0) {\n          ", ";\n      expect(data.label).assertEqual(\"$stri", "ect(data[i].appInfo.label.length).assertLarge", ")\n      expect(info.label).assertEqual(\"$stri", "expect(typeof (info.labelId)).assertEqual(\"nu", "ct(datainfo.appInfo.labelId >= 0).assertTrue(", "xpect(hapModuleInfo.label).assertEqual('$stri", " expect(datainfo[i].label.length).assertLarge", ";\n      expect(data.label).assertEqual('$stri", "ect(typeof (data[i].label)).assertEqual('stri", ")\n      expect(info.labelId > 0).assertTrue()", "nfo.abilityInfos[j].label).assertEqual(\"$stri", "    expect(datainfo.label).assertEqual(\"$stri"], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "getAllApplicationInfoJsunit.test.ets", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "labelId", "api_method_all": "readonly labelId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 37, "since": 7, "api_used": "\u662f", "lines": ["t(parseInt(datainfo.labelId)).assertLarger(0)\n ", "ect(typeof (data[i].labelId)).assertEqual('numb", "ct(dataInfo.appInfo.labelId >= 0).assertTrue()\n", "xpect(hapModuleInfo.labelId).assertEqual(0);\n  ", ")\n      expect(info.labelId > 0).assertTrue()\n ", "nfo.applicationInfo.labelId >= 0).assertTrue()\n", "ect(typeof dataInfo.labelId).assertEqual('numbe", "    expect(datainfo.labelId >= 0).assertTrue()\n", "expect(typeof (data.labelId)).assertEqual('numb", "     expect(data[i].labelId > 0).assertEqual(tr", "ct(datainfo.appInfo.labelId >= 0).assertTrue()\n", ";\n      expect(data.labelId > 0).assertEqual(tr", "expect(typeof (info.labelId)).assertEqual(\"numb"], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "getAllApplicationInfoJsunit.test.ets", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "iconId", "api_method_all": "readonly iconId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 37, "since": 7, "api_used": "\u662f", "lines": ["ect(typeof dataInfo.iconId).assertEqual('numbe", "    expect(datainfo.iconId >= 0).assertTrue()\n", ")\n      expect(info.iconId > 0).assertTrue()\n ", "xpect(hapModuleInfo.iconId).assertEqual(0);\n  ", ";\n      expect(data.iconId > 0).assertEqual(tr", "ect(typeof (data[i].iconId)).assertEqual('numb", "     expect(data[i].iconId > 0).assertEqual(tr", "t(parseInt(datainfo.iconId)).assertLarger(0)\n ", "ct(dataInfo.appInfo.iconId >= 0).assertTrue()\n", "expect(typeof (info.iconId)).assertEqual(\"numb", "expect(typeof (data.iconId)).assertEqual('numb", "nfo.applicationInfo.iconId >= 0).assertTrue()\n", "ct(datainfo.appInfo.iconId >= 0).assertTrue()\n"], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "getAllApplicationInfoJsunit.test.ets", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "backgroundImg", "api_method_all": "readonly backgroundImg: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["ect(typeof dataInfo.backgroundImg).assertEqual('strin", "xpect(hapModuleInfo.backgroundImg).assertEqual('');\n "], "files": ["ActsBmsHapModuleTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "supportedModes", "api_method_all": "readonly supportedModes: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 46, "since": 7, "api_used": "\u662f", "lines": ["expect(typeof (data.supportedModes)).assertEqual('numb", "xpect(hapModuleInfo.supportedModes).assertEqual(0);\n  ", "ect(typeof (data[i].supportedModes)).assertEqual('numb", "expect(typeof (info.supportedModes)).assertEqual(\"numb", "ct(datainfo.appInfo.supportedModes).assertEqual(0)\n   ", "ify(data[i].appInfo.supportedModes))\n                c", "    expect(datainfo.supportedModes).assertEqual(0)\n   ", "ct(dataInfo.appInfo.supportedModes).assertEqual(0)\n   ", ")\n      expect(info.supportedModes).assertEqual(0)\n   ", "ect(data[i].appInfo.supportedModes).assertEqual(0)\n   ", "nfo.applicationInfo.supportedModes).assertEqual(0)\n   ", "     expect(data[i].supportedModes).assertEqual(0);\n  ", " expect(datainfo[i].supportedModes).assertEqual(0)\n   ", "ect(typeof dataInfo.supportedModes).assertEqual('numbe", ";\n      expect(data.supportedModes).assertEqual(0);\n  "], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "getAllApplicationInfoJsunit.test.ets", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "reqCapabilities", "api_method_all": "readonly reqCapabilities: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["ngify(hapModuleInfo.reqCapabilities));\n                ", "len = hapModuleInfo.reqCapabilities.length; i < len; i+", "ypeof hapModuleInfo.reqCapabilities).assertEqual('objec", "xpect(hapModuleInfo.reqCapabilities[i]).assertEqual('')", "info('hapModuleInfo.reqCapabilities' + JSON.stringify(h", "ect(typeof dataInfo.reqCapabilities).assertEqual('objec"], "files": ["ActsBmsHapModuleTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "deviceTypes", "api_method_all": "readonly deviceTypes: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": [";\n      expect(data.deviceTypes[0]).assertEqual(\"ph", "xpect(hapModuleInfo.deviceTypes[0]).assertEqual('ph", "ect(typeof dataInfo.deviceTypes).assertEqual('objec", "ngify(hapModuleInfo.deviceTypes));\n                "], "files": ["GetabilityInfo.test.ets", "ActsBmsHapModuleTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "abilityInfo", "api_method_all": "readonly abilityInfo: Array<AbilityInfo>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 125, "since": 7, "api_used": "\u662f", "lines": ["et i = 0; i < data5.abilityInfos.length; i++) {\n   ", "gify(bundleInfos[i].abilityInfos))\n                ", "         if (result.abilityInfos.length == NUM_TWO)", "       expect(data3.abilityInfos[1].backgroundModes", "   + bundleInfos[i].abilityInfos[j].name)\n         ", "      expect(result.abilityInfos[1].name).assertEqu", "SON.stringify(data3.abilityInfos[2].backgroundModes", "len = hapModuleInfo.abilityInfo.length; j < len; j+", "xpect(hapModuleInfo.abilityInfo[j].name).assertEqua", "ect(typeof dataInfo.abilityInfo).assertEqual('objec", "ypeof hapModuleInfo.abilityInfo).assertEqual('objec", "ata5======\" + data5.abilityInfos.length)\n          ", "      expect(result.abilityInfos[0].srcLanguage).as", "       expect(data5.abilityInfos[3].backgroundModes", "e.info(\"=====>data5.abilityInfos======\" + JSON.stri", "pect(bundleInfos[i].abilityInfos[j].backgroundModes", "SON.stringify(data5.abilityInfos[3].backgroundModes", "ngify(hapModuleInfo.abilityInfo));\n                ", "      expect(result.abilityInfos[1].srcLanguage).as", "       expect(data3.abilityInfos[3].backgroundModes", "       expect(data3.abilityInfos[2].backgroundModes", "      expect(result.abilityInfos[0].srcPath).assert", "ata3======\" + data3.abilityInfos.length)\n          ", "o('===hapModuleInfo.abilityInfo===' + JSON.stringif", "et q = 0; q < data3.abilityInfos.length; q++) {\n   ", "         if (result.abilityInfos.length == NUM_FOUR", " j < bundleInfos[i].abilityInfos.length; j++) {\n   ", " if (bundleInfos[i].abilityInfos[j].name == 'com.ex", "e.info(\"=====>data3.abilityInfos======\" + JSON.stri", "       expect(data5.abilityInfos[1].backgroundModes", "      expect(result.abilityInfos[0].name).assertEqu", "ON.stringify(result.abilityInfos));\n               ", "SON.stringify(data5.abilityInfos[2].backgroundModes", "      expect(result.abilityInfos.length).assertEqua", "       expect(data5.abilityInfos[2].backgroundModes", "SON.stringify(data3.abilityInfos[3].backgroundModes"], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "ActsBmsJsTest.test.js", "GetabilityInfo.test.ets", "List.test.ets", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "moduleName", "api_method_all": "readonly moduleName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 49, "since": 7, "api_used": "\u662f", "lines": ["info.moduleInfos[s].moduleName).assertEqual(\"entry", "info.moduleInfos[j].moduleName).assertEqual(\"entry", "data.moduleInfos[0].moduleName).assertEqual('entry", "nfo.abilityInfos[j].moduleName).assertEqual(\"entry", "Info.moduleInfos[s].moduleName).assertEqual(\"entry", "o[i].moduleInfos[j].moduleName.length).assertLarge", "    expect(dataInfo.moduleName).assertEqual('entry", ";\n      expect(data.moduleName).assertEqual(\"entry", "a[i].moduleInfos[0].moduleName).assertEqual('entry", "xpect(hapModuleInfo.moduleName).assertEqual('entry", "Info.moduleInfos[j].moduleName).assertEqual(\"entry", "    expect(datainfo.moduleName).assertEqual(\"entry", "=======' + dataInfo.moduleName);\n        console.i", "t.hapModuleInfos[0].moduleName).assertEqual('entry", "t.hapModuleInfos[1].moduleName).assertEqual('bmsma", "expect(typeof (data.moduleName)).assertEqual(\"stri", "ect(typeof dataInfo.moduleName).assertEqual('strin"], "files": ["ActsBmsHapModuleTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets", "ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "mainAbilityName", "api_method_all": "readonly mainAbilityName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["======get hapModule mainAbilityName========' + result.h", "t.hapModuleInfos[0].mainAbilityName)\n                  ", "======get hapModule mainAbilityName========' + hapModul", "xpect(hapModuleInfo.mainAbilityName).assertEqual('com.e", "t.hapModuleInfos[0].mainAbilityName).assertEqual('');\n ", "t.hapModuleInfos[1].mainAbilityName).assertEqual(second", "==' + hapModuleInfo.mainAbilityName)\n                ex", "ect(typeof dataInfo.mainAbilityName).assertEqual('strin", "t.hapModuleInfos[0].mainAbilityName).assertEqual('com.e", "t.hapModuleInfos[0].mainAbilityName).assertEqual(firstM"], "files": ["ActsBmsHapModuleTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "installationFree", "api_method_all": "readonly installationFree: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["xpect(hapModuleInfo.installationFree).assertEqual(false)", "ect(typeof dataInfo.installationFree).assertEqual('boole"], "files": ["ActsBmsHapModuleTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "mainElementName", "api_method_all": "readonly mainElementName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["xpect(hapModuleInfo.mainElementName).assertEqual('com.e"], "files": ["ActsBmsHapModuleTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "extensionAbilityInfo", "api_method_all": "readonly extensionAbilityInfo: Array<ExtensionAbilityInfo>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HapModuleInfo", "api_method_name": "metadata", "api_method_all": "readonly metadata: Array<Metadata>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ect(typeof (data[i].metadata)).assertEqual('obje", "expect(typeof (data.metadata)).assertEqual('obje"], "files": ["getApplicationInfoJsunit.test.ets", "getAllApplicationInfoJsunit.test.ets"], "is_white": " ", "desc": " "}]}