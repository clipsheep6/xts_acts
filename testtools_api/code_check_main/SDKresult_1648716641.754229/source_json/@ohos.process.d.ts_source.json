{"subsystem_ch": "\u8bed\u8a00\u7f16\u8bd1\u5668\u8fd0\u884c\u65f6\u5b50\u7cfb\u7edf", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.process", "api": [{"api_class_name": "process", "api_method_all": "declare namespace process {\r\n\r\n    export interface ChildProcess {\r\n        \r\n        readonly pid: number;\r\n        \r\n        readonly ppid: number;\r\n\r\n        \r\n        readonly exitCode: number;\r\n\r\n        \r\n        readonly killed: boolean;\r\n\r\n        \r\n        wait(): Promise<number>;\r\n\r\n        \r\n        getOutput(): Promise<Uint8Array>;\r\n\r\n        \r\n        getErrorOutput(): Promise<Uint8Array>;\r\n\r\n        \r\n        close(): void;\r\n\r\n        \r\n        kill(signal: number | string): void;\r\n    }\r\n\r\n    \r\n    const egid: number;\r\n\r\n    \r\n    const euid: number;\r\n\r\n    \r\n    const gid: number\r\n\r\n    \r\n    const uid: number;\r\n\r\n    \r\n    const groups: number[];\r\n\r\n    \r\n    const pid: number;\r\n\r\n    \r\n    const ppid: number;\r\n\r\n    \r\n    const tid: number;\r\n\r\n    \r\n    function isIsolatedProcess(): boolean;\r\n\r\n    \r\n    function isAppUid(v: number): boolean;\r\n\r\n    \r\n    function is64Bit(): boolean;\r\n\r\n    \r\n    function getUidForName(v: string): number;\r\n\r\n    \r\n    function getThreadPriority(v: number): number;\r\n\r\n    \r\n    function getStartRealtime(): number;\r\n\r\n    \r\n    function getPastCpuTime(): number;\r\n\r\n    \r\n    function getSystemConfig(name: number): number;\r\n\r\n    \r\n    function getEnvironmentVar(name: string): string;\r\n\r\n    type EventListener = (evt: Object) => void;\r\n    \r\n    function runCmd(command: string,\r\n        options?: { timeout : number, killSignal : number | string, maxBuffer : number }): ChildProcess;\r\n\r\n    \r\n    function abort(): void;\r\n\r\n    \r\n    function on(type: string, listener: EventListener): void;\r\n\r\n    \r\n    function off(type: string): boolean;\r\n\r\n    \r\n    function exit(code: number): void;\r\n\r\n    \r\n    function cwd(): string;\r\n\r\n    \r\n    function chdir(dir: string): void;\r\n\r\n    \r\n    function uptime(): number;\r\n\r\n    \r\n    function kill(signal: number, pid: number): boolean;\r\n}", "api_method_name": "process", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 265, "since": 0, "api_used": "\u662f", "lines": ["mber' is the targer process exit code.\n     * @", "        let child = process.runCmd('echo bcd;')", "        let child = process.runCmd('sleep 2; ec", "        let child = process.runCmd('1')\n       ", "        let child = process.runCmd('sleep 5; ec", "        let child = process.runCmd('each abc')\n", "sunit/index'\nimport process from '@ohos.process", "process from '@ohos.process'\ndescribe('ChildPro", "        let child = process.runCmd('mkdir 123')", "        let child = process.runCmd('ls')\n      ", "f the current child process.\n     * @tc.require", "        let child = process.runCmd('echo abc', ", "        let child = process.runCmd('echo abc')\n", "        let child = process.runCmd('cp ./1 ./2'", "        let child = process.runCmd('makdir 1.tx", "        let child = process.runCmd('adc')\n     ", "        let child = process.runCmd('cd ..')\n   ", "        let child = process.runCmd('echo ~_~;')", "        let child = process.runCmd('echo \u6d63\u72b2\ufffd?')", "        let child = process.runCmd('echo 123;')", "        let child = process.runCmd('echo helloW", "whether the current process signal is sent succ", "       let child =  process.runCmd('ls; sleep 5", "        let child = process.runCmd('echo \"error", "        let child = process.runCmd('mkdir test.", "        let child = process.runCmd('chmod 777 1", " pid of the current process.\n     * @tc.require", "        let child = process.runCmd('echo abc;',", "        let child = process.runCmd('ls; sleep 5"], "files": ["util.test.js", "Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "isIsolatedProcess", "api_method_all": "function isIsolatedProcess(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": [" let pres = process.isIsolatedProcess()\n        expect(pr", "  let pres =process.isIsolatedProcess()\n            expec"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "isAppUid", "api_method_all": "function isAppUid(v: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["et isorno = process.isAppUid(8569)\n        expec", "et isorno = process.isAppUid(80000)\n        expe", "et isorno = process.isAppUid(123)\n        expect", "et isorno = process.isAppUid(789)\n        expect", "et isorno = process.isAppUid(167)\n        expect"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "is64Bit", "api_method_all": "function is64Bit(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["et isorno = process.is64Bit()\n        expect(is", "et isorno = process.is64Bit()\n            expec"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "getUidForName", "api_method_all": "function getUidForName(v: string): number;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": [" let pres = process.getUidForName(\"12356\")\n          ", " let pres = process.getUidForName(\"root\")\n        if("], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "getThreadPriority", "api_method_all": "function getThreadPriority(v: number): number;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["  let pri = process.getThreadPriority(pres)\n        if(pr", "  let pri = process.getThreadPriority(pres)\n            i"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "getStartRealtime", "api_method_all": "function getStartRealtime(): number;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["et priTwo = process.getStartRealtime()\n            expec", "  let pri = process.getStartRealtime()\n            if(pr", "et priOne = process.getStartRealtime()\n            let p", "  let pri = process.getStartRealtime()\n        if(pri !="], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "getPastCpuTime", "api_method_all": "function getPastCpuTime(): number;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["  let pri = process.getPastCpuTime()\n            if(pr", "  let pri = process.getPastCpuTime()\n        if(pri > "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "getSystemConfig", "api_method_all": "function getSystemConfig(name: number): number;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["  let pri = process.getSystemConfig(_SC_OPEN_MAX)\n     ", "  let pri = process.getSystemConfig(_SC_ARG_MAX)\n      ", "  let pri = process.getSystemConfig(_SC_PAGESIZE)\n     "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "getEnvironmentVar", "api_method_all": "function getEnvironmentVar(name: string): string;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["  let pri = process.getEnvironmentVar(\"USER\")\n           ", "  let pri = process.getEnvironmentVar(\"i123\")\n           ", "  let pri = process.getEnvironmentVar(\"USER\")\n        if(", "  let pri = process.getEnvironmentVar(\"PATH\")\n           "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "runCmd", "api_method_all": "function runCmd(command: string,\r\n        options?: { timeout : number, killSignal : number | string, maxBuffer : number }): ChildProcess;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 50, "since": 7, "api_used": "\u662f", "lines": ["let child = process.runCmd('makdir 1.txt')\n   ", "et child =  process.runCmd('ls;')\n        chil", "let child = process.runCmd('ls; sleep 5;')\n   ", "et child =  process.runCmd('ls')\n        child", "et child =  process.runCmd('sleep 5; echo A')\n", "let child = process.runCmd('cd ..')\n        ch", "let child = process.runCmd('each abc')\n       ", "let child = process.runCmd('mkdir 123');\n     ", "et child =  process.runCmd('ls;')\n        let ", "let child = process.runCmd('cp ./1 ./2')\n     ", "let child = process.runCmd('mkdir test.cpp')\n ", "let child = process.runCmd('adc')\n        chil", "let child = process.runCmd('echo bcd;')\n      ", "let child = process.runCmd('chmod 777 123')\n  ", "let child = process.runCmd('ls')\n        await", "let child = process.runCmd('echo helloWorld');", "let child = process.runCmd('1')\n        child.", "et child =  process.runCmd('ls')\n        let r", "let child = process.runCmd('echo abc;', { maxB", "et child =  process.runCmd('ls')\n        let t", "let child = process.runCmd('sleep 2; echo abc;", "et child =  process.runCmd('ls; sleep 1s;')\n  ", "let child = process.runCmd('echo 123;');\n     ", "et child =  process.runCmd('ls; sleep 5s;')\n  ", "et child =  process.runCmd('ls')\n        funct", "et child =  process.runCmd('echo A')\n        l", "let child = process.runCmd('echo \u6d63\u72b2\ufffd?');\n     ", "let child = process.runCmd('echo ~_~;');\n     ", "let child = process.runCmd('echo abc', { maxBu", "let child = process.runCmd('sleep 5; echo abc;", "let child = process.runCmd('echo helloWorld;')", "let child = process.runCmd('echo abc')\n       ", "let child = process.runCmd('echo \"error\" 1>&2'"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "abort", "api_method_all": "function abort(): void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "on", "api_method_all": "function on(type: string, listener: EventListener): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 3803, "since": 7, "api_used": "\u662f", "lines": ["      console.info('onShow finish')\n      ", "ecute()\n\n    },\n    onReady() {\n    },\n}", ".info('TestApplication onDestroy');\n    }\n", "fo('TestApplication onCreate');\n    },\n   ", "test_005', 0, function () {\n        var co", " function () {\n    console.log('******test", "itle: \"\"\n    },\n    onInit() {\n        thi", "\n        expect(options.sensitivity).asser", "  configService.setConfig(this)\n\n        r", "('\u00e4', 'z');\n       console.log(collator1);", "info_test_006:\",options.caseFirst);\n      ", "rmat('zh');\n       console.log('dateTimeFo", "ormatTest_2', function () {\n    console.lo", "ormatTest_1', function () {\n   console.log", "test_003', 0, function () {\n       let dat", "test_002', 0, function () {\n       let dat", "info_test_007:\",options.sensitivity);\n    ", "Create() {\n        console.info('TestAppli", "Instance()\n        const expectExtend = ne", "world');\n    },\n    onShow() {\n        con", "test_006', 0, function () {\n        var co", "xport default {\n    onCreate() {\n        c", "estroy() {\n        console.info('TestAppli", "t()\n\n        const configService = core.ge", "ollator.resolvedOptions();\n        console", "('\u00e4', 'z');\n       console.log(collator2);", "});\n        var options = collator.resolve", "re.init()\n\n        const configService = c", "test_004', 0, function () {\n       var col", "\n        expect(options.caseFirst).assertE", " function () {\n    console.log(\"*******tes", ".info('TestApplication onCreate');\n    },\n", "'\u00e4', 'a');\n        console.log(collator1);", "reate');\n    },\n    onDestroy() {\n        ", "Options();\n        console.log(\"collator_i", "getDefaultService('config')\n        config", "per',ignorePunctuation:'true'});\n        v", "test_007', 0, function () {\n        var co", "test_001', 0, function () {\n       let dat", "('config')\n        configService.setConfig", "fo('TestApplication onDestroy');\n    }\n};\n", "onShow() {\n        console.info('onShow fi", ", function () {\n   console.log('******test", "'\u00e4', 'a');\n        console.log(collator2);", "eFormatTest', function () {\n    console.lo", "w finish')\n        const core = Core.getIn"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "worker_010.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "worker_0121.js", "Queue.test.js", "ExampleJsunit.test.js", "worker_0151.js", "worker_0091.js", "worker_0131.js", "worker_003.js", "convertxml.test.js", "url.test.js", "LightWeightMap.test.js", "app.js", "intlCollator_test.js", "worker_0141.js", "worker_011.js", "worker_006.js", "worker_0111.js", "worker_012.js", "LightWeightSet.test.js", "worker_008.js", "worker_009.js", "worker_013.js", "intlLocale_test.js", "worker_004.js", "HashMap.test.js", "intlDateTimeFormat_test.js", "uri.test.js", "index.js", "second.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "TreeSet.test.js", "worker_0152.js", "Process.test.js", "numberFormat_test.js", "PlainArray.test.js", "TreeMap.test.js", "worker_007.js", "worker_015.js", "worker.js", "worker_002.js", "worker_0122.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "off", "api_method_all": "function off(type: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": [", add1)\n        let offtest = process.off(\"", "qual(1)\n\n        ss.off(\"zhangsan\")\n\n      ", "   {\n            ss.off(\"zhangsan\")\n       ", "on () {\n        let offtest = process.off(\"", "    // check worker off function is ok\n    ", "s ok\n    it('worker_off_test_002', 0, async", "t offtest = process.off(\"456\")\n        expe", "s ok\n    it('worker_off_test_001', 0, async", "23\")\n        expect(offtest).assertEqual(fa", "56\")\n        expect(offtest).assertEqual(fa", "on\")\n        expect(offtest).assertEqual(tr", "t offtest = process.off(\"123\")\n        expe", "t offtest = process.off(\"UnHandleRejection\""], "files": ["Worker.test.js", "Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "exit", "api_method_all": "function exit(code: number): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 68, "since": 7, "api_used": "\u662f", "lines": ["       expect(child.exitCode === 0).assertEq", "       expect(child.exitCode).assertEqual(0)", " the targer process exit code.\n     * @tc.re", "urn exitCode is the exit code of the current", "lse\n\t\t\n        ss.onexit = function () {\n   ", "\n      }\n      ss.onexit = function(code) {\n", "false\n\n        ss.onexit = function () {\n   ", " * @tc.desc: return exitCode is the exit cod", "       expect(child.exitCode).assertEqual(9)", "erxx \");\n      ss.onexit = function() {\n    ", "\n      }\n      ss.onexit = function() {\n    ", " let result = child.exitCode\n        expect(", "false\n\n        ss.onexit = function () {\n\t\t\t", "     }\n        ss.onexit = function () {\n   "], "files": ["worker_012.js", "worker_014.js", "worker_009.js", "worker_013.js", "worker_010.js", "Process.test.js", "Worker.test.js", "worker_011.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "cwd", "api_method_all": "function cwd(): string;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["  {\n            let cwdir = process.cwd()\n ", "ss.cwd()\n        if(cwdir){\n            var", "wd()\n            if(cwdir){\n               ", "let cwdir = process.cwd()\n        if(cwdir)", "let cwdir = process.cwd()\n            if(cw", "t result1 = process.cwd()\n        expect(re", "on () {\n        let cwdir = process.cwd()\n "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "chdir", "api_method_all": "function chdir(dir: string): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["et result = process.chdir('/system/app')\n    ", "et result = process.chdir('/data')\n        le", "et result = process.chdir('/system')\n        ", "et result = process.chdir('/system/lib')\n    ", "et result = process.chdir('/..')\n        let "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "uptime", "api_method_all": "function uptime(): number;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 15, "since": 7, "api_used": "\u662f", "lines": ["      while(process.uptime() - result1 <= d);\n", "t result2 = process.uptime()\n        var flag ", "t result1 = process.uptime()\n        function "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "kill", "api_method_all": "function kill(signal: number, pid: number): boolean;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": [" let result = child.kill(13)\n        let tem", " let result = child.kill(1)\n        let temp", "et result = process.kill(3, 123)\n        exp", "et result = process.kill(17, pres)\n        e", "c;', { timeout : 1, killSignal : 9 })\n      ", "et result = process.kill(28, pres)\n        e", " let result = child.kill(9)\n        let temp", " let result = child.kill(3)\n        let temp", ", { timeout : 9000, killSignal : 9 })\n      ", " let result = child.kill('1')\n        let te", "et result = process.kill(3, 113)\n        exp", " 5;')\n        child.kill(9);\n        await c", "   let temp = child.kill(9)\n        child.wa", "   let temp = child.kill('ABCD')\n        chi", "   let temp = child.killed\n        expect(te", " let result = child.kill('SIGHUP')\n        l", "et result = process.kill(23, pres)\n        e", " let result = child.kill('ABC')\n        let ", "c;', { timeout : 1, killSignal : 9 });\n     "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "egid", "api_method_all": "const egid: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["et result = process.egid\n            if(resu", "et result = process.egid\n        if(result >"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "euid", "api_method_all": "const euid: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["et result = process.euid\n            if(resu", "et result = process.euid\n        if(result >"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "uid", "api_method_all": "const uid: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 34, "since": 7, "api_used": "\u662f", "lines": ["* @tc.name: testGetEuid001\n     * @tc.desc:", "* @tc.name: testGetEuid003\n     * @tc.desc:", "ether the specified uid belongs to a partic", "c.desc: Returns the uid based on the specif", " @tc.name: testIsappuid004\n     * @tc.desc:", "*/\n    it('testIsappuid005', 0, function ()", "et result = process.uid\n        if(result >", " */\n    it('testGetEuid004', 0, function ()", "* @tc.name: testGetEuid002\n     * @tc.desc:", " */\n    it('testGetEuid005', 0, function ()", " */\n    it('testGetEuid001', 0, function ()", " */\n    it('testGetEuid002', 0, function ()", "* @tc.name: testGetEuid005\n     * @tc.desc:", "et result = process.uid\n            if(resu", "*/\n    it('testIsappuid003', 0, function ()", " */\n    it('testGetEuid003', 0, function ()", "* @tc.name: testGetEuid004\n     * @tc.desc:", "*/\n    it('testIsappuid004', 0, function ()", " @tc.name: testIsappuid005\n     * @tc.desc:", "t result = process.euid\n        if(result >", "t result = process.euid\n            if(resu", " @tc.name: testIsappuid003\n     * @tc.desc:"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "groups", "api_method_all": "const groups: number[]", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["et result = process.groups\n        let len = r", "et result = process.groups\n            if(resu"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "pid", "api_method_all": "const pid: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 103, "since": 7, "api_used": "\u662f", "lines": [" * @tc.desc: return pid is the pid of the c", "   * @tc.name: testPpid003\n     * @tc.desc:", ".wait()\n        let pid_ = child.pid\n      ", "    */\n    it('testPpid004', 0, function ()", "wait()\n        let ppid_ = child.ppid\n     ", "   let pid_ = child.pid\n        expect(pid_", "   * @tc.name: testPpid001\n     * @tc.desc:", "    */\n    it('testPpid002', 0, function ()", " return ppid is the pid of the current chil", "pid\n        expect(ppid_ > 0).assertEqual(t", ".pid\n        expect(pid_ > 0).assertEqual(t", ": return pid is the pid of the current proc", "    */\n    it('testPpid003', 0, function ()", "   * @tc.name: testPpid004\n     * @tc.desc:", "   * @tc.name: testPpid002\n     * @tc.desc:", " let ppid_ = child.ppid\n        expect(ppid", "    */\n    it('testPpid001', 0, function ()", "* @tc.desc: return ppid is the pid of the c"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "ppid", "api_method_all": "const ppid: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": [" * @tc.desc: return ppid is the pid of the c", "  let ppid_ = child.ppid\n        expect(ppid", "et result = process.ppid\n            if(resu", "ppid\n        expect(ppid_ > 0).assertEqual(t", "et result = process.ppid\n        if(result >", " * @tc.desc: Return ppid is the pid of the c", ".wait()\n        let ppid_ = child.ppid\n     "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "process", "api_method_name": "tid", "api_method_all": "const tid: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": [" let pres = process.tid\n        if(pres > 0", " let pres = process.tid\n        for(let i=0", " let pres = process.tid\n        let pri = p", "ed on the specified tid.\n     * @tc.require", "c.desc: Returns the tid of the current thre", " let pres = process.tid\n            if(pres"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChildProcess", "api_method_all": "export interface ChildProcess {\r\n        \r\n        readonly pid: number;\r\n        \r\n        readonly ppid: number;\r\n\r\n        \r\n        readonly exitCode: number;\r\n\r\n        \r\n        readonly killed: boolean;\r\n\r\n        \r\n        wait(): Promise<number>;\r\n\r\n        \r\n        getOutput(): Promise<Uint8Array>;\r\n\r\n        \r\n        getErrorOutput(): Promise<Uint8Array>;\r\n\r\n        \r\n        close(): void;\r\n\r\n        \r\n        kill(signal: number | string): void;\r\n    }", "api_method_name": "ChildProcess", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": [".process'\ndescribe('ChildProcessTest', function () {"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChildProcess", "api_method_name": "wait", "api_method_all": "wait(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": [" 0]);\n        child.wait();\n        await child.getOutput().then", "ld.wait();\n        await child.getErrorOutput().then(val=>{\n    ", "4, 10, 0])\n        await child.getErrorOutput().then(val=>{\n    ", "dir 123');\n        await child.wait().then(val=>{\n            ex", "9, 10, 0])\n        await child.getOutput().then(val=>{\n         ", ", 0])\n        child.wait();\n        await child.getOutput().then", "7, 98, 0])\n        await child.getOutput().then(val=>{\n         ", "        await child.wait().then(val=>{\n            expect(val).a", "Array([0])\n        await child.getOutput().then(val=>{\n         ", "0, 10, 0])\n        await child.getErrorOutput().then(val=>{\n    ", "ld.wait();\n        await child.getOutput().then(val=>{\n         ", "d.kill(9);\n        await child.wait().then(val=>{\n            ex", "nCmd('ls')\n        await child.wait().then(val=>{\n            ex", "loWorld');\n        await child.wait().then(val=>{\n            ex", "al : 9 });\n        await child.wait().then(val=>{\n            ex"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChildProcess", "api_method_name": "getOutput", "api_method_all": "getOutput(): Promise<Uint8Array>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["        await child.getOutput().then(val=>{\n            for (let i = "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChildProcess", "api_method_name": "getErrorOutput", "api_method_all": "getErrorOutput(): Promise<Uint8Array>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["        await child.getErrorOutput().then(val=>{\n            for (let i = "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChildProcess", "api_method_name": "close", "api_method_all": "close(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["04\n     * @tc.desc: close the target process.", "ion\")\n\nparentPort.onclose = function() {\n    ", "// check parentPort.close is ok\n    it('worke", "01\n     * @tc.desc: close the target process.", "05\n     * @tc.desc: close the target process.", "03\n     * @tc.desc: close the target process.", " let result = child.close()\n        let statu", " let status = child.close()\n        expect(ch", "5s;')\n        child.close()\n        child.wai", " let result = child.close()\n        expect(ch", "e) {\n    parentPort.close()\n}\n", "worker::worker.js onclose\");\n}\n\nparentPort.on", "02\n     * @tc.desc: close the target process.", " let result = child.close()\n        let temp ", "BCD')\n        child.close()\n        let resul"], "files": ["worker.js", "worker_008.js", "Worker.test.js", "Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChildProcess", "api_method_name": "kill", "api_method_all": "kill(signal: number | string): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": [" let result = child.kill(13)\n        let tem", " let result = child.kill(1)\n        let temp", "et result = process.kill(3, 123)\n        exp", "et result = process.kill(17, pres)\n        e", "c;', { timeout : 1, killSignal : 9 })\n      ", "et result = process.kill(28, pres)\n        e", " let result = child.kill(9)\n        let temp", " let result = child.kill(3)\n        let temp", ", { timeout : 9000, killSignal : 9 })\n      ", " let result = child.kill('1')\n        let te", "et result = process.kill(3, 113)\n        exp", " 5;')\n        child.kill(9);\n        await c", "   let temp = child.kill(9)\n        child.wa", "   let temp = child.kill('ABCD')\n        chi", "   let temp = child.killed\n        expect(te", " let result = child.kill('SIGHUP')\n        l", "et result = process.kill(23, pres)\n        e", " let result = child.kill('ABC')\n        let ", "c;', { timeout : 1, killSignal : 9 });\n     "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChildProcess", "api_method_name": "pid", "api_method_all": "readonly pid: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 103, "since": 7, "api_used": "\u662f", "lines": [" * @tc.desc: return pid is the pid of the c", "   * @tc.name: testPpid003\n     * @tc.desc:", ".wait()\n        let pid_ = child.pid\n      ", "    */\n    it('testPpid004', 0, function ()", "wait()\n        let ppid_ = child.ppid\n     ", "   let pid_ = child.pid\n        expect(pid_", "   * @tc.name: testPpid001\n     * @tc.desc:", "    */\n    it('testPpid002', 0, function ()", " return ppid is the pid of the current chil", "pid\n        expect(ppid_ > 0).assertEqual(t", ".pid\n        expect(pid_ > 0).assertEqual(t", ": return pid is the pid of the current proc", "    */\n    it('testPpid003', 0, function ()", "   * @tc.name: testPpid004\n     * @tc.desc:", "   * @tc.name: testPpid002\n     * @tc.desc:", " let ppid_ = child.ppid\n        expect(ppid", "    */\n    it('testPpid001', 0, function ()", "* @tc.desc: return ppid is the pid of the c"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChildProcess", "api_method_name": "ppid", "api_method_all": "readonly ppid: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": [" * @tc.desc: return ppid is the pid of the c", "  let ppid_ = child.ppid\n        expect(ppid", "et result = process.ppid\n            if(resu", "ppid\n        expect(ppid_ > 0).assertEqual(t", "et result = process.ppid\n        if(result >", " * @tc.desc: Return ppid is the pid of the c", ".wait()\n        let ppid_ = child.ppid\n     "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChildProcess", "api_method_name": "exitCode", "api_method_all": "readonly exitCode: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["       expect(child.exitCode).assertEqual(0)\n   ", "       expect(child.exitCode === 0).assertEqual(", " let result = child.exitCode\n        expect(resu", " * @tc.desc: return exitCode is the exit code of", "       expect(child.exitCode).assertEqual(9)\n   "], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChildProcess", "api_method_name": "killed", "api_method_all": "readonly killed: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["   let temp = child.killed\n        expect(temp"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}]}