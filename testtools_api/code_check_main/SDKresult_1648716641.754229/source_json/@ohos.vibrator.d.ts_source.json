{"subsystem_ch": "\u5a92\u4f53\u5b50\u7cfb\u7edf", "subsystem_en": "multimedia", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.vibrator", "api": [{"api_class_name": "vibrator", "api_method_all": "declare namespace vibrator {\r\n    \r\n    function vibrate(duration: number, callback?: AsyncCallback<void>): void;\r\n    function vibrate(duration: number): Promise<void>;\r\n\r\n    \r\n    function vibrate(effectId: EffectId): Promise<void>;\r\n    function vibrate(effectId: EffectId, callback?: AsyncCallback<void>): void;\r\n\r\n    \r\n    function stop(stopMode: VibratorStopMode): Promise<void>;\r\n    function stop(stopMode: VibratorStopMode, callback?: AsyncCallback<void>): void;\r\n\r\n    \r\n    enum EffectId {\r\n        \r\n        EFFECT_CLOCK_TIMER = \"haptic.clock.timer\",\r\n    }\r\n\r\n    \r\n    enum VibratorStopMode {\r\n        \r\n        VIBRATOR_STOP_MODE_TIME = \"time\",\r\n        \r\n        VIBRATOR_STOP_MODE_PRESET = \"preset\",\r\n    }\r\n}", "api_method_name": "vibrator", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "vibrator", "api_method_name": "vibrate", "api_method_all": "function vibrate(duration: number, callback?: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "vibrator", "api_method_name": "vibrate", "api_method_all": "function vibrate(duration: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "vibrator", "api_method_name": "vibrate", "api_method_all": "function vibrate(effectId: EffectId): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "vibrator", "api_method_name": "vibrate", "api_method_all": "function vibrate(effectId: EffectId, callback?: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "vibrator", "api_method_name": "stop", "api_method_all": "function stop(stopMode: VibratorStopMode): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 99, "since": 8, "api_used": "\u662f", "lines": ["   eventEmitter.on('stop', () => {\n            sleep(5000).then(", "wait ringtonePlayer.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function (stopped) {\n     ", "wait ringtonePlayer.stop().then(function () {\n            consol", "await audioCapturer.stop().then(async function (data) {\n        ", "     await audioCap.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function () {\n         con", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tawait sl", "udioDecodeProcessor.stop().then(() => {\n            console.info", "     await audioRen.stop().then(async function () {\n            ", "udioDecodeProcessor.stop().then(() => {\n                console.", "wait ringtonePlayer.stop().then(async function() {\n\t\t\t\tconsole.e", "udioDecodeProcessor.stop().then(() => {\n                    cons", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tconsole.", "wait ringtonePlayer.stop().then(function () {\n                co", ");\n\t\tringtonePlayer.stop().then(function () {\n                co", "\n\t\t\t\tringtonePlayer.stop().then(function () {\n\t\t\t\tconsole.log('A", "ait audioCapPromise.stop().then(async function () {\n            ", "wait ringtonePlayer.stop().then(function(){\n\t\t\tconsole.log('Audi"], "files": ["VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "vibrator", "api_method_name": "stop", "api_method_all": "function stop(stopMode: VibratorStopMode, callback?: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 833, "since": 8, "api_used": "\u662f", "lines": ["RenderLog: Renderer stopped : SUCCESS');\n            resultFlag=", "RenderLog: Renderer stopped');\n             resultFlag=true;\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n\n     ", "RenderLog: Renderer stop:ERROR : '+err.message);\n         result", "orkRecLog: Capturer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n     a", "RenderLog: Renderer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stop failed: Error: ${err.message}`);\n      ", "orkRecLog: Capturer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stopped : SUCCESS');\n     }).catch((err) => ", "RenderLog: Renderer stopped : SUCCESS');\n        }).catch((err) ", "    }\n     audioRen.stop((err, state) => {\n         if (err) {\n ", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n  ", "RenderLog: Renderer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n\n "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EffectId", "api_method_all": "enum EffectId {\r\n        \r\n        EFFECT_CLOCK_TIMER = \"haptic.clock.timer\",\r\n    }", "api_method_name": "EffectId", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "EffectId", "api_method_name": "EFFECT_CLOCK_TIMER", "api_method_all": "EFFECT_CLOCK_TIMER = \"haptic.clock.timer\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VibratorStopMode", "api_method_all": "enum VibratorStopMode {\r\n        \r\n        VIBRATOR_STOP_MODE_TIME = \"time\",\r\n        \r\n        VIBRATOR_STOP_MODE_PRESET = \"preset\",\r\n    }", "api_method_name": "VibratorStopMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VibratorStopMode", "api_method_name": "VIBRATOR_STOP_MODE_TIME", "api_method_all": "VIBRATOR_STOP_MODE_TIME = \"time\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VibratorStopMode", "api_method_name": "VIBRATOR_STOP_MODE_PRESET", "api_method_all": "VIBRATOR_STOP_MODE_PRESET = \"preset\",", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}