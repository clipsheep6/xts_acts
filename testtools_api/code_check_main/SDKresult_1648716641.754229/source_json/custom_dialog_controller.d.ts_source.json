{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\custom_dialog_controller", "api": [{"api_class_name": "CustomDialogControllerOptions", "api_method_all": "declare interface CustomDialogControllerOptions {\n  \n  builder: any;\n\n  \n  cancel?: () => void;\n\n  \n  autoCancel?: boolean;\n\n  \n  alignment?: DialogAlignment;\n\n  \n  offset?: Offset;\n\n  \n  customStyle?: boolean;\n\n  \n  gridCount?: number;\n}", "api_method_name": "CustomDialogControllerOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogControllerOptions", "api_method_name": "cancel", "api_method_all": "cancel?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 170, "since": 7, "api_used": "\u662f", "lines": ["()\n            this.cancel()\n          }).back", "     },\n            cancel: function() {\n     ", "is.onAccept }),\n    cancel: this.existApp,\n   ", ") {\n        Button('cancel')\n          .onClic", "        animation.oncancel = function(){\n     ", "          animation.cancel()\n        }, 1500)\n", "{\n          Button('cancel').borderRadius(8).b", "mDialogController\n  cancel: () => void\n  confi", "       },\n          cancel: function() {\n     ", "g('sequence gesture canceled')\n      })\n    )\n", "     },\n            cancel: () => {\n          ", "onsole.info('dialog cancel callback');\n       ", "            value: 'cancel',\n                 ", "this.currentTest = 'cancel'\n            }\n    ", ": 'The animation is canceled.'\n            });", "console.log('dialog cancel callback');\n       ", " },\n                cancel: () => {\n          ", "stomDialogExample({ cancel: this.onCancel, con", "     this.animation.cancel();\n          });\n  ", "ture current action cancel\");\n      })\n    )\n "], "files": ["index.js", "ohosPrompt.ets", "AlertDialog.ets", "WebPage.ets", "systemPrompt.ets", "longPressGesture.ets", "animatorOption.ets", "gestureMode.ets", "basicabilityapi.test.js", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogControllerOptions", "api_method_name": "builder", "api_method_all": "builder: any", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["mPopup, {\n          builder: this.popupBuilder,", " = {\n              \"builder\" : this.pixelMapBui", "logController({\n    builder: CustomDialogExampl", "pupOne, {\n          builder: this.popupBuilderO", "pThree, {\n          builder: this.popupBuilderT", "pupTwo, {\n          builder: this.popupBuilderT"], "files": ["customDialogController.ets", "placement.ets", "dragEvent2.ets", "bindPopup.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogControllerOptions", "api_method_name": "autoCancel", "api_method_all": "autoCancel?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["alogUser {\n  @State autoCancel: boolean = true\n  @", "ssage',\n            autoCancel: true,\n            ", " this.existApp,\n    autoCancel: true,\n    offset: "], "files": ["customDialogController.ets", "CustomDialog.ets", "AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogControllerOptions", "api_method_name": "alignment", "api_method_all": "alignment?: DialogAlignment", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 15, "since": 7, "api_used": "\u662f", "lines": ["mber = -15\n  @State alignment: Alignment = Alignm", "ssage',\n            alignment: 'DialogAlignment.B", "ssage',\n            alignment: 'DialogAlignment.D", "an = false\n  @State alignment: DialogAlignment = ", "ssage',\n            alignment: 'DialogAlignment.C", "ssage',\n            alignment: 'DialogAlignment.T", "ull) {\n        this.alignment = eventData.data.al", "      { align: this.alignment, offset: { x: this.", "t: '1',\n            alignment: 'DialogAlignment.B", "offset: Offset,\n    alignment: DialogAlignment.Ce", "0CB',\n              alignment: 'DialogAlignment.T"], "files": ["customDialogController.ets", "overlay.ets", "CustomDialog.ets", "AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogControllerOptions", "api_method_name": "offset", "api_method_all": "offset?: Offset", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 372, "since": 7, "api_used": "\u662f", "lines": ["     xs: { span: 2, offset: 6 },\n             ", " color: Color.Gray, offsetX: 5, offsetY: 5 }\n ", "ffsetX: 0x80000000, offsetY: 0x80000000 };\n   ", "rror',\n            \"offset\": 'error'\n         ", "n\": 1,\n            \"offset\": 2\n          }\n   ", "00000,\n            \"offset\": 0x80000000\n      ", "ttrs.useSizeType.sm.offset).assertEqual(0x7FFF", "     xs: { span: 1, offset: 0 }, sm: { span: t", "     lg: { span: 2, offset: 2 }\n            })", "bjNew.$attrs.shadow.offsetY).assertEqual(\"10.0", "     sm: { span: 6, offset: 2 },\n             ", "ttrs.useSizeType.sm.offset).assertEqual(-21474", "     xs: { span: 2, offset: 10 },\n            ", "     xs: { span: 6, offset: 0 },\n             ", "     md: { span: 2, offset: 2 },\n             ", "ttrs.useSizeType.sm.offset).assertEqual(2);\n  ", " color: 0x80000000, offsetX: 0x80000000, offse", "     sm: { span: 2, offset: 8 },\n             ", "     md: { span: 6, offset: 4 },\n             ", "et = eventData.data.offset;\n      } else if (e", " span: this.smSpan, offset: this.smOffset },\n ", "     lg: { span: 2, offset: 4 }\n            })", "FFFFF,\n            \"offset\": 0x7FFFFFFF\n      ", "r.Gray, offsetX: 5, offsetY: 5 }\n  @State gray", "ttrs.useSizeType.sm.offset).assertEqual(1);\n  ", "ttrs.useSizeType.sm.offset).assertEqual(0);\n  ", "bjNew.$attrs.shadow.offsetY).assertEqual(\"2147", ".Gray, offsetX: 10, offsetY: 10\n      };\n     ", "ffsetX: 0x7FFFFFFF, offsetY: 0x7FFFFFFF };\n   ", "     xs: { span: 2, offset: 8 },\n             ", "     md: { span: 2, offset: 10 },\n            ", "     sm: { span: 2, offset: 0 },\n             ", "gCallBack);\n    let offsetChangeEvent = {\n    ", "gn: this.alignment, offset: { x: this.x, y: th", "     md: { span: 5, offset: 1 }, lg: { span: 7", " color: Color.Gray, offsetX: 10, offsetY: 10\n ", "bjNew.$attrs.shadow.offsetX).assertEqual(\"10.0", " color: 0x7FFFFFFF, offsetX: 0x7FFFFFFF, offse", "t(obj.$attrs.shadow.offsetY).assertEqual(\"5.00", "     lg: { span: 6, offset: 6 }\n            })", "bjNew.$attrs.shadow.offsetX).assertEqual(\"2147", "     md: { span: 2, offset: 0 },\n             ", "1 }, lg: { span: 7, offset: 2 }\n        })\n   ", "  events_emitter.on(offsetChangeEvent, this.st", "     sm: { span: 2, offset: 10 },\n            ", ": Alignment.Bottom, offset: { x: 0, y: 20 } })", "     lg: { span: 2, offset: 0 }\n            })", "t(obj.$attrs.shadow.offsetX).assertEqual(\"5.00"], "files": ["Shape.ets", "panDirection.ets", "pathProps.test.js", "ImageEffectsJsunit.test.ets", "gridContainer.ets", "circleProps.test.js", "Text.ets", "lineProps.test.js", "imageFit.ets", "imageEffects.ets", "TextJsunit.test.ets", "popupProps.test.js", "Constants.ets", "polylineProps.test.js", "refreshProps.test.js", "PositionSettingJsunit.test.ets", "Scroll.ets", "customDialogController.ets", "CustomDialog.ets", "ellipseProps.test.js", "touchAble.ets", "polygonProps.test.js", "positionSetting.ets", "GridContainer.ets", "enumsLineCapStyle.ets", "GridSettingsJsunit.test.ets", "index.js", "OverlayJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "listProps.test.js", "gridSettings.ets", "gridColProps.test.js", "textPathProps.test.js", "gestureMode.ets", "refresh.ets", "motionPath.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogControllerOptions", "api_method_name": "customStyle", "api_method_all": "customStyle?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["ignment.Center,\n    customStyle: false,\n    gridCou", "ean = true\n  @State customStyle: boolean = false\n  "], "files": ["customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogControllerOptions", "api_method_name": "gridCount", "api_method_all": "gridCount?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["ssage',\n            gridCount: '1',\n            a", "omStyle: false,\n    gridCount: 5\n  })\n\n  onCancel"], "files": ["CustomDialog.ets", "AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogController", "api_method_all": "declare class CustomDialogController {\n  \n  constructor(value: CustomDialogControllerOptions);\n\n  \n  open();\n\n  \n  close();\n}", "api_method_name": "CustomDialogController", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": [" console.info('[testCustomDialogControllers_100] START');\n    ", "ple {\n  controller: CustomDialogController\n  cancel: () => voi", "ollerJsunit from './CustomDialogControllerJsunit.test.ets';\nim", "logController = new CustomDialogController({\n    builder: Cust", "  dialogController: CustomDialogController = new CustomDialogC", "   });\n\n    it('testCustomDialogControllers_100', 0, async fun"], "files": ["List.test.ets", "customDialogController.ets", "CustomDialog.ets", "CustomDialogControllerJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogController", "api_method_name": "constructor", "api_method_all": "constructor(value: CustomDialogControllerOptions)", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogController", "api_method_name": "open", "api_method_all": "open();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 48, "since": 7, "api_used": "\u662f", "lines": ["     });\n    },\n    openStyle1(){\n        th", ").show()\n    },\n    openforPropThree(){\n    ", "is.dialogController.open()\n        }).backgr", ").show()\n    },\n    openAni1(){\n        this", ").show()\n    },\n    openprop2(){\n        thi", ").show()\n    },\n    openmultiMode1(){\n      ", "is.dialogController.open();\n          try {\n", ").show()\n    },\n    opendataPropNone(){\n    ", ").show()\n    },\n    opendisabledPropFalse(){", ").show()\n    },\n    opendataProp(){\n        ", ").show()\n    },\n    opendisabledPropNone(){\n", "se:null,\n    },\n    openidProp(){\n        th", ").show()\n    },\n    openprop1(){\n        thi", ").show()\n    },\n    opengradient2(){\n       ", ").show()\n    },\n    openforPropOne(){\n      ", ").show()\n    },\n    openclickEffectPropSmall", ").show()\n    },\n    opendirPropNone(){\n     ", ").show()\n    },\n    openclickEffectPropMediu", ").show()\n    },\n    openfocusablePropTrue(){", ").show()\n    },\n    opendragableFalse(){\n   ", ").show()\n    },\n    openshowPropFalse(){\n   ", ").show()\n    },\n    openfocusablePropNone(){", ").show()\n    },\n    openifPropTrue(){\n      ", ").show()\n    },\n    openshowPropTrue(){\n    ", ").show()\n    },\n    openaccess1(){\n        t", ").show()\n    },\n    openrefProp(){\n        t", ").show()\n    },\n    openforPropNull(){\n     ", ").show()\n    },\n    opendragableNone(){\n    ", ").show()\n    },\n    opengradient4(){\n       ", ".close()\n    },\n    opengradient1(){\n       ", ").show()\n    },\n    openclassProp(){\n       ", ").show()\n    },\n    openclassPropNone(){\n   ", ").show()\n    },\n    openevent(){\n        thi", ").show()\n    },\n    opendragableTrue(){\n    ", ").show()\n    },\n    opendirPropAuto(){\n     ", ").show()\n    },\n    openshowPropNone(){\n    ", ").show()\n    },\n    openfocusablePropFalse()", ").show()\n    },\n    openrefPropNone(){\n     ", ").show()\n    },\n    openstyleProp(){\n       ", ").show()\n    },\n    opendisabledPropTrue(){\n", "ect(a.appID == \"com.open.harmony.acetestfour", ").show()\n    },\n    openprop3(){\n        thi", ").show()\n    },\n    opendirPropLtr(){\n      ", ").show()\n    },\n    opengradient3(){\n       ", ").show()\n    },\n    openclickEffectPropLarge", ").show()\n    },\n    opendirPropRtl(){\n      ", ").show()\n    },\n    openStyle2(){\n        th", ").show()\n    },\n    openclickEffectPropNone("], "files": ["SystemAppJsunit.test.ets", "customDialogController.ets", "CustomDialog.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomDialogController", "api_method_name": "close", "api_method_all": "close();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 83, "since": 0, "api_used": "\u662f", "lines": ["s.$element('prop1').close()\n    },\n    showPa", ").show()\n    },\n    closePanelPro3() {\n      ", "ent('simplePanel4').close()\n    },\n    showPa", "ent('simplePanel3').close()\n    },\n    showPa", ").show()\n    },\n    close(){\n        this.$el", "ent('simplePanel5').close()\n    },\n    showPa", ").show()\n    },\n    closePanel5() {\n        t", "ent('simplePanel7').close()\n    },\n    showPa", "ent('simplePanel6').close()\n    },\n    showPa", ");\n    this.context.closePath();\n    this.con", ").show()\n    },\n    closePanel() {\n        th", "tringify(obj.$attrs.closeEffect))\n      expec", "        })\n        .closeEffect(false)\n    }\n", ").show()\n    },\n    closePanelPro1() {\n      ", "    this.controller.close()\n            this.", ").show()\n    },\n    closePanelPro2() {\n      ", ").show()\n    },\n    closePanel3() {\n        t", "is.dialogController.close()\n        }).backgr", "0, 60);\n        ctx.closePath();\n        ctx.", "s.$element('prop2').close()\n    },\n    showPa", ").show()\n    },\n    closePanel6() {\n        t", ").show()\n    },\n    closePanel2() {\n        t", ").show()\n    },\n    closePanel4() {\n        t", "s.$element('event').close()\n    },\n    opengr", ");\n    this.context.closePath();\n  }\n\n  resto", "ment('simplePanel').close()\n    },\n    // \u5c5e\u6027\n", " console.log(\"panel closeEffect\" + JSON.strin", "        })\n        .closeEffect(true)\n      D", "xt.stroke();\n  }\n\n  closePath() {\n    this.co", "  expect(obj.$attrs.closeEffect).assertEqual(", "ece\")\n      Button('close')\n        .margin(3", "      console.info(\"close action state err: \"", ").show()\n    },\n    closePanel7() {\n        t", "ent('simplePanel1').close()\n    },\n    showPa", "\n              this.closePath();\n            ", "      console.info(\"close to emit action stat", "        })\n        .closeEffect(false)\n\n     ", "ent('simplePanel2').close()\n    },\n    showPa", ", 80);\n        path.closePath();\n        ctx.", ").show()\n    },\n    closePanel1() {\n        t"], "files": ["DataPanelJsunit.test.ets", "index.js", "PieceCode.ets", "canvas.ets", "customDialogController.ets", "DataPanel.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}]}