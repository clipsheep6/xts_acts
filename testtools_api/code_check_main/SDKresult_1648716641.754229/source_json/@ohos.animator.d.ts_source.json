{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.animator", "api": [{"api_class_name": "AnimatorOptions", "api_method_all": "export interface AnimatorOptions {\r\n  \r\n  duration: number;\r\n\r\n  \r\n  easing: string;\r\n\r\n  \r\n  delay: number;\r\n\r\n  \r\n  fill: \"none\" | \"forwards\" | \"backwards\" | \"both\";\r\n\r\n  \r\n  direction: \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\";\r\n\r\n  \r\n  iterations: number;\r\n\r\n  \r\n  begin: number;\r\n\r\n  \r\n  end: number;\r\n}", "api_method_name": "AnimatorOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorOptions", "api_method_name": "duration", "api_method_all": "duration: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 240, "since": 6, "api_used": "\u662f", "lines": ["reateAnimator({\n    duration: 3000,\n    fill: 'f", "ata: {\n            \"duration\": \"nan\"\n          }", "xpect(objNew.$attrs.duration).assertEqual('500.0", "ull) {\n        this.duration = parseInt(eventDat", "he text is hidden', duration: 2000 })\n          ", "nsole.info(\"button6 duration value is : \" + this", "value is : \" + this.duration)\n          animateT", "xpect(objNew.$attrs.duration).assertEqual('nan')", "ata: {\n            \"duration\": \"500\"\n          }", "        animateTo({ duration: this.duration }, (", "To({ duration: this.duration }, () => {\n        ", "gify(this.matrix1), duration: 200 })\n          t", "nsole.info(\"button6 duration test animateTo STAR", " if (eventData.data.duration != null) {\n        ", "3.jpg',\n            duration: 500,\n            w", "ssage: \"sucessful\", duration: 200 })\n          t", "     .duration(this.duration)\n      .vertical(th", "s = {\n              duration: 5000,\n            ", "        animateTo({ duration: 1000 }, () => {\n  ", "nsole.info(\"button1 duration test animateTo STAR", "nsole.info(\"button1 duration value is : \" + this", " {\n                \"duration\": this.duration,\n  ", "an = false\n  @State duration: number = 100\n  @St", "2.jpg',\n            duration: 500,\n            w", "options = {\n        duration: 2000,\n        iter", "   \"duration\": this.duration,\n              }\n  ", "  expect(obj.$attrs.duration).assertEqual('1000.", "4.jpg',\n            duration: 500,\n            w", "nsole.info(\"button7 duration test animateTo STAR", "eInt(eventData.data.duration);\n      }\n      if ", "an = false\n  @State duration: number = 1000\n  @S", "nsole.info(\"button7 duration value is : \" + this", "The text is shown', duration: 2000 })\n          ", "p(this.loop)\n      .duration(this.duration)\n    ", "1.jpg',\n            duration: 500,\n            w"], "files": ["animate.ets", "pageTransition2.ets", "ohosPrompt.ets", "imageAnimatorProps.test.js", "ohosMatrix4.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "fillMode.ets", "curves.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "geometryTransition.ets", "swiperProps.test.js", "AnimateJsunit.test.ets", "animatorOption.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "transition.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorOptions", "api_method_name": "easing", "api_method_all": "easing: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 41, "since": 6, "api_used": "\u662f", "lines": ["duration: 1500,\n    easing: 'friction',\n    de", "  duration: 1500,\n  easing: 'friction',\n  dela"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorOptions", "api_method_name": "delay", "api_method_all": "delay: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 59, "since": 6, "api_used": "\u662f", "lines": [" 2000,\n            \"delay\": 5,\n            \"t", "\n                  \"delay\": this.delay,\n     ", "(indexEventOne.data.delay).assertEqual(5);\n  ", "ion: this.duration, delay: this.delay, type: ", "ber = 1000\n  @State delay: number = 0\n  @Stat", "ull) {\n        this.delay = eventData.data.de", " if (eventData.data.delay != null) {\n        ", "sing: 'friction',\n  delay: 100,\n  fill: 'forw", "      \"delay\": this.delay,\n                  ", "ay = eventData.data.delay;\n      }\n      if (", "ration, delay: this.delay, type: this.type })", "ng: 'friction',\n    delay: 100,\n    fill: 'fo"], "files": ["SharedTransitionJsunit.test.ets", "sharedTransition.ets", "basicabilityapi.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorOptions", "api_method_name": "fill", "api_method_all": "fill: \"none\" | \"forwards\" | \"backwards\" | \"both\"", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1166, "since": 6, "api_used": "\u662f", "lines": [");\n    });\n\n    it('fillModeTest_0200', 0, a", "pped\n          this.fillMode = FillMode.None", "   \"fillMode\": this.fillMode\n              }", "      console.info(\"fillModeTest_0300 get st", "s));\n        if (!('fillMode' == pages.name)", "        uri: 'pages/fillMode',\n      }\n     ", "      console.info(\"fillModeTest_0200 click ", "preDecode)\n        .fillMode(this.fillMode).", " {\n                \"fillMode\": this.fillMode", "      console.info('fillModeTest_0200 START'", "nfo('beforeEach get fillMode state pages:' +", "      console.info('fillModeTest_0200 END');", "ning\n          this.fillMode = FillMode.Back", ");\n    });\n\n    it('fillModeTest_0100', 0, a", "      console.info(\"fillModeTest_0200 get st", "    Rect()\n        .fill(Color.Gray)\n       ", "      console.info('fillModeTest_0300 START'", "used\n          this.fillMode = FillMode.Both", "      console.info(\"fillModeTest_0100 get st", "      console.info('fillModeTest beforeEach ", "      console.info('fillModeTest_0100 END');", "or('beforeEach push fillMode page error:' + ", "number = 0\n  @State fillMode: FillMode = Fil", "ect(indexEvent.data.fillMode).assertEqual(Fi", "     .fillMode(this.fillMode).iterations(thi", "      console.info(\"fillModeTest_0100 click ", "      console.info('fillMode test after each", "      console.info('fillModeTest_0100 START'", "t.test.ets';\nimport fillModeJsunit from './F", "   Text('background fill the box(Cover)').fo", "rt default function fillModeJsunit(){\n  desc", "      console.info(\"fillModeTest_0200 on eve", " Ellipse()\n        .fill(Color.Pink)\n       ", "fo('beforeEach push fillMode page result:' +", "      console.info(\"fillModeTest_0300 on eve", "y\n@Component\nstruct fillModeExample {\n  @Sta", "      console.info(\"fillModeTest_0300 click ", "      console.info('fillModeTest_0300 END');", "   Text('background fill the box(Contain)').", "nfo('beforeEach get fillMode state pages.nam", ");\n    });\n\n    it('fillModeTest_0300', 0, a", "unit(){\n  describe('fillModeTest', function ", "  selectJsunit();\n  fillModeJsunit();\n  enum", "      console.info(\"fillModeTest_0100 on eve"], "files": ["ImageJsunit.test.ets", "Shape.ets", "pathProps.test.js", "circleProps.test.js", "imageAnimatorProps.test.js", "background.ets", "canvas2.ets", "ShapeJsunit.test.ets", "canvas.ets", "ImageAnimatorJsunit.test.ets", "polylineProps.test.js", "animationStatus.ets", "fillMode.ets", "ellipseProps.test.js", "GestureModeJsunit.test.ets", "touchAble.ets", "polygonProps.test.js", "animatorOption.ets", "enumsLineCapStyle.ets", "index.js", "backgroundAndSizeSetting.ets", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "FillModeJsunit.test.ets", "shape.ets", "animateMotionProps.test.js", "Image.ets", "svgTextProps.test.js", "textPathProps.test.js", "imageAnimator.ets", "List.test.ets", "rectProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorOptions", "api_method_name": "direction", "api_method_all": "direction: \"normal\" | \"reverse\" | \"alternate\" | \"alternate-reverse\"", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 596, "since": 6, "api_used": "\u662f", "lines": ["lder() {\n    Flex({ direction: FlexDirection.Colu", "on = eventData.data.direction;\n        console.lo", "ata: {\n            \"direction\": Direction.Ltr\n   ", "ll: 'forwards',\n    direction: \"normal\",\n    begi", " if (eventData.data.direction != null) {\n        ", "uild() {\n    Flex({ direction: FlexDirection.Colu", " angle: 80,\n        direction: GradientDirection.", "ion: \" + obj.$attrs.direction);\n      expect(obj.", "'90%')\n      Flex({ direction: FlexDirection.Row,", "  expect(obj.$attrs.direction).assertEqual('Direc", ".$attrs.constructor.direction).assertEqual('FlexD", " {\n    Flex({\n      direction: FlexDirection.Colu", "    .direction(this.direction)\n        .key('rowD", "gin(5)\n      Flex({ direction: FlexDirection.Row,", "dth('90%')\n        .direction(this.direction)\n   ", "  events_emitter.on(directionChangeEvent, this.st", "    Text('slider in direction set').fontSize(9).f", "   Text('slider out direction set').fontSize(9).f", ".InSet,\n            direction: this.decorationVal", ".TopStart;\n  @State direction: Direction = Direct", "gn')\n\n        Text('direction').fontSize(20).font", "ction value\" + this.direction);\n      }\n    }\n  }", "'90%')\n      Flex({ direction: FlexDirection.Row ", "xExample {\n  @State direction: FlexDirection = Fl", "umber = 3;\n  @State direction: Axis = Axis.Horizo", "weekStyle)\n        .direction(this.direction)\n   ", "uild() {\n    Flex({ direction: FlexDirection.Row,", "OutSet,\n            direction: Axis.Vertical\n    ", " ATTRS_DIRECTION = 'direction'\nconst ATTRS_ALIGN ", "\n    angle: 90,\n    direction: GradientDirection.", "rations: 1,\n        direction: 'alternate',\n     ", " if (eventData.data.direction) {\n        this.dir", "CallBack);\n\n    let directionChangeEvent = {\n    ", "ion) {\n        this.direction = eventData.data.di", "ull) {\n        this.direction = eventData.data.di", "on = eventData.data.direction;\n      } else if (e", ".log(\"Calendar page direction value\" + this.direc", "    .direction(this.direction)\n        .backgroun", "ttrs.linearGradient.direction).assertEqual('Gradi"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "Qrcode.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "transition.ets", "Image.ets", "List.test.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "positionSetting.ets", "animatorOption.ets", "tapGesture.ets", "FlexJsunit.test.ets", "flexDirection.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "flex.ets", "marqueeProps.test.js", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "BackgroundJsunit.test.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "GradientDirectionJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "RowJsunit.test.ets", "index.js", "ohosRouterA.ets", "Link.ets", "slider.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorOptions", "api_method_name": "iterations", "api_method_all": "iterations: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 64, "since": 6, "api_used": "\u662f", "lines": ["=> {\n          this.iterations = -1\n        })\n   ", " {\n                \"iterations\": this.iterations\n ", "an = false\n  @State iterations: number = 1\n  @Stat", "        animateTo({ iterations: this.iteration }, ", "de).iterations(this.iterations).width(325).height(", "n = false;\n  @State iterations: number = 1;\n\n  bui", "ect(indexEvent.data.iterations).assertEqual(1);\n  ", "Mode(FillMode.None).iterations(this.iterations).wi", "ll: 'forwards',\n    iterations: 2,\n    direction: ", "ne).iterations(this.iterations).width(325).height(", "Mode(this.fillMode).iterations(this.iterations).wi", "fill: 'forwards',\n  iterations: 2,\n  direction: 'n", "=> {\n          this.iterations = 1\n          try {", " \"iterations\": this.iterations\n              }\n   ", "=> {\n          this.iterations = 1\n        })\n    ", "=> {\n          this.iterations = -1\n          try ", " {\n                \"iterations\": this.iteration,\n ", "nsole.info(\"button3 iterations test animateTo STAR", "tion: 2000,\n        iterations: 1,\n        directi", "5000,\n              iterations: 2,\n              b"], "files": ["animate.ets", "ImageAnimatorJsunit.test.ets", "animationStatus.ets", "imageAnimator.ets", "animatorOption.ets", "index.js", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorOptions", "api_method_name": "begin", "api_method_all": "begin: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 92, "since": 6, "api_used": "\u662f", "lines": ["1;\n    this.context.beginPath();\n    this.con", "s: 2,\n              begin: 120,\n             ", "alternate',\n        begin: 180,\n        end: ", "('2d');\n        ctx.beginPath();\n        ctx.", "opNone,\n            beginProp : this.beginPro", "8;\n    this.context.beginPath();\n    this.con", "0;\n    this.context.beginPath();\n    this.con", "None: null,\n        beginProp : null,\n       ", "rop : null,\n        beginPropNone : null,\n   ", "th = 8;\n        ctx.beginPath();\n        ctx.", "rue });\n        ctx.beginPath();\n        ctx.", "op = this.$element(\"beginProp\").getInspector(", " 310, 1250);\n  }\n\n  beginPath() {\n    this.co", "ctor()\n        this.beginProp = this.$element", "ctor()\n        this.beginPropNone = this.$ele", " {\n    this.context.beginPath();\n    this.con", "eginPropNone : this.beginPropNone,\n          ", "inProp,\n            beginPropNone : this.begi", "   beginProp : this.beginProp,\n            be", "tion: \"normal\",\n    begin: 200,\n    end: 270\n", "ne = this.$element(\"beginPropNone\").getInspec", "\n              this.beginPath();\n            "], "files": ["animateTransformProps.test.js", "animateMotionProps.test.js", "animatorOption.ets", "index.js", "canvas.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorOptions", "api_method_name": "end", "api_method_all": "end: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 651, "since": 6, "api_used": "\u662f", "lines": ["rumentLog, ReportExtend} from \"deccjsunit/i", "          'id': 'extend'\n        });\n      ", "al_console_log Test end--------------------", "  .endAngle(`${this.endAngleValue}`)\n      ", "('report', reportExtend);\n        core.init", "ata: {\n            \"endAngleValue\": \"-10\"\n ", "testClickEvent001] sendEventByKey ' + JSON.", "' + JSON.stringify(sendEventByKey('ellipse'", "leValue}`)\n        .endAngle(`${this.endAng", "ue = eventData.data.endAngleValue;\n      }\n", "l_console_warn Test end--------------------", "tend = new ExpectExtend({\n          'id': '", "tend = new ReportExtend(file);\n        core", " if (eventData.data.endMargin != null) {\n  ", "\" + JSON.stringify(sendEventByKey('button2'", "fy(downPonit))\n    sendTouchEvent(downPonit", "ull) {\n        this.endAngleValue = eventDa", "xpect(objNew.$attrs.endAngle).assertEqual('", "     const expectExtend = new ExpectExtend(", "ata: {\n            \"endAngleValue\": \"200\"\n ", "\" + JSON.stringify(sendEventByKey('touch', ", "('expect', expectExtend);\n        const rep", "(obj.$attrs.divider.endMargin).assertEqual(", "ort {Core, ExpectExtend, InstrumentLog, Rep", "rtMargin,\n          endMargin: this.endMarg", "    endMargin: this.endMargin\n        })\n  ", "ata: {\n            \"endMargin\": \"30.000000v", "ull) {\n        this.endMargin = eventData.d", "ata: {\n            \"endAngleValue\": \"nan\"\n ", "nt('task', reportExtend);\n        const con", "20.000000;\n  @State endMargin: number = 20.", "l_console_info Test end--------------------", "\" + JSON.stringify(sendEventByKey('button',", "\" + JSON.stringify(sendEventByKey('button1'", "\" + JSON.stringify(sendEventByKey('text1', ", "ing = 210;\n  @State endAngleValue: string =", "     const reportExtend = new ReportExtend(", "\" + JSON.stringify(sendEventByKey('appear',", " if (eventData.data.endAngleValue != null) ", "in = eventData.data.endMargin;\n      }\n    ", "or)\n        .colorBlend(Color.Green)\n      "], "files": ["ImageJsunit.test.ets", "longPressGesture.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "TouchAbleJsunit.test.ets", "Panel.ets", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "marquee.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "FillModeJsunit.test.ets", "CalendarJsunit.test.ets", "Image.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "NavigatorCodeJsunit.test.ets", "List.test.ets", "SourceTypeJsunit.test.ets", "PanGestureJsunit.test.ets", "gauge.ets", "ButtonJsunit.test.ets", "GridJsunit.test.ets", "Scroll.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "AnimateJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "edgeEffect.ets", "index.ets", "TimeStampJsunit.test.ets", "PanGesture.ets", "ListJsunit.test.ets", "ColorGradientJsunit.test.ets", "MotionPathJsunit.test.ets", "Utils.ets", "Stepper.ets", "GlobalJsunit.test.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "BindMenuJsunit.test.ets", "list.ets", "colorGradient.ets", "MarqueeJsunit.test.ets", "List.ets", "DatePickerJsunit.test.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "dragEvent.ets", "lazyForEach.ets", "animateMotionProps.test.js", "CustomDialogControllerJsunit.test.ets", "textareaProps.test.js", "buttonProps.test.js", "animateProps.test.js", "panDirection.ets", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "AboutToDisappearJsunit.test.ets", "TextInput.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "commonComponentJsApi.test.js", "line.ets", "SharedTransitionJsunit.test.ets", "datePicker.ets", "WebPage.ets", "SystempromptJsunit.test.ets", "TabsJsunit.test.ets", "inputProps.test.js", "index.js", "SwiperJsunit.test.ets", "BindPopupJsunit.test.ets", "NavigationJsunit.test.ets", "Calendar.ets", "gestureMode.ets", "motionPath.ets", "panel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_all": "export interface AnimatorResult {\r\n  \r\n  update(options: AnimatorOptions): void;\r\n  \r\n  play(): void;\r\n  \r\n  finish(): void;\r\n  \r\n  pause(): void;\r\n  \r\n  cancel(): void;\r\n  \r\n  reverse(): void;\r\n  \r\n  onframe: (progress: number) => void;\r\n  \r\n  onfinish: () => void;\r\n  \r\n  oncancel: () => void;\r\n  \r\n  onrepeat: () => void;\r\n}", "api_method_name": "AnimatorResult", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["  @State animation: AnimatorResult = animator.createAn"], "files": ["animatorOption.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_name": "update", "api_method_all": "update(options: AnimatorOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 45, "since": 6, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.updateeffect).assertEqual(", "c.name      testlistupdateeffectNone\n      * @", "rs.id).assertEqual('updateeffectNone')\n       ", ";\n          Button('update').borderRadius(8).b", "tor()\n         this.updateeffectNone = this.$e", "tTrue,\n             updateeffectFalse:this.upd", "True:null,\n         updateeffectFalse:null,\n  ", " });\n    },\n    timeupdate() {\n        prompt.", "se(globalThis.value.updateeffectFalse);\n      ", "se(globalThis.value.updateeffectNone);\n       ", "     this.animation.update(repeatoptions);\n   ", "False,\n             updateeffectNone:this.upda", "tor()\n         this.updateeffectTrue = this.$e", "se = this.$element(\"updateeffectFalse\").getIns", "     this.animation.update(newoptions);\n      ", "tor()\n         this.updateeffectFalse = this.$", "      message: 'timeupdate'\n        });\n    },", "c.name      testlistupdateeffectTrue\n      * @", "nsole.info('testlistupdateeffectFalse START');", "alse:null,\n         updateeffectNone:null,\n   ", "nsole.info('testlistupdateeffectTrue START');\n", "*/\n     it('testlistupdateeffectTrue', 0, asyn", "se(globalThis.value.updateeffectTrue);\n       ", "ne = this.$element(\"updateeffectNone\").getInsp", "rs.id).assertEqual('updateeffectTrue')\n       ", "ateeffectFalse:this.updateeffectFalse,\n       ", "fo(\"[listProps] get updateeffect value is: \" +", "ue = this.$element(\"updateeffectTrue\").getInsp", "nNone,\n             updateeffectTrue:this.upda", "tringify(obj.$attrs.updateeffect));\n        do", "dateeffectNone:this.updateeffectNone,\n        ", "   console.log('pan update')\n      })\n    )\n  ", "*/\n     it('testlistupdateeffectFalse', 0, asy", "/\n      it('testlistupdateeffectNone', 0, asyn", "c.name      testlistupdateeffectFalse\n      * ", "rs.id).assertEqual('updateeffectFalse')\n      ", "nsole.info('testlistupdateeffectNone START');\n", "dateeffectTrue:this.updateeffectTrue,\n        ", "None:null,\n         updateeffectTrue:null,\n   "], "files": ["index.js", "listProps.test.js", "animatorOption.ets", "gestureMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_name": "play", "api_method_all": "play(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 207, "since": 6, "api_used": "\u662f", "lines": [" {\n                \"playMode\": this.playMode", "  console.info(\"get playMode state pages.nam", "displayMode(this.displayMode)\n      .display", "xpect(obj.$attrs.displayPriority).assertEqua", "      console.info(\"playMode beforeEach star", "tConstraints003] displayPriority: \" + obj.$a", "rt default function playModeJsunit(){\n  desc", "console.error(\"push playMode page error:\" + ", " (eventData.data.displayPriority) {\n        ", "      console.info(\"playModeTest_0100 click ", "      console.info('playModeTest_0100 START'", "      console.info(\"playModeTest_0100 get st", "tConstraints004] displayPriority: \" + obj.$a", "b3)\n\n      Text('displayPriority 4').fontSiz", "=> {\n          this.playMode = PlayMode.Alte", "unit(){\n  describe('playModeTest', function ", "playMode)\n      .displayCount(this.displayCo", "     this.animation.play();\n    });\n  }\n\n  b", "SPLAYPRIORITY = 'displayPriority'\nconst ATTR", "     this.animation.play();\n          });\n  ", ");\n    });\n\n    it('playModeTest_0100', 0, a", "ber = 1\n  @State displayCount: number = 3\n  ", ": \" + obj.$attrs.displayPriority);\n      exp", ": number = SwiperDisplayMode.AutoLinear\n  @S", "      console.info(\"playMode after each call", "ber = 3\n  @State displayMode: number = Swipe", "temSpace)\n      .displayMode(this.displayMod", "t.test.ets';\nimport playModeJsunit from './P", "  console.info(\"get playMode state pages:\" +", "{\n          Button('play').borderRadius(8).b", "tInspectorByKey('displayPriority');\n      co", "s));\n        if (!(\"playMode\" == pages.name)", ": {\n            \"displayPriority\": 5\n       ", " console.info(\"push playMode page result:\" +", "   \"playMode\": this.playMode,\n              ", "      console.info(\"playModeTest_0100 on eve", ")\n              .displayPriority(item.priori", "ept(indexEvent.data.playMode).assertEqual(Pl", "= eventData.data.displayPriority;\n        th", "        uri: 'pages/playMode',\n      }\n     ", "eExample {\n  @State playMode:PlayMode = Play", "CapStyleJsunit();\n  playModeJsunit();\n  Gest", "isplayCount(this.displayCount)\n      .effect", "           .key('displayPriority')\n         "], "files": ["animate.ets", "index.js", "videoProps.test.js", "layoutConstraints.ets", "PlayModeJsunit.test.ets", "swiperProps.test.js", "swiper.ets", "AnimateJsunit.test.ets", "Constants.ets", "LayoutConstraintsJsunit.test.ets", "animatorOption.ets", "playMode.ets", "List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_name": "finish", "api_method_all": "finish(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 93, "since": 6, "api_used": "\u662f", "lines": ["y()\n    animation.onfinish = function(){\n     ", "     this.animation.finish();\n          });\n  ", ": 'The animation is finished.'\n      });\n    }", "   this.animation.onfinish(() => {\n           ", ": 'The animation is finished.'\n            });", "          message: 'finish'\n              })\n ", " })\n        Button('finishAnimation')\n        ", "        animation.onfinish = function(){\n     ", "    console.info('Onfinish current action stat", ";\n          Button('finish').borderRadius(8).b", "is.swiperController.finishAnimation()\n        ", "    console.info(\"Onfinish start to emit actio", "    console.info(\"Onfinish emit action state e"], "files": ["Swiper.ets", "marquee.ets", "animatorOption.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_name": "pause", "api_method_all": "pause(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 56, "since": 6, "api_used": "\u662f", "lines": ["s.myVideoController.pause();\n        });\n    ", "s.myTimerController.pause();\n        });\n    ", "     this.animation.pause();\n          });\n  ", "          animation.pause()\n        }, 1000)\n", "     });\n    },\n    pause(){\n\n        prompt.", "{\n          Button('pause').borderRadius(8).b", "})\n\n        Button('pause').key('button2').wi", "> {\n      animation.pause()\n    }, 1000)\n\n   ", " })\n        Button('pause').key('button1').wi", "this.$refs.animator.pause();\n    },\n    handl", "});\n        Button(\"pause\").onClick(() => {\n "], "files": ["Video.ets", "video.ets", "textTimer.ets", "animationStatus.ets", "imageAnimator.ets", "animatorOption.ets", "index.js", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_name": "cancel", "api_method_all": "cancel(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 170, "since": 6, "api_used": "\u662f", "lines": ["()\n            this.cancel()\n          }).back", "     },\n            cancel: function() {\n     ", "is.onAccept }),\n    cancel: this.existApp,\n   ", ") {\n        Button('cancel')\n          .onClic", "        animation.oncancel = function(){\n     ", "          animation.cancel()\n        }, 1500)\n", "{\n          Button('cancel').borderRadius(8).b", "mDialogController\n  cancel: () => void\n  confi", "       },\n          cancel: function() {\n     ", "g('sequence gesture canceled')\n      })\n    )\n", "     },\n            cancel: () => {\n          ", "onsole.info('dialog cancel callback');\n       ", "            value: 'cancel',\n                 ", "this.currentTest = 'cancel'\n            }\n    ", ": 'The animation is canceled.'\n            });", "console.log('dialog cancel callback');\n       ", " },\n                cancel: () => {\n          ", "stomDialogExample({ cancel: this.onCancel, con", "     this.animation.cancel();\n          });\n  ", "ture current action cancel\");\n      })\n    )\n "], "files": ["index.js", "ohosPrompt.ets", "AlertDialog.ets", "WebPage.ets", "systemPrompt.ets", "longPressGesture.ets", "animatorOption.ets", "gestureMode.ets", "basicabilityapi.test.js", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_name": "reverse", "api_method_all": "reverse(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 70, "since": 6, "api_used": "\u662f", "lines": ["          animation.reverse()\n        }, 500)\n\n", "state).reverse(this.reverse).fixedSize(this.fix", ") {\n        Button('reverse').key('button3').wi", "s.Initial;\n  @State reverse: boolean = false;\n ", "state).reverse(this.reverse).fixedSize(false).p", "lMode.None\n  @State reverse: boolean = false\n  ", "     this.animation.reverse();\n          });\n  ", "> {\n      animation.reverse()\n    }, 500)\n\n    ", ") {\n        Button('reverse').width(100).paddin", ";\n          Button('reverse').borderRadius(8).b", "his.reverse = !this.reverse\n        })\n        ", "his.reverse = !this.reverse\n          try {\n   ", "=> {\n          this.reverse = !this.reverse\n   ", " .state(this.state).reverse(this.reverse).fixed", "rizontal,\n          reverse: false,\n          s"], "files": ["index.js", "animateMotionProps.test.js", "imageAnimatorProps.test.js", "animationStatus.ets", "imageAnimator.ets", "Slider.ets", "animatorOption.ets", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_name": "onframe", "api_method_all": "onframe: (progress: number) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["     this.animation.onframe((value) => {\n      "], "files": ["animatorOption.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_name": "onfinish", "api_method_all": "onfinish: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 42, "since": 6, "api_used": "\u662f", "lines": [")\n        animation.onfinish = function(){\n     ", ";\n    },\n    animationfinish(event){\n        pro", "   message: 'animationfinish'\n        });\n    },", "     this.animation.onfinish(() => {\n           ", "lay()\n    animation.onfinish = function(){\n     "], "files": ["animatorOption.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_name": "oncancel", "api_method_all": "oncancel: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 49, "since": 6, "api_used": "\u662f", "lines": ["ected })\n  },\n  textoncancel(e) {\n    prompt.sho", " message:\"text: textoncancel\" })\n  },\n  dateonch", "e.day })\n  },\n  dateoncancel() {\n    prompt.show", "  };\n\n    animation.oncancel = function(){\n     ", " message:\"date: dateoncancel\" })\n  },\n  timeonch", "({ message:\"datetimeoncancel\" })\n  },\n  multitex", "\n\n        animation.oncancel = function(){\n     ", "e })\n  },\n  datetimeoncancel() {\n    prompt.show", " })\n  },\n  multitextoncancel() {\n    prompt.show", "{ message:\"multitextoncancel\" })\n  },\n  columnch", "oast({ message:\"timeoncancel\" })\n  },\n  datetime", "te })\n    }},\n  timeoncancel() {\n    prompt.show"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimatorResult", "api_method_name": "onrepeat", "api_method_all": "onrepeat: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 40, "since": 6, "api_used": "\u662f", "lines": ["\n    this.animation.onrepeat(() => {\n      var r", "\n\n        animation.onrepeat = function(){\n     ", "  };\n\n    animation.onrepeat = function(){\n     "], "files": ["animatorOption.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Animator", "api_method_all": "export default class Animator {\r\n  \r\n  static createAnimator(options: AnimatorOptions): AnimatorResult;\r\n}", "api_method_name": "Animator", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 370, "since": 6, "api_used": "\u662f", "lines": ["fault function imageAnimatorJsunit(){\n  describe", " console.info(\"imageAnimatorTest_0100 on events_", "le.error(\"push imageAnimator page error: \" + err", " console.info(\"imageAnimatorTest_0400 on events_", " console.info(\"imageAnimatorTest_0200 click resu", " console.info('imageAnimatorTest_0200 START');\n ", "sole.info(\"get imageAnimator state pages: \" + JS", " console.info('imageAnimatorTest_0300 END');\n   ", "mponent\nstruct ImageAnimatorExample {\n  @State s", " console.info(\"imageAnimator page state change c", ").assertEqual('ImageAnimator');\n      console.in", " console.info(\"imageAnimatorTest_0200 get state ", " console.info(\"imageAnimatorTest_0300 on events_", "  });\n\n    it('imageAnimatorTest_0500', 0, async", "sole.info(\"get imageAnimator state pages.name: \"", " console.info('imageAnimatorTest_0300 START');\n ", " console.info('imageAnimator page show called');", " console.info(\"imageAnimatorTest_0300 click resu", " console.info('imageAnimatorTest_0400 END');\n   ", " console.info('imageAnimatorTest_0100 START');\n ", " console.info('imageAnimatorTest_0100 END');\n   ", "\n        if(!(\"imageAnimator\" == pages.name)){\n ", " console.info('imageAnimatorTest_0400 START');\n ", "  });\n\n    it('imageAnimatorTest_0200', 0, async", " console.info(\"imageAnimatorTest_0400 click resu", " console.info('imageAnimatorTest_0200 END');\n   ", "  @State animation: AnimatorResult = animator.cr", "nspectorByKey('ImageAnimator');\n      let obj = ", "lt = animator.createAnimator({\n    duration: 300", "  });\n\n    it('imageAnimatorTest_0300', 0, async", " console.info(\"imageAnimator beforeEach start\");", "e:5 }) {\n      ImageAnimator()\n        .images([", " console.info(\"imageAnimatorTest_0100 get state ", "  });\n\n    it('imageAnimatorTest_0400', 0, async", " console.info(\"imageAnimatorTest_0200 on events_", " console.info(\"imageAnimatorTest_0400 get state ", " console.info('imageAnimatorTest_0500 START');\n ", "ole.info(\"push imageAnimator page result: \" + JS", " console.info(\"imageAnimator after each called\")", " console.info(\"imageAnimatorTest_0100 click resu", " console.info(\"imageAnimatorTest_0300 get state ", "\n        .key('ImageAnimator')\n        .images([", "){\n  describe('imageAnimatorTest', function (){\n", "   })\n\n    it('imageAnimatorTest_0100', 0, async", "   uri: 'pages/imageAnimator',\n      }\n      let", "e:5 }) {\n      ImageAnimator()\n        .key('Ima", " console.info(\"imageAnimatorTest_0500 get state "], "files": ["List.test.js", "ImageAnimatorJsunit.test.ets", "imageAnimatorProps.test.js", "AnimationStatusJsunit.test.ets", "animationStatus.ets", "imageAnimator.ets", "animatorOption.ets", "commonComponentJsApi.test.js", "List.test.ets", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Animator", "api_method_name": "createAnimator", "api_method_all": "static createAnimator(options: AnimatorOptions): AnimatorResult;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["orResult = animator.createAnimator({\n    duration: 300"], "files": ["animatorOption.ets"], "is_white": " ", "desc": " "}]}