{"subsystem_ch": "\u7535\u6e90\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "powermgr", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.batteryInfo", "api": [{"api_class_name": "batteryInfo", "api_method_all": "declare namespace batteryInfo {\n    \n    const batterySOC: number;\n\n    \n    const chargingStatus: BatteryChargeState;\n\n    \n    const healthStatus: BatteryHealthState;\n\n    \n    const pluggedType: BatteryPluggedType;\n\n    \n    const voltage: number;\n\n    \n    const technology: string;\n\n    \n    const batteryTemperature: number;\n\n    \n    const isBatteryPresent: boolean;\n\n    \n    export enum BatteryPluggedType {\n        \n        NONE,\n        \n        AC,\n        \n        USB,\n        \n        WIRELESS\n    }\n\n    \n    export enum BatteryChargeState {\n        \n        NONE,\n        \n        ENABLE,\n        \n        DISABLE,\n        \n        FULL\n    }\n\n    \n    export enum BatteryHealthState {\n        \n        UNKNOWN,\n        \n        GOOD,\n        \n        OVERHEAT,\n        \n        OVERVOLTAGE,\n        \n        COLD,\n        \n        DEAD\n    }\n}", "api_method_name": "batteryInfo", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 48, "since": 0, "api_used": "\u662f", "lines": [" let healthStatus = batteryInfo.healthStatus;\n    c", "api_context'\nimport batteryInfo from '@ohos.battery", "  let pluggedType = batteryInfo.pluggedType;\n    co", "{\n    let voltage = batteryInfo.voltage;\n    consol", "atteryTemperature = batteryInfo.batteryTemperature;", "atteryPluggedType = batteryInfo.BatteryPluggedType.", "et chargingStatus = batteryInfo.chargingStatus;\n   ", " isBatteryPresent = batteryInfo.isBatteryPresent;\n ", "   let technology = batteryInfo.technology;\n    con", "eryInfo from '@ohos.batteryInfo';\nimport brightness", "atteryHealthState = batteryInfo.BatteryHealthState.", "atteryChargeState = batteryInfo.BatteryChargeState.", "   let batterySoc = batteryInfo.batterySOC;\n    con"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "batteryInfo", "api_method_name": "batterySOC", "api_method_all": "const batterySOC: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": ["rySoc = batteryInfo.batterySOC;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "batteryInfo", "api_method_name": "chargingStatus", "api_method_all": "const chargingStatus: BatteryChargeState", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": [";\n    console.info('chargingStatus = ' + chargingStatu", "hargingStatus = ' + chargingStatus);\n    expect(chargi", "Status);\n    expect(chargingStatus >= 0 && chargingSta", "tatus = batteryInfo.chargingStatus;\n    console.info('", "nction () {\n    let chargingStatus = batteryInfo.charg", "rgingStatus >= 0 && chargingStatus <= 4).assertTrue()\n"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "batteryInfo", "api_method_name": "healthStatus", "api_method_all": "const healthStatus: BatteryHealthState", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": [";\n    console.info('healthStatus = ' + healthStatus)", "tatus = batteryInfo.healthStatus;\n    console.info('", "nction () {\n    let healthStatus = batteryInfo.healt", "ealthStatus >= 0 && healthStatus <= 6).assertTrue()\n", "Status);\n    expect(healthStatus >= 0 && healthStatu", "'healthStatus = ' + healthStatus);\n    expect(health"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "batteryInfo", "api_method_name": "pluggedType", "api_method_all": "const pluggedType: BatteryPluggedType", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 32, "since": 6, "api_used": "\u662f", "lines": ["             expect(pluggedType >= 0 && pluggedType", "dType = batteryInfo.pluggedType;\n    console.info('", "\"pluggedType is:\" + pluggedType);\n                e", "pluggedType >= 0 && pluggedType <= 4).assertTrue()\n", "('pluggedType = ' + pluggedType);\n    expect(plugge", ";\n    console.info('pluggedType = ' + pluggedType);", "edType);\n    expect(pluggedType >= 0 && pluggedType", "pluggedType >= 0 && pluggedType <= 4).assertTrue();", "                var pluggedType = commonEventData.p", "      console.info(\"pluggedType is:\" + pluggedType)", "nction () {\n    let pluggedType = batteryInfo.plugg"], "files": ["battery_unit.test.js", "battery_common_event.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "batteryInfo", "api_method_name": "voltage", "api_method_all": "const voltage: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 14, "since": 6, "api_used": "\u662f", "lines": ["alth_state_test_overvoltage', 0, function () {\n", ";\n    console.info('voltage = ' + voltage);\n   ", "ltage = batteryInfo.voltage;\n    console.info('", "nction () {\n    let voltage = batteryInfo.volta", "info('voltage = ' + voltage);\n    expect(voltag", "oltage);\n    expect(voltage >= -1).assertTrue()", "ue()\n  })\n\n  \n  it('voltage_test', 0, function "], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "batteryInfo", "api_method_name": "technology", "api_method_all": "const technology: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["nction () {\n    let technology = batteryInfo.techn", "ue()\n  })\n\n  \n  it('technology_test', 0, function ", "o('technology = ' + technology);\n    expect(techno", ";\n    console.info('technology = ' + technology);\n", "nology);\n    expect(technology !== null).assertTru", "ology = batteryInfo.technology;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "batteryInfo", "api_method_name": "batteryTemperature", "api_method_all": "const batteryTemperature: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 10, "since": 6, "api_used": "\u662f", "lines": ["ature = batteryInfo.batteryTemperature;\n    console.info('", "rature);\n    expect(batteryTemperature <= 700).assertTrue(", "ryTemperature = ' + batteryTemperature);\n    expect(batter", "nction () {\n    let batteryTemperature = batteryInfo.batte", ";\n    console.info('batteryTemperature = ' + batteryTemper"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "batteryInfo", "api_method_name": "isBatteryPresent", "api_method_all": "const isBatteryPresent: boolean", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["esent = batteryInfo.isBatteryPresent;\n    console.info('", "atteryPresent = ' + isBatteryPresent);\n    if (isBattery", "nction () {\n    let isBatteryPresent = batteryInfo.isBat", "else {\n      expect(isBatteryPresent).assertFalse();\n   ", ";\n    console.info('isBatteryPresent = ' + isBatteryPres", "ryPresent);\n    if (isBatteryPresent) {\n      expect(isB", "ent) {\n      expect(isBatteryPresent).assertTrue();\n    "], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryPluggedType", "api_method_all": "export enum BatteryPluggedType {\n        \n        NONE,\n        \n        AC,\n        \n        USB,\n        \n        WIRELESS\n    }", "api_method_name": "BatteryPluggedType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 16, "since": 6, "api_used": "\u662f", "lines": ["dType = batteryInfo.BatteryPluggedType.NONE;\n    console.i", "t_usb\n   * @tc.desc BatteryPluggedType values Interface Te", "eless\n   * @tc.desc BatteryPluggedType values Interface Te", "dType = batteryInfo.BatteryPluggedType.WIRELESS;\n    conso", "dType = batteryInfo.BatteryPluggedType.USB;\n    console.in", "st_ac\n   * @tc.desc BatteryPluggedType values Interface Te", "dType = batteryInfo.BatteryPluggedType.AC;\n    console.inf", "_none\n   * @tc.desc BatteryPluggedType values Interface Te"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryPluggedType", "api_method_name": "NONE", "api_method_all": "NONE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 6, "api_used": "\u662f", "lines": [".BatteryChargeState.NONE;\n    console.info('", ".BatteryPluggedType.NONE;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryPluggedType", "api_method_name": "AC", "api_method_all": "AC,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 24, "since": 6, "api_used": "\u662f", "lines": ["ck.RunningLockType.BACKGROUND, (error, run", "ed_callback_test_3 BACKGROUND supported is", "ted_promise_test_2 BACKGROUND supported is", " //Runninglock\u9501\u7684\u7c7b\u578b\u4e3aBACKGROUND\n    it('enum", "ck.RunningLockType.BACKGROUND, (error, sup", ".BatteryPluggedType.AC;\n    console.info('", "ck.RunningLockType.BACKGROUND,\n           ", "ck.RunningLockType.BACKGROUND)\n           ", "ck.RunningLockType.BACKGROUND;\n        con"], "files": ["battery_unit.test.js", "power_manager_running_lock.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryPluggedType", "api_method_name": "USB", "api_method_all": "USB,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": [".BatteryPluggedType.USB;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryChargeState", "api_method_all": "export enum BatteryChargeState {\n        \n        NONE,\n        \n        ENABLE,\n        \n        DISABLE,\n        \n        FULL\n    }", "api_method_name": "BatteryChargeState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["State = batteryInfo.BatteryChargeState.ENABLE;\n    console", "State = batteryInfo.BatteryChargeState.DISABLE;\n    consol", "State = batteryInfo.BatteryChargeState.NONE;\n    console.i", "_full\n   * @tc.desc BatteryChargeState values Interface Te", "sable\n   * @tc.desc BatteryChargeState values Interface Te", "State = batteryInfo.BatteryChargeState.FULL;\n    console.i"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryChargeState", "api_method_name": "NONE", "api_method_all": "NONE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 6, "api_used": "\u662f", "lines": [".BatteryChargeState.NONE;\n    console.info('", ".BatteryPluggedType.NONE;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryChargeState", "api_method_name": "ENABLE", "api_method_all": "ENABLE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": [".BatteryChargeState.ENABLE;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryChargeState", "api_method_name": "DISABLE", "api_method_all": "DISABLE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": [".BatteryChargeState.DISABLE;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryHealthState", "api_method_all": "export enum BatteryHealthState {\n        \n        UNKNOWN,\n        \n        GOOD,\n        \n        OVERHEAT,\n        \n        OVERVOLTAGE,\n        \n        COLD,\n        \n        DEAD\n    }", "api_method_name": "BatteryHealthState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["State = batteryInfo.BatteryHealthState.DEAD;\n    console.i", "State = batteryInfo.BatteryHealthState.OVERVOLTAGE;\n    co", "State = batteryInfo.BatteryHealthState.GOOD;\n    console.i", "State = batteryInfo.BatteryHealthState.UNKNOWN;\n    consol", "State = batteryInfo.BatteryHealthState.OVERHEAT;\n    conso", "State = batteryInfo.BatteryHealthState.COLD;\n    console.i"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryHealthState", "api_method_name": "UNKNOWN", "api_method_all": "UNKNOWN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": [".BatteryHealthState.UNKNOWN;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryHealthState", "api_method_name": "GOOD", "api_method_all": "GOOD,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": [".BatteryHealthState.GOOD;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryHealthState", "api_method_name": "OVERHEAT", "api_method_all": "OVERHEAT,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": [".BatteryHealthState.OVERHEAT;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryHealthState", "api_method_name": "OVERVOLTAGE", "api_method_all": "OVERVOLTAGE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": [".BatteryHealthState.OVERVOLTAGE;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BatteryHealthState", "api_method_name": "COLD", "api_method_all": "COLD,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": [".BatteryHealthState.COLD;\n    console.info('"], "files": ["battery_unit.test.js"], "is_white": " ", "desc": " "}]}