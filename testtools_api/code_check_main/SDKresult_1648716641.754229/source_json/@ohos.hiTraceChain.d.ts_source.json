{"subsystem_ch": "DFX\u5b50\u7cfb\u7edf", "subsystem_en": "hiviewdfx", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.hiTraceChain", "api": [{"api_class_name": "hiTraceChain", "api_method_all": "declare namespace hiTraceChain {\n    \n    enum HiTraceFlag {\n        \n        DEFAULT           = 0,\n\n        \n        INCLUDE_ASYNC     = 1,\n\n        \n        DONOT_CREATE_SPAN = 1 << 1,\n\n        \n        TP_INFO           = 1 << 2,\n\n        \n        NO_BE_INFO        = 1 << 3,\n\n        \n        DISABLE_LOG  = 1 << 4,\n\n        \n        FAILURE_TRIGGER   = 1 << 5,\n\n        \n        D2D_TP_INFO       = 1 << 6,\n    }\n\n    \n    enum HiTraceTracepointType {\n        \n        CS = 0,\n\n        \n        CR = 1,\n\n        \n        SS = 2,\n\n        \n        SR = 3,\n\n        \n        GENERAL = 4,\n    }\n\n    \n    enum HiTraceCommunicationMode {\n        \n        DEFAULT = 0,\n\n        \n        THREAD  = 1,\n\n        \n        PROCESS = 2,\n\n        \n        DEVICE  = 3,\n    }\n\n    \n    interface HiTraceId {\n        chainId: bigint; \n        spanId?: number;\n        parentSpanId?: number;\n        flags?: number;\n    }\n\n    \n    function begin(name: string, flags: number = HiTraceFlag.DEFAULT): HiTraceId;\n\n    \n    function end(id: HiTraceId): void;\n\n    \n    function getId(): HiTraceId;\n\n    \n    function setId(id: HiTraceId): void;\n\n    \n    function clearId(): void;\n\n    \n    function createSpan(): HiTraceId;\n\n    \n    function tracepoint(mode: HiTraceCommunicationMode, type: HiTraceTracepointType, id: HiTraceId, msg?: string): void;\n\n    \n    function isValid(id: HiTraceId): boolean;\n\n    \n    function isFlagEnabled(id: HiTraceId, flag: HiTraceFlag): boolean;\n\n    \n    function enableFlag(id: HiTraceId, flag: HiTraceFlag): void;\n}", "api_method_name": "hiTraceChain", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 33, "since": 0, "api_used": "\u662f", "lines": ["4\n        }\n        hiTraceChain.setId(hiTraceId);\n ", "1 << 6).assertEqual(hiTraceChain.HiTraceFlag.D2D_TP_", "1 << 2).assertEqual(hiTraceChain.HiTraceFlag.TP_INFO", "1 << 4).assertEqual(hiTraceChain.HiTraceFlag.DISABLE", "aceChain.tracepoint(hiTraceChain.HiTraceCommunicatio", "1 << 3).assertEqual(hiTraceChain.HiTraceFlag.NO_BE_I", "rt default function hiTraceChainJsunit() {\n  describ", "t.test.ets';\nimport hiTraceChainJsunit from './HiTra", "5\n        }\n        hiTraceChain.setId(hiTraceId);\n ", "7\n        }\n        hiTraceChain.tracepoint(hiTraceC", "7\n        }\n        hiTraceChain.end(hiTraceId);\n   ", "pect(2).assertEqual(hiTraceChain.HiTraceTracepointTy", "    let hiTraceId = hiTraceChain.createSpan();\n     ", "eateSpan();\n        hiTraceChain.enableFlag(hiTraceI", "pect(0).assertEqual(hiTraceChain.HiTraceTracepointTy", "ableFlag(hiTraceId, hiTraceChain.HiTraceFlag.DEFAULT", "pect(1).assertEqual(hiTraceChain.HiTraceFlag.INCLUDE", "eHiDebugJsunit();\n  hiTraceChainJsunit();\n}", "cationMode.DEFAULT, hiTraceChain.HiTraceTracepointTy", "let isFlagEnabled = hiTraceChain.isFlagEnabled(hiTra", "      try {\n        hiTraceChain.clearId();\n        ", "ceChain from '@ohos.hiTraceChain'\nimport hiTraceMete", "1 << 1).assertEqual(hiTraceChain.HiTraceFlag.DONOT_C", "/index.ets\";\nimport hiTraceChain from '@ohos.hiTrace", "gEnabled(hiTraceId, hiTraceChain.HiTraceFlag.DEFAULT", "3\n        }\n        hiTraceChain.setId(hiTraceId);\n ", "nit() {\n  describe('hiTraceChainTest', function () {", "1 << 5).assertEqual(hiTraceChain.HiTraceFlag.FAILURE", "pect(1).assertEqual(hiTraceChain.HiTraceTracepointTy", "      let isValid = hiTraceChain.isValid(hiTraceId);"], "files": ["List.test.ets", "HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "hiTraceChain", "api_method_name": "begin", "api_method_all": "function begin(name: string, flags: number = HiTraceFlag.DEFAULT): HiTraceId;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "hiTraceChain", "api_method_name": "end", "api_method_all": "function end(id: HiTraceId): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 128, "since": 8, "api_used": "\u662f", "lines": ["testHiAppEventApi13 end')\n    })\n\n    \n    ", "rumentLog, ReportExtend} from \"deccjsunit/i", "          'id': 'extend'\n        });\n      ", "FX_DFR_Bytrace_0500 end------\");\n        do", "FX_DFR_Bytrace_0200 end------\");\n        do", "testHiAppEventApi03 end')\n    })\n\n    \n    ", "testHiAppEventApi16 end')\n    })\n\n    /**\n ", "FX_DFR_Bytrace_0100 end\");\n        done();\n", "testHiAppEventApi20 end')\n    })\n\n    /**\n ", "testHiAppEventApi12 end')\n    })\n\n    \n    ", "testHiAppEventApi07 end')\n    })\n\n    \n    ", "          'id': 'extend'\n        })\n       ", "testHiAppEventApi23 end')\n    })\n\n    /**\n ", "testHiAppEventApi09 end')\n    })\n\n    \n    ", "tend = new ExpectExtend({\n          'id': '", "ort {Core, ExpectExtend, Constant} from 'de", "testHiAppEventApi22 end')\n    })\n\n    /**\n ", "FX_DFR_Bytrace_0300 end------\");\n        do", "testHiAppEventApi05 end')\n    })\n\n\n    \n   ", "     const expectExtend = new ExpectExtend(", "ng() + \"finishTrace end\");\n        }\n\n     ", "('expect', expectExtend)\n        core.init(", "testHiAppEventApi14 end')\n    })\n\n    \n    ", "ort {Core, ExpectExtend, InstrumentLog, Rep", "testHiAppEventApi15 end')\n    })\n\n    \n    ", "tend = new ExpectExtend({\n            'id':", "testHiAppEventApi11 end')\n    })\n\n    \n    ", "testHiAppEventApi19 end')\n    })\n\n    /**\n ", "testHiAppEventApi24 end')\n    })\n\n  /**\n   ", "testHiAppEventApi25 end')\n    })\n})\n", "testHiAppEventApi04 end')\n    })\n\n    \n    ", "testHiAppEventApi06 end')\n    })\n\n    \n    ", "testHiAppEventApi17 end')\n    })\n\n    /**\n ", "testHiAppEventApi10 end')\n    })\n\n    \n    ", "FX_DFR_Bytrace_0400 end\");\n        done();\n", "testHiAppEventApi08 end')\n    })\n\n    \n    ", "ing() + \"startTrace end\");\n\n            // ", "testHiAppEventApi18 end')\n    })\n\n    /**\n ", "testHiAppEventApi21 end')\n    })\n\n    /**\n "], "files": ["ByTraceHiDebugJsunit.test.ets", "HiDebugJsunit.test.ets", "bytrace_test.js", "index.js", "HiAppEvent.test.js", "HiTraceChainJsunit.test.ets", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "hiTraceChain", "api_method_name": "getId", "api_method_all": "function getId(): HiTraceId;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "hiTraceChain", "api_method_name": "setId", "api_method_all": "function setId(id: HiTraceId): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["       hiTraceChain.setId(hiTraceId);\n       ", "eChain_HiTraceChain_setId_0100', 0, async fun", "eChain_HiTraceChain_setId_0100 Test start****", "eChain_HiTraceChain_setId_0100 Test end******"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "hiTraceChain", "api_method_name": "clearId", "api_method_all": "function clearId(): void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["  * @tc.desc      : clearId test\n     */\n    it", "       hiTraceChain.clearId();\n        expect(t", "eChain_HiTraceChain_clearId_0100\n     * @tc.nam", "eChain_HiTraceChain_clearId_0100 Test end******", "eChain_HiTraceChain_clearId_0100 Test start****", "  * @tc.name      : clearId\n     * @tc.desc    ", "eChain_HiTraceChain_clearId_0100', 0, async fun"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "hiTraceChain", "api_method_name": "createSpan", "api_method_all": "function createSpan(): HiTraceId;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["eChain_HiTraceChain_createSpan_0100 parentSpanId \"", "eChain_HiTraceChain_createSpan_0100 spanId \" + hiT", "ceId = hiTraceChain.createSpan();\n        let isFl", "ceId = hiTraceChain.createSpan();\n        hiTraceC", "ceId = hiTraceChain.createSpan();\n        console.", "eChain_HiTraceChain_createSpan_0100 Test end******", "ceId = hiTraceChain.createSpan();\n        let isVa", "eChain_HiTraceChain_createSpan_0100 Test start****", "eChain_HiTraceChain_createSpan_0100', 0, async fun", "eChain_HiTraceChain_createSpan_0100 chainId \" + hi"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "hiTraceChain", "api_method_name": "tracepoint", "api_method_all": "function tracepoint(mode: HiTraceCommunicationMode, type: HiTraceTracepointType, id: HiTraceId, msg?: string): void;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["eChain_HiTraceChain_tracepoint_0100', 0, async fun", "  * @tc.desc      : tracepoint test\n     */\n    it", "eChain_HiTraceChain_tracepoint_0100 Test start****", "       hiTraceChain.tracepoint(hiTraceChain.HiTrac", "eChain_HiTraceChain_tracepoint_0100 Test end******", "  * @tc.name      : tracepoint\n     * @tc.desc    ", "eChain_HiTraceChain_tracepoint_0100\n     * @tc.nam"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "hiTraceChain", "api_method_name": "isValid", "api_method_all": "function isValid(id: HiTraceId): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["eChain_HiTraceChain_isValid_0100 Test end******", "  * @tc.desc      : isValid method test\n     */", "eChain_HiTraceChain_isValid_0100', 0, async fun", "eChain_isValid_0100 isValid \" + isValid);\n     ", "  * @tc.name      : isValid\n     * @tc.desc    ", "eChain_HiTraceChain_isValid_0100\n     * @tc.nam", "id_0100 isValid \" + isValid);\n        expect(tr", "eChain_HiTraceChain_isValid_0100 error \" + erro", "Span();\n        let isValid = hiTraceChain.isVa", "eChain_HiTraceChain_isValid_0100 isValid \" + is", "eChain_HiTraceChain_isValid_0100 Test start****", "alid = hiTraceChain.isValid(hiTraceId);\n       "], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "hiTraceChain", "api_method_name": "isFlagEnabled", "api_method_all": "function isFlagEnabled(id: HiTraceId, flag: HiTraceFlag): boolean;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["Span();\n        let isFlagEnabled = hiTraceChain.isFl", "eChain_HiTraceChain_isFlagEnabled_0100 error \" + erro", "_isFlagEnabled_0100 isFlagEnabled \" + isFlagEnabled);", "bled = hiTraceChain.isFlagEnabled(hiTraceId, hiTraceC", "eChain_HiTraceChain_isFlagEnabled_0100\n     * @tc.nam", "  * @tc.name      : isFlagEnabled\n     * @tc.desc    ", "eChain_HiTraceChain_isFlagEnabled_0100 isFlagEnabled ", "0 isFlagEnabled \" + isFlagEnabled);\n        expect(tr", "eChain_HiTraceChain_isFlagEnabled_0100', 0, async fun", "  * @tc.desc      : isFlagEnabled method test\n     */", "eChain_HiTraceChain_isFlagEnabled_0100 Test end******", "eChain_HiTraceChain_isFlagEnabled_0100 Test start****"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "hiTraceChain", "api_method_name": "enableFlag", "api_method_all": "function enableFlag(id: HiTraceId, flag: HiTraceFlag): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["eChain_HiTraceChain_enableFlag_0100 error \" + erro", "eChain_HiTraceChain_enableFlag_0100\n     * @tc.nam", "eChain_HiTraceChain_enableFlag_0100 Test end******", "eChain_HiTraceChain_enableFlag_0100 Test start****", "  * @tc.desc      : enableFlag method test\n     */", "  * @tc.name      : enableFlag\n     * @tc.desc    ", "       hiTraceChain.enableFlag(hiTraceId, hiTraceC", "eChain_HiTraceChain_enableFlag_0100', 0, async fun"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceFlag", "api_method_all": "enum HiTraceFlag {\n        \n        DEFAULT           = 0,\n\n        \n        INCLUDE_ASYNC     = 1,\n\n        \n        DONOT_CREATE_SPAN = 1 << 1,\n\n        \n        TP_INFO           = 1 << 2,\n\n        \n        NO_BE_INFO        = 1 << 3,\n\n        \n        DISABLE_LOG  = 1 << 4,\n\n        \n        FAILURE_TRIGGER   = 1 << 5,\n\n        \n        D2D_TP_INFO       = 1 << 6,\n    }", "api_method_name": "HiTraceFlag", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 30, "since": 8, "api_used": "\u662f", "lines": ["t('DFX_HiTraceChain_HiTraceFlag_DISABLE_LOG_0100', ", "** DFX_HiTraceChain_HiTraceFlag_INCLUDE_ASYNC_0100 ", "aceId, hiTraceChain.HiTraceFlag.DEFAULT);\n        c", "** DFX_HiTraceChain_HiTraceFlag_TP_INFO_0100 Test s", "tEqual(hiTraceChain.HiTraceFlag.DONOT_CREATE_SPAN);", "t('DFX_HiTraceChain_HiTraceFlag_D2D_TP_INFO_0100', ", "tEqual(hiTraceChain.HiTraceFlag.DISABLE_LOG);\n     ", "tEqual(hiTraceChain.HiTraceFlag.FAILURE_TRIGGER);\n ", "t('DFX_HiTraceChain_HiTraceFlag_DONOT_CREATE_SPAN_0", "t('DFX_HiTraceChain_HiTraceFlag_FAILURE_TRIGGER_010", "t('DFX_HiTraceChain_HiTraceFlag_TP_INFO_0100', 0, a", "tEqual(hiTraceChain.HiTraceFlag.D2D_TP_INFO);\n     ", "** DFX_HiTraceChain_HiTraceFlag_TP_INFO_0100 Test e", "aceId, hiTraceChain.HiTraceFlag.DEFAULT);\n        e", "** DFX_HiTraceChain_HiTraceFlag_D2D_TP_INFO_0100 Te", "t('DFX_HiTraceChain_HiTraceFlag_INCLUDE_ASYNC_0100'", "tEqual(hiTraceChain.HiTraceFlag.NO_BE_INFO);\n      ", "** DFX_HiTraceChain_HiTraceFlag_NO_BE_INFO_0100 Tes", "** DFX_HiTraceChain_HiTraceFlag_DONOT_CREATE_SPAN_0", "t('DFX_HiTraceChain_HiTraceFlag_NO_BE_INFO_0100', 0", "tEqual(hiTraceChain.HiTraceFlag.TP_INFO);\n      } c", "** DFX_HiTraceChain_HiTraceFlag_FAILURE_TRIGGER_010", "** DFX_HiTraceChain_HiTraceFlag_DISABLE_LOG_0100 Te", "tEqual(hiTraceChain.HiTraceFlag.INCLUDE_ASYNC);\n   "], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceFlag", "api_method_name": "DEFAULT         ", "api_method_all": "DEFAULT           = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceFlag", "api_method_name": "INCLUDE_ASYNC   ", "api_method_all": "INCLUDE_ASYNC     = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceFlag", "api_method_name": "DONOT_CREATE_SPAN", "api_method_all": "DONOT_CREATE_SPAN = 1 << 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["ceChain_HiTraceFlag_DONOT_CREATE_SPAN_0100 Test end******", "ceChain.HiTraceFlag.DONOT_CREATE_SPAN);\n      } catch (er", "ceChain_HiTraceFlag_DONOT_CREATE_SPAN_0100 Test start****", "ceChain_HiTraceFlag_DONOT_CREATE_SPAN_0100', 0, async fun"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceFlag", "api_method_name": "TP_INFO         ", "api_method_all": "TP_INFO           = 1 << 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceFlag", "api_method_name": "NO_BE_INFO      ", "api_method_all": "NO_BE_INFO        = 1 << 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceFlag", "api_method_name": "DISABLE_LOG", "api_method_all": "DISABLE_LOG  = 1 << 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["ceChain_HiTraceFlag_DISABLE_LOG_0100 Test end******", "ceChain.HiTraceFlag.DISABLE_LOG);\n      } catch (er", "ceChain_HiTraceFlag_DISABLE_LOG_0100 Test start****", "ceChain_HiTraceFlag_DISABLE_LOG_0100', 0, async fun"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceFlag", "api_method_name": "FAILURE_TRIGGER ", "api_method_all": "FAILURE_TRIGGER   = 1 << 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceFlag", "api_method_name": "D2D_TP_INFO     ", "api_method_all": "D2D_TP_INFO       = 1 << 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceTracepointType", "api_method_all": "enum HiTraceTracepointType {\n        \n        CS = 0,\n\n        \n        CR = 1,\n\n        \n        SS = 2,\n\n        \n        SR = 3,\n\n        \n        GENERAL = 4,\n    }", "api_method_name": "HiTraceTracepointType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["tEqual(hiTraceChain.HiTraceTracepointType.SS);\n      } catch ", "** DFX_HiTraceChain_HiTraceTracepointType_CS_0100 Test start*", "** DFX_HiTraceChain_HiTraceTracepointType_SS_0100 Test end***", "tEqual(hiTraceChain.HiTraceTracepointType.CR);\n      } catch ", "FAULT, hiTraceChain.HiTraceTracepointType.CS, hiTraceId);\n   ", "t('DFX_HiTraceChain_HiTraceTracepointType_CS_0100', 0, async ", "** DFX_HiTraceChain_HiTraceTracepointType_CR_0100 Test end***", "tEqual(hiTraceChain.HiTraceTracepointType.CS);\n      } catch ", "** DFX_HiTraceChain_HiTraceTracepointType_CS_0100 Test end***", "** DFX_HiTraceChain_HiTraceTracepointType_SS_0100 Test start*", "** DFX_HiTraceChain_HiTraceTracepointType_CR_0100 Test start*", "t('DFX_HiTraceChain_HiTraceTracepointType_CR_0100', 0, async ", "t('DFX_HiTraceChain_HiTraceTracepointType_SS_0100', 0, async "], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceTracepointType", "api_method_name": "CS", "api_method_all": "CS = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["TraceTracepointType_CS_0100 Test end******", "TraceTracepointType.CS);\n      } catch (er", "TraceTracepointType.CS, hiTraceId);\n      ", "TraceTracepointType_CS_0100 Test start****", "TraceTracepointType_CS_0100', 0, async fun"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceTracepointType", "api_method_name": "CR", "api_method_all": "CR = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 23, "since": 0, "api_used": "\u662f", "lines": ["ULE_CAUTION_TRIGGER_CRASH)).assertTrue();\n", "TraceTracepointType_CR_0100 Test start****", "logger.FaultType.JS_CRASH, \"faultloggertes", "ULE_CAUTION_TRIGGER_CRASH);\n        hichec", "ULE_CAUTION_TRIGGER_CRASH);\n        expect", "ogger.FaultType.CPP_CRASH, queryFaultLogCa", "logger.FaultType.JS_CRASH);\n            co", "TraceTracepointType_CR_0100', 0, async fun", "ULE_CAUTION_TRIGGER_CRASH);\n        consol", "ogger.FaultType.CPP_CRASH);\n            co", "n_HiTraceFlag_DONOT_CREATE_SPAN_0100 Test ", "ULE_CAUTION_TRIGGER_CRASH);\n    })\n\n    af", "TraceTracepointType_CR_0100 Test end******", "TraceTracepointType.CR);\n      } catch (er", "ogger.FaultType.CPP_CRASH, module, \"faultl", "n_HiTraceFlag_DONOT_CREATE_SPAN_0100', 0, ", "n.HiTraceFlag.DONOT_CREATE_SPAN);\n      } "], "files": ["HiChecker.test.js", "faultlogger.test.js", "HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceTracepointType", "api_method_name": "SS", "api_method_all": "SS = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": ["TraceTracepointType.SS);\n      } catch (er", "TraceTracepointType_SS_0100', 0, async fun", "EAD_CHECK_SLOW_PROCESS);\n        hichecker", "EAD_CHECK_SLOW_PROCESS);\n        let tmp =", "EAD_CHECK_SLOW_PROCESS | hichecker.RULE_CH", "EAD_CHECK_SLOW_PROCESS)).assertTrue();\n   ", "EAD_CHECK_SLOW_PROCESS);\n        expect(hi", "TraceTracepointType_SS_0100 Test start****", "EAD_CHECK_SLOW_PROCESS);\n        console.l", "EAD_CHECK_SLOW_PROCESS)).assertEqual(false", "TraceTracepointType_SS_0100 Test end******"], "files": ["HiChecker.test.js", "HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceTracepointType", "api_method_name": "SR", "api_method_all": "SR = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceTracepointType", "api_method_name": "GENERAL", "api_method_all": "GENERAL = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceCommunicationMode", "api_method_all": "enum HiTraceCommunicationMode {\n        \n        DEFAULT = 0,\n\n        \n        THREAD  = 1,\n\n        \n        PROCESS = 2,\n\n        \n        DEVICE  = 3,\n    }", "api_method_name": "HiTraceCommunicationMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["epoint(hiTraceChain.HiTraceCommunicationMode.DEFAULT, hiTraceCha"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceCommunicationMode", "api_method_name": "DEFAULT", "api_method_all": "DEFAULT = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["ceCommunicationMode.DEFAULT, hiTraceChain.HiTra", "ceChain.HiTraceFlag.DEFAULT);\n        console.l", "ceChain.HiTraceFlag.DEFAULT);\n        expect(tr"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceCommunicationMode", "api_method_name": "THREAD", "api_method_all": "THREAD  = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["p = (hichecker.RULE_THREAD_CHECK_SLOW_PROCESS ", "Rule(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS)", "ains(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS)", "Rule(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS "], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceCommunicationMode", "api_method_name": "PROCESS", "api_method_all": "PROCESS = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["E_THREAD_CHECK_SLOW_PROCESS)).assertEqual(false", "E_THREAD_CHECK_SLOW_PROCESS);\n        console.l", "E_THREAD_CHECK_SLOW_PROCESS);\n        expect(hi", "E_THREAD_CHECK_SLOW_PROCESS);\n        let tmp =", "E_THREAD_CHECK_SLOW_PROCESS)).assertTrue();\n   ", "E_THREAD_CHECK_SLOW_PROCESS | hichecker.RULE_CH", "E_THREAD_CHECK_SLOW_PROCESS);\n        hichecker"], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceCommunicationMode", "api_method_name": "DEVICE", "api_method_all": "DEVICE  = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceId", "api_method_all": "interface HiTraceId {\n        chainId: bigint; \n        spanId?: number;\n        parentSpanId?: number;\n        flags?: number;\n    }", "api_method_name": "HiTraceId", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceId", "api_method_name": "chainId", "api_method_all": "chainId: bigint", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["aceId = {\n          chainId: 1,\n          spanI", "aceId = {\n          chainId: 3,\n          spanI", "ain_createSpan_0100 chainId \" + hiTraceId.chain", "aceId = {\n          chainId: 2,\n          spanI", "eChain_HiTraceChain_chainId_0100', 0, async fun", "eChain_HiTraceChain_chainId_0100 Test start****", "ainId \" + hiTraceId.chainId);\n        console.l", "eChain_HiTraceChain_chainId_0100 Test end******", "aceId = {\n          chainId: 5,\n          spanI"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceId", "api_method_name": "spanId", "api_method_all": "spanId?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["eChain_HiTraceChain_spanId_0100 Test start****", "ainId: 5,\n          spanId: 6,\n          paren", "ain_createSpan_0100 spanId \" + hiTraceId.spanI", "ainId: 1,\n          spanId: 2,\n          paren", "eChain_HiTraceChain_spanId_0100 Test end******", "ainId: 2,\n          spanId: 3,\n          paren", "ainId: 3,\n          spanId: 4,\n          paren", "panId \" + hiTraceId.spanId);\n        console.l", "eChain_HiTraceChain_spanId_0100', 0, async fun"], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceId", "api_method_name": "parentSpanId", "api_method_all": "parentSpanId?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["panId: 6,\n          parentSpanId: 7\n        }\n      ", "ain_createSpan_0100 parentSpanId \" + hiTraceId.paren", "panId: 3,\n          parentSpanId: 4\n        }\n      ", "panId: 2,\n          parentSpanId: 3\n        }\n      ", "panId \" + hiTraceId.parentSpanId);\n        expect(tr", "panId: 4,\n          parentSpanId: 5\n        }\n      "], "files": ["HiTraceChainJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "HiTraceId", "api_method_name": "flags", "api_method_all": "flags?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}