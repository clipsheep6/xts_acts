{"subsystem_ch": "\u6587\u4ef6\u5b58\u50a8\u5b50\u7cfb\u7edf", "subsystem_en": "storage", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@system.file", "api": [{"api_class_name": "FileResponse", "api_method_all": "export interface FileResponse {\n  \n  uri: string;\n\n  \n  length: number;\n\n  \n  lastModifiedTime: number;\n\n  \n  type: \"dir\" | \"file\";\n\n  \n  subFiles?: Array<FileResponse>;\n}", "api_method_name": "FileResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileResponse", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileResponse", "api_method_name": "length", "api_method_all": "length: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 202, "since": 3, "api_used": "\u662f", "lines": ["_CONTENT, {\n        length: invalidLength,\n   ", "len == FILE_CONTENT.length - 1);\n      expect(", "expect(FILE_CONTENT.length > bufLen).assertTru", "API, Set offset and length.\n   */\n  it('fileio", "ndomString(testName.length);\n}\n\nexport functio", "expect(rlen == text.length + 1).assertTrue();\n", "ength: FILE_CONTENT.length - 1,\n      }) == (F", "ndomString(testName.length);\n}\nexport async fu", "dPos = FILE_CONTENT.length;\n      let len = fi", "sc Function of API, length = 1.\n   */\n  it('fi", " position: 0,\n      length: 10,\n      success:", "expect(rlen == text.length).assertTrue();\n    ", "on of API, offset & length & position = 1.\n   ", "ion of API, invalid length.\n   */\n  it('fileio", "  console.log('file length:' + len)\n    expect", "sc Function of API, length = 1, offset = 1.\n  ", "_CONTENT, {\n        length: FILE_CONTENT.lengt", "a.substring(0, data.length - 5) + 'cache/';\n  ", "er(4096), {\n        length: 1,\n      });\n     ", "er(4096), {\n        length: invalidLength,\n   ", " offset: 1,\n        length: 1,\n      });\n     ", "var maxPos = $chars.length;\n  var pwd = '';\n  ", "}) == (FILE_CONTENT.length - 1)).assertTrue();", "sc Function of API, length = - 1.\n   */\n  it('", "1,\n      }) == text.length - 1).assertTrue();\n"], "files": ["Common.js", "FileIO.test.js", "createStream.test.js", "FileVirtualPath.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "fstat.test.js", "File.test.js", "StorageStatistics.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "VolumeManager.test.js", "filemanager.test.js", "read.test.js", "stat.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileResponse", "api_method_name": "lastModifiedTime", "api_method_all": "lastModifiedTime: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 3, "api_used": "\u662f", "lines": ["difiedTime:' + data.lastModifiedTime);\n        console.l", "       console.log('lastModifiedTime:' + data.lastModifi", "ction of API, check lastModifiedTime.The test file and d"], "files": ["File.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileResponse", "api_method_name": "type", "api_method_all": "type: \"dir\" | \"file\"", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 273, "since": 3, "api_used": "\u662f", "lines": ["         let bool = typeof(dd.readSync());\n ", "path);\n      expect(typeof(stat.ino) == 'num", "path);\n      expect(typeof(stat.size) == 'nu", " try {\n      expect(typeof(fileio.mkdirSync(", "path);\n      expect(typeof(stat.isDirectory(", "path);\n      expect(typeof(stat.isSymbolicLi", "path);\n      expect(typeof(stat.isFile()) ==", "path);\n      expect(typeof(stat.mtime) == 'n", "path);\n      expect(typeof(stat.isFIFO()) ==", "path);\n      expect(typeof(stat.mode) == 'nu", "path);\n      expect(typeof(stat.ctime) == 'n", "path);\n      expect(typeof(stat.dev) == 'num", "path);\n      expect(typeof(stat.nlink) == 'n", "   });\n      expect(typeof(res) == 'number')", "path);\n      expect(typeof(stat.isSocket()) ", "Num(val) {\n  return typeof val === 'number' ", "path);\n      expect(typeof(stat.atime) == 'n", "path);\n      expect(typeof(stat.isCharacterD", "ef = Object.getPrototypeOf(global) || global", "path);\n      expect(typeof(stat.blksize) == ", "ean(val) {\n  return typeof val == 'boolean';", "path);\n      expect(typeof(stat.gid) == 'num", "ize MEDIUM\n   * @tc.type Function\n   * @tc.l", "path);\n      expect(typeof(stat.isBlockDevic", "ing(str) {\n  return typeof str == \"string\" &", "TENT);\n      expect(typeof(res) == 'number')", "MEDIUM(\u4e2d\u578b)\n   * @tc.type Function\n   * @tc.l", "ng(str) {\n  return (typeof str == 'string') ", "path);\n      expect(typeof(stat.rdev) == 'nu", "path);\n      expect(typeof(stat.blocks) == '", "path);\n      expect(typeof(stat.uid) == 'num"], "files": ["filemanager.test.js", "File.test.js", "write.test.js", "all.test.js", "FileIODir.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "securitylabel.test.js", "FileIOStat.test.js", "fstat.test.js", "index.js", "VolumeManager.test.js", "Common.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileResponse", "api_method_name": "subFiles", "api_method_all": "subFiles?: Array<FileResponse>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 3, "api_used": "\u662f", "lines": ["       console.log('subFiles:' + data.subFiles);", "('subFiles:' + data.subFiles + '}');\n        con", "       console.log('subFiles:' + data.subFiles +", "('subFiles:' + data.subFiles);\n        done();\n ", "('subFiles:' + data.subFiles);\n        console.l", "('subFiles:' + data.subFiles + '}');\n        exp"], "files": ["File.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileMoveOption", "api_method_all": "export interface FileMoveOption {\n  \n  srcUri: string;\n\n  \n  dstUri: string;\n\n  \n  success?: (uri: string) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileMoveOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileMoveOption", "api_method_name": "success", "api_method_all": "success?: (uri: string) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileMoveOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileMoveOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileMoveOption", "api_method_name": "srcUri", "api_method_all": "srcUri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 32, "since": 3, "api_used": "\u662f", "lines": ["  file.move({\n      srcUri: 'internal://app/fi", "  file.move({\n      srcUri: 'internal://app/Fi", "Move_003');\n    let srcUri = 'internal://cache", "ove({\n      srcUri: srcUri,\n      dstUri: dstU", "  file.copy({\n      srcUri: 'internal://app/Fi", "  file.move({\n      srcUri: srcUri,\n      dstU", "  file.copy({\n      srcUri: 'internal://app/fa", "le.copy({\n          srcUri: 'internal://cache/", "  file.copy({\n      srcUri: uri,\n      dstUri:", "  file.copy({\n      srcUri: 'internal://cache/", "  file.copy({\n      srcUri: 'internal://app/fi", "file.copy({\n        srcUri: 'internal://cache/", "  file.move({\n      srcUri: 'internal://cache/", "  file.copy({\n      srcUri: 'internal://app/..", "file.move({\n        srcUri: 'internal://cache/", "  file.move({\n      srcUri: 'internal://app/..", "  file.move({\n      srcUri: uri,\n      dstUri:"], "files": ["FileVirtualPath.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileMoveOption", "api_method_name": "dstUri", "api_method_all": "dstUri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 38, "since": 3, "api_used": "\u662f", "lines": ["cUri,\n      dstUri: dstUri,\n      success: fun", "le_Move_010',\n      dstUri: 'internal://app/ca", "le_Move_001',\n      dstUri: 'internal://cache/", " srcUri: uri,\n      dstUri: 'internal://cache/", "le_Copy_001',\n      dstUri: 'internal://cache/", "le_Copy_004',\n      dstUri: null,\n      succes", "le_Copy_014',\n      dstUri: dstUri,\n      succ", "le_Move_004',\n      dstUri: null,\n      succes", " srcUri: uri,\n      dstUri: uri,\n      success", "le_Move_011',\n      dstUri: 'internal://cache/", "_test_error',\n      dstUri: 'internal://cache/", "pp/fakepath',\n      dstUri: 'internal://app/fa", "le_Copy_012',\n      dstUri: 'internal://app/no", "on (done) {\n    let dstUri = await fileName('F", "sertTrue();\n    let dstUri = 'internal://cache", "le_Copy_003',\n      dstUri: 'internal://cache/", "le_Move_012',\n      dstUri: 'internal://app/no", "e_Move_005d',\n      dstUri: 'internal://app/ca", " expect(prepareFile(dstUri, FILE_CONTENT)).ass", "le_Move_013',\n      dstUri: 'internal://app/..", "_Move_003';\n    let dstUri = 'internal://app/c", "le_Move_014',\n      dstUri: dstUri,\n      succ", "le_Copy_008',\n      dstUri: 'internal://cache/", "le_Move_009',\n      dstUri: 'internal://app/Fi", "py_005d',\n          dstUri: 'internal://cache/", "le_Copy_011',\n      dstUri: 'internal://cache/", "cUri: srcUri,\n      dstUri: dstUri,\n      succ", "014',\n      dstUri: dstUri,\n      success: fun", "le_Copy_013',\n      dstUri: 'internal://app/..", "le_Move_008',\n      dstUri: 'internal://app/Fi", "le_Copy_009',\n      dstUri: 'internal://app/Fi", "p/File_Move',\n      dstUri: 'internal://app/Fi", "peArray[i],\n        dstUri: 'internal://cache/", "le_Copy_010',\n      dstUri: 'internal://app/ca"], "files": ["FileVirtualPath.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileListResponse", "api_method_all": "export interface FileListResponse {\n  \n  fileList: Array<FileResponse>;\n}", "api_method_name": "FileListResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileListResponse", "api_method_name": "fileList", "api_method_all": "fileList: Array<FileResponse>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 3, "api_used": "\u662f", "lines": ["JSON.stringify(data.fileList));\n        expect(n", "JSON.stringify(data.fileList));\n        done();\n", "st success.' + data.fileList);\n        expect(nu", "List_007 pass, data.fileList:' + JSON.stringify(", "JSON.stringify(data.fileList));\n        expect(f"], "files": ["FileVirtualPath.test.js", "File.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileListOption", "api_method_all": "export interface FileListOption {\n  \n  uri: string;\n\n  \n  success?: (data: FileListResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileListOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileListOption", "api_method_name": "success", "api_method_all": "success?: (data: FileListResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileListOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileListOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileListOption", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileCopyOption", "api_method_all": "export interface FileCopyOption {\n  \n  srcUri: string;\n\n  \n  dstUri: string;\n\n  \n  success?: (uri: string) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileCopyOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileCopyOption", "api_method_name": "success", "api_method_all": "success?: (uri: string) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileCopyOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileCopyOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileCopyOption", "api_method_name": "srcUri", "api_method_all": "srcUri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 32, "since": 3, "api_used": "\u662f", "lines": ["  file.move({\n      srcUri: 'internal://app/fi", "  file.move({\n      srcUri: 'internal://app/Fi", "Move_003');\n    let srcUri = 'internal://cache", "ove({\n      srcUri: srcUri,\n      dstUri: dstU", "  file.copy({\n      srcUri: 'internal://app/Fi", "  file.move({\n      srcUri: srcUri,\n      dstU", "  file.copy({\n      srcUri: 'internal://app/fa", "le.copy({\n          srcUri: 'internal://cache/", "  file.copy({\n      srcUri: uri,\n      dstUri:", "  file.copy({\n      srcUri: 'internal://cache/", "  file.copy({\n      srcUri: 'internal://app/fi", "file.copy({\n        srcUri: 'internal://cache/", "  file.move({\n      srcUri: 'internal://cache/", "  file.copy({\n      srcUri: 'internal://app/..", "file.move({\n        srcUri: 'internal://cache/", "  file.move({\n      srcUri: 'internal://app/..", "  file.move({\n      srcUri: uri,\n      dstUri:"], "files": ["FileVirtualPath.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileCopyOption", "api_method_name": "dstUri", "api_method_all": "dstUri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 38, "since": 3, "api_used": "\u662f", "lines": ["cUri,\n      dstUri: dstUri,\n      success: fun", "le_Move_010',\n      dstUri: 'internal://app/ca", "le_Move_001',\n      dstUri: 'internal://cache/", " srcUri: uri,\n      dstUri: 'internal://cache/", "le_Copy_001',\n      dstUri: 'internal://cache/", "le_Copy_004',\n      dstUri: null,\n      succes", "le_Copy_014',\n      dstUri: dstUri,\n      succ", "le_Move_004',\n      dstUri: null,\n      succes", " srcUri: uri,\n      dstUri: uri,\n      success", "le_Move_011',\n      dstUri: 'internal://cache/", "_test_error',\n      dstUri: 'internal://cache/", "pp/fakepath',\n      dstUri: 'internal://app/fa", "le_Copy_012',\n      dstUri: 'internal://app/no", "on (done) {\n    let dstUri = await fileName('F", "sertTrue();\n    let dstUri = 'internal://cache", "le_Copy_003',\n      dstUri: 'internal://cache/", "le_Move_012',\n      dstUri: 'internal://app/no", "e_Move_005d',\n      dstUri: 'internal://app/ca", " expect(prepareFile(dstUri, FILE_CONTENT)).ass", "le_Move_013',\n      dstUri: 'internal://app/..", "_Move_003';\n    let dstUri = 'internal://app/c", "le_Move_014',\n      dstUri: dstUri,\n      succ", "le_Copy_008',\n      dstUri: 'internal://cache/", "le_Move_009',\n      dstUri: 'internal://app/Fi", "py_005d',\n          dstUri: 'internal://cache/", "le_Copy_011',\n      dstUri: 'internal://cache/", "cUri: srcUri,\n      dstUri: dstUri,\n      succ", "014',\n      dstUri: dstUri,\n      success: fun", "le_Copy_013',\n      dstUri: 'internal://app/..", "le_Move_008',\n      dstUri: 'internal://app/Fi", "le_Copy_009',\n      dstUri: 'internal://app/Fi", "p/File_Move',\n      dstUri: 'internal://app/Fi", "peArray[i],\n        dstUri: 'internal://cache/", "le_Copy_010',\n      dstUri: 'internal://app/ca"], "files": ["FileVirtualPath.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileGetOption", "api_method_all": "export interface FileGetOption {\n  \n  uri: string;\n\n  \n  recursive?: boolean;\n\n  \n  success?: (file: FileResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileGetOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileGetOption", "api_method_name": "success", "api_method_all": "success?: (file: FileResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileGetOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileGetOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileGetOption", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileGetOption", "api_method_name": "recursive", "api_method_all": "recursive?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 3, "api_used": "\u662f", "lines": ["_error_010d',\n      recursive: false,\n      succe", "/cache/test',\n      recursive: true,\n      succes", "://app/test',\n      recursive: false,\n      succe", "tion of API, mkdir, recursive.\n   */\n  it('File_m", "ile_Get_001',\n      recursive: true,\n      succes", "ile_Get_002',\n      recursive: false,\n      succe", "e_rmdir_002',\n      recursive: true,\n      succes", "le_Get_005d',\n      recursive: false,\n      succe", "le_Get_004d',\n      recursive: true,\n      succes", "rmdir_003_2',\n      recursive: true,\n      succes", "   file.get({\n      recursive: true,\n      succes", "_error_009d',\n      recursive: true,\n      succes", "    uri: uri,\n      recursive: true,\n      succes", "sc Function of API, recursive = ture.The test dir", "tion of API, mkdir, recursive not set value.\n   *", "ile_Get_011',\n      recursive: true,\n      succes", "sc Function of API, recursive not set value.The t", "_mkdir_003d',\n      recursive: true,\n      succes", "n of API, not input recursive.The test file is ex", "t_error_007',\n      recursive: true,\n      succes", "sc Function of API, recursive = false.The test fi", "sc Function of API, recursive = ture.The test fil", "le_Get_013d',\n      recursive: true,\n      succes"], "files": ["File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileDeleteOption", "api_method_all": "export interface FileDeleteOption {\n  \n  uri: string;\n\n  \n  success?: () => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileDeleteOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileDeleteOption", "api_method_name": "success", "api_method_all": "success?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileDeleteOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileDeleteOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileDeleteOption", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteTextOption", "api_method_all": "export interface FileWriteTextOption {\n  \n  uri: string;\n\n  \n  text: string;\n\n  \n  encoding?: string;\n\n  \n  append?: boolean;\n\n  \n  success?: () => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileWriteTextOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteTextOption", "api_method_name": "success", "api_method_all": "success?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteTextOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteTextOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteTextOption", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteTextOption", "api_method_name": "text", "api_method_all": "text: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 185, "since": 3, "api_used": "\u662f", "lines": ["t_error_011',\n      text: 'hello',\n      enc", "t_009 => pass, data.text:' + data.text);\n   ", "let data = await context.getFilesDir();\n  le", "wlen = ss.writeSync(text);\n      expect(wlen", "xt success.' + data.text);\n        expect(nu", "t_error_012',\n      text: 'Text that just fo", "_test_error',\n      text: FILE_CONTENT,\n    ", "le(fpath + i, 'test_text')).assertTrue();\n  ", "t_error_008',\n      text: randomString(4096)", "     expect(rlen == text.length + 1).assertT", "_Delete_009',\n      text: 'sawyerwang',\n    ", " data.text:' + data.text);\n        done();\n ", "iteText_012',\n      text: 'sawyerwang',\n    ", "     expect(rlen == text.length).assertTrue(", "_access_009',\n      text: 'Text that just fo", "sync_002');\n    let text = '0123456789abcdef", "le_List_015',\n      text: 'Text that just fo", "dText success. data.text:' + data.text);\n   ", "ileio.writeSync(fd, text, {\n        offset: ", "Text pass, ' + data.text);\n        done();\n ", "eatureAbility.getContext();\n  let data = awa", "sertTrue();\n    let text = '0123456789abcdef", "estName) {\n  let context = featureAbility.ge", "s, Content:' + data.text);\n        expect(nu", "set: 1,\n      }) == text.length - 1).assertT", "eadText_008',\n      text: 'Text that just fo", "_List_015_1',\n      text: 'Text that just fo"], "files": ["List.test.js", "File.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "FileIOStream.test.js", "FileError.test.js", "Common.js", "FileIO.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteTextOption", "api_method_name": "encoding", "api_method_all": "encoding?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 45, "since": 3, "api_used": "\u662f", "lines": ["sc Function of API, encoding.\n   */\n  it('fileio", "_CONTENT, {\n        encoding: 'utf-8',\n        p", "ello2', {\n          encoding: 'utf-8',\n         ", "t for test.',\n      encoding: 'utf-8',\n      suc", "4096), { offset: 1, encoding: 'utf-8' }, functio", "t_error_012',\n      encoding: 'GBK',\n      succe", "eadText_002',\n      encoding: 'utf-8',\n      suc", "a', '123');\n    let encodingArray = new Array('u", "ync(text, {\n        encoding: 'utf-8',\n        p", "iteText_004',\n      encoding: 'UTF-8',\n      suc", "_CONTENT, {\n        encoding: ''\n      }) == nul", "ition: 5,\n          encoding: 'utf-8',\n        }", "ext: 'hello',\n      encoding: 'gbk',\n      succe", "sc Function of API, encoding=UTF-8.\n   */\n  it('", "_CONTENT, {\n        encoding: 'utf-8',\n        o", "t for test.',\n      encoding: 'Utf-8',\n      suc", "_CONTENT, {\n        encoding: 'utf-8',\n      });", "ray[i], {\n          encoding: encodingArray[i]\n ", "ext: 'hello',\n      encoding: 'UTF-8',\n      suc", "osition: 5,\n        encoding: 'utf-8',\n      });", "ONTENT, {\n          encoding: 'utf-8',\n         ", "          encoding: encodingArray[i]\n        }) ", "_CONTENT, {\n        encoding: 'gb2312',\n      })", "sc Function of API, encoding=gb2312.\n   */\n  it(", "for (let i = 0; i < encodingArray.length; i++) {", "ONTENT, {\n          encoding: 'utf-8',\n        }", "ion of API, invalid encoding.\n   */\n  it('fileio", ": pos, length: len, encoding: 'UTF-8' }, functio", "ello1', {\n          encoding: 'utf-8',\n         ", " 'hello', {\n        encoding: 'utf-8',\n        o", "sc Function of API, encoding = UTF-8.The test fi", "_CONTENT, {\n        encoding: 'ASCII'\n      }) !"], "files": ["File.test.js", "write.test.js", "open.test.js", "FileIOStream.test.js", "FileError.test.js", "FileIO.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteTextOption", "api_method_name": "append", "api_method_all": "append?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 25, "since": 3, "api_used": "\u662f", "lines": [" buffer: buf,\n      append: true,\n      succes", "leName('fileio_test_append_file_sync_000');\n  ", "\n\n  it('fileio_test_append_file_sync_000', 0, ", "xt: 'Text2.',\n      append: true,\n      succes", "ext: 'hello',\n      append: true,\n      succes", "tc.name fileio_test_append_file_sync_000\n   * ", "alue for position & append.The file path is ex", "o file.(cache path, append mode) The file path", "/\n  it('fileio_test_append_file_sync_000', 0, ", "le.(cache path, non-append mode) The file path", " buffer: buf,\n      append: false,\n      succe", "le.log('fileio_test_append_file_sync_000 has f"], "files": ["File.test.js", "FileVirtualPath.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadTextResponse", "api_method_all": "export interface FileReadTextResponse {\n  \n  text: string;\n}", "api_method_name": "FileReadTextResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadTextResponse", "api_method_name": "text", "api_method_all": "text: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 185, "since": 3, "api_used": "\u662f", "lines": ["t_error_011',\n      text: 'hello',\n      enc", "t_009 => pass, data.text:' + data.text);\n   ", "let data = await context.getFilesDir();\n  le", "wlen = ss.writeSync(text);\n      expect(wlen", "xt success.' + data.text);\n        expect(nu", "t_error_012',\n      text: 'Text that just fo", "_test_error',\n      text: FILE_CONTENT,\n    ", "le(fpath + i, 'test_text')).assertTrue();\n  ", "t_error_008',\n      text: randomString(4096)", "     expect(rlen == text.length + 1).assertT", "_Delete_009',\n      text: 'sawyerwang',\n    ", " data.text:' + data.text);\n        done();\n ", "iteText_012',\n      text: 'sawyerwang',\n    ", "     expect(rlen == text.length).assertTrue(", "_access_009',\n      text: 'Text that just fo", "sync_002');\n    let text = '0123456789abcdef", "le_List_015',\n      text: 'Text that just fo", "dText success. data.text:' + data.text);\n   ", "ileio.writeSync(fd, text, {\n        offset: ", "Text pass, ' + data.text);\n        done();\n ", "eatureAbility.getContext();\n  let data = awa", "sertTrue();\n    let text = '0123456789abcdef", "estName) {\n  let context = featureAbility.ge", "s, Content:' + data.text);\n        expect(nu", "set: 1,\n      }) == text.length - 1).assertT", "eadText_008',\n      text: 'Text that just fo", "_List_015_1',\n      text: 'Text that just fo"], "files": ["List.test.js", "File.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "FileIOStream.test.js", "FileError.test.js", "Common.js", "FileIO.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadTextOption", "api_method_all": "export interface FileReadTextOption {\n  \n  uri: string;\n\n  \n  encoding?: string;\n\n  \n  position?: number;\n\n  \n  length?: number;\n\n  \n  success?: (data: FileReadTextResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileReadTextOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadTextOption", "api_method_name": "success", "api_method_all": "success?: (data: FileReadTextResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadTextOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadTextOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadTextOption", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadTextOption", "api_method_name": "encoding", "api_method_all": "encoding?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 45, "since": 3, "api_used": "\u662f", "lines": ["sc Function of API, encoding.\n   */\n  it('fileio", "_CONTENT, {\n        encoding: 'utf-8',\n        p", "ello2', {\n          encoding: 'utf-8',\n         ", "t for test.',\n      encoding: 'utf-8',\n      suc", "4096), { offset: 1, encoding: 'utf-8' }, functio", "t_error_012',\n      encoding: 'GBK',\n      succe", "eadText_002',\n      encoding: 'utf-8',\n      suc", "a', '123');\n    let encodingArray = new Array('u", "ync(text, {\n        encoding: 'utf-8',\n        p", "iteText_004',\n      encoding: 'UTF-8',\n      suc", "_CONTENT, {\n        encoding: ''\n      }) == nul", "ition: 5,\n          encoding: 'utf-8',\n        }", "ext: 'hello',\n      encoding: 'gbk',\n      succe", "sc Function of API, encoding=UTF-8.\n   */\n  it('", "_CONTENT, {\n        encoding: 'utf-8',\n        o", "t for test.',\n      encoding: 'Utf-8',\n      suc", "_CONTENT, {\n        encoding: 'utf-8',\n      });", "ray[i], {\n          encoding: encodingArray[i]\n ", "ext: 'hello',\n      encoding: 'UTF-8',\n      suc", "osition: 5,\n        encoding: 'utf-8',\n      });", "ONTENT, {\n          encoding: 'utf-8',\n         ", "          encoding: encodingArray[i]\n        }) ", "_CONTENT, {\n        encoding: 'gb2312',\n      })", "sc Function of API, encoding=gb2312.\n   */\n  it(", "for (let i = 0; i < encodingArray.length; i++) {", "ONTENT, {\n          encoding: 'utf-8',\n        }", "ion of API, invalid encoding.\n   */\n  it('fileio", ": pos, length: len, encoding: 'UTF-8' }, functio", "ello1', {\n          encoding: 'utf-8',\n         ", " 'hello', {\n        encoding: 'utf-8',\n        o", "sc Function of API, encoding = UTF-8.The test fi", "_CONTENT, {\n        encoding: 'ASCII'\n      }) !"], "files": ["File.test.js", "write.test.js", "open.test.js", "FileIOStream.test.js", "FileError.test.js", "FileIO.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadTextOption", "api_method_name": "position", "api_method_all": "position?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 44, "since": 3, "api_used": "\u662f", "lines": ["ength: 5,\n          position: 5,\n          encod", " length: 3,\n        position: 5,\n      });\n     ", "yBuffer, cache path.position = 0, length = 10.\n ", "adTextSync(fpath, { position: pos, length: len }", " buffer: buf,\n      position: 10,\n      success:", "ength: 5,\n          position: 5,\n        }, func", "er(4096), {\n        position: 1\n      }).then(fu", "o.readText(fpath, { position: 1 })\n        .then", ", offset & length & position = 1.\n   */\n  it('fi", "er(4096), {\n        position: invalidPos\n      }", ", not set value for position & append.The file p", "er(4096), {\n        position: 1,\n        offset:", "_CONTENT, {\n        position: -1\n      }) == nul", "er(4096), {\n        position: 1\n      });\n      ", "_buffer_010',\n      position: 0,\n      length: 1", "er(4096), {\n        position: invalidPos,\n      ", "o.readText(fpath, { position: pos, length: len, ", "g: 'utf-8',\n        position: 0,\n        offset:", " length: 4,\n        position: 5,\n        encodin", "o.readText(fpath, { position: 1 }, function (err", "  uri: fpath,\n      position: 100,\n      success", "./../123456',\n      position: 0,\n      length: 1", "ion of API, invalid position.\n   */\n  it('fileio", "_buffer_009',\n      position: 0,\n      length: 1", "er(4096), {\n        position: -1\n      });\n     ", "er(4096), {\n        position: 1,\n      });\n     ", " offset: 1,\n        position: invalidPos,\n      ", " API, set value for position.The file path is ex", "adTextSync(fpath, { position: pos });\n      expe", "sc Function of API, position = -1.\n   */\n  it('f", "dArrayBuffer, wrong position.\n   */\n  it('File_r", "sc Function of API, position.\n   */\n  it('fileio", "_buffer_001',\n      position: 0,\n      length: 1", "nc('aaa', {\n        position: 1\n      }) !== nul"], "files": ["File.test.js", "write.test.js", "all.test.js", "FileVirtualPath.test.js", "read.test.js", "FileIOStream.test.js", "FileIO.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadTextOption", "api_method_name": "length", "api_method_all": "length?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 202, "since": 3, "api_used": "\u662f", "lines": ["_CONTENT, {\n        length: invalidLength,\n   ", "len == FILE_CONTENT.length - 1);\n      expect(", "expect(FILE_CONTENT.length > bufLen).assertTru", "API, Set offset and length.\n   */\n  it('fileio", "ndomString(testName.length);\n}\n\nexport functio", "expect(rlen == text.length + 1).assertTrue();\n", "ength: FILE_CONTENT.length - 1,\n      }) == (F", "ndomString(testName.length);\n}\nexport async fu", "dPos = FILE_CONTENT.length;\n      let len = fi", "sc Function of API, length = 1.\n   */\n  it('fi", " position: 0,\n      length: 10,\n      success:", "expect(rlen == text.length).assertTrue();\n    ", "on of API, offset & length & position = 1.\n   ", "ion of API, invalid length.\n   */\n  it('fileio", "  console.log('file length:' + len)\n    expect", "sc Function of API, length = 1, offset = 1.\n  ", "_CONTENT, {\n        length: FILE_CONTENT.lengt", "a.substring(0, data.length - 5) + 'cache/';\n  ", "er(4096), {\n        length: 1,\n      });\n     ", "er(4096), {\n        length: invalidLength,\n   ", " offset: 1,\n        length: 1,\n      });\n     ", "var maxPos = $chars.length;\n  var pwd = '';\n  ", "}) == (FILE_CONTENT.length - 1)).assertTrue();", "sc Function of API, length = - 1.\n   */\n  it('", "1,\n      }) == text.length - 1).assertTrue();\n"], "files": ["Common.js", "FileIO.test.js", "createStream.test.js", "FileVirtualPath.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "fstat.test.js", "File.test.js", "StorageStatistics.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "VolumeManager.test.js", "filemanager.test.js", "read.test.js", "stat.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteArrayBufferOption", "api_method_all": "export interface FileWriteArrayBufferOption {\n  \n  uri: string;\n\n  \n  buffer: Uint8Array;\n\n  \n  position?: number;\n\n  \n  append?: boolean;\n\n  \n  success?: () => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileWriteArrayBufferOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteArrayBufferOption", "api_method_name": "success", "api_method_all": "success?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteArrayBufferOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteArrayBufferOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteArrayBufferOption", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteArrayBufferOption", "api_method_name": "buffer", "api_method_all": "buffer: Uint8Array", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 129, "since": 3, "api_used": "\u662f", "lines": ["it('File_read_array_buffer_010', 0, async func", "yBuffer_003',\n      buffer: buf,\n      append:", " new Uint8Array(res.buffer))) == FILE_CONTENT)", "og('File_read_array_buffer_011 , code: ' + cod", "     expect(readout.buffer.byteLength == 4096)", "og('File_read_array_buffer_010 call writeArray", "yBuffer_002',\n      buffer: buf,\n      success", " @tc.desc Write the buffer content to file.(ca", "ile/File_read_array_buffer_010'\n    });\n    se", "_buffer_010',\n      buffer: buffer,\n      succ", "_test_error',\n      buffer: buf,\n      success", "s, Content:' + data.buffer);\n        expect(nu", "yBuffer_005',\n      buffer: buf,\n      success", "     uri: '',\n      buffer: buf,\n      success", "ile/File_read_array_buffer_010',\n      buffer:", "yBuffer_006',\n      buffer: buf,\n      success", "og('File_read_array_buffer_010 call readArrayB", "ta.buffer: ' + data.buffer);\n        done();\n ", "all success' + data.buffer);\n        done();\n ", "on (done) {\n    var buffer = new Uint8Array([4", "yBuffer_009',\n      buffer: buf,\n      success", "010',\n      buffer: buffer,\n      success: fun", "yBuffer_010',\n      buffer: buf,\n      append:", "yBuffer_011',\n      buffer: buf,\n      append:", "yBuffer_001',\n      buffer: buf,\n      append:", "ata.buffer:' + data.buffer);\n        done();\n ", "r_011 => pass, data.buffer: ' + data.buffer);\n", "og('File_read_array_buffer_010 , code: ' + cod", "yBuffer_012',\n      buffer: buf,\n      append:", "yBuffer_003',\n      buffer: buf,\n      success", "yBuffer_004',\n      buffer: buf,\n      append:", "og('File_read_array_buffer_011 => pass, data.b", "yBuffer_008',\n      buffer: buf,\n      success", "uffer success. data.buffer:' + data.buffer);\n ", "it('File_read_array_buffer_011', 0, async func", "AGE_File_read_array_buffer_0100\n   * @tc.name ", "ile/File_read_array_buffer_010',\n      positio", "yBuffer_005',\n      buffer: buf,\n      positio"], "files": ["File.test.js", "FileVirtualPath.test.js", "read.test.js", "open.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteArrayBufferOption", "api_method_name": "position", "api_method_all": "position?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 44, "since": 3, "api_used": "\u662f", "lines": ["ength: 5,\n          position: 5,\n          encod", " length: 3,\n        position: 5,\n      });\n     ", "yBuffer, cache path.position = 0, length = 10.\n ", "adTextSync(fpath, { position: pos, length: len }", " buffer: buf,\n      position: 10,\n      success:", "ength: 5,\n          position: 5,\n        }, func", "er(4096), {\n        position: 1\n      }).then(fu", "o.readText(fpath, { position: 1 })\n        .then", ", offset & length & position = 1.\n   */\n  it('fi", "er(4096), {\n        position: invalidPos\n      }", ", not set value for position & append.The file p", "er(4096), {\n        position: 1,\n        offset:", "_CONTENT, {\n        position: -1\n      }) == nul", "er(4096), {\n        position: 1\n      });\n      ", "_buffer_010',\n      position: 0,\n      length: 1", "er(4096), {\n        position: invalidPos,\n      ", "o.readText(fpath, { position: pos, length: len, ", "g: 'utf-8',\n        position: 0,\n        offset:", " length: 4,\n        position: 5,\n        encodin", "o.readText(fpath, { position: 1 }, function (err", "  uri: fpath,\n      position: 100,\n      success", "./../123456',\n      position: 0,\n      length: 1", "ion of API, invalid position.\n   */\n  it('fileio", "_buffer_009',\n      position: 0,\n      length: 1", "er(4096), {\n        position: -1\n      });\n     ", "er(4096), {\n        position: 1,\n      });\n     ", " offset: 1,\n        position: invalidPos,\n      ", " API, set value for position.The file path is ex", "adTextSync(fpath, { position: pos });\n      expe", "sc Function of API, position = -1.\n   */\n  it('f", "dArrayBuffer, wrong position.\n   */\n  it('File_r", "sc Function of API, position.\n   */\n  it('fileio", "_buffer_001',\n      position: 0,\n      length: 1", "nc('aaa', {\n        position: 1\n      }) !== nul"], "files": ["File.test.js", "write.test.js", "all.test.js", "FileVirtualPath.test.js", "read.test.js", "FileIOStream.test.js", "FileIO.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileWriteArrayBufferOption", "api_method_name": "append", "api_method_all": "append?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 25, "since": 3, "api_used": "\u662f", "lines": [" buffer: buf,\n      append: true,\n      succes", "leName('fileio_test_append_file_sync_000');\n  ", "\n\n  it('fileio_test_append_file_sync_000', 0, ", "xt: 'Text2.',\n      append: true,\n      succes", "ext: 'hello',\n      append: true,\n      succes", "tc.name fileio_test_append_file_sync_000\n   * ", "alue for position & append.The file path is ex", "o file.(cache path, append mode) The file path", "/\n  it('fileio_test_append_file_sync_000', 0, ", "le.(cache path, non-append mode) The file path", " buffer: buf,\n      append: false,\n      succe", "le.log('fileio_test_append_file_sync_000 has f"], "files": ["File.test.js", "FileVirtualPath.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadArrayBufferResponse", "api_method_all": "export interface FileReadArrayBufferResponse {\n  \n  buffer: Uint8Array;\n}", "api_method_name": "FileReadArrayBufferResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadArrayBufferResponse", "api_method_name": "buffer", "api_method_all": "buffer: Uint8Array", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 129, "since": 3, "api_used": "\u662f", "lines": ["it('File_read_array_buffer_010', 0, async func", "yBuffer_003',\n      buffer: buf,\n      append:", " new Uint8Array(res.buffer))) == FILE_CONTENT)", "og('File_read_array_buffer_011 , code: ' + cod", "     expect(readout.buffer.byteLength == 4096)", "og('File_read_array_buffer_010 call writeArray", "yBuffer_002',\n      buffer: buf,\n      success", " @tc.desc Write the buffer content to file.(ca", "ile/File_read_array_buffer_010'\n    });\n    se", "_buffer_010',\n      buffer: buffer,\n      succ", "_test_error',\n      buffer: buf,\n      success", "s, Content:' + data.buffer);\n        expect(nu", "yBuffer_005',\n      buffer: buf,\n      success", "     uri: '',\n      buffer: buf,\n      success", "ile/File_read_array_buffer_010',\n      buffer:", "yBuffer_006',\n      buffer: buf,\n      success", "og('File_read_array_buffer_010 call readArrayB", "ta.buffer: ' + data.buffer);\n        done();\n ", "all success' + data.buffer);\n        done();\n ", "on (done) {\n    var buffer = new Uint8Array([4", "yBuffer_009',\n      buffer: buf,\n      success", "010',\n      buffer: buffer,\n      success: fun", "yBuffer_010',\n      buffer: buf,\n      append:", "yBuffer_011',\n      buffer: buf,\n      append:", "yBuffer_001',\n      buffer: buf,\n      append:", "ata.buffer:' + data.buffer);\n        done();\n ", "r_011 => pass, data.buffer: ' + data.buffer);\n", "og('File_read_array_buffer_010 , code: ' + cod", "yBuffer_012',\n      buffer: buf,\n      append:", "yBuffer_003',\n      buffer: buf,\n      success", "yBuffer_004',\n      buffer: buf,\n      append:", "og('File_read_array_buffer_011 => pass, data.b", "yBuffer_008',\n      buffer: buf,\n      success", "uffer success. data.buffer:' + data.buffer);\n ", "it('File_read_array_buffer_011', 0, async func", "AGE_File_read_array_buffer_0100\n   * @tc.name ", "ile/File_read_array_buffer_010',\n      positio", "yBuffer_005',\n      buffer: buf,\n      positio"], "files": ["File.test.js", "FileVirtualPath.test.js", "read.test.js", "open.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadArrayBufferOption", "api_method_all": "export interface FileReadArrayBufferOption {\n  \n  uri: string;\n\n  \n  position?: number;\n\n  \n  length?: number;\n\n  \n  success?: (data: FileReadArrayBufferResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileReadArrayBufferOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadArrayBufferOption", "api_method_name": "success", "api_method_all": "success?: (data: FileReadArrayBufferResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadArrayBufferOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadArrayBufferOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadArrayBufferOption", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadArrayBufferOption", "api_method_name": "position", "api_method_all": "position?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 44, "since": 3, "api_used": "\u662f", "lines": ["ength: 5,\n          position: 5,\n          encod", " length: 3,\n        position: 5,\n      });\n     ", "yBuffer, cache path.position = 0, length = 10.\n ", "adTextSync(fpath, { position: pos, length: len }", " buffer: buf,\n      position: 10,\n      success:", "ength: 5,\n          position: 5,\n        }, func", "er(4096), {\n        position: 1\n      }).then(fu", "o.readText(fpath, { position: 1 })\n        .then", ", offset & length & position = 1.\n   */\n  it('fi", "er(4096), {\n        position: invalidPos\n      }", ", not set value for position & append.The file p", "er(4096), {\n        position: 1,\n        offset:", "_CONTENT, {\n        position: -1\n      }) == nul", "er(4096), {\n        position: 1\n      });\n      ", "_buffer_010',\n      position: 0,\n      length: 1", "er(4096), {\n        position: invalidPos,\n      ", "o.readText(fpath, { position: pos, length: len, ", "g: 'utf-8',\n        position: 0,\n        offset:", " length: 4,\n        position: 5,\n        encodin", "o.readText(fpath, { position: 1 }, function (err", "  uri: fpath,\n      position: 100,\n      success", "./../123456',\n      position: 0,\n      length: 1", "ion of API, invalid position.\n   */\n  it('fileio", "_buffer_009',\n      position: 0,\n      length: 1", "er(4096), {\n        position: -1\n      });\n     ", "er(4096), {\n        position: 1,\n      });\n     ", " offset: 1,\n        position: invalidPos,\n      ", " API, set value for position.The file path is ex", "adTextSync(fpath, { position: pos });\n      expe", "sc Function of API, position = -1.\n   */\n  it('f", "dArrayBuffer, wrong position.\n   */\n  it('File_r", "sc Function of API, position.\n   */\n  it('fileio", "_buffer_001',\n      position: 0,\n      length: 1", "nc('aaa', {\n        position: 1\n      }) !== nul"], "files": ["File.test.js", "write.test.js", "all.test.js", "FileVirtualPath.test.js", "read.test.js", "FileIOStream.test.js", "FileIO.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileReadArrayBufferOption", "api_method_name": "length", "api_method_all": "length?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 202, "since": 3, "api_used": "\u662f", "lines": ["_CONTENT, {\n        length: invalidLength,\n   ", "len == FILE_CONTENT.length - 1);\n      expect(", "expect(FILE_CONTENT.length > bufLen).assertTru", "API, Set offset and length.\n   */\n  it('fileio", "ndomString(testName.length);\n}\n\nexport functio", "expect(rlen == text.length + 1).assertTrue();\n", "ength: FILE_CONTENT.length - 1,\n      }) == (F", "ndomString(testName.length);\n}\nexport async fu", "dPos = FILE_CONTENT.length;\n      let len = fi", "sc Function of API, length = 1.\n   */\n  it('fi", " position: 0,\n      length: 10,\n      success:", "expect(rlen == text.length).assertTrue();\n    ", "on of API, offset & length & position = 1.\n   ", "ion of API, invalid length.\n   */\n  it('fileio", "  console.log('file length:' + len)\n    expect", "sc Function of API, length = 1, offset = 1.\n  ", "_CONTENT, {\n        length: FILE_CONTENT.lengt", "a.substring(0, data.length - 5) + 'cache/';\n  ", "er(4096), {\n        length: 1,\n      });\n     ", "er(4096), {\n        length: invalidLength,\n   ", " offset: 1,\n        length: 1,\n      });\n     ", "var maxPos = $chars.length;\n  var pwd = '';\n  ", "}) == (FILE_CONTENT.length - 1)).assertTrue();", "sc Function of API, length = - 1.\n   */\n  it('", "1,\n      }) == text.length - 1).assertTrue();\n"], "files": ["Common.js", "FileIO.test.js", "createStream.test.js", "FileVirtualPath.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "fstat.test.js", "File.test.js", "StorageStatistics.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "VolumeManager.test.js", "filemanager.test.js", "read.test.js", "stat.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAccessOption", "api_method_all": "export interface FileAccessOption {\n  \n  uri: string;\n\n  \n  success?: () => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileAccessOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileAccessOption", "api_method_name": "success", "api_method_all": "success?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAccessOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileAccessOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileAccessOption", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileMkdirOption", "api_method_all": "export interface FileMkdirOption {\n  \n  uri: string;\n\n  \n  recursive?: boolean;\n\n  \n  success?: () => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileMkdirOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileMkdirOption", "api_method_name": "success", "api_method_all": "success?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileMkdirOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileMkdirOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileMkdirOption", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileMkdirOption", "api_method_name": "recursive", "api_method_all": "recursive?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 3, "api_used": "\u662f", "lines": ["_error_010d',\n      recursive: false,\n      succe", "/cache/test',\n      recursive: true,\n      succes", "://app/test',\n      recursive: false,\n      succe", "tion of API, mkdir, recursive.\n   */\n  it('File_m", "ile_Get_001',\n      recursive: true,\n      succes", "ile_Get_002',\n      recursive: false,\n      succe", "e_rmdir_002',\n      recursive: true,\n      succes", "le_Get_005d',\n      recursive: false,\n      succe", "le_Get_004d',\n      recursive: true,\n      succes", "rmdir_003_2',\n      recursive: true,\n      succes", "   file.get({\n      recursive: true,\n      succes", "_error_009d',\n      recursive: true,\n      succes", "    uri: uri,\n      recursive: true,\n      succes", "sc Function of API, recursive = ture.The test dir", "tion of API, mkdir, recursive not set value.\n   *", "ile_Get_011',\n      recursive: true,\n      succes", "sc Function of API, recursive not set value.The t", "_mkdir_003d',\n      recursive: true,\n      succes", "n of API, not input recursive.The test file is ex", "t_error_007',\n      recursive: true,\n      succes", "sc Function of API, recursive = false.The test fi", "sc Function of API, recursive = ture.The test fil", "le_Get_013d',\n      recursive: true,\n      succes"], "files": ["File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileRmdirOption", "api_method_all": "export interface FileRmdirOption {\n  \n  uri: string;\n\n  \n  recursive?: boolean;\n\n  \n  success?: () => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "FileRmdirOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileRmdirOption", "api_method_name": "success", "api_method_all": "success?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 450, "since": 3, "api_used": "\u662f", "lines": ["ete_009 call delete success');\n        done();\n", "_008 call writeText success.');\n        done();", "oding: 'GBK',\n      success: function (data) {\n", "ll writeArrayBuffer success.');\n        done();", "_012 call writeText success.');\n        done();", "r_012 call readText success.' + data.text);\n   ", "rror_007 call rmdir success.');\n        expect(", "ffer: buffer,\n      success: function () {\n    ", "_011 call writeText success.');\n        expect(", "ing: 'Utf-8',\n      success: function () {\n    ", "rror_004 call mkdir success.');\n        expect(", "iteText_012',\n      success: function () {\n    ", "_002 call writeText success.');\n        expect(", "yBuffer_011',\n      success: function (data) {\n", "t_008 call readText success. data.text:' + data", "adArrayBuffer: call success' + data.buffer);\n  ", "t_error_005',\n      success: function (data) {\n", "rsive: false,\n      success: function () {\n    ", "ror_012 call delete success');\n            done", "iteText_012',\n      success: function (data) {\n", "./../123456',\n      success: function () {\n    ", "g((i + 1) + ' mkdir success');\n        }\n      ", "t_error_006',\n      success: function (data) {\n", "rror_008 call mkdir success.');\n        done();", "FILE_CONTENT,\n      success: function () {\n    ", "_test_error',\n      success: function (uri) {\n ", "./../123456',\n      success: function (data) {\n", "t_error004d',\n      success: function () {\n    ", "og((i + 1) + ' copy success');\n          expect", "oding: 'gbk',\n      success: function () {\n    ", "t_error_008',\n      success: function () {\n    ", "append: true,\n      success: function () {\n    ", "rror_009 call rmdir success.');\n        expect(", "t for test.',\n      success: function () {\n    ", " buffer: buf,\n      success: function () {\n    ", "ll writeArrayBuffer success.');\n        expect(", "writeText_012 mkdir success');\n        done();\n", "'sawyerwang',\n      success: function () {\n    ", "rror_008 call rmdir success.');\n        expect(", "riteText_012 delete success');\n        done();\n", "ursive: true,\n      success: function () {\n    ", "rror_010 call rmdir success.');\n        expect(", "ror_012',\n          success: function () {\n    ", "_Delete_009',\n      success: function () {\n    ", "eadText_008',\n      success: function (data) {\n", "le_Delete_009 mkdir success');\n        done();\n", "String(4096),\n      success: function () {\n    "], "files": ["FileVirtualPath.test.js", "FileIOError.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileRmdirOption", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 1221, "since": 3, "api_used": "\u662f", "lines": ["rror_007 call rmdir fail, code: ' + code + '", "e();\n      },\n      fail: function (data, co", "_test_error_006 has failed for ' + e);\n    }", "all readArrayBuffer fail, code: ' + code + '", "error_000 call move fail, code: ' + code + '", "_002 call writeText fail, code: ' + code + '", "rror_008 call mkdir fail, code: ' + code + '", "r_005 call readText fail, code: ' + code + '", "_test_error_005 has failed for ' + e);\n    }", "rror_010 call rmdir fail, code: ' + code + '", "r_012 call readText fail, code: ' + code + '", "_test_error_004 has failed for ' + e);\n    }", "_011 call writeText fail, code: ' + code + '", "       },\n          fail: function (data, co", "l();\n      },\n      fail: function (data, co", "ror_012 call delete fail, code: ' + code + '", "_012 call writeText fail, code: ' + code + '", "rror_004 call mkdir fail, code: ' + code + '", "_data_async_003 has failed for \" + e);\n     ", "_test_error_001 has failed for ' + e);\n    }", "error_001 call copy fail, code: ' + code + '", "_data_async_000 has failed for \" + e);\n     ", "_test_error_003 has failed for ' + e);\n    }", "_test_error_009 has failed for ' + e);\n     ", "_test_error_002 has failed for ' + e);\n    }", "_test_error_000 has failed for ' + e);\n    }", "rror_009 call rmdir fail, code: ' + code + '", "_test_error_008 has failed for ' + e);\n    }", "_test_error_007 has failed for ' + e);\n    }", "_data_async_002 has failed for \" + e);\n     ", "ll writeArrayBuffer fail, code: ' + code + '", "rror_008 call rmdir fail, code: ' + code + '", "_data_async_001 has failed for \" + e);\n     "], "files": ["symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "environment.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "constants.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "open.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "VolumeManager.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "statfs.test.js", "StorageStatistics.test.js", "close.test.js", "FileError.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileRmdirOption", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FileRmdirOption", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 446, "since": 3, "api_used": "\u662f", "lines": ["r_001 pass, uri:' + uri);\n        expect(nu", " file.mkdir({\n      uri: 'internal://app/..", "est_error_001 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://app/..", "r_000 pass, uri:' + uri);\n        expect(nu", "file.delete({\n      uri: 'internal://cache/", "le.readText({\n      uri: 'internal://app/..", "13 => pass,uri: ' + uri);\n        done();\n ", "e.writeText({\n      uri: 'internal://app/fi", "ile_Copy_013=> pass uri:' + uri);\n        d", "ArrayBuffer({\n      uri: 'internal://app/fi", " file.mkdir({\n      uri: 'internal://app/fi", "file.delete({\n      uri: 'internal://app/..", "est_error_000 pass, uri:' + uri);\n        e", "e.writeText({\n      uri: 'internal://app../", " success: function (uri) {\n        console.", "le_Move_013 => pass,uri: ' + uri);\n        ", ".delete({\n          uri: 'internal://app/fi", "e.writeText({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/..", "ArrayBuffer({\n      uri: 'internal://cache/", " file.rmdir({\n      uri: 'internal://app/fi", "le.readText({\n      uri: 'internal://app/fi", "file.access({\n      uri: 'internal://cache/"], "files": ["filemanager.test.js", "List.test.js", "File.test.js", "FileVirtualPath.test.js", "securitylabel.test.js", "FileError.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FileRmdirOption", "api_method_name": "recursive", "api_method_all": "recursive?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 3, "api_used": "\u662f", "lines": ["_error_010d',\n      recursive: false,\n      succe", "/cache/test',\n      recursive: true,\n      succes", "://app/test',\n      recursive: false,\n      succe", "tion of API, mkdir, recursive.\n   */\n  it('File_m", "ile_Get_001',\n      recursive: true,\n      succes", "ile_Get_002',\n      recursive: false,\n      succe", "e_rmdir_002',\n      recursive: true,\n      succes", "le_Get_005d',\n      recursive: false,\n      succe", "le_Get_004d',\n      recursive: true,\n      succes", "rmdir_003_2',\n      recursive: true,\n      succes", "   file.get({\n      recursive: true,\n      succes", "_error_009d',\n      recursive: true,\n      succes", "    uri: uri,\n      recursive: true,\n      succes", "sc Function of API, recursive = ture.The test dir", "tion of API, mkdir, recursive not set value.\n   *", "ile_Get_011',\n      recursive: true,\n      succes", "sc Function of API, recursive not set value.The t", "_mkdir_003d',\n      recursive: true,\n      succes", "n of API, not input recursive.The test file is ex", "t_error_007',\n      recursive: true,\n      succes", "sc Function of API, recursive = false.The test fi", "sc Function of API, recursive = ture.The test fil", "le_Get_013d',\n      recursive: true,\n      succes"], "files": ["File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_all": "export default class File {\n  \n  static move(options: FileMoveOption): void;\n\n  \n  static copy(options: FileCopyOption): void;\n\n  \n  static list(options: FileListOption): void;\n\n  \n  static get(options: FileGetOption): void;\n\n  \n  static delete(options: FileDeleteOption): void;\n\n  \n  static writeText(options: FileWriteTextOption): void;\n\n  \n  static readText(options: FileReadTextOption): void;\n\n  \n  static writeArrayBuffer(options: FileWriteArrayBufferOption): void;\n\n  \n  static readArrayBuffer(options: FileReadArrayBufferOption): void;\n\n  \n  static access(options: FileAccessOption): void;\n\n  \n  static mkdir(options: FileMkdirOption): void;\n\n  \n  static rmdir(options: FileRmdirOption): void;\n}", "api_method_name": "File", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 3294, "since": 3, "api_used": "\u662f", "lines": ["  }\n  });\n\n  \n  it('FileIo_test_error_007', ", "E_CONTENT,\n  prepareFile,\n  fileName,\n  next", "xport function cacheFileName(testName) {\n  c", "/Common'\n\ndescribe('FileError', function () ", "30)\n  });\n\n  \n  it('File_test_error_006', 0,", ";\n    expect(prepareFile(fpath, FILE_CONTENT", "30)\n  });\n\n  \n  it('File_test_error_009', 0,", "30)\n  });\n\n  \n  it('File_test_error_010', 0,", "  }\n  });\n\n  \n  it('FileIo_test_error_006', ", "unction prepareEmptyFile(fpath) {\n  try {\n  ", "/Common'\n\ndescribe('FileIOError', function (", "tion () {\n\n  \n  it('FileIo_test_error_000', ", "  }\n  });\n\n  \n  it('FileIo_test_error_005', ", "export function nextFileName(testName) {\n  c", "30)\n  });\n\n  \n  it('File_test_error_002', 0,", "30)\n  });\n\n  \n  it('File_test_error_008', 0,", "30)\n  });\n\n  \n  it('File_test_error_005', 0,", "tion () {\n\n  \n  it('File_test_error_000', 0,", "  }\n  });\n\n  \n  it('FileIo_test_error_008', ", "\nexport function getFileTextLen(fpath) {\n  l", "30)\n  });\n\n  \n  it('File_test_error_011', 0,", "g('Failed to prepareFile for ' + e)\n    retu", ",\n  fileName,\n  nextFileName,\n  appName,\n  r", "  }\n  });\n\n  \n  it('FileIo_test_error_002', ", "t function differentFileName(testName) {\n  c", "  }\n  });\n\n  \n  it('FileIo_test_error_003', ", "30)\n  });\n\n  \n  it('File_test_error_003', 0,", "  expect(fileio.copyFileSync(fpath, fpathTar", "30)\n  });\n\n  \n  it('File_test_error_012', 0,", "  }\n  });\n\n  \n  it('FileIo_test_error_004', ", "30)\n  });\n\n  \n  it('File_test_error_004', 0,", "    let dpath = nextFileName('fileio_test_er", "}\nexport function isFileExist(fpath) {\n  try", "    let fpath = nextFileName('fileio_test_er", "  }\n  });\n\n  \n  it('FileIo_test_error_001', ", "30)\n  });\n\n  \n  it('File_test_error_001', 0,", "30)\n  });\n\n  \n  it('File_test_error_007', 0,", "e.log('Failed to getFileTextLen ' + e)\n    e", "ort function prepareFile1(fpath, content) {\n", "ort function prepareFile(fpath, content) {\n ", "E_CONTENT,\n  prepareFile,\n  fileName,\n  rand"], "files": ["List.test.js", "symlink.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "createWatcher.test.js", "Common.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "fstat.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "mkdtemp.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "opendir_close.test.js", "chown.test.js", "fchown.test.js", "File.test.js", "chmod.test.js", "fdatasync.test.js", "rmdir.test.js", "lchown.test.js", "filemanager.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "close.test.js", "FileError.test.js", "rename.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "move", "api_method_all": "static move(options: FileMoveOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 27, "since": 3, "api_used": "\u662f", "lines": [".log('File_Copy_008 move success');\n        ", "sc Function of API, move app path file to ca", "'File_Move_003 call move success.');\n       ", "},\n    });\n    file.move({\n      srcUri: 'in", "sc Function of API, move.The test file is ex", "'File_Move_006 call move success.');\n       ", "ath;\n    }\n    file.move({\n      srcUri: uri", "tTrue();\n      file.move({\n        srcUri: '", "'File_Move_002 call move success. uri: ' + u", "'File_Move_004 call move success.');\n       ", "g('File_Move_007 => move fail');\n        exp", "ertTrue();\n    file.move({\n      srcUri: 'in", "n (done) {\n    file.move({\n      srcUri: 'in", "Move_003';\n    file.move({\n      srcUri: src", "Move_014';\n    file.move({\n      srcUri: 'in", "test_error_000 call move fail, code: ' + cod", "'File_Move_005 call move success.');\n       ", ".log('File_Move_014 move pass');\n        don", "g('File_Move_007 => move success');\n        "], "files": ["FileVirtualPath.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "copy", "api_method_all": "static copy(options: FileCopyOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 165, "since": 3, "api_used": "\u662f", "lines": ["etTime();\n      let copyFileSync = fileio.co", "ole.log((i + 1) + ' copy success');\n        ", "tc.name fileio_test_copy_file_sync_001\n   * ", "sc Function of API, copy. fpatch is vaild, f", "eioPerformance_prop_copyFileSync,copyFileSyn", "eioPerformance_prop_copyFile', 0, function (", "le.log('fileio_test_copy_file_sync_003 has f", "leName('fileio_test_copy_file_sync_000');\n  ", "eioPerformance_prop_copyFile\n   * @tc.desc 0", "tc.name fileio_test_copy_file_sync_002\n   * ", "/\n  it('fileio_test_copy_file_sync_000', 0, ", "pyFileSync = fileio.copyFileSync(fpath, fpat", "le.log('fileio_test_copy_file_sync_001 has f", "eioPerformance_prop_copyFile 0.5G---start---", "leName('fileio_test_copy_file_sync_003');\n  ", "le.log('fileio_test_copy_file_sync_000 has f", " SUB_STORAGE_FileIO_copyFileSync_0200\n   * @", "leName('fileio_test_copy_file_sync_002');\n  ", "tc.name fileio_test_copy_file_sync_000\n   * ", "tc.name fileio_test_copy_file_sync_003\n   * ", "tc.name fileio_test_copy_file_sync_004\n   * ", "test_error_001 call copy fail, code: ' + cod", "/\n  it('fileio_test_copy_file_sync_002', 0, ", "/\n  it('fileio_test_copy_file_sync_003', 0, ", "eioPerformance_prop_copyFile\n   * @tc.name f", " try {\n      fileio.copyFileSync(fpath, fpat", "nc,copyFileSync:' + copyFileSync + ', time2:", " SUB_STORAGE_FileIO_copyFileSync_0100\n   * @", "leName('fileio_test_copy_file_sync_001') + '", "le.log('fileio_test_copy_file_sync_002 has f", " SUB_STORAGE_FileIO_copyFileSync_0400\n   * @", "ertTrue();\n    file.copy({\n      srcUri: 'in", " try {\n      fileio.copyFileSync(fpath, 0);\n", "leName('fileio_test_copy_file_sync_004');\n  ", " SUB_STORAGE_FileIO_copyFileSync_0000\n   * @", "n (done) {\n    file.copy({\n      srcUri: 'in", " SUB_STORAGE_FileIO_copyFileSync_0300\n   * @", "sc Function of API, copy. fpatch is invalid,", "      expect(fileio.copyFileSync(fpath, fpat", "/\n  it('fileio_test_copy_file_sync_004', 0, ", "/\n  it('fileio_test_copy_file_sync_001', 0, ", "e_prop_copyFileSync,copyFileSync:' + copyFil"], "files": ["FileIOError.test.js", "List.test.js", "copyFile.test.js", "File.test.js", "FileVirtualPath.test.js", "FileError.test.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "list", "api_method_all": "static list(options: FileListOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 61, "since": 3, "api_used": "\u662f", "lines": ["t(\"filemanager_test_list_file_async_005\", 0,", "t(\"filemanager_test_list_file_async_003\", 0,", "06') + 'd'\n    file.list({\n      uri: dpath,", "g(\"filemanager_test_list_file_async_001 has ", "t(\"filemanager_test_list_file_async_002\", 0,", "ile_Get_013 => file list\uff1a');\n        console", "sc Function of API, list.The test file and d", "= await filemanager.listFile(path, \"image\");", "ile_Get_003 => file list\uff1a');\n        console", "'File_List_005 call list success.');\n       ", "g(\"filemanager_test_list_file_async_003 has ", "l();\n    }\n    file.list({\n      uri: 'inter", "ile_Get_005 => file list \uff1a');\n        consol", "n (done) {\n    file.list({\n      uri: 'inter", "ile_Get_004 => file list\uff1a');\n        console", "},\n    });\n    file.list({\n      uri: 'inter", "= await filemanager.listFile(path, \"file\",op", "ile_Get_002 => file list\uff1a');\n        console", "t(\"filemanager_test_list_file_async_001\", 0,", "ile_Get_014 => file list \uff1a');\n        consol", "'File_List_003 call list success.' + JSON.st", "'File_List_012 call list success.' + JSON.st", " }\n    });\n    file.list({\n      uri: 'inter", "'File_List_008 call list success.' + JSON.st", "'File_List_001 call list success.' + JSON.st", "ertTrue();\n    file.list({\n      uri: 'inter", "g(\"filemanager_test_list_file_async_000 has ", ";\n      filemanager.listFile(path, \"file\", o", "t(\"filemanager_test_list_file_async_004\", 0,", "'File_List_002 call list success.' + JSON.st", "'File_List_004 call list success.');\n       ", "'File_List_011 call list success.' + JSON.st", "g(\"filemanager_test_list_file_async_002 has ", "'File_List_006 call list success.' + data.fi", "g(\"filemanager_test_list_file_async_004 has ", "  console.log('file list');\n        console.", "('File_Get_006 file list\uff1a');\n        console", "ath;\n    }\n    file.list({\n      uri: uri,\n ", "t(\"filemanager_test_list_file_async_000\", 0,"], "files": ["FileVirtualPath.test.js", "File.test.js", "filemanager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "get", "api_method_all": "static get(options: FileGetOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 331, "since": 3, "api_used": "\u662f", "lines": ["{\n      environment.getStorageDataDir((err,", "t(\"environment_test_get_user_data_async_000", "onfigService = core.getDefaultService('conf", "= await environment.getStorageDataDir();\n  ", "g(\"environment_test_get_user_data_async_003", "t(\"environment_test_get_storage_data_async_", "start2 = new Date().getTime();\n      let co", ".unlinkSync(fpathTarget);\n    }\n    fileio.", " start = new Date().getTime();\n  while (tru", "Sync(fpath, fpathTarget);\n      let end2 = ", "g(\"environment_test_get_user_data_async_000", " injectRef = Object.getPrototypeOf(global) ", "se environment_test_get_user_data_async_000", "se environment_test_get_storage_data_async_", "  await environment.getStorageDataDir(true)", "ck environment_test_get_storage_data_async_", "();\n    let fpathTarget = fpath + 'f1';\n   ", "        let fpathTarget = dpath + '/f' + ra", "  await environment.getUserDataDir(true);\n ", "  await environment.getStorageDataDir(\"123%", "t(\"environment_test_get_user_data_async_002", "t end2 = new Date().getTime();\n      let ti", "  const core = Core.getInstance()\n    core.", "{\n      environment.getUserDataDir((err, ur", "sole.log('Failed to getFileTextLen ' + e)\n ", "t(\"environment_test_get_user_data_async_001", "g(\"environment_test_get_user_data_async_002", "');\n    let fpathTarget = nextFileName('p2'", "t(\"environment_test_get_user_data_async_003", "n (done) {\n    file.get({\n      uri: 'inter", "');\n    let fpathTarget = appName('fileio_t", "\n    if (new Date().getTime() - start > n) ", "Sync(fpath, fpathTarget, 1);\n      expect(n", "= await environment.getUserDataDir();\n     ", "g(\"environment_test_get_storage_data_async_", "  await environment.getUserDataDir(\"123#$%^", "ck environment_test_get_user_data_async_001", "\n}\n\nexport function getFileTextLen(fpath) {", "Sync(fpath, fpathTarget) !== null).assertTr"], "files": ["filemanager.test.js", "FileIOError.test.js", "File.test.js", "copyFile.test.js", "StorageStatistics.test.js", "FileVirtualPath.test.js", "statfs.test.js", "securitylabel.test.js", "environment.test.js", "index.js", "VolumeManager.test.js", "Common.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "delete", "api_method_all": "static delete(options: FileDeleteOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 88, "since": 3, "api_used": "\u662f", "lines": ["data);\n        file.delete({\n          uri: 'i", "ile_Delete_007 call delete success');\n        ", "test_error_012 call delete fail, code: ' + cod", "ile_Delete_004 call delete fail, code: ' + cod", "_writeText_001 call delete fail, code: ' + cod", "_writeText_003 call delete success');\n        ", "ile_Delete_007 call delete fail, code: ' + cod", "ile_Delete_008 call delete fail, code: ' + cod", "ile_Delete_001 call delete success');\n        ", "_writeText_002 call delete fail, code: ' + cod", "_writeText_003 call delete fail, code: ' + cod", "writeText_012  call delete callback fail, code", "ile_access_009 call delete success.');\n       ", "_writeText_002 call delete success');\n        ", "ile_Delete_006 call delete success');\n        ", "ath;\n    }\n    file.delete({\n      uri: uri,\n ", "ile_Delete_003 call delete success.');\n       ", "ile_Delete_002 call delete fail, code: ' + cod", "ile_Delete_005 call delete success.');\n       ", "ertTrue();\n    file.delete({\n      uri: 'inter", "'File_writeText_004 delete , code: ' + code + ", "ile_Delete_001 call delete fail, code: ' + cod", "ile_Delete_009 call delete success');\n        ", "ile_Delete_006 call delete fail, code: ' + cod", "ile_Delete_002 call delete success.');\n       ", "ile_Delete_004 call delete success.');\n       ", "'File_writeText_004 delete success');\n        ", "ile_Delete_003 call delete fail, code: ' + cod", "ile_Delete_008 call delete success');``\n      ", "ile_Delete_005 call delete fail, code: ' + cod", "test_error_012 call delete success');\n        ", "'File_writeText_012 delete success');\n        ", "_writeText_001 call delete success');\n        ", "n (done) {\n    file.delete({\n      uri: 'inter", "},\n    });\n    file.delete({\n      uri: 'inter"], "files": ["FileVirtualPath.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "writeText", "api_method_all": "static writeText(options: FileWriteTextOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 199, "since": 3, "api_used": "\u662f", "lines": ["test_error_012 call writeText fail, code: ' + cod", "ternal://cache/File_writeText_001',\n      text: '", "test_error_012 call writeText success.');\n       ", "  console.log('File_writeText_012 delete success'", "ile_Delete_008 call writeText success');\n        ", "  console.log('File_writeText_001 call delete suc", "  console.log('File_writeText_001 call read succe", "ternal://cache/File_writeText_002',\n      text: '", "_writeText_001 call writeText fail , code: ' + co", "  console.log('File_writeText_012 , code: ' + cod", "istributedfile/File_writeText_012',\n      success", " });\n\n  \n  it('File_writeText_001', 0, async func", "  console.log('File_writeText_001 call read fail ", "test_error_002 call writeText fail, code: ' + cod", "n (done) {\n    file.writeText({\n      uri: 'inter", "ile_Delete_007 call writeText success');\n        ", "istributedfile/File_writeText_012',\n      text: '", "ile_Delete_007 call writeText fail, code: ' + cod", "e_readText_008 call writeText callback fail, code", "  console.log('File_writeText_012 call readText c", "test_error_002 call writeText success.');\n       ", "  console.log('File_writeText_001 call writeText ", "test_error_011 call writeText success.');\n       ", "_writeText_001 call writeText success');\n        ", " });\n\n  \n  it('File_writeText_002', 0, async func", "},\n    });\n    file.writeText({\n      uri: 'inter", "ile_Delete_008 call writeText fail, code: ' + cod", "  console.log('File_writeText_012  call delete ca", "ternal://cache/File_writeText_001',\n      success", "  console.log('File_writeText_012 => call readTex", "test_error_011 call writeText fail, code: ' + cod", "  console.log('File_writeText_012 mkdir success')", "  console.log('File_writeText_001 call delete fai", " });\n\n  \n  it('File_writeText_012', 0, async func", "e_readText_008 call writeText success.');\n       "], "files": ["FileVirtualPath.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "readText", "api_method_all": "static readText(options: FileReadTextOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 124, "since": 3, "api_used": "\u662f", "lines": ["istributedfile/File_readText_008',\n      success", "test_error_012 call readText success.' + data.te", "sc Function of API, readText, app path.\n   */\n  ", "test_error_012 call readText fail, code: ' + cod", "istributedfile/File_readText_008',\n      text: '", " });\n\n  \n  it('File_readText_009', 0, async func", "ternal://cache/File_readText_001',\n      text: '", "  console.log('File_readText_009 call readText c", "  console.log('File_readText_008 call writeText ", "   let str = fileio.readTextSync(fpath, { positi", "e_readText_008 call readText callback fail, code", "e_readText_008 call readText success. data.text:", "_writeText_004 call readText fail, code: ' + cod", "istributedfile/File_readText_008'\n    });\n    se", "\n   * @tc.name File_readText_001\n   * @tc.desc F", " try {\n      fileio.readTextSync();\n      expect", "  console.log('File_readText_008 call readText c", "_writeText_012 call readText callback fail, code", "   let str = fileio.readTextSync(fpath);\n      e", "   });\n      fileio.readText(fpath, { position: ", "_writeText_005 call readText fail , code: ' + co", "h.\n   */\n  it('File_readText_001', 0, async func", "n (done) {\n    file.readText({\n      uri: 'inter", "  console.log('File_readText_009 => pass, data.t", " try {\n      fileio.readTextSync(fpath);\n      e", "_writeText_006 call readText fail, code: ' + cod", "e_readText_009 call readText callback fail, code", "  console.log('File_readText_008 call readText s", " try {\n      fileio.readTextSync(fpath, {\n      ", "_writeText_004 call readText success. Content: '", " });\n\n  \n  it('File_readText_008', 0, async func", "test_error_005 call readText fail, code: ' + cod", "iteText_012 => call readText pass, ' + data.text", "er SUB_STORAGE_File_readText_0100\n   * @tc.name ", "\n      await fileio.readText(fpath, { position: ", "},\n    });\n    file.readText({\n      uri: 'inter"], "files": ["FileVirtualPath.test.js", "readtext.test.js", "FileError.test.js", "File.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "writeArrayBuffer", "api_method_all": "static writeArrayBuffer(options: FileWriteArrayBufferOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 155, "since": 3, "api_used": "\u662f", "lines": ["ternal://cache/File_writeArrayBuffer_001',\n      buffer:", "ray_buffer_010 call writeArrayBuffer success.');\n       ", "  console.log('File_writeArrayBuffer_003 , code: ' + cod", " });\n\n  \n  it('File_writeArrayBuffer_011', 0, async func", "  console.log('File_writeArrayBuffer_001 call writeArray", "ternal://cache/File_writeArrayBuffer_001',\n      success", "istributedfile/File_writeArrayBuffer_011',\n      buffer:", " 32, 33]);\n    file.writeArrayBuffer({\n      uri: 'inter", "er SUB_STORAGE_File_writeArrayBuffer_0300\n   * @tc.name ", "},\n    });\n    file.writeArrayBuffer({\n      uri: 'inter", "ternal://cache/File_writeArrayBuffer_003',\n      buffer:", "\n   * @tc.name File_writeArrayBuffer_001\n   * @tc.desc W", "  console.log('File_writeArrayBuffer_011 readArrayBuffer", "ternal://cache/File_writeArrayBuffer_002',\n      buffer:", "istributedfile/File_writeArrayBuffer_011',\n      success", "  console.log('File_writeArrayBuffer_002 call writeArray", "rrayBuffer_001 call writeArrayBuffer success.');\n       ", "  console.log('File_writeArrayBuffer_001 readArrayBuffer", "  console.log('File_writeArrayBuffer_001 call readArrayB", "t.\n   */\n  it('File_writeArrayBuffer_001', 0, async func", "  console.log('File_writeArrayBuffer_003 call writeText ", "  console.log('File_writeArrayBuffer_011 , code: ' + cod", "test_error_003 call writeArrayBuffer fail, code: ' + cod", "ternal://cache/File_writeArrayBuffer_002',\n      success", "ternal://cache/File_writeArrayBuffer_001'\n    });\n  });\n", "t.\n   */\n  it('File_writeArrayBuffer_003', 0, async func", "test_error_003 call writeArrayBuffer success.');\n       ", "er SUB_STORAGE_File_writeArrayBuffer_0200\n   * @tc.name ", "istributedfile/File_writeArrayBuffer_011'\n    });\n    se", "  console.log('File_writeArrayBuffer_011 call writeArray", "er SUB_STORAGE_File_writeArrayBuffer_0100\n   * @tc.name ", "  console.log('File_writeArrayBuffer_001 , code: ' + cod", "\n   * @tc.name File_writeArrayBuffer_002\n   * @tc.desc W", "t.\n   */\n  it('File_writeArrayBuffer_002', 0, async func", "rrayBuffer_002 call writeArrayBuffer success.');\n       ", "  console.log('File_writeArrayBuffer_002 call readArrayB", "\n   * @tc.name File_writeArrayBuffer_003\n   * @tc.desc W", "ternal://cache/File_writeArrayBuffer_002'\n    });\n  });\n", "rrayBuffer_003 call writeArrayBuffer success.');\n       ", "  console.log('File_writeArrayBuffer_002 , code: ' + cod", "  console.log('File_writeArrayBuffer_003 call writeArray", "rrayBuffer_011 call writeArrayBuffer success.');\n       "], "files": ["FileVirtualPath.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "readArrayBuffer", "api_method_all": "static readArrayBuffer(options: FileReadArrayBufferOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 42, "since": 3, "api_used": "\u662f", "lines": ["test_error_006 call readArrayBuffer fail, code: ' + cod", "ray_buffer_010 call readArrayBuffer success. data.buffe", "},\n    });\n    file.readArrayBuffer({\n      uri: 'inter", "ray_buffer_003 call readArrayBuffer success: ' );\n     ", "ray_buffer_009 call readArrayBuffer success. data.buffe", "sc Function of API, readArrayBuffer, wrong length.\n   *", "sc Function of API, readArrayBuffer, wrong position.\n  ", "ray_buffer_006 call readArrayBuffer success: ' );\n     ", "sc Function of API, readArrayBuffer,\n   */\n  it('File_r", "ertTrue();\n    file.readArrayBuffer({\n      uri: fpath,", "rrayBuffer_002 call readArrayBuffer success.' );\n      ", "sc Function of API, readArrayBuffer, wrong uri.\n   */\n ", "riteArrayBuffer_011 readArrayBuffer: call success' + da", "ray_buffer_005 call readArrayBuffer success: ' );\n     ", "riteArrayBuffer_001 readArrayBuffer , code: ' + code + ", "iteArrayBuffer_004: readArrayBuffer success ' );\n      ", "rrayBuffer_001 call readArrayBuffer success.' );\n      ", "ray_buffer_004 call readArrayBuffer success: ' );\n     ", "riteArrayBuffer_003 readArrayBuffer success:' );\n      ", "riteArrayBuffer_010 readArrayBuffer , code: ' + code + ", "riteArrayBuffer_011 readArrayBuffer , code: ' + code + ", "n (done) {\n    file.readArrayBuffer({\n      uri: '',\n  ", "n (done) {\n    file.readArrayBuffer({\n      uri: 'inter", "ray_buffer_007 call readArrayBuffer success: ' );\n     ", "sc Function of API, readArrayBuffer, cache path.positio"], "files": ["FileVirtualPath.test.js", "File.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "access", "api_method_all": "static access(options: FileAccessOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 212, "since": 3, "api_used": "\u662f", "lines": ["tc.name fileio_test_access_sync_000\n   * @tc.d", "istributedfile/File_access_009',\n      text: '", " });\n\n  \n  it('File_access_009', 0, async func", "tc.name fileio_test_access_sync_001\n   * @tc.d", "sc Function of API, access(mode=2). The test f", "esc Function of API,access. The test file is e", "  console.log('File_access_010 call access suc", "leName('fileio_test_access_sync_000');\n    exp", " });\n\n  \n  it('File_access_010', 0, async func", "le.log('fileio_test_access_sync_002 has failed", "},\n    });\n    file.access({\n      uri: 'inter", "/\n  it('fileio_test_access_sync_000', 0, async", "  console.log('File_access_009 fail\uff0ccode: ' + ", "sc Function of API, access(fpath=dir address).", " try {\n      fileio.accessSync(fpath);\n      e", "{\n    expect(fileio.accessSync(fpath) !== null", "sc Function of API, access(mode=1). The test f", "    let fd = fileio.accessSync(fpath);\n      e", "/\n  it('fileio_test_access_sync_002', 0, async", "ile_access_010 call access success.');\n       ", "tc.name fileio_test_access_sync_003\n   * @tc.d", "  console.log('File_access_009 call delete suc", "tc.name fileio_test_access_sync_002\n   * @tc.d", "n (done) {\n    file.access({\n      uri: 'inter", "/\n  it('fileio_test_access_sync_001', 0, async", "ile_access_009 call access success.');\n       ", "  console.log('File_access_009 , code: ' + cod", "sc Function of API, access. The test file is n", " try {\n      fileio.accessSync(1);\n      expec", "le.log('fileio_test_access_sync_000 has failed", "leName('fileio_test_access_sync_004');\n    exp", "  console.log('File_access_009 call access suc", "le.log('fileio_test_access_sync_004 has failed", "istributedfile/File_access_009',\n      success", "      expect(fileio.accessSync(fpath) !== null", "      expect(fileio.accessSync(fpath, 1) !== n", "tc.name fileio_test_access_sync_005\n   * @tc.d", "/\n  it('fileio_test_access_sync_005', 0, async", "    let fd = fileio.accessSync(fpath);\n      c", "      expect(fileio.accessSync(fpath, 2) !== n", "  console.log('File_access_009 mkdir success.'", "/\n  it('fileio_test_access_sync_004', 0, async", "le.log('fileio_test_access_sync_001 has failed", "  console.log('File_access_010 , code: ' + cod", "tc.name fileio_test_access_sync_004\n   * @tc.d", "/\n  it('fileio_test_access_sync_003', 0, async"], "files": ["filemanager.test.js", "List.test.js", "access.test.js", "File.test.js", "StorageStatistics.test.js", "symlink.test.js", "FileVirtualPath.test.js", "unlink.test.js", "open.test.js", "rename.test.js", "rmdir.test.js", "Common.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "mkdir", "api_method_all": "static mkdir(options: FileMkdirOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 468, "since": 3, "api_used": "\u662f", "lines": ["tc.name fileio_test_mkdir_sync_rmdir_sync_000", "n (done) {\n    file.mkdir({\n      uri: 'inter", "File_mkdir_009 call mkdir callback fail, code", "prop1');\n    fileio.mkdirSync(dpath);\n    try", "og('File_Delete_009 mkdir success');\n        ", "og('File_access_009 mkdir success.');\n       ", "'prop');\n    fileio.mkdirSync(dpath);\n    try", "ole.log((i + 1) + ' mkdir success');\n        ", "File_rmdir_009 call mkdir callback fail, code", "      expect(fileio.mkdirSync(dpath, 0o777) !", "og('File_List_015_1 mkdir success.');\n       ", " });\n\n  \n  it('File_mkdir_009', 0, async func", " * @tc.desc Sync to mkdir and rmdir.\n   */\n  ", "istributedfile/File_mkdir_009',\n      success", "r_009f';\n    fileio.mkdirSync(dpath);\n    exp", "open1');\n    fileio.mkdirSync(dpath);\n    try", ".log('File_List_015 mkdir success.');\n       ", "File_rmdir_009 call mkdir success.');\n       ", "      expect(fileio.mkdirSync(dpath) !== null", "_011d');\n    fileio.mkdirSync(dpath);\n    try", ";\n    expect(fileio.mkdirSync(dpath) !== null", "  console.log('File_mkdir_009 call mkdir succ", "  console.log('File_mkdir_009 call rmdir succ", " i\n          fileio.mkdirSync(dpath);\n       ", ");\n          fileio.mkdirSync(dpath);\n       ", "test_error_004 call mkdir fail, code: ' + cod", "  console.log('File_mkdir_009 call mkdir call", "'File_writeText_012 mkdir success');\n        ", "copy1');\n    fileio.mkdirSync(dpath);\n    try", "test_error_004 call mkdir success.');\n       ", "test_error_008 call mkdir success.');\n       ", "test_error_008 call mkdir fail, code: ' + cod", "  console.log('File_mkdir_009 call rmdir call", "File_mkdir_009 call mkdir success.');\n       "], "files": ["List.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "FileIOStat.test.js", "FileIO.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "FileIOError.test.js", "File.test.js", "opendir_close.test.js", "all.test.js", "rmdir.test.js", "read.test.js", "stat.test.js", "close.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "rmdir", "api_method_all": "static rmdir(options: FileRmdirOption): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 425, "since": 0, "api_used": "\u662f", "lines": ["},\n    });\n    file.rmdir({\n      uri: 'inter", " + e);\n      fileio.rmdirSync(dpath);\n    }\n ", "test_error_008 call rmdir success.');\n       ", "      expect(fileio.rmdirSync(dpath) !== null", "test_error_009 call rmdir fail, code: ' + cod", "File_rmdir_009 call rmdir callback fail, code", "      expect(fileio.rmdirSync(dpathTarget) !=", "test_error_008 call rmdir fail, code: ' + cod", "test_error_010 call rmdir fail, code: ' + cod", "  console.log('File_rmdir_009 call rmdir call", "File_rmdir_009 call rmdir success.');\n       ", "test_error_007 call rmdir success.');\n       ", " });\n\n  \n  it('File_rmdir_009', 0, async func", "ertTrue();\n    file.rmdir({\n      uri: 'inter", "eio_test_mkdir_sync_rmdir_sync_000 has failed", "      expect(fileio.rmdirSync(fpath) !== null", "c Sync to mkdir and rmdir. mkdirSync(mode=0o4", "File_mkdir_009 call rmdir callback fail, code", "test_error_007 call rmdir fail, code: ' + cod", "eio_test_mkdir_sync_rmdir_sync_002\n   * @tc.d", "eio_test_mkdir_sync_rmdir_sync_001\n   * @tc.d", "eio_test_mkdir_sync_rmdir_sync_001', 0, async", "istributedfile/File_rmdir_009',\n      success", "c Sync to mkdir and rmdir. mkdirSync(mode=0o6", "path);\n      fileio.rmdirSync(dpath);\n    }\n ", "test_error_009 call rmdir success.');\n       ", "eio_test_mkdir_sync_rmdir_sync_000\n   * @tc.d", "  console.log('File_rmdir_009 call mkdir call", "eio_test_mkdir_sync_rmdir_sync_000', 0, async", "File_mkdir_009 call rmdir success.');\n       ", "c Sync to mkdir and rmdir.\n   */\n  it('fileio", "eio_test_mkdir_sync_rmdir_sync_001 has failed", "  console.log('File_rmdir_009 call rmdir succ", "eio_test_mkdir_sync_rmdir_sync_001') + 'd'\n  ", "test_error_010 call rmdir success.');\n       ", "  console.log('File_rmdir_009 call mkdir succ"], "files": ["List.test.js", "FileIODirent.test.js", "mkdir_rmdir.test.js", "FileIOStat.test.js", "FileIO.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "lstat.test.js", "fstat.test.js", "FileIOError.test.js", "File.test.js", "mkdtemp.test.js", "opendir_close.test.js", "all.test.js", "rmdir.test.js", "read.test.js", "stat.test.js", "close.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}]}