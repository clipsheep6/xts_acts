{"subsystem_ch": "\u7535\u8bdd\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "telephony", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.net.connection", "api": [{"api_class_name": "connection", "api_method_all": "declare namespace connection {\n  type HttpRequest = http.HttpRequest;\n  type TCPSocket = socket.TCPSocket;\n  type UDPSocket = socket.UDPSocket;\n\n  \n  function createNetConnection(netSpecifier?: NetSpecifier, timeout?: number): NetConnection;\n\n  \n  function getDefaultNet(callback: AsyncCallback<NetHandle>): void;\n  function getDefaultNet(): Promise<NetHandle>;\n\n  \n  function getAllNets(callback: AsyncCallback<Array<NetHandle>>): void;\n  function getAllNets(): Promise<Array<NetHandle>>;\n\n  \n  function getConnectionProperties(netHandle: NetHandle, callback: AsyncCallback<ConnectionProperties>): void;\n  function getConnectionProperties(netHandle: NetHandle): Promise<ConnectionProperties>;\n\n  \n  function getNetCapabilities(netHandle: NetHandle, callback: AsyncCallback<NetCapabilities>): void;\n  function getNetCapabilities(netHandle: NetHandle): Promise<NetCapabilities>;\n\n  \n  function hasDefaultNet(callback: AsyncCallback<boolean>): void;\n  function hasDefaultNet(): Promise<boolean>;\n\n  \n  function enableAirplaneMode(callback: AsyncCallback<void>): void;\n  function enableAirplaneMode(): Promise<void>;\n\n  \n  function disableAirplaneMode(callback: AsyncCallback<void>): void;\n  function disableAirplaneMode(): Promise<void>;\n\n  \n  function reportNetConnected(netHandle: NetHandle, callback: AsyncCallback<void>): void;\n  function reportNetConnected(netHandle: NetHandle): Promise<void>;\n\n  \n  function reportNetDisconnected(netHandle: NetHandle, callback: AsyncCallback<void>): void;\n  function reportNetDisconnected(netHandle: NetHandle): Promise<void>;\n\n  \n  function getAddressesByName(host: string, callback: AsyncCallback<Array<NetAddress>>): void;\n  function getAddressesByName(host: string): Promise<Array<NetAddress>>;\n\n  export interface NetConnection {\n    on(type: 'netAvailable', callback: Callback<NetHandle>): void;\n\n    on(type: 'netBlockStatusChange', callback: Callback<{ netHandle: NetHandle, blocked: boolean }>): void;\n\n    on(type: 'netCapabilitiesChange', callback: Callback<{ netHandle: NetHandle, netCap: NetCapabilities }>): void;\n\n    on(type: 'netConnectionPropertiesChange', callback: Callback<{ netHandle: NetHandle, connectionProperties: ConnectionProperties }>): void;\n\n    on(type: 'netLost', callback: Callback<NetHandle>): void;\n\n    on(type: 'netUnavailable', callback: Callback<void>): void;\n\n    \n    register(callback: AsyncCallback<void>): void;\n\n    \n    unregister(callback: AsyncCallback<void>): void;\n  }\n\n  export interface NetSpecifier {\n    netCapabilities: NetCapabilities;\n    bearerPrivateIdentifier?: string;\n  }\n\n  export interface NetHandle {\n    netId: number;\n\n    \n    getAddressesByName(host: string, callback: AsyncCallback<Array<NetAddress>>): void;\n    getAddressesByName(host: string): Promise<Array<NetAddress>>;\n\n    \n    getAddressByName(host: string, callback: AsyncCallback<NetAddress>): void;\n    getAddressByName(host: string): Promise<NetAddress>;\n  }\n\n  export interface NetCapabilities {\n    linkUpBandwidthKbps?: number;\n    linkDownBandwidthKbps?: number;\n    networkCap?: Array<NetCap>;\n    bearerTypes: Array<NetBearType>;\n  }\n\n  export enum NetCap {\n    \n    NET_CAPABILITY_MMS = 0,\n\n    \n    NET_CAPABILITY_NOT_METERED = 11,\n\n    \n    NET_CAPABILITY_INTERNET = 12,\n\n    \n    NET_CAPABILITY_NOT_VPN = 15,\n\n    \n    NET_CAPABILITY_VALIDATED = 16,\n  }\n\n  export enum NetBearType {\n    \n    BEARER_CELLULAR = 0,\n\n    \n    BEARER_WIFI = 1,\n\n    \n    BEARER_ETHERNET = 3,\n  }\n\n  export interface ConnectionProperties {\n    interfaceName: string;\n    domains: string;\n    linkAddresses: Array<LinkAddress>;\n    dnses: Array<NetAddress>;\n    routes: Array<RouteInfo>;\n    mtu: number;\n  }\n\n  export interface RouteInfo {\n    interface: string;\n    destination: LinkAddress;\n    gateway: NetAddress;\n    hasGateway: boolean;\n    isDefaultRoute: boolean;\n  }\n\n  export interface LinkAddress {\n    address: NetAddress;\n    prefixLength: number;\n  }\n\n  export interface NetAddress {\n    address: string;\n    family?: number; // IPv4 = 1; IPv6 = 2, default is IPv4\n    port?: number; // [0, 65535]\n  }\n}", "api_method_name": "connection", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 200, "since": 0, "api_used": "\u662f", "lines": ["**********\");\n      connection.getNetCapabilities(", "rt default function connectionJsunit() {\n  describ", "turn;\n      }\n      connection.getConnectionProper", "TID_IVVALID);\n      connection.getConnectionProper", "**********\");\n      connection.hasDefaultNet((erro", "nit() {\n  describe('connectionTest', function () {", "**********\");\n      connection.getDefaultNet((erro", "etId)}`);\n          connection.getNetCapabilities(", "TID_IVVALID);\n      connection.reportNetDisconnect", "**********\");\n      connection.getAddressesByName(", "**********\");\n      connection.getAllNets((error, ", "ID_IVVALID2);\n      connection.reportNetConnected(", "**********\");\n      connection.reportNetDisconnect", "TID_IVVALID);\n      connection.getNetCapabilities(", " } else {\n          connection.getConnectionProper", "      let netConn = connection.createNetConnection", "**********\");\n      connection.hasDefaultNet().the", "**********\");\n      connection.enableAirplaneMode(", "ion from '@ohos.net.connection'\nimport utils from ", "**********\");\n      connection.getConnectionProper", "/index.ets\";\nimport connection from '@ohos.net.con", "**********\");\n      connection.reportNetConnected(", ".log(\"************* connection Test start*********", "**********\");\n      connection.getAllNets().then(d", "lities_0400';\n      connection.getAllNets((error, ", "'\n        }\n        connection.createNetConnection", "**********\");\n      connection.disableAirplaneMode", "      try {\n        connection.createNetConnection", "TID_IVVALID);\n      connection.reportNetConnected(", "ID_IVVALID2);\n      connection.reportNetDisconnect", "**********\");\n      connection.getDefaultNet().the", "   var handle = new connection.NetHandle(NETID_IVV", "turn;\n      }\n      connection.getNetCapabilities("], "files": ["ConnectionJsunit.test.ets", "SocketJsunit.test.ets", "WebSocketJsunit.test.ets", "ConnectionSecondJsUnit.test.ets", "List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "createNetConnection", "api_method_all": "function createNetConnection(netSpecifier?: NetSpecifier, timeout?: number): NetConnection;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 33, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_createNetConnection_0300 Test start****", "\n        connection.createNetConnection(netSpecifier, TIMEO", "\n        connection.createNetConnection(3000);\n        expe", "\n        connection.createNetConnection(8000);\n        expe", "nnection_Connection_createNetConnection_0500 Test end******", "nnection_Connection_createNetConnection_0400 Test end******", "nnection_Connection_createNetConnection_0100 Test start****", "nnection_Connection_createNetConnection_0100 Test end******", "nnection_Connection_createNetConnection_0400', 0, async fun", "\n        connection.createNetConnection(5000);\n        expe", "nnection_Connection_createNetConnection_0200 Test end******", "nnection_Connection_createNetConnection_0200 Test start****", "nnection_Connection_createNetConnection_0500 Test start****", "nnection_Connection_createNetConnection_0200', 0, async fun", "nnection_Connection_createNetConnection_0500', 0, async fun", "\n        connection.createNetConnection(netSpecifier, 5000)", "nnection_Connection_createNetConnection_0400 Test start****", "etConn = connection.createNetConnection();\n        netConn.", "etConn = connection.createNetConnection(netSpecifier, TIMEO", "nnection_Connection_createNetConnection_0300', 0, async fun", "nnection_Connection_createNetConnection_0300 Test end******", "nnection_Connection_createNetConnection_0100', 0, async fun"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "getDefaultNet", "api_method_all": "function getDefaultNet(callback: AsyncCallback<NetHandle>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_getDefaultNet_0200 Test end*************\");\n      don", "nnection_Connection_getDefaultNet_0200 getDefaultNet success, case fail\")", ");\n      connection.getDefaultNet((error, data) => {\n        if (error) {", "_getDefaultNet_0200 getDefaultNet success, case fail\");\n        expect().", "nnection_Connection_getDefaultNet_0200 getDefaultNet error, case success\"", "nnection_Connection_getDefaultNet_0200', 0, async function (done) {\n     ", "nnection_Connection_getDefaultNet_0100', 0, async function (done) {\n     ", "nnection_Connection_getDefaultNet_0100 Test end*************\");\n      don", "nnection_Connection_getDefaultNet_0100 Test start*************\");\n      c", "_getDefaultNet_0200 getDefaultNet error, case success\");\n        expect(t", "nnection_Connection_getDefaultNet_0200 Test start*************\");\n      c", ");\n      connection.getDefaultNet((error, data) => {\n        expect().ass"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "getDefaultNet", "api_method_all": "function getDefaultNet(): Promise<NetHandle>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": [");\n      connection.getDefaultNet().then(data => {\n        console.log(\"T", ");\n      connection.getDefaultNet().then((handle) => {\n        handle.bin", ");\n      connection.getDefaultNet().then((handle) => {\n        handle.get"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "getAllNets", "api_method_all": "function getAllNets(callback: AsyncCallback<Array<NetHandle>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 21, "since": 0, "api_used": "\u662f", "lines": [");\n      connection.getAllNets((error, data) => {\n        if (error) {", "le.log(`${caseName} getAllNets promiss error: ${error}`);\n        expe", "nnection_Connection_getAllNets_0200 getAllNets error \");\n        expec", "elephony_connection getAllNets netID value : ${JSON.stringify(value[0]", "';\n      connection.getAllNets((error, value) => {\n        if (error) ", "nnection_Connection_getAllNets_0200 Test start*************\");\n      c", "nnection_Connection_getAllNets_0200', 0, async function (done) {\n     ", "nnection_Connection_getAllNets_0200 Test end*************\");\n    });\n\n", "nnection_Connection_getAllNets_0100 Test end*************\");\n    });\n\n", "       console.log(`getAllNets netID value : ${JSON.stringify(value[0]", ");\n      connection.getAllNets((error, value) => {\n        if (error) ", "ion_getAllNets_0200 getAllNets error \");\n        expect().assertFail()", "nnection_Connection_getAllNets_0100', 0, async function (done) {\n     ", "nnection_Connection_getAllNets_0100 Test start*************\");\n      c"], "files": ["ConnectionJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "getAllNets", "api_method_all": "function getAllNets(): Promise<Array<NetHandle>>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["';\n      connection.getAllNets().then((handle) => {\n        connection", ");\n      connection.getAllNets().then(data => {\n        expect(true).a"], "files": ["ConnectionJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "getConnectionProperties", "api_method_all": "function getConnectionProperties(netHandle: NetHandle, callback: AsyncCallback<ConnectionProperties>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 25, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_getConnectionProperties_0400', 0, async function (done) {\n     ", "nnection_Connection_getConnectionProperties_0400 Test start*************\");\n      c", "nnection_Connection_getConnectionProperties_0400 Test end*************\");\n    });\n\n", ");\n      connection.getConnectionProperties(handle, (error, data) => {\n        if (", "nnection_Connection_getConnectionProperties_0100 Test end*************\");\n      don", "elephony_connection_getConnectionProperties_Async_0200';\n      connection.getAllNet", "nnection_Connection_getConnectionProperties_0100', 0, async function (done) {\n     ", "nnection_Connection_getConnectionProperties_0200 Test end*************\");\n      don", "nnection_Connection_getConnectionProperties_0300 Test start*************\");\n      v", "----------Telephony getConnectionProperties Test is starting-----------------------", "         connection.getConnectionProperties(value[0], (error, value) => {\n         ", "nnection_Connection_getConnectionProperties_0200', 0, async function (done) {\n     ", "nnection_Connection_getConnectionProperties_0300', 0, async function (done) {\n     ", "----------Telephony getConnectionProperties Test end-----------------------\");\n    ", ");\n      connection.getConnectionProperties((error, data) => {\n        expect().ass", "nnection_Connection_getConnectionProperties_0400  get value success: ${JSON.stringi", "nnection_Connection_getConnectionProperties_0100 Test start*************\");\n      c", "         connection.getConnectionProperties(value[0], (error, value_2) => {\n       ", "nnection_Connection_getConnectionProperties_0300 Test end*************\");\n      don", "nnection_Connection_getConnectionProperties_0200 Test start*************\");\n      i", "elephony_connection_getConnectionProperties_Async_0200', 0, async function (done) {"], "files": ["ConnectionJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "getConnectionProperties", "api_method_all": "function getConnectionProperties(netHandle: NetHandle): Promise<ConnectionProperties>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": [" }\n      connection.getConnectionProperties().then(data => {\n        expect().asser"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "getNetCapabilities", "api_method_all": "function getNetCapabilities(netHandle: NetHandle, callback: AsyncCallback<NetCapabilities>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 28, "since": 0, "api_used": "\u662f", "lines": ["----------Telephony getNetCapabilities Promise Test is starting---------------", "elephony_connection_getNetCapabilities_Promise_1300', 0, async function (done)", "nnection_Connection_getNetCapabilities_0300 Test end*************\");\n      don", "nnection_Connection_getNetCapabilities_0300 Test start*************\");\n      i", ");\n      connection.getNetCapabilities((error, data) => {\n        expect().ass", "nnection_Connection_getNetCapabilities_0400', 0, async function (done) {\n     ", ");\n      connection.getNetCapabilities(handle, (error, data) => {\n        if (", "nnection_Connection_getNetCapabilities_0100', 0, async function (done) {\n     ", "         connection.getNetCapabilities(value[0], (error, data) => {\n          ", "nnection_Connection_getNetCapabilities_0100 Test start*************\");\n      c", "nnection_Connection_getNetCapabilities_0400';\n      connection.getAllNets((err", "elephony_connection_getNetCapabilities_Promise_1300';\n      connection.getAllN", "  * @tc.name      : getNetCapabilities\n     * @tc.desc      : Obtains {@link N", "nnection_Connection_getNetCapabilities_0300', 0, async function (done) {\n     ", "nnection_Connection_getNetCapabilities_0200 Test end*************\");\n      don", "nnection_Connection_getNetCapabilities_0100 Test end*************\");\n      don", "----------Telephony getNetCapabilities Promise Test is end--------------------", "nnection_Connection_getNetCapabilities_0200 Test start*************\");\n      v", "nnection_Connection_getNetCapabilities_0200', 0, async function (done) {\n     ", "nnection_Connection_getNetCapabilities_0400 Test end*************\");\n      don", "le.log(`${caseName} getNetCapabilities promiss data suceess: ${JSON.stringify(", "le.log(`${caseName} getNetCapabilities promiss fail: ${error}`);\n          exp", "nnection_Connection_getNetCapabilities_0300\n     * @tc.name      : getNetCapab", "nnection_Connection_getNetCapabilities_0400\n     * @tc.name      : getNetCapab", "nnection_Connection_getNetCapabilities_0400 Test start*************\");\n      l"], "files": ["ConnectionJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "getNetCapabilities", "api_method_all": "function getNetCapabilities(netHandle: NetHandle): Promise<NetCapabilities>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [" }\n      connection.getNetCapabilities().then(data => {\n        expect().asser", "\n        connection.getNetCapabilities(handle[0]).then((data) => {\n          c"], "files": ["ConnectionJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "hasDefaultNet", "api_method_all": "function hasDefaultNet(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["_hasDefaultNet_0200 hasDefaultNet error,case success,error:${\n        toS", "nnection_Connection_hasDefaultNet_0100 Test start*************\");\n      c", "  * @tc.name      : hasDefaultNet\n         * @tc.desc      : Checks wheth", "nnection_Connection_hasDefaultNet_0200 hasDefaultNet error,case success,e", "nnection_Connection_hasDefaultNet_0200 Test end*************\");\n      don", "nnection_Connection_hasDefaultNet_0200 Test start*************\");\n      c", ");\n      connection.hasDefaultNet((error, data) => {\n        if (error) {", "nnection_Connection_hasDefaultNet_0200', 0, async function (done) {\n     ", "nnection_Connection_hasDefaultNet_0100\n         * @tc.name      : hasDefa", "nnection_Connection_hasDefaultNet_0200\n         * @tc.name      : hasDefa", "nnection_Connection_hasDefaultNet_0100 Test end*************\");\n      don", "nnection_Connection_hasDefaultNet_0100', 0, async function (done) {\n     "], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "hasDefaultNet", "api_method_all": "function hasDefaultNet(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": [");\n      connection.hasDefaultNet().then(activated => {\n        expect()."], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "enableAirplaneMode", "api_method_all": "function enableAirplaneMode(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_enableAirplaneMode_0100\n         * @tc.name      : enableA", "  * @tc.name      : enableAirplaneMode\n         * @tc.desc      : Enables the ", "nnection_Connection_enableAirplaneMode_0100 Test end*************\");\n      don", "nnection_Connection_enableAirplaneMode_0200\n         * @tc.name      : enableA", "nnection_Connection_enableAirplaneMode_0100 Test start*************\");\n      c", ");\n      connection.enableAirplaneMode((error, data) => {\n        if (error) {", "nnection_Connection_enableAirplaneMode_0200', 0, async function (done) {\n     ", "nnection_Connection_enableAirplaneMode_0100', 0, async function (done) {\n     ", "nnection_Connection_enableAirplaneMode_0200 Test end*************\");\n      don", "nnection_Connection_enableAirplaneMode_0200 Test start*************\");\n      c"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "enableAirplaneMode", "api_method_all": "function enableAirplaneMode(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": [");\n      connection.enableAirplaneMode().then(data => {\n        expect(true).a"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "disableAirplaneMode", "api_method_all": "function disableAirplaneMode(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 10, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_disableAirplaneMode_0200\n         * @tc.name      : disable", "nnection_Connection_disableAirplaneMode_0100\n         * @tc.name      : disable", "  * @tc.name      : disableAirplaneMode\n         * @tc.desc      : Disables the", ");\n      connection.disableAirplaneMode((error, data) => {\n        if (error) {", "nnection_Connection_disableAirplaneMode_0100 Test start*************\");\n      c", "nnection_Connection_disableAirplaneMode_0200', 0, async function (done) {\n     ", "nnection_Connection_disableAirplaneMode_0100', 0, async function (done) {\n     ", "nnection_Connection_disableAirplaneMode_0100 Test end*************\");\n      don", "nnection_Connection_disableAirplaneMode_0200 Test end*************\");\n      don"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "disableAirplaneMode", "api_method_all": "function disableAirplaneMode(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": [");\n      connection.disableAirplaneMode().then(data => {\n        expect(true).a"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "reportNetConnected", "api_method_all": "function reportNetConnected(netHandle: NetHandle, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 23, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_reportNetConnected_0200', 0, async function (done) {\n     ", "nnection_Connection_reportNetConnected_0300', 0, async function (done) {\n     ", "nnection_Connection_reportNetConnected_0200 Test end*************\");\n      don", "nnection_Connection_reportNetConnected_0300 Test start*************\");\n      v", ");\n      connection.reportNetConnected((error, data) => {\n        if (error) {", "nnection_Connection_reportNetConnected_0100', 0, async function (done) {\n     ", "nnection_Connection_reportNetConnected_0400', 0, async function (done) {\n     ", "nnection_Connection_reportNetConnected_0200\n         * @tc.name      : reportN", "nnection_Connection_reportNetConnected_0100\n         * @tc.name      : reportN", "nnection_Connection_reportNetConnected_0300\n         * @tc.name      : reportN", "nnection_Connection_reportNetConnected_0100 Test end*************\");\n      don", "nnection_Connection_reportNetConnected_0300 Test end*************\");\n      don", "  * @tc.name      : reportNetConnected\n         * @tc.desc      : Reports the ", "nnection_Connection_reportNetConnected_0400\n         * @tc.name      : reportN", "nnection_Connection_reportNetConnected_0400 Test start*************\");\n      v", "nnection_Connection_reportNetConnected_0100 Test start*************\");\n      c", "nnection_Connection_reportNetConnected_0200 Test start*************\");\n      v", "nnection_Connection_reportNetConnected_0400 Test end*************\");\n      don", ");\n      connection.reportNetConnected(handle, (error, data) => {\n        if (", "nnection_Connection_reportNetConnected_0200 Test start*************\");\n      c"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "reportNetConnected", "api_method_all": "function reportNetConnected(netHandle: NetHandle): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [");\n      connection.reportNetConnected(handle).then(() => {\n        expect().a"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "reportNetDisconnected", "api_method_all": "function reportNetDisconnected(netHandle: NetHandle, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 22, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_reportNetDisconnected_0100\n         * @tc.name      : reportN", "nnection_Connection_reportNetDisconnected_0100 Test end*************\");\n      don", "nnection_Connection_reportNetDisconnected_0300 Test end*************\");\n      don", "nnection_Connection_reportNetDisconnected_0200 Test end*************\");\n      don", "nnection_Connection_reportNetDisconnected_0400\n         * @tc.name      : reportN", "nnection_Connection_reportNetDisconnected_0200\n         * @tc.name      : reportN", "nnection_Connection_reportNetDisconnected_0300\n         * @tc.name      : reportN", "nnection_Connection_reportNetDisconnected_0200', 0, async function (done) {\n     ", "nnection_Connection_reportNetDisconnected_0400', 0, async function (done) {\n     ", "nnection_Connection_reportNetDisconnected_0200 Test start*************\");\n      v", "nnection_Connection_reportNetDisconnected_0300 Test start*************\");\n      v", ");\n      connection.reportNetDisconnected(handle, (error, data) => {\n        if (", "nnection_Connection_reportNetDisconnected_0400 Test start*************\");\n      v", "nnection_Connection_reportNetDisconnected_0300', 0, async function (done) {\n     ", ");\n      connection.reportNetDisconnected((error, data) => {\n        if (error) {", "nnection_Connection_reportNetDisconnected_0100', 0, async function (done) {\n     ", "  * @tc.name      : reportNetDisconnected\n         * @tc.desc      : Reports the ", "nnection_Connection_reportNetDisconnected_0100 Test start*************\");\n      c", "nnection_Connection_reportNetDisconnected_0400 Test end*************\");\n      don"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "reportNetDisconnected", "api_method_all": "function reportNetDisconnected(netHandle: NetHandle): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [");\n      connection.reportNetDisconnected(handle).then(() => {\n        expect().a"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "getAddressesByName", "api_method_all": "function getAddressesByName(host: string, callback: AsyncCallback<Array<NetAddress>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": ["  * @tc.name      : getAddressesByName\n         * @tc.desc      : Resolves the", "nnection_Connection_getAddressesByName_0100', 0, async function (done) {\n     ", ");\n      connection.getAddressesByName('www.test.com', (error, data) => {\n    ", "nnection_Connection_getAddressesByName_0100 Test end*************\");\n      don", "\n     * @tc.name    getAddressesByName\n     * @tc.desc    Function test\n     *", "onnection_NetHandle_getAddressesByName_0100 Test start*************\");\n      c", "nnection_Connection_getAddressesByName_0200 getAddressesByName error,case succ", "onnection_NetHandle_getAddressesByName_0100\n     * @tc.name    getAddressesByN", "onnection_NetHandle_getAddressesByName_0100', 0, async function (done) {\n     ", "onnection_NetHandle_getAddressesByName_0100 Test end*************\");\n    })\n\n ", "nnection_Connection_getAddressesByName_0100\n         * @tc.name      : getAddr", "ddressesByName_0200 getAddressesByName error,case success,error:${\n        toS", "nnection_Connection_getAddressesByName_0200 Test end*************\");\n      don", "nnection_Connection_getAddressesByName_0200\n         * @tc.name      : getAddr", "=> {\n        handle.getAddressesByName(addressBaidu, (error, value) => {\n     ", "nnection_Connection_getAddressesByName_0200 Test start*************\");\n      c", "nnection_Connection_getAddressesByName_0100 Test start*************\");\n      c", "nnection_Connection_getAddressesByName_0200', 0, async function (done) {\n     "], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "connection", "api_method_name": "getAddressesByName", "api_method_all": "function getAddressesByName(host: string): Promise<Array<NetAddress>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": [");\n      connection.getAddressesByName('www.test.com').then(data => {\n        "], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetConnection", "api_method_all": "export interface NetConnection {\n    on(type: 'netAvailable', callback: Callback<NetHandle>): void;\n\n    on(type: 'netBlockStatusChange', callback: Callback<{ netHandle: NetHandle, blocked: boolean }>): void;\n\n    on(type: 'netCapabilitiesChange', callback: Callback<{ netHandle: NetHandle, netCap: NetCapabilities }>): void;\n\n    on(type: 'netConnectionPropertiesChange', callback: Callback<{ netHandle: NetHandle, connectionProperties: ConnectionProperties }>): void;\n\n    on(type: 'netLost', callback: Callback<NetHandle>): void;\n\n    on(type: 'netUnavailable', callback: Callback<void>): void;\n\n    \n    register(callback: AsyncCallback<void>): void;\n\n    \n    unregister(callback: AsyncCallback<void>): void;\n  }", "api_method_name": "NetConnection", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 33, "since": 0, "api_used": "\u662f", "lines": ["   connection.createNetConnection(netSpecifier, TIMEO", "on_Connection_createNetConnection_0500 Test end******", " = connection.createNetConnection();\n        netConn.", "   connection.createNetConnection(8000);\n        expe", "on_Connection_createNetConnection_0300 Test end******", "   connection.createNetConnection(netSpecifier, 5000)", "on_Connection_createNetConnection_0300 Test start****", "on_Connection_createNetConnection_0500', 0, async fun", "   connection.createNetConnection(3000);\n        expe", "on_Connection_createNetConnection_0400', 0, async fun", "on_Connection_createNetConnection_0400 Test end******", "on_Connection_createNetConnection_0500 Test start****", "on_Connection_createNetConnection_0200 Test end******", " = connection.createNetConnection(netSpecifier, TIMEO", "on_Connection_createNetConnection_0100', 0, async fun", "on_Connection_createNetConnection_0100 Test end******", "on_Connection_createNetConnection_0200 Test start****", "   connection.createNetConnection(5000);\n        expe", "on_Connection_createNetConnection_0300', 0, async fun", "on_Connection_createNetConnection_0100 Test start****", "on_Connection_createNetConnection_0200', 0, async fun", "on_Connection_createNetConnection_0400 Test start****"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetConnection", "api_method_name": "on", "api_method_all": "on(type: 'netAvailable', callback: Callback<NetHandle>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 8, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetConnection", "api_method_name": "on", "api_method_all": "on(type: 'netBlockStatusChange', callback: Callback<{ netHandle: NetHandle, blocked: boolean }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 8, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetConnection", "api_method_name": "on", "api_method_all": "on(type: 'netCapabilitiesChange', callback: Callback<{ netHandle: NetHandle, netCap: NetCapabilities }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 8, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetConnection", "api_method_name": "on", "api_method_all": "on(type: 'netConnectionPropertiesChange', callback: Callback<{ netHandle: NetHandle, connectionProperties: ConnectionProperties }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 8, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetConnection", "api_method_name": "on", "api_method_all": "on(type: 'netLost', callback: Callback<NetHandle>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 8, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetConnection", "api_method_name": "on", "api_method_all": "on(type: 'netUnavailable', callback: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 8, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetConnection", "api_method_name": "register", "api_method_all": "register(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 20, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_register_0100';\n      let netSpecifier = {\n     ", "ection_Connection_unregister_0100\n     * @tc.name    unregister\n    ", "nnection_Connection_register_0100', 0, async function (done) {\n     ", "    * @tc.name    unregister\n     * @tc.desc    Cancels listening fo", ".log(`${caseName} unregister fail: ${error}`);\n        }\n      });\n ", "nnection_Connection_register_0100\n     * @tc.name    register\n     *", "nnection_Connection_register_0100 Test start*************\");\n      i", "OUT);\n      netConn.register((error) => {\n        if (error) {\n     ", "ection_Connection_unregister_0100', 0, async function (done) {\n     ", "nnection_Connection_register_0100 Test end*************\");\n    });\n\n", "ection_Connection_unregister_0100 Test start*************\");\n      i", "\n     * @tc.name    register\n     * @tc.desc    Receives status chan", "ection_Connection_unregister_0100';\n      let netSpecifier = {\n     ", "Y);\n      netConn.unregister((error) => {\n        if (error) {\n     ", "le.log(`${caseName} register fail: ${error}`);\n        }\n      });\n ", "ection_Connection_unregister_0100 Test end*************\");\n    });\n\n"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetConnection", "api_method_name": "unregister", "api_method_all": "unregister(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 10, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_unregister_0100';\n      let netSpecifier = {\n     ", "nnection_Connection_unregister_0100', 0, async function (done) {\n     ", "\n     * @tc.name    unregister\n     * @tc.desc    Cancels listening fo", "le.log(`${caseName} unregister fail: ${error}`);\n        }\n      });\n ", "nnection_Connection_unregister_0100 Test end*************\");\n    });\n\n", "LAY);\n      netConn.unregister((error) => {\n        if (error) {\n     ", "nnection_Connection_unregister_0100\n     * @tc.name    unregister\n    ", "nnection_Connection_unregister_0100 Test start*************\");\n      i"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetSpecifier", "api_method_all": "export interface NetSpecifier {\n    netCapabilities: NetCapabilities;\n    bearerPrivateIdentifier?: string;\n  }", "api_method_name": "NetSpecifier", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_NetSpecifier_0100 Test start****", "nnection_Connection_NetSpecifier_0100', 0, async fun", "\n     * @tc.name    NetSpecifier\n     * @tc.desc    ", "nnection_Connection_NetSpecifier_0100 Test end******", "nnection_Connection_NetSpecifier_0100\n     * @tc.nam"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetSpecifier", "api_method_name": "netCapabilities", "api_method_all": "netCapabilities: NetCapabilities", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 17, "since": 0, "api_used": "\u662f", "lines": ["       console.log(`netCapabilitiesChange error: ${erro", "nnection_Connection_netCapabilitiesChange_0100 Test end", "ifier = {\n          netCapabilities: {\n            link", "nnection_Connection_netCapabilitiesChange_0100\n     * @", "\n     * @tc.desc    netCapabilities bearerPrivateIdenti", "nnection_Connection_netCapabilitiesChange_0100 Test sta", "        netConn.on('netCapabilitiesChange', (error, val", "\n     * @tc.name    netCapabilitiesChange\n     * @tc.de", "nnection_Connection_netCapabilitiesChange_0100', 0, asy", "ecifier = {\n        netCapabilities: {\n          linkUp"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetSpecifier", "api_method_name": "bearerPrivateIdentifier", "api_method_all": "bearerPrivateIdentifier?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 0, "api_used": "\u662f", "lines": [" [12],\n          }, bearerPrivateIdentifier: '789'\n        }\n  ", ": [0],\n          }, bearerPrivateIdentifier: '123'\n        }\n  ", ": [9],\n          }, bearerPrivateIdentifier: '876'\n        }\n  ", ": [5],\n          }, bearerPrivateIdentifier: '321'\n        }\n  ", "    netCapabilities bearerPrivateIdentifier test\n     */\n    it", " [11],\n          }, bearerPrivateIdentifier: '456'\n        }\n  ", " [11],\n          }, bearerPrivateIdentifier: '123'\n        }\n  ", "ap: [0],\n        }, bearerPrivateIdentifier: '123'\n      }\n    "], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetHandle", "api_method_all": "export interface NetHandle {\n    netId: number;\n\n    \n    getAddressesByName(host: string, callback: AsyncCallback<Array<NetAddress>>): void;\n    getAddressesByName(host: string): Promise<Array<NetAddress>>;\n\n    \n    getAddressByName(host: string, callback: AsyncCallback<NetAddress>): void;\n    getAddressByName(host: string): Promise<NetAddress>;\n  }", "api_method_name": "NetHandle", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["le = new connection.NetHandle(NETID_IVVALID2);\n  ", "lities} of a {@link NetHandle} object.\n     */\n  ", "le = new connection.NetHandle(NETID_IVVALID);\n   ", "nnection_Connection_NetHandle_getAddressesByName_"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetHandle", "api_method_name": "getAddressesByName", "api_method_all": "getAddressesByName(host: string, callback: AsyncCallback<Array<NetAddress>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": ["  * @tc.name      : getAddressesByName\n         * @tc.desc      : Resolves the", "nnection_Connection_getAddressesByName_0100', 0, async function (done) {\n     ", ");\n      connection.getAddressesByName('www.test.com', (error, data) => {\n    ", "nnection_Connection_getAddressesByName_0100 Test end*************\");\n      don", "\n     * @tc.name    getAddressesByName\n     * @tc.desc    Function test\n     *", "onnection_NetHandle_getAddressesByName_0100 Test start*************\");\n      c", "nnection_Connection_getAddressesByName_0200 getAddressesByName error,case succ", "onnection_NetHandle_getAddressesByName_0100\n     * @tc.name    getAddressesByN", "onnection_NetHandle_getAddressesByName_0100', 0, async function (done) {\n     ", "onnection_NetHandle_getAddressesByName_0100 Test end*************\");\n    })\n\n ", "nnection_Connection_getAddressesByName_0100\n         * @tc.name      : getAddr", "ddressesByName_0200 getAddressesByName error,case success,error:${\n        toS", "nnection_Connection_getAddressesByName_0200 Test end*************\");\n      don", "nnection_Connection_getAddressesByName_0200\n         * @tc.name      : getAddr", "=> {\n        handle.getAddressesByName(addressBaidu, (error, value) => {\n     ", "nnection_Connection_getAddressesByName_0200 Test start*************\");\n      c", "nnection_Connection_getAddressesByName_0100 Test start*************\");\n      c", "nnection_Connection_getAddressesByName_0200', 0, async function (done) {\n     "], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetHandle", "api_method_name": "getAddressesByName", "api_method_all": "getAddressesByName(host: string): Promise<Array<NetAddress>>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": [");\n      connection.getAddressesByName('www.test.com').then(data => {\n        "], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetHandle", "api_method_name": "getAddressByName", "api_method_all": "getAddressByName(host: string, callback: AsyncCallback<NetAddress>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_getAddressByName_0100\n     * @tc.name    getAddressByNam", "\n     * @tc.name    getAddressByName\n     * @tc.desc    Function test\n     *", "nnection_Connection_getAddressByName_0100', 0, async function (done) {\n     ", "nnection_Connection_getAddressByName_0100 Test end*************\");\n    })\n\n ", "nnection_Connection_getAddressByName_0100 Test start*************\");\n      c", "=> {\n        handle.getAddressByName(addressBaidu, (error, value) => {\n     "], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetHandle", "api_method_name": "getAddressByName", "api_method_all": "getAddressByName(host: string): Promise<NetAddress>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NetHandle", "api_method_name": "netId", "api_method_all": "netId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_netId_0100\n         * @tc", ".stringify(value[0].netId)}`);\n          conn", "  * @tc.name      : netId\n         * @tc.desc", "nnection_Connection_netId_0100 Test start****", "  * @tc.desc      : netId test.\n         */\n ", "nnection_Connection_netId_0100 Test end******", "nnection_Connection_netId_0100', 0, async fun", "        expect(data.netId).assertEqual(100);\n"], "files": ["ConnectionJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCapabilities", "api_method_all": "export interface NetCapabilities {\n    linkUpBandwidthKbps?: number;\n    linkDownBandwidthKbps?: number;\n    networkCap?: Array<NetCap>;\n    bearerTypes: Array<NetBearType>;\n  }", "api_method_name": "NetCapabilities", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 32, "since": 0, "api_used": "\u662f", "lines": ["      connection.getNetCapabilities(value[0], (error, d", "      connection.getNetCapabilities().then(data => {\n  ", "ction_Connection_getNetCapabilities_0400\n     * @tc.nam", "   : Obtains {@link NetCapabilities} of a {@link NetHan", "      connection.getNetCapabilities((error, data) => {\n", " @tc.name      : getNetCapabilities\n     * @tc.desc    ", "      connection.getNetCapabilities(handle, (error, dat", "ction_Connection_getNetCapabilities_0200 Test end******", "ction_Connection_getNetCapabilities_0100', 0, async fun", "ction_Connection_getNetCapabilities_0300 Test end******", "ction_Connection_getNetCapabilities_0400 Test end******", "ction_Connection_getNetCapabilities_0300', 0, async fun", "ction_Connection_getNetCapabilities_0100 Test end******", "phony_connection_getNetCapabilities_Promise_1300', 0, a", "ction_Connection_getNetCapabilities_0400';\n      connec", "ction_Connection_getNetCapabilities_0400', 0, async fun", "ction_Connection_getNetCapabilities_0300 Test start****", "-------Telephony getNetCapabilities Promise Test is end", "log(`${caseName} getNetCapabilities promiss fail: ${err", "phony_connection_getNetCapabilities_Promise_1300';\n    ", "ction_Connection_getNetCapabilities_0200', 0, async fun", "ction_Connection_getNetCapabilities_0400 Test start****", "ction_Connection_getNetCapabilities_0300\n     * @tc.nam", "      connection.getNetCapabilities(handle[0]).then((da", "log(`${caseName} getNetCapabilities promiss data sucees", "ction_Connection_getNetCapabilities_0200 Test start****", "-------Telephony getNetCapabilities Promise Test is sta", "ction_Connection_getNetCapabilities_0100 Test start****"], "files": ["ConnectionJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCapabilities", "api_method_name": "linkUpBandwidthKbps", "api_method_all": "linkUpBandwidthKbps?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["\n     * @tc.name    linkUpBandwidthKbps\n     * @tc.desc    ", "ties: {\n            linkUpBandwidthKbps: 10,\n            li", "nnection_Connection_linkUpBandwidthKbps_0100', 0, async fun", "ties: {\n            linkUpBandwidthKbps: 0,\n            lin", "lities: {\n          linkUpBandwidthKbps: 0,\n          linkD", "ties: {\n            linkUpBandwidthKbps: 18,\n            li", "ties: {\n            linkUpBandwidthKbps: 1000,\n            ", "nnection_Connection_linkUpBandwidthKbps_0100 Test start****", "ties: {\n            linkUpBandwidthKbps: 41,\n            li", "\n     * @tc.desc    linkUpBandwidthKbps test\n     */\n    it", "nnection_Connection_linkUpBandwidthKbps_0100\n     * @tc.nam", "ties: {\n            linkUpBandwidthKbps: 44,\n            li", "ties: {\n            linkUpBandwidthKbps: 1,\n            lin", "lities: {\n          linkUpBandwidthKbps: 10,\n          link", "nnection_Connection_linkUpBandwidthKbps_0100 Test end******"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCapabilities", "api_method_name": "linkDownBandwidthKbps", "api_method_all": "linkDownBandwidthKbps?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["bps: 0,\n            linkDownBandwidthKbps: 0,\n            bea", "nnection_Connection_linkDownBandwidthKbps_0100', 0, async fun", "ps: 18,\n            linkDownBandwidthKbps: 29,\n            be", "hKbps: 0,\n          linkDownBandwidthKbps: 0,\n          beare", "bps: 1,\n            linkDownBandwidthKbps: 2,\n            bea", "\n     * @tc.name    linkDownBandwidthKbps\n     * @tc.desc    ", "     * @tc.desc    nlinkDownBandwidthKbps test\n     */\n    it", "nnection_Connection_linkDownBandwidthKbps_0100 Test start****", "ps: 41,\n            linkDownBandwidthKbps: 62,\n            be", "Kbps: 10,\n          linkDownBandwidthKbps: 11,\n          bear", "nnection_Connection_linkDownBandwidthKbps_0100\n     * @tc.nam", "ps: 10,\n            linkDownBandwidthKbps: 22,\n            be", ": 1000,\n            linkDownBandwidthKbps: 2000,\n            ", "nnection_Connection_linkDownBandwidthKbps_0100 Test end******", "ps: 44,\n            linkDownBandwidthKbps: 55,\n            be"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCapabilities", "api_method_name": "networkCap", "api_method_all": "networkCap?: Array<NetCap>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_networkCap_0100', 0, async fun", "s: [1],\n            networkCap: [9],\n          }, ", "s: [0],\n            networkCap: [11],\n          },", "s: [1],\n            networkCap: [0],\n          }, ", "nnection_Connection_networkCap_0100 Test start****", "\n     * @tc.name    networkCap\n     * @tc.desc    ", "\n     * @tc.desc    networkCap test\n     */\n    it", "s: [1],\n            networkCap: [12],\n          },", "nnection_Connection_networkCap_0100 Test end******", "s: [0],\n            networkCap: [0],\n          }, ", "pes: [0],\n          networkCap: [0],\n        }, be", "nnection_Connection_networkCap_0100\n     * @tc.nam", "s: [3],\n            networkCap: [5],\n          }, "], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCapabilities", "api_method_name": "bearerTypes", "api_method_all": "bearerTypes: Array<NetBearType>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 0, "api_used": "\u662f", "lines": ["\n     * @tc.desc    bearerTypes test\n     */\n    it", "nnection_Connection_bearerTypes_0100\n     * @tc.nam", "ps: 55,\n            bearerTypes: [1],\n            n", "nnection_Connection_bearerTypes_0100', 0, async fun", "nnection_Connection_bearerTypes_0100 Test end******", "\n     * @tc.name    bearerTypes\n     * @tc.desc    ", "nnection_Connection_bearerTypes_0100 Test start****", "bps: 0,\n            bearerTypes: [0],\n            n", "bps: 2,\n            bearerTypes: [0],\n            n", "ps: 22,\n            bearerTypes: [0],\n            n", "hKbps: 0,\n          bearerTypes: [0],\n          net", "ps: 62,\n            bearerTypes: [1],\n            n", "JSON.stringify(data.bearerTypes_[0].bearerType)}`);", "        expect(data.bearerTypes_[0].bearerType != \"", ": 2000,\n            bearerTypes: [1],\n            n", "ps: 29,\n            bearerTypes: [3],\n            n", "Kbps: 11,\n          bearerTypes: [0],\n          net"], "files": ["ConnectionJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCap", "api_method_all": "export enum NetCap {\n    \n    NET_CAPABILITY_MMS = 0,\n\n    \n    NET_CAPABILITY_NOT_METERED = 11,\n\n    \n    NET_CAPABILITY_INTERNET = 12,\n\n    \n    NET_CAPABILITY_NOT_VPN = 15,\n\n    \n    NET_CAPABILITY_VALIDATED = 16,\n  }", "api_method_name": "NetCap", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 50, "since": 0, "api_used": "\u662f", "lines": ["Cap: \" + connection.NetCap);\n        expect(0)", " @tc.name      : getNetCapabilities\n     * @tc", "ction_Connection_getNetCapabilities_0400', 0, ", "ction_Connection_getNetCapabilities_0300', 0, ", "ction_Connection_getNetCapabilities_0300 Test ", "nection_NetCap_0900 NetCap: \" + connection.Net", "-------Telephony getNetCapabilities Promise Te", "ction_Connection_getNetCapabilities_0200 Test ", "ction_Connection_getNetCapabilities_0400\n     ", "      connection.getNetCapabilities(handle[0])", "-------Telephony getNetCap Test is starting---", "      connection.getNetCapabilities().then(dat", "ertEqual(connection.NetCap.NET_CAPABILITY_INTE", "ction_Connection_getNetCapabilities_0100', 0, ", "elephony_connection_NetCap_0900 NetCap: \" + co", "ertEqual(connection.NetCap.NET_CAPABILITY_VALI", "elephony_connection_NetCap_0900 err ` + err);\n", "   : Obtains {@link NetCapabilities} of a {@li", "ction_Connection_getNetCapabilities_0100 Test ", "      connection.getNetCapabilities(value[0], ", "ertEqual(connection.NetCap.NET_CAPABILITY_MMS)", "phony_connection_getNetCapabilities_Promise_13", "phony_connection_getNetCap_Async_1000', 0, asy", "ction_Connection_getNetCapabilities_0300\n     ", "}  get value successNetCap: ${JSON.stringify(d", "log(`${caseName} getNetCapabilities promiss fa", "-------Telephony getNetCap Test is end--------", "log(`${caseName} getNetCapabilities promiss da", "----------Telephony NetCap Properties Test is ", "elephony_connection_NetCap_0900\", 0, async fun", "phony_connection_getNetCap_Async_1000';\n      ", "----------Telephony NetCap Properties Test end", "ction_Connection_getNetCapabilities_0400';\n   ", "ction_Connection_getNetCapabilities_0400 Test ", "ertEqual(connection.NetCap.NET_CAPABILITY_NOT_", "      connection.getNetCapabilities((error, da", "ction_Connection_getNetCapabilities_0200', 0, ", "      connection.getNetCapabilities(handle, (e"], "files": ["ConnectionJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCap", "api_method_name": "NET_CAPABILITY_MMS", "api_method_all": "NET_CAPABILITY_MMS = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["l(connection.NetCap.NET_CAPABILITY_MMS);\n        expect(11"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCap", "api_method_name": "NET_CAPABILITY_NOT_METERED", "api_method_all": "NET_CAPABILITY_NOT_METERED = 11,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["l(connection.NetCap.NET_CAPABILITY_NOT_METERED);\n        expect(12"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCap", "api_method_name": "NET_CAPABILITY_INTERNET", "api_method_all": "NET_CAPABILITY_INTERNET = 12,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["l(connection.NetCap.NET_CAPABILITY_INTERNET);\n        expect(15"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCap", "api_method_name": "NET_CAPABILITY_NOT_VPN", "api_method_all": "NET_CAPABILITY_NOT_VPN = 15,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["l(connection.NetCap.NET_CAPABILITY_NOT_VPN);\n        expect(16"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetCap", "api_method_name": "NET_CAPABILITY_VALIDATED", "api_method_all": "NET_CAPABILITY_VALIDATED = 16,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["l(connection.NetCap.NET_CAPABILITY_VALIDATED);\n        console.l"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetBearType", "api_method_all": "export enum NetBearType {\n    \n    BEARER_CELLULAR = 0,\n\n    \n    BEARER_WIFI = 1,\n\n    \n    BEARER_ETHERNET = 3,\n  }", "api_method_name": "NetBearType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["ertEqual(connection.NetBearType.BEARER_ETHERNET);\n ", "-------Telephony getNetBearType Test is end--------", "-------Telephony getNetBearType Test is starting---", "----------Telephony NetBearType Properties Test is ", "phony_connection_getNetBearType_Async_1200', 0, asy", "elephony_connection_NetBearType_1100 err ` + err);\n", "ertEqual(connection.NetBearType.BEARER_WIFI);\n     ", "elephony_connection_NetBearType_1100 NetBearType: \"", "on_NetBearType_1100 NetBearType: \" + connection.Net", "ertEqual(connection.NetBearType.BEARER_CELLULAR);\n ", "ype: \" + connection.NetBearType);\n        expect(0)", "elephony_connection_NetBearType_1100\", 0, async fun", "----------Telephony NetBearType Properties Test end", "phony_connection_getNetBearType_Async_1200';\n      "], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetBearType", "api_method_name": "BEARER_CELLULAR", "api_method_all": "BEARER_CELLULAR = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["nection.NetBearType.BEARER_CELLULAR);\n        expect(1)"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetBearType", "api_method_name": "BEARER_WIFI", "api_method_all": "BEARER_WIFI = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["nection.NetBearType.BEARER_WIFI);\n        expect(3)"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetBearType", "api_method_name": "BEARER_ETHERNET", "api_method_all": "BEARER_ETHERNET = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["nection.NetBearType.BEARER_ETHERNET);\n        console.l"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnectionProperties", "api_method_all": "export interface ConnectionProperties {\n    interfaceName: string;\n    domains: string;\n    linkAddresses: Array<LinkAddress>;\n    dnses: Array<NetAddress>;\n    routes: Array<RouteInfo>;\n    mtu: number;\n  }", "api_method_name": "ConnectionProperties", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 38, "since": 0, "api_used": "\u662f", "lines": ["ction_Connection_getConnectionProperties_0100 Test start****", "ction_Connection_getConnectionProperties_0400  get value suc", "ction_Connection_netConnectionPropertiesChange_0100 Test sta", "-------Telephony getConnectionProperties Test end-----------", "elephony_connection_ConnectionProperties_0100\", 0, function ", "ction_Connection_getConnectionProperties_0400 Test end******", "     netConn.on('netConnectionPropertiesChange', (error, val", "ction_Connection_getConnectionProperties_0400 Test start****", "      connection.getConnectionProperties(handle, (error, dat", "      connection.getConnectionProperties(value[0], (error, v", "ction_Connection_getConnectionProperties_0400', 0, async fun", "ction_Connection_getConnectionProperties_0300 Test start****", "----------Telephony ConnectionProperties Test is starting---", "-------Telephony getConnectionProperties Test is starting---", "ction_Connection_getConnectionProperties_0100', 0, async fun", "ction_Connection_netConnectionPropertiesChange_0100\n     * @", "      connection.getConnectionProperties().then(data => {\n  ", "ction_Connection_netConnectionPropertiesChange_0100', 0, asy", "ction_Connection_getConnectionProperties_0300 Test end******", "ction_Connection_getConnectionProperties_0200 Test start****", "ction_Connection_netConnectionPropertiesChange_0100 Test end", "elephony_connection_ConnectionProperties_0100';\n      try {\n", "ction_Connection_getConnectionProperties_0100 Test end******", "ction_Connection_getConnectionProperties_0300', 0, async fun", "phony_connection_getConnectionProperties_Async_0200', 0, asy", "----------Telephony ConnectionProperties Test end-----------", "   * @tc.name    netConnectionPropertiesChange\n     * @tc.de", "phony_connection_getConnectionProperties_Async_0200';\n      ", "    console.log(`netConnectionPropertiesChange error: ${erro", "ction_Connection_getConnectionProperties_0200 Test end******", "      connection.getConnectionProperties((error, data) => {\n", "sole.log(`Telephony_ConnectionProperties_0100 err ` + err);\n", "ction_Connection_getConnectionProperties_0200', 0, async fun"], "files": ["ConnectionJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnectionProperties", "api_method_name": "interfaceName", "api_method_all": "interfaceName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ertEqual(resultName.interfaceName);\n        expect(12", "tName = {\n          interfaceName: '123'\n        };\n "], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnectionProperties", "api_method_name": "domains", "api_method_all": "domains: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["  * @tc.name      : domains\n         * @tc.desc", "        expect(data.domains).assertEqual(\"\");\n ", "nnection_Connection_domains_0100 Test start****", "  * @tc.desc      : domains test.\n         */\n ", "nnection_Connection_domains_0100', 0, async fun", "nnection_Connection_domains_0100 Test end******", "nnection_Connection_domains_0100\n         * @tc"], "files": ["ConnectionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnectionProperties", "api_method_name": "linkAddresses", "api_method_all": "linkAddresses: Array<LinkAddress>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["resultLinkAddresses.linkAddresses.length > 0).assertT", "resultLinkAddresses.linkAddresses.length);\n        co", "resultLinkAddresses.linkAddresses.length: ` + resultL", "esses = {\n          linkAddresses: [{\n               "], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnectionProperties", "api_method_name": "dnses", "api_method_all": "dnses: Array<NetAddress>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["Dnses = {\n          dnses: [{\n               ", " expect(resultDnses.dnses.length > 0).assertT", "th: ` + resultDnses.dnses.length);\n        co", "ame + ` resultDnses.dnses.length: ` + resultD"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnectionProperties", "api_method_name": "routes", "api_method_all": "routes: Array<RouteInfo>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["me + ` resultRoutes.routes.length: ` + resultR", "expect(resultRoutes.routes.length > 0).assertT", "h: ` + resultRoutes.routes.length);\n        ex", "outes = {\n          routes: [{\n               "], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnectionProperties", "api_method_name": "mtu", "api_method_all": "mtu: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["ltMtu = {\n          mtu: 123\n        };\n   ", "sertEqual(resultMtu.mtu);\n        console.l", "       expect(value.mtu == 0).assertTrue();", "le.log(caseName + \" mtu: \" + value.mtu);\n  ", " + \" mtu: \" + value.mtu);\n              con"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RouteInfo", "api_method_all": "export interface RouteInfo {\n    interface: string;\n    destination: LinkAddress;\n    gateway: NetAddress;\n    hasGateway: boolean;\n    isDefaultRoute: boolean;\n  }", "api_method_name": "RouteInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["--------------------RouteInfo Properties Test end", "elephony_connection_RouteInfo_0300 err ` + err);\n", "--------------------RouteInfo Properties Test is ", "elephony_connection_RouteInfo_0300\", 0, async fun", "phony_connection_getRouteInfo_Async_0400', 0, asy", "-------Telephony getRouteInfo Test is starting---", "phony_connection_getRouteInfo_Async_0400';\n      ", "-------Telephony getRouteInfo Test end-----------"], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RouteInfo", "api_method_name": "interface", "api_method_all": "interface: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 95, "since": 0, "api_used": "\u662f", "lines": ["    Set the network interface to an Ethernet inte", "To test the getIMSI interface, enter slotid as 4 ", ", and the unlockPuk interface is tested.\n    *   ", " fuzzy search query interface (mailbox)\n     * @t", "etDefaultVoiceLotid interface to get the SIM ID.\n", "e, and the alterPin interface. SlotId is abnormal", "ellularDataSlotId() interface, set the default ca", " fuzzy search query interface (name)\n     * @tc.d", " fuzzy search query interface (name pinyin, pinyi", "    Set the network interface to cellular,\n     *", "ccId async callback interface slotId\n   *        ", " fuzzy search query interface (nickname)\n     * @", "tate async callback interface\n   *            slo", " fuzzy search query interface (AIM)\n     * @tc.de", "    Set the network interface to a nonexistent on", "etDefaultVoiceLotid interface to get the default ", "CellularDataRoaming interface, setting parameters", "ertEqual(resultName.interfaceName);\n        expec", " fuzzy search query interface (company, position)", "e, and the alterPin interface is tested. SlotId i", "face to an Ethernet interface,\n     *            ", "tName = {\n          interfaceName: '123'\n        ", "ellularDataSlotId() interface and verify whether ", "etLockState promise interface\n   *            slo", " fuzzy search query interface (residential)\n     ", " fuzzy search query interface (mobile phone numbe", "name    Set network interface to WIFI network int", " fuzzy search query interface (remarks)\n     * @t", "ace to WIFI network interface,\n     *            ", "tate, the unlockPin interface is tested, and slot", "getSimIccId promise interface slotId\n   *        "], "files": ["CellularDataAbnorma.test.js", "Contacts_test.js", "ContactCard_test.js", "SimManager.test.js", "ConnectionSecondJsUnit.test.ets", "StatisticsJsunit.test.ets", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RouteInfo", "api_method_name": "destination", "api_method_all": "destination: LinkAddress", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["UE_SLOT_ID,\n        destinationHost: SMS_SEND_DST_N", "ontent: 'hello',\n\t  destinationPort: 0,\n      sendC", "ALSE_SLOT_ID,\n      destinationHost: SMS_SEND_DST_N"], "files": ["SmsMmsError.test.js", "SmsMmsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RouteInfo", "api_method_name": "gateway", "api_method_all": "gateway: NetAddress", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["                    gateway: {\n                "], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RouteInfo", "api_method_name": "hasGateway", "api_method_all": "hasGateway: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["al(resultHasGateway.hasGateway);\n        console.l", "(value.routeList[0].hasGateway).assertTrue();\n    ", "teway = {\n          hasGateway: true\n        };\n  "], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RouteInfo", "api_method_name": "isDefaultRoute", "api_method_all": "isDefaultRoute: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["Route = {\n          isDefaultRoute: true\n        };\n  ", "(resultDefaultRoute.isDefaultRoute);\n        expect(tr", "(value.routeList[0].isDefaultRoute).assertTrue();\n    "], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LinkAddress", "api_method_all": "export interface LinkAddress {\n    address: NetAddress;\n    prefixLength: number;\n  }", "api_method_name": "LinkAddress", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["elephony_connection_LinkAddress_0500 err ` + err);\n", "phony_connection_getLinkAddress_Async_0600', 0, asy", "--------------------LinkAddress Properties Test end", "elephony_connection_LinkAddress_0500\", 0, async fun", "-------Telephony getLinkAddress Test is starting---", "-------Telephony getLinkAddress Test end-----------", "s.length: ` + resultLinkAddresses.linkAddresses.len", "phony_connection_getLinkAddress_Async_0600';\n      ", "       expect(resultLinkAddresses.linkAddresses.len", "(caseName + ` resultLinkAddresses.linkAddresses.len", "{\n        let resultLinkAddresses = {\n          lin", "--------------------LinkAddress Properties Test is "], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LinkAddress", "api_method_name": "address", "api_method_all": "address: NetAddress", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 138, "since": 0, "api_used": "\u662f", "lines": ["                    address: {\n                ", "     address: \"test address\",\n        family: 1", "contact_data postal_address insert error = \" + ", "me to obtain all IP addresses based on the defa", "                    address: \"192.168.1.3\"\n    ", "     : Binds the IP address and port number.\n  ", "le.getAddressByName(addressBaidu, (error, value", "dress: \"second test address\"\n      }\n      sock", "tent_type\": \"postal_address\",\n                \"", "Address = {\n        address: \"second test addre", "test data\",\n        address: {\n          addres", "     address: \"test address\",\n        family: '", "s.address === \"test address\").assertTrue()\n    ", " = 1 data is postal_address\n            conditi", "                    address: \"192.168.1.2\"\n    ", "ddress: {\n          address: \"test address\",\n  ", "  expect(netAddress.address === \"test address\")", "wContactId, \"postal_address\", \"dddd\", \"\");\n    ", "Options = {\n        address: {\n          addres", "                    address: \"192.168.1.1\"\n    ", ".getAddressesByName(addressBaidu, (error, value", "_data in batches of address book\n     * @tc.des", "tent_type\": \"postal_address\",\n                 ", "Address = {\n        address: \"test address\",\n  ", "oteInfo = {\n        address: \"test address\",\n  ", "     address: \"test address\",\n          family:"], "files": ["ConnectionJsunit.test.ets", "SmsMmsJsunit.test.ets", "SocketJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "ConnectionSecondJsUnit.test.ets", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LinkAddress", "api_method_name": "prefixLength", "api_method_all": "prefixLength: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["(resultPrefixLength.prefixLength);\n        console.l", "ct(value.dnsList[0].prefixLength != 0).assertTrue();", "ength = {\n          prefixLength: 10\n        };\n    "], "files": ["ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetAddress", "api_method_all": "export interface NetAddress {\n    address: string;\n    family?: number; // IPv4 = 1; IPv6 = 2, default is IPv4\n    port?: number; // [0, 65535]\n  }", "api_method_name": "NetAddress", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 20, "since": 0, "api_used": "\u662f", "lines": ["phony_Socket_Socket_NetAddress_0100 Test start****", "phony_connection_getNetAddress_Async_0800', 0, asy", "phony_connection_getNetAddress_Async_0800';\n      ", "-------Telephony getNetAddress Test is starting---", "phony_Socket_Socket_NetAddress_0100 Test end******", "-------Telephony getNetAddress Test end-----------", "phony_Socket_Socket_NetAddress_0100', 0, async fun", " netAddress: socket.NetAddress = {\n        address", "--------------------NetAddress Properties  Test is", "--------------------NetAddress Properties  Test en", "elephony_connection_NetAddress_0700\", 0, async fun", "elephony_connection_NetAddress_0700 err ` + err);\n"], "files": ["SocketJsunit.test.ets", "ConnectionSecondJsUnit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetAddress", "api_method_name": "address", "api_method_all": "address: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 138, "since": 0, "api_used": "\u662f", "lines": ["                    address: {\n                ", "     address: \"test address\",\n        family: 1", "contact_data postal_address insert error = \" + ", "me to obtain all IP addresses based on the defa", "                    address: \"192.168.1.3\"\n    ", "     : Binds the IP address and port number.\n  ", "le.getAddressByName(addressBaidu, (error, value", "dress: \"second test address\"\n      }\n      sock", "tent_type\": \"postal_address\",\n                \"", "Address = {\n        address: \"second test addre", "test data\",\n        address: {\n          addres", "     address: \"test address\",\n        family: '", "s.address === \"test address\").assertTrue()\n    ", " = 1 data is postal_address\n            conditi", "                    address: \"192.168.1.2\"\n    ", "ddress: {\n          address: \"test address\",\n  ", "  expect(netAddress.address === \"test address\")", "wContactId, \"postal_address\", \"dddd\", \"\");\n    ", "Options = {\n        address: {\n          addres", "                    address: \"192.168.1.1\"\n    ", ".getAddressesByName(addressBaidu, (error, value", "_data in batches of address book\n     * @tc.des", "tent_type\": \"postal_address\",\n                 ", "Address = {\n        address: \"test address\",\n  ", "oteInfo = {\n        address: \"test address\",\n  ", "     address: \"test address\",\n          family:"], "files": ["ConnectionJsunit.test.ets", "SmsMmsJsunit.test.ets", "SocketJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "ConnectionSecondJsUnit.test.ets", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetAddress", "api_method_name": "family", "api_method_all": "family?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 33, "since": 0, "api_used": "\u662f", "lines": ["    \"family_name\": \"family_name\",\n            ", "t address\",\n        family: 3,\n        port: 8", "amilyNamePhonetic: \"familyNamePhonetic\",\n     ", "address\",\n          family: 1,\n          port:", "t address\",\n        family: 'IPv4',\n        po", "    \"family_name\": \"family_name1\",\n           ", "  expect(netAddress.family === 1).assertTrue()", "t address\",\n        family: 1,\n        port: 8", "sCai\",\n            \"family_name\": \"family_name", ": {\n                familyName: \"familyName\",\n", "cai1\",\n            \"family_name\": \"family_name", "], [\"family_name\", \"family_name8\"],\n          ", "    \"family_name\": \"family_name8\",\n           ", "e\",\n                familyNamePhonetic: \"famil", "], [\"family_name\", \"family_name\"],\n           ", "       familyName: \"familyName\",\n             ", "fo\", \"xiaocai1\"], [\"family_name\", \"family_name", "], [\"family_name\", \"family_name1\"],\n          ", "nfo\", \"BossCai\"], [\"family_name\", \"family_name", "ocai\",\n            \"family_name\": \"family_name", "nfo\", \"xiaocai\"], [\"family_name\", \"family_name"], "files": ["SocketJsunit.test.ets", "common.js", "ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetAddress", "api_method_name": "port", "api_method_all": "port?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 933, "since": 0, "api_used": "\u662f", "lines": ["", " '@system.device'\nimport router from '@syste", "ephony.observer';\nimport {describe, afterAll", "rom './Const.js';\nimport {toString} from './", "'./lib/Const.js';\nimport {toString} from './", "me/regenerator')\n\nexport default {\n    data:", "NUS_VALUE = -100;\nexport const TEST_RELY_NUM", "ace test function\nexport async function apiT", "NUMBER = '10010';\nexport const AUTO_ACCEPT_N", "ApiToPromise.js';\nimport {TEST_RELY_NUMBER} ", "rom '@system.app'\nimport device from '@syste", "t for Reliability\nexport const TEST_PERF_COU", "SWORD = '000001';\nexport const ERROR_PASSWOR", "ATUS_DIALING = 2;\nexport const CALL_STATUS_A", ", '10000000002'];\nexport const NULL_PHONE_NU", " = 'abcdefghijk';\nexport const BOUNDARY_NUMB", "INT = 2147483649;\nexport const MINUS_BOUNDAR", "UMBER2 = '10010';\nexport const PHONE_NUMBER_", " ['10000000001'];\nexport const PHONE_LIST2 =", "ity test function\nexport async function apiT", "= '089800000000';\nexport const PHONE_NUMBER_", "E_MAIL = '12599';\nexport const PHONE_NUMBER_", "ERF_COUNT * 0.5;\n\nexport const CALL_STATUS_A", "rn data;\n    }\n}\n\nexport function promisify ", " '@system.router'\nimport {Core, ExpectExtend", "_8 = '86459751';\n\nexport const PHONE_NUMBER_", "st < perfTime);\n}\nexport function validate (", "flag}`);\n    }\n}\n\nexport async function apiT", " = '10000000001';\nexport const PHONE_NUMBER_", "789012345678901';\nexport const CALL_EMERGENC", "789012345678901';\nexport const EMERGENCY_NUM", "unt for Perfomace\nexport const PERF_GOAL_TIM", "TATUS_ACTIVE = 0;\nexport const CALL_STATUS_H", "HONE_NUMBER = '';\nexport const SPECIA_CHAR_N", ".telephony.call';\nimport observer from '@oho", "eccjsunit/index';\nimport {\n    AUTO_ACCEPT_N", "ATUS_HOLDING = 1;\nexport const CALL_STATUS_D", "om '@system.file'\nimport app from '@system.a", "ApiToPromise.js';\nimport {\n    scenceInCalli", "Y_NUMBER = '112';\nexport const RIGHT_PASSWOR", " = '\"=#$%^&*()+';\nexport const PHONE_NUMBER_", "NT = -2147483649;\nexport const MINUS_VALUE =", "LL_EMERGENCY = 2;\nexport const PHONE_LIST = "], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "ScenceLimitCalling.js", "Stack.ets", "HttpJsunit.test.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "app.js", "ConnectionSecondJsUnit.test.ets", "recovery_test.js", "ConvertOptionsJsunit.test.ets", "common.js", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "SimManager.test.js", "Voicemail_test.js", "ScenceTransfer.js", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "index.ets", "ApiToPromisePerfomance.js", "Divider.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "ApiToPromiseReliability.js"], "is_white": " ", "desc": " "}]}