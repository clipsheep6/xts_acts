{"subsystem_ch": "\u542f\u52a8\u6062\u590d\u5b50\u7cfb\u7edf", "subsystem_en": "startup", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.deviceInfo", "api": [{"api_class_name": "deviceInfo", "api_method_all": "declare namespace deviceInfo {\n     \n    const deviceType: string;\n\n    \n    const manufacture: string;\n\n    \n    const brand: string;\n\n    \n    const marketName: string;\n\n    \n    const productSeries: string;\n\n    \n    const productModel: string;\n\n    \n    const softwareModel: string;\n\n    \n    const hardwareModel: string;\n\n    \n    const hardwareProfile: string;\n\n    \n    const serial: string;\n\n    \n    const bootloaderVersion: string;\n\n    \n    const abiList: string;\n\n    \n    const securityPatchTag: string;\n\n    \n    const displayVersion: string;\n\n    \n    const incrementalVersion: string;\n\n    \n    const osReleaseType: string;\n\n    \n    const osFullName: string;\n\n    \n    const majorVersion: number;\n\n    \n    const seniorVersion: number;\n\n    \n    const featureVersion: number;\n\n    \n    const buildVersion: number;\n\n    \n    const sdkApiVersion: number;\n\n    \n    const firstApiVersion: number;\n\n    \n    const versionId: string;\n\n    \n    const buildType: string;\n\n    \n    const buildUser: string;\n\n    \n    const buildHost: string;\n\n    \n    const buildTime: string;\n\n    \n    const buildRootHash: string;\n    \n    const udid: string;\n\n}", "api_method_name": "deviceInfo", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["iceinfo from '@ohos.deviceInfo'\n\ndescribe('DeviceI"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "deviceType", "api_method_all": "const deviceType: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 18, "since": 6, "api_used": "\u662f", "lines": ["\n\n        let len = deviceTypeInfo.length;\n       ", "e of the deviceinfo deviceType is :' + deviceTypeI", "o('the value of the deviceType is :' + deviceTypeI", " deviceType is :' + deviceTypeInfo);\n\n        let ", "ring');\n        if (deviceTypeInfo != \"\" && device", " false;\n        let deviceTypeInfo = deviceinfo.de", "o deviceType is:' + deviceTypeInfo);\n\n        let ", "e of the deviceinfo deviceType is:' + deviceTypeIn", "peInfo = deviceinfo.deviceType;\n        console.in", "\n\n        let len = deviceTypeInfo.length\n\n       ", "ceTypeInfo != \"\" && deviceTypeInfo != null && devi", "o);\n\n        expect(deviceTypeInfo).assertInstance", "TypeInfo != null && deviceTypeInfo != undefined) {", "tart');\n        let deviceTypeInfo = deviceinfo.de", " deviceType is :' + deviceTypeInfo);\n\n        expe"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "manufacture", "api_method_all": "const manufacture: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 28, "since": 6, "api_used": "\u662f", "lines": ["fo);\n        expect(manufactureInfo).assertInstance", "reInfo = deviceinfo.manufacture;\n        console.in", "ring');\n        if (manufactureInfo != \"\" && manufa", "art');\n\n        let manufactureInfo = deviceinfo.ma", ";\n        let arr = manufactureInfo.match(str);\n   ", "factureInfo is :' + manufactureInfo);\n        expec", "tr);\n        expect(manufactureInfo).assertEqual(bu", "actureInfo != \"\" && manufactureInfo != null && manu", "o('the value of the manufacture characters is :' + ", "\n\n        let len = manufactureInfo.length\n        ", ");\n          expect(manufactureInfo).assertEqual(bu", "o('the value of the manufactureInfo is :' + manufac", "tart');\n        let manufactureInfo = deviceinfo.ma", "e of the deviceinfo manufacture is :' + manufacture", "tureInfo != null && manufactureInfo != undefined) {", "manufacture is :' + manufactureInfo);\n\n        let ", "ng representing the manufacture which has a maximum", "ng representing the manufacture which has at least ", "          let arr = manufactureInfo.match(str);\n   "], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "brand", "api_method_all": "const brand: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 24, "since": 6, "api_used": "\u662f", "lines": ["value of the device brand is :' + brandInfo);", "ndInfo = deviceinfo.brand;\n        console.in", "          let arr = brandInfo.match(str);\n   ", "\n\n        let len = brandInfo.length\n        ", "randInfo != null && brandInfo != undefined) {", "art');\n\n        let brandInfo = deviceinfo.br", "e of the deviceinfo brand is :' + brandInfo);", "\n\n        let len = brandInfo.length;\n       ", "einfo brand is :' + brandInfo);\n\n        let ", "tr);\n        expect(brandInfo).assertEqual(bu", "(brandInfo != \"\" && brandInfo != null && bran", ";\n        let arr = brandInfo.match(str);\n   ", "o);\n\n        expect(brandInfo).assertInstance", "tart');\n        let brandInfo = deviceinfo.br", "ring');\n        if (brandInfo != \"\" && brandI", ");\n          expect(brandInfo).assertEqual(bu", "evice brand is :' + brandInfo);\n\n        expe"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "marketName", "api_method_all": "const marketName: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 18, "since": 6, "api_used": "\u662f", "lines": ["NameInfo != null && marketNameInfo != undefined) {", "meInfo = deviceinfo.marketName;\n        console.in", "o);\n\n        expect(marketNameInfo).assertInstance", "etNameInfo != \"\" && marketNameInfo != null && mark", " false;\n        let marketNameInfo = deviceinfo.ma", "\n\n        let len = marketNameInfo.length;\n       ", "ring');\n        if (marketNameInfo != \"\" && market", "tart');\n        let marketNameInfo = deviceinfo.ma", " marketName is :' + marketNameInfo);\n\n        let ", "e of the deviceinfo marketName is :' + marketNameI", " marketName is :' + marketNameInfo);\n\n        expe", "\n\n        let len = marketNameInfo.length\n        "], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "productSeries", "api_method_all": "const productSeries: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 24, "since": 6, "api_used": "\u662f", "lines": ["art');\n\n        let productSeriesInfo = deviceinfo.pr", ";\n        let arr = productSeriesInfo.match(str);\n   ", ");\n          expect(productSeriesInfo).assertEqual(bu", "tart');\n        let productSeriesInfo = deviceinfo.pr", "e of the deviceinfo productSeries is :' + productSeri", "oductSeries is :' + productSeriesInfo);\n\n        expe", "oductSeries is :' + productSeriesInfo);\n\n        let ", ";\n        let len = productSeriesInfo.length\n        ", "SeriesInfo != \"\" && productSeriesInfo != null && prod", "\n\n        let arr = productSeriesInfo.match(str);\n   ", " of the deviceinfo  productSeries is :' + productSeri", "tr);\n        expect(productSeriesInfo).assertEqual(bu", "riesInfo != null && productSeriesInfo != undefined) {", "esInfo = deviceinfo.productSeries;\n        console.in", "          let arr = productSeriesInfo.match(str);\n   ", "ring');\n        if (productSeriesInfo != \"\" && produc", "\n\n        let len = productSeriesInfo.length;\n       ", "o);\n\n        expect(productSeriesInfo).assertInstance"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "productModel", "api_method_all": "const productModel: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 18, "since": 6, "api_used": "\u662f", "lines": ["e of the deviceinfo productModel is :' + productMode", "elInfo = deviceinfo.productModel;\n        console.in", "\n\n        let len = productModelInfo.length\n        ", "roductModel is :' + productModelInfo);\n\n        expe", "ring');\n        if (productModelInfo != \"\" && produc", " false;\n        let productModelInfo = deviceinfo.pr", "odelInfo != null && productModelInfo != undefined) {", "tart');\n        let productModelInfo = deviceinfo.pr", "o);\n\n        expect(productModelInfo).assertInstance", "roductModel is :' + productModelInfo);\n\n        let ", "tModelInfo != \"\" && productModelInfo != null && prod"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "softwareModel", "api_method_all": "const softwareModel: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 24, "since": 6, "api_used": "\u662f", "lines": ["ring');\n        if (softwareModelInfo != \"\" && softwa", "art');\n\n        let softwareModelInfo = deviceinfo.so", "          let arr = softwareModelInfo.match(str);\n   ", "e of the deviceinfo softwareModel is :' + softwareMod", "ftwareModel is :' + softwareModelInfo);\n\n        let ", ";\n        let arr = softwareModelInfo.match(str);\n   ", "\n\n        let len = softwareModelInfo.length\n        ", "elInfo = deviceinfo.softwareModel;\n        console.in", "eModelInfo != \"\" && softwareModelInfo != null && soft", "odelInfo != null && softwareModelInfo != undefined) {", ");\n          expect(softwareModelInfo).assertEqual(bu", "o);\n\n        expect(softwareModelInfo).assertInstance", "ftwareModel is :' + softwareModelInfo);\n\n        expe", "tart');\n        let softwareModelInfo = deviceinfo.so", "tr);\n        expect(softwareModelInfo).assertEqual(bu"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "hardwareModel", "api_method_all": "const hardwareModel: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 24, "since": 6, "api_used": "\u662f", "lines": ["odelInfo != null && hardwareModelInfo != undefined) {", "tart');\n        let hardwareModelInfo = deviceinfo.ha", "o);\n\n        expect(hardwareModelInfo).assertInstance", "eModelInfo != \"\" && hardwareModelInfo != null && hard", ";\n        let arr = hardwareModelInfo.match(str);\n   ", "ring');\n        if (hardwareModelInfo != \"\" && hardwa", "\n\n        let len = hardwareModelInfo.length;\n       ", "elInfo = deviceinfo.hardwareModel;\n        console.in", "art');\n\n        let hardwareModelInfo = deviceinfo.ha", "          let arr = hardwareModelInfo.match(str);\n   ", ");\n          expect(hardwareModelInfo).assertEqual(bu", "e of the deviceinfo hardwareModel is :' + hardwareMod", "tr);\n        expect(hardwareModelInfo).assertEqual(bu", "rdwareModel is :' + hardwareModelInfo);\n\n        expe", "rdwareModel is :' + hardwareModelInfo);\n\n        let "], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "hardwareProfile", "api_method_all": "const hardwareProfile: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 24, "since": 6, "api_used": "\u662f", "lines": ["art');\n\n        let hardwareProfileInfo = deviceinfo.ha", ";\n        let arr = hardwareProfileInfo.match(str);\n   ", "          let arr = hardwareProfileInfo.match(str);\n   ", ");\n          expect(hardwareProfileInfo).assertEqual(bu", "o);\n\n        expect(hardwareProfileInfo).assertInstance", "fileInfo != null && hardwareProfileInfo != undefined) {", "leInfo = deviceinfo.hardwareProfile;\n        console.in", "ring');\n        if (hardwareProfileInfo != \"\" && hardwa", "wareProfile is :' + hardwareProfileInfo);\n\n        let ", "tr);\n        expect(hardwareProfileInfo).assertEqual(bu", "e of the deviceinfo hardwareProfile is :' + hardwarePro", "tart');\n        let hardwareProfileInfo = deviceinfo.ha", ";\n        let len = hardwareProfileInfo.length;\n       ", "\n\n        let len = hardwareProfileInfo.length;\n       ", "rofileInfo != \"\" && hardwareProfileInfo != null && hard", "wareProfile is :' + hardwareProfileInfo);\n\n        expe", "\n\n        let arr = hardwareProfileInfo.match(str);\n   "], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "serial", "api_method_all": "const serial: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 32, "since": 6, "api_used": "\u662f", "lines": ["tr);\n        expect(serialInfo).assertEqual(bu", "ring');\n        if (serialInfo != \"\" && serial", "esenting the device serial number which has a ", "alInfo = deviceinfo.serial;\n        console.in", "serialInfo != \"\" && serialInfo != null && seri", "tart');\n        let serialInfo = deviceinfo.se", "value of the device serial number characters i", "o);\n\n        expect(serialInfo).assertInstance", "rialInfo != null && serialInfo != undefined) {", "info serial is :' + serialInfo);\n\n        expe", "e of the deviceinfo serial is :' + serialInfo)", "\n\n        let len = serialInfo.length;\n       ", "esenting the device serial number which has at", "info serial is :' + serialInfo);\n\n        let ", ";\n        let arr = serialInfo.match(str);\n   ", "art');\n\n        let serialInfo = deviceinfo.se"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "bootloaderVersion", "api_method_all": "const bootloaderVersion: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 10, "since": 6, "api_used": "\u662f", "lines": ["o);\n\n        expect(bootloaderVersionInfo).assertInstance", "onInfo = deviceinfo.bootloaderVersion;\n        console.in", "e of the deviceinfo bootloaderVersion is :' + bootloaderV", "ring');\n        if (bootloaderVersionInfo != \"\" && bootlo", "ersionInfo != \"\" && bootloaderVersionInfo != null && boot", "          let arr = bootloaderVersionInfo.match(str);\n   ", "sionInfo != null && bootloaderVersionInfo != undefined) {", ");\n          expect(bootloaderVersionInfo).assertEqual(bu", "art');\n\n        let bootloaderVersionInfo = deviceinfo.bo", "aderVersion is :' + bootloaderVersionInfo);\n\n        expe"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "abiList", "api_method_all": "const abiList: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["stInfo = deviceinfo.abiList;\n        console.in", "art');\n\n        let abiListInfo = deviceinfo.ab", "onsole.info('testGetabiList01 \uff1aend');\n    })\n\n ", ");\n          expect(abiListInfo).assertEqual(bu", "          let arr = abiListInfo.match(str);\n   ", "ring');\n        if (abiListInfo != \"\" && abiLis", "onsole.info('testGetabiList01 start');\n\n       ", "ListInfo != null && abiListInfo != undefined) {", "o);\n\n        expect(abiListInfo).assertInstance", "e of the deviceinfo abiList is :' + abiListInfo", "biListInfo != \"\" && abiListInfo != null && abiL", "nfo abiList is :' + abiListInfo);\n\n        expe"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "securityPatchTag", "api_method_all": "const securityPatchTag: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 15, "since": 6, "api_used": "\u662f", "lines": ["ityPatchTag is :' + securityPatchTagInfo);\n\n        let ", " false;\n        let securityPatchTagInfo = deviceinfo.se", "agInfo = deviceinfo.securityPatchTag;\n        console.in", ");\n          expect(securityPatchTagInfo).assertEqual(bu", "hTagInfo != null && securityPatchTagInfo != undefined) {", "ring');\n        if (securityPatchTagInfo != \"\" && securi", "/;\n        let re = securityPatchTagInfo.match(reFormat)", "tchTagInfo != \"\" && securityPatchTagInfo != null && secu", "          let arr = securityPatchTagInfo.match(str);\n   ", "ityPatchTag is :' + securityPatchTagInfo);\n\n        expe", "o);\n\n        expect(securityPatchTagInfo).assertInstance", "e of the deviceinfo securityPatchTag is :' + securityPat", "art');\n\n        let securityPatchTagInfo = deviceinfo.se"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "displayVersion", "api_method_all": "const displayVersion: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 18, "since": 6, "api_used": "\u662f", "lines": ["ring');\n        if (displayVersionInfo != \"\" && displa", "\n\n        let len = displayVersionInfo.length;\n       ", "sionInfo != null && displayVersionInfo != undefined) {", "tart');\n        let displayVersionInfo = deviceinfo.di", "e of the deviceinfo displayVersion is :' + displayVers", "playVersion is :' + displayVersionInfo);\n\n        expe", "onInfo = deviceinfo.displayVersion;\n        console.in", "playVersion is :' + displayVersionInfo);\n\n        let ", "o);\n\n        expect(displayVersionInfo).assertInstance", " false;\n        let displayVersionInfo = deviceinfo.di", "ersionInfo != \"\" && displayVersionInfo != null && disp"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "incrementalVersion", "api_method_all": "const incrementalVersion: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 24, "since": 6, "api_used": "\u662f", "lines": ["ring');\n        if (incrementalVersionInfo != \"\" && increm", "          let arr = incrementalVersionInfo.match(str);\n   ", "art');\n\n        let incrementalVersionInfo = deviceinfo.in", "\n\n        let len = incrementalVersionInfo.length\n        ", "tr);\n        expect(incrementalVersionInfo).assertEqual(bu", "ersionInfo != \"\" && incrementalVersionInfo != null && incr", "sionInfo != null && incrementalVersionInfo != undefined) {", "o);\n\n        expect(incrementalVersionInfo).assertInstance", "onInfo = deviceinfo.incrementalVersion;\n        console.in", "tart');\n        let incrementalVersionInfo = deviceinfo.in", "ntalVersion is :' + incrementalVersionInfo);\n\n        let ", "e of the deviceinfo incrementalVersion is :' + incremental", "ntalVersion is :' + incrementalVersionInfo);\n\n        expe", ");\n          expect(incrementalVersionInfo).assertEqual(bu", ";\n        let arr = incrementalVersionInfo.match(str);\n   "], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "osReleaseType", "api_method_all": "const osReleaseType: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 10, "since": 6, "api_used": "\u662f", "lines": ["art');\n\n        let osReleaseTypeInfo = deviceinfo.os", "e of the deviceinfo osReleaseType is :' + osReleaseTy", "ring');\n        if (osReleaseTypeInfo != \"\" && osRele", "ReleaseType is :' + osReleaseTypeInfo);\n\n        expe", "          let arr = osReleaseTypeInfo.match(str);\n   ", "peInfo = deviceinfo.osReleaseType;\n        console.in", "TypeInfo != null && osReleaseTypeInfo != undefined) {", ");\n          expect(osReleaseTypeInfo).assertEqual(bu", "o);\n\n        expect(osReleaseTypeInfo).assertInstance", "seTypeInfo != \"\" && osReleaseTypeInfo != null && osRe"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "osFullName", "api_method_all": "const osFullName: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 17, "since": 6, "api_used": "\u662f", "lines": ["llNameInfo != \"\" && osFullNameInfo != null && osFu", "o);\n\n        expect(osFullNameInfo).assertInstance", "          let arr = osFullNameInfo.match(str);\n   ", "NameInfo != null && osFullNameInfo != undefined) {", "tart');\n        let osFullNameInfo = deviceinfo.os", "e of the deviceinfo osFullName is :' + osFullNameI", "ring');\n        if (osFullNameInfo != \"\" && osFull", "meInfo = deviceinfo.osFullName;\n        console.in", ");\n          expect(osFullNameInfo).assertEqual(bu", " osFullName is :' + osFullNameInfo);\n\n        let ", "art');\n\n        let osFullNameInfo = deviceinfo.os", "tr);\n        expect(osFullNameInfo).assertEqual(bu", " osFullName is :' + osFullNameInfo);\n\n        expe", "\n\n        let len = osFullNameInfo.length;\n       ", ";\n        let arr = osFullNameInfo.match(str);\n   "], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "majorVersion", "api_method_all": "const majorVersion: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 9, "since": 6, "api_used": "\u662f", "lines": ["onInfo = deviceinfo.majorVersion;\n        console.in", "e of the deviceinfo majorVersion is :' + majorVersio", "o);\n\n        expect(majorVersionInfo).assertInstance", ");\n          expect(majorVersionInfo).assertEqual(nu", "mber');\n        if (majorVersionInfo >= 1 && majorVe", "ajorVersion is :' + majorVersionInfo);\n\n        expe", "          let arr = majorVersionInfo.toString().matc", "art');\n\n        let majorVersionInfo = deviceinfo.ma", "VersionInfo >= 1 && majorVersionInfo <= 99) {\n      "], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "seniorVersion", "api_method_all": "const seniorVersion: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 9, "since": 6, "api_used": "\u662f", "lines": ["onInfo = deviceinfo.seniorVersion;\n        console.in", "o);\n\n        expect(seniorVersionInfo).assertInstance", "VersionInfo >= 0 && seniorVersionInfo <= 99) {\n      ", "mber');\n        if (seniorVersionInfo >= 0 && seniorV", ");\n          expect(seniorVersionInfo).assertEqual(nu", "          let arr = seniorVersionInfo.toString().matc", "niorVersion is :' + seniorVersionInfo);\n\n        expe", "e of the deviceinfo seniorVersion is :' + seniorVersi", "art');\n\n        let seniorVersionInfo = deviceinfo.se"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "featureVersion", "api_method_all": "const featureVersion: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 10, "since": 6, "api_used": "\u662f", "lines": ["onInfo = deviceinfo.featureVersion;\n        console.in", "tureVersion is :' + featureVersionInfo);\n\n        expe", "VersionInfo >= 1 && featureVersionInfo <= 99) || featu", "e of the deviceinfo featureVersion is :' + featureVers", "o);\n\n        expect(featureVersionInfo).assertInstance", "rsionInfo <= 99) || featureVersionInfo == 0) {\n       ", "art');\n\n        let featureVersionInfo = deviceinfo.fe", ");\n          expect(featureVersionInfo).assertEqual(nu", "ber');\n        if ((featureVersionInfo >= 1 && feature", "          let arr = featureVersionInfo.toString().matc"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "buildVersion", "api_method_all": "const buildVersion: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 10, "since": 6, "api_used": "\u662f", "lines": ["art');\n\n        let buildVersionInfo = deviceinfo.bu", "o);\n\n        expect(buildVersionInfo).assertInstance", ");\n          expect(buildVersionInfo).assertEqual(nu", "ersionInfo == 0 || (buildVersionInfo >= 1 && buildVe", "uildVersion is :' + buildVersionInfo);\n\n        expe", "          let arr = buildVersionInfo.toString().matc", "VersionInfo >= 1 && buildVersionInfo <= 999)) {\n    ", "e of the deviceinfo buildVersion is :' + buildVersio", "mber');\n        if (buildVersionInfo == 0 || (buildV", "onInfo = deviceinfo.buildVersion;\n        console.in"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "sdkApiVersion", "api_method_all": "const sdkApiVersion: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 8, "since": 6, "api_used": "\u662f", "lines": ["o);\n\n        expect(sdkApiVersionInfo).assertInstance", "onInfo = deviceinfo.sdkApiVersion;\n        console.in", "tr);\n        expect(sdkApiVersionInfo).assertEqual(nu", " false;\n        let sdkApiVersionInfo = deviceinfo.sd", "e of the deviceinfo sdkApiVersion is :' + sdkApiVersi", ";\n        let arr = sdkApiVersionInfo.toString().matc", "mber');\n        if (sdkApiVersionInfo >= 0) {\n       ", "kApiVersion is :' + sdkApiVersionInfo);\n\n        expe"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "firstApiVersion", "api_method_all": "const firstApiVersion: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 8, "since": 6, "api_used": "\u662f", "lines": ["o);\n\n        expect(firstApiVersionInfo).assertInstance", "tApiVersion is :' + firstApiVersionInfo);\n\n        expe", "= true;\n        let firstApiVersionInfo = deviceinfo.fi", "tr);\n        expect(firstApiVersionInfo).assertEqual(nu", "onInfo = deviceinfo.firstApiVersion;\n        console.in", ";\n        let arr = firstApiVersionInfo.toString().matc", "mber');\n        if (firstApiVersionInfo >= 0) {\n       ", "e of the deviceinfo firstApiVersion is :' + firstApiVer"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "versionId", "api_method_all": "const versionId: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 18, "since": 6, "api_used": "\u662f", "lines": ["ring');\n        if (versionIdInfo != \"\" && versio", "onIdInfo != null && versionIdInfo != undefined) {", "IdInfo = deviceinfo.versionId;\n        console.in", "e of the deviceinfo versionId is :' + versionIdIn", "o);\n\n        expect(versionIdInfo).assertInstance", "o versionId is :' + versionIdInfo);\n\n        expe", "\n\n        let len = versionIdInfo.length;\n       ", "tart');\n        let versionIdInfo = deviceinfo.ve", "o versionId is :' + versionIdInfo);\n\n        let ", "\n\n        let len = versionIdInfo.length\n        ", "sionIdInfo != \"\" && versionIdInfo != null && vers", " false;\n        let versionIdInfo = deviceinfo.ve"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "buildType", "api_method_all": "const buildType: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 10, "since": 6, "api_used": "\u662f", "lines": ["TypeInfo != null && buildTypeInfo != undefined) {", "          let arr = buildTypeInfo.match(str);\n   ", "e of the deviceinfo buildType is :' + buildTypeIn", "peInfo = deviceinfo.buildType;\n        console.in", "art');\n\n        let buildTypeInfo = deviceinfo.bu", "o buildType is :' + buildTypeInfo);\n\n        expe", "o);\n\n        expect(buildTypeInfo).assertInstance", "ring');\n        if (buildTypeInfo != \"\" && buildT", ");\n          expect(buildTypeInfo).assertEqual(bu", "ldTypeInfo != \"\" && buildTypeInfo != null && buil"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "buildUser", "api_method_all": "const buildUser: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 22, "since": 6, "api_used": "\u662f", "lines": ["= true;\n        let buildUserInfo = deviceinfo.bu", "o);\n\n        expect(buildUserInfo).assertInstance", "o buildUser is :' + buildUserInfo);\n\n        cons", "UserInfo != null && buildUserInfo != undefined) {", "ldUserInfo != \"\" && buildUserInfo != null && buil", "e of the deviceinfo buildUser is :' + buildUserIn", " characters is :' + buildUserInfo.length);\n      ", ";\n        let arr = buildUserInfo.match(str);\n   ", "hebuildUser is :' + buildUserInfo);\n\n        cons", "tr);\n        expect(buildUserInfo).assertEqual(bu", "erInfo = deviceinfo.buildUser;\n        console.in", "th);\n        expect(buildUserInfo.length).assertL", "ring');\n        if (buildUserInfo != \"\" && buildU", "o buildUser is :' + buildUserInfo);\n\n        expe", "fo('the value of thebuildUser is :' + buildUserIn", "tart');\n        let buildUserInfo = deviceinfo.bu"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "buildHost", "api_method_all": "const buildHost: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 20, "since": 6, "api_used": "\u662f", "lines": ["ldHostInfo != \"\" && buildHostInfo != null && buil", "o buildHost is :' + buildHostInfo);\n\n        let ", "o);\n\n        expect(buildHostInfo).assertInstance", ";\n        let arr = buildHostInfo.match(str);\n   ", "tr);\n        expect(buildHostInfo).assertEqual(bu", " false;\n        let buildHostInfo = deviceinfo.bu", "tart');\n        let buildHostInfo = deviceinfo.bu", "stInfo = deviceinfo.buildHost;\n        console.in", "o buildHost is :' + buildHostInfo);\n\n        expe", "\n\n        let len = buildHostInfo.length\n        ", "ring');\n        if (buildHostInfo != \"\" && buildH", "HostInfo != null && buildHostInfo != undefined) {", "e of the deviceinfo buildHost is :' + buildHostIn"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "buildTime", "api_method_all": "const buildTime: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 8, "since": 6, "api_used": "\u662f", "lines": [" false;\n        let buildTimeInfo = deviceinfo.bu", "ldTimeInfo != \"\" && buildTimeInfo != null && buil", "o buildTime is :' + buildTimeInfo);\n\n        expe", "TimeInfo != null && buildTimeInfo != undefined) {", "meInfo = deviceinfo.buildTime;\n        console.in", "ring');\n        if (buildTimeInfo != \"\" && buildT", "e of the deviceinfo buildTime is :' + buildTimeIn", "o);\n\n        expect(buildTimeInfo).assertInstance"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "buildRootHash", "api_method_all": "const buildRootHash: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 10, "since": 6, "api_used": "\u662f", "lines": ["          let arr = buildRootHashInfo.match(str);\n   ", "otHashInfo != \"\" && buildRootHashInfo != null && buil", "ildRootHash is :' + buildRootHashInfo);\n\n        expe", "o);\n\n        expect(buildRootHashInfo).assertInstance", "ring');\n        if (buildRootHashInfo != \"\" && buildR", "HashInfo != null && buildRootHashInfo != undefined) {", "art');\n\n        let buildRootHashInfo = deviceinfo.bu", ");\n          expect(buildRootHashInfo).assertEqual(bu", "shInfo = deviceinfo.buildRootHash;\n        console.in", "e of the deviceinfo buildRootHash is :' + buildRootHa"], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "deviceInfo", "api_method_name": "udid", "api_method_all": "const udid: string", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 20, "since": 0, "api_used": "\u662f", "lines": ["\n\n        let len = udid.length\n        cons", " false;\n        let udid = deviceinfo.udid;\n", "ceinfo udid is :' + udid);\n\n        expect(u", "  if (udid != \"\" && udid != null && udid != ", "tart');\n        let udid = deviceinfo.udid;\n", "* @tc.desc      Get udid\n     */\n    it('dev", "e of the deviceinfo udid is :' + udid);\n\n   ", "t udid = deviceinfo.udid;\n        console.in", "d);\n\n        expect(udid).assertInstanceOf('", "ring');\n        if (udid != \"\" && udid != nu", "ceinfo udid is :' + udid);\n\n        let len ", " && udid != null && udid != undefined) {\n   "], "files": ["DeviceInfoJsUnit.test.js"], "is_white": " ", "desc": " "}]}