{"subsystem_ch": "\u7535\u8bdd\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "telephony", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.telephony.radio", "api": [{"api_class_name": "radio", "api_method_all": "declare namespace radio {\n  \n  function getRadioTech(slotId: number,\n    callback: AsyncCallback<{psRadioTech: RadioTechnology, csRadioTech: RadioTechnology}>): void;\n  function getRadioTech(slotId: number): Promise<{psRadioTech: RadioTechnology, csRadioTech: RadioTechnology}>;\n\n  \n  function getNetworkState(callback: AsyncCallback<NetworkState>): void;\n  function getNetworkState(slotId: number, callback: AsyncCallback<NetworkState>): void;\n  function getNetworkState(slotId?: number): Promise<NetworkState>;\n\n  \n  function sendUpdateCellLocationRequest(callback: AsyncCallback<void>): void;\n  function sendUpdateCellLocationRequest(): Promise<void>;\n\n  \n  function getCellInformation(callback: AsyncCallback<Array<CellInformation>>): void;\n  function getCellInformation(slotId: number, callback: AsyncCallback<Array<CellInformation>>): void;\n  function getCellInformation(slotId?: number): Promise<Array<CellInformation>>;\n\n  \n  function getNetworkSelectionMode(slotId: number, callback: AsyncCallback<NetworkSelectionMode>): void;\n  function getNetworkSelectionMode(slotId: number): Promise<NetworkSelectionMode>;\n\n  \n  function setNetworkSelectionMode(options: NetworkSelectionModeOptions, callback: AsyncCallback<void>): void;\n  function setNetworkSelectionMode(options: NetworkSelectionModeOptions): Promise<void>;\n\n  \n  function getNetworkSearchInformation(slotId: number, callback: AsyncCallback<NetworkSearchResult>): void;\n  function getNetworkSearchInformation(slotId: number): Promise<NetworkSearchResult>;\n\n  \n  function getISOCountryCodeForNetwork(slotId: number, callback: AsyncCallback<string>): void;\n  function getISOCountryCodeForNetwork(slotId: number): Promise<string>;\n\n  \n  function getNrOptionMode(callback: AsyncCallback<NrOptionMode>): void;\n  function getNrOptionMode(slotId: number, callback: AsyncCallback<NrOptionMode>): void;\n  function getNrOptionMode(slotId?: number): Promise<NrOptionMode>;\n\n  \n  function getIMEI(callback: AsyncCallback<string>): void;\n  function getIMEI(slotId: number, callback: AsyncCallback<string>): void;\n  function getIMEI(slotId?: number): Promise<string>;\n\n  \n  function getMEID(callback: AsyncCallback<string>): void;\n  function getMEID(slotId: number, callback: AsyncCallback<string>): void;\n  function getMEID(slotId?: number): Promise<string>;\n\n  \n  function getUniqueDeviceId(callback: AsyncCallback<string>): void;\n  function getUniqueDeviceId(slotId: number, callback: AsyncCallback<string>): void;\n  function getUniqueDeviceId(slotId?: number): Promise<string>;\n\n  \n  function getPrimarySlotId(callback: AsyncCallback<number>): void;\n  function getPrimarySlotId(): Promise<number>;\n\n  \n  function setPrimarySlotId(slotId: number, callback: AsyncCallback<void>): void;\n  function setPrimarySlotId(slotId: number): Promise<void>;\n\n  \n  function getSignalInformation(slotId: number, callback: AsyncCallback<Array<SignalInformation>>): void;\n  function getSignalInformation(slotId: number): Promise<Array<SignalInformation>>;\n\n  \n  function isNrSupported(): boolean;\n\n  \n  function isNrSupported(slotId: number): boolean;\n\n  \n  function isRadioOn(callback: AsyncCallback<boolean>): void;\n  function isRadioOn(slotId: number, callback: AsyncCallback<boolean>): void\n  function isRadioOn(slotId?: number): Promise<boolean>;\n\n  \n  function turnOnRadio(callback: AsyncCallback<void>): void;\n  function turnOnRadio(slotId: number, callback: AsyncCallback<void>): void;\n  function turnOnRadio(slotId?: number): Promise<void>;\n\n  \n  function turnOffRadio(callback: AsyncCallback<void>): void;\n  function turnOffRadio(slotId: number, callback: AsyncCallback<void>): void;\n  function turnOffRadio(slotId?: number): Promise<void>;\n\n  \n  function getOperatorName(slotId: number, callback: AsyncCallback<string>): void;\n  function getOperatorName(slotId: number): Promise<string>;\n\n  \n  function setPreferredNetwork(slotId: number, networkMode: PreferredNetworkMode, callback: AsyncCallback<void>): void;\n  function setPreferredNetwork(slotId: number, networkMode: PreferredNetworkMode): Promise<void>;\n\n  \n  function getPreferredNetwork(slotId: number, callback: AsyncCallback<PreferredNetworkMode>): void;\n  function getPreferredNetwork(slotId: number): Promise<PreferredNetworkMode>;\n\n  \n  export enum PreferredNetworkMode {\n    PREFERRED_NETWORK_MODE_GSM = 1,\n    PREFERRED_NETWORK_MODE_WCDMA = 2,\n    PREFERRED_NETWORK_MODE_LTE = 3,\n    PREFERRED_NETWORK_MODE_LTE_WCDMA = 4,\n    PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM = 5,\n    PREFERRED_NETWORK_MODE_WCDMA_GSM = 6,\n    PREFERRED_NETWORK_MODE_CDMA = 7,\n    PREFERRED_NETWORK_MODE_EVDO = 8,\n    PREFERRED_NETWORK_MODE_EVDO_CDMA = 9,\n    PREFERRED_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA = 10,\n    PREFERRED_NETWORK_MODE_LTE_EVDO_CDMA = 11,\n    PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA = 12,\n    PREFERRED_NETWORK_MODE_TDSCDMA = 13,\n    PREFERRED_NETWORK_MODE_TDSCDMA_GSM = 14,\n    PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA = 15,\n    PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM = 16,\n    PREFERRED_NETWORK_MODE_LTE_TDSCDMA = 17,\n    PREFERRED_NETWORK_MODE_LTE_TDSCDMA_GSM = 18,\n    PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA = 19,\n    PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM = 20,\n    PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 21,\n    PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 22,\n    PREFERRED_NETWORK_MODE_NR = 31,\n    PREFERRED_NETWORK_MODE_NR_LTE = 32,\n    PREFERRED_NETWORK_MODE_NR_LTE_WCDMA = 33,\n    PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM = 34,\n    PREFERRED_NETWORK_MODE_NR_LTE_EVDO_CDMA = 35,\n    PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA = 36,\n    PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA = 37,\n    PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_GSM = 38,\n    PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA = 39,\n    PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM = 40,\n    PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 41,\n    PREFERRED_NETWORK_MODE_MAX_VALUE = 99,\n  }\n\n  \n  export enum RadioTechnology {\n    \n    RADIO_TECHNOLOGY_UNKNOWN = 0,\n\n    \n    RADIO_TECHNOLOGY_GSM = 1,\n\n    \n    RADIO_TECHNOLOGY_1XRTT = 2,\n\n    \n    RADIO_TECHNOLOGY_WCDMA = 3,\n\n    \n    RADIO_TECHNOLOGY_HSPA = 4,\n\n    \n    RADIO_TECHNOLOGY_HSPAP = 5,\n\n    \n    RADIO_TECHNOLOGY_TD_SCDMA = 6,\n\n    \n    RADIO_TECHNOLOGY_EVDO = 7,\n\n    \n    RADIO_TECHNOLOGY_EHRPD = 8,\n\n    \n    RADIO_TECHNOLOGY_LTE = 9,\n\n    \n    RADIO_TECHNOLOGY_LTE_CA = 10,\n\n    \n    RADIO_TECHNOLOGY_IWLAN = 11,\n\n    \n    RADIO_TECHNOLOGY_NR = 12\n  }\n\n  export interface SignalInformation {\n    \n    signalType: NetworkType;\n\n    \n    signalLevel: number;\n  }\n\n  \n  export enum NetworkType {\n    \n    NETWORK_TYPE_UNKNOWN,\n\n    \n    NETWORK_TYPE_GSM,\n\n    \n    NETWORK_TYPE_CDMA,\n\n    \n    NETWORK_TYPE_WCDMA,\n\n    \n    NETWORK_TYPE_TDSCDMA,\n\n    \n    NETWORK_TYPE_LTE,\n\n    \n    NETWORK_TYPE_NR\n  }\n\n  \n  export interface NetworkState {\n    \n    longOperatorName: string;\n\n    \n    shortOperatorName: string;\n\n    \n    plmnNumeric: string;\n\n    \n    isRoaming: boolean;\n\n    \n    regState: RegState;\n\n    \n    cfgTech: RadioTechnology;\n\n    \n    nsaState: NsaState;\n\n    \n    isCaActive: boolean;\n\n    \n    isEmergency: boolean;\n  }\n\n  \n  export enum RegState {\n    \n    REG_STATE_NO_SERVICE = 0,\n\n    \n    REG_STATE_IN_SERVICE = 1,\n\n    \n    REG_STATE_EMERGENCY_CALL_ONLY = 2,\n\n    \n    REG_STATE_POWER_OFF = 3\n  }\n\n  \n  export enum NsaState {\n    \n    NSA_STATE_NOT_SUPPORT = 1,\n\n    \n    NSA_STATE_NO_DETECT = 2,\n\n    \n    NSA_STATE_CONNECTED_DETECT = 3,\n\n    \n    NSA_STATE_IDLE_DETECT = 4,\n\n    \n    NSA_STATE_DUAL_CONNECTED = 5,\n\n    \n    NSA_STATE_SA_ATTACHED = 6\n  }\n\n  \n  export interface CellInformation {\n    \n    networkType: NetworkType;\n\n    \n    isCamped: boolean;\n\n    \n    timeStamp: number;\n\n    \n    signalInformation: SignalInformation;\n\n    data: CdmaCellInformation | GsmCellInformation | LteCellInformation | NrCellInformation | TdscdmaCellInformation\n      | WcdmaCellInformation;\n  }\n\n  \n  export interface CdmaCellInformation {\n    baseId: number;\n    latitude: number;\n    longitude: number;\n    nid: number;\n    sid: number;\n  }\n\n  \n  export interface GsmCellInformation {\n    lac: number;\n    cellId: number;\n    arfcn: number;\n    bsic: number;\n    mcc: string;\n    mnc: string;\n  }\n\n  \n  export interface LteCellInformation {\n    cgi: number;\n    pci: number;\n    tac: number;\n    earfcn: number;\n    bandwidth: number;\n    mcc: string;\n    mnc: string;\n    isSupportEndc: boolean;\n  }\n\n  \n  export interface NrCellInformation {\n    nrArfcn: number;\n    pci: number;\n    tac: number;\n    nci: number;\n    mcc: string;\n    mnc: string;\n  }\n\n  \n  export interface TdscdmaCellInformation {\n    lac: number;\n    cellId: number;\n    cpid: number;\n    uarfcn: number;\n    mcc: string;\n    mnc: string;\n  }\n\n  \n  export interface WcdmaCellInformation {\n    lac: number;\n    cellId: number;\n    psc: number;\n    uarfcn: number;\n    mcc: string;\n    mnc: string;\n  }\n\n  \n  export enum NrOptionMode {\n    \n    NR_OPTION_UNKNOWN,\n\n    \n    NR_OPTION_NSA_ONLY,\n\n    \n    NR_OPTION_SA_ONLY,\n\n    \n    NR_OPTION_NSA_AND_SA,\n  }\n\n  \n  export interface NetworkSearchResult {\n    isNetworkSearchSuccess: boolean;\n    networkSearchResult: Array<NetworkInformation>;\n  }\n\n  \n  export interface NetworkInformation {\n    operatorName: string;\n    operatorNumeric: string;\n    state: NetworkInformationState;\n    radioTech: string;\n  }\n\n  \n  export enum NetworkInformationState {\n    \n    NETWORK_UNKNOWN,\n\n    \n    NETWORK_AVAILABLE,\n\n    \n    NETWORK_CURRENT,\n\n    \n    NETWORK_FORBIDDEN\n  }\n\n  \n  export interface NetworkSelectionModeOptions {\n    slotId: number;\n    selectMode: NetworkSelectionMode;\n    networkInformation: NetworkInformation;\n    resumeSelection: boolean;\n  }\n\n  export enum NetworkSelectionMode {\n    \n    NETWORK_SELECTION_UNKNOWN,\n\n    \n    NETWORK_SELECTION_AUTOMATIC,\n\n    \n    NETWORK_SELECTION_MANUAL\n  }\n}", "api_method_name": "radio", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 172, "since": 0, "api_used": "\u662f", "lines": ["", "\n            expect(radio.RADIO_TECHNOLOGY_WC", "\n            expect(radio.RADIO_TECHNOLOGY_LT", "\n            expect(radio.NSA_STATE_NOT_SUPPO", "\n            expect(radio.NETWORK_TYPE_NR ===", "\n            expect(radio.NETWORK_TYPE_TDSCDM", "\n            expect(radio.NSA_STATE_IDLE_DETE", "on (done) {\n        radio.getSignalInformatio", "\n            expect(radio.NSA_STATE_NO_DETECT", "\n            expect(radio.REG_STATE_NO_SERVIC", "\n            expect(radio.RADIO_TECHNOLOGY_EV", "\n            expect(radio.RADIO_TECHNOLOGY_NR", "\n            expect(radio.NETWORK_FORBIDDEN =", "\n            expect(radio.NSA_STATE_CONNECTED", "\n            expect(radio.NETWORK_TYPE_UNKNOW", "\n            expect(radio.NETWORK_TYPE_CDMA =", "om '@ohos.telephony.radio';\nimport observer f", "on (done) {\n        radio.getRadioTech(SLOT_2", "\n            expect(radio.NETWORK_TYPE_WCDMA ", "\n            expect(radio.REG_STATE_POWER_OFF", "rredNetwork(SLOT_0, radio.PREFERRED_NETWORK_M", "\n            expect(radio.NETWORK_UNKNOWN ===", "\n            expect(radio.NETWORK_TYPE_LTE ==", "\n            expect(radio.RADIO_TECHNOLOGY_1X", "\n            expect(radio.REG_STATE_IN_SERVIC", "ta[0].signalType != radio.NETWORK_TYPE_WCDMA)", "on (done) {\n        radio.getISOCountryCodeFo", "   let isOn = await radio.isRadioOn();\n      ", "on (done) {\n        radio.getNetworkState(SLO", "\n            expect(radio.NETWORK_SELECTION_U", " () {\n        await radio.setPreferredNetwork", "\n            expect(radio.RADIO_TECHNOLOGY_HS", "\n            expect(radio.NSA_STATE_SA_ATTACH", "\n            expect(radio.NETWORK_SELECTION_M", "\n            expect(radio.REG_STATE_EMERGENCY", "\n            expect(radio.NETWORK_TYPE_GSM ==", "{\n            await radio.turnOnRadio();\n    ", "\n            expect(radio.NSA_STATE_DUAL_CONN", "\n            expect(radio.RADIO_TECHNOLOGY_TD", "\n            expect(radio.RADIO_TECHNOLOGY_IW", "   let data = await radio.getISOCountryCodeFo", "\n            expect(radio.RADIO_TECHNOLOGY_UN", "ct(data.nsaState != radio.NSA_STATE_SA_ATTACH", "\n            expect(radio.NETWORK_CURRENT ===", "ct(data.regState != radio.REG_STATE_IN_SERVIC", "\n            expect(radio.RADIO_TECHNOLOGY_EH"], "files": ["ObserverJsunit.test.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "List.test.ets", "RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getRadioTech", "api_method_all": "function getRadioTech(slotId: number,\n    callback: AsyncCallback<{psRadioTech: RadioTechnology, csRadioTech: RadioTechnology}>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getRadioTech_Async_0400 finish err: ${err}`);\n      ", "        await radio.getRadioTech(SLOT_2);\n            console.log('Telep", "ne) {\n        radio.getRadioTech(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getRadioTech_Promise_0400', 0, async function (done)", "phony_NetworkSearch_getRadioTech_Async_0400 fail not go to err ${data}`)", "phony_NetworkSearch_getRadioTech_Async_0400', 0, async function (done) {", "phony_NetworkSearch_getRadioTech_Promise_0400 fail not go to err');\n    ", "phony_NetworkSearch_getRadioTech_Promise_0400 finish err: ${err}`);\n    "], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getRadioTech", "api_method_all": "function getRadioTech(slotId: number): Promise<{psRadioTech: RadioTechnology, csRadioTech: RadioTechnology}>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getNetworkState", "api_method_all": "function getNetworkState(callback: AsyncCallback<NetworkState>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getNetworkState_Async_0700 fail not go to err ${data}`)", "phony_NetworkSearch_getNetworkState_Promise_0700 finish err: ${err}`);\n    ", "phony_NetworkSearch_getNetworkState_Promise_0700', 0, async function (done)", "phony_NetworkSearch_getNetworkState_Async_0700 finish err: ${err}`);\n\t\t\t\tex", "phony_NetworkSearch_getNetworkState_Promise_0700 fail not go to err');\n    ", "phony_NetworkSearch_getNetworkState_Async_0700', 0, async function (done) {", "        await radio.getNetworkState(SLOT_2);\n            console.log('Telep", "ne) {\n        radio.getNetworkState(SLOT_2, (err, data) => {\n            if", "      }\n      radio.getNetworkState((err, data) => {\n        if (err) {\n   "], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getNetworkState", "api_method_all": "function getNetworkState(slotId: number, callback: AsyncCallback<NetworkState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getNetworkState_Async_0700 fail not go to err ${data}`)", "phony_NetworkSearch_getNetworkState_Promise_0700 finish err: ${err}`);\n    ", "phony_NetworkSearch_getNetworkState_Promise_0700', 0, async function (done)", "phony_NetworkSearch_getNetworkState_Async_0700 finish err: ${err}`);\n\t\t\t\tex", "phony_NetworkSearch_getNetworkState_Promise_0700 fail not go to err');\n    ", "phony_NetworkSearch_getNetworkState_Async_0700', 0, async function (done) {", "        await radio.getNetworkState(SLOT_2);\n            console.log('Telep", "ne) {\n        radio.getNetworkState(SLOT_2, (err, data) => {\n            if", "      }\n      radio.getNetworkState((err, data) => {\n        if (err) {\n   "], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getNetworkState", "api_method_all": "function getNetworkState(slotId?: number): Promise<NetworkState>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "sendUpdateCellLocationRequest", "api_method_all": "function sendUpdateCellLocationRequest(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["ne) {\n        radio.sendUpdateCellLocationRequest((err) => {\n            if (err) {\n     ", "phony_NetworkSearch_sendUpdateCellLocationRequest_Promise_0100', 0, async function (done)", "phony_NetworkSearch_sendUpdateCellLocationRequest_Promise_0100 end data: ${data}`);\n     ", "phony_NetworkSearch_sendUpdateCellLocationRequest_Async_0100 fail: ${err}`);\n            ", "phony_NetworkSearch_sendUpdateCellLocationRequest_Async_0100 success`)\n            done()", "phony_NetworkSearch_sendUpdateCellLocationRequest_Async_0100', 0, async function (done) {", "phony_NetworkSearch_sendUpdateCellLocationRequest_Promise_0100 fail: ${err}`);\n          ", "phony_NetworkSearch_sendUpdateCellLocationRequest_Promise_0100\n     * @tc.name    Test se", "phony_NetworkSearch_sendUpdateCellLocationRequest_Async_0100\n     * @tc.name    Test send", " * @tc.name    Test sendUpdateCellLocationRequest() to view the callback result\n     * @t"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "sendUpdateCellLocationRequest", "api_method_all": "function sendUpdateCellLocationRequest(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ne) {\n        radio.sendUpdateCellLocationRequest().then(data => {\n            console.lo"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getCellInformation", "api_method_all": "function getCellInformation(callback: AsyncCallback<Array<CellInformation>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getCellInformation_Async_0100 end data: ${JSON.stringify(d", "phony_NetworkSearch_getCellInformation_Async_0500\n     * @tc.name    Test getC", "phony_NetworkSearch_getCellInformation_Async_0100 fail: ${err}`);\n          ex", "phony_NetworkSearch_getCellInformation_Async_0100 1`);\n          expect(true).", "phony_NetworkSearch_getCellInformation_Async_0500 fail: ${err}`);\n            ", "ne) {\n        radio.getCellInformation(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getCellInformation_Async_0500 end data: ${JSON.stringify(d", "phony_NetworkSearch_getCellInformation_Promise_0500', 0, async function (done)", " * @tc.name    Test getCellInformation() with anomalous soltId(-1) to view the", "phony_NetworkSearch_getCellInformation_Async_0500', 0, async function (done) {", "phony_NetworkSearch_getCellInformation_Promise_0500 end data: ${JSON.stringify", "      }\n      radio.getCellInformation((err, data) => {\n        if (err) {\n   ", "phony_NetworkSearch_getCellInformation_Promise_0500 fail: ${err}`);\n          ", "phony_NetworkSearch_getCellInformation_Async_0100', 0, async function (done) {", "phony_NetworkSearch_getCellInformation_Promise_0500\n     * @tc.name    Test ge"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getCellInformation", "api_method_all": "function getCellInformation(slotId: number, callback: AsyncCallback<Array<CellInformation>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getCellInformation_Async_0100 end data: ${JSON.stringify(d", "phony_NetworkSearch_getCellInformation_Async_0500\n     * @tc.name    Test getC", "phony_NetworkSearch_getCellInformation_Async_0100 fail: ${err}`);\n          ex", "phony_NetworkSearch_getCellInformation_Async_0100 1`);\n          expect(true).", "phony_NetworkSearch_getCellInformation_Async_0500 fail: ${err}`);\n            ", "ne) {\n        radio.getCellInformation(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getCellInformation_Async_0500 end data: ${JSON.stringify(d", "phony_NetworkSearch_getCellInformation_Promise_0500', 0, async function (done)", " * @tc.name    Test getCellInformation() with anomalous soltId(-1) to view the", "phony_NetworkSearch_getCellInformation_Async_0500', 0, async function (done) {", "phony_NetworkSearch_getCellInformation_Promise_0500 end data: ${JSON.stringify", "      }\n      radio.getCellInformation((err, data) => {\n        if (err) {\n   ", "phony_NetworkSearch_getCellInformation_Promise_0500 fail: ${err}`);\n          ", "phony_NetworkSearch_getCellInformation_Async_0100', 0, async function (done) {", "phony_NetworkSearch_getCellInformation_Promise_0500\n     * @tc.name    Test ge"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getCellInformation", "api_method_all": "function getCellInformation(slotId?: number): Promise<Array<CellInformation>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ne) {\n        radio.getCellInformation(SLOT_2).then(data => {\n            cons"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getNetworkSelectionMode", "api_method_all": "function getNetworkSelectionMode(slotId: number, callback: AsyncCallback<NetworkSelectionMode>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getNetworkSelectionMode_Promise_0500 fail not go to err');\n    ", "phony_NetworkSearch_getNetworkSelectionMode_Async_0500 fail not go to err');\n      ", "phony_NetworkSearch_getNetworkSelectionMode_Promise_0500', 0, async function (done)", "phony_NetworkSearch_getNetworkSelectionMode_Async_0500 err: ${err}`);\n             ", "phony_NetworkSearch_getNetworkSelectionMode_Promise_0500 finish');\n            done", "        await radio.getNetworkSelectionMode(SLOT_2);\n            console.log('Telep", "ne) {\n        radio.getNetworkSelectionMode(SLOT_2, (err, res) => {\n            if ", "phony_NetworkSearch_getNetworkSelectionMode_Async_0500', 0, async function (done) {"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getNetworkSelectionMode", "api_method_all": "function getNetworkSelectionMode(slotId: number): Promise<NetworkSelectionMode>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "setNetworkSelectionMode", "api_method_all": "function setNetworkSelectionMode(options: NetworkSelectionModeOptions, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 0, "api_used": "\u662f", "lines": ["        await radio.setNetworkSelectionMode(networkSMode);\n            console.log(", "phony_NetworkSearch_setNetworkSelectionMode_Async_0700 set not go to err');\n       ", "phony_NetworkSearch_setNetworkSelectionMode_Async_0700 networkSMode:${JSON.stringif", "phony_NetworkSearch_setNetworkSelectionMode_Async_0700', 0, async function (done) {", "phony_NetworkSearch_setNetworkSelectionMode_Promise_0700', 0, async function (done)", "phony_NetworkSearch_setNetworkSelectionMode_Async_0700 set finish');\n              ", "phony_NetworkSearch_setNetworkSelectionMode_Promise_0200 set finish');\n            ", "phony_NetworkSearch_setNetworkSelectionMode_Promise_0200 set fail');\n            ex", "phony_NetworkSearch_setNetworkSelectionMode_Promise_0700 networkSMode:${JSON.string", "e)}`)\n        radio.setNetworkSelectionMode(networkSMode, (err) => {\n            if"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "setNetworkSelectionMode", "api_method_all": "function setNetworkSelectionMode(options: NetworkSelectionModeOptions): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getNetworkSearchInformation", "api_method_all": "function getNetworkSearchInformation(slotId: number, callback: AsyncCallback<NetworkSearchResult>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["      }\n      radio.getNetworkSearchInformation(SLOT_0, (err, data) => {\n        if (er", "phony_NetworkSearch_getNetworkSearchInformation_Async_0100 fail err: ${err}`);\n        ", "        await radio.getNetworkSearchInformation(SLOT_2);\n            console.log('Telep", "ne) {\n        radio.getNetworkSearchInformation(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getNetworkSearchInformation_Async_0400 fail not go to err');\n      ", "phony_NetworkSearch_getNetworkSearchInformation_Async_0100', 0, async function (done) {", "phony_NetworkSearch_getNetworkSearchInformation_Promise_0400 fail not go to err');\n    ", "phony_NetworkSearch_getNetworkSearchInformation_Promise_0400 finish err: ${err}`);\n    ", "phony_NetworkSearch_getNetworkSearchInformation_Async_0400', 0, async function (done) {", "phony_NetworkSearch_getNetworkSearchInformation_Promise_0400', 0, async function (done)", "phony_NetworkSearch_getNetworkSearchInformation_Async_0400 finish');\n                do", "phony_NetworkSearch_getNetworkSearchInformation_Async_0100 fail');\n          expect().a", "phony_NetworkSearch_getNetworkSearchInformation_Async_0100 1`);\n          expect(true).", "phony_NetworkSearch_getNetworkSearchInformation_Async_0100 finish data: ${JSON.stringif"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getNetworkSearchInformation", "api_method_all": "function getNetworkSearchInformation(slotId: number): Promise<NetworkSearchResult>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getISOCountryCodeForNetwork", "api_method_all": "function getISOCountryCodeForNetwork(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getISOCountryCodeForNetwork_Async_0400 finish data: ${JSON.stringif", "phony_NetworkSearch_getISOCountryCodeForNetwork_Promise_0400 fail err: ${err}`);\n      ", "phony_NetworkSearch_getISOCountryCodeForNetwork_Async_0400 fail err: ${err}`);\n        ", "phony_NetworkSearch_getISOCountryCodeForNetwork_Promise_0400 finish data:${JSON.stringi", "phony_NetworkSearch_getISOCountryCodeForNetwork_Async_0400', 0, async function (done) {", "ne) {\n        radio.getISOCountryCodeForNetwork(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getISOCountryCodeForNetwork_Promise_0400', 0, async function (done)", " data = await radio.getISOCountryCodeForNetwork(SLOT_2);\n            console.log(\n     "], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getISOCountryCodeForNetwork", "api_method_all": "function getISOCountryCodeForNetwork(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getNrOptionMode", "api_method_all": "function getNrOptionMode(callback: AsyncCallback<NrOptionMode>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getNrOptionMode_Promise_0500 fail: ${err}`);\n          ", "phony_NetworkSearch_getNrOptionMode_Async_0500 get fail err: ${err}`);\n    ", "phony_NetworkSearch_getNrOptionMode_Promise_0500', 0, async function (done)", "phony_NetworkSearch_getNrOptionMode_Async_0100 end data: ${JSON.stringify(d", "phony_NetworkSearch_getNrOptionMode_Async_0100 get fail err: ${err}`);\n    ", "phony_NetworkSearch_getNrOptionMode_Promise_0500 end data: ${data}`);\n     ", "      }\n      radio.getNrOptionMode((err, data) => {\n        if (err) {\n   ", "phony_NetworkSearch_getNrOptionMode_Async_0500 end data: ${JSON.stringify(d", "phony_NetworkSearch_getNrOptionMode_Async_0100', 0, async function (done) {", " * @tc.name    Test getNrOptionMode(-1) to check the callback result\n     *", "phony_NetworkSearch_getNrOptionMode_Async_0500', 0, async function (done) {", "ne) {\n        radio.getNrOptionMode(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getNrOptionMode_Async_0100 1`);\n          expect(true).", "phony_NetworkSearch_getNrOptionMode_Async_0500\n     * @tc.name    Test getN", "phony_NetworkSearch_getNrOptionMode_Promise_0500\n     * @tc.name    Test ge"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getNrOptionMode", "api_method_all": "function getNrOptionMode(slotId: number, callback: AsyncCallback<NrOptionMode>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getNrOptionMode_Promise_0500 fail: ${err}`);\n          ", "phony_NetworkSearch_getNrOptionMode_Async_0500 get fail err: ${err}`);\n    ", "phony_NetworkSearch_getNrOptionMode_Promise_0500', 0, async function (done)", "phony_NetworkSearch_getNrOptionMode_Async_0100 end data: ${JSON.stringify(d", "phony_NetworkSearch_getNrOptionMode_Async_0100 get fail err: ${err}`);\n    ", "phony_NetworkSearch_getNrOptionMode_Promise_0500 end data: ${data}`);\n     ", "      }\n      radio.getNrOptionMode((err, data) => {\n        if (err) {\n   ", "phony_NetworkSearch_getNrOptionMode_Async_0500 end data: ${JSON.stringify(d", "phony_NetworkSearch_getNrOptionMode_Async_0100', 0, async function (done) {", " * @tc.name    Test getNrOptionMode(-1) to check the callback result\n     *", "phony_NetworkSearch_getNrOptionMode_Async_0500', 0, async function (done) {", "ne) {\n        radio.getNrOptionMode(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getNrOptionMode_Async_0100 1`);\n          expect(true).", "phony_NetworkSearch_getNrOptionMode_Async_0500\n     * @tc.name    Test getN", "phony_NetworkSearch_getNrOptionMode_Promise_0500\n     * @tc.name    Test ge"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getNrOptionMode", "api_method_all": "function getNrOptionMode(slotId?: number): Promise<NrOptionMode>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ne) {\n        radio.getNrOptionMode(SLOT_2).then(data => {\n            cons"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getIMEI", "api_method_all": "function getIMEI(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getIMEI_Async_0500 fail: ${err}`);\n            ", "phony_NetworkSearch_getIMEI_Promise_0500 end data: ${data}`);\n     ", "phony_NetworkSearch_getIMEI_Promise_0500', 0, async function (done)", "ne) {\n        radio.getIMEI(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getIMEI_Async_0500\n     * @tc.name    Test getI", "phony_NetworkSearch_getIMEI_Async_0500 end data: ${data}`);\n       ", "phony_NetworkSearch_getIMEI_Promise_0500\n     * @tc.name    Test ge", "phony_NetworkSearch_getIMEI_Promise_0500 fail: ${err}`);\n          ", " * @tc.name    Test getIMEI(-1) to check the callback result\n     *", "phony_NetworkSearch_getIMEI_Async_0500', 0, async function (done) {"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getIMEI", "api_method_all": "function getIMEI(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getIMEI_Async_0500 fail: ${err}`);\n            ", "phony_NetworkSearch_getIMEI_Promise_0500 end data: ${data}`);\n     ", "phony_NetworkSearch_getIMEI_Promise_0500', 0, async function (done)", "ne) {\n        radio.getIMEI(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getIMEI_Async_0500\n     * @tc.name    Test getI", "phony_NetworkSearch_getIMEI_Async_0500 end data: ${data}`);\n       ", "phony_NetworkSearch_getIMEI_Promise_0500\n     * @tc.name    Test ge", "phony_NetworkSearch_getIMEI_Promise_0500 fail: ${err}`);\n          ", " * @tc.name    Test getIMEI(-1) to check the callback result\n     *", "phony_NetworkSearch_getIMEI_Async_0500', 0, async function (done) {"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getIMEI", "api_method_all": "function getIMEI(slotId?: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ne) {\n        radio.getIMEI(SLOT_2).then(data => {\n            cons"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getMEID", "api_method_all": "function getMEID(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getMEID_Async_0100 fail: ${err}`);\n          ex", "phony_NetworkSearch_getMEID_Promise_0100 fail: ${err}`);\n        ex", "phony_NetworkSearch_getMEID_Promise_0100', 0, async function (done)", "phony_NetworkSearch_getMEID_Async_0100 end data: ${data}`);\n       ", "phony_NetworkSearch_getMEID_Promise_0100 end data: ${data}`);\n     ", "      }\n      radio.getMEID(SLOT_2, (err, data) => {\n        if (er", "phony_NetworkSearch_getMEID_Async_0100', 0, async function (done) {"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getMEID", "api_method_all": "function getMEID(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getMEID_Async_0100 fail: ${err}`);\n          ex", "phony_NetworkSearch_getMEID_Promise_0100 fail: ${err}`);\n        ex", "phony_NetworkSearch_getMEID_Promise_0100', 0, async function (done)", "phony_NetworkSearch_getMEID_Async_0100 end data: ${data}`);\n       ", "phony_NetworkSearch_getMEID_Promise_0100 end data: ${data}`);\n     ", "      }\n      radio.getMEID(SLOT_2, (err, data) => {\n        if (er", "phony_NetworkSearch_getMEID_Async_0100', 0, async function (done) {"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getMEID", "api_method_all": "function getMEID(slotId?: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["      }\n      radio.getMEID(SLOT_2).then(data => {\n        console."], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getUniqueDeviceId", "api_method_all": "function getUniqueDeviceId(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getUniqueDeviceId_Promise_0500 end data: ${data}`);\n     ", " * @tc.name    Test getUniqueDeviceId(-1) to check the callback result\n     *", "phony_NetworkSearch_getUniqueDeviceId_Async_0500 fail: ${err}`);\n            ", "phony_NetworkSearch_getUniqueDeviceId_Promise_0500\n     * @tc.name    Test ge", "phony_NetworkSearch_getUniqueDeviceId_Async_0500\n     * @tc.name    Test getU", "ne) {\n        radio.getUniqueDeviceId(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getUniqueDeviceId_Async_0500', 0, async function (done) {", "phony_NetworkSearch_getUniqueDeviceId_Promise_0500', 0, async function (done)", "phony_NetworkSearch_getUniqueDeviceId_Async_0500 end data: ${data}`);\n       ", "phony_NetworkSearch_getUniqueDeviceId_Promise_0500 fail: ${err}`);\n          "], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getUniqueDeviceId", "api_method_all": "function getUniqueDeviceId(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getUniqueDeviceId_Promise_0500 end data: ${data}`);\n     ", " * @tc.name    Test getUniqueDeviceId(-1) to check the callback result\n     *", "phony_NetworkSearch_getUniqueDeviceId_Async_0500 fail: ${err}`);\n            ", "phony_NetworkSearch_getUniqueDeviceId_Promise_0500\n     * @tc.name    Test ge", "phony_NetworkSearch_getUniqueDeviceId_Async_0500\n     * @tc.name    Test getU", "ne) {\n        radio.getUniqueDeviceId(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getUniqueDeviceId_Async_0500', 0, async function (done) {", "phony_NetworkSearch_getUniqueDeviceId_Promise_0500', 0, async function (done)", "phony_NetworkSearch_getUniqueDeviceId_Async_0500 end data: ${data}`);\n       ", "phony_NetworkSearch_getUniqueDeviceId_Promise_0500 fail: ${err}`);\n          "], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getUniqueDeviceId", "api_method_all": "function getUniqueDeviceId(slotId?: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ne) {\n        radio.getUniqueDeviceId(SLOT_2).then(data => {\n            cons"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getPrimarySlotId", "api_method_all": "function getPrimarySlotId(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getPrimarySlotId_Async_0200 end data: ${data}`);\n       ", "phony_NetworkSearch_getPrimarySlotId_Async_0200', 0, async function (done) {", "phony_NetworkSearch_getPrimarySlotId_Async_0200 fail: ${err}`);\n          ex", "      }\n      radio.getPrimarySlotId((err, data) => {\n        if (err) {\n   "], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getPrimarySlotId", "api_method_all": "function getPrimarySlotId(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "setPrimarySlotId", "api_method_all": "function setPrimarySlotId(slotId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_setPrimarySlotId_Promise_0300', 0, async function (done)", "phony_NetworkSearch_setPrimarySlotId_Async_0300 end data: ${data}`);\n       ", "      }\n      radio.setPrimarySlotId(SLOT_0, (err, data) => {\n        if (er", "phony_NetworkSearch_setPrimarySlotId_Async_0300 fail: ${err}`);\n          ex", "phony_NetworkSearch_setPrimarySlotId_Promise_0300 success');\n        done();", "phony_NetworkSearch_setPrimarySlotId_Async_0300', 0, async function (done) {", "phony_NetworkSearch_setPrimarySlotId_Promiss_0300 fail ${err}`);\n        don", "        await radio.setPrimarySlotId(SLOT_0);\n        console.log('Telephony"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "setPrimarySlotId", "api_method_all": "function setPrimarySlotId(slotId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getSignalInformation", "api_method_all": "function getSignalInformation(slotId: number, callback: AsyncCallback<Array<SignalInformation>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["ne) {\n        radio.getSignalInformation(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getSignalInformation_Async_0400', 0, async function (done) {", "phony_NetworkSearch_getSignalInformation_Promise_0400', 0, async function (done)", "phony_NetworkSearch_getSignalInformation_Async_0400 fail err: ${err}`);\n        ", "phony_NetworkSearch_getSignalInformation_Promise_0400 finish data: ${JSON.string", " data = await radio.getSignalInformation(SLOT_2);\n            console.log(\n     ", "phony_NetworkSearch_getSignalInformation_Promise_0400 fail err: ${err}`);\n      ", "phony_NetworkSearch_getSignalInformation_Async_0400 finish data: ${JSON.stringif"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getSignalInformation", "api_method_all": "function getSignalInformation(slotId: number): Promise<Array<SignalInformation>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "isNrSupported", "api_method_all": "function isNrSupported(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["        await radio.isNrSupported(SLOT_0);\n        co", "phony_NetworkSearch_isNrSupported_Promise_0400 fail $", "phony_NetworkSearch_isNrSupported_Promise_0400', 0, a", "SLOT_0) = ' + radio.isNrSupported(SLOT_0));\n        c", " console.log('radio.isNrSupported(SLOT_0) = ' + radio", "phony_NetworkSearch_isNrSupported_Promise_0400 succes"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "isNrSupported", "api_method_all": "function isNrSupported(slotId: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["        await radio.isNrSupported(SLOT_0);\n        co", "phony_NetworkSearch_isNrSupported_Promise_0400 fail $", "phony_NetworkSearch_isNrSupported_Promise_0400', 0, a", "SLOT_0) = ' + radio.isNrSupported(SLOT_0));\n        c", " console.log('radio.isNrSupported(SLOT_0) = ' + radio", "phony_NetworkSearch_isNrSupported_Promise_0400 succes"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "isRadioOn", "api_method_all": "function isRadioOn(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["phony_NetworkSearch_isRadioOn_Promise_0200 fail ${err}`);\n           ", "        await radio.isRadioOn();\n            console.log('Telephony_N", "phony_NetworkSearch_isRadioOn_Async_0200', 0, async function (done) {", "phony_NetworkSearch_isRadioOn_Async_0200\n     * @tc.name    Test The ", "phony_NetworkSearch_isRadioOn_Async_0200  finish');\n            done(", "phony_NetworkSearch_isRadioOn_Promise_0200\n     * @tc.name    Test Th", "phony_NetworkSearch_isRadioOn_Promise_0200 success');\n            don", "phony_NetworkSearch_isRadioOn_Promise_0200', 0, async function (done)", " isOn = await radio.isRadioOn();\n        if (!isOn) {\n            awa", "  Test The function isRadioOn\n     * @tc.desc    Function test\n     *", "phony_NetworkSearch_isRadioOn_Async_0200  fail: ${err}`);\n           ", "ne) {\n        radio.isRadioOn((err) => {\n            if (err) {\n     "], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "isRadioOn", "api_method_all": "function isRadioOn(slotId: number, callback: AsyncCallback<boolean>): void\n  function isRadioOn(slotId?: number): Promise<boolean>;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["phony_NetworkSearch_isRadioOn_Promise_0200 fail ${err}`);\n           ", "        await radio.isRadioOn();\n            console.log('Telephony_N", "phony_NetworkSearch_isRadioOn_Async_0200', 0, async function (done) {", "phony_NetworkSearch_isRadioOn_Async_0200\n     * @tc.name    Test The ", "phony_NetworkSearch_isRadioOn_Async_0200  finish');\n            done(", "phony_NetworkSearch_isRadioOn_Promise_0200\n     * @tc.name    Test Th", "phony_NetworkSearch_isRadioOn_Promise_0200 success');\n            don", "phony_NetworkSearch_isRadioOn_Promise_0200', 0, async function (done)", " isOn = await radio.isRadioOn();\n        if (!isOn) {\n            awa", "  Test The function isRadioOn\n     * @tc.desc    Function test\n     *", "phony_NetworkSearch_isRadioOn_Async_0200  fail: ${err}`);\n           ", "ne) {\n        radio.isRadioOn((err) => {\n            if (err) {\n     "], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "isRadioOn", "api_method_all": "function isRadioOn(slotId?: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "turnOnRadio", "api_method_all": "function turnOnRadio(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["ne) {\n        radio.turnOnRadio((err) => {\n            if (err) {\n     ", "phony_NetworkSearch_turnOnRadio_Async_0200 turnOn fail: ${err}`);\n     ", "phony_NetworkSearch_turnOnRadio_Promise_0200\n     * @tc.name    Test Th", "  Test The function turnOnRadio\n     * @tc.desc    Function test\n     *", "rch_CellInformation turnOnRadio success');\n            await sleep(5000", "\n    async function turnOnRadio() {\n        let isOn = await radio.isRa", "UTO);\n        await turnOnRadio();\n    })\n\n    afterEach(async function", "phony_NetworkSearch_turnOnRadio_Async_0200', 0, async function (done) {", "phony_NetworkSearch_turnOnRadio_Async_0200\n     * @tc.name    Test The ", "phony_NetworkSearch_turnOnRadio_Async_0200 turnOn finish');\n           ", "phony_NetworkSearch_turnOnRadio_Promise_0200 success');\n            don", "phony_NetworkSearch_turnOnRadio_Promise_0200', 0, async function (done)", "UTO);\n        await turnOnRadio();\n    })\n\n    afterAll(async function ", "phony_NetworkSearch_turnOnRadio_Promise_0200 fail ${err}`);\n           ", "        await radio.turnOnRadio();\n            console.log('Telephony_N"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "turnOnRadio", "api_method_all": "function turnOnRadio(slotId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["ne) {\n        radio.turnOnRadio((err) => {\n            if (err) {\n     ", "phony_NetworkSearch_turnOnRadio_Async_0200 turnOn fail: ${err}`);\n     ", "phony_NetworkSearch_turnOnRadio_Promise_0200\n     * @tc.name    Test Th", "  Test The function turnOnRadio\n     * @tc.desc    Function test\n     *", "rch_CellInformation turnOnRadio success');\n            await sleep(5000", "\n    async function turnOnRadio() {\n        let isOn = await radio.isRa", "UTO);\n        await turnOnRadio();\n    })\n\n    afterEach(async function", "phony_NetworkSearch_turnOnRadio_Async_0200', 0, async function (done) {", "phony_NetworkSearch_turnOnRadio_Async_0200\n     * @tc.name    Test The ", "phony_NetworkSearch_turnOnRadio_Async_0200 turnOn finish');\n           ", "phony_NetworkSearch_turnOnRadio_Promise_0200 success');\n            don", "phony_NetworkSearch_turnOnRadio_Promise_0200', 0, async function (done)", "UTO);\n        await turnOnRadio();\n    })\n\n    afterAll(async function ", "phony_NetworkSearch_turnOnRadio_Promise_0200 fail ${err}`);\n           ", "        await radio.turnOnRadio();\n            console.log('Telephony_N"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "turnOnRadio", "api_method_all": "function turnOnRadio(slotId?: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "turnOffRadio", "api_method_all": "function turnOffRadio(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["phony_NetworkSearch_turnOffRadio_Async_0200 turnOff finish');\n          ", "phony_NetworkSearch_turnOffRadio_Promise_0200', 0, async function (done)", "  Test The function turnOffRadio\n     * @tc.desc    Function test\n     *", "phony_NetworkSearch_turnOffRadio_Promise_0200 success');\n            don", "phony_NetworkSearch_turnOffRadio_Promise_0200 fail ${err}`);\n           ", "phony_NetworkSearch_turnOffRadio_Async_0200\n     * @tc.name    Test The ", "phony_NetworkSearch_turnOffRadio_Async_0200 turnOff fail: ${err}`);\n    ", "        await radio.turnOffRadio();\n            console.log('Telephony_N", "ne) {\n        radio.turnOffRadio((err) => {\n            if (err) {\n     ", "phony_NetworkSearch_turnOffRadio_Promise_0200\n     * @tc.name    Test Th", "phony_NetworkSearch_turnOffRadio_Async_0200', 0, async function (done) {"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "turnOffRadio", "api_method_all": "function turnOffRadio(slotId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["phony_NetworkSearch_turnOffRadio_Async_0200 turnOff finish');\n          ", "phony_NetworkSearch_turnOffRadio_Promise_0200', 0, async function (done)", "  Test The function turnOffRadio\n     * @tc.desc    Function test\n     *", "phony_NetworkSearch_turnOffRadio_Promise_0200 success');\n            don", "phony_NetworkSearch_turnOffRadio_Promise_0200 fail ${err}`);\n           ", "phony_NetworkSearch_turnOffRadio_Async_0200\n     * @tc.name    Test The ", "phony_NetworkSearch_turnOffRadio_Async_0200 turnOff fail: ${err}`);\n    ", "        await radio.turnOffRadio();\n            console.log('Telephony_N", "ne) {\n        radio.turnOffRadio((err) => {\n            if (err) {\n     ", "phony_NetworkSearch_turnOffRadio_Promise_0200\n     * @tc.name    Test Th", "phony_NetworkSearch_turnOffRadio_Async_0200', 0, async function (done) {"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "turnOffRadio", "api_method_all": "function turnOffRadio(slotId?: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getOperatorName", "api_method_all": "function getOperatorName(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getOperatorName_Async_0400 finish  data: ${data}`);\n   ", " data = await radio.getOperatorName(SLOT_2);\n            console.log(`Telep", "phony_NetworkSearch_getOperatorName_Promise_0400 finish data: ${data}`);\n  ", "t of \"slotId\", test getOperatorName() to view the callback result\n     * @t", "phony_NetworkSearch_getOperatorName_Async_0400', 0, async function (done) {", "phony_NetworkSearch_getOperatorName_Async_0400 fail err: ${err}`);\n        ", "ne) {\n        radio.getOperatorName(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getOperatorName_Promise_0400\n     * @tc.name    Verify ", "phony_NetworkSearch_getOperatorName_Promise_0400 fail err: ${err}`);\n      ", "phony_NetworkSearch_getOperatorName_Promise_0400', 0, async function (done)"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getOperatorName", "api_method_all": "function getOperatorName(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "setPreferredNetwork", "api_method_all": "function setPreferredNetwork(slotId: number, networkMode: PreferredNetworkMode, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": ["ne) {\n        radio.setPreferredNetwork(SLOT_0, PREFERRED_MODE_ERR2, (err, data", "ne) {\n        radio.setPreferredNetwork(SLOT_2, radio.PREFERRED_NETWORK_MODE_GS", "phony_NetworkSearch_setPreferredNetwork_Promise_0100', 0, async function (done)", "phony_NetworkSearch_setPreferredNetwork_Async_0100 get fail err: ${err}`);\n    ", "phony_NetworkSearch_setPreferredNetwork_Async_0100\n     * @tc.name    Verify th", "        await radio.setPreferredNetwork(SLOT_2, radio.PREFERRED_NETWORK_MODE_GS", "t of \"slotId\", test setPreferredNetwork() return result\n     * @tc.desc    Func", "phony_NetworkSearch_setPreferredNetwork_Promise_0600\n     * @tc.name    Verify ", "bnormal input, test setPreferredNetwork() to view the callback result\n     * @t", "phony_NetworkSearch_setPreferredNetwork_Async_0600 finish data: ${JSON.stringif", "        await radio.setPreferredNetwork(SLOT_0, PREFERRED_MODE_ERR2);\n         ", "phony_NetworkSearch_setPreferredNetwork_Promise_0100 fail err: ${err}`);\n      ", "phony_NetworkSearch_setPreferredNetwork_Async_0100 fail err: ${data}`);\n       ", " *             test setPreferredNetwork() to view the callback result\n     * @t", "phony_NetworkSearch_setPreferredNetwork_Async_0100 set  err: ${err}`);\n        ", "phony_NetworkSearch_setPreferredNetwork_Async_0100 finish data: ${data}`);\n    ", "phony_NetworkSearch_setPreferredNetwork_Async_0600', 0, async function (done) {", "phony_NetworkSearch_setPreferredNetwork_Promise_0600 fail err: ${err}`);\n      ", "phony_NetworkSearch_setPreferredNetwork_Promise_0600 finish data: ${data}`);\n  ", "phony_NetworkSearch_setPreferredNetwork_Promise_0600 set fail: not go to err');", "phony_NetworkSearch_setPreferredNetwork_Async_0600 fail: not go to err ${data}`", "phony_NetworkSearch_setPreferredNetwork_Promise_0100 finish data: ${data}`);\n  ", "        await radio.setPreferredNetwork(SLOT_0, radio.PREFERRED_NETWORK_MODE_AU", "phony_NetworkSearch_setPreferredNetwork_Promise_0100 set fail: not go to err');", "phony_NetworkSearch_setPreferredNetwork_Async_0600 get fail err: ${err}`);\n    ", "phony_NetworkSearch_setPreferredNetwork_Async_0600 finish err: ${err}`);\n      ", "phony_NetworkSearch_setPreferredNetwork_Async_0600\n     * @tc.name    Verify th", "phony_NetworkSearch_setPreferredNetwork_Promise_0600', 0, async function (done)", "phony_NetworkSearch_setPreferredNetwork_Async_0100', 0, async function (done) {", "phony_NetworkSearch_setPreferredNetwork_Promise_0100\n     * @tc.name    Verify "], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "setPreferredNetwork", "api_method_all": "function setPreferredNetwork(slotId: number, networkMode: PreferredNetworkMode): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getPreferredNetwork", "api_method_all": "function getPreferredNetwork(slotId: number, callback: AsyncCallback<PreferredNetworkMode>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["phony_NetworkSearch_getPreferredNetwork_Promise_0700', 0, async function (done)", "phony_NetworkSearch_getPreferredNetwork_Promise_0700 finish err: ${err}`);\n    ", "              radio.getPreferredNetwork(SLOT_0, (err, data) => {\n              ", " data = await radio.getPreferredNetwork(SLOT_2);\n            console.log(`Telep", "phony_NetworkSearch_getPreferredNetwork_Async_0700 fail not into err data: ${da", "phony_NetworkSearch_getPreferredNetwork_Promise_0700 fail  data: ${data}`);\n   ", "phony_NetworkSearch_getPreferredNetwork_Async_0700 get PASS err: ${err}`);\n    ", "phony_NetworkSearch_getPreferredNetwork_Async_0700\n     * @tc.name    Verify th", " data = await radio.getPreferredNetwork(SLOT_0);\n                console.log(`T", "ne) {\n        radio.getPreferredNetwork(SLOT_2, (err, data) => {\n            if", "phony_NetworkSearch_getPreferredNetwork_Promise_0700\n     * @tc.name    Verify ", "t of \"slotId\", test getPreferredNetwork() to view the callback result\n     * @t", "t of \"slotId\", test getPreferredNetwork() to view the return result\n     * @tc.", "phony_NetworkSearch_getPreferredNetwork_Async_0700', 0, async function (done) {"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "radio", "api_method_name": "getPreferredNetwork", "api_method_all": "function getPreferredNetwork(slotId: number): Promise<PreferredNetworkMode>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_all": "export enum PreferredNetworkMode {\n    PREFERRED_NETWORK_MODE_GSM = 1,\n    PREFERRED_NETWORK_MODE_WCDMA = 2,\n    PREFERRED_NETWORK_MODE_LTE = 3,\n    PREFERRED_NETWORK_MODE_LTE_WCDMA = 4,\n    PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM = 5,\n    PREFERRED_NETWORK_MODE_WCDMA_GSM = 6,\n    PREFERRED_NETWORK_MODE_CDMA = 7,\n    PREFERRED_NETWORK_MODE_EVDO = 8,\n    PREFERRED_NETWORK_MODE_EVDO_CDMA = 9,\n    PREFERRED_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA = 10,\n    PREFERRED_NETWORK_MODE_LTE_EVDO_CDMA = 11,\n    PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA = 12,\n    PREFERRED_NETWORK_MODE_TDSCDMA = 13,\n    PREFERRED_NETWORK_MODE_TDSCDMA_GSM = 14,\n    PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA = 15,\n    PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM = 16,\n    PREFERRED_NETWORK_MODE_LTE_TDSCDMA = 17,\n    PREFERRED_NETWORK_MODE_LTE_TDSCDMA_GSM = 18,\n    PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA = 19,\n    PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM = 20,\n    PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 21,\n    PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 22,\n    PREFERRED_NETWORK_MODE_NR = 31,\n    PREFERRED_NETWORK_MODE_NR_LTE = 32,\n    PREFERRED_NETWORK_MODE_NR_LTE_WCDMA = 33,\n    PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM = 34,\n    PREFERRED_NETWORK_MODE_NR_LTE_EVDO_CDMA = 35,\n    PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA = 36,\n    PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA = 37,\n    PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_GSM = 38,\n    PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA = 39,\n    PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM = 40,\n    PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 41,\n    PREFERRED_NETWORK_MODE_MAX_VALUE = 99,\n  }", "api_method_name": "PreferredNetworkMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 59, "since": 8, "api_used": "\u662f", "lines": ["fo(\"Telephony_radio_PreferredNetworkMode_0700 end\")\n      do", "fo(\"Telephony_radio_PreferredNetworkMode_1100 start\")\n      ", "fo(\"Telephony_radio_PreferredNetworkMode_0500 end\")\n      do", "it('Telephony_radio_PreferredNetworkMode_1100', 0, async fun", "fo(\"Telephony_radio_PreferredNetworkMode_0500 start\")\n      ", "fo(\"Telephony_radio_PreferredNetworkMode_1000 end\")\n      do", "     }\n      expect(PreferredNetworkMode.PREFERRED_NETWORK_M", "fo(\"Telephony_radio_PreferredNetworkMode_0800 start\")\n      ", "fo(\"Telephony_radio_PreferredNetworkMode_0800 end\")\n      do", "fo(\"Telephony_radio_PreferredNetworkMode_0900 start\")\n      ", "fo(\"Telephony_radio_PreferredNetworkMode_0600 start\")\n      ", "it('Telephony_radio_PreferredNetworkMode_0700', 0, async fun", "it('Telephony_radio_PreferredNetworkMode_0800', 0, async fun", "it('Telephony_radio_PreferredNetworkMode_0900', 0, async fun", "it('Telephony_radio_PreferredNetworkMode_1000', 0, async fun", "fo(\"Telephony_radio_PreferredNetworkMode_1000 start\")\n      ", "rue();\n      expect(PreferredNetworkMode.PREFERRED_NETWORK_M", "fo(\"Telephony_radio_PreferredNetworkMode_0600 end\")\n      do", "fo(\"Telephony_radio_PreferredNetworkMode_0900 end\")\n      do", "it('Telephony_radio_PreferredNetworkMode_0600', 0, async fun", "fo(\"Telephony_radio_PreferredNetworkMode_0700 start\")\n      ", "tart\")\n      expect(PreferredNetworkMode.PREFERRED_NETWORK_M", "it('Telephony_radio_PreferredNetworkMode_0500', 0, async fun"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_GSM", "api_method_all": "PREFERRED_NETWORK_MODE_GSM = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["twork(SLOT_2, radio.PREFERRED_NETWORK_MODE_GSM, (err, data) => {\n ", "twork(SLOT_2, radio.PREFERRED_NETWORK_MODE_GSM);\n            conso"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_WCDMA", "api_method_all": "PREFERRED_NETWORK_MODE_WCDMA = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_WCDMA_GSM === 6).assertTr", "referredNetworkMode.PREFERRED_NETWORK_MODE_WCDMA === 2).assertTrue()", "referredNetworkMode.PREFERRED_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA === 1"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_LTE", "api_method_all": "PREFERRED_NETWORK_MODE_LTE = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM === 5).as", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_E", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE === 3).assertTrue()", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA === 1", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_WCDMA === 4).assert", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_EVDO_CDMA === 11).a", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM =", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA === 17).ass", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_GSM === 18)"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_LTE_WCDMA", "api_method_all": "PREFERRED_NETWORK_MODE_LTE_WCDMA = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_WCDMA === 4).assertTrue()", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM === 5).assertTr", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA === 1"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM", "api_method_all": "PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA === 12).a", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM === 5).assertTrue()"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_WCDMA_GSM", "api_method_all": "PREFERRED_NETWORK_MODE_WCDMA_GSM = 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_WCDMA_GSM === 6).assertTrue()", "referredNetworkMode.PREFERRED_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA === 10).a"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_CDMA", "api_method_all": "PREFERRED_NETWORK_MODE_CDMA = 7,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_CDMA === 7).assertTrue()"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_EVDO", "api_method_all": "PREFERRED_NETWORK_MODE_EVDO = 8,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_EVDO_CDMA === 9).assertT", "referredNetworkMode.PREFERRED_NETWORK_MODE_EVDO === 8).assertTrue()"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_EVDO_CDMA", "api_method_all": "PREFERRED_NETWORK_MODE_EVDO_CDMA = 9,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_EVDO_CDMA === 9).assertTrue()"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA", "api_method_all": "PREFERRED_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA = 10,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_WCDMA_GSM_EVDO_CDMA === 10).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_LTE_EVDO_CDMA", "api_method_all": "PREFERRED_NETWORK_MODE_LTE_EVDO_CDMA = 11,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_EVDO_CDMA === 11).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA", "api_method_all": "PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA = 12,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_WCDMA_GSM_EVDO_CDMA === 12).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_TDSCDMA", "api_method_all": "PREFERRED_NETWORK_MODE_TDSCDMA = 13,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_GSM === 14).assertT", "referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM === 16).a", "referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA === 15).asser", "referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA === 13).assertTrue(", "referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_TDSCDMA_GSM", "api_method_all": "PREFERRED_NETWORK_MODE_TDSCDMA_GSM = 14,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_GSM === 14).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA", "api_method_all": "PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA = 15,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA === 15).assertTrue(", "referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA ===21", "referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM === 16).assertT"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM", "api_method_all": "PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM = 16,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM === 16).assertTrue(", "referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA ===21).as"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_LTE_TDSCDMA", "api_method_all": "PREFERRED_NETWORK_MODE_LTE_TDSCDMA = 17,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM === 20).a", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA === 19).asser", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_GSM === 18).assertT", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA === 17).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_LTE_TDSCDMA_GSM", "api_method_all": "PREFERRED_NETWORK_MODE_LTE_TDSCDMA_GSM = 18,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_GSM === 18).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA", "api_method_all": "PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA = 19,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM === 20).assertT", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA === 2", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA === 19).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM", "api_method_all": "PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM = 20,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA === 22).a", "referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM === 20).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA", "api_method_all": "PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 21,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_TDSCDMA_WCDMA_GSM_EVDO_CDMA ===21).assertTrue()"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA", "api_method_all": "PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 22,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA === 22).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR", "api_method_all": "PREFERRED_NETWORK_MODE_NR = 31,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA =", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA === 33).a", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR === 31).assertTrue(", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_GSM ===", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM ===34", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA === 37)", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_G", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_EVDO_CDMA === 3", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE === 32).assertT"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR_LTE", "api_method_all": "PREFERRED_NETWORK_MODE_NR_LTE = 32,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM =", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA ===39", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_GSM === 38)", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM ===34).as", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_E", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA === 33).asser", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_EVDO_CDMA === 35).a", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE === 32).assertTrue(", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA === 37).ass"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR_LTE_WCDMA", "api_method_all": "PREFERRED_NETWORK_MODE_NR_LTE_WCDMA = 33,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA === 3", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM ===34).assertTr", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA === 33).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM", "api_method_all": "PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM = 34,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA === 36).a", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM ===34).assertTrue()"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR_LTE_EVDO_CDMA", "api_method_all": "PREFERRED_NETWORK_MODE_NR_LTE_EVDO_CDMA = 35,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_EVDO_CDMA === 35).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA", "api_method_all": "PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA = 36,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_WCDMA_GSM_EVDO_CDMA === 36).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA", "api_method_all": "PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA = 37,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM === 40).a", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_GSM === 38).assertT", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA ===39).assert", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA === 37).assertTrue(", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_GSM", "api_method_all": "PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_GSM = 38,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_GSM === 38).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA", "api_method_all": "PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA = 39,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA === 4", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM === 40).assertT", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA ===39).assertTrue()"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM", "api_method_all": "PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM = 40,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM === 40).assertTrue(", "referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA === 41).a"], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA", "api_method_all": "PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA = 41,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA_GSM_EVDO_CDMA === 41).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreferredNetworkMode", "api_method_name": "PREFERRED_NETWORK_MODE_MAX_VALUE", "api_method_all": "PREFERRED_NETWORK_MODE_MAX_VALUE = 99,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["referredNetworkMode.PREFERRED_NETWORK_MODE_MAX_VALUE === 99).assertTrue("], "files": ["RadioJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_all": "export enum RadioTechnology {\n    \n    RADIO_TECHNOLOGY_UNKNOWN = 0,\n\n    \n    RADIO_TECHNOLOGY_GSM = 1,\n\n    \n    RADIO_TECHNOLOGY_1XRTT = 2,\n\n    \n    RADIO_TECHNOLOGY_WCDMA = 3,\n\n    \n    RADIO_TECHNOLOGY_HSPA = 4,\n\n    \n    RADIO_TECHNOLOGY_HSPAP = 5,\n\n    \n    RADIO_TECHNOLOGY_TD_SCDMA = 6,\n\n    \n    RADIO_TECHNOLOGY_EVDO = 7,\n\n    \n    RADIO_TECHNOLOGY_EHRPD = 8,\n\n    \n    RADIO_TECHNOLOGY_LTE = 9,\n\n    \n    RADIO_TECHNOLOGY_LTE_CA = 10,\n\n    \n    RADIO_TECHNOLOGY_IWLAN = 11,\n\n    \n    RADIO_TECHNOLOGY_NR = 12\n  }", "api_method_name": "RadioTechnology", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_UNKNOWN", "api_method_all": "RADIO_TECHNOLOGY_UNKNOWN = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_UNKNOWN === 0).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_GSM", "api_method_all": "RADIO_TECHNOLOGY_GSM = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["   radioTech: radio.RADIO_TECHNOLOGY_GSM.toString(),\n       "], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_1XRTT", "api_method_all": "RADIO_TECHNOLOGY_1XRTT = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_1XRTT === 2).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_WCDMA", "api_method_all": "RADIO_TECHNOLOGY_WCDMA = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_WCDMA === 3).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_HSPA", "api_method_all": "RADIO_TECHNOLOGY_HSPA = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_HSPA === 4).assertTrue()", "       expect(radio.RADIO_TECHNOLOGY_HSPAP === 5).assertTrue("], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_HSPAP", "api_method_all": "RADIO_TECHNOLOGY_HSPAP = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_HSPAP === 5).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_TD_SCDMA", "api_method_all": "RADIO_TECHNOLOGY_TD_SCDMA = 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_TD_SCDMA === 6).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_EVDO", "api_method_all": "RADIO_TECHNOLOGY_EVDO = 7,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_EVDO === 7).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_EHRPD", "api_method_all": "RADIO_TECHNOLOGY_EHRPD = 8,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_EHRPD === 8).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_LTE", "api_method_all": "RADIO_TECHNOLOGY_LTE = 9,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_LTE_CA === 10).assertTr", "       expect(radio.RADIO_TECHNOLOGY_LTE === 9).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_LTE_CA", "api_method_all": "RADIO_TECHNOLOGY_LTE_CA = 10,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_LTE_CA === 10).assertTrue("], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_IWLAN", "api_method_all": "RADIO_TECHNOLOGY_IWLAN = 11,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_IWLAN === 11).assertTrue("], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioTechnology", "api_method_name": "RADIO_TECHNOLOGY_NR", "api_method_all": "RADIO_TECHNOLOGY_NR = 12", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.RADIO_TECHNOLOGY_NR === 12).assertTrue("], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SignalInformation", "api_method_all": "export interface SignalInformation {\n    \n    signalType: NetworkType;\n\n    \n    signalLevel: number;\n  }", "api_method_name": "SignalInformation", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["ta = await radio.getSignalInformation(SLOT_2);\n          ", "ny_NetworkSearch_getSignalInformation_Async_0400 fail err", " {\n        radio.getSignalInformation(SLOT_2, (err, data)", "ny_NetworkSearch_getSignalInformation_Async_0400', 0, asy", "ny_NetworkSearch_getSignalInformation_Promise_0400 finish", "ny_NetworkSearch_getSignalInformation_Promise_0400', 0, a", "ny_NetworkSearch_getSignalInformation_Promise_0400 fail e", "ny_NetworkSearch_getSignalInformation_Async_0400 finish d"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SignalInformation", "api_method_name": "signalType", "api_method_all": "signalType: NetworkType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["].signalInformation.signalType);\n        expect(NE", "\n\t\t\t\texpect(data[0].signalType != radio.NETWORK_TY"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SignalInformation", "api_method_name": "signalLevel", "api_method_all": "signalLevel: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["].signalInformation.signalLevel);\n        expect(da", "\n\t\t\t\texpect(data[0].signalLevel != -1).assertTrue()"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkType", "api_method_all": "export enum NetworkType {\n    \n    NETWORK_TYPE_UNKNOWN,\n\n    \n    NETWORK_TYPE_GSM,\n\n    \n    NETWORK_TYPE_CDMA,\n\n    \n    NETWORK_TYPE_WCDMA,\n\n    \n    NETWORK_TYPE_TDSCDMA,\n\n    \n    NETWORK_TYPE_LTE,\n\n    \n    NETWORK_TYPE_NR\n  }", "api_method_name": "NetworkType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkType", "api_method_name": "NETWORK_TYPE_UNKNOWN", "api_method_all": "NETWORK_TYPE_UNKNOWN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.NETWORK_TYPE_UNKNOWN === 0).assertTrue()", "PES = [\n      radio.NETWORK_TYPE_UNKNOWN,\n      radio.NETWOR"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkType", "api_method_name": "NETWORK_TYPE_GSM", "api_method_all": "NETWORK_TYPE_GSM,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["NKNOWN,\n      radio.NETWORK_TYPE_GSM,\n      radio.NETWOR", "tworkType === radio.NETWORK_TYPE_GSM) {\n          expect", "       expect(radio.NETWORK_TYPE_GSM === 1).assertTrue()"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkType", "api_method_name": "NETWORK_TYPE_CDMA", "api_method_all": "NETWORK_TYPE_CDMA,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["PE_GSM,\n      radio.NETWORK_TYPE_CDMA,\n      radio.NETWOR", "       expect(radio.NETWORK_TYPE_CDMA === 2).assertTrue()"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkType", "api_method_name": "NETWORK_TYPE_WCDMA", "api_method_all": "NETWORK_TYPE_WCDMA,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["tworkType === radio.NETWORK_TYPE_WCDMA) {\n          expect", "E_CDMA,\n      radio.NETWORK_TYPE_WCDMA,\n      radio.NETWOR", "signalType != radio.NETWORK_TYPE_WCDMA).assertTrue();\n\t\t\t}", "       expect(radio.NETWORK_TYPE_WCDMA === 3).assertTrue()"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkType", "api_method_name": "NETWORK_TYPE_TDSCDMA", "api_method_all": "NETWORK_TYPE_TDSCDMA,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["_WCDMA,\n      radio.NETWORK_TYPE_TDSCDMA,\n      radio.NETWOR", "       expect(radio.NETWORK_TYPE_TDSCDMA === 4).assertTrue()", "tworkType === radio.NETWORK_TYPE_TDSCDMA) {\n          expect"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkType", "api_method_name": "NETWORK_TYPE_LTE", "api_method_all": "NETWORK_TYPE_LTE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["DSCDMA,\n      radio.NETWORK_TYPE_LTE,\n      radio.NETWOR", "tworkType === radio.NETWORK_TYPE_LTE) {\n          expect", "       expect(radio.NETWORK_TYPE_LTE === 5).assertTrue()"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkState", "api_method_all": "export interface NetworkState {\n    \n    longOperatorName: string;\n\n    \n    shortOperatorName: string;\n\n    \n    plmnNumeric: string;\n\n    \n    isRoaming: boolean;\n\n    \n    regState: RegState;\n\n    \n    cfgTech: RadioTechnology;\n\n    \n    nsaState: NsaState;\n\n    \n    isCaActive: boolean;\n\n    \n    isEmergency: boolean;\n  }", "api_method_name": "NetworkState", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["ny_NetworkSearch_getNetworkState_Promise_0700 finish", "ny_NetworkSearch_getNetworkState_Async_0700', 0, asy", "     await radio.getNetworkState(SLOT_2);\n          ", "ny_NetworkSearch_getNetworkState_Async_0700 finish e", "phony_NetworkSearch_NetworkState_Async_0100 get fail", "   }\n      radio.getNetworkState((err, data) => {\n  ", "ny_NetworkSearch_getNetworkState_Promise_0700 fail n", "phony_NetworkSearch_NetworkState_Async_0100 end data", " {\n        radio.getNetworkState(SLOT_2, (err, data)", "ny_NetworkSearch_getNetworkState_Promise_0700', 0, a", "\n        expect(garrNetworkState).assertContain(data", " status\n    let garrNetworkState = [\n      radio.NET", "ny_NetworkSearch_getNetworkState_Async_0700 fail not", "phony_NetworkSearch_NetworkState_Async_0100', 0, asy"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkState", "api_method_name": "longOperatorName", "api_method_all": "longOperatorName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["`);\n\t\t\t\texpect(data.longOperatorName != 'longOperatorNam", "ongOperatorName != 'longOperatorName').assertTrue();\n\t\t\t"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkState", "api_method_name": "shortOperatorName", "api_method_all": "shortOperatorName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ortOperatorName != 'shortOperatorName').assertTrue();\n\t\t\t", "();\n\t\t\t\texpect(data.shortOperatorName != 'shortOperatorNa"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkState", "api_method_name": "plmnNumeric", "api_method_all": "plmnNumeric: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ata.plmnNumeric != 'plmnNumeric').assertTrue();\n\t\t\t", "();\n\t\t\t\texpect(data.plmnNumeric != 'plmnNumeric').a"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkState", "api_method_name": "isRoaming", "api_method_all": "isRoaming: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["();\n\t\t\t\texpect(data.isRoaming != true).assertTrue"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkState", "api_method_name": "regState", "api_method_all": "regState: RegState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["();\n\t\t\t\texpect(data.regState != radio.REG_STATE_"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkState", "api_method_name": "cfgTech", "api_method_all": "cfgTech: RadioTechnology", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": [".assertContain(data.cfgTech);\n          done();"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkState", "api_method_name": "nsaState", "api_method_all": "nsaState: NsaState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["();\n\t\t\t\texpect(data.nsaState != radio.NSA_STATE_"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkState", "api_method_name": "isCaActive", "api_method_all": "isCaActive: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["();\n\t\t\t\texpect(data.isCaActive != true).assertTrue"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkState", "api_method_name": "isEmergency", "api_method_all": "isEmergency: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["lephony_CallManager_isEmergencyPhoneNumber_Async_13", "0, options -1. Call isEmergencyPhoneNumber() to che", "r data = await call.isEmergencyPhoneNumber('120', e", "T_ID);\n        call.isEmergencyPhoneNumber('110', e", "lephony_CallManager_isEmergencyPhoneNumber_Promise_"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RegState", "api_method_all": "export enum RegState {\n    \n    REG_STATE_NO_SERVICE = 0,\n\n    \n    REG_STATE_IN_SERVICE = 1,\n\n    \n    REG_STATE_EMERGENCY_CALL_ONLY = 2,\n\n    \n    REG_STATE_POWER_OFF = 3\n  }", "api_method_name": "RegState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RegState", "api_method_name": "REG_STATE_NO_SERVICE", "api_method_all": "REG_STATE_NO_SERVICE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.REG_STATE_NO_SERVICE === 0).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RegState", "api_method_name": "REG_STATE_IN_SERVICE", "api_method_all": "REG_STATE_IN_SERVICE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.REG_STATE_IN_SERVICE === 1).assertTrue()", "a.regState != radio.REG_STATE_IN_SERVICE).assertTrue();\n\t\t\t\t"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RegState", "api_method_name": "REG_STATE_EMERGENCY_CALL_ONLY", "api_method_all": "REG_STATE_EMERGENCY_CALL_ONLY = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.REG_STATE_EMERGENCY_CALL_ONLY === 2).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RegState", "api_method_name": "REG_STATE_POWER_OFF", "api_method_all": "REG_STATE_POWER_OFF = 3", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.REG_STATE_POWER_OFF === 3).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NsaState", "api_method_all": "export enum NsaState {\n    \n    NSA_STATE_NOT_SUPPORT = 1,\n\n    \n    NSA_STATE_NO_DETECT = 2,\n\n    \n    NSA_STATE_CONNECTED_DETECT = 3,\n\n    \n    NSA_STATE_IDLE_DETECT = 4,\n\n    \n    NSA_STATE_DUAL_CONNECTED = 5,\n\n    \n    NSA_STATE_SA_ATTACHED = 6\n  }", "api_method_name": "NsaState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NsaState", "api_method_name": "NSA_STATE_NOT_SUPPORT", "api_method_all": "NSA_STATE_NOT_SUPPORT = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.NSA_STATE_NOT_SUPPORT === 1).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NsaState", "api_method_name": "NSA_STATE_NO_DETECT", "api_method_all": "NSA_STATE_NO_DETECT = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.NSA_STATE_NO_DETECT === 2).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NsaState", "api_method_name": "NSA_STATE_CONNECTED_DETECT", "api_method_all": "NSA_STATE_CONNECTED_DETECT = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.NSA_STATE_CONNECTED_DETECT === 3).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NsaState", "api_method_name": "NSA_STATE_IDLE_DETECT", "api_method_all": "NSA_STATE_IDLE_DETECT = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.NSA_STATE_IDLE_DETECT === 4).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NsaState", "api_method_name": "NSA_STATE_DUAL_CONNECTED", "api_method_all": "NSA_STATE_DUAL_CONNECTED = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.NSA_STATE_DUAL_CONNECTED === 5).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NsaState", "api_method_name": "NSA_STATE_SA_ATTACHED", "api_method_all": "NSA_STATE_SA_ATTACHED = 6", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.NSA_STATE_SA_ATTACHED === 6).assertTrue()", "a.nsaState != radio.NSA_STATE_SA_ATTACHED).assertTrue();\n\t\t\t\t"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CellInformation", "api_method_all": "export interface CellInformation {\n    \n    networkType: NetworkType;\n\n    \n    isCamped: boolean;\n\n    \n    timeStamp: number;\n\n    \n    signalInformation: SignalInformation;\n\n    data: CdmaCellInformation | GsmCellInformation | LteCellInformation | NrCellInformation | TdscdmaCellInformation\n      | WcdmaCellInformation;\n  }", "api_method_name": "CellInformation", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 24, "since": 8, "api_used": "\u662f", "lines": ["ny_NetworkSearch_getCellInformation_Async_0100 1`);\n   ", "Telephony_Radio_CdmaCellInformation_sid_0100 end-------", "ny_NetworkSearch_getCellInformation_Async_0100 fail: ${", "Telephony_Radio_CdmaCellInformation_sid_0100', 0, async", "@tc.name    Test getCellInformation() with anomalous so", "ny_NetworkSearch_getCellInformation_Async_0500', 0, asy", "\n    function assertCellInformation(data) {\n      expec", "ny_NetworkSearch_getCellInformation_Async_0100', 0, asy", " {\n        radio.getCellInformation(SLOT_2).then(data =", "ny_NetworkSearch_getCellInformation_Async_0500\n     * @", "e {\n          assertCellInformation(data);\n          do", "Telephony_Radio_CdmaCellInformation_sid_0100 start-----", "ny_NetworkSearch_getCellInformation_Async_0500 end data", "phony_NetworkSearch_CellInformation sleep ${timeout}ms`", "ny_NetworkSearch_getCellInformation_Promise_0500 fail: ", " {\n        radio.getCellInformation(SLOT_2, (err, data)", "ny_NetworkSearch_getCellInformation_Promise_0500', 0, a", "ny_NetworkSearch_getCellInformation_Promise_0500 end da", "ny_NetworkSearch_getCellInformation_Async_0500 fail: ${", "ny_NetworkSearch_getCellInformation_Promise_0500\n     *", "   }\n      radio.getCellInformation((err, data) => {\n  ", "phony_NetworkSearch_CellInformation turnOnRadio success", "ny_NetworkSearch_getCellInformation_Async_0100 end data"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CellInformation", "api_method_name": "networkType", "api_method_all": "networkType: NetworkType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": [" } else if (data[i].networkType === radio.NETWORK_T", "        if (data[0].networkType === radio.NETWORK_T", "sertContain(data[i].networkType);\n        expect(da"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CellInformation", "api_method_name": "isCamped", "api_method_all": "isCamped: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["     expect(data[i].isCamped).assertTrue();\n    "], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CellInformation", "api_method_name": "timeStamp", "api_method_all": "timeStamp: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["     expect(data[i].timeStamp).assertLarger(0);\n "], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CellInformation", "api_method_name": "signalInformation", "api_method_all": "signalInformation: SignalInformation", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["sertContain(data[i].signalInformation.signalLevel);\n     ", "signalInfoChange', (signalInformation) => {\n        expec", "sertContain(data[i].signalInformation.signalType);\n      ", "d: SLOT_0\n      }, (signalInformation) => {\n        expec"], "files": ["RadioSecondJsunit.test.ets", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CdmaCellInformation", "api_method_all": "export interface CdmaCellInformation {\n    baseId: number;\n    latitude: number;\n    longitude: number;\n    nid: number;\n    sid: number;\n  }", "api_method_name": "CdmaCellInformation", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["----Telephony_Radio_CdmaCellInformation_sid_0100 start-----", "it('Telephony_Radio_CdmaCellInformation_sid_0100', 0, async", "----Telephony_Radio_CdmaCellInformation_sid_0100 end-------"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CdmaCellInformation", "api_method_name": "baseId", "api_method_all": "baseId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.baseId <= CELL_LAC_TAC_MAX", "ormatio = {\n        baseId: 1,\n        latitud", "expect(data[i].data.baseId >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CdmaCellInformation", "api_method_name": "latitude", "api_method_all": "latitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.latitude <= CELL_GSM_CELLID_", " baseId: 1,\n        latitude: 39,\n        longit", "expect(data[i].data.latitude >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CdmaCellInformation", "api_method_name": "longitude", "api_method_all": "longitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.longitude <= CELL_ARFCN_MAX).", "titude: 39,\n        longitude: 116,\n        nid: ", "expect(data[i].data.longitude >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CdmaCellInformation", "api_method_name": "nid", "api_method_all": "nid: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["itude: 116,\n        nid: 101,\n        sid: ", "(cdmaCellInformatio.nid);\n      expect(102)", "expect(data[i].data.nid >= CELL_INFO_MIN &&", "MIN && data[i].data.nid <= CELL_MNC_MAX).as"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CdmaCellInformation", "api_method_name": "sid", "api_method_all": "sid: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["  nid: 101,\n        sid: 102\n      }\n      ", "CdmaCellInformation_sid_0100 start---------", "(cdmaCellInformatio.sid);\n      console.log", "CdmaCellInformation_sid_0100 end-----------", " query interface (residential)\n     * @tc.d", "CdmaCellInformation_sid_0100', 0, async fun", "     .onScrollEdge((side: Edge) => {\n      "], "files": ["RadioSecondJsunit.test.ets", "Scroll.ets", "Contacts_test.js", "ContactCard_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GsmCellInformation", "api_method_all": "export interface GsmCellInformation {\n    lac: number;\n    cellId: number;\n    arfcn: number;\n    bsic: number;\n    mcc: string;\n    mnc: string;\n  }", "api_method_name": "GsmCellInformation", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GsmCellInformation", "api_method_name": "lac", "api_method_all": "lac: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 61, "since": 8, "api_used": "\u662f", "lines": ["        var contactBlacklistValuesFive = {\n", "e records from the black list and verify wh", "ddBluk[1] = contactBlacklistValuesTwo;\n    ", "        var contactBlacklistValuesOne = {\n ", "        var contactBlacklistValuesThree = {", "ple records to the black list and verify wh", "olor: Color= Color.Black\n  @State active: b", ": NavigationType.Replace }) {\n        Text(", "    Insert contact black list\n     * @tc.de", "ddBluk[0] = contactBlacklistValuesOne;\n    ", "        var contactBlacklistValuesFour = {\n", "ddBluk[4] = contactBlacklistValuesFive;\n   ", "  .fontColor(Color.Black)\n        .key('Tex", "ddBluk[3] = contactBlacklistValuesFour;\n   ", "        var contactBlacklistValuesTwo = {\n ", "  .fontColor(Color.Black)\n            .lett", "eration of contact black list\n     * @tc.de", "ddBluk[2] = contactBlacklistValuesThree;\n  ", "st  in Navigator\uff0creplace')\n      }.active(t", "    Delete contact black list\n     * @tc.de"], "files": ["SmsMmsJsunit.test.ets", "Span.ets", "Contacts_test.js", "ContactCard_test.js", "Navigator.ets", "RadioSecondJsunit.test.ets", "common.js", "SmsMmsError.test.js", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GsmCellInformation", "api_method_name": "cellId", "api_method_all": "cellId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.cellId <= CELL_GSM_CELLID_", "MIN && data[i].data.cellId <= CELL_CELLID_MAX)", "expect(data[i].data.cellId >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GsmCellInformation", "api_method_name": "arfcn", "api_method_all": "arfcn: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["IN && data[i].data.earfcn <= CELL_EARFCN_MAX)", "expect(data[i].data.arfcn >= CELL_INFO_MIN &&", "MIN && data[i].data.arfcn <= CELL_ARFCN_MAX).", "xpect(data[i].data.uarfcn >= CELL_INFO_MIN &&", "xpect(data[i].data.earfcn >= CELL_INFO_MIN &&", "IN && data[i].data.uarfcn <= CELL_ARFCN_MAX)."], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GsmCellInformation", "api_method_name": "bsic", "api_method_all": "bsic: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.bsic <= CELL_BSIC_MAX).a", "expect(data[i].data.bsic >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GsmCellInformation", "api_method_name": "mcc", "api_method_all": "mcc: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.mcc).assertEqual(CELL_M"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GsmCellInformation", "api_method_name": "mnc", "api_method_all": "mnc: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.mnc >= CELL_INFO_MIN &&", "MIN && data[i].data.mnc <= CELL_MNC_MAX).as"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LteCellInformation", "api_method_all": "export interface LteCellInformation {\n    cgi: number;\n    pci: number;\n    tac: number;\n    earfcn: number;\n    bandwidth: number;\n    mcc: string;\n    mnc: string;\n    isSupportEndc: boolean;\n  }", "api_method_name": "LteCellInformation", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LteCellInformation", "api_method_name": "cgi", "api_method_all": "cgi: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.cgi >= CELL_INFO_MIN &&", "MIN && data[i].data.cgi <= CELL_CELLID_MAX)"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LteCellInformation", "api_method_name": "pci", "api_method_all": "pci: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.pci <= CELL_PCI_MAX).as", "expect(data[i].data.pci >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LteCellInformation", "api_method_name": "tac", "api_method_all": "tac: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9572, "since": 8, "api_used": "\u662f", "lines": ["", "tactsdataability/contacts/contact\";\nconst r", "Weight.Bold)\n      Stack({ alignContent: th", "_test.js'\nimport ContactClassTest from './c", " from './contact/ContacterJsunit.ets'\n\nexpo", "aability\";\nconst contactUri = \"dataability:", "\n@Component\nstruct stack_testcase {\n  @Stat", "\n    console.info('Stack page build done ca", ": 5 })\n      .key('stack')\n      .onClick((", "lassTest from './contact/ContactClass_test.", " from './contact/ContactClass_test.js'\nimpo", "y('stack2')\n\n      Stack({ alignContent: Al", ": 5 })\n      .key('stack6')\n\n      Stack({ ", "lity:///com.ohos.contactsdataability/contac", "_test.js'\nimport ContactCardTest from './co", "ctClassTest();\n  ContacterTest();\n  Calllog", ": 5 })\n      .key('stack8')\n    }\n    .key(", "mailTest from './contact/Voicemail_test.js'", " {\n  //contact\n  ContactClassTest();\n  Cont", "y('stack6')\n\n      Stack({ alignContent: Al", "actCardTest();\n  ContactsTest();\n  GroupsTe", ": 5 })\n      .key('stack5')\n\n      Stack({ ", "llogTest from './contact/Calllog_test.js'\ni", "actsTest from './contact/Contacts_test.js'\n", "cterTest from './contact/ContacterJsunit.et", ": 5 })\n      .key('stack4')\n\n      Stack({ ", " from './contact/ContactCard_test.js'\nimpor", "()\n      })\n\n      Stack({ alignContent: Al", "y('stack7')\n\n      Stack({ alignContent: Al", ": 5 })\n      .key('stack3')\n\n      Stack({ ", ": 5 })\n      .key('stack2')\n\n      Stack({ ", "veryTest from './contact/recovery_test.js'\n", "oupsTest from './contact/Groups_test.js'\nim", "estsuite() {\n  //contact\n  ContactClassTest", "y('stack3')\n\n      Stack({ alignContent: Al", "\n    console.info('Stack page show called')", ": 5 })\n      .key('stack1')\n\n      Stack({ ", "_test.js'\nimport ContactsTest from './conta", "CalllogTest();\n  ContactCardTest();\n  Conta", "y('stack1')\n\n      Stack({ alignContent: Al", "content: string = \"Stack Page\";\n\n  onPageSh", "y('stack5')\n\n      Stack({ alignContent: Al", "_test.js'\nimport ContacterTest from './cont", "y('stack4')\n\n      Stack({ alignContent: Al", "CardTest from './contact/ContactCard_test.j", " from './contact/Contacts_test.js'\nimport G", ": 5 })\n      .key('stack7')\n\n      Stack({ ", "ability/contacts/contact\";\nconst rawContact", "lity:///com.ohos.contactsdataability\";\ncons", "faceTest from './contact/ObjectInterface_te"], "files": ["SmsMmsJsunit.test.ets", "Stack.ets", "ContactMerge_test.js", "Stability_test.js", "ContacterJsunit.ets", "Contacts_test.js", "ContactCard_test.js", "recovery_test.js", "Performance_test.js", "SimManager.test.js", "RadioSecondJsunit.test.ets", "ObjectInterface_test.js", "List.test.ets", "common.js", "Groups_test.js", "ContactClass_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LteCellInformation", "api_method_name": "earfcn", "api_method_all": "earfcn: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.earfcn >= CELL_INFO_MIN &&", "MIN && data[i].data.earfcn <= CELL_EARFCN_MAX)"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LteCellInformation", "api_method_name": "bandwidth", "api_method_all": "bandwidth: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.bandwidth >= CELL_INFO_MIN &&", "MIN && data[i].data.bandwidth <= CELL_MNC_MAX).as"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LteCellInformation", "api_method_name": "mcc", "api_method_all": "mcc: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.mcc).assertEqual(CELL_M"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LteCellInformation", "api_method_name": "mnc", "api_method_all": "mnc: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.mnc >= CELL_INFO_MIN &&", "MIN && data[i].data.mnc <= CELL_MNC_MAX).as"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LteCellInformation", "api_method_name": "isSupportEndc", "api_method_all": "isSupportEndc: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.isSupportEndc >= CELL_INFO_MIN &&", "MIN && data[i].data.isSupportEndc <= CELL_MNC_MAX).as"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NrCellInformation", "api_method_all": "export interface NrCellInformation {\n    nrArfcn: number;\n    pci: number;\n    tac: number;\n    nci: number;\n    mcc: string;\n    mnc: string;\n  }", "api_method_name": "NrCellInformation", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NrCellInformation", "api_method_name": "nrArfcn", "api_method_all": "nrArfcn: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.nrArfcn <= CELL_LAC_TAC_MAX", "expect(data[i].data.nrArfcn >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NrCellInformation", "api_method_name": "pci", "api_method_all": "pci: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.pci <= CELL_PCI_MAX).as", "expect(data[i].data.pci >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NrCellInformation", "api_method_name": "tac", "api_method_all": "tac: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9572, "since": 8, "api_used": "\u662f", "lines": ["", "tactsdataability/contacts/contact\";\nconst r", "Weight.Bold)\n      Stack({ alignContent: th", "_test.js'\nimport ContactClassTest from './c", " from './contact/ContacterJsunit.ets'\n\nexpo", "aability\";\nconst contactUri = \"dataability:", "\n@Component\nstruct stack_testcase {\n  @Stat", "\n    console.info('Stack page build done ca", ": 5 })\n      .key('stack')\n      .onClick((", "lassTest from './contact/ContactClass_test.", " from './contact/ContactClass_test.js'\nimpo", "y('stack2')\n\n      Stack({ alignContent: Al", ": 5 })\n      .key('stack6')\n\n      Stack({ ", "lity:///com.ohos.contactsdataability/contac", "_test.js'\nimport ContactCardTest from './co", "ctClassTest();\n  ContacterTest();\n  Calllog", ": 5 })\n      .key('stack8')\n    }\n    .key(", "mailTest from './contact/Voicemail_test.js'", " {\n  //contact\n  ContactClassTest();\n  Cont", "y('stack6')\n\n      Stack({ alignContent: Al", "actCardTest();\n  ContactsTest();\n  GroupsTe", ": 5 })\n      .key('stack5')\n\n      Stack({ ", "llogTest from './contact/Calllog_test.js'\ni", "actsTest from './contact/Contacts_test.js'\n", "cterTest from './contact/ContacterJsunit.et", ": 5 })\n      .key('stack4')\n\n      Stack({ ", " from './contact/ContactCard_test.js'\nimpor", "()\n      })\n\n      Stack({ alignContent: Al", "y('stack7')\n\n      Stack({ alignContent: Al", ": 5 })\n      .key('stack3')\n\n      Stack({ ", ": 5 })\n      .key('stack2')\n\n      Stack({ ", "veryTest from './contact/recovery_test.js'\n", "oupsTest from './contact/Groups_test.js'\nim", "estsuite() {\n  //contact\n  ContactClassTest", "y('stack3')\n\n      Stack({ alignContent: Al", "\n    console.info('Stack page show called')", ": 5 })\n      .key('stack1')\n\n      Stack({ ", "_test.js'\nimport ContactsTest from './conta", "CalllogTest();\n  ContactCardTest();\n  Conta", "y('stack1')\n\n      Stack({ alignContent: Al", "content: string = \"Stack Page\";\n\n  onPageSh", "y('stack5')\n\n      Stack({ alignContent: Al", "_test.js'\nimport ContacterTest from './cont", "y('stack4')\n\n      Stack({ alignContent: Al", "CardTest from './contact/ContactCard_test.j", " from './contact/Contacts_test.js'\nimport G", ": 5 })\n      .key('stack7')\n\n      Stack({ ", "ability/contacts/contact\";\nconst rawContact", "lity:///com.ohos.contactsdataability\";\ncons", "faceTest from './contact/ObjectInterface_te"], "files": ["SmsMmsJsunit.test.ets", "Stack.ets", "ContactMerge_test.js", "Stability_test.js", "ContacterJsunit.ets", "Contacts_test.js", "ContactCard_test.js", "recovery_test.js", "Performance_test.js", "SimManager.test.js", "RadioSecondJsunit.test.ets", "ObjectInterface_test.js", "List.test.ets", "common.js", "Groups_test.js", "ContactClass_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NrCellInformation", "api_method_name": "nci", "api_method_all": "nci: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.nci >= CELL_INFO_MIN &&", "MIN && data[i].data.nci <= CELL_ARFCN_MAX)."], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NrCellInformation", "api_method_name": "mcc", "api_method_all": "mcc: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.mcc).assertEqual(CELL_M"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NrCellInformation", "api_method_name": "mnc", "api_method_all": "mnc: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.mnc >= CELL_INFO_MIN &&", "MIN && data[i].data.mnc <= CELL_MNC_MAX).as"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TdscdmaCellInformation", "api_method_all": "export interface TdscdmaCellInformation {\n    lac: number;\n    cellId: number;\n    cpid: number;\n    uarfcn: number;\n    mcc: string;\n    mnc: string;\n  }", "api_method_name": "TdscdmaCellInformation", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TdscdmaCellInformation", "api_method_name": "lac", "api_method_all": "lac: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 61, "since": 8, "api_used": "\u662f", "lines": ["        var contactBlacklistValuesFive = {\n", "e records from the black list and verify wh", "ddBluk[1] = contactBlacklistValuesTwo;\n    ", "        var contactBlacklistValuesOne = {\n ", "        var contactBlacklistValuesThree = {", "ple records to the black list and verify wh", "olor: Color= Color.Black\n  @State active: b", ": NavigationType.Replace }) {\n        Text(", "    Insert contact black list\n     * @tc.de", "ddBluk[0] = contactBlacklistValuesOne;\n    ", "        var contactBlacklistValuesFour = {\n", "ddBluk[4] = contactBlacklistValuesFive;\n   ", "  .fontColor(Color.Black)\n        .key('Tex", "ddBluk[3] = contactBlacklistValuesFour;\n   ", "        var contactBlacklistValuesTwo = {\n ", "  .fontColor(Color.Black)\n            .lett", "eration of contact black list\n     * @tc.de", "ddBluk[2] = contactBlacklistValuesThree;\n  ", "st  in Navigator\uff0creplace')\n      }.active(t", "    Delete contact black list\n     * @tc.de"], "files": ["SmsMmsJsunit.test.ets", "Span.ets", "Contacts_test.js", "ContactCard_test.js", "Navigator.ets", "RadioSecondJsunit.test.ets", "common.js", "SmsMmsError.test.js", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TdscdmaCellInformation", "api_method_name": "cellId", "api_method_all": "cellId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.cellId <= CELL_GSM_CELLID_", "MIN && data[i].data.cellId <= CELL_CELLID_MAX)", "expect(data[i].data.cellId >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TdscdmaCellInformation", "api_method_name": "cpid", "api_method_all": "cpid: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.cpid >= CELL_INFO_MIN &&", "MIN && data[i].data.cpid <= CELL_MNC_MAX).as"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TdscdmaCellInformation", "api_method_name": "uarfcn", "api_method_all": "uarfcn: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.uarfcn <= CELL_ARFCN_MAX).", "expect(data[i].data.uarfcn >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TdscdmaCellInformation", "api_method_name": "mcc", "api_method_all": "mcc: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.mcc).assertEqual(CELL_M"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TdscdmaCellInformation", "api_method_name": "mnc", "api_method_all": "mnc: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.mnc >= CELL_INFO_MIN &&", "MIN && data[i].data.mnc <= CELL_MNC_MAX).as"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WcdmaCellInformation", "api_method_all": "export interface WcdmaCellInformation {\n    lac: number;\n    cellId: number;\n    psc: number;\n    uarfcn: number;\n    mcc: string;\n    mnc: string;\n  }", "api_method_name": "WcdmaCellInformation", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WcdmaCellInformation", "api_method_name": "lac", "api_method_all": "lac: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 61, "since": 8, "api_used": "\u662f", "lines": ["        var contactBlacklistValuesFive = {\n", "e records from the black list and verify wh", "ddBluk[1] = contactBlacklistValuesTwo;\n    ", "        var contactBlacklistValuesOne = {\n ", "        var contactBlacklistValuesThree = {", "ple records to the black list and verify wh", "olor: Color= Color.Black\n  @State active: b", ": NavigationType.Replace }) {\n        Text(", "    Insert contact black list\n     * @tc.de", "ddBluk[0] = contactBlacklistValuesOne;\n    ", "        var contactBlacklistValuesFour = {\n", "ddBluk[4] = contactBlacklistValuesFive;\n   ", "  .fontColor(Color.Black)\n        .key('Tex", "ddBluk[3] = contactBlacklistValuesFour;\n   ", "        var contactBlacklistValuesTwo = {\n ", "  .fontColor(Color.Black)\n            .lett", "eration of contact black list\n     * @tc.de", "ddBluk[2] = contactBlacklistValuesThree;\n  ", "st  in Navigator\uff0creplace')\n      }.active(t", "    Delete contact black list\n     * @tc.de"], "files": ["SmsMmsJsunit.test.ets", "Span.ets", "Contacts_test.js", "ContactCard_test.js", "Navigator.ets", "RadioSecondJsunit.test.ets", "common.js", "SmsMmsError.test.js", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WcdmaCellInformation", "api_method_name": "cellId", "api_method_all": "cellId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.cellId <= CELL_GSM_CELLID_", "MIN && data[i].data.cellId <= CELL_CELLID_MAX)", "expect(data[i].data.cellId >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WcdmaCellInformation", "api_method_name": "psc", "api_method_all": "psc: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.psc <= CELL_PSC_MAX).as", "expect(data[i].data.psc >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WcdmaCellInformation", "api_method_name": "uarfcn", "api_method_all": "uarfcn: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["MIN && data[i].data.uarfcn <= CELL_ARFCN_MAX).", "expect(data[i].data.uarfcn >= CELL_INFO_MIN &&"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WcdmaCellInformation", "api_method_name": "mcc", "api_method_all": "mcc: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.mcc).assertEqual(CELL_M"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WcdmaCellInformation", "api_method_name": "mnc", "api_method_all": "mnc: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["expect(data[i].data.mnc >= CELL_INFO_MIN &&", "MIN && data[i].data.mnc <= CELL_MNC_MAX).as"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NrOptionMode", "api_method_all": "export enum NrOptionMode {\n    \n    NR_OPTION_UNKNOWN,\n\n    \n    NR_OPTION_NSA_ONLY,\n\n    \n    NR_OPTION_SA_ONLY,\n\n    \n    NR_OPTION_NSA_AND_SA,\n  }", "api_method_name": "NrOptionMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["ny_NetworkSearch_getNrOptionMode_Async_0100 1`);\n   ", "   }\n      radio.getNrOptionMode((err, data) => {\n  ", "ny_NetworkSearch_getNrOptionMode_Async_0500 get fail", "ny_NetworkSearch_getNrOptionMode_Async_0100', 0, asy", "ny_NetworkSearch_getNrOptionMode_Async_0500\n     * @", "ny_NetworkSearch_getNrOptionMode_Promise_0500 fail: ", "ny_NetworkSearch_getNrOptionMode_Async_0500 end data", "ny_NetworkSearch_getNrOptionMode_Promise_0500', 0, a", "ny_NetworkSearch_getNrOptionMode_Promise_0500\n     *", "ny_NetworkSearch_getNrOptionMode_Async_0100 end data", "ny_NetworkSearch_getNrOptionMode_Promise_0500 end da", " {\n        radio.getNrOptionMode(SLOT_2).then(data =", "ny_NetworkSearch_getNrOptionMode_Async_0100 get fail", "ny_NetworkSearch_getNrOptionMode_Async_0500', 0, asy", " {\n        radio.getNrOptionMode(SLOT_2, (err, data)", "@tc.name    Test getNrOptionMode(-1) to check the ca"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NrOptionMode", "api_method_name": "NR_OPTION_UNKNOWN", "api_method_all": "NR_OPTION_UNKNOWN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["ODE = [\n      radio.NR_OPTION_UNKNOWN,\n      radio.NR_OPT", "pect(data === radio.NR_OPTION_UNKNOWN).assertTrue();\n    "], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NrOptionMode", "api_method_name": "NR_OPTION_NSA_ONLY", "api_method_all": "NR_OPTION_NSA_ONLY,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["NKNOWN,\n      radio.NR_OPTION_NSA_ONLY,\n      radio.NR_OPT"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NrOptionMode", "api_method_name": "NR_OPTION_SA_ONLY", "api_method_all": "NR_OPTION_SA_ONLY,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["A_ONLY,\n      radio.NR_OPTION_SA_ONLY,\n      radio.NR_OPT"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NrOptionMode", "api_method_name": "NR_OPTION_NSA_AND_SA", "api_method_all": "NR_OPTION_NSA_AND_SA,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["A_ONLY,\n      radio.NR_OPTION_NSA_AND_SA\n    ];\n    //Networ"], "files": ["RadioSecondJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSearchResult", "api_method_all": "export interface NetworkSearchResult {\n    isNetworkSearchSuccess: boolean;\n    networkSearchResult: Array<NetworkInformation>;\n  }", "api_method_name": "NetworkSearchResult", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSearchResult", "api_method_name": "isNetworkSearchSuccess", "api_method_all": "isNetworkSearchSuccess: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [") {\n\t\t\t\texpect(data.isNetworkSearchSuccess != true).assertTrue", "        expect(data.isNetworkSearchSuccess).assertTrue();\n    "], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSearchResult", "api_method_name": "networkSearchResult", "api_method_all": "networkSearchResult: Array<NetworkInformation>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": [".assertContain(data.networkSearchResult[0].radioTech);\n    ", "();\n\t\t\t\texpect(data.networkSearchResult != undefined).asser", "d &&\n          data.networkSearchResult[0].operatorName != ", ");\n        if (data.networkSearchResult.length === 0) {\n   ", "' &&\n          data.networkSearchResult[0].operatorName != ", ".assertContain(data.networkSearchResult[0].state);\n        ", "        expect(data.networkSearchResult[0].operatorNumeric.", "ect(\n          data.networkSearchResult[0].operatorName != "], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkInformation", "api_method_all": "export interface NetworkInformation {\n    operatorName: string;\n    operatorNumeric: string;\n    state: NetworkInformationState;\n    radioTech: string;\n  }", "api_method_name": "NetworkInformation", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkInformation", "api_method_name": "operatorName", "api_method_all": "operatorName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["workSearchResult[0].operatorName != undefined &&\n   ", ": {\n                operatorName: '',\n              ", "workSearchResult[0].operatorName != '' &&\n          ", "workSearchResult[0].operatorName != null\n        ).a"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkInformation", "api_method_name": "operatorNumeric", "api_method_all": "operatorNumeric: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["'',\n                operatorNumeric: '',\n              ", "workSearchResult[0].operatorNumeric.substr(0, 3) === '4"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkInformation", "api_method_name": "state", "api_method_all": "state: NetworkInformationState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 134, "since": 0, "api_used": "\u662f", "lines": ["information at this state\nexport function sce", " reachState,get the state CALL_STATUS_DISCONN", "\n            find = stateStorage.find(ele => ", ", stateEffect: this.stateEffect })\n        .f", "tate) {\n    return (state === CALL_STATUS_DIS", "ngupCall2 get right state error,error:${toStr", "Info) {\n            stateStorage.push({...cal", "information of this state\nexport function sce", " ButtonType.Circle, stateEffect: this.stateEf", "cence,when specific state arrive,we get the i", "tc.name    Unwanted state,run function cancel", "Storage:${toString({stateStorage})}`);\n      ", "tc.name    Unwanted state,run function setMut", "nupTimeOut);\n}\n\nlet stateStorage = [];\nexport", " the information of state when unHoldCall the", "         let find = stateStorage.find(ele => ", "testcase {\n  @State stateEffect: boolean = tr", " the information of state at CALL_STATUS_HOLD", "tc.name    Unwanted state,run function setAud", "lding get the right state error,error:${toStr", "angup get the right state success ,data:${toS", "me} reach the right state error,error:${toStr", "angupCall get right state success,data:${toSt", "hStateTimeout);\n    stateStorage = [];\n    le", "            \"answer_state\": \"1\"\n             ", "tc.name    Unwanted state ,run the function i", "State,get the right state checkState:${checkS", "lding get the right state success,data:${toSt", "ngupCall2 get right state success,data:${toSt", "eInCalling,specific state arrive,get the info", "angupCall get right state error,error:${toStr", "ow:${toString(now)},stateStorage:${toString({", "angup get the right state error,error:${toStr", "tc.name    Unwanted state,run function muteRi", "function isHanupEd (state) {\n    return (stat", "_DISCONNECTING) || (state === CALL_STATUS_DIS", "CALL_STATUS_HOLDING state\nexport function sce", "me} reach the right state success,data:${toSt", "ype.Capsule)\n      .stateEffect(false)\n      ", " the information of state when hunup the call"], "files": ["ConnectionJsunit.test.ets", "Calllog_test.js", "Stability_test.js", "SimJsunit.test.ets", "ScenceInCalling.js", "CallManageAll.test.js", "Performance_test.js", "Button.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "RadioSecondJsunit.test.ets", "SimManager.test.js", "common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkInformation", "api_method_name": "radioTech", "api_method_all": "radioTech: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["LE,\n                radioTech: radio.RADIO_TECHNO", "workSearchResult[0].radioTech);\n        expect(da"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkInformationState", "api_method_all": "export enum NetworkInformationState {\n    \n    NETWORK_UNKNOWN,\n\n    \n    NETWORK_AVAILABLE,\n\n    \n    NETWORK_CURRENT,\n\n    \n    NETWORK_FORBIDDEN\n  }", "api_method_name": "NetworkInformationState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkInformationState", "api_method_name": "NETWORK_UNKNOWN", "api_method_all": "NETWORK_UNKNOWN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.NETWORK_UNKNOWN === 0).assertTrue()", "ate = [\n      radio.NETWORK_UNKNOWN,\n      radio.NETWOR"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkInformationState", "api_method_name": "NETWORK_AVAILABLE", "api_method_all": "NETWORK_AVAILABLE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["NKNOWN,\n      radio.NETWORK_AVAILABLE,\n      radio.NETWOR", "       state: radio.NETWORK_AVAILABLE,\n                ra"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkInformationState", "api_method_name": "NETWORK_CURRENT", "api_method_all": "NETWORK_CURRENT,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ILABLE,\n      radio.NETWORK_CURRENT,\n      radio.NETWOR", "       expect(radio.NETWORK_CURRENT === 2).assertTrue()"], "files": ["RadioSecondJsunit.test.ets", "NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSelectionModeOptions", "api_method_all": "export interface NetworkSelectionModeOptions {\n    slotId: number;\n    selectMode: NetworkSelectionMode;\n    networkInformation: NetworkInformation;\n    resumeSelection: boolean;\n  }", "api_method_name": "NetworkSelectionModeOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSelectionModeOptions", "api_method_name": "slotId", "api_method_all": "slotId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 113, "since": 8, "api_used": "\u662f", "lines": ["ignalInfoChange', { slotId: SLOT_0 }, (network", "'callStateChange', {slotId: DEFAULT_SLOT_ID}, ", "d test observer.on({slotId:0}) to view the cal", "seName, type, mode, slotId) {\n    return new P", "ransferInfo by args slotId SLOT_ID_INVALID,\n  ", " abnormal input of \"slotId\", test getPreferred", "             by arg slotId SLOT_ID_INVALID typ", "eChange', {\n        slotId: SLOT_0\n      }, (d", "name    Verify the \"slotId\" abnormal input, te", "num) {\n        this.slotId = num;\n    }\n}\nclas", "el (caseName, type, slotId) {\n    return new P", "eChange', {\n        slotId: SLOT_0\n      }, (n", "et data = {\n        slotId: TRUE_SLOT_ID,\n    ", " abnormal input of \"slotId\", test getOperatorN", "face is tested, and slotId is abnormal.\n    * ", "'callStateChange', {slotId:DEFAULT_SLOT_ID}, (", "itingStatus by args slotId SLOT_ID_INVALID by ", "estriction(slotId ? slotId : DEFAULT_SLOT_ID, ", "oChange', {\n        slotId: SLOT_0\n      }, (s", ".setCallRestriction(slotId ? slotId : DEFAULT_", "ingEnabled, set the slotId to error values (3)", "ode = {\n            slotId: 55, //set the erro", "tting parameters as slotId error value (3), to", "ndMessage({\n        slotId: TRUE_SLOT_ID,\n    ", " by callback by arg slotId\n     *             ", "wChange', {\n        slotId: SLOT_0\n      }, (d", "oChange', {\n        slotId: SLOT_0\n      }, (c", "CallWaiting by args slotId SLOT_ID_INVALID act", "allTransfer by args slotId SLOT_ID_INVALID,set", "workStateChange', { slotId: SLOT_0 }, (network", "s by promise by arg slotId (that is at SLOT_ID", "  *             The slotId parameter is abnorm", " abnormal input of \"slotId\", test setPreferred"], "files": ["CellularDataAbnorma.test.js", "SmsMmsJsunit.test.ets", "ScenceLimitCalling.js", "ScenceInCalling.js", "ObserverJsunit.test.ets", "NetworkSearchErrors.test.js", "SimManager.test.js", "CallManageAll.test.js", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSelectionModeOptions", "api_method_name": "selectMode", "api_method_all": "selectMode: NetworkSelectionMode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["d is 55\n            selectMode: radio.NETWORK_SELE"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSelectionModeOptions", "api_method_name": "networkInformation", "api_method_all": "networkInformation: NetworkInformation", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["OMATIC,\n            networkInformation: {\n                "], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSelectionModeOptions", "api_method_name": "resumeSelection", "api_method_all": "resumeSelection: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["     },\n            resumeSelection: false,\n        };\n"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSelectionMode", "api_method_all": "export enum NetworkSelectionMode {\n    \n    NETWORK_SELECTION_UNKNOWN,\n\n    \n    NETWORK_SELECTION_AUTOMATIC,\n\n    \n    NETWORK_SELECTION_MANUAL\n  }", "api_method_name": "NetworkSelectionMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": ["ny_NetworkSearch_setNetworkSelectionMode_Async_0700 set not ", "ny_NetworkSearch_getNetworkSelectionMode_Async_0500 fail not", "ny_NetworkSearch_setNetworkSelectionMode_Async_0700', 0, asy", "ny_NetworkSearch_setNetworkSelectionMode_Promise_0700 networ", "ny_NetworkSearch_getNetworkSelectionMode_Promise_0500 fail n", " {\n        radio.getNetworkSelectionMode(SLOT_2, (err, res) ", "ny_NetworkSearch_setNetworkSelectionMode_Async_0700 networkS", "ny_NetworkSearch_setNetworkSelectionMode_Promise_0200 set fi", "ny_NetworkSearch_setNetworkSelectionMode_Promise_0700', 0, a", "ny_NetworkSearch_getNetworkSelectionMode_Promise_0500', 0, a", "ny_NetworkSearch_getNetworkSelectionMode_Async_0500 err: ${e", "`)\n        radio.setNetworkSelectionMode(networkSMode, (err)", "ny_NetworkSearch_getNetworkSelectionMode_Async_0500', 0, asy", "ny_NetworkSearch_setNetworkSelectionMode_Async_0700 set fini", "     await radio.setNetworkSelectionMode(networkSMode);\n    ", "ny_NetworkSearch_getNetworkSelectionMode_Promise_0500 finish", "     await radio.getNetworkSelectionMode(SLOT_2);\n          ", "ny_NetworkSearch_setNetworkSelectionMode_Promise_0200 set fa"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSelectionMode", "api_method_name": "NETWORK_SELECTION_UNKNOWN", "api_method_all": "NETWORK_SELECTION_UNKNOWN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["       expect(radio.NETWORK_SELECTION_UNKNOWN === 0).assertTrue()"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NetworkSelectionMode", "api_method_name": "NETWORK_SELECTION_AUTOMATIC", "api_method_all": "NETWORK_SELECTION_AUTOMATIC,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["  selectMode: radio.NETWORK_SELECTION_AUTOMATIC,\n            networ"], "files": ["NetworkSearchErrors.test.js"], "is_white": " ", "desc": " "}]}