{"subsystem_ch": "\u5143\u80fd\u529b\u5b50\u7cfb\u7edf", "subsystem_en": "aafwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\app\\processInfo", "api": [{"api_class_name": "ProcessInfo", "api_method_all": "export interface ProcessInfo {\n  \n  pid: number;\n\n  \n  processName: string;\n}", "api_method_name": "ProcessInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 46, "since": 7, "api_used": "\u662f", "lines": ["    })\n\n    // checkProcessInfo\n    function checkP", "   console.log('FWK_ProcessInfo_0300 error code is ", "  console.log(\"checkProcessInfo ProcessInfo: \" + in", "   console.log('FWK_ProcessInfo_0400 error code is ", "itymanager.getActiveProcessInfos();\n               ", "itymanager.getActiveProcessInfos();\n            con", "romise = context.getProcessInfo();\n        expect(t", "}\n    \n})\n\n\nit('FWK_ProcessInfo_0300', 0, async fun", "    appmgr.getActiveProcessInfos(\n        (error, d", "info('====> ACTS_GetProcessInfo_0100 =====>')\n     ", "     * @tc.name: GetProcessInfo : Called when getti", "info('====> ACTS_GetProcessInfo_0200 =====>')\n     ", "   console.log('FWK_ProcessInfo_0100 err' + err);\n ", "  console.log(\"checkProcessInfo pid : \" + info.pid)", "@tc.number: ACTS_GetProcessInfo_0100\n     * @tc.nam", " */\n    it('ACTS_GetProcessInfo_0200', 0, async fun", "   console.log('FWK_ProcessInfo_0400 err' + err); \n", "e();\n}\n})\n\n\nit('FWK_ProcessInfo_0400', 0, async fun", "   console.log('FWK_ProcessInfo_0300 Begin');\n    t", "   console.log('FWK_ProcessInfo_0300 err' + err);\n ", "               checkProcessInfo(data);\n            ", "   console.log('FWK_ProcessInfo_0100 start');\n    t", "result = context.getProcessInfo(\n            (err, ", "o\n    function checkProcessInfo(info) {\n        con", "   console.log('FWK_ProcessInfo_0200 start');\n    t", "   console.log('FWK_ProcessInfo_0200 err' + err);\n ", "ed when getting the ProcessInfo\n     * @tc.desc: Ch", " */\n    it('ACTS_GetProcessInfo_0100', 0, async fun", "nfo();\n        checkProcessInfo(info);\n        done", "    appmgr.getActiveProcessInfos().then((data) => {", "  console.log(\"checkProcessInfo processName : \" + i", "();\n}\n\n})\n\n\nit('FWK_ProcessInfo_0200', 0, async fun", "@tc.number: ACTS_GetProcessInfo_0200\n     * @tc.nam", "   console.log('FWK_ProcessInfo_0400 Begin');\n    t", "   console.log('FWK_ProcessInfo_0400 err' + err);\n ", "tion () {\n\n\nit('FWK_ProcessInfo_0100', 0, async fun", "g(\"checkProcessInfo ProcessInfo: \" + info);\n       ", " = await context.getProcessInfo();\n        checkPro"], "files": ["FeatureAbilityJsunit.test.js", "Getactive.test.js", "ActsProcessManageJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProcessInfo", "api_method_name": "pid", "api_method_all": "pid: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 39, "since": 7, "api_used": "\u662f", "lines": ["JSON.stringify(list.pid))\n        expect(li", "     expect(data[i].pid > 0).assertTrue();\n", "        expect(list.pid > 0).assertTrue()\n ", "     expect(data[0].pid > 0).assertTrue();\n", "expect(typeof (info.pid)).assertEqual(\"numb", "ect(typeof (info[i].pid)).assertEqual(\"numb", "g(\"checkProcessInfo pid : \" + info.pid);\n\n ", "     expect(info[i].pid).assertLarger(0);\n\n", "console.log('==list.pid==>' + JSON.stringif", " expect(dataInfo[i].pid).assertLarger(500);", "Info pid : \" + info.pid);\n\n        expect(t", "ons = {\n            pid :0,\n            uid"], "files": ["Getactive.test.js", "MangerAbilityJsunit.test.js", "startFULL.test.js", "FeatureAbilityJsunit.test.js", "ContextJsunit.test.js", "ActsProcessManageJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProcessInfo", "api_method_name": "processName", "api_method_all": "processName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 44, "since": 0, "api_used": "\u662f", "lines": ["g(\"checkProcessName processName : \" + info);\n      ", "     expect(data[0].processName !=  null).assertTru", "        expect(info.processName).assertEqual(\"proce", "g(\"checkProcessInfo processName : \" + info.processN", "    if (dataInfo[i].processName == name) {\n        ", "Infos(processInfos, processName) {\n        for (var", "expect(typeof (info.processName)).assertEqual(\"stri", "     expect(info[i].processName.length).assertLarge", "ect(typeof (info[i].processName)).assertEqual(\"stri", "     expect(data[i].processName !=  null).assertTru", "s[i].processName == processName) {\n                ", "if (processInfos[i].processName == systemAMultiProc", "if (processInfos[i].processName == processName) {\n ", "if (processInfos[i].processName == systemAProcessNa", "cessName : \" + info.processName);\n        console.l", "Infos(processInfos, processName));\n                ", "ckPromiseExistDelay(processName) {\n        return n"], "files": ["MangerAbilityJsunit.test.js", "FeatureAbilityJsunit.test.js", "ActsKillProcessTest.test.js", "ActsProcessManageJsTest.test.js", "Getactive.test.js"], "is_white": " ", "desc": " "}]}