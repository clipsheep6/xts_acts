{"subsystem_ch": "\u516c\u5171\u57fa\u7840\u7c7b\u5e93", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.util.LightWeightMap", "api": [{"api_class_name": "LightWeightMap", "api_method_all": "declare class LightWeightMap<K, V> {\r\n  \r\n  constructor();\r\n  \r\n  length: number;\r\n  \r\n  hasAll(map: LightWeightMap<K, V>): boolean;\r\n  \r\n  hasKey(key: K): boolean;\r\n  \r\n  hasValue(value: V): boolean;\r\n  \r\n  increaseCapacityTo(minimumCapacity: number): void;\r\n  \r\n  entries(): IterableIterator<[K, V]>;\r\n  \r\n  get(key: K): V;\r\n  \r\n  getIndexOfKey(key: K): number;\r\n  \r\n  getIndexOfValue(value: V): number;\r\n  \r\n  isEmpty(): boolean;\r\n  \r\n  getKeyAt(index: number): K;\r\n  \r\n  keys(): IterableIterator<K>;\r\n  \r\n  setAll(map: LightWeightMap<K, V>): void;\r\n  \r\n  set(key: K, value: V): Object;\r\n  \r\n  remove(key: K): V;\r\n  \r\n  removeAt(index: number): boolean;\r\n  \r\n  clear(): void;\r\n  \r\n  setValueAt(index: number, newValue: V): boolean;\r\n  \r\n  forEach(callbackfn: (value?: V, key?: K, map?: LightWeightMap<K, V>) => void,\r\n  thisArg?: Object): void;\r\n  \r\n  [Symbol.iterator](): IterableIterator<[K, V]>;\r\n  \r\n  toString(): String;\r\n  \r\n  getValueAt(index: number): V;\r\n  \r\n  values(): IterableIterator<V>;\r\n}", "api_method_name": "LightWeightMap", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 60, "since": 0, "api_used": "\u662f", "lines": ["ightWeightMap = new LightWeightMap();\n    let lightWei", "ightWeightMap = new LightWeightMap();\n    let res1 = l", "ightWeightMap = new LightWeightMap();\n    lightWeightM", "ightWeightMap = new LightWeightMap();\n    let c = {nam", "ightWeightMap = new LightWeightMap();\n    for (let i =", "ghtMap\";\n\ndescribe(\"LightWeightMapTest\", function () {", "ightWeightMap = new LightWeightMap();\n    try {\n      ", "ap from \"@ohos.util.LightWeightMap\";\n\ndescribe(\"LightW", "ghtWeightMap1 = new LightWeightMap();\n    lightWeightM", "ghtWeightMap1 = new LightWeightMap();\n    let res = li", "ightWeightMap = new LightWeightMap();\n    let res = li", "ightWeightMap = new LightWeightMap();\n    let a = [1, ", "unit/index';\nimport LightWeightMap from \"@ohos.util.Li", "ightWeightMap = new LightWeightMap();\n      expect(lig"], "files": ["LightWeightMap.test.js", "Main.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "hasAll", "api_method_all": "hasAll(map: LightWeightMap<K, V>): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["es = lightWeightMap.hasAll(lightWeightMap1);\n ", "es = lightWeightSet.hasAll(lightWeightSet1);\n "], "files": ["LightWeightMap.test.js", "LightWeightSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "hasKey", "api_method_all": "hasKey(key: K): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": ["  let res = hashMap.hasKey(8);\n    expect(res)", "s1 = lightWeightMap.hasKey(1);\n    expect(res1", "  let res = hashMap.hasKey(3);\n    expect(res)", "  let res = treeMap.hasKey(1);\n    expect(res)", "ey = lightWeightMap.hasKey(index);\n      expec", "  let has = hashMap.hasKey(keys[i]);\n      exp", "es = lightWeightMap.hasKey(\"a\");\n    expect(re", "pect(lightWeightMap.hasKey(i)).assertEqual(tru", "ey = lightWeightMap.hasKey(i);\n      expect(re", " let res1 = treeMap.hasKey(6);\n    expect(res1", "s1 = lightWeightMap.hasKey(\"a\");\n    expect(re", "s1 = lightWeightMap.hasKey(1.23);\n    expect(r", "s1 = lightWeightMap.hasKey(null);\n    expect(r", "s1 = lightWeightMap.hasKey(a);\n    expect(res1", "s1 = lightWeightMap.hasKey(true);\n    expect(r", " let res1 = hashMap.hasKey(8);\n    expect(res1"], "files": ["LightWeightMap.test.js", "TreeMap.test.js", "HashMap.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "hasValue", "api_method_all": "hasValue(value: V): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 26, "since": 8, "api_used": "\u662f", "lines": ["  let res = treeMap.hasValue(\"a\");\n    expect(re", "es = lightWeightMap.hasValue(c);\n    expect(res)", "es = lightWeightMap.hasValue(321);\n    expect(re", "  let res = hashMap.hasValue(8);\n    expect(res)", "  let has = hashMap.hasValue(res.next().value);\n", "es = lightWeightMap.hasValue(false);\n    expect(", "s1 = lightWeightMap.hasValue(\"A\");\n    expect(re", "ue = lightWeightMap.hasValue(index);\n      expec", "es = lightWeightMap.hasValue(0.001);\n    expect(", " let res1 = treeMap.hasValue(\"d\");\n    expect(re", "es = lightWeightMap.hasValue(\"A\");\n    expect(re", "  let has = hashMap.hasValue(vals[i]);\n      exp", " let res1 = hashMap.hasValue(8);\n    expect(res1", "s2 = lightWeightMap.hasValue(\"B\");\n    expect(re", "  let res = hashMap.hasValue(\"C\");\n    expect(re", "ue = lightWeightMap.hasValue(i);\n      expect(re", "es = lightWeightMap.hasValue(null);\n    expect(r", "es = lightWeightMap.hasValue(a);\n    expect(res)", "s1 = lightWeightMap.hasValue(1);\n    expect(res1", "s1 = lightWeightMap.hasValue(\"C\");\n    expect(re", "es = lightWeightMap.hasValue(1);\n    expect(res)", "es = lightWeightMap.hasValue(\"\");\n    expect(res"], "files": ["LightWeightMap.test.js", "TreeMap.test.js", "HashMap.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "increaseCapacityTo", "api_method_all": "increaseCapacityTo(minimumCapacity: number): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["add(14);\n    vector.increaseCapacityTo(30);\n    let res = ", "     lightWeightMap.increaseCapacityTo(\"qwe\");\n    } catch", "es = lightWeightSet.increaseCapacityTo(20);\n    expect(res", "(14);\n    arrayList.increaseCapacityTo(8);\n    let res = a", "\n    lightWeightMap.increaseCapacityTo(3);\n    let length ", "let res = arrayList.increaseCapacityTo();\n    } catch (err", "     lightWeightSet.increaseCapacityTo(3);\n    } catch (er", "es = lightWeightMap.increaseCapacityTo(10);\n    expect(res", "es = lightWeightSet.increaseCapacityTo(\"qwe\");\n    } catch", "(14);\n    arrayList.increaseCapacityTo(-1);\n    let res = "], "files": ["LightWeightMap.test.js", "Vector.test.js", "LightWeightSet.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "entries", "api_method_all": "entries(): IterableIterator<[K, V]>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": [" (let entry of that.entries()) {\n            ar", "c.isSetIterator(set.entries());\n        expect(", "  let res = hashMap.entries();\n    let arr = []", "{\n      let entry = entries.next().value;\n     ", "(var pair of params.entries()) {\n            ar", "et(4, \"g\");\n    let entries = treeMap.entries()", "es = lightWeightMap.entries();\n    expect(JSON.", "  let res = hashSet.entries();\n    for (let i =", "  let res = hashMap.entries();\n    expect(undef", "es = lightWeightSet.entries();\n    expect(JSON.", "t entries = treeMap.entries();\n    let flag = t", "c.isMapIterator(map.entries());\n        expect(", "  let res = treeSet.entries();\n    expect(JSON.", "  let res = hashSet.entries();\n    expect(res.n"], "files": ["LightWeightSet.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "TreeMap.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "get", "api_method_all": "get(key: K): V;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 517, "since": 8, "api_used": "\u662f", "lines": ["onfigService = core.getDefaultService('conf", "     var info = app.getInfo()\n        expec", "    let res = deque.getLast();\n    expect(r", "    let res = deque.getLast();\n      expect", "let res = arrayList.getIndexOf(\"A\");\n    ex", "\n    let res = list.getIndexOf(\"b\");\n    ex", "et res1 = arrayList.getLastIndexOf(1);\n    ", "let res = arrayList.getLastIndexOf(1);\n    ", "et res = linkedList.get(0);\n    expect(res)", "  const core = Core.getInstance()\n        c", "let res = arrayList.getCapacity();\n    expe", "\n    let res = list.getLastIndexOf(\"f\");\n  ", "et res1 = arrayList.getIndexOf(1);\n    expe", "let res = arrayList.getIndexOf(99);\n    let", "    let res = deque.getFirst();\n    expect(", "    let res = deque.getFirst();\n      expec", "\n    let res = list.getIndexOf(\"f\");\n    ex", "t res1 = linkedList.get(1);\n    expect(res1", "\n    let res = list.getLastIndexOf(\"a\");\n  "], "files": ["ExampleJsunit.test.js", "List.test.js", "LightWeightSet.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "getIndexOfKey", "api_method_all": "getIndexOfKey(key: K): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["es = lightWeightMap.getIndexOfKey(2);\n    expect(res)", "et res = plainArray.getIndexOfKey(9);\n    expect(res)", "   res = plainArray.getIndexOfKey(12);\n    expect(res", "et res = plainArray.getIndexOfKey(2);\n    expect(res)"], "files": ["LightWeightMap.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "getIndexOfValue", "api_method_all": "getIndexOfValue(value: V): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["   res = plainArray.getIndexOfValue(\"Z\");\n    expect(re", "es = lightWeightMap.getIndexOfValue(\"F\");\n    expect(re", "et res = plainArray.getIndexOfValue(\"A\");\n    expect(re", "et res = plainArray.getIndexOfValue(\"Asad\");\n    expect"], "files": ["LightWeightMap.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "isEmpty", "api_method_all": "isEmpty(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 34, "since": 8, "api_used": "\u662f", "lines": ["  let res = hashSet.isEmpty();\n    expect(res).", "ty = lightWeightMap.isEmpty();\n    expect(isEmp", " it(\"SR000GGR47_testisEmpty057\", 0, function ()", " +\n            info.isEmptyElementTag()+ info.i", "s2 = lightWeightMap.isEmpty();\n    expect(res2)", "    let res = stack.isEmpty();\n    expect(res).", "et res = plainArray.isEmpty();\n    expect(res).", "   let res = vector.isEmpty();\n    expect(res).", " it(\"SR000GGR44_testisEmpty031\", 0, function ()", " it(\"SR000GGR44_testisEmpty030\", 0, function ()", " let res1 = hashMap.isEmpty();\n    expect(res).", "\n    let res = list.isEmpty();\n    expect(res).", " it(\"SR000GGR47_testisEmpty058\", 0, function ()", "s1 = lightWeightMap.isEmpty();\n    expect(res1)", " let res1 = treeSet.isEmpty();\n    expect(res1)", "rtEqual(0);\n    let isEmpty = lightWeightMap.is", "es = lightWeightSet.isEmpty();\n    expect(res).", "let res = arrayList.isEmpty();\n    expect(res).", " let res2 = treeSet.isEmpty();\n    expect(res2)", "Empty();\n    expect(isEmpty).assertEqual(true);", "  var result = that.isEmpty()\n        expect(re"], "files": ["LightWeightSet.test.js", "List.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "getKeyAt", "api_method_all": "getKeyAt(index: number): K;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["et res = plainArray.getKeyAt(2);\n    expect(res)", "   res = plainArray.getKeyAt(10);\n    expect(res", "et res = plainArray.getKeyAt(50);\n    expect(res", "es = lightWeightMap.getKeyAt(1);\n    expect(res)", "es = lightWeightMap.getKeyAt(\"123\");\n    } catch"], "files": ["LightWeightMap.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "keys", "api_method_all": "keys(): IterableIterator<K>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 38, "since": 8, "api_used": "\u662f", "lines": ["  let res = hashMap.keys();\n    for (let i =", "From(2, 2);\n    let keys = [1, 2, 5];\n    le", "qual(plainArray.get(keys[i]));\n    }\n    try", " vals = [];\n    let keys = [];\n    hashMap.f", "g to go through all keys contained in this o", ": Obtains a list of keys for the values in t", "for (let i = 0; i < keys.length; i++) {\n    ", "dd(5, \"E\");\n    let keys = [1, 2, 3, 4, 5];\n", "  let res = treeMap.keys();\n    expect(res.n", "At(2, \"V\");\n    let keys = [1, 2, 3, 4, 5];\n", "c.isMapIterator(map.keys());\n        expect(", "c.isSetIterator(set.keys());\n        expect(", "qual(plainArray.get(keys[i]));\n    }\n  });\n ", "  var result = that.keys()\n        expect(re", "as = hashMap.hasKey(keys[i]);\n      expect(h", "r(var key of params.keys()) {\n            ar", "es = lightWeightMap.keys();\n    expect(res.n", "ue, key) => {\n      keys.push(key);\n      va"], "files": ["url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "PlainArray.test.js", "TreeMap.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "setAll", "api_method_all": "setAll(map: LightWeightMap<K, V>): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": [", \"c\");\n    treeMap.setAll(treeMap1);\n    let ", "(2, 2);\n    hashMap.setAll(hashMap1);\n    let ", "\n    lightWeightMap.setAll(lightWeightMap1);\n "], "files": ["LightWeightMap.test.js", "TreeMap.test.js", "HashMap.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "set", "api_method_all": "set(key: K, value: V): Object;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 666, "since": 8, "api_used": "\u662f", "lines": ["hMap();\n    hashMap.set(-1, \"A\");\n    let r", "hMap();\n    hashMap.set(1, \"A\");\n    let re", "hMap();\n    hashMap.set(\"a\", \"A\");\n    let ", "hMap();\n    hashMap.set(1, 3.14);\n    let r", "a = {};\n    hashMap.set(a, \"A\");\n    let re", ", \"A\");\n    hashMap.set(2, \"B\");\n    hashMa", " 2, 3];\n    hashMap.set(1, c);\n    let res ", "t(8, 2);\n    vector.set(1, \"\u4e8c\");\n    let re", "++) {\n      hashMap.set(1, i);\n    }\n    le", "hMap();\n    hashMap.set(1, \"A\");\n    hashMa", "++) {\n      hashMap.set(i, 1);\n      let re", "add(14);\n    vector.setLength(7);\n    let r", "hMap();\n    hashMap.set(\"$\", \"A\");\n    let ", "hMap();\n    hashMap.set(3.14, \"A\");\n    let", " try {\n      vector.set(12, \"\u4e8c\");\n    } cat", "hMap();\n    hashMap.set(1, 2);\n    let res ", ", \"B\");\n    hashMap.set(3, \"C\");\n    hashMa", ", \"C\");\n    hashMap.set(4, \"D\");\n    hashMa", "hMap();\n    hashMap.set(1, \"$\");\n    let re", "hMap();\n    hashMap.set(0.3, \"A\");\n    let ", "a = {};\n    hashMap.set(1, a);\n    let res ", "hMap();\n    hashMap.set(1, -1);\n    let res", "hMap();\n    hashMap.set(1, null);\n    let r", ".add(1);\n    vector.setLength(5);\n    let r", "\n    let res = list.set(2, \"d\");\n    let re", "hMap();\n    hashMap.set(\"\", \"A\");\n    let r", " \"13\"};\n    hashMap.set(1, c);\n    let res ", ", \"D\");\n    hashMap.set(5, \"E\");\n    let re", "rtEqual(\"ArrayList: set out-of-bounds\");\n  ", "      configService.setConfig(this)\n\n      "], "files": ["List.test.js", "LinkedList.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "remove", "api_method_all": "remove(key: K): V;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 93, "since": 8, "api_used": "\u662f", "lines": ["d(1);\n    arrayList.removeByRange(1, 3);\n    l", "  let res = hashSet.remove(1);\n    expect(res)", "3) {\n        vector.remove(123);\n      } else ", "es = lightWeightMap.remove(3);\n    expect(res)", "\n    let res = list.removeFirstFound(\"b\");\n   ", "et res = linkedList.removeFirst();\n    expect(", " try {\n      vector.removeByRange(1, 7);\n    }", "acity();\n    vector.removeByRange(0, capacity)", "\n    let res = list.remove(\"d\");\n    expect(re", "8) {\n        vector.remove(8);\n      }\n    }\n ", "let res = arrayList.removeByRange(6, 8);\n    }", "dd(\"a\");\n    vector.removeByIndex(2);\n    let ", " try {\n      vector.removeByIndex(12);\n    } c", " try {\n      vector.removeByRange(3, 1);\n    }", "dd(\"a\");\n    vector.remove(\"\u4e09\");\n    let res =", "\"a\");\n    arrayList.remove(\"\u4e09\");\n    let res =", "\"a\");\n    arrayList.removeByIndex(2);\n    let ", "acity();\n    vector.removeByRange(0, capacity ", "\n    let res = list.removeByIndex(2);\n    let ", "\n    let res = list.removeLastFound(\"b\");\n    ", "\n    let res = list.removeLast();\n    expect(r", "   let res = vector.remove(2);\n    expect(res)", "let res = arrayList.removeByIndex(5);\n    } ca", "     let res = list.removeByIndex(10);\n    } c", "\n    let res = list.remove(\"a\");\n    let arr =", "  let res = hashMap.remove(3);\n    expect(res)", "{\n        arrayList.remove(item);\n      }\n    ", "es = lightWeightMap.removeAt(1);\n    expect(re", "    let res = list1.removeLast();\n    expect(r", "let res = arrayList.removeByRange(3, 1);\n    }", " try {\n      vector.removeByRange(length + 1, ", "\n    let res = list.remove();\n    expect(res).", "let res = arrayList.remove(\"A\");\n    expect(re", "et res = linkedList.removeByIndex(1);\n    } ca", "ssage).assertEqual(\"removeByIndex is out-of-bo", "d(1);\n    arrayList.removeByRange(0, 9);\n    l", ".add(\"b\");\n    list.removeByIndex(2);\n    let ", " try {\n      vector.removeByRange(-1, capacity", "     let res = list.removeByIndex(5);\n    } ca", "s3 = lightWeightMap.removeAt(10);\n    expect(r", ".add(1);\n    vector.removeByRange(1, 3);\n    l", "     let res = list.removeByIndex(1);\n    } ca"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "removeAt", "api_method_all": "removeAt(index: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["es = lightWeightMap.removeAt(1);\n    expect(res)", "es = lightWeightMap.removeAt(\"123\");\n    } catch", "s3 = lightWeightMap.removeAt(10);\n    expect(res", "es = lightWeightSet.removeAt(\"123\");\n    } catch", "et res = plainArray.removeAt(2);\n    } catch (er", "et res = plainArray.removeAt(2);\n    expect(res)", "   res = plainArray.removeAt(12);\n    expect(res", "es = lightWeightSet.removeAt(1);\n    expect(res)"], "files": ["LightWeightMap.test.js", "PlainArray.test.js", "LightWeightSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "clear", "api_method_all": "clear(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 30, "since": 8, "api_used": "\u662f", "lines": ["t.add(14);\n    list.clear();\n    let res = li", "\n    lightWeightMap.clear();\n    let res = li", "ual(5);\n    hashSet.clear();\n    let res1 = h", "  let res = hashSet.clear();\n    expect(res).", "5,33);\n        that.clear()\n        var resul", "(5);\n    plainArray.clear();\n    let res1 = p", "add(5);\n    hashSet.clear();\n    let res = ha", ".add(\"a\");\n    list.clear();\n    let res = li", "ew List();\n    list.clear();\n    let res1 = l", "\n    lightWeightSet.clear();\n    let res = li", ", \"a\");\n    treeMap.clear();\n    expect(treeM", "\n    lightWeightSet.clear();\n    let res1 = l", "hMap();\n    hashMap.clear();\n    let res = ha", "add(2);\n    treeSet.clear();\n    let res = tr", "add(14);\n    vector.clear();\n    let res = ve", ", \"c\");\n    treeMap.clear();\n    let res = tr", "t();\n    linkedList.clear();\n    const len = ", "length\n        that.clear()\n        var resul", "ual(5);\n    hashMap.clear();\n    let res1 = h", "(0);\n    plainArray.clear();\n    let res2 = p", "(14);\n    arrayList.clear();\n    let res = ar", ", \"E\");\n    hashMap.clear();\n    let res = ha"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "setValueAt", "api_method_all": "setValueAt(index: number, newValue: V): boolean;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["\n    lightWeightMap.setValueAt(4, \"F\");\n    let re", "E\");\n    plainArray.setValueAt(2, \"V\");\n    let ke", " {\n      plainArray.setValueAt(8, \"V\");\n    } catc", " {\n      plainArray.setValueAt(-1, \"X\");\n    } cat", "\n    lightWeightMap.setValueAt(0, \"a\");\n    let re"], "files": ["LightWeightMap.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value?: V, key?: K, map?: LightWeightMap<K, V>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 5, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value?: V, key?: K, map?: LightWeightMap<K, V>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 4, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "toString", "api_method_all": "toString(): String;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 131, "since": 8, "api_used": "\u662f", "lines": ["      expect(result.toString()).assertEqual('')\n", "      expect(result.toString()).assertEqual(\"DEF", "   let res = vector.toString();\n    expect(res).", "      expect(result.toString()).assertEqual(\"da,", "   var res = params.toString();\n        expect(r", "es = lightWeightMap.toString();\n    expect(res).", "t res1 = plainArray.toString();\n    expect(res1)", "      expect(result.toString()).assertEqual(\"val", "\n        expect(res.toString()).assertEqual(\"htt", "es = lightWeightSet.toString();\n    expect(res).", "et res = plainArray.toString();\n    expect(res).", "var result = params.toString()\n        expect(re", "var result = params.toString();\n        expect(r", "   let res = gaogao.toString();\n        expect(r", "         expect(err.toString()).assertEqual(\"Err"], "files": ["LightWeightSet.test.js", "url.test.js", "util.test.js", "uri.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "getValueAt", "api_method_all": "getValueAt(index: number): V;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["es = lightWeightSet.getValueAt(9999);\n    let res1", "es = lightWeightSet.getValueAt(\"123\");\n    } catch", "es = lightWeightMap.getValueAt(\"123\");\n    } catch", "es = lightWeightMap.getValueAt(1);\n    expect(res)", "et res = plainArray.getValueAt(2);\n    expect(res)", "es = lightWeightSet.getValueAt(1);\n    expect(res)", "et res = plainArray.getValueAt(50);\n    expect(res", "   res = plainArray.getValueAt(12);\n    expect(res"], "files": ["LightWeightMap.test.js", "PlainArray.test.js", "LightWeightSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "values", "api_method_all": "values(): IterableIterator<V>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 71, "since": 0, "api_used": "\u662f", "lines": ["ar value  of params.values()) {\n            ar", " [1, 2, 5];\n    let values = [\"A\", \"B\", \"E\"];\n", "  let res = treeMap.values();\n    expect(res.n", "re several matching values, this method delete", "es that the queried values are successfully ma", "i++) {\n      expect(values[i]).assertEqual(pla", "  let res = hashSet.values();\n    for (let i =", ", 3, 4, 5];\n    let values = [\"A\", \"B\", \"C\", \"", "  let res = treeSet.values();\n    expect(res.n", "  let res = hashMap.values();\n    for (let i =", "g to go through all values contained in this o", "es that the queried values are not matched.\n  ", "es = lightWeightSet.values();\n    expect(res.n", "umber of times that values are added to the bu", "the total number of values in the current buff", "umber of times that values are evicted from th", ", 3, 4, 5];\n    let values = [\"A\", \"B\", \"V\", \"", "es = lightWeightMap.values();\n    expect(res.n"], "files": ["LightWeightSet.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "PlainArray.test.js", "TreeMap.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightWeightMap", "api_method_name": "length", "api_method_all": "length: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 327, "since": 8, "api_used": "\u662f", "lines": ["et res1 = arrayList.length;\n    expect(res).as", "   let res1 = deque.length;\n    expect(res1).a", "let res = arrayList.length;\n    expect(res).as", "   let size = deque.length;\n    expect(size).a", "   let size = deque.length;\n    let arr = [];\n", "= 0; i < linkedList.length; i++) {\n      if (l", "\n    let res = list.length;\n    expect(res).as", "r (let i = 0; i < a.length; i++) {\n      expec", "x = 0; index < list.length; index++) {\n      e", "let res = arrayList.length;\n    let res1 = arr", "st len = linkedList.length;\n    expect(len).as"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "Queue.test.js", "LightWeightMap.test.js", "LightWeightSet.test.js", "HashMap.test.js", "Worker.test.js", "TreeSet.test.js", "Process.test.js", "PlainArray.test.js", "TreeMap.test.js", "worker.js"], "is_white": " ", "desc": " "}]}