{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\common", "api": [{"api_class_name": "Configuration", "api_method_all": "declare interface Configuration {\n  \n  readonly colorMode: string;\n\n  \n  readonly fontScale: number;\n}", "api_method_name": "Configuration", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["@ts-nocheck\n\nimport Configuration from '@system.confi", "        let callBackConfiguration = (backData) => {\n ", "  console.info('testConfigurationGetLocale END');\n   ", ";\n\n    \n    it('testConfigurationGetLocale', 0, funct", "   let localeInfo = Configuration.getLocale();\n      ", "ationJsunit from './ConfigurationJsunit.test.ets';\nim", "  console.info('testConfigurationGetLocale START');\n ", "ationEvent, callBackConfiguration);\n      } catch (er"], "files": ["configuration.ets", "List.test.ets", "basicabilityapi.test.js", "ConfigurationJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Configuration", "api_method_name": "colorMode", "api_method_all": "readonly colorMode: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["nvironment.EnvProp(\"colorMode\", ColorMode.LIGHT);", "Environment_EnvProp_colorMode_0100] START');\n    ", "nvironment.EnvProp(\"colorMode\", ColorMode.DARK);\n", "Environment_EnvProp_colorMode_0100] enable1 =' + ", "              key: \"colorMode\", defaultValue: Col", "e = AppStorage.Get(\"colorMode\");\n      expect(ena", "Storage.DeleteProp(\"colorMode\");\n      expect(tru", "1 = AppStorage.Get(\"colorMode\");\n      console.in", "Environment_EnvProp_colorMode_0100] enable =' + e", "Environment_EnvProp_colorMode_0100', 0, function ", "Environment_EnvProp_colorMode_0100] END');\n      ", "e = AppStorage.Get(\"colorMode\");\n        let enab"], "files": ["SubscribaleAbstractJsunit.test.ets", "AppStorageJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Configuration", "api_method_name": "fontScale", "api_method_all": "readonly fontScale: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Rectangle", "api_method_all": "declare interface Rectangle {\n  \n  x?: Length;\n\n  \n  y?: Length;\n\n  \n  width?: Length;\n\n  \n  height?: Length;\n}", "api_method_name": "Rectangle", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Rectangle", "api_method_name": "x", "api_method_all": "x?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20226, "since": 7, "api_used": "\u662f", "lines": ["", "= eventData.data.flexBasis;\n      }\n     ", "3).backgroundColor(0x2788D9)\n      if (th", "mponent\nstruct AreaExample {\n  @State val", "\n        })\n      Text('new area is: \\n' ", "f (eventData.data.text != null) {\n       ", "\n  build() {\n    Flex({ direction: FlexDi", "      Button(this.text)\n        .key('ena", "isShow) {\n        Text(this.myText)\n     ", " value: string = 'Text';\n  @State size: s", "ue)\n        .key('text1')\n        .backgr", "nent\nstruct EllipseExample {\n  @State wid", "t({ message: 'The text is shown', duratio", "nent\nstruct EnabledExample {\n  @State ena", "\n  build() {\n    Flex({ justifyContent: F", " Column() {\n      Text(this.value)\n      ", "State direction: FlexDirection = FlexDire", "Component\nstruct FlexExample {\n  @State d", " (eventData.data.flexBasis != null) {\n   ", "      Text(this.myText)\n          .onAppe", "t({ message: 'The text is hidden', durati", "ze)\n        .key('text2')\n        .margin", "ngeAppear = 'Hide Text'\n            conso", "idth: string = \"200px\";\n  @State height: ", "mponent\nstruct FlexExample {\n  @State dir", "myText: string = 'Text for onAppear'\n\n  o", "0).backgroundColor(0x00FFFF)\n      }\n    ", " justifyContent: FlexAlign.Center }) {\n  ", "ngeAppear = 'Show Text'\n            conso", "tSize(9).fontColor(0xCCCCCC).width('90%')", " Column() {\n      Text('alignItems').font", "l) {\n        this.text = eventData.data.t", "onent\nstruct AppearExample {\n  @State isS", "  .backgroundColor(0x317aff)\n        .ena", " = true;\n  @State text: string = \"enable\"", " (eventData.data.flexGrow != null) {\n    ", ") {\n        this.flexBasis = eventData.da", ") {\n        this.flexGrow = eventData.dat", "r: string = 'Hide Text'\n  private myText:", "0).backgroundColor(0xAFEEEE)\n        Colu", "  .backgroundColor(0x317aff)\n        .opa", " FlexDirection = FlexDirection.Row\n  priv", "e = this.value + 'Text'\n          try {\n ", "lex({ direction: FlexDirection.Row, align", "   console.info(\"Flex page state change c", " = eventData.data.text\n      }\n    }\n  }\n", "onent\nstruct ColumnExample {\n  @State ali", " justifyContent: FlexAlign.SpaceAround })", "Text'\n  private myText: string = 'Text fo", "ight: string = \"200px\";\n\n  onPageShow() {"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "style.js", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Rectangle", "api_method_name": "y", "api_method_all": "y?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35614, "since": 7, "api_used": "\u662f", "lines": ["hos.emitter';\n\n@Entry\n@Component\nstruct E", "F)\n      }\n      .key(\"alignItemsColumn\")", "e is ${JSON.stringify(oldValue)} newvalue", "`${this.height}`).key('ellipse')\n    }.wi", "ohos.emitter'\n\n@Entry\n@Component\nstruct E", "ed:\" + JSON.stringify(eventData));\n      ", "Align.Center, justifyContent: FlexAlign.C", "d: 58,\n      priority: events_emitter.Eve", "size = JSON.stringify(newValue)\n         ", "d: 92,\n      priority: events_emitter.Eve", "te')\n  },\n  onDestroy() {\n    console.inf", "d: 93,\n      priority: events_emitter.Eve", "alled);\n          try {\n            var b", "e is ${JSON.stringify(newValue)}`)\n      ", "\n        Text(this.myText)\n          .onA", "eAppear)\n        .key('appear')\n        .", "Application onDestroy')\n  },\n}", "             priority: events_emitter.Eve", "r: \" + JSON.stringify(err.message))\n     ", "emitter.EventPriority.LOW\n            }\n ", "s.value)\n        .key('text1')\n        .b", " 'Text'\n          try {\n            var b", "hos.emitter';\n\n@Entry\n@Component\nstruct C", ": 192,\n      priority: events_emitter.Eve", "de Text'\n  private myText: string = 'Text", "ystem.prompt'\n\n@Entry\n@Preview\n@Component", "port prompt from '@system.prompt'\n\n@Entry", "hos.emitter';\n\n@Entry\n@Component\nstruct A", "emitter.EventPriority.LOW\n    }\n    event", "00 })\n            try {\n              var", "emitter.EventPriority.LOW\n              }", "is.size)\n        .key('text2')\n        .m", ": 907,\n      priority: events_emitter.Eve", ": 908,\n      priority: events_emitter.Eve"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "PieceCode.ets", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "video.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Rectangle", "api_method_name": "width", "api_method_all": "width?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1772, "since": 8, "api_used": "\u662f", "lines": ["temsColumn\")\n      .width('90%')\n      .borde", "thValue}`)\n        .width(200)\n        .heigh", ");\n        })\n    }.width('100%').height('100", "Stretch)\n          .width('33%')\n          .h", "s.alignItems)\n    }.width('100%').padding({ t", ")\n        }\n      }.width('90%').key('gridCon", "gnSelf,height:100').width('34%').height(100)\n", "hrink(2)\n          .width('40%')\n          .h", "ull) {\n        this.width = eventData.data.wi", "(\"img_width=\" + img.width);\n    console.log(\"", "blurValue)\n        .width('90%')\n        .hei", "s/bg.jpg\");\n    let width = img.width;\n    le", "ign.Center)\n      }.width('90%').height(120).", "le.log(\"imagebitmap_width=\" + width);\n    con", "fontColor(0xCCCCCC).width('90%')\n      Column", "pse().width(`${this.width}`).height(`${this.h", "fontColor(0xCCCCCC).width('90%')\n      Flex({", "fontColor(0xCCCCCC).width('90%')\n      Text()", "Shrink')\n          .width('40%')\n          .h", "fontColor(0xCCCCCC).width('90%')\n      Text('", "eExample {\n  @State width: string = \"200px\";\n", "agebitmap_width=\" + width);\n    console.log(\"", "lor(0xAFEEEE)\n    }.width('100%').margin({ to", "xBasis\")\n          .width('60%')\n          .h", "    let width = img.width;\n    let height = i", "%')\n      .border({ width: 1 })\n      .alignI", "enabled)\n    }\n    .width('100%')\n    .paddin", "t: 30 })\n    }\n    .width('100%').height('100", "sole.log(\"imageData_width=\" + imageData.width", "}\n    }.padding(30).width('100%')\n  }\n}", "Shrink\")\n          .width('50%')\n          .h", "    Text()\n        .width('90%')\n        .hei", " .height(200)\n    }.width('100%').margin({ to", "ey('ellipse')\n    }.width('100%').height('100", ") {\n      Ellipse().width(`${this.width}`).he", " {\n        Column().width('50%').height(30).b", "ckgroundImageSize({ width: 1200, height: 160 ", " if (eventData.data.width != null) {\n        ", "   console.log(\"img_width=\" + img.width);\n   ", ".key('flex')\n      .width('90%')\n      .heigh", "ignSelf,height:80').width('33%').height(80)\n ", "s.context)\n        .width('100%').height('40%", "width=\" + imageData.width);\n    console.log(\"", "fontColor(0xCCCCCC).width('90%')\n      Flex()", "th = eventData.data.width;\n      }\n      if (", "E)\n        Column().width('50%').height(30).b"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Rectangle", "api_method_name": "height", "api_method_all": "height?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1455, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.height != null) {\n        ", "     .width('100%').height('40%').backgroundCo", "    }.width('100%').height('100%')\n  }\n}", "\"img_height=\" + img.height);\n  }\n}", "\n    .width('100%').height('100%').margin({ to", "width(200)\n        .height(200)\n    }.width('1", ".gridSpan)\n        .height(\"100%\")\n        .ba", "        })\n        .height(\"100%\")\n        .ba", "th(`${this.width}`).height(`${this.height}`).k", "   let height = img.height;\n    this.context.i", ":100').width('34%').height(100)\n          .bac", " img.width;\n    let height = img.height;\n    t", "dth('90%')\n        .height(40)\n        .fontSi", "   console.log(\"img_height=\" + img.height);\n  ", "sole.log(\"imageData_height=\" + imageData.heigh", "     }.width('90%').height(120).padding(10).ba", "ull) {\n        this.height = eventData.data.he", "h('50%')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .shadow", "eight=\" + imageData.height);\n  }\n\n  testImage(", "s('100')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .graysc", "h('33%')\n          .height(80)\n          .line", "le.log(\"imagebitmap_height=\" + height);\n  }\n\n ", "h('60%')\n          .height(100)\n          .lin", "= \"200px\";\n  @State height: string = \"200px\";\n", "h}`).height(`${this.height}`).key('ellipse')\n ", " Text('no alignSelf,height:80').width('33%').h", "xGrow(1)\n          .height(100)\n          .lin", "ht = eventData.data.height;\n      }\n    }\n  }\n", "gebitmap_height=\" + height);\n  }\n\n  testOffscr", "xGrow(2)\n          .height(100)\n          .lin", "lumn().width('50%').height(30).backgroundColor", "h('40%')\n          .height(100)\n          .lin", "Size({ width: 1200, height: 160 })\n        .ke", "    })\n            .height(50)\n            .ba", "width('90%')\n      .height(120)\n      .padding", "   })\n\n            .height(50)\n            .ba", "ridOffset)\n        .height(\"100%\")\n        .ba", "an')\n      }\n      .height(200)\n    }\n    .bac", " Text('no alignSelf,height:100').width('34%').", "t:80').width('33%').height(80)\n          .back", "    }.width('100%').height('100%')\n  }\n\n  test"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "AlertDialog.ets", "sliderProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimateParam", "api_method_all": "declare interface AnimateParam {\n  \n  duration?: number;\n  \n  tempo?: number;\n  \n  curve?: Curve | string;\n  \n  delay?: number;\n  \n  iterations?: number;\n  \n  playMode?: PlayMode;\n  \n  onFinish?: () => void;\n}", "api_method_name": "AnimateParam", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AnimateParam", "api_method_name": "onFinish", "api_method_all": "onFinish?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": [" animation complete onFinish')\n        })\n      ", "      console.info(\"onFinish\");\n        })\n     ", "\n      console.log('onFinish')\n    })\n    .onSki", " animation complete onFinish')\n          this.on", "      console.info('onFinish')\n    })\n    .onSki", "key('stepper')\n    .onFinish(() => {\n      conso", "rItem4')\n    }\n    .onFinish(() => {\n      conso", "        })\n        .onFinish(() => {\n          c"], "files": ["Video.ets", "stepper.ets", "marquee.ets", "Stepper.ets", "animationStatus.ets", "imageAnimator.ets", "fillMode.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimateParam", "api_method_name": "duration", "api_method_all": "duration?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 240, "since": 7, "api_used": "\u662f", "lines": ["reateAnimator({\n    duration: 3000,\n    fill: 'f", "ata: {\n            \"duration\": \"nan\"\n          }", "xpect(objNew.$attrs.duration).assertEqual('500.0", "ull) {\n        this.duration = parseInt(eventDat", "he text is hidden', duration: 2000 })\n          ", "nsole.info(\"button6 duration value is : \" + this", "value is : \" + this.duration)\n          animateT", "xpect(objNew.$attrs.duration).assertEqual('nan')", "ata: {\n            \"duration\": \"500\"\n          }", "        animateTo({ duration: this.duration }, (", "To({ duration: this.duration }, () => {\n        ", "gify(this.matrix1), duration: 200 })\n          t", "nsole.info(\"button6 duration test animateTo STAR", " if (eventData.data.duration != null) {\n        ", "3.jpg',\n            duration: 500,\n            w", "ssage: \"sucessful\", duration: 200 })\n          t", "     .duration(this.duration)\n      .vertical(th", "s = {\n              duration: 5000,\n            ", "        animateTo({ duration: 1000 }, () => {\n  ", "nsole.info(\"button1 duration test animateTo STAR", "nsole.info(\"button1 duration value is : \" + this", " {\n                \"duration\": this.duration,\n  ", "an = false\n  @State duration: number = 100\n  @St", "2.jpg',\n            duration: 500,\n            w", "options = {\n        duration: 2000,\n        iter", "   \"duration\": this.duration,\n              }\n  ", "  expect(obj.$attrs.duration).assertEqual('1000.", "4.jpg',\n            duration: 500,\n            w", "nsole.info(\"button7 duration test animateTo STAR", "eInt(eventData.data.duration);\n      }\n      if ", "an = false\n  @State duration: number = 1000\n  @S", "nsole.info(\"button7 duration value is : \" + this", "The text is shown', duration: 2000 })\n          ", "p(this.loop)\n      .duration(this.duration)\n    ", "1.jpg',\n            duration: 500,\n            w"], "files": ["animate.ets", "pageTransition2.ets", "ohosPrompt.ets", "imageAnimatorProps.test.js", "ohosMatrix4.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "fillMode.ets", "curves.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "geometryTransition.ets", "swiperProps.test.js", "AnimateJsunit.test.ets", "animatorOption.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "transition.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimateParam", "api_method_name": "tempo", "api_method_all": "tempo?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["      \"tempo\": this.tempo\n              }\n   ", " if (eventData.data.tempo != null) {\n        ", "ull) {\n        this.tempo = parseInt(eventDat", "ata: {\n            \"tempo\": \"20000\"\n         ", "ept(indexEvent.data.tempo).assertEqual('-5')\n", "ata: {\n            \"tempo\": \"-5\"\n          }\n", "eInt(eventData.data.tempo);\n      }\n      if ", "number = 1\n  @State tempo: number= 1000\n  @St", " {\n                \"tempo\": this.tempo\n      ", ".dimension,\n        temporary:true\n      })\n ", "nsole.info(\"button4 tempo value is : \" + this", "        animateTo({ tempo: this.tempo }, () =", "ata: {\n            \"tempo\": \"12121212121212\"\n", "ateTo({ tempo: this.tempo }, () => {\n        ", "nsole.info(\"button4 tempo test animateTo STAR", "ept(indexEvent.data.tempo).assertEqual('20000", ".type).assertEqual('temporary') //prop and va", "ept(indexEvent.data.tempo).assertEqual(1000)\n", "ept(indexEvent.data.tempo).assertEqual('12121"], "files": ["animate.ets", "panelProps.test.js", "AnimateJsunit.test.ets", "FormComponentPage.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimateParam", "api_method_name": "curve", "api_method_all": "curve?: Curve | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 51, "since": 7, "api_used": "\u662f", "lines": [")=> {\n          let curve = Curves.cubicBezie", "ata: {\n            \"curve\": 123\n          }\n ", "value is : \" + this.curve)\n          animateT", "ept(indexEvent.data.curve).assertEqual('Ease'", "   this.widthSize = curve.interpolate(0.5) * ", "  console.info(\"get curves state pages:\" + JS", "console.error(\"push curves page error:\" + err", "nsole.info(\"button2 curve value is : \" + this", "ept(indexEvent.data.curve).assertEqual('Linea", "nsole.info(\"button2 curve test animateTo STAR", "r({ duration: 1200, curve: Curve.Linear })\n  ", " if (eventData.data.curve != null) {\n        ", "mber = 100\n  @State curve: string = 'Ease'\n  ", "ept(indexEvent.data.curve).assertEqual('123')", "1.0);\n          let curve6 = Curves.LinearOut", "n({duration: 2000 , curve: Curves.spring(0.25", "        uri: 'pages/curves',\n      }\n      tr", "1.0);\n          let curve8 = Curves.ExtremeDe", "1.0);\n          let curve1 = Curves.init();\n ", " console.info(\"push curves page result:\" + JS", "1.0);\n          let curve9 = Curves.Sharp(0.3", "it();\n          let curve2 = Curves.Curve.Eas", "s));\n        if (!(\"curves\" == pages.name)) {", " Curves from '@ohos.curves'\n\n@Entry\n@Componen", " {\n                \"curve\": this.curve,\n     ", "      \"curve\": this.curve,\n              }\n  ", "o({ duration: 4000, curve: Curve.Linear }, ()", "1.0);\n          let curve10 = Curves.Rhythm(0", "  this.heightSize = curve.interpolate(0.5) * ", "ull) {\n        this.curve = eventData.data.cu", "        animateTo({ curve: this.curve }, () =", "1.0);\n          let curve4 = Curves.Curve.Eas", "t({ duration: 1500, curve: Curve.Ease })\n    ", "rt default function curvesJsunit() {\n  descri", "ve = eventData.data.curve;\n      }\n      if (", "1.0);\n          let curve3 = Curves.Curve.Eas", "  console.info(\"get curves state pages.name:\"", "ept(indexEvent.data.curve).assertEqual('abc')", "      console.info(\"curves beforeEach start\")", "      console.info(\"curves after each called\"", "ateTo({ curve: this.curve }, () => {\n        ", "1.0);\n          let curve5 = Curves.FastOutSl", "ata: {\n            \"curve\": \"Linear\"\n        ", "1.0);\n          let curve11 = Curves.cubicBez", "t.test.ets';\nimport curvesJsunit from './Curv", "1.0);\n          let curve12 = Curves.spring(1", "ata: {\n            \"curve\": 'abc'\n          }", "1.0);\n          let curve7 = Curves.FastOutLi"], "files": ["animate.ets", "pageTransition2.ets", "pageTransition.ets", "AnimateJsunit.test.ets", "motionPath.ets", "List.test.ets", "curves.ets", "CurvesJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimateParam", "api_method_name": "delay", "api_method_all": "delay?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 59, "since": 7, "api_used": "\u662f", "lines": [" 2000,\n            \"delay\": 5,\n            \"t", "\n                  \"delay\": this.delay,\n     ", "(indexEventOne.data.delay).assertEqual(5);\n  ", "ion: this.duration, delay: this.delay, type: ", "ber = 1000\n  @State delay: number = 0\n  @Stat", "ull) {\n        this.delay = eventData.data.de", " if (eventData.data.delay != null) {\n        ", "sing: 'friction',\n  delay: 100,\n  fill: 'forw", "      \"delay\": this.delay,\n                  ", "ay = eventData.data.delay;\n      }\n      if (", "ration, delay: this.delay, type: this.type })", "ng: 'friction',\n    delay: 100,\n    fill: 'fo"], "files": ["SharedTransitionJsunit.test.ets", "sharedTransition.ets", "basicabilityapi.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimateParam", "api_method_name": "iterations", "api_method_all": "iterations?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 64, "since": 7, "api_used": "\u662f", "lines": ["=> {\n          this.iterations = -1\n        })\n   ", " {\n                \"iterations\": this.iterations\n ", "an = false\n  @State iterations: number = 1\n  @Stat", "        animateTo({ iterations: this.iteration }, ", "de).iterations(this.iterations).width(325).height(", "n = false;\n  @State iterations: number = 1;\n\n  bui", "ect(indexEvent.data.iterations).assertEqual(1);\n  ", "Mode(FillMode.None).iterations(this.iterations).wi", "ll: 'forwards',\n    iterations: 2,\n    direction: ", "ne).iterations(this.iterations).width(325).height(", "Mode(this.fillMode).iterations(this.iterations).wi", "fill: 'forwards',\n  iterations: 2,\n  direction: 'n", "=> {\n          this.iterations = 1\n          try {", " \"iterations\": this.iterations\n              }\n   ", "=> {\n          this.iterations = 1\n        })\n    ", "=> {\n          this.iterations = -1\n          try ", " {\n                \"iterations\": this.iteration,\n ", "nsole.info(\"button3 iterations test animateTo STAR", "tion: 2000,\n        iterations: 1,\n        directi", "5000,\n              iterations: 2,\n              b"], "files": ["animate.ets", "ImageAnimatorJsunit.test.ets", "animationStatus.ets", "imageAnimator.ets", "animatorOption.ets", "index.js", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AnimateParam", "api_method_name": "playMode", "api_method_all": "playMode?: PlayMode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 48, "since": 7, "api_used": "\u662f", "lines": ["ropStretch: this.displayModePropStretch,\n       ", "displayMode(this.displayMode)\n      .displayCoun", "      console.info('playModeTest_0100 START');\n ", "   \"playMode\": this.playMode,\n              }\n  ", "temSpace)\n      .displayMode(this.displayMode)\n ", "r()\n        this.displayModePropStretch = this.$", "      console.info(\"playModeTest_0100 on events_", "t.test.ets';\nimport playModeJsunit from './PlayM", "      console.info('playModeTest_0100 END');\n   ", "g: null,\n        displayModePropStretch: null,\n ", "        uri: 'pages/playMode',\n      }\n      try", ".info('testSwiperDisplayModePropStretch START');", "=> {\n          this.playMode = PlayMode.Alternat", "AutoLinear: this.displayModePropAutoLinear,\n    ", "r()\n        this.displayModePropAutoLinear = thi", "ing,\n            displayModePropStretch: this.di", " {\n                \"playMode\": this.playMode,\n  ", "tch,\n            displayModePropAutoLinear: this", "   it('testSwiperDisplayModePropStretch', 0, asy", "e      testSwiperDisplayModePropAutoLinear\n     ", "      console.info(\"playModeTest_0100 click resu", "globalThis.value.displayModePropStretch); //id\n ", ");\n    });\n\n    it('playModeTest_0100', 0, async", "unit(){\n  describe('playModeTest', function (){\n", " console.info(\"push playMode page result:\" + JSO", "id).assertEqual('displayModePropStretch') //ID\n ", "nsole.info(\"button5 playMode test animateTo STAR", "= this.$element(\"displayModePropAutoLinear\").get", "ber = 3\n  @State displayMode: number = SwiperDis", "CapStyleJsunit();\n  playModeJsunit();\n  GestureM", "eExample {\n  @State playMode:PlayMode = PlayMode", "s));\n        if (!(\"playMode\" == pages.name)) {\n", "e      testSwiperDisplayModePropStretch\n     * @", "id).assertEqual('displayModePropAutoLinear') //I", ".info('testSwiperDisplayModePropAutoLinear START", "rt default function playModeJsunit(){\n  describe", "  console.info(\"get playMode state pages.name:\" ", ": number = SwiperDisplayMode.AutoLinear\n  @State", "      console.info(\"playModeTest_0100 get state ", "= this.$element(\"displayModePropStretch\").getIns", "      console.info(\"playMode beforeEach start\");", "globalThis.value.displayModePropAutoLinear); //i", "console.error(\"push playMode page error:\" + err)", "   it('testSwiperDisplayModePropAutoLinear', 0, ", "ept(indexEvent.data.playMode).assertEqual(PlayMo", "h: null,\n        displayModePropAutoLinear: null", "      console.info(\"playMode after each called\")", "  console.info(\"get playMode state pages:\" + JSO"], "files": ["animate.ets", "index.js", "swiperProps.test.js", "PlayModeJsunit.test.ets", "swiper.ets", "playMode.ets", "List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MotionPathOptions", "api_method_all": "declare interface MotionPathOptions {\n  \n  path: string;\n  \n  from?: number;\n  \n  to?: number;\n  \n  rotatable?: boolean;\n}", "api_method_name": "MotionPathOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MotionPathOptions", "api_method_name": "path", "api_method_all": "path: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 436, "since": 7, "api_used": "\u662f", "lines": [", '/path/image2', '/path/image3']\n\n  public ", "console.error(\"push path page error:\" + err)", "is.color4)\n        .pathColor(this.color5)\n ", "(8)\n        Button('pathStrokeWidth' + this.", "addPath() {\n    let path2Da = new Path2D(\"M2", " ['/path/image0', '/path/image1', '/path/ima", "his.data.pushData('/path/image' + this.data.", "    path2Db.addPath(path2Da);\n    this.conte", "        uri: 'pages/path',\n      }\n      try", "{\n    console.info('path page build done cal", " console.info(\"push path page result:\" + JSO", "rray: string[] = ['/path/image0', '/path/ima", " 0 300 300 Z\").key('path4')\n        Path().w", "      console.info(\"path after each called\")", "  if(eventData.data.pathStrokeWidth != null)", "0 L150 300 Z').key('path5')\n      }\n    }.wi", "strokeWidth(3).key('path')\n\n      Text('Stra", "300 L0 300 Z').key('path1')\n        Path().w", "AbstractJsunit();\n  pathJsunit();\n  enumsLin", "an = false\n  @State path: string= 'Mstart.x ", "umber = 7;\n  @State pathStrokeWidth: number ", "{\n    console.info('path page show called');", "cleRadius)\n        .pathStrokeWidth(this.pat", "ull) {\n        this.pathStrokeWidth = eventD", "= new Path2D();\n    path2Db.addPath(path2Da)", "0 L300 150 Z').key('path3')\n      }.width('1", "opNone,\n            pathProp : this.pathProp", "       expect(pages.path).assertEqual('pages", "t.test.ets';\nimport pathJsunit from './PathJ", "onPath({ path: this.path, from: this.fromX, ", "athStrokeWidth(this.pathStrokeWidth)\n       ", "one : null,\n        pathProp : null,\n       ", "\n    console.info('[path] page show called '", "s));\n        if (!(\"path\" == pages.name)) {\n", "00 V300 H0 Z').key('path2')\n        Path().w", "    pathProp : this.pathProp,\n            pa", "      .motionPath({ path: this.path, from: t", "50 350 Z\");\n    let path2Db = new Path2D();\n", "ternLock')\n        .pathStrokeWidth(this.str", "th = eventData.data.pathStrokeWidth;\n      }", "(8)\n        Button('pathColor').onClick(() =", "  console.info(\"get path state pages: \" + JS", ", '/path/image1', '/path/image2', '/path/ima", "      console.info(\"path beforeEach start\");", "e(Color.Black).key('path1').strokeWidth(3)\n\n", " getInspectorByKey('path1');\n      let obj =", "rop : null,\n        pathPropNone : null,\n   ", "this.context.stroke(path2Db);\n  }\n\n  lineDas"], "files": ["index.js", "List.test.js", "pathProps.test.js", "OhosRouterJsnuit.test.ets", "lazyForEach.ets", "PathJsunit.test.ets", "animateMotionProps.test.js", "PatternLock.ets", "SystemRouterJsunit.test.ets", "textPathProps.test.js", "path.ets", "motionPath.ets", "Path.ets", "List.test.ets", "basicabilityapi.test.js", "commonComponentJsApi.test.js", "canvas.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MotionPathOptions", "api_method_name": "from", "api_method_all": "from?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1217, "since": 7, "api_used": "\u662f", "lines": ["ocheck\n\nimport file from '@system.file';\nimp", "port events_emitter from '@ohos.emitter'\nimp", "port events_emitter from '@ohos.events.emitt", "tLog, ReportExtend} from \"deccjsunit/index.e", "tter'\nimport prompt from '@system.prompt'\n\n@", " this.loop,\n        fromStart: this.fromStar", "tter';\nimport Utils from './Utils.ets';\n\nexp", ".ets\"\nimport router from '@system.router';\ni", "itter'\nimport Utils from './Utils.ets';\nexpo", "    fromStart: this.fromStart,\n        src: ", "port events_emitter from '@ohos.emitter';\n\nc", "port events_emitter from '@ohos.emitter';\n\n@", "itter'\nimport Utils from './Utils.ets';\n\nexp", "an = false\n  @State fromStart: boolean = tru", "port events_emitter from '@ohos.emitter'\n\ncl", "port events_emitter from '@ohos.emitter'\n\n@E", "port featureAbility from \"@ohos.ability.feat", "terAll, it, expect} from \"deccjsunit/index.e", "\";\nimport testsuite from \"../test/List.test.", "ets\";\nimport router from '@system.router';\ni"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "LongPressGesture.test.ets", "path.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "flex.ets", "MotionPathJsunit.test.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "AnimationStatusJsunit.test.ets", "ohosMatrix4.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "ellipseProps.test.js", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "refresh.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "PathJsunit.test.ets", "column.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "background.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "PieceCode.ets", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "search.ets", "rectProps.test.js", "blank.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "video.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "BasicJsunit.test.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "animateTransformProps.test.js", "AlphabetIndexerJsunit.test.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "line.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "gridContainer.ets", "ShapeJsunit.test.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "listProps.test.js", "progressProps.test.js", "sharedTransition.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MotionPathOptions", "api_method_name": "to", "api_method_all": "to?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 15592, "since": 7, "api_used": "\u662f", "lines": ["nSelf = ItemAlign.Auto;\n          break;\n ", "th('100%').margin({ top: 5 })\n  }\n}\n", "          .margin({ top: 250 })\n          ", "        }).margin({ top: 5, left: 20 })\n  ", "acity(0.4)\n      Button(this.text)\n       ", "          .margin({ top: 250 })\n      }\n  ", "       .margin({ bottom: 40 })\n        .on", "4000\n  @State indicator: boolean = true\n  ", "        })\n      Button('start')\n        .", " Text('flexBasis(\"auto\")')\n          .flex", "f3f5)\n    .margin({ top: 10 })\n    .key('g", "0%')\n    .padding({ top: 5 })\n  }\n}", "\"onAreaChange start to emit action state\")", "erval)\n      .indicator(this.indicator)\n  ", "ontainer').margin({ top: 300 })\n    }\n  }\n", "       .margin({ bottom: 20 })\n    }\n    .", "zeType = SizeType.Auto;\n      }\n    }\n  }\n", "')\n        .key('button')\n        .onClick", "info(\"onClick start to emit action state\")", "nfo(\"Onbounce start to emit action state\")", "console.info(\"start to emit action state\")", "nSelf = ItemAlign.Auto;\n      }\n    }\n  }\n", "info(\"Onstart start to emit action state\")", "SwiperDisplayMode.AutoLinear\n  @State edge", "o(\"appearFlag start to emit action state\")", "   .autoPlay(this.autoPlay)\n      .interva", "nfo(\"Onfinish start to emit action state\")", "ht('100%').margin({ top: 30 })\n  }\n}", "%')\n    }.padding({ top: 20 })\n  }\n}", "h('100%')\n\n      Button('edit list')\n     ", ") {\n        case 'Auto':\n          this.si", "disAppearFlag start to emit action state\")", "round }) {\n      Button('disable')\n       ", "      .flexBasis('auto')\n          .key(\"f", "0xDCDCDC).padding({ top: 5 })\n  }\n}", "his.index)\n      .autoPlay(this.autoPlay)\n", "ndicator(this.indicator)\n      .loop(this.", "Listener\n\n  constructor(list: number[]) {\n", "Column() {\n      Button(this.changeAppear)", "th('100%').margin({ top: 5 })\n  }\n}", "h('100%').padding({ top: 5 })\n  }\n}", "ment = Alignment.Bottom\n\n  onPageShow() {\n", "{\n      list.push(i.toString());\n    }\n   ", ".list = list\n  }\n\n  totalCount(): number {", "zeType = SizeType.Auto;\n          break;\n ", "th('100%').margin({ top: 300 })\n  }\n}\n\n", ") {\n        case 'Auto':\n          this.al", "ect.None\n  @State autoPlay: boolean = true"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "transition.ets", "gridSettings.ets", "Image.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "ToggleJsunit.test.ets", "ohosRouterB.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "PieceCode.ets", "qrcodeProps.test.js", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "pickerViewProps.test.js", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "video.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "CheckboxGroupJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "animateTransformProps.test.js", "AlphabetIndexerJsunit.test.ets", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "swiper.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MotionPathOptions", "api_method_name": "rotatable", "api_method_all": "rotatable?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["=> {\n          this.rotatable = true;\n          c", "ean = true\n  @State rotatable: boolean = false\n  ", "oY, rotatable: this.rotatable })\n        .onClick", "romX, to: this.toY, rotatable: this.rotatable })\n", "n state is:' + this.rotatable);\n          try {\n ", "     \"ACTION\": this.rotatable,\n              }\n  "], "files": ["motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "sharedTransitionOptions", "api_method_all": "declare interface sharedTransitionOptions {\n  \n  duration?: number;\n  \n  curve?: Curve | string;\n  \n  delay?: number;\n  \n  motionPath?: MotionPathOptions;\n  \n  zIndex?: number;\n  \n  type?: SharedTransitionEffectType;\n}", "api_method_name": "sharedTransitionOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sharedTransitionOptions", "api_method_name": "duration", "api_method_all": "duration?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 240, "since": 7, "api_used": "\u662f", "lines": ["reateAnimator({\n    duration: 3000,\n    fill: 'f", "ata: {\n            \"duration\": \"nan\"\n          }", "xpect(objNew.$attrs.duration).assertEqual('500.0", "ull) {\n        this.duration = parseInt(eventDat", "he text is hidden', duration: 2000 })\n          ", "nsole.info(\"button6 duration value is : \" + this", "value is : \" + this.duration)\n          animateT", "xpect(objNew.$attrs.duration).assertEqual('nan')", "ata: {\n            \"duration\": \"500\"\n          }", "        animateTo({ duration: this.duration }, (", "To({ duration: this.duration }, () => {\n        ", "gify(this.matrix1), duration: 200 })\n          t", "nsole.info(\"button6 duration test animateTo STAR", " if (eventData.data.duration != null) {\n        ", "3.jpg',\n            duration: 500,\n            w", "ssage: \"sucessful\", duration: 200 })\n          t", "     .duration(this.duration)\n      .vertical(th", "s = {\n              duration: 5000,\n            ", "        animateTo({ duration: 1000 }, () => {\n  ", "nsole.info(\"button1 duration test animateTo STAR", "nsole.info(\"button1 duration value is : \" + this", " {\n                \"duration\": this.duration,\n  ", "an = false\n  @State duration: number = 100\n  @St", "2.jpg',\n            duration: 500,\n            w", "options = {\n        duration: 2000,\n        iter", "   \"duration\": this.duration,\n              }\n  ", "  expect(obj.$attrs.duration).assertEqual('1000.", "4.jpg',\n            duration: 500,\n            w", "nsole.info(\"button7 duration test animateTo STAR", "eInt(eventData.data.duration);\n      }\n      if ", "an = false\n  @State duration: number = 1000\n  @S", "nsole.info(\"button7 duration value is : \" + this", "The text is shown', duration: 2000 })\n          ", "p(this.loop)\n      .duration(this.duration)\n    ", "1.jpg',\n            duration: 500,\n            w"], "files": ["animate.ets", "pageTransition2.ets", "ohosPrompt.ets", "imageAnimatorProps.test.js", "ohosMatrix4.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "fillMode.ets", "curves.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "geometryTransition.ets", "swiperProps.test.js", "AnimateJsunit.test.ets", "animatorOption.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "transition.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "sharedTransitionOptions", "api_method_name": "curve", "api_method_all": "curve?: Curve | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 51, "since": 7, "api_used": "\u662f", "lines": [")=> {\n          let curve = Curves.cubicBezie", "ata: {\n            \"curve\": 123\n          }\n ", "value is : \" + this.curve)\n          animateT", "ept(indexEvent.data.curve).assertEqual('Ease'", "   this.widthSize = curve.interpolate(0.5) * ", "  console.info(\"get curves state pages:\" + JS", "console.error(\"push curves page error:\" + err", "nsole.info(\"button2 curve value is : \" + this", "ept(indexEvent.data.curve).assertEqual('Linea", "nsole.info(\"button2 curve test animateTo STAR", "r({ duration: 1200, curve: Curve.Linear })\n  ", " if (eventData.data.curve != null) {\n        ", "mber = 100\n  @State curve: string = 'Ease'\n  ", "ept(indexEvent.data.curve).assertEqual('123')", "1.0);\n          let curve6 = Curves.LinearOut", "n({duration: 2000 , curve: Curves.spring(0.25", "        uri: 'pages/curves',\n      }\n      tr", "1.0);\n          let curve8 = Curves.ExtremeDe", "1.0);\n          let curve1 = Curves.init();\n ", " console.info(\"push curves page result:\" + JS", "1.0);\n          let curve9 = Curves.Sharp(0.3", "it();\n          let curve2 = Curves.Curve.Eas", "s));\n        if (!(\"curves\" == pages.name)) {", " Curves from '@ohos.curves'\n\n@Entry\n@Componen", " {\n                \"curve\": this.curve,\n     ", "      \"curve\": this.curve,\n              }\n  ", "o({ duration: 4000, curve: Curve.Linear }, ()", "1.0);\n          let curve10 = Curves.Rhythm(0", "  this.heightSize = curve.interpolate(0.5) * ", "ull) {\n        this.curve = eventData.data.cu", "        animateTo({ curve: this.curve }, () =", "1.0);\n          let curve4 = Curves.Curve.Eas", "t({ duration: 1500, curve: Curve.Ease })\n    ", "rt default function curvesJsunit() {\n  descri", "ve = eventData.data.curve;\n      }\n      if (", "1.0);\n          let curve3 = Curves.Curve.Eas", "  console.info(\"get curves state pages.name:\"", "ept(indexEvent.data.curve).assertEqual('abc')", "      console.info(\"curves beforeEach start\")", "      console.info(\"curves after each called\"", "ateTo({ curve: this.curve }, () => {\n        ", "1.0);\n          let curve5 = Curves.FastOutSl", "ata: {\n            \"curve\": \"Linear\"\n        ", "1.0);\n          let curve11 = Curves.cubicBez", "t.test.ets';\nimport curvesJsunit from './Curv", "1.0);\n          let curve12 = Curves.spring(1", "ata: {\n            \"curve\": 'abc'\n          }", "1.0);\n          let curve7 = Curves.FastOutLi"], "files": ["animate.ets", "pageTransition2.ets", "pageTransition.ets", "AnimateJsunit.test.ets", "motionPath.ets", "List.test.ets", "curves.ets", "CurvesJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "sharedTransitionOptions", "api_method_name": "delay", "api_method_all": "delay?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 59, "since": 7, "api_used": "\u662f", "lines": [" 2000,\n            \"delay\": 5,\n            \"t", "\n                  \"delay\": this.delay,\n     ", "(indexEventOne.data.delay).assertEqual(5);\n  ", "ion: this.duration, delay: this.delay, type: ", "ber = 1000\n  @State delay: number = 0\n  @Stat", "ull) {\n        this.delay = eventData.data.de", " if (eventData.data.delay != null) {\n        ", "sing: 'friction',\n  delay: 100,\n  fill: 'forw", "      \"delay\": this.delay,\n                  ", "ay = eventData.data.delay;\n      }\n      if (", "ration, delay: this.delay, type: this.type })", "ng: 'friction',\n    delay: 100,\n    fill: 'fo"], "files": ["SharedTransitionJsunit.test.ets", "sharedTransition.ets", "basicabilityapi.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sharedTransitionOptions", "api_method_name": "motionPath", "api_method_all": "motionPath?: MotionPathOptions", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["      console.info(\"motionPathTest_0300 click resu", " })\n    }\n    .key('motionPath')\n    .width('100%'", "        uri: 'pages/motionPath',\n      }\n      try", "s));\n        if (!(\"motionPath\" == pages.name)) {\n", "      console.info(\"motionPath after each called\")", "      console.info('motionPathTest_0100 START');\n ", "      console.info('motionPathTest_0300 START');\n ", "      console.info('motionPath page state change c", " getInspectorByKey('motionPath');\n      console.in", "console.error(\"push motionPath page error: \" + err", "rt default function motionPathJsunit() {\n  describ", "  console.info(\"get motionPath state success \" + J", "      console.info(\"motionPathTest_0100 component ", "      console.info(\"motionPathTest_0200 get state ", "      console.info('motionPathTest_0200 END');\n   ", "{\n    console.info('motionPath page show called');", ");\n    });\n\n    it('motionPathTest_0300', 0, async", "      console.info(\"motionPathTest_0200 click resu", "nit() {\n  describe('motionPathTest', function () {", " console.info(\"push motionPath page success \" + JS", "      console.info(\"motionPathTest_0200 on events_", "t.test.ets';\nimport motionPathJsunit from './Motio", "      console.info(\"motionPathTest_0300 on events_", "      console.info(\"motionPathTest_0300 get state ", ");\n    });\n\n    it('motionPathTest_0100', 0, async", "('button')\n        .motionPath({ path: this.path, ", ");\n    });\n\n    it('motionPathTest_0200', 0, async", "      console.info('motionPathTest_0200 START');\n ", "      console.info('motionPathTest_0300 END');\n   ", "\n  shapeJsunit();\n  motionPathJsunit();\n  scrollCo"], "files": ["List.test.ets", "MotionPathJsunit.test.ets", "motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "sharedTransitionOptions", "api_method_name": "zIndex", "api_method_all": "zIndex?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 48, "since": 7, "api_used": "\u662f", "lines": ["       .zIndex(this.zIndex)\n          .key('zI", "ex = eventData.data.zIndex\n      }\n    }\n  }\n\n", "t.test.ets';\nimport zIndexJsunit from './ZInde", "      console.info(\"zIndex beforeEach start\");", "ata: {\n            \"zIndex\": 889900444\n       ", "nit() {\n  describe('zIndexTest', function () {", "cond child, default zIndex(0)')\n          .siz", "  expect(obj.$attrs.zIndex).assertEqual(1);\n  ", "ata: {\n            \"zIndex\": -5\n          }\n  ", "      console.info(\"zIndex after each called\")", "tringify(obj.$attrs.zIndex));\n      console.lo", "  console.info(\"get zIndex state pages: \" + JS", "s));\n        if (!(\"zIndex\" == pages.name)) {\n", "nst ATTRS_ZINDEX = 'zIndex'\nconst ATTRS_USEALI", " Text('third child, zIndex(1)')\n          .siz", "        uri: 'pages/zIndex',\n      }\n      try", "opStart)\n          .zIndex(this.zIndex)\n      ", "\n    console.info('[zIndex] page show called '", "ull) {\n        this.zIndex = eventData.data.zI", "  console.info(\"get zIndex state pages.name:\" ", "xExample {\n  @State zIndex: number = 1;\n\n  onP", "rt default function zIndexJsunit() {\n  describ", " console.info(\"push zIndex page result:\" + JSO", "onsole.log(\"cd text zIndex\" + JSON.stringify(o", "  expect(obj.$attrs.zIndex).assertEqual(-5);\n ", " if (eventData.data.zIndex != null) {\n        ", "y\n@Component\nstruct zIndexExample {\n  @State z", "an = false\n  @State zIndex: number = 1\n  @Stat", " getInspectorByKey('zIndex');\n      let obj = ", "  expect(obj.$attrs.zIndex).assertEqual(4);\n  ", "ata: {\n            \"zIndex\": 4\n          }\n   ", "s.enabled)\n        .zIndex(this.zIndex)\n      ", "  expect(obj.$attrs.zIndex).assertEqual(1)\n   ", "       .zIndex(this.zIndex)\n        .fontColor", "console.error(\"push zIndex page error:\" + err)", "xbbb2cb)\n          .zIndex(2)\n        Text('se", "  appearJsunit();\n  zIndexJsunit();\n  ellipseJ", "ex)\n          .key('zIndex')\n      }\n    }.wid", " Text('first child, zIndex(2)')\n          .siz", "  expect(obj.$attrs.zIndex).assertEqual(889900"], "files": ["TextJsunit.test.ets", "ZIndexJsunit.test.ets", "Constants.ets", "zIndex.ets", "List.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "sharedTransitionOptions", "api_method_name": "type", "api_method_all": "type?: SharedTransitionEffectType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5337, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"type\": \"PanelType.Miniba", "er0100] expect(obj.$type) is: \" + (obj.$type", "is: \" + (obj.$attrs.type));\n      done();\n  ", "log0100] obj.$attrs.type is: \" + (obj.$attrs", ";\n      expect(obj.$type).assertEqual('Stepp", "    y: downY,\n      type: TouchType.Down,\n  ", "og0100] expect(obj.$type) is: \" + (obj.$type", "eck\n\nconst TYPE = '$type'\nconst ID = '$ID'\nc", "pe = eventData.data.type;\n      }\n    }\n  }\n", "        expect(obj.$type).assertEqual('Flex'", "      y: upY,\n      type: TouchType.Up,\n    ", ";\n      expect(obj.$type).assertEqual('TextA", "bj.$attrs.transform.type)\n        .assertEqu", ";\n      expect(obj.$type).assertEqual('GridC", "  expect(obj.$attrs.type).assertEqual(\"Panel", ";\n      expect(obj.$type).assertEqual('Swipe", "      .decoration({ type: this.decoration, c", "ean = true\n  @State type: PanelType = PanelT", " if (eventData.data.type != null) {\n        ", "type) is: \" + (obj.$type));\n      console.in", "pe = eventData.data.type;\n      }\n      if (", "extInput')\n        .type(this.inputType)\n   ", "          if (event.type === TouchType.Down)", ";\n      expect(obj.$type).assertEqual('Image", "          if (event.type === TouchType.Move)", ";\n      expect(obj.$type).assertEqual('Flex'", "  if(eventData.data.type != null) {\n        ", "eTest_0200 obj.obj.$type is: \" + obj.$type);", ".$type is: \" + obj.$type);\n      var res = o", "ata: {\n            \"type\": 'InputType.Email'", ";\n      expect(obj.$type).assertEqual('Gauge", "ull) {\n        this.type = eventData.data.ty", "          if (event.type === TouchType.Up) {", ";\n      expect(obj.$type).assertEqual('Text'", "   }\n      }\n      .type(this.type).mode(thi", " }\n      .type(this.type).mode(this.mode)\n  ", ";\n      expect(obj.$type).assertEqual('Row')", "yStep * i),\n        type: TouchType.Move\n   "], "files": ["pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Panel.ets", "sourceType.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "transition.ets", "textInput.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "toggle.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "span.ets", "NavigatorCode.ets", "buttonProps.test.js", "animateProps.test.js", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "Constants.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "panelProps.test.js", "sharedTransition.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TranslateOptions", "api_method_all": "declare interface TranslateOptions {\n  \n  x?: number | string;\n  \n  y?: number | string;\n  \n  z?: number | string;\n}", "api_method_name": "TranslateOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TranslateOptions", "api_method_name": "x", "api_method_all": "x?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20226, "since": 7, "api_used": "\u662f", "lines": ["", "= eventData.data.flexBasis;\n      }\n     ", "3).backgroundColor(0x2788D9)\n      if (th", "mponent\nstruct AreaExample {\n  @State val", "\n        })\n      Text('new area is: \\n' ", "f (eventData.data.text != null) {\n       ", "\n  build() {\n    Flex({ direction: FlexDi", "      Button(this.text)\n        .key('ena", "isShow) {\n        Text(this.myText)\n     ", " value: string = 'Text';\n  @State size: s", "ue)\n        .key('text1')\n        .backgr", "nent\nstruct EllipseExample {\n  @State wid", "t({ message: 'The text is shown', duratio", "nent\nstruct EnabledExample {\n  @State ena", "\n  build() {\n    Flex({ justifyContent: F", " Column() {\n      Text(this.value)\n      ", "State direction: FlexDirection = FlexDire", "Component\nstruct FlexExample {\n  @State d", " (eventData.data.flexBasis != null) {\n   ", "      Text(this.myText)\n          .onAppe", "t({ message: 'The text is hidden', durati", "ze)\n        .key('text2')\n        .margin", "ngeAppear = 'Hide Text'\n            conso", "idth: string = \"200px\";\n  @State height: ", "mponent\nstruct FlexExample {\n  @State dir", "myText: string = 'Text for onAppear'\n\n  o", "0).backgroundColor(0x00FFFF)\n      }\n    ", " justifyContent: FlexAlign.Center }) {\n  ", "ngeAppear = 'Show Text'\n            conso", "tSize(9).fontColor(0xCCCCCC).width('90%')", " Column() {\n      Text('alignItems').font", "l) {\n        this.text = eventData.data.t", "onent\nstruct AppearExample {\n  @State isS", "  .backgroundColor(0x317aff)\n        .ena", " = true;\n  @State text: string = \"enable\"", " (eventData.data.flexGrow != null) {\n    ", ") {\n        this.flexBasis = eventData.da", ") {\n        this.flexGrow = eventData.dat", "r: string = 'Hide Text'\n  private myText:", "0).backgroundColor(0xAFEEEE)\n        Colu", "  .backgroundColor(0x317aff)\n        .opa", " FlexDirection = FlexDirection.Row\n  priv", "e = this.value + 'Text'\n          try {\n ", "lex({ direction: FlexDirection.Row, align", "   console.info(\"Flex page state change c", " = eventData.data.text\n      }\n    }\n  }\n", "onent\nstruct ColumnExample {\n  @State ali", " justifyContent: FlexAlign.SpaceAround })", "Text'\n  private myText: string = 'Text fo", "ight: string = \"200px\";\n\n  onPageShow() {"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "style.js", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TranslateOptions", "api_method_name": "y", "api_method_all": "y?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35614, "since": 7, "api_used": "\u662f", "lines": ["hos.emitter';\n\n@Entry\n@Component\nstruct E", "F)\n      }\n      .key(\"alignItemsColumn\")", "e is ${JSON.stringify(oldValue)} newvalue", "`${this.height}`).key('ellipse')\n    }.wi", "ohos.emitter'\n\n@Entry\n@Component\nstruct E", "ed:\" + JSON.stringify(eventData));\n      ", "Align.Center, justifyContent: FlexAlign.C", "d: 58,\n      priority: events_emitter.Eve", "size = JSON.stringify(newValue)\n         ", "d: 92,\n      priority: events_emitter.Eve", "te')\n  },\n  onDestroy() {\n    console.inf", "d: 93,\n      priority: events_emitter.Eve", "alled);\n          try {\n            var b", "e is ${JSON.stringify(newValue)}`)\n      ", "\n        Text(this.myText)\n          .onA", "eAppear)\n        .key('appear')\n        .", "Application onDestroy')\n  },\n}", "             priority: events_emitter.Eve", "r: \" + JSON.stringify(err.message))\n     ", "emitter.EventPriority.LOW\n            }\n ", "s.value)\n        .key('text1')\n        .b", " 'Text'\n          try {\n            var b", "hos.emitter';\n\n@Entry\n@Component\nstruct C", ": 192,\n      priority: events_emitter.Eve", "de Text'\n  private myText: string = 'Text", "ystem.prompt'\n\n@Entry\n@Preview\n@Component", "port prompt from '@system.prompt'\n\n@Entry", "hos.emitter';\n\n@Entry\n@Component\nstruct A", "emitter.EventPriority.LOW\n    }\n    event", "00 })\n            try {\n              var", "emitter.EventPriority.LOW\n              }", "is.size)\n        .key('text2')\n        .m", ": 907,\n      priority: events_emitter.Eve", ": 908,\n      priority: events_emitter.Eve"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "PieceCode.ets", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "video.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TranslateOptions", "api_method_name": "z", "api_method_all": "z?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2786, "since": 7, "api_used": "\u662f", "lines": ["ext('Center').fontSize(25)\n        }\n    ", "    }\n        .useSizeType({\n          xs", "\n  testImageBitmapSize() {\n    let img = ", "y(\"flexGrow\").fontSize(9).fontColor(0xCCC", "er({ columns: 12, sizeType: this.sizeType", "t:\n          this.sizeType = SizeType.Aut", "  this.sizeType = SizeType.MD;\n          ", "Text('Right').fontSize(25)\n        }\n    ", "(40)\n        .fontSize(16)\n        .backg", "':\n          this.sizeType = SizeType.LG;", "':\n          this.sizeType = SizeType.SM;", "  this.sizeType = SizeType.XS;\n          ", " Text('Left').fontSize(25)\n        }\n    ", " @State sizeType: SizeType = SizeType.XS;", "  this.sizeType = SizeType.Auto;\n        ", "':\n          this.sizeType = SizeType.XS;", "  this.sizeType = SizeType.Auto;\n      }\n", "eType: SizeType = SizeType.XS;\n  private ", "xample {\n  @State sizeType: SizeType = Si", "':\n          this.sizeType = SizeType.Aut", "  this.sizeType = SizeType.SM;\n          ", "\n            .fontSize(20)\n            .u", "'alignItems').fontSize(9).fontColor(0xCCC", "('font blur').fontSize(15).fontColor(0xCC", "ate alignItems: HorizontalAlign = Horizon", "(40)\n        .fontSize(16)\n        .backd", "2, sizeType: this.sizeType, gutter: 10, m", " 'Text';\n  @State size: string = '';\n  @S", "'flexShrink').fontSize(9).fontColor(0xCCC", "rizontalAlign = HorizontalAlign.Start;\n\n ", ")\n            .useSizeType({\n            ", "ackdropBlur').fontSize(15).fontColor(0xCC", "(30)\n        .fontSize(20)\n        .onCli", "':\n          this.sizeType = SizeType.MD;", "`)\n          this.size = JSON.stringify(n", "is.testImageBitmapSize();\n          this.", "ainer({ sizeType: SizeType.SM }) {\n      ", "(\"alignSelf\").fontSize(9).fontColor(0xCCC", "('flexBasis').fontSize(9).fontColor(0xCCC", "ea is: \\n' + this.size)\n        .key('tex", "  GridContainer({ sizeType: SizeType.SM }", "h (eventData.data.sizeType) {\n        cas", "  .backgroundImageSize({ width: 1200, hei", "  this.sizeType = SizeType.LG;\n          "], "files": ["ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "systemRouterA.ets", "pathProps.test.js", "configuration.ets", "ImageEffectsJsunit.test.ets", "longPressGesture.ets", "placement.ets", "ScrollBarJsunit.test.ets", "Qrcode.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "OhosRouterJsnuit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "basicabilityapi.test.js", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "List.test.ets", "scrollCode.ets", "button.ets", "SelectJsunit.test.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "SystemAppJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "Stack.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "ScrollerBarJsunit.test.ets", "text.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "AppStorageJsunit.test.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "ratingProps.test.js", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "SystemRouterJsunit.test.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "MarqueeJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "animateTransformProps.test.js", "TextAreaJsunit.test.ets", "lazyForEach.ets", "animateMotionProps.test.js", "listItem.ets", "grid.ets", "Button.ets", "ScrollJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "search.ets", "span.ets", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "ContentStorage.test.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ImageAnimatorJsunit.test.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "fillMode.ets", "curves.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "SliderJsunit.test.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "swiperProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "select.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "RatingJsunit.test.ets", "Calendar.ets", "gestureMode.ets", "refresh.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "motionPath.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScaleOptions", "api_method_all": "declare interface ScaleOptions {\n  \n  x?: number;\n  \n  y?: number;\n  \n  z?: number;\n  \n  centerX?: number | string;\n  \n  centerY?: number | string;\n}", "api_method_name": "ScaleOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScaleOptions", "api_method_name": "x", "api_method_all": "x?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20226, "since": 7, "api_used": "\u662f", "lines": ["", "= eventData.data.flexBasis;\n      }\n     ", "3).backgroundColor(0x2788D9)\n      if (th", "mponent\nstruct AreaExample {\n  @State val", "\n        })\n      Text('new area is: \\n' ", "f (eventData.data.text != null) {\n       ", "\n  build() {\n    Flex({ direction: FlexDi", "      Button(this.text)\n        .key('ena", "isShow) {\n        Text(this.myText)\n     ", " value: string = 'Text';\n  @State size: s", "ue)\n        .key('text1')\n        .backgr", "nent\nstruct EllipseExample {\n  @State wid", "t({ message: 'The text is shown', duratio", "nent\nstruct EnabledExample {\n  @State ena", "\n  build() {\n    Flex({ justifyContent: F", " Column() {\n      Text(this.value)\n      ", "State direction: FlexDirection = FlexDire", "Component\nstruct FlexExample {\n  @State d", " (eventData.data.flexBasis != null) {\n   ", "      Text(this.myText)\n          .onAppe", "t({ message: 'The text is hidden', durati", "ze)\n        .key('text2')\n        .margin", "ngeAppear = 'Hide Text'\n            conso", "idth: string = \"200px\";\n  @State height: ", "mponent\nstruct FlexExample {\n  @State dir", "myText: string = 'Text for onAppear'\n\n  o", "0).backgroundColor(0x00FFFF)\n      }\n    ", " justifyContent: FlexAlign.Center }) {\n  ", "ngeAppear = 'Show Text'\n            conso", "tSize(9).fontColor(0xCCCCCC).width('90%')", " Column() {\n      Text('alignItems').font", "l) {\n        this.text = eventData.data.t", "onent\nstruct AppearExample {\n  @State isS", "  .backgroundColor(0x317aff)\n        .ena", " = true;\n  @State text: string = \"enable\"", " (eventData.data.flexGrow != null) {\n    ", ") {\n        this.flexBasis = eventData.da", ") {\n        this.flexGrow = eventData.dat", "r: string = 'Hide Text'\n  private myText:", "0).backgroundColor(0xAFEEEE)\n        Colu", "  .backgroundColor(0x317aff)\n        .opa", " FlexDirection = FlexDirection.Row\n  priv", "e = this.value + 'Text'\n          try {\n ", "lex({ direction: FlexDirection.Row, align", "   console.info(\"Flex page state change c", " = eventData.data.text\n      }\n    }\n  }\n", "onent\nstruct ColumnExample {\n  @State ali", " justifyContent: FlexAlign.SpaceAround })", "Text'\n  private myText: string = 'Text fo", "ight: string = \"200px\";\n\n  onPageShow() {"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "style.js", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScaleOptions", "api_method_name": "y", "api_method_all": "y?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35614, "since": 7, "api_used": "\u662f", "lines": ["hos.emitter';\n\n@Entry\n@Component\nstruct E", "F)\n      }\n      .key(\"alignItemsColumn\")", "e is ${JSON.stringify(oldValue)} newvalue", "`${this.height}`).key('ellipse')\n    }.wi", "ohos.emitter'\n\n@Entry\n@Component\nstruct E", "ed:\" + JSON.stringify(eventData));\n      ", "Align.Center, justifyContent: FlexAlign.C", "d: 58,\n      priority: events_emitter.Eve", "size = JSON.stringify(newValue)\n         ", "d: 92,\n      priority: events_emitter.Eve", "te')\n  },\n  onDestroy() {\n    console.inf", "d: 93,\n      priority: events_emitter.Eve", "alled);\n          try {\n            var b", "e is ${JSON.stringify(newValue)}`)\n      ", "\n        Text(this.myText)\n          .onA", "eAppear)\n        .key('appear')\n        .", "Application onDestroy')\n  },\n}", "             priority: events_emitter.Eve", "r: \" + JSON.stringify(err.message))\n     ", "emitter.EventPriority.LOW\n            }\n ", "s.value)\n        .key('text1')\n        .b", " 'Text'\n          try {\n            var b", "hos.emitter';\n\n@Entry\n@Component\nstruct C", ": 192,\n      priority: events_emitter.Eve", "de Text'\n  private myText: string = 'Text", "ystem.prompt'\n\n@Entry\n@Preview\n@Component", "port prompt from '@system.prompt'\n\n@Entry", "hos.emitter';\n\n@Entry\n@Component\nstruct A", "emitter.EventPriority.LOW\n    }\n    event", "00 })\n            try {\n              var", "emitter.EventPriority.LOW\n              }", "is.size)\n        .key('text2')\n        .m", ": 907,\n      priority: events_emitter.Eve", ": 908,\n      priority: events_emitter.Eve"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "PieceCode.ets", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "video.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScaleOptions", "api_method_name": "z", "api_method_all": "z?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2786, "since": 7, "api_used": "\u662f", "lines": ["ext('Center').fontSize(25)\n        }\n    ", "    }\n        .useSizeType({\n          xs", "\n  testImageBitmapSize() {\n    let img = ", "y(\"flexGrow\").fontSize(9).fontColor(0xCCC", "er({ columns: 12, sizeType: this.sizeType", "t:\n          this.sizeType = SizeType.Aut", "  this.sizeType = SizeType.MD;\n          ", "Text('Right').fontSize(25)\n        }\n    ", "(40)\n        .fontSize(16)\n        .backg", "':\n          this.sizeType = SizeType.LG;", "':\n          this.sizeType = SizeType.SM;", "  this.sizeType = SizeType.XS;\n          ", " Text('Left').fontSize(25)\n        }\n    ", " @State sizeType: SizeType = SizeType.XS;", "  this.sizeType = SizeType.Auto;\n        ", "':\n          this.sizeType = SizeType.XS;", "  this.sizeType = SizeType.Auto;\n      }\n", "eType: SizeType = SizeType.XS;\n  private ", "xample {\n  @State sizeType: SizeType = Si", "':\n          this.sizeType = SizeType.Aut", "  this.sizeType = SizeType.SM;\n          ", "\n            .fontSize(20)\n            .u", "'alignItems').fontSize(9).fontColor(0xCCC", "('font blur').fontSize(15).fontColor(0xCC", "ate alignItems: HorizontalAlign = Horizon", "(40)\n        .fontSize(16)\n        .backd", "2, sizeType: this.sizeType, gutter: 10, m", " 'Text';\n  @State size: string = '';\n  @S", "'flexShrink').fontSize(9).fontColor(0xCCC", "rizontalAlign = HorizontalAlign.Start;\n\n ", ")\n            .useSizeType({\n            ", "ackdropBlur').fontSize(15).fontColor(0xCC", "(30)\n        .fontSize(20)\n        .onCli", "':\n          this.sizeType = SizeType.MD;", "`)\n          this.size = JSON.stringify(n", "is.testImageBitmapSize();\n          this.", "ainer({ sizeType: SizeType.SM }) {\n      ", "(\"alignSelf\").fontSize(9).fontColor(0xCCC", "('flexBasis').fontSize(9).fontColor(0xCCC", "ea is: \\n' + this.size)\n        .key('tex", "  GridContainer({ sizeType: SizeType.SM }", "h (eventData.data.sizeType) {\n        cas", "  .backgroundImageSize({ width: 1200, hei", "  this.sizeType = SizeType.LG;\n          "], "files": ["ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "systemRouterA.ets", "pathProps.test.js", "configuration.ets", "ImageEffectsJsunit.test.ets", "longPressGesture.ets", "placement.ets", "ScrollBarJsunit.test.ets", "Qrcode.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "OhosRouterJsnuit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "basicabilityapi.test.js", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "List.test.ets", "scrollCode.ets", "button.ets", "SelectJsunit.test.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "SystemAppJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "Stack.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "ScrollerBarJsunit.test.ets", "text.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "AppStorageJsunit.test.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "ratingProps.test.js", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "SystemRouterJsunit.test.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "MarqueeJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "animateTransformProps.test.js", "TextAreaJsunit.test.ets", "lazyForEach.ets", "animateMotionProps.test.js", "listItem.ets", "grid.ets", "Button.ets", "ScrollJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "search.ets", "span.ets", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "ContentStorage.test.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ImageAnimatorJsunit.test.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "fillMode.ets", "curves.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "SliderJsunit.test.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "swiperProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "select.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "RatingJsunit.test.ets", "Calendar.ets", "gestureMode.ets", "refresh.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "motionPath.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScaleOptions", "api_method_name": "centerX", "api_method_all": "centerX?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": [" {x: 2, y: 2, z: 2, centerX: '60%', centerY: '6", "ale({x:5, y:1, z:1, centerX:50, centerY:50})\n  ", "y: 1,\n    z: 1,\n    centerX: '50%',\n    centerY", "bjNew.$attrs.rotate.centerX).assertEqual('60.00", "t(obj.$attrs.rotate.centerX).assertEqual('50.00"], "files": ["transForm.ets", "TransFormJsunit.test.ets", "ohosMatrix4.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScaleOptions", "api_method_name": "centerY", "api_method_all": "centerY?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["bjNew.$attrs.rotate.centerY).assertEqual('60.00", "centerX: '50%',\n    centerY: '50%',\n    angle: ", "1, z:1, centerX:50, centerY:50})\n  @State matri", " 2, centerX: '60%', centerY: '60%', angle: 100}", "t(obj.$attrs.rotate.centerY).assertEqual('50.00"], "files": ["transForm.ets", "TransFormJsunit.test.ets", "ohosMatrix4.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RotateOptions", "api_method_all": "declare interface RotateOptions {\n  \n  x?: number;\n  \n  y?: number;\n  \n  z?: number;\n  \n  centerX?: number | string;\n  \n  centerY?: number | string;\n  \n  angle: number | string;\n}", "api_method_name": "RotateOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RotateOptions", "api_method_name": "x", "api_method_all": "x?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20226, "since": 7, "api_used": "\u662f", "lines": ["", "= eventData.data.flexBasis;\n      }\n     ", "3).backgroundColor(0x2788D9)\n      if (th", "mponent\nstruct AreaExample {\n  @State val", "\n        })\n      Text('new area is: \\n' ", "f (eventData.data.text != null) {\n       ", "\n  build() {\n    Flex({ direction: FlexDi", "      Button(this.text)\n        .key('ena", "isShow) {\n        Text(this.myText)\n     ", " value: string = 'Text';\n  @State size: s", "ue)\n        .key('text1')\n        .backgr", "nent\nstruct EllipseExample {\n  @State wid", "t({ message: 'The text is shown', duratio", "nent\nstruct EnabledExample {\n  @State ena", "\n  build() {\n    Flex({ justifyContent: F", " Column() {\n      Text(this.value)\n      ", "State direction: FlexDirection = FlexDire", "Component\nstruct FlexExample {\n  @State d", " (eventData.data.flexBasis != null) {\n   ", "      Text(this.myText)\n          .onAppe", "t({ message: 'The text is hidden', durati", "ze)\n        .key('text2')\n        .margin", "ngeAppear = 'Hide Text'\n            conso", "idth: string = \"200px\";\n  @State height: ", "mponent\nstruct FlexExample {\n  @State dir", "myText: string = 'Text for onAppear'\n\n  o", "0).backgroundColor(0x00FFFF)\n      }\n    ", " justifyContent: FlexAlign.Center }) {\n  ", "ngeAppear = 'Show Text'\n            conso", "tSize(9).fontColor(0xCCCCCC).width('90%')", " Column() {\n      Text('alignItems').font", "l) {\n        this.text = eventData.data.t", "onent\nstruct AppearExample {\n  @State isS", "  .backgroundColor(0x317aff)\n        .ena", " = true;\n  @State text: string = \"enable\"", " (eventData.data.flexGrow != null) {\n    ", ") {\n        this.flexBasis = eventData.da", ") {\n        this.flexGrow = eventData.dat", "r: string = 'Hide Text'\n  private myText:", "0).backgroundColor(0xAFEEEE)\n        Colu", "  .backgroundColor(0x317aff)\n        .opa", " FlexDirection = FlexDirection.Row\n  priv", "e = this.value + 'Text'\n          try {\n ", "lex({ direction: FlexDirection.Row, align", "   console.info(\"Flex page state change c", " = eventData.data.text\n      }\n    }\n  }\n", "onent\nstruct ColumnExample {\n  @State ali", " justifyContent: FlexAlign.SpaceAround })", "Text'\n  private myText: string = 'Text fo", "ight: string = \"200px\";\n\n  onPageShow() {"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "style.js", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RotateOptions", "api_method_name": "y", "api_method_all": "y?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35614, "since": 7, "api_used": "\u662f", "lines": ["hos.emitter';\n\n@Entry\n@Component\nstruct E", "F)\n      }\n      .key(\"alignItemsColumn\")", "e is ${JSON.stringify(oldValue)} newvalue", "`${this.height}`).key('ellipse')\n    }.wi", "ohos.emitter'\n\n@Entry\n@Component\nstruct E", "ed:\" + JSON.stringify(eventData));\n      ", "Align.Center, justifyContent: FlexAlign.C", "d: 58,\n      priority: events_emitter.Eve", "size = JSON.stringify(newValue)\n         ", "d: 92,\n      priority: events_emitter.Eve", "te')\n  },\n  onDestroy() {\n    console.inf", "d: 93,\n      priority: events_emitter.Eve", "alled);\n          try {\n            var b", "e is ${JSON.stringify(newValue)}`)\n      ", "\n        Text(this.myText)\n          .onA", "eAppear)\n        .key('appear')\n        .", "Application onDestroy')\n  },\n}", "             priority: events_emitter.Eve", "r: \" + JSON.stringify(err.message))\n     ", "emitter.EventPriority.LOW\n            }\n ", "s.value)\n        .key('text1')\n        .b", " 'Text'\n          try {\n            var b", "hos.emitter';\n\n@Entry\n@Component\nstruct C", ": 192,\n      priority: events_emitter.Eve", "de Text'\n  private myText: string = 'Text", "ystem.prompt'\n\n@Entry\n@Preview\n@Component", "port prompt from '@system.prompt'\n\n@Entry", "hos.emitter';\n\n@Entry\n@Component\nstruct A", "emitter.EventPriority.LOW\n    }\n    event", "00 })\n            try {\n              var", "emitter.EventPriority.LOW\n              }", "is.size)\n        .key('text2')\n        .m", ": 907,\n      priority: events_emitter.Eve", ": 908,\n      priority: events_emitter.Eve"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "PieceCode.ets", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "video.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RotateOptions", "api_method_name": "z", "api_method_all": "z?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2786, "since": 7, "api_used": "\u662f", "lines": ["ext('Center').fontSize(25)\n        }\n    ", "    }\n        .useSizeType({\n          xs", "\n  testImageBitmapSize() {\n    let img = ", "y(\"flexGrow\").fontSize(9).fontColor(0xCCC", "er({ columns: 12, sizeType: this.sizeType", "t:\n          this.sizeType = SizeType.Aut", "  this.sizeType = SizeType.MD;\n          ", "Text('Right').fontSize(25)\n        }\n    ", "(40)\n        .fontSize(16)\n        .backg", "':\n          this.sizeType = SizeType.LG;", "':\n          this.sizeType = SizeType.SM;", "  this.sizeType = SizeType.XS;\n          ", " Text('Left').fontSize(25)\n        }\n    ", " @State sizeType: SizeType = SizeType.XS;", "  this.sizeType = SizeType.Auto;\n        ", "':\n          this.sizeType = SizeType.XS;", "  this.sizeType = SizeType.Auto;\n      }\n", "eType: SizeType = SizeType.XS;\n  private ", "xample {\n  @State sizeType: SizeType = Si", "':\n          this.sizeType = SizeType.Aut", "  this.sizeType = SizeType.SM;\n          ", "\n            .fontSize(20)\n            .u", "'alignItems').fontSize(9).fontColor(0xCCC", "('font blur').fontSize(15).fontColor(0xCC", "ate alignItems: HorizontalAlign = Horizon", "(40)\n        .fontSize(16)\n        .backd", "2, sizeType: this.sizeType, gutter: 10, m", " 'Text';\n  @State size: string = '';\n  @S", "'flexShrink').fontSize(9).fontColor(0xCCC", "rizontalAlign = HorizontalAlign.Start;\n\n ", ")\n            .useSizeType({\n            ", "ackdropBlur').fontSize(15).fontColor(0xCC", "(30)\n        .fontSize(20)\n        .onCli", "':\n          this.sizeType = SizeType.MD;", "`)\n          this.size = JSON.stringify(n", "is.testImageBitmapSize();\n          this.", "ainer({ sizeType: SizeType.SM }) {\n      ", "(\"alignSelf\").fontSize(9).fontColor(0xCCC", "('flexBasis').fontSize(9).fontColor(0xCCC", "ea is: \\n' + this.size)\n        .key('tex", "  GridContainer({ sizeType: SizeType.SM }", "h (eventData.data.sizeType) {\n        cas", "  .backgroundImageSize({ width: 1200, hei", "  this.sizeType = SizeType.LG;\n          "], "files": ["ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "systemRouterA.ets", "pathProps.test.js", "configuration.ets", "ImageEffectsJsunit.test.ets", "longPressGesture.ets", "placement.ets", "ScrollBarJsunit.test.ets", "Qrcode.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "OhosRouterJsnuit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "basicabilityapi.test.js", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "List.test.ets", "scrollCode.ets", "button.ets", "SelectJsunit.test.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "SystemAppJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "Stack.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "ScrollerBarJsunit.test.ets", "text.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "AppStorageJsunit.test.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "ratingProps.test.js", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "SystemRouterJsunit.test.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "MarqueeJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "animateTransformProps.test.js", "TextAreaJsunit.test.ets", "lazyForEach.ets", "animateMotionProps.test.js", "listItem.ets", "grid.ets", "Button.ets", "ScrollJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "search.ets", "span.ets", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "ContentStorage.test.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ImageAnimatorJsunit.test.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "fillMode.ets", "curves.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "SliderJsunit.test.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "swiperProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "select.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "RatingJsunit.test.ets", "Calendar.ets", "gestureMode.ets", "refresh.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "motionPath.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RotateOptions", "api_method_name": "centerX", "api_method_all": "centerX?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": [" {x: 2, y: 2, z: 2, centerX: '60%', centerY: '6", "ale({x:5, y:1, z:1, centerX:50, centerY:50})\n  ", "y: 1,\n    z: 1,\n    centerX: '50%',\n    centerY", "bjNew.$attrs.rotate.centerX).assertEqual('60.00", "t(obj.$attrs.rotate.centerX).assertEqual('50.00"], "files": ["transForm.ets", "TransFormJsunit.test.ets", "ohosMatrix4.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RotateOptions", "api_method_name": "centerY", "api_method_all": "centerY?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["bjNew.$attrs.rotate.centerY).assertEqual('60.00", "centerX: '50%',\n    centerY: '50%',\n    angle: ", "1, z:1, centerX:50, centerY:50})\n  @State matri", " 2, centerX: '60%', centerY: '60%', angle: 100}", "t(obj.$attrs.rotate.centerY).assertEqual('50.00"], "files": ["transForm.ets", "TransFormJsunit.test.ets", "ohosMatrix4.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RotateOptions", "api_method_name": "angle", "api_method_all": "angle: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["centerY: '50%',\n    angle: 300\n  }\n  @State t", "ttrs.linearGradient.angle).assertEqual('80.00", "t(obj.$attrs.rotate.angle).assertEqual('300.0", "ate({x:1, y:1, z:2, angle:30})\n  @State matri", "ntValue = {\n        angle: 80,\n        direct", "bjNew.$attrs.rotate.angle).assertEqual('100.0", "    // Draw red rectangle after clip\n        ", "%', centerY: '60%', angle: 100}\n      try {\n ", "  // Non-skewed rectangles\n        offscreenC", "lue: object = {\n    angle: 90,\n    direction:", "; // Rotate the rectangle 45 degrees\n        ", "reate a 100*100 rectangle at (20, 20)\n       ", "ttrs.linearGradient.angle).assertEqual('90.00", "radient({\n          angle: 45,\n          dire"], "files": ["gradientDirection.ets", "transForm.ets", "index.js", "colorGradient.ets", "TransFormJsunit.test.ets", "ohosMatrix4.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TransitionOptions", "api_method_all": "declare interface TransitionOptions {\n  \n  type?: TransitionType;\n  \n  opacity?: number;\n  \n  translate?: TranslateOptions;\n  \n  scale?: ScaleOptions;\n  \n  rotate?: RotateOptions;\n}", "api_method_name": "TransitionOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TransitionOptions", "api_method_name": "type", "api_method_all": "type?: TransitionType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5337, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"type\": \"PanelType.Miniba", "er0100] expect(obj.$type) is: \" + (obj.$type", "is: \" + (obj.$attrs.type));\n      done();\n  ", "log0100] obj.$attrs.type is: \" + (obj.$attrs", ";\n      expect(obj.$type).assertEqual('Stepp", "    y: downY,\n      type: TouchType.Down,\n  ", "og0100] expect(obj.$type) is: \" + (obj.$type", "eck\n\nconst TYPE = '$type'\nconst ID = '$ID'\nc", "pe = eventData.data.type;\n      }\n    }\n  }\n", "        expect(obj.$type).assertEqual('Flex'", "      y: upY,\n      type: TouchType.Up,\n    ", ";\n      expect(obj.$type).assertEqual('TextA", "bj.$attrs.transform.type)\n        .assertEqu", ";\n      expect(obj.$type).assertEqual('GridC", "  expect(obj.$attrs.type).assertEqual(\"Panel", ";\n      expect(obj.$type).assertEqual('Swipe", "      .decoration({ type: this.decoration, c", "ean = true\n  @State type: PanelType = PanelT", " if (eventData.data.type != null) {\n        ", "type) is: \" + (obj.$type));\n      console.in", "pe = eventData.data.type;\n      }\n      if (", "extInput')\n        .type(this.inputType)\n   ", "          if (event.type === TouchType.Down)", ";\n      expect(obj.$type).assertEqual('Image", "          if (event.type === TouchType.Move)", ";\n      expect(obj.$type).assertEqual('Flex'", "  if(eventData.data.type != null) {\n        ", "eTest_0200 obj.obj.$type is: \" + obj.$type);", ".$type is: \" + obj.$type);\n      var res = o", "ata: {\n            \"type\": 'InputType.Email'", ";\n      expect(obj.$type).assertEqual('Gauge", "ull) {\n        this.type = eventData.data.ty", "          if (event.type === TouchType.Up) {", ";\n      expect(obj.$type).assertEqual('Text'", "   }\n      }\n      .type(this.type).mode(thi", " }\n      .type(this.type).mode(this.mode)\n  ", ";\n      expect(obj.$type).assertEqual('Row')", "yStep * i),\n        type: TouchType.Move\n   "], "files": ["pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Panel.ets", "sourceType.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "transition.ets", "textInput.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "toggle.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "span.ets", "NavigatorCode.ets", "buttonProps.test.js", "animateProps.test.js", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "Constants.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "panelProps.test.js", "sharedTransition.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TransitionOptions", "api_method_name": "opacity", "api_method_all": "opacity?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 532, "since": 7, "api_used": "\u662f", "lines": ["ale }).opacity(this.opacity)\n  }\n  pageTransiti", "pacityValue}`).key(\"opacity\")\n        Text('top", "%').opacity(`${this.opacityValue}`).key(\"opacit", " if (eventData.data.opacity != null) {\n        ", "xpect(objNew.$attrs.opacity).assertEqual(2);\n  ", "({ x: this.scale }).opacity(this.opacity)\n  }\n ", "      .opacity(this.opacity)\n        .onClick((", ".0 }, opacity: this.opacity })\n      }\n    }.he", "eInt(eventData.data.opacity);\n      }\n    }\n  }", "ale,\n              \"opacity\" : this.opacity,\n  ", " getInspectorByKey('opacity');\n      let obj = ", "(0x317aff)\n        .opacity(0.4)\n      Button(t", "ue = eventData.data.opacityValue;\n      }\n    }", "le = 1\n        this.opacity = progress\n      })", "ogress\n        this.opacity = 1\n      })\n  }\n\n ", " getInspectorByKey('opacity');\n      let objNew", "number = 1\n  @State opacity: number = 1\n  @Stat", "ale }).opacity(this.opacity)\n  }\n\n  pageTransit", "st ATTRS_OPACITY = 'opacity'\nconst ATTRS_DIRECT", "0}) {\n        Text('opacity(1)').fontSize(20).f", "  expect(obj.$attrs.opacity).assertEqual(1);\n  ", "   \"opacity\" : this.opacity,\n              \"typ", "ata: {\n            \"opacityValue\": \"0.7\"\n      ", "Black).width('90%').opacity(`${this.opacityValu", " if (eventData.data.opacityValue) {\n        thi", ".0 }, opacity: this.opacity })\n        .key('bu", "ata: {\n            \"opacity\": 'a',\n          }\n", ", y: 1.0, z: 1.0 }, opacity: this.opacity })\n  ", "0, y: 15};\n  @State opacityValue: string = 1;\n\n", "xpect(objNew.$attrs.opacity).assertEqual(0.7);\n", "xpect(objNew.$attrs.opacity).assertEqual(null);", "g = \"show\"\n  @State opacity: number = 1\n  @Stat", "('button')\n        .opacity(this.opacity)\n     ", "ull) {\n        this.opacity = parseInt(eventDat", "ata: {\n            \"opacity\": 2,\n          }\n  ", "{ x: 1.0, y: 0.0 }, opacity: this.opacity })\n  ", "({ x: this.scale }).opacity(this.opacity)\n  }\n\n", "lue) {\n        this.opacityValue = eventData.da"], "files": ["pageTransition2.ets", "pathProps.test.js", "circleProps.test.js", "enable.ets", "Text.ets", "lineProps.test.js", "TextJsunit.test.ets", "Constants.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "ellipseProps.test.js", "listItemProps.test.js", "TransitionJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "polygonProps.test.js", "positionSetting.ets", "index.js", "PageTransitionJsunit.test.ets", "tspanProps.test.js", "svgProps.test.js", "transition.ets", "svgTextProps.test.js", "textPathProps.test.js", "sharedTransition.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TransitionOptions", "api_method_name": "translate", "api_method_all": "translate?: TranslateOptions", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 280, "since": 7, "api_used": "\u662f", "lines": ["(Matrix4.identity().translate(eventData.data.matr", "     Row()\n        .translate(this.transformValue", "form: {\n            translate: '-120px',\n        ", "tate')\n\n      Text('translate').width('10%').font", "entity()\n          .translate(eventData.data.matr", "form: {\n            translateX: '100px',\n        ", " Matrix4.identity().translate({ x: 300 }).copy()\n", "'gestureMode')\n    .translate({ x: this.offsetX, ", "('PanGesture')\n    .translate({ x: this.offsetX, ", "Transform();\n  }\n\n  translate() {\n    this.contex", " Matrix4.identity().translate({x:100, y:200, z:30", "e: 300\n  }\n  @State translateValue: object= { x: ", " Matrix4.identity().translate(eventData.data.matr", " }).margin(80)\n    .translate({ x: this.offsetX, ", ");\n    this.context.translate(50, 50);\n    this.c", "tate')\n\n      Text('translate').width('90%').font", "100px',\n            translateY: '0px',\n          ", " '0px',\n            translateZ: '20px',\n         ", "form: {\n            translateX: '0px',\n          ", "(Matrix4.identity().translate({ x: 100, y: 100, z", " Matrix4.identity().translate({ x: 100, y: 100, z", "\n              this.translate();\n              th", " '0px',\n            translateY: '5px',\n          "], "files": ["animateTransformProps.test.js", "PanGesture.ets", "panDirection.ets", "pathProps.test.js", "rectProps.test.js", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "transForm.ets", "ellipseProps.test.js", "gestureMode.ets", "index.js", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TransitionOptions", "api_method_name": "scale", "api_method_all": "scale?: ScaleOptions", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1026, "since": 7, "api_used": "\u662f", "lines": ["(eventData.data.grayscaleValue != null) {\n   ", "RS_GRAYSCALE = 'grayscale'\nconst ATTRS_BLUR =", "  expect(obj.$attrs.scale.y).assertEqual('0.5", "   }\n      })\n    }.scale({ x: this.scale }).", "')\n\n      Text('grayscale').fontSize(15).font", "        .scale(this.scaleValue)\n        .widt", "ep(1000);\n      let scaleValue = { x: 1, y: 1", " eventData.data.grayscaleValue;\n      }\n     ", " Matrix4.identity().scale({ x: 3 }).copy()\n  ", "Y: 5 }\n  @State grayscaleValue: string= 10;\n ", "xpect(objNew.$attrs.scale.y).assertEqual('1.0", ".transitionTypeOne, scale: { x: 0, y: 1.0, z:", "  }.scale({ x: this.scale }).opacity(this.opa", "     \"scale\" : this.scale,\n              \"opa", "context.filter('grayscale(50%)');\n    this.co", "00, y: 5 }\n  @State scaleValue: object= { x: ", "arse(eventData.data.scaleValue);\n      }\n    ", " Matrix4.identity().scale(eventData.data.matr", "ue\": JSON.stringify(scaleValue)\n          }\n ", "  expect(obj.$attrs.scale.x).assertEqual('2.0", "ull) {\n        this.scaleValue = JSON.parse(e", "ata: {\n            \"scaleValue\": JSON.stringi", "ep(1000);\n      let scaleValue = {\n        x:", "xpect(objNew.$attrs.scale.x).assertEqual('1.0", "ate2')\n\n      Text('scale').width('90%').font", "nExample {\n  @State scale: number = 1\n  @Stat", ".transitionTypeTwo, scale: { x: 1.0, y: 0.0 }", "ayscale(`${this.grayscaleValue}`)\n        .ke", " if (eventData.data.scaleValue != null) {\n   ", "     Row()\n        .scale(this.scaleValue)\n  ", " {\n        this.grayscaleValue = eventData.da", "Example1 {\n  @State scale: number = 1\n  @Stat", "pect(obj.$attrs.grayscale).assertEqual(0);\n  ", "ht(40)\n        .grayscale(`${this.grayscaleVa", "a: {\n              \"scale\" : this.scale,\n    ", " Matrix4.identity().scale({x:5, y:1, z:1, cen"], "files": ["pageTransition2.ets", "pathProps.test.js", "circleProps.test.js", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "imageEffects.ets", "Constants.ets", "polylineProps.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "polygonProps.test.js", "index.js", "PageTransitionJsunit.test.ets", "animateTransformProps.test.js", "svgProps.test.js", "progressProps.test.js", "transition.ets", "transForm.ets", "sharedTransition.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TransitionOptions", "api_method_name": "rotate", "api_method_all": "rotate?: RotateOptions", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 392, "since": 7, "api_used": "\u662f", "lines": [" getInspectorByKey('rotate9');\n      let obj =", "  expect(obj.$attrs.rotate.angle).assertEqual(", "  expect(obj.$attrs.rotate.centerY).assertEqua", "(100)\n        .key('rotate8')\n      Image('/im", "xpect(objNew.$attrs.rotate.x).assertEqual('2.0", " getInspectorByKey('rotate');\n      let obj = ", "10 })\n        .key('rotate2')\n\n      Text('sca", " getInspectorByKey('rotate8');\n      let obj =", "  expect(obj.$attrs.rotate.z).assertEqual('1.0", "sMatrix4 {\n  @State rotateValue: object= {\n   ", "EEEE)\n        .key('rotate3')\n\n      Text('Mat", "xpect(objNew.$attrs.rotate.centerX).assertEqua", "(100)\n        .key('rotate7')\n      Image('/im", " getInspectorByKey('rotate');\n      let objNew", "ify(sendEventByKey('rotate5', 10, \"\")));\n     ", "0 }))\n        .key('rotate4')\n    }.width('100", "xpect(objNew.$attrs.rotate.y).assertEqual('2.0", " if (eventData.data.rotateValue != null) {\n   ", "       .rotate(this.rotateValue)\n        .widt", " 5 })\n        .key('rotate6')\n      Image('/im", "ull) {\n        this.rotateValue = JSON.parse(e", "umn() {\n      Text('rotate').width('90%').font", " getInspectorByKey('rotate6');\n      let objNe", "     Row()\n        .rotate(this.rotateValue)\n ", "arse(eventData.data.rotateValue);\n      }\n    ", "EEEE)\n        .key('rotate')\n\n      Text('tran", " getInspectorByKey('rotate3');\n      let objNe", "mExample {\n  @State rotateValue: object= {\n   ", "0 }))\n        .key('rotate4')\n      Button(\"ge", "ep(1000);\n      let rotateValue = {x: 2, y: 2,", "ata: {\n            \"rotateValue\": JSON.stringi", "ue\": JSON.stringify(rotateValue)\n          }\n ", "xpect(objNew.$attrs.rotate.centerY).assertEqua", "xpect(objNew.$attrs.rotate.z).assertEqual('2.0", "  expect(obj.$attrs.rotate.y).assertEqual('1.0", "  expect(obj.$attrs.rotate.x).assertEqual('1.0", "  expect(obj.$attrs.rotate.centerX).assertEqua", " Matrix4.identity().rotate({x:1, y:1, z:2, ang", "(100)\n        .key('rotate9')\n    }.width('100", " getInspectorByKey('rotate7');\n      let obj =", "olor(0x2788D9).key('rotate5')\n      Image('/im", "umn() {\n      Text('rotate').width('10%').font"], "files": ["ohosPrompt.ets", "pathProps.test.js", "circleProps.test.js", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "polylineProps.test.js", "OhosPromptJsunit.test.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "polygonProps.test.js", "index.js", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "animateMotionProps.test.js", "svgTextProps.test.js", "transForm.ets", "motionPath.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewParams", "api_method_all": "interface PreviewParams {\n  \n  title?: string;\n  \n  width?: number;\n  \n  height?: number;\n  \n  locale?: string;\n  \n  colorMode?: string;\n  \n  deviceType?: string;\n  \n  dpi?: number;\n  \n  orientation?: string;\n  \n  roundScreen?: boolean;\n}", "api_method_name": "PreviewParams", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewParams", "api_method_name": "title", "api_method_all": "title?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 81, "since": 8, "api_used": "\u662f", "lines": ["       console.log('titleMode')\n      })\n    ", "ialog({\n            title: 'Title Info',\n    ", "\n      console.log(\"title\")\n    })\n  }\n\n  @Bu", "ull) {\n        this.title = eventData.data.ti", " \"<div class=\\\"item-title\\\"><h1>\u6587\u672c\u6d4b\u8bd5(h1\u6d4b\u8bd5)</h", "ull) {\n        this.titleMode = eventData.dat", "nMenu({\n            title: 'Title Info',\n    ", "lder IngredientItem(title:string, name: strin", "       console.log('titleMode:' + titleModel)", "itle: string = 'old title'\n  @State x: number", "  {\n                title: 'title',\n         ", " if (eventData.data.title != null) {\n        ", "            title: 'title',\n                m", "le = eventData.data.title\n      }\n      if (e", "(obj.$attrs.overlay.title).assertEqual(\"new t", "an = false\n  @State titleMode: NavigationTitl", "yExample {\n  @State title: string = 'old titl", "de = eventData.data.titleMode;\n      }\n      ", "      \"title\": \"new title\"\n          }\n      ", "umn() {\n      Text('title')\n        .width(80", "      .subTitle('subtitle')\n      .menus(this", ".onTitleModeChange((titleModel: NavigationTit", "ationMenus1)\n      .titleMode(NavigationTitle", "ata: {\n            \"title\": \"new title\"\n     ", "e).assertEqual(\"old title\");\n      expect(obj", "0 })\n      }\n      .title(this.NavigationTitl", "wDialog({\n          title: 'Title Info',\n    ", "eight('50%')\n      .title('title')\n      .sub", "e).assertEqual(\"new title\");\n      console.in", "enu({\n              title: 'Title Info',\n    ", "gationMenus)\n      .titleMode(NavigationTitle", "      .overlay(this.title,\n              { al", ".show({\n            title: 'Title',\n         ", "onTitleModeChanged((titleModel: NavigationTit", "ogressChange: \" + e.title);\n        })\n      ", "Flex() {\n      Text(title)\n        .fontSize(", "50%')\n      .title('title')\n      .subTitle('", "(obj.$attrs.overlay.title).assertEqual(\"old t"], "files": ["Navigation.ets", "ohosPrompt.ets", "AlertDialog.ets", "WebPage.ets", "systemPrompt.ets", "NavigationJsunit.test.ets", "fontWeight.ets", "index.js", "basicabilityapi.test.js", "menuProps.test.js", "navigation.ets", "overlay.ets", "OverlayJsunit.test.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewParams", "api_method_name": "width", "api_method_all": "width?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1772, "since": 8, "api_used": "\u662f", "lines": ["temsColumn\")\n      .width('90%')\n      .borde", "thValue}`)\n        .width(200)\n        .heigh", ");\n        })\n    }.width('100%').height('100", "Stretch)\n          .width('33%')\n          .h", "s.alignItems)\n    }.width('100%').padding({ t", ")\n        }\n      }.width('90%').key('gridCon", "gnSelf,height:100').width('34%').height(100)\n", "hrink(2)\n          .width('40%')\n          .h", "ull) {\n        this.width = eventData.data.wi", "(\"img_width=\" + img.width);\n    console.log(\"", "blurValue)\n        .width('90%')\n        .hei", "s/bg.jpg\");\n    let width = img.width;\n    le", "ign.Center)\n      }.width('90%').height(120).", "le.log(\"imagebitmap_width=\" + width);\n    con", "fontColor(0xCCCCCC).width('90%')\n      Column", "pse().width(`${this.width}`).height(`${this.h", "fontColor(0xCCCCCC).width('90%')\n      Flex({", "fontColor(0xCCCCCC).width('90%')\n      Text()", "Shrink')\n          .width('40%')\n          .h", "fontColor(0xCCCCCC).width('90%')\n      Text('", "eExample {\n  @State width: string = \"200px\";\n", "agebitmap_width=\" + width);\n    console.log(\"", "lor(0xAFEEEE)\n    }.width('100%').margin({ to", "xBasis\")\n          .width('60%')\n          .h", "    let width = img.width;\n    let height = i", "%')\n      .border({ width: 1 })\n      .alignI", "enabled)\n    }\n    .width('100%')\n    .paddin", "t: 30 })\n    }\n    .width('100%').height('100", "sole.log(\"imageData_width=\" + imageData.width", "}\n    }.padding(30).width('100%')\n  }\n}", "Shrink\")\n          .width('50%')\n          .h", "    Text()\n        .width('90%')\n        .hei", " .height(200)\n    }.width('100%').margin({ to", "ey('ellipse')\n    }.width('100%').height('100", ") {\n      Ellipse().width(`${this.width}`).he", " {\n        Column().width('50%').height(30).b", "ckgroundImageSize({ width: 1200, height: 160 ", " if (eventData.data.width != null) {\n        ", "   console.log(\"img_width=\" + img.width);\n   ", ".key('flex')\n      .width('90%')\n      .heigh", "ignSelf,height:80').width('33%').height(80)\n ", "s.context)\n        .width('100%').height('40%", "width=\" + imageData.width);\n    console.log(\"", "fontColor(0xCCCCCC).width('90%')\n      Flex()", "th = eventData.data.width;\n      }\n      if (", "E)\n        Column().width('50%').height(30).b"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewParams", "api_method_name": "height", "api_method_all": "height?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1455, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.height != null) {\n        ", "     .width('100%').height('40%').backgroundCo", "    }.width('100%').height('100%')\n  }\n}", "\"img_height=\" + img.height);\n  }\n}", "\n    .width('100%').height('100%').margin({ to", "width(200)\n        .height(200)\n    }.width('1", ".gridSpan)\n        .height(\"100%\")\n        .ba", "        })\n        .height(\"100%\")\n        .ba", "th(`${this.width}`).height(`${this.height}`).k", "   let height = img.height;\n    this.context.i", ":100').width('34%').height(100)\n          .bac", " img.width;\n    let height = img.height;\n    t", "dth('90%')\n        .height(40)\n        .fontSi", "   console.log(\"img_height=\" + img.height);\n  ", "sole.log(\"imageData_height=\" + imageData.heigh", "     }.width('90%').height(120).padding(10).ba", "ull) {\n        this.height = eventData.data.he", "h('50%')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .shadow", "eight=\" + imageData.height);\n  }\n\n  testImage(", "s('100')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .graysc", "h('33%')\n          .height(80)\n          .line", "le.log(\"imagebitmap_height=\" + height);\n  }\n\n ", "h('60%')\n          .height(100)\n          .lin", "= \"200px\";\n  @State height: string = \"200px\";\n", "h}`).height(`${this.height}`).key('ellipse')\n ", " Text('no alignSelf,height:80').width('33%').h", "xGrow(1)\n          .height(100)\n          .lin", "ht = eventData.data.height;\n      }\n    }\n  }\n", "gebitmap_height=\" + height);\n  }\n\n  testOffscr", "xGrow(2)\n          .height(100)\n          .lin", "lumn().width('50%').height(30).backgroundColor", "h('40%')\n          .height(100)\n          .lin", "Size({ width: 1200, height: 160 })\n        .ke", "    })\n            .height(50)\n            .ba", "width('90%')\n      .height(120)\n      .padding", "   })\n\n            .height(50)\n            .ba", "ridOffset)\n        .height(\"100%\")\n        .ba", "an')\n      }\n      .height(200)\n    }\n    .bac", " Text('no alignSelf,height:100').width('34%').", "t:80').width('33%').height(80)\n          .back", "    }.width('100%').height('100%')\n  }\n\n  test"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "AlertDialog.ets", "sliderProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewParams", "api_method_name": "locale", "api_method_all": "locale?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": [" \" + JSON.stringify(localeInfo));\n        cons", "guration.getLocale] localeInfo: \" + JSON.strin", "h');\n        expect(localeInfo.dir).assertEqua", "         \"COUNTRY\": localeInfo.countryOrRegion", "ir);\n        expect(localeInfo.language).asser", "getLocale] dir: \" + localeInfo.dir);\n        e", "              \"DIR\":localeInfo.dir\n           ", "ountryOrRegion: \" + localeInfo.countryOrRegion", "      console.info('localeInfo result is' + JS", "rt');\n          let localeInfo = Configuration", "s' + JSON.stringify(localeInfo));\n          tr", "RT');\n        const localeInfo = configuration", "cale] language: \" + localeInfo.language);\n    "], "files": ["configuration.ets", "basicabilityapi.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewParams", "api_method_name": "colorMode", "api_method_all": "colorMode?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["nvironment.EnvProp(\"colorMode\", ColorMode.LIGHT);", "Environment_EnvProp_colorMode_0100] START');\n    ", "nvironment.EnvProp(\"colorMode\", ColorMode.DARK);\n", "Environment_EnvProp_colorMode_0100] enable1 =' + ", "              key: \"colorMode\", defaultValue: Col", "e = AppStorage.Get(\"colorMode\");\n      expect(ena", "Storage.DeleteProp(\"colorMode\");\n      expect(tru", "1 = AppStorage.Get(\"colorMode\");\n      console.in", "Environment_EnvProp_colorMode_0100] enable =' + e", "Environment_EnvProp_colorMode_0100', 0, function ", "Environment_EnvProp_colorMode_0100] END');\n      ", "e = AppStorage.Get(\"colorMode\");\n        let enab"], "files": ["SubscribaleAbstractJsunit.test.ets", "AppStorageJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewParams", "api_method_name": "deviceType", "api_method_all": "deviceType?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["chMedia('screen and(deviceType:phone)');\n        f", "')\n    });\n\n    it('deviceType', 0, function() {\n ", "      console.info('deviceType start');\n        va", "le.info('MediaQuery deviceType success');\n        ", "aquery.matchMedia('(deviceType:phone)');\n        f", "le.info('MediaQuery deviceType fail');\n           ", "le.info('MediaQuery deviceType end')\n    });\n\n    ", "dia('not screen and(deviceType:tv)');\n//      mMed", "ia('only screen and(deviceType:phone)and(max-heigh", ");\n        function deviceTypeMatch(e){\n          ", "eryList.addListener(deviceTypeMatch)\n        conso"], "files": ["mediaquery.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewParams", "api_method_name": "dpi", "api_method_all": "dpi?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewParams", "api_method_name": "orientation", "api_method_all": "orientation?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["le.info('MediaQuery orientation fail');\n           ", "e)\n        function orientationMatch(e){\n          ", "aquery.matchMedia('(orientation:landscape)');\n     ", "le.info(\"MediaQuery orientation matches:\"+e.matches", "le.info('MediaQuery orientation test end')\n    });\n", "      console.info('orientation test start');\n     ", "eryList.addListener(orientationMatch)\n        conso", ");\n    });\n\n    it('orientation', 0, function() {\n ", "      console.info(\"orientation onchangeMessage:\"+m", "le.info('MediaQuery orientation success');\n        "], "files": ["mediaquery.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewParams", "api_method_name": "roundScreen", "api_method_all": "roundScreen?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ItemDragInfo", "api_method_all": "declare interface ItemDragInfo {\n  \n  x: number;\n\n  \n  y: number;\n}", "api_method_name": "ItemDragInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["temDragMove((event: ItemDragInfo, itemIndex: number,", "emDragEnter((event: ItemDragInfo) => {\n          con", "       console.log('ItemDragInfo, itemIndex:' + item", "emDragStart((event: ItemDragInfo, itemIndex: number)", "emDragLeave((event: ItemDragInfo, itemIndex: number)", ".onItemDrop((event: ItemDragInfo, itemIndex: number,", "// @ts-nocheck\n\nlet ItemDragInfo: {\n  x: 5,\n  y: 5\n}"], "files": ["List.ets", "dragEvent2.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ItemDragInfo", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20226, "since": 7, "api_used": "\u662f", "lines": ["", "= eventData.data.flexBasis;\n      }\n     ", "3).backgroundColor(0x2788D9)\n      if (th", "mponent\nstruct AreaExample {\n  @State val", "\n        })\n      Text('new area is: \\n' ", "f (eventData.data.text != null) {\n       ", "\n  build() {\n    Flex({ direction: FlexDi", "      Button(this.text)\n        .key('ena", "isShow) {\n        Text(this.myText)\n     ", " value: string = 'Text';\n  @State size: s", "ue)\n        .key('text1')\n        .backgr", "nent\nstruct EllipseExample {\n  @State wid", "t({ message: 'The text is shown', duratio", "nent\nstruct EnabledExample {\n  @State ena", "\n  build() {\n    Flex({ justifyContent: F", " Column() {\n      Text(this.value)\n      ", "State direction: FlexDirection = FlexDire", "Component\nstruct FlexExample {\n  @State d", " (eventData.data.flexBasis != null) {\n   ", "      Text(this.myText)\n          .onAppe", "t({ message: 'The text is hidden', durati", "ze)\n        .key('text2')\n        .margin", "ngeAppear = 'Hide Text'\n            conso", "idth: string = \"200px\";\n  @State height: ", "mponent\nstruct FlexExample {\n  @State dir", "myText: string = 'Text for onAppear'\n\n  o", "0).backgroundColor(0x00FFFF)\n      }\n    ", " justifyContent: FlexAlign.Center }) {\n  ", "ngeAppear = 'Show Text'\n            conso", "tSize(9).fontColor(0xCCCCCC).width('90%')", " Column() {\n      Text('alignItems').font", "l) {\n        this.text = eventData.data.t", "onent\nstruct AppearExample {\n  @State isS", "  .backgroundColor(0x317aff)\n        .ena", " = true;\n  @State text: string = \"enable\"", " (eventData.data.flexGrow != null) {\n    ", ") {\n        this.flexBasis = eventData.da", ") {\n        this.flexGrow = eventData.dat", "r: string = 'Hide Text'\n  private myText:", "0).backgroundColor(0xAFEEEE)\n        Colu", "  .backgroundColor(0x317aff)\n        .opa", " FlexDirection = FlexDirection.Row\n  priv", "e = this.value + 'Text'\n          try {\n ", "lex({ direction: FlexDirection.Row, align", "   console.info(\"Flex page state change c", " = eventData.data.text\n      }\n    }\n  }\n", "onent\nstruct ColumnExample {\n  @State ali", " justifyContent: FlexAlign.SpaceAround })", "Text'\n  private myText: string = 'Text fo", "ight: string = \"200px\";\n\n  onPageShow() {"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "style.js", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ItemDragInfo", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35614, "since": 7, "api_used": "\u662f", "lines": ["hos.emitter';\n\n@Entry\n@Component\nstruct E", "F)\n      }\n      .key(\"alignItemsColumn\")", "e is ${JSON.stringify(oldValue)} newvalue", "`${this.height}`).key('ellipse')\n    }.wi", "ohos.emitter'\n\n@Entry\n@Component\nstruct E", "ed:\" + JSON.stringify(eventData));\n      ", "Align.Center, justifyContent: FlexAlign.C", "d: 58,\n      priority: events_emitter.Eve", "size = JSON.stringify(newValue)\n         ", "d: 92,\n      priority: events_emitter.Eve", "te')\n  },\n  onDestroy() {\n    console.inf", "d: 93,\n      priority: events_emitter.Eve", "alled);\n          try {\n            var b", "e is ${JSON.stringify(newValue)}`)\n      ", "\n        Text(this.myText)\n          .onA", "eAppear)\n        .key('appear')\n        .", "Application onDestroy')\n  },\n}", "             priority: events_emitter.Eve", "r: \" + JSON.stringify(err.message))\n     ", "emitter.EventPriority.LOW\n            }\n ", "s.value)\n        .key('text1')\n        .b", " 'Text'\n          try {\n            var b", "hos.emitter';\n\n@Entry\n@Component\nstruct C", ": 192,\n      priority: events_emitter.Eve", "de Text'\n  private myText: string = 'Text", "ystem.prompt'\n\n@Entry\n@Preview\n@Component", "port prompt from '@system.prompt'\n\n@Entry", "hos.emitter';\n\n@Entry\n@Component\nstruct A", "emitter.EventPriority.LOW\n    }\n    event", "00 })\n            try {\n              var", "emitter.EventPriority.LOW\n              }", "is.size)\n        .key('text2')\n        .m", ": 907,\n      priority: events_emitter.Eve", ": 908,\n      priority: events_emitter.Eve"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "PieceCode.ets", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "video.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DragItemInfo", "api_method_all": "declare interface DragItemInfo {\n  \n  pixelMap?: PixelMap;\n\n  \n  builder?: CustomBuilder;\n\n  \n  extraInfo?: string;\n}", "api_method_name": "DragItemInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DragItemInfo", "api_method_name": "pixelMap", "api_method_all": "pixelMap?: PixelMap", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["aa\",\n              \"pixelMap\" :PixelMapMock.rele", "   \"builder\" : this.pixelMapBuilder(),\n         ", "        return this.pixelMapBuilder\n          })", "ber = 0\n\n  @Builder pixelMapBuilder() {\n    Colu", "        return this.pixelMapBuilder();\n         ", "        return this.pixelMapBuilder;\n        })\n", "ber = 1\n\n  @Builder pixelMapBuilder() {\n    Colu", "ixelMap() {\n    let pixelMap = this.context.getP", "-\" + JSON.stringify(pixelMap));\n  }\n}"], "files": ["List.ets", "dragEvent.ets", "canvas.ets", "dragEvent2.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DragItemInfo", "api_method_name": "builder", "api_method_all": "builder?: CustomBuilder", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["mPopup, {\n          builder: this.popupBuilder,", " = {\n              \"builder\" : this.pixelMapBui", "logController({\n    builder: CustomDialogExampl", "pupOne, {\n          builder: this.popupBuilderO", "pThree, {\n          builder: this.popupBuilderT", "pupTwo, {\n          builder: this.popupBuilderT"], "files": ["customDialogController.ets", "placement.ets", "dragEvent2.ets", "bindPopup.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DragItemInfo", "api_method_name": "extraInfo", "api_method_all": "extraInfo?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["r(),\n              \"extraInfo\": \"aaa\",\n          "], "files": ["dragEvent2.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "EventTarget", "api_method_all": "declare interface EventTarget {\n  \n  area: Area;\n}", "api_method_name": "EventTarget", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "EventTarget", "api_method_name": "area", "api_method_all": "area: Area", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 99, "since": 8, "api_used": "\u662f", "lines": [" console.info(\"push areaChange page success ", "     + event.target.area.globalPos.x + ',' +", "      console.info('areaChangeTest_0400 END'", "     + event.target.area.width + '\\nheight\uff1a'", "nsole.info(`Ace: on area change, oldValue is", "ht\uff1a' + event.target.area.height);\n          ", ");\n    });\n\n    it('areaChangeTest_0300', 0,", "rt default function areaChangeJsunit() {\n  d", "      console.info(\"areaChange after each ca", "      console.info('areaChangeTest_0400 STAR", "     + event.target.area.width + '\\n  height", " ',' + event.target.area.globalPos.y + '\uff09\\n ", "  console.info(\"get areaChange state success", "    uri: 'pages/textarea/router/index'\n     ", "        uri: 'pages/areaChange',\n      }\n   ", "ht\uff1a' + event.target.area.height)\n          c", "console.error(\"push areaChange page error: \"", "      console.info(\"areaChangeTest_0400 get ", "ontainerJsunit();\n  areaChangeJsunit();\n  im", "        it('testTextareaComponent', 0, async", " })\n      Text('new area is: \\n' + this.size", "      console.info(\"areaChangeTest_0300 clic", "js')\nrequire('./textareaProps.test.js')\nrequ", "      console.info(\"areaChangeTest_0300 get ", "      console.info(\"areaChangeTest_0400 clic", "s));\n        if (!(\"areaChange\" == pages.nam", "llback in the blank area')\n  }\n\n  build() {\n", "e).assertEqual('textarea')\n        expect(ob", "      console.info(\"areaChangeTest_0400 on e", ");\n    });\n\n    it('areaChangeTest_0400', 0,", "c.name      testTextareaComponent\n         *", "nit() {\n  describe('areaChangeTest', functio", "      console.info('areaChangeTest_0300 END'", "t.test.ets';\nimport areaChangeJsunit from '.", "      console.info(\"areaChangeTest_0300 on e", "  expect(\"pages/textarea/router/\").assertEqu", " ',' + event.target.area.globalPos.y + '\uff09\\nw", "      console.info('areaChangeTest_0300 STAR"], "files": ["List.test.js", "touch.ets", "AreaChangeJsunit.test.ets", "textareaProps.test.js", "commonComponentJsApi.test.js", "List.test.ets", "button.ets", "customDialogController.ets", "areaChange.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SourceType", "api_method_all": "declare enum SourceType {\n  \n  Unknown,\n\n  \n  Mouse,\n\n  \n  TouchScreen,\n}", "api_method_name": "SourceType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": [" {\n            this.SourceType = 'Unknown'\n       ", "eTypeJsunit from './SourceTypeJsunit.test.ets';\nim", " {\n            this.SourceType = 'Mouse'\n         ", " {\n            this.SourceType = 'TouchScreen'\n   "], "files": ["List.test.ets", "sourceType.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SourceType", "api_method_name": "Unknown", "api_method_all": "Unknown,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["f (event.source === Unknown) {\n            this", "('this getHitTest : Unknown');\n            }\n  ", "tType = HitTestType.Unknown\n  controller: WebCo", " this.SourceType = 'Unknown'\n          }\n      ", "tTest = HitTestType.Unknown\n              conso"], "files": ["WebPage.ets", "sourceType.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SourceType", "api_method_name": "Mouse", "api_method_all": "Mouse,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["nt.event.action === MouseAction.Hover) {\n    ", "f (event.button === MouseButton.Back) {\n     ", "   .onMouse((event: MouseEvent) => {\n        ", "ouseText: string = 'MouseText'\n  @State color", "or)\n      Button('onMouse')\n        .onMouse(", "y\n@Component\nstruct MouseEventExample {\n  @St", "this.mouseText = 'onMouse:\\nButton = ' + even", "this.mouseText = 'onMouse:\\nButton = ' + this", " this.SourceType = 'Mouse'\n          }\n      ", "f (event.button === MouseButton.None) {\n     ", "f (event.source === Mouse) {\n            this", "nt.event.action === MouseAction.None) {\n     ", "nMouse')\n        .onMouse((event: MouseEvent)", "nt.event.action === MouseAction.Release) {\n  "], "files": ["mouseEvent.ets", "sourceType.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SourceType", "api_method_name": "TouchScreen", "api_method_all": "TouchScreen,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [" if (event.type === TouchScreen) {\n            this", " this.SourceType = 'TouchScreen'\n          }\n      "], "files": ["sourceType.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BaseEvent", "api_method_all": "declare interface BaseEvent {\n  \n  target: EventTarget;\n\n  \n  timestamp: number;\n\n  \n  source: SourceType;\n}", "api_method_name": "BaseEvent", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BaseEvent", "api_method_name": "target", "api_method_all": "target: EventTarget", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": ["  targetProp : this.targetProp,\n            pl", "tringify(obj.$attrs.target));\n        done();\n", "arget).assertEqual('target1') //PROP AND VALUE", "'\n          + event.target.area.globalPos.x + ", "o(\"[labelProps] get target value is: \" + JSON.", "fo(\"[menuProps] get target value is: \" + JSON.", "o(\"[popupProps] get target value is: \" + JSON.", "'\n          + event.target.area.width + '\\n  h", "{\n      Navigator({ target: 'pages/pageTransit", "se(globalThis.value.targetProp); //ID\n        ", "  expect(obj.$attrs.target).assertEqual('targe", "  expect(obj.$attrs.target).assertEqual('pages", "  expect(obj.$attrs.target).assertEqual('label", "tor()\n\n        this.targetProp = this.$element", "'\\nheight\uff1a' + event.target.area.height)\n      ", "{\n      Navigator({ target: \"pages/index\", typ", "n  height\uff1a' + event.target.area.height);\n     ", "le.log('Navigator\u2018s target is ' + JSON.stringi", "{\n      Navigator({ target: 'pages/NavigatorDe", "ne : null,\n\n        targetProp : null,\n       ", "        Navigator({ target: 'pages/sharedTrans", "){\n      Navigator({target:\"pages/index\",type:", "rs.id).assertEqual('targetProp') //ID\n        ", ")\n\n      Navigator({target:\"pages/index\",type:", "'\n          + event.target.area.width + '\\nhei", "Pos.x + ',' + event.target.area.globalPos.y + ", "  expect(obj.$attrs.target).assertEqual('testT", "pNone,\n\n            targetProp : this.targetPr", "\n\n      Navigator({ target: \"pages/index\", typ", " y:' + event.y + '\\ntarget:' + '\\n  component ", "tringify(obj.$attrs.target))\n      console.log", "  expect(obj.$attrs.target).assertEqual(undefi", "op = this.$element(\"targetProp\").getInspector("], "files": ["Grid.ets", "GridItem.ets", "pageTransition2.ets", "menuProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "touch.ets", "popupProps.test.js", "labelProps.test.js", "NavigatorJsunit.test.ets", "Navigator.ets", "sharedTransition.ets", "index.js", "PageTransitionJsunit.test.ets", "button.ets", "NavigatorCode.ets", "Row.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BaseEvent", "api_method_name": "timestamp", "api_method_all": "timestamp: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1409, "since": 8, "api_used": "\u662f", "lines": ["globalY\n        var timestamp = event.timestamp\n ", "tCount;\n        var timestampStart = event.timest", "r timestamp = event.timestamp\n        var message", "  this.text = event.timestamp\n          console.i", " + ',timestamp--' + timestamp;\n        prompt.sho", "' + repeatCount + ',timestampStart--' + timestamp", "lY--' + globalY + ',timestamp--' + timestamp;\n   ", "timestampStart--' + timestampStart;\n        promp", "estampStart = event.timestampStart;\n        var m"], "files": ["timeStamp.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BaseEvent", "api_method_name": "source", "api_method_all": "source: SourceType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 63, "since": 7, "api_used": "\u662f", "lines": ["      console.info(\"sourceTypeTest_0100 emit a", "      console.info(\"sourceTypeTest_0100 rectIn", ")\n  selectedIcon: Resource = ($rawfile(\"test.p", " foregroundUri: '/resources/rawfile/star-1-3.p", " backgroundUri: '/resources/rawfile/star-1-1.p", "      console.info(\"sourceType after each call", " console.info(\"push sourceType page result:\" +", "      console.info(\"sourceTypeTest_0100 onTouc", "t.test.ets';\nimport sourceTypeJsunit from './S", "  console.info(\"get sourceType state pages.nam", "      console.info(\"sourceTypeTest_0100 get ev", "rt default function sourceTypeJsunit() {\n  des", "       .fontFamily('source-sans-pro,cursive,sa", "  secondaryUri: '/resources/rawfile/star-1-2.p", "      console.info('sourceTypeTest_0100 testSe", "console.log(\"image1 sourceSize\" + JSON.stringi", "e.info(this.text = 'source\uff1a' + event.source);\n", "\n          .alt(\"/resources/rawfile/person.png", "      console.info(\"sourceTypeTest_0100 on eve", "d(false)\n          .sourceSize({ width: 200, h", "       expect(event.source).assertEqual(0)\n   ", "      console.info('sourceTypeTest_0100 sendTo", "empromptJsunit();\n  sourceTypeJsunit();\n}", "et source_ = oneWay.source_;\n      let wrapped", "t('Orange 18 Normal source-sans-pro text')\n   ", "  console.info(\"get sourceType state pages:\" +", "console.error(\"push sourceType page error:\" + ", ");\n    });\n\n    it('sourceTypeTest_0100', 0, a", "      console.info(\"sourceType beforeEach star", "        uri: 'pages/sourceType',\n      }\n     ", "          if (event.source === Unknown) {\n    ", ")\n        Image(\"/resources/rawfile/hand.png\")", "      console.info(\"sourceTypeTest_0100 start ", "          if (event.source === Mouse) {\n      ", " {\n  normalIcon : Resource = ($rawfile(\"ic_hea", "mpositeOperation = 'source-over';\n  }\n\n  shado", "= 'source\uff1a' + event.source);\n          try {\n ", "s));\n        if (!(\"sourceType\" == pages.name)", "ring>());\n      let source_ = oneWay.source_;\n", "mpositeOperation = 'source-over';\n    this.con", "et source_ = twoWay.source_;\n      let wrapped", "ring>());\n      let source_ = twoWay.source_;\n"], "files": ["textStyle.ets", "index.js", "ImageJsunit.test.ets", "Video.ets", "WebPage.ets", "SubscribaleAbstractJsunit.test.ets", "SourceTypeJsunit.test.ets", "Image.ets", "RatingJsunit.test.ets", "Rating.ets", "sideBar.ets", "sourceType.ets", "List.test.ets", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ClickEvent", "api_method_all": "declare interface ClickEvent extends BaseEvent {\n  \n  screenX: number;\n\n  \n  screenY: number;\n\n  \n  x: number;\n\n  \n  y: number;\n}", "api_method_name": "ClickEvent", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": [" console.info(\"[testClickEvent001] on events_emitt", " console.info('[testClickEvent001] sendEventByKey ", "   .onClick((event: ClickEvent) => {\n          thi", "   .onClick((event: ClickEvent) => {\n          con", " console.info(\"[testClickEvent001] get event state", " console.info('[testClickEvent001] testSendTouchEv"], "files": ["timeStamp.ets", "TouchAbleJsunit.test.ets", "TapGesture.test.ets", "CustomDialogControllerJsunit.test.ets", "scrollCode.ets", "button.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ClickEvent", "api_method_name": "screenX", "api_method_all": "screenX: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["  screenX:' + event.screenX + '\\n  screenY:' + ", "screenXY=(' + event.screenX + ',' + event.scree", " event.y + ')' + '\\nscreenXY=(' + event.screenX", "       expect(event.screenX).assertEqual(135)\n ", "lick Point:' + '\\n  screenX:' + event.screenX +"], "files": ["mouseEvent.ets", "button.ets", "ButtonJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ClickEvent", "api_method_name": "screenY", "api_method_all": "screenY: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["  screenY:' + event.screenY\n          + '\\n  x ", "vent.screenX + '\\n  screenY:' + event.screenY\n ", "reenX + ',' + event.screenY + ')')\n          co", "reenX + ',' + event.screenY + ')')\n          st", "       expect(event.screenY).assertEqual(368.80"], "files": ["mouseEvent.ets", "button.ets", "ButtonJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ClickEvent", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20226, "since": 7, "api_used": "\u662f", "lines": ["", "= eventData.data.flexBasis;\n      }\n     ", "3).backgroundColor(0x2788D9)\n      if (th", "mponent\nstruct AreaExample {\n  @State val", "\n        })\n      Text('new area is: \\n' ", "f (eventData.data.text != null) {\n       ", "\n  build() {\n    Flex({ direction: FlexDi", "      Button(this.text)\n        .key('ena", "isShow) {\n        Text(this.myText)\n     ", " value: string = 'Text';\n  @State size: s", "ue)\n        .key('text1')\n        .backgr", "nent\nstruct EllipseExample {\n  @State wid", "t({ message: 'The text is shown', duratio", "nent\nstruct EnabledExample {\n  @State ena", "\n  build() {\n    Flex({ justifyContent: F", " Column() {\n      Text(this.value)\n      ", "State direction: FlexDirection = FlexDire", "Component\nstruct FlexExample {\n  @State d", " (eventData.data.flexBasis != null) {\n   ", "      Text(this.myText)\n          .onAppe", "t({ message: 'The text is hidden', durati", "ze)\n        .key('text2')\n        .margin", "ngeAppear = 'Hide Text'\n            conso", "idth: string = \"200px\";\n  @State height: ", "mponent\nstruct FlexExample {\n  @State dir", "myText: string = 'Text for onAppear'\n\n  o", "0).backgroundColor(0x00FFFF)\n      }\n    ", " justifyContent: FlexAlign.Center }) {\n  ", "ngeAppear = 'Show Text'\n            conso", "tSize(9).fontColor(0xCCCCCC).width('90%')", " Column() {\n      Text('alignItems').font", "l) {\n        this.text = eventData.data.t", "onent\nstruct AppearExample {\n  @State isS", "  .backgroundColor(0x317aff)\n        .ena", " = true;\n  @State text: string = \"enable\"", " (eventData.data.flexGrow != null) {\n    ", ") {\n        this.flexBasis = eventData.da", ") {\n        this.flexGrow = eventData.dat", "r: string = 'Hide Text'\n  private myText:", "0).backgroundColor(0xAFEEEE)\n        Colu", "  .backgroundColor(0x317aff)\n        .opa", " FlexDirection = FlexDirection.Row\n  priv", "e = this.value + 'Text'\n          try {\n ", "lex({ direction: FlexDirection.Row, align", "   console.info(\"Flex page state change c", " = eventData.data.text\n      }\n    }\n  }\n", "onent\nstruct ColumnExample {\n  @State ali", " justifyContent: FlexAlign.SpaceAround })", "Text'\n  private myText: string = 'Text fo", "ight: string = \"200px\";\n\n  onPageShow() {"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "style.js", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ClickEvent", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35614, "since": 7, "api_used": "\u662f", "lines": ["hos.emitter';\n\n@Entry\n@Component\nstruct E", "F)\n      }\n      .key(\"alignItemsColumn\")", "e is ${JSON.stringify(oldValue)} newvalue", "`${this.height}`).key('ellipse')\n    }.wi", "ohos.emitter'\n\n@Entry\n@Component\nstruct E", "ed:\" + JSON.stringify(eventData));\n      ", "Align.Center, justifyContent: FlexAlign.C", "d: 58,\n      priority: events_emitter.Eve", "size = JSON.stringify(newValue)\n         ", "d: 92,\n      priority: events_emitter.Eve", "te')\n  },\n  onDestroy() {\n    console.inf", "d: 93,\n      priority: events_emitter.Eve", "alled);\n          try {\n            var b", "e is ${JSON.stringify(newValue)}`)\n      ", "\n        Text(this.myText)\n          .onA", "eAppear)\n        .key('appear')\n        .", "Application onDestroy')\n  },\n}", "             priority: events_emitter.Eve", "r: \" + JSON.stringify(err.message))\n     ", "emitter.EventPriority.LOW\n            }\n ", "s.value)\n        .key('text1')\n        .b", " 'Text'\n          try {\n            var b", "hos.emitter';\n\n@Entry\n@Component\nstruct C", ": 192,\n      priority: events_emitter.Eve", "de Text'\n  private myText: string = 'Text", "ystem.prompt'\n\n@Entry\n@Preview\n@Component", "port prompt from '@system.prompt'\n\n@Entry", "hos.emitter';\n\n@Entry\n@Component\nstruct A", "emitter.EventPriority.LOW\n    }\n    event", "00 })\n            try {\n              var", "emitter.EventPriority.LOW\n              }", "is.size)\n        .key('text2')\n        .m", ": 907,\n      priority: events_emitter.Eve", ": 908,\n      priority: events_emitter.Eve"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "PieceCode.ets", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "video.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseEvent", "api_method_all": "declare interface MouseEvent extends BaseEvent {\n  \n  button: MouseButton;\n\n  \n  action: MouseAction;\n\n  \n  screenX: number;\n\n  \n  screenY: number;\n\n  \n  x: number;\n\n  \n  y: number;\n\n  \n  stopPropagation?: () => void;\n}", "api_method_name": "MouseEvent", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["y\n@Component\nstruct MouseEventExample {\n  @State h", "   .onMouse((event: MouseEvent) => {\n          if "], "files": ["mouseEvent.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseEvent", "api_method_name": "stopPropagation", "api_method_all": "stopPropagation?: () => void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["        }\n          stopPropagation: () => {\n          ", "      console.info('stopPropagation')\n          }\n     ", "nY + ')')\n          stopPropagation: () => {\n          "], "files": ["touch.ets", "mouseEvent.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseEvent", "api_method_name": "button", "api_method_all": "button: MouseButton", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 615, "since": 8, "api_used": "\u662f", "lines": ["          if (event.button === MouseButton.Non", "      console.info(\"button1 start to emit acti", "ify(sendEventByKey('button1',10,\"\")));\n      a", "      console.info('button1 current action sta", "back when the first button is clicked')\n  }\n  ", "w')\n          .key('button2')\n          .onCli", "n({bottom:50}).key('button')\n        .onClick(", "      console.info(\"button2 emit action state ", "          if (event.button === MouseButton.Bac", "Button('once').key('button4').width(100).paddi", "console.info(\"reset button start to emit actio", ":20})\n        .key('button')\n        .onClick(", "cess callback\uff0cclick button : ' + data.tapIndex", "ify(sendEventByKey('button2', 10, \"\")));\n     ", "art')\n        .key('button')\n        .onClick(", "utton('start').key('button').width(100).paddin", "      console.info(\"button2 start to emit acti", "string = 'The third button cannot be focused'\n", "      console.info(\"button start to emit actio", "utton('pause').key('button1').width(100).paddi", "console.info(\"reset button emit action state e", "t')\n          .key('button1')\n          .onCli", "cess callback\uff0cclick button : ' + data.index);\n", "      console.info(\"button1 emit action state ", "      console.info(\"button emit action state e", "ock\")\n        .key('button')\n        .onClick(", "      Button('reset button').margin(30).onClic", "ify(sendEventByKey('button',10,\"\")));\n      aw", "ton('reverse').key('button3').width(100).paddi", "n('iteration').key('button5').width(100).paddi", "    }\n      }).key('button1')\n    }.width('100", "      console.info('button2 current action sta", "ify(sendEventByKey('button1', 10, \"\")));\n     ", "Button('stop').key('button2').width(100).paddi", "ify(sendEventByKey('button', 10, \"\")));\n      ", "nButton = ' + event.button + '\\nAction = ' + e", "ify(sendEventByKey('button2',10,\"\")));\n      a", " Info',\n            buttons: [\n              {", "ack when the second button is clicked')\n  }\n  "], "files": ["animate.ets", "MotionPathJsunit.test.ets", "ohosPrompt.ets", "focus.ets", "List.test.js", "configuration.ets", "AnimationStatusJsunit.test.ets", "gridPage.ets", "mouseEvent.ets", "buttonProps.test.js", "placement.ets", "playMode.ets", "SourceTypeJsunit.test.ets", "PieceCode.ets", "AboutToDisappearJsunit.test.ets", "TextPickerJsunit.test.ets", "ButtonJsunit.test.ets", "PlayModeJsunit.test.ets", "bindMenu.ets", "swiper.ets", "ImageAnimatorJsunit.test.ets", "SystemRouterJsunit.test.ets", "animationStatus.ets", "toggle.ets", "commonComponentJsApi.test.js", "sourceType.ets", "Sidebar.ets", "fillMode.ets", "customDialogController.ets", "CustomDialog.ets", "searchProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "TransitionJsunit.test.ets", "textClock.ets", "geometryTransition.ets", "BindMenuJsunit.test.ets", "OhosRouterJsnuit.test.ets", "SystempromptJsunit.test.ets", "WebPage.ets", "marquee.ets", "AnimateJsunit.test.ets", "MarqueeJsunit.test.ets", "PieceJsunit.test.ets", "inputProps.test.js", "PlacementJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "AppStorageJsunit.test.ets", "BindPopupJsunit.test.ets", "ScrollCodeJsunit.test.ets", "Link.ets", "TimeStampJsunit.test.ets", "basicabilityapi.test.js", "FillModeJsunit.test.ets", "timeStamp.ets", "Toggle.ets", "transition.ets", "systemPrompt.ets", "CustomDialogControllerJsunit.test.ets", "aboutToDisappear.ets", "Button.ets", "bindPopup.ets", "imageAnimator.ets", "motionPath.ets", "NavigatorCodeJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "NavigatorCode.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseEvent", "api_method_name": "action", "api_method_all": "action: MouseAction", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 398, "since": 8, "api_used": "\u662f", "lines": ["info(\"click to emit action state\")\n           ", "start start to emit action state\")\n           ", "le.info(\"apple emit action state err: \" + JSON", "info(\"onChange emit action state err: \" + JSON", "info(\"Onfinish emit action state err: \" + JSON", ".info(\"Onstart emit action state err: \" + JSON", "nfo(\"touchFlag emit action state err: \" + JSON", "fo('button1 current action state is: ' + this.", "\"disAppearFlag emit action state err: \" + JSON", "hange start to emit action state\")\n          e", " console.info(\"emit action state err: \" + JSON", "inish start to emit action state\")\n           ", "fo(\"appearFlag emit action state err: \" + JSON", "utton start to emit action state\")\n           ", "fo('Onstart current action state is: ' + this.", ".info(\"button2 emit action state err: \" + JSON", ".info(\"button1 emit action state err: \" + JSON", "o('Onbounce current action state is: ' + this.", "hange start to emit action state\")\n           ", "'appearFlag current action state is: ' + this.", "o(\"onDragEnter emit action state err: \" + JSON", "info(\"start to emit action state\")\n           ", "Able] start to emit action state\")\n           ", "o('onChange current action state is: ' + this.", "console.info(\"click action state err: \" + JSON", "nAreaChange current action state is: ' + this.", "hFlag start to emit action state\")\n           ", "apple start to emit action state\")\n           ", "fo('button2 current action state is: ' + this.", "o('Onfinish current action state is: ' + this.", "Enter start to emit action state\")\n          e", "ounce start to emit action state\")\n           ", "rFlag start to emit action state\")\n           ", "tton1 start to emit action state\")\n           ", "Click start to emit action state\")\n           ", "o(\"[TouchAble] emit action state err: \" + JSON", "(\"onAreaChange emit action state err: \" + JSON", "sAppearFlag current action state is: ' + this.", "tton2 start to emit action state\")\n           ", ".info(\"onClick emit action state err: \" + JSON", "e.info(\"button emit action state err: \" + JSON", "gMove start to emit action state\")\n          e", "info(\"Onbounce emit action state err: \" + JSON"], "files": ["animate.ets", "ohosPrompt.ets", "touch.ets", "configuration.ets", "longPressGesture.ets", "mouseEvent.ets", "placement.ets", "playMode.ets", "PieceCode.ets", "ohosMatrix4.ets", "bindMenu.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "sourceType.ets", "fillMode.ets", "navigation.ets", "customDialogController.ets", "priorityGesture.ets", "touchAble.ets", "pageTransition.ets", "textClock.ets", "geometryTransition.ets", "tabs.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "marquee.ets", "tapGesture.ets", "index.js", "areaChange.ets", "ResponseRegion.ets", "dragEvent.ets", "PanGesture.ets", "parallelGesture.ets", "timeStamp.ets", "transition.ets", "aboutToDisappear.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets", "bindPopup.ets", "scrollCode.ets", "button.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseEvent", "api_method_name": "screenX", "api_method_all": "screenX: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["  screenX:' + event.screenX + '\\n  screenY:' + ", "screenXY=(' + event.screenX + ',' + event.scree", " event.y + ')' + '\\nscreenXY=(' + event.screenX", "       expect(event.screenX).assertEqual(135)\n ", "lick Point:' + '\\n  screenX:' + event.screenX +"], "files": ["mouseEvent.ets", "button.ets", "ButtonJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseEvent", "api_method_name": "screenY", "api_method_all": "screenY: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["  screenY:' + event.screenY\n          + '\\n  x ", "vent.screenX + '\\n  screenY:' + event.screenY\n ", "reenX + ',' + event.screenY + ')')\n          co", "reenX + ',' + event.screenY + ')')\n          st", "       expect(event.screenY).assertEqual(368.80"], "files": ["mouseEvent.ets", "button.ets", "ButtonJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseEvent", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20226, "since": 7, "api_used": "\u662f", "lines": ["", "= eventData.data.flexBasis;\n      }\n     ", "3).backgroundColor(0x2788D9)\n      if (th", "mponent\nstruct AreaExample {\n  @State val", "\n        })\n      Text('new area is: \\n' ", "f (eventData.data.text != null) {\n       ", "\n  build() {\n    Flex({ direction: FlexDi", "      Button(this.text)\n        .key('ena", "isShow) {\n        Text(this.myText)\n     ", " value: string = 'Text';\n  @State size: s", "ue)\n        .key('text1')\n        .backgr", "nent\nstruct EllipseExample {\n  @State wid", "t({ message: 'The text is shown', duratio", "nent\nstruct EnabledExample {\n  @State ena", "\n  build() {\n    Flex({ justifyContent: F", " Column() {\n      Text(this.value)\n      ", "State direction: FlexDirection = FlexDire", "Component\nstruct FlexExample {\n  @State d", " (eventData.data.flexBasis != null) {\n   ", "      Text(this.myText)\n          .onAppe", "t({ message: 'The text is hidden', durati", "ze)\n        .key('text2')\n        .margin", "ngeAppear = 'Hide Text'\n            conso", "idth: string = \"200px\";\n  @State height: ", "mponent\nstruct FlexExample {\n  @State dir", "myText: string = 'Text for onAppear'\n\n  o", "0).backgroundColor(0x00FFFF)\n      }\n    ", " justifyContent: FlexAlign.Center }) {\n  ", "ngeAppear = 'Show Text'\n            conso", "tSize(9).fontColor(0xCCCCCC).width('90%')", " Column() {\n      Text('alignItems').font", "l) {\n        this.text = eventData.data.t", "onent\nstruct AppearExample {\n  @State isS", "  .backgroundColor(0x317aff)\n        .ena", " = true;\n  @State text: string = \"enable\"", " (eventData.data.flexGrow != null) {\n    ", ") {\n        this.flexBasis = eventData.da", ") {\n        this.flexGrow = eventData.dat", "r: string = 'Hide Text'\n  private myText:", "0).backgroundColor(0xAFEEEE)\n        Colu", "  .backgroundColor(0x317aff)\n        .opa", " FlexDirection = FlexDirection.Row\n  priv", "e = this.value + 'Text'\n          try {\n ", "lex({ direction: FlexDirection.Row, align", "   console.info(\"Flex page state change c", " = eventData.data.text\n      }\n    }\n  }\n", "onent\nstruct ColumnExample {\n  @State ali", " justifyContent: FlexAlign.SpaceAround })", "Text'\n  private myText: string = 'Text fo", "ight: string = \"200px\";\n\n  onPageShow() {"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "style.js", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MouseEvent", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35614, "since": 7, "api_used": "\u662f", "lines": ["hos.emitter';\n\n@Entry\n@Component\nstruct E", "F)\n      }\n      .key(\"alignItemsColumn\")", "e is ${JSON.stringify(oldValue)} newvalue", "`${this.height}`).key('ellipse')\n    }.wi", "ohos.emitter'\n\n@Entry\n@Component\nstruct E", "ed:\" + JSON.stringify(eventData));\n      ", "Align.Center, justifyContent: FlexAlign.C", "d: 58,\n      priority: events_emitter.Eve", "size = JSON.stringify(newValue)\n         ", "d: 92,\n      priority: events_emitter.Eve", "te')\n  },\n  onDestroy() {\n    console.inf", "d: 93,\n      priority: events_emitter.Eve", "alled);\n          try {\n            var b", "e is ${JSON.stringify(newValue)}`)\n      ", "\n        Text(this.myText)\n          .onA", "eAppear)\n        .key('appear')\n        .", "Application onDestroy')\n  },\n}", "             priority: events_emitter.Eve", "r: \" + JSON.stringify(err.message))\n     ", "emitter.EventPriority.LOW\n            }\n ", "s.value)\n        .key('text1')\n        .b", " 'Text'\n          try {\n            var b", "hos.emitter';\n\n@Entry\n@Component\nstruct C", ": 192,\n      priority: events_emitter.Eve", "de Text'\n  private myText: string = 'Text", "ystem.prompt'\n\n@Entry\n@Preview\n@Component", "port prompt from '@system.prompt'\n\n@Entry", "hos.emitter';\n\n@Entry\n@Component\nstruct A", "emitter.EventPriority.LOW\n    }\n    event", "00 })\n            try {\n              var", "emitter.EventPriority.LOW\n              }", "is.size)\n        .key('text2')\n        .m", ": 907,\n      priority: events_emitter.Eve", ": 908,\n      priority: events_emitter.Eve"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "PieceCode.ets", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "video.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchObject", "api_method_all": "declare interface TouchObject {\n  \n  type: TouchType;\n\n  \n  id: number;\n\n  \n  screenX: number;\n\n  \n  screenY: number;\n\n  \n  x: number;\n\n  \n  y: number;\n}", "api_method_name": "TouchObject", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": [");\n      let point: TouchObject = {\n        id: 1,\n", "}\n      let point2: TouchObject = {\n        id: 2, ", ");\n      let point: TouchObject = {\n        id: 11,", "     var movePoint: TouchObject = {\n        id: 1,\n", " }\n    var upPoint: TouchObject = {\n      id: 1,\n  ", "\n    var downPonit: TouchObject = {\n      id: 1,\n  ", ");\n      let point: TouchObject = {\n        id: 1, "], "files": ["PriorityGestureJsunit.test.ets", "Utils.ets", "PanGestureJsunit.test.ets", "TapGesture.test.ets", "ResponseRegionJsunit.test.ets", "ParallelGestureJsunit.test.ets", "SourceTypeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchObject", "api_method_name": "type", "api_method_all": "type: TouchType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5337, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"type\": \"PanelType.Miniba", "er0100] expect(obj.$type) is: \" + (obj.$type", "is: \" + (obj.$attrs.type));\n      done();\n  ", "log0100] obj.$attrs.type is: \" + (obj.$attrs", ";\n      expect(obj.$type).assertEqual('Stepp", "    y: downY,\n      type: TouchType.Down,\n  ", "og0100] expect(obj.$type) is: \" + (obj.$type", "eck\n\nconst TYPE = '$type'\nconst ID = '$ID'\nc", "pe = eventData.data.type;\n      }\n    }\n  }\n", "        expect(obj.$type).assertEqual('Flex'", "      y: upY,\n      type: TouchType.Up,\n    ", ";\n      expect(obj.$type).assertEqual('TextA", "bj.$attrs.transform.type)\n        .assertEqu", ";\n      expect(obj.$type).assertEqual('GridC", "  expect(obj.$attrs.type).assertEqual(\"Panel", ";\n      expect(obj.$type).assertEqual('Swipe", "      .decoration({ type: this.decoration, c", "ean = true\n  @State type: PanelType = PanelT", " if (eventData.data.type != null) {\n        ", "type) is: \" + (obj.$type));\n      console.in", "pe = eventData.data.type;\n      }\n      if (", "extInput')\n        .type(this.inputType)\n   ", "          if (event.type === TouchType.Down)", ";\n      expect(obj.$type).assertEqual('Image", "          if (event.type === TouchType.Move)", ";\n      expect(obj.$type).assertEqual('Flex'", "  if(eventData.data.type != null) {\n        ", "eTest_0200 obj.obj.$type is: \" + obj.$type);", ".$type is: \" + obj.$type);\n      var res = o", "ata: {\n            \"type\": 'InputType.Email'", ";\n      expect(obj.$type).assertEqual('Gauge", "ull) {\n        this.type = eventData.data.ty", "          if (event.type === TouchType.Up) {", ";\n      expect(obj.$type).assertEqual('Text'", "   }\n      }\n      .type(this.type).mode(thi", " }\n      .type(this.type).mode(this.mode)\n  ", ";\n      expect(obj.$type).assertEqual('Row')", "yStep * i),\n        type: TouchType.Move\n   "], "files": ["pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Panel.ets", "sourceType.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "transition.ets", "textInput.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "toggle.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "span.ets", "NavigatorCode.ets", "buttonProps.test.js", "animateProps.test.js", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "Constants.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "panelProps.test.js", "sharedTransition.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchObject", "api_method_name": "id", "api_method_all": "id: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8283, "since": 7, "api_used": "\u662f", "lines": ["emsColumn\")\n      .width('90%')\n      .bor", "eAppear: string = 'Hide Text'\n  private my", "nSelf,height:100').width('34%').height(100", "        this.strokeWidthValue = eventData.", "Basis\")\n          .width('60%')\n          ", "ole.log(\"imageData_width=\" + imageData.wid", "')\n      .border({ width: 1 })\n      .alig", "key('flex')\n      .width('90%')\n      .hei", "entData.data.strokeWidthValue != null) {\n ", ".context)\n        .width('100%').height('4", "hrink\")\n          .width('50%')\n          ", "/bg.jpg\");\n    let width = img.width;\n    ", "{\n        Column().width('50%').height(30)", "idth(`${this.strokeWidthValue}`)\n        .", "gn.Center)\n      }.width('90%').height(120", ".alignItems)\n    }.width('100%').padding({", "gnSelf,height:80').width('33%').height(80)", "50;\n  @State strokeWidthValue: string = 20", "   let width = img.width;\n    let height =", "ontColor(0xCCCCCC).width('90%')\n      Flex", "if (eventData.data.width != null) {\n      ", "hrink')\n          .width('40%')\n          ", "}`)\n        .strokeWidth(`${this.strokeWid", "\n    }.padding(30).width('100%')\n  }\n}", "ontColor(0xCCCCCC).width('90%')\n      Colu", "gebitmap_width=\" + width);\n    console.log", "entData.data.strokeWidthValue;\n      }\n   ", "rink(2)\n          .width('40%')\n          ", "se().width(`${this.width}`).height(`${this", ";\n        })\n    }.width('100%').height('1", " {\n      Ellipse().width(`${this.width}`).", "tretch)\n          .width('33%')\n          ", "sage: 'The text is hidden', duration: 2000", ": 30 })\n    }\n    .width('100%').height('1", ")\n        Column().width('50%').height(30)", "nabled)\n    }\n    .width('100%')\n    .padd", "or(0xAFEEEE)\n    }.width('100%').margin({ ", "is.changeAppear = 'Hide Text'\n            ", "hValue}`)\n        .width(200)\n        .hei", "h = eventData.data.width;\n      }\n      if", "y('ellipse')\n    }.width('100%').height('1", ".height(200)\n    }.width('100%').margin({ ", "e.log(\"imagebitmap_width=\" + width);\n    c", "Example {\n  @State width: string = \"200px\"", "ll) {\n        this.width = eventData.data."], "files": ["pageTransition2.ets", "ohosPrompt.ets", "listItemGroupProps.test.js", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "tabContentProps.test.js", "textProps.test.js", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "placement.ets", "playMode.ets", "toolbarProps.test.js", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "column.ets", "Panel.ets", "Progress.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "toolbarItemProps.test.js", "TapGesture.test.ets", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "DividerJsunit.test.ets", "ScrollCodeJsunit.test.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "badgeProps.test.js", "scrollBar.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "formProps.test.js", "focus.ets", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "stackProps.test.js", "Text.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "GridJsunit.test.ets", "refreshProps.test.js", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "PanGesture.ets", "richtextProps.test.js", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "imageAnimatorProps.test.js", "enumsImage.ets", "enable.ets", "PieceCode.ets", "tabsProps.test.js", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "popupProps.test.js", "SubscribaleAbstractJsunit.test.ets", "ohosRouterB.ets", "ColumnSplit.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "BackgroundJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "animateTransformProps.test.js", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pieceProps.test.js", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "animateMotionProps.test.js", "selectProps.test.js", "grid.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "gridColProps.test.js", "textareaProps.test.js", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animateProps.test.js", "animate.ets", "buttonProps.test.js", "List.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "BorderJsunit.test.ets", "direction2.ets", "mouseEvent.ets", "RowSplit.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "switchProps.test.js", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "enumsFlexAlign.ets", "Path.ets", "commonComponentJsApi.test.js", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "chartProps.test.js", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "TabsJsunit.test.ets", "swiperProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "timeStamp.ets", "Toggle.ets", "slider.ets", "NavigationJsunit.test.ets", "listProps.test.js", "aboutToDisappear.ets", "progressProps.test.js", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchObject", "api_method_name": "screenX", "api_method_all": "screenX: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["  screenX:' + event.screenX + '\\n  screenY:' + ", "screenXY=(' + event.screenX + ',' + event.scree", " event.y + ')' + '\\nscreenXY=(' + event.screenX", "       expect(event.screenX).assertEqual(135)\n ", "lick Point:' + '\\n  screenX:' + event.screenX +"], "files": ["mouseEvent.ets", "button.ets", "ButtonJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchObject", "api_method_name": "screenY", "api_method_all": "screenY: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["  screenY:' + event.screenY\n          + '\\n  x ", "vent.screenX + '\\n  screenY:' + event.screenY\n ", "reenX + ',' + event.screenY + ')')\n          co", "reenX + ',' + event.screenY + ')')\n          st", "       expect(event.screenY).assertEqual(368.80"], "files": ["mouseEvent.ets", "button.ets", "ButtonJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchObject", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20226, "since": 7, "api_used": "\u662f", "lines": ["", "= eventData.data.flexBasis;\n      }\n     ", "3).backgroundColor(0x2788D9)\n      if (th", "mponent\nstruct AreaExample {\n  @State val", "\n        })\n      Text('new area is: \\n' ", "f (eventData.data.text != null) {\n       ", "\n  build() {\n    Flex({ direction: FlexDi", "      Button(this.text)\n        .key('ena", "isShow) {\n        Text(this.myText)\n     ", " value: string = 'Text';\n  @State size: s", "ue)\n        .key('text1')\n        .backgr", "nent\nstruct EllipseExample {\n  @State wid", "t({ message: 'The text is shown', duratio", "nent\nstruct EnabledExample {\n  @State ena", "\n  build() {\n    Flex({ justifyContent: F", " Column() {\n      Text(this.value)\n      ", "State direction: FlexDirection = FlexDire", "Component\nstruct FlexExample {\n  @State d", " (eventData.data.flexBasis != null) {\n   ", "      Text(this.myText)\n          .onAppe", "t({ message: 'The text is hidden', durati", "ze)\n        .key('text2')\n        .margin", "ngeAppear = 'Hide Text'\n            conso", "idth: string = \"200px\";\n  @State height: ", "mponent\nstruct FlexExample {\n  @State dir", "myText: string = 'Text for onAppear'\n\n  o", "0).backgroundColor(0x00FFFF)\n      }\n    ", " justifyContent: FlexAlign.Center }) {\n  ", "ngeAppear = 'Show Text'\n            conso", "tSize(9).fontColor(0xCCCCCC).width('90%')", " Column() {\n      Text('alignItems').font", "l) {\n        this.text = eventData.data.t", "onent\nstruct AppearExample {\n  @State isS", "  .backgroundColor(0x317aff)\n        .ena", " = true;\n  @State text: string = \"enable\"", " (eventData.data.flexGrow != null) {\n    ", ") {\n        this.flexBasis = eventData.da", ") {\n        this.flexGrow = eventData.dat", "r: string = 'Hide Text'\n  private myText:", "0).backgroundColor(0xAFEEEE)\n        Colu", "  .backgroundColor(0x317aff)\n        .opa", " FlexDirection = FlexDirection.Row\n  priv", "e = this.value + 'Text'\n          try {\n ", "lex({ direction: FlexDirection.Row, align", "   console.info(\"Flex page state change c", " = eventData.data.text\n      }\n    }\n  }\n", "onent\nstruct ColumnExample {\n  @State ali", " justifyContent: FlexAlign.SpaceAround })", "Text'\n  private myText: string = 'Text fo", "ight: string = \"200px\";\n\n  onPageShow() {"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "style.js", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchObject", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35614, "since": 7, "api_used": "\u662f", "lines": ["hos.emitter';\n\n@Entry\n@Component\nstruct E", "F)\n      }\n      .key(\"alignItemsColumn\")", "e is ${JSON.stringify(oldValue)} newvalue", "`${this.height}`).key('ellipse')\n    }.wi", "ohos.emitter'\n\n@Entry\n@Component\nstruct E", "ed:\" + JSON.stringify(eventData));\n      ", "Align.Center, justifyContent: FlexAlign.C", "d: 58,\n      priority: events_emitter.Eve", "size = JSON.stringify(newValue)\n         ", "d: 92,\n      priority: events_emitter.Eve", "te')\n  },\n  onDestroy() {\n    console.inf", "d: 93,\n      priority: events_emitter.Eve", "alled);\n          try {\n            var b", "e is ${JSON.stringify(newValue)}`)\n      ", "\n        Text(this.myText)\n          .onA", "eAppear)\n        .key('appear')\n        .", "Application onDestroy')\n  },\n}", "             priority: events_emitter.Eve", "r: \" + JSON.stringify(err.message))\n     ", "emitter.EventPriority.LOW\n            }\n ", "s.value)\n        .key('text1')\n        .b", " 'Text'\n          try {\n            var b", "hos.emitter';\n\n@Entry\n@Component\nstruct C", ": 192,\n      priority: events_emitter.Eve", "de Text'\n  private myText: string = 'Text", "ystem.prompt'\n\n@Entry\n@Preview\n@Component", "port prompt from '@system.prompt'\n\n@Entry", "hos.emitter';\n\n@Entry\n@Component\nstruct A", "emitter.EventPriority.LOW\n    }\n    event", "00 })\n            try {\n              var", "emitter.EventPriority.LOW\n              }", "is.size)\n        .key('text2')\n        .m", ": 907,\n      priority: events_emitter.Eve", ": 908,\n      priority: events_emitter.Eve"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageEffectsJsunit.test.ets", "ColumnSplitJsunit.test.ets", "Navigation.ets", "imageFit.ets", "ZIndexJsunit.test.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "TapGesture.test.ets", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "border.ets", "ResponseRegion.ets", "FillModeJsunit.test.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "LongPressGesture.test.ets", "path.ets", "polyline.ets", "VideoJsunit.test.ets", "touch.ets", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "sideBar.ets", "Prop.ets", "customDialogController.ets", "EnmusImageJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "VisibilityJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "flexDirection.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ListJsunit.test.ets", "gridContainerProps.test.js", "Select.ets", "flex.ets", "MotionPathJsunit.test.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "tabsProps.test.js", "lineProps.test.js", "AlphabetIndexer.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "videoProps.test.js", "enumsItemAlign.ets", "DatePickerJsunit.test.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "StackJsunit.test.ets", "circle.ets", "animateMotionProps.test.js", "textareaProps.test.js", "span.ets", "NavigatorCode.ets", "patternLock.ets", "global.ets", "AnimationStatusJsunit.test.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "divider.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "ellipseProps.test.js", "FormComponentPage.ets", "chartProps.test.js", "sliderProps.test.js", "polygonProps.test.js", "inputProps.test.js", "SwiperJsunit.test.ets", "GridItem.ets", "imageProps.test.js", "select.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "gestureMode.ets", "refresh.ets", "ScrollBar.ets", "overlay.ets", "pathProps.test.js", "configuration.ets", "tabContentProps.test.js", "longPressGesture.ets", "Qrcode.ets", "Row.ets", "PathJsunit.test.ets", "Progress.ets", "column.ets", "Panel.ets", "CustomDialog.ets", "OhosRouterJsnuit.test.ets", "TextClockJsunit.test.ets", "enumsLineCapStyle.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "ScrollCodeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textInput.ets", "TouchJsunit.test.ets", "transForm.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "SelectJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "index.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "richtextProps.test.js", "PanGesture.ets", "shape.ets", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "imageAnimatorProps.test.js", "PieceCode.ets", "qrcodeProps.test.js", "GlobalJsunit.test.ets", "SystemRouterJsunit.test.ets", "stepperItemProps.test.js", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "GridContainer.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "grid.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "bindPopup.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "List.test.js", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "RowSplit.ets", "pickerViewProps.test.js", "TextInput.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "curves.ets", "priorityGesture.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "tabBarProps.test.js", "ColumnJsunit.test.ets", "parallelGesture.ets", "slider.ets", "panelProps.test.js", "motionPath.ets", "Badge.ets", "ColumnSplit.ets", "search.ets", "rectProps.test.js", "blank.ets", "pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "video.ets", "textProps.test.js", "DragEventJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "TextPickerJsunit.test.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "AppearJsunit.test.ets", "CommonJsunit.test.ets", "marquee.ets", "PieceJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "LinkJsunit.test.ets", "CurvesJsunit.test.ets", "DirectionJsunit.test.ets", "RadioJsunit.test.ets", "Stack.ets", "bindMenu.ets", "Sidebar.ets", "text.ets", "tapGesture.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "stepper.ets", "svgProps.test.js", "image.ets", "textPathProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "textPickerDialog.ets", "badge.ets", "imageEffects.ets", "popupProps.test.js", "tabs.ets", "dragEvent2.ets", "app.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "Video.ets", "listItem.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "panDirection.ets", "ContentStorage.test.ets", "direction2.ets", "BadgeJsunit.test.ets", "CircleJsunit.test.ets", "Rect.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "Constants.ets", "line.ets", "Grid.ets", "GestureModeJsunit.test.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "index.js", "tspanProps.test.js", "timeStamp.ets", "Toggle.ets", "Direction2Jsunit.test.ets", "panel.ets", "colorGradient.ets", "systemRouterA.ets", "CounterJsunit.test.ets", "dividerProps.test.js", "ListItemJsunit.test.ets", "Navigator.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "polylineProps.test.js", "richText.ets", "PositionSettingJsunit.test.ets", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "textTimer.ets", "Rating.ets", "Swiper.ets", "LineJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "formProps.test.js", "focus.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "stackProps.test.js", "Text.ets", "EdgeEffectJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "SystemAppJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Blank.ets", "ScrollerBarJsunit.test.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "PropJsunit.test.ets", "GridItem.test.ets", "labelProps.test.js", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "sharedTransition2.ets", "gridContainer.ets", "Tab.ets", "Stepper.ets", "ShapeJsunit.test.ets", "enumsImage.ets", "polygon.ets", "textStyle.ets", "SubscribaleAbstractJsunit.test.ets", "app.js", "listItemProps.test.js", "gridRowProps.test.js", "list.ets", "AppStorage.ets", "QrCode.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "fontWeight.ets", "imageAnimator.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "switchProps.test.js", "radio.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "Path.ets", "fillMode.ets", "TransFormJsunit.test.ets", "DataPanel.ets", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "swiperProps.test.js", "TabsJsunit.test.ets", "LoadingProgressJsunit.test.ets", "GridSettingsJsunit.test.ets", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "progressProps.test.js", "Calendar.ets", "sharedTransition.ets", "enumsHorizontalAlign.ets", "BindPopupJsunit.test.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchEvent", "api_method_all": "declare interface TouchEvent extends BaseEvent {\n  \n  type: TouchType;\n\n  \n  touches: TouchObject[];\n\n  \n  changedTouches: TouchObject[];\n\n  \n  stopPropagation?: () => void;\n}", "api_method_name": "TouchEvent", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 42, "since": 7, "api_used": "\u662f", "lines": ["dTouchEvent ' + sendTouchEvent(point));\n      awai", "Prompt_001] testSendTouchEvent END');\n      done()", "atrix4_005] testSendTouchEvent END');\n      done()", "estureTest_0100 sendTouchEvent one:' + sendTouchEv", "chEvent one:' + sendTouchEvent(point));\n      awai", "downPonit))\n    sendTouchEvent(downPonit);\n    con", "   .onTouch((event: TouchEvent) => {\n          if ", "chEvent one:' + sendTouchEvent(point));\n      cons", "stButton12] testSendTouchEvent END');\n      done()", "rClick_003] testSendTouchEvent END');\n      done()", "estTapGesture01 sendTouchEvent two:' + sendTouchEv", "y(upPoint))\n    sendTouchEvent(upPoint)\n    await ", "   .onTouch((event: TouchEvent) => {\n      this.is", "peTest_0100 testSendTouchEvent END');\n      done()", "reTest_0100 testSendTouchEvent END');\n      done()", "t))\n      ret = sendTouchEvent(movePoint)\n      if", "   .onTouch((event: TouchEvent) => {\n        conso", "ceTypeTest_0100 sendTouchEvent :' + sendTouchEvent", "chEvent two:' + sendTouchEvent(point2));\n      awa", "seRegion02] testSendTouchEvent ' + sendTouchEvent(", "TouchEvent :' + sendTouchEvent(point));\n      awai", "estTapGesture01 sendTouchEvent one:' + sendTouchEv", "ckEvent001] testSendTouchEvent END');\n      done()", "llCode_006] testSendTouchEvent END');\n      done()", "estureTest_0100 sendTouchEvent result:' + sendTouc", "vent result:' + sendTouchEvent(point));\n      awai", "nGesture02] testSendTouchEvent ' + sendTouchEvent("], "files": ["ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "Utils.ets", "PanGesture.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TapGesture.test.ets", "SourceTypeJsunit.test.ets", "CustomDialogControllerJsunit.test.ets", "ResponseRegionJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "OhosPromptJsunit.test.ets", "ParallelGestureJsunit.test.ets", "sourceType.ets", "NavigatorCodeJsunit.test.ets", "ScrollCodeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchEvent", "api_method_name": "stopPropagation", "api_method_all": "stopPropagation?: () => void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["        }\n          stopPropagation: () => {\n          ", "      console.info('stopPropagation')\n          }\n     ", "nY + ')')\n          stopPropagation: () => {\n          "], "files": ["touch.ets", "mouseEvent.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchEvent", "api_method_name": "type", "api_method_all": "type: TouchType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5337, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"type\": \"PanelType.Miniba", "er0100] expect(obj.$type) is: \" + (obj.$type", "is: \" + (obj.$attrs.type));\n      done();\n  ", "log0100] obj.$attrs.type is: \" + (obj.$attrs", ";\n      expect(obj.$type).assertEqual('Stepp", "    y: downY,\n      type: TouchType.Down,\n  ", "og0100] expect(obj.$type) is: \" + (obj.$type", "eck\n\nconst TYPE = '$type'\nconst ID = '$ID'\nc", "pe = eventData.data.type;\n      }\n    }\n  }\n", "        expect(obj.$type).assertEqual('Flex'", "      y: upY,\n      type: TouchType.Up,\n    ", ";\n      expect(obj.$type).assertEqual('TextA", "bj.$attrs.transform.type)\n        .assertEqu", ";\n      expect(obj.$type).assertEqual('GridC", "  expect(obj.$attrs.type).assertEqual(\"Panel", ";\n      expect(obj.$type).assertEqual('Swipe", "      .decoration({ type: this.decoration, c", "ean = true\n  @State type: PanelType = PanelT", " if (eventData.data.type != null) {\n        ", "type) is: \" + (obj.$type));\n      console.in", "pe = eventData.data.type;\n      }\n      if (", "extInput')\n        .type(this.inputType)\n   ", "          if (event.type === TouchType.Down)", ";\n      expect(obj.$type).assertEqual('Image", "          if (event.type === TouchType.Move)", ";\n      expect(obj.$type).assertEqual('Flex'", "  if(eventData.data.type != null) {\n        ", "eTest_0200 obj.obj.$type is: \" + obj.$type);", ".$type is: \" + obj.$type);\n      var res = o", "ata: {\n            \"type\": 'InputType.Email'", ";\n      expect(obj.$type).assertEqual('Gauge", "ull) {\n        this.type = eventData.data.ty", "          if (event.type === TouchType.Up) {", ";\n      expect(obj.$type).assertEqual('Text'", "   }\n      }\n      .type(this.type).mode(thi", " }\n      .type(this.type).mode(this.mode)\n  ", ";\n      expect(obj.$type).assertEqual('Row')", "yStep * i),\n        type: TouchType.Move\n   "], "files": ["pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Panel.ets", "sourceType.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "transition.ets", "textInput.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "toggle.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "span.ets", "NavigatorCode.ets", "buttonProps.test.js", "animateProps.test.js", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "Constants.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "panelProps.test.js", "sharedTransition.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchEvent", "api_method_name": "touches", "api_method_all": "touches: TouchObject[]", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1058, "since": 7, "api_used": "\u662f", "lines": ["var globalY = event.touches[0].globalY\n        ", " var localX = event.touches[0].localX\n        v", "'\n          + event.touches[0].x + '\\n' + 'y: '", "  var force = event.touches[0].force\n        va", "var globalX = event.touches[0].globalX\n        ", "\\n' + 'y: ' + event.touches[0].y + '\\ncomponent", " var localY = event.touches[0].localY\n        v", "   var size = event.touches[0].size\n        var"], "files": ["touch.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TouchEvent", "api_method_name": "changedTouches", "api_method_all": "changedTouches: TouchObject[]", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1058, "since": 7, "api_used": "\u662f", "lines": ["\\n' + 'y: ' + event.changedTouches[0].y + '\\ncomponent", "angeGlobalY = event.changedTouches[0].globalY\n        ", "changeForce = event.changedTouches[0].force\n        va", "angeGlobalX = event.changedTouches[0].globalX\n        ", " changeSize = event.changedTouches[0].size\n        var", "'\n          + event.changedTouches[0].x + '\\n' + 'y: '", "hangeLocalY = event.changedTouches[0].localY\n        v", "hangeLocalX = event.changedTouches[0].localX\n        v"], "files": ["touch.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMapMock", "api_method_all": "declare interface PixelMapMock {\n  \n  release(): void;\n}", "api_method_name": "PixelMapMock", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["        \"pixelMap\" :PixelMapMock.release()\n         "], "files": ["dragEvent2.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PixelMapMock", "api_method_name": "release", "api_method_all": "release(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["lMap\" :PixelMapMock.release()\n            }\n   "], "files": ["dragEvent2.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DragEvent", "api_method_all": "declare interface DragEvent {\n  \n  getX(): number;\n\n  \n  getY(): number;\n}", "api_method_name": "DragEvent", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["onDragLeave((event: DragEvent, extraParams: strin", "onDragStart((event: DragEvent, extraParams: strin", "EventJsunit from './DragEventJsunit.test.ets';\nim", "  @State dragEvent: DragEvent = ''\n  @State id: n", "onDragEnter((event: DragEvent, extraParams: strin", "    .onDrop((event: DragEvent, extraParams: strin", ".onDragMove((event: DragEvent, extraParams: strin"], "files": ["List.test.ets", "dragEvent.ets", "dragEvent2.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DragEvent", "api_method_name": "getX", "api_method_all": "getX(): number;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["() {\n\n      Button('getXComponentSurfaceId')", "arams + ',' + event.getX() + ',' + event.get", "       console.log('getXComponentSurfaceId  ", "    \"pointX\": event.getX(),\n              \"p", "ComponentController.getXComponentSurfaceId()"], "files": ["XComponentPage.ets", "dragEvent.ets", "dragEvent2.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DragEvent", "api_method_name": "getY", "api_method_all": "getY(): number;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["    \"pointY\": event.getY()\n            }\n   ", "etX() + ',' + event.getY())\n      })\n      .", "etX() + ',' + event.getY())\n        try {\n  "], "files": ["dragEvent.ets", "dragEvent2.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_all": "declare interface KeyEvent {\n  \n  type: KeyType;\n\n  \n  keyCode: number;\n\n  \n  keyText: string;\n\n  \n  keySource: KeySource;\n\n  \n  deviceId: number;\n\n  \n  metaKey: number;\n\n  \n  timestamp: number;\n\n  \n  stopPropagation?: () => void;\n}", "api_method_name": "KeyEvent", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_name": "stopPropagation", "api_method_all": "stopPropagation?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["        }\n          stopPropagation: () => {\n          ", "      console.info('stopPropagation')\n          }\n     ", "nY + ')')\n          stopPropagation: () => {\n          "], "files": ["touch.ets", "mouseEvent.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_name": "type", "api_method_all": "type: KeyType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5337, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"type\": \"PanelType.Miniba", "er0100] expect(obj.$type) is: \" + (obj.$type", "is: \" + (obj.$attrs.type));\n      done();\n  ", "log0100] obj.$attrs.type is: \" + (obj.$attrs", ";\n      expect(obj.$type).assertEqual('Stepp", "    y: downY,\n      type: TouchType.Down,\n  ", "og0100] expect(obj.$type) is: \" + (obj.$type", "eck\n\nconst TYPE = '$type'\nconst ID = '$ID'\nc", "pe = eventData.data.type;\n      }\n    }\n  }\n", "        expect(obj.$type).assertEqual('Flex'", "      y: upY,\n      type: TouchType.Up,\n    ", ";\n      expect(obj.$type).assertEqual('TextA", "bj.$attrs.transform.type)\n        .assertEqu", ";\n      expect(obj.$type).assertEqual('GridC", "  expect(obj.$attrs.type).assertEqual(\"Panel", ";\n      expect(obj.$type).assertEqual('Swipe", "      .decoration({ type: this.decoration, c", "ean = true\n  @State type: PanelType = PanelT", " if (eventData.data.type != null) {\n        ", "type) is: \" + (obj.$type));\n      console.in", "pe = eventData.data.type;\n      }\n      if (", "extInput')\n        .type(this.inputType)\n   ", "          if (event.type === TouchType.Down)", ";\n      expect(obj.$type).assertEqual('Image", "          if (event.type === TouchType.Move)", ";\n      expect(obj.$type).assertEqual('Flex'", "  if(eventData.data.type != null) {\n        ", "eTest_0200 obj.obj.$type is: \" + obj.$type);", ".$type is: \" + obj.$type);\n      var res = o", "ata: {\n            \"type\": 'InputType.Email'", ";\n      expect(obj.$type).assertEqual('Gauge", "ull) {\n        this.type = eventData.data.ty", "          if (event.type === TouchType.Up) {", ";\n      expect(obj.$type).assertEqual('Text'", "   }\n      }\n      .type(this.type).mode(thi", " }\n      .type(this.type).mode(this.mode)\n  ", ";\n      expect(obj.$type).assertEqual('Row')", "yStep * i),\n        type: TouchType.Move\n   "], "files": ["pageTransition2.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Panel.ets", "sourceType.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "transition.ets", "textInput.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "PanGestureJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "toggle.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "PanGesture.ets", "svgProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "MotionPathJsunit.test.ets", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "span.ets", "NavigatorCode.ets", "buttonProps.test.js", "animateProps.test.js", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "Constants.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "DataPanel.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "Toggle.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "panelProps.test.js", "sharedTransition.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_name": "keyCode", "api_method_all": "keyCode: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_name": "keyText", "api_method_all": "keyText: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_name": "keySource", "api_method_all": "keySource: KeySource", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_name": "deviceId", "api_method_all": "deviceId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_name": "metaKey", "api_method_all": "metaKey: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_name": "timestamp", "api_method_all": "timestamp: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1409, "since": 8, "api_used": "\u662f", "lines": ["globalY\n        var timestamp = event.timestamp\n ", "tCount;\n        var timestampStart = event.timest", "r timestamp = event.timestamp\n        var message", "  this.text = event.timestamp\n          console.i", " + ',timestamp--' + timestamp;\n        prompt.sho", "' + repeatCount + ',timestampStart--' + timestamp", "lY--' + globalY + ',timestamp--' + timestamp;\n   ", "timestampStart--' + timestampStart;\n        promp", "estampStart = event.timestampStart;\n        var m"], "files": ["timeStamp.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StateStyles", "api_method_all": "declare interface StateStyles {\n  \n  normal?: any;\n\n  \n  pressed?: any;\n\n  \n  disabled?: any;\n\n  \n  focused?: any;\n\n  \n  clicked?: any;\n}", "api_method_name": "StateStyles", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "StateStyles", "api_method_name": "normal", "api_method_all": "normal?: any", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 54, "since": 8, "api_used": "\u662f", "lines": ["s: 2,\n  direction: 'normal',\n};\nvar frames = [", "           status: 'normal'\n        },\n       ", " SideBarExample {\n  normalIcon : Resource = ($", "s',\n    direction: \"normal\",\n    begin: 200,\n ", "ymode).assertEqual('normal')\n      }\n      try", " 2,\n    direction: 'normal',\n};\nvar frames = [", "ntString: string = 'normal';\n\n  build() {\n    ", " 5 }) {\n      Text('normal').fontSize(9).fontC", "selectedIcon : this.normalIcon).width(64).heig", "           status: 'normal'\n        },\n    },\n"], "files": ["AnimateJsunit.test.ets", "longPressGesture.ets", "sideBar.ets", "animatorOption.ets", "index.js", "listItemProps.test.js", "Rect.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "StateStyles", "api_method_name": "pressed", "api_method_all": "pressed?: any", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "StateStyles", "api_method_name": "disabled", "api_method_all": "disabled?: any", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1072, "since": 8, "api_used": "\u662f", "lines": ["tor()\n         this.disabledPropNone = this.$ele", "ne : null,\n         disabledPropTrue : null,\n   ", "pNone,\n             disabledPropTrue : this.disa", "False,\n             disabledPropNone : this.disa", "se = this.$element(\"disabledPropFalse\").getInspe", "bledPropNone : this.disabledPropNone, focusableP", "bledPropTrue : this.disabledPropTrue, disabledPr", "opTrue,\n            disabledPropFalse : this.dis", "ledPropFalse : this.disabledPropFalse,\n         ", " if (eventData.data.disabled != null) {\n        ", "ue = this.$element(\"disabledPropTrue\").getInspec", "lse : null,\n        disabledPropNone : null,\n   ", "bledPropTrue : this.disabledPropTrue,\n          ", "ed = eventData.data.disabled;\n      }\n    }\n  }\n", "pTrue,\n             disabledPropFalse : this.dis", "ue : null,\n         disabledPropFalse : null,\n  ", "bledPropNone : this.disabledPropNone,\n          ", "one : null,\n        disabledPropTrue : null,\n   ", "ctor()\n        this.disabledPropFalse = this.$el", "ate.Normal\n  @State disabled: ItemState = ItemSt", "opNone,\n            disabledPropTrue : this.disa", "s.disabledPropTrue, disabledPropFalse : this.dis", "se : null,\n         disabledPropNone : null,\n   ", "ctor()\n        this.disabledPropNone = this.$ele", "pFalse,\n            disabledPropNone : this.disa", "tor()\n         this.disabledPropTrue = this.$ele", "ctor()\n        this.disabledPropTrue = this.$ele", "tor()\n         this.disabledPropFalse = this.$el", "ull) {\n        this.disabled = eventData.data.di", "rue : null,\n        disabledPropFalse : null,\n  ", "ne = this.$element(\"disabledPropNone\").getInspec"], "files": ["ratingProps.test.js", "listItemGroupProps.test.js", "formProps.test.js", "tabContentProps.test.js", "marqueeProps.test.js", "textProps.test.js", "imageAnimatorProps.test.js", "buttonProps.test.js", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "stackProps.test.js", "divProps.test.js", "switchProps.test.js", "popupProps.test.js", "refreshProps.test.js", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "toolbarItemProps.test.js", "videoProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "optionProps.test.js", "badgeProps.test.js", "pieceProps.test.js", "stepper.ets", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "gridColProps.test.js", "gridContainerProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StateStyles", "api_method_name": "focused", "api_method_all": "focused?: any", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["r.Orange,\n          focusedAreaBackgroundColor:", "olor.Red,\n          focusedLunarColor: Color.Or", "rd button cannot be focused'\n  @State oneButton", "lor.Blue,\n          focusedAreaRadius: 20\n     ", "st ATTRS_FOCUSED = 'focused'\nconst ATTRS_SCROLL", "ayStyle({\n          focusedDayColor: Color.Red,"], "files": ["Calendar.ets", "focus.ets", "Constants.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "StateStyles", "api_method_name": "clicked", "api_method_all": "clicked?: any", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["he second button is clicked')\n  }\n  existApp() ", "the first button is clicked')\n  }\n  onAccept() ", "the first button is clicked')\n                 ", "he second button is clicked')\n                 ", "the first button is clicked')\n  }\n\n  onAccept()", "he second button is clicked')\n  }\n\n  existApp()"], "files": ["WebPage.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PopupOptions", "api_method_all": "declare interface PopupOptions {\n  \n  message: string;\n\n  \n  placementOnTop?: boolean;\n\n  \n  primaryButton?: {\n    \n    value: string;\n\n    \n    action: () => void;\n  };\n\n  \n  secondaryButton?: {\n    \n    value: string;\n\n    \n    action: () => void;\n  };\n\n  \n  onStateChange?: (event: { isVisible: boolean }) => void;\n}", "api_method_name": "PopupOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PopupOptions", "api_method_name": "action", "api_method_all": "action: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 398, "since": 8, "api_used": "\u662f", "lines": ["info(\"click to emit action state\")\n           ", "start start to emit action state\")\n           ", "le.info(\"apple emit action state err: \" + JSON", "info(\"onChange emit action state err: \" + JSON", "info(\"Onfinish emit action state err: \" + JSON", ".info(\"Onstart emit action state err: \" + JSON", "nfo(\"touchFlag emit action state err: \" + JSON", "fo('button1 current action state is: ' + this.", "\"disAppearFlag emit action state err: \" + JSON", "hange start to emit action state\")\n          e", " console.info(\"emit action state err: \" + JSON", "inish start to emit action state\")\n           ", "fo(\"appearFlag emit action state err: \" + JSON", "utton start to emit action state\")\n           ", "fo('Onstart current action state is: ' + this.", ".info(\"button2 emit action state err: \" + JSON", ".info(\"button1 emit action state err: \" + JSON", "o('Onbounce current action state is: ' + this.", "hange start to emit action state\")\n           ", "'appearFlag current action state is: ' + this.", "o(\"onDragEnter emit action state err: \" + JSON", "info(\"start to emit action state\")\n           ", "Able] start to emit action state\")\n           ", "o('onChange current action state is: ' + this.", "console.info(\"click action state err: \" + JSON", "nAreaChange current action state is: ' + this.", "hFlag start to emit action state\")\n           ", "apple start to emit action state\")\n           ", "fo('button2 current action state is: ' + this.", "o('Onfinish current action state is: ' + this.", "Enter start to emit action state\")\n          e", "ounce start to emit action state\")\n           ", "rFlag start to emit action state\")\n           ", "tton1 start to emit action state\")\n           ", "Click start to emit action state\")\n           ", "o(\"[TouchAble] emit action state err: \" + JSON", "(\"onAreaChange emit action state err: \" + JSON", "sAppearFlag current action state is: ' + this.", "tton2 start to emit action state\")\n           ", ".info(\"onClick emit action state err: \" + JSON", "e.info(\"button emit action state err: \" + JSON", "gMove start to emit action state\")\n          e", "info(\"Onbounce emit action state err: \" + JSON"], "files": ["animate.ets", "ohosPrompt.ets", "touch.ets", "configuration.ets", "longPressGesture.ets", "mouseEvent.ets", "placement.ets", "playMode.ets", "PieceCode.ets", "ohosMatrix4.ets", "bindMenu.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "sourceType.ets", "fillMode.ets", "navigation.ets", "customDialogController.ets", "priorityGesture.ets", "touchAble.ets", "pageTransition.ets", "textClock.ets", "geometryTransition.ets", "tabs.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "marquee.ets", "tapGesture.ets", "index.js", "areaChange.ets", "ResponseRegion.ets", "dragEvent.ets", "PanGesture.ets", "parallelGesture.ets", "timeStamp.ets", "transition.ets", "aboutToDisappear.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets", "bindPopup.ets", "scrollCode.ets", "button.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PopupOptions", "api_method_name": "action", "api_method_all": "action: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 398, "since": 8, "api_used": "\u662f", "lines": ["info(\"click to emit action state\")\n           ", "start start to emit action state\")\n           ", "le.info(\"apple emit action state err: \" + JSON", "info(\"onChange emit action state err: \" + JSON", "info(\"Onfinish emit action state err: \" + JSON", ".info(\"Onstart emit action state err: \" + JSON", "nfo(\"touchFlag emit action state err: \" + JSON", "fo('button1 current action state is: ' + this.", "\"disAppearFlag emit action state err: \" + JSON", "hange start to emit action state\")\n          e", " console.info(\"emit action state err: \" + JSON", "inish start to emit action state\")\n           ", "fo(\"appearFlag emit action state err: \" + JSON", "utton start to emit action state\")\n           ", "fo('Onstart current action state is: ' + this.", ".info(\"button2 emit action state err: \" + JSON", ".info(\"button1 emit action state err: \" + JSON", "o('Onbounce current action state is: ' + this.", "hange start to emit action state\")\n           ", "'appearFlag current action state is: ' + this.", "o(\"onDragEnter emit action state err: \" + JSON", "info(\"start to emit action state\")\n           ", "Able] start to emit action state\")\n           ", "o('onChange current action state is: ' + this.", "console.info(\"click action state err: \" + JSON", "nAreaChange current action state is: ' + this.", "hFlag start to emit action state\")\n           ", "apple start to emit action state\")\n           ", "fo('button2 current action state is: ' + this.", "o('Onfinish current action state is: ' + this.", "Enter start to emit action state\")\n          e", "ounce start to emit action state\")\n           ", "rFlag start to emit action state\")\n           ", "tton1 start to emit action state\")\n           ", "Click start to emit action state\")\n           ", "o(\"[TouchAble] emit action state err: \" + JSON", "(\"onAreaChange emit action state err: \" + JSON", "sAppearFlag current action state is: ' + this.", "tton2 start to emit action state\")\n           ", ".info(\"onClick emit action state err: \" + JSON", "e.info(\"button emit action state err: \" + JSON", "gMove start to emit action state\")\n          e", "info(\"Onbounce emit action state err: \" + JSON"], "files": ["animate.ets", "ohosPrompt.ets", "touch.ets", "configuration.ets", "longPressGesture.ets", "mouseEvent.ets", "placement.ets", "playMode.ets", "PieceCode.ets", "ohosMatrix4.ets", "bindMenu.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "sourceType.ets", "fillMode.ets", "navigation.ets", "customDialogController.ets", "priorityGesture.ets", "touchAble.ets", "pageTransition.ets", "textClock.ets", "geometryTransition.ets", "tabs.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "marquee.ets", "tapGesture.ets", "index.js", "areaChange.ets", "ResponseRegion.ets", "dragEvent.ets", "PanGesture.ets", "parallelGesture.ets", "timeStamp.ets", "transition.ets", "aboutToDisappear.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets", "bindPopup.ets", "scrollCode.ets", "button.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PopupOptions", "api_method_name": "onStateChange", "api_method_all": "onStateChange?: (event: { isVisible: boolean }) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["entOnTop,\n          onStateChange: (e) => {\n         ", "nsole.info('Refresh onStateChange state is ' + refres", "bleArrow,\n          onStateChange: (e) => {\n         ", "(10)\n      }\n      .onStateChange((refreshStatus: Ref", "ow: true,\n          onStateChange: (e) => {\n         "], "files": ["bindPopup.ets", "placement.ets", "refresh.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PopupOptions", "api_method_name": "message", "api_method_all": "message: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3690, "since": 7, "api_used": "\u662f", "lines": [" JSON.stringify(err.message))\n            }\n   ", " prompt.showToast({ message: 'The text is shown", " JSON.stringify(err.message))\n          }\n     ", "data error: \" + err.message);\n      }\n      don", "data error: \" + err.message);\n      }\n      awa", " JSON.stringify(err.message))\n        }\n      }", " prompt.showToast({ message: 'The text is hidde"], "files": ["ohosPrompt.ets", "configuration.ets", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "PathJsunit.test.ets", "ZIndexJsunit.test.ets", "sourceType.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "TextStyleJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "TextClockJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "ResponseRegion.ets", "basicabilityapi.test.js", "CalendarJsunit.test.ets", "transition.ets", "systemPrompt.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "VideoJsunit.test.ets", "touch.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "customDialogController.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "SearchJsunit.test.ets", "VisibilityJsunit.test.ets", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "QrCodeJsunit.test.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "PanGesture.ets", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "ColorGradientJsunit.test.ets", "ShapeJsunit.test.ets", "PieceCode.ets", "badge.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "textClock.ets", "tabs.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "BorderJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "ohosMatrix4.ets", "CircleJsunit.test.ets", "FocusJsunit.test.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "TransFormJsunit.test.ets", "priorityGesture.ets", "touchAble.ets", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "datePicker.ets", "pageTransition.ets", "AlertDialog.ets", "WebPage.ets", "TabsJsunit.test.ets", "ShapeClippingJsunit.test.ets", "GridSettingsJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "areaChange.ets", "parallelGesture.ets", "timeStamp.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "sharedTransition.ets", "motionPath.ets", "Badge.ets", "BindPopupJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PopupOptions", "api_method_name": "placementOnTop", "api_method_all": "placementOnTop?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["ean = true\n  @State placementOnTop: boolean = false\n\n ", "acementOnTop\": this.placementOnTop,\n              }\n  ", "lacementOnTop: this.placementOnTop,\n          onStateC", "ontent1',\n          placementOnTop: this.placementOnTo", "ect(indexEvent.data.placementOnTop).assertEqual(false)", " {\n                \"placementOnTop\": this.placementOnT"], "files": ["bindPopup.ets", "BindPopupJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PopupOptions", "api_method_name": "value", "api_method_all": "value: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PopupOptions", "api_method_name": "value", "api_method_all": "value: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomPopupOptions", "api_method_all": "declare interface CustomPopupOptions {\n  \n  builder: CustomBuilder;\n\n  \n  placement?: Placement;\n\n  \n  maskColor?: Color | string | Resource | number;\n\n  \n  popupColor?: Color | string | Resource | number;\n\n  \n  enableArrow?: boolean;\n\n  \n  autoCancel?: boolean;\n\n  \n  onStateChange?: (event: { isVisible: boolean }) => void;\n}", "api_method_name": "CustomPopupOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CustomPopupOptions", "api_method_name": "onStateChange", "api_method_all": "onStateChange?: (event: { isVisible: boolean }) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["entOnTop,\n          onStateChange: (e) => {\n         ", "nsole.info('Refresh onStateChange state is ' + refres", "bleArrow,\n          onStateChange: (e) => {\n         ", "(10)\n      }\n      .onStateChange((refreshStatus: Ref", "ow: true,\n          onStateChange: (e) => {\n         "], "files": ["bindPopup.ets", "placement.ets", "refresh.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomPopupOptions", "api_method_name": "builder", "api_method_all": "builder: CustomBuilder", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["mPopup, {\n          builder: this.popupBuilder,", " = {\n              \"builder\" : this.pixelMapBui", "logController({\n    builder: CustomDialogExampl", "pupOne, {\n          builder: this.popupBuilderO", "pThree, {\n          builder: this.popupBuilderT", "pupTwo, {\n          builder: this.popupBuilderT"], "files": ["customDialogController.ets", "placement.ets", "dragEvent2.ets", "bindPopup.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomPopupOptions", "api_method_name": "placement", "api_method_all": "placement?: Placement", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 202, "since": 7, "api_used": "\u662f", "lines": ["\n  pieceJsunit();\n  placementJsunit();\n  radioJsu", "ilderTwo,\n          placement: this.placementTwo,", ":{\n                \"placement\":this.placementOne\n", "ect(indexEvent.data.placement).assertEqual(Placem", "acementOnTop\": this.placementOnTop,\n             ", "    placement: this.placementThree,\n          mas", "s));\n        if (!(\"placement\" == pages.name)) {\n", "ean = true\n  @State placementOnTop: boolean = fal", "ilderOne,\n          placement: this.placementOne,", ");\n    });\n\n    it('placementTest_0200', 0, async", "BottomLeft\n  @State placementThree: Placement = P", "    placement: this.placementOne,\n          maskC", "t.TopRight\n  @State placementTwo: Placement = Pla", "      console.info(\"placementTest_0100 on events_", " {\n                \"placementOnTop\": this.placeme", "      console.info(\"placement after each called\")", "  console.info(\"get placement state success \" + J", "unit(){\n  describe('placementTest', function (){\n", "   \"placement\":this.placementOne\n              }\n", "    placement: this.placement,\n          maskColo", ":{\n                \"placement\":this.placementThre", "t.test.ets';\nimport placementJsunit from './Place", "   \"placement\":this.placement\n              }\n   ", "    placement: this.placementTwo,\n          maskC", "   \"placement\":this.placementThree\n              ", " console.info(\"push placement page success \" + JS", "      console.info(\"placementTest_0200 get state ", "      console.info(\"placementTest_0100 clickOne r", "ect(indexEvent.data.placementOnTop).assertEqual(f", ");\n    });\n\n    it('placementTest_0100', 0, async", "   \"placement\":this.placementTwo\n              }\n", "      console.info(\"placementTest_0100 get state ", "      console.info('placementTest_0100 END');\n   ", "(indexEventOne.data.placement).assertEqual(Placem", "ontent1',\n          placementOnTop: this.placemen", "an = false\n  @State placement: Placement = Placem", ":{\n                \"placement\":this.placement\n   ", "pBuilder,\n          placement: Placement.Bottom,\n", "nt.TopLeft\n  @State placementOne: Placement = Pla", "console.error(\"push placement page error \" + JSON", "      console.info('placementTest_0100 START');\n ", ":{\n                \"placement\":this.placementTwo\n", "      console.info(\"placementTest_0100 click resu", "lacementOnTop: this.placementOnTop,\n          onS", "        uri: 'pages/placement',\n      }\n      try", "rt default function placementJsunit(){\n  describe", "derThree,\n          placement: this.placementThre", "pBuilder,\n          placement: this.placement,\n  ", "      console.info('placementTest_0200 START');\n "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "List.test.ets", "placement.ets", "PlacementJsunit.test.ets", "bindPopup.ets", "BindPopupJsunit.test.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomPopupOptions", "api_method_name": "maskColor", "api_method_all": "maskColor?: Color | string | Resource | number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["an = false\n  @State maskColor: string = 0x3300000", "ementTwo,\n          maskColor: 0x33000000,\n      ", "ementOne,\n          maskColor: 0x33000000,\n      ", "    maskColor: this.maskColor,\n          popupCol", "  \"maskColor\": this.maskColor,\n                \"e", "entThree,\n          maskColor: 0x33000000,\n      ", "(indexEventOne.data.maskColor).assertEqual(0x3300", "ull) {\n        this.maskColor = eventData.data.ma", " if (eventData.data.maskColor != null) {\n        ", "ect(indexEvent.data.maskColor).assertEqual(0x3300", "or = eventData.data.maskColor;\n      }\n    }\n  }\n", "lacement,\n          maskColor: 0x33000000,\n      ", "false,\n            \"maskColor\": 0x33000009\n      ", " {\n                \"maskColor\": this.maskColor,\n ", "t.Bottom,\n          maskColor: this.maskColor,\n  "], "files": ["bindPopup.ets", "BindPopupJsunit.test.ets", "placement.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomPopupOptions", "api_method_name": "popupColor", "api_method_all": "popupColor?: Color | string | Resource | number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["tIndexer')\n        .popupColor('#FF737373')\n      ", "askColor,\n          popupColor: Color.White,\n     ", "Indexer1')\n        .popupColor('#FF737373')\n      ", "33000000,\n          popupColor: Color.White,\n     "], "files": ["bindPopup.ets", "placement.ets", "AlphabetIndexer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomPopupOptions", "api_method_name": "enableArrow", "api_method_all": "enableArrow?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["ull) {\n        this.enableArrow = eventData.data.en", "(indexEventOne.data.enableArrow).assertEqual(false)", "ata: {\n            \"enableArrow\": false,\n          ", "\"enableArrow\": this.enableArrow\n              }\n   ", "or.White,\n          enableArrow: true,\n          on", "  enableArrow: this.enableArrow,\n          onStateC", " if (eventData.data.enableArrow != null) {\n        ", "ow = eventData.data.enableArrow;\n      }\n      if (", "r,\n                \"enableArrow\": this.enableArrow\n", "or.White,\n          enableArrow: this.enableArrow,\n", "ect(indexEvent.data.enableArrow).assertEqual(true);", "0x33000000\n  @State enableArrow: boolean = true\n  @"], "files": ["bindPopup.ets", "BindPopupJsunit.test.ets", "placement.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomPopupOptions", "api_method_name": "autoCancel", "api_method_all": "autoCancel?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["alogUser {\n  @State autoCancel: boolean = true\n  @", "ssage',\n            autoCancel: true,\n            ", " this.existApp,\n    autoCancel: true,\n    offset: "], "files": ["customDialogController.ets", "CustomDialog.ets", "AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_all": "declare class CommonMethod<T> {\n  \n  constructor();\n\n  \n  width(value: Length): T;\n\n  \n  height(value: Length): T;\n\n  \n  responseRegion(value: Array<Rectangle> | Rectangle): T;\n\n  \n  size(value: SizeOptions): T;\n\n  \n  constraintSize(value: ConstraintSizeOptions): T;\n\n  \n  touchable(value: boolean): T;\n\n  \n  layoutWeight(value: number | string): T;\n\n  \n  padding(value: Padding | Length): T;\n\n  \n  margin(value: Margin | Length): T;\n\n  \n  backgroundColor(value: ResourceColor): T;\n\n  \n  backgroundImage(src: ResourceStr, repeat?: ImageRepeat): T;\n\n  \n  backgroundImageSize(value: SizeOptions | ImageSize): T;\n\n  \n  backgroundImagePosition(value: Position | Alignment): T;\n\n  \n  opacity(value: number | Resource): T;\n\n  \n  border(value: BorderOptions): T;\n\n  \n  borderStyle(value: BorderStyle): T;\n\n  \n  borderWidth(value: Length): T;\n\n  \n  borderColor(value: ResourceColor): T;\n\n  \n  borderRadius(value: Length): T;\n\n  \n  onClick(event: (event?: ClickEvent) => void): T;\n\n  \n  onHover(event: (isHover?: boolean) => void): T;\n\n  \n  hoverEffect(value: HoverEffect): T;\n\n  \n  onMouse(event: (event?: MouseEvent) => void): T;\n\n  \n  onTouch(event: (event?: TouchEvent) => void): T;\n\n  \n  onKeyEvent(event: (event?: KeyEvent) => void): T;\n\n  \n  focusable(value: boolean): T;\n\n  \n  onFocus(event: () => void): T;\n\n  \n  onBlur(event: () => void): T;\n\n  \n  animation(value: AnimateParam): T;\n\n  \n  transition(value: TransitionOptions): T;\n\n  \n  gesture(gesture: GestureType, mask?: GestureMask): T;\n\n  \n  priorityGesture(gesture: GestureType, mask?: GestureMask): T;\n\n  \n  parallelGesture(gesture: GestureType, mask?: GestureMask): T;\n\n  \n  blur(value: number): T;\n\n  \n  brightness(value: number): T;\n\n  \n  contrast(value: number): T;\n\n  \n  grayscale(value: number): T;\n\n  \n  colorBlend(value: Color | string | Resource): T;\n\n  \n  saturate(value: number): T;\n\n  \n  sepia(value: number): T;\n\n  \n  invert(value: number): T;\n\n  \n  hueRotate(value: number | string): T;\n\n  \n  backdropBlur(value: number): T;\n\n  \n  translate(value: TranslateOptions): T;\n\n  \n  scale(value: ScaleOptions): T;\n\n  \n  gridSpan(value: number): T;\n\n  \n  gridOffset(value: number): T;\n\n  \n  rotate(value: RotateOptions): T;\n\n  \n  transform(value: object): T;\n\n  \n  onAppear(event: () => void): T;\n\n  \n  onDisAppear(event: () => void): T;\n\n  \n  onAreaChange(event: (oldValue: Area, newValue: Area) => void): T;\n\n  \n  visibility(value: Visibility): T;\n\n  \n  flexGrow(value: number): T;\n\n  \n  flexShrink(value: number): T;\n\n  \n  flexBasis(value: number | string): T;\n\n  \n  alignSelf(value: ItemAlign): T;\n\n  \n  displayPriority(value: number): T;\n\n  \n  zIndex(value: number): T;\n\n  \n  sharedTransition(id: string, options?: sharedTransitionOptions): T;\n\n  \n  direction(value: Direction): T;\n\n  \n  align(value: Alignment): T;\n\n  \n  position(value: Position): T;\n\n  \n  markAnchor(value: Position): T;\n\n  \n  offset(value: Position): T;\n\n  \n  enabled(value: boolean): T;\n\n  \n  useSizeType(value: {\n    xs?: number | { span: number; offset: number };\n    sm?: number | { span: number; offset: number };\n    md?: number | { span: number; offset: number };\n    lg?: number | { span: number; offset: number };\n  }): T;\n\n  \n  aspectRatio(value: number): T;\n\n  \n  onDragStart(event: (event?: DragEvent, extraParams?: string) => CustomBuilder | DragItemInfo): T;\n\n  \n  onDragEnter(event: (event?: DragEvent, extraParams?: string) => void): T;\n\n  \n  onDragMove(event: (event?: DragEvent, extraParams?: string) => void): T;\n\n  \n  onDragLeave(event: (event?: DragEvent, extraParams?: string) => void): T;\n\n  \n  onDrop(event: (event?: DragEvent, extraParams?: string) => void): T;\n\n  \n  overlay(value: string, options?: { align?: Alignment; offset?: { x?: number; y?: number } }): T;\n\n  \n  linearGradient(value: {\n    angle?: number | string;\n    direction?: GradientDirection;\n    colors: Array<any>;\n    repeating?: boolean;\n  }): T;\n\n  \n  sweepGradient(value: {\n    center: Array<any>;\n    start?: number | string;\n    end?: number | string;\n    rotation?: number | string;\n    colors: Array<any>;\n    repeating?: boolean;\n  }): T;\n\n  \n  radialGradient(value: { center: Array<any>; radius: number | string; colors: Array<any>; repeating?: boolean }): T;\n\n  \n  motionPath(value: MotionPathOptions): T;\n\n  \n  shadow(value: {\n    radius: number | Resource;\n    color?: Color | string | Resource;\n    offsetX?: number | Resource;\n    offsetY?: number | Resource;\n  }): T;\n\n  \n  clip(value: boolean | CircleAttribute | EllipseAttribute | PathAttribute | RectAttribute): T;\n\n  \n  mask(value: CircleAttribute | EllipseAttribute | PathAttribute | RectAttribute): T;\n\n  \n  key(value: string): T;\n\n  \n  id(value: string): T;\n\n  \n  geometryTransition(id: string): T;\n\n  \n  bindPopup(show: boolean, popup: PopupOptions | CustomPopupOptions): T;\n\n  \n  bindMenu(content: { value: string; action: () => void }[] | CustomBuilder): T;\n\n  \n  bindContextMenu(content: CustomBuilder, responseType: ResponseType): T;\n\n  \n  stateStyles(value: StateStyles): T;\n\n  \n  restoreId(value: number): T;\n}", "api_method_name": "CommonMethod", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "width", "api_method_all": "width(value: Length): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1772, "since": 8, "api_used": "\u662f", "lines": ["temsColumn\")\n      .width('90%')\n      .borde", "thValue}`)\n        .width(200)\n        .heigh", ");\n        })\n    }.width('100%').height('100", "Stretch)\n          .width('33%')\n          .h", "s.alignItems)\n    }.width('100%').padding({ t", ")\n        }\n      }.width('90%').key('gridCon", "gnSelf,height:100').width('34%').height(100)\n", "hrink(2)\n          .width('40%')\n          .h", "ull) {\n        this.width = eventData.data.wi", "(\"img_width=\" + img.width);\n    console.log(\"", "blurValue)\n        .width('90%')\n        .hei", "s/bg.jpg\");\n    let width = img.width;\n    le", "ign.Center)\n      }.width('90%').height(120).", "le.log(\"imagebitmap_width=\" + width);\n    con", "fontColor(0xCCCCCC).width('90%')\n      Column", "pse().width(`${this.width}`).height(`${this.h", "fontColor(0xCCCCCC).width('90%')\n      Flex({", "fontColor(0xCCCCCC).width('90%')\n      Text()", "Shrink')\n          .width('40%')\n          .h", "fontColor(0xCCCCCC).width('90%')\n      Text('", "eExample {\n  @State width: string = \"200px\";\n", "agebitmap_width=\" + width);\n    console.log(\"", "lor(0xAFEEEE)\n    }.width('100%').margin({ to", "xBasis\")\n          .width('60%')\n          .h", "    let width = img.width;\n    let height = i", "%')\n      .border({ width: 1 })\n      .alignI", "enabled)\n    }\n    .width('100%')\n    .paddin", "t: 30 })\n    }\n    .width('100%').height('100", "sole.log(\"imageData_width=\" + imageData.width", "}\n    }.padding(30).width('100%')\n  }\n}", "Shrink\")\n          .width('50%')\n          .h", "    Text()\n        .width('90%')\n        .hei", " .height(200)\n    }.width('100%').margin({ to", "ey('ellipse')\n    }.width('100%').height('100", ") {\n      Ellipse().width(`${this.width}`).he", " {\n        Column().width('50%').height(30).b", "ckgroundImageSize({ width: 1200, height: 160 ", " if (eventData.data.width != null) {\n        ", "   console.log(\"img_width=\" + img.width);\n   ", ".key('flex')\n      .width('90%')\n      .heigh", "ignSelf,height:80').width('33%').height(80)\n ", "s.context)\n        .width('100%').height('40%", "width=\" + imageData.width);\n    console.log(\"", "fontColor(0xCCCCCC).width('90%')\n      Flex()", "th = eventData.data.width;\n      }\n      if (", "E)\n        Column().width('50%').height(30).b"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "height", "api_method_all": "height(value: Length): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1455, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.height != null) {\n        ", "     .width('100%').height('40%').backgroundCo", "    }.width('100%').height('100%')\n  }\n}", "\"img_height=\" + img.height);\n  }\n}", "\n    .width('100%').height('100%').margin({ to", "width(200)\n        .height(200)\n    }.width('1", ".gridSpan)\n        .height(\"100%\")\n        .ba", "        })\n        .height(\"100%\")\n        .ba", "th(`${this.width}`).height(`${this.height}`).k", "   let height = img.height;\n    this.context.i", ":100').width('34%').height(100)\n          .bac", " img.width;\n    let height = img.height;\n    t", "dth('90%')\n        .height(40)\n        .fontSi", "   console.log(\"img_height=\" + img.height);\n  ", "sole.log(\"imageData_height=\" + imageData.heigh", "     }.width('90%').height(120).padding(10).ba", "ull) {\n        this.height = eventData.data.he", "h('50%')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .shadow", "eight=\" + imageData.height);\n  }\n\n  testImage(", "s('100')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .graysc", "h('33%')\n          .height(80)\n          .line", "le.log(\"imagebitmap_height=\" + height);\n  }\n\n ", "h('60%')\n          .height(100)\n          .lin", "= \"200px\";\n  @State height: string = \"200px\";\n", "h}`).height(`${this.height}`).key('ellipse')\n ", " Text('no alignSelf,height:80').width('33%').h", "xGrow(1)\n          .height(100)\n          .lin", "ht = eventData.data.height;\n      }\n    }\n  }\n", "gebitmap_height=\" + height);\n  }\n\n  testOffscr", "xGrow(2)\n          .height(100)\n          .lin", "lumn().width('50%').height(30).backgroundColor", "h('40%')\n          .height(100)\n          .lin", "Size({ width: 1200, height: 160 })\n        .ke", "    })\n            .height(50)\n            .ba", "width('90%')\n      .height(120)\n      .padding", "   })\n\n            .height(50)\n            .ba", "ridOffset)\n        .height(\"100%\")\n        .ba", "an')\n      }\n      .height(200)\n    }\n    .bac", " Text('no alignSelf,height:100').width('34%').", "t:80').width('33%').height(80)\n          .back", "    }.width('100%').height('100%')\n  }\n\n  test"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "AlertDialog.ets", "sliderProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "responseRegion", "api_method_all": "responseRegion(value: Array<Rectangle> | Rectangle): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["nit() {\n  describe('responseRegionTest', function () {", "t.test.ets';\nimport responseRegionJsunit from './Respo", "sGestureJsUnit();\n  responseRegionJsunit();\n  animateJ", "(0xAFEEEE)\n        .responseRegion({ x: 1.0, y: 1.0, w"], "files": ["List.test.ets", "ResponseRegion.ets", "ResponseRegionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "size", "api_method_all": "size(value: SizeOptions): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1127, "since": 7, "api_used": "\u662f", "lines": ["MD':\n          this.sizeType = SizeType.MD;\n", "    GridContainer({ sizeType: SizeType.SM })", "ontSize(20)\n      }.size({ width: '90%', hei", "ght(2)')\n          .size({ width: '30%', hei", " 12, sizeType: this.sizeType, gutter: 10, ma", "a.width;\n      this.sizeHeight = eventData.d", ")}`)\n          this.size = JSON.stringify(ne", ".$attrs.constructor.sizeType).assertEqual('S", "ring = 20;\n  @State sizeWidth: string = '100", " 'Small container', size: '30%' }];\n  @State", "ole.info(\"size page sizeChangCallBack\" + JSO", "    Text(`text font size ${this.fontSize}`)\n", "LG':\n          this.sizeType = SizeType.LG;\n", " = '100%';\n  @State sizeHeight: string = '10", "   Row()\n          .size({width: '30%', heig", "{\n    console.info(\"size page stateChangCall", "r(0xAFEEEE)\n      }.size({ width: '90%', hei", "Width, height: this.sizeHeight })\n          ", "llBackOne)\n\n    let sizeChangeEvent = {\n    ", "Weight')\n          .size({ width: '30%', hei", "[this.currentIndex].size)\n      .backgroundC", "area is: \\n' + this.size)\n        .key('text", " Row()\n            .size({ width: this.sizeW", "SM':\n          this.sizeType = SizeType.SM;\n", "  events_emitter.on(sizeChangeEvent, this.si", "rExample {\n  @State sizeType: SizeType = Siz", "tch (eventData.data.sizeType) {\n        case", "l: 'Big container', size: '97%' },\n    { lab", "ult:\n          this.sizeType = SizeType.Auto", "dex(2)')\n          .size({ width: '40%', hei", ".size({ width: this.sizeWidth, height: this.", "ght(1)')\n          .size({ width: '30%', hei", "to':\n          this.sizeType = SizeType.Auto", "abel: string = ''\n  size: string = ''\n};\n\ncl", "XS':\n          this.sizeType = SizeType.XS;\n", "top: 20, right: 20, size: 2, color: Color.Bl", "tem)\n      }\n      .size({ width: \"100%\", he", "t('background image size').fontSize(9).width", "{\n    console.info(\"size page weightChangCal", "   }\n  }\n\n  private sizeChangCallBack = (eve", ".rowsGap(10)\n      .size({ width: \"100%\", he", " = 'Text';\n  @State size: string = '';\n  @St", "{\n    console.info(\"size page sizeChangCallB", "iner({ columns: 12, sizeType: this.sizeType,", "dex(1)')\n          .size({ width: '70%', hei", "ata: {\n            \"sizeType\": 'SM'\n        ", "zeChangeEvent, this.sizeChangCallBack)\n\n    ", "dex(0)')\n          .size({ width: '90%', hei", "tData) {\n      this.sizeWidth = eventData.da"], "files": ["Select.ets", "ratingProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "SelectJsunit.test.ets", "gridContainer.ets", "imageAnimatorProps.test.js", "ContentStorage.test.ets", "RowSplit.ets", "background.ets", "Text.ets", "ColumnSplitJsunit.test.ets", "textStyle.ets", "TextInput.ets", "swiper.ets", "AlphabetIndexer.ets", "SystemRouterJsunit.test.ets", "zIndex.ets", "ColumnSplit.ets", "FormComponentPage.ets", "GridContainerJsunit.test.ets", "layoutConstraints.ets", "OhosRouterJsnuit.test.ets", "enumsItemAlign.ets", "swiperProps.test.js", "positionSetting.ets", "TextArea.ets", "GridContainer.ets", "dragEvent2.ets", "index.js", "AppStorageJsunit.test.ets", "areaChange.ets", "basicabilityapi.test.js", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "select.ets", "Toggle.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "Image.ets", "search.ets", "gridContainerProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "constraintSize", "api_method_all": "constraintSize(value: ConstraintSizeOptions): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["tringify(obj.$attrs.constraintSize));\n      console.lo", "constraintSize(this.constraintSize)\n        .layoutWei", "tring= \"5\"\n  @State constraintSize: constraintSize = {", "onsole.log(\"cd text constraintSize\" + JSON.stringify(o", "FEEEE)\n\n      Text('constraintSize')\n        .fontSize", "S_CONSTRAINTSIZE = 'constraintSize'\nconst ATTRS_NARGIN", "ginLeft })\n        .constraintSize(this.constraintSize", "ate constraintSize: constraintSize = { minWidth: 20, m", "   Row()\n          .constraintSize({minWidth: '10%', m"], "files": ["backgroundAndSizeSetting.ets", "TextJsunit.test.ets", "Text.ets", "Constants.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "touchable", "api_method_all": "touchable(value: boolean): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": [".key('region')\n    .touchable(this.touchable)\n   ", " if (eventData.data.touchableValue != null) {\n   ", "le = eventData.data.touchable;\n      }\n    }\n  }\n", "ue = eventData.data.touchableValue;\n      }\n    }", "    .touchable(this.touchableValue)\n        .onCl", "ull) {\n        this.touchable = eventData.data.to", "ull) {\n        this.touchableValue = eventData.da", "    .touchable(this.touchable)\n    .onTouch((even", "'ellipse')\n        .touchable(this.touchableValue", " if (eventData.data.touchable != null) {\n        ", "ata: {\n            \"touchable\": true,\n          }", "nExample {\n  @State touchable: boolean = false;\n ", "    .touchable(this.touchable)\n    .gesture(\n    ", "number = 0\n  @State touchable: boolean = true;\n  ", "ring = '';\n  @State touchableValue: boolean = fal", "fsetY, z: 5 })\n    .touchable(this.touchable)\n   "], "files": ["ResponseRegion.ets", "touchAble.ets", "PanGesture.ets", "PanGestureJsunit.test.ets", "ResponseRegionJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "layoutWeight", "api_method_all": "layoutWeight(value: number | string): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["ing= \"9px\"\n  @State layoutWeight: string = \"10px\"\n  ", " .layoutWeight(this.layoutWeight2)\n          .fontSi", "tData) {\n      this.layoutWeight1 = eventData.data.w", ".Center)\n          .layoutWeight(this.layoutWeight1)", "20)\n          .key('layoutWeight1')\n        Text('la", " .layoutWeight(this.layoutWeight)\n        .align(thi", "20)\n          .key('layoutWeight2')\n        Text('no", "  expect(obj.$attrs.layoutWeight).assertEqual(1);\n  ", " .layoutWeight(this.layoutWeight1)\n          .fontSi", "ht1')\n        Text('layoutWeight(2)')\n          .siz", "w() {\n        Text('layoutWeight(1)')\n          .siz", " getInspectorByKey('layoutWeight1');\n      console.i", "')\n        Text('no layoutWeight')\n          .size({", "7.4)\n      }\n      .layoutWeight(2)\n    }\n    .key('", ".Center)\n          .layoutWeight(this.layoutWeight2)", "ontWeight)\n        .layoutWeight(1)\n      Flex() {\n ", "tring = 1;\n  @State layoutWeight2: string = 2;\n\n  pr", "FA500)\n\n      Text('layoutWeight')\n        .fontSize", " = '100%';\n  @State layoutWeight1: string = 1;\n  @St", "  expect(obj.$attrs.layoutWeight).assertEqual(3);\n  ", "TRS_LAYOUTWEIGHT = 'layoutWeight'\nconst ATTRS_LAYOUT", "raintSize)\n        .layoutWeight(this.layoutWeight)\n"], "files": ["backgroundAndSizeSetting.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Constants.ets", "fontWeight.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "padding", "api_method_all": "padding(value: Padding | Length): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 154, "since": 7, "api_used": "\u662f", "lines": ["lor(0xd2cab3)\n    }.padding(10)\n  }\n\n  onPageSh", "fontColor(0xCCCCCC).padding(15).fontSize(30)\n  ", "   })\n      }\n    }.padding(30).width('100%')\n ", "0%').height('100%').padding({ top: 5 })\n  }\n}\n", "utton1').width(100).padding(5).onClick(() => {\n", "s/bg.jpg')\n        .padding(5)\n        .transfo", "fontColor(0xCCCCCC).padding(10).fontSize(30)\n  ", "ng = eventData.data.padding;\n      this.margin ", "xAFEEEE)\n          .padding(20)\n          .key(", "st ATTRS_PADDING = 'padding'\nconst ATTRS_POSITI", "utton2').width(100).padding(5).onClick(() => {\n", "s.matrix5)\n        .padding(5)\n        .width(\"", "  expect(obj.$attrs.padding).assertEqual('10.00", "is.height)\n        .padding(this.padding)\n     ", ".width('100%')\n    .padding({ top: 5 })\n  }\n}\n", " .width('90%')\n    .padding(10)\n    .background", "width('100%')\n    }.padding({ top: 20 })\n  }\n}", "utton3').width(100).padding(5).onClick(() => {\n", "s.matrix4)\n        .padding(5)\n        .width(\"", "      .padding(this.padding)\n        .margin(th", "   Text('margin and padding:').fontSize(26).fon", "oundColor(0xDCDCDC).padding({ top: 5 })\n  }\n\n  ", "utton4').width(100).padding(5).onClick(() => {\n", "    }.width('100%').padding({ top: 5 })\n  }\n}", "oundColor(0xDCDCDC).padding({ top: 5 })\n  }\n}", "ring = 80;\n  @State padding: string = 20;\n  @St", "xAFEEEE)\n          .padding(20)\n      }.width('", "(16)\n      }\n      .padding({ top: 50 })\n      ", "oundColor(0xAFEEEE).padding(20)\n      }.width('", "utton5').width(100).padding(5).onClick(() => {\n", "button').width(100).padding(5).onClick(() => {\n", "0%').height('100%').padding({ top: 5 })\n  }\n}", ".width('100%')\n    .padding({ top: 5 })\n  }\n}", "Button(\"get Point\").padding(40)\n        .onClic", "(0xF9CF93)\n        .padding({ left: 5 })\n      ", "'200',\n            \"padding\": '10',\n           ", "('90%').height(120).padding(10).backgroundColor", "fontColor(0xCCCCCC).padding(5).fontSize(5)\n    ", ".height;\n      this.padding = eventData.data.pa", ".height(120)\n      .padding(10)\n      .backgrou", "  expect(obj.$attrs.padding).assertEqual('20.00", "oundColor(0xAFEEEE).padding(20).key('box')\n\n   "], "files": ["animate.ets", "flex.ets", "ohosPrompt.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "Flex.ets", "longPressGesture.ets", "ListItem.ets", "mouseEvent.ets", "background.ets", "placement.ets", "playMode.ets", "enumsImage.ets", "enable.ets", "ohosMatrix4.ets", "Text.ets", "divider.ets", "imageFit.ets", "imageEffects.ets", "radio.ets", "TextJsunit.test.ets", "appear.ets", "Constants.ets", "rating.ets", "richText.ets", "column.ets", "toggle.ets", "animationStatus.ets", "enumsFlexAlign.ets", "sourceType.ets", "span.ets", "fillMode.ets", "Panel.ets", "Scroll.ets", "priorityGesture.ets", "NavigatorCode.ets", "text.ets", "visibility.ets", "geometryTransition.ets", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "panel.ets", "List.ets", "animatorOption.ets", "dragEvent2.ets", "tapGesture.ets", "flexDirection.ets", "flexWrap.ets", "index.js", "gradientDirection.ets", "edgeEffect.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "PanGesture.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "transition.ets", "slider.ets", "listItem.ets", "Button.ets", "image.ets", "transForm.ets", "fontWeight.ets", "sharedTransition.ets", "gestureMode.ets", "imageAnimator.ets", "bindPopup.ets", "colorGradient.ets", "Column.ets", "button.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "margin", "api_method_all": "margin(value: Margin | Length): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 300, "since": 7, "api_used": "\u662f", "lines": ["height(60)\n        .margin({ bottom: 20 })\n   ", "editMode\n        }).margin({ top: 5, left: 20 ", "lor.Black)\n        .margin({ bottom: 40 })\n   ", "eight(210)\n        .margin({top:100})\n        ", "'100%' })\n        }.margin({ top: 25 }).border", "s.padding)\n        .margin(this.margin)\n      ", "    }.width('100%').margin({ top: 20 })\n  }\n\n ", "  expect(obj.$attrs.margin).assertEqual('40.00", "  expect(obj.$attrs.margin).assertEqual('20.00", "    }.width('100%').margin({ top: 5 })\n  }\n}\n", "TRS_MARGIN_RIGHT = 'margin-right'\nconst ATTRS_", "ATTRS_MARGIN_TOP = 'margin-top'\nconst ATTRS_BO", "padding;\n      this.margin = eventData.data.ma", "zeType, gutter: 10, margin: 20 }) {\n        Ro", "y('text2')\n        .margin({ right: 30, left: ", "RS_MARGIN_BOTTOM = 'margin-bottom'\nconst ATTRS", "editFlag\n        }).margin({ top: 5, left: 20 ", ".width('100%')\n    .margin({ top: 5 })\n  }\n}", "ey('gridContainer').margin({ top: 300 })\n    }", "ight(50)\n          .margin({ top: 250 })\n     ", ": 1 })\n\n      Text('margin and padding:').font", "eight(100)\n        .margin({ top: 5 })\n       ", "ring = 20;\n  @State margin: string = 20;\n  @St", " '10',\n            \"margin\": '40'\n          }\n", "    }.width('100%').margin({ top: 300 })\n  }\n}", "   })\n      }\n    }.margin({ top: 5 })\n  }\n\n  ", "       .margin(this.margin)\n        .backgroun", "0%').height('100%').margin({ top: 30 })\n  }\n}", "(0xAFEEEE)\n        .margin({ bottom: 10 })\n   ", "\n    .width('100%').margin({ top: 5 })\n  }\n  o", ".$attrs.constructor.margin).assertEqual('20.00", "0, y: 20 } })\n    }.margin(100)\n  }\n}", "TTRS_NARGIN_LEFT = 'margin-left'\nconst ATTRS_B", "in = eventData.data.margin;\n    }\n  }\n\n  priva", "    }.width('100%').margin({ top: 5 })\n  }\n}", "lor.Green)\n        .margin(30)\n        .fontSi", "olor(0xf1f3f5)\n    .margin({ top: 10 })\n    .k", "s.isShow\n        }).margin(3).backgroundColor("], "files": ["systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "playMode.ets", "Navigation.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "enumsLineCapStyle.ets", "Swiper.ets", "ResponseRegion.ets", "scrollBar.ets", "transition.ets", "systemPrompt.ets", "gridSettings.ets", "transForm.ets", "path.ets", "scrollCode.ets", "polyline.ets", "focus.ets", "Text.ets", "Counter.ets", "gauge.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "Scroll.ets", "customDialogController.ets", "GridContainerJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "edgeEffect.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "loadingProgress.ets", "Marquee.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "textClock.ets", "tabs.ets", "list.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "backgroundAndSizeSetting.ets", "dragEvent.ets", "lazyForEach.ets", "circle.ets", "grid.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "ScrollBar.ets", "appear.ets", "Constants.ets", "animationStatus.ets", "Path.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "GridItem.ets", "parallelGesture.ets", "slider.ets", "Calendar.ets", "gestureMode.ets", "refresh.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "backgroundColor", "api_method_all": "backgroundColor(value: ResourceColor): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 627, "since": 7, "api_used": "\u662f", "lines": ["', height: '60%' }).backgroundColor(0xbbb2cb)\n         ", "  if(eventData.data.backgroundColor != null) {\n        ", "ter)\n              .backgroundColor(0xbbb2cb)\n         ", "', height: '80%' }).backgroundColor(0xd2cab3).align(Ali", "_BACKGROUNDCOLOR = 'backgroundColor'\nconst ATTRS_ALIGNS", "00%').height('40%').backgroundColor('#00ffff')\n        ", "ight(70)\n          .backgroundColor(0xF5DEB3)\n         ", "ht(50)\n            .backgroundColor(0x4582B4)\n         ", "h('50%').height(30).backgroundColor(0x00FFFF)\n      }\n ", "ht(120).padding(10).backgroundColor(0xAFEEEE)\n\n      Te", "n('Touch')\n        .backgroundColor(0x2788D9)\n        .", "ight(80)\n          .backgroundColor(0xF5DEB3).textAlign", "ght(100)\n          .backgroundColor(0xF5DEB3).textAlign", "ht(\"100%\")\n        .backgroundColor(0x66bbb2cb)\n       ", "y('text1')\n        .backgroundColor(Color.Green)\n      ", "led(false)\n        .backgroundColor(0x317aff)\n        .", "h('50%').height(30).backgroundColor(0xAFEEEE)\n        C", "(item)\n            .backgroundColor(0xbbb2cb)\n         ", "ight: 100 })\n      .backgroundColor(0xd2cab3)\n      .cl", "0)\n                .backgroundColor(0xFFFFFF)\n         ", "0%').height('100%').backgroundColor(0xDCDCDC).padding({", "ight.Bold)\n        .backgroundColor(Color.Black)\n      ", "ght(200)\n    }\n    .backgroundColor(0xf1f3f5)\n    .marg", "ntSize(16)\n        .backgroundColor(0xF9CF93)\n        .", "Index].size)\n      .backgroundColor(0xd2cab3)\n    }.pad", "ight(70)\n          .backgroundColor(0xD2B48C)\n         ", "       }).margin(3).backgroundColor(0x2788D9)\n      if ", "tem)\n              .backgroundColor(0xbbb2cb)\n         ", "'50%' })\n          .backgroundColor(0xc1cbac)\n         ", "'enabled')\n        .backgroundColor(0x317aff)\n        .", ".padding(10)\n      .backgroundColor(0xAFEEEE)\n    }.wid", "ht(50)\n            .backgroundColor(0x00BFFF)\n         ", "ight: 165 })\n      .backgroundColor(0xd2cab3)\n\n      Te", "t(160)\n            .backgroundColor(0xAFEEEE)\n         ", "ht(\"100%\")\n        .backgroundColor(0x66b6c5d1)\n       ", "ight(80)\n          .backgroundColor(0xAFEEEE)\n         ", "ht(50)\n            .backgroundColor(0x4682B4)\n         "], "files": ["ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Navigation.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Swiper.ets", "ResponseRegion.ets", "scrollBar.ets", "transition.ets", "systemPrompt.ets", "gridSettings.ets", "transForm.ets", "Column.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Text.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "sideBar.ets", "Badge.ets", "Scroll.ets", "customDialogController.ets", "positionSetting.ets", "animatorOption.ets", "flexDirection.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "gridPage.ets", "enable.ets", "badge.ets", "imageEffects.ets", "ColumnSplit.ets", "tabs.ets", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "global.ets", "Flex.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "divider.ets", "appear.ets", "Constants.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "fillMode.ets", "curves.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "AlertDialog.ets", "LoadingProgressJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "timeStamp.ets", "motionPath.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "panel.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "backgroundImage", "api_method_all": "backgroundImage(src: ResourceStr, repeat?: ImageRepeat): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 67, "since": 7, "api_used": "\u662f", "lines": [".NoRepeat)\n        .backgroundImageSize(ImageSize.Cover", "  if(eventData.data.backgroundImageSize != null) {\n    ", " if (eventData.data.backgroundImagePosition != null) {\n", ".NoRepeat)\n        .backgroundImageSize(ImageSize.Conta", "  expect(obj.$attrs.backgroundImageSize).assertEqual('I", "t obj1 = obj.$attrs.backgroundImage.split(', ')\n      c", "ge = eventData.data.backgroundImage;\n      }\n      if (", "ull) {\n        this.backgroundImageSize = eventData.dat", "  if(eventData.data.backgroundImage != null) {\n        ", "     Row()\n        .backgroundImage('/images/bg.jpg', I", "ull) {\n        this.backgroundImage = eventData.data.ba", "eRepeat.Y)\n        .backgroundImageSize(ImageSize.Auto)", "UNDIMAGEPOSITION = 'backgroundImagePosition'\nconst ATTR", ".NoRepeat)\n        .backgroundImageSize({ width: 1000, ", "     Row()\n        .backgroundImage('/images/download.p", " if (eventData.data.backgroundImageSize != null) {\n    ", "BlueValue)\n        .backgroundImage('/images/download.p", "  if(eventData.data.backgroundImagePosition != null) {\n", "ht: 560 })\n        .backgroundImagePosition({ x: -500, ", "ge = eventData.data.backgroundImage;\n      }\n      if(e", " if (eventData.data.backgroundImage != null) {\n        ", "on = eventData.data.backgroundImagePosition;\n      }\n  ", "eRepeat.X)\n        .backgroundImageSize({ width: '250px", "KGROUNDIMAGESIZE = 'backgroundImageSize'\nconst ATTRS_OF", "eight(150)\n        .backgroundImage('/images/bg.jpg', I", "eRepeat.Y)\n        .backgroundImageSize({ width: '500px", "ull) {\n        this.backgroundImagePosition = eventData", "ze = eventData.data.backgroundImageSize;\n      }\n      ", "load.png')\n        .backgroundImageSize({ width: 1200, ", "_BACKGROUNDIMAGE = 'backgroundImage'\nconst ATTRS_MARGIN", "height(50)\n        .backgroundImage('/images/bg.jpg', I"], "files": ["backgroundAndSizeSetting.ets", "EnmusImageJsunit.test.ets", "imageEffects.ets", "Constants.ets", "background.ets", "enumsImage.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "backgroundImageSize", "api_method_all": "backgroundImageSize(value: SizeOptions | ImageSize): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": [" if (eventData.data.backgroundImageSize != null) {\n        ", "  expect(obj.$attrs.backgroundImageSize).assertEqual('Image", "Color.Pink\n  @State backgroundImageSize: ImageSize = ImageS", "eRepeat.Y)\n        .backgroundImageSize({ width: '500px', h", "ull) {\n        this.backgroundImageSize = eventData.data.ba", "load.png')\n        .backgroundImageSize({ width: 1200, heig", "KGROUNDIMAGESIZE = 'backgroundImageSize'\nconst ATTRS_OFFSET", "ze = eventData.data.backgroundImageSize;\n      }\n      if (", ".NoRepeat)\n        .backgroundImageSize(ImageSize.Contain)\n", "ze = eventData.data.backgroundImageSize;\n      }\n      if(e", "eRepeat.X)\n        .backgroundImageSize({ width: '250px', h", "  if(eventData.data.backgroundImageSize != null) {\n        ", "eRepeat.Y)\n        .backgroundImageSize(ImageSize.Auto)\n   ", ".NoRepeat)\n        .backgroundImageSize({ width: 1000, heig", ".NoRepeat)\n        .backgroundImageSize(ImageSize.Cover)\n  "], "files": ["backgroundAndSizeSetting.ets", "EnmusImageJsunit.test.ets", "imageEffects.ets", "Constants.ets", "background.ets", "enumsImage.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "backgroundImagePosition", "api_method_all": "backgroundImagePosition(value: Position | Alignment): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["UNDIMAGEPOSITION = 'backgroundImagePosition'\nconst ATTRS_BACKGR", "ull) {\n        this.backgroundImagePosition = eventData.data.ba", "  if(eventData.data.backgroundImagePosition != null) {\n        ", "Size.Cover\n  @State backgroundImagePosition: Alignment= Alignme", " if (eventData.data.backgroundImagePosition != null) {\n        ", "ht: 560 })\n        .backgroundImagePosition({ x: -500, y: -300 ", "on = eventData.data.backgroundImagePosition;\n      }\n    }\n  }\n"], "files": ["backgroundAndSizeSetting.ets", "background.ets", "Text.ets", "Constants.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "opacity", "api_method_all": "opacity(value: number | Resource): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 532, "since": 7, "api_used": "\u662f", "lines": ["ale }).opacity(this.opacity)\n  }\n  pageTransiti", "pacityValue}`).key(\"opacity\")\n        Text('top", "%').opacity(`${this.opacityValue}`).key(\"opacit", " if (eventData.data.opacity != null) {\n        ", "xpect(objNew.$attrs.opacity).assertEqual(2);\n  ", "({ x: this.scale }).opacity(this.opacity)\n  }\n ", "      .opacity(this.opacity)\n        .onClick((", ".0 }, opacity: this.opacity })\n      }\n    }.he", "eInt(eventData.data.opacity);\n      }\n    }\n  }", "ale,\n              \"opacity\" : this.opacity,\n  ", " getInspectorByKey('opacity');\n      let obj = ", "(0x317aff)\n        .opacity(0.4)\n      Button(t", "ue = eventData.data.opacityValue;\n      }\n    }", "le = 1\n        this.opacity = progress\n      })", "ogress\n        this.opacity = 1\n      })\n  }\n\n ", " getInspectorByKey('opacity');\n      let objNew", "number = 1\n  @State opacity: number = 1\n  @Stat", "ale }).opacity(this.opacity)\n  }\n\n  pageTransit", "st ATTRS_OPACITY = 'opacity'\nconst ATTRS_DIRECT", "0}) {\n        Text('opacity(1)').fontSize(20).f", "  expect(obj.$attrs.opacity).assertEqual(1);\n  ", "   \"opacity\" : this.opacity,\n              \"typ", "ata: {\n            \"opacityValue\": \"0.7\"\n      ", "Black).width('90%').opacity(`${this.opacityValu", " if (eventData.data.opacityValue) {\n        thi", ".0 }, opacity: this.opacity })\n        .key('bu", "ata: {\n            \"opacity\": 'a',\n          }\n", ", y: 1.0, z: 1.0 }, opacity: this.opacity })\n  ", "0, y: 15};\n  @State opacityValue: string = 1;\n\n", "xpect(objNew.$attrs.opacity).assertEqual(0.7);\n", "xpect(objNew.$attrs.opacity).assertEqual(null);", "g = \"show\"\n  @State opacity: number = 1\n  @Stat", "('button')\n        .opacity(this.opacity)\n     ", "ull) {\n        this.opacity = parseInt(eventDat", "ata: {\n            \"opacity\": 2,\n          }\n  ", "{ x: 1.0, y: 0.0 }, opacity: this.opacity })\n  ", "({ x: this.scale }).opacity(this.opacity)\n  }\n\n", "lue) {\n        this.opacityValue = eventData.da"], "files": ["pageTransition2.ets", "pathProps.test.js", "circleProps.test.js", "enable.ets", "Text.ets", "lineProps.test.js", "TextJsunit.test.ets", "Constants.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "ellipseProps.test.js", "listItemProps.test.js", "TransitionJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "polygonProps.test.js", "positionSetting.ets", "index.js", "PageTransitionJsunit.test.ets", "tspanProps.test.js", "svgProps.test.js", "transition.ets", "svgTextProps.test.js", "textPathProps.test.js", "sharedTransition.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "border", "api_method_all": "border(value: BorderOptions): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 249, "since": 7, "api_used": "\u662f", "lines": ["y: -300 })\n        .border({ width: 1 })\n\n    ", "onsole.info(\"Border borderStyle state change c", "borderWidth(5).key(\"borderWidth\")\n        .bor", "(BorderStyle.Solid).borderWidth(5).key(\"border", "  if(eventData.data.border != null) {\n        ", " .borderRadius(this.borderRadius).key(\"borderR", "{\n    console.info('border page show called');", "  if(eventData.data.borderStyle != null) {\n   ", "  if(eventData.data.borderWidth != null) {\n   ", "ult:\n          this.borderStyle = BorderStyle.", "t('Solid')\n        .borderStyle(BorderStyle.So", "ull) {\n        this.borderColor = eventData.da", "ht: 500 })\n        .border({ width: 1 })\n     ", "TTRS_BORDERCOLOR = 'borderColor'\nconst ATTRS_M", "ull) {\n        this.borderRadius = eventData.d", "erWidth(5)\n        .borderColor(0xAFEEEE)\n    ", "th = eventData.data.borderWidth;\n      }\n     ", "ed':\n          this.borderStyle = BorderStyle.", "     }.width('90%').border({ width: 1 })\n    }", "tyle.Auto;\n  @State borderRadius: number = 70;", "ull) {\n        this.borderStyle = eventData.da", "  if(eventData.data.borderColor != null) {\n   ", "ize.Cover)\n        .border({ width: 1 })\n     ", "ull) {\n        this.borderWidth = eventData.da", "  if(eventData.data.borderRadius != null) {\n  ", "width('90%')\n      .border({ width: 1 })\n     ", "is.y } })\n        }.border({ color: Color.Blac", "r)\n                .borderRadius(10)\n         ", "(\"backgroundColor\").border({ width: 1 })\n     ", "ull) {\n        this.border = eventData.data.bo", "us = eventData.data.borderRadius;\n      }\n    ", "TTRS_BORDERSTYLE = 'borderStyle'\nconst ATTRS_M", "itch(eventData.data.borderStyle) {\n        cas", "id':\n          this.borderStyle = BorderStyle.", "derWidth\")\n        .borderColor(0xEE0000)\n    ", "le = eventData.data.borderStyle;\n      }\n     ", ".borderRadius).key(\"borderRadius\")\n        .wi", "height(70)\n        .border({ width: 1 })\n     ", "er = eventData.data.border;\n      }\n      if(e", "(0xEE0000)\n        .borderRadius(10)\n        .", "BorderStyle.Dashed).borderWidth(5)\n        .bo", "eight(100)\n        .border({ width: 1 })\n     ", "rExample {\n  @State borderStyle: BorderStyle =", "('dashed')\n        .borderStyle(BorderStyle.Da", "TTRS_BORDERWIDTH = 'borderWidth'\nconst ATTRS_W", "or = eventData.data.borderColor;\n      }\n     ", "(0xAFEEEE)\n        .borderRadius(this.borderRa", "e.Contain)\n        .border({ width: 1 })\n     ", "TRS_BORDERRADIUS = 'borderRadius'\nconst ATTRS_"], "files": ["Shape.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "Navigator.ets", "BorderJsunit.test.ets", "longPressGesture.ets", "row.ets", "background.ets", "ListItem.ets", "Slider.ets", "enumsImage.ets", "enumsHorizontalAlign.ets", "badge.ets", "Text.ets", "Row.ets", "imageFit.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "Span.ets", "Constants.ets", "scrollCode.ets", "CheckboxGroupJsunit.test.ets", "column.ets", "Panel.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "priorityGesture.ets", "Grid.ets", "visibility.ets", "CheckboxJsunit.test.ets", "list.ets", "BackgroundJsunit.test.ets", "positionSetting.ets", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "ShapeClippingJsunit.test.ets", "animatorOption.ets", "dragEvent2.ets", "shapeClipping.ets", "tapGesture.ets", "Rating.ets", "List.ets", "edgeEffect.ets", "backgroundAndSizeSetting.ets", "border.ets", "GridItem.ets", "dragEvent.ets", "PanGesture.ets", "parallelGesture.ets", "scrollBar.ets", "listItem.ets", "Image.ets", "Column.ets", "gestureMode.ets", "ScrollBar.ets", "List.test.ets", "panel.ets", "button.ets", "overlay.ets", "blank.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "borderStyle", "api_method_all": "borderStyle(value: BorderStyle): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 43, "since": 7, "api_used": "\u662f", "lines": ["alignSelf)\n        .borderStyle(this.borderStyle)\n ", "onsole.info(\"Border borderStyle state change called", "ult:\n          this.borderStyle = BorderStyle.Solid", "rExample {\n  @State borderStyle: BorderStyle = Bord", "  if(eventData.data.borderStyle != null) {\n        ", "id':\n          this.borderStyle = BorderStyle.Solid", "ed':\n          this.borderStyle = BorderStyle.Dashe", "TTRS_BORDERSTYLE = 'borderStyle'\nconst ATTRS_MARGIN", "nsole.log(\"cd text1 borderStyle\" + JSON.stringify(o", "number = 0\n  @State borderStyle: BorderStyle = Bord", "order({ width: 1 }).borderStyle(BorderStyle.Dashed)", "le = eventData.data.borderStyle;\n      }\n      if(e", "t('Solid')\n        .borderStyle(BorderStyle.Solid).", "dth: 1, style: this.borderStyle })\n    .gesture(\n  ", ") => {\n        this.borderStyle = BorderStyle.Dashe", "  expect(obj.$attrs.borderStyle).assertEqual(\"Borde", "Align.Auto\n  @State borderStyle: BorderStyle = Bord", "ed':\n          this.borderStyle = BorderStyle.Dotte", "  .borderStyle(this.borderStyle)\n        .borderRad", "ull) {\n        this.borderStyle = eventData.data.bo", "nsole.log(\"cd text2 borderStyle\" + JSON.stringify(o", "onsole.log(\"cd text borderStyle\" + JSON.stringify(o", "itch(eventData.data.borderStyle) {\n        case 'Do", "ign.Start)\n        .borderStyle(BorderStyle.Dotted)", "gn.Center)\n        .borderStyle(BorderStyle.Solid)\n", "('dashed')\n        .borderStyle(BorderStyle.Dashed)", "tringify(obj.$attrs.borderStyle));\n      console.lo"], "files": ["border.ets", "imageFit.ets", "TextJsunit.test.ets", "Constants.ets", "CheckboxGroupJsunit.test.ets", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "gestureMode.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "borderWidth", "api_method_all": "borderWidth(value: Length): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 39, "since": 7, "api_used": "\u662f", "lines": ["(Color.Pink)\n      .borderWidth(2)\n    }\n  }\n}\n\n", "or(Color.Pink)\n    .borderWidth(2)\n  }\n}", "yle.Solid)\n        .borderWidth(2)\n        .visibil", "(BorderStyle.Solid).borderWidth(5).key(\"borderWidth", "  expect(obj.$attrs.borderWidth).assertEqual(\"1.00v", "BorderStyle.Dashed).borderWidth(5)\n        .borderC", "  if(eventData.data.borderWidth != null) {\n        ", "  expect(obj.$attrs.borderWidth).assertEqual(\"4.000", "or(Color.Pink)\n    .borderWidth(2)\n  }\n}\n", "ull) {\n        this.borderWidth = eventData.data.bo", "TTRS_BORDERWIDTH = 'borderWidth'\nconst ATTRS_WIDTH ", "  .borderWidth(this.borderWidth)\n        .borderCol", "(Color.Pink)\n      .borderWidth(4)\n    }\n  }\n}\n\n\n\n", "Align.End)\n        .borderWidth(2)\n        .width('", "umber = 10\n  @State borderWidth: string= \"4px\"\n  @S", "or(Color.Pink)\n    .borderWidth(2)\n  }\n}\n\n", "derRadius)\n        .borderWidth(this.borderWidth)\n ", "  expect(obj.$attrs.borderWidth).assertEqual(\"5.00v", "onsole.log(\"cd text borderWidth\" + JSON.stringify(o", "borderWidth(5).key(\"borderWidth\")\n        .borderCo", "  expect(obj.$attrs.borderWidth).assertEqual(\"0.00p", " getInspectorByKey('borderWidth');\n      console.in", "n.Stretch)\n        .borderWidth(2)\n        .width('", "(Color.Pink)\n      .borderWidth(4)\n    }\n  }\n}\n\n\n", "le.Dotted)\n        .borderWidth(2)\n        .visibil", "tringify(obj.$attrs.borderWidth));\n      console.lo", ".Baseline)\n        .borderWidth(2)\n        .width('", "  expect(obj.$attrs.borderWidth).assertEqual(\"4.00p", "th = eventData.data.borderWidth;\n      }\n      if(e"], "files": ["Grid.ets", "border.ets", "GridItem.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Row.ets", "TextJsunit.test.ets", "Span.ets", "Constants.ets", "Image.ets", "BorderJsunit.test.ets", "BackgroundJsunit.test.ets", "LoadingProgressJsunit.test.ets", "Navigator.ets", "Progress.ets", "Rating.ets", "Slider.ets", "ListItem.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "borderColor", "api_method_all": "borderColor(value: ResourceColor): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 33, "since": 7, "api_used": "\u662f", "lines": ["ed })\n        .key(\"borderColor\")\n        .width(12", "  expect(obj.$attrs.borderColor).assertEqual(\"#FF00", "  .borderColor(this.borderColor)\n        .backgroun", "  if(eventData.data.borderColor != null) {\n        ", ".height(300)\n      .borderColor(Color.Pink)\n      .", "  .height(300)\n    .borderColor(Color.Pink)\n    .bo", "tringify(obj.$attrs.borderColor));\n      console.lo", "or = eventData.data.borderColor;\n      }\n      if(e", "  expect(obj.$attrs.borderColor).assertEqual(\"#FF31", "ull) {\n        this.borderColor = eventData.data.bo", "onsole.log(\"cd text borderColor\" + JSON.stringify(o", "derWidth\")\n        .borderColor(0xEE0000)\n        .", ".height(400)\n      .borderColor(Color.Pink)\n      .", "  .height(350)\n    .borderColor(Color.Pink)\n    .bo", "ing= \"4px\"\n  @State borderColor: Color= Color.Blue\n", "erWidth(5)\n        .borderColor(0xAFEEEE)\n        .", "  expect(obj.$attrs.borderColor).assertEqual('#FF00", " getInspectorByKey('borderColor');\n      console.in", "rderWidth)\n        .borderColor(this.borderColor)\n ", "TTRS_BORDERCOLOR = 'borderColor'\nconst ATTRS_MARGIN"], "files": ["Grid.ets", "border.ets", "GridItem.ets", "ButtonJsunit.test.ets", "Row.ets", "TextJsunit.test.ets", "Span.ets", "Constants.ets", "Image.ets", "BorderJsunit.test.ets", "Navigator.ets", "LoadingProgressJsunit.test.ets", "Progress.ets", "Rating.ets", "ListItem.ets", "Slider.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "borderRadius", "api_method_all": "borderRadius(value: Length): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 59, "since": 7, "api_used": "\u662f", "lines": ["  if(eventData.data.borderRadius != null) {\n        ", "  expect(obj.$attrs.borderRadius).assertEqual(\"10.00", "r)\n                .borderRadius(10)\n               ", "   Button('update').borderRadius(8).backgroundColor(", "tringify(obj.$attrs.borderRadius));\n      console.lo", "n(TextAlign.Center).borderRadius(10).backgroundColor", "yle.Dashed\n  @State borderRadius: number = 10\n  @Sta", " is: \" + obj.$attrs.borderRadius);\n      expect(obj.", ".borderRadius).key(\"borderRadius\")\n        .width(12", "h('90%').height(50).borderRadius(10)\n        .backgr", "ull) {\n        this.borderRadius = eventData.data.bo", "tyle.Auto;\n  @State borderRadius: number = 70;\n\n  pr", "rderStyle)\n        .borderRadius(this.borderRadius)\n", "  expect(obj.$attrs.borderRadius).assertEqual(\"0.0vp", "t(100)\n            .borderRadius(10)\n            .ba", "  expect(obj.$attrs.borderRadius).assertEqual(\"70.00", "height(50)\n        .borderRadius(10)\n        .backgr", " getInspectorByKey('borderRadius');\n      console.in", "TRS_BORDERRADIUS = 'borderRadius'\nconst ATTRS_FLEXBA", "  Button('reverse').borderRadius(8).backgroundColor(", "   Button('finish').borderRadius(8).backgroundColor(", " .borderRadius(this.borderRadius).key(\"borderRadius\"", "ht(80).fontSize(16).borderRadius(10)\n              .", "ight(37)\n          .borderRadius(10)\n          .text", "t: true })\n        .borderRadius(8).backgroundColor(", " .borderRadius(this.borderRadius)\n        .borderWid", "onsole.log(\"cd text borderRadius\" + JSON.stringify(o", "(0xAFEEEE)\n        .borderRadius(this.borderRadius).", "(0xEE0000)\n        .borderRadius(10)\n        .width(", "or(0xFFFFFF)\n      .borderRadius(15)\n      .padding(", "us = eventData.data.borderRadius;\n      }\n      cons", "     Button('play').borderRadius(8).backgroundColor(", "    Button('pause').borderRadius(8).backgroundColor(", " .clip(true)\n      .borderRadius(20)\n      .key('ima", "ht(60).fontSize(16).borderRadius(10)\n        .textAl", "FFF)\n              .borderRadius(15)\n              .", "\n                  .borderRadius(15)\n               ", "ata: {\n            \"borderRadius\": 70\n          }\n  ", "   Button('cancel').borderRadius(8).backgroundColor(", "')\n                .borderRadius(15)\n               "], "files": ["BorderJsunit.test.ets", "badge.ets", "Text.ets", "TextJsunit.test.ets", "Constants.ets", "CheckboxGroupJsunit.test.ets", "Panel.ets", "navigation.ets", "CheckboxJsunit.test.ets", "list.ets", "panel.ets", "LoadingProgressJsunit.test.ets", "List.ets", "animatorOption.ets", "dragEvent2.ets", "shapeClipping.ets", "edgeEffect.ets", "border.ets", "dragEvent.ets", "scrollBar.ets", "listItem.ets", "ScrollBar.ets", "scrollCode.ets", "button.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onClickevent", "api_method_all": "onClick(event: (event?: ClickEvent) => void): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onClickevent", "api_method_all": "onClick(event: (event?: ClickEvent) => void): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onHoverevent", "api_method_all": "onHover(event: (isHover?: boolean) => void): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onHoverevent", "api_method_all": "onHover(event: (isHover?: boolean) => void): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "hoverEffect", "api_method_all": "hoverEffect(value: HoverEffect): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onMouseevent", "api_method_all": "onMouse(event: (event?: MouseEvent) => void): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onMouseevent", "api_method_all": "onMouse(event: (event?: MouseEvent) => void): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onTouchevent", "api_method_all": "onTouch(event: (event?: TouchEvent) => void): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onTouchevent", "api_method_all": "onTouch(event: (event?: TouchEvent) => void): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onKeyEventevent", "api_method_all": "onKeyEvent(event: (event?: KeyEvent) => void): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onKeyEventevent", "api_method_all": "onKeyEvent(event: (event?: KeyEvent) => void): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "focusable", "api_method_all": "focusable(value: boolean): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1055, "since": 8, "api_used": "\u662f", "lines": ["pNone,\n             focusablePropTrue : this.focu", "ne = this.$element(\"focusablePropNone\").getInspec", "ablePropNone : this.focusablePropNone,\n          ", "pTrue,\n             focusablePropFalse : this.foc", "False,\n             focusablePropNone : this.focu", "blePropFalse : this.focusablePropFalse, focusable", "tor()\n         this.focusablePropTrue = this.$ele", "lse : null,\n        focusablePropNone : null,\n   ", "ue : null,\n         focusablePropFalse : null,\n  ", "    .focusable(this.focusable)\n        .onFocus((", "  expect(obj.$attrs.focusable).assertEqual(true);", "ctor()\n        this.focusablePropFalse = this.$el", "opTrue,\n            focusablePropFalse : this.foc", "lor.Black)\n        .focusable(this.focusable)\n   ", "ctor()\n        this.focusablePropNone = this.$ele", " '#87CEFA'\n  @State focusable: boolean = false\n\n ", "rue : null,\n        focusablePropFalse : null,\n  ", "ull) {\n        this.focusable = eventData.data.fo", "ablePropTrue : this.focusablePropTrue,\n          ", "se = this.$element(\"focusablePropFalse\").getInspe", "ne : null,\n         focusablePropTrue : null,\n   ", "s.disabledPropNone, focusablePropTrue : this.focu", "ctor()\n        this.focusablePropTrue = this.$ele", " ATTRS_FOCUSABLE = 'focusable'\nconst ATTRS_CHECKA", "se : null,\n         focusablePropNone : null,\n   ", "one : null,\n        focusablePropTrue : null,\n   ", "le = eventData.data.focusable;\n      }\n    }\n  }\n", " if (eventData.data.focusable != null) {\n        ", "ue = this.$element(\"focusablePropTrue\").getInspec", "tor()\n         this.focusablePropNone = this.$ele", "tor()\n         this.focusablePropFalse = this.$el", "blePropFalse : this.focusablePropFalse,\n         ", "ata: {\n            \"focusable\": true\n          }\n", "focusablePropFalse, focusablePropNone : this.focu"], "files": ["ratingProps.test.js", "listItemGroupProps.test.js", "formProps.test.js", "focus.ets", "tabContentProps.test.js", "marqueeProps.test.js", "textProps.test.js", "imageAnimatorProps.test.js", "buttonProps.test.js", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "stackProps.test.js", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "TouchAbleJsunit.test.ets", "Constants.ets", "refreshProps.test.js", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "toolbarItemProps.test.js", "videoProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "optionProps.test.js", "badgeProps.test.js", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "gridColProps.test.js", "gridContainerProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onFocusevent", "api_method_all": "onFocus(event: () => void): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onFocusevent", "api_method_all": "onFocus(event: () => void): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onBlurevent", "api_method_all": "onBlur(event: () => void): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onBlurevent", "api_method_all": "onBlur(event: () => void): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "animation", "api_method_all": "animation(value: AnimateParam): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 552, "since": 7, "api_used": "\u662f", "lines": ["     console.info('[animationStatus01] END');\n   ", "nit() {\n  describe('animationStatus', function ()", "t default function  animationStatusJsunit() {\n  d", "     console.info('[animationStatus01] START');\n ", "     console.info('[animationStatus02] START');\n ", "onsole.log('Marquee animation complete onBounce')", "      console.info('animationStatus03 START');\n  ", " {\n            this.animation.reverse();\n        ", ");\n            this.animation.finish();\n         ", "        })\n        .animation({duration: 2000 , c", "ect(indexEvent.data.animationStatus).assertEqual(", ");\n            this.animation.play();\n          }", " {\n            this.animation.pause();\n          ", "};\n            this.animation.update(newoptions);", "ull) {\n        this.animationDuration = parseInt(", ");\n    });\n\n    it('animationStatus04', 0, async ", "  console.info(\"get animationStatus state success", ");\n    });\n\n    it('animationStatus03', 0, async ", "      console.info('animationStatus04 START');\n  ", ");\n    });\n\n    it('animationStatus01', 0, async ", "     console.info('[animationStatus02] END');\n   ", "s));\n        if (!(\"animationStatus\" == pages.nam", "      console.info(\"animationStatus03 click resul", "      console.info(\"animationStatus after each ca", "ptions);\n      this.animation.play();\n    });\n  }", "      console.info('animationStatus03 END');\n    ", "     console.info(\"[animationStatus01] obj is: \" ", " {\n            this.animation.onframe((value) => ", " {\n            this.animation.onfinish(() => {\n  ", "ber = 120;\n  @State animation: AnimatorResult = a", "     console.info(\"[animationStatus02] obj is: \" ", "      console.info(\"animationStatus03 get state r", "        uri: 'pages/animationStatus',\n      }\n   ", "onsole.log('Marquee animation complete onFinish')", " if (eventData.data.animationDuration != null) {\n", "      };\n      this.animation.update(repeatoption", "onsole.log('Marquee animation complete onStart')\n", " {\n                \"animationStatus\": this.state,", ");\n    });\n\n    it('animationStatus02', 0, async ", "geShow() {\n    this.animation.onrepeat(() => {\n  ", "console.error(\"push animationStatus page error: \"", " console.info(\"push animationStatus page success ", "mber = 150\n  @State animationDuration: number = 4", "rHeight(150)\n      .animationDuration(400)\n      ", "eInt(eventData.data.animationDuration);\n      }\n ", "      console.info(\"animationStatus03 on events_e", " {\n            this.animation.cancel();\n         "], "files": ["chartProps.test.js", "tabs.ets", "listProps.test.js", "Tab.ets", "marquee.ets", "AnimationStatusJsunit.test.ets", "animationStatus.ets", "animatorOption.ets", "index.js", "List.test.ets", "curves.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "transition", "api_method_all": "transition(value: TransitionOptions): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 45, "since": 7, "api_used": "\u662f", "lines": ["ype.Insert\n  @State transitionTypeTwo: TransitionT", "{\n    console.info('transition page show called');", "      console.info(\"transition after each called\")", "t.test.ets';\nimport transitionJsunit from './Trans", "  console.info(\"get transition state pages:\" + JSO", "      console.info(\"transitionTest_0200 get state ", "      console.info('transitionTest_0400 END');\n   ", "an = false\n  @State transitionTypeOne: TransitionT", "      console.info(\"transitionTest_0200 on events_", "rt default function transitionJsunit() {\n  describ", "      console.info('transitionTest_0400 START');\n ", "       console.log(\"transitionTest_0300 change com", "      console.info(\"transition state change called", "rollCodeJsunit();\n  transitionJsunit();\n  priority", ");\n    });\n\n    it('transitionTest_0400', 0, async", "      console.info(\"transitionTest_0200 emit actio", "nit() {\n  describe('transitionTest', function () {", "s));\n        if (!(\"transition\" == pages.name)) {\n", "      console.info(\"transitionTest_0200 start to e", "      console.info('transitionTest_0300 END');\n   ", "      console.info(\"transitionTest_0300 start to p", " console.info(\"push transition page result:\" + JSO", ");\n    });\n\n    it('transitionTest_0100', 0, async", "      console.info('transitionTest_0200 START');\n ", "      console.info(\"transitionTest_040 component o", "      console.info(\"transitionTest_0400 start to p", "sition({ type: this.transitionTypeOne, scale: { x:", "      console.info(\"transitionTest_0200 click resu", "ype.Delete\n  @State transitionTypeThree: Transitio", "        uri: 'pages/transition',\n      }\n      try", "      console.info('transitionTest_0200 END');\n   ", "      console.info(\"transitionTest_0100 component ", ");\n    });\n\n    it('transitionTest_0200', 0, async", "('image')\n        }.transition({ type: this.transi", "  console.info(\"get transition state pages.name:\" ", "console.error(\"push transition page error:\" + JSON", "sition({ type: this.transitionTypeTwo, scale: { x:", ");\n    });\n\n    it('transitionTest_0300', 0, async", "      console.info('transitionTest_0100 END');\n   ", "       console.log(\"transitionTest_0400 change com", "      console.info('transitionTest_0100 START');\n ", "'button1')\n        .transition({ type: this.transi", "      console.info(\"transitionTest_0300 component ", "      console.info('transitionTest_0300 START');\n "], "files": ["List.test.ets", "TransitionJsunit.test.ets", "transition.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "gesture", "api_method_all": "gesture(gesture: GestureType, mask?: GestureMask): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": ["borderStyle })\n    .gesture(\n    GestureGroup(G", "        uri: 'pages/gestureMode',\n      }\n     ", "his.touchable)\n    .gesture(\n    PanGesture({})", "      console.info(\"gestureMode after each call", "fsetY, z: 5 })\n    .gesture(\n    PanGesture({})", "console.error(\"push gestureMode page error \" + ", " getInspectorByKey('gestureMode');\n        cons", "   .margin(30)\n    .gesture(\n    TapGesture({ c", "nsole.log('sequence gesture canceled')\n      })", "     Text('sequence gesture\\n' + 'LongPress onA", "tY)\n    }\n    .key('gestureMode')\n    .translat", "  console.info(\"get gestureMode state success \"", "   .margin(30)\n    .gesture(\n    LongPressGestu", "      this.value = 'gesture onAction'\n         ", "value).assertEqual('gesture onAction')\n      }\n", " console.info(\"push gestureMode page success \" ", "ck\\n' + this.value).gesture(TapGesture()\n      "], "files": ["GestureModeJsunit.test.ets", "PriorityGestureJsunit.test.ets", "PanGesture.ets", "panDirection.ets", "parallelGesture.ets", "longPressGesture.ets", "ParallelGestureJsunit.test.ets", "gestureMode.ets", "tapGesture.ets", "priorityGesture.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "priorityGesture", "api_method_all": "priorityGesture(gesture: GestureType, mask?: GestureMask): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": [");\n    });\n\n    it('priorityGestureTest_0100', 0, async", " console.info(\"push priorityGesture page success \" + JS", "      console.info(\"priorityGestureTest_0100 get event ", "      console.info(\"priorityGestureTest_0100 on events_", "rt default function priorityGestureJsunit() {\n  describ", "ansitionJsunit();\n  priorityGestureJsunit();\n  parallel", "      console.info('priorityGestureTest_0100 sendTouchE", "t.test.ets';\nimport priorityGestureJsunit from './Prior", "      console.info(\"priorityGestureTest_0100 onTouch lo", "      console.info(\"priorityGesture after each called\")", "      console.info('priorityGestureTest_0100 testSendTo", "nit() {\n  describe('priorityGestureTest', function () {", "  console.info(\"get priorityGesture state success \" + J", "      this.value = 'priorityGesture onAction'\n      }),", "console.error(\"push priorityGesture page error \" + JSON", "s));\n        if (!(\"priorityGesture\" == pages.name)) {\n", "      console.info(\"priorityGestureTest_0100 rectInfo i", "        uri: 'pages/priorityGesture',\n      }\n      try", "   .margin(30)\n    .priorityGesture(\n    TapGesture()\n "], "files": ["List.test.ets", "PriorityGestureJsunit.test.ets", "priorityGesture.ets", "parallelGesture.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "parallelGesture", "api_method_all": "parallelGesture(gesture: GestureType, mask?: GestureMask): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["      this.value = 'parallelGesture onAction'\n      }),", "      console.info('parallelGestureTest_0100 testSendTo", "t.test.ets';\nimport parallelGestureJsunit from './Paral", "  console.info(\"get parallelGesture state success \" + J", "s));\n        if (!(\"parallelGesture\" == pages.name)) {\n", "      console.info(\"parallelGestureTest_0100 on events_", "rt default function parallelGestureJsunit() {\n  describ", "nit() {\n  describe('parallelGestureTest', function () {", "      console.info(\"parallelGesture after each called\")", ");\n    });\n\n    it('parallelGestureTest_0100', 0, async", "      console.info('parallelGestureTest_0100 sendTouchE", "      console.info(\"parallelGestureTest_0100 rectInfo i", "yGestureJsunit();\n  parallelGestureJsunit();\n  blankJsu", "e')\n    }\n    .key('parallelGesture')\n    .height(200)\n", "        uri: 'pages/parallelGesture',\n      }\n      try", " console.info(\"push parallelGesture page success \" + JS", "console.error(\"push parallelGesture page error \" + JSON", "      console.info(\"parallelGestureTest_0100 onTouch lo", "      console.info(\"parallelGestureTest_0100 get event "], "files": ["List.test.ets", "ParallelGestureJsunit.test.ets", "parallelGesture.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "blur", "api_method_all": "blur(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 111, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"blurValue\": 0x80000000\n ", "ull) {\n        this.blurValue = eventData.da", " {\n      Text('font blur').fontSize(15).font", " if (eventData.data.blurValue != null) {\n   ", "ata: {\n            \"blurValue\": 'error'\n    ", "t({\n      message: 'blur'\n    });\n  },\n\n  ke", "xt('text')\n        .blur(this.blurValue)\n   ", "xpect(objNew.$attrs.blur).assertEqual(10);\n ", "    });\n    },\n\n    blur(){\n        prompt.s", "          message: 'blur'\n        });\n    },", "ue = eventData.data.blurValue;\n      }\n     ", "\n        .blur(this.blurValue)\n        .widt", "xpect(objNew.$attrs.blur).assertEqual(0);\n  ", "  expect(obj.$attrs.blur).assertEqual(100);\n", "ata: {\n            \"blurValue\": 0x7FFFFFFF\n ", "xpect(objNew.$attrs.blur).assertEqual(-21474", "const ATTRS_BLUR = 'blur'\nconst ATTRS_GRIDOF", "us'\n    });\n  },\n\n  blur(){\n    prompt.showT", "sExample {\n  @State blurValue: string = 100;", "xpect(objNew.$attrs.blur).assertEqual(214748", "ata: {\n            \"blurValue\": \"10\"\n       "], "files": ["ImageEffectsJsunit.test.ets", "imageEffects.ets", "Constants.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "brightness", "api_method_all": "brightness(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": ["xpect(objNew.$attrs.brightness).assertEqual(214748", "  expect(obj.$attrs.brightness).assertEqual(20);\n ", "ffCanvas2.filter = 'brightness(0.4)';\n        offC", "ata: {\n            \"brightnessValue\": 0x80000000\n ", "xpect(objNew.$attrs.brightness).assertEqual(0.0000", " if (eventData.data.brightnessValue != null) {\n   ", "xpect(objNew.$attrs.brightness).assertEqual(15);\n ", "Row4')\n\n      Text('brightness').fontSize(15).font", "ATTRS_BRIGHTNESS = 'brightness'\nconst ATTRS_BACKDR", "ue = eventData.data.brightnessValue;\n      }\n     ", "ull) {\n        this.brightnessValue = eventData.da", "40).brightness(this.brightnessValue).key('centerRo", "ata: {\n            \"brightnessValue\": \"15\"\n       ", "ata: {\n            \"brightnessValue\": 'error'\n    ", "xpect(objNew.$attrs.brightness).assertEqual(-21474", "ata: {\n            \"brightnessValue\": 0x7FFFFFFF\n ", "tring= 10;\n  @State brightnessValue: string= 20;\n ", "h('90%').height(40).brightness(this.brightnessValu"], "files": ["ImageEffectsJsunit.test.ets", "imageEffects.ets", "Constants.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "contrast", "api_method_all": "contrast(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": ["xpect(objNew.$attrs.contrast).assertEqual(214748", "ata: {\n            \"contrastValue\": 0x80000000\n ", "ata: {\n            \"contrastValue\": 0x7FFFFFFF\n ", "ull) {\n        this.contrastValue = eventData.da", "ata: {\n            \"contrastValue\": 'error'\n    ", "xpect(objNew.$attrs.contrast).assertEqual(0.0000", "Row6')\n\n      Text('contrast').fontSize(15).font", "t ATTRS_CONTRAST = 'contrast'\nconst ATTRS_SATURA", "ata: {\n            \"contrastValue\": \"10\"\n       ", "  expect(obj.$attrs.contrast).assertEqual(20);\n ", "h('90%').height(40).contrast(this.contrastValue)", " if (eventData.data.contrastValue != null) {\n   ", "xpect(objNew.$attrs.contrast).assertEqual(0);\n  ", "ffCanvas2.filter = 'contrast(200%)';\n        off", "ue = eventData.data.contrastValue;\n      }\n     ", "t(40).contrast(this.contrastValue).key('centerRo", "xpect(objNew.$attrs.contrast).assertEqual(10);\n ", "tring= 50;\n  @State contrastValue: string= 20;\n "], "files": ["ImageEffectsJsunit.test.ets", "imageEffects.ets", "Constants.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "grayscale", "api_method_all": "grayscale(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["ffCanvas2.filter = 'grayscale(50%)';\n        offC", "Row3')\n\n      Text('grayscale').fontSize(15).font", " ATTRS_GRAYSCALE = 'grayscale'\nconst ATTRS_BLUR =", " .grayscale(`${this.grayscaleValue}`)\n        .ke", "his.context.filter('grayscale(50%)');\n    this.co", "ull) {\n        this.grayscaleValue = eventData.da", "  expect(obj.$attrs.grayscale).assertEqual(0);\n  ", "height(40)\n        .grayscale(`${this.grayscaleVa", "ue = eventData.data.grayscaleValue;\n      }\n     ", " if (eventData.data.grayscaleValue != null) {\n   ", "fsetY: 5 }\n  @State grayscaleValue: string= 10;\n "], "files": ["imageEffects.ets", "CheckboxJsunit.test.ets", "Constants.ets", "index.js", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "colorBlend", "api_method_all": "colorBlend(value: Color | string | Resource): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["fontColor)\n        .colorBlend(Color.Green)\n      "], "files": ["marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "saturate", "api_method_all": "saturate(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["xpect(objNew.$attrs.saturate).assertEqual(0);\n  ", "  expect(obj.$attrs.saturate).assertEqual(50);\n ", "ata: {\n            \"saturateValue\": 'error'\n    ", "tring= 20;\n  @State saturateValue: string= 50;\n ", "xpect(objNew.$attrs.saturate).assertEqual(214748", "h('90%').height(40).saturate(this.saturateValue)", "xpect(objNew.$attrs.saturate).assertEqual(0.0000", "t ATTRS_SATURATE = 'saturate'\nconst ATTRS_HUEROT", "t(40).saturate(this.saturateValue).key('centerRo", "ata: {\n            \"saturateValue\": 0x7FFFFFFF\n ", "ue = eventData.data.saturateValue;\n      }\n     ", "ata: {\n            \"saturateValue\": 0x80000000\n ", " if (eventData.data.saturateValue != null) {\n   ", "Json:\" + obj.$attrs.saturate);\n      expect(obj.", "ata: {\n            \"saturateValue\": \"40\"\n       ", "ull) {\n        this.saturateValue = eventData.da", "Row5')\n\n      Text('saturate').fontSize(15).font", "xpect(objNew.$attrs.saturate).assertEqual(40);\n ", "ffCanvas2.filter = 'saturate(30%)';\n        offC"], "files": ["ImageEffectsJsunit.test.ets", "imageEffects.ets", "Constants.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "sepia", "api_method_all": "sepia(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["ffCanvas2.filter = 'sepia(60%)';\n        offC", "onst ATTRS_SEPIA = 'sepia'\nconst ATTRS_ASPECT"], "files": ["Constants.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "invert", "api_method_all": "invert(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": ["h('90%').height(40).invert(`${this.invertValue", " if (eventData.data.invertValue != null) {\n   ", "Row7')\n\n      Text('invert').fontSize(15).font", "nst ATTRS_INVERT = 'invert'\nconst ATTRS_BRIGHT", "ffCanvas2.filter = 'invert(100%)';\n        off", "(40).invert(`${this.invertValue}`).key('center", "xpect(objNew.$attrs.invert).assertEqual(20);\n ", "xpect(objNew.$attrs.invert).assertEqual(214748", "ue = eventData.data.invertValue;\n      }\n     ", "ata: {\n            \"invertValue\": 0x7FFFFFFF\n ", "ata: {\n            \"invertValue\": 'error'\n    ", "ata: {\n            \"invertValue\": 0x80000000\n ", "tring= 20;\n  @State invertValue: string= 10;\n ", "  expect(obj.$attrs.invert).assertEqual(10);\n ", "ata: {\n            \"invertValue\": \"20\"\n       ", "xpect(objNew.$attrs.invert).assertEqual(0);\n  ", "ull) {\n        this.invertValue = eventData.da"], "files": ["ImageEffectsJsunit.test.ets", "imageEffects.ets", "Constants.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "hueRotate", "api_method_all": "hueRotate(value: number | string): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": [" ATTRS_HUEROTATE = 'hueRotate'\nconst ATTRS_INVERT", "  expect(obj.$attrs.hueRotate).assertEqual(10);\n ", "xpect(objNew.$attrs.hueRotate).assertEqual(214748", "Row8')\n\n      Text('hueRotate').fontSize(15).font", "xpect(objNew.$attrs.hueRotate).assertEqual(20);\n ", "ue = eventData.data.hueRotateValue;\n      }\n    }", "h('90%').height(40).hueRotate(`${this.hueRotateVa", ").hueRotate(`${this.hueRotateValue}`).key('center", "ull) {\n        this.hueRotateValue = eventData.da", "ata: {\n            \"hueRotateValue\": 0x80000000\n ", "ata: {\n            \"hueRotateValue\": 'error'\n    ", " if (eventData.data.hueRotateValue != null) {\n   ", "xpect(objNew.$attrs.hueRotate).assertEqual(-21474", "ata: {\n            \"hueRotateValue\": \"20\"\n       ", "ata: {\n            \"hueRotateValue\": 0x7FFFFFFF\n ", "xpect(objNew.$attrs.hueRotate).assertEqual(0);\n  ", "tring= 10;\n  @State hueRotateValue: string= 10\n  "], "files": ["ImageEffectsJsunit.test.ets", "imageEffects.ets", "Constants.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "backdropBlur", "api_method_all": "backdropBlur(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["TRS_BACKDROPBLUR = 'backdropBlur'\nconst ATTRS_GRAYSC", "ntSize(16)\n        .backdropBlur(this.backdropBlueVa", "rRow')\n\n      Text('backdropBlur').fontSize(15).font"], "files": ["imageEffects.ets", "Constants.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "translate", "api_method_all": "translate(value: TranslateOptions): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 280, "since": 7, "api_used": "\u662f", "lines": ["(Matrix4.identity().translate(eventData.data.matr", "     Row()\n        .translate(this.transformValue", "form: {\n            translate: '-120px',\n        ", "tate')\n\n      Text('translate').width('10%').font", "entity()\n          .translate(eventData.data.matr", "form: {\n            translateX: '100px',\n        ", " Matrix4.identity().translate({ x: 300 }).copy()\n", "'gestureMode')\n    .translate({ x: this.offsetX, ", "('PanGesture')\n    .translate({ x: this.offsetX, ", "Transform();\n  }\n\n  translate() {\n    this.contex", " Matrix4.identity().translate({x:100, y:200, z:30", "e: 300\n  }\n  @State translateValue: object= { x: ", " Matrix4.identity().translate(eventData.data.matr", " }).margin(80)\n    .translate({ x: this.offsetX, ", ");\n    this.context.translate(50, 50);\n    this.c", "tate')\n\n      Text('translate').width('90%').font", "100px',\n            translateY: '0px',\n          ", " '0px',\n            translateZ: '20px',\n         ", "form: {\n            translateX: '0px',\n          ", "(Matrix4.identity().translate({ x: 100, y: 100, z", " Matrix4.identity().translate({ x: 100, y: 100, z", "\n              this.translate();\n              th", " '0px',\n            translateY: '5px',\n          "], "files": ["animateTransformProps.test.js", "PanGesture.ets", "panDirection.ets", "pathProps.test.js", "rectProps.test.js", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "transForm.ets", "ellipseProps.test.js", "gestureMode.ets", "index.js", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "scale", "api_method_all": "scale(value: ScaleOptions): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1026, "since": 7, "api_used": "\u662f", "lines": ["(eventData.data.grayscaleValue != null) {\n   ", "RS_GRAYSCALE = 'grayscale'\nconst ATTRS_BLUR =", "  expect(obj.$attrs.scale.y).assertEqual('0.5", "   }\n      })\n    }.scale({ x: this.scale }).", "')\n\n      Text('grayscale').fontSize(15).font", "        .scale(this.scaleValue)\n        .widt", "ep(1000);\n      let scaleValue = { x: 1, y: 1", " eventData.data.grayscaleValue;\n      }\n     ", " Matrix4.identity().scale({ x: 3 }).copy()\n  ", "Y: 5 }\n  @State grayscaleValue: string= 10;\n ", "xpect(objNew.$attrs.scale.y).assertEqual('1.0", ".transitionTypeOne, scale: { x: 0, y: 1.0, z:", "  }.scale({ x: this.scale }).opacity(this.opa", "     \"scale\" : this.scale,\n              \"opa", "context.filter('grayscale(50%)');\n    this.co", "00, y: 5 }\n  @State scaleValue: object= { x: ", "arse(eventData.data.scaleValue);\n      }\n    ", " Matrix4.identity().scale(eventData.data.matr", "ue\": JSON.stringify(scaleValue)\n          }\n ", "  expect(obj.$attrs.scale.x).assertEqual('2.0", "ull) {\n        this.scaleValue = JSON.parse(e", "ata: {\n            \"scaleValue\": JSON.stringi", "ep(1000);\n      let scaleValue = {\n        x:", "xpect(objNew.$attrs.scale.x).assertEqual('1.0", "ate2')\n\n      Text('scale').width('90%').font", "nExample {\n  @State scale: number = 1\n  @Stat", ".transitionTypeTwo, scale: { x: 1.0, y: 0.0 }", "ayscale(`${this.grayscaleValue}`)\n        .ke", " if (eventData.data.scaleValue != null) {\n   ", "     Row()\n        .scale(this.scaleValue)\n  ", " {\n        this.grayscaleValue = eventData.da", "Example1 {\n  @State scale: number = 1\n  @Stat", "pect(obj.$attrs.grayscale).assertEqual(0);\n  ", "ht(40)\n        .grayscale(`${this.grayscaleVa", "a: {\n              \"scale\" : this.scale,\n    ", " Matrix4.identity().scale({x:5, y:1, z:1, cen"], "files": ["pageTransition2.ets", "pathProps.test.js", "circleProps.test.js", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "imageEffects.ets", "Constants.ets", "polylineProps.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "polygonProps.test.js", "index.js", "PageTransitionJsunit.test.ets", "animateTransformProps.test.js", "svgProps.test.js", "progressProps.test.js", "transition.ets", "transForm.ets", "sharedTransition.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "gridSpan", "api_method_all": "gridSpan(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 41, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.gridSpan).assertEqual(2);\n  ", "estGridSettings012] gridSpan: \" + JSON.stringify", "     .gridSpan(this.gridSpan)\n        .height(\"1", "  expect(obj.$attrs.gridSpan).assertEqual(1);\n  ", " getInspectorByKey('gridSpan');\n      console.in", "estGridSettings015] gridSpan: \" + JSON.stringify", "ata: {\n            \"gridSpan\": 2\n          }\n   ", "estGridSettings011] gridSpan: \" + JSON.stringify", "b2cb)\n        .key('gridSpan')\n      }\n      .he", "pan) {\n        this.gridSpan = eventData.data.gr", "ata: {\n            \"gridSpan\": 0x7FFFFFFF\n      ", "          Text('2').gridSpan(2)\n\n               ", "  expect(obj.$attrs.gridSpan).assertEqual(-21474", "ata: {\n            \"gridSpan\": 'error'\n         ", "ata: {\n            \"gridSpan\": 0x80000000\n      ", " if (eventData.data.gridSpan) {\n        this.gri", "an = eventData.data.gridSpan;\n      }\n    }\n  }\n", "tringify(obj.$attrs.gridSpan));\n      expect(obj", "\n        }\n        .gridSpan(this.gridSpan)\n    ", "  expect(obj.$attrs.gridSpan).assertEqual(0x7FFF", "umber = 1;\n  @State gridSpan: number = 1;\n  @Sta", "estGridSettings013] gridSpan: \" + JSON.stringify", "estGridSettings014] gridSpan: \" + JSON.stringify", "  expect(obj.$attrs.gridSpan).assertEqual(214748", "t ATTRS_GRIDSPAN = 'gridSpan'\nconst ATTRS_ZINDEX"], "files": ["Constants.ets", "GridContainer.ets", "gridSettings.ets", "GridSettingsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "gridOffset", "api_method_all": "gridOffset(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 41, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"gridOffset\": 0x80000000\n      ", "b2cb)\n        .key('gridOffset')\n\n        Row() {\n", "ata: {\n            \"gridOffset\": 'error'\n         ", "          Text('3').gridOffset(3)\n\n               ", "\n        }\n        .gridOffset(this.gridOffset)\n  ", "estGridSettings009] gridOffset: \" + JSON.stringify", "ata: {\n            \"gridOffset\": 0x7FFFFFFF\n      ", "estGridSettings006] gridOffset: \" + JSON.stringify", "ata: {\n            \"gridOffset\": 1\n          }\n   ", "  expect(obj.$attrs.gridOffset).assertEqual(-21474", "   .gridOffset(this.gridOffset)\n        .height(\"1", "estGridSettings010] gridOffset: \" + JSON.stringify", " if (eventData.data.gridOffset) {\n        this.gri", "  expect(obj.$attrs.gridOffset).assertEqual(0);\n  ", "tringify(obj.$attrs.gridOffset));\n      expect(obj", "  expect(obj.$attrs.gridOffset).assertEqual(214748", "estGridSettings008] gridOffset: \" + JSON.stringify", "  expect(obj.$attrs.gridOffset).assertEqual(1);\n  ", "umber = 1;\n  @State gridOffset: number = 0;\n\n  bui", "set) {\n        this.gridOffset = eventData.data.gr", "et = eventData.data.gridOffset;\n      } else if (e", " getInspectorByKey('gridOffset');\n      console.in", "ATTRS_GRIDOFFSET = 'gridOffset'\nconst ATTRS_FLEXSH", "  expect(obj.$attrs.gridOffset).assertEqual(0x7FFF", "estGridSettings007] gridOffset: \" + JSON.stringify"], "files": ["Constants.ets", "GridContainer.ets", "gridSettings.ets", "GridSettingsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "rotate", "api_method_all": "rotate(value: RotateOptions): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 392, "since": 7, "api_used": "\u662f", "lines": [" getInspectorByKey('rotate9');\n      let obj =", "  expect(obj.$attrs.rotate.angle).assertEqual(", "  expect(obj.$attrs.rotate.centerY).assertEqua", "(100)\n        .key('rotate8')\n      Image('/im", "xpect(objNew.$attrs.rotate.x).assertEqual('2.0", " getInspectorByKey('rotate');\n      let obj = ", "10 })\n        .key('rotate2')\n\n      Text('sca", " getInspectorByKey('rotate8');\n      let obj =", "  expect(obj.$attrs.rotate.z).assertEqual('1.0", "sMatrix4 {\n  @State rotateValue: object= {\n   ", "EEEE)\n        .key('rotate3')\n\n      Text('Mat", "xpect(objNew.$attrs.rotate.centerX).assertEqua", "(100)\n        .key('rotate7')\n      Image('/im", " getInspectorByKey('rotate');\n      let objNew", "ify(sendEventByKey('rotate5', 10, \"\")));\n     ", "0 }))\n        .key('rotate4')\n    }.width('100", "xpect(objNew.$attrs.rotate.y).assertEqual('2.0", " if (eventData.data.rotateValue != null) {\n   ", "       .rotate(this.rotateValue)\n        .widt", " 5 })\n        .key('rotate6')\n      Image('/im", "ull) {\n        this.rotateValue = JSON.parse(e", "umn() {\n      Text('rotate').width('90%').font", " getInspectorByKey('rotate6');\n      let objNe", "     Row()\n        .rotate(this.rotateValue)\n ", "arse(eventData.data.rotateValue);\n      }\n    ", "EEEE)\n        .key('rotate')\n\n      Text('tran", " getInspectorByKey('rotate3');\n      let objNe", "mExample {\n  @State rotateValue: object= {\n   ", "0 }))\n        .key('rotate4')\n      Button(\"ge", "ep(1000);\n      let rotateValue = {x: 2, y: 2,", "ata: {\n            \"rotateValue\": JSON.stringi", "ue\": JSON.stringify(rotateValue)\n          }\n ", "xpect(objNew.$attrs.rotate.centerY).assertEqua", "xpect(objNew.$attrs.rotate.z).assertEqual('2.0", "  expect(obj.$attrs.rotate.y).assertEqual('1.0", "  expect(obj.$attrs.rotate.x).assertEqual('1.0", "  expect(obj.$attrs.rotate.centerX).assertEqua", " Matrix4.identity().rotate({x:1, y:1, z:2, ang", "(100)\n        .key('rotate9')\n    }.width('100", " getInspectorByKey('rotate7');\n      let obj =", "olor(0x2788D9).key('rotate5')\n      Image('/im", "umn() {\n      Text('rotate').width('10%').font"], "files": ["ohosPrompt.ets", "pathProps.test.js", "circleProps.test.js", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "polylineProps.test.js", "OhosPromptJsunit.test.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "polygonProps.test.js", "index.js", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "animateMotionProps.test.js", "svgTextProps.test.js", "transForm.ets", "motionPath.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "transform", "api_method_all": "transform(value: object): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 353, "since": 7, "api_used": "\u662f", "lines": ["h.PI / 180);\n  }\n\n  transform() {\n    this.contex", "\n              this.transform();\n              th", "ransformProp : this.transformProp,\n            id", "e('/images/bg.jpg').transform(this.matrix4)\n     ", ", z: 30 })\n  @State transformValue: object= Matri", "op = this.$element(\"transformProp\").getInspector(", "e('/images/bg.jpg').transform(this.matrix6)\n     ", ".info(\"[canvas] get transform----\" + data);\n  }\n\n", "rop : null,\n        transformProp : null,\n       ", "  expect(obj.$attrs.transform.type)\n        .asse", "15px 25px',\n        transformOrigin:'center top'\n", ");\n    this.context.transform(1, 0.1, 0.01, 1, 10", "tion:'0px',\n        transformOrigin:'center cente", "  expect(obj.$attrs.transform.matrix)\n      .asse", ", y: 0.5 }\n  @State transformValue: object= Matri", "e('/images/bg.jpg').transform(this.matrix5)\n     ", "thProp,\n            transformProp : this.transfor", "  expect(obj.$attrs.transform.matrix)\n        .as", "(0xAFEEEE)\n        .transform(Matrix4.identity().", "ctor()\n        this.transformProp = this.$element", "ngify(objNew.$attrs.transform)).assertEqual('{}')", "s = [\n    {\n        transform: {\n            tran", " Matrix4.identity().transformPoint([100, 10])\n  @", "padding(5)\n        .transform(this.matrix2.combin", "    .translate(this.transformValue)\n        .widt", "   },\n    {\n        transform: {\n            tran", "10px 20px',\n        transformOrigin:'left top'\n  "], "files": ["pathProps.test.js", "rectProps.test.js", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "transForm.ets", "OhosMatrix4Jsunit.test.ets", "ellipseProps.test.js", "index.js", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onAppearevent", "api_method_all": "onAppear(event: () => void): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onAppearevent", "api_method_all": "onAppear(event: () => void): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDisAppearevent", "api_method_all": "onDisAppear(event: () => void): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDisAppearevent", "api_method_all": "onDisAppear(event: () => void): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onAreaChangeevent", "api_method_all": "onAreaChange(event: (oldValue: Area, newValue: Area) => void): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onAreaChangeevent", "api_method_all": "onAreaChange(event: (oldValue: Area, newValue: Area) => void): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "visibility", "api_method_all": "visibility(value: Visibility): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 94, "since": 7, "api_used": "\u662f", "lines": ["nit() {\n  describe('visibilityTest', function () {", "yExample {\n  @State visibility: Visibility = Visib", "  globalJsunit();\n  visibilityJsunit();\n  girdCont", "s));\n        if (!(\"visibility\" == pages.name)) {\n", "      console.info(\"visibility after each called\")", "CCCC)\n        Row().visibility(Visibility.Visible)", "console.error(\"push visibility page error:\" + err)", "t.test.ets';\nimport visibilityJsunit from './Visib", " console.info(\"push visibility page result:\" + JSO", "ata: {\n            \"visibility\": 0.11111\n         ", "  expect(obj.$attrs.visibility).assertEqual('Visib", "   .visibility(this.visibility)\n          .width('", "ata: {\n            \"visibility\": Visibility.None,\n", "ull) {\n        this.visibility = eventData.data.vi", "GradientJsunit();\n  visibilityJsunit();\n  position", "  expect(obj.$attrs.visibility).assertEqual(\"Visib", "   Row()\n          .visibility(this.visibility)\n  ", "rt default function visibilityJsunit() {\n  describ", "  console.info(\"get visibility state pages:\" + JSO", "ata: {\n            \"visibility\": 'nothing',\n      ", " if (eventData.data.visibility != null) {\n        ", "ty = eventData.data.visibility;\n      }\n    }\n  }\n", "ata: {\n            \"visibility\": Visibility.Hidden", "   Row()\n          .visibility(Visibility.Visible)", "ATTRS_VISIBILITY = 'visibility'\nconst ATTRS_PASSWO", "  console.info(\"get visibility state pages.name:\" ", "  if(eventData.data.visibility != null) {\n        ", "w().visibility(this.visibility).width('90%').heigh", "CCCC)\n        Row().visibility(this.visibility).wi", "      console.info(\"visibility beforeEach start\");", "        uri: 'pages/visibility',\n      }\n      try"], "files": ["dragEvent.ets", "richtextProps.test.js", "visibility.ets", "CheckboxJsunit.test.ets", "VisibilityJsunit.test.ets", "TextJsunit.test.ets", "Constants.ets", "dragEvent2.ets", "index.js", "List.test.ets", "Text.ets", "FormComponentPage.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "flexGrow", "api_method_all": "flexGrow(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["row(2)')\n          .flexGrow(2)\n          .heigh", "row(1)')\n          .flexGrow(1)\n          .heigh", "ull) {\n        this.flexGrow = eventData.data.fl", "onsole.log(\"cd text flexGrow\" + JSON.stringify(o", "x() {\n        Text('flexGrow(2)')\n          .fle", "FEEEE)\n\n      Text('flexGrow').key(\"flexGrow\").f", "  expect(obj.$attrs.flexGrow).assertEqual(0);\n  ", "  expect(obj.$attrs.flexGrow).assertEqual(5)\n   ", "flexBasis)\n        .flexGrow(this.flexGrow)\n    ", "nter)\n        Text('flexGrow(1)')\n          .fle", " y: \"50\" }\n  @State flexGrow: number = 5\n  @Stat", "ow = eventData.data.flexGrow;\n      }\n      if (", "xt('flexGrow').key(\"flexGrow\").fontSize(9).fontC", "ze(17.4)\n          .flexGrow(1)\n        Text(val", "tringify(obj.$attrs.flexGrow));\n      console.lo", "     .flexGrow(this.flexGrow)\n        .flexShrin", " if (eventData.data.flexGrow != null) {\n        ", " getInspectorByKey('flexGrow');\n      console.in", "t ATTRS_FLEXGROW = 'flexGrow'\nconst ATTRS_OPACIT"], "files": ["flex.ets", "TextJsunit.test.ets", "Constants.ets", "fontWeight.ets", "FlexJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "flexShrink", "api_method_all": "flexShrink(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["FEEEE)\n\n      Text('flexShrink').fontSize(9).fontC", "nter)\n        Text('flexShrink(2)')\n          .fle", "ink(0)')\n          .flexShrink(0)\n          .key(\"", " getInspectorByKey('flexShrink');\n      console.in", "number = 5\n  @State flexShrink: number = 2\n  @Stat", " if (eventData.data.flexShrink != null) {\n        ", "tringify(obj.$attrs.flexShrink));\n      console.lo", "r)\n        Text('no flexShrink')\n          .width(", "ink(2)')\n          .flexShrink(2)\n          .width", "(0)\n          .key(\"flexShrink\")\n          .width(", "  expect(obj.$attrs.flexShrink).assertEqual(2)\n   ", "  expect(obj.$attrs.flexShrink).assertEqual(0);\n  ", "   .flexShrink(this.flexShrink)\n        .alignSelf", "ull) {\n        this.flexShrink = eventData.data.fl", " }) {\n        Text('flexShrink(0)')\n          .fle", "onsole.log(\"cd text flexShrink\" + JSON.stringify(o", ".flexGrow)\n        .flexShrink(this.flexShrink)\n  ", "nk = eventData.data.flexShrink;\n      }\n      if (", "ATTRS_FLEXSHRINK = 'flexShrink'\nconst ATTRS_FLEXGR"], "files": ["flex.ets", "TextJsunit.test.ets", "Constants.ets", "FlexJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "flexBasis", "api_method_all": "flexBasis(value: number | string): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["is.offset)\n        .flexBasis(this.flexBasis)\n   ", "nter)\n        Text('flexBasis(100)')\n          .f", "o')\n          .key(\"flexBasis\")\n          .width(", "  expect(obj.$attrs.flexBasis).assertEqual(\"auto\"", "    .flexBasis(this.flexBasis)\n        .flexGrow(", "is = eventData.data.flexBasis;\n      }\n      if (", "auto\")')\n          .flexBasis('auto')\n          .", "s(100)')\n          .flexBasis('100')\n          .h", "x() {\n        Text('flexBasis(\"auto\")')\n         ", " if (eventData.data.flexBasis != null) {\n        ", " getInspectorByKey('flexBasis');\n      console.in", " 5 }) {\n      Text('flexBasis').fontSize(9).fontC", "ull) {\n        this.flexBasis = eventData.data.fl", "number = 2\n  @State flexBasis: number = 0\n  @Stat", " ATTRS_FLEXBASIC = 'flexBasis'\nconst ATTRS_VISIBI"], "files": ["flex.ets", "Constants.ets", "CheckboxGroupJsunit.test.ets", "FlexJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "alignSelf", "api_method_all": "alignSelf(value: ItemAlign): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 58, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.alignSelf).assertEqual(\"ItemA", "nsole.log(\"cd text1 alignSelf\" + JSON.stringify(o", "ction.Rtl)\n        .alignSelf(ItemAlign.Center)\n ", "onsole.log(\"cd text alignSelf\" + JSON.stringify(o", "number = 0\n  @State alignSelf: ItemAlign = ItemAl", ".TopStart)\n        .alignSelf(ItemAlign.Baseline)", "nment.End)\n        .alignSelf(ItemAlign.Stretch)\n", "nsole.log(\"cd text4 alignSelf\" + JSON.stringify(o", "ult:\n          this.alignSelf = ItemAlign.Auto;\n ", "er':\n          this.alignSelf = ItemAlign.Center;", " {\n        Text('no alignSelf,height:80').width('", "nd':\n          this.alignSelf = ItemAlign.End;\n  ", "ch':\n          this.alignSelf = ItemAlign.Stretch", "lexShrink)\n        .alignSelf(this.alignSelf)\n   ", "tringify(obj.$attrs.alignSelf));\n      console.lo", "tch (eventData.data.alignSelf) {\n        case 'Au", "nsole.log(\"cd text3 alignSelf\" + JSON.stringify(o", "nsole.log(\"cd text5 alignSelf\" + JSON.stringify(o", "    .alignSelf(this.alignSelf)\n        .borderSty", "r)\n        Text('no alignSelf,height:100').width(", "rt':\n          this.alignSelf = ItemAlign.Start;\n", " if (eventData.data.alignSelf != null) {\n        ", "ction.Ltr)\n        .alignSelf(ItemAlign.Start)\n  ", "nment.Top)\n        .alignSelf(ItemAlign.End)\n    ", " getInspectorByKey('alignSelf');\n      console.in", "nsole.log(\"cd text2 alignSelf\" + JSON.stringify(o", "ull) {\n        this.alignSelf = eventData.data.al", "ne':\n          this.alignSelf = ItemAlign.Baselin", " ATTRS_ALIGNSELF = 'alignSelf'\nconst ATTRS_BORDER", "lf = eventData.data.alignSelf;\n      }\n    }\n  }\n", "t('alignSelf').key(\"alignSelf\").fontSize(9).fontC", "to':\n          this.alignSelf = ItemAlign.Auto;\n ", "FEEEE)\n\n      Text('alignSelf').key(\"alignSelf\").", "tretch')\n          .alignSelf(ItemAlign.Stretch)\n", "nter)\n        Text('alignSelf stretch')\n         "], "files": ["flex.ets", "TextJsunit.test.ets", "Constants.ets", "CheckboxGroupJsunit.test.ets", "RowJsunit.test.ets", "FlexJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "displayPriority", "api_method_all": "displayPriority(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["              .key('displayPriority')\n          } else ", "2cb)\n              .displayPriority(item.priority)\n    ", " getInspectorByKey('displayPriority');\n      console.in", "2cab3)\n\n      Text('displayPriority 4').fontSize(20).fo", "_DISPLAYPRIORITY = 'displayPriority'\nconst ATTRS_LAYOUT", "  expect(obj.$attrs.displayPriority).assertEqual(5);\n  ", "ty = eventData.data.displayPriority;\n        this.prior", "ity: \" + obj.$attrs.displayPriority);\n      expect(obj.", "youtConstraints004] displayPriority: \" + obj.$attrs.dis", "  expect(obj.$attrs.displayPriority).assertEqual(1);\n  ", "youtConstraints003] displayPriority: \" + obj.$attrs.dis", "ata: {\n            \"displayPriority\": 5\n          }\n   ", " if (eventData.data.displayPriority) {\n        let prio"], "files": ["layoutConstraints.ets", "LayoutConstraintsJsunit.test.ets", "Constants.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "zIndex", "api_method_all": "zIndex(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 48, "since": 7, "api_used": "\u662f", "lines": ["       .zIndex(this.zIndex)\n          .key('zI", "ex = eventData.data.zIndex\n      }\n    }\n  }\n\n", "t.test.ets';\nimport zIndexJsunit from './ZInde", "      console.info(\"zIndex beforeEach start\");", "ata: {\n            \"zIndex\": 889900444\n       ", "nit() {\n  describe('zIndexTest', function () {", "cond child, default zIndex(0)')\n          .siz", "  expect(obj.$attrs.zIndex).assertEqual(1);\n  ", "ata: {\n            \"zIndex\": -5\n          }\n  ", "      console.info(\"zIndex after each called\")", "tringify(obj.$attrs.zIndex));\n      console.lo", "  console.info(\"get zIndex state pages: \" + JS", "s));\n        if (!(\"zIndex\" == pages.name)) {\n", "nst ATTRS_ZINDEX = 'zIndex'\nconst ATTRS_USEALI", " Text('third child, zIndex(1)')\n          .siz", "        uri: 'pages/zIndex',\n      }\n      try", "opStart)\n          .zIndex(this.zIndex)\n      ", "\n    console.info('[zIndex] page show called '", "ull) {\n        this.zIndex = eventData.data.zI", "  console.info(\"get zIndex state pages.name:\" ", "xExample {\n  @State zIndex: number = 1;\n\n  onP", "rt default function zIndexJsunit() {\n  describ", " console.info(\"push zIndex page result:\" + JSO", "onsole.log(\"cd text zIndex\" + JSON.stringify(o", "  expect(obj.$attrs.zIndex).assertEqual(-5);\n ", " if (eventData.data.zIndex != null) {\n        ", "y\n@Component\nstruct zIndexExample {\n  @State z", "an = false\n  @State zIndex: number = 1\n  @Stat", " getInspectorByKey('zIndex');\n      let obj = ", "  expect(obj.$attrs.zIndex).assertEqual(4);\n  ", "ata: {\n            \"zIndex\": 4\n          }\n   ", "s.enabled)\n        .zIndex(this.zIndex)\n      ", "  expect(obj.$attrs.zIndex).assertEqual(1)\n   ", "       .zIndex(this.zIndex)\n        .fontColor", "console.error(\"push zIndex page error:\" + err)", "xbbb2cb)\n          .zIndex(2)\n        Text('se", "  appearJsunit();\n  zIndexJsunit();\n  ellipseJ", "ex)\n          .key('zIndex')\n      }\n    }.wid", " Text('first child, zIndex(2)')\n          .siz", "  expect(obj.$attrs.zIndex).assertEqual(889900"], "files": ["TextJsunit.test.ets", "ZIndexJsunit.test.ets", "Constants.ets", "zIndex.ets", "List.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "sharedTransition", "api_method_all": "sharedTransition(id: string, options?: sharedTransitionOptions): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": ["(50)\n              .sharedTransition('sharedImage1', { d", "      console.info('sharedTransitionTest_0100 END');\n   ", ");\n    });\n\n    it('sharedTransitionTest_0100', 0, async", "  console.info(\"get sharedTransition state pages.name:\" ", "      console.info('sharedTransitionTest_0200 START');\n ", ");\n    });\n\n    it('sharedTransitionTest_0200', 0, async", "      console.info(\"sharedTransition after each called\")", "        uri: 'pages/sharedTransition',\n      }\n      try", "      console.info(\"sharedTransitionTest_0400 click resu", ".assertEqual('pages/sharedTransition2')\n      console.in", "console.error(\"push sharedTransition page error:\" + JSON", "{\n    console.info('sharedTransition page show called');", "      console.info('sharedTransitionTest_0400 END');\n   ", "s));\n        if (!(\"sharedTransition\" == pages.name)) {\n", "      console.info(\"sharedTransitionTest_0400 get state ", "      console.info('sharedTransitionTest_0100 START');\n ", ");\n    });\n\n    it('sharedTransitionTest_0300', 0, async", " console.info(\"push sharedTransition page result:\" + JSO", "or({ target: 'pages/sharedTransition2', type: Navigation", "      console.info('sharedTransitionTest_0300 END');\n   ", "t.test.ets';\nimport sharedTransitionJsunit from './Share", "      console.info(\"sharedTransitionTest_0200 component ", "\n  blankJsunit();\n  sharedTransitionJsunit();\n  aboutToD", "      console.info(\"sharedTransitionTest_0300 component ", ");\n    });\n\n    it('sharedTransitionTest_0400', 0, async", "       console.log(\"sharedTransitionTest_0400 change com", "th(150).height(150).sharedTransition('sharedImage1')\n   ", "      console.info(\"sharedTransitionTest_0400 start to p", "      console.info(\"sharedTransition page state change c", "rt default function sharedTransitionJsunit() {\n  describ", "nit() {\n  describe('sharedTransitionTest', function () {", "      console.info(\"sharedTransitionTest_0100 component ", "      console.info('sharedTransitionTest_0200 END');\n   ", "      console.info('sharedTransitionTest_0400 START');\n ", "  console.info(\"get sharedTransition state pages:\" + JSO", "      console.info(\"sharedTransitionTest_0400 on events_", "      console.info('sharedTransitionTest_0300 START');\n ", "      console.info(\"sharedTransition beforeEach start\");"], "files": ["List.test.ets", "sharedTransition2.ets", "SharedTransitionJsunit.test.ets", "sharedTransition.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "direction", "api_method_all": "direction(value: Direction): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 596, "since": 7, "api_used": "\u662f", "lines": ["lder() {\n    Flex({ direction: FlexDirection.Colu", "on = eventData.data.direction;\n        console.lo", "ata: {\n            \"direction\": Direction.Ltr\n   ", "ll: 'forwards',\n    direction: \"normal\",\n    begi", " if (eventData.data.direction != null) {\n        ", "uild() {\n    Flex({ direction: FlexDirection.Colu", " angle: 80,\n        direction: GradientDirection.", "ion: \" + obj.$attrs.direction);\n      expect(obj.", "'90%')\n      Flex({ direction: FlexDirection.Row,", "  expect(obj.$attrs.direction).assertEqual('Direc", ".$attrs.constructor.direction).assertEqual('FlexD", " {\n    Flex({\n      direction: FlexDirection.Colu", "    .direction(this.direction)\n        .key('rowD", "gin(5)\n      Flex({ direction: FlexDirection.Row,", "dth('90%')\n        .direction(this.direction)\n   ", "  events_emitter.on(directionChangeEvent, this.st", "    Text('slider in direction set').fontSize(9).f", "   Text('slider out direction set').fontSize(9).f", ".InSet,\n            direction: this.decorationVal", ".TopStart;\n  @State direction: Direction = Direct", "gn')\n\n        Text('direction').fontSize(20).font", "ction value\" + this.direction);\n      }\n    }\n  }", "'90%')\n      Flex({ direction: FlexDirection.Row ", "xExample {\n  @State direction: FlexDirection = Fl", "umber = 3;\n  @State direction: Axis = Axis.Horizo", "weekStyle)\n        .direction(this.direction)\n   ", "uild() {\n    Flex({ direction: FlexDirection.Row,", "OutSet,\n            direction: Axis.Vertical\n    ", " ATTRS_DIRECTION = 'direction'\nconst ATTRS_ALIGN ", "\n    angle: 90,\n    direction: GradientDirection.", "rations: 1,\n        direction: 'alternate',\n     ", " if (eventData.data.direction) {\n        this.dir", "CallBack);\n\n    let directionChangeEvent = {\n    ", "ion) {\n        this.direction = eventData.data.di", "ull) {\n        this.direction = eventData.data.di", "on = eventData.data.direction;\n      } else if (e", ".log(\"Calendar page direction value\" + this.direc", "    .direction(this.direction)\n        .backgroun", "ttrs.linearGradient.direction).assertEqual('Gradi"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "Qrcode.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "transition.ets", "Image.ets", "List.test.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "positionSetting.ets", "animatorOption.ets", "tapGesture.ets", "FlexJsunit.test.ets", "flexDirection.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "flex.ets", "marqueeProps.test.js", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "BackgroundJsunit.test.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "GradientDirectionJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "RowJsunit.test.ets", "index.js", "ohosRouterA.ets", "Link.ets", "slider.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "align", "api_method_all": "align(value: Alignment): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 405, "since": 7, "api_used": "\u662f", "lines": [" width: 1 })\n      .alignItems(this.alignItem", "to':\n          this.alignSelf = ItemAlign.Aut", " getInspectorByKey('alignSelf');\n      consol", "ne':\n          this.alignSelf = ItemAlign.Bas", "ata: {\n            \"alignItems\":HorizontalAli", "lf = eventData.data.alignSelf;\n      }\n    }\n", "t('alignSelf').key(\"alignSelf\").fontSize(9).f", "  expect(obj.$attrs.alignSelf).assertEqual(\"I", "rt':\n          this.alignSelf = ItemAlign.Sta", "FEEEE)\n\n      Text('alignSelf').key(\"alignSel", "  expect(obj.$attrs.alignItems).assertEqual('", "ms = eventData.data.alignItems;\n      }\n    }", "      }\n      .key(\"alignItemsColumn\")\n      ", "nExample {\n  @State alignItems: HorizontalAli", "erlay(this.text2, { align: Alignment.Bottom, ", "erlay(this.text1, { align: Alignment.Bottom, ", "oundColor(0xd2cab3).align(Alignment.TopStart)", " {\n        Text('no alignSelf,height:80').wid", "nt = eventData.data.align\n      }\n      if (e", "   .alignItems(this.alignItems)\n    }.width('", "er':\n          this.alignSelf = ItemAlign.Cen", " if (eventData.data.align != null) {\n        ", " if (eventData.data.alignSelf != null) {\n    ", "xc1cbac)\n          .align(Alignment.TopStart)", "ull) {\n        this.alignItems = eventData.da", "ch':\n          this.alignSelf = ItemAlign.Str", " FlexDirection.Row, alignItems: ItemAlign.Cen", "  if(eventData.data.alignItems != null) {\n   ", "exDirection.Column, alignItems: ItemAlign.Cen", "le,\n              { align: this.alignment, of", "      { align: this.alignment, offset: { x: t", " getInspectorByKey('alignItemsColumn');\n     ", "r)\n        Text('no alignSelf,height:100').wi", "nter)\n        Text('alignSelf stretch')\n     ", "ild() {\n    Stack({ alignContent: Alignment.T", "umn() {\n      Text('alignItems').fontSize(9).", "ull) {\n        this.alignment = eventData.dat", "ult:\n          this.alignSelf = ItemAlign.Aut", "tretch')\n          .alignSelf(ItemAlign.Stret", "ction.Column,\n      alignItems: ItemAlign.Cen", "mber = -15\n  @State alignment: Alignment = Al", "= index\n    })\n    .align(Alignment.Center)\n ", "nd':\n          this.alignSelf = ItemAlign.End", "ull) {\n        this.alignSelf = eventData.dat", "tch (eventData.data.alignSelf) {\n        case"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "playMode.ets", "enumsHorizontalAlign.ets", "Qrcode.ets", "Row.ets", "imageFit.ets", "Span.ets", "CheckboxGroupJsunit.test.ets", "column.ets", "richText.ets", "Progress.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "OverlayJsunit.test.ets", "Divider.ets", "border.ets", "scrollBar.ets", "transition.ets", "Image.ets", "Column.ets", "scrollCode.ets", "button.ets", "touch.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "enumsVerticalAlign.ets", "bindMenu.ets", "TextJsunit.test.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "positionSetting.ets", "tapGesture.ets", "FlexJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "image.ets", "row.ets", "Marquee.ets", "flex.ets", "PatternLock.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "enumsItemAlign.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "calendar.ets", "dragEvent.ets", "StackJsunit.test.ets", "Button.ets", "fontWeight.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "zIndex.ets", "DataPanel.ets", "touchAble.ets", "AlertDialog.ets", "RowJsunit.test.ets", "ColumnJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "Toggle.ets", "NavigationJsunit.test.ets", "Calendar.ets", "gestureMode.ets", "motionPath.ets", "Badge.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "position", "api_method_all": "position(value: Position): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 103, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.position.x).assertEqual('25.", " console.info(\"push positionSetting page result:", "ion1);\n        this.position2 = JSON.parse(event", "on')\n\n        Text('position').fontSize(20).font", "arse(eventData.data.position1);\n        this.pos", " 25 })\n            .position({ x: '100%', y: '10", ")\n          Text(`4 position(${this.position2.x}", " getInspectorByKey('position1');\n      console.i", "t('background image position').fontSize(9).width", ".firstState)\n      .position({ x: '35%', y: 0 })", "      console.info(\"positionSetting after each c", "t ATTRS_POSITION = 'position'\nconst ATTRS_POSITI", "arse(eventData.data.position2);\n      } else if ", "osition2.x, y: this.position2.y })\n            .", "(`4 position(${this.position2.x}, ${this.positio", ".position({ x: this.position1.x, y: this.positio", "  events_emitter.on(positionChangeEvent, this.st", "s));\n        if (!(\"positionSetting\" == pages.na", "  expect(obj.$attrs.position.y).assertEqual('15.", "console.error(\"push positionSetting page error:\"", " if (eventData.data.position1) {\n        this.po", "{\n    console.info(\"position page stateChangCall", "PositionSetting005] position1: \" + JSON.stringif", "extLabel('')\n      .position({ x: '35%', y: 0 })", "rt default function positionSettingJsunit() {\n  ", "  console.info(\"get positionSetting state pages:", "        uri: 'pages/positionSetting',\n      }\n  ", ")\n            .key('position1')\n          Text('", ")\n            .key('position2')\n        }.width(", "PositionSetting005] position: \" + JSON.stringify", "CallBack);\n\n    let positionChangeEvent = {\n    ", "osition1.x, y: this.position1.y })\n            .", "  })\n      }\n      .position({ x: '35%', y: 0 })", "sibilityJsunit();\n  positionSettingJsunit();\n  b", "5, y: 15};\n  @State position2: {x: string, y: st", "ze(20)\n            .position({ x: this.position2", "on1) {\n        this.position1 = JSON.parse(event", "      console.info(\"positionSetting beforeEach s", "osition1.x}, ${this.position1.y})`)\n            ", "0 })\n      }\n      .position({ x: '35%', y: 0 })", ")\n          Text(`2 position(${this.position1.x}", "  console.info(\"get positionSetting state pages.", "(`2 position(${this.position1.x}, ${this.positio", "tringify(obj.$attrs.position));\n      expect(obj", "ction.Rtl;\n  @State position1: {x: string, y: st", ".position({ x: this.position2.x, y: this.positio", "t.test.ets';\nimport positionSettingJsunit from '", " getInspectorByKey('position2');\n      console.i", "osition2.x}, ${this.position2.y})`)\n            ", "Start)\n            .position({ x: this.position1"], "files": ["backgroundAndSizeSetting.ets", "stepper.ets", "WebPage.ets", "PositionSettingJsunit.test.ets", "TextJsunit.test.ets", "Constants.ets", "Stepper.ets", "positionSetting.ets", "background.ets", "bindPopup.ets", "placement.ets", "motionPath.ets", "BadgeJsunit.test.ets", "List.test.ets", "badge.ets", "Text.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "markAnchor", "api_method_all": "markAnchor(value: Position): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 35, "since": 7, "api_used": "\u662f", "lines": [".position)\n        .markAnchor(this.markAnchor)\n  ", "  expect(obj.$attrs.markAnchor.y).assertEqual('0.0", "onsole.log(\"cd text markAnchor type\" + typeof (obj", "onsole.log(\"cd text markAnchor\" + JSON.stringify(o", " 25 })\n            .markAnchor({ x: this.anchor.x,", "onsole.log(\"cd text markAnchor1\" + JSON.stringify(", "d })\n\n        Text('markAnchor').fontSize(20).font", " 25 })\n            .markAnchor({ x: 25, y: 25 })\n ", "tringify(obj.$attrs.markAnchor));\n      expect(obj", "  expect(obj.$attrs.markAnchor.x).assertEqual('0.0", "tringify(obj.$attrs.markAnchor)).assertEqual(JSON.", "ata: {\n            \"markAnchor\": JSON.stringify(da", "  expect(obj.$attrs.markAnchor.y).assertEqual('25.", "  events_emitter.on(markAnchorChangeEvent, this.st", "   .markAnchor(this.markAnchor)\n        .offset(th", " @State markAnchor: markAnchor<{\n    x: string,\n  ", " getInspectorByKey('markAnchor');\n      console.in", "tringify(obj.$attrs.markAnchor));\n      console.lo", "arse(eventData.data.markAnchor);\n      } else if (", "onsole.log(\"cd text markAnchor type1\" + typeof ({\n", ")\n            .key('markAnchor')\n          Image('", "ATTRS_MARKANCHOR = 'markAnchor'\nconst ATTRS_MARKAN", "  expect(obj.$attrs.markAnchor.x).assertEqual('25.", "PositionSetting008] markAnchor: \" + JSON.stringify", "CallBack);\n\n    let markAnchorChangeEvent = {\n    ", " typeof (obj.$attrs.markAnchor));\n      console.lo", " y: \"50\" }\n  @State markAnchor: markAnchor<{\n    x", " if (eventData.data.markAnchor) {\n        this.anc"], "files": ["TextJsunit.test.ets", "Constants.ets", "positionSetting.ets", "PositionSettingJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "offset", "api_method_all": "offset(value: Position): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 372, "since": 7, "api_used": "\u662f", "lines": ["     xs: { span: 2, offset: 6 },\n             ", " color: Color.Gray, offsetX: 5, offsetY: 5 }\n ", "ffsetX: 0x80000000, offsetY: 0x80000000 };\n   ", "rror',\n            \"offset\": 'error'\n         ", "n\": 1,\n            \"offset\": 2\n          }\n   ", "00000,\n            \"offset\": 0x80000000\n      ", "ttrs.useSizeType.sm.offset).assertEqual(0x7FFF", "     xs: { span: 1, offset: 0 }, sm: { span: t", "     lg: { span: 2, offset: 2 }\n            })", "bjNew.$attrs.shadow.offsetY).assertEqual(\"10.0", "     sm: { span: 6, offset: 2 },\n             ", "ttrs.useSizeType.sm.offset).assertEqual(-21474", "     xs: { span: 2, offset: 10 },\n            ", "     xs: { span: 6, offset: 0 },\n             ", "     md: { span: 2, offset: 2 },\n             ", "ttrs.useSizeType.sm.offset).assertEqual(2);\n  ", " color: 0x80000000, offsetX: 0x80000000, offse", "     sm: { span: 2, offset: 8 },\n             ", "     md: { span: 6, offset: 4 },\n             ", "et = eventData.data.offset;\n      } else if (e", " span: this.smSpan, offset: this.smOffset },\n ", "     lg: { span: 2, offset: 4 }\n            })", "FFFFF,\n            \"offset\": 0x7FFFFFFF\n      ", "r.Gray, offsetX: 5, offsetY: 5 }\n  @State gray", "ttrs.useSizeType.sm.offset).assertEqual(1);\n  ", "ttrs.useSizeType.sm.offset).assertEqual(0);\n  ", "bjNew.$attrs.shadow.offsetY).assertEqual(\"2147", ".Gray, offsetX: 10, offsetY: 10\n      };\n     ", "ffsetX: 0x7FFFFFFF, offsetY: 0x7FFFFFFF };\n   ", "     xs: { span: 2, offset: 8 },\n             ", "     md: { span: 2, offset: 10 },\n            ", "     sm: { span: 2, offset: 0 },\n             ", "gCallBack);\n    let offsetChangeEvent = {\n    ", "gn: this.alignment, offset: { x: this.x, y: th", "     md: { span: 5, offset: 1 }, lg: { span: 7", " color: Color.Gray, offsetX: 10, offsetY: 10\n ", "bjNew.$attrs.shadow.offsetX).assertEqual(\"10.0", " color: 0x7FFFFFFF, offsetX: 0x7FFFFFFF, offse", "t(obj.$attrs.shadow.offsetY).assertEqual(\"5.00", "     lg: { span: 6, offset: 6 }\n            })", "bjNew.$attrs.shadow.offsetX).assertEqual(\"2147", "     md: { span: 2, offset: 0 },\n             ", "1 }, lg: { span: 7, offset: 2 }\n        })\n   ", "  events_emitter.on(offsetChangeEvent, this.st", "     sm: { span: 2, offset: 10 },\n            ", ": Alignment.Bottom, offset: { x: 0, y: 20 } })", "     lg: { span: 2, offset: 0 }\n            })", "t(obj.$attrs.shadow.offsetX).assertEqual(\"5.00"], "files": ["Shape.ets", "panDirection.ets", "pathProps.test.js", "ImageEffectsJsunit.test.ets", "gridContainer.ets", "circleProps.test.js", "Text.ets", "lineProps.test.js", "imageFit.ets", "imageEffects.ets", "TextJsunit.test.ets", "popupProps.test.js", "Constants.ets", "polylineProps.test.js", "refreshProps.test.js", "PositionSettingJsunit.test.ets", "Scroll.ets", "customDialogController.ets", "CustomDialog.ets", "ellipseProps.test.js", "touchAble.ets", "polygonProps.test.js", "positionSetting.ets", "GridContainer.ets", "enumsLineCapStyle.ets", "GridSettingsJsunit.test.ets", "index.js", "OverlayJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "listProps.test.js", "gridSettings.ets", "gridColProps.test.js", "textPathProps.test.js", "gestureMode.ets", "refresh.ets", "motionPath.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "enabled", "api_method_all": "enabled(value: boolean): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 98, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"enabled\": false,\n          ", "tringify(obj.$attrs.enabled));\n      console.lo", " : this.softkeyboardenabledNone, showpasswordic", "tringify(obj.$attrs.enabled));\n      expect(obj", "        softkeyboardenabledTrue : null,\n       ", "ed = eventData.data.enabled\n      }\n      if (e", "        softkeyboardenabledFalse : null,\n      ", "      .enabled(this.enabled)\n        .zIndex(th", "ata: {\n            \"enabled\": -3\n          }\n  ", " if (eventData.data.enabled != null) {\n        ", "(0x317aff)\n        .enabled(this.enabled)\n    }", "\n    console.info('[enabled] page show called '", "  expect(obj.$attrs.enabled).assertEqual(true)\n", " : this.softkeyboardenabledFalse,\n            s", "'disable')\n        .enabled(false)\n        .bac", "        softkeyboardenabledFalse : this.softkey", "        softkeyboardenabledNone : null,\n       ", "ty.Hidden)\n        .enabled(true)\n        .font", "      .enabled(this.enabled)\n    }\n    .width('", "ull) {\n        this.enabled = eventData.data.en", " getInspectorByKey('enabled');\n      let objNew", "isibility)\n        .enabled(this.enabled)\n     ", "dExample {\n  @State enabled: boolean = true;\n  ", "   this.softkeyboardenabledFalse = this.$elemen", "  expect(obj.$attrs.enabled).assertEqual(false)", "lement(\"softkeyboardenabledTrue\").getInspector(", " : this.softkeyboardenabledTrue,\n            so", "   this.softkeyboardenabledTrue = this.$element", "text)\n        .key('enabled')\n        .backgrou", "ty.Visible\n  @State enabled: boolean = false\n  ", "        softkeyboardenabledNone : this.softkeyb", "  expect(obj.$attrs.enabled).assertEqual(true);", "nst ATTRS_ENABLE = 'enabled'\nconst ATTRS_DISPLA", "ata: {\n            \"enabled\": 33567444\n        ", "        softkeyboardenabledTrue : this.softkeyb", "xpect(objNew.$attrs.enabled).assertEqual(true);", " getInspectorByKey('enabled');\n      let obj = ", "onsole.log(\"cd text enabled\" + JSON.stringify(o", "nsole.log(\"cd text1 enabled\" + JSON.stringify(o"], "files": ["TextJsunit.test.ets", "Constants.ets", "textareaProps.test.js", "EnableJsunit.test.ets", "inputProps.test.js", "index.js", "enable.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "useSizeType", "api_method_all": "useSizeType(value: {\n                                                   \n                                                   \n                                                   \n                                                   \n  }): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": ["')\n                .useSizeType({\n                 ", "ettings003] gridRow useSizeType: \" + JSON.stringify", "tringify(obj.$attrs.useSizeType));\n      expect(obj", "ettings001] gridRow useSizeType: \" + JSON.stringify", "ettings002] gridRow useSizeType: \" + JSON.stringify", "ze(20)\n            .useSizeType({\n              xs:", "  expect(obj.$attrs.useSizeType.sm.span).assertEqua", "  expect(obj.$attrs.useSizeType.sm.offset).assertEq", "ettings005] gridRow useSizeType: \" + JSON.stringify", "ettings004] gridRow useSizeType: \" + JSON.stringify", "\n        }\n        .useSizeType({\n          xs: { s"], "files": ["gridContainer.ets", "GridContainer.ets", "gridSettings.ets", "GridSettingsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "aspectRatio", "api_method_all": "aspectRatio(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 42, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.aspectRatio).assertEqual(2);\n  ", "ata: {\n            \"aspectRatio\": 2\n          }\n   ", " if (eventData.data.aspectRatio) {\n        this.asp", "ata: {\n            \"aspectRatio\": 9997077\n         ", "ata: {\n            \"aspectRatio\": -4\n          }\n  ", "ecoration)\n        .aspectRatio(1)\n        .fontCol", "(40)\n              .aspectRatio(this.aspectRatio)\n ", "youtConstraints006] aspectRatio: \" + obj.$attrs.asp", "  .aspectRatio(this.aspectRatio)\n          }\n      ", "'5', '6'];\n  @State aspectRatio: number = 1.5;\n  pr", "tio) {\n        this.aspectRatio = eventData.data.as", "ze(20)\n            .aspectRatio(this.aspectRatio)\n ", "tio: \" + obj.$attrs.aspectRatio);\n      expect(obj.", ")\n            .key('aspectRatio')\n        }, item =", "ageShow() {\n    let aspectRatioChangeEvent = {\n    ", "  .aspectRatio(this.aspectRatio)\n            .width", "  .aspectRatio(this.aspectRatio)\n            .heigh", "onsole.log(\"cd text aspectRatio\" + JSON.stringify(o", "  expect(obj.$attrs.aspectRatio).assertEqual(999707", " getInspectorByKey('aspectRatio');\n      console.in", "io = eventData.data.aspectRatio;\n      } else if (e", "  expect(obj.$attrs.aspectRatio).assertEqual(-4);\n ", "youtConstraints001] aspectRatio: \" + obj.$attrs.asp", "youtConstraints002] aspectRatio: \" + obj.$attrs.asp", "  expect(obj.$attrs.aspectRatio).assertEqual(1)\n   ", "youtConstraints005] aspectRatio: \" + obj.$attrs.asp", "tringify(obj.$attrs.aspectRatio));\n      console.lo", "TTRS_ASPECTRATIO = 'aspectRatio'\nconst ATTRS_CONTRA", "  expect(obj.$attrs.aspectRatio).assertEqual(1.5);\n", "  events_emitter.on(aspectRatioChangeEvent, this.st"], "files": ["layoutConstraints.ets", "TextJsunit.test.ets", "Constants.ets", "LayoutConstraintsJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDragStartevent", "api_method_all": "onDragStart(event: (event?: DragEvent, extraParams?: string) => CustomBuilder | DragItemInfo): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDragStartevent", "api_method_all": "onDragStart(event: (event?: DragEvent, extraParams?: string) => CustomBuilder | DragItemInfo): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDragEnterevent", "api_method_all": "onDragEnter(event: (event?: DragEvent, extraParams?: string) => void): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDragEnterevent", "api_method_all": "onDragEnter(event: (event?: DragEvent, extraParams?: string) => void): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDragMoveevent", "api_method_all": "onDragMove(event: (event?: DragEvent, extraParams?: string) => void): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDragMoveevent", "api_method_all": "onDragMove(event: (event?: DragEvent, extraParams?: string) => void): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDragLeaveevent", "api_method_all": "onDragLeave(event: (event?: DragEvent, extraParams?: string) => void): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDragLeaveevent", "api_method_all": "onDragLeave(event: (event?: DragEvent, extraParams?: string) => void): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDropevent", "api_method_all": "onDrop(event: (event?: DragEvent, extraParams?: string) => void): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "onDropevent", "api_method_all": "onDrop(event: (event?: DragEvent, extraParams?: string) => void): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "overlay", "api_method_all": "overlay(value: string, options?: { align?: Alignment; offset?: { x?: number; y?: number } }): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 47, "since": 7, "api_used": "\u662f", "lines": ["rlay')\n            .overlay(this.title,\n       ", "t(110)\n            .overlay('Contain', { align:", "tringify(obj.$attrs.overlay));\n      expect(obj", "s));\n        if (!(\"overlay\" == pages.name)) {\n", "  expect(obj.$attrs.overlay.options.offset.y).a", "  expect(obj.$attrs.overlay.options.align).asse", "t(110)\n            .overlay('None', { align: Al", "  console.info(\"get overlay state pages: \" + JS", " console.info(\"push overlay page result:\" + JSO", "        uri: 'pages/overlay',\n      }\n      try", "      console.info(\"overlay beforeEach start\");", " getInspectorByKey('overlay');\n      let obj = ", "  expect(obj.$attrs.overlay.title).assertEqual(", "      console.info(\"overlay after each called\")", "        })\n        .overlay(this.text2, { align", "\n    console.info('[overlay] page show called '", ")\n            .key('overlay')\n            .over", "  console.info(\"get overlay state pages.name:\" ", "  expect(obj.$attrs.overlay.options.offset.x).a", "t(110)\n            .overlay('Auto', { align: Al", "console.error(\"push overlay page error:\" + err)", "        })\n        .overlay(this.text1, { align"], "files": ["imageFit.ets", "touchAble.ets", "PathJsunit.test.ets", "overlay.ets", "OverlayJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "linearGradient", "api_method_all": "linearGradient(value: {\n    angle?: number | string;\n    direction?: GradientDirection;\n    colors: Array<any>;\n    repeating?: boolean;\n  }): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["height(50)\n        .linearGradient(this.linearGradient", "tringify(obj.$attrs.linearGradient));\n      expect(obj", "tExample {\n  @State linearGradientValue: object = {\n  ", " if (eventData.data.linearGradientValue != null) {\n   ", "linearGradient(this.linearGradientValue).key('linearGr", "  expect(obj.$attrs.linearGradient.repeating).assertEq", "  expect(obj.$attrs.linearGradient.angle).assertEqual(", "ep(1000);\n      let linearGradientValue = {\n        an", "eight(100)\n        .linearGradient({\n          angle: ", "ue\": JSON.stringify(linearGradientValue)\n          }\n ", " getInspectorByKey('linearGradient');\n      let objNew", "GradientValue).key('linearGradient')\n      Text('sweep", "ata: {\n            \"linearGradientValue\": JSON.stringi", " getInspectorByKey('linearGradient');\n      let obj = ", "ull) {\n        this.linearGradientValue = JSON.parse(e", "xpect(objNew.$attrs.linearGradient.direction).assertEq", "xpect(objNew.$attrs.linearGradient.angle).assertEqual(", " 5 }) {\n      Text('linearGradient').fontSize(12).widt", "y\n@Component\nstruct linearGradientExample {\n  @State d", "arse(eventData.data.linearGradientValue);\n      }\n    ", "  expect(obj.$attrs.linearGradient.direction).assertEq", "xpect(objNew.$attrs.linearGradient.repeating).assertEq"], "files": ["colorGradient.ets", "GradientDirectionJsunit.test.ets", "gradientDirection.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "sweepGradient", "api_method_all": "sweepGradient(value: {\n    center: Array<any>;\n    start?: number | string;\n    end?: number | string;\n    rotation?: number | string;\n    colors: Array<any>;\n    repeating?: boolean;\n  }): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.sweepGradient.repeating).assertEq", "GradientValue).key('sweepGradient')\n      Text('radia", "ata: {\n            \"sweepGradientValue\": JSON.stringi", " getInspectorByKey('sweepGradient');\n      let objNew", "xpect(objNew.$attrs.sweepGradient.start).assertEqual(", "ue\": JSON.stringify(sweepGradientValue)\n          }\n ", "eight(100)\n        .sweepGradient(this.sweepGradientV", "  expect(obj.$attrs.sweepGradient.end).assertEqual('3", " true\n  };\n  @State sweepGradientValue: object = {\n  ", "ep(1000);\n      let sweepGradientValue = {\n        ce", "arse(eventData.data.sweepGradientValue);\n      }\n    ", "dient')\n      Text('sweepGradient').fontSize(12).widt", "ull) {\n        this.sweepGradientValue = JSON.parse(e", "xpect(objNew.$attrs.sweepGradient.repeating).assertEq", " getInspectorByKey('sweepGradient');\n      let obj = ", ".sweepGradient(this.sweepGradientValue).key('sweepGra", "  expect(obj.$attrs.sweepGradient.start).assertEqual(", "xpect(objNew.$attrs.sweepGradient.end).assertEqual('3", " if (eventData.data.sweepGradientValue != null) {\n   "], "files": ["colorGradient.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "radialGradient", "api_method_all": "radialGradient(value: { center: Array<any>; radius: number | string; colors: Array<any>; repeating?: boolean }): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"radialGradientValue\": JSON.stringi", "radialGradient(this.radialGradientValue).key('radialGr", " getInspectorByKey('radialGradient');\n      let obj = ", "xpect(objNew.$attrs.radialGradient.repeating).assertEq", "  expect(obj.$attrs.radialGradient.radius).assertEqual", " true\n  };\n  @State radialGradientValue: object = {\n  ", "eight(100)\n        .radialGradient(this.radialGradient", "dient')\n      Text('radialGradient').fontSize(12).widt", "GradientValue).key('radialGradient')\n    }\n    .width(", "arse(eventData.data.radialGradientValue);\n      }\n    ", "xpect(objNew.$attrs.radialGradient.center[0]).assertEq", "xpect(objNew.$attrs.radialGradient.radius).assertEqual", "ue\": JSON.stringify(radialGradientValue)\n          }\n ", "  expect(obj.$attrs.radialGradient.center[0]).assertEq", "  expect(obj.$attrs.radialGradient.repeating).assertEq", "xpect(objNew.$attrs.radialGradient.center[1]).assertEq", "  expect(obj.$attrs.radialGradient.center[1]).assertEq", "ull) {\n        this.radialGradientValue = JSON.parse(e", " if (eventData.data.radialGradientValue != null) {\n   ", " getInspectorByKey('radialGradient');\n      let objNew", "ep(1000);\n      let radialGradientValue = {\n        ce"], "files": ["colorGradient.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "motionPath", "api_method_all": "motionPath(value: MotionPathOptions): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["      console.info(\"motionPathTest_0300 click resu", " })\n    }\n    .key('motionPath')\n    .width('100%'", "        uri: 'pages/motionPath',\n      }\n      try", "s));\n        if (!(\"motionPath\" == pages.name)) {\n", "      console.info(\"motionPath after each called\")", "      console.info('motionPathTest_0100 START');\n ", "      console.info('motionPathTest_0300 START');\n ", "      console.info('motionPath page state change c", " getInspectorByKey('motionPath');\n      console.in", "console.error(\"push motionPath page error: \" + err", "rt default function motionPathJsunit() {\n  describ", "  console.info(\"get motionPath state success \" + J", "      console.info(\"motionPathTest_0100 component ", "      console.info(\"motionPathTest_0200 get state ", "      console.info('motionPathTest_0200 END');\n   ", "{\n    console.info('motionPath page show called');", ");\n    });\n\n    it('motionPathTest_0300', 0, async", "      console.info(\"motionPathTest_0200 click resu", "nit() {\n  describe('motionPathTest', function () {", " console.info(\"push motionPath page success \" + JS", "      console.info(\"motionPathTest_0200 on events_", "t.test.ets';\nimport motionPathJsunit from './Motio", "      console.info(\"motionPathTest_0300 on events_", "      console.info(\"motionPathTest_0300 get state ", ");\n    });\n\n    it('motionPathTest_0100', 0, async", "('button')\n        .motionPath({ path: this.path, ", ");\n    });\n\n    it('motionPathTest_0200', 0, async", "      console.info('motionPathTest_0200 START');\n ", "      console.info('motionPathTest_0300 END');\n   ", "\n  shapeJsunit();\n  motionPathJsunit();\n  scrollCo"], "files": ["List.test.ets", "MotionPathJsunit.test.ets", "motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "shadow", "api_method_all": "shadow(value: {\n    radius: number | Resource;\n    color?: Color | string | Resource;\n    offsetX?: number | Resource;\n    offsetY?: number | Resource;\n  }): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 101, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.shadow.offsetY).assertEqua", "  expect(obj.$attrs.shadow.color).assertEqual(", " {\n    this.context.shadowBlur = 30;\n    this.", "ep(1000);\n      let shadowValue = { radius: 0x", "xpect(objNew.$attrs.shadow.offsetY).assertEqua", "\n              this.shadowOffsetX();\n         ", "  expect(obj.$attrs.shadow.radius).assertEqual", "  expect(obj.$attrs.shadow.offsetX).assertEqua", "arse(eventData.data.shadowValue);\n      }\n    ", "nst ATTRS_SHADOW = 'shadow'\nconst ATTRS_SHADOW", "ue\": JSON.stringify(shadowValue)\n          }\n ", "xpect(objNew.$attrs.shadow.radius).assertEqual", "\n              this.shadowBlur();\n            ", " if (eventData.data.shadowValue != null) {\n   ", "       .shadow(this.shadowValue)\n        .key(", "ata: {\n            \"shadowValue\": JSON.stringi", "xpect(objNew.$attrs.shadow.offsetX).assertEqua", "\n              this.shadowColor();\n           ", "\n              this.shadowOffsetY();\n         ", "ource-over';\n  }\n\n  shadowBlur() {\n    this.co", "Json:\" + obj.$attrs.shadow);\n      expect(obj.", "ep(1000);\n      let shadowValue = {\n        ra", "Row2')\n\n      Text('shadow').fontSize(15).font", "ep(1000);\n      let shadowValue = { radius: 'e", "ull) {\n        this.shadowValue = JSON.parse(e", "height(40)\n        .shadow(this.shadowValue)\n ", "tring= 30;\n  @State shadowValue: object= { rad", "xpect(objNew.$attrs.shadow.color).assertEqual("], "files": ["imageEffects.ets", "ImageEffectsJsunit.test.ets", "Constants.ets", "index.js", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "clip", "api_method_all": "clip(value: boolean | CircleAttribute | EllipseAttribute | PathAttribute | RectAttribute): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 50, "since": 7, "api_used": "\u662f", "lines": [" expect(obj1.$attrs.clip).assertEqual('true'", "  if(eventData.data.clipValue != null) {\n   ", "c,\n            typeEclipse: this.typeEclipse", "t('testProgressTypeEclipse', 0, async functi", "spectorByKey('image_clip');\n      let obj = ", "eEclipse: this.typeEclipse\n        }\n    },\n", "o('testProgressTypeEclipse START');\n        ", "     Image('/images/clip.png')\n        .clip", ").assertEqual('typeEclipse')\n        expect(", "yle: ProgressStyle.Eclipse })\n          .val", " 5 }) {\n      Text('clip')\n        .fontSize", ")\n        this.typeEclipse = this.$element(\"", "ull) {\n        this.clipType = new Rect({ wi", "spectorByKey('image_clip_true');\n      let o", "(200)\n\n      Text('Eclipse Progress').fontSi", "parse(objNew.$attrs.clip);\n      expect(clip", "     Image('/images/clip.png')\n        .mask", "yle: ProgressStyle.Eclipse }).width(100).val", "     Image('/images/clip.png')\n          .wi", "obalThis.value.typeEclipse);\n        console", "objNew));\n      let clip = JSON.parse(objNew", "clip);\n      expect(clip.shape).assertEqual(", "ON.parse(obj.$attrs.clip);\n      expect(clip", "roke();\n        ctx.clip();\n        // Draw ", "type).assertEqual('eclipse')\n        console", "t: 280 });\n  @State clipType: CommonShapeMet", "ual(\"ProgressStyle.Eclipse\")\n      console.i", " null,\n        typeEclipse: null\n    },\n\n   ", "clip.png')\n        .clip(this.clipType)\n    ", "or(0xd2cab3)\n      .clip(true)\n\n      Text('", "const ATTRS_CLIP = 'clip'\nconst ATTRS_ENABLE", "        .key('image_clip')\n\n      Row() {\n  ", "\n        .clip(this.clipType)\n        .width", "  expect(obj.$attrs.clip).assertEqual('false", "red rectangle after clip\n        ctx.fillSty", "this.$element(\"typeEclipse\").getInspector()\n", "ata: {\n            \"clipValue\": false\n      ", "   testProgressTypeEclipse\n     * @tc.desc  ", ")\n      .key('image_clip_true')\n\n      Text(", "spectorByKey('image_clip');\n      let objNew", "fy(obj));\n      let clip = JSON.parse(obj.$a", "px')\n      }\n      .clip(true)\n      .border", "yle: ProgressStyle.Eclipse }).color(Color.Gr"], "files": ["ProgressJsunit.test.ets", "progress.ets", "layoutConstraints.ets", "progressProps.test.js", "Constants.ets", "Progress.ets", "ShapeClippingJsunit.test.ets", "index.js", "shapeClipping.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "mask", "api_method_all": "mask(value: CircleAttribute | EllipseAttribute | PathAttribute | RectAttribute): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.maskColor != null) {\n   ", "lacement,\n          maskColor: 0x33000000,\n ", "const ATTRS_MASK = 'mask'\nconst ATTRS_MARKAN", "(indexEventOne.data.maskColor).assertEqual(0", "ementTwo,\n          maskColor: 0x33000000,\n ", "obj.$attrs.indicatormask).assertEqual('true'", "clip.png')\n        .mask(this.maskType)\n    ", "an = true;\n  @State maskType: CommonShapeMet", "obj.$attrs.indicatormask).assertEqual('false", "xpect(objNew.$attrs.mask.shape).assertEqual(", "spectorByKey('image_mask');\n      let objNew", "        .key('image_mask')\n    }\n\n    .width", "an = false\n  @State maskColor: string = 0x33", "false,\n            \"maskColor\": 0x33000009\n ", "  expect(obj.$attrs.mask.shape).assertEqual(", "  if(eventData.data.maskValue != null) {\n   ", "Props] get indicatormask value is: \" + JSON.", "or = eventData.data.maskColor;\n      }\n    }", "obj.$attrs.indicatormask));//prop\n        do", "true')\n\n      Text('mask')\n        .fontSize", "ect(indexEvent.data.maskColor).assertEqual(0", "ata: {\n            \"maskValue\": false\n      ", " {\n                \"maskColor\": this.maskCol", "\n        .mask(this.maskType)\n        .width", "entThree,\n          maskColor: 0x33000000,\n ", "spectorByKey('image_mask');\n      let obj = ", "    maskColor: this.maskColor,\n          pop", "t.Bottom,\n          maskColor: this.maskColo", "  \"maskColor\": this.maskColor,\n             ", "ull) {\n        this.maskColor = eventData.da", "ementOne,\n          maskColor: 0x33000000,\n ", "ull) {\n        this.maskType = new Circle({ "], "files": ["swiperProps.test.js", "Constants.ets", "bindPopup.ets", "ShapeClippingJsunit.test.ets", "placement.ets", "shapeClipping.ets", "BindPopupJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "key", "api_method_all": "key(value: string): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 935, "since": 7, "api_used": "\u662f", "lines": ["  Text('alignSelf').key(\"alignSelf\").fontSi", "height(80)\n        .key('ellipse')\n        ", "x66bbb2cb)\n        .key('gridSpan')\n      }", ": 250 })\n          .key('text1')\n          ", "t(240)\n            .key('overlay')\n        ", "t(`${this.height}`).key('ellipse')\n    }.wi", "this.saturateValue).key('centerRow6')\n\n    ", "   Text('flexGrow').key(\"flexGrow\").fontSiz", "this.contrastValue).key('centerRow7')\n\n    ", "ax: 100 })\n        .key(\"gauge\")\n        .v", "s.hueRotateValue}`).key('centerRow9')\n    }", "('auto')\n          .key(\"flexBasis\")\n      ", "is.brightnessValue).key('centerRow5')\n\n    ", "5%', y: 0 })\n      .key('stepperItem2')\n\n  ", "hrink(0)\n          .key(\"flexShrink\")\n     ", "secondState)\n      .key('stepperItem3')\n\n  ", "\n        }\n        .key('list')\n        .li", "gnment.Center)\n    .key('stepper')\n  }\n\n  o", "x66b6c5d1)\n        .key('gridRow')\n\n       ", "ntSize(20)\n        .key('fontFamily')\n\n    ", ".width(80)\n        .key('touch')\n        .o", ": 250 })\n          .key('text2')\n          ", "this.size)\n        .key('text2')\n        .m", "FFF)\n      }\n      .key(\"alignItemsColumn\")", "adowValue)\n        .key('centerRow3')\n\n    ", "review')\n          .key('button2')\n        ", "ter)\n      }\n      .key('flex')\n      .widt", "ngeAppear)\n        .key('appear')\n        .", "n({ top: 10 })\n    .key('gridContainer')\n  ", "c\n      })\n        .key('marquee')\n        ", "5%', y: 0 })\n      .key('stepperItem1')\n\n  ", "his.value)\n        .key('text1')\n        .b", "olor.Blue })\n      .key('swiper')\n      .on", ".fontSize)\n        .key('fontSize')\n\n      ", "     }.width('90%').key('gridContainer').ma", "el('Finish')\n      .key('stepperItem4')\n   ", "ntSize(20)\n        .key('fontStyle')\n\n     ", "ding(20)\n          .key('box')\n\n        Tex", "this.invertValue}`).key('centerRow8')\n\n    ", "x66bbb2cb)\n        .key('gridOffset')\n\n    ", "leValue}`)\n        .key('centerRow4')\n\n    ", "ity)\n              .key('displayPriority')\n", "n('start')\n        .key('button')\n        .", "th(60)\n            .key('aspectRatio')\n    ", "this.text)\n        .key('enabled')\n        ", "ht: 160 })\n        .key('centerRow2')\n\n    ", "ntSize(20)\n        .key('fontColor')\n\n     ", "ntSize(20)\n        .key('fontWeight')\n\n    ", "('next')\n          .key('button1')\n        ", "left: 5 })\n        .key('centerRow')\n\n     "], "files": ["ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "geometryTransition.ets", "marquee.ets", "textTimer.ets", "Rating.ets", "enumsLineCapStyle.ets", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "RichText.ets", "polyline.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "tapGesture.ets", "flexDirection.ets", "shapeClipping.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Utils.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ColumnSplit.ets", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "animateTransformProps.test.js", "dragEvent.ets", "checkbox.ets", "Video.ets", "circle.ets", "animateMotionProps.test.js", "listItem.ets", "Button.ets", "textareaProps.test.js", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "search.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animateProps.test.js", "animate.ets", "panDirection.ets", "Flex.ets", "ContentStorage.test.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "ohosMatrix4.ets", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "priorityGesture.ets", "DataPanel.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "select.ets", "timeStamp.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "id", "api_method_all": "id(value: string): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 8283, "since": 7, "api_used": "\u662f", "lines": ["emsColumn\")\n      .width('90%')\n      .bor", "eAppear: string = 'Hide Text'\n  private my", "nSelf,height:100').width('34%').height(100", "        this.strokeWidthValue = eventData.", "Basis\")\n          .width('60%')\n          ", "ole.log(\"imageData_width=\" + imageData.wid", "')\n      .border({ width: 1 })\n      .alig", "key('flex')\n      .width('90%')\n      .hei", "entData.data.strokeWidthValue != null) {\n ", ".context)\n        .width('100%').height('4", "hrink\")\n          .width('50%')\n          ", "/bg.jpg\");\n    let width = img.width;\n    ", "{\n        Column().width('50%').height(30)", "idth(`${this.strokeWidthValue}`)\n        .", "gn.Center)\n      }.width('90%').height(120", ".alignItems)\n    }.width('100%').padding({", "gnSelf,height:80').width('33%').height(80)", "50;\n  @State strokeWidthValue: string = 20", "   let width = img.width;\n    let height =", "ontColor(0xCCCCCC).width('90%')\n      Flex", "if (eventData.data.width != null) {\n      ", "hrink')\n          .width('40%')\n          ", "}`)\n        .strokeWidth(`${this.strokeWid", "\n    }.padding(30).width('100%')\n  }\n}", "ontColor(0xCCCCCC).width('90%')\n      Colu", "gebitmap_width=\" + width);\n    console.log", "entData.data.strokeWidthValue;\n      }\n   ", "rink(2)\n          .width('40%')\n          ", "se().width(`${this.width}`).height(`${this", ";\n        })\n    }.width('100%').height('1", " {\n      Ellipse().width(`${this.width}`).", "tretch)\n          .width('33%')\n          ", "sage: 'The text is hidden', duration: 2000", ": 30 })\n    }\n    .width('100%').height('1", ")\n        Column().width('50%').height(30)", "nabled)\n    }\n    .width('100%')\n    .padd", "or(0xAFEEEE)\n    }.width('100%').margin({ ", "is.changeAppear = 'Hide Text'\n            ", "hValue}`)\n        .width(200)\n        .hei", "h = eventData.data.width;\n      }\n      if", "y('ellipse')\n    }.width('100%').height('1", ".height(200)\n    }.width('100%').margin({ ", "e.log(\"imagebitmap_width=\" + width);\n    c", "Example {\n  @State width: string = \"200px\"", "ll) {\n        this.width = eventData.data."], "files": ["pageTransition2.ets", "ohosPrompt.ets", "listItemGroupProps.test.js", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "tabContentProps.test.js", "textProps.test.js", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "placement.ets", "playMode.ets", "toolbarProps.test.js", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "column.ets", "Panel.ets", "Progress.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "toolbarItemProps.test.js", "TapGesture.test.ets", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "DividerJsunit.test.ets", "ScrollCodeJsunit.test.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "badgeProps.test.js", "scrollBar.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "GridJsnuit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "formProps.test.js", "focus.ets", "VideoJsunit.test.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "XComponentPage.ets", "SourceTypeJsunit.test.ets", "stackProps.test.js", "Text.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "GridJsunit.test.ets", "refreshProps.test.js", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "PanGesture.ets", "richtextProps.test.js", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "Utils.ets", "marqueeProps.test.js", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "imageAnimatorProps.test.js", "enumsImage.ets", "enable.ets", "PieceCode.ets", "tabsProps.test.js", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "popupProps.test.js", "SubscribaleAbstractJsunit.test.ets", "ohosRouterB.ets", "ColumnSplit.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "BackgroundJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "BasicJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "animateTransformProps.test.js", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pieceProps.test.js", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "animateMotionProps.test.js", "selectProps.test.js", "grid.ets", "Button.ets", "ScrollJsunit.test.ets", "Polygon.ets", "gridColProps.test.js", "textareaProps.test.js", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animateProps.test.js", "animate.ets", "buttonProps.test.js", "List.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "BorderJsunit.test.ets", "direction2.ets", "mouseEvent.ets", "RowSplit.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "switchProps.test.js", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "enumsFlexAlign.ets", "Path.ets", "commonComponentJsApi.test.js", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "chartProps.test.js", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "TabsJsunit.test.ets", "swiperProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "timeStamp.ets", "Toggle.ets", "slider.ets", "NavigationJsunit.test.ets", "listProps.test.js", "aboutToDisappear.ets", "progressProps.test.js", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "geometryTransition", "api_method_all": "geometryTransition(id: string): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["      console.info(\"geometryTransitionTest_0100 click resu", "      console.info('geometryTransitionTest_0100 END');\n   ", "      console.info(\"geometryTransitionTest_0100 get state ", "s));\n        if (!(\"geometryTransition\" == pages.name)) {\n", "nit() {\n  describe('geometryTransitionTest', function () {", "geometryTransition('geometryTransition')\n      }\n    }.hei", "      console.info(\"geometryTransition after each called\")", "  console.info(\"get geometryTransition state success \" + J", ");\n    });\n\n    it('geometryTransitionTest_0100', 0, async", "        uri: 'pages/geometryTransition',\n      }\n      try", "irectionJsunit();\n  geometryTransitionJsunit();\n  systemRo", "      console.info(\"geometryTransitionTest_0100 start to e", "rt default function geometryTransitionJsunit() {\n  describ", "console.error(\"push geometryTransition page error: \" + err", "y\n@Component\nstruct geometryTransitionExample {\n  @State b", "      console.info(\"geometryTransitionTest_0100 emit actio", "      console.info('geometryTransitionTest_0100 START');\n ", " console.info(\"push geometryTransition page success \" + JS", "t.test.ets';\nimport geometryTransitionJsunit from './Geome", "      console.info(\"geometryTransitionTest_0100 on events_", "ight(300)\n        }.geometryTransition('geometryTransition"], "files": ["List.test.ets", "GeometryTransitionJsunit.test.ets", "geometryTransition.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "bindPopup", "api_method_all": "bindPopup(show: boolean, popup: PopupOptions | CustomPopupOptions): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 37, "since": 7, "api_used": "\u662f", "lines": ["      console.info(\"bindPopupTest_0200 click resu", "      console.info(\"bindPopupTest_0300 on events_", "        })\n        .bindPopup(this.customPopupThr", "      console.info('bindPopupTest_0200 START');\n ", "        })\n        .bindPopup(this.customPopupOne", "        uri: 'pages/bindPopup',\n      }\n      try", "      console.info(\"bindPopupTest_0100 on events_", "      console.info(\"bindPopupTest_0100 get state ", "        })\n        .bindPopup(this.noHandlePopup,", "s));\n        if (!(\"bindPopup\" == pages.name)) {\n", ");\n    });\n\n    it('bindPopupTest_0300', 0, async", "      console.info(\"bindPopupTest_0200 on events_", ");\n    });\n\n    it('bindPopupTest_0100', 0, async", "      console.info(\"bindPopupTest_0100 click resu", "      console.info('bindPopupTest_0300 START');\n ", " console.info(\"push bindPopup page success \" + JS", "      console.info(\"bindPopupTest_0200 get state ", "bindMenuJsunit();\n  bindPopupJsunit();\n  configur", "       console.log(\"bindPopupTest_0200 change com", "  console.info(\"get bindPopup state success \" + J", "      console.info(\"bindPopupTest_0200 start to p", "console.error(\"push bindPopup page error: \" + err", "      console.info(\"bindPopupTest_0300 get state ", "        })\n        .bindPopup(this.customPopupTwo", "      console.info(\"bindPopupTest_0300 click resu", "unit(){\n  describe('bindPopupTest', function (){\n", "        })\n        .bindPopup(this.customPopup, {", "      console.info(\"bindPopup after each called\")", "      console.info('bindPopupTest_0200 END');\n   ", "      console.info('bindPopupTest_0100 START');\n ", "      console.info('bindPopupTest_0100 END');\n   ", ");\n    });\n\n    it('bindPopupTest_0200', 0, async", "      console.info(\"bindPopupTest_0100 click Two ", "t.test.ets';\nimport bindPopupJsunit from './BindP", "      console.info('bindPopupTest_0300 END');\n   "], "files": ["bindPopup.ets", "BindPopupJsunit.test.ets", "List.test.ets", "placement.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "bindMenucontent", "api_method_all": "bindMenu(content: { value: string; action: () => void }[] | CustomBuilder): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "bindMenucontent", "api_method_all": "bindMenu(content: { value: string; action: () => void }[] | CustomBuilder): T;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "bindContextMenu", "api_method_all": "bindContextMenu(content: CustomBuilder, responseType: ResponseType): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["in({ top: 5 })\n    .bindContextMenu(this.ContextMenuBui"], "files": ["bindContextMenu.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "stateStyles", "api_method_all": "stateStyles(value: StateStyles): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonMethod", "api_method_name": "restoreId", "api_method_all": "restoreId(value: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["itMode(true)\n      .restoreId(this.id)\n      .hei"], "files": ["dragEvent2.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonAttribute", "api_method_all": "declare class CommonAttribute extends CommonMethod<CommonAttribute> {}", "api_method_name": "CommonAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonInterface", "api_method_all": "interface CommonInterface {\n  (): CommonAttribute;\n}", "api_method_name": "CommonInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_all": "declare class CommonShapeMethod<T> extends CommonMethod<T> {\n  \n  constructor();\n\n  \n  stroke(value: ResourceColor): T;\n\n  \n  fill(value: ResourceColor): T;\n\n  \n  strokeDashOffset(value: number | string): T;\n\n  \n  strokeLineCap(value: LineCapStyle): T;\n\n  \n  strokeLineJoin(value: LineJoinStyle): T;\n\n  \n  strokeMiterLimit(value: number | string): T;\n\n  \n  strokeOpacity(value: number | string | Resource): T;\n\n  \n  fillOpacity(value: number | string | Resource): T;\n\n  \n  strokeWidth(value: Length): T;\n\n  \n  antiAlias(value: boolean): T;\n\n  \n  strokeDashArray(value: Array<any>): T;\n}", "api_method_name": "CommonShapeMethod", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["\n  @State clipType: CommonShapeMethod= new Circle({ width", "\n  @State maskType: CommonShapeMethod= new Rect({ width: "], "files": ["shapeClipping.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "stroke", "api_method_all": "stroke(value: ResourceColor): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1910, "since": 7, "api_used": "\u662f", "lines": ["0;\n    this.context.strokeStyle = '#0000ff';\n ", "xpect(objNew.$attrs.strokeWidth).assertEqual('", "strokeWidth(`${this.strokeWidthValue}`)\n      ", "  strokeWidth: this.strokeWidth,\n          col", "\n              this.strokeRect();\n            ", "neCap' + obj.$attrs.strokeLineCap)\n      expec", " if (eventData.data.strokeWidth != null) {\n   ", "ue = eventData.data.strokeWidthValue;\n      }\n", "    .fill(0x317Af7).stroke(Color.Black).stroke", "ata: {\n            \"strokeWidth\": \"3.000000vp\"", "ata: {\n            \"strokeWidthValue\": \"-30\",\n", "leValue}`)\n        .strokeWidth(`${this.stroke", "n = false;\n  @State strokeWidth: number = 2.00", "trokeDashOffset(10).strokeLineCap(LineCapStyle", "pStyle.Butt)\n      .strokeLineJoin(LineJoinSty", "rokeWidth(4)\n      .strokeDashArray([20]).stro", "ata: {\n            \"strokeWidthValue\": \"30\",\n ", "th = eventData.data.strokeWidth;\n      }\n     ", "ull) {\n        this.strokeWidthValue = eventDa", "25, 55, 75);\n  }\n\n  strokeStyle() {\n    this.c", "\n              this.strokeStyle();\n           ", "\n        .divider({ strokeWidth: 2, color: 0xF", "ata: {\n            \"strokeWidthValue\": \"121111", "stroke(Color.Black).strokeWidth(4)\n      .stro", "ull) {\n        this.strokeWidth = eventData.da", "ring = 50;\n  @State strokeWidthValue: string =", "\n              this.strokeText();\n            ", "5;\n    this.context.strokeRect(25, 25, 55, 75)", "';\n    this.context.strokeRect(115, 25, 75, 55", ");\n    this.context.stroke();\n    this.context", " if (eventData.data.strokeWidthValue != null) ", ");\n    this.context.stroke();\n  }\n\n  lineJoin(", "Black).key('path1').strokeWidth(3)\n\n      Text", "  expect(obj.$attrs.strokeWidth).assertEqual('", "le.info('obj.$attrs.strokeLineCap' + obj.$attr", ");\n    this.context.stroke();\n  }\n\n  font() {\n", "rokeDashArray([20]).strokeDashOffset(10).strok", "})\n      .divider({ strokeWidth: 2, color: 0xF", "  expect(obj.$attrs.strokeLineCap).assertEqual", ");\n    this.context.stroke();\n  }\n\n  miterLimi", "s(this.commandsOne).stroke(Color.Black).key('p", "(obj.$attrs.divider.strokeWidth).assertEqual(\"", "divider({\n          strokeWidth: this.strokeWi"], "files": ["Shape.ets", "pathProps.test.js", "PatternLock.ets", "circleProps.test.js", "EnmusLineCapStyleJsunit.test.ets", "ShapeJsunit.test.ets", "canvas.ets", "lineProps.test.js", "divider.ets", "gauge.ets", "polylineProps.test.js", "Path.ets", "ellipseProps.test.js", "polygonProps.test.js", "list.ets", "List.ets", "dragEvent2.ets", "enumsLineCapStyle.ets", "GaugeJsunit.test.ets", "index.js", "DividerJsunit.test.ets", "Divider.ets", "edgeEffect.ets", "dragEvent.ets", "tspanProps.test.js", "svgProps.test.js", "shape.ets", "svgTextProps.test.js", "textPathProps.test.js", "path.ets", "ListJsunit.test.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "fill", "api_method_all": "fill(value: ResourceColor): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1166, "since": 7, "api_used": "\u662f", "lines": [");\n    });\n\n    it('fillModeTest_0200', 0, a", "pped\n          this.fillMode = FillMode.None", "   \"fillMode\": this.fillMode\n              }", "      console.info(\"fillModeTest_0300 get st", "s));\n        if (!('fillMode' == pages.name)", "        uri: 'pages/fillMode',\n      }\n     ", "      console.info(\"fillModeTest_0200 click ", "preDecode)\n        .fillMode(this.fillMode).", " {\n                \"fillMode\": this.fillMode", "      console.info('fillModeTest_0200 START'", "nfo('beforeEach get fillMode state pages:' +", "      console.info('fillModeTest_0200 END');", "ning\n          this.fillMode = FillMode.Back", ");\n    });\n\n    it('fillModeTest_0100', 0, a", "      console.info(\"fillModeTest_0200 get st", "    Rect()\n        .fill(Color.Gray)\n       ", "      console.info('fillModeTest_0300 START'", "used\n          this.fillMode = FillMode.Both", "      console.info(\"fillModeTest_0100 get st", "      console.info('fillModeTest beforeEach ", "      console.info('fillModeTest_0100 END');", "or('beforeEach push fillMode page error:' + ", "number = 0\n  @State fillMode: FillMode = Fil", "ect(indexEvent.data.fillMode).assertEqual(Fi", "     .fillMode(this.fillMode).iterations(thi", "      console.info(\"fillModeTest_0100 click ", "      console.info('fillMode test after each", "      console.info('fillModeTest_0100 START'", "t.test.ets';\nimport fillModeJsunit from './F", "   Text('background fill the box(Cover)').fo", "rt default function fillModeJsunit(){\n  desc", "      console.info(\"fillModeTest_0200 on eve", " Ellipse()\n        .fill(Color.Pink)\n       ", "fo('beforeEach push fillMode page result:' +", "      console.info(\"fillModeTest_0300 on eve", "y\n@Component\nstruct fillModeExample {\n  @Sta", "      console.info(\"fillModeTest_0300 click ", "      console.info('fillModeTest_0300 END');", "   Text('background fill the box(Contain)').", "nfo('beforeEach get fillMode state pages.nam", ");\n    });\n\n    it('fillModeTest_0300', 0, a", "unit(){\n  describe('fillModeTest', function ", "  selectJsunit();\n  fillModeJsunit();\n  enum", "      console.info(\"fillModeTest_0100 on eve"], "files": ["ImageJsunit.test.ets", "Shape.ets", "pathProps.test.js", "circleProps.test.js", "imageAnimatorProps.test.js", "background.ets", "canvas2.ets", "ShapeJsunit.test.ets", "canvas.ets", "ImageAnimatorJsunit.test.ets", "polylineProps.test.js", "animationStatus.ets", "fillMode.ets", "ellipseProps.test.js", "GestureModeJsunit.test.ets", "touchAble.ets", "polygonProps.test.js", "animatorOption.ets", "enumsLineCapStyle.ets", "index.js", "backgroundAndSizeSetting.ets", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "FillModeJsunit.test.ets", "shape.ets", "animateMotionProps.test.js", "Image.ets", "svgTextProps.test.js", "textPathProps.test.js", "imageAnimator.ets", "List.test.ets", "rectProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "strokeDashOffset", "api_method_all": "strokeDashOffset(value: number | string): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 66, "since": 7, "api_used": "\u662f", "lines": ["ashOffsetProp: this.strokeDashOffsetProp,\n            st", "rop : null,\n        strokeDashOffsetProp : null,\n       ", "rokeDashArray([20]).strokeDashOffset(10)\n      Shape() {", "shOffsetProp : this.strokeDashOffsetProp,\n            st", "ctor()\n        this.strokeDashOffsetProp = this.$element", "eExample {\n  @State strokeDashOffset: number = 0;\n  @Sta", "rokeDashArray([20]).strokeDashOffset(10).strokeLineCap(L", " if (eventData.data.strokeDashOffset != null) {\n        ", "rokeDashOffset(this.strokeDashOffset)\n      .strokeLineC", "Prop: null,\n        strokeDashOffsetProp: null,\n        ", "ayProp,\n            strokeDashOffsetProp: this.strokeDas", "  expect(obj.$attrs.strokeDashOffset).assertEqual('0.00v", "op = this.$element(\"strokeDashOffsetProp\").getInspector(", "ayProp,\n            strokeDashOffsetProp : this.strokeDa", "ull) {\n        this.strokeDashOffset = parseInt(eventDat", "eInt(eventData.data.strokeDashOffset);\n      }\n      if ", "keDashArray)\n      .strokeDashOffset(this.strokeDashOffs"], "files": ["Shape.ets", "enumsLineCapStyle.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "strokeLineCap", "api_method_all": "strokeLineCap(value: LineCapStyle): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 238, "since": 7, "api_used": "\u662f", "lines": ["eCapPropThree: this.strokeLineCapPropThree,\n         ", ".strokeLineCap(this.strokeLineCap)\n      .strokeLineJ", "neCap' + obj.$attrs.strokeLineCap)\n      expect(obj.$", "le.info('obj.$attrs.strokeLineCap' + obj.$attrs.strok", "ata: {\n            \"strokeLineCap\": 'string'\n        ", "ne = this.$element(\"strokeLineCapPropOne\").getInspect", "pTwo: null,\n        strokeLineCapPropThree: null,\n   ", "tringify(obj.$attrs.strokeLineCap));\n      expect(obj", "ap = eventData.data.strokeLineCap;\n      }\n      if (", "ropOne,\n            strokeLineCapPropTwo : this.strok", "ropOne,\n            strokeLineCapPropTwo: this.stroke", "  expect(obj.$attrs.strokeLineCap).assertEqual('LineC", "CapPropThree : this.strokeLineCapPropThree,\n         ", "ull) {\n        this.strokeLineCap = eventData.data.st", "rokeDashArray([20]).strokeLineCap(LineCapStyle.Round)", "Two : null,\n        strokeLineCapPropThree : null,\n  ", "trokeDashOffset(10).strokeLineCap(LineCapStyle.Butt)\n", "One : null,\n        strokeLineCapPropTwo : null,\n    ", "ineCapPropOne: this.strokeLineCapPropOne,\n           ", " if (eventData.data.strokeLineCap != null) {\n        ", "neCapPropTwo : this.strokeLineCapPropTwo,\n           ", "neCapPropOne : this.strokeLineCapPropOne,\n           ", "umber = 0;\n  @State strokeLineCap: LineCapStyle = Lin", "pOne: null,\n        strokeLineCapPropTwo: null,\n     ", "ctor()\n        this.strokeLineCapPropTwo = this.$elem", "ropTwo,\n            strokeLineCapPropThree : this.str", "ineCapPropTwo: this.strokeLineCapPropTwo,\n           ", "ree : null,\n        strokeLineCapPropOne : null,\n    ", "pThree,\n            strokeLineCapPropOne: this.stroke", "trokeDashOffset(10).strokeLineCap(LineCapStyle.Round)", "wo = this.$element(\"strokeLineCapPropTwo\").getInspect", "eDashOffset)\n      .strokeLineCap(this.strokeLineCap)", "pThree,\n            strokeLineCapPropOne : this.strok", "ee = this.$element(\"strokeLineCapPropThree\").getInspe", "ata: {\n            \"strokeLineCap\": LineCapStyle.Roun", "ctor()\n        this.strokeLineCapPropOne = this.$elem", "ropTwo,\n            strokeLineCapPropThree: this.stro", "ctor()\n        this.strokeLineCapPropThree = this.$el", "hree: null,\n        strokeLineCapPropOne: null,\n     ", "ata: {\n            \"strokeLineCap\": '-0.2'\n          "], "files": ["index.js", "Shape.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "EnmusLineCapStyleJsunit.test.ets", "ShapeJsunit.test.ets", "enumsLineCapStyle.ets", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "strokeLineJoin", "api_method_all": "strokeLineJoin(value: LineJoinStyle): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 191, "since": 7, "api_used": "\u662f", "lines": ["eJoinPropOne : this.strokeLineJoinPropOne,\n           ", "strokeLineJoin(this.strokeLineJoin)\n      .strokeMiter", "ctor()\n        this.strokeLineJoinPropOne = this.$elem", "rokeLineCap)\n      .strokeLineJoin(this.strokeLineJoin", "43).strokeWidth(10).strokeLineJoin(LineJoinStyle.Round", "ata: {\n            \"strokeLineJoin\": 0.11111,\n        ", "One : null,\n        strokeLineJoinPropThree : null,\n  ", "ctor()\n        this.strokeLineJoinPropTwo = this.$elem", "pTwo: null,\n        strokeLineJoinPropOne: null,\n     ", "ata: {\n            \"strokeLineJoin\": 'nothing',\n      ", "etProp,\n            strokeLineJoinPropTwo : this.strok", "pStyle.Butt)\n      .strokeLineJoin(LineJoinStyle.Round", "ropTwo,\n            strokeLineJoinPropOne : this.strok", " if (eventData.data.strokeLineJoin != null) {\n        ", "pOne: null,\n        strokeLineJoinPropThree: null,\n   ", "ctor()\n        this.strokeLineJoinPropThree = this.$el", "in = eventData.data.strokeLineJoin;\n      }\n      if (", "ropOne,\n            strokeLineJoinPropThree: this.stro", "JoinPropThree: this.strokeLineJoinPropThree,\n         ", "  expect(obj.$attrs.strokeLineJoin).assertEqual('LineJ", "ata: {\n            \"strokeLineJoin\": LineJoinStyle.Bev", "wo = this.$element(\"strokeLineJoinPropTwo\").getInspect", "neJoinPropTwo: this.strokeLineJoinPropTwo,\n           ", "ull) {\n        this.strokeLineJoin = eventData.data.st", "ee = this.$element(\"strokeLineJoinPropThree\").getInspe", "neJoinPropOne: this.strokeLineJoinPropOne,\n           ", "Prop: null,\n        strokeLineJoinPropTwo: null,\n     ", "oinPropThree : this.strokeLineJoinPropThree,\n         ", "ropTwo,\n            strokeLineJoinPropOne: this.stroke", "etProp,\n            strokeLineJoinPropTwo: this.stroke", "ropOne,\n            strokeLineJoinPropThree : this.str", "tyle.Butt;\n  @State strokeLineJoin: LineJoinStyle = Li", "ne = this.$element(\"strokeLineJoinPropOne\").getInspect", "tringify(obj.$attrs.strokeLineJoin));\n      expect(obj", "llOpacity(1)\n      .strokeLineJoin(LineJoinStyle.Miter", "Style.Round)\n      .strokeLineJoin(LineJoinStyle.Round", "Two : null,\n        strokeLineJoinPropOne : null,\n    ", "rop : null,\n        strokeLineJoinPropTwo : null,\n    ", "eJoinPropTwo : this.strokeLineJoinPropTwo,\n           ", "ata: {\n            \"strokeLineJoin\": LineJoinStyle.Rou"], "files": ["Shape.ets", "enumsLineCapStyle.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "strokeMiterLimit", "api_method_all": "strokeMiterLimit(value: number | string): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 76, "since": 7, "api_used": "\u662f", "lines": ["okeLineJoin)\n      .strokeMiterLimit(this.strokeMiterLim", "  expect(obj.$attrs.strokeMiterLimit).assertEqual('4.000", "yle.Miter;\n  @State strokeMiterLimit: number = 4;\n  @Sta", " if (eventData.data.strokeMiterLimit != null) {\n        ", "  expect(obj.$attrs.strokeMiterLimit).assertEqual('5.000", "ata: {\n            \"strokeMiterLimit\": '-0.11111',\n     ", "ata: {\n            \"strokeMiterLimit\": 'aaa11111',\n     ", "op = this.$element(\"strokeMiterLimitProp\").getInspector(", "ull) {\n        this.strokeMiterLimit = parseInt(eventDat", "pThree,\n            strokeMiterLimitProp : this.strokeMi", "pThree,\n            strokeMiterLimitProp: this.strokeMit", "hree: null,\n        strokeMiterLimitProp: null,\n        ", "ree : null,\n        strokeMiterLimitProp : null,\n       ", "ata: {\n            \"strokeMiterLimit\": \"string\",\n       ", "terLimitProp : this.strokeMiterLimitProp,\n            st", "rokeMiterLimit(this.strokeMiterLimit)\n      .strokeOpaci", "tringify(obj.$attrs.strokeMiterLimit));\n      expect(obj", "ineJoinStyle.Miter).strokeMiterLimit(5)\n    }.width('100", "iterLimitProp: this.strokeMiterLimitProp,\n            st", "ata: {\n            \"strokeMiterLimit\": \"5\",\n          }\n", "eInt(eventData.data.strokeMiterLimit);\n      }\n      if ", "ctor()\n        this.strokeMiterLimitProp = this.$element"], "files": ["Shape.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "strokeOpacity", "api_method_all": "strokeOpacity(value: number | string | Resource): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 284, "since": 7, "api_used": "\u662f", "lines": ["pOne: null,\n        strokeOpacityPropTwo: null,\n     ", "ropTwo,\n            strokeOpacityPropThree: this.stro", "ee = this.$element(\"strokeOpacityPropThree\").getInspe", "pacityPropTwo: this.strokeOpacityPropTwo,\n           ", "ctor()\n        this.strokeOpacityPropOne = this.$elem", "ropOne,\n            strokeOpacityPropTwo: this.stroke", "43).strokeWidth(10).strokeOpacity(0.5)\n      Shape() ", "itProp,\n            strokeOpacityPropOne : this.strok", "ne = this.$element(\"strokeOpacityPropOne\").getInspect", "One : null,\n        strokeOpacityPropTwo : null,\n    ", " if (eventData.data.strokeOpacity != null) {\n        ", "ropTwo,\n            strokeOpacityPropThree : this.str", "pacityPropOne: this.strokeOpacityPropOne,\n           ", "umber = 4;\n  @State strokeOpacity: number = 1;\n  @Sta", "eInt(eventData.data.strokeOpacity);\n      }\n      if ", "ropOne,\n            strokeOpacityPropTwo : this.strok", "ctor()\n        this.strokeOpacityPropThree = this.$el", "acityPropTwo : this.strokeOpacityPropTwo,\n           ", "pTwo: null,\n        strokeOpacityPropThree: null,\n   ", "itProp,\n            strokeOpacityPropOne: this.stroke", "Prop: null,\n        strokeOpacityPropOne: null,\n     ", "  expect(obj.$attrs.strokeOpacity).assertEqual('1.000", "rop : null,\n        strokeOpacityPropOne : null,\n    ", "ityPropThree : this.strokeOpacityPropThree,\n         ", "ull) {\n        this.strokeOpacity = parseInt(eventDat", "eMiterLimit)\n      .strokeOpacity(this.strokeOpacity)", "ctor()\n        this.strokeOpacityPropTwo = this.$elem", ".strokeOpacity(this.strokeOpacity)\n      .strokeWidth", "Two : null,\n        strokeOpacityPropThree : null,\n  ", "acityPropOne : this.strokeOpacityPropOne,\n           ", "wo = this.$element(\"strokeOpacityPropTwo\").getInspect", "cityPropThree: this.strokeOpacityPropThree,\n         "], "files": ["Shape.ets", "tspanProps.test.js", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "fillOpacity", "api_method_all": "fillOpacity(value: number | string | Resource): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 269, "since": 7, "api_used": "\u662f", "lines": ["ee = this.$element(\"fillOpacityPropThree\").getInspe", "  expect(obj.$attrs.fillOpacity).assertEqual('0.000", "pacityPropOne: this.fillOpacityPropOne,\n           ", "  .fillOpacity(this.fillOpacity)\n      .mesh([], 1,", "ata: {\n            \"fillOpacity\": \"aa12345\",\n      ", "ull) {\n        this.fillOpacity = parseInt(eventDat", "ne = this.$element(\"fillOpacityPropOne\").getInspect", "ityPropThree : this.fillOpacityPropThree,\n         ", "ata: {\n            \"fillOpacity\": \"-1\",\n          }", "llProp,\n            fillOpacityPropTwo: this.fillOp", "ctor()\n        this.fillOpacityPropTwo = this.$elem", "ata: {\n            \"fillOpacity\": \"1\",\n          }\n", "wo = this.$element(\"fillOpacityPropTwo\").getInspect", "rop : null,\n        fillOpacityPropTwo : null,\n    ", "Two : null,\n        fillOpacityPropOne : null,\n    ", "pacityPropTwo: this.fillOpacityPropTwo,\n           ", "ropOne,\n            fillOpacityPropThree : this.fil", "  expect(obj.$attrs.fillOpacity).assertEqual('nan')", "pOne: null,\n        fillOpacityPropThree: null,\n   ", "h> = [20];\n  @State fillOpacity: number = 0;\n  @Sta", "Prop: null,\n        fillOpacityPropTwo: null,\n     ", "43).strokeWidth(10).fillOpacity(1)\n      .strokeLin", "ropTwo,\n            fillOpacityPropOne: this.fillOp", "ropTwo,\n            fillOpacityPropOne : this.fillO", "ropOne,\n            fillOpacityPropThree: this.fill", "acityPropTwo : this.fillOpacityPropTwo,\n           ", "tringify(obj.$attrs.fillOpacity));\n      expect(obj", "cityPropThree: this.fillOpacityPropThree,\n         ", "ctor()\n        this.fillOpacityPropOne = this.$elem", "One : null,\n        fillOpacityPropThree : null,\n  ", "ata: {\n            \"fillOpacity\": \"aaaaaaa\",\n      ", "s.antiAlias)\n      .fillOpacity(this.fillOpacity)\n ", "  expect(obj.$attrs.fillOpacity).assertEqual('1.000", "ctor()\n        this.fillOpacityPropThree = this.$el", "pTwo: null,\n        fillOpacityPropOne: null,\n     ", "llProp,\n            fillOpacityPropTwo : this.fillO", "acityPropOne : this.fillOpacityPropOne,\n           ", " if (eventData.data.fillOpacity != null) {\n        ", "eInt(eventData.data.fillOpacity);\n      }\n      if "], "files": ["Shape.ets", "tspanProps.test.js", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "strokeWidth", "api_method_all": "strokeWidth(value: Length): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 227, "since": 7, "api_used": "\u662f", "lines": ["(obj.$attrs.divider.strokeWidth).assertEqual(\"3.00v", "ole.log(\"cd divider strokeWidth\" + JSON.stringify(o", "stroke(Color.Black).strokeWidth(4)\n      .strokeDas", "ring = 50;\n  @State strokeWidthValue: string = 20;\n", "ical(true)\n        .strokeWidth(10)\n        .height", "ata: {\n            \"strokeWidthValue\": \"30\",\n      ", "}).stroke(0xEE8443).strokeWidth(10).strokeDashArray", "ata: {\n            \"strokeWidth\": \"3.000000vp\"\n    ", "strokeWidth(`${this.strokeWidthValue}`)\n        .wi", "ata: {\n            \"strokeWidthValue\": \"-30\",\n     ", "th = eventData.data.strokeWidth;\n      }\n      if (", "(obj.$attrs.divider.strokeWidth).assertEqual(\"2.00v", "})\n      .divider({ strokeWidth: 2, color: 0xFFFFFF", "  .stroke(0xEE8443).strokeWidth(10).strokeDashArray", "xpect(objNew.$attrs.strokeWidth).assertEqual('12111", " Color.Red\n  @State strokeWidth: number = 7\n  @Stat", "stroke(Color.Black).strokeWidth(2)\n\n      Text('bor", "leValue}`)\n        .strokeWidth(`${this.strokeWidth", "7).stroke(0xEE8443).strokeWidth(10).fillOpacity(1)\n", "  expect(obj.$attrs.strokeWidth).assertEqual('20.00", "  strokeWidth: this.strokeWidth,\n          color: t", "umber = 1;\n  @State strokeWidth: number = 1;\n  @Sta", "stroke(Color.Black).strokeWidth(3).key('path')\n\n   ", "cal(false)\n        .strokeWidth(5)\n        .color(t", "7).stroke(0xEE8443).strokeWidth(10).strokeLineJoin(", "xpect(objNew.$attrs.strokeWidth).assertEqual('-30.0", "  .strokeWidth(this.strokeWidth)\n      .antiAlias(t", "Black).key('path1').strokeWidth(3)\n\n      Text('Str", "ue = eventData.data.strokeWidthValue;\n      }\n     ", "tyle.Butt)\n        .strokeWidth(this.strokeWidth)\n ", "}).stroke(0xEE8443).strokeWidth(10).strokeOpacity(0", "                    strokeWidth: 5,\n               ", "ata: {\n            \"strokeWidthValue\": \"121111111\"\n", "tringify(obj.$attrs.strokeWidth));\n      console.lo", "  .strokeWidth(this.strokeWidth)\n        .color(thi", "  expect(obj.$attrs.strokeWidth).assertEqual(\"7.000", "lor.Green)\n        .strokeWidth(10)\n        .height", "n = false;\n  @State strokeWidth: number = 2.000000;", "ull) {\n        this.strokeWidthValue = eventData.da", "\n        .divider({ strokeWidth: 2, color: 0xFFFFFF", "divider({\n          strokeWidth: this.strokeWidth,\n", " if (eventData.data.strokeWidth != null) {\n        ", " if (eventData.data.strokeWidthValue != null) {\n   ", "ull) {\n        this.strokeWidth = eventData.data.st", "rokeOpacity)\n      .strokeWidth(this.strokeWidth)\n ", "xpect(objNew.$attrs.strokeWidth).assertEqual('30.00"], "files": ["Shape.ets", "pathProps.test.js", "circleProps.test.js", "lineProps.test.js", "divider.ets", "gauge.ets", "polylineProps.test.js", "Path.ets", "ellipseProps.test.js", "polygonProps.test.js", "list.ets", "List.ets", "dragEvent2.ets", "index.js", "enumsLineCapStyle.ets", "GaugeJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "edgeEffect.ets", "dragEvent.ets", "tspanProps.test.js", "svgProps.test.js", "shape.ets", "svgTextProps.test.js", "textPathProps.test.js", "path.ets", "ListJsunit.test.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "antiAlias", "api_method_all": "antiAlias(value: boolean): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["ull) {\n        this.antiAlias = eventData.data.an", "ineJoinStyle.Round).antiAlias(true)\n      .key('B", "  expect(obj.$attrs.antiAlias).assertEqual('false", "ata: {\n            \"antiAlias\": aaaaa,\n          ", "    .antiAlias(this.antiAlias)\n      .fillOpacity", "ineJoinStyle.Round).antiAlias(true)\n      Shape()", "  expect(obj.$attrs.antiAlias).assertEqual('true'", "ata: {\n            \"antiAlias\": \"false\",\n        ", "ata: {\n            \"antiAlias\": -0.1,\n          }", " if (eventData.data.antiAlias != null) {\n        ", "strokeWidth)\n      .antiAlias(this.antiAlias)\n   ", "tringify(obj.$attrs.antiAlias));\n      expect(obj", "umber = 1;\n  @State antiAlias: boolean = true;\n  ", "as = eventData.data.antiAlias;\n      }\n      if ("], "files": ["shape.ets", "Shape.ets", "ShapeJsunit.test.ets", "enumsLineCapStyle.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CommonShapeMethod", "api_method_name": "strokeDashArray", "api_method_all": "strokeDashArray(value: Array<any>): T;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 84, "since": 7, "api_used": "\u662f", "lines": ["eInt(eventData.data.strokeDashArrayOne);\n      }\n      ", "ull) {\n        this.strokeDashArray[0] = parseInt(event", "rop : null,\n        strokeDashArrayProp : null,\n       ", " if (eventData.data.strokeDashArrayOne != null) {\n     ", "keProp,\n            strokeDashArrayProp : this.strokeDa", "43).strokeWidth(10).strokeDashArray([20])\n      Shape()", "ull) {\n        this.strokeDashArray[2] = parseInt(event", "ata: {\n            \"strokeDashArrayThree\": \"4\",\n       ", "trokeDashArray(this.strokeDashArray)\n      .strokeDashO", "43).strokeWidth(10).strokeDashArray([20]).strokeLineCap", "rokeWidth(4)\n      .strokeDashArray([20]).strokeDashOff", "keProp,\n            strokeDashArrayProp: this.strokeDas", "  expect(obj.$attrs.strokeDashArray[1]).assertEqual('4.", "Prop: null,\n        strokeDashArrayProp: null,\n        ", "tringify(obj.$attrs.strokeDashArray[0]));\n      expect(", " if (eventData.data.strokeDashArrayTwo != null) {\n     ", "ull) {\n        this.strokeDashArray[1] = parseInt(event", "ctor()\n        this.strokeDashArrayProp = this.$element", "op = this.$element(\"strokeDashArrayProp\").getInspector(", "  expect(obj.$attrs.strokeDashArray[2]).assertEqual('4.", "  expect(obj.$attrs.strokeDashArray[0]).assertEqual('4.", "ashArrayProp : this.strokeDashArrayProp,\n            st", "ata: {\n            \"strokeDashArrayOne\": \"4\",\n         ", "ata: {\n            \"strokeDashArrayTwo\": \"4\",\n         ", "  expect(obj.$attrs.strokeDashArray[0]).assertEqual('20", "an = true;\n  @State strokeDashArray: Array<Length> = [2", "43).strokeWidth(10).strokeDashArray([20]).strokeDashOff", "eInt(eventData.data.strokeDashArrayTwo);\n      }\n      ", "strokeValue)\n      .strokeDashArray(this.strokeDashArra", "DashArrayProp: this.strokeDashArrayProp,\n            st", "eInt(eventData.data.strokeDashArrayThree);\n      }\n    ", "tringify(obj.$attrs.strokeDashArray[1]));\n      expect(", "  expect(obj.$attrs.strokeDashArray[1]).assertEqual('20", " if (eventData.data.strokeDashArrayThree != null) {\n   "], "files": ["Shape.ets", "enumsLineCapStyle.ets", "pathProps.test.js", "rectProps.test.js", "shape.ets", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ShapeJsunit.test.ets", "index.js", "ellipseProps.test.js", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomComponent", "api_method_all": "declare class CustomComponent {\n  \n  build(): void;\n\n  \n  aboutToAppear?(): void;\n\n  \n  aboutToDisappear?(): void;\n\n  \n  onPageShow?(): void;\n\n  \n  onPageHide?(): void;\n\n  \n  onBackPress?(): void;\n}", "api_method_name": "CustomComponent", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CustomComponent", "api_method_name": "build", "api_method_all": "build(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 263, "since": 8, "api_used": "\u662f", "lines": [" boolean = false\n\n  build() {\n    Column({ sp", "ngCallBack);\n  }\n\n  build() {\n    Stack() {\n ", "lue: string = 1;\n\n  build() {\n    Column() {\n", "     }\n    }\n  }\n\n  build() {\n    Column() {\n", "set: number = 0;\n\n  build() {\n    GridContain", "angCallBack)\n  }\n\n  build() {\n    Column({ sp", "    }\n\n    }\n  }\n\n  build() {\n    Column() {\n", "ht(10)\n    }\n  }\n\n  build() {\n    Column() {\n", "     }\n    }\n  }\n\n  build() {\n    Flex({ just", " = 'sans-serif';\n\n  build() {\n    Column({ sp", "blank area')\n  }\n\n  build() {\n    Column() {\n", "dex: number = 0;\n\n  build() {\n    Column({ sp", "angCallBack)\n  }\n\n  build() {\n    Scroll() {\n", "));\n      })\n  }\n\n  build() {\n    Flex({\n    ", "logController({\n    builder: CustomDialogExam", "angCallBack)\n  }\n\n  build() {\n    Row() {\n   ", "llow)\n    }\n  }\n\n\n  build() {\n    Column() {\n", "ellow)\n    }\n  }\n\n  build() {\n    Column() {\n", "     }\n    }\n  }\n\n  build() {\n    Flex({ dire", "ngCallBack);\n  }\n\n  build() {\n    Column() {\n", "boolean = false;\n\n  build() {\n    Column() {\n", "ItemState.Normal\n\n  build() {\n    Stepper({\n ", "y();\n    });\n  }\n\n  build() {\n    Column() {\n", "kgroundExample {\n\n  build() {\n    Column({ sp", "     }\n    }\n  }\n\n  build() {\n    Stack({ ali", "ngCallBack);\n  }\n\n  build() {\n    Column({ sp", "boolean = false;\n\n  build() {\n    Flex({ dire", " FlexAlign.Center\n  build() {\n    Flex({ just", " EdgeEffect.None\n\n  build() {\n    Stack({ ali", "PageShow() {\n  }\n\n  build() {\n    Flex({\n    ", "Source(list)\n  }\n\n  build() {\n    Column({ sp", "ngCallBack);\n  }\n\n  build() {\n    Flex({ just", "firm: () => void\n\n  build() {\n    Column() {\n", "ngCallBack);\n  }\n\n  build() {\n    Flex({ dire", "ruct RowExample {\n  build() {\n    Column({ sp"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "richText.ets", "column.ets", "Panel.ets", "Progress.ets", "checkboxGroup.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "textTimer.ets", "Rating.ets", "enumsLineCapStyle.ets", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "XComponentPage.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "GridItem.test.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "checkbox.ets", "Video.ets", "lazyForEach.ets", "circle.ets", "listItem.ets", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "search.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "select.ets", "timeStamp.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "Calendar.ets", "sharedTransition.ets", "gestureMode.ets", "refresh.ets", "enumsHorizontalAlign.ets", "panel.ets", "motionPath.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomComponent", "api_method_name": "aboutToAppear", "api_method_all": "aboutToAppear?(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["uct MyComponent {\n  aboutToAppear() {\n    console.inf", "= false;\n\n  private aboutToAppear(): void {\n    let l", "urce([])\n\n  private aboutToAppear(): void {\n    let l", "showInColor)\n  }\n\n  aboutToAppear() {\n    this.timerI"], "files": ["aboutToDisappear.ets", "swiper.ets", "Swiper.ets", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomComponent", "api_method_name": "aboutToDisappear", "api_method_all": "aboutToDisappear?(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["  console.info(\"get aboutToDisappear state pages:\" + JSO", "      console.info('aboutToDisappearTest_0100 END');\n   ", "      console.info('aboutToDisappearTest_0100 START');\n ", "rt default function aboutToDisappearJsunit() {\n  describ", "      console.info(\"aboutToDisappear beforeEach start\");", "  console.info(\"get aboutToDisappear state pages.name:\" ", "      console.info(\"aboutToDisappearTest_0100 click resu", "      console.info(\"aboutToDisappearTest_0100 on events_", "    }, 1000)\n  }\n\n  aboutToDisappear() {\n    if (this.ti", "console.error(\"push aboutToDisappear page error:\" + err)", " console.info(\"push aboutToDisappear page result:\" + JSO", ");\n    });\n\n    it('aboutToDisappearTest_0100', 0, async", "t.test.ets';\nimport aboutToDisappearJsunit from './About", "nit() {\n  describe('aboutToDisappearTest', function () {", "        uri: 'pages/aboutToDisappear',\n      }\n      try", "      console.info(\"aboutToDisappearTest_0100 get state ", "      console.info(\"aboutToDisappear after each called\")", "s));\n        if (!(\"aboutToDisappear\" == pages.name)) {\n", "ansitionJsunit();\n  aboutToDisappearJsunit();\n  timeStam"], "files": ["aboutToDisappear.ets", "BindMenuJsunit.test.ets", "List.test.ets", "AboutToDisappearJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomComponent", "api_method_name": "onPageShow", "api_method_all": "onPageShow?(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 132, "since": 7, "api_used": "\u662f", "lines": ["{ top: 20 })\n  }\n\n  onPageShow() {\n    let fontCol", " boolean = false\n\n  onPageShow() {\n    console.inf", "eight;\n    }\n  }\n\n  onPageShow() {\n    console.inf", "ntalAlign.Start;\n\n  onPageShow() {\n    console.inf", "{ top: 5 })\n  }\n\n   onPageShow() {\n    console.inf", "ng = \"test data\"\n\n  onPageShow() {\n    console.inf", " boolean = true;\n\n  onPageShow() {\n    console.inf", "({ top: 5 })\n  }\n\n  onPageShow() {\n    console.inf", "ibility.Visible;\n\n  onPageShow() {\n    let hiddenC", "y('stepper')\n  }\n\n  onPageShow() {\n    console.inf", "ata));\n    }\n  }\n\n  onPageShow() {\n    console.inf", "({ top:20 })\n  }\n\n  onPageShow(){\n    console.info", "      }\n    }\n  }\n  onPageShow() {\n    console.inf", "    }\n    }\n  }\n\n\n  onPageShow() {\n    console.inf", "n({ top: 5 })\n  }\n  onPageShow() {\n    let stateCh", "Alignment.Bottom\n\n  onPageShow() {\n    console.inf", "ne: number = 10\n\n\n  onPageShow() {\n    console.inf", "  end: 270\n  });\n\n  onPageShow() {\n    this.animat", "dContainer')\n  }\n\n  onPageShow() {\n    let smChang", ":boolean = false\n\n  onPageShow() {\n    console.inf", "eight('100%')\n  }\n  onPageShow() {\n    let params ", ".padding(10)\n  }\n\n  onPageShow() {\n    let aspectR", "xt for onAppear'\n\n  onPageShow() {\n    console.inf", "     }\n    }\n  }\n\n  onPageShow() {\n    console.inf", "t GlobalExample {\n  onPageShow() {\n  }\n\n  build() ", "ring = \"enable\";\n\n  onPageShow() {\n    console.inf", "  = 'test text';\n\n  onPageShow() {\n    console.inf", "tring = \"200px\";\n\n  onPageShow() {\n    console.inf", "dex: number = 1;\n\n  onPageShow() {\n    console.inf", "TextAlign.Start;\n\n  onPageShow() {\n    var stateCh", "ber = 20.000000;\n\n  onPageShow() {\n    console.inf", "ockController();\n\n  onPageShow() {\n    console.inf", "nter: number = 0\n\n  onPageShow() {\n    console.inf", " PlayMode.Normal\n\n  onPageShow() {\n    console.inf"], "files": ["video.ets", "Navigator.ets", "canvas2.ets", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "column.ets", "Panel.ets", "Progress.ets", "checkboxGroup.ets", "navigation.ets", "Rating.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "RichText.ets", "focus.ets", "touch.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "Stack.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "flexDirection.ets", "shapeClipping.ets", "edgeEffect.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enable.ets", "PieceCode.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "QrCode.ets", "GridContainer.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "checkbox.ets", "circle.ets", "listItem.ets", "Button.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "appear.ets", "rating.ets", "zIndex.ets", "Path.ets", "line.ets", "DataPanel.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "Link.ets", "select.ets", "Toggle.ets", "slider.ets", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "panel.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CustomComponent", "api_method_name": "onPageHide", "api_method_all": "onPageHide?(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CustomComponent", "api_method_name": "onBackPress", "api_method_all": "onBackPress?(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "View", "api_method_all": "declare class View {\n  \n  create(value: any): any;\n}", "api_method_name": "View", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 286, "since": 7, "api_used": "\u662f", "lines": ["onsole.info('[pickerViewPropsJsTest] after e", "onsole.info(\"[pickerViewProps] get globalThi", "')\nrequire('./pickerViewProps.test.js')\nrequ", "atetime: this.pickerViewDatetime,\n//        ", "onsole.info('[pickerViewPropsJsTest] before ", "0],\n//        pickerViewText: null,\n//      ", "onsole.info(\"[pickerViewProps] get inspector", "ole.info('testPickerViewClassProp START');\n ", "e.error(\"push pickerViewProps page error \" +", "onsole.info(\"[pickerViewProps] get className", "ll,\n//        pickerViewTime: null,\n//      ", "expect(\"pages/pickerView/router/\").assertEqu", "ll,\n//        pickerViewDate: null,\n//      ", "//            pickerViewDate: this.pickerVie", "//            pickerViewTime: this.pickerVie", "ole.info('testPickerViewClassPropNone START'", "\n     it('testPickerViewIdProp', 0, async fu", " true;\n  @State wideViewModeAccess: boolean ", "  uri: 'pages/pickerView/router/index'\n     ", "\n     it('testPickerViewClassPropNone', 0, a", "name      testPickerViewComponent\n         *", "//            pickerViewMultiText: this.pick", "ModeAccess(this.wideViewModeAccess)\n        ", "ll,\n//        pickerViewMultiText: null\n    ", "eData)\n        .wideViewModeAccess(this.wide", "ll,\n//        pickerViewDatetime: null,\n//  ", "\n     it('testPickerViewClassProp', 0, async", "ole.info('testPickerViewStyleProp START');\n ", "      it('testPickerViewComponent', 0, async", "le.info(\"push pickerViewProps page success \"", "iewDate: this.pickerViewDate,\n//            ", "ltiText: this.pickerViewMultiText\n        }\n", "//            pickerViewDatetime: this.picke", "\n \n describe('pickerViewPropsJsTest', functi", "//            pickerViewText: this.pickerVie", "iewText: this.pickerViewText,\n//            ", "\n     it('testPickerViewStyleProp', 0, async", "  uri: 'pages/pickerView/prop/index'\n       ", "ole.info('testPickerViewIdProp START');\n    ", "iewTime: this.pickerViewTime,\n//            "], "files": ["List.test.js", "svgProps.test.js", "WebPage.ets", "commonComponentJsApi.test.js", "index.js", "pickerViewProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "View", "api_method_name": "create", "api_method_all": "create(value: any): any;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 82, "since": 0, "api_used": "\u662f", "lines": ["sole.info(\"[canvas] create image data by image", "bedAbstractProperty.createOneWaySync('subscrib", "Data = this.context.createImageData(80, 80);\n ", "\n    it('ACE_global_createLocalParticleAbility", "Data = this.context.createImageData(50, 50);\n ", "orResult = animator.createAnimator({\n    durat", "\n              this.createImageData();\n       ", ", 200, 100);\n  }\n\n  createImageData() {\n    le", "grad = this.context.createLinearGradient(50, 1", "\n              this.createRadialGradient();\n  ", "xt.stroke();\n  }\n\n  createPattern() {\n    let ", "var imageData = ctx.createImageData(1,1)\n     ", "tern = this.context.createPattern(img, 'repeat", ", 150, 150);\n  }\n\n  createRadialGradient() {\n ", "onst gradient = ctx.createLinearGradient(0,0,2", "var imageData = ctx.createImageData(1,2)\n     ", "grad = this.context.createRadialGradient(280, ", "Data = this.context.createImageData(imageData)", "bedAbstractProperty.createTwoWaySync('subscrib", "Data = this.context.createImageData(100, 100);", "\n              this.createPattern();\n         ", "    var path1 = ctx.createPath2D(\"M80 20 L40 1", "\n              this.createLinearGradient();\n  ", "    var path2 = ctx.createPath2D();\n        pa", " 250, 1660);\n  }\n\n  createLinearGradient() {\n ", "geData = offCanvas2.createImageData(100, 100);", "      var pat = ctx.createPattern(img, 'repeat", "sole.info(\"[canvas] create image data-----\" + ", "imageData));\n  }\n\n  createImageDataByImageData", "bserver = function2.createIntersectionObserver", "     var path = ctx.createPath2D(\"M80 20 L40 1", "var imageData = ctx.createImageData(2,1)\n     ", "tring = \"ACE_global_createLocalParticleAbility", "\n        var info = createLocalParticleAbility", "\n              this.createImageDataByImageData"], "files": ["GlobalJsunit.test.ets", "global.ets", "SubscribedAbstractPropertyJsunit.test.ets", "animatorOption.ets", "index.js", "canvas.ets"], "is_white": " ", "desc": " "}]}