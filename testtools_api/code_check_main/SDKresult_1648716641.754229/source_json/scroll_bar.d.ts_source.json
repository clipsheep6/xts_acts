{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\scroll_bar", "api": [{"api_class_name": "ScrollBarDirection", "api_method_all": "declare enum ScrollBarDirection {\n  \n  Vertical,\n\n  \n  Horizontal,\n}", "api_method_name": "ScrollBarDirection", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["ction).assertEqual('ScrollBarDirection.Vertical');\n      c", "ction).assertEqual('ScrollBarDirection.Vertical');\n      d", "roller2, direction: ScrollBarDirection.Horizontal, state: ", "ction).assertEqual('ScrollBarDirection.Vertical')\n      ex", "  \"directionValue\": ScrollBarDirection.Horizontal\n      };", "roller1, direction: ScrollBarDirection.Vertical, state: Ba", "ate directionValue: ScrollBarDirection = ScrollBarDirectio", "crollBarDirection = ScrollBarDirection.Vertical;\n  @State ", "ction).assertEqual('ScrollBarDirection.Horizontal')\n      "], "files": ["ScrollerBarJsunit.test.ets", "ScrollBar.ets", "ScrollBarJsunit.test.ets", "scrollBar.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollBarDirection", "api_method_name": "Vertical", "api_method_all": "Vertical,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 99, "since": 8, "api_used": "\u662f", "lines": ["nValue: Axis = Axis.Vertical\n  @State value: num", "ber = 40\n  @State inVerticalSetValue: number = 4", "ble(ScrollDirection.Vertical).scrollBar(BarState", "er = 40\n  @State outVerticalSetValue: number = 4", "             this.inVerticalSetValue = value\n   ", "'ScrollBarDirection.Vertical');\n      console.in", ".listDirection(Axis.Vertical)\n        .key('Navi", " getInspectorByKey('VerticalAlign');\n      conso", "beforeEach get enumsVerticalAlign state pages.na", "th: 1 }).alignItems(VerticalAlign.Bottom).justif", "ection: Axis = Axis.Vertical;\n  @State editMode:", "n = ScrollDirection.Vertical;\n  @State scrollBar", "\n      }.alignItems(VerticalAlign.Center).height", " console.info('enumsVerticalAlignTest_0100 START", " ScrollBarDirection.Vertical;\n  @State stateValu", "'ScrollBarDirection.Vertical');\n      done();\n  ", "  \"direction\": Axis.Vertical,\n          }\n      ", "beforeEach get enumsVerticalAlign state pages:' ", "h: 1 })\n      .key('VerticalAlign')\n    }.width(", " console.info('enumsVerticalAlignTest_0100 END')", "ms: VerticalAlign = VerticalAlign.Center\n  @Stat", "   uri: 'pages/enumsVerticalAlign',\n      }\n    ", "    direction: Axis.Vertical\n          })\n      ", "ble(ScrollDirection.Vertical)\n\n        ScrollBar", "Items).assertEqual('VerticalAlign.Center');\n    ", "al('ScrollDirection.Vertical');\n      done();\n  ", ").assertEqual('Axis.Vertical');\n      expect(obj", "            this.outVerticalSetValue = value\n   ", " @State alignItems: VerticalAlign = VerticalAlig", "\": \"ScrollDirection.Vertical\"\n          }\n      ", "th: 1 }).alignItems(VerticalAlign.Center).justif", ".listDirection(Axis.Vertical) // \u6392\u5217\u65b9\u5411\n        .d", "        Text(this.inVerticalSetValue.toFixed(0))", "al('ScrollDirection.Vertical');\n      expect(obj", "1F3F5)\n\n      Text('Vertical divider').fontSize(", "eforeEach push enumsVerticalAlign page result:' ", "        if (!('enumsVerticalAlign' == pages.name", "       Text(this.outVerticalSetValue.toFixed(0))", "\n      }.alignItems(VerticalAlign.Top).height('1", "  });\n\n    it('enumsVerticalAlignTest_0100', 0, ", "\n      }.alignItems(VerticalAlign.Center).width(", "fault function enumsVerticalAlignJsunit() {\n  de", " {\n  describe('enumsVerticalAlign', function () ", "eforeEach push enumsVerticalAlign page error:' +", "     value: this.outVerticalSetValue,\n          ", "      value: this.inVerticalSetValue,\n          ", " console.info(\"enumsVerticalAlignTest_0100 compo"], "files": ["dividerProps.test.js", "canvas2.ets", "ScrollBarJsunit.test.ets", "tabsProps.test.js", "canvas.ets", "Row.ets", "Navigation.ets", "divider.ets", "enumsVerticalAlign.ets", "ScrollerBarJsunit.test.ets", "navigation.ets", "Scroll.ets", "videoProps.test.js", "EnmusHorizontalAlignJsunit.test.ets", "swiperProps.test.js", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "List.ets", "RowJsunit.test.ets", "index.js", "ScrollCodeJsunit.test.ets", "edgeEffect.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "slider.ets", "ScrollJsunit.test.ets", "Calendar.ets", "ListJsunit.test.ets", "ScrollBar.ets", "row.ets", "scrollCode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollBarDirection", "api_method_name": "Horizontal", "api_method_all": "Horizontal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 86, "since": 8, "api_used": "\u662f", "lines": ["Items).assertEqual('HorizontalAlign.Center')\n     ", "Items).assertEqual('HorizontalAlign.End');\n      c", "  });\n\n    it('enumsHorizontalAlignTest_0100', 0, ", "   uri: 'pages/enumsHorizontalAlign',\n      }\n    ", "eforeEach push enumsHorizontalAlign page error:' +", "Items).assertEqual('HorizontalAlign.Center');\n    ", "orationValue\": Axis.Horizontal\n          }\n       ", "Column0 alignItems-'HorizontalAlign.Center':\" + JS", "istDirection\": Axis.Horizontal\n          }\n       ", "rection: Axis= Axis.Horizontal\n  @State Begin: num", ".$attrs.alignItems-'HorizontalAlign.Start':\" + JSO", " ScrollBarDirection.Horizontal\n      };\n      try ", "t.ets';\nimport enmusHorizontalAlignJsunit from './", " getInspectorByKey('HorizontalAlign');\n      conso", "eforeEach push enumsHorizontalAlign page result:' ", " {\n  describe('enumsHorizontalAlign', function () ", "Column2 alignItems-'HorizontalAlign.End':\" + JSON.", " console.info(\"enumsHorizontalAlignTest_0100 compo", "\n      }.alignItems(HorizontalAlign.Start).width('", ").assertEqual('Axis.Horizontal');\n      console.in", "\n      }.alignItems(HorizontalAlign.End).width('90", "\n      }.alignItems(HorizontalAlign.Center).width(", "beforeEach get enumsHorizontalAlign state pages:' ", "        .alignItems(HorizontalAlign.Center)\n\n     ", ": HorizontalAlign = HorizontalAlign.Start;\n\n  onPa", "Column1 alignItems-'HorizontalAlign.Start':\" + JSO", " @State alignItems: HorizontalAlign = HorizontalAl", "ingJsunit();\n  enmusHorizontalAlignJsunit();\n}", "h('100%')\n    .key('HorizontalAlign')\n  }\n}\n", "Items(this.toggle ? HorizontalAlign.Start : Horizo", "Items).assertEqual('HorizontalAlign.Start');\n     ", "       \"alignItems\":HorizontalAlign.Center\n       ", "Items).assertEqual('HorizontalAlign.Start')\n      ", "Jsunit from './EnmusHorizontalAlignJsunit.test.ets", " console.info('enumsHorizontalAlignTest_0100 START", " console.info('enumsHorizontalAlignTest_0100 END')", "    direction: Axis.Horizontal,\n          reverse:", "en }) {\n      Text('Horizontal divider').fontSize(", "beforeEach get enumsHorizontalAlign state pages.na", "ection: Axis = Axis.Horizontal;\n  @State weekStyle", "zontalAlign.Start : HorizontalAlign.Center)\n  }\n\n ", "ble(ScrollDirection.Horizontal)\n\n      Scroll() {\n", "        .alignItems(HorizontalAlign.End)\n\n        ", "        .alignItems(HorizontalAlign.Start)\n\n      ", "===============enumsHorizontalAlign test beforeEac"], "files": ["ScrollBarJsunit.test.ets", "Slider.ets", "enumsHorizontalAlign.ets", "divider.ets", "column.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "videoProps.test.js", "EnmusHorizontalAlignJsunit.test.ets", "GridContainer.ets", "index.js", "ColumnJsunit.test.ets", "calendar.ets", "progressProps.test.js", "ScrollJsunit.test.ets", "Calendar.ets", "Column.ets", "ListJsunit.test.ets", "ScrollBar.ets", "List.test.ets", "motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollBarOptions", "api_method_all": "declare interface ScrollBarOptions {\n  \n  scroller: Scroller;\n\n  \n  direction?: ScrollBarDirection;\n\n  \n  state?: BarState;\n}", "api_method_name": "ScrollBarOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollBarOptions", "api_method_name": "scroller", "api_method_all": "scroller: Scroller", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 38, "since": 8, "api_used": "\u662f", "lines": ["        ScrollBar({ scroller: this.scroller2, di", "roller();\n  private scroller2: Scroller = new Sc", "\n              this.scroller.scrollPage({\n      ", ")\n      Scroll(this.scroller) {\n        Column()", "t: 0, yOffset: this.scroller.currentOffset().yOf", "{\n      Scroll(this.scroller) {\n        Column()", "dth: number = 30;\n  scroller: Scroller = new Scr", "ar({ scroller: this.scroller, direction: this.di", "        ScrollBar({ scroller: this.scroller, dir", "ar({ scroller: this.scroller2, direction: Scroll", "        Scroll(this.scroller) {\n          Flex({", "Example {\n  private scroller1: Scroller = new Sc", "        ScrollBar({ scroller: this.scroller1, di", "roller();\n  private scroller3: Scroller = new Sc", "Example {\n  private scroller: Scroller = new Scr", "\n              this.scroller.currentOffset()\n   ", "ar({ scroller: this.scroller1, direction: Scroll", "   }\n          this.scroller.scrollPage({ next: ", "\n              this.scroller.scrollEdge(Edge.Top", "\n              this.scroller.scrollTo({\n        ", " = \"Scroll Page\";\n  scroller: Scroller = new Scr", "        Scroll(this.scroller2) {\n          Flex(", "        Scroll(this.scroller1) {\n          Flex(", "=> {\n          this.scroller.scrollTo({ xOffset:", "=> {\n          this.scroller.scrollEdge(Edge.Top", "\n              this.scroller.scrollToIndex(0)\n  "], "files": ["scrollBar.ets", "canvas2.ets", "ScrollBar.ets", "scrollCode.ets", "canvas.ets", "Scroll.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollBarOptions", "api_method_name": "direction", "api_method_all": "direction?: ScrollBarDirection", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 596, "since": 8, "api_used": "\u662f", "lines": ["lder() {\n    Flex({ direction: FlexDirection.Colu", "on = eventData.data.direction;\n        console.lo", "ata: {\n            \"direction\": Direction.Ltr\n   ", "ll: 'forwards',\n    direction: \"normal\",\n    begi", " if (eventData.data.direction != null) {\n        ", "uild() {\n    Flex({ direction: FlexDirection.Colu", " angle: 80,\n        direction: GradientDirection.", "ion: \" + obj.$attrs.direction);\n      expect(obj.", "'90%')\n      Flex({ direction: FlexDirection.Row,", "  expect(obj.$attrs.direction).assertEqual('Direc", ".$attrs.constructor.direction).assertEqual('FlexD", " {\n    Flex({\n      direction: FlexDirection.Colu", "    .direction(this.direction)\n        .key('rowD", "gin(5)\n      Flex({ direction: FlexDirection.Row,", "dth('90%')\n        .direction(this.direction)\n   ", "  events_emitter.on(directionChangeEvent, this.st", "    Text('slider in direction set').fontSize(9).f", "   Text('slider out direction set').fontSize(9).f", ".InSet,\n            direction: this.decorationVal", ".TopStart;\n  @State direction: Direction = Direct", "gn')\n\n        Text('direction').fontSize(20).font", "ction value\" + this.direction);\n      }\n    }\n  }", "'90%')\n      Flex({ direction: FlexDirection.Row ", "xExample {\n  @State direction: FlexDirection = Fl", "umber = 3;\n  @State direction: Axis = Axis.Horizo", "weekStyle)\n        .direction(this.direction)\n   ", "uild() {\n    Flex({ direction: FlexDirection.Row,", "OutSet,\n            direction: Axis.Vertical\n    ", " ATTRS_DIRECTION = 'direction'\nconst ATTRS_ALIGN ", "\n    angle: 90,\n    direction: GradientDirection.", "rations: 1,\n        direction: 'alternate',\n     ", " if (eventData.data.direction) {\n        this.dir", "CallBack);\n\n    let directionChangeEvent = {\n    ", "ion) {\n        this.direction = eventData.data.di", "ull) {\n        this.direction = eventData.data.di", "on = eventData.data.direction;\n      } else if (e", ".log(\"Calendar page direction value\" + this.direc", "    .direction(this.direction)\n        .backgroun", "ttrs.linearGradient.direction).assertEqual('Gradi"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "Qrcode.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "transition.ets", "Image.ets", "List.test.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "positionSetting.ets", "animatorOption.ets", "tapGesture.ets", "FlexJsunit.test.ets", "flexDirection.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "flex.ets", "marqueeProps.test.js", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "BackgroundJsunit.test.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "GradientDirectionJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "RowJsunit.test.ets", "index.js", "ohosRouterA.ets", "Link.ets", "slider.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollBarOptions", "api_method_name": "state", "api_method_all": "state?: BarState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1569, "since": 8, "api_used": "\u662f", "lines": ["tart to emit action state\")\n            event", "ange current action state is: ' + this.onActi", "stateChangCallBack] stateChangCallBack \");\n  ", "teChangeEvent, this.stateChangCallBack);\n  }\n", "ngeEventThree, this.stateChangCallBack);\n  }\n", "  events_emitter.on(stateChangeEvent2, this.s", "ck);\n  }\n\n  private stateChangCallBack = (eve", "    }\n  }\n  private stateChangCallBack = (eve", "  events_emitter.on(stateChangeEvent, this.st", "onClick emit action state err: \" + JSON.strin", "info(\"[column] page state change called:\" + J", "\n    console.info(\"[stateChangCallBack] state", "Flag current action state is: ' + this.disApp", "CallBack);\n\n    var stateChangeEventTwo = {\n ", " called ');\n    var stateChangeEvent = {\n    ", "info(\"[column] page stateChangCallBack\");\n   ", "     console.info(\"[stateChangCallBack] state", "CallBack);\n\n    var stateChangeEventThree = {", "CallBack);\n\n    var stateChangeEvent2 = {\n   ", "info(\"[appear] page state change called:\" + J", "teChangeEvent, this.stateChangCallBack);\n\n   ", "aChange emit action state err: \" + JSON.strin", "ction.Row\n  private stateChangCallBack = (eve", "tart to emit action state\")\n              eve", "w called');\n    var stateChangeEvent = {\n    ", "stateChangCallBack] state change called: \" + ", "k);\n\n  }\n\n  private stateChangCallBack = (eve", "Flag current action state is: ' + this.appear", "ole.info(\"Flex page state change called:\" + J", "earFlag emit action state err: \" + JSON.strin", "hangeEventTwo, this.stateChangCallBack);\n\n   ", "info(\"[appear] page stateChangCallBack\");\n   ", "nfo(\"[ellipse] page state change called:\" + J", "nfo(\"[ellipse] page stateChangCallBack\");\n   ", "  events_emitter.on(stateChangeEventThree, th", "  events_emitter.on(stateChangeEventTwo, this", "eChangeEvent2, this.stateChangCallBack);\n\n  }"], "files": ["ohosPrompt.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "configuration.ets", "CounterJsunit.test.ets", "ImageEffectsJsunit.test.ets", "video.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "CheckboxGroupJsunit.test.ets", "column.ets", "richText.ets", "checkboxGroup.ets", "sourceType.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "TextStyleJsunit.test.ets", "geometryTransition.ets", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "marquee.ets", "panel.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "border.ets", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "scrollBar.ets", "FillModeJsunit.test.ets", "CalendarJsunit.test.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "TouchJsunit.test.ets", "transForm.ets", "LongPressGesture.test.ets", "path.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "LinkJsunit.test.ets", "scrollCode.ets", "CurvesJsunit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "GridJsnuit.test.ets", "focus.ets", "VideoJsunit.test.ets", "touch.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "EnmusFlexAlignJsunit.test.ets", "background.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "gauge.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "ScrollerBarJsunit.test.ets", "customDialogController.ets", "text.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "tapGesture.ets", "flexDirection.ets", "FlexJsunit.test.ets", "shapeClipping.ets", "PropJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "Canvas2Jsunit.test.ets", "ListJsunit.test.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "ColorGradientJsunit.test.ets", "flex.ets", "MotionPathJsunit.test.ets", "gridContainer.ets", "gridPage.ets", "ShapeJsunit.test.ets", "enable.ets", "PieceCode.ets", "badge.ets", "GlobalJsunit.test.ets", "textStyle.ets", "imageEffects.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "circle.ets", "listItem.ets", "CustomDialogControllerJsunit.test.ets", "Button.ets", "ScrollJsunit.test.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "ContentStorage.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "direction2.ets", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "ohosMatrix4.ets", "CircleJsunit.test.ets", "divider.ets", "ScrollBar.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "line.ets", "TransFormJsunit.test.ets", "priorityGesture.ets", "GestureModeJsunit.test.ets", "touchAble.ets", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "CheckboxJsunit.test.ets", "progress.ets", "CanvasJsunit.test.ets", "TextTimerJsunit.test.ets", "datePicker.ets", "pageTransition.ets", "TabsJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "GridSettingsJsunit.test.ets", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "areaChange.ets", "BindPopupJsunit.test.ets", "Link.ets", "parallelGesture.ets", "select.ets", "timeStamp.ets", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollBarInterface", "api_method_all": "interface ScrollBarInterface {\n  \n  (value: ScrollBarOptions): ScrollBarAttribute;\n}", "api_method_name": "ScrollBarInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollBarInterface", "api_method_name": "value", "api_method_all": "(value: ScrollBarOptions): ScrollBarAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 8, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollBarAttribute", "api_method_all": "declare class ScrollBarAttribute extends CommonMethod<ScrollBarAttribute> {}", "api_method_name": "ScrollBarAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}