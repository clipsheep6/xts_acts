{"subsystem_ch": "\u7535\u8bdd\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "telephony", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.telephony.sim", "api": [{"api_class_name": "sim", "api_method_all": "declare namespace sim {\n  \n  function isSimActive(slotId: number, callback: AsyncCallback<boolean>): void;\n  function isSimActive(slotId: number): Promise<boolean>;\n\n  \n  function getDefaultVoiceSlotId(callback: AsyncCallback<number>): void;\n  function getDefaultVoiceSlotId(): Promise<number>;\n\n  \n  function hasOperatorPrivileges(slotId: number, callback: AsyncCallback<boolean>): void;\n  function hasOperatorPrivileges(slotId: number): Promise<boolean>;\n\n  \n  function getISOCountryCodeForSim(slotId: number, callback: AsyncCallback<string>): void;\n  function getISOCountryCodeForSim(slotId: number): Promise<string>;\n\n  \n  function getSimOperatorNumeric(slotId: number, callback: AsyncCallback<string>): void;\n  function getSimOperatorNumeric(slotId: number): Promise<string>;\n\n  \n  function getSimSpn(slotId: number, callback: AsyncCallback<string>): void;\n  function getSimSpn(slotId: number): Promise<string>;\n\n  \n  function getSimState(slotId: number, callback: AsyncCallback<SimState>): void;\n  function getSimState(slotId: number): Promise<SimState>;\n\n  \n  function getCardType(slotId: number, callback: AsyncCallback<CardType>): void;\n  function getCardType(slotId: number): Promise<CardType>;\n\n  \n  function getSimIccId(slotId: number, callback: AsyncCallback<string>): void;\n  function getSimIccId(slotId: number): Promise<string>;\n\n  \n  function getVoiceMailIdentifier(slotId: number, callback: AsyncCallback<string>): void;\n  function getVoiceMailIdentifier(slotId: number): Promise<string>;\n\n  \n  function getVoiceMailNumber(slotId: number, callback: AsyncCallback<string>): void;\n  function getVoiceMailNumber(slotId: number): Promise<string>;\n\n  \n  function setVoiceMailInfo(slotId: number, mailName: string, mailNumber: string, callback: AsyncCallback<void>): void;\n  function setVoiceMailInfo(slotId: number, mailName: string, mailNumber: string): Promise<void>;\n\n  \n  function getSimTelephoneNumber(slotId: number, callback: AsyncCallback<string>): void;\n  function getSimTelephoneNumber(slotId: number): Promise<string>;\n\n  \n  function getSimGid1(slotId: number, callback: AsyncCallback<string>): void;\n  function getSimGid1(slotId: number): Promise<string>;\n\n  \n  function getMaxSimCount(): number;\n\n  \n  function getIMSI(slotId: number, callback: AsyncCallback<string>): void;\n  function getIMSI(slotId: number): Promise<string>;\n\n  \n  function hasSimCard(slotId: number, callback: AsyncCallback<boolean>): void;\n  function hasSimCard(slotId: number): Promise<boolean>;\n\n  \n  function getSimAccountInfo(slotId: number, callback: AsyncCallback<IccAccountInfo>): void;\n  function getSimAccountInfo(slotId: number): Promise<IccAccountInfo>;\n\n  \n  function getActiveSimAccountInfoList(callback: AsyncCallback<Array<IccAccountInfo>>): void;\n  function getActiveSimAccountInfoList(): Promise<Array<IccAccountInfo>>;\n\n  \n  function setDefaultVoiceSlotId(slotId: number, callback: AsyncCallback<void>): void;\n  function setDefaultVoiceSlotId(slotId: number): Promise<void>;\n\n  \n  function activateSim(slotId: number, callback: AsyncCallback<void>): void;\n  function activateSim(slotId: number): Promise<void>;\n\n  \n  function deactivateSim(slotId: number, callback: AsyncCallback<void>): void;\n  function deactivateSim(slotId: number): Promise<void>;\n\n  \n  function setShowName(slotId: number, name: string, callback: AsyncCallback<void>): void;\n  function setShowName(slotId: number, name: string): Promise<void>;\n\n  \n  function getShowName(slotId: number, callback: AsyncCallback<string>): void;\n  function getShowName(slotId: number): Promise<string>;\n\n  \n  function setShowNumber(slotId: number, number: string, callback: AsyncCallback<void>): void;\n  function setShowNumber(slotId: number, number: string): Promise<void>;\n\n  \n  function getShowNumber(slotId: number, callback: AsyncCallback<string>): void;\n  function getShowNumber(slotId: number): Promise<string>;\n\n  \n  function getOperatorConfigs(slotId: number, callback: AsyncCallback<Array<OperatorConfig>>): void;\n  function getOperatorConfigs(slotId: number): Promise<Array<OperatorConfig>>;\n\n  \n  function unlockPin(slotId: number, pin: string, callback: AsyncCallback<LockStatusResponse>): void;\n  function unlockPin(slotId: number, pin: string): Promise<LockStatusResponse>;\n\n  \n  function unlockPuk(slotId: number, newPin: string, puk: string, callback: AsyncCallback<LockStatusResponse>): void;\n  function unlockPuk(slotId: number, newPin: string, puk: string): Promise<LockStatusResponse>;\n\n  \n  function alterPin(slotId: number, newPin: string, oldPin: string, callback: AsyncCallback<LockStatusResponse>): void;\n  function alterPin(slotId: number, newPin: string, oldPin: string): Promise<LockStatusResponse>;\n\n  \n  function setLockState(slotId: number, options: LockInfo, callback: AsyncCallback<LockStatusResponse>): void;\n  function setLockState(slotId: number, options: LockInfo): Promise<LockStatusResponse>;\n\n  \n  function unlockPin2(slotId: number, pin2: string, callback: AsyncCallback<LockStatusResponse>): void;\n  function unlockPin2(slotId: number, pin2: string): Promise<LockStatusResponse>;\n\n  \n  function unlockPuk2(slotId: number, newPin2: string, puk2: string, callback: AsyncCallback<LockStatusResponse>): void;\n  function unlockPuk2(slotId: number, newPin2: string, puk2: string): Promise<LockStatusResponse>;\n\n  \n  function alterPin2(slotId: number, newPin2: string, oldPin2: string, callback: AsyncCallback<LockStatusResponse>): void;\n  function alterPin2(slotId: number, newPin2: string, oldPin2: string): Promise<LockStatusResponse>;\n\n  \n  function queryIccDiallingNumbers(slotId: number, type: ContactType, callback: AsyncCallback<Array<DiallingNumbersInfo>>): void\n  function queryIccDiallingNumbers(slotId: number, type: ContactType): Promise<Array<DiallingNumbersInfo>>;\n\n  \n  function addIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo, callback: AsyncCallback<void>): void;\n  function addIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo): Promise<void>;\n\n  \n  function delIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo, callback: AsyncCallback<void>): void;\n  function delIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo): Promise<void>;\n\n  \n  function updateIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo, callback: AsyncCallback<void>): void;\n  function updateIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo): Promise<void>;\n\n  \n  function getLockState(slotId: number, lockType: LockType, callback: AsyncCallback<LockState>): void;\n  function getLockState(slotId: number, lockType: LockType): Promise<LockState>;\n\n  \n  function sendEnvelopeCmd(slotId: number, cmd: string, callback: AsyncCallback<void>): void;\n  function sendEnvelopeCmd(slotId: number, cmd: string): Promise<void>;\n\n  \n  function sendTerminalResponseCmd(slotId: number, cmd: string, callback: AsyncCallback<void>): void;\n  function sendTerminalResponseCmd(slotId: number, cmd: string): Promise<void>;\n\n  \n  function unlockSimLock(slotId: number, lockInfo: PersoLockInfo, callback: AsyncCallback<LockStatusResponse>): void;\n  function unlockSimLock(slotId: number, lockInfo: PersoLockInfo): Promise<LockStatusResponse>;\n\n  \n  export interface OperatorConfig {\n    field: string;\n    value: string;\n  }\n\n  \n  export interface IccAccountInfo {\n    \n    simId: number;\n    \n    slotIndex: number;\n    \n    isEsim: boolean;\n    \n    isActive: boolean;\n    \n    iccId: string;\n    \n    showName: string;\n    \n    showNumber: string;\n  }\n\n  \n  export interface LockStatusResponse {\n    \n    result: number;\n    \n    remain?: number;\n  }\n\n  \n  export interface DiallingNumbersInfo {\n    alphaTag: string;\n    number: string;\n    recordNumber?: number;\n    pin2?: string;\n  }\n\n  \n  export interface LockInfo {\n    lockType: LockType;\n    password: string;\n    state: LockState;\n  }\n\n  \n  export interface PersoLockInfo {\n    lockType: PersoLockType;\n    password: string;\n  }\n\n  \n  export enum LockType {\n    PIN_LOCK = 1,\n    FDN_LOCK = 2,\n  }\n\n  \n  export enum CardType {\n    \n    UNKNOWN_CARD = -1,\n\n    \n    SINGLE_MODE_SIM_CARD = 10,\n\n    \n    SINGLE_MODE_USIM_CARD = 20,\n\n    \n    SINGLE_MODE_RUIM_CARD = 30,\n\n    \n    DUAL_MODE_CG_CARD = 40,\n\n    \n    CT_NATIONAL_ROAMING_CARD = 41,\n\n    \n    CU_DUAL_MODE_CARD = 42,\n\n    \n    DUAL_MODE_TELECOM_LTE_CARD = 43,\n\n    \n    DUAL_MODE_UG_CARD = 50,\n\n    \n    SINGLE_MODE_ISIM_CARD = 60\n  }\n\n  export enum SimState {\n    \n    SIM_STATE_UNKNOWN,\n\n    \n    SIM_STATE_NOT_PRESENT,\n\n    \n    SIM_STATE_LOCKED,\n\n    \n    SIM_STATE_NOT_READY,\n\n    \n    SIM_STATE_READY,\n\n    \n    SIM_STATE_LOADED\n  }\n\n  \n  export enum LockState {\n    \n    LOCK_OFF = 0,\n\n    \n    LOCK_ON = 1,\n  }\n\n  \n  export enum ContactType {\n    GENERAL_CONTACT = 1,\n    FIXED_DIALING = 2,\n  }\n\n  \n  export enum PersoLockType {\n    PN_PIN_LOCK, //Network Personalization (refer 3GPP TS 22.022 [33])\n    PN_PUK_LOCK,\n    PU_PIN_LOCK, //network sUbset Personalization (refer 3GPP TS 22.022 [33])\n    PU_PUK_LOCK,\n    PP_PIN_LOCK, //service Provider Personalization (refer 3GPP TS 22.022 [33])\n    PP_PUK_LOCK,\n    PC_PIN_LOCK, //Corporate Personalization (refer 3GPP TS 22.022 [33])\n    PC_PUK_LOCK,\n    SIM_PIN_LOCK, //SIM/USIM personalisation (refer 3GPP TS 22.022 [33])\n    SIM_PUK_LOCK,\n  }\n}", "api_method_name": "sim", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 237, "since": 0, "api_used": "\u662f", "lines": ["", "      observer.off('simStateChange', (data)", "a = {\n        type: sim.CardType.UNKNOWN_CA", "ID_MINUS1 = -1;\n\n// sim correct password\nex", ", \"voicemail_uri\", \"sim_type\", \"is_hd\", \"is", "\n      observer.on('simStateChange', (data)", "server_observer_off_simStateChange_0100\n   ", "bserver_observer_on_simStateChange_0200', 0", "ll the on method of simStateChange\n     */\n", "l the off method of simStateChange\n     */\n", "a = {\n        type: sim.CardType.SINGLE_MOD", "2 = '18099014';\n\n// sim incorrect password\n", "bserver_observer_on_simStateChange_0100 Tes", "ioSecondJsunit();\n  simJsunit();\n  statisti", "ri\"],\n            [\"sim_type\", \"1\"], [\"is_h", "77\"],\n            [\"sim_type\", \"4\"], [\"is_h", "t.test.ets';\nimport simJsunit from './SimJs", "bserver_observer_on_simStateChange_0100', 0", "bserver_observer_on_simStateChange_0200\n   ", "ny.observer'\nimport sim from \"@ohos.telepho", "bserver_observer_on_simStateChange_0200 Tes", "server_observer_off_simStateChange_0100 Tes", "7777\",\n            \"sim_type\": 4,\n         ", " @tc.name      : on_simStateChange\n     * @", "bserver_observer_on_simStateChange_0100\n   ", "om \"@ohos.telephony.sim\"\n\n\nexport default f", "@tc.name      : off_simStateChange\n     * @", "\"uri\",\n            \"sim_type\": 1,\n         ", "\n      observer.on('simStateChange', {\n    ", "server_observer_off_simStateChange_0100', 0"], "files": ["SmsMmsJsunit.test.ets", "SimJsunit.test.ets", "ObserverJsunit.test.ets", "SimManager.test.js", "List.test.ets", "common.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "isSimActive", "api_method_all": "function isSimActive(slotId: number, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_isSimActive_Async_0700';\n    sim.isSimActive(env.SL", "mber  Telephony_Sim_isSimActive_Async_0700\n   * @tc.name    Test the sl", " parameter 2 during isSimActive interface card activation,\n   *        ", "  it('Telephony_Sim_isSimActive_Promise_0700', 0, async function (done)", "et data = await sim.isSimActive(env.SLOTID2);\n      expect(data).assert", "  it('Telephony_Sim_isSimActive_Async_0700', 0, async function (done) {", "sync_0700';\n    sim.isSimActive(env.SLOTID2, (err, data) => {\n      if ", "mber  Telephony_Sim_isSimActive_Promise_0700\n   * @tc.name    Test the ", "e.log(`${CASE_NAME} isSimActive fail, err: ${err.message}`);\n      expe", "ME = 'Telephony_Sim_isSimActive_Promise_0700';\n    try {\n      let data"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "isSimActive", "api_method_all": "function isSimActive(slotId: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getDefaultVoiceSlotId", "api_method_all": "function getDefaultVoiceSlotId(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_getDefaultVoiceSlotId_Async_0200';\n    sim.getDefaultVoiceSlo", "mber  Telephony_Sim_getDefaultVoiceSlotId_Async_0200\n    * @tc.name    The test f", "mber  Telephony_Sim_getDefaultVoiceSlotId_Promise_0200\n    * @tc.name    The test", "sync_0200';\n    sim.getDefaultVoiceSlotId((err, data) => {\n      if (err) {\n     ", "  it('Telephony_Sim_getDefaultVoiceSlotId_Async_0200', 0, async function (done) {", "et data = await sim.getDefaultVoiceSlotId();\n      console.log(`${CASE_NAME}, dat", "  it('Telephony_Sim_getDefaultVoiceSlotId_Promise_0200', 0, async function (done)", "ME = 'Telephony_Sim_getDefaultVoiceSlotId_Promise_0200';\n    try {\n      let data"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getDefaultVoiceSlotId", "api_method_all": "function getDefaultVoiceSlotId(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "hasOperatorPrivileges", "api_method_all": "function hasOperatorPrivileges(slotId: number, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["e.log(`${CASE_NAME} hasOperatorPrivileges error: ${error.message}`);\n        expe", "umber Telephony_Sim_hasOperatorPrivileges_Async_0400\n   * @tc.name   Test hasOper", "  * @tc.name   Test hasOperatorPrivileges interface slotId exception enter parame", "e.log(`${CASE_NAME} hasOperatorPrivileges error: ${error.message}`);\n      expect", "ME = 'Telephony_Sim_hasOperatorPrivileges_Promise_0400';\n    try {\n      const re", "  it('Telephony_Sim_hasOperatorPrivileges_Promise_0400', 0, async function (done)", "ME = 'Telephony_Sim_hasOperatorPrivileges_Async_0400';\n    sim.hasOperatorPrivile", "umber Telephony_Sim_hasOperatorPrivileges_Promise_0400\n   * @tc.name   Test hasOp", "sync_0400';\n    sim.hasOperatorPrivileges(env.SLOTID2, (error, result) => {\n     ", "  it('Telephony_Sim_hasOperatorPrivileges_Async_0400', 0, function (done) {\n    c", " result = await sim.hasOperatorPrivileges(env.SLOTID2);\n      expect(result).asse"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "hasOperatorPrivileges", "api_method_all": "function hasOperatorPrivileges(slotId: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getISOCountryCodeForSim", "api_method_all": "function getISOCountryCodeForSim(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_getISOCountryCodeForSim_Promise_0200';\n    try {\n      var data", "  it('Telephony_Sim_getISOCountryCodeForSim_Async_0200', 0, async function (done) {", "sync_0200';\n    sim.getISOCountryCodeForSim(env.SLOTID2, (err, data) => {\n      if ", "ar data = await sim.getISOCountryCodeForSim(env.SLOTID2);\n    } catch (err) {\n     ", "  it('Telephony_Sim_getISOCountryCodeForSim_Promise_0200', 0, async function (done)", "ME = 'Telephony_Sim_getISOCountryCodeForSim_Async_0200';\n    sim.getISOCountryCodeF"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getISOCountryCodeForSim", "api_method_all": "function getISOCountryCodeForSim(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimOperatorNumeric", "api_method_all": "function getSimOperatorNumeric(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_getSimOperatorNumeric_Async_0200';\n    sim.getSimOperatorNume", "sync_0200';\n    sim.getSimOperatorNumeric(env.SLOTID2, (err, data) => {\n      if ", "  it('Telephony_Sim_getSimOperatorNumeric_Promise_0200', 0, async function (done)", "ME = 'Telephony_Sim_getSimOperatorNumeric_Promise_0200';\n    try {\n      var data", "ar data = await sim.getSimOperatorNumeric(env.SLOTID2);\n    } catch (err) {\n     ", "  it('Telephony_Sim_getSimOperatorNumeric_Async_0200', 0, async function (done) {"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimOperatorNumeric", "api_method_all": "function getSimOperatorNumeric(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimSpn", "api_method_all": "function getSimSpn(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_getSimSpn_Async_0200';\n    sim.getSimSpn(env.SLOT", "  it('Telephony_Sim_getSimSpn_Promise_0200', 0, async function (done)", "ar data = await sim.getSimSpn(env.SLOTID2);\n    } catch (err) {\n     ", "sync_0200';\n    sim.getSimSpn(env.SLOTID2, (err, data) => {\n      if ", "  it('Telephony_Sim_getSimSpn_Async_0200', 0, async function (done) {", "ME = 'Telephony_Sim_getSimSpn_Promise_0200';\n    try {\n      var data"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimSpn", "api_method_all": "function getSimSpn(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimState", "api_method_all": "function getSimState(slotId: number, callback: AsyncCallback<SimState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["ar data = await sim.getSimState(env.SLOTID2);\n    } catch (err) {\n     ", "ME = 'Telephony_Sim_getSimState_Async_0200';\n      if (err) {\n        c", "ME = 'Telephony_Sim_getSimState_Promise_0200';\n    try {\n      var data", "on (done) {\n    sim.getSimState(env.SLOTID2, (err, data) => {\n      con", "  it('Telephony_Sim_getSimState_Async_0200', 0, async function (done) {", "  it('Telephony_Sim_getSimState_Promise_0200', 0, async function (done)"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimState", "api_method_all": "function getSimState(slotId: number): Promise<SimState>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getCardType", "api_method_all": "function getCardType(slotId: number, callback: AsyncCallback<CardType>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["ardType = await sim.getCardType(env.SLOTID2);\n      expect(cardType ===", "sync_0400';\n    sim.getCardType(env.SLOTID2, (error, cardType) => {\n   "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getCardType", "api_method_all": "function getCardType(slotId: number): Promise<CardType>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimIccId", "api_method_all": "function getSimIccId(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["sync_0600';\n    sim.getSimIccId(env.SLOTID2, error => {\n      if (error", "e.log(`${CASE_NAME} getSimIccId expect error: ${error.message}`);\n     ", ".name    CDMA file, getSimIccId async callback interface slotId\n   *   ", ".name    CDMA file, getSimIccId promise interface slotId\n   *          ", "y {\n      await sim.getSimIccId(env.SLOTID2);\n      expect().assertFail"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimIccId", "api_method_all": "function getSimIccId(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getVoiceMailIdentifier", "api_method_all": "function getVoiceMailIdentifier(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["sync_0600';\n    sim.getVoiceMailIdentifier(env.SLOTID2, (err, data) => {\n      if ", " * @tc.name    Test getVoiceMailIdentifier slotId exception input parameter 2, che", "  it('Telephony_Sim_getVoiceMailIdentifier_Async_0600', 0, async function (done) {", "ME = 'Telephony_Sim_getVoiceMailIdentifier_Promise_0600';\n    let data;\n    try {\n", "  it('Telephony_Sim_getVoiceMailIdentifier_Promise_0600', 0, async function (done)", "mber  Telephony_Sim_getVoiceMailIdentifier_Promise_0600\n   * @tc.name    Test getV", "mber  Telephony_Sim_getVoiceMailIdentifier_Async_0600\n   * @tc.name    Test getVoi", "ME = 'Telephony_Sim_getVoiceMailIdentifier_Async_0600';\n    sim.getVoiceMailIdenti", "   data = await sim.getVoiceMailIdentifier(env.SLOTID2);\n    } catch (err) {\n     "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getVoiceMailIdentifier", "api_method_all": "function getVoiceMailIdentifier(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getVoiceMailNumber", "api_method_all": "function getVoiceMailNumber(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["  it('Telephony_Sim_getVoiceMailNumber_Promise_0600', 0, async function (done)", "mber  Telephony_Sim_getVoiceMailNumber_Async_0600\n   * @tc.name    Test getVoi", "ME = 'Telephony_Sim_getVoiceMailNumber_Async_0600';\n    sim.getVoiceMailNumber", "   data = await sim.getVoiceMailNumber(env.SLOTID2);\n    } catch (err) {\n     ", "mber  Telephony_Sim_getVoiceMailNumber_Promise_0600\n   * @tc.name    Test getV", "ME = 'Telephony_Sim_getVoiceMailNumber_Promise_0600';\n    let data;\n    try {\n", "sync_0600';\n    sim.getVoiceMailNumber(env.SLOTID2, (err, data) => {\n      if ", " * @tc.name    Test getVoiceMailNumber slotId exception input parameter 2, che", "  it('Telephony_Sim_getVoiceMailNumber_Async_0600', 0, async function (done) {"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getVoiceMailNumber", "api_method_all": "function getVoiceMailNumber(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "setVoiceMailInfo", "api_method_all": "function setVoiceMailInfo(slotId: number, mailName: string, mailNumber: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["sync_0400';\n    sim.setVoiceMailInfo(env.SLOTID2, env.MAIL_NAME_LEN12, env.M", "@tc.name   Test the setVoiceMailInfo async callback interface, slotId is 2, ", "y {\n      await sim.setVoiceMailInfo(env.SLOTID2, env.MAIL_NAME_LEN12, env.M", "  it('Telephony_Sim_setVoiceMailInfo_Async_0400', 0, function (done) {\n    c", "@tc.name   Test the setVoiceMailInfo promise interface, slotId is 2, expect ", "  it('Telephony_Sim_setVoiceMailInfo_Promise_0400', 0, async function (done)", "ME = 'Telephony_Sim_setVoiceMailInfo_Promise_0400';\n    try {\n      await si", "e.log(`${CASE_NAME} setVoiceMailInfo expect error: ${error.message}`);\n     ", "umber Telephony_Sim_setVoiceMailInfo_Async_0400\n   * @tc.name   Test the set", "ME = 'Telephony_Sim_setVoiceMailInfo_Async_0400';\n    sim.setVoiceMailInfo(e", "umber Telephony_Sim_setVoiceMailInfo_Promise_0400\n   * @tc.name   Test the s"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "setVoiceMailInfo", "api_method_all": "function setVoiceMailInfo(slotId: number, mailName: string, mailNumber: string): Promise<void>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimTelephoneNumber", "api_method_all": "function getSimTelephoneNumber(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["mber  Telephony_Sim_getSimTelephoneNumber_Promise_0600\n   * @tc.name    Test getS", " * @tc.name    Test getSimTelephoneNumber slotId exception input parameter 2, che", "mber  Telephony_Sim_getSimTelephoneNumber_Async_0600\n   * @tc.name    Test getSim", "ME = 'Telephony_Sim_getSimTelephoneNumber_Async_0600';\n    sim.getSimTelephoneNum", " * @tc.name    Test getSimTelephoneNumber slotId exception input parameter 2,\n   ", "sync_0600';\n    sim.getSimTelephoneNumber(env.SLOTID2, (err, data) => {\n      if ", "  it('Telephony_Sim_getSimTelephoneNumber_Async_0600', 0, async function (done) {", "  it('Telephony_Sim_getSimTelephoneNumber_Promise_0600', 0, async function (done)", "   data = await sim.getSimTelephoneNumber(env.SLOTID2);\n    } catch (err) {\n     ", "ME = 'Telephony_Sim_getSimTelephoneNumber_Promise_0600';\n    let data;\n    try {\n"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimTelephoneNumber", "api_method_all": "function getSimTelephoneNumber(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimGid1", "api_method_all": "function getSimGid1(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["  it('Telephony_Sim_getSimGid1_Async_0200', 0, async function (done) {", "ME = 'Telephony_Sim_getSimGid1_Async_0200';\n    sim.getSimGid1(env.SLO", "  it('Telephony_Sim_getSimGid1_Promise_0200', 0, async function (done)", "ME = 'Telephony_Sim_getSimGid1_Promise_0200';\n    try {\n      var data", "sync_0200';\n    sim.getSimGid1(env.SLOTID2, (err, data) => {\n      if ", "ar data = await sim.getSimGid1(env.SLOTID2);\n    } catch (err) {\n     "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimGid1", "api_method_all": "function getSimGid1(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getMaxSimCount", "api_method_all": "function getMaxSimCount(): number;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["  it('Telephony_Sim_getMaxSimCount_0100', 0, function ", "@tc.name   Test the getMaxSimCount interface and view ", "ME = 'Telephony_Sim_getMaxSimCount_0100';\n    let simC", "umber Telephony_Sim_getMaxSimCount_0100\n   * @tc.name ", " let simCount = sim.getMaxSimCount();\n    expect(simCo"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getIMSI", "api_method_all": "function getIMSI(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 0, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_getIMSI_Async_0200';\n    try {\n      await sim.", "mber  Telephony_Sim_getIMSI_Promise_0200\n    * @tc.name    To test ", "name    To test the getIMSI interface, enter slotid as 4 and expect", "  it('Telephony_Sim_getIMSI_Async_0200', 0, async function (done) {", "sync_0200';\n    sim.getIMSI(env.SLOTID2, err => {\n      if (err) {\n", "  it('Telephony_Sim_getIMSI_Promise_0200', 0, async function (done)", "mber  Telephony_Sim_getIMSI_Async_0200\n    * @tc.name    To test th", "ME = 'Telephony_Sim_getIMSI_Async_0200';\n    sim.getIMSI(env.SLOTID", "y {\n      await sim.getIMSI(env.SLOTID2);\n    } catch (err) {\n     "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getIMSI", "api_method_all": "function getIMSI(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "hasSimCard", "api_method_all": "function hasSimCard(slotId: number, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["sync_0600';\n    sim.hasSimCard(env.SLOTID2, (err, data) => {\n      if ", "et data = await sim.hasSimCard(env.SLOTID2);\n      expect(data).assert", "ME = 'Telephony_Sim_hasSimCard_Async_0600';\n    sim.hasSimCard(env.SLO", "  it('Telephony_Sim_hasSimCard_Async_0600', 0, async function (done) {", "mber  Telephony_Sim_hasSimCard_Promise_0600\n     * @tc.name    Test th", " parameter 2 of the hasSimCard interface,\n     *             check the", "ME = 'Telephony_Sim_hasSimCard_Promise_0600';\n    try {\n      let data", "  it('Telephony_Sim_hasSimCard_Promise_0600', 0, async function (done)", "mber  Telephony_Sim_hasSimCard_Async_0600\n     * @tc.name    Test the "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "hasSimCard", "api_method_all": "function hasSimCard(slotId: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimAccountInfo", "api_method_all": "function getSimAccountInfo(slotId: number, callback: AsyncCallback<IccAccountInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["e.log(`${CASE_NAME} getSimAccountInfo: ${JSON.stringify(info)}`);\n        exp", "  it('Telephony_Sim_getSimAccountInfo_Async_0100', 0, async function (done) {", "y {\n      await sim.getSimAccountInfo(env.SLOTID2);\n      expect().assertFail", "cIdValue;\n      sim.getSimAccountInfo(env.DEFAULT_SLOTID, (err, info) => {\n  ", "  it('Telephony_Sim_getSimAccountInfo_Async_0200', 0, async function (done) {", "  it('Telephony_Sim_getSimAccountInfo_Promise_0200', 0, async function (done)", "ME = 'Telephony_Sim_getSimAccountInfo_Async_0200';\n    sim.getSimAccountInfo(", "sync_0200';\n    sim.getSimAccountInfo(env.SLOTID2, (err) => {\n      if (err) ", "ME = 'Telephony_Sim_getSimAccountInfo_Async_0100';\n      let iccIdValue;\n    ", "ME = 'Telephony_Sim_getSimAccountInfo_Promise_0200';\n    try {\n      await si"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getSimAccountInfo", "api_method_all": "function getSimAccountInfo(slotId: number): Promise<IccAccountInfo>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getActiveSimAccountInfoList", "api_method_all": "function getActiveSimAccountInfoList(callback: AsyncCallback<Array<IccAccountInfo>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_getActiveSimAccountInfoList_Async_0500';\n    try {\n      await sim.", "  it('Telephony_Sim_getActiveSimAccountInfoList_Async_0500', 0, function (done) {\n    c", "  it('Telephony_Sim_getActiveSimAccountInfoList_Promise_0500', 0, async function (done)", "mber  Telephony_Sim_getActiveSimAccountInfoList_Promise_0500\n   * @tc.name    When ther", "s no card, test the getActiveSimAccountInfoList interface and check the return value\n  ", "y {\n      await sim.getActiveSimAccountInfoList();\n      expect().assertFail();\n      c", "mber  Telephony_Sim_getActiveSimAccountInfoList_Async_0500\n   * @tc.name    When there ", "ME = 'Telephony_Sim_getActiveSimAccountInfoList_Async_0500';\n    sim.getActiveSimAccoun", "sync_0500';\n    sim.getActiveSimAccountInfoList(error => {\n      if (error) {\n        c"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getActiveSimAccountInfoList", "api_method_all": "function getActiveSimAccountInfoList(): Promise<Array<IccAccountInfo>>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "setDefaultVoiceSlotId", "api_method_all": "function setDefaultVoiceSlotId(slotId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_setDefaultVoiceSlotId_Promise_0100';\n    try {\n      await si", "  it('Telephony_Sim_setDefaultVoiceSlotId_Promise_0100', 0, async function (done)", "y {\n      await sim.setDefaultVoiceSlotId(env.SLOTID2);\n    } catch (err) {\n     ", "sync_0100';\n    sim.setDefaultVoiceSlotId(env.SLOTID2, (err) => {\n      if (err) ", "  it('Telephony_Sim_setDefaultVoiceSlotId_Async_0100', 0, async function (done) {", "ME = 'Telephony_Sim_setDefaultVoiceSlotId_Async_0100';\n    sim.setDefaultVoiceSlo"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "setDefaultVoiceSlotId", "api_method_all": "function setDefaultVoiceSlotId(slotId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "activateSim", "api_method_all": "function activateSim(slotId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 20, "since": 8, "api_used": "\u662f", "lines": ["  it('Telephony_Sim_activateSim_Promise_0600', 0, async function (done)", "sync_0600';\n    sim.activateSim(env.SLOTID2, (err) => {\n      if (err) ", "y {\n      await sim.activateSim(env.SLOTID2);\n    } catch (err) {\n     ", "it('Telephony_Sim_deactivateSim_Promise_0600', 0, async function (done)", "it('Telephony_Sim_deactivateSim_Async_0600', 0, async function (done) {", "ME = 'Telephony_Sim_activateSim_Promise_0600';\n    try {\n      await si", "ME = 'Telephony_Sim_activateSim_Async_0600';\n    sim.activateSim(env.SL", "  it('Telephony_Sim_activateSim_Async_0600', 0, async function (done) {", " = 'Telephony_Sim_deactivateSim_Promise_0600';\n    try {\n      await si", "nc_0600';\n    sim.deactivateSim(env.SLOTID2, (err) => {\n      if (err) ", ".name    Test the deactivateSim interface slotId exception input parame", "{\n      await sim.deactivateSim(env.SLOTID2);\n    } catch (err) {\n     ", "nput parameter 2 of activateSim interface,\n     *             check the", "mber  Telephony_Sim_activateSim_Promise_0600\n     * @tc.name    Test th", "er  Telephony_Sim_deactivateSim_Async_0600\n     * @tc.name    Test the ", "mber  Telephony_Sim_activateSim_Async_0600\n     * @tc.name    Test the ", "er  Telephony_Sim_deactivateSim_Promise_0600\n     * @tc.name    Test th", " = 'Telephony_Sim_deactivateSim_Async_0600';\n    sim.deactivateSim(env."], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "activateSim", "api_method_all": "function activateSim(slotId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "deactivateSim", "api_method_all": "function deactivateSim(slotId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_deactivateSim_Async_0600';\n    sim.deactivateSim(env.", "mber  Telephony_Sim_deactivateSim_Promise_0600\n     * @tc.name    Test th", "ME = 'Telephony_Sim_deactivateSim_Promise_0600';\n    try {\n      await si", "  it('Telephony_Sim_deactivateSim_Async_0600', 0, async function (done) {", "tc.name    Test the deactivateSim interface slotId exception input parame", "y {\n      await sim.deactivateSim(env.SLOTID2);\n    } catch (err) {\n     ", "mber  Telephony_Sim_deactivateSim_Async_0600\n     * @tc.name    Test the ", "sync_0600';\n    sim.deactivateSim(env.SLOTID2, (err) => {\n      if (err) ", "  it('Telephony_Sim_deactivateSim_Promise_0600', 0, async function (done)"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "deactivateSim", "api_method_all": "function deactivateSim(slotId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "setShowName", "api_method_all": "function setShowName(slotId: number, name: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_setShowName_Promise_0700';\n    try {\n      await si", "sync_0700';\n    sim.setShowName(env.SLOTID2, env.CARD_NAME, (err) => {\n", "mber  Telephony_Sim_setShowName_Promise_0700\n   * @tc.name    Test setS", "ME = 'Telephony_Sim_setShowName_Async_0700';\n    sim.setShowName(env.SL", "  it('Telephony_Sim_setShowName_Promise_0700', 0, async function (done)", " * @tc.name    Test setShowName promise interface slotId exception into", "mber  Telephony_Sim_setShowName_Async_0700\n   * @tc.name    Test setSho", " * @tc.name    Test setShowName slotId exception input parameter 2 to c", "  it('Telephony_Sim_setShowName_Async_0700', 0, async function (done) {", "y {\n      await sim.setShowName(env.SLOTID2, env.CARD_NAME);\n    } catc"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "setShowName", "api_method_all": "function setShowName(slotId: number, name: string): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getShowName", "api_method_all": "function getShowName(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["  it('Telephony_Sim_getShowName_Async_0700', 0, async function (done) {", "nput parameter 2 of getShowName and check the\n   *             return v", "ME = 'Telephony_Sim_getShowName_Promise_0700';\n    try {\n      let data", "mber  Telephony_Sim_getShowName_Promise_0700\n   * @tc.name    Test the ", "ME = 'Telephony_Sim_getShowName_Async_0700';\n    sim.getShowName(env.SL", "et data = await sim.getShowName(env.SLOTID2);\n      console.log(`${CASE", "nput parameter 2 of getShowName and\n   *             check the return v", "mber  Telephony_Sim_getShowName_Async_0700\n   * @tc.name    Test the sl", "  it('Telephony_Sim_getShowName_Promise_0700', 0, async function (done)", "sync_0700';\n    sim.getShowName(env.SLOTID2, (err, data) => {\n      if "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getShowName", "api_method_all": "function getShowName(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "setShowNumber", "api_method_all": "function setShowNumber(slotId: number, number: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["  it('Telephony_Sim_setShowNumber_Promise_0700', 0, async function (done)", "y {\n      await sim.setShowNumber(env.SLOTID2, env.CARD_NUMBER);\n      co", "sync_0700';\n    sim.setShowNumber(env.SLOTID2, env.CARD_NUMBER, (err) => ", "ME = 'Telephony_Sim_setShowNumber_Async_0700';\n    sim.setShowNumber(env.", "ME = 'Telephony_Sim_setShowNumber_Promise_0700';\n    try {\n      await si", "mber  Telephony_Sim_setShowNumber_Promise_0700\n   * @tc.name    Test setS", " * @tc.name    Test setShowNumber slotId exception input parameter 2, che", "mber  Telephony_Sim_setShowNumber_Async_0700\n   * @tc.name    Test setSho", " * @tc.name    Test setShowNumber slotId exception input parameter 2 and ", "  it('Telephony_Sim_setShowNumber_Async_0700', 0, async function (done) {"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "setShowNumber", "api_method_all": "function setShowNumber(slotId: number, number: string): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getShowNumber", "api_method_all": "function getShowNumber(slotId: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["  it('Telephony_Sim_getShowNumber_Async_0600', 0, async function (done) {", "et data = await sim.getShowNumber(env.SLOTID2);\n      console.log(`${CASE", "ME = 'Telephony_Sim_getShowNumber_Promise_0600';\n    try {\n      let data", "Id exception of the getShowNumber async callback interface into parameter", "mber  Telephony_Sim_getShowNumber_Promise_0600\n   * @tc.name    Test the ", "Id exception of the getShowNumber interface into parameter 2, check the c", "mber  Telephony_Sim_getShowNumber_Async_0600\n   * @tc.name    Test the sl", "sync_0600';\n    sim.getShowNumber(env.SLOTID2, (err, data) => {\n      if ", "ME = 'Telephony_Sim_getShowNumber_Async_0600';\n    sim.getShowNumber(env.", "  it('Telephony_Sim_getShowNumber_Promise_0600', 0, async function (done)"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getShowNumber", "api_method_all": "function getShowNumber(slotId: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getOperatorConfigs", "api_method_all": "function getOperatorConfigs(slotId: number, callback: AsyncCallback<Array<OperatorConfig>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": [".log('Telephony_Sim_getOperatorConfigs_Async_0100 finish');\n        done();\n  ", ".log('Telephony_Sim_getOperatorConfigs_Async_0100 result');\n        if (err) {", "ME = 'Telephony_Sim_getOperatorConfigs_Promise_0700';\n    try {\n      let data", "mber  Telephony_Sim_getOperatorConfigs_Promise_0700\n   * @tc.name    Test the ", "tc.name    Test the getOperatorConfigs slotId exception input parameter 2 and ", "  it('Telephony_Sim_getOperatorConfigs_Promise_0700', 0, async function (done)", "ME = 'Telephony_Sim_getOperatorConfigs_Async_0700';\n    sim.getOperatorConfigs", "mber  Telephony_Sim_getOperatorConfigs_Async_0700\n   * @tc.name    Test the ge", "mpty = 0;\n      sim.getOperatorConfigs(env.DEFAULT_SLOTID, (err, data) => {\n  ", "  it('Telephony_Sim_getOperatorConfigs_Async_0700', 0, async function (done) {", ".log('Telephony_Sim_getOperatorConfigs_Async_0100 start');\n      let container", "et data = await sim.getOperatorConfigs(env.SLOTID2);\n      console.log(`${CASE", "  it('Telephony_Sim_getOperatorConfigs_Async_0100', 0, async function (done) {", "sync_0700';\n    sim.getOperatorConfigs(env.SLOTID2, (err, data) => {\n      if ", ".log(`Telephony_Sim_getOperatorConfigs_Async_0100 fail, err : ${err.message}`)"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getOperatorConfigs", "api_method_all": "function getOperatorConfigs(slotId: number): Promise<Array<OperatorConfig>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "unlockPin", "api_method_all": "function unlockPin(slotId: number, pin: string, callback: AsyncCallback<LockStatusResponse>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["nput parameter 2 of unlockPin2 and check the callback\n   *           ", "= '1234';\n      sim.unlockPin(env.DEFAULT_SLOTID, PIN, (err, data) =>", "y {\n      await sim.unlockPin2(env.SLOTID2, env.INCORRECT_PIN2);\n    ", "  it('Telephony_Sim_unlockPin2_Async_1000', 0, async function (done) ", "  it('Telephony_Sim_unlockPin_Async_0100', 0, async function (done) {", "  it('Telephony_Sim_unlockPin_Async_0400', 0, async function (done) {", ".log('Telephony_Sim_unlockPin_Async_0100 finish');\n        done();\n  ", "is ready state, the unlockPin interface is tested, and slotId is abno", "ME = 'Telephony_Sim_unlockPin2_Promise_1000';\n    try {\n      await s", "y {\n      await sim.unlockPin(env.SLOTID2, env.CORRECT_PIN);\n    } ca", "ME = 'Telephony_Sim_unlockPin2_Async_1000';\n    sim.unlockPin2(env.SL", ".log(`Telephony_Sim_unlockPin_Async_0100 fail, err: ${err.message}`);", "sync_1000';\n    sim.unlockPin2(env.SLOTID2, env.INCORRECT_PIN2, (err,", "mber  Telephony_Sim_unlockPin_Promise_0400\n    * @tc.name    The stat", "  it('Telephony_Sim_unlockPin2_Promise_1000', 0, async function (done", "sync_0400';\n    sim.unlockPin(env.SLOTID2, env.CORRECT_PIN, err => {\n", "mber  Telephony_Sim_unlockPin2_Promise_1000\n   * @tc.name    Test slo", "mber  Telephony_Sim_unlockPin_Async_0400\n    * @tc.name    The status", "ME = 'Telephony_Sim_unlockPin_Promise_0400';\n    try {\n      await si", "mber  Telephony_Sim_unlockPin2_Async_1000\n   * @tc.name    Test sloti", "ME = 'Telephony_Sim_unlockPin_Async_0400';\n    sim.unlockPin(env.SLOT", "  it('Telephony_Sim_unlockPin_Promise_0400', 0, async function (done)"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "unlockPin", "api_method_all": "function unlockPin(slotId: number, pin: string): Promise<LockStatusResponse>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "unlockPuk", "api_method_all": "function unlockPuk(slotId: number, newPin: string, puk: string, callback: AsyncCallback<LockStatusResponse>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": [" parameter 2 of the unlockPuk2 interface\n   *             and check t", "sync_1100';\n    sim.unlockPuk2(env.SLOTID2, env.INCORRECT_PIN2, env.I", "st data = await sim.unlockPuk2(env.SLOTID2, env.INCORRECT_PIN2, env.I", "ME = 'Telephony_Sim_unlockPuk2_Async_1100';\n    sim.unlockPuk2(env.SL", "mber  Telephony_Sim_unlockPuk2_Async_1100\n   * @tc.name    Test the s", "mber  Telephony_Sim_unlockPuk_Promise_0400\n    * @tc.name    The card", "ME = 'Telephony_Sim_unlockPuk_Async_0400';\n    sim.unlockPuk(env.SLOT", "  it('Telephony_Sim_unlockPuk_Promise_0400', 0, async function (done)", " parameter 2 of the unlockPuk2\n   *             interface and check t", "  it('Telephony_Sim_unlockPuk2_Async_1100', 0, async function (done) ", "sync_0400';\n    sim.unlockPuk(env.SLOTID2, env.CORRECT_PIN, env.CORRE", "ME = 'Telephony_Sim_unlockPuk2_Async_1100';\n    try {\n      const dat", "ME = 'Telephony_Sim_unlockPuk_Promise_0400';\n    try {\n      await si", "mber  Telephony_Sim_unlockPuk2_Promise_1100\n   * @tc.name    Test the", "eady state, and the unlockPuk interface is tested.\n    *             ", "mber  Telephony_Sim_unlockPuk_Async_0400\n    * @tc.name    The card s", "y {\n      await sim.unlockPuk(env.SLOTID2, env.CORRECT_PIN, env.CORRE", "  it('Telephony_Sim_unlockPuk_Async_0400', 0, async function (done) {", "  it('Telephony_Sim_unlockPuk2_Promise_1100', 0, async function (done"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "unlockPuk", "api_method_all": "function unlockPuk(slotId: number, newPin: string, puk: string): Promise<LockStatusResponse>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "alterPin", "api_method_all": "function alterPin(slotId: number, newPin: string, oldPin: string, callback: AsyncCallback<LockStatusResponse>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["  it('Telephony_Sim_alterPin2_Promise_1100', 0, async function (done", "eady state, and the alterPin interface. SlotId is abnormal.\n    * @t", "mber  Telephony_Sim_alterPin_Promise_0400\n    * @tc.name    The stat", "ME = 'Telephony_Sim_alterPin_Promise_0400';\n    try {\n      await si", " * @tc.name    Test alterPin2 interface exception slotId input param", "mber  Telephony_Sim_alterPin_Async_0400\n    * @tc.name    The status", "  it('Telephony_Sim_alterPin_Async_0400', 0, async function (done) {", "eady state, and the alterPin interface is tested. SlotId is abnormal", "  it('Telephony_Sim_alterPin2_Async_1100', 0, async function (done) ", "y {\n      await sim.alterPin(env.SLOTID2, env.CORRECT_PIN, env.ALTER", "st data = await sim.alterPin2(env.SLOTID2, env.INCORRECT_PIN2, env.I", "sync_0400';\n    sim.alterPin(env.SLOTID2, env.CORRECT_PIN, env.ALTER", "ME = 'Telephony_Sim_alterPin_Async_0400';\n    sim.alterPin(env.SLOTI", "mber  Telephony_Sim_alterPin2_Promise_1100\n   * @tc.name    Test alt", "mber  Telephony_Sim_alterPin2_Async_1100\n   * @tc.name    Test alter", "  it('Telephony_Sim_alterPin_Promise_0400', 0, async function (done)", "sync_1100';\n    sim.alterPin2(env.SLOTID2, env.INCORRECT_PIN2, env.I", "ME = 'Telephony_Sim_alterPin2_Promise_1100';\n    try {\n      const d", "ME = 'Telephony_Sim_alterPin2_Async_1100';\n    sim.alterPin2(env.SLO"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "alterPin", "api_method_all": "function alterPin(slotId: number, newPin: string, oldPin: string): Promise<LockStatusResponse>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "setLockState", "api_method_all": "function setLockState(slotId: number, options: LockInfo, callback: AsyncCallback<LockStatusResponse>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["OCK_OFF);\n      sim.setLockState(env.DEFAULT_SLOTID, lockInfo, (error, l", "e.log(`${CASE_NAME} setLockState failure, lock status response: ${lockSt", "RECT_PIN };\n    sim.setLockState(env.SLOTID2, lockInfo, error => {\n     ", "e.log(`${CASE_NAME} setLockState expect error: ${error.message}`);\n     ", "e.log(`${CASE_NAME} setLockState error: ${error.message}`);\n          ex", "y {\n      await sim.setLockState(env.SLOTID2, lockInfo);\n      console.l"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "setLockState", "api_method_all": "function setLockState(slotId: number, options: LockInfo): Promise<LockStatusResponse>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "unlockPin2", "api_method_all": "function unlockPin2(slotId: number, pin2: string, callback: AsyncCallback<LockStatusResponse>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_unlockPin2_Async_1000';\n    sim.unlockPin2(env.SLO", "mber  Telephony_Sim_unlockPin2_Promise_1000\n   * @tc.name    Test slot", "mber  Telephony_Sim_unlockPin2_Async_1000\n   * @tc.name    Test slotid", "ME = 'Telephony_Sim_unlockPin2_Promise_1000';\n    try {\n      await si", "y {\n      await sim.unlockPin2(env.SLOTID2, env.INCORRECT_PIN2);\n     ", "sync_1000';\n    sim.unlockPin2(env.SLOTID2, env.INCORRECT_PIN2, (err, ", "  it('Telephony_Sim_unlockPin2_Async_1000', 0, async function (done) {", "  it('Telephony_Sim_unlockPin2_Promise_1000', 0, async function (done)", "nput parameter 2 of unlockPin2 and check the callback\n   *            "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "unlockPin2", "api_method_all": "function unlockPin2(slotId: number, pin2: string): Promise<LockStatusResponse>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "unlockPuk2", "api_method_all": "function unlockPuk2(slotId: number, newPin2: string, puk2: string, callback: AsyncCallback<LockStatusResponse>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": [" parameter 2 of the unlockPuk2\n   *             interface and check th", "  it('Telephony_Sim_unlockPuk2_Async_1100', 0, async function (done) {", " parameter 2 of the unlockPuk2 interface\n   *             and check th", "st data = await sim.unlockPuk2(env.SLOTID2, env.INCORRECT_PIN2, env.IN", "mber  Telephony_Sim_unlockPuk2_Async_1100\n   * @tc.name    Test the sl", "  it('Telephony_Sim_unlockPuk2_Promise_1100', 0, async function (done)", "ME = 'Telephony_Sim_unlockPuk2_Async_1100';\n    try {\n      const data", "mber  Telephony_Sim_unlockPuk2_Promise_1100\n   * @tc.name    Test the ", "sync_1100';\n    sim.unlockPuk2(env.SLOTID2, env.INCORRECT_PIN2, env.IN", "ME = 'Telephony_Sim_unlockPuk2_Async_1100';\n    sim.unlockPuk2(env.SLO"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "unlockPuk2", "api_method_all": "function unlockPuk2(slotId: number, newPin2: string, puk2: string): Promise<LockStatusResponse>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "alterPin2", "api_method_all": "function alterPin2(slotId: number, newPin2: string, oldPin2: string, callback: AsyncCallback<LockStatusResponse>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["  it('Telephony_Sim_alterPin2_Async_1100', 0, async function (done) {", "mber  Telephony_Sim_alterPin2_Async_1100\n   * @tc.name    Test alterP", "ME = 'Telephony_Sim_alterPin2_Promise_1100';\n    try {\n      const da", "  it('Telephony_Sim_alterPin2_Promise_1100', 0, async function (done)", "sync_1100';\n    sim.alterPin2(env.SLOTID2, env.INCORRECT_PIN2, env.IN", " * @tc.name    Test alterPin2 interface exception slotId input parame", "mber  Telephony_Sim_alterPin2_Promise_1100\n   * @tc.name    Test alte", "ME = 'Telephony_Sim_alterPin2_Async_1100';\n    sim.alterPin2(env.SLOT", "st data = await sim.alterPin2(env.SLOTID2, env.INCORRECT_PIN2, env.IN"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "alterPin2", "api_method_all": "function alterPin2(slotId: number, newPin2: string, oldPin2: string): Promise<LockStatusResponse>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "queryIccDiallingNumbers", "api_method_all": "function queryIccDiallingNumbers(slotId: number, type: ContactType, callback: AsyncCallback<Array<DiallingNumbersInfo>>): void\n  function queryIccDiallingNumbers(slotId: number, type: ContactType): Promise<Array<DiallingNumbersInfo>>;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["tc.name    Test sim.queryIccDiallingNumbers(soltId: 2, type: 1):Promise<Array<Diall", "ME = 'Telephony_Sim_queryIccDiallingNumbers_Async_0800';\n    sim.queryIccDiallingNu", "mber  Telephony_Sim_queryIccDiallingNumbers_Async_0800\n   * @tc.name    Test sim.qu", "ME = 'telephony_Sim_queryIccDiallingNumbers_Promise_0800';\n    try {\n      const co", "sync_0800';\n    sim.queryIccDiallingNumbers(env.SLOTID2, sim.GENERAL_CONTACT, (erro", "  it('telephony_Sim_queryIccDiallingNumbers_Promise_0800', 0, async function (done)", "ontacts = await sim.queryIccDiallingNumbers(env.SLOTID2, sim.GENERAL_CONTACT);\n    ", "tc.name    Test sim.queryIccDiallingNumbers(soltId: 2, type: 1, callback:\n   *     ", "umber  elephony_Sim_queryIccDiallingNumbers_Promise_0800\n   * @tc.name    Test sim.", "  it('Telephony_Sim_queryIccDiallingNumbers_Async_0800', 0, async function (done) {"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "queryIccDiallingNumbers", "api_method_all": "function queryIccDiallingNumbers(slotId: number, type: ContactType): Promise<Array<DiallingNumbersInfo>>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "addIccDiallingNumbers", "api_method_all": "function addIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_addIccDiallingNumbers_Async_0900';\n    const CONTACT_INFO = {", "  it('Telephony_Sim_addIccDiallingNumbers_Promise_0900', 0, async function (done)", "ME = 'Telephony_Sim_addIccDiallingNumbers_Async_0100';\n      var number = env.SLO", "y {\n      await sim.addIccDiallingNumbers(env.SLOTID2, sim.GENERAL_CONTACT, GENER", "D_MINUS1;\n      sim.addIccDiallingNumbers(number,\n        sim.GENERAL_CONTACT,\n  ", "  it('Telephony_Sim_addIccDiallingNumbers_Async_0100', 0, async function (done) {", "tc.name    Test sim.addIccDiallingNumbers(soltId: 2, type: 1, diallingNumbers:\n  ", "mber  Telephony_Sim_addIccDiallingNumbers_Promise_0900\n   * @tc.name    Test sim.", "mber  Telephony_Sim_addIccDiallingNumbers_Async_0900\n   * @tc.name    Test sim.ad", "ME = 'Telephony_Sim_addIccDiallingNumbers_Promise_0900';\n    const CONTACT_INFO =", "  it('Telephony_Sim_addIccDiallingNumbers_Async_0900', 0, async function (done) {", "TACT_INFO);\n    sim.addIccDiallingNumbers(env.SLOTID2, sim.GENERAL_CONTACT, GENER"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "addIccDiallingNumbers", "api_method_all": "function addIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo): Promise<void>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "delIccDiallingNumbers", "api_method_all": "function delIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["ME = 'Telephony_Sim_delIccDiallingNumbers_Promise_0900';\n    const CONTACT_INFO =", "2345678' };\n    sim.delIccDiallingNumbers(env.SLOTID2, sim.GENERAL_CONTACT, CONTA", "  it('Telephony_Sim_delIccDiallingNumbers_Promise_0900', 0, async function (done)", "tc.name    Test sim.delIccDiallingNumbers(soltId: 2, type: 1, diallingNumbers: Di", "ME = 'Telephony_Sim_delIccDiallingNumbers_Async_0900';\n    const CONTACT_INFO = {", "  it('Telephony_Sim_delIccDiallingNumbers_Async_0900', 0, async function (done) {", "y {\n      await sim.delIccDiallingNumbers(env.SLOTID2, sim.GENERAL_CONTACT, CONTA", "ber   Telephony_Sim_delIccDiallingNumbers_Promise_0900\n   * @tc.name     Test sim", "c.name     Test sim.delIccDiallingNumbers(soltId: 2, type: 1, diallingNumbers: Di", "mber  Telephony_Sim_delIccDiallingNumbers_Async_0900\n   * @tc.name    Test sim.de"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "delIccDiallingNumbers", "api_method_all": "function delIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo): Promise<void>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "updateIccDiallingNumbers", "api_method_all": "function updateIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["ber   Telephony_Sim_updateIccDiallingNumbers_Promise_1200\n   * @tc.name     Test sim", "`);\n      await sim.updateIccDiallingNumbers(env.SLOTID2, sim.GENERAL_CONTACT, updat", "  it('Telephony_Sim_updateIccDiallingNumbers_Async_1200', 0, async function (done) {", "c.name     Test sim.updateIccDiallingNumbers(soltId: 2, type: 1, diallingNumbers:\n  ", "ME = 'Telephony_Sim_updateIccDiallingNumbers_Async_1200';\n    let updateInfo = { rec", "3@#ABCD' };\n    sim.updateIccDiallingNumbers(env.SLOTID2, sim.GENERAL_CONTACT, updat", "  it('Telephony_Sim_updateIccDiallingNumbers_Promise_1200', 0, async function (done)", "ME = 'Telephony_Sim_updateIccDiallingNumbers_Promise_1200';\n    let updateInfo = { r", "ber   Telephony_Sim_updateIccDiallingNumbers_Async_1200\n   * @tc.name     Test sim.u"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "updateIccDiallingNumbers", "api_method_all": "function updateIccDiallingNumbers(slotId: number, type: ContactType, diallingNumbers: DiallingNumbersInfo): Promise<void>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getLockState", "api_method_all": "function getLockState(slotId: number, lockType: LockType, callback: AsyncCallback<LockState>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["sync_0300';\n    sim.getLockState(env.SLOTID2, sim.PIN_LOCK, error => {\n ", "e.log(`${CASE_NAME} getLockState expect error: ${error.message}`);\n     ", "y {\n      await sim.getLockState(env.SLOTID2, sim.PIN_LOCK);\n      conso"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "getLockState", "api_method_all": "function getLockState(slotId: number, lockType: LockType): Promise<LockState>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "sendEnvelopeCmd", "api_method_all": "function sendEnvelopeCmd(slotId: number, cmd: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["y {\n      await sim.sendEnvelopeCmd(env.SLOTID2, env.STK_CMD);\n      consol", "sync_0300';\n    sim.sendEnvelopeCmd(env.SLOTID2, env.STK_CMD, (error) => {\n"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "sendEnvelopeCmd", "api_method_all": "function sendEnvelopeCmd(slotId: number, cmd: string): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "sendTerminalResponseCmd", "api_method_all": "function sendTerminalResponseCmd(slotId: number, cmd: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["y {\n      await sim.sendTerminalResponseCmd(env.SLOTID2, env.STK_CMD);\n      consol", "sync_0300';\n    sim.sendTerminalResponseCmd(env.SLOTID2, env.STK_CMD, (error) => {\n"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "sendTerminalResponseCmd", "api_method_all": "function sendTerminalResponseCmd(slotId: number, cmd: string): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "unlockSimLock", "api_method_all": "function unlockSimLock(slotId: number, lockInfo: PersoLockInfo, callback: AsyncCallback<LockStatusResponse>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["PASSWORD };\n    sim.unlockSimLock(env.SLOTID2, lockInfo, async (error) =>", "umber Telephony_Sim_unlockSimLock_Promise_2600\n   * @tc.name   Test the u", "ME = 'Telephony_Sim_unlockSimLock_Async_2600';\n    const lockInfo = { loc", "ME = 'Telephony_Sim_unlockSimLock_Promise_2600';\n    const lockInfo = { l", "umber Telephony_Sim_unlockSimLock_Async_2600\n   * @tc.name   Test the unl", "y {\n      await sim.unlockSimLock(env.SLOTID2, lockInfo);\n      expect().", "  it('Telephony_Sim_unlockSimLock_Async_2600', 0, function (done) {\n    c", "  it('Telephony_Sim_unlockSimLock_Promise_2600', 0, async function (done)"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sim", "api_method_name": "unlockSimLock", "api_method_all": "function unlockSimLock(slotId: number, lockInfo: PersoLockInfo): Promise<LockStatusResponse>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "OperatorConfig", "api_method_all": "export interface OperatorConfig {\n    field: string;\n    value: string;\n  }", "api_method_name": "OperatorConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["g('Telephony_Sim_getOperatorConfigs_Async_0100 start')", "g('Telephony_Sim_getOperatorConfigs_Async_0100 result'", "y = 0;\n      sim.getOperatorConfigs(env.DEFAULT_SLOTID", "c_0700';\n    sim.getOperatorConfigs(env.SLOTID2, (err,", "g(`Telephony_Sim_getOperatorConfigs_Async_0100 fail, e", "data = await sim.getOperatorConfigs(env.SLOTID2);\n    ", "r  Telephony_Sim_getOperatorConfigs_Async_0700\n   * @t", "= 'Telephony_Sim_getOperatorConfigs_Async_0700';\n    s", "= 'Telephony_Sim_getOperatorConfigs_Promise_0700';\n   ", "r  Telephony_Sim_getOperatorConfigs_Promise_0700\n   * ", "t('Telephony_Sim_getOperatorConfigs_Promise_0700', 0, ", "t('Telephony_Sim_getOperatorConfigs_Async_0700', 0, as", "name    Test the getOperatorConfigs slotId exception i", "t('Telephony_Sim_getOperatorConfigs_Async_0100', 0, as", "g('Telephony_Sim_getOperatorConfigs_Async_0100 finish'"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "OperatorConfig", "api_method_name": "field", "api_method_all": "field: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 61, "since": 8, "api_used": "\u662f", "lines": ["ta table, incorrect field or table name or no", " case, an incorrect field is passed in when q", "mailboxes, an error field was passed in\n     ", " case, an incorrect field is passed in when u", "e numbers, an error field is passed in\n     *", " records, pass in a field that does not exist", "e contact, an error field is passed in\n     *", " case, an incorrect field is passed in when i", "in batch, the error field is transferred\n    ", "d a raw_contact all fields, delete raw_contac", "    Delete the full field data of a groups ta", "act_data Add a full field data to the data ta", "group, an incorrect field is passed in\n     *", "blocklist, an error field is passed in\n     *", " that the favorites field has changed\n     * ", "modified, the wrong field or table name is pa", "ct_data Single full field data in data table\n", " contacts, an error field is passed in\n     *", "nditions, incorrect field\n     *             ", "tc.name    An error field was passed in when ", "tacts, an incorrect field was passed in\n     ", " case, an incorrect field is passed in when d", "ame    An incorrect field was passed in when ", "aw_contact The full field data of the contact", " passing in a wrong field when deleting data\n", ".name    Add a full field data to the groups ", " that the favorites field is changed\n     * @", " in batch, an error field is passed in\n     *"], "files": ["Calllog_test.js", "SimJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "Voicemail_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "OperatorConfig", "api_method_name": "value", "api_method_all": "value: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 574, "since": 8, "api_used": "\u662f", "lines": [".Ring })\n          .value(3)\n          .color", "inear })\n          .value(3)\n          .color", "y that the callback value is within the enume", "0)\n      .onChange((value: any) => {\n        ", "lue.width},height:${value.height},mode:${valu", "EventChange', (err, value) => {\n            c", " number. The return value is false\n     * @tc", "the slotId to error values (3), to check the ", "ld)\n      Button('1.value', { type: ButtonTyp", ") => {\n        this.value++\n      })\n      .o", "alue.height},mode:${value.mode}`)\n      })\n\n ", "         The return value is 10 000 000 0000\n", "T_TIME = new Date().valueOf();\n            co", "is made. The return value is true\n     * @tc.", " counter {\n  @State value: number = 0\n  @Stat", ")\n      DataPanel({ values: [20, 40, 20], max", "lipse })\n          .value(3)\n          .color", " eventId ${toString(value)}`;\n               ", "hin the enumeration value range\n     * @tc.de", "         .onChange((value: number) => {\n     ", "eRing })\n          .value(3)\n          .color", "            resolve(value);\n            } els", "         The return value is 200 0000\n     * ", "    if (eventId === value.eventId) {\n        ", "h(\n            this.value1,\n            item ", "\n        Progress({ value: 20, total: 40, sty", ") => {\n        this.value--\n      })\n    }.wi", "      this.rating = value\n          })\n      ", "           toString(value)}`);\n            if", "{\n        Text(this.value.toString())\n      }", "psule })\n          .value(3)\n          .color", "rState.On\n  private value1: Array<number> = [", "nsole.info(`width:${value.width},height:${val", "\n\n      DataPanel({ values: [20, 40, 20], max", "ers as slotId error value (3), to check the\n "], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "SimJsunit.test.ets", "ScenceInCalling.js", "Slider.ets", "Counter.ets", "Contacts_test.js", "ContactCard_test.js", "Progress.ets", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Scroll.ets", "DataPanel.ets", "SmsMmsJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "SimManager.test.js", "Rating.ets", "Voicemail_test.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IccAccountInfo", "api_method_all": "export interface IccAccountInfo {\n    \n    simId: number;\n    \n    slotIndex: number;\n    \n    isEsim: boolean;\n    \n    isActive: boolean;\n    \n    iccId: string;\n    \n    showName: string;\n    \n    showNumber: string;\n  }", "api_method_name": "IccAccountInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["ccAccountInfo = new IccAccountInfo(SLOT_INDEX, SHOW_NA", "  try {\n      class IccAccountInfo {\n        construct"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IccAccountInfo", "api_method_name": "simId", "api_method_all": "simId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [" && info.simId === \"simId\"\n        ).assertTr", "BER\n        && info.simId === \"simId\"\n       "], "files": ["SimJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IccAccountInfo", "api_method_name": "slotIndex", "api_method_all": "slotIndex: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["        expect(info.slotIndex === env.DEFAULT_SLO", "   this.slotIndex = slotIndex;\n          this.sho", "       constructor (slotIndex, showName, showNumb", "pect(iccAccountInfo.slotIndex === SLOT_INDEX).ass", "r) {\n          this.slotIndex = slotIndex;\n      "], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IccAccountInfo", "api_method_name": "isEsim", "api_method_all": "isEsim: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["TID\n        && info.isEsim === false\n        &"], "files": ["SimJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IccAccountInfo", "api_method_name": "isActive", "api_method_all": "isActive: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["lse\n        && info.isActive === true\n        &&"], "files": ["SimJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IccAccountInfo", "api_method_name": "iccId", "api_method_all": "iccId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["rue\n        && info.iccId === iccIdValue\n    ", "  && info.iccId === iccIdValue\n        && inf", "nc_0100';\n      let iccIdValue;\n      sim.get"], "files": ["SimJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IccAccountInfo", "api_method_name": "showName", "api_method_all": "showName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["dex;\n          this.showName = showName;\n       ", "tructor (slotIndex, showName, showNumber) {\n    ", "pect(iccAccountInfo.showName === SHOW_NAME).asse", "    this.showName = showName;\n          this.sho", "lue\n        && info.showName === env.SIM_SLOT_NA"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IccAccountInfo", "api_method_name": "showNumber", "api_method_all": "showNumber: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["  this.showNumber = showNumber;\n        }\n      }\n", "lotIndex, showName, showNumber) {\n          this.s", "pect(iccAccountInfo.showNumber === SHOW_NUMBER).as", "AME\n        && info.showNumber === env.SIM_SLOT_NU", "ame;\n          this.showNumber = showNumber;\n     "], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockStatusResponse", "api_method_all": "export interface LockStatusResponse {\n    \n    result: number;\n    \n    remain?: number;\n  }", "api_method_name": "LockStatusResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["tatusResponse = new LockStatusResponse(RES_RESULT, RES_REM", "rue();\n\n      class LockStatusResponse {\n        construct"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockStatusResponse", "api_method_name": "result", "api_method_all": "result: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1757, "since": 0, "api_used": "\u662f", "lines": ["\");\n                resultSet.close();\n       ", "Set.rowCount > 0 && resultSet.goToFirstRow()) ", "             expect(resultSet.goToFirstRow() =", "lue ' + (value == dbresult));\n                ", "eryForBatchInsert dbresult :' + dbresult +\n   ", "  expect(value == dbresult).assertTrue();\n    ", "              var dbresult = resultSet.getStri", "00: columnNames:\" + resultSet.columnNames);\n  ", "           } while (resultSet.goToNextRow());\n", "e: goToFirstRow \" + resultSet.goToFirstRow());", "                if (resultSet.rowCount > 0 && ", "resultSet.getString(resultSet.getColumnIndex(k", "                var resultSet = await DAHelper", "             expect(resultSet.getString(0) == ", "  ' dbResult :' + dbresult + ' value : ' + val", "                if (resultSet.goToFirstRow()) ", "     var dbresult = resultSet.getString(result", "test_1100: id = ' + resultSet.getString(0));\n ", "     *              results\n     * @tc.desc   ", "         correction results\n     * @tc.desc   ", "r.query(calllogUri, resultColumns, condition);", "${caseName} ${func} result flag:${toString(fla", "ert dbresult :' + dbresult +\n                 ", "             expect(resultSet.getString(1) == ", "  expect(value == dbresult).assertEqual(true);", "r);\n            var resultColumns = common.get", " }\n\n                resultSet.close();\n       ", " phone_number = ' + resultSet.getString(1));\n ", "le.log(`${caseName} result ${func} flag:${toSt", "             expect(resultSet.rowCount == size", "                var resultColumns = [\"id\", \"ph", "00: columnCount:\" + resultSet.columnCount);\n  ", "));\n                resultSet.close();\n       "], "files": ["Stability_test.js", "SimJsunit.test.ets", "Performance_test.js", "NetworkSearchErrors.test.js", "ObjectInterface_test.js", "HttpRequestOptionsJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "ConnectionSecondJsUnit.test.ets", "recovery_test.js", "ConvertOptionsJsunit.test.ets", "common.js", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "SimManager.test.js", "Voicemail_test.js", "StatisticsJsunit.test.ets", "SmsMmsError.test.js", "Groups_test.js", "ApiToPromisePerfomance.js", "Calllog_test.js", "CellularDataAbnorma.test.js", "ApiToPromiseReliability.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockStatusResponse", "api_method_name": "remain", "api_method_all": "remain?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["ue();\n          let remaining = result.splitCo", "tsInfo_Async_0100   remaining \" + remaining);\n", "ult;\n          this.remain = remain;\n        }", "      this.remain = remain;\n        }\n      }\n", "eCountRemaining === remaining).assertTrue();\n ", "onstructor (result, remain) {\n          this.r", "100   remaining \" + remaining);\n          expe", "(lockStatusResponse.remain === RES_REMAIN).ass"], "files": ["SimManager.test.js", "SmsMmsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DiallingNumbersInfo", "api_method_all": "export interface DiallingNumbersInfo {\n    alphaTag: string;\n    number: string;\n    recordNumber?: number;\n    pin2?: string;\n  }", "api_method_name": "DiallingNumbersInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["e: 1):Promise<Array<DiallingNumbersInfo>>\n   *             ", "1, diallingNumbers: DiallingNumbersInfo,\n   *             c", "AsyncCallback<Array<DiallingNumbersInfo>>), expect return a", "1, diallingNumbers: DiallingNumbersInfo):\n   *             "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DiallingNumbersInfo", "api_method_name": "alphaTag", "api_method_all": "alphaTag: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["  {recordNumber: 1, alphaTag: 'test', number: '1", " { recordNumber: 1, alphaTag: 'test_Update', num", "  {recordNumber: 1, alphaTag: 'test_Update', num", "'recordNumber': 1, 'alphaTag': 'test', 'number':"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DiallingNumbersInfo", "api_method_name": "number", "api_method_all": "number: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1139, "since": 7, "api_used": "\u662f", "lines": ["\n    /**\n     * @tc.number  Telephony_CallMana"], "files": ["ConnectionJsunit.test.ets", "Stability_test.js", "SimJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "Performance_test.js", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "Slider.ets", "ObjectInterface_test.js", "Text.ets", "Counter.ets", "Contacts_test.js", "ContactCard_test.js", "recovery_test.js", "common.js", "Scroll.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "Rating.ets", "SimManager.test.js", "Voicemail_test.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Divider.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Image.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DiallingNumbersInfo", "api_method_name": "recordNumber", "api_method_all": "recordNumber?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": [":\n   *             {recordNumber: 1, alphaTag: 'test", " let updateInfo = { recordNumber: 1, alphaTag: 'test", "\n   *              {recordNumber: 1, alphaTag: 'test", "t CONTACT_INFO = { 'recordNumber': 1, 'alphaTag': 't"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DiallingNumbersInfo", "api_method_name": "pin2", "api_method_all": "pin2?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["number: '87654321', pin2:'123@#ABCD'}, callb", "number: '87654321', pin2:'123@#ABCD'})\n   * ", "number: '12345678', pin2: '123@#ABCD'}): Pro", "number: '12345678', pin2: '123@#ABCD'},\n   *", "bject.assign({}, { 'pin2': env.INCORRECT_PIN", "number: '87654321', pin2: '123@#ABCD' };\n   "], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockInfo", "api_method_all": "export interface LockInfo {\n    lockType: LockType;\n    password: string;\n    state: LockState;\n  }", "api_method_name": "LockInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LockInfo", "api_method_name": "lockType", "api_method_all": "lockType: LockType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": [" const lockInfo = { lockType: sim.PN_PIN_LOCK, p", " const lockInfo = { lockType: sim.PIN_LOCK, stat"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockInfo", "api_method_name": "password", "api_method_all": "password: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 8, "api_used": "\u662f", "lines": ["-1;\n\n// sim correct password\nexport const CORREC", "VATION,\n            password:RIGHT_PASSWORD,\n   ", ";\n\n// sim incorrect password\nexport const INCORR", "state: sim.LOCK_ON, password: env.CORRECT_PIN };", "tionInfo = {type:0, password: '123456', mode:1}\n", "  mode,\n            password:RIGHT_PASSWORD,\n   ", "COMING,\n            password:RIGHT_PASSWORD,\n   ", "N_TYPE_ALL_INCOMING password RIGHT_PASSWORD\n    ", "e: sim.PN_PIN_LOCK, password: env.SIM_PN_PIN_PAS", "tate: sim.LOCK_OFF, password: env.CORRECT_PIN };"], "files": ["ScenceLimitCalling.js", "SimJsunit.test.ets", "CallJsunit.test.ets", "SimManager.test.js", "CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockInfo", "api_method_name": "state", "api_method_all": "state: LockState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 134, "since": 8, "api_used": "\u662f", "lines": ["information at this state\nexport function sce", " reachState,get the state CALL_STATUS_DISCONN", "\n            find = stateStorage.find(ele => ", ", stateEffect: this.stateEffect })\n        .f", "tate) {\n    return (state === CALL_STATUS_DIS", "ngupCall2 get right state error,error:${toStr", "Info) {\n            stateStorage.push({...cal", "information of this state\nexport function sce", " ButtonType.Circle, stateEffect: this.stateEf", "cence,when specific state arrive,we get the i", "tc.name    Unwanted state,run function cancel", "Storage:${toString({stateStorage})}`);\n      ", "tc.name    Unwanted state,run function setMut", "nupTimeOut);\n}\n\nlet stateStorage = [];\nexport", " the information of state when unHoldCall the", "         let find = stateStorage.find(ele => ", "testcase {\n  @State stateEffect: boolean = tr", " the information of state at CALL_STATUS_HOLD", "tc.name    Unwanted state,run function setAud", "lding get the right state error,error:${toStr", "angup get the right state success ,data:${toS", "me} reach the right state error,error:${toStr", "angupCall get right state success,data:${toSt", "hStateTimeout);\n    stateStorage = [];\n    le", "            \"answer_state\": \"1\"\n             ", "tc.name    Unwanted state ,run the function i", "State,get the right state checkState:${checkS", "lding get the right state success,data:${toSt", "ngupCall2 get right state success,data:${toSt", "eInCalling,specific state arrive,get the info", "angupCall get right state error,error:${toStr", "ow:${toString(now)},stateStorage:${toString({", "angup get the right state error,error:${toStr", "tc.name    Unwanted state,run function muteRi", "function isHanupEd (state) {\n    return (stat", "_DISCONNECTING) || (state === CALL_STATUS_DIS", "CALL_STATUS_HOLDING state\nexport function sce", "me} reach the right state success,data:${toSt", "ype.Capsule)\n      .stateEffect(false)\n      ", " the information of state when hunup the call"], "files": ["ConnectionJsunit.test.ets", "Calllog_test.js", "Stability_test.js", "SimJsunit.test.ets", "ScenceInCalling.js", "CallManageAll.test.js", "Performance_test.js", "Button.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "RadioSecondJsunit.test.ets", "SimManager.test.js", "common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockInfo", "api_method_all": "export interface PersoLockInfo {\n    lockType: PersoLockType;\n    password: string;\n  }", "api_method_name": "PersoLockInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockInfo", "api_method_name": "lockType", "api_method_all": "lockType: PersoLockType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": [" const lockInfo = { lockType: sim.PN_PIN_LOCK, p", " const lockInfo = { lockType: sim.PIN_LOCK, stat"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockInfo", "api_method_name": "password", "api_method_all": "password: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 8, "api_used": "\u662f", "lines": ["-1;\n\n// sim correct password\nexport const CORREC", "VATION,\n            password:RIGHT_PASSWORD,\n   ", ";\n\n// sim incorrect password\nexport const INCORR", "state: sim.LOCK_ON, password: env.CORRECT_PIN };", "tionInfo = {type:0, password: '123456', mode:1}\n", "  mode,\n            password:RIGHT_PASSWORD,\n   ", "COMING,\n            password:RIGHT_PASSWORD,\n   ", "N_TYPE_ALL_INCOMING password RIGHT_PASSWORD\n    ", "e: sim.PN_PIN_LOCK, password: env.SIM_PN_PIN_PAS", "tate: sim.LOCK_OFF, password: env.CORRECT_PIN };"], "files": ["ScenceLimitCalling.js", "SimJsunit.test.ets", "CallJsunit.test.ets", "SimManager.test.js", "CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockType", "api_method_all": "export enum LockType {\n    PIN_LOCK = 1,\n    FDN_LOCK = 2,\n  }", "api_method_name": "LockType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LockType", "api_method_name": "PIN_LOCK", "api_method_all": "PIN_LOCK = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 19, "since": 8, "api_used": "\u662f", "lines": ["== env.CONSTANTS.PN_PIN_LOCK).assertTrue();\n    ", "== env.CONSTANTS.PP_PIN_LOCK).assertTrue();\n    ", "== env.CONSTANTS.PU_PIN_LOCK).assertTrue();\n    ", ";\n    expect(sim.PU_PIN_LOCK === env.CONSTANTS.P", ";\n    expect(sim.PP_PIN_LOCK === env.CONSTANTS.P", "\n    expect(sim.SIM_PIN_LOCK === env.CONSTANTS.S", "= env.CONSTANTS.SIM_PIN_LOCK).assertTrue();\n    ", "K === env.CONSTANTS.PIN_LOCK).assertTrue();\n    ", ";\n    expect(sim.PC_PIN_LOCK === env.CONSTANTS.P", "== env.CONSTANTS.PC_PIN_LOCK).assertTrue();\n    ", " { lockType: sim.PN_PIN_LOCK, password: env.SIM_", "te(env.SLOTID2, sim.PIN_LOCK);\n      console.log", "o = { lockType: sim.PIN_LOCK, state: sim.LOCK_ON", "o = { lockType: sim.PIN_LOCK, state: sim.LOCK_OF", ";\n    expect(sim.PN_PIN_LOCK === env.CONSTANTS.P", "te(env.SLOTID2, sim.PIN_LOCK, error => {\n      i", "e();\n    expect(sim.PIN_LOCK === env.CONSTANTS.P"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockType", "api_method_name": "FDN_LOCK", "api_method_all": "FDN_LOCK = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["K === env.CONSTANTS.FDN_LOCK).assertTrue();\n    ", "e();\n    expect(sim.FDN_LOCK === env.CONSTANTS.F"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_all": "export enum CardType {\n    \n    UNKNOWN_CARD = -1,\n\n    \n    SINGLE_MODE_SIM_CARD = 10,\n\n    \n    SINGLE_MODE_USIM_CARD = 20,\n\n    \n    SINGLE_MODE_RUIM_CARD = 30,\n\n    \n    DUAL_MODE_CG_CARD = 40,\n\n    \n    CT_NATIONAL_ROAMING_CARD = 41,\n\n    \n    CU_DUAL_MODE_CARD = 42,\n\n    \n    DUAL_MODE_TELECOM_LTE_CARD = 43,\n\n    \n    DUAL_MODE_UG_CARD = 50,\n\n    \n    SINGLE_MODE_ISIM_CARD = 60\n  }", "api_method_name": "CardType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["{\n        type: sim.CardType.DUAL_MODE_TELECOM_L", "{\n        type: sim.CardType.CT_NATIONAL_ROAMING", "{\n        type: sim.CardType.SINGLE_MODE_SIM_CAR", "er Telephony_Sim_GetCardType_Promise_0400\n   * @", "{\n        type: sim.CardType.CU_DUAL_MODE_CARD\n ", "he slotId of the GetCardType promise interface i", "{\n        type: sim.CardType.UNKNOWN_CARD\n      ", "t('Telephony_Sim_GetCardType_Async_0400', 0, fun", "og(`${CASE_NAME} GetCardType error: ${error.mess", "= 'Telephony_Sim_GetCardType_Promise_0400';\n    ", "Type = await sim.getCardType(env.SLOTID2);\n     ", "t('Telephony_Sim_GetCardType_Promise_0400', 0, a", "he slotId of the GetCardType async callback inte", "{\n        type: sim.CardType.SINGLE_MODE_USIM_CA", "c_0400';\n    sim.getCardType(env.SLOTID2, (error", "{\n        type: sim.CardType.DUAL_MODE_UG_CARD\n ", "{\n        type: sim.CardType.SINGLE_MODE_ISIM_CA", "er Telephony_Sim_GetCardType_Async_0400\n   * @tc", "= 'Telephony_Sim_GetCardType_Async_0400';\n    si", "{\n        type: sim.CardType.SINGLE_MODE_RUIM_CA", "{\n        type: sim.CardType.DUAL_MODE_CG_CARD\n "], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_name": "UNKNOWN_CARD", "api_method_all": "UNKNOWN_CARD = -1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["D === env.CONSTANTS.UNKNOWN_CARD).assertTrue();\n    ", " type: sim.CardType.UNKNOWN_CARD\n      }\n      expec", "ct(cardType === sim.UNKNOWN_CARD).assertTrue();\n    ", "e();\n    expect(sim.UNKNOWN_CARD === env.CONSTANTS.U"], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_name": "SINGLE_MODE_SIM_CARD", "api_method_all": "SINGLE_MODE_SIM_CARD = 10,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": [" type: sim.CardType.SINGLE_MODE_SIM_CARD\n      }\n      expec", "e();\n    expect(sim.SINGLE_MODE_SIM_CARD === env.CONSTANTS.S", "D === env.CONSTANTS.SINGLE_MODE_SIM_CARD).assertTrue();\n    "], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_name": "SINGLE_MODE_USIM_CARD", "api_method_all": "SINGLE_MODE_USIM_CARD = 20,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.SINGLE_MODE_USIM_CARD === env.CONSTANTS.S", "D === env.CONSTANTS.SINGLE_MODE_USIM_CARD).assertTrue();\n    ", " type: sim.CardType.SINGLE_MODE_USIM_CARD\n      }\n      expec"], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_name": "SINGLE_MODE_RUIM_CARD", "api_method_all": "SINGLE_MODE_RUIM_CARD = 30,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": [" type: sim.CardType.SINGLE_MODE_RUIM_CARD\n      }\n      expec", "e();\n    expect(sim.SINGLE_MODE_RUIM_CARD === env.CONSTANTS.S", "D === env.CONSTANTS.SINGLE_MODE_RUIM_CARD).assertTrue();\n    "], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_name": "DUAL_MODE_CG_CARD", "api_method_all": "DUAL_MODE_CG_CARD = 40,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["D === env.CONSTANTS.DUAL_MODE_CG_CARD).assertTrue();\n    ", "e();\n    expect(sim.DUAL_MODE_CG_CARD === env.CONSTANTS.D", " type: sim.CardType.DUAL_MODE_CG_CARD\n      }\n      expec"], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_name": "CT_NATIONAL_ROAMING_CARD", "api_method_all": "CT_NATIONAL_ROAMING_CARD = 41,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.CT_NATIONAL_ROAMING_CARD === env.CONSTANTS.C", " type: sim.CardType.CT_NATIONAL_ROAMING_CARD\n      }\n      expec", "D === env.CONSTANTS.CT_NATIONAL_ROAMING_CARD).assertTrue();\n    "], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_name": "CU_DUAL_MODE_CARD", "api_method_all": "CU_DUAL_MODE_CARD = 42,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["D === env.CONSTANTS.CU_DUAL_MODE_CARD).assertTrue();\n    ", " type: sim.CardType.CU_DUAL_MODE_CARD\n      }\n      expec", "e();\n    expect(sim.CU_DUAL_MODE_CARD === env.CONSTANTS.C"], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_name": "DUAL_MODE_TELECOM_LTE_CARD", "api_method_all": "DUAL_MODE_TELECOM_LTE_CARD = 43,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": [" type: sim.CardType.DUAL_MODE_TELECOM_LTE_CARD\n      }\n      expec", "e();\n    expect(sim.DUAL_MODE_TELECOM_LTE_CARD === env.CONSTANTS.D", "D === env.CONSTANTS.DUAL_MODE_TELECOM_LTE_CARD).assertTrue();\n    "], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_name": "DUAL_MODE_UG_CARD", "api_method_all": "DUAL_MODE_UG_CARD = 50,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.DUAL_MODE_UG_CARD === env.CONSTANTS.D", "D === env.CONSTANTS.DUAL_MODE_UG_CARD).assertTrue();\n    ", " type: sim.CardType.DUAL_MODE_UG_CARD\n      }\n      expec"], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CardType", "api_method_name": "SINGLE_MODE_ISIM_CARD", "api_method_all": "SINGLE_MODE_ISIM_CARD = 60", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["e();\n    expect(sim.SINGLE_MODE_ISIM_CARD === env.CONSTANTS.S", "D === env.CONSTANTS.SINGLE_MODE_ISIM_CARD).assertTrue();\n    ", " type: sim.CardType.SINGLE_MODE_ISIM_CARD\n      }\n      expec"], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SimState", "api_method_all": "export enum SimState {\n    \n    SIM_STATE_UNKNOWN,\n\n    \n    SIM_STATE_NOT_PRESENT,\n\n    \n    SIM_STATE_LOCKED,\n\n    \n    SIM_STATE_NOT_READY,\n\n    \n    SIM_STATE_READY,\n\n    \n    SIM_STATE_LOADED\n  }", "api_method_name": "SimState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 64, "since": 8, "api_used": "\u662f", "lines": ["  const dualModeUg: SimStateData = {\n        typ", "'Telephony_observer_SimStateData_state_0200', 0,", " Telephony_observer_SimStateData_type_0300 Test ", "nst singleModeIsim: SimStateData = {\n        typ", " Telephony_observer_SimStateData_state_0100\n    ", "'Telephony_observer_SimStateData_state_0100', 0,", "'Telephony_observer_SimStateData_state_0300', 0,", " Telephony_observer_SimStateData_type_0200\n     ", " Telephony_observer_SimStateData_state_0200 Test", "\n        state: sim.SimState.SIM_STATE_READY\n   ", "k the type value of SimStateData object\n     */\n", "\n        state: sim.SimState.SIM_STATE_NOT_READY", "nst singleModeRUim: SimStateData = {\n        typ", " Telephony_observer_SimStateData_state_0300 Test", "\n        state: sim.SimState.SIM_STATE_LOCKED\n  ", " the state value of SimStateData object\n     */\n", "\n      const ready: SimStateData = {\n        sta", "'Telephony_observer_SimStateData_type_0200', 0, ", " Telephony_observer_SimStateData_type_0100\n     ", "'Telephony_observer_SimStateData_type_0300', 0, ", "     const unknown: SimStateData = {\n        typ", "  const cuDualMode: SimStateData = {\n        typ", "nst singleModeUSim: SimStateData = {\n        typ", " Telephony_observer_SimStateData_type_0300\n     ", "  const notPresent: SimStateData = {\n        sta", "  const dualModeCG: SimStateData = {\n        typ", " ctNationalRoaming: SimStateData = {\n        typ", "dualModeTelecomLte: SimStateData = {\n        typ", " Telephony_observer_SimStateData_type_0200 Test ", "     const unknown: SimStateData = {\n        sta", "\n        state: sim.SimState.SIM_STATE_UNKNOWN\n ", "    const notReady: SimStateData = {\n        sta", "\n        state: sim.SimState.SIM_STATE_NOT_PRESE", "      const locked: SimStateData = {\n        sta", "  const singleMode: SimStateData = {\n        typ", "/Utils.ets'\nimport {SimStateData} from '@ohos.te", " Telephony_observer_SimStateData_state_0200\n    ", "'Telephony_observer_SimStateData_type_0100', 0, ", " Telephony_observer_SimStateData_state_0100 Test", " Telephony_observer_SimStateData_state_0300\n    ", " Telephony_observer_SimStateData_type_0100 Test "], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SimState", "api_method_name": "SIM_STATE_UNKNOWN", "api_method_all": "SIM_STATE_UNKNOWN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e) {\n    expect(sim.SIM_STATE_UNKNOWN === env.CONSTANTS.S", "state: sim.SimState.SIM_STATE_UNKNOWN\n      }\n      expec", "N === env.CONSTANTS.SIM_STATE_UNKNOWN).assertTrue();\n    "], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SimState", "api_method_name": "SIM_STATE_NOT_PRESENT", "api_method_all": "SIM_STATE_NOT_PRESENT,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["state: sim.SimState.SIM_STATE_NOT_PRESENT\n      }\n      expec", "e();\n    expect(sim.SIM_STATE_NOT_PRESENT === env.CONSTANTS.S", "T === env.CONSTANTS.SIM_STATE_NOT_PRESENT).assertTrue();\n    "], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SimState", "api_method_name": "SIM_STATE_LOCKED", "api_method_all": "SIM_STATE_LOCKED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["state: sim.SimState.SIM_STATE_LOCKED\n      }\n      expec", "e();\n    expect(sim.SIM_STATE_LOCKED === env.CONSTANTS.S", "D === env.CONSTANTS.SIM_STATE_LOCKED).assertTrue();\n    "], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SimState", "api_method_name": "SIM_STATE_NOT_READY", "api_method_all": "SIM_STATE_NOT_READY,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.SIM_STATE_NOT_READY === env.CONSTANTS.S", "Y === env.CONSTANTS.SIM_STATE_NOT_READY).assertTrue();\n    ", "state: sim.SimState.SIM_STATE_NOT_READY\n      }\n      expec"], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SimState", "api_method_name": "SIM_STATE_READY", "api_method_all": "SIM_STATE_READY,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.SIM_STATE_READY === env.CONSTANTS.S", "Y === env.CONSTANTS.SIM_STATE_READY).assertTrue();\n    ", "state: sim.SimState.SIM_STATE_READY\n      }\n      expec"], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockState", "api_method_all": "export enum LockState {\n    \n    LOCK_OFF = 0,\n\n    \n    LOCK_ON = 1,\n  }", "api_method_name": "LockState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": [" state, test the SetLockState async callback inte", "t('Telephony_Sim_SetLockState_Async_1000', 0, asy", "t('Telephony_Sim_GetLockState_Async_0300', 0, asy", "t('Telephony_Sim_GetLockState_Promise_0300', 0, a", "er Telephony_Sim_GetLockState_Promise_0300\n   * @", "= 'Telephony_Sim_GetLockState_Promise_0300';\n    ", "= 'Telephony_Sim_SetLockState_Async_1000';\n    co", "er Telephony_Sim_SetLockState_Async_1000\n   * @tc", "= 'Telephony_Sim_SetLockState_Async_0100';\n      ", "og(`${CASE_NAME} setLockState error: ${error.mess", "og(`${CASE_NAME} setLockState failure, lock statu", "T_PIN };\n    sim.setLockState(env.SLOTID2, lockIn", "= 'Telephony_Sim_GetLockState_Async_0300';\n    si", "= 'Telephony_Sim_SetLockState_Promise_1000';\n    ", "c_0300';\n    sim.getLockState(env.SLOTID2, sim.PI", ".name   Test the GetLockState promise interface, ", "\n      await sim.getLockState(env.SLOTID2, sim.PI", "og(`${CASE_NAME} setLockState expect error: ${err", " state, test the SetLockState promise interface\n ", "t('Telephony_Sim_SetLockState_Promise_1000', 0, a", ".name   Test the GetLockState async callback inte", "t('Telephony_Sim_SetLockState_Async_0100', 0, asy", "_OFF);\n      sim.setLockState(env.DEFAULT_SLOTID,", "er Telephony_Sim_GetLockState_Async_0300\n   * @tc", "og(`${CASE_NAME} getLockState expect error: ${err", "\n      await sim.setLockState(env.SLOTID2, lockIn", "er Telephony_Sim_SetLockState_Promise_1000\n   * @", ";\n      await setPinLockState(sim.LOCK_OFF);\n    "], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockState", "api_method_name": "LOCK_OFF", "api_method_all": "LOCK_OFF = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.LOCK_OFF === env.CONSTANTS.L", "setPinLockState(sim.LOCK_OFF);\n      sim.setLock", "IN_LOCK, state: sim.LOCK_OFF, password: env.CORR", "F === env.CONSTANTS.LOCK_OFF).assertTrue();\n    "], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockState", "api_method_name": "LOCK_ON", "api_method_all": "LOCK_ON = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.LOCK_ON === env.CONSTANTS.L", "N === env.CONSTANTS.LOCK_ON).assertTrue();\n    ", "IN_LOCK, state: sim.LOCK_ON, password: env.CORR"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContactType", "api_method_all": "export enum ContactType {\n    GENERAL_CONTACT = 1,\n    FIXED_DIALING = 2,\n  }", "api_method_name": "ContactType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ContactType", "api_method_name": "GENERAL_CONTACT", "api_method_all": "GENERAL_CONTACT = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["rs(env.SLOTID2, sim.GENERAL_CONTACT, updateInfo);\n     ", "im.GENERAL_CONTACT, GENERAL_CONTACT_INFO);\n      consol", "rs(env.SLOTID2, sim.GENERAL_CONTACT, updateInfo, error ", "rs(env.SLOTID2, sim.GENERAL_CONTACT, (error, data) => {", "rs(env.SLOTID2, sim.GENERAL_CONTACT, CONTACT_INFO);\n   ", "rs(env.SLOTID2, sim.GENERAL_CONTACT);\n      expect(cont", "AL_CONTACT,\n        GENERAL_CONTACT_INFO,\n        error", "45678' };\n    const GENERAL_CONTACT_INFO = Object.assig", "im.GENERAL_CONTACT, GENERAL_CONTACT_INFO, error => {\n  ", "T === env.CONSTANTS.GENERAL_CONTACT).assertTrue();\n    ", "rs(env.SLOTID2, sim.GENERAL_CONTACT, GENERAL_CONTACT_IN", "number,\n        sim.GENERAL_CONTACT,\n        GENERAL_CO", "rs(env.SLOTID2, sim.GENERAL_CONTACT, CONTACT_INFO, erro", "e();\n    expect(sim.GENERAL_CONTACT === env.CONSTANTS.G"], "files": ["SimJsunit.test.ets", "SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContactType", "api_method_name": "FIXED_DIALING", "api_method_all": "FIXED_DIALING = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["e();\n    expect(sim.FIXED_DIALING === env.CONSTANTS.F", "G === env.CONSTANTS.FIXED_DIALING).assertTrue();\n    "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_all": "export enum PersoLockType {\n    PN_PIN_LOCK, //Network Personalization (refer 3GPP TS 22.022 [33])\n    PN_PUK_LOCK,\n    PU_PIN_LOCK, //network sUbset Personalization (refer 3GPP TS 22.022 [33])\n    PU_PUK_LOCK,\n    PP_PIN_LOCK, //service Provider Personalization (refer 3GPP TS 22.022 [33])\n    PP_PUK_LOCK,\n    PC_PIN_LOCK, //Corporate Personalization (refer 3GPP TS 22.022 [33])\n    PC_PUK_LOCK,\n    SIM_PIN_LOCK, //SIM/USIM personalisation (refer 3GPP TS 22.022 [33])\n    SIM_PUK_LOCK,\n  }", "api_method_name": "PersoLockType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_name": "PN_PIN_LOCK", "api_method_all": "PN_PIN_LOCK, //Network Personalization (refer 3GPP TS 22.022 [33]", "api_type": "", "api_args_count": 0, "api_level": 40, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["K === env.CONSTANTS.PN_PIN_LOCK).assertTrue();\n    ", "e();\n    expect(sim.PN_PIN_LOCK === env.CONSTANTS.P", "o = { lockType: sim.PN_PIN_LOCK, password: env.SIM_"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_name": "PU_PIN_LOCK", "api_method_all": "PU_PIN_LOCK, //network sUbset Personalization (refer 3GPP TS 22.022 [33]", "api_type": "", "api_args_count": 0, "api_level": 40, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.PU_PIN_LOCK === env.CONSTANTS.P", "K === env.CONSTANTS.PU_PIN_LOCK).assertTrue();\n    "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_name": "PP_PIN_LOCK", "api_method_all": "PP_PIN_LOCK, //service Provider Personalization (refer 3GPP TS 22.022 [33]", "api_type": "", "api_args_count": 0, "api_level": 40, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["K === env.CONSTANTS.PP_PIN_LOCK).assertTrue();\n    ", "e();\n    expect(sim.PP_PIN_LOCK === env.CONSTANTS.P"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_name": "PC_PIN_LOCK", "api_method_all": "PC_PIN_LOCK, //Corporate Personalization (refer 3GPP TS 22.022 [33]", "api_type": "", "api_args_count": 0, "api_level": 40, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.PC_PIN_LOCK === env.CONSTANTS.P", "K === env.CONSTANTS.PC_PIN_LOCK).assertTrue();\n    "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_name": "SIM_PIN_LOCK", "api_method_all": "SIM_PIN_LOCK, //SIM/USIM personalisation (refer 3GPP TS 22.022 [33]", "api_type": "", "api_args_count": 0, "api_level": 40, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.SIM_PIN_LOCK === env.CONSTANTS.S", "K === env.CONSTANTS.SIM_PIN_LOCK).assertTrue();\n    "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_name": "PN_PUK_LOCK", "api_method_all": "PN_PUK_LOCK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["K === env.CONSTANTS.PN_PUK_LOCK).assertTrue();\n    ", "e();\n    expect(sim.PN_PUK_LOCK === env.CONSTANTS.P"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_name": "PU_PUK_LOCK", "api_method_all": "PU_PUK_LOCK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["K === env.CONSTANTS.PU_PUK_LOCK).assertTrue();\n    ", "e();\n    expect(sim.PU_PUK_LOCK === env.CONSTANTS.P"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_name": "PP_PUK_LOCK", "api_method_all": "PP_PUK_LOCK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.PP_PUK_LOCK === env.CONSTANTS.P", "K === env.CONSTANTS.PP_PUK_LOCK).assertTrue();\n    "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_name": "PC_PUK_LOCK", "api_method_all": "PC_PUK_LOCK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["K === env.CONSTANTS.PC_PUK_LOCK).assertTrue();\n    ", "e();\n    expect(sim.PC_PUK_LOCK === env.CONSTANTS.P"], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PersoLockType", "api_method_name": "SIM_PUK_LOCK", "api_method_all": "SIM_PUK_LOCK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["e();\n    expect(sim.SIM_PUK_LOCK === env.CONSTANTS.S", "K === env.CONSTANTS.SIM_PUK_LOCK).assertTrue();\n    "], "files": ["SimManager.test.js"], "is_white": " ", "desc": " "}]}