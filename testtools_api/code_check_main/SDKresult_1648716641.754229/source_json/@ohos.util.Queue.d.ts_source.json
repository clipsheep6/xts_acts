{"subsystem_ch": "\u516c\u5171\u57fa\u7840\u7c7b\u5e93", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.util.Queue", "api": [{"api_class_name": "Queue", "api_method_all": "declare class Queue<T> {\r\n  \r\n  constructor();\r\n  \r\n  length: number;\r\n  \r\n  add(element: T): boolean;\r\n  \r\n  getFirst(): T;\r\n  \r\n  pop(): T;\r\n  \r\n  forEach(callbackfn: (value: T, index?: number, Queue?: Queue<T>) => void,\r\n  thisArg?: Object): void;\r\n  \r\n  [Symbol.iterator](): IterableIterator<T>;\r\n}", "api_method_name": "Queue", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": [".Queue\";\n\ndescribe(\"QueueTest\", function () {", "    let queue = new Queue();\n    } catch (err", "ue from \"@ohos.util.Queue\";\n\ndescribe(\"QueueT", "unit/index';\nimport Queue from \"@ohos.util.Qu", "    let queue = new Queue();\n    queue.add(\"\u56db", "    let queue = new Queue();\n    queue.add(6)", "    let queue = new Queue();\n    let res = qu", "    let queue = new Queue();\n    queue.add(\"$", "st.js');\nrequire('./Queue.test.js');\nrequire(", "    let queue = new Queue();\n    queue.add(nu", "    let queue = new Queue();\n    queue.add(\" ", "    let queue = new Queue();\n    let a = [\"a\"", "    let queue = new Queue();\n    let arr = []", "    let queue = new Queue();\n    queue.add(8)", "    let queue = new Queue();\n    for (let i =", "    let queue = new Queue();\n    queue.add(un"], "files": ["Main.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Queue", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Queue", "api_method_name": "add", "api_method_all": "add(element: T): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1442, "since": 8, "api_used": "\u662f", "lines": ["st();\n    arrayList.add(1);\n    arrayList.a", "    })\n        core.addService('expect', ex", "st();\n    arrayList.add(\"\u56db\");\n    arrayList", "d(1);\n    arrayList.add(\"\u4e09\");\n    arrayList", "d(1);\n    arrayList.add(\"a\");\n    arrayList", "d(1);\n    arrayList.add(\"b\");\n    arrayList", "d(1);\n    arrayList.add(2);\n    arrayList.a", "\"a\");\n    arrayList.add(1);\n    arrayList.a", "d(3);\n    arrayList.add(1);\n    arrayList.a", "3\u5c81\"};\n    arrayList.add(a);\n    let res = a", "d(2);\n    arrayList.add(14);\n    arrayList.", ", 4];\n    arrayList.add(a);\n    let res = a", "d(4);\n    arrayList.add(3);\n    arrayList.a", "st();\n    arrayList.add(\"\u56db\");\n    let res =", "true;\n    arrayList.add(a);\n    let res = a", "d(1);\n    arrayList.add(\"b\");\n    let res =", "\"c\");\n    arrayList.add(1);\n    arrayList.r", "\"\u4e09\");\n    arrayList.add(1);\n    arrayList.a", "st();\n    arrayList.add(4);\n    arrayList.a", "st();\n    arrayList.add(8);\n    let res = a", "\"b\");\n    arrayList.add(\"c\");\n    arrayList", "\"\u56db\");\n    arrayList.add(\"\u4e09\");\n    arrayList"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "Process.test.js", "Vector.test.js", "PlainArray.test.js", "xml.test.js", "ArrayList.test.js", "index.js", "HashSet.test.js", "Worker.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Queue", "api_method_name": "getFirst", "api_method_all": "getFirst(): T;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["    let res = queue.getFirst();\n    expect(res).", "\n    let res = list.getFirst();\n    expect(res).", "   let res1 = queue.getFirst();\n    expect(res).", "    let res = deque.getFirst();\n      expect(res", "  let res = treeSet.getFirstValue();\n    expect(", "   let res = vector.getFirstElement();\n    expec", "  let res = treeMap.getFirstKey();\n    expect(re", "et res = linkedList.getFirst();\n    expect(res).", "    let res = deque.getFirst();\n    expect(res)."], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "Vector.test.js", "TreeMap.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Queue", "api_method_name": "pop", "api_method_all": "pop(): T;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 21, "since": 8, "api_used": "\u662f", "lines": ["    let res = stack.pop();\n    expect(res).", "pFirst();\n    deque.popLast();\n    deque.in", "ont(\"z\");\n    deque.popFirst();\n    deque.p", "  let res = treeSet.popLast();\n    expect(r", " let res1 = treeSet.popFirst();\n    expect(", "rtEnd(6);\n    deque.popFirst();\n    deque.p", "    let res = queue.pop();\n    expect(res).", "    let res = deque.popLast();\n    expect(r", "    let res = queue.pop();\n    let res1 = q", "ont(\"\u56db\");\n    deque.popFirst();\n    deque.p", "    let res = stack.pop();\n    let res1 = s", "    let res = deque.popFirst();\n    expect(", "  let res = treeSet.popFirst();\n    expect("], "files": ["TreeSet.test.js", "Stack.test.js", "Queue.test.js", "Deque.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Queue", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: T, index?: number, Queue?: Queue<T>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 5, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Queue", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: T, index?: number, Queue?: Queue<T>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 4, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Queue", "api_method_name": "length", "api_method_all": "length: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 327, "since": 8, "api_used": "\u662f", "lines": ["et res1 = arrayList.length;\n    expect(res).as", "   let res1 = deque.length;\n    expect(res1).a", "let res = arrayList.length;\n    expect(res).as", "   let size = deque.length;\n    expect(size).a", "   let size = deque.length;\n    let arr = [];\n", "= 0; i < linkedList.length; i++) {\n      if (l", "\n    let res = list.length;\n    expect(res).as", "r (let i = 0; i < a.length; i++) {\n      expec", "x = 0; index < list.length; index++) {\n      e", "let res = arrayList.length;\n    let res1 = arr", "st len = linkedList.length;\n    expect(len).as"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "Queue.test.js", "LightWeightMap.test.js", "LightWeightSet.test.js", "HashMap.test.js", "Worker.test.js", "TreeSet.test.js", "Process.test.js", "PlainArray.test.js", "TreeMap.test.js", "worker.js"], "is_white": " ", "desc": " "}]}