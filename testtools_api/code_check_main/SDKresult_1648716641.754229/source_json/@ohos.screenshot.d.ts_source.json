{"subsystem_ch": "\u7a97\u53e3\u5b50\u7cfb\u7edf", "subsystem_en": "graphic", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.screenshot", "api": [{"api_class_name": "screenshot", "api_method_all": "declare namespace screenshot {\r\n    \r\n    function save(options?: ScreenshotOptions, callback: AsyncCallback<image.PixelMap>): void;\r\n\r\n    \r\n    function save(options?: ScreenshotOptions): Promise<image.PixelMap>;\r\n\r\n    \r\n    interface Rect {\r\n        left: number;\r\n        top: number;\r\n        width: number;\r\n        height: number;\r\n    }\r\n\r\n    \r\n    interface Size {\r\n        width: number;\r\n        height: number;\r\n    }\r\n\r\n    \r\n    interface ScreenshotOptions {\r\n        \r\n        screenRect?: Rect;\r\n        \r\n        imageSize?: Size;\r\n        \r\n        rotation?: number;\r\n        \r\n        displayId?: number;\r\n    }\r\n}", "api_method_name": "screenshot", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 119, "since": 0, "api_used": "\u662f", "lines": ["eenshot from '@ohos.screenshot'\nimport image from ", "Id: dsp.id\n\t\t\t};\n\t\t\tscreenshot.save(screenshotOpti", "> {\n\t\t\tconsole.log('screenshotTest screenShotSaveT", "ssertTrue();\n\t\t\tvar screenshotOptions = {\n\t\t\t\tscre", ".screen'\n\ndescribe('screenshot_test', function () ", "e) {\n\t\tconsole.log('screenshotTest screenShotSaveT", " {\n\t\t\t\tconsole.log('screenshotTest screenShotSaveT", "screenShotSaveTest1 screenshot.save success, data ", "est.js')\nrequire('./screenshot.test.js')\n\n", "screenShotSaveTest3 screenshot.save success, data ", "screenShotSaveTest2 screenshot.save success, data ", "screenShotSaveTest3 screenshot.save failed, err : ", "\n\t\t\tscreenshot.save(screenshotOptions).then((data)", "screenShotSaveTest4 screenshot.save failed, err : ", "screenShotSaveTest4 screenshot.save success, data ", "screenShotSaveTest1 screenshot.save failed, err : ", "hos.display'\nimport screenshot from '@ohos.screens", "screenShotSaveTest2 screenshot.save failed, err : "], "files": ["List.test.js", "window.test.js", "screenshot.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "screenshot", "api_method_name": "save", "api_method_all": "function save(options?: ScreenshotOptions, callback: AsyncCallback<image.PixelMap>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["aveTest5 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest1 screenshot.save success, data :' + JSON.stringify(data)", "aveTest8 screenshot.save success, data :' + JSON.stringify(data)", "veTest11 screenshot.save success, data :' + JSON.stringify(data)", "aveTest7 screenshot.save success, data :' + JSON.stringify(data)", "aveTest2 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest5 screenshot.save success, data :' + JSON.stringify(data)", "aveTest4 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest8 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest1 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest9 screenshot.save success, data :' + JSON.stringify(data)", "veTest10 screenshot.save success, data :' + JSON.stringify(data)", "aveTest3 screenshot.save success, data :' + JSON.stringify(data)", "aveTest6 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest6 screenshot.save success, data :' + JSON.stringify(data)", "veTest10 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest9 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest7 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest3 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest4 screenshot.save success, data :' + JSON.stringify(data)", "veTest11 screenshot.save failed, err : ' + JSON.stringify(err));", "aveTest2 screenshot.save success, data :' + JSON.stringify(data)"], "files": ["screenshot.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "screenshot", "api_method_name": "save", "api_method_all": "function save(options?: ScreenshotOptions): Promise<image.PixelMap>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["0\n\t\t};\n\t\tscreenshot.save(screenshotOptions).then((data) => {\n\t\t\t", "\t\t\t};\n\t\t\tscreenshot.save(screenshotOptions).then((data) => {\n\t\t\t", "l\n\t\t};\n\t\tscreenshot.save(screenshotOptions).then((data) => {\n\t\t\t"], "files": ["screenshot.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Rect", "api_method_all": "interface Rect {\r\n        left: number;\r\n        top: number;\r\n        width: number;\r\n        height: number;\r\n    }", "api_method_name": "Rect", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": ["tions = {\n\t\t\t\tscreenRect: {\n\t\t\t\t\tleft: -50,\n", "  expect(data.bottomRect != null).assertTrue", "     expect(data.topRect != null).assertTrue", "tions = {\n\t\t\t\tscreenRect: {\n\t\t\t\t\tleft: 0,\n\t\t", "height = data.bottomRect.height;\n    }\n\n    ", "   expect(data.rightRect != null).assertTrue", "  expect(data.windowRect != null).assertTrue", "    expect(data.leftRect != null).assertTrue", "ptions = {\n\t\t\tscreenRect: {\n\t\t\t\tleft: 0,\n\t\t\t"], "files": ["window.test.js", "screenshot.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Rect", "api_method_name": "left", "api_method_all": "left: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["        expect(data.leftRect != null).assert", "\tscreenRect: {\n\t\t\t\t\tleft: -50,\n\t\t\t\t\ttop: -50", "\t\tscreenRect: {\n\t\t\t\tleft: 0,\n\t\t\t\ttop: 0,\n\t\t\t", "\tscreenRect: {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t"], "files": ["window.test.js", "screenshot.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Rect", "api_method_name": "top", "api_method_all": "top: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 24, "since": 7, "api_used": "\u662f", "lines": ["\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: 0,\n", "   var wnd;\n    var topWindow;\n    const DE", "');\n                topWindow.getProperties", "done) {\n        if (topWindow) {\n          ", "ndow) {\n            topWindow.show().then((", "\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: dsp", "        expect(data.topRect != null).assert", "scene that gets the top window\n    */\n    i", " {\n\t\t\t\tleft: 0,\n\t\t\t\ttop: 0,\n\t\t\t\twidth: 100,", "\t\t\t\tleft: -50,\n\t\t\t\t\ttop: -50,\n\t\t\t\t\twidth: -", ") {\n                topWindow = wnd;\n      ", "                    topWindow.setFullScreen", "\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: 100"], "files": ["window.test.js", "screenshot.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Rect", "api_method_name": "width", "api_method_all": "width: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 68, "since": 7, "api_used": "\u662f", "lines": [" + width);\n\t\texpect(width).assertEqual(256);\n", "ER_WIDTH);\n\t\texpect(width).assertEqual(256);\n", "\t\timageSize: {\n\t\t\t\t\twidth: 3000,\n\t\t\t\t\theight:", "\t\t\t\t\ttop: -50,\n\t\t\t\t\twidth: -100,\n\t\t\t\t\theight:", "     expect(data[0].width != null).assertTrue", "\t\timageSize: {\n\t\t\t\t\twidth: 300,\n\t\t\t\t\theight: ", "arameter width: \" + width);\n\t\texpect(width).a", ",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: 10000,\n\t\t\t\t\theight", " 256, 256);\n\t\tconst width = gl.getRenderbuffe", "      expect(dsp[0].width != null).assertTrue", ",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: 100,\n\t\t\t\t\theight: ", "nderbufferParameter width: \" + width);\n\t\texpe", "         expect(dsp.width != null).assertTrue", "L_FORMAT);\n\t\texpect(width).assertEqual(gl.RGB", "L_FORMAT);\n\t\texpect(width).assertEqual(gl.STE", "L_FORMAT);\n\t\texpect(width).assertEqual(gl.DEP", "256, 256);\n\n\t\tconst width = gl.getRenderbuffe", "        expect(data.width != null).assertTrue"], "files": ["display.test.js", "webGL.test.js", "WebGL.test02.js", "WebGL.test03.js", "WebGL.test13.js", "screenshot.test.js", "window.test.js", "WebGL.test11.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Rect", "api_method_name": "height", "api_method_all": "height: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 47, "since": 7, "api_used": "\u662f", "lines": ["));\n\t\theight = data.height;\n    }\n\t\n\tfunction ", "xpect(dsp.height == height).assertTrue();\n\t\t\t\t", "h,\n\t\t\t\t\theight: dsp.height\n\t\t\t\t},\n\t\t\t\tdisplayI", "h,\n\t\t\t\t\theight: dsp.height\n\t\t\t\t},\n\t\t\t\timageSiz", "\twidth: 10000,\n\t\t\t\t\theight: 10000,\n\t\t\t\t},\n\t\t\t\t", "stringify(data));\n\t\theight = data.bottomRect.h", "\n\t\t\t\t\t\t\t\texpect(dsp.height == height).assertTr", "256, 256);\n\n\t\tconst height = gl.getRenderbuffe", "th: dsp.width,\n\t\t\t\t\theight: dsp.height\n\t\t\t\t},\n", "t = data.bottomRect.height;\n    }\n\n    beforeA", " = 100;\n        var height = 100;\n        cons", "stringify(data));\n\t\theight = data.height;\n    ", "\t\twidth: 3000,\n\t\t\t\t\theight: 3000\n\t\t\t\t},\n\t\t\t\tdi", "         expect(dsp.height != null).assertTrue", " i;\n                height = height * i;\n     ", "           height = height * i;\n              ", "      expect(dsp[0].height != null).assertTrue", "     expect(data[0].height != null).assertTrue", "             expect(height == 0).assertTrue();", "R_HEIGHT);\n\t\texpect(height).assertEqual(256);\n", "\t\t\twidth: 300,\n\t\t\t\t\theight: 300\n\t\t\t\t},\n\t\t\t\tdis", "\t\t\t\t\twidth: 0,\n\t\t\t\t\theight: 0,\n\t\t\t\t},\n\t\t\t\timag", "\t\t\t\twidth: 100,\n\t\t\t\theight: 100,\n\t\t\t},\n\t\t\timag", "\t\t\t\twidth: 300,\n\t\t\t\theight: 300\n\t\t\t},\n\t\t\tdispl", "\t\t\twidth: 100,\n\t\t\t\t\theight: 100,\n\t\t\t\t},\n\t\t\t\tim", "        expect(data.height != null).assertTrue", "\t\t\t\t\t\t\t\t\texpect(dsp.height == height).assertTr", "nd.resetSize(width, height).then(() => {\n     ", "IME = 3000;\n    var height;\n\n    function wind", "\t\t\t\t\twidth: 0,\n\t\t\t\t\theight: 0\n\t\t\t\t},\n\t\t\t\tdispl", "\t\twidth: -100,\n\t\t\t\t\theight: -100,\n\t\t\t\t},\n\t\t\t\ti", "\t\twidth: -300,\n\t\t\t\t\theight: -300\n\t\t\t\t},\n\t\t\t\tdi"], "files": ["display.test.js", "webGL.test.js", "screenshot.test.js", "window.test.js", "WebGL.test11.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_all": "interface Size {\r\n        width: number;\r\n        height: number;\r\n    }", "api_method_name": "Size", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 197, "since": 7, "api_used": "\u662f", "lines": ["r blockSize\" + blockSize);\n\t\texpect(blockSiz", "GetVertexAttrib_EnumSize\n\t * @tc.desc Test g", "6];\n\t\t\tconst uniformSize = gl2.getActiveUnif", "BlockParameter blockSize\" + blockSize);\n\t\tex", "console.info('bufferSize' + bufferSize);\n\t\te", "x, 1);\n\t\tconst blockSize = gl2.getActiveUnif", "r blockSize\" + blockSize);\n\t\tconst errorCode", "IZE);\n\t\texpect(greenSize).assertEqual(4);\n\t\t", " +\n\t\t//    \"gl_PointSize = 10.0;\" +\n\t\t\"} \";\n", " 256);\n\t\tconst greenSize = gl.getRenderbuffe", "RAW);\n\t\tconst bufferSize = gl.getBufferParam", "ze);\n\t\texpect(bufferSize).assertEqual(8);\n\t\t", "bufferSize' + bufferSize);\n\t\texpect(bufferSi", "const type = (bufferSize === 1024)\n\t\texpect(", "GetVertexAttrib_EnumSize', 0, async function", "BlockParameter blockSize\" + blockSize);\n\t\tco", "ze);\n\t\texpect(bufferSize).assertEqual(1024);", "console.info('bufferSize' + bufferSize);\n\t\tc", "];\n\t\t\texpect(uniformSize.toString() != gluin", "ize);\n\t\texpect(blockSize).assertEqual(undefi", "ER);\n\t\texpect(bufferSize).assertEqual(undefi", "bufferSize' + bufferSize);\n\t\tconst type = (b", "IZE);\n\t\texpect(greenSize).assertEqual(0);\n\t\t"], "files": ["WebGL.test10.js", "WebGL.test07.js", "webGL.test.js", "WebGL.test12.js", "WebGL.test14.js", "WebGL.test02.js", "WebGL.test08.js", "WebGL.test03.js", "WebGL.test13.js", "WebGL.test01.js", "WebGL.test09.js", "screenshot.test.js", "WebGL.test05.js", "window.test.js", "WebGL.test15.js", "WebGL.test06.js", "WebGL.test04.js", "WebGL.test11.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_name": "width", "api_method_all": "width: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 68, "since": 7, "api_used": "\u662f", "lines": [" + width);\n\t\texpect(width).assertEqual(256);\n", "ER_WIDTH);\n\t\texpect(width).assertEqual(256);\n", "\t\timageSize: {\n\t\t\t\t\twidth: 3000,\n\t\t\t\t\theight:", "\t\t\t\t\ttop: -50,\n\t\t\t\t\twidth: -100,\n\t\t\t\t\theight:", "     expect(data[0].width != null).assertTrue", "\t\timageSize: {\n\t\t\t\t\twidth: 300,\n\t\t\t\t\theight: ", "arameter width: \" + width);\n\t\texpect(width).a", ",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: 10000,\n\t\t\t\t\theight", " 256, 256);\n\t\tconst width = gl.getRenderbuffe", "      expect(dsp[0].width != null).assertTrue", ",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: 100,\n\t\t\t\t\theight: ", "nderbufferParameter width: \" + width);\n\t\texpe", "         expect(dsp.width != null).assertTrue", "L_FORMAT);\n\t\texpect(width).assertEqual(gl.RGB", "L_FORMAT);\n\t\texpect(width).assertEqual(gl.STE", "L_FORMAT);\n\t\texpect(width).assertEqual(gl.DEP", "256, 256);\n\n\t\tconst width = gl.getRenderbuffe", "        expect(data.width != null).assertTrue"], "files": ["display.test.js", "webGL.test.js", "WebGL.test02.js", "WebGL.test03.js", "WebGL.test13.js", "screenshot.test.js", "window.test.js", "WebGL.test11.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_name": "height", "api_method_all": "height: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 47, "since": 7, "api_used": "\u662f", "lines": ["));\n\t\theight = data.height;\n    }\n\t\n\tfunction ", "xpect(dsp.height == height).assertTrue();\n\t\t\t\t", "h,\n\t\t\t\t\theight: dsp.height\n\t\t\t\t},\n\t\t\t\tdisplayI", "h,\n\t\t\t\t\theight: dsp.height\n\t\t\t\t},\n\t\t\t\timageSiz", "\twidth: 10000,\n\t\t\t\t\theight: 10000,\n\t\t\t\t},\n\t\t\t\t", "stringify(data));\n\t\theight = data.bottomRect.h", "\n\t\t\t\t\t\t\t\texpect(dsp.height == height).assertTr", "256, 256);\n\n\t\tconst height = gl.getRenderbuffe", "th: dsp.width,\n\t\t\t\t\theight: dsp.height\n\t\t\t\t},\n", "t = data.bottomRect.height;\n    }\n\n    beforeA", " = 100;\n        var height = 100;\n        cons", "stringify(data));\n\t\theight = data.height;\n    ", "\t\twidth: 3000,\n\t\t\t\t\theight: 3000\n\t\t\t\t},\n\t\t\t\tdi", "         expect(dsp.height != null).assertTrue", " i;\n                height = height * i;\n     ", "           height = height * i;\n              ", "      expect(dsp[0].height != null).assertTrue", "     expect(data[0].height != null).assertTrue", "             expect(height == 0).assertTrue();", "R_HEIGHT);\n\t\texpect(height).assertEqual(256);\n", "\t\t\twidth: 300,\n\t\t\t\t\theight: 300\n\t\t\t\t},\n\t\t\t\tdis", "\t\t\t\t\twidth: 0,\n\t\t\t\t\theight: 0,\n\t\t\t\t},\n\t\t\t\timag", "\t\t\t\twidth: 100,\n\t\t\t\theight: 100,\n\t\t\t},\n\t\t\timag", "\t\t\t\twidth: 300,\n\t\t\t\theight: 300\n\t\t\t},\n\t\t\tdispl", "\t\t\twidth: 100,\n\t\t\t\t\theight: 100,\n\t\t\t\t},\n\t\t\t\tim", "        expect(data.height != null).assertTrue", "\t\t\t\t\t\t\t\t\texpect(dsp.height == height).assertTr", "nd.resetSize(width, height).then(() => {\n     ", "IME = 3000;\n    var height;\n\n    function wind", "\t\t\t\t\twidth: 0,\n\t\t\t\t\theight: 0\n\t\t\t\t},\n\t\t\t\tdispl", "\t\twidth: -100,\n\t\t\t\t\theight: -100,\n\t\t\t\t},\n\t\t\t\ti", "\t\twidth: -300,\n\t\t\t\t\theight: -300\n\t\t\t\t},\n\t\t\t\tdi"], "files": ["display.test.js", "webGL.test.js", "screenshot.test.js", "window.test.js", "WebGL.test11.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScreenshotOptions", "api_method_all": "interface ScreenshotOptions {\r\n        \r\n        screenRect?: Rect;\r\n        \r\n        imageSize?: Size;\r\n        \r\n        rotation?: number;\r\n        \r\n        displayId?: number;\r\n    }", "api_method_name": "ScreenshotOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScreenshotOptions", "api_method_name": "screenRect", "api_method_all": "screenRect?: Rect", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": ["nshotOptions = {\n\t\t\tscreenRect: {\n\t\t\t\tleft: 0,\n\t\t\t", "shotOptions = {\n\t\t\t\tscreenRect: {\n\t\t\t\t\tleft: -50,\n", "shotOptions = {\n\t\t\t\tscreenRect: {\n\t\t\t\t\tleft: 0,\n\t\t"], "files": ["screenshot.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScreenshotOptions", "api_method_name": "imageSize", "api_method_all": "imageSize?: Size", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": ["ht: 100,\n\t\t\t\t},\n\t\t\t\timageSize: {\n\t\t\t\t\twidth: 0,\n\t", "ight: 0,\n\t\t\t\t},\n\t\t\t\timageSize: {\n\t\t\t\t\twidth: 300,", "p.height\n\t\t\t\t},\n\t\t\t\timageSize: {\n\t\t\t\t\twidth: dsp.", ": 10000,\n\t\t\t\t},\n\t\t\t\timageSize: {\n\t\t\t\t\twidth: 3000", "t: -100,\n\t\t\t\t},\n\t\t\t\timageSize: {\n\t\t\t\t\twidth: 300,", "ht: 100,\n\t\t\t\t},\n\t\t\t\timageSize: {\n\t\t\t\t\twidth: -300", "ight: 100,\n\t\t\t},\n\t\t\timageSize: {\n\t\t\t\twidth: 300,\n", "ht: 100,\n\t\t\t\t},\n\t\t\t\timageSize: {\n\t\t\t\t\twidth: 3000", "ht: 100,\n\t\t\t\t},\n\t\t\t\timageSize: {\n\t\t\t\t\twidth: 300,", ": 10000,\n\t\t\t\t},\n\t\t\t\timageSize: {\n\t\t\t\t\twidth: 300,"], "files": ["screenshot.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScreenshotOptions", "api_method_name": "rotation", "api_method_all": "rotation?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScreenshotOptions", "api_method_name": "displayId", "api_method_all": "displayId?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": ["eight: 300\n\t\t\t},\n\t\t\tdisplayId: 1000\n\t\t};\n\t\tscreen", "eight: 300\n\t\t\t},\n\t\t\tdisplayId: null\n\t\t};\n\t\tscreen", "ht: -300\n\t\t\t\t},\n\t\t\t\tdisplayId: dsp.id\n\t\t\t};\n\t\t\tsc", "ht: 3000\n\t\t\t\t},\n\t\t\t\tdisplayId: dsp.id\n\t\t\t};\n\t\t\tsc", "eight: 0\n\t\t\t\t},\n\t\t\t\tdisplayId: dsp.id\n\t\t\t};\n\t\t\tsc", "p.height\n\t\t\t\t},\n\t\t\t\tdisplayId: dsp.id\n\t\t\t};\n\t\t\tsc", "ght: 300\n\t\t\t\t},\n\t\t\t\tdisplayId: dsp.id\n\t\t\t};\n\t\t\tsc"], "files": ["screenshot.test.js"], "is_white": " ", "desc": " "}]}