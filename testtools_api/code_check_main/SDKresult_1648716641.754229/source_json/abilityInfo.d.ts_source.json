{"subsystem_ch": "\u5143\u80fd\u529b\u5b50\u7cfb\u7edf", "subsystem_en": "aafwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\bundle\\abilityInfo", "api": [{"api_class_name": "AbilityInfo", "api_method_all": "export interface AbilityInfo {\r\n  \r\n  readonly bundleName: string;\r\n\r\n  \r\n  readonly name: string;\r\n\r\n  \r\n  readonly label: string;\r\n\r\n  \r\n  readonly description: string;\r\n\r\n  \r\n  readonly icon: string;\r\n\r\n  \r\n  readonly labelId: number;\r\n\r\n  \r\n  readonly descriptionId: number;\r\n\r\n  \r\n  readonly iconId: number;\r\n\r\n  \r\n  readonly moduleName: string;\r\n\r\n  \r\n  readonly process: string;\r\n\r\n  \r\n  readonly targetAbility: string;\r\n\r\n  \r\n  readonly backgroundModes: number;\r\n\r\n  \r\n  readonly isVisible: boolean;\r\n\r\n  \r\n  readonly formEnabled: boolean;\r\n\r\n  \r\n  readonly type: bundle.AbilityType;\r\n\r\n  \r\n  readonly subType: bundle.AbilitySubType;\r\n\r\n  \r\n  readonly orientation: bundle.DisplayOrientation;\r\n\r\n  \r\n  readonly launchMode: bundle.LaunchMode;\r\n\r\n  \r\n  readonly permissions: Array<string>;\r\n\r\n  \r\n  readonly deviceTypes: Array<string>;\r\n\r\n  \r\n  readonly deviceCapabilities: Array<string>;\r\n\r\n  \r\n  readonly readPermission: string;\r\n\r\n  \r\n  readonly writePermission: string;\r\n\r\n  \r\n  readonly applicationInfo: ApplicationInfo;\r\n\r\n  \r\n  readonly uri: string;\r\n\r\n  \r\n  readonly metaData: Array<CustomizeData>;\r\n\r\n  \r\n  readonly metadata: Array<Metadata>;\r\n\r\n  \r\n   readonly enabled: boolean;\r\n}", "api_method_name": "AbilityInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 248, "since": 7, "api_used": "\u662f", "lines": [" = await context.getAbilityInfo();\n      console.in", "e.info('[context_getAbilityInfo_test_0200] FINISH')", "ole.log(msg + \"checkAbilityInfo iconId : \" + data.i", "e.error('context_getAbilityInfo_test_0300 startMain", "info('--[context_getAbilityInfo_test_0100] check---", "ole.log(msg + \"checkAbilityInfo backgroundModes : \"", "ityInfo('context_getAbilityInfo_test_0100', promise", ".error('[context_getAbilityInfo_test_0200] failed: ", "ionTime('context_getAbilityInfo_test_0400', timeOld", "ole.log(msg + \"checkAbilityInfo bundleName : \" + da", "ionTime('context_getAbilityInfo_test_0100', timeOld", "ole.log(msg + \"checkAbilityInfo targetAbility : \" +", "e.info('[context_getAbilityInfo_test_0400] START');", "e.info('[context_getAbilityInfo_test_0100] START');", "\n    it('context_getAbilityInfo_test_0300_1', 0, as", "info('--[context_getAbilityInfo_test_0400] check---", "ole.log(msg + \"checkAbilityInfo description : \" + d", "ole.log(msg + \"checkAbilityInfo icon : \" + data.ico", "nfo('---[context_getAbilityInfo_test_0200] check---", "e.info('[context_getAbilityInfo_test_0300] STARTabi", "le.info('context_getAbilityInfo_test_0300 startMain", "ole.log(msg + \"checkAbilityInfo name : \" + data.nam", "e.info('[context_getAbilityInfo_test_0100] FINISH')", "ionTime('context_getAbilityInfo_test_0200', timeOld", "ole.log(msg + \"checkAbilityInfo process : \" + data.", "\n\n    function checkAbilityInfo(msg, data) {\n      ", "\n    it('context_getAbilityInfo_test_0200', 0, asyn", "e.info('[context_getAbilityInfo_test_0400] data is:", "ole.log(msg + \"checkAbilityInfo moduleName : \" + da", "ole.log(msg + \"checkAbilityInfo label : \" + data.la", "ityInfo('context_getAbilityInfo_test_0200', callbac", "\n        context.getAbilityInfo((error, data) => {\n", "e.info('[context_getAbilityInfo_test_0100] data is:", "ityInfo('context_getAbilityInfo_test_0400', promise", "   await context.getAbilityInfo()\n        .then((da", ".error('[context_getAbilityInfo_test_0100] failed:'", "\n    it('context_getAbilityInfo_test_0100', 0, asyn", "e.info('[context_getAbilityInfo_test_0200] data is:", ".error('[context_getAbilityInfo_test_0400] failed:'", "ck---');\n      checkAbilityInfo('context_getAbility", "ole.log(msg + \"checkAbilityInfo start  \" + JSON.str", "ole.log(msg + \"checkAbilityInfo descriptionId : \" +", "e.info('[context_getAbilityInfo_test_0400] FINISH')", "\n    it('context_getAbilityInfo_test_0400', 0, asyn", "e.info('[context_getAbilityInfo_test_0200] START');"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "List.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "bundleName", "api_method_all": "readonly bundleName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 953, "since": 7, "api_used": "\u662f", "lines": ["ypeof (info[i].want.bundleName)).assertEqual(\"stri", "MainAbility\"\n]\n\nlet bundleNameList = [\n    \"com.oh", "     expect(info[i].bundleNames.length).assertEqua", "expect(info[i].want.bundleName.length).assertLarge", "                    bundleName: \"com.ix.verify.io\"", "             expect(bundleNameList.indexOf(data[i]", "ypeof (data[i].want.bundleName)).assertEqual(\"stri", "expect(data[i].want.bundleName.length).assertLarge", "me:' + data[i].want.bundleName);\n                 ", "                    bundleName: \"com.ix.simulate.f", "                    bundleName: \"com.ix.verify.act", "rror.code + ', want.bundleName:' + data[i].want.bu", "             expect(bundleNameList.indexOf(info[i]", "   if (data[i].want.bundleName != 'com.example.act", "                    bundleName: \"com.ix.simulate.e", "ndexOf(info[i].want.bundleName)).assertLarger(-1);", "MainAbility\"\n]\n\nvar bundleNameList = [\n    \"com.oh", "ndexOf(data[i].want.bundleName)).assertLarger(-1);", "ray.isArray(info[i].bundleNames)).assertEqual(true"], "files": ["FormFuzzArray.test.js", "getHapModuleInfoJsunit.test.ets", "FormsOneAndOneJsunit.test.js", "ActsGetWantAllTest.js", "ActsProcessManageJsTest.test.js", "getAbilityInfoJsunit2.test.ets", "FormFuzzString.test.js", "taskSwitchJsunit.test.js", "app.js", "getAbilityInfoJsunit.test.ets", "ApplicationInfoJsunit.test.js", "ActsAbilityLifecycleStateNewTest.test.js", "amsMissionSnapshotTest.test.js", "MangerAbilityJsunit.test.js", "LockNew.js", "FormFuzzFunction.test.js", "startFULL.test.js", "getHapModuleInfoJsunit_app1.test.ets", "ActsAbilityDelegatorCaseTest.test.js", "FormFuzzNull.test.js", "ActsKillProcessTest.test.js", "index.js", "MissionManager.test.js", "index.ets", "ActsStServiceAbilityClientCaseTest.test.js", "FormFuzzNum.test.js", "FeatureAbilityJsunit.test.js", "FormsOneAndTwoJsunit.test.js", "FormFuzzUndefined.test.js", "FormFuzzObject.test.js", "FormFuzzBool.test.js", "FormsZeroAndOneJsunit.test.js", "FormsZeroJsunit.test.js", "AbilityDisableTest.js", "Getactive.test.js", "lanuageConfigapi7.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "name", "api_method_all": "readonly name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 454, "since": 7, "api_used": "\u662f", "lines": ["alueBucket = {\n    \"name\": \"ActsDataAbilityH", "expect(typeof (info.name)).assertEqual(\"stri", "expect(typeof (data.name)).assertEqual(\"stri", "h_Delete_0400\n* @tc.name: ExecuteBatch : Pre", "TS_Call_0200\n * @tc.name: call : Queries dat", "TS_Call_0400\n * @tc.name: call : Deletes one", ";\n      expect(data.name).assertEqual(\"com.o", "nfo name : \" + info.name);\n          console", "checkRunningProcess(name, dataInfo) {\n      ", " \"checkAbilityInfo2 name : \" + data.name);\n ", "nfo name : \" + info.name);\n      console.log", "h_Assert_0400\n* @tc.name: ExecuteBatch : Pre", "        expect(info.name).assertEqual(\"com.o", "\"checkHapModuleInfo name : \" + data.name);\n ", "        expect(data.name).assertEqual(\"com.e", "fo2 name : \" + data.name);\n      console.log", "4.20, },\n        { \"name\": \"ActsDataAbilityH", "nfo name : \" + data.name);\n          console", "+ \"checkAbilityInfo name : \" + data.name);\n ", "ARelease_0100\n* @tc.name: Releases the clien", "\n\n      expect(info.name).assertEqual(\"com.o", "rray = new Array({ \"name\": \"ActsDataAbilityH", "TS_Call_0100\n * @tc.name: call : Inserts a s", "TS_Call_0300\n * @tc.name: call : Updates dat", "nfo name : \" + data.name);\n      console.log", "o[i].processName == name) {\n                ", "teIdSync_0100\n* @tc.name: Updates the ID in ", "heckApplicationInfo name : \" + info.name);\n "], "files": ["FormFuzzArray.test.js", "getHapModuleInfoJsunit.test.ets", "FormsOneAndOneJsunit.test.js", "ActsGetWantAllTest.js", "ActsProcessManageJsTest.test.js", "getAbilityInfoJsunit2.test.ets", "FormFuzzString.test.js", "app.js", "MissionManagerTest.js", "getAbilityInfoJsunit.test.ets", "LockNew.js", "FormFuzzFunction.test.js", "getHapModuleInfoJsunit_app1.test.ets", "ActsDataAbilityJsTest.test.js", "DataUriUtilsJsSt.test.js", "FormFuzzNull.test.js", "ActsKillProcessTest.test.js", "FormFuzzNum.test.js", "FeatureAbilityJsunit.test.js", "FormsOneAndTwoJsunit.test.js", "FormFuzzUndefined.test.js", "FormFuzzObject.test.js", "FormFuzzBool.test.js", "FormsZeroAndOneJsunit.test.js", "ContextJsunit.test.js", "AbilityDisableTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "label", "api_method_all": "readonly label: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 102, "since": 7, "api_used": "\u662f", "lines": ["expect(typeof (info.label)).assertEqual(\"stri", ";\n      expect(data.labelId >0).assertTrue();", " \"checkAbilityInfo2 label : \" + data.label);\n", "+ \"checkAbilityInfo labelId : \" + data.labelI", ";\n      expect(data.labelId).assertEqual(0);\n", ";\n      expect(data.labelId > 0).assertTrue()", "expect(typeof (data.label)).assertEqual(\"stri", " labelId : \" + info.labelId);\n      console.l", "o2 label : \" + data.label);\n      console.log", "fo label : \" + info.label);\n      console.log", "expect(typeof (data.labelId)).assertEqual(\"nu", ";\n      expect(info.label).assertEqual(\"$stri", ";\n      expect(data.label).assertEqual(\"$stri", "expect(typeof (info.labelId)).assertEqual(\"st", "fo label : \" + data.label);\n      console.log", "\"checkHapModuleInfo labelId : \" + data.labelI", "heckApplicationInfo labelId : \" + info.labelI", "\"checkHapModuleInfo label : \" + data.label);\n", " labelId : \" + data.labelId);\n      console.l", "ect(typeof (info[i].label)).assertEqual(\"stri", "ect(typeof (data[i].label)).assertEqual(\"stri", "heckApplicationInfo label : \" + info.label);\n", " \"checkAbilityInfo2 labelId : \" + data.labelI", "+ \"checkAbilityInfo label : \" + data.label);\n"], "files": ["getAbilityInfoJsunit2.test.ets", "MangerAbilityJsunit.test.js", "LockNew.js", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "description", "api_method_all": "readonly description: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 128, "since": 7, "api_used": "\u662f", "lines": [";\n      expect(data.description).assertEqual(\"\");\n ", "expect(typeof (info.descriptionId)).assertEqual(\"nu", "\"checkHapModuleInfo descriptionId : \" + data.descri", "cription : \" + info.description);\n      console.log", "+ \"checkAbilityInfo descriptionId : \" + data.descri", "expect(typeof (data.descriptionId)).assertEqual(\"nu", "cription : \" + data.description);\n      console.log", "iptionId : \" + info.descriptionId);\n      console.l", ";\n      expect(data.descriptionId).assertEqual(0);\n", "ssertEqual(\"$string:description_mainability2\");\n   ", ";\n      expect(data.description).assertEqual(\"$stri", "\"checkHapModuleInfo description : \" + data.descript", "expect(typeof (info.description)).assertEqual(\"stri", "iptionId : \" + data.descriptionId);\n      console.l", ";\n      expect(info.description).assertEqual(\"$stri", ";\n      expect(info.descriptionId > 0).assertTrue()", "+ \"checkAbilityInfo description : \" + data.descript", ";\n      expect(data.descriptionId > 0).assertTrue()", "$string:mainability_description\");\n      expect(dat", "expect(typeof (data.description)).assertEqual(\"stri", "heckApplicationInfo description : \" + info.descript", " \"checkAbilityInfo2 descriptionId : \" + data.descri", "$string:mainability_description\");\n      expect(inf", "heckApplicationInfo descriptionId : \" + info.descri", " \"checkAbilityInfo2 description : \" + data.descript"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "FormsOneAndTwoJsunit.test.js", "FormsOneAndOneJsunit.test.js", "FormsZeroAndOneJsunit.test.js", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "icon", "api_method_all": "readonly icon: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 112, "since": 7, "api_used": "\u662f", "lines": ["+ \"checkAbilityInfo icon : \" + data.icon);\n ", "2 iconId : \" + data.iconId);\n      console.l", "\"checkHapModuleInfo icon : \" + data.icon);\n ", "o iconId : \" + info.iconId);\n      console.l", "+ \"checkAbilityInfo iconId : \" + data.iconId", ";\n      expect(data.iconId > 0).assertTrue()", ";\n      expect(data.iconId).assertEqual(0);\n", "assertEqual(\"$media:icon\");\n      expect(inf", "expect(typeof (data.iconId)).assertEqual(\"nu", "o iconId : \" + data.iconId);\n      console.l", "\"checkHapModuleInfo iconId : \" + data.iconId", "ect(typeof (data[i].iconPath)).assertEqual(\"", "heckApplicationInfo icon : \" + info.icon);\n ", "nfo icon : \" + info.icon);\n      console.log", "nfo icon : \" + data.icon);\n      console.log", "heckApplicationInfo iconId : \" + info.iconId", " \"checkAbilityInfo2 icon : \" + data.icon);\n ", "fo2 icon : \" + data.icon);\n      console.log", "expect(typeof (info.iconId)).assertEqual(\"st", ";\n      expect(data.icon).assertEqual(\"$medi", "expect(typeof (data.icon)).assertEqual(\"stri", "ect(typeof (info[i].iconPath)).assertEqual(\"", "expect(typeof (info.icon)).assertEqual(\"stri", ";\n      expect(info.icon).assertEqual(\"$medi", " \"checkAbilityInfo2 iconId : \" + data.iconId", "assertEqual(\"$media:icon\");\n      expect(dat"], "files": ["getAbilityInfoJsunit2.test.ets", "MangerAbilityJsunit.test.js", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "labelId", "api_method_all": "readonly labelId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 43, "since": 7, "api_used": "\u662f", "lines": ["heckApplicationInfo labelId : \" + info.labelId)", "\"labelId : \" + info.labelId);\n        console.l", "expect(typeof (data.labelId)).assertEqual(\"numb", ";\n      expect(data.labelId).assertEqual(0);\n  ", " labelId : \" + data.labelId);\n        console.l", "        expect(data.labelId > 0).assertTrue();\n", "expect(typeof (info.labelId)).assertEqual(\"stri", "+ \"checkAbilityInfo labelId : \" + data.labelId)", "g(\"checkAbilityInfo labelId : \" + data.labelId)", "\"checkHapModuleInfo labelId : \" + data.labelId)", " labelId : \" + info.labelId);\n      console.log", " \"checkAbilityInfo2 labelId : \" + data.labelId)", "       console.log(\"labelId : \" + info.labelId)", ";\n      expect(data.labelId >0).assertTrue();\n ", " labelId : \" + data.labelId);\n      console.log", ";\n      expect(data.labelId > 0).assertTrue();\n", "        expect(info.labelId).assertEqual(0);  /", " labelId : \" + data.labelId);\n          console", " labelId : \" + info.labelId);\n          console", "        expect(data.labelId).assertEqual(0);\n  "], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "descriptionId", "api_method_all": "readonly descriptionId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 46, "since": 7, "api_used": "\u662f", "lines": [" \"checkAbilityInfo2 descriptionId : \" + data.descript", "        expect(data.descriptionId > 0).assertTrue();\n", "iptionId : \" + info.descriptionId);\n      console.log", "        expect(info.descriptionId).assertEqual(0);   ", "iptionId : \" + info.descriptionId);\n        console.l", "expect(typeof (info.descriptionId)).assertEqual(\"numb", "       console.log(\"descriptionId : \" + info.descript", "iptionId : \" + data.descriptionId);\n      console.log", "iptionId : \" + data.descriptionId);\n          console", "g(\"checkAbilityInfo descriptionId : \" + data.descript", "heckApplicationInfo descriptionId : \" + info.descript", "expect(typeof (data.descriptionId)).assertEqual(\"numb", ";\n      expect(data.descriptionId > 0).assertTrue();\n", "        expect(data.descriptionId).assertEqual(0);\n  ", "+ \"checkAbilityInfo descriptionId : \" + data.descript", ";\n      expect(data.descriptionId).assertEqual(0);\n  ", ";\n      expect(info.descriptionId > 0).assertTrue();\n", "\"checkHapModuleInfo descriptionId : \" + data.descript", "iptionId : \" + info.descriptionId);\n          console", "        expect(info.descriptionId > 0).assertTrue();\n", "iptionId : \" + data.descriptionId);\n        console.l"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "iconId", "api_method_all": "readonly iconId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 43, "since": 7, "api_used": "\u662f", "lines": ["heckApplicationInfo iconId : \" + info.iconId);", "o iconId : \" + data.iconId);\n      console.log", "o iconId : \" + data.iconId);\n        console.l", "o iconId : \" + info.iconId);\n      console.log", "+ \"checkAbilityInfo iconId : \" + data.iconId);", "        expect(data.iconId > 0).assertTrue();\n", "o iconId : \" + info.iconId);\n          console", "        expect(info.iconId).assertEqual(0);   ", ";\n      expect(data.iconId).assertEqual(0);\n  ", "expect(typeof (info.iconId)).assertEqual(\"stri", "g(\"checkAbilityInfo iconId : \" + data.iconId);", "(\"iconId : \" + info.iconId);\n        console.l", "o iconId : \" + data.iconId);\n          console", ";\n      expect(data.iconId > 0).assertTrue();\n", "       console.log(\"iconId : \" + info.iconId);", " \"checkAbilityInfo2 iconId : \" + data.iconId);", "expect(typeof (data.iconId)).assertEqual(\"numb", "\"checkHapModuleInfo iconId : \" + data.iconId);", "2 iconId : \" + data.iconId);\n      console.log", "        expect(data.iconId).assertEqual(0);\n  "], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "moduleName", "api_method_all": "readonly moduleName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 586, "since": 7, "api_used": "\u662f", "lines": ["info.moduleInfos[0].moduleName).assertEqual(\"myapp", "uleInfos[\" + i + \"].moduleName : \" + info.moduleIn", "duleName : \" + data.moduleName);\n          console", "info.moduleInfos[0].moduleName == \"myapplication1\"", "info.moduleInfos[1].moduleName).assertEqual(\"entry", ";\n      expect(data.moduleName).assertEqual(\"entry", "info.moduleInfos[i].moduleName);\n        console.l", "info.moduleInfos[0].moduleName).assertEqual(\"entry", "info.moduleInfos[2].moduleName).assertEqual(\"entry", "\"checkHapModuleInfo moduleName : \" + data.moduleNa", "uleInfos[\" + i + \"].moduleName : \"\n        + info.", "duleName : \" + data.moduleName);\n      console.log", "        expect(data.moduleName).assertEqual(\"myapp", " \"checkAbilityInfo2 moduleName : \" + data.moduleNa", "expect(typeof (data.moduleName)).assertEqual(\"stri", "info.moduleInfos[i].moduleName);\n            conso", "info.moduleInfos[1].moduleName).assertEqual(\"myapp", "+ \"checkAbilityInfo moduleName : \" + data.moduleNa"], "files": ["getAbilityInfoJsunit2.test.ets", "FormFuzzArray.test.js", "getHapModuleInfoJsunit.test.ets", "FormFuzzFunction.test.js", "FormFuzzString.test.js", "FormFuzzNum.test.js", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "FormsOneAndTwoJsunit.test.js", "FormFuzzUndefined.test.js", "FormFuzzObject.test.js", "FormFuzzBool.test.js", "FormFuzzNull.test.js", "getAbilityInfoJsunit.test.ets", "AbilityDisableTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "process", "api_method_all": "readonly process: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 195, "since": 7, "api_used": "\u662f", "lines": ["        expect(data.process).assertEqual(\"\");\n ", ";\n      expect(info.process).assertEqual(\"\");\n ", "     expect(info[i].processName.length).assertL", " process : \" + info.process);\n          console", "+ \"checkAbilityInfo process : \" + data.process)", " process : \" + data.process);\n      console.log", "expect(typeof (info.process)).assertEqual(\"stri", ";\n      expect(data.process).assertEqual(\"\");\n ", "heckApplicationInfo process : \" + info.process)", "com.example.actskillprocesswithaccountcloseapi7", " process : \" + data.process);\n          console", "ect(typeof (info[i].processName)).assertEqual(\"", " \"checkAbilityInfo2 process : \" + data.process)", "expect(typeof (data.process)).assertEqual(\"stri", "        expect(info.process).assertEqual(\"\");\n ", " process : \" + info.process);\n      console.log"], "files": ["getAbilityInfoJsunit2.test.ets", "MangerAbilityJsunit.test.js", "Getactive.test.js", "getHapModuleInfoJsunit.test.ets", "startFULL.test.js", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "ContextJsunit.test.js", "ActsKillProcessTest.test.js", "getAbilityInfoJsunit.test.ets", "ActsProcessManageJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "targetAbility", "api_method_all": "readonly targetAbility: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": [" \"checkAbilityInfo2 targetAbility : \" + data.targetAb", "tAbility : \" + data.targetAbility);\n          console", "expect(typeof (data.targetAbility)).assertEqual(\"stri", "        expect(data.targetAbility).assertEqual(\"\");\n ", ";\n      expect(data.targetAbility).assertEqual(\"\");\n ", "tAbility : \" + data.targetAbility);\n      console.log", "+ \"checkAbilityInfo targetAbility : \" + data.targetAb", "tAbility : \" + data.targetAbility);\n        console.l", "g(\"checkAbilityInfo targetAbility : \" + data.targetAb"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "backgroundModes", "api_method_all": "readonly backgroundModes: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["g(\"checkAbilityInfo backgroundModes : \" + data.backgrou", ";\n      expect(data.backgroundModes).assertEqual(0);\n  ", "undModes : \" + data.backgroundModes);\n        console.l", "undModes : \" + data.backgroundModes);\n          console", "undModes : \" + data.backgroundModes);\n      console.log", "+ \"checkAbilityInfo backgroundModes : \" + data.backgrou", "expect(typeof (data.backgroundModes)).assertEqual(\"numb", " \"checkAbilityInfo2 backgroundModes : \" + data.backgrou", "        expect(data.backgroundModes).assertEqual(0);\n  "], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "isVisible", "api_method_all": "readonly isVisible: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": [";\n      expect(data.isVisible).assertEqual(false)", "sVisible : \" + data.isVisible);\n      console.log", "g(\"checkAbilityInfo isVisible : \" + data.isVisibl", "expect(typeof (data.isVisible)).assertEqual(\"bool", " \"checkAbilityInfo2 isVisible : \" + data.isVisibl", ";\n      expect(data.isVisible).assertEqual(true);", "+ \"checkAbilityInfo isVisible : \" + data.isVisibl", "        expect(data.isVisible).assertEqual(true);", "sVisible : \" + data.isVisible);\n          console", "sVisible : \" + data.isVisible);\n        console.l"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "formEnabled", "api_method_all": "readonly formEnabled: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["        expect(data.formEnabled).assertEqual(false)", "mEnabled : \" + data.formEnabled);\n\n        console.", "g(\"checkAbilityInfo formEnabled : \" + data.formEnab", ";\n      expect(data.formEnabled).assertEqual(false)", "+ \"checkAbilityInfo formEnabled : \" + data.formEnab", "mEnabled : \" + data.formEnabled);\n      console.log", " \"checkAbilityInfo2 formEnabled : \" + data.formEnab", "mEnabled : \" + data.formEnabled);\n          console", "expect(typeof (data.formEnabled)).assertEqual(\"bool"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "type", "api_method_all": "readonly type: bundle.AbilityType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2091, "since": 7, "api_used": "\u662f", "lines": ["             expect(typeof (data[i].want.dev", "             expect(typeof (info[i].label)).", "             expect(typeof (info[i].want.abi", "             expect(typeof (info[i].want)).a", "             expect(typeof (info[i].processN", "             expect(typeof (data[i].iconPath", "             expect(typeof (info[i].missionI", "             expect(typeof (info[i].want.bun", "             expect(typeof (info[i].want.dev", "             expect(typeof (info[i].uid)).as", "ef = Object.getPrototypeOf(global) || global", "             expect(typeof (data[i].want.bun", "             expect(typeof (info[i].pid)).as", "             expect(typeof (data[i].want.abi", "             expect(typeof (data[i].missionI", "             expect(typeof (info)).assertEqu", "             expect(typeof (info[i].iconPath", "             expect(typeof (data[i].want)).a", "             expect(typeof (data[i].label))."], "files": ["FormFuzzArray.test.js", "getHapModuleInfoJsunit.test.ets", "ContextJsunit.test.ets", "FormsOneAndOneJsunit.test.js", "ActsGetWantAllTest.js", "getAbilityInfoJsunit2.test.ets", "FormFuzzString.test.js", "app.js", "getAbilityInfoJsunit.test.ets", "ApplicationInfoJsunit.test.js", "getApplicationContextJsunit.test.ets", "MangerAbilityJsunit.test.js", "FormFuzzFunction.test.js", "startFULL.test.js", "getHapModuleInfoJsunit_app1.test.ets", "ActsDataAbilityJsTest.test.js", "DataUriUtilsJsSt.test.js", "FormFuzzNull.test.js", "ActsKillProcessTest.test.js", "index.js", "index.ets", "addContextAndAbilityJsunit.test.ets", "FormFuzzNum.test.js", "FeatureAbilityJsunit.test.js", "FormsOneAndTwoJsunit.test.js", "FormFuzzUndefined.test.js", "FormFuzzObject.test.js", "FormFuzzBool.test.js", "FormsZeroAndOneJsunit.test.js", "ContextJsunit.test.js", "AbilityDisableTest.js", "getAppVersionInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "subType", "api_method_all": "readonly subType: bundle.AbilitySubType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["+ \"checkAbilityInfo subType : \" + data.subType)", " \"checkAbilityInfo2 subType : \" + data.subType)", ";\n      expect(data.subType).assertEqual(0);\n\n ", "g(\"checkAbilityInfo subType : \" + data.subType)", ";\n      expect(data.subType).assertEqual(0);\n  ", " subType : \" + data.subType);\n        console.l", " subType : \" + data.subType);\n\n      expect(typ", "        expect(data.subType).assertEqual(0);\n  ", "expect(typeof (data.subType)).assertEqual(\"numb", " subType : \" + data.subType);\n          expect(", " subType : \" + data.subType);\n      expect(type"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "orientation", "api_method_all": "readonly orientation: bundle.DisplayOrientation", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["+ \"checkAbilityInfo orientation : \" + data.orientat", "entation : \" + data.orientation);\n          console", " \"checkAbilityInfo2 orientation : \" + data.orientat", "entation : \" + data.orientation);\n      console.log", "        expect(data.orientation).assertEqual(0);\n  ", "expect(typeof (data.orientation)).assertEqual(\"numb", "g(\"checkAbilityInfo orientation : \" + data.orientat", ";\n      expect(data.orientation).assertEqual(0);\n  ", "entation : \" + data.orientation);\n        console.l"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "launchMode", "api_method_all": "readonly launchMode: bundle.LaunchMode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["+ \"checkAbilityInfo launchMode : \" + data.launchMo", "expect(typeof (data.launchMode)).assertEqual(\"numb", "        expect(data.launchMode).assertEqual(1);\n  ", "        expect(data.launchMode).assertEqual(0);\n\n ", "unchMode : \" + data.launchMode);\n          console", "unchMode : \" + data.launchMode);\n      console.log", "unchMode : \" + data.launchMode);\n        console.l", " \"checkAbilityInfo2 launchMode : \" + data.launchMo", ";\n      expect(data.launchMode).assertEqual(1);\n  ", "g(\"checkAbilityInfo launchMode : \" + data.launchMo"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "permissions", "api_method_all": "readonly permissions: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 58, "since": 7, "api_used": "\u662f", "lines": ["+ k + \"] : \" + info.permissions[k]);\n          }\n  ", "s length : \" + info.permissions.length);\n        fo", "  console.log(\"info.permissions[\" + j + \"] : \" + in", "+ j + \"] : \" + info.permissions[j]);\n        }\n    ", "etAbilityInfo2 data.permissions[\" + j + \"] : \" + da", " \"checkAbilityInfo2 permissions length : \" + data.p", "s length : \" + info.permissions.length);\n      for ", "+ \"checkAbilityInfo permissions length : \" + data.p", "+ j + \"] : \" + data.permissions[j]);\n          }\n  ", "       console.log(\"permissions length : \" + info.p", "var j = 0; j < data.permissions.length; j++) {\n    ", "pplicationInfo info.permissions[\" + k + \"] : \" + in", "s length : \" + info.permissions.length);\n          ", "+ j + \"] : \" + data.permissions[j]);\n      }\n      ", "(Array.isArray(data.permissions)).assertEqual(true)", "c: Requests certain permissions from the system.\n  ", "var k = 0; k < info.permissions.length; k++) {\n    ", "(Array.isArray(info.permissions)).assertEqual(true)", " : Requests certain permissions from the system.\n  ", "heckApplicationInfo permissions length : \" + info.p", "s length : \" + data.permissions.length);\n      for ", "+ k + \"] : \" + info.permissions[k]);\n      }\n      ", "var j = 0; j < info.permissions.length; j++) {\n    ", "s length : \" + data.permissions.length);\n          ", "getAbilityInfo data.permissions[\" + j + \"] : \" + da", "ission: The list of permissions to be requested.\n  "], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "ContextJsunit.test.js", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "deviceTypes", "api_method_all": "readonly deviceTypes: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 56, "since": 7, "api_used": "\u662f", "lines": ["(Array.isArray(data.deviceTypes)).assertEqual(true)", "checkHapModuleInfo  deviceTypes length : \" + data.d", "tHapModuleInfo data.deviceTypes[\" + k + \"] : \" + da", "etAbilityInfo2 data.deviceTypes[\" + k + \"] : \" + da", "g(\"checkAbilityInfo deviceTypes length : \" + data.d", ";\n      expect(data.deviceTypes[0]).assertEqual(\"ph", "+ k + \"] : \" + data.deviceTypes[k]);\n      }\n      ", "s length : \" + data.deviceTypes.length);\n        fo", "var k = 0; k < data.deviceTypes.length; k++) {\n    ", "s length : \" + data.deviceTypes.length);\n          ", "s length : \" + data.deviceTypes.length);\n      for ", "+ j + \"] : \" + data.deviceTypes[j]);\n        }\n    ", "        expect(data.deviceTypes[0]).assertEqual(\"ph", "var j = 0; j < data.deviceTypes.length; j++) {\n    ", "+ \"checkAbilityInfo deviceTypes length : \" + data.d", "+ k + \"] : \" + data.deviceTypes[k]);\n          }\n  ", " \"checkAbilityInfo2 deviceTypes length : \" + data.d", "getAbilityInfo data.deviceTypes[\" + k + \"] : \" + da", "getAbilityInfo data.deviceTypes[\" + j + \"] : \" + da"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "deviceCapabilities", "api_method_all": "readonly deviceCapabilities: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["+ j + \"] : \" + data.deviceCapabilities[j]);\n        }\n\n   ", "g(\"checkAbilityInfo deviceCapabilities length : \" + data.d", "+ i + \"] : \" + data.deviceCapabilities[i]);\n      }\n      ", "(Array.isArray(data.deviceCapabilities)).assertEqual(true)", "getAbilityInfo data.deviceCapabilities[\" + i + \"] : \" + da", "        expect(data.deviceCapabilities[0]).assertEqual(\"sc", "        expect(data.deviceCapabilities[1]).assertEqual(\"au", "s length : \" + data.deviceCapabilities.length);\n        fo", "+ i + \"] : \" + data.deviceCapabilities[i]);\n          }\n  ", "s length : \" + data.deviceCapabilities.length);\n          ", "getAbilityInfo data.deviceCapabilities[\" + j + \"] : \" + da", "+ \"checkAbilityInfo deviceCapabilities length : \" + data.d", " \"checkAbilityInfo2 deviceCapabilities length : \" + data.d", "s length : \" + data.deviceCapabilities.length);\n      for ", "var i = 0; i < data.deviceCapabilities.length; i++) {\n    ", "var j = 0; j < data.deviceCapabilities.length; j++) {\n    ", "etAbilityInfo2 data.deviceCapabilities[\" + i + \"] : \" + da"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "readPermission", "api_method_all": "readonly readPermission: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["expect(typeof (data.readPermission)).assertEqual(\"stri", "+ \"checkAbilityInfo readPermission : \" + data.readPerm", "rmission : \" + data.readPermission);\n          console", "rmission : \" + data.readPermission);\n      console.log", " \"checkAbilityInfo2 readPermission : \" + data.readPerm", "AbilityInfo promise readPermission : \" + data.readPerm", "        expect(data.readPermission).assertEqual(\"\");\n ", ";\n      expect(data.readPermission).assertEqual(\"\");\n ", "rmission : \" + data.readPermission);\n        console.l"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "writePermission", "api_method_all": "readonly writePermission: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": [" \"checkAbilityInfo2 writePermission : \" + data.writePer", "        expect(data.writePermission).assertEqual(\"\");\n ", "g(\"checkAbilityInfo writePermission : \" + data.writePer", "+ \"checkAbilityInfo writePermission : \" + data.writePer", "rmission : \" + data.writePermission);\n        console.l", "rmission : \" + data.writePermission);\n          console", "rmission : \" + data.writePermission);\n      console.log", ";\n      expect(data.writePermission).assertEqual(\"\");\n ", "expect(typeof (data.writePermission)).assertEqual(\"stri"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "applicationInfo", "api_method_all": "readonly applicationInfo: ApplicationInfo", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["expect(typeof (data.applicationInfo)).assertEqual(\"obje", "ilityByWant_0300 getapplicationInfo errCode : '\n       ", "cationInfo(msg,data.applicationInfo);\n          expect(", "ationInfo2(msg,data.applicationInfo);\n      expect(data", "ationInfo(msg, data.applicationInfo);\n      expect(data"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "getAbilityInfoJsunit.test.ets", "AbilityDisableTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "uri", "api_method_all": "readonly uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 209, "since": 7, "api_used": "\u662f", "lines": ["ataAbilityResult[i].uri).assertEqual(dataAb", "dataInfo[i].ability.uri).assertEqual(undefi", "stemappamulti';\nvar uriSystemB = '/data/acc", " \"checkAbilityInfo2 uri : \" + data.uri);\n  ", "ataAbilityResult[i].uri)\n                  ", "+ \"checkAbilityInfo uri : \" + data.uri);\n  ", ".pmsystemappb';\nvar uriVendorA = '/data/acc", "AppDataPathFileNums(uri, callBack) {\n      ", "                    uri: \"key={true,true,fa", "Info uri : \" + data.uri);\n      console.log", "expect(typeof (data.uri)).assertEqual(\"stri", "     fileio.opendir(uriSystemAMulti).then(f", "        expect(data.uri).assertEqual(\"\");\n ", ";\n      expect(data.uri).assertEqual(\"\");\n ", "dorABundleName;\nvar uriSystemA = '/data/acc", "                    uri: dataAbilityUri,\n  ", "     fileio.opendir(uriSystemA).then(functi", "Info uri : \" + data.uri);\n          console", "nfo2 uri : \" + data.uri);\n      console.log", ".pmsystemappa';\nvar uriSystemAMulti = '/dat", "for data[' + i + '].uri ====>: '\n          ", "               uri: uri,\n                su", "t({\n                uri: uri,\n             "], "files": ["getAbilityInfoJsunit2.test.ets", "MangerAbilityJsunit.test.js", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "ActsDataAbilityJsTest.test.js", "app.js", "ActsGetWantAllTest.js", "index.js", "getAbilityInfoJsunit.test.ets", "ApplicationInfoJsunit.test.js", "second.js", "AbilityDisableTest.js", "ActsProcessManageJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "metaData", "api_method_all": "readonly metaData: Array<CustomizeData>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 8, "api_used": "\u662f", "lines": ["    expect(dataB[0].metaData.customizeData[0].na", "     expect(data[i].metaData.customizeData[0].na", " expect(datainfo[i].metaData.customizeData[0].va", " expect(datainfo[i].metaData.customizeData[0].na", "    expect(dataB[0].metaData.customizeData[0].va", "     expect(data[i].metaData.customizeData[0].va"], "files": ["FormsZeroAndOneJsunit.test.js", "FormsOneAndOneJsunit.test.js", "FormsOneAndTwoJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "metadata", "api_method_all": "readonly metadata: Array<Metadata>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityInfo", "api_method_name": "enabled", "api_method_all": "readonly enabled: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 0, "api_used": "\u662f", "lines": ["        expect(info.enabled).assertEqual(true);", "expect(typeof (info.enabled)).assertEqual(\"bool", " enabled : \" + info.enabled);\n      console.log", " enabled : \" + info.enabled);\n          console", "       console.log(\"enabled : \" + info.enabled)", "\"enabled : \" + info.enabled);\n        console.l", "heckApplicationInfo enabled : \" + info.enabled)", ";\n      expect(info.enabled).assertEqual(true);"], "files": ["getAbilityInfoJsunit.test.ets", "getAbilityInfoJsunit2.test.ets", "FeatureAbilityJsunit.test.js", "getHapModuleInfoJsunit_app1.test.ets"], "is_white": " ", "desc": " "}]}