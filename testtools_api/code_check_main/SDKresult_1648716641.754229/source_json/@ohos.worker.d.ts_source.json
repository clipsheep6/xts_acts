{"subsystem_ch": "\u8bed\u8a00\u7f16\u8bd1\u5668\u8fd0\u884c\u65f6\u5b50\u7cfb\u7edf", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.worker", "api": [{"api_class_name": "WorkerOptions", "api_method_all": "export interface WorkerOptions {\r\n  \r\n  type?: \"classic\" | \"module\";\r\n\r\n  \r\n  name?: string;\r\n\r\n  \r\n  shared?: boolean;\r\n}", "api_method_name": "WorkerOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WorkerOptions", "api_method_name": "type", "api_method_all": "type?: \"classic\" | \"module\"", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 456, "since": 7, "api_used": "\u662f", "lines": ["   '\"_elements\":[{\"_type\":\"text\",'+\n        ", "ts\":['+\n        '{\"_type\":\"element\",'+\n     ", "   '\"_elements\":[{\"_type\":\"element\",'+\n     ", "= '{\"_elements\":[{\"_type\":\"element\",'+\n     ", "\"}]},'+\n        '{\"_type\":\"element\",'+\n     "], "files": ["worker_012.js", "worker_014.js", "worker_009.js", "worker_013.js", "worker_0151.js", "convertxml.test.js", "util.test.js", "worker_010.js", "uri.test.js", "xml.test.js", "worker_015.js", "worker.js", "worker_0121.js", "Worker.test.js", "worker_011.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WorkerOptions", "api_method_name": "name", "api_method_all": "name?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1240, "since": 7, "api_used": "\u662f", "lines": ["ETIME_026\n    * @tc.name format the hour in ", "ETIME_019\n    * @tc.name format the timerang", "ist();\n    let a = {name: \"lala\", age: \"13\u5c81\"", " {\n      expect(err.name).assertEqual(\"Range", "ETIME_022\n    * @tc.name format the America/", "ETIME_025\n    * @tc.name format the weekday\n", "ist();\n    let a = {name: \"lala\", age: \"13\"}", "ack();\n    let a = {name: \"lala\", age: \"13\u5c81\"", "ETIME_020\n    * @tc.name format the hour&min", "ETIME_027\n    * @tc.name format the hour in ", "que();\n    let a = {name: \"lala\", age: \"15\"}", "ETIME_023\n    * @tc.name format the America/", "sh(5);\n    let c = {name: \"lili\", age: \"13\"}", "ETIME_021\n    * @tc.name format the timeZone", "ETIME_024\n    * @tc.name format the year\n   ", " {\n      expect(err.name).assertEqual(\"TypeE", "tor();\n    let a = {name: \"lala\", age: \"13\u5c81\""], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "Queue.test.js", "convertxml.test.js", "url.test.js", "LightWeightMap.test.js", "LightWeightSet.test.js", "HashMap.test.js", "intlDateTimeFormat_test.js", "uri.test.js", "Worker.test.js", "worker_005.js", "TreeSet.test.js", "Process.test.js", "PlainArray.test.js", "TreeMap.test.js", "worker.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WorkerOptions", "api_method_name": "shared", "api_method_all": "shared?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["s of arraybuffer or sharedarraybuffer type.\n  ", "ame:\"third worker\", shared:\"true\"})\n        le", "me:\"second worker\", shared:\"false\"})\n        l", "me:\"second worker\", shared:\"False\"})\n        l", "ed value is of type sharedarraybuffer.\n     * "], "files": ["util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Event", "api_method_all": "export interface Event {\r\n  \r\n  readonly type: string;\r\n\r\n  \r\n  readonly timeStamp: number;\r\n}", "api_method_name": "Event", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 51, "since": 7, "api_used": "\u662f", "lines": ["\n        ss.dispatchEvent({type: \"zhangsan\"})", "         ss.dispatchEvent({type: \"zhangsan\"})", "   })\n        ss.addEventListener(\"lisi\", ()=", "k\n    it('worker_addEventListener_test_002', ", "k\n    it('worker_addEventListener_test_003', ", "\n        ss.dispatchEvent({type: \"lisi\"})\n\n  ", "           ss.removeEventListener(\"zhangsan\")", ")\n\n        ss.removeEventListener(\"zhangsan\")", "    }\n        ss.addEventListener(\"zhangsan\",", "\n        ss.dispatchEvent({type: \"lisi\"})\n   ", "s = 0\n        ss.addEventListener(\"lisi\", ()=", " // check worker addEventListener function is", "k\n    it('worker_addEventListener_test_001', ", " check worker removeEventListener function is"], "files": ["Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Event", "api_method_name": "type", "api_method_all": "readonly type: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 456, "since": 7, "api_used": "\u662f", "lines": ["   '\"_elements\":[{\"_type\":\"text\",'+\n        ", "ts\":['+\n        '{\"_type\":\"element\",'+\n     ", "   '\"_elements\":[{\"_type\":\"element\",'+\n     ", "= '{\"_elements\":[{\"_type\":\"element\",'+\n     ", "\"}]},'+\n        '{\"_type\":\"element\",'+\n     "], "files": ["worker_012.js", "worker_014.js", "worker_009.js", "worker_013.js", "worker_0151.js", "convertxml.test.js", "util.test.js", "worker_010.js", "uri.test.js", "xml.test.js", "worker_015.js", "worker.js", "worker_0121.js", "Worker.test.js", "worker_011.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Event", "api_method_name": "timeStamp", "api_method_all": "readonly timeStamp: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ErrorEvent", "api_method_all": "export interface ErrorEvent extends Event {\r\n  \r\n  readonly message: string;\r\n\r\n  \r\n  readonly filename: string;\r\n\r\n  \r\n  readonly lineno: number;\r\n\r\n  \r\n  readonly colno: number;\r\n\r\n  \r\n  readonly error: Object;\r\n}", "api_method_name": "ErrorEvent", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ErrorEvent", "api_method_name": "message", "api_method_all": "readonly message: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 150, "since": 7, "api_used": "\u662f", "lines": ["\n        expect(err.message).assertEqual(\"remov", "or\");\n      if (err.message != \"the fromIndex c", "\n        expect(err.message).assertEqual(\"fromI", ");\n      expect(err.message).assertEqual(\"the f", "\n        expect(err.message).assertEqual(\"Array", "\n        expect(err.message).assertEqual(\"the f", ");\n      expect(err.message).assertEqual(\"the i", ");\n      expect(err.message).assertEqual(\"the t", "\n        expect(err.message).assertEqual(\"the i", "\n        expect(err.message).assertEqual(\"index", ");\n      expect(err.message).assertEqual(\"canno", "or\");\n      if (err.message != \"index is not in", "or\");\n      if (err.message != \"the fromIndex o", "or\");\n      if (err.message != \"the index is ou", ");\n      expect(err.message).assertEqual(\"Canno", "\n        expect(err.message).assertEqual(\"newCa"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "worker_010.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "worker_0121.js", "Queue.test.js", "worker_0151.js", "worker_0091.js", "worker_0131.js", "worker_003.js", "LightWeightMap.test.js", "worker_0141.js", "worker_011.js", "worker_006.js", "worker_0111.js", "worker_012.js", "LightWeightSet.test.js", "worker_008.js", "worker_009.js", "worker_013.js", "worker_004.js", "HashMap.test.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "TreeSet.test.js", "worker_0152.js", "PlainArray.test.js", "TreeMap.test.js", "worker_007.js", "worker_015.js", "worker.js", "worker_002.js", "worker_0122.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ErrorEvent", "api_method_name": "filename", "api_method_all": "readonly filename: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["+ data.message + \", filename = \" + data.filename", "filename = \" + data.filename + \", colno = \" + da"], "files": ["worker.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ErrorEvent", "api_method_name": "lineno", "api_method_all": "readonly lineno: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["js onerror \" + data.lineno + \", msg = \" + data"], "files": ["worker.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ErrorEvent", "api_method_name": "colno", "api_method_all": "readonly colno: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["\", colno = \" + data.colno);\n}", " data.filename + \", colno = \" + data.colno);\n"], "files": ["worker.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ErrorEvent", "api_method_name": "error", "api_method_all": "readonly error: Object", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 46, "since": 7, "api_used": "\u662f", "lines": [": Returns `true` if error mode is \"fatal\", an", "}).then(undefined, (error) => {\n        })\n  ", " worker.js onmessageerror\");\n}\n\n// js executi", "it('worker_onmessageerror_test_002', 0, async", "check worker handle error is ok\n    it('worke", "parentPort.onmessageerror = function() {\n    ", "ocess.runCmd('echo \"error\" 1>&2')\n        chi", "\n}\n\n// js execution error\nparentPort.onerror ", "ual('Unknown system error 10');\n    })\n\n    \n", " error\nparentPort.onerror = function(data) {\n", " entered is of type error.\n     * @tc.require", "reak;\n        case \"error\":\n            throw", "false\n\n        ss.onerror = function (e) {\n  ", "ual('Unknown system error 9');\n    })\n\n    \n ", "  // check onmessageerror is ok\n    it('worke", "it('worker_onmessageerror_test_001', 0, async", "\n// Deserialization error\nparentPort.onmessag", "ction following the error-first callback styl", "ollowing the common error-first callback styl", "ual('Unknown system error 555');\n    })\n\n    ", "        ss.onmessageerror = function (e) {\n  ", "('callback with the error.');\n        const s", "ual('Unknown system error 0');\n    })\n\n    \n ", "orker:: worker.js onerror \" + data.lineno + \"", "    }\n\n        ss.onerror = function(ee) {\n  "], "files": ["worker.js", "util.test.js", "Worker.test.js", "Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MessageEvent", "api_method_all": "export interface MessageEvent<T> extends Event {\r\n  \r\n  readonly data: T;\r\n}", "api_method_name": "MessageEvent", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MessageEvent", "api_method_name": "data", "api_method_all": "readonly data: T", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 123, "since": 7, "api_used": "\u662f", "lines": ["ements\":[{\"_type\":\"cdata\",\"_cdata\":\"'+\n     ", "rker.js onerror \" + data.lineno + \", msg = \"", "neno + \", msg = \" + data.message + \", filena", "me + \", colno = \" + data.colno);\n}", " receive data \" + e.data);\n    let data = e.", "nction(e) {\n    let data = e.data;\n    conso", "' data\"},{\"_type\":\"cdata\",\"_cdata\":\"< '+\n   ", "er:: worker receive data \" + e.data);\n    le", ");\n    let data = e.data + \" worker\";\n    pa", "\n        '\"_type\":\"cdata\"},'+\n        '{\"_ty", "ceive data \" + data.data);\n            paren", "Message(data, [data.data]);\n            cons", "t = process.chdir('/data')\n        let resul", "ad receive data \" + data.data);\n            ", "t = proc.isExternal(data);\n        expect(re", "rker thread receive data \" + data.data);\n   ", "xport default {\n    data: {\n        title: '", ".onerror = function(data) {\n    console.info", "xml = '<![CDATA[ \\t data]]><![CDATA[< > \" an", "{\"_type\":\"cdata\",\"_cdata\":\"'+\n        ' \\t'+", " + e.data);\n    let data = e.data + \" worker", " {\n    let data = e.data;\n    console.info(\"", "{\"_type\":\"cdata\",\"_cdata\":\"< '+\n        '> '", "ult1).assertEqual('/data')\n    })\n\n    /**\n ", "orker thread worker data is \" + data.data);\n", "+ \", filename = \" + data.filename + \", colno", "a.data);\n    switch(data.type) {\n        cas", ".postMessage(data, [data.data]);\n           ", "entPort.postMessage(data);\n            conso", ", {compact: false, cdataKey: \"123\"})\n       ", "   ' \\t'+\n        ' data\"},{\"_type\":\"cdata\",", "er data is \" + data.data);\n    switch(data.t", "entPort.postMessage(data, [data.data]);\n    ", " worker data is \" + data.data);\n    switch(d", "xport default {\n    data: {\n        title: \"", "es();\n        const data = util.createExtern", "ffer length is  \" + data.data.byteLength);\n ", "length is  \" + data.data.byteLength);\n      "], "files": ["util.test.js", "worker_010.js", "worker_0121.js", "worker_0151.js", "worker_0131.js", "worker_003.js", "convertxml.test.js", "worker_0141.js", "worker_011.js", "worker_012.js", "worker_009.js", "worker_013.js", "worker_004.js", "index.js", "second.js", "Worker.test.js", "worker_0101.js", "worker_014.js", "worker_0152.js", "Process.test.js", "worker_015.js", "worker.js", "worker_002.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PostMessageOptions", "api_method_all": "export interface PostMessageOptions {\r\n  \r\n  transfer?: Object[];\r\n}", "api_method_name": "PostMessageOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PostMessageOptions", "api_method_name": "transfer", "api_method_all": "transfer?: Object[]", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["    // check worker transfer buffer is ok\n    it"], "files": ["Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EventListener", "api_method_all": "export interface EventListener {\r\n  \r\n  (evt: Event): void | Promise<void>;\r\n}", "api_method_name": "EventListener", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["   })\n        ss.addEventListener(\"lisi\", ()=>{\n     ", "k\n    it('worker_addEventListener_test_003', 0, async", " check worker removeEventListener function is ok\n    ", " // check worker addEventListener function is ok\n    ", "k\n    it('worker_addEventListener_test_001', 0, async", "k\n    it('worker_addEventListener_test_002', 0, async", "    }\n        ss.addEventListener(\"zhangsan\", ()=>{\n ", "s = 0\n        ss.addEventListener(\"lisi\", ()=>{\n     ", "           ss.removeEventListener(\"zhangsan\")\n       ", ")\n\n        ss.removeEventListener(\"zhangsan\")\n\n      "], "files": ["Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EventListener", "api_method_name": "evt", "api_method_all": "(evt: Event): void | Promise<void>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "EventTarget", "api_method_all": "export interface EventTarget {\r\n  \r\n  addEventListener(\r\n    type: string,\r\n    listener: EventListener\r\n  ): void;\r\n\r\n  \r\n  dispatchEvent(event: Event): boolean;\r\n\r\n  \r\n  removeEventListener(\r\n    type: string,\r\n    callback?: EventListener\r\n  ): void;\r\n\r\n  \r\n  removeAllListener(): void;\r\n}", "api_method_name": "EventTarget", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "EventTarget", "api_method_name": "addEventListener", "api_method_all": "addEventListener(\r\n    type: string,\r\n    listener: EventListener\r\n  ): void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["s ok\n    it('worker_addEventListener_test_003', 0, async", "      })\n        ss.addEventListener(\"lisi\", ()=>{\n     ", "       }\n        ss.addEventListener(\"zhangsan\", ()=>{\n ", "s ok\n    it('worker_addEventListener_test_002', 0, async", "s ok\n    it('worker_addEventListener_test_001', 0, async", "imes = 0\n        ss.addEventListener(\"lisi\", ()=>{\n     ", "    // check worker addEventListener function is ok\n    "], "files": ["Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EventTarget", "api_method_name": "dispatchEvent", "api_method_all": "dispatchEvent(event: Event): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 33, "since": 7, "api_used": "\u662f", "lines": ["ngsan\"})\n        ss.dispatchEvent({type: \"lisi\"})\n\n  ", "ngsan\")\n\n        ss.dispatchEvent({type: \"zhangsan\"})", "stener()\n        ss.dispatchEvent({type: \"zhangsan\"})", "     })\n\n        ss.dispatchEvent({type: \"zhangsan\"})", "      }\n\n        ss.dispatchEvent({type: \"zhangsan\"})", "\"lisi\"})\n        ss.dispatchEvent({type: \"lisi\"})\n\n  ", "      })\n        ss.dispatchEvent({type: \"zhangsan\"})", "\"lisi\"})\n        ss.dispatchEvent({type: \"lisi\"})\n   ", "qual(2)\n\n        ss.dispatchEvent({type: \"lisi\"})\n   ", "   {\n            ss.dispatchEvent({type: \"zhangsan\"})", "ngsan\"})\n        ss.dispatchEvent({type: \"zhangsan\"})"], "files": ["Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EventTarget", "api_method_name": "removeEventListener", "api_method_all": "removeEventListener(\r\n    type: string,\r\n    callback?: EventListener\r\n  ): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["    // check worker removeEventListener function is ok\n    it('worker_removeLis", "qual(1)\n\n        ss.removeEventListener(\"zhangsan\")\n\n        ss.dispatchEvent({", "   {\n            ss.removeEventListener(\"zhangsan\")\n        }\n\n        ss.dispa"], "files": ["Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EventTarget", "api_method_name": "removeAllListener", "api_method_all": "removeAllListener(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["qual(2)\n\n        ss.removeAllListener()\n        ss.dispat", "    // check worker removeAllListener function is ok\n    "], "files": ["Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WorkerGlobalScope", "api_method_all": "declare interface WorkerGlobalScope extends EventTarget {\r\n  \r\n  readonly name: string;\r\n\r\n  \r\n  onerror?: (ev: ErrorEvent) => void;\r\n  readonly self: WorkerGlobalScope & typeof globalThis;\r\n}", "api_method_name": "WorkerGlobalScope", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WorkerGlobalScope", "api_method_name": "onerror", "api_method_all": "onerror?: (ev: ErrorEvent) => void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["\"worker:: worker.js onerror \" + data.lineno + \"", "= false\n\n        ss.onerror = function (e) {\n  ", "      }\n\n        ss.onerror = function(ee) {\n  ", "on error\nparentPort.onerror = function(data) {\n"], "files": ["worker.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WorkerGlobalScope", "api_method_name": "name", "api_method_all": "readonly name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1240, "since": 7, "api_used": "\u662f", "lines": ["ETIME_026\n    * @tc.name format the hour in ", "ETIME_019\n    * @tc.name format the timerang", "ist();\n    let a = {name: \"lala\", age: \"13\u5c81\"", " {\n      expect(err.name).assertEqual(\"Range", "ETIME_022\n    * @tc.name format the America/", "ETIME_025\n    * @tc.name format the weekday\n", "ist();\n    let a = {name: \"lala\", age: \"13\"}", "ack();\n    let a = {name: \"lala\", age: \"13\u5c81\"", "ETIME_020\n    * @tc.name format the hour&min", "ETIME_027\n    * @tc.name format the hour in ", "que();\n    let a = {name: \"lala\", age: \"15\"}", "ETIME_023\n    * @tc.name format the America/", "sh(5);\n    let c = {name: \"lili\", age: \"13\"}", "ETIME_021\n    * @tc.name format the timeZone", "ETIME_024\n    * @tc.name format the year\n   ", " {\n      expect(err.name).assertEqual(\"TypeE", "tor();\n    let a = {name: \"lala\", age: \"13\u5c81\""], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "Queue.test.js", "convertxml.test.js", "url.test.js", "LightWeightMap.test.js", "LightWeightSet.test.js", "HashMap.test.js", "intlDateTimeFormat_test.js", "uri.test.js", "Worker.test.js", "worker_005.js", "TreeSet.test.js", "Process.test.js", "PlainArray.test.js", "TreeMap.test.js", "worker.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WorkerGlobalScope", "api_method_name": "self", "api_method_all": "readonly self: WorkerGlobalScope & typeof globalThis", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DedicatedWorkerGlobalScope", "api_method_all": "export interface DedicatedWorkerGlobalScope extends WorkerGlobalScope {\r\n  \r\n  onmessage?: (this: DedicatedWorkerGlobalScope, ev: MessageEvent) => void;\r\n\r\n  \r\n  onmessageerror?: (this: DedicatedWorkerGlobalScope, ev: MessageEvent) => void;\r\n\r\n  \r\n  close(): void;\r\n\r\n  \r\n  postMessage(messageObject: Object, transfer: Transferable[]): void;\r\n  postMessage(messageObject: Object, options?: PostMessageOptions): void;\r\n}", "api_method_name": "DedicatedWorkerGlobalScope", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DedicatedWorkerGlobalScope", "api_method_name": "onmessage", "api_method_all": "onmessage?: (this: DedicatedWorkerGlobalScope, ev: MessageEvent) => void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 55, "since": 7, "api_used": "\u662f", "lines": ["0131.js\");\n      ss.onmessage = function(ee) {\n  ", "       }\n        ss.onmessage = function (e) {\n  ", "0121.js\");\n      ss.onmessage = function(ee) {\n  ", "se\");\n}\n\nparentPort.onmessage = function(e) {\n   ", "ntPort;\n\nparentPort.onmessage = function(e) {\n   ", "   })\n\n    // check onmessageerror is ok\n    it('", "= false\n\n        ss.onmessageerror = function (e)", "      }\n\n        ss.onmessage = function (e) {\n  ", " false;\n\nparentPort.onmessage = function(e) {\n  v", "0111.js\");\n      ss.onmessage = function(ee) {\n  ", "      }\n\n        ss.onmessageerror = function (e)", "\"worker:: worker.js onmessageerror\");\n}\n\n// js ex", "nsole.log(\"worker:: onmessage\")\n  parentPort.post", "0152.js\");\n      ss.onmessage = function(ee) {\n  ", "0151.js\");\n      ss.onmessage = function(ee) {\n  ", "efined;\n\nparentPort.onmessage = function(e) {\n  l", "0101.js\");\n      ss.onmessage = function(ee) {\n  ", "rker:: thrid worker onmessage\")\n}", "nsole.log(\"worker:: onmessage\");\n}", " false;\n\nparentPort.onmessage = function(e) {\n  c", "ntPort;\n\nparentPort.onmessage = function(e) {\n  l", "s ok\n    it('worker_onmessageerror_test_001', 0, ", " false;\n\nparentPort.onmessage = function(e) {\n  l", "on error\nparentPort.onmessageerror = function() {", "0141.js\");\n      ss.onmessage = function(ee) {\n  ", "s ok\n    it('worker_onmessageerror_test_002', 0, ", "ntPort;\n\nparentPort.onmessage = function(e) {\n  c"], "files": ["worker_010.js", "worker_0121.js", "worker_0151.js", "worker_0091.js", "worker_0131.js", "worker_003.js", "worker_0141.js", "worker_002.js", "worker_011.js", "worker_0111.js", "worker_012.js", "worker_006.js", "worker_009.js", "worker_013.js", "worker_004.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "worker_0152.js", "worker_007.js", "worker_015.js", "worker.js", "worker_008.js", "worker_0122.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DedicatedWorkerGlobalScope", "api_method_name": "onmessageerror", "api_method_all": "onmessageerror?: (this: DedicatedWorkerGlobalScope, ev: MessageEvent) => void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["s ok\n    it('worker_onmessageerror_test_001', 0, async", "= false\n\n        ss.onmessageerror = function (e) {\n  ", "      }\n\n        ss.onmessageerror = function (e) {\n  ", "s ok\n    it('worker_onmessageerror_test_002', 0, async", "on error\nparentPort.onmessageerror = function() {\n    ", "\"worker:: worker.js onmessageerror\");\n}\n\n// js executi", "   })\n\n    // check onmessageerror is ok\n    it('worke"], "files": ["worker.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DedicatedWorkerGlobalScope", "api_method_name": "close", "api_method_all": "close(): void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["04\n     * @tc.desc: close the target process.", "ion\")\n\nparentPort.onclose = function() {\n    ", "// check parentPort.close is ok\n    it('worke", "01\n     * @tc.desc: close the target process.", "05\n     * @tc.desc: close the target process.", "03\n     * @tc.desc: close the target process.", " let result = child.close()\n        let statu", " let status = child.close()\n        expect(ch", "5s;')\n        child.close()\n        child.wai", " let result = child.close()\n        expect(ch", "e) {\n    parentPort.close()\n}\n", "worker::worker.js onclose\");\n}\n\nparentPort.on", "02\n     * @tc.desc: close the target process.", " let result = child.close()\n        let temp ", "BCD')\n        child.close()\n        let resul"], "files": ["worker.js", "worker_008.js", "Worker.test.js", "Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DedicatedWorkerGlobalScope", "api_method_name": "postMessage", "api_method_all": "postMessage(messageObject: Object, transfer: Transferable[]): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 84, "since": 7, "api_used": "\u662f", "lines": ["\n        parentPort.postMessage(backValue); // 16\n ", "se \"wait\":\n      ss.postMessage({type: \"wait\"});\n  ", "      }\n\n        ss.postMessage(\"hello\")\n        aw", "s ok\n    it('worker_postMessage_test_006', 0, async", ".data;\n  parentPort.postMessage(data + 3); // 16\n}", "e) {\n    parentPort.postMessage(\"hello world\")\n}", ");\n      parentPort.postMessage(ss != null)\n      b", "e;\n      }\n      ss.postMessage({type: \"new\"});\n   ", "e) {\n    parentPort.postMessage(name)\n}", "s ok\n    it('worker_postMessage_test_004', 0, async", "ker\"\n    it('worker_postMessage_test_001', 0, async", "         parentPort.postMessage(data, [data.data]);", " // 12\n  parentPort.postMessage(data * 2 + 1); // 2", "      }\n\n        ss.postMessage(\"hello world\")\n    ", "      }\n\n        ss.postMessage({\"message\":\"hello w", "Equal(8)\n        ss.postMessage(buffer, [buffer])\n ", "ker\"\n    parentPort.postMessage(data)\n}", "er\";\n    parentPort.postMessage(data)\n}", "         parentPort.postMessage(data);\n            ", "e;\n      }\n      ss.postMessage(data.value + 2); //", "er\"}\n    it('worker_postMessage_test_003', 0, async", "qual(1)\n\n        ss.postMessage(\"hello world\")\n    ", "\n        parentPort.postMessage(\"terminate\");\n     ", "e;\n      }\n      ss.postMessage(data.value);\n      ", "      }\n\n        ss.postMessage(12)\n        while (", " + 1\n    parentPort.postMessage(data)\n}", "   })\n\n    // check postMessage is ok\n    // main p", "      }\n\n        ss.postMessage(\"abc\")\n        whil", " + 1\n    it('worker_postMessage_test_002', 0, async", "sage\")\n  parentPort.postMessage(\"terminate\");\n}", "\n        parentPort.postMessage(backValue);\n      }", "] += 1\n  parentPort.postMessage(data); // [2, 2]\n}", " world\n  parentPort.postMessage(data + \" worker\"); ", "e;\n      }\n      ss.postMessage({type: \"new\", value", " }\n      parentPort.postMessage(ss != null);\n      ", "s ok\n    it('worker_postMessage_test_005', 0, async"], "files": ["worker_010.js", "worker_0121.js", "worker_0151.js", "worker_0131.js", "worker_003.js", "worker_0141.js", "worker_011.js", "worker_0111.js", "worker_012.js", "worker_006.js", "worker_009.js", "worker_013.js", "worker_004.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "worker_0152.js", "worker_015.js", "worker.js", "worker_002.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DedicatedWorkerGlobalScope", "api_method_name": "postMessage", "api_method_all": "postMessage(messageObject: Object, options?: PostMessageOptions): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 84, "since": 7, "api_used": "\u662f", "lines": ["\n        parentPort.postMessage(backValue); // 16\n ", "se \"wait\":\n      ss.postMessage({type: \"wait\"});\n  ", "      }\n\n        ss.postMessage(\"hello\")\n        aw", "s ok\n    it('worker_postMessage_test_006', 0, async", ".data;\n  parentPort.postMessage(data + 3); // 16\n}", "e) {\n    parentPort.postMessage(\"hello world\")\n}", ");\n      parentPort.postMessage(ss != null)\n      b", "e;\n      }\n      ss.postMessage({type: \"new\"});\n   ", "e) {\n    parentPort.postMessage(name)\n}", "s ok\n    it('worker_postMessage_test_004', 0, async", "ker\"\n    it('worker_postMessage_test_001', 0, async", "         parentPort.postMessage(data, [data.data]);", " // 12\n  parentPort.postMessage(data * 2 + 1); // 2", "      }\n\n        ss.postMessage(\"hello world\")\n    ", "      }\n\n        ss.postMessage({\"message\":\"hello w", "Equal(8)\n        ss.postMessage(buffer, [buffer])\n ", "ker\"\n    parentPort.postMessage(data)\n}", "er\";\n    parentPort.postMessage(data)\n}", "         parentPort.postMessage(data);\n            ", "e;\n      }\n      ss.postMessage(data.value + 2); //", "er\"}\n    it('worker_postMessage_test_003', 0, async", "qual(1)\n\n        ss.postMessage(\"hello world\")\n    ", "\n        parentPort.postMessage(\"terminate\");\n     ", "e;\n      }\n      ss.postMessage(data.value);\n      ", "      }\n\n        ss.postMessage(12)\n        while (", " + 1\n    parentPort.postMessage(data)\n}", "   })\n\n    // check postMessage is ok\n    // main p", "      }\n\n        ss.postMessage(\"abc\")\n        whil", " + 1\n    it('worker_postMessage_test_002', 0, async", "sage\")\n  parentPort.postMessage(\"terminate\");\n}", "\n        parentPort.postMessage(backValue);\n      }", "] += 1\n  parentPort.postMessage(data); // [2, 2]\n}", " world\n  parentPort.postMessage(data + \" worker\"); ", "e;\n      }\n      ss.postMessage({type: \"new\", value", " }\n      parentPort.postMessage(ss != null);\n      ", "s ok\n    it('worker_postMessage_test_005', 0, async"], "files": ["worker_010.js", "worker_0121.js", "worker_0151.js", "worker_0131.js", "worker_003.js", "worker_0141.js", "worker_011.js", "worker_0111.js", "worker_012.js", "worker_006.js", "worker_009.js", "worker_013.js", "worker_004.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "worker_0152.js", "worker_015.js", "worker.js", "worker_002.js"], "is_white": " ", "desc": " "}, {"api_class_name": "worker", "api_method_all": "declare namespace worker {\r\n  class Worker extends EventTarget {\r\n    \r\n    constructor(scriptURL: string, options?: WorkerOptions);\r\n\r\n    \r\n    onexit?: (code: number) => void;\r\n\r\n    \r\n    onerror?: (err: ErrorEvent) => void;\r\n\r\n    \r\n    onmessage?: (event: MessageEvent) => void;\r\n\r\n    \r\n    onmessageerror?: (event: MessageEvent) => void;\r\n\r\n    \r\n    postMessage(message: Object, transfer: ArrayBuffer[]): void;\r\n    postMessage(message: Object, options?: PostMessageOptions): void;\r\n\r\n    \r\n    on(type: string, listener: EventListener): void;\r\n\r\n    \r\n    once(type: string, listener: EventListener): void;\r\n\r\n    \r\n    off(type: string, listener?: EventListener): void;\r\n\r\n    \r\n    terminate(): void;\r\n  }\r\n  const parentPort: DedicatedWorkerGlobalScope;\r\n}", "api_method_name": "worker", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 338, "since": 0, "api_used": "\u662f", "lines": ["", "nsole.info(\"worker::worker.js onclose\");\n}\n\npa", "      console.info(\"worker:: worker.js post bu", "sole.info(\"worker:: worker.js receive buffer l", "ker:: worker thread worker data is \" + data.da", "{\n    console.info(\"worker:: worker.js onmessa", " worker from \"@ohos.worker\"\n\nconst parentPort ", "sole.info(\"worker:: worker.js receive unknow t", "sole.info(\"worker:: worker.js post buffer leng", "      console.info(\"worker:: worker.js receive", "{\n    console.info(\"worker:: worker.js onerror", "sole.info(\"worker:: worker.js onmessageerror\")", "{\n    console.info(\"worker::worker.js onclose\"", "ort;\n\nconsole.info(\"worker:: new version\")\n\npa", "\nconst parentPort = worker.parentPort;\n\nconsol", "      console.info(\"worker:: worker thread pos", "sole.info(\"worker:: worker thread worker data ", ";\n    console.info(\"worker:: worker thread wor", " {\n    console.log(\"worker:: worker receive da", "sole.info(\"worker:: worker thread receive data", "      console.info(\"worker:: worker thread rec", "= \"hello world \" + \"worker\"\n    parentPort.pos", "\nconst parentPort = worker.parentPort;\n\nparent", "sole.info(\"worker:: worker.js onerror \" + data", "t data = e.data + \" worker\";\n    parentPort.po", "sole.info(\"worker:: worker thread post back\");", "nsole.log(\"worker:: worker receive data \" + e.", " worker from '@ohos.worker';\nconst parentPort "], "files": ["worker_010.js", "worker_0121.js", "worker_0151.js", "worker_0091.js", "worker_0131.js", "worker_003.js", "worker_0141.js", "worker_002.js", "worker_011.js", "worker_0111.js", "worker_012.js", "worker_006.js", "worker_009.js", "worker_013.js", "worker_004.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "worker_0152.js", "worker_007.js", "worker_015.js", "worker.js", "worker_008.js", "worker_0122.js"], "is_white": " ", "desc": " "}, {"api_class_name": "worker", "api_method_name": "parentPort", "api_method_all": "const parentPort: DedicatedWorkerGlobalScope", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 102, "since": 0, "api_used": "\u662f", "lines": ["if (flag) {\n        parentPort.postMessage(backVal", "= function(e) {\n    parentPort.postMessage(name)\n}", "parentPort = worker.parentPort;\n\nvar ss = undefine", "parentPort = worker.parentPort;\n\nconsole.info(\"wor", "er.js onclose\");\n}\n\nparentPort.onmessage = functio", "serialization error\nparentPort.onmessageerror = fu", "ta + \" worker\";\n    parentPort.postMessage(data)\n}", " e.data * 2 + 1\n    parentPort.postMessage(data)\n}", "worker.parentPort;\n\nparentPort.onmessage = functio", "ohos.worker\"\n\nconst parentPort = worker.parentPort", "if (flag) {\n        parentPort.postMessage(\"termin", "ar ss = undefined;\n\nparentPort.onmessage = functio", "ld \" + \"worker\"\n    parentPort.postMessage(data)\n}", "ength);\n            parentPort.postMessage(data, [", "= function(e) {\n    parentPort.close()\n}\n", ".data);\n            parentPort.postMessage(data);\n", "ohos.worker';\nconst parentPort = worker.parentPort", "true;\n      }\n      parentPort.postMessage(ss != n", "parentPort = worker.parentPort;\n\nparentPort.onmess", "\nvar flag = false;\n\nparentPort.onmessage = functio", "= function(e) {\n    parentPort.postMessage(\"hello ", "er:: new version\")\n\nparentPort.onclose = function(", " js execution error\nparentPort.onerror = function("], "files": ["worker_010.js", "worker_0121.js", "worker_0151.js", "worker_0091.js", "worker_0131.js", "worker_003.js", "worker_0141.js", "worker_002.js", "worker_011.js", "worker_0111.js", "worker_012.js", "worker_006.js", "worker_009.js", "worker_013.js", "worker_004.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "worker_0152.js", "worker_007.js", "worker_015.js", "worker.js", "worker_008.js", "worker_0122.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_all": "class Worker extends EventTarget {\r\n    \r\n    constructor(scriptURL: string, options?: WorkerOptions);\r\n\r\n    \r\n    onexit?: (code: number) => void;\r\n\r\n    \r\n    onerror?: (err: ErrorEvent) => void;\r\n\r\n    \r\n    onmessage?: (event: MessageEvent) => void;\r\n\r\n    \r\n    onmessageerror?: (event: MessageEvent) => void;\r\n\r\n    \r\n    postMessage(message: Object, transfer: ArrayBuffer[]): void;\r\n    postMessage(message: Object, options?: PostMessageOptions): void;\r\n\r\n    \r\n    on(type: string, listener: EventListener): void;\r\n\r\n    \r\n    once(type: string, listener: EventListener): void;\r\n\r\n    \r\n    off(type: string, listener?: EventListener): void;\r\n\r\n    \r\n    terminate(): void;\r\n  }", "api_method_name": "Worker", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 48, "since": 7, "api_used": "\u662f", "lines": ["let ss = new worker.Worker(\"workers/worker_005", "let ss = new worker.Worker(\"workers/worker_006", "    ss = new worker.Worker(\"workers/worker_009", "    ss = new worker.Worker(\"workers/worker_010", "let ss = new worker.Worker(\"workers/worker_002", "let ss = new worker.Worker(\"workers/worker.js\"", "let ss = new worker.Worker(\"workers/worker_012", "let ss = new worker.Worker(\"workers/worker_013", "let ss = new worker.Worker(\"workers/worker_011", "let ss = new worker.Worker(\"workers/worker_015", "    ss = new worker.Worker(\"workers/worker_012", "    ss = new worker.Worker(\"workers/worker_015", "let ss = new worker.Worker(\"workers/worker_009", "    ss = new worker.Worker(\"workers/worker_013", "let ss = new worker.Worker(\"workers/worker_010", "let ss = new worker.Worker(\"workers/worker_007", "st.js')", "    ss = new worker.Worker(\"workers/worker_011", "let ss = new worker.Worker(\"workers/worker_008", "let ss = new worker.Worker(\"workers/worker_004", "let ss = new worker.Worker(\"workers/worker_003", "    ss = new worker.Worker(\"workers/worker_014", "let ss = new worker.Worker(\"workers/worker_014"], "files": ["worker_012.js", "worker_014.js", "List.test.js", "worker_009.js", "worker_013.js", "worker_0151.js", "worker_010.js", "worker_015.js", "worker_0121.js", "Worker.test.js", "worker_011.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "constructor", "api_method_all": "constructor(scriptURL: string, options?: WorkerOptions)", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "onexit", "api_method_all": "onexit?: (code: number) => void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 41, "since": 7, "api_used": "\u662f", "lines": ["rkerxx \");\n      ss.onexit = function() {\n    ", "false\n\t\t\n        ss.onexit = function () {\n   ", "= false\n\n        ss.onexit = function (e) {\n  ", "e;\n      }\n      ss.onexit = function() {\n    ", "= false\n\n        ss.onexit = function () {\n\t\t\t", "       }\n        ss.onexit = function () {\n   ", "= false\n\n        ss.onexit = function () {\n   ", "e;\n      }\n      ss.onexit = function(code) {\n"], "files": ["worker_012.js", "worker_014.js", "worker_009.js", "worker_013.js", "worker_010.js", "Worker.test.js", "worker_011.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "onerror", "api_method_all": "onerror?: (err: ErrorEvent) => void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["\"worker:: worker.js onerror \" + data.lineno + \"", "= false\n\n        ss.onerror = function (e) {\n  ", "      }\n\n        ss.onerror = function(ee) {\n  ", "on error\nparentPort.onerror = function(data) {\n"], "files": ["worker.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "onmessage", "api_method_all": "onmessage?: (event: MessageEvent) => void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 55, "since": 7, "api_used": "\u662f", "lines": ["0131.js\");\n      ss.onmessage = function(ee) {\n  ", "       }\n        ss.onmessage = function (e) {\n  ", "0121.js\");\n      ss.onmessage = function(ee) {\n  ", "se\");\n}\n\nparentPort.onmessage = function(e) {\n   ", "ntPort;\n\nparentPort.onmessage = function(e) {\n   ", "   })\n\n    // check onmessageerror is ok\n    it('", "= false\n\n        ss.onmessageerror = function (e)", "      }\n\n        ss.onmessage = function (e) {\n  ", " false;\n\nparentPort.onmessage = function(e) {\n  v", "0111.js\");\n      ss.onmessage = function(ee) {\n  ", "      }\n\n        ss.onmessageerror = function (e)", "\"worker:: worker.js onmessageerror\");\n}\n\n// js ex", "nsole.log(\"worker:: onmessage\")\n  parentPort.post", "0152.js\");\n      ss.onmessage = function(ee) {\n  ", "0151.js\");\n      ss.onmessage = function(ee) {\n  ", "efined;\n\nparentPort.onmessage = function(e) {\n  l", "0101.js\");\n      ss.onmessage = function(ee) {\n  ", "rker:: thrid worker onmessage\")\n}", "nsole.log(\"worker:: onmessage\");\n}", " false;\n\nparentPort.onmessage = function(e) {\n  c", "ntPort;\n\nparentPort.onmessage = function(e) {\n  l", "s ok\n    it('worker_onmessageerror_test_001', 0, ", " false;\n\nparentPort.onmessage = function(e) {\n  l", "on error\nparentPort.onmessageerror = function() {", "0141.js\");\n      ss.onmessage = function(ee) {\n  ", "s ok\n    it('worker_onmessageerror_test_002', 0, ", "ntPort;\n\nparentPort.onmessage = function(e) {\n  c"], "files": ["worker_010.js", "worker_0121.js", "worker_0151.js", "worker_0091.js", "worker_0131.js", "worker_003.js", "worker_0141.js", "worker_002.js", "worker_011.js", "worker_0111.js", "worker_012.js", "worker_006.js", "worker_009.js", "worker_013.js", "worker_004.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "worker_0152.js", "worker_007.js", "worker_015.js", "worker.js", "worker_008.js", "worker_0122.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "onmessageerror", "api_method_all": "onmessageerror?: (event: MessageEvent) => void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["s ok\n    it('worker_onmessageerror_test_001', 0, async", "= false\n\n        ss.onmessageerror = function (e) {\n  ", "      }\n\n        ss.onmessageerror = function (e) {\n  ", "s ok\n    it('worker_onmessageerror_test_002', 0, async", "on error\nparentPort.onmessageerror = function() {\n    ", "\"worker:: worker.js onmessageerror\");\n}\n\n// js executi", "   })\n\n    // check onmessageerror is ok\n    it('worke"], "files": ["worker.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "postMessage", "api_method_all": "postMessage(message: Object, transfer: ArrayBuffer[]): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 84, "since": 7, "api_used": "\u662f", "lines": ["\n        parentPort.postMessage(backValue); // 16\n ", "se \"wait\":\n      ss.postMessage({type: \"wait\"});\n  ", "      }\n\n        ss.postMessage(\"hello\")\n        aw", "s ok\n    it('worker_postMessage_test_006', 0, async", ".data;\n  parentPort.postMessage(data + 3); // 16\n}", "e) {\n    parentPort.postMessage(\"hello world\")\n}", ");\n      parentPort.postMessage(ss != null)\n      b", "e;\n      }\n      ss.postMessage({type: \"new\"});\n   ", "e) {\n    parentPort.postMessage(name)\n}", "s ok\n    it('worker_postMessage_test_004', 0, async", "ker\"\n    it('worker_postMessage_test_001', 0, async", "         parentPort.postMessage(data, [data.data]);", " // 12\n  parentPort.postMessage(data * 2 + 1); // 2", "      }\n\n        ss.postMessage(\"hello world\")\n    ", "      }\n\n        ss.postMessage({\"message\":\"hello w", "Equal(8)\n        ss.postMessage(buffer, [buffer])\n ", "ker\"\n    parentPort.postMessage(data)\n}", "er\";\n    parentPort.postMessage(data)\n}", "         parentPort.postMessage(data);\n            ", "e;\n      }\n      ss.postMessage(data.value + 2); //", "er\"}\n    it('worker_postMessage_test_003', 0, async", "qual(1)\n\n        ss.postMessage(\"hello world\")\n    ", "\n        parentPort.postMessage(\"terminate\");\n     ", "e;\n      }\n      ss.postMessage(data.value);\n      ", "      }\n\n        ss.postMessage(12)\n        while (", " + 1\n    parentPort.postMessage(data)\n}", "   })\n\n    // check postMessage is ok\n    // main p", "      }\n\n        ss.postMessage(\"abc\")\n        whil", " + 1\n    it('worker_postMessage_test_002', 0, async", "sage\")\n  parentPort.postMessage(\"terminate\");\n}", "\n        parentPort.postMessage(backValue);\n      }", "] += 1\n  parentPort.postMessage(data); // [2, 2]\n}", " world\n  parentPort.postMessage(data + \" worker\"); ", "e;\n      }\n      ss.postMessage({type: \"new\", value", " }\n      parentPort.postMessage(ss != null);\n      ", "s ok\n    it('worker_postMessage_test_005', 0, async"], "files": ["worker_010.js", "worker_0121.js", "worker_0151.js", "worker_0131.js", "worker_003.js", "worker_0141.js", "worker_011.js", "worker_0111.js", "worker_012.js", "worker_006.js", "worker_009.js", "worker_013.js", "worker_004.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "worker_0152.js", "worker_015.js", "worker.js", "worker_002.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "postMessage", "api_method_all": "postMessage(message: Object, options?: PostMessageOptions): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 84, "since": 7, "api_used": "\u662f", "lines": ["\n        parentPort.postMessage(backValue); // 16\n ", "se \"wait\":\n      ss.postMessage({type: \"wait\"});\n  ", "      }\n\n        ss.postMessage(\"hello\")\n        aw", "s ok\n    it('worker_postMessage_test_006', 0, async", ".data;\n  parentPort.postMessage(data + 3); // 16\n}", "e) {\n    parentPort.postMessage(\"hello world\")\n}", ");\n      parentPort.postMessage(ss != null)\n      b", "e;\n      }\n      ss.postMessage({type: \"new\"});\n   ", "e) {\n    parentPort.postMessage(name)\n}", "s ok\n    it('worker_postMessage_test_004', 0, async", "ker\"\n    it('worker_postMessage_test_001', 0, async", "         parentPort.postMessage(data, [data.data]);", " // 12\n  parentPort.postMessage(data * 2 + 1); // 2", "      }\n\n        ss.postMessage(\"hello world\")\n    ", "      }\n\n        ss.postMessage({\"message\":\"hello w", "Equal(8)\n        ss.postMessage(buffer, [buffer])\n ", "ker\"\n    parentPort.postMessage(data)\n}", "er\";\n    parentPort.postMessage(data)\n}", "         parentPort.postMessage(data);\n            ", "e;\n      }\n      ss.postMessage(data.value + 2); //", "er\"}\n    it('worker_postMessage_test_003', 0, async", "qual(1)\n\n        ss.postMessage(\"hello world\")\n    ", "\n        parentPort.postMessage(\"terminate\");\n     ", "e;\n      }\n      ss.postMessage(data.value);\n      ", "      }\n\n        ss.postMessage(12)\n        while (", " + 1\n    parentPort.postMessage(data)\n}", "   })\n\n    // check postMessage is ok\n    // main p", "      }\n\n        ss.postMessage(\"abc\")\n        whil", " + 1\n    it('worker_postMessage_test_002', 0, async", "sage\")\n  parentPort.postMessage(\"terminate\");\n}", "\n        parentPort.postMessage(backValue);\n      }", "] += 1\n  parentPort.postMessage(data); // [2, 2]\n}", " world\n  parentPort.postMessage(data + \" worker\"); ", "e;\n      }\n      ss.postMessage({type: \"new\", value", " }\n      parentPort.postMessage(ss != null);\n      ", "s ok\n    it('worker_postMessage_test_005', 0, async"], "files": ["worker_010.js", "worker_0121.js", "worker_0151.js", "worker_0131.js", "worker_003.js", "worker_0141.js", "worker_011.js", "worker_0111.js", "worker_012.js", "worker_006.js", "worker_009.js", "worker_013.js", "worker_004.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "worker_0152.js", "worker_015.js", "worker.js", "worker_002.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "on", "api_method_all": "on(type: string, listener: EventListener): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 3803, "since": 7, "api_used": "\u662f", "lines": ["      console.info('onShow finish')\n      ", "ecute()\n\n    },\n    onReady() {\n    },\n}", ".info('TestApplication onDestroy');\n    }\n", "fo('TestApplication onCreate');\n    },\n   ", "test_005', 0, function () {\n        var co", " function () {\n    console.log('******test", "itle: \"\"\n    },\n    onInit() {\n        thi", "\n        expect(options.sensitivity).asser", "  configService.setConfig(this)\n\n        r", "('\u00e4', 'z');\n       console.log(collator1);", "info_test_006:\",options.caseFirst);\n      ", "rmat('zh');\n       console.log('dateTimeFo", "ormatTest_2', function () {\n    console.lo", "ormatTest_1', function () {\n   console.log", "test_003', 0, function () {\n       let dat", "test_002', 0, function () {\n       let dat", "info_test_007:\",options.sensitivity);\n    ", "Create() {\n        console.info('TestAppli", "Instance()\n        const expectExtend = ne", "world');\n    },\n    onShow() {\n        con", "test_006', 0, function () {\n        var co", "xport default {\n    onCreate() {\n        c", "estroy() {\n        console.info('TestAppli", "t()\n\n        const configService = core.ge", "ollator.resolvedOptions();\n        console", "('\u00e4', 'z');\n       console.log(collator2);", "});\n        var options = collator.resolve", "re.init()\n\n        const configService = c", "test_004', 0, function () {\n       var col", "\n        expect(options.caseFirst).assertE", " function () {\n    console.log(\"*******tes", ".info('TestApplication onCreate');\n    },\n", "'\u00e4', 'a');\n        console.log(collator1);", "reate');\n    },\n    onDestroy() {\n        ", "Options();\n        console.log(\"collator_i", "getDefaultService('config')\n        config", "per',ignorePunctuation:'true'});\n        v", "test_007', 0, function () {\n        var co", "test_001', 0, function () {\n       let dat", "('config')\n        configService.setConfig", "fo('TestApplication onDestroy');\n    }\n};\n", "onShow() {\n        console.info('onShow fi", ", function () {\n   console.log('******test", "'\u00e4', 'a');\n        console.log(collator2);", "eFormatTest', function () {\n    console.lo", "w finish')\n        const core = Core.getIn"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "worker_010.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "worker_0121.js", "Queue.test.js", "ExampleJsunit.test.js", "worker_0151.js", "worker_0091.js", "worker_0131.js", "worker_003.js", "convertxml.test.js", "url.test.js", "LightWeightMap.test.js", "app.js", "intlCollator_test.js", "worker_0141.js", "worker_011.js", "worker_006.js", "worker_0111.js", "worker_012.js", "LightWeightSet.test.js", "worker_008.js", "worker_009.js", "worker_013.js", "intlLocale_test.js", "worker_004.js", "HashMap.test.js", "intlDateTimeFormat_test.js", "uri.test.js", "index.js", "second.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "TreeSet.test.js", "worker_0152.js", "Process.test.js", "numberFormat_test.js", "PlainArray.test.js", "TreeMap.test.js", "worker_007.js", "worker_015.js", "worker.js", "worker_002.js", "worker_0122.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "once", "api_method_all": "once(type: string, listener: EventListener): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["s ok\n    it('worker_once_test_002', 0, async", "     })\n\n        ss.once(\"lisi\", ()=>{\n     ", "s ok\n    it('worker_once_test_001', 0, async", "    // check worker once function is ok\n    ", " })\n\n    it('worker_once_test_003', 0, async", "       }\n        ss.once(\"zhangsan\", ()=>{\n "], "files": ["Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "off", "api_method_all": "off(type: string, listener?: EventListener): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": [", add1)\n        let offtest = process.off(\"", "qual(1)\n\n        ss.off(\"zhangsan\")\n\n      ", "   {\n            ss.off(\"zhangsan\")\n       ", "on () {\n        let offtest = process.off(\"", "    // check worker off function is ok\n    ", "s ok\n    it('worker_off_test_002', 0, async", "t offtest = process.off(\"456\")\n        expe", "s ok\n    it('worker_off_test_001', 0, async", "23\")\n        expect(offtest).assertEqual(fa", "56\")\n        expect(offtest).assertEqual(fa", "on\")\n        expect(offtest).assertEqual(tr", "t offtest = process.off(\"123\")\n        expe", "t offtest = process.off(\"UnHandleRejection\""], "files": ["Worker.test.js", "Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Worker", "api_method_name": "terminate", "api_method_all": "terminate(): void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 69, "since": 0, "api_used": "\u662f", "lines": ["      }\n\n        ss.terminate()\n        while (!i", "g = false;\n      ss.terminate();\n      break;\n   ", "ntPort.postMessage(\"terminate\");\n}", "    // check worker terminate is ok\n    it('worke", "tTrue()\n\n        ss.terminate()\n        while (!i", "s ok\n    it('worker_terminate_test_002', 0, async", "s ok\n    it('worker_terminate_test_003', 0, async", " Repeated execution terminate\n        ss.terminat", "lisi\"})\n\n        ss.terminate()\n        while (!i", "xit() {\n        app.terminate()\n    }\n}\n\n\n", "      }\n\n        ss.terminate()\n        while (!f", "s ok\n    it('worker_terminate_test_001', 0, async", "   break;\n    case \"terminate\":\n      flag = fals", "ntPort.postMessage(\"terminate\");\n      }\n      br", "minate()\n        ss.terminate()\n\n        while (!", "erminate\n        ss.terminate()\n        ss.termin", "gsan\"})\n\n        ss.terminate()\n        while (!i", "       backValue = \"terminate\";\n        flag = tr"], "files": ["worker_012.js", "worker_014.js", "worker_009.js", "worker_013.js", "worker_010.js", "index.js", "Worker.test.js", "worker_011.js", "worker_0111.js"], "is_white": " ", "desc": " "}]}