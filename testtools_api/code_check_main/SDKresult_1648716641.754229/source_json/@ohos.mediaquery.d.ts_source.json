{"subsystem_ch": "\u5a92\u4f53\u5b50\u7cfb\u7edf", "subsystem_en": "multimedia", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.mediaquery", "api": [{"api_class_name": "mediaquery", "api_method_all": "declare namespace mediaquery {\n\n  interface MediaQueryResult {\n\n    \n    readonly matches: boolean;\n\n    \n    readonly media: string;\n  }\n\n  interface MediaQueryListener extends MediaQueryResult {\n\n    \n    on(type: 'change', callback: Callback<MediaQueryResult>): void;\n\n    \n    off(type: 'change', callback?: Callback<MediaQueryResult>): void;\n  }\n\n  \n  function matchMediaSync(condition: string): MediaQueryListener;\n}", "api_method_name": "mediaquery", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "mediaquery", "api_method_name": "matchMediaSync", "api_method_all": "function matchMediaSync(condition: string): MediaQueryListener;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaQueryResult", "api_method_all": "interface MediaQueryResult {\n\n    \n    readonly matches: boolean;\n\n    \n    readonly media: string;\n  }", "api_method_name": "MediaQueryResult", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaQueryResult", "api_method_name": "matches", "api_method_all": "readonly matches: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaQueryResult", "api_method_name": "media", "api_method_all": "readonly media: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2574, "since": 7, "api_used": "\u662f", "lines": ["ces/rawfile';\n\t\tvar mediaDirTemp = '/data'\n  ", "dioRendererOptions, mediaDir+'/StarWars10s-2C", "nction () {\n    var mediaDir;\n    var dateTim", "200);\n        //var mediaDirTemp = path1 + pa", "ramework');\n    var mediaDir;\n\n    async func", "io from '@ohos.multimedia.audio';\n\nimport {de", "dioRendererOptions, mediaDir+'/StarWars10s-1C", " - Callback- Change media Volume and check\n  ", " - Promise - Change media Volume and check\n  ", "te level');\n        mediaDir = await getPathN", "mp);\n        return mediaDirTemp;\n\n    }\n\n   ", "source DIR Path : '+mediaDirTemp);\n        re", "t sleep(200);\n\t\tvar mediaDirTemp = '/data'\n  ", "io from '@ohos.multimedia.audio';\nimport file"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaQueryListener", "api_method_all": "interface MediaQueryListener extends MediaQueryResult {\n\n    \n    on(type: 'change', callback: Callback<MediaQueryResult>): void;\n\n    \n    off(type: 'change', callback?: Callback<MediaQueryResult>): void;\n  }", "api_method_name": "MediaQueryListener", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MediaQueryListener", "api_method_name": "on", "api_method_all": "on(type: 'change', callback: Callback<MediaQueryResult>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 41984, "since": 7, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MediaQueryListener", "api_method_name": "off", "api_method_all": "off(type: 'change', callback?: Callback<MediaQueryResult>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 125, "since": 7, "api_used": "\u662f", "lines": ["           audioRen.off('markReach');\n            audioRen.on('", "8),\n                offset: 0,\n                stride: 8,\n     ", "0),\n                offset: 21,\n                stride: 8,\n    ", "0),\n                offset: 0,\n                stride: 8,\n     ", " readPixels-promise(offset > buffer)\n     * @tc.desc      : 1.c", "th;\n            let offset = 0;\n            const incSouce = im", "('TC_053-1 0011 ' + offset);\n            }\n            if (ret)", "fo('TC_053 0011 ' + offset);\n            }\n            if (ret)", "stimagebuffer.slice(offset, offset + bufferSize);\n             ", " periodReach - On - off -on\n    * @tc.desc      : AudioRenderer", "           offset = offset + oneStep.length;\n                co", "           audioRen.off('periodReach');\n            });\n\n      ", "   audioCapCallBack.off('periodReach');\n        await sleep(100", "           audioRen.off('periodReach');\n            audioRen.on", "                    offset: 0,\n                    stride: 8,\n ", "\n            while (offset < testimagebuffer.length) {\n        ", "  }\n                offset = offset + oneStep.length;\n         ", "        inputobject.offset = 0;\n                if (frameCnt==1", "   audioCapCallBack.off('markReach');\n        await sleep(1000)", "                    offset: 0,\n                        stride: ", "        inputobject.offset = 0;\n                inputobject.len", "           audioRen.off('periodReach');\n        });\n\n        co", " markReached - On - off -on\n    * @tc.desc      : AudioRenderer", "uffer.slice(offset, offset + bufferSize);\n                conso"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}]}