{"subsystem_ch": "\u516c\u5171\u57fa\u7840\u7c7b\u5e93", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.systemparameter", "api": [{"api_class_name": "systemParameter", "api_method_all": "declare namespace systemParameter {\n    \n    function getSync(key: string, def?: string): string;\n\n    \n    function get(key: string, callback: AsyncCallback<string>): void;\n\n    \n    function get(key: string, def: string, callback: AsyncCallback<string>): void;\n\n    \n    function get(key: string, def?: string): Promise<string>;\n\n    \n    function setSync(key: string, value: string): void;\n\n    \n    function set(key: string, value: string, callback: AsyncCallback<void>): void;\n\n    \n    function set(key: string, value: string): Promise<void>;\n}", "api_method_name": "systemParameter", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "systemParameter", "api_method_name": "getSync", "api_method_all": "function getSync(key: string, def?: string): string;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "systemParameter", "api_method_name": "get", "api_method_all": "function get(key: string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 502, "since": 6, "api_used": "\u662f", "lines": ["    let res = deque.getFirst();\n    expect(res).assertEqual(8);", "\n    let res = list.getLastIndexOf(\"a\");\n    expect(res).assert", "et res = linkedList.get(0);\n    expect(res).assertEqual(a);\n   ", "    let res = deque.getLast();\n    expect(res).assertEqual(\" \")", "onfigService = core.getDefaultService('config')\n        configS", "    let res = deque.getLast();\n    expect(res).assertEqual(\"\u4e09\")", "let res = arrayList.getLastIndexOf(1);\n    expect(res).assertEq", "t res1 = linkedList.get(1);\n    expect(res1).assertEqual(a);\n  ", "  const core = Core.getInstance()\n        const expectExtend = ", "    let res = deque.getFirst();\n    expect(res).assertEqual(\"\u4e00\"", "    let res = deque.getLast();\n    expect(res).assertEqual(unde", "  const core = Core.getInstance()\n        core.init()\n        r", "let res = arrayList.getIndexOf(99);\n    let res1 = arrayList.le", "et res = linkedList.get(0);\n    expect(res).assertEqual(a);\n  }", "    let res = deque.getFirst();\n    expect(res).assertEqual(\"$\"", "et res = linkedList.get(0);\n    expect(res).assertEqual(8);\n  }", "    let res = deque.getLast();\n    expect(res).assertEqual(\"$\")", "et res1 = arrayList.getLastIndexOf(1);\n    expect(res).assertEq", "et res = linkedList.get(0);\n    expect(res).assertEqual(\"\u56db\");\n ", "    let res = deque.getFirst();\n    expect(res).assertEqual(\"\u56db\"", "     var info = app.getInfo()\n        expect(info.versionCode).", "    let res = deque.getFirst();\n    expect(res).assertEqual(nul", "\n    let res = list.getIndexOf(\"b\");\n    expect(res).assertEqua", "    let res = deque.getLast();\n      expect(res).assertEqual(i)", "et res1 = arrayList.getIndexOf(1);\n    expect(res1).assertEqual", "    let res = deque.getLast();\n    expect(res).assertEqual(a);\n", "\n    let res = list.getIndexOf(\"f\");\n    expect(res).assertEqua", "let res = arrayList.getIndexOf(\"A\");\n    expect(res).assertEqua", "    let res = deque.getFirst();\n    expect(res).assertEqual(\" \"", "    let res = deque.getFirst();\n    expect(res).assertEqual(und", "    let res = deque.getLast();\n    expect(res).assertEqual(8);\n", "    let res = deque.getFirst();\n    expect(res).assertEqual(a);", "et res = linkedList.get(0);\n    expect(res).assertEqual(\"e\");\n ", "    let res = deque.getLast();\n    expect(res).assertEqual(null", "\n    let res = list.getLastIndexOf(\"f\");\n    expect(res).assert", "    let res = deque.getFirst();\n      expect(res).assertEqual(i", "let res = arrayList.getCapacity();\n    expect(res).assertEqual("], "files": ["ExampleJsunit.test.js", "List.test.js", "LightWeightSet.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "systemParameter", "api_method_name": "get", "api_method_all": "function get(key: string, def: string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 502, "since": 6, "api_used": "\u662f", "lines": ["    let res = deque.getFirst();\n    expect(res).assertEqual(8);", "\n    let res = list.getLastIndexOf(\"a\");\n    expect(res).assert", "et res = linkedList.get(0);\n    expect(res).assertEqual(a);\n   ", "    let res = deque.getLast();\n    expect(res).assertEqual(\" \")", "onfigService = core.getDefaultService('config')\n        configS", "    let res = deque.getLast();\n    expect(res).assertEqual(\"\u4e09\")", "let res = arrayList.getLastIndexOf(1);\n    expect(res).assertEq", "t res1 = linkedList.get(1);\n    expect(res1).assertEqual(a);\n  ", "  const core = Core.getInstance()\n        const expectExtend = ", "    let res = deque.getFirst();\n    expect(res).assertEqual(\"\u4e00\"", "    let res = deque.getLast();\n    expect(res).assertEqual(unde", "  const core = Core.getInstance()\n        core.init()\n        r", "let res = arrayList.getIndexOf(99);\n    let res1 = arrayList.le", "et res = linkedList.get(0);\n    expect(res).assertEqual(a);\n  }", "    let res = deque.getFirst();\n    expect(res).assertEqual(\"$\"", "et res = linkedList.get(0);\n    expect(res).assertEqual(8);\n  }", "    let res = deque.getLast();\n    expect(res).assertEqual(\"$\")", "et res1 = arrayList.getLastIndexOf(1);\n    expect(res).assertEq", "et res = linkedList.get(0);\n    expect(res).assertEqual(\"\u56db\");\n ", "    let res = deque.getFirst();\n    expect(res).assertEqual(\"\u56db\"", "     var info = app.getInfo()\n        expect(info.versionCode).", "    let res = deque.getFirst();\n    expect(res).assertEqual(nul", "\n    let res = list.getIndexOf(\"b\");\n    expect(res).assertEqua", "    let res = deque.getLast();\n      expect(res).assertEqual(i)", "et res1 = arrayList.getIndexOf(1);\n    expect(res1).assertEqual", "    let res = deque.getLast();\n    expect(res).assertEqual(a);\n", "\n    let res = list.getIndexOf(\"f\");\n    expect(res).assertEqua", "let res = arrayList.getIndexOf(\"A\");\n    expect(res).assertEqua", "    let res = deque.getFirst();\n    expect(res).assertEqual(\" \"", "    let res = deque.getFirst();\n    expect(res).assertEqual(und", "    let res = deque.getLast();\n    expect(res).assertEqual(8);\n", "    let res = deque.getFirst();\n    expect(res).assertEqual(a);", "et res = linkedList.get(0);\n    expect(res).assertEqual(\"e\");\n ", "    let res = deque.getLast();\n    expect(res).assertEqual(null", "\n    let res = list.getLastIndexOf(\"f\");\n    expect(res).assert", "    let res = deque.getFirst();\n      expect(res).assertEqual(i", "let res = arrayList.getCapacity();\n    expect(res).assertEqual("], "files": ["ExampleJsunit.test.js", "List.test.js", "LightWeightSet.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "systemParameter", "api_method_name": "get", "api_method_all": "function get(key: string, def?: string): Promise<string>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 15, "since": 6, "api_used": "\u662f", "lines": ["        await child.getErrorOutput().then(val=>{\n            fo", "        await child.getOutput().then(val=>{\n            for (le"], "files": ["Process.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "systemParameter", "api_method_name": "setSync", "api_method_all": "function setSync(key: string, value: string): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "systemParameter", "api_method_name": "set", "api_method_all": "function set(key: string, value: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 666, "since": 6, "api_used": "\u662f", "lines": ["\n    let res = list.set(2, \"d\");\n    let res1 = list.get(2);\n  ", ", \"D\");\n    hashMap.set(5, \"E\");\n    let res = hashMap.get(3);\n", "hMap();\n    hashMap.set(1, \"A\");\n    let res = hashMap.get(1);\n", " try {\n      vector.set(12, \"\u4e8c\");\n    } catch (err) {\n      exp", ", \"D\");\n    hashMap.set(5, \"E\");\n    let res = hashMap.hasKey(3", ", \"C\");\n    hashMap.set(4, \"D\");\n    hashMap.set(5, \"E\");\n    l", "hMap();\n    hashMap.set(1, \"A\");\n    hashMap.set(2, \"B\");\n    h", "hMap();\n    hashMap.set(3.14, \"A\");\n    let res = hashMap.get(3", "add(14);\n    vector.setLength(7);\n    let res1 = vector.length;", ", \"D\");\n    hashMap.set(5, \"E\");\n    let res = hashMap.hasValue", "hMap();\n    hashMap.set(1, 2);\n    let res = hashMap.get(1);\n  ", ", \"A\");\n    hashMap.set(2, \"B\");\n    hashMap.set(3, \"C\");\n    h", ".add(1);\n    vector.setLength(5);\n    let res1 = vector.length;", ", \"D\");\n    hashMap.set(5, \"E\");\n    let res = hashMap.length;\n", " 2, 3];\n    hashMap.set(1, c);\n    let res = hashMap.get(1);\n  ", ", \"B\");\n    hashMap.set(3, \"C\");\n    hashMap.set(4, \"D\");\n    h", "hMap();\n    hashMap.set(0.3, \"A\");\n    let res = hashMap.get(0.", " \"13\"};\n    hashMap.set(1, c);\n    let res = hashMap.get(1);\n  ", "hMap();\n    hashMap.set(1, -1);\n    let res = hashMap.get(1);\n ", "hMap();\n    hashMap.set(\"a\", \"A\");\n    let res = hashMap.get(\"a", "t(8, 2);\n    vector.set(1, \"\u4e8c\");\n    let res = vector.get(1);\n ", "a = {};\n    hashMap.set(1, a);\n    let res = hashMap.get(1);\n  ", "hMap();\n    hashMap.set(\"$\", \"A\");\n    let res = hashMap.get(\"$", "hMap();\n    hashMap.set(-1, \"A\");\n    let res = hashMap.get(-1)", "hMap();\n    hashMap.set(\"\", \"A\");\n    let res = hashMap.get(\"\")", "hMap();\n    hashMap.set(1, null);\n    let res = hashMap.get(1);", "rtEqual(\"ArrayList: set out-of-bounds\");\n      } else {\n       ", "hMap();\n    hashMap.set(1, \"$\");\n    let res = hashMap.get(1);\n", "++) {\n      hashMap.set(i, 1);\n      let res = hashMap.get(i);\n", "hMap();\n    hashMap.set(1, 3.14);\n    let res = hashMap.get(1);", "      configService.setConfig(this)\n\n        require('../../tes", "++) {\n      hashMap.set(1, i);\n    }\n    let res = hashMap.get(", "a = {};\n    hashMap.set(a, \"A\");\n    let res = hashMap.get(a);\n"], "files": ["List.test.js", "LinkedList.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "systemParameter", "api_method_name": "set", "api_method_all": "function set(key: string, value: string): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}