{"subsystem_ch": "\u5168\u7403\u5316\u5b50\u7cfb\u7edf", "subsystem_en": "global", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.intl", "api": [{"api_class_name": "intl", "api_method_all": "declare namespace intl {\r\n\r\nexport interface LocaleOptions {\r\n    \r\n    calendar: string;\r\n\r\n    \r\n    collation: string;\r\n    \r\n    \r\n    hourCycle: string;\r\n    \r\n    \r\n    numberingSystem: string;\r\n    \r\n    \r\n    numeric: boolean;\r\n    \r\n    \r\n    caseFirst: string;\r\n}\r\n\r\n\r\nexport class Locale {\r\n    \r\n   constructor();\r\n\r\n    \r\n   constructor(locale: string, options?: LocaleOptions);\r\n\r\n    \r\n    language: string\r\n\r\n    \r\n    script: string\r\n\r\n    \r\n    region: string\r\n\r\n    \r\n    baseName: string\r\n\r\n    \r\n    caseFirst: string\r\n\r\n    \r\n    calendar: string\r\n\r\n    \r\n    collation: string\r\n\r\n    \r\n    hourCycle:  string\r\n\r\n    \r\n    numberingSystem: string\r\n\r\n    \r\n    numeric: boolean\r\n\r\n    \r\n    toString(): string;\r\n\r\n    \r\n    maximize(): Locale;\r\n\r\n    \r\n    minimize(): Locale;\r\n}\r\n\r\n\r\nexport interface DateTimeOptions {\r\n    \r\n    locale: string\r\n\r\n    \r\n    dateStyle: string\r\n\r\n    \r\n    timeStyle: string\r\n\r\n    \r\n    hourCycle: string\r\n\r\n    \r\n    timeZone: string\r\n\r\n    \r\n    numberingSystem: string\r\n\r\n    \r\n    hour12: boolean\r\n\r\n    \r\n    weekday: string\r\n\r\n    \r\n    era: string\r\n\r\n    \r\n    year: string\r\n\r\n    \r\n    month: string\r\n\r\n    \r\n    day: string\r\n\r\n    \r\n    hour: string\r\n\r\n    \r\n    minute: string\r\n\r\n    \r\n    second: string\r\n\r\n    \r\n    timeZoneName: string\r\n\r\n    \r\n    dayPeriod: string\r\n\r\n    \r\n    localeMatcher: string\r\n\r\n    \r\n    formatMatcher: string\r\n}\r\n\r\n\r\nexport class DateTimeFormat {\r\n    \r\n    constructor();\r\n\r\n    \r\n    constructor(locale: string | Array<string>, options?: DateTimeOptions);\r\n\r\n    \r\n    format(date: Date): string;\r\n\r\n    \r\n    formatRange(startDate: Date, endDate: Date): string;\r\n\r\n    \r\n    resolvedOptions(): DateTimeOptions;\r\n}\r\n\r\n\r\nexport interface NumberOptions {\r\n    \r\n    locale: string\r\n\r\n    \r\n    currency: string\r\n\r\n    \r\n    currencySign: string\r\n\r\n    \r\n    currencyDisplay: string\r\n\r\n    \r\n    unit: string\r\n\r\n    \r\n    unitDisplay: string\r\n\r\n    \r\n    unitUsage: string\r\n\r\n    \r\n    signDisplay: string\r\n\r\n    \r\n    compactDisplay: string\r\n\r\n    \r\n    notation: string\r\n\r\n    \r\n    localeMatcher: string\r\n\r\n    \r\n    style: string\r\n\r\n    \r\n    numberingSystem: string\r\n\r\n    \r\n    useGrouping: boolean\r\n\r\n    \r\n    minimumIntegerDigits: number\r\n\r\n    \r\n    minimumFractionDigits: number\r\n\r\n    \r\n    maximumFractionDigits: number\r\n\r\n    \r\n    minimumSignificantDigits: number\r\n\r\n    \r\n    maximumSignificantDigits: number\r\n}\r\n\r\n\r\nexport class NumberFormat {\r\n    \r\n    constructor();\r\n\r\n    \r\n    constructor(locale: string | Array<string>, options?: NumberOptions);\r\n\r\n    \r\n    format(number: number): string;\r\n\r\n    \r\n    resolvedOptions(): NumberOptions;\r\n}\r\n\r\n\r\nexport interface CollatorOptions {\r\n    \r\n    localeMatcher: string;\r\n\r\n    \r\n    usage: string;\r\n\r\n    \r\n    sensitivity: string;\r\n\r\n    \r\n    ignorePunctuation: boolean;\r\n\r\n    \r\n    collation: string;\r\n\r\n    \r\n    numeric: boolean;\r\n\r\n    \r\n    caseFirst: string;\r\n}\r\n\r\n\r\nexport class Collator {\r\n    \r\n    constructor();\r\n    \r\n    constructor(locale: string | Array<string>, options?: CollatorOptions);\r\n\r\n    \r\n    compare(first: string, second: string): number;\r\n\r\n    \r\n    resolvedOptions(): CollatorOptions;\r\n}\r\n\r\n\r\nexport interface PluralRulesOptions {\r\n    \r\n    localeMatcher: string;\r\n\r\n    \r\n    type: string;\r\n\r\n    \r\n    minimumIntegerDigits: number;\r\n\r\n    \r\n    minimumFractionDigits: number;\r\n\r\n    \r\n    maximumFractionDigits: number;\r\n\r\n    \r\n    minimumSignificantDigits: number;\r\n\r\n    \r\n    maximumSignificantDigits: number;\r\n}\r\n\r\n\r\nexport class PluralRules {\r\n    \r\n    constructor();\r\n\r\n    \r\n    constructor(locale: string | Array<string>, options?: PluralRulesOptions);\r\n\r\n    \r\n    select(n: number): string;\r\n}\r\n\r\n\r\n export interface RelativeTimeFormatInputOptions {\r\n    \r\n    localeMatcher: string;\r\n\r\n    \r\n    numeric: string;\r\n\r\n    \r\n    style: string;\r\n}\r\n\r\n\r\nexport interface RelativeTimeFormatResolvedOptions {\r\n    \r\n    locale: string;\r\n\r\n    \r\n    style: string;\r\n\r\n    \r\n    numeric: string;\r\n\r\n    \r\n    numberingSystem: string;\r\n}\r\n\r\n\r\nexport class RelativeTimeFormat {\r\n    \r\n    constructor();\r\n\r\n    \r\n    constructor(locale: string | Array<string>, options?: RelativeTimeFormatInputOptions);\r\n\r\n    \r\n    format(value: number, unit: string): string;\r\n\r\n    \r\n    formatToParts(value: number, unit: string): Array<object>;\r\n\r\n    \r\n    resolvedOptions(): RelativeTimeFormatResolvedOptions;\r\n}\r\n}", "api_method_name": "intl", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["t/index'\n\ndescribe('intlTest', function () {", "'@ohos.i18n'\nimport intl from '@ohos.intl'\ni", "rt intl from '@ohos.intl'\nimport {describe, ", " after all cases in intl.'\n        + ' 24hou", "rt Intl from '@ohos.intl'\nimport {describe, ", "efore every case in intl.');\n    })\n\n    \n  ", "before all cases in intl.'\n        + ' 24hou"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LocaleOptions", "api_method_all": "export interface LocaleOptions {\r\n    \r\n    calendar: string;\r\n\r\n    \r\n    collation: string;\r\n    \r\n    \r\n    hourCycle: string;\r\n    \r\n    \r\n    numberingSystem: string;\r\n    \r\n    \r\n    numeric: boolean;\r\n    \r\n    \r\n    caseFirst: string;\r\n}", "api_method_name": "LocaleOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocaleOptions", "api_method_name": "calendar", "api_method_all": "calendar: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 134, "since": 6, "api_used": "\u662f", "lines": ["ndar('zh');\n        calendar.setFirstDayOfWeek(0", "        let value = calendar.getMinimalDaysInFir", "        let value = calendar.getTimeZone();\n    ", "        let value = calendar.get('day_of_year');", "tart');\n        let calendar = I18n.getCalendar(", "        let value = calendar.getFirstDayOfWeek()", "        let value = calendar.getDisplayName('zh'", "\n        let name = calendar.getDisplayName('ja'", "ndar('zh');\n        calendar.setFirstDayOfWeek(1", "     let firstday = calendar.getFirstDayOfWeek()", ", 8, 8, 8);\n        calendar.setTime(date1);\n   ", "      let miniday = calendar.getMinimalDaysInFir", "        let value = calendar.get('month');\n     ", "ndar('zh');\n        calendar.setFirstDayOfWeek(8", "     let timezone = calendar.getTimeZone();\n    ", "        let value = calendar.get('year');\n      ", "ndar('zh');\n        calendar.setTimeZone('Asia/S", "ndar('zh');\n        calendar.setMinimalDaysInFir", "        let value = calendar.isWeekend(new Date(", "        let value = calendar.getDisplayName('en'", "ndar('zh');\n        calendar.setFirstDayOfWeek(7", "\n        let name = calendar.getDisplayName('zh'"], "files": ["I18n.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LocaleOptions", "api_method_name": "collation", "api_method_all": "collation: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 17, "since": 6, "api_used": "\u662f", "lines": ["      expect(locale.collation).assertEqual('big5h", "cale('ja-Jpan-JP', {collation: 'big5han'});\n     ", "alendar: 'gregory', collation: 'compact'});\n     ", "* @tc.name test the collation\n    * @tc.desc chec", "tl.Collator('zh', {'collation': 'eor'});\n        ", " @tc.desc check the collation\n    */\n    it('loca", "h zh locale and eor collation\n    * @tc.desc chec", "l.resolvedOptions().collation).assertEqual('eor')", "est_1200 ' + locale.collation);\n        expect(lo"], "files": ["Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LocaleOptions", "api_method_name": "hourCycle", "api_method_all": "hourCycle: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 6, "api_used": "\u662f", "lines": ["      expect(locale.hourCycle).assertEqual('h12')", "short',\n            hourCycle: 'h24',numberingSys", "est_1000 ' + locale.hourCycle);\n        expect(lo", "t.resolvedOptions().hourCycle).assertEqual('h24')", "      expect(locale.hourCycle).assertEqual('h24')", "est_0700 ' + locale.hourCycle);\n        expect(lo", "tl.Locale('zh-CN', {hourCycle: 'h24', calendar: '"], "files": ["Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LocaleOptions", "api_method_name": "numberingSystem", "api_method_all": "numberingSystem: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 6, "api_used": "\u662f", "lines": ["* @tc.name test the numberingSystem\n    * @tc.desc chec", "cale('ja-Jpan-JP', {numberingSystem: 'arab'});\n        ", "rmat_0800 ' + value.numberingSystem);\n        expect(va", " @tc.desc check the numberingSystem\n    */\n    it('loca", "erFormat('ar-EG', { numberingSystem: 'arab' });\n       ", "t.resolvedOptions().numberingSystem).assertEqual('arab'", "       expect(value.numberingSystem).assertEqual('latn'", "      expect(locale.numberingSystem).assertEqual('arab'", "lativetime, get the numberingSystem options\n    * @tc.d", "est_1400 ' + locale.numberingSystem);\n        expect(lo", "mat the number with numberingSystem\n    * @tc.desc chec", "eck the number with numberingSystem\n    */\n    it('form", "   hourCycle: 'h24',numberingSystem: 'arab', hour12: tr"], "files": ["Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LocaleOptions", "api_method_name": "numeric", "api_method_all": "numeric: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 46, "since": 6, "api_used": "\u662f", "lines": ["cale('ja-Jpan-JP', {numeric: false});\n        c", "cale('ja-Jpan-JP', {numeric: true});\n        co", "      expect(locale.numeric).assertFalse();\n   ", " zh locale and true numeric\n    * @tc.desc chec", "* @tc.name test the numeric with false value\n  ", "       expect(value.numeric).assertEqual('alway", "'2-digit', second: 'numeric', weekday: 'long', ", ").day).assertEqual('numeric');\n        expect(d", "l.resolvedOptions().numeric).assertTrue();\n    ", "est_1350 ' + locale.numeric);\n        expect(lo", " @tc.desc check the numeric\n    */\n    it('loca", "      expect(locale.numeric).assertTrue();\n    ", "t option = { year: 'numeric', month: 'long', da", "       expect(value.numeric).assertEqual('auto'", ".year).assertEqual('numeric');\n    })\n\n    /* *", "onth: 'long', day: 'numeric',\n            hour:", "* @tc.name test the numeric with true value\n   ", "econd).assertEqual('numeric');\n        expect(d", "lativetime, get the numeric options\n    * @tc.d", "tl.Collator('zh', {'numeric': true});\n        l", "                    numeric: 'auto',\n          ", ".hour).assertEqual('numeric');\n    })\n\n    /* *", "\n            hour: 'numeric', minute: '2-digit'", "atcher: 'best fit', numeric: 'auto', style: 'na", "est_1300 ' + locale.numeric);\n        expect(lo", "onth: 'long', day: 'numeric', weekday: 'long' }"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LocaleOptions", "api_method_name": "caseFirst", "api_method_all": "caseFirst: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 6, "api_used": "\u662f", "lines": ["l.resolvedOptions().caseFirst).assertEqual('upper", "      expect(locale.caseFirst).assertEqual('upper", "cale('ja-Jpan-JP', {caseFirst: 'false'});\n       ", "* @tc.name test the caseFirst with false\n    * @t", "tl.Collator('zh', {'caseFirst': 'upper'});\n      ", "      expect(locale.caseFirst).assertEqual('lower", "      expect(locale.caseFirst).assertEqual('false", "est_1100 ' + locale.caseFirst);\n        expect(lo", "est_1140 ' + locale.caseFirst);\n        expect(lo", "* @tc.name test the caseFirst with lower\n    * @t", "cale('ja-Jpan-JP', {caseFirst: 'lower'});\n       ", " @tc.desc check the caseFirst\n    */\n    it('loca", "est_1120 ' + locale.caseFirst);\n        expect(lo", "zh locale and upper caseFirst\n    * @tc.desc chec", "cale('ja-Jpan-JP', {caseFirst: 'upper'});\n       "], "files": ["Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Locale", "api_method_all": "export class Locale {\r\n    \r\n   constructor();\r\n\r\n    \r\n   constructor(locale: string, options?: LocaleOptions);\r\n\r\n    \r\n    language: string\r\n\r\n    \r\n    script: string\r\n\r\n    \r\n    region: string\r\n\r\n    \r\n    baseName: string\r\n\r\n    \r\n    caseFirst: string\r\n\r\n    \r\n    calendar: string\r\n\r\n    \r\n    collation: string\r\n\r\n    \r\n    hourCycle:  string\r\n\r\n    \r\n    numberingSystem: string\r\n\r\n    \r\n    numeric: boolean\r\n\r\n    \r\n    toString(): string;\r\n\r\n    \r\n    maximize(): Locale;\r\n\r\n    \r\n    minimize(): Locale;\r\n}", "api_method_name": "Locale", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 76, "since": 6, "api_used": "\u662f", "lines": ["t locale = new Intl.Locale('zh-Hans-CN');\n    ", "lue = I18n.setSystemLocale('en-Latn-US');\n    ", ");\n        index.addLocale('en');\n        let ", "t locale = new Intl.Locale('zh-CN');\n        c", "t locale = new Intl.Locale('en-Latn-GB');\n    ", "ale = I18n.getSystemLocale();\n        console.", "lue = I18n.setSystemLocale('');\n        consol", "c.desc check the addLocale interface\n    */\n  ", "t locale = new Intl.Locale('ja-Jpan-JP', {case", "lue = I18n.setSystemLocale('aa');\n        cons", "t locale = new Intl.Locale('zh-Hans-CN-u-ca-gr", "lue = I18n.setSystemLocale('zh-Hans-AA');\n    ", "lue = I18n.setSystemLocale('zh-AAAA');\n       ", "* @tc.name setSystemLocale with null param\n   ", "* @tc.name setSystemLocale with zh-Hans-AA par", ": ' + I18n.getSystemLocale());\n    })\n\n    \n  ", "t locale = new Intl.Locale('zh-CN', {calendar:", "t locale = new Intl.Locale('ja-Jpan-JP', {nume", "t locale = new Intl.Locale('zh', {calendar: 'g", "* @tc.name setSystemLocale with en-Latn-US par", " * @tc.name test addLocale interface\n    * @tc", "t locale = new Intl.Locale('zh');\n        cons", "t locale = new Intl.Locale('zh-Hans-CN-u-ca-ja", "t locale = new Intl.Locale('ja-Jpan-JP-u-ca-ja", "t locale = new Intl.Locale('zh-CN', {hourCycle", "t locale = new Intl.Locale('ja-Jpan-JP', {numb", "t locale = new Intl.Locale('ja-Jpan-JP', {coll", "* @tc.name setSystemLocale with zh-AAAA param\n", "t locale = new Intl.Locale('zh-hans-CN', {cale", "* @tc.name setSystemLocale with aa param\n    *"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Locale", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Locale", "api_method_name": "constructor", "api_method_all": "constructor(locale: string, options?: LocaleOptions)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Locale", "api_method_name": "toString", "api_method_all": "toString(): string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 59, "since": 6, "api_used": "\u662f", "lines": ["est_1700 ' + locale.toString());\n        expect(", " @tc.desc check the toString method with zh-CN\n ", "* @tc.name test the toString interface with zh-H", "t(locale.maximize().toString()).assertEqual('zh-", "est_1900 ' + locale.toString());\n        expect(", " @tc.desc check the toString method with zh-hans", "t(locale.minimize().toString()).assertEqual('zh'", "* @tc.name test the toString interface with zh\n ", "est_1500 ' + locale.toString());\n        expect(", "est_2100 ' + locale.toString());\n        expect(", "* @tc.name test the toString interface with zh-C", " @tc.desc check the toString method with zh-Hans", "      expect(locale.toString()).assertEqual('zh'", "est_2000 ' + locale.toString());\n        expect(", "+ locale.minimize().toString());\n        expect(", "+ locale.maximize().toString());\n        expect(", "est_1800 ' + locale.toString());\n        expect(", "      expect(locale.toString()).assertEqual('zh-", " @tc.desc check the toString method with zh\n    ", "est_1600 ' + locale.toString());\n        expect(", "t(locale.minimize().toString()).assertEqual('zh-", "* @tc.name test the toString interface with zh-h", " @tc.desc check the toString method with zh-CN-u"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Locale", "api_method_name": "maximize", "api_method_all": "maximize(): Locale;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 33, "since": 6, "api_used": "\u662f", "lines": ["* @tc.name test the maximize interface with zh-u", "* @tc.name test the maximize interface with one ", "* @tc.name test the maximize interface with zh l", " @tc.desc check the maximize method with one par", "est_2301 ' + locale.maximize().toString());\n    ", "est_2303 ' + locale.maximize().toString());\n    ", " @tc.desc check the maximize method with zh-Hans", " @tc.desc check the maximize method with zh loca", "est_2306 ' + locale.maximize().toString());\n    ", " @tc.desc check the maximize method with zh-CN l", "      expect(locale.maximize().toString()).asser", " the performance of maximize\n    * @tc.desc chec", "   locale2 = locale.maximize();\n        }\n      ", " the performance of maximize\n    */\n    it('perf", "* @tc.name test the maximize interface with zh-H", " @tc.desc check the maximize method with zh-u-ca", "est_2302 ' + locale.maximize().toString());\n    ", "est_2304 ' + locale.maximize().toString());\n    ", "* @tc.name test the maximize interface with zh-C", "est_2300 ' + locale.maximize().toString());\n    ", "est_2305 ' + locale.maximize().toString());\n    "], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Locale", "api_method_name": "minimize", "api_method_all": "minimize(): Locale;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 31, "since": 6, "api_used": "\u662f", "lines": ["est_2202 ' + locale.minimize().toString());\n    ", "      expect(locale.minimize().toString()).asser", "   locale2 = locale.minimize();\n        }\n      ", "est_2206 ' + locale.minimize().toString());\n    ", "* @tc.name test the minimize interface with zh l", "est_2205 ' + locale.minimize().toString());\n    ", "est_2201 ' + locale.minimize().toString());\n    ", " @tc.desc check the minimize method with zh-CN l", "* @tc.name test the minimize interface with zh-C", "* @tc.name test the minimize interface with zh-H", " @tc.desc check the minimize method with zh-Hans", "est_2203 ' + locale.minimize().toString());\n    ", " @tc.desc check the minimize method with one par", "* @tc.name test the minimize interface with one ", " the performance of minimize\n    */\n    it('perf", "est_2204 ' + locale.minimize().toString());\n    ", "est_2200 ' + locale.minimize().toString());\n    ", " the performance of minimize\n    * @tc.desc chec", " @tc.desc check the minimize method with zh lcoa"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DateTimeOptions", "api_method_all": "export interface DateTimeOptions {\r\n    \r\n    locale: string\r\n\r\n    \r\n    dateStyle: string\r\n\r\n    \r\n    timeStyle: string\r\n\r\n    \r\n    hourCycle: string\r\n\r\n    \r\n    timeZone: string\r\n\r\n    \r\n    numberingSystem: string\r\n\r\n    \r\n    hour12: boolean\r\n\r\n    \r\n    weekday: string\r\n\r\n    \r\n    era: string\r\n\r\n    \r\n    year: string\r\n\r\n    \r\n    month: string\r\n\r\n    \r\n    day: string\r\n\r\n    \r\n    hour: string\r\n\r\n    \r\n    minute: string\r\n\r\n    \r\n    second: string\r\n\r\n    \r\n    timeZoneName: string\r\n\r\n    \r\n    dayPeriod: string\r\n\r\n    \r\n    localeMatcher: string\r\n\r\n    \r\n    formatMatcher: string\r\n}", "api_method_name": "DateTimeOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DateTimeFormat", "api_method_all": "export class DateTimeFormat {\r\n    \r\n    constructor();\r\n\r\n    \r\n    constructor(locale: string | Array<string>, options?: DateTimeOptions);\r\n\r\n    \r\n    format(date: Date): string;\r\n\r\n    \r\n    formatRange(startDate: Date, endDate: Date): string;\r\n\r\n    \r\n    resolvedOptions(): DateTimeOptions;\r\n}", "api_method_name": "DateTimeFormat", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 41, "since": 6, "api_used": "\u662f", "lines": [" datefmt = new Intl.DateTimeFormat('en-US');\n        c", " the performance of DateTimeFormat.format\n    */\n    i", " datefmt = new Intl.DateTimeFormat('zh-CN-u-hc-h12', o", " the performance of DateTimeFormat.formatRange\n    */\n", " datefmt = new Intl.DateTimeFormat();\n        expect(d", " datefmt = new Intl.DateTimeFormat('zh');\n        cons", " datefmt = new Intl.DateTimeFormat('ja', option);\n    ", " the performance of DateTimeFormat.format\n    * @tc.de", " datefmt = new Intl.DateTimeFormat('en-GB');\n        c", " the performance of DateTimeFormat\n    */\n    it('perf", " datefmt = new Intl.DateTimeFormat('en', option);\n    ", " datefmt = new Intl.DateTimeFormat(['abc', 'ban'], opt", " the performance of DateTimeFormat.formatRange\n    * @", " datefmt = new Intl.DateTimeFormat('en');\n        cons", " datefmt = new Intl.DateTimeFormat('zh-CN', option);\n ", " datefmt = new Intl.DateTimeFormat(['en', 'zh'], optio", " datefmt = new Intl.DateTimeFormat('fr-Latn-FR-u-nu-mo", " the performance of DateTimeFormat\n    * @tc.desc chec", " datefmt = new Intl.DateTimeFormat('en-GB');\n        l", " datefmt = new Intl.DateTimeFormat('aa');\n        let ", " the performance of DateTimeFormat.resolvedOptions\n   ", " datefmt = new Intl.DateTimeFormat('zh-Hans-CN', optio", " datefmt = new Intl.DateTimeFormat(['ban', 'zh'], opti", " datefmt = new Intl.DateTimeFormat('en-GB');\n        e", " datefmt = new Intl.DateTimeFormat('en-GB');\n        }", " datefmt = new Intl.DateTimeFormat(['en', 'ban'], opti", " datefmt = new Intl.DateTimeFormat('zh');\n        let "], "files": ["Perf.test.js", "Lang.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DateTimeFormat", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DateTimeFormat", "api_method_name": "constructor", "api_method_all": "constructor(locale: string | Array<string>, options?: DateTimeOptions)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DateTimeFormat", "api_method_name": "format", "api_method_all": "format(date: Date): string;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 285, "since": 6, "api_used": "\u662f", "lines": ["0100\n    * @tc.name format the datetime with e", "st_0300 ' + datefmt.format(date));\n        exp", "0310\n    * @tc.name format the date with en-US", "value = phonenumber.format('135105746' + ran);", "let value = datefmt.format(date);\n        cons", "st_0200 ' + datefmt.format(date));\n        exp", "value = phonenumber.format('135 1057 467' + ra", "    * @tc.name test format interface with 135 ", "0300\n    * @tc.name format the date with en lo", "st_0700 ' + datefmt.format(date));\n        exp", "0600\n    * @tc.name format the hour with en an", "     expect(datefmt.format(date)).assertEqual(", "0700\n    * @tc.name format the hour with en an", "    * @tc.name test format interface with 1351", "0120\n    * @tc.name format the datetime with e", "value = phonenumber.format('13510574676' + ran", "value = phonenumber.format('626202337' + ran);", "0320\n    * @tc.name format the date with en-GB", "st_0600 ' + datefmt.format(date));\n        exp", "0200\n    * @tc.name format the date with zh lo", "    * @tc.name test format interface with 6262", "st_0310 ' + datefmt.format(date));\n        exp", "st_0500 ' + datefmt.format(date));\n        exp", "0500\n    * @tc.name format the hour with ban a", "st_0320 ' + datefmt.format(date));\n        exp", "0400\n    * @tc.name format the date with aa lo", "value = phonenumber.format('1351057467' + ran)"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DateTimeFormat", "api_method_name": "formatRange", "api_method_all": "formatRange(startDate: Date, endDate: Date): string;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 9, "since": 6, "api_used": "\u662f", "lines": ["    value = datefmt.formatRange(startdate, enddate)", "st_1300 ' + datefmt.formatRange(startdate, enddate)", "st_1400 ' + datefmt.formatRange(startdate, enddate)", "     expect(datefmt.formatRange(startdate, enddate)", "e of DateTimeFormat.formatRange\n    */\n    it('perf", "st_1600 ' + datefmt.formatRange(startdate, enddate)", "e of DateTimeFormat.formatRange\n    * @tc.desc chec"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DateTimeFormat", "api_method_name": "resolvedOptions", "api_method_all": "resolvedOptions(): DateTimeOptions;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 82, "since": 6, "api_used": "\u662f", "lines": ["      expect(numfmt.resolvedOptions().signDisplay).asse", "      expect(numfmt.resolvedOptions().notation).assertE", "st_1200 ' + datefmt.resolvedOptions().dateStyle);\n     ", "      expect(numfmt.resolvedOptions().compactDisplay).a", "     expect(datefmt.resolvedOptions().hour).assertEqual", "      expect(numfmt.resolvedOptions().unit).assertEqual", "     expect(datefmt.resolvedOptions().hourCycle).assert", "     expect(datefmt.resolvedOptions().numberingSystem).", "     expect(datefmt.resolvedOptions().day).assertEqual(", "      expect(numfmt.resolvedOptions().unitDisplay).asse", "st_1900 ' + datefmt.resolvedOptions().timeZone);\n      ", "     expect(datefmt.resolvedOptions().year).assertEqual", "     expect(datefmt.resolvedOptions().era).assertEqual(", "      expect(numfmt.resolvedOptions().numberingSystem).", "      expect(numfmt.resolvedOptions().locale).assertEqu", "      expect(numfmt.resolvedOptions().currency).assertE", "     expect(datefmt.resolvedOptions().dateStyle).assert", "st_2000 ' + datefmt.resolvedOptions().timeZoneName);\n  ", "     expect(datefmt.resolvedOptions().minute).assertEqu", "st_2100 ' + datefmt.resolvedOptions().year);\n        ex", "      expect(numfmt.resolvedOptions().style).assertEqua", "     expect(datefmt.resolvedOptions().timeZoneName).ass", "      expect(numfmt.resolvedOptions().currencyDisplay).", "      expect(numfmt.resolvedOptions().localeMatcher).as", "     expect(datefmt.resolvedOptions().dayPeriod).assert", "     expect(datefmt.resolvedOptions().formatMatcher).as", "     expect(datefmt.resolvedOptions().hour12).assertTru", "     expect(datefmt.resolvedOptions().localeMatcher).as", "est_2500 ' + numfmt.resolvedOptions().style);\n        e", "     expect(datefmt.resolvedOptions().month).assertEqua", "st_2300 ' + datefmt.resolvedOptions().hour);\n        ex", "     expect(datefmt.resolvedOptions().timeZone).assertE", "st_1000 ' + datefmt.resolvedOptions().dateStyle);\n     ", "      expect(numfmt.resolvedOptions().currencySign).ass", "     expect(datefmt.resolvedOptions().second).assertEqu", "     expect(datefmt.resolvedOptions().locale).assertEqu", "     expect(datefmt.resolvedOptions().weekday).assertEq", "st_2200 ' + datefmt.resolvedOptions().weekday);\n       ", "      expect(numfmt.resolvedOptions().unitUsage).assert", "st_1100 ' + datefmt.resolvedOptions().dateStyle);\n     "], "files": ["Perf.test.js", "Lang.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NumberOptions", "api_method_all": "export interface NumberOptions {\r\n    \r\n    locale: string\r\n\r\n    \r\n    currency: string\r\n\r\n    \r\n    currencySign: string\r\n\r\n    \r\n    currencyDisplay: string\r\n\r\n    \r\n    unit: string\r\n\r\n    \r\n    unitDisplay: string\r\n\r\n    \r\n    unitUsage: string\r\n\r\n    \r\n    signDisplay: string\r\n\r\n    \r\n    compactDisplay: string\r\n\r\n    \r\n    notation: string\r\n\r\n    \r\n    localeMatcher: string\r\n\r\n    \r\n    style: string\r\n\r\n    \r\n    numberingSystem: string\r\n\r\n    \r\n    useGrouping: boolean\r\n\r\n    \r\n    minimumIntegerDigits: number\r\n\r\n    \r\n    minimumFractionDigits: number\r\n\r\n    \r\n    maximumFractionDigits: number\r\n\r\n    \r\n    minimumSignificantDigits: number\r\n\r\n    \r\n    maximumSignificantDigits: number\r\n}", "api_method_name": "NumberOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NumberFormat", "api_method_all": "export class NumberFormat {\r\n    \r\n    constructor();\r\n\r\n    \r\n    constructor(locale: string | Array<string>, options?: NumberOptions);\r\n\r\n    \r\n    format(number: number): string;\r\n\r\n    \r\n    resolvedOptions(): NumberOptions;\r\n}", "api_method_name": "NumberFormat", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 71, "since": 6, "api_used": "\u662f", "lines": ["t numfmt = new Intl.NumberFormat(['en','aa']);\n     ", "t numfmt = new Intl.NumberFormat('zh-u-nu-latn');\n  ", "t numfmt = new Intl.NumberFormat(['zh','en']);\n     ", "t numfmt = new Intl.NumberFormat('en-u-nu-thai');\n  ", "t numfmt = new Intl.NumberFormat('zh-u-nu-arab');\n  ", "t numfmt = new Intl.NumberFormat(['aa','zh']);\n     ", "ber = new I18n.PhoneNumberFormat('CN', {'type': 'RFC", "ber = new I18n.PhoneNumberFormat('CN', {'type': 'NAT", "t numfmt = new Intl.NumberFormat();\n        expect(n", "t numfmt = new Intl.NumberFormat(['aa','bb','es']);\n", "ber = new I18n.PhoneNumberFormat('US', {'type': 'INT", "ber = new I18n.PhoneNumberFormat('CN', {'type': 'E16", "t numfmt = new Intl.NumberFormat(['aa','bb']);\n     ", "ber = new I18n.PhoneNumberFormat('US', {'type': 'RFC", "ber = new I18n.PhoneNumberFormat('US', {'type': 'E16", "ber = new I18n.PhoneNumberFormat('US', {'type': 'NAT", "ber = new I18n.PhoneNumberFormat('CN');\n        let ", "ber = new I18n.PhoneNumberFormat('US');\n        let ", "t numfmt = new Intl.NumberFormat('zh');\n        cons", "ber = new I18n.PhoneNumberFormat('CN', {'type': 'INT", "t numfmt = new Intl.NumberFormat('en-US', { style: '", "t numfmt = new Intl.NumberFormat('en');\n        cons", "t numfmt = new Intl.NumberFormat('zh-CN', { style: '", "t numfmt = new Intl.NumberFormat('en-GB');\n        c", "t numfmt = new Intl.NumberFormat(['en','zh']);\n     ", "t numfmt = new Intl.NumberFormat(['aa','it','bb']);\n", "t numfmt = new Intl.NumberFormat('aa');\n        cons", "t numfmt = new Intl.NumberFormat('en-US');\n        c", "t numfmt = new Intl.NumberFormat('en-GB', { style: '"], "files": ["I18n.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NumberFormat", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NumberFormat", "api_method_name": "constructor", "api_method_all": "constructor(locale: string | Array<string>, options?: NumberOptions)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NumberFormat", "api_method_name": "format", "api_method_all": "format(number: number): string;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 285, "since": 6, "api_used": "\u662f", "lines": ["0100\n    * @tc.name format the datetime with e", "st_0300 ' + datefmt.format(date));\n        exp", "0310\n    * @tc.name format the date with en-US", "value = phonenumber.format('135105746' + ran);", "let value = datefmt.format(date);\n        cons", "st_0200 ' + datefmt.format(date));\n        exp", "value = phonenumber.format('135 1057 467' + ra", "    * @tc.name test format interface with 135 ", "0300\n    * @tc.name format the date with en lo", "st_0700 ' + datefmt.format(date));\n        exp", "0600\n    * @tc.name format the hour with en an", "     expect(datefmt.format(date)).assertEqual(", "0700\n    * @tc.name format the hour with en an", "    * @tc.name test format interface with 1351", "0120\n    * @tc.name format the datetime with e", "value = phonenumber.format('13510574676' + ran", "value = phonenumber.format('626202337' + ran);", "0320\n    * @tc.name format the date with en-GB", "st_0600 ' + datefmt.format(date));\n        exp", "0200\n    * @tc.name format the date with zh lo", "    * @tc.name test format interface with 6262", "st_0310 ' + datefmt.format(date));\n        exp", "st_0500 ' + datefmt.format(date));\n        exp", "0500\n    * @tc.name format the hour with ban a", "st_0320 ' + datefmt.format(date));\n        exp", "0400\n    * @tc.name format the date with aa lo", "value = phonenumber.format('1351057467' + ran)"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NumberFormat", "api_method_name": "resolvedOptions", "api_method_all": "resolvedOptions(): NumberOptions;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 82, "since": 6, "api_used": "\u662f", "lines": ["      expect(numfmt.resolvedOptions().signDisplay).asse", "      expect(numfmt.resolvedOptions().notation).assertE", "st_1200 ' + datefmt.resolvedOptions().dateStyle);\n     ", "      expect(numfmt.resolvedOptions().compactDisplay).a", "     expect(datefmt.resolvedOptions().hour).assertEqual", "      expect(numfmt.resolvedOptions().unit).assertEqual", "     expect(datefmt.resolvedOptions().hourCycle).assert", "     expect(datefmt.resolvedOptions().numberingSystem).", "     expect(datefmt.resolvedOptions().day).assertEqual(", "      expect(numfmt.resolvedOptions().unitDisplay).asse", "st_1900 ' + datefmt.resolvedOptions().timeZone);\n      ", "     expect(datefmt.resolvedOptions().year).assertEqual", "     expect(datefmt.resolvedOptions().era).assertEqual(", "      expect(numfmt.resolvedOptions().numberingSystem).", "      expect(numfmt.resolvedOptions().locale).assertEqu", "      expect(numfmt.resolvedOptions().currency).assertE", "     expect(datefmt.resolvedOptions().dateStyle).assert", "st_2000 ' + datefmt.resolvedOptions().timeZoneName);\n  ", "     expect(datefmt.resolvedOptions().minute).assertEqu", "st_2100 ' + datefmt.resolvedOptions().year);\n        ex", "      expect(numfmt.resolvedOptions().style).assertEqua", "     expect(datefmt.resolvedOptions().timeZoneName).ass", "      expect(numfmt.resolvedOptions().currencyDisplay).", "      expect(numfmt.resolvedOptions().localeMatcher).as", "     expect(datefmt.resolvedOptions().dayPeriod).assert", "     expect(datefmt.resolvedOptions().formatMatcher).as", "     expect(datefmt.resolvedOptions().hour12).assertTru", "     expect(datefmt.resolvedOptions().localeMatcher).as", "est_2500 ' + numfmt.resolvedOptions().style);\n        e", "     expect(datefmt.resolvedOptions().month).assertEqua", "st_2300 ' + datefmt.resolvedOptions().hour);\n        ex", "     expect(datefmt.resolvedOptions().timeZone).assertE", "st_1000 ' + datefmt.resolvedOptions().dateStyle);\n     ", "      expect(numfmt.resolvedOptions().currencySign).ass", "     expect(datefmt.resolvedOptions().second).assertEqu", "     expect(datefmt.resolvedOptions().locale).assertEqu", "     expect(datefmt.resolvedOptions().weekday).assertEq", "st_2200 ' + datefmt.resolvedOptions().weekday);\n       ", "      expect(numfmt.resolvedOptions().unitUsage).assert", "st_1100 ' + datefmt.resolvedOptions().dateStyle);\n     "], "files": ["Perf.test.js", "Lang.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CollatorOptions", "api_method_all": "export interface CollatorOptions {\r\n    \r\n    localeMatcher: string;\r\n\r\n    \r\n    usage: string;\r\n\r\n    \r\n    sensitivity: string;\r\n\r\n    \r\n    ignorePunctuation: boolean;\r\n\r\n    \r\n    collation: string;\r\n\r\n    \r\n    numeric: boolean;\r\n\r\n    \r\n    caseFirst: string;\r\n}", "api_method_name": "CollatorOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CollatorOptions", "api_method_name": "localeMatcher", "api_method_all": "localeMatcher: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["are the string with localeMatcher options\n    * @tc.d", "t.resolvedOptions().localeMatcher).assertEqual('looku", "actDisplay: 'long', localeMatcher: 'lookup' });\n     ", "PluralRules('zh', {'localeMatcher': 'lookup'});\n     ", "l.resolvedOptions().localeMatcher).assertEqual('looku", "e relativetime with localeMatcher options\n    * @tc.d", "tl.Collator('zh', {'localeMatcher': 'lookup'});\n     ", "h locale and loolup localeMatcher\n    * @tc.desc chec", "eTimeFormat('en', { localeMatcher: 'best fit',\n      ", "eTimeFormat('en', { localeMatcher: 'best fit', numeri", "atMatcher: 'basic', localeMatcher: 'lookup' };\n      "], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CollatorOptions", "api_method_name": "usage", "api_method_all": "usage: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["l.resolvedOptions().usage).assertEqual('sort'", "tl.Collator('zh', {'usage': 'sort'});\n       ", " zh locale and sort usage\n    * @tc.desc chec"], "files": ["Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CollatorOptions", "api_method_name": "sensitivity", "api_method_all": "sensitivity: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": [" zh locale and base sensitivity\n    * @tc.desc chec", "l.resolvedOptions().sensitivity).assertEqual('base'", "tl.Collator('zh', {'sensitivity': 'base'});\n       "], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CollatorOptions", "api_method_name": "ignorePunctuation", "api_method_all": "ignorePunctuation: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["tl.Collator('zh', {'ignorePunctuation': true});\n        l", " zh locale and true ignorePunctuation\n    * @tc.desc chec", "l.resolvedOptions().ignorePunctuation).assertTrue();\n    "], "files": ["Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CollatorOptions", "api_method_name": "collation", "api_method_all": "collation: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 17, "since": 6, "api_used": "\u662f", "lines": ["      expect(locale.collation).assertEqual('big5h", "cale('ja-Jpan-JP', {collation: 'big5han'});\n     ", "alendar: 'gregory', collation: 'compact'});\n     ", "* @tc.name test the collation\n    * @tc.desc chec", "tl.Collator('zh', {'collation': 'eor'});\n        ", " @tc.desc check the collation\n    */\n    it('loca", "h zh locale and eor collation\n    * @tc.desc chec", "l.resolvedOptions().collation).assertEqual('eor')", "est_1200 ' + locale.collation);\n        expect(lo"], "files": ["Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CollatorOptions", "api_method_name": "numeric", "api_method_all": "numeric: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 46, "since": 6, "api_used": "\u662f", "lines": ["cale('ja-Jpan-JP', {numeric: false});\n        c", "cale('ja-Jpan-JP', {numeric: true});\n        co", "      expect(locale.numeric).assertFalse();\n   ", " zh locale and true numeric\n    * @tc.desc chec", "* @tc.name test the numeric with false value\n  ", "       expect(value.numeric).assertEqual('alway", "'2-digit', second: 'numeric', weekday: 'long', ", ").day).assertEqual('numeric');\n        expect(d", "l.resolvedOptions().numeric).assertTrue();\n    ", "est_1350 ' + locale.numeric);\n        expect(lo", " @tc.desc check the numeric\n    */\n    it('loca", "      expect(locale.numeric).assertTrue();\n    ", "t option = { year: 'numeric', month: 'long', da", "       expect(value.numeric).assertEqual('auto'", ".year).assertEqual('numeric');\n    })\n\n    /* *", "onth: 'long', day: 'numeric',\n            hour:", "* @tc.name test the numeric with true value\n   ", "econd).assertEqual('numeric');\n        expect(d", "lativetime, get the numeric options\n    * @tc.d", "tl.Collator('zh', {'numeric': true});\n        l", "                    numeric: 'auto',\n          ", ".hour).assertEqual('numeric');\n    })\n\n    /* *", "\n            hour: 'numeric', minute: '2-digit'", "atcher: 'best fit', numeric: 'auto', style: 'na", "est_1300 ' + locale.numeric);\n        expect(lo", "onth: 'long', day: 'numeric', weekday: 'long' }"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CollatorOptions", "api_method_name": "caseFirst", "api_method_all": "caseFirst: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 6, "api_used": "\u662f", "lines": ["l.resolvedOptions().caseFirst).assertEqual('upper", "      expect(locale.caseFirst).assertEqual('upper", "cale('ja-Jpan-JP', {caseFirst: 'false'});\n       ", "* @tc.name test the caseFirst with false\n    * @t", "tl.Collator('zh', {'caseFirst': 'upper'});\n      ", "      expect(locale.caseFirst).assertEqual('lower", "      expect(locale.caseFirst).assertEqual('false", "est_1100 ' + locale.caseFirst);\n        expect(lo", "est_1140 ' + locale.caseFirst);\n        expect(lo", "* @tc.name test the caseFirst with lower\n    * @t", "cale('ja-Jpan-JP', {caseFirst: 'lower'});\n       ", " @tc.desc check the caseFirst\n    */\n    it('loca", "est_1120 ' + locale.caseFirst);\n        expect(lo", "zh locale and upper caseFirst\n    * @tc.desc chec", "cale('ja-Jpan-JP', {caseFirst: 'upper'});\n       "], "files": ["Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Collator", "api_method_all": "export class Collator {\r\n    \r\n    constructor();\r\n    \r\n    constructor(locale: string | Array<string>, options?: CollatorOptions);\r\n\r\n    \r\n    compare(first: string, second: string): number;\r\n\r\n    \r\n    resolvedOptions(): CollatorOptions;\r\n}", "api_method_name": "Collator", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": ["    coll = new Intl.Collator('zh');\n        }\n  ", " the performance of Collator.compare with same p", "let coll = new Intl.Collator('zh', {'sensitivity", "let coll = new Intl.Collator('zh', {'caseFirst':", "let coll = new Intl.Collator('zh');\n        let ", "let coll = new Intl.Collator('zh', {'localeMatch", " the performance of Collator\n    * @tc.desc chec", "let coll = new Intl.Collator();\n        let valu", "let coll = new Intl.Collator('zh', {'usage': 'so", " the performance of Collator.compare\n    */\n    ", " the performance of Collator.resolvedOptions\n   ", " the performance of Collator\n    */\n    it('perf", "let coll = new Intl.Collator('zh', {'numeric': t", "let coll = new Intl.Collator('zh', {'ignorePunct", "let coll = new Intl.Collator('zh', {'collation':", " the performance of Collator.compare\n    * @tc.d"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Collator", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Collator", "api_method_name": "constructor", "api_method_all": "constructor(locale: string | Array<string>, options?: CollatorOptions)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Collator", "api_method_name": "compare", "api_method_all": "compare(first: string, second: string): number;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["3520\n    * @tc.name compare two different strin", "3600\n    * @tc.name compare two different strin", "   let value = coll.compare('b', 'a');\n        ", "4100\n    * @tc.name compare two different strin", "ormance of Collator.compare with same param\n   ", "       value = coll.compare('a', 'b');\n        ", "3700\n    * @tc.name compare two different strin", "   let value = coll.compare('a', 'b');\n        ", "3900\n    * @tc.name compare two different strin", "4200\n    * @tc.name compare two different strin", " @tc.desc check the compare result\n    */\n    i", "3510\n    * @tc.name compare the same strings\n  ", "4000\n    * @tc.name compare two different strin", "4300\n    * @tc.name compare the string with loc", "3500\n    * @tc.name compare two different strin", "   let value = coll.compare('a', 'a');\n        ", "3800\n    * @tc.name compare two different strin", "       value = coll.compare('a', 'a');\n        ", "ormance of Collator.compare\n    * @tc.desc chec", "ormance of Collator.compare\n    */\n    it('perf"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Collator", "api_method_name": "resolvedOptions", "api_method_all": "resolvedOptions(): CollatorOptions;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 82, "since": 6, "api_used": "\u662f", "lines": ["      expect(numfmt.resolvedOptions().signDisplay).asse", "      expect(numfmt.resolvedOptions().notation).assertE", "st_1200 ' + datefmt.resolvedOptions().dateStyle);\n     ", "      expect(numfmt.resolvedOptions().compactDisplay).a", "     expect(datefmt.resolvedOptions().hour).assertEqual", "      expect(numfmt.resolvedOptions().unit).assertEqual", "     expect(datefmt.resolvedOptions().hourCycle).assert", "     expect(datefmt.resolvedOptions().numberingSystem).", "     expect(datefmt.resolvedOptions().day).assertEqual(", "      expect(numfmt.resolvedOptions().unitDisplay).asse", "st_1900 ' + datefmt.resolvedOptions().timeZone);\n      ", "     expect(datefmt.resolvedOptions().year).assertEqual", "     expect(datefmt.resolvedOptions().era).assertEqual(", "      expect(numfmt.resolvedOptions().numberingSystem).", "      expect(numfmt.resolvedOptions().locale).assertEqu", "      expect(numfmt.resolvedOptions().currency).assertE", "     expect(datefmt.resolvedOptions().dateStyle).assert", "st_2000 ' + datefmt.resolvedOptions().timeZoneName);\n  ", "     expect(datefmt.resolvedOptions().minute).assertEqu", "st_2100 ' + datefmt.resolvedOptions().year);\n        ex", "      expect(numfmt.resolvedOptions().style).assertEqua", "     expect(datefmt.resolvedOptions().timeZoneName).ass", "      expect(numfmt.resolvedOptions().currencyDisplay).", "      expect(numfmt.resolvedOptions().localeMatcher).as", "     expect(datefmt.resolvedOptions().dayPeriod).assert", "     expect(datefmt.resolvedOptions().formatMatcher).as", "     expect(datefmt.resolvedOptions().hour12).assertTru", "     expect(datefmt.resolvedOptions().localeMatcher).as", "est_2500 ' + numfmt.resolvedOptions().style);\n        e", "     expect(datefmt.resolvedOptions().month).assertEqua", "st_2300 ' + datefmt.resolvedOptions().hour);\n        ex", "     expect(datefmt.resolvedOptions().timeZone).assertE", "st_1000 ' + datefmt.resolvedOptions().dateStyle);\n     ", "      expect(numfmt.resolvedOptions().currencySign).ass", "     expect(datefmt.resolvedOptions().second).assertEqu", "     expect(datefmt.resolvedOptions().locale).assertEqu", "     expect(datefmt.resolvedOptions().weekday).assertEq", "st_2200 ' + datefmt.resolvedOptions().weekday);\n       ", "      expect(numfmt.resolvedOptions().unitUsage).assert", "st_1100 ' + datefmt.resolvedOptions().dateStyle);\n     "], "files": ["Perf.test.js", "Lang.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRulesOptions", "api_method_all": "export interface PluralRulesOptions {\r\n    \r\n    localeMatcher: string;\r\n\r\n    \r\n    type: string;\r\n\r\n    \r\n    minimumIntegerDigits: number;\r\n\r\n    \r\n    minimumFractionDigits: number;\r\n\r\n    \r\n    maximumFractionDigits: number;\r\n\r\n    \r\n    minimumSignificantDigits: number;\r\n\r\n    \r\n    maximumSignificantDigits: number;\r\n}", "api_method_name": "PluralRulesOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRulesOptions", "api_method_name": "localeMatcher", "api_method_all": "localeMatcher: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["are the string with localeMatcher options\n    * @tc.d", "t.resolvedOptions().localeMatcher).assertEqual('looku", "actDisplay: 'long', localeMatcher: 'lookup' });\n     ", "PluralRules('zh', {'localeMatcher': 'lookup'});\n     ", "l.resolvedOptions().localeMatcher).assertEqual('looku", "e relativetime with localeMatcher options\n    * @tc.d", "tl.Collator('zh', {'localeMatcher': 'lookup'});\n     ", "h locale and loolup localeMatcher\n    * @tc.desc chec", "eTimeFormat('en', { localeMatcher: 'best fit',\n      ", "eTimeFormat('en', { localeMatcher: 'best fit', numeri", "atMatcher: 'basic', localeMatcher: 'lookup' };\n      "], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRulesOptions", "api_method_name": "type", "api_method_all": "type: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 26, "since": 8, "api_used": "\u662f", "lines": ["umberFormat('US', {'type': 'E164'});\n       ", "2023379 and RFC3966 type param\n    * @tc.des", "0574676 and RFC3966 type param\n    * @tc.des", "umberFormat('CN', {'type': 'RFC3966'});\n    ", "6 and INTERNATIONAL type param\n    * @tc.des", "057467 and NATIONAL type param\n    * @tc.des", "umberFormat('CN', {'type': 'NATIONAL'});\n   ", "3510574676 and E164 type param\n    * @tc.des", " locale and ordinal type\n    * @tc.desc chec", "umberFormat('CN', {'type': 'INTERNATIONAL'})", "574676 and NATIONAL type param\n    * @tc.des", "9 and INTERNATIONAL type param\n    * @tc.des", "umberFormat('US', {'type': 'INTERNATIONAL'})", "ef = Object.getPrototypeOf(global) || global", "6262023379 and E164 type param\n    * @tc.des", "7 4676 and NATIONAL type param\n    * @tc.des", "umberFormat('CN', {'type': 'E164'});\n       ", "umberFormat('US', {'type': 'NATIONAL'});\n   ", "746761 and NATIONAL type param\n    * @tc.des", "PluralRules('zh', {'type': 'ordinal'});\n    ", "023379 and NATIONAL type param\n    * @tc.des", "umberFormat('US', {'type': 'RFC3966'});\n    "], "files": ["I18n.test.js", "Perf.test.js", "Intl.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRulesOptions", "api_method_name": "minimumIntegerDigits", "api_method_all": "minimumIntegerDigits: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 6, "api_used": "\u662f", "lines": [" with zh locale and minimumIntegerDigits options\n    * @tc.d", "its: 2,\n            minimumIntegerDigits: 7, minimumSignific", "                    minimumIntegerDigits: 7,\n               ", "mFractionDigits: 2, minimumIntegerDigits: 7 });\n        cons", "its: 2,\n            minimumIntegerDigits: 7 });\n        cons", "t.resolvedOptions().minimumIntegerDigits).assertEqual(7);\n  ", "PluralRules('zh', {'minimumIntegerDigits': 10});\n        let"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRulesOptions", "api_method_name": "minimumFractionDigits", "api_method_all": "minimumFractionDigits: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": [" with zh locale and minimumFractionDigits options\n    * @tc.d", "t.resolvedOptions().minimumFractionDigits).assertEqual(1);\n  ", "PluralRules('zh', {'minimumFractionDigits': 11});\n        let", "                    minimumFractionDigits: 1,\n               ", "{ style: 'percent', minimumFractionDigits: 1, maximumFraction"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRulesOptions", "api_method_name": "maximumFractionDigits", "api_method_all": "maximumFractionDigits: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 6, "api_used": "\u662f", "lines": ["                    maximumFractionDigits: 2,\n               ", "nitDisplay: 'long', maximumFractionDigits: 2, minimumIntegerD", " with zh locale and maximumFractionDigits options\n    * @tc.d", "{ style: 'percent', maximumFractionDigits: 2,\n            min", "t.resolvedOptions().maximumFractionDigits).assertEqual(2);\n  ", "PluralRules('zh', {'maximumFractionDigits': 'lookup'});\n     ", "mFractionDigits: 1, maximumFractionDigits: 2,\n            min"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRulesOptions", "api_method_name": "minimumSignificantDigits", "api_method_all": "minimumSignificantDigits: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["PluralRules('zh', {'minimumSignificantDigits': 10});\n        let", "                    minimumSignificantDigits: 5,\n               ", "t.resolvedOptions().minimumSignificantDigits).assertEqual(5);\n  ", "umIntegerDigits: 7, minimumSignificantDigits: 5, maximumSignific", " with zh locale and minimumSignificantDigits options\n    * @tc.d"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRulesOptions", "api_method_name": "maximumSignificantDigits", "api_method_all": "maximumSignificantDigits: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["t.resolvedOptions().maximumSignificantDigits).assertEqual(10);\n ", "PluralRules('zh', {'maximumSignificantDigits': 11});\n        let", "                    maximumSignificantDigits: 10,\n              ", "gnificantDigits: 5, maximumSignificantDigits: 10, useGrouping: t", " with zh locale and maximumSignificantDigits options\n    * @tc.d"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRules", "api_method_all": "export class PluralRules {\r\n    \r\n    constructor();\r\n\r\n    \r\n    constructor(locale: string | Array<string>, options?: PluralRulesOptions);\r\n\r\n    \r\n    select(n: number): string;\r\n}", "api_method_name": "PluralRules", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 24, "since": 8, "api_used": "\u662f", "lines": ["  let pl = new Intl.PluralRules('zh', {'minimumSign", "  let pl = new Intl.PluralRules();\n        let valu", "  let pl = new Intl.PluralRules('zh', {'maximumFrac", "\n    * @tc.name get PluralRules with zh locale and ", " the performance of PluralRules\n    */\n    it('perf", " the performance of PluralRules.select\n    * @tc.de", "\n    * @tc.name get PluralRules\n    * @tc.desc chec", "  let pl = new Intl.PluralRules('zh', {'minimumInte", "      pl = new Intl.PluralRules('zh');\n        }\n  ", "  let pl = new Intl.PluralRules('zh', {'type': 'ord", "  let pl = new Intl.PluralRules('zh');\n        let ", " the performance of PluralRules.select\n    */\n    i", "\n    * @tc.name get PluralRules with zh locale\n    ", "  let pl = new Intl.PluralRules('zh', {'localeMatch", "  let pl = new Intl.PluralRules('zh', {'minimumFrac", " the performance of PluralRules\n    * @tc.desc chec", "  let pl = new Intl.PluralRules('zh', {'maximumSign"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRules", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRules", "api_method_name": "constructor", "api_method_all": "constructor(locale: string | Array<string>, options?: PluralRulesOptions)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PluralRules", "api_method_name": "select", "api_method_all": "select(n: number): string;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 21, "since": 8, "api_used": "\u662f", "lines": ["ance of PluralRules.select\n    * @tc.desc chec", "ance of PluralRules.select\n    */\n    it('perf", "     let value = pl.select(0);\n        console", "         value = pl.select(0);\n        }\n     ", " @tc.desc check the select result\n    */\n    i"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormatInputOptions", "api_method_all": "export interface RelativeTimeFormatInputOptions {\r\n    \r\n    localeMatcher: string;\r\n\r\n    \r\n    numeric: string;\r\n\r\n    \r\n    style: string;\r\n}", "api_method_name": "RelativeTimeFormatInputOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormatInputOptions", "api_method_name": "localeMatcher", "api_method_all": "localeMatcher: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["are the string with localeMatcher options\n    * @tc.d", "t.resolvedOptions().localeMatcher).assertEqual('looku", "actDisplay: 'long', localeMatcher: 'lookup' });\n     ", "PluralRules('zh', {'localeMatcher': 'lookup'});\n     ", "l.resolvedOptions().localeMatcher).assertEqual('looku", "e relativetime with localeMatcher options\n    * @tc.d", "tl.Collator('zh', {'localeMatcher': 'lookup'});\n     ", "h locale and loolup localeMatcher\n    * @tc.desc chec", "eTimeFormat('en', { localeMatcher: 'best fit',\n      ", "eTimeFormat('en', { localeMatcher: 'best fit', numeri", "atMatcher: 'basic', localeMatcher: 'lookup' };\n      "], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormatInputOptions", "api_method_name": "numeric", "api_method_all": "numeric: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 46, "since": 6, "api_used": "\u662f", "lines": ["cale('ja-Jpan-JP', {numeric: false});\n        c", "cale('ja-Jpan-JP', {numeric: true});\n        co", "      expect(locale.numeric).assertFalse();\n   ", " zh locale and true numeric\n    * @tc.desc chec", "* @tc.name test the numeric with false value\n  ", "       expect(value.numeric).assertEqual('alway", "'2-digit', second: 'numeric', weekday: 'long', ", ").day).assertEqual('numeric');\n        expect(d", "l.resolvedOptions().numeric).assertTrue();\n    ", "est_1350 ' + locale.numeric);\n        expect(lo", " @tc.desc check the numeric\n    */\n    it('loca", "      expect(locale.numeric).assertTrue();\n    ", "t option = { year: 'numeric', month: 'long', da", "       expect(value.numeric).assertEqual('auto'", ".year).assertEqual('numeric');\n    })\n\n    /* *", "onth: 'long', day: 'numeric',\n            hour:", "* @tc.name test the numeric with true value\n   ", "econd).assertEqual('numeric');\n        expect(d", "lativetime, get the numeric options\n    * @tc.d", "tl.Collator('zh', {'numeric': true});\n        l", "                    numeric: 'auto',\n          ", ".hour).assertEqual('numeric');\n    })\n\n    /* *", "\n            hour: 'numeric', minute: '2-digit'", "atcher: 'best fit', numeric: 'auto', style: 'na", "est_1300 ' + locale.numeric);\n        expect(lo", "onth: 'long', day: 'numeric', weekday: 'long' }"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormatInputOptions", "api_method_name": "style", "api_method_all": "style: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 6, "api_used": "\u662f", "lines": ["00 second in narrow style\n    * @tc.desc chec", "er unit with medium style\n    * @tc.desc get ", "t.resolvedOptions().style).assertEqual('unit'", "'the sky is in blue-style!');\n    })\n\n    /* ", "lativetime, get the style options\n    * @tc.d", "ateStyle with short style\n    */\n    it('date", "erFormat('en-GB', { style: 'decimal', notatio", "mat the number with style\n    * @tc.desc chec", "erFormat('zh-CN', { style: 'unit', unit: 'met", "erFormat('en-GB', { style: 'currency', curren", "erFormat('ja-JP', { style: 'currency', curren", "eTimeFormat('en', { style: 'narrow' });\n     ", "teStyle with medium style\n    * @tc.desc chec", "erFormat('zh-CN', { style: 'currency', curren", "erFormat('en-US', { style: 'currency', curren", "erFormat('en-CN', { style: 'percent', maximum", "eck the number with style\n    */\n    it('form", "ter unit with short style\n    * @tc.desc get ", "t.resolvedOptions().style).assertEqual('decim", "ateStyle with short style\n    * @tc.desc chec", "                    style: 'narrow' });\n     ", "dateStyle with long style\n    * @tc.desc chec", "t.resolvedOptions().style);\n        expect(nu", "dateStyle with long style\n    */\n    it('date", "iter unit with long style\n    * @tc.desc get ", "style and mediu timestyle\n    */\n    it('date", "t.resolvedOptions().style).assertEqual('curre", "number with percetn style\n    * @tc.desc chec", " date with full datestyle and mediu timestyle", "umberFormat('ar', { style: 'percent',\n       ", "teStyle with medium style\n    */\n    it('date", "       expect(value.style).assertEqual('narro", "       expect(value.style).assertEqual('long'", "', numeric: 'auto', style: 'narrow' });\n     ", "style and mediu timestyle\n    * @tc.desc chec", "number with percetn style\n    */\n    it('form", "t.resolvedOptions().style).assertEqual('perce", "umberFormat('ar', { style: 'percent', minimum"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormatResolvedOptions", "api_method_all": "export interface RelativeTimeFormatResolvedOptions {\r\n    \r\n    locale: string;\r\n\r\n    \r\n    style: string;\r\n\r\n    \r\n    numeric: string;\r\n\r\n    \r\n    numberingSystem: string;\r\n}", "api_method_name": "RelativeTimeFormatResolvedOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormatResolvedOptions", "api_method_name": "locale", "api_method_all": "locale: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 289, "since": 6, "api_used": "\u662f", "lines": ["on () {\n        let locale = I18n.getSystemLoc", "       console.log('locale_test_0300 ' + local", "       console.log('locale_test_0700 ' + local", "True();\n        let locale = I18n.getSystemLoc", "pt);\n        expect(locale.script).assertEqual", "ocale_test_0400 ' + locale.region);\n        ex", "   })\n\n    \n    it('locale_test_0100', 0, func", " @tc.desc check the locale\n    */\n    it('i18n", "       console.log('locale_test_0500 ' + local", "me);\n        expect(locale.baseName).assertEqu", "   })\n\n    \n    it('locale_test_0700', 0, func", "ocale_test_0600 ' + locale.baseName);\n        ", "       console.log('locale_test_0400 ' + local", "       console.log('locale_test_0600 ' + local", "   })\n\n    \n    it('locale_test_0400', 0, func", "ge);\n        expect(locale.language).assertEqu", "   })\n\n    \n    it('locale_test_0500', 0, func", "   })\n\n    \n    it('locale_test_0600', 0, func", "   })\n\n    \n    it('locale_test_0200', 0, func", "on);\n        expect(locale.region).assertEqual", "ocale_test_0200 ' + locale.language);\n        ", "ocale_test_0500 ' + locale.baseName);\n        ", "       console.log('locale_test_0100 ' + local", "'i18n_test_1600 ' + locale);\n        expect(lo", "e interface with zh locale\n    * @tc.desc chec", "on () {\n        let locale = new Intl.Locale('", "ocale_test_0300 ' + locale.script);\n        ex", "le);\n        expect(locale).assertEqual('en-La", "st()\n        + ' syslocale: ' + I18n.getSystem", "le);\n        expect(locale).assertInstanceOf('", "e interface with zh locale\n    */\n    it('i18n", "       console.log('locale_test_0200 ' + local", "ocale_test_0100 ' + locale.language);\n        ", "   })\n\n    \n    it('locale_test_0300', 0, func", "'i18n_test_0300 ' + locale);\n        expect(lo"], "files": ["I18n.test.js", "Resmgr.test.js", "Lang.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormatResolvedOptions", "api_method_name": "style", "api_method_all": "style: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 6, "api_used": "\u662f", "lines": ["00 second in narrow style\n    * @tc.desc chec", "er unit with medium style\n    * @tc.desc get ", "t.resolvedOptions().style).assertEqual('unit'", "'the sky is in blue-style!');\n    })\n\n    /* ", "lativetime, get the style options\n    * @tc.d", "ateStyle with short style\n    */\n    it('date", "erFormat('en-GB', { style: 'decimal', notatio", "mat the number with style\n    * @tc.desc chec", "erFormat('zh-CN', { style: 'unit', unit: 'met", "erFormat('en-GB', { style: 'currency', curren", "erFormat('ja-JP', { style: 'currency', curren", "eTimeFormat('en', { style: 'narrow' });\n     ", "teStyle with medium style\n    * @tc.desc chec", "erFormat('zh-CN', { style: 'currency', curren", "erFormat('en-US', { style: 'currency', curren", "erFormat('en-CN', { style: 'percent', maximum", "eck the number with style\n    */\n    it('form", "ter unit with short style\n    * @tc.desc get ", "t.resolvedOptions().style).assertEqual('decim", "ateStyle with short style\n    * @tc.desc chec", "                    style: 'narrow' });\n     ", "dateStyle with long style\n    * @tc.desc chec", "t.resolvedOptions().style);\n        expect(nu", "dateStyle with long style\n    */\n    it('date", "iter unit with long style\n    * @tc.desc get ", "style and mediu timestyle\n    */\n    it('date", "t.resolvedOptions().style).assertEqual('curre", "number with percetn style\n    * @tc.desc chec", " date with full datestyle and mediu timestyle", "umberFormat('ar', { style: 'percent',\n       ", "teStyle with medium style\n    */\n    it('date", "       expect(value.style).assertEqual('narro", "       expect(value.style).assertEqual('long'", "', numeric: 'auto', style: 'narrow' });\n     ", "style and mediu timestyle\n    * @tc.desc chec", "number with percetn style\n    */\n    it('form", "t.resolvedOptions().style).assertEqual('perce", "umberFormat('ar', { style: 'percent', minimum"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormatResolvedOptions", "api_method_name": "numeric", "api_method_all": "numeric: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 46, "since": 6, "api_used": "\u662f", "lines": ["cale('ja-Jpan-JP', {numeric: false});\n        c", "cale('ja-Jpan-JP', {numeric: true});\n        co", "      expect(locale.numeric).assertFalse();\n   ", " zh locale and true numeric\n    * @tc.desc chec", "* @tc.name test the numeric with false value\n  ", "       expect(value.numeric).assertEqual('alway", "'2-digit', second: 'numeric', weekday: 'long', ", ").day).assertEqual('numeric');\n        expect(d", "l.resolvedOptions().numeric).assertTrue();\n    ", "est_1350 ' + locale.numeric);\n        expect(lo", " @tc.desc check the numeric\n    */\n    it('loca", "      expect(locale.numeric).assertTrue();\n    ", "t option = { year: 'numeric', month: 'long', da", "       expect(value.numeric).assertEqual('auto'", ".year).assertEqual('numeric');\n    })\n\n    /* *", "onth: 'long', day: 'numeric',\n            hour:", "* @tc.name test the numeric with true value\n   ", "econd).assertEqual('numeric');\n        expect(d", "lativetime, get the numeric options\n    * @tc.d", "tl.Collator('zh', {'numeric': true});\n        l", "                    numeric: 'auto',\n          ", ".hour).assertEqual('numeric');\n    })\n\n    /* *", "\n            hour: 'numeric', minute: '2-digit'", "atcher: 'best fit', numeric: 'auto', style: 'na", "est_1300 ' + locale.numeric);\n        expect(lo", "onth: 'long', day: 'numeric', weekday: 'long' }"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormatResolvedOptions", "api_method_name": "numberingSystem", "api_method_all": "numberingSystem: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14, "since": 6, "api_used": "\u662f", "lines": ["* @tc.name test the numberingSystem\n    * @tc.desc chec", "cale('ja-Jpan-JP', {numberingSystem: 'arab'});\n        ", "rmat_0800 ' + value.numberingSystem);\n        expect(va", " @tc.desc check the numberingSystem\n    */\n    it('loca", "erFormat('ar-EG', { numberingSystem: 'arab' });\n       ", "t.resolvedOptions().numberingSystem).assertEqual('arab'", "       expect(value.numberingSystem).assertEqual('latn'", "      expect(locale.numberingSystem).assertEqual('arab'", "lativetime, get the numberingSystem options\n    * @tc.d", "est_1400 ' + locale.numberingSystem);\n        expect(lo", "mat the number with numberingSystem\n    * @tc.desc chec", "eck the number with numberingSystem\n    */\n    it('form", "   hourCycle: 'h24',numberingSystem: 'arab', hour12: tr"], "files": ["Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormat", "api_method_all": "export class RelativeTimeFormat {\r\n    \r\n    constructor();\r\n\r\n    \r\n    constructor(locale: string | Array<string>, options?: RelativeTimeFormatInputOptions);\r\n\r\n    \r\n    format(value: number, unit: string): string;\r\n\r\n    \r\n    formatToParts(value: number, unit: string): Array<object>;\r\n\r\n    \r\n    resolvedOptions(): RelativeTimeFormatResolvedOptions;\r\n}", "api_method_name": "RelativeTimeFormat", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 21, "since": 8, "api_used": "\u662f", "lines": ["etimefmt = new Intl.RelativeTimeFormat('en', { style: 'nar", " the performance of RelativeTimeFormat\n    */\n    it('perf", " the performance of RelativeTimeFormat.format\n    */\n    i", "etimefmt = new Intl.RelativeTimeFormat('en', { localeMatch", "etimefmt = new Intl.RelativeTimeFormat('en');\n        }\n  ", " the performance of RelativeTimeFormat.format\n    * @tc.de", "etimefmt = new Intl.RelativeTimeFormat('en');\n        let ", " the performance of RelativeTimeFormat.resolvedOptions\n   ", " the performance of RelativeTimeFormat.formatToParts\n    *", " the performance of RelativeTimeFormat\n    * @tc.desc chec", "etimefmt = new Intl.RelativeTimeFormat();\n        let valu"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormat", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormat", "api_method_name": "constructor", "api_method_all": "constructor(locale: string | Array<string>, options?: RelativeTimeFormatInputOptions)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormat", "api_method_name": "format", "api_method_all": "format(value: number, unit: string): string;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 285, "since": 6, "api_used": "\u662f", "lines": ["0100\n    * @tc.name format the datetime with e", "st_0300 ' + datefmt.format(date));\n        exp", "0310\n    * @tc.name format the date with en-US", "value = phonenumber.format('135105746' + ran);", "let value = datefmt.format(date);\n        cons", "st_0200 ' + datefmt.format(date));\n        exp", "value = phonenumber.format('135 1057 467' + ra", "    * @tc.name test format interface with 135 ", "0300\n    * @tc.name format the date with en lo", "st_0700 ' + datefmt.format(date));\n        exp", "0600\n    * @tc.name format the hour with en an", "     expect(datefmt.format(date)).assertEqual(", "0700\n    * @tc.name format the hour with en an", "    * @tc.name test format interface with 1351", "0120\n    * @tc.name format the datetime with e", "value = phonenumber.format('13510574676' + ran", "value = phonenumber.format('626202337' + ran);", "0320\n    * @tc.name format the date with en-GB", "st_0600 ' + datefmt.format(date));\n        exp", "0200\n    * @tc.name format the date with zh lo", "    * @tc.name test format interface with 6262", "st_0310 ' + datefmt.format(date));\n        exp", "st_0500 ' + datefmt.format(date));\n        exp", "0500\n    * @tc.name format the hour with ban a", "st_0320 ' + datefmt.format(date));\n        exp", "0400\n    * @tc.name format the date with aa lo", "value = phonenumber.format('1351057467' + ran)"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormat", "api_method_name": "formatToParts", "api_method_all": "formatToParts(value: number, unit: string): Array<object>;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": [" RelativeTimeFormat.formatToParts\n    * @tc.desc chec", "e = relativetimefmt.formatToParts(100,'second');\n    ", " @tc.desc check the formatToParts value \n    */\n    i", " RelativeTimeFormat.formatToParts\n    */\n    it('perf", "100 second, get the formatToParts value\n    * @tc.des"], "files": ["Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RelativeTimeFormat", "api_method_name": "resolvedOptions", "api_method_all": "resolvedOptions(): RelativeTimeFormatResolvedOptions;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 82, "since": 6, "api_used": "\u662f", "lines": ["      expect(numfmt.resolvedOptions().signDisplay).asse", "      expect(numfmt.resolvedOptions().notation).assertE", "st_1200 ' + datefmt.resolvedOptions().dateStyle);\n     ", "      expect(numfmt.resolvedOptions().compactDisplay).a", "     expect(datefmt.resolvedOptions().hour).assertEqual", "      expect(numfmt.resolvedOptions().unit).assertEqual", "     expect(datefmt.resolvedOptions().hourCycle).assert", "     expect(datefmt.resolvedOptions().numberingSystem).", "     expect(datefmt.resolvedOptions().day).assertEqual(", "      expect(numfmt.resolvedOptions().unitDisplay).asse", "st_1900 ' + datefmt.resolvedOptions().timeZone);\n      ", "     expect(datefmt.resolvedOptions().year).assertEqual", "     expect(datefmt.resolvedOptions().era).assertEqual(", "      expect(numfmt.resolvedOptions().numberingSystem).", "      expect(numfmt.resolvedOptions().locale).assertEqu", "      expect(numfmt.resolvedOptions().currency).assertE", "     expect(datefmt.resolvedOptions().dateStyle).assert", "st_2000 ' + datefmt.resolvedOptions().timeZoneName);\n  ", "     expect(datefmt.resolvedOptions().minute).assertEqu", "st_2100 ' + datefmt.resolvedOptions().year);\n        ex", "      expect(numfmt.resolvedOptions().style).assertEqua", "     expect(datefmt.resolvedOptions().timeZoneName).ass", "      expect(numfmt.resolvedOptions().currencyDisplay).", "      expect(numfmt.resolvedOptions().localeMatcher).as", "     expect(datefmt.resolvedOptions().dayPeriod).assert", "     expect(datefmt.resolvedOptions().formatMatcher).as", "     expect(datefmt.resolvedOptions().hour12).assertTru", "     expect(datefmt.resolvedOptions().localeMatcher).as", "est_2500 ' + numfmt.resolvedOptions().style);\n        e", "     expect(datefmt.resolvedOptions().month).assertEqua", "st_2300 ' + datefmt.resolvedOptions().hour);\n        ex", "     expect(datefmt.resolvedOptions().timeZone).assertE", "st_1000 ' + datefmt.resolvedOptions().dateStyle);\n     ", "      expect(numfmt.resolvedOptions().currencySign).ass", "     expect(datefmt.resolvedOptions().second).assertEqu", "     expect(datefmt.resolvedOptions().locale).assertEqu", "     expect(datefmt.resolvedOptions().weekday).assertEq", "st_2200 ' + datefmt.resolvedOptions().weekday);\n       ", "      expect(numfmt.resolvedOptions().unitUsage).assert", "st_1100 ' + datefmt.resolvedOptions().dateStyle);\n     "], "files": ["Perf.test.js", "Lang.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}]}