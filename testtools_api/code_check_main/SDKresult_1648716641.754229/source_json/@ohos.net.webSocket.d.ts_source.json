{"subsystem_ch": "\u7535\u8bdd\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "telephony", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.net.webSocket", "api": [{"api_class_name": "webSocket", "api_method_all": "declare namespace webSocket {\r\n  \r\n  function createWebSocket(): WebSocket;\r\n\r\n  export interface WebSocketRequestOptions {\r\n    \r\n    header?: Object;\r\n  }\r\n\r\n  export interface WebSocketCloseOptions {\r\n    \r\n    code?: number;\r\n    \r\n    reason?: string;\r\n  }\r\n\r\n  export interface WebSocket {\r\n    \r\n    connect(url: string, callback: AsyncCallback<boolean>): void;\r\n    connect(url: string, options: WebSocketRequestOptions, callback: AsyncCallback<boolean>): void;\r\n    connect(url: string, options?: WebSocketRequestOptions): Promise<boolean>;\r\n\r\n    \r\n    send(data: string | ArrayBuffer, callback: AsyncCallback<boolean>): void;\r\n    send(data: string | ArrayBuffer): Promise<boolean>;\r\n\r\n    \r\n    close(callback: AsyncCallback<boolean>): void;\r\n    close(options: WebSocketCloseOptions, callback: AsyncCallback<boolean>): void;\r\n    close(options?: WebSocketCloseOptions): Promise<boolean>;\r\n\r\n    \r\n    on(type: 'open', callback: AsyncCallback<Object>): void;\r\n\r\n    \r\n    off(type: 'open', callback?: AsyncCallback<Object>): void;\r\n\r\n    \r\n    on(type: 'message', callback: AsyncCallback<string | ArrayBuffer>): void;\r\n\r\n    \r\n    off(type: 'message', callback?: AsyncCallback<string | ArrayBuffer>): void;\r\n\r\n    \r\n    on(type: 'close', callback: AsyncCallback<{ code: number, reason: string }>): void;\r\n\r\n    \r\n    off(type: 'close', callback?: AsyncCallback<{ code: number, reason: string }>): void;\r\n\r\n    \r\n    on(type: 'error', callback: ErrorCallback): void;\r\n\r\n    \r\n    off(type: 'error', callback?: ErrorCallback): void;\r\n  }\r\n}", "api_method_name": "webSocket", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 51, "since": 0, "api_used": "\u662f", "lines": ["  socketJsunit();\n  webSocketJsunit();\n  connecti", "turn;\n      }\n      webSocket.off(\"message\", (err", "ader\"\n      }\n      webSocket.connect(\"www.baidu.", "cketRequestOptions: webSocket.WebSocketRequestOpt", "SocketCloseOptions: webSocket.WebSocketCloseOptio", "/index.ets\";\nimport webSocket from '@ohos.net.web", "     }\n      expect(webSocketCloseOptions.code ==", "t.test.ets';\nimport webSocketJsunit from './WebSo", "turn;\n      }\n      webSocket.connect(\"www.baidu.", "turn;\n      }\n      webSocket.off(\"error\");\n     ", "      try {\n        webSocket.on(\"open\", (error, ", "turn;\n      }\n      webSocket.off(\"close\");\n     ", "     }\n      expect(webSocketRequestOptions.heade", "turn;\n      }\n      webSocket.send(\"test data\", (", "turn;\n      }\n      webSocket.send(\"test data\").t", "turn;\n      }\n      webSocket.close((error, data)", "******\");\n      let webSocketRequestOptions: webS", "ason\"\n      }\n      webSocket.close(webSocketClos", "turn;\n      }\n      webSocket.off(\"open\", (error,", "nit() {\n  describe('webSocketTest', function () {", "rt default function webSocketJsunit() {\n  describ", ";\n      }\n      let webSocketCloseOptions: webSoc", "     }\n      expect(webSocketCloseOptions.reason)", "turn;\n      }\n      webSocket.on(\"message\", (erro", "******\");\n      let webSocketCloseOptions: webSoc", "    webSocket.close(webSocketCloseOptions, (error", "ket from '@ohos.net.webSocket'\nimport utils from ", "   var mWebSocket = webSocket.createWebSocket();\n", "turn;\n      }\n      webSocket.off(\"error\", error ", ";\n      }\n      let webSocketRequestOptions: webS", "ct(\"www.baidu.com\", webSocketRequestOptions, (err", "    webSocket.close(webSocketCloseOptions).then(d", "ct(\"www.baidu.com\", webSocketRequestOptions).then", "turn;\n      }\n      webSocket.off(\"open\");\n      ", ".log(\"************* webSocket Test start*********", "turn;\n      }\n      webSocket.on(\"error\", error =", "turn;\n      }\n      webSocket.off(\"message\");\n   ", "turn;\n      }\n      webSocket.connect({\n        u", "turn;\n      }\n      webSocket.off(\"close\", (error", "turn;\n      }\n      webSocket.on(\"close\", (error,"], "files": ["List.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "webSocket", "api_method_name": "createWebSocket", "api_method_all": "function createWebSocket(): WebSocket;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["WebSocket_WebSocket_createWebSocket_0100 Test start****", "WebSocket_WebSocket_createWebSocket_0100 Test end******", "WebSocket_WebSocket_createWebSocket_0100', 0, async fun", "bSocket = webSocket.createWebSocket();\n      expect(mWe"], "files": ["WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocketRequestOptions", "api_method_all": "export interface WebSocketRequestOptions {\r\n    \r\n    header?: Object;\r\n  }", "api_method_name": "WebSocketRequestOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["tOptions: webSocket.WebSocketRequestOptions = {\n        header:", "Telephony_WebSocket_WebSocketRequestOptions_header_0100 Test en", "Telephony_WebSocket_WebSocketRequestOptions_header_0100', 0, as", "Telephony_WebSocket_WebSocketRequestOptions_header_0100 Test st"], "files": ["WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocketRequestOptions", "api_method_name": "header", "api_method_all": "header?: Object", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 97, "since": 0, "api_used": "\u662f", "lines": ["ttp_HttpRequest_off_headerReceive_0100\", 0, as", "_HttpRequestOptions_header_0400 : JSON parse e", "-----HttpRequest_on_headerReceive Test end----", "    httpRequest.on(\"headersReceive\", (data) =>", "----HttpRequest_off_headersReceive Test is sta", "_HttpRequestOptions_header_0100 : JSON parse e", "-HttpRequestOptions_header_03 Test end--------", "ta: null,\n          header: \"content-type': 'a", "----HttpRequest_off_headerReceive Test is star", "-----HttpRequest_on_headerReceive Test is star", "-HttpRequestOptions_header Test end-----------", "http_HttpRequest_on_headersReceive_0100 : erro", "----HttpRequest_off_headersReceive Test end---", "       },\n          header: \"content-type': 'a", "http_HttpRequest_on_headersReceive_0100\", 0, f", "-----HttpRequest_on_headersReceive Test is sta", "-HttpRequestOptions_header_01 Test end--------", "-HttpRequestOptions_header_02 Test end--------", "_HttpRequestOptions_header_0300 : JSON parse e", "     httpRequest.on_headerReceive((data) => {\n", "ttp_HttpRequest_off_headersReceive_0100 : erro", "http_HttpRequest_on_headerReceive_0100 : error", "_HttpRequestOptions_header_0200 : JSON parse e", "_HttpRequestOptions_header_0300\", 0, async fun", "-HttpRequestOptions_header_01 Test is starting", "_HttpRequestOptions_header_0200 : error = \" + ", "_HttpRequestOptions_header_0400\", 0, async fun", "----HttpRequest_off_headerReceive Test end----", "   httpRequest.off(\"headersReceive\", (data) =>", "-HttpRequestOptions_header_03 Test is starting", "_HttpRequestOptions_header_0100 : error = \" + ", "ttp_HttpRequest_off_headerReceive_0100 : error", "_HttpRequestOptions_header_0300 : error = \" + ", "-HttpRequestOptions_header Test is starting---", "_HttpRequestOptions_header_0100\", 0, async fun", "-HttpRequestOptions_header_02 Test is starting", "    httpRequest.off_headerReceive((data) => {\n", "ttp_HttpRequest_off_headersReceive_0100\", 0, f", "-----HttpRequest_on_headersReceive Test end---", "_HttpRequestOptions_header_0200\", 0, async fun", "http_HttpRequest_on_headerReceive_0100\", 0, as"], "files": ["HttpRequestJsunit.test.ets", "RequestMethodJsunit.test.ets", "HttpResponseJsunit.test.ets", "WebSocketJsunit.test.ets", "HttpRequestOptionsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocketCloseOptions", "api_method_all": "export interface WebSocketCloseOptions {\r\n    \r\n    code?: number;\r\n    \r\n    reason?: string;\r\n  }", "api_method_name": "WebSocketCloseOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 10, "since": 0, "api_used": "\u662f", "lines": ["Telephony_WebSocket_WebSocketCloseOptions_reason_0100 Test st", "Telephony_WebSocket_WebSocketCloseOptions_reason_0100', 0, as", "Telephony_WebSocket_WebSocketCloseOptions_code_0100 Test end*", "Telephony_WebSocket_WebSocketCloseOptions_code_0100 Test star", "Telephony_WebSocket_WebSocketCloseOptions_code_0100', 0, asyn", "eOptions: webSocket.WebSocketCloseOptions = {\n        code: 1", "Telephony_WebSocket_WebSocketCloseOptions_reason_0100 Test en"], "files": ["WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocketCloseOptions", "api_method_name": "code", "api_method_all": "code?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 357, "since": 0, "api_used": "\u662f", "lines": ["t(postalAddress.postcode).assertEqual('testC", "st_2600: code = \" + code);\n            expec", "               'postcode': 'testCode',\n     ", ": Completely delete code = ' + code);\n      ", ", [\"postcode\", \"postcode\"], [\"city\", \"city\"]", "\",\n            \"postcode\": \"postcode1\",\n    ", "_test_8000 : update code = ' + code);\n      ", "));\n            var code = await DAHelper.de", "       \"country_iso_code\", \"extra1\", \"extra2", "44\"], [\"country_iso_code\", \"4\"], [\"extra1\", ", " }) {\n      Text(`Qrcode page`)\n        .fon", "       \"country_iso_code\": 4,\n            \"e", "g_delete_test_2600: code = \" + code);\n      ", ", [\"postcode\", \"postcode1\"], [\"city\", \"city1", "000;\n\n// call error code\nexport const CALL_M", "\", \"pobox8\"], [\"postcode\", \"postcode8\"], [\"c", "                var code = await DAHelper.up", "             expect(code == 0).assertTrue();", ", [\"postcode\", \"postcode8\"], [\"city\", \"city8", "                var code = await DAHelper.de", "_test_7900 : record code = ' + code);\n      ", "       \"country_iso_code\": 2,\n            \"e", "   \"postcode\": \"postcode8\",\n            \"reg", "66\"], [\"country_iso_code\", \"2\"], [\"extra1\", ", "x\", \"pobox\"], [\"postcode\", \"postcode\"], [\"ci", "0\")\n        .key('qrcode')\n    }\n  }\n}\n\n\n", "    console.info('Qrcode page build done cal", "\",\n            \"postcode\": \"postcode\",\n     ", ": record code = ' + code);\n                v", "\", \"pobox1\"], [\"postcode\", \"postcode1\"], [\"c", "    console.info('Qrcode page show called');", "   \"postcode\": \"postcode\",\n            \"regi", "y delete code = ' + code);\n                e", "   \"postcode\": \"postcode1\",\n            \"reg", "@Component\nstruct qrcode_textcase {\n  @State", "\n            expect(code == -1).assertTrue()", "\",\n            \"postcode\": \"postcode8\",\n    "], "files": ["HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Calllog_test.js", "SmsMmsJsunit.test.ets", "Qrcode.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "WebSocketJsunit.test.ets", "StatisticsJsunit.test.ets", "ObjectInterface_test.js", "common.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ContactClass_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocketCloseOptions", "api_method_name": "reason", "api_method_all": "reason?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["bSocketCloseOptions.reason).assertEqual(\"test ", "bSocketCloseOptions_reason_0100', 0, async fun", "   code: 1,\n        reason: \"test reason\"\n    ", "      reason: \"test reason\"\n      }\n      expe", "d)\n        || (data.reason == null || data.rea", "bSocketCloseOptions_reason_0100 Test start****", ").assertEqual(\"test reason\");\n      console.lo", "bSocketCloseOptions_reason_0100 Test end******", "son == null || data.reason === undefined)){\n  ", "      reason: \"test reason\"\n      }\n      webS"], "files": ["ObserverJsunit.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_all": "export interface WebSocket {\r\n    \r\n    connect(url: string, callback: AsyncCallback<boolean>): void;\r\n    connect(url: string, options: WebSocketRequestOptions, callback: AsyncCallback<boolean>): void;\r\n    connect(url: string, options?: WebSocketRequestOptions): Promise<boolean>;\r\n\r\n    \r\n    send(data: string | ArrayBuffer, callback: AsyncCallback<boolean>): void;\r\n    send(data: string | ArrayBuffer): Promise<boolean>;\r\n\r\n    \r\n    close(callback: AsyncCallback<boolean>): void;\r\n    close(options: WebSocketCloseOptions, callback: AsyncCallback<boolean>): void;\r\n    close(options?: WebSocketCloseOptions): Promise<boolean>;\r\n\r\n    \r\n    on(type: 'open', callback: AsyncCallback<Object>): void;\r\n\r\n    \r\n    off(type: 'open', callback?: AsyncCallback<Object>): void;\r\n\r\n    \r\n    on(type: 'message', callback: AsyncCallback<string | ArrayBuffer>): void;\r\n\r\n    \r\n    off(type: 'message', callback?: AsyncCallback<string | ArrayBuffer>): void;\r\n\r\n    \r\n    on(type: 'close', callback: AsyncCallback<{ code: number, reason: string }>): void;\r\n\r\n    \r\n    off(type: 'close', callback?: AsyncCallback<{ code: number, reason: string }>): void;\r\n\r\n    \r\n    on(type: 'error', callback: ErrorCallback): void;\r\n\r\n    \r\n    off(type: 'error', callback?: ErrorCallback): void;\r\n  }", "api_method_name": "WebSocket", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 228, "since": 0, "api_used": "\u662f", "lines": ["ket_WebSocket_createWebSocket_0100 Test end******", " \n    it('Telephony_WebSocket_WebSocketCloseOptio", "Telephony_WebSocket_WebSocket_createWebSocket_010", " \n    it('Telephony_WebSocket_WebSocket_createWeb", "********* Telephony_WebSocket_WebSocketCloseOptio", "Telephony_WebSocket_WebSocket_connect_0200 Test s", "Telephony_WebSocket_WebSocketCloseOptions_reason_", "********* Telephony_WebSocket_WebSocket_createWeb", "eOptions: webSocket.WebSocketCloseOptions = {\n   ", " \n    it('Telephony_WebSocket_WebSocket_connect_0", "et();\n      expect(mWebSocket != null).assertTrue", "Telephony_WebSocket_WebSocketCloseOptions_code_01", "********* Telephony_WebSocket_WebSocketRequestOpt", "t = webSocket.createWebSocket();\n      expect(mWe", "Telephony_WebSocket_WebSocket_connect_0200\"\n     ", "\n      }\n      var mWebSocket = webSocket.createW", "Telephony_WebSocket_WebSocket_connect_0100 Test s", "seName = \"Telephony_WebSocket_WebSocket_connect_0", "ocketJsunit from './WebSocketJsunit.test.ets';\nim", "********* Telephony_WebSocket_WebSocket_connect_0", "Telephony_WebSocket_WebSocketRequestOptions_heade", "ket_WebSocket_createWebSocket_0100', 0, async fun", "Telephony_WebSocket_WebSocket_connect_0100\"\n     ", "Telephony_WebSocket_WebSocket_connect_0100 Test e", "ket_WebSocket_createWebSocket_0100 Test start****", "Telephony_WebSocket_WebSocket_connect_0100', 0, a", " \n    it('Telephony_WebSocket_WebSocketRequestOpt", "Telephony_WebSocket_WebSocket_connect_0200', 0, a", "tOptions: webSocket.WebSocketRequestOptions = {\n "], "files": ["List.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "connect", "api_method_all": "connect(url: string, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 382, "since": 0, "api_used": "\u662f", "lines": ["-HttpRequestOptions_connectTimeout Test is starting----------------", ".log(\"************* connection Test start*************\");\n\n    \n   ", "eout: 60,\n          connectTimeout: 60\n        }\n        var httpRe", "_HttpRequestOptions_connectTimeout_0100 : error = \" + error);\n     ", "_HttpRequestOptions_connectTimeout_0100\", 0, async function (done) ", "ion from '@ohos.net.connection'\nimport utils from './Utils.ets'\n\nex", "      try {\n        connection.createNetConnection(3000);\n        e", "_HttpRequestOptions_connectTimeout_0200\", 0, async function (done) ", "eout: 60,\n          connectTimeout: 0.1\n        }\n        var httpR", "      try {\n        connection.createNetConnection(5000);\n        e", "_HttpRequestOptions_connectTimeout_0200 : error = \" + error);\n     ", "out: 0.1,\n          connectTimeout: 60\n        }\n        var httpRe", "nit() {\n  describe('connectionTest', function () {\n    const TIMEOU", "'\n        }\n        connection.createNetConnection(netSpecifier, 50", "      try {\n        connection.createNetConnection(8000);\n        e", "-HttpRequestOptions_connectTimeout_01 Test end---------------------", "rt default function connectionJsunit() {\n  describe('connectionTest", "-HttpRequestOptions_connectTimeout Test end-----------------------\"", "-HttpRequestOptions_connectTimeout_01 Test is starting-------------", "/index.ets\";\nimport connection from '@ohos.net.connection'\nimport u"], "files": ["ConnectionJsunit.test.ets", "HttpRequestJsunit.test.ets", "RequestMethodJsunit.test.ets", "SocketJsunit.test.ets", "HttpResponseJsunit.test.ets", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "ConnectionSecondJsUnit.test.ets", "List.test.ets", "HttpRequestOptionsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "connect", "api_method_all": "connect(url: string, options: WebSocketRequestOptions, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 382, "since": 0, "api_used": "\u662f", "lines": ["-HttpRequestOptions_connectTimeout Test is starting----------------", ".log(\"************* connection Test start*************\");\n\n    \n   ", "eout: 60,\n          connectTimeout: 60\n        }\n        var httpRe", "_HttpRequestOptions_connectTimeout_0100 : error = \" + error);\n     ", "_HttpRequestOptions_connectTimeout_0100\", 0, async function (done) ", "ion from '@ohos.net.connection'\nimport utils from './Utils.ets'\n\nex", "      try {\n        connection.createNetConnection(3000);\n        e", "_HttpRequestOptions_connectTimeout_0200\", 0, async function (done) ", "eout: 60,\n          connectTimeout: 0.1\n        }\n        var httpR", "      try {\n        connection.createNetConnection(5000);\n        e", "_HttpRequestOptions_connectTimeout_0200 : error = \" + error);\n     ", "out: 0.1,\n          connectTimeout: 60\n        }\n        var httpRe", "nit() {\n  describe('connectionTest', function () {\n    const TIMEOU", "'\n        }\n        connection.createNetConnection(netSpecifier, 50", "      try {\n        connection.createNetConnection(8000);\n        e", "-HttpRequestOptions_connectTimeout_01 Test end---------------------", "rt default function connectionJsunit() {\n  describe('connectionTest", "-HttpRequestOptions_connectTimeout Test end-----------------------\"", "-HttpRequestOptions_connectTimeout_01 Test is starting-------------", "/index.ets\";\nimport connection from '@ohos.net.connection'\nimport u"], "files": ["ConnectionJsunit.test.ets", "HttpRequestJsunit.test.ets", "RequestMethodJsunit.test.ets", "SocketJsunit.test.ets", "HttpResponseJsunit.test.ets", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "ConnectionSecondJsUnit.test.ets", "List.test.ets", "HttpRequestOptionsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "connect", "api_method_all": "connect(url: string, options?: WebSocketRequestOptions): Promise<boolean>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 21, "since": 0, "api_used": "\u662f", "lines": ["**********\");\n      connection.getAllNets().then(data => {\n        ", "andle) => {\n        connection.getNetCapabilities(handle[0]).then((", "romise_1300';\n      connection.getAllNets().then((handle) => {\n    ", "turn;\n      }\n      connection.getConnectionProperties().then(data ", "**********\");\n      connection.getDefaultNet().then(data => {\n     ", "TID_IVVALID);\n      connection.reportNetConnected(handle).then(() =", "**********\");\n      connection.enableAirplaneMode().then(data => {\n", "ID_IVVALID2);\n      connection.reportNetDisconnected(handle).then((", "  }\n      webSocket.connect(\"www.baidu.com\").then(data => {\n       ", "turn;\n      }\n      connection.getNetCapabilities().then(data => {\n", "TID_IVVALID);\n      connection.reportNetDisconnected(handle).then((", "**********\");\n      connection.hasDefaultNet().then(activated => {\n", "**********\");\n      connection.getDefaultNet().then((handle) => {\n ", "ID_IVVALID2);\n      connection.reportNetConnected(handle).then(() =", "**********\");\n      connection.disableAirplaneMode().then(data => {", "nection.reportNetDisconnected(handle).then(() => {\n        expect()", "   socket.TCPSocket.connect(tcpConnectOptions).then(function (data)"], "files": ["ConnectionJsunit.test.ets", "SocketJsunit.test.ets", "ConnectionSecondJsUnit.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "send", "api_method_all": "send(data: string | ArrayBuffer, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 130, "since": 0, "api_used": "\u662f", "lines": ["ny_Socket_UDPSocket_send_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_send_0300 Test start*************\");\n      l", "ny_Socket_UDPSocket_send_0400 Test start*************\");\n      l", "ny_Socket_UDPSocket_send_0300\"\n      if (utils.notCheck) {\n     ", "et_ExtraOptionsBase_sendBufferSize_0100', 0, async function (don", "ny_Socket_UDPSocket_send_0100\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0400', 0, async function (done) {\n     ", "Point))\n      ret = sendTouchEvent(movePoint)\n      if (ret == f", "ny_Socket_UDPSocket_send_0200 Test start*************\");\n      l", "ny_Socket_TCPSocket_send_0100\n     * @tc.name      : send\n     *", "ngify(upPoint))\n    sendTouchEvent(upPoint)\n    await this.sleep", "et_ExtraOptionsBase_sendBufferSize_0100 Test start*************\"", "et_ExtraOptionsBase_sendBufferSize_0100 Test end*************\");", "ny_Socket_UDPSocket_send_0200\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_send_0100\"\n      if (utils.notCheck) {\n     ", "   socket.UDPSocket.send(udpSendOptions, (error, data) => {\n    ", "  * @tc.name      : send\n     * @tc.desc      : Sends data over ", "ny_Socket_UDPSocket_send_0300 Test end*************\");\n      don", "ny_Socket_UDPSocket_send_0400\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0400\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_send_0100 Test start*************\");\n      l", "ny_Socket_UDPSocket_send_0300', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_send_0100', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_send_0300\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0400 Test end*************\");\n      don", "ferSize: 1,\n        sendBufferSize: 1,\n        reuseAddress: tru", "ct(extraOptionsBase.sendBufferSize === 1).assertTrue()\n      con", "ify(downPonit))\n    sendTouchEvent(downPonit);\n    console.info(", "ny_Socket_UDPSocket_send_0200\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0100 Test end*************\");\n      don", "ny_Socket_UDPSocket_send_0200 Test end*************\");\n      don"], "files": ["Utils.ets", "SmsMmsJsunit.test.ets", "SocketJsunit.test.ets", "NetworkSearchErrors.test.js", "WebSocketJsunit.test.ets", "SimManager.test.js", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "send", "api_method_all": "send(data: string | ArrayBuffer): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["   socket.TCPSocket.send(tcpSendOptions).then(data => {\n        ", "  }\n      webSocket.send(\"test data\").then(data => {\n        exp", "ne) {\n        radio.sendUpdateCellLocationRequest().then(data =>", "   socket.UDPSocket.send(udpSendOptions).then(data => {\n        "], "files": ["NetworkSearchErrors.test.js", "SocketJsunit.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "close", "api_method_all": "close(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 272, "since": 0, "api_used": "\u662f", "lines": ["        })\n        .closeEffect(false)\n    }\n    .key('flex')\n   ", "        })\n        .closeEffect(true)\n      DataPanel({ values: [", "          resultSet.close();\n            } catch (error) {\n      ", "          resultSet.close();\n            await callLogDelete(\"abn", "BLE = 0; // tran is close\nexport const TRANSFER_ENABLE = 1; // tr", "          resultSet.close();\n                } catch (error) {\n  ", "        })\n        .closeEffect(false)\n\n      DataPanel({ values:", "          resultSet.close();\n                done();\n            ", "          resultSet.close();\n                await callLogDelete(", "FER_ERASURE = 4; // close tran function\nexport const CALL_TRANSFE", "          resultSet.close();\n                await deleteRawConta"], "files": ["Calllog_test.js", "ContactMerge_test.js", "Stability_test.js", "SocketJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "Performance_test.js", "WebSocketJsunit.test.ets", "Voicemail_test.js", "recovery_test.js", "Groups_test.js", "DataPanel.ets", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "close", "api_method_all": "close(options: WebSocketCloseOptions, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 272, "since": 0, "api_used": "\u662f", "lines": ["        })\n        .closeEffect(false)\n    }\n    .key('flex')\n   ", "        })\n        .closeEffect(true)\n      DataPanel({ values: [", "          resultSet.close();\n            } catch (error) {\n      ", "          resultSet.close();\n            await callLogDelete(\"abn", "BLE = 0; // tran is close\nexport const TRANSFER_ENABLE = 1; // tr", "          resultSet.close();\n                } catch (error) {\n  ", "        })\n        .closeEffect(false)\n\n      DataPanel({ values:", "          resultSet.close();\n                done();\n            ", "          resultSet.close();\n                await callLogDelete(", "FER_ERASURE = 4; // close tran function\nexport const CALL_TRANSFE", "          resultSet.close();\n                await deleteRawConta"], "files": ["Calllog_test.js", "ContactMerge_test.js", "Stability_test.js", "SocketJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "Performance_test.js", "WebSocketJsunit.test.ets", "Voicemail_test.js", "recovery_test.js", "Groups_test.js", "DataPanel.ets", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "close", "api_method_all": "close(options?: WebSocketCloseOptions): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["   socket.TCPSocket.close().then(data => {\n        console.log(`$", "   socket.UDPSocket.close().then(data => {\n        console.log(`$", "  }\n      webSocket.close(webSocketCloseOptions).then(data => {\n "], "files": ["SocketJsunit.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "on", "api_method_all": "on(type: 'open', callback: AsyncCallback<Object>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "off", "api_method_all": "off(type: 'open', callback?: AsyncCallback<Object>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 403, "since": 0, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "on", "api_method_all": "on(type: 'message', callback: AsyncCallback<string | ArrayBuffer>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "off", "api_method_all": "off(type: 'message', callback?: AsyncCallback<string | ArrayBuffer>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 403, "since": 0, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "on", "api_method_all": "on(type: 'close', callback: AsyncCallback<{ code: number, reason: string }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "off", "api_method_all": "off(type: 'close', callback?: AsyncCallback<{ code: number, reason: string }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 403, "since": 0, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "WebSocket", "api_method_name": "off", "api_method_all": "off(type: 'error', callback?: ErrorCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 403, "since": 0, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}]}