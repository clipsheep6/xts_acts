{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\select", "api": [{"api_class_name": "SelectOption", "api_method_all": "declare interface SelectOption {\r\n  \r\n  value: ResourceStr;\r\n\r\n  \r\n  icon?: ResourceStr;\r\n}", "api_method_name": "SelectOption", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SelectOption", "api_method_name": "value", "api_method_all": "value: ResourceStr", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 8, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectOption", "api_method_name": "icon", "api_method_all": "icon?: ResourceStr", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 222, "since": 8, "api_used": "\u662f", "lines": ["ontent , icon: this.icon })\n        .iconPos", "        showpasswordiconFalse : null,\n      ", "= \"piece\";\n  @State icon: string = \"1\";\n  @S", "       {value:'bbb',icon: \"/common/2.png\"},\n", "elect([{value:'aaa',icon: \"/images/img.png\"}", "  if(eventData.data.iconPosition != null) {\n", ",\n            headericon : this.headericon, ", "ull) {\n        this.iconPosition = eventData", "{\n    Image('common/icon.png')\n      .width(", "ue = eventData.data.iconsValue;\n      }\n    ", "ctor()\n        this.icon = this.$element(\"ic", " .iconPosition(this.iconPosition)\n        .f", "       {value:'ccc',icon: \"/common/3.png\"},\n", "ne = this.$element(\"iconNone\").getInspector(", "    { value: 'add', icon: 'images/add.svg', ", "ent: this.content , icon: this.icon })\n     ", "elect([{value:'aaa',icon: \"/common/1.png\"},\n", "ctor()\n        this.iconNone = this.$element", " if (eventData.data.iconsValue != null) {\n  ", "ueNone, icon : this.icon, iconNone : this.ic", "ericon : this.headericon, headericonNone : t", "       {value:'bbb',icon: \"/images/img.png\"}", "ull) {\n        this.iconsValue = eventData.d", "con : null,\n        iconNone : null,\n       ", "on, iconNone : this.iconNone,\n            pl", "null,\n        headericon : null,\n        hea", "is.icon })\n        .iconPosition(this.iconPo", "        showpasswordiconTrue : null,\n       ", "ntent;\n        this.icon = pieceObj.icon;\n  ", "        showpasswordiconNone : null\n    },\n\n", "e : this.valueNone, icon : this.icon, iconNo", "FF008000\";\n  @State iconPosition: IconPositi", "null,\n        headericonNone : null,\n       ", "onNone : this.headericonNone,\n            sh", "{ value: 'collect', icon: 'images/collect.sv", "one : null,\n        icon : null,\n        ico", "Image($r('app.media.icon')).width(80).height", "s.headericon, headericonNone : this.headeric", "Style.left\n  @State iconsValue: object= { sh", "       {value:'ddd',icon: \"/common/4.png\"}])", "       {value:'ccc',icon: \"/images/img.png\"}", "edNone, showpasswordiconTrue : this.showpass", "       {value:'ddd',icon: \"/images/img.png\"}", "his.icon = pieceObj.icon;\n      }\n      if(e", ", icon : this.icon, iconNone : this.iconNone", "    { value: 'app', icon: 'images/grid.svg',", " : this.showpasswordiconTrue,\n            sh", "on = this.$element(\"icon\").getInspector()\n  ", "on = eventData.data.iconPosition;\n      }\n  ", "ight: 12,\n          icon: \"/common/1.png\"\n  "], "files": ["Select.ets", "Navigation.ets", "index.js", "sliderProps.test.js", "optionProps.test.js", "toolbarItemProps.test.js", "select.ets", "textareaProps.test.js", "sideBar.ets", "inputProps.test.js", "Sidebar.ets", "PieceCode.ets", "navigation.ets", "CustomDialog.ets", "searchProps.test.js", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectInterface", "api_method_all": "interface SelectInterface {\r\n  \r\n  (options: Array<SelectOption>): SelectAttribute;\r\n}", "api_method_name": "SelectInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SelectInterface", "api_method_name": "options", "api_method_all": "(options: Array<SelectOption>): SelectAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 791, "since": 8, "api_used": "\u662f", "lines": ["= await router.push(options);\n          await U", " start\");\n      let options = {\n        uri: 'p", "(obj.$attrs.overlay.options.offset.x).assertEqu", "(obj.$attrs.overlay.options.align).assertEqual(", "(obj.$attrs.overlay.options.offset.y).assertEqu", " (done) {\n      let options = {\n        uri: 'p"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_all": "declare class SelectAttribute extends CommonMethod<SelectAttribute> {\r\n  \r\n  selected(value: number): SelectAttribute;\r\n\r\n  \r\n  value(value: string): SelectAttribute;\r\n\r\n  \r\n  font(value: Font): SelectAttribute;\r\n\r\n  \r\n  fontColor(value: ResourceColor): SelectAttribute;\r\n\r\n  \r\n  selectedOptionBgColor(value: ResourceColor): SelectAttribute;\r\n\r\n  \r\n  selectedOptionFont(value: Font): SelectAttribute;\r\n\r\n  \r\n  selectedOptionFontColor(value: ResourceColor): SelectAttribute;\r\n\r\n  \r\n  optionBgColor(value: ResourceColor): SelectAttribute;\r\n\r\n  \r\n  optionFont(value: Font): SelectAttribute;\r\n\r\n  \r\n  optionFontColor(value: ResourceColor): SelectAttribute;\r\n\r\n  \r\n  onSelect(callback: (index: number, value?: string) => void): SelectAttribute;\r\n}", "api_method_name": "SelectAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "selected", "api_method_all": "selected(value: number): SelectAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 185, "since": 8, "api_used": "\u662f", "lines": ["or = eventData.data.selectedColor;\n      }\n     ", "\n        }\n        .selectedColor(0x39a2db)\n    ", "FF0000')\n          .selectedColor('#FF0000FF')\n ", " if (eventData.data.selectedColor != null) {\n   ", "opup(true)\n        .selectedFont({ size: 16, wei", "ample01 {\n  private selectedDate: Date = new Dat", "ent === item ? this.selectedIcon : this.normalIc", "lor.Red)\n          .selectedColor(Color.Blue)\n  ", "ct(true)\n          .selectedColor(0x39a2db)\n    ", "FF00DDDD')\n        .selectedColor(0xffffff)\n    ", "ata: {\n            \"selectedColor\": '#330A59F8',", "eExample {\n  @State selectedColor: Color = '#330", "t(false)\n          .selectedColor(0x39a2db)\n    ", "     selected: this.selectedDate,\n        type: ", "s.fruits,\n          selected: this.select,\n     ", "  expect(obj.$attrs.selectedColor).assertEqual('", "ata: {\n            \"selectedColor\": '-0.1',\n    ", "n: true })\n        .selectedColor(0x39a2db)\n    ", "Black)\n            .selectedColor(0xCCCCCC)\n    ", "xpect(objNew.$attrs.selectedColor).assertEqual('", "ata: {\n            \"selectedColor\": '-a',\n      ", "select = jsonString.selectedIndex\n            re", "r.Black)\n          .selectedColor(0xCCCCCC)\n    ", "Group'})\n          .selectedColor(0xed6f21)\n    ", "heckbox2')\n        .selectedColor(0x39a2db)\n    ", ".selectedColor(this.selectedColor)\n        .onCh", "s.splice(jsonString.selectedIndex, 1)\n          ", ".numbers[jsonString.selectedIndex]\n            t", "mg.png\"}])\n        .selected(2)\n        .value('", "t ATTRS_SELECTED = 'selected'\nconst ATTRS_LONG_C", "yValue: this.value, selected: 0 })\n        .colo", "or.Gray)\n          .selectedColor(Color.Blue)\n  ", "alth_heart.png\"))\n  selectedIcon: Resource = ($r", "fontColor)\n        .selectedOptionFont({size: 40", "ull) {\n        this.selectedColor = eventData.da", "heckbox1')\n        .selectedColor(0xed6f21)\n    ", "('toggle')\n        .selectedColor(this.selectedC", ".Gray)\n            .selectedColor(Color.Blue)\n  ", "FF737373')\n        .selectedBackgroundColor('#FF", "2200-1-1'),\n        selected: this.selectedDate,"], "files": ["Select.ets", "PatternLock.ets", "textPickerDialog.ets", "Slider.ets", "AlphabetIndexer.ets", "Constants.ets", "ToggleJsunit.test.ets", "sideBar.ets", "toggle.ets", "checkboxGroup.ets", "datePicker.ets", "dragEvent2.ets", "index.js", "inputProps.test.js", "optionProps.test.js", "ResponseRegion.ets", "dragEvent.ets", "checkbox.ets", "select.ets", "Toggle.ets", "listProps.test.js", "slider.ets", "textareaProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "value", "api_method_all": "value(value: string): SelectAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 14499, "since": 8, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "font", "api_method_all": "font(value: Font): SelectAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1278, "since": 8, "api_used": "\u662f", "lines": ["g container: grid').fontSize(20).fontColor(C", "height(40)\n        .fontSize(16)\n        .ba", "   Text('saturate').fontSize(15).fontColor(0", "t('2')\n            .fontSize(20)\n           ", "').key(\"alignSelf\").fontSize(9).fontColor(0x", "nSelf\").fontSize(9).fontColor(0xCCCCCC).widt", "margin(30)\n        .fontSize(20)\n        .on", "ETS TEST')\n        .fontSize(50)\n        .fo", "rast').fontSize(15).fontColor(0xCCCCCC).widt", "blur').fontSize(15).fontColor(0xCCCCCC).widt", "Basis').fontSize(9).fontColor(0xCCCCCC).widt", "  Text('hueRotate').fontSize(15).fontColor(0", "adow').fontSize(15).fontColor(0xCCCCCC).widt", " Text('alignItems').fontSize(9).fontColor(0x", " row').fontSize(20).fontColor(Color.Black).w", " Text('flexShrink').fontSize(9).fontColor(0x", "  Text('grayscale').fontSize(15).fontColor(0", "     Text('shadow').fontSize(15).fontColor(0", "  Text('font blur').fontSize(15).fontColor(0", "bb2cb)\n            .fontSize(20)\n           ", "cale').fontSize(15).fontColor(0xCCCCCC).widt", "t('1')\n            .fontSize(20)\n           ", "       Text('Left').fontSize(25)\n        }\n ", "ty 4').fontSize(20).fontColor(Color.Black).w", "t('4')\n            .fontSize(20)\n           ", "ness').fontSize(15).fontColor(0xCCCCCC).widt", "xGrow\").fontSize(9).fontColor(0xCCCCCC).widt", "ext('backdropBlur').fontSize(15).fontColor(0", "grid').fontSize(20).fontColor(Color.Black).w", "   Text('contrast').fontSize(15).fontColor(0", "vert').fontSize(15).fontColor(0xCCCCCC).widt", "     Text('Center').fontSize(25)\n        }\n ", "Blur').fontSize(15).fontColor(0xCCCCCC).widt", "displayPriority 4').fontSize(20).fontColor(C", "ntSize(50)\n        .fontWeight(FontWeight.Bo", "Items').fontSize(9).fontColor(0xCCCCCC).widt", "t('3')\n            .fontSize(20)\n           ", "ng container: row').fontSize(20).fontColor(C", " Text('brightness').fontSize(15).fontColor(0", "      Text('Right').fontSize(25)\n        }\n ", "w').key(\"flexGrow\").fontSize(9).fontColor(0x", "  Text('flexBasis').fontSize(9).fontColor(0x", "tate').fontSize(15).fontColor(0xCCCCCC).widt", "hrink').fontSize(9).fontColor(0xCCCCCC).widt", "     Text('invert').fontSize(15).fontColor(0", "10 }) {\n      Text('font blur').fontSize(15)", "2cb)\n              .fontSize(40)\n           ", "rate').fontSize(15).fontColor(0xCCCCCC).widt"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "placement.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "PanDirectionJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "Stack.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "stepper.ets", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "lazyForEach.ets", "listItem.ets", "grid.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "rating.ets", "Path.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "GestureModeJsunit.test.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "Calendar.ets", "refresh.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "fontColor", "api_method_all": "fontColor(value: ResourceColor): SelectAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 384, "since": 8, "api_used": "\u662f", "lines": ["Size(35)\n          .fontColor(Color.Blue)\n       ", " {\n                \"fontColor\": this.fontColor,\n ", "ize(9).width('90%').fontColor(0xCCCCCC)\n        R", "hrink').fontSize(9).fontColor(0xCCCCCC).width('90", "extStyle {\n  @State fontColor: Color = Color.Red;", "grid').fontSize(20).fontColor(Color.Black).width(", "pect(eventData.data.fontColor).assertEqual(Color.", "\"[testTextStyle001] fontColor: \" + obj.$attrs.fon", "Blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ness').fontSize(15).fontColor(0xCCCCCC).width('90", "rast').fontSize(15).fontColor(0xCCCCCC).width('90", "ty 4').fontSize(20).fontColor(Color.Black).width(", "s rolling\"\n  @State fontColor: Color = Color.Blue", "blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ive text')\n        .fontColor(Color.Red)\n        ", "lor) {\n        this.fontColor = eventData.data.fo", "vert').fontSize(15).fontColor(0xCCCCCC).width('90", "'marquee')\n        .fontColor(this.fontColor)\n   ", "      .fontSize(12).fontColor(0xCCCCCC).maxLines(", "adow').fontSize(15).fontColor(0xCCCCCC).width('90", "tate').fontSize(15).fontColor(0xCCCCCC).width('90", "    .fontColor(this.fontColor)\n        .colorBlen", "  \"fontColor\": this.fontColor,\n              }\n  ", "xGrow\").fontSize(9).fontColor(0xCCCCCC).width('90", " row').fontSize(20).fontColor(Color.Black).width(", "  expect(obj.$attrs.fontColor).assertEqual('#FFFF", "e(20)\n        .key('fontColor')\n\n      Text(`text", "Items').fontSize(9).fontColor(0xCCCCCC).width('90", "or = eventData.data.fontColor;\n      } else if (e", "pro text')\n        .fontColor(Color.Orange)\n     ", "cale').fontSize(15).fontColor(0xCCCCCC).width('90", "ntColor}`)\n        .fontColor(this.fontColor)\n   ", "lor: \" + obj.$attrs.fontColor);\n      expect(obj.", "\"[testTextStyle002] fontColor: \" + obj.$attrs.fon", "ageShow() {\n    let fontColorChangeEvent = {\n    ", "    .fontColor(this.fontColor)\n        .fontSize(", " getInspectorByKey('fontColor');\n      console.in", "  events_emitter.on(fontColorChangeEvent, this.te", "rate').fontSize(15).fontColor(0xCCCCCC).width('90", "Basis').fontSize(9).fontColor(0xCCCCCC).width('90", " state is: ' + this.fontColor);\n          try {\n ", "ata: {\n            \"fontColor\": Color.Blue\n      ", "t font color ${this.fontColor}`)\n        .fontCol", "nSelf\").fontSize(9).fontColor(0xCCCCCC).width('90", " if (eventData.data.fontColor) {\n        this.fon"], "files": ["enumsHorizontalAlign.ets", "imageFit.ets", "Span.ets", "column.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "textArea.ets", "textInput.ets", "transForm.ets", "path.ets", "Column.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "PatternLock.ets", "Stepper.ets", "enumsImage.ets", "PieceCode.ets", "textStyle.ets", "imageEffects.ets", "textClock.ets", "layoutConstraints.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "Path.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "TextTimerJsunit.test.ets", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "ColumnSplit.ets", "colorGradient.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "selectedOptionBgColor", "api_method_all": "selectedOptionBgColor(value: ResourceColor): SelectAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["(0x000000)\n        .selectedOptionBgColor(0xCCCCCC)\n        ."], "files": ["Select.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "selectedOptionFont", "api_method_all": "selectedOptionFont(value: Font): SelectAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["(0xCCCCCC)\n        .selectedOptionFontColor(0x000000)\n    ", "fontColor)\n        .selectedOptionFont({size: 40, weight: ", ".Normal })\n        .selectedOptionFont({size: 40, weight: "], "files": ["Select.ets", "select.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "selectedOptionFontColor", "api_method_all": "selectedOptionFontColor(value: ResourceColor): SelectAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["(0xCCCCCC)\n        .selectedOptionFontColor(0x000000)\n        ."], "files": ["Select.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "optionBgColor", "api_method_all": "optionBgColor(value: ResourceColor): SelectAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["(0x317aff)\n        .optionBgColor(0xFFFFFF)\n        ."], "files": ["Select.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "optionFont", "api_method_all": "optionFont(value: Font): SelectAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["(0xFFFFFF)\n        .optionFontColor(0x000000)\n    ", ".Normal })\n        .optionFont({size: 30, weight: "], "files": ["Select.ets", "select.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "optionFontColor", "api_method_all": "optionFontColor(value: ResourceColor): SelectAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["(0xFFFFFF)\n        .optionFontColor(0x000000)\n        ."], "files": ["Select.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "onSelectcallback", "api_method_all": "onSelect(callback: (index: number, value?: string) => void): SelectAttribute;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SelectAttribute", "api_method_name": "onSelectcallback", "api_method_all": "onSelect(callback: (index: number, value?: string) => void): SelectAttribute;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}