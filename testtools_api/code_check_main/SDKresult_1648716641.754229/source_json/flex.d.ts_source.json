{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\flex", "api": [{"api_class_name": "FlexOptions", "api_method_all": "declare interface FlexOptions {\n  \n  direction?: FlexDirection;\n\n  \n  wrap?: FlexWrap;\n\n  \n  justifyContent?: FlexAlign;\n\n  \n  alignItems?: ItemAlign;\n\n  \n  alignContent?: FlexAlign;\n}", "api_method_name": "FlexOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FlexOptions", "api_method_name": "direction", "api_method_all": "direction?: FlexDirection", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 596, "since": 7, "api_used": "\u662f", "lines": ["lder() {\n    Flex({ direction: FlexDirection.Colu", "on = eventData.data.direction;\n        console.lo", "ata: {\n            \"direction\": Direction.Ltr\n   ", "ll: 'forwards',\n    direction: \"normal\",\n    begi", " if (eventData.data.direction != null) {\n        ", "uild() {\n    Flex({ direction: FlexDirection.Colu", " angle: 80,\n        direction: GradientDirection.", "ion: \" + obj.$attrs.direction);\n      expect(obj.", "'90%')\n      Flex({ direction: FlexDirection.Row,", "  expect(obj.$attrs.direction).assertEqual('Direc", ".$attrs.constructor.direction).assertEqual('FlexD", " {\n    Flex({\n      direction: FlexDirection.Colu", "    .direction(this.direction)\n        .key('rowD", "gin(5)\n      Flex({ direction: FlexDirection.Row,", "dth('90%')\n        .direction(this.direction)\n   ", "  events_emitter.on(directionChangeEvent, this.st", "    Text('slider in direction set').fontSize(9).f", "   Text('slider out direction set').fontSize(9).f", ".InSet,\n            direction: this.decorationVal", ".TopStart;\n  @State direction: Direction = Direct", "gn')\n\n        Text('direction').fontSize(20).font", "ction value\" + this.direction);\n      }\n    }\n  }", "'90%')\n      Flex({ direction: FlexDirection.Row ", "xExample {\n  @State direction: FlexDirection = Fl", "umber = 3;\n  @State direction: Axis = Axis.Horizo", "weekStyle)\n        .direction(this.direction)\n   ", "uild() {\n    Flex({ direction: FlexDirection.Row,", "OutSet,\n            direction: Axis.Vertical\n    ", " ATTRS_DIRECTION = 'direction'\nconst ATTRS_ALIGN ", "\n    angle: 90,\n    direction: GradientDirection.", "rations: 1,\n        direction: 'alternate',\n     ", " if (eventData.data.direction) {\n        this.dir", "CallBack);\n\n    let directionChangeEvent = {\n    ", "ion) {\n        this.direction = eventData.data.di", "ull) {\n        this.direction = eventData.data.di", "on = eventData.data.direction;\n      } else if (e", ".log(\"Calendar page direction value\" + this.direc", "    .direction(this.direction)\n        .backgroun", "ttrs.linearGradient.direction).assertEqual('Gradi"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "Qrcode.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "transition.ets", "Image.ets", "List.test.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "positionSetting.ets", "animatorOption.ets", "tapGesture.ets", "FlexJsunit.test.ets", "flexDirection.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "flex.ets", "marqueeProps.test.js", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "BackgroundJsunit.test.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "GradientDirectionJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "RowJsunit.test.ets", "index.js", "ohosRouterA.ets", "Link.ets", "slider.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexOptions", "api_method_name": "wrap", "api_method_all": "wrap?: FlexWrap", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["tion.Row,\n          wrap: FlexWrap.Wrap,\n   ", "ceAround,\n          wrap: FlexWrap.Wrap,\n   ", ".$attrs.constructor.wrap).assertEqual('FlexW", "nsole.log(\"yr flex1 wrap-'FlexWrap.Wrap':\" +", ": ItemAlign.Center, wrap: FlexWrap.Wrap }) {", ".$attrs.constructor.wrap-'FlexWrap.NoWrap':\"", ".source_;\n      let wrappedValue_ = twoWay.o", "in(15)\n      Flex({ wrap: FlexWrap.Wrap, jus", ".$attrs.constructor.wrap));\n      console.lo", "eBetween,\n          wrap: FlexWrap.Wrap,\n   ", "n.Column,\n          wrap: FlexWrap.NoWrap,\n ", ".$attrs.constructor.wrap));\n      expect(obj", "ceEvenly,\n          wrap: FlexWrap.Wrap,\n   ", "0%')\n        Flex({ wrap: FlexWrap.WrapRever", "wReverse,\n          wrap: FlexWrap.Wrap,\n   ", ".source_;\n      let wrappedValue_ = oneWay.o"], "files": ["divider.ets", "Flex.ets", "SubscribaleAbstractJsunit.test.ets", "PatternLock.ets", "flexWrap.ets", "FlexJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexOptions", "api_method_name": "justifyContent", "api_method_all": "justifyContent?: FlexAlign", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 132, "since": 7, "api_used": "\u662f", "lines": [": ItemAlign.Center, justifyContent: FlexAlign.Center }", ": ItemAlign.Center, justifyContent: FlexAlign.SpaceBet", "100%')\n      Flex({ justifyContent: FlexAlign.SpaceBet", ": ItemAlign.Center, justifyContent: FlexAlign.Center})", "ustifyContent: this.justifyContent }) {\n      Text('1'", "Align.Center,\n      justifyContent: FlexAlign.Center\n ", ".$attrs.constructor.justifyContent).assertEqual('FlexA", "s: ItemAlign.Start, justifyContent: FlexAlign.Start })", "uild() {\n    Flex({ justifyContent: FlexAlign.SpaceAro", "exDirection.Column, justifyContent:  FlexAlign.SpaceBe", "xF5DEB3)\n    }.key(\"justifyContent\")\n    .width('90%')", "5 }) {\n      Flex({ justifyContent: FlexAlign.SpaceAro", ": ItemAlign.Center, justifyContent: FlexAlign.SpaceAro", "   })\n\n      Flex({ justifyContent: FlexAlign.SpaceAro", "Align.Center,\n      justifyContent: FlexAlign.Center }", "s: ItemAlign.Start, justifyContent: FlexAlign.SpaceBet", "tentFlex {\n  @State justifyContent: FlexAlign = FlexAl", "'90%')\n      Flex({ justifyContent: FlexAlign.SpaceAro", "exDirection.Column, justifyContent: FlexAlign.Center, ", " 10 })\n      Flex({ justifyContent: FlexAlign.SpaceAro", "uild() {\n    Flex({ justifyContent: this.justifyConten", " getInspectorByKey('justifyContent');\n      console.in", "tton')\n      Flex({ justifyContent: FlexAlign.SpaceEve"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "Qrcode.ets", "Span.ets", "richText.ets", "Progress.ets", "CustomDialog.ets", "marquee.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "Image.ets", "path.ets", "button.ets", "polyline.ets", "touch.ets", "EnmusFlexAlignJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "tapGesture.ets", "FlexJsunit.test.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "row.ets", "Marquee.ets", "PatternLock.ets", "Polyline.ets", "textPickerDialog.ets", "gridPage.ets", "enable.ets", "polygon.ets", "badge.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "calendar.ets", "dragEvent.ets", "circle.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "ellipse.ets", "radio.ets", "rating.ets", "Path.ets", "enumsFlexAlign.ets", "DataPanel.ets", "FormComponentPage.ets", "ohosRouterA.ets", "Link.ets", "Toggle.ets", "gestureMode.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexOptions", "api_method_name": "alignItems", "api_method_all": "alignItems?: ItemAlign", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 163, "since": 7, "api_used": "\u662f", "lines": [" 5 }) {\n      Text('alignItems(Start)').fontSize(9", " FlexDirection.Row, alignItems: ItemAlign.Center }", "ull) {\n        this.alignItems = eventData.data.al", "  if(eventData.data.alignItems != null) {\n        ", "tringify(obj.$attrs.alignItems));\n      expect(obj", "   .alignItems(this.alignItems)\n    }.width('100%'", "  expect(obj.$attrs.alignItems).assertEqual('Horiz", "exDirection.Column, alignItems: ItemAlign.Center,}", "  expect(obj.$attrs.alignItems).assertEqual('Verti", "      }\n      .key(\"alignItemsColumn\")\n      .widt", "r(0xAFEEEE)\n      }.alignItems(VerticalAlign.Cente", "ction.Column,\n      alignItems: ItemAlign.Center,\n", "r(0xAFEEEE)\n      }.alignItems(HorizontalAlign.Cen", "Align.SpaceBetween, alignItems: ItemAlign.Start })", "nExample {\n  @State alignItems: HorizontalAlign = ", "exDirection.Column, alignItems: ItemAlign.Center, ", "exDirection.Column, alignItems: ItemAlign.Center,\n", "xAlign.SpaceAround, alignItems: ItemAlign.Center }", "ms = eventData.data.alignItems;\n      }\n    }\n  }\n", " 5 }) {\n      Text('alignItems(Bottom)').fontSize(", ".$attrs.constructor.alignItems).assertEqual('FlexA", "uild() {\n    Flex({ alignItems: this.alignItems })", "mn, mode:this.mode, alignItems: ItemAlign.Center, ", "exDirection.Column, alignItems: ItemAlign.Start })", " width: 1 })\n      .alignItems(this.alignItems)\n  ", "umn() {\n      Text('alignItems').fontSize(9).fontC", "exDirection.Column, alignItems: ItemAlign.Start, j", "temsFlex {\n  @State alignItems : ItemAlign = ItemA", "({ alignItems: this.alignItems }) {\n      Text('1'", " getInspectorByKey('alignItemsColumn');\n      let ", " FlexDirection.Row, alignItems: ItemAlign.Center, ", ": FlexAlign.Center, alignItems: ItemAlign.Center }", "ata: {\n            \"alignItems\":HorizontalAlign.Ce"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "playMode.ets", "enumsHorizontalAlign.ets", "Qrcode.ets", "Row.ets", "imageFit.ets", "Span.ets", "richText.ets", "column.ets", "Progress.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "border.ets", "transition.ets", "Image.ets", "Column.ets", "button.ets", "touch.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "enumsVerticalAlign.ets", "bindMenu.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "text.ets", "EnmusItemAlignJsunit.test.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "tapGesture.ets", "FlexJsunit.test.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "row.ets", "Marquee.ets", "flex.ets", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "enumsItemAlign.ets", "EnmusVerticalAlignJsunit.test.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "ellipse.ets", "radio.ets", "rating.ets", "DataPanel.ets", "RowJsunit.test.ets", "ColumnJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "Toggle.ets", "Calendar.ets", "gestureMode.ets", "motionPath.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexOptions", "api_method_name": "alignContent", "api_method_all": "alignContent?: FlexAlign", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 66, "since": 7, "api_used": "\u662f", "lines": ["ild() {\n    Stack({ alignContent: Alignment.TopStart", ".$attrs.constructor.alignContent));\n      console.in", "gn.Start,\n          alignContent: FlexAlign.Start,\n ", "'justifyContent AND alignContent').fontSize(9).fontC", "k3')\n\n      Stack({ alignContent: Alignment.Center }", "sole.log(\"cd stack3 alignContent\" + JSON.stringify(o", ".$attrs.constructor.alignContent-'FlexAlign.Center':", "ceAround,\n          alignContent: FlexAlign.SpaceAro", "n() {\n      Stack({ alignContent: Alignment.End }) {", "gn.Start,\n          alignContent: FlexAlign.Center,\n", "k4')\n\n      Stack({ alignContent: Alignment.End }) {", "nsole.log(\"cd stack alignContent\" + JSON.stringify(o", "k7')\n\n      Stack({ alignContent: Alignment.TopEnd }", "ceEvenly,\n          alignContent: FlexAlign.SpaceEve", "k5')\n\n      Stack({ alignContent: Alignment.Top }) {", "k6')\n\n      Stack({ alignContent: Alignment.TopStart", ".$attrs.constructor.alignContent-'FlexAlign.Start':\"", "Bold)\n      Stack({ alignContent: this.alignContent ", "%')\n        Stack({ alignContent: Alignment.TopStart", "sole.log(\"cd stack2 alignContent\" + JSON.stringify(o", "  expect(obj.$attrs.alignContent).assertEqual('Align", " alignContent: this.alignContent }) {\n        Text('", "lign.End,\n          alignContent: FlexAlign.End,\n   ", ".$attrs.constructor.alignContent).assertEqual(\"FlexA", ".$attrs.constructor.alignContent-'FlexAlign.SpaceAro", ".$attrs.constructor.alignContent-'FlexAlign.SpaceEve", "tringify(obj.$attrs.alignContent));\n      expect(obj", "  })\n\n      Stack({ alignContent: Alignment.BottomSt", "k1')\n\n      Stack({ alignContent: Alignment.BottomEn", "nsole.log(\"yr flex2 alignContent-'FlexAlign.End':\" +", "k2')\n\n      Stack({ alignContent: Alignment.Start })", "testcase {\n  @State alignContent: Alignment = Alignm", "sole.log(\"cd stack1 alignContent\" + JSON.stringify(o"], "files": ["scrollBar.ets", "Stack.ets", "Flex.ets", "StackJsunit.test.ets", "list.ets", "positionSetting.ets", "List.ets", "FlexJsunit.test.ets", "scrollCode.ets", "edgeEffect.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexInterface", "api_method_all": "interface FlexInterface {\n  \n  (value?: FlexOptions): FlexAttribute;\n}", "api_method_name": "FlexInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FlexInterface", "api_method_name": "value", "api_method_all": "(value?: FlexOptions): FlexAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FlexAttribute", "api_method_all": "declare class FlexAttribute extends CommonMethod<FlexAttribute> {}", "api_method_name": "FlexAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}