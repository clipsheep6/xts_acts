{"subsystem_ch": "\u5143\u80fd\u529b\u5b50\u7cfb\u7edf", "subsystem_en": "aafwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\application\\MissionInfo", "api": [{"api_class_name": "MissionInfo", "api_method_all": "export interface MissionInfo {\n    \n    missionId: number;\n\n    \n    runningState: number;\n\n    \n    lockedState: boolean;\n\n    \n    timestamp: string;\n\n    \n    want: Want;\n\n    \n    label: string;\n\n    \n    iconPath: string;\n\n    \n     continuable: boolean;\n}", "api_method_name": "MissionInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 172, "since": 8, "api_used": "\u662f", "lines": ["ts_Ams_test_3600 getMissionInfos info[' + i + \"]: \"", "ts_Ams_test_7000 getMissionInfos error.code : \\\n   ", "ts_Ams_test_5400 getMissionInfos data[' + i + \"]: \"", "s_Ams_test_11900 getMissionInfos result[' + i + \"]:", "ts_Ams_test_0300 getMissionInfos data ' + JSON.stri", "ts_Ams_test_5400 getMissionInfos error.code : \\\n   ", "ts_Ams_test_0300 getMissionInfos data[' + i + \"]: \"", "dScene beforeAll getMissionInfos data: ' + JSON.str", "t missionManager.getMissionInfos(\"\", maxnum).then(d", "ts_Ams_test_0400 getMissionInfos error.code : \\\n   ", "ts_Ams_test_3600 getMissionInfos error.code : \\\n   ", "ts_Ams_test_1100 getMissionInfos failed: ' + err);\n", "ts_Ams_test_7000 getMissionInfos data[' + i + \"]: \"", "ts_Ams_test_6000 getMissionInfos result[' + i + \"]:", "ts_Ams_test_7600 getMissionInfos result[' + i + \"]:", "ts_Ams_test_4400 getMissionInfos result[' + i + \"]:", "ts_Ams_test_0400 getMissionInfos data[' + i + \"]: \"", "ts_Ams_test_2000 getMissionInfos error.code : \\\n   ", "ts_Ams_test_5600 getMissionInfos result[' + i + \"]:", "hScene beforeAll getMissionInfos data: ' + JSON.str", "t missionManager.getMissionInfos(\"\", maxnum);\n     ", "ts_Ams_test_0300 getMissionInfos data[' + i + \"]\uff0c e", "  missionManager.getMissionInfos(\"\", maxnum,\n      ", "t missionManager.getMissionInfos(\"\", maxnum).catch(", "ts_Ams_test_2000 getMissionInfos data[' + i + \"]: \"", "tScene beforeAll getMissionInfos data: ' + JSON.str", "ts_Ams_test_2800 getMissionInfos result[' + i + \"]:", "ts_Ams_test_2400 getMissionInfos result[' + i + \"]:", "ts_Ams_test_1200 getMissionInfos result[' + i + \"]:", "ts_Ams_test_1100 getMissionInfos result[' + i + \"]:"], "files": ["MangerAbilityJsunit.test.js", "LockNew.js", "taskSwitchJsunit.test.js", "MissionManagerTest.js", "ActsProcessManageJsTest.test.js", "LockMission.test.js", "AbilityDisableTest.js", "MissionManager.test.js", "amsMissionSnapshotTest.test.js", "lanuageConfigapi7.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MissionInfo", "api_method_name": "missionId", "api_method_all": "missionId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 235, "since": 8, "api_used": "\u662f", "lines": ["ect(typeof (data[i].missionId)).assertEqual(\"numb", "     id = result[i].missionId;\n                br", "00 id[' + result[i].missionId + \"] \");\n          ", "CallBackFifthScene, missionId: \" + data[i].missio", "arMission(result[1].missionId,\n            (error", "     expect(info[i].missionId).assertLarger(0);\n\n", "CallBackFirstScene, missionId: \" + data[i].missio", "sionId: \" + data[i].missionId)\n                mi", "     expect(data[i].missionId).assertLarger(0);\n\n", "allBackFourthScene, missionId: \" + data[i].missio", "CallBackThirdScene, missionId: \" + data[i].missio", "onToFront(result[1].missionId,\n            (error", "onToFront(result[0].missionId,\n            (error", "sAmsTestFirstScene, missionId: \" + data[i].missio", "ect(typeof (info[i].missionId)).assertEqual(\"numb", "AmsTestFourthScene, missionId: \" + + JSON.stringi", "allBackSecondScene, missionId: \" + data[i].missio", "sAmsTestFifthScene, missionId: \" + data[i].missio", "onToFront(result[0].missionId).catch(err => {\n   ", "learMission(data[i].missionId,\n                  "], "files": ["MangerAbilityJsunit.test.js", "LockNew.js", "taskSwitchJsunit.test.js", "ActsProcessManageJsTest.test.js", "LockMission.test.js", "AbilityDisableTest.js", "MissionManager.test.js", "amsMissionSnapshotTest.test.js", "lanuageConfigapi7.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MissionInfo", "api_method_name": "runningState", "api_method_all": "runningState: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 26, "since": 8, "api_used": "\u662f", "lines": ["          result[i].runningState == 0) {\n           ", "            data[i].runningState == 0) {\n           ", "   (missionInfos[i].runningState == 0)) {\n          ", "&& (missionInfos[i].runningState == 0)) {\n          "], "files": ["LockNew.js", "MangerAbilityJsunit.test.js", "ActsProcessManageJsTest.test.js", "lanuageConfigapi7.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MissionInfo", "api_method_name": "lockedState", "api_method_all": "lockedState: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 29, "since": 8, "api_used": "\u662f", "lines": ["    expect(data[i]['lockedState'] == true).assertTr", "     expect(data[i].lockedState == false).assertTru", "nsole.log(\"data[i]['lockedState']222:::::::\"+data[i", "ame\"]+\n\t\t\t\"data[i]['lockedState']::::\"+data[i]['loc", "22:::::::\"+data[i]['lockedState']);\n               ", "ate']::::\"+data[i]['lockedState']);\n               ", "nsole.log(\"data[i]['lockedState']::::\"+data[i]['loc", "     expect(data[i].lockedState == true).assertTrue", "nsole.log(\"data[i]['lockedState']end::::\"+data[i]['", "']end::::\"+data[i]['lockedState']);\n               "], "files": ["LockNew.js", "AbilityDisableTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MissionInfo", "api_method_name": "timestamp", "api_method_all": "timestamp: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["                    timestamps.push(data[i].times", "        expect(data.timestamp == timestamps[1]).a", " + missionIds+\":::\"+timestamps[0]);\n            f", "   console.log(data.timestamp+\"::::\"+timestamps[1", "ta.timestamp+\"::::\"+timestamps[1]);\n             ", "t(data.timestamp == timestamps[1]).assertTrue();\n", "stamps.push(data[i].timestamp);\n                 ", "     expect(data[i].timestamp != 0).assertTrue();", "onIds = [];\n    var timestamps = [];\n    var abil"], "files": ["LockNew.js", "MissionManager.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MissionInfo", "api_method_name": "want", "api_method_all": "want: Want", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 981, "since": 8, "api_used": "\u662f", "lines": ["     expect(info[i].want.abilityName.length)", "ect(typeof (data[i].want.bundleName)).assert", "ect(typeof (info[i].want.abilityName)).asser", "ect(typeof (data[i].want)).assertEqual(\"obje", "' + error.code + ', want.bundleName:' + data", "     expect(info[i].want.bundleName.length).", "ist.indexOf(data[i].want.bundleName)).assert", "      if (result[i].want.abilityName != 'com", "dleName:' + data[i].want.bundleName);\n      ", "     expect(data[i].want.abilityName.length)", "ect(typeof (info[i].want.bundleName)).assert", "     expect(data[i].want.bundleName.length).", "ect(typeof (data[i].want.abilityName)).asser", "ect(typeof (info[i].want.deviceId)).assertEq", "ist.indexOf(data[i].want.abilityName)).asser", "ist.indexOf(info[i].want.abilityName)).asser", "        if (data[i].want.bundleName != 'com.", "ect(typeof (data[i].want.deviceId)).assertEq", "ist.indexOf(info[i].want.bundleName)).assert", "ect(typeof (info[i].want)).assertEqual(\"obje", "  {\n                want:\n                {\n"], "files": ["ActsGetWantAllTest.js", "ActsProcessManageJsTest.test.js", "taskSwitchJsunit.test.js", "app.js", "getAbilityInfoJsunit.test.ets", "ApplicationInfoJsunit.test.js", "amsMissionSnapshotTest.test.js", "service.js", "MangerAbilityJsunit.test.js", "LockNew.js", "startFULL.test.js", "ActsKillProcessTest.test.js", "index.js", "MissionManager.test.js", "index.ets", "ActsStServiceAbilityClientCaseTest.test.js", "FeatureAbilityJsunit.test.js", "AbilityDisableTest.js", "lanuageConfigapi7.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MissionInfo", "api_method_name": "label", "api_method_all": "label: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 102, "since": 8, "api_used": "\u662f", "lines": ["expect(typeof (info.label)).assertEqual(\"stri", ";\n      expect(data.labelId >0).assertTrue();", " \"checkAbilityInfo2 label : \" + data.label);\n", "+ \"checkAbilityInfo labelId : \" + data.labelI", ";\n      expect(data.labelId).assertEqual(0);\n", ";\n      expect(data.labelId > 0).assertTrue()", "expect(typeof (data.label)).assertEqual(\"stri", " labelId : \" + info.labelId);\n      console.l", "o2 label : \" + data.label);\n      console.log", "fo label : \" + info.label);\n      console.log", "expect(typeof (data.labelId)).assertEqual(\"nu", ";\n      expect(info.label).assertEqual(\"$stri", ";\n      expect(data.label).assertEqual(\"$stri", "expect(typeof (info.labelId)).assertEqual(\"st", "fo label : \" + data.label);\n      console.log", "\"checkHapModuleInfo labelId : \" + data.labelI", "heckApplicationInfo labelId : \" + info.labelI", "\"checkHapModuleInfo label : \" + data.label);\n", " labelId : \" + data.labelId);\n      console.l", "ect(typeof (info[i].label)).assertEqual(\"stri", "ect(typeof (data[i].label)).assertEqual(\"stri", "heckApplicationInfo label : \" + info.label);\n", " \"checkAbilityInfo2 labelId : \" + data.labelI", "+ \"checkAbilityInfo label : \" + data.label);\n"], "files": ["getAbilityInfoJsunit2.test.ets", "MangerAbilityJsunit.test.js", "LockNew.js", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MissionInfo", "api_method_name": "iconPath", "api_method_all": "iconPath: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["ect(typeof (data[i].iconPath)).assertEqual(\"stri", "ect(typeof (info[i].iconPath)).assertEqual(\"stri"], "files": ["MangerAbilityJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MissionInfo", "api_method_name": "continuable", "api_method_all": "continuable: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["gify(missionInfo[i].continuable));\n                ", "pect(missionInfo[i].continuable == false).assertTru"], "files": ["MissionManager.test.js"], "is_white": " ", "desc": " "}]}