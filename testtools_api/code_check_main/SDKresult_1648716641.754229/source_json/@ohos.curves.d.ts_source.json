{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.curves", "api": [{"api_class_name": "curves", "api_method_all": "declare namespace curves {\n  \n  enum Curve {\n    Linear,\n    Ease,\n    EaseIn,\n    EaseOut,\n    EaseInOut,\n    FastOutSlowIn,\n    LinearOutSlowIn,\n    FastOutLinearIn,\n    ExtremeDeceleration,\n    Sharp,\n    Rhythm,\n    Smooth,\n    Friction,\n  }\n\n  \n  function init(curve?: Curve): string;\n\n  \n  function steps(count: number, end: boolean): string;\n\n  \n  function cubicBezier(x1: number, y1: number, x2: number, y2: number): string;\n\n  \n  function spring(velocity: number, mass: number, stiffness: number, damping: number): string;\n}", "api_method_name": "curves", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": [" console.info(\"push curves page result:\" + JSO", "  console.info(\"get curves state pages:\" + JSO", "gurationJsunit();\n  curvesJsunit();\n  imageAni", "        uri: 'pages/curves',\n      }\n      try", "  console.info(\"get curves state pages.name:\" ", "      console.info(\"curves beforeEach start\");", "s));\n        if (!(\"curves\" == pages.name)) {\n", "t.test.ets';\nimport curvesJsunit from './Curve", "      console.info(\"curves after each called\")", "rt default function curvesJsunit() {\n  describ", " Curves from '@ohos.curves'\n\n@Entry\n@Component", "console.error(\"push curves page error:\" + err)"], "files": ["List.test.ets", "curves.ets", "CurvesJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "curves", "api_method_name": "init", "api_method_all": "function init(curve?: Curve): string;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 50, "since": 7, "api_used": "\u662f", "lines": ["c.name      testlistinitialindex\n      * @tc", "xtend)\n        core.init()\n        core.subs", "fo(\"[listProps] get initialoffset value is: ", "tNone,\n             initialindex:this.initia", "se(globalThis.value.initialindex);\n        c", "tor()\n         this.initialoffset = this.$el", "nsole.info('testlistinitialindex START');\n  ", " initialoffset:this.initialoffset,\n         ", "*/\n     it('testlistinitialindex', 0, async ", "nsole.info('testlistinitialoffset START');\n ", "ndex:null,\n         initialoffset:null,\n    ", "tringify(obj.$attrs.initialIndex))\n      con", "et = this.$element(\"initialoffset\").getInspe", "  initialindex:this.initialindex, initialoff", "ex = this.$element(\"initialindex\").getInspec", "tend);\n        core.init();\n        core.sub", "c.name      testlistinitialoffset\n      * @t", "let curve1 = Curves.init();\n          let cu", "  List({ space: 20, initialIndex: 0 }) {\n   ", "tringify(obj.$attrs.initialindex));\n        ", "tor()\n         this.initialindex = this.$ele", "  expect(obj.$attrs.initialoffset).assertEqu", "*/\n     it('testlistinitialoffset', 0, async", "se(globalThis.value.initialoffset);\n        ", "  expect(obj.$attrs.initialIndex).assertEqua", "xtend)\n        core.init()\n        require('", "rs.id).assertEqual('initialoffset')\n        ", "rs.id).assertEqual('initialindex')\n        e", "None:null,\n         initialindex:null,\n     ", "fo(\"[listProps] get initialindex value is: \"", "   List({ space: 5, initialIndex: 0 }) {\n   ", "tringify(obj.$attrs.initialoffset));\n       ", ":this.initialindex, initialoffset:this.initi", "console.log('List\u2018s initialIndex is ' + JSON", "  expect(obj.$attrs.initialindex).assertEqua", "on).assertEqual(\"infinite\")\n        console."], "files": ["Navigation.ets", "index.js", "dragEvent.ets", "listProps.test.js", "list.ets", "listItem.ets", "imageAnimatorProps.test.js", "index.ets", "List.ets", "dragEvent2.ets", "ListJsunit.test.ets", "curves.ets", "navigation.ets", "edgeEffect.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "curves", "api_method_name": "steps", "api_method_all": "function steps(count: number, end: boolean): string;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 71, "since": 7, "api_used": "\u662f", "lines": [": null,\n        showstepsNone : null,\n       ", " this.$element(\"showstepsFalse\").getInspector", "ze = this.$element(\"stepsize\").getInspector()", "e;\n    swipeSteps = steps;\n    if (swipeSteps", "tepsNone : this.showstepsNone,\n            sh", "X, downY, upX, upY, steps, drag) {\n    var xS", " this.$element(\"showstepsNone\").getInspector(", "()\n        this.showstepsTrue = this.$element", "epsFalse : this.showstepsFalse,\n            s", " this.$element(\"showstepsTrue\").getInspector(", "ctor()\n        this.stepsize = this.$element(", "ue,\n            showstepsFalse : this.showste", "X, downY, upX, upY, steps, true)\n  }\n\n  stati", "ne,\n            showstepsTrue : this.showstep", "ing : null,\n        stepsize : null,\n        ", "se,\n            showstepsNone : this.showstep", "X, downY, upX, upY, steps) {\n    console.info", "()\n        this.showstepsNone = this.$element", ": null,\n        showstepsTrue : null,\n       ", "()\n        this.showstepsFalse = this.$elemen", "tepsTrue : this.showstepsTrue,\n            sh", "    stepsize : this.stepsize,\n            ind", "X, downY, upX, upY, steps, false)\n  }\n\n  stat", "rating,\n            stepsize : this.stepsize,", ": null,\n        showstepsFalse : null,\n      "], "files": ["ratingProps.test.js", "sliderProps.test.js", "Utils.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "curves", "api_method_name": "cubicBezier", "api_method_all": "function cubicBezier(x1: number, y1: number, x2: number, y2: number): string;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [" let curve = Curves.cubicBezier(0.25, 0.1, 0.25, 1.", "et curve11 = Curves.cubicBezier(0.1, 0.0, 0.1, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "curves", "api_method_name": "spring", "api_method_all": "function spring(velocity: number, mass: number, stiffness: number, damping: number): string;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 146, "since": 0, "api_used": "\u662f", "lines": ["ffect).assertEqual('spring-large')\n        don", "ffect).assertEqual('spring-medium')\n        do", "ffect).assertEqual('spring-small')\n         do", "ffect).assertEqual('spring-small')\n        don", "ffect).assertEqual('spring-large')\n         do", "ffect).assertEqual('spring-medium')\n         d", "000 , curve: Curves.spring(0.25, 0.1, 0.25, 1.", "et curve12 = Curves.spring(100, 1, 228, 30);\n "], "files": ["ratingProps.test.js", "listItemGroupProps.test.js", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "tabContentProps.test.js", "textProps.test.js", "imageAnimatorProps.test.js", "buttonProps.test.js", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "stackProps.test.js", "divProps.test.js", "switchProps.test.js", "popupProps.test.js", "refreshProps.test.js", "curves.ets", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "spanProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "toolbarItemProps.test.js", "videoProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "toggleProps.test.js", "optionProps.test.js", "badgeProps.test.js", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "gridColProps.test.js", "panelProps.test.js", "menuProps.test.js", "gridContainerProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_all": "enum Curve {\n    Linear,\n    Ease,\n    EaseIn,\n    EaseOut,\n    EaseInOut,\n    FastOutSlowIn,\n    LinearOutSlowIn,\n    FastOutLinearIn,\n    ExtremeDeceleration,\n    Sharp,\n    Rhythm,\n    Smooth,\n    Friction,\n  }", "api_method_name": "Curve", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": [" this.context.bezierCurveTo(20, 100 + height,", "let curve2 = Curves.Curve.EaseIn(0.42, 0.0, 1", "       let curve6 = Curves.LinearOutSlowIn(0.", "      path.quadraticCurveTo(50, 50, 100, 10);", "is.context.quadraticCurveTo(100 + width, 100 ", "        let curve = Curves.cubicBezier(0.25, ", "         this.bezierCurveTo();\n              ", "ation: 1200, curve: Curve.Linear })\n      .on", "      let curve12 = Curves.spring(100, 1, 228", "@ts-nocheck\n\nimport Curves from '@ohos.curves", "ation: 1500, curve: Curve.Ease })\n      .onEx", "       let curve9 = Curves.Sharp(0.33, 0.0, 0", "let curve4 = Curves.Curve.EaseInOut(0.42, 0.0", "       ctx.quadraticCurveTo(50, 50, 100, 10);", "ation: 4000, curve: Curve.Linear }, () => {\n ", "       let curve8 = Curves.ExtremeDeceleratio", "       let curve1 = Curves.init();\n          ", "      let curve11 = Curves.cubicBezier(0.1, 0", "       let curve3 = Curves.Curve.EaseOut(0.0,", "100%')\n\n      Text('Curve graphics').fontSize", ";\n        ctx.bezierCurveTo(20, 40, 80, 40, 1", "      this.quadraticCurveTo();\n              ", " 100);\n  }\n\n  bezierCurveTo() {\n    let heigh", "\n        path.bezierCurveTo(10, 50, 100, 50, ", "urvesJsunit from './CurvesJsunit.test.ets';\ni", "let curve3 = Curves.Curve.EaseOut(0.0, 0.0, 0", "       let curve5 = Curves.FastOutSlowIn(0.4,", "       let curve4 = Curves.Curve.EaseInOut(0.", "       let curve2 = Curves.Curve.EaseIn(0.42,", "      let curve10 = Curves.Rhythm(0.7, 0.0, 0", "();\n  }\n\n  quadraticCurveTo() {\n    let heigh", "tion: 2000 , curve: Curves.spring(0.25, 0.1, ", "       let curve7 = Curves.FastOutLinearIn(0."], "files": ["pageTransition2.ets", "index.js", "pageTransition.ets", "path.ets", "motionPath.ets", "Path.ets", "List.test.ets", "curves.ets", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Linear", "api_method_all": "Linear,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 59, "since": 7, "api_used": "\u662f", "lines": ["s.value.calcModePropLinear);\n        console.i", " : this.calcModePropLinear,\n            calcMo", "ransformCalcModePropLinear\n     * @tc.desc    ", "15 }) {\n      Text('Linear Progress').fontSize", "        calcModePropLinear: null,\n        calc", " this.context.createLinearGradient(50, 1900, 1", "        calcModePropLinear : this.calcModeProp", "curve).assertEqual('Linear')\n      }\n      try", "         this.createLinearGradient();\n        ", ".displayModePropAutoLinear,\n        }\n    },\n\n", "tAnimateCalcModePropLinear\n     * @tc.desc    ", "tyle: ProgressStyle.Linear }).color(Color.Red)", "qual(\"ProgressStyle.Linear\")\n      console.inf", "teMotionCalcModePropLinear\n     * @tc.desc    ", "          \"curve\": \"Linear\"\n          }\n      ", "ve7 = Curves.FastOutLinearIn(0.4, 0.0, 1.0, 1.", "let curve6 = Curves.LinearOutSlowIn(0.0, 0.0, ", "   this.calcModePropLinear = this.$element(\"ca", "tyle: ProgressStyle.Linear })\n          .value", " 1200, curve: Curve.Linear })\n      .onEnter((", "1660);\n  }\n\n  createLinearGradient() {\n    let", "iperDisplayMode.AutoLinear\n  @State edgeEffect", " 4000, curve: Curve.Linear }, () => {\n        ", ".displayModePropAutoLinear = this.$element(\"di", "radient = ctx.createLinearGradient(0,0,200,0);", "\"displayModePropAutoLinear\").getInspector()\n  ", "+nameA+'CalcModePropLinear', 0, async function", "tEqual('calcModePropLinear')\n        expect(ob", "tyle: ProgressStyle.Linear }).width(200).value", "+nameA+'CalcModePropLinear START');\n        co", " displayModePropAutoLinear: null,\n    },\n\n    ", "lement(\"calcModePropLinear\").getInspector()\n  ", " displayModePropAutoLinear: this.displayModePr", "yle = ProgressStyle.Linear\n  private stateChan"], "files": ["ProgressJsunit.test.ets", "animateTransformProps.test.js", "pageTransition2.ets", "pageTransition.ets", "progress.ets", "swiperProps.test.js", "swiper.ets", "animateMotionProps.test.js", "AnimateJsunit.test.ets", "Progress.ets", "motionPath.ets", "index.js", "curves.ets", "canvas.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Ease", "api_method_all": "Ease,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["rve3 = Curves.Curve.EaseOut(0.0, 0.0, 0.58, ", "rve2 = Curves.Curve.EaseIn(0.42, 0.0, 1.0, 1", "rve4 = Curves.Curve.EaseInOut(0.42, 0.0, 0.5", " 1500, curve: Curve.Ease })\n      .onExit((t", "curve).assertEqual('Ease')\n      }\n      try", "te curve: string = 'Ease'\n  @State iteration"], "files": ["animate.ets", "pageTransition2.ets", "pageTransition.ets", "AnimateJsunit.test.ets", "curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "EaseIn", "api_method_all": "EaseIn,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["rve4 = Curves.Curve.EaseInOut(0.42, 0.0, 0.58,", "rve2 = Curves.Curve.EaseIn(0.42, 0.0, 1.0, 1.0"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "EaseOut", "api_method_all": "EaseOut,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["rve3 = Curves.Curve.EaseOut(0.0, 0.0, 0.58, 1.0"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "EaseInOut", "api_method_all": "EaseInOut,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["rve4 = Curves.Curve.EaseInOut(0.42, 0.0, 0.58, 1."], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "FastOutSlowIn", "api_method_all": "FastOutSlowIn,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["let curve5 = Curves.FastOutSlowIn(0.4, 0.0, 0.2, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "LinearOutSlowIn", "api_method_all": "LinearOutSlowIn,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["let curve6 = Curves.LinearOutSlowIn(0.0, 0.0, 0.2, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "FastOutLinearIn", "api_method_all": "FastOutLinearIn,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["let curve7 = Curves.FastOutLinearIn(0.4, 0.0, 1.0, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "ExtremeDeceleration", "api_method_all": "ExtremeDeceleration,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["let curve8 = Curves.ExtremeDeceleration(0.0, 0.0, 0.0, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Sharp", "api_method_all": "Sharp,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["let curve9 = Curves.Sharp(0.33, 0.0, 0.67, 1."], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Rhythm", "api_method_all": "Rhythm,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["et curve10 = Curves.Rhythm(0.7, 0.0, 0.2, 1.0)"], "files": ["curves.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Smooth", "api_method_all": "Smooth,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["          this.imageSmoothingEnabled();\n      ", ";\n    }\n  }\n\n  imageSmoothingEnabled() {\n    l", "  this.context.imageSmoothingEnabled = false\n ", "           ctx.imageSmoothingEnabled = false;\n", ", 100);\n  }\n\n  imageSmoothingQuality() {\n    l", "  this.context.imageSmoothingQuality('high');\n", "  this.context.imageSmoothingEnabled = false;\n"], "files": ["global.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Curve", "api_method_name": "Friction", "api_method_all": "Friction,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["  console.info('testFrictionProp START');\n      ", "* @tc.name      testFrictionProp\n     * @tc.desc", "    */\n\n    it('testFrictionProp', 0, async func"], "files": ["refreshProps.test.js"], "is_white": " ", "desc": " "}]}