{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\slider", "api": [{"api_class_name": "SliderStyle", "api_method_all": "declare enum SliderStyle {\n  \n  OutSet,\n\n  \n  InSet,\n}", "api_method_name": "SliderStyle", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["style).assertEqual(\"SliderStyle.InSet\")\n      conso", "\n            style: SliderStyle.OutSet,\n           ", "e,\n          style: SliderStyle.OutSet\n        })\n ", "style).assertEqual(\"SliderStyle.OutSet\")\n      cons", "\n    \n//    it('testSliderStyleProp', 0, async func", "1,\n          style: SliderStyle.OutSet\n        })\n ", "  console.info('testSliderStyleProp START');\n//    ", "\n            style: SliderStyle.InSet,\n            ", "1,\n          style: SliderStyle.InSet\n        })\n  ", "1,\n          style: SliderStyle.InSet,\n        })\n "], "files": ["SliderJsunit.test.ets", "slider.ets", "Slider.ets", "sliderProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderStyle", "api_method_name": "OutSet", "api_method_all": "OutSet,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": [" style: SliderStyle.OutSet,\n            direct", "tEqual(\"SliderStyle.OutSet\")\n      console.inf", " style: SliderStyle.OutSet\n        })\n        "], "files": ["SliderJsunit.test.ets", "slider.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderStyle", "api_method_name": "InSet", "api_method_all": "InSet,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": [" style: SliderStyle.InSet,\n            direct", " style: SliderStyle.InSet\n        })\n        ", " style: SliderStyle.InSet,\n        })\n       ", "tEqual(\"SliderStyle.InSet\")\n      console.inf"], "files": ["SliderJsunit.test.ets", "slider.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderChangeMode", "api_method_all": "declare enum SliderChangeMode {\n  \n  Begin,\n\n  \n  Moving,\n\n  \n  End,\n\n  \n  Click,\n}", "api_method_name": "SliderChangeMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["alue: number, mode: SliderChangeMode) => {\n            t", "ate Begin: number = SliderChangeMode.Begin\n\n  onPageShow", "alue: number, mode: SliderChangeMode) => {\n             "], "files": ["slider.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderChangeMode", "api_method_name": "Begin", "api_method_all": "Begin,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": [".info('test'+nameA+'BeginPropNone START');\n  ", "og(\"webTest : onPageBegin: \" + e.url);\n      ", "Horizontal\n  @State Begin: number = SliderCha", "ord)\n        .onPageBegin((e) => {\n          ", " = SliderChangeMode.Begin\n\n  onPageShow() {\n ", ".info('test'+nameA+'BeginProp START');\n      ", "   it('test'+nameA+'BeginPropNone', 0, async ", "   it('test'+nameA+'BeginProp', 0, async func", "ue\n            this.Begin = mode\n            "], "files": ["animateTransformProps.test.js", "WebPage.ets", "animateMotionProps.test.js", "Slider.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderChangeMode", "api_method_name": "Moving", "api_method_all": "Moving,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [" workStateHorizontalMovingDistance: 0,\n       ", "   workStateVerticalMovingDistance: 12,\n      "], "files": ["Calendar.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderChangeMode", "api_method_name": "End", "api_method_all": "End,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 440, "since": 7, "api_used": "\u662f", "lines": ["al('Alignment.BottomEnd')\n      console.inf", "tion = IconPosition.End;\n  @State fontStyle", "ems(HorizontalAlign.End)\n\n          GridCon", "ems(HorizontalAlign.End).width('90%').borde", "reak;\n        case 'End':\n          this.al", "olumnStart(1).columnEnd(5)\n        }\n      ", "nContent: Alignment.End }) {\n        Text('", "al('HorizontalAlign.End');\n      console.lo", "nsole.info('onActionEnd current action stat", "ntString = 'onActionEnd';\n        console.i", "++ Panel TestCase 1 End ++++++++++++++++');", "++ Panel TestCase 2 End ++++++++++++++++');", "ign(Alignment.BottomEnd)\n        .width('10", "ertEqual('Alignment.End')\n      console.inf", "ext('justifyContent(End)').fontSize(9).font", "n = Alignment.BottomEnd;\n      } else if (e", "yContent-'FlexAlign.End':\" + JSON.stringify", "ms-'HorizontalAlign.End':\" + JSON.stringify", ".align(Alignment.TopEnd)\n        .direction", "   Text('alignItems(End)').fontSize(9).font", "extAlign= TextAlign.End\n  @State lineHeight", "nContent-'FlexAlign.End':\" + JSON.stringify", "++ Panel TestCase 3 End ++++++++++++++++');", "nt: Alignment.BottomEnd }) {\n        Text('", "n\": Alignment.BottomEnd\n          }\n       ", "ssertEqual('onActionEnd')\n      }\n      let", "  })\n      .onActionEnd(() => {\n        con", "ignSelf = ItemAlign.End;\n          break;\n ", "ems(HorizontalAlign.End)\n\n        }.width('", "alignSelf(ItemAlign.End)\n        .borderWid", "   .align(Alignment.End)\n        .alignSelf", "nContent: Alignment.End }) {\n        Scroll", "ertEqual('FlexAlign.End');\n      console.lo", "nContent: FlexAlign.End,\n        }) {\n     ", "ertEqual(\"FlexAlign.End\");\n      console.lo", "  })\n      .onScrollEnd(() => {\n        con", "fyContent(FlexAlign.End)\n\n      Text('justi", "lignItems:ItemAlign.End,\n          alignCon", "ntent: Alignment.TopEnd }) {\n        Text('", "yContent: FlexAlign.End,\n          alignIte", "   }.rowStart(1).rowEnd(4)\n\n          ForEa"], "files": ["flex.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "gridPage.ets", "PieceCode.ets", "Text.ets", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "Stack.ets", "TextJsunit.test.ets", "ToggleJsunit.test.ets", "PositionSettingJsunit.test.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "AlertDialog.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "GridContainer.ets", "TabJsunit.test.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "TextInputJsunit.test.ets", "GridItem.ets", "GridItem.test.ets", "animateTransformProps.test.js", "PanGesture.ets", "scrollBar.ets", "StackJsunit.test.ets", "TextAreaJsunit.test.ets", "animateMotionProps.test.js", "NavigationJsunit.test.ets", "textareaProps.test.js", "LongPressGesture.test.ets", "Column.ets", "gestureMode.ets", "ListJsunit.test.ets", "row.ets", "scrollCode.ets", "buttonProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderChangeMode", "api_method_name": "Click", "api_method_all": "Click,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 971, "since": 8, "api_used": "\u662f", "lines": ["ext2')\n          .onClick(() => {\n           ", "})\n          this.onClickValue = true;\n      ", "appear')\n        .onClick(() => {\n          t", "button')\n        .onClick(() => {\n          t", "       }\n        .onClick(()=>{\n          thi", "tton').margin(30).onClick(() => {\n        thi", "ncel')\n          .onClick(() => {\n           ", "ton1')\n          .onClick(() => {\n           ", " console.info('[testClickEvent001] sendEventB", "{\n    console.info('Click the callback in the", "ding(40)\n        .onClick(() => {\n          p", "ght(150)\n        .onClick(() => {\n          c", "ick me')\n        .onClick(() => {\n          t", "is.text2 = 'Ellipse Clicked';\n          conso", "t: 20 })\n        .onClick(() => {\n          t", " {\n          this.onClickValue = true;\n      ", "ssertEqual('Ellipse Clicked')\n      }\n      v", "Size(20)\n        .onClick(() => {\n          t", "t list')\n        .onClick(() => {\n          t", ".Default\n  @State onClickValue: boolean = fal", "    console.info(\"onClick start to emit actio", "   \"ACTION\": this.onClickValue\n              ", "ton2')\n          .onClick(() => {\n           ", "ext1')\n          .onClick(() => {\n           ", "r: 1.afternoon......Click for details')\n     ", "h(100).padding(5).onClick(() => {\n          t", "317aff).width(90).onClick(() => {\n           ", "     }\n          .onClick(() => {\n           ", "(this.text1 = 'Rect Clicked')\n        })\n    ", "ResponseType = RightClick;\n  @Builder Context", "    console.info(\"onClick emit action state e", "leValue)\n        .onClick(() => {\n          t", "firm')\n          .onClick(() => {\n           "], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "dividerProps.test.js", "video.ets", "tabContentProps.test.js", "textProps.test.js", "placement.ets", "playMode.ets", "toolbarProps.test.js", "TouchAbleJsunit.test.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "toolbarItemProps.test.js", "TapGesture.test.ets", "marquee.ets", "textTimer.ets", "Swiper.ets", "Divider.ets", "badgeProps.test.js", "dialogProps.test.js", "transition.ets", "textInput.ets", "systemPrompt.ets", "NavigatorCodeJsunit.test.ets", "scrollCode.ets", "button.ets", "formProps.test.js", "XComponentPage.ets", "stackProps.test.js", "ButtonJsunit.test.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "animatorOption.ets", "tapGesture.ets", "edgeEffect.ets", "stepper.ets", "labelProps.test.js", "Marquee.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "Tab.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "Stepper.ets", "textPickerDialog.ets", "PieceCode.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "videoProps.test.js", "list.ets", "List.ets", "GridContainer.ets", "optionProps.test.js", "Video.ets", "pieceProps.test.js", "pickerProps.test.js", "lazyForEach.ets", "listItem.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "imageAnimator.ets", "bindPopup.ets", "NavigatorCode.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "RowSplit.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "divProps.test.js", "switchProps.test.js", "appear.ets", "animationStatus.ets", "fillMode.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "chartProps.test.js", "touchAble.ets", "pageTransition.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "areaChange.ets", "ohosRouterA.ets", "parallelGesture.ets", "imageProps.test.js", "timeStamp.ets", "listProps.test.js", "progressProps.test.js", "aboutToDisappear.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "motionPath.ets", "Badge.ets", "panel.ets", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderOptions", "api_method_all": "declare interface SliderOptions {\n  \n  value?: number;\n\n  \n  min?: number;\n\n  \n  max?: number;\n\n  \n  step?: number;\n\n  \n  style?: SliderStyle;\n\n  \n  direction?: Axis;\n\n  \n  reverse?: boolean;\n}", "api_method_name": "SliderOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SliderOptions", "api_method_name": "value", "api_method_all": "value?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderOptions", "api_method_name": "min", "api_method_all": "min?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 99, "since": 7, "api_used": "\u662f", "lines": ["808080')\n          .minLabel('10')\n        ", "fHeight(250)\n      .miniHeight(100)\n      .", "  Gauge({ value: 0, min: 0, max: 100 })\n   ", ": {\n                min: 0,\n               ", "tringify(obj.$attrs.min));\n      console.lo", "arWidth(240)\n      .minSideBarWidth(210)\n  ", "tringify(obj.$attrs.miniHeight))\n      expe", "SetValue,\n          min: 0,\n          max: ", "  expect(obj.$attrs.min).assertEqual('100.0", ", this.foodItem.vitaminC + 'mg')\n    }\n    ", ".$attrs.constructor.min).assertEqual(0.0000", "onsole.log('Panel\u2018s miniHeight is ' + JSON.", "tValue,\n            min: 0,\n            max", "ro = this.$element(\"miniHeightPro\").getInsp", "ART');\n      app.terminate();\n      console", "tringify(obj.$attrs.minFontSize));\n      co", " 20, maxWidth: 200, minHeight: 0, maxHeight", "edientItem('', 'VitaminC', this.foodItem.vi", "alue: 40,\n          min: 0,\n          max: ", "nsole.log(\"cd blank min\" + JSON.stringify(o", "iniHeightPro : this.miniHeightPro,\n\n       ", "  expect(obj.$attrs.min).assertEqual('0.00p", ".fontSize)\n        .minFontSize(this.minFon", "  .minFontSize(this.minFontSize)\n        .l", "   .constraintSize({minWidth: '10%', maxWid", "ghtPro,\n            miniHeightPro : this.mi", "rection.Row)\n      .minCount(1)\n      .cell", "eBarWidth(240)\n    .minSideBarWidth(210)\n  ", "umber = 15\n  @State minFontSize: number = 1", "  expect(obj.$attrs.miniHeight).assertEqual", "tPro: null,\n        miniHeightPro: null\n   ", "ctor()\n        this.miniHeightPro = this.$e", "onsole.log(\"cd text minFontSize\" + JSON.str", " constraintSize = { minWidth: 20, maxWidth:"], "files": ["Slider.ets", "Text.ets", "PanelJsunit.test.ets", "gauge.ets", "SystemAppJsunit.test.ets", "TextJsunit.test.ets", "sideBar.ets", "Panel.ets", "Sidebar.ets", "SliderJsunit.test.ets", "sliderProps.test.js", "BlankJsunit.test.ets", "index.js", "mediaquery.test.js", "backgroundAndSizeSetting.ets", "slider.ets", "grid.ets", "fontWeight.ets", "panelProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderOptions", "api_method_name": "max", "api_method_all": "max?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 147, "since": 7, "api_used": "\u662f", "lines": ["overflow }\n  @State maxLines: number = 2\n  ", "lues: [20, 40, 20], max: 100})\n        .wid", "tringify(obj.$attrs.maxFontSize));\n      co", "arWidth(210)\n      .maxSideBarWidth(260)\n  ", "ineOffset)\n        .maxLines(2)\n        .te", "erSpacing)\n        .maxFontSize(this.maxFon", "fontColor(0xCCCCCC).maxLines(1)\n        Col", "  expect(obj.$attrs.maxCount).assertEqual('", "his.counts,\n        maxCount: 99,\n        s", "eBarWidth(210)\n    .maxSideBarWidth(260)\n  ", "umber = 15\n  @State maxFontSize: number = 1", "e = { minWidth: 20, maxWidth: 200, minHeigh", "tringify(obj.$attrs.maxCount))\n      consol", "onsole.log(\"cd text maxFontSize\" + JSON.str", "onsole.log(\"cd text maxLines\" + JSON.string", ".$attrs.constructor.max).assertEqual(100.00", ".Right,\n            maxCount: 99,\n         ", "tringify(obj.$attrs.maxLines));\n      conso", "tringify(obj.$attrs.max));\n      console.lo", "  expect(obj.$attrs.maxLines).assertEqual(\"", "flow.Clip)\n        .maxLines(2)\n        .te", "e({minWidth: '10%', maxWidth: '50%', height", "sole.log(\"yr badge0 maxCount-'99'\" + JSON.s", ".log(\"cd  DataPanel max\" + JSON.stringify(o", "  expect(obj.$attrs.max).assertEqual(100.00", "el('10')\n          .maxLabel('10')\n        ", "n.Left,\n            maxCount: 99,\n         ", "{ value: 0, min: 0, max: 100 })\n        .ke", "lues: [20, 40, 20], max: 100, type: DataPan", "  min: 0,\n          max: 100,\n          ste", "ghtTop,\n            maxCount: 99,\n         ", " 200, minHeight: 0, maxHeight: 50 }\n  @Stat", "FF0000')\n          .maxLength(10)\n         ", "min: 0,\n            max: 100,\n            s", "t ATTRS_MAXLINES = 'maxLines'\nconst ATTRS_D", "  .maxFontSize(this.maxFontSize)\n        .f"], "files": ["BadgeJsunit.test.ets", "Slider.ets", "badge.ets", "Text.ets", "gauge.ets", "TextInput.ets", "TextJsunit.test.ets", "Constants.ets", "sideBar.ets", "Sidebar.ets", "DataPanel.ets", "SliderJsunit.test.ets", "sliderProps.test.js", "inputProps.test.js", "index.js", "mediaquery.test.js", "backgroundAndSizeSetting.ets", "badgeProps.test.js", "DataPanelJsunit.test.ets", "slider.ets", "textareaProps.test.js", "Badge.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderOptions", "api_method_name": "step", "api_method_all": "step?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 472, "since": 7, "api_used": "\u662f", "lines": ["this.start,\n        step: this.step,\n       ", "      console.info('stepperTest_0200 END');\n", "       console.log(\"stepperTest_0200 change ", "        uri: 'pages/stepper',\n      }\n      ", "      console.info(\"stepperTest_0300 start t", "y: 0 })\n      .key('stepperItem2')\n\n      St", "      console.info(\"stepperTest_0100 compone", " overLayJsunit();\n  stepperJsunit();\n  swipe", ");\n    });\n\n    it('stepperTest_0100', 0, as", "      console.info('stepperTest_0300 END');\n", "  console.info(\"get stepper state success \" ", "{\n    console.info('stepper page show called", ");\n    });\n\n    it('stepperTest_0300', 0, as", "s));\n        if (!(\"stepper\" == pages.name))", "t.Center)\n    .key('stepper')\n  }\n\n  onPageS", "t.test.ets';\nimport stepperJsunit from './St", "      console.info(\"stepperTest_0300 compone", "      console.info('stepperTest_0300v START'", "\n        step: this.step,\n        loop: this", "ean = true\n  @State step: number = 50\n  @Sta", ");\n    });\n\n    it('stepperTest_0200', 0, as", "y: 0 })\n      .key('stepperItem1')\n\n      St", "      console.info('stepperTest_0100 START')", " getInspectorByKey('stepper');\n      let obj", "{\n    console.info(\"stepper page stateChangC", "      console.info(\"stepper page state chang", "inish')\n      .key('stepperItem4')\n    }\n   ", "      console.info(\"stepperTest_0200 start t", "      console.info('stepperTest_0400 START')", "      console.info('stepperTest_0100 END');\n", "      console.info(\"stepperTest_0200 compone", " console.info(\"push stepper page success \" +", "      console.info(\"stepper after each calle", "rt default function stepperJsunit() {\n  desc", "      console.info('stepperTest_0200 START')", "nit() {\n  describe('stepperTest', function (", ");\n    });\n\n    it('stepperTest_0400', 0, as", "console.error(\"push stepper page error: \" + ", "dState)\n      .key('stepperItem3')\n\n      St", "       console.log(\"stepperTest_0300 change ", " getInspectorByKey('stepper');\n      console"], "files": ["ratingProps.test.js", "List.test.js", "Utils.ets", "Stepper.ets", "Slider.ets", "StepperJsunit.test.ets", "rating.ets", "commonComponentJsApi.test.js", "SliderJsunit.test.ets", "stepperItemProps.test.js", "sliderProps.test.js", "marquee.ets", "Rating.ets", "index.js", "stepper.ets", "slider.ets", "RatingJsunit.test.ets", "ScrollBar.ets", "List.test.ets", "Marquee.ets", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderOptions", "api_method_name": "style", "api_method_all": "style?: SliderStyle", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1756, "since": 7, "api_used": "\u662f", "lines": ["ogress({ value: 25, style: ProgressStyle.Ecli", "yle));\n      expect(style.fontSize).assertEqu", "ue: 20, total: 150, style: ProgressStyle.Line", "    Text(`text font style ${this.fontStyle}`)", "ue: 20, total: 150, style: ProgressStyle.Ecli", "x317AF7, radius: 8, style: BorderStyle.Dotted", "tyle);\n      expect(style.fontSize).assertEqu", "tBadge05] component style is: \" + JSON.string", " step: 1,\n          style: SliderStyle.OutSet", ".border({ width: 1, style: BorderStyle.Dashed", " family: 'cursive', style: FontStyle.Italic }", " step: 1,\n          style: SliderStyle.InSet,", "osition: 1,\n        style: { badgeSize: 6, ba", "tep: 1,\n            style: SliderStyle.OutSet", ".border({ width: 1, style: this.borderStyle }", "  expect(fontObject.style).assertEqual('FontS", "xCount: 99,\n        style: { color: this.colo", "ue: 20, total: 150, style: ProgressStyle.Caps", "mber = 100\n  @State style: ProgressStyle = Pr", "WINDOWBLUR_STYLE = 'style'\nconst ATTRS_FONTFA", "parse(objNew.$attrs.style);\n      expect(styl", "mily: 'sans-serif', style: FontStyle.Normal\n ", "ON.parse(obj.$attrs.style);\n      expect(obj.", "parse(objNew.$attrs.style);\n      console.inf", "0, family: 'serif', style: FontStyle.Normal }", "ogress({ value: 20, style: ProgressStyle.Line", " \" + JSON.stringify(style));\n      expect(sty", "dge');\n      expect(style.fontSize).assertEqu", "ogress({ value: 27, style: ProgressStyle.Caps", "objNew));\n      let style = JSON.parse(objNew", "pValue,\n            style: SliderStyle.InSet,", "is.message,\n        style: { color: this.colo", "fy(obj));\n      let style = JSON.parse(obj.$a"], "files": ["Select.ets", "ratingProps.test.js", "SelectJsunit.test.ets", "dividerProps.test.js", "BadgeJsunit.test.ets", "Slider.ets", "badge.ets", "pickerViewProps.test.js", "qrcodeProps.test.js", "divProps.test.js", "textStyle.ets", "TextInput.ets", "AlphabetIndexer.ets", "Constants.ets", "Progress.ets", "Sidebar.ets", "Badge.ets", "SliderJsunit.test.ets", "stepperItemProps.test.js", "progress.ets", "canvasProps.test.js", "sliderProps.test.js", "toolbarItemProps.test.js", "videoProps.test.js", "positionSetting.ets", "TextArea.ets", "inputProps.test.js", "index.js", "optionProps.test.js", "border.ets", "richtextProps.test.js", "pickerProps.test.js", "select.ets", "labelProps.test.js", "textArea.ets", "slider.ets", "textInput.ets", "progressProps.test.js", "selectProps.test.js", "gestureMode.ets", "search.ets", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderOptions", "api_method_name": "direction", "api_method_all": "direction?: Axis", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 596, "since": 8, "api_used": "\u662f", "lines": ["lder() {\n    Flex({ direction: FlexDirection.Colu", "on = eventData.data.direction;\n        console.lo", "ata: {\n            \"direction\": Direction.Ltr\n   ", "ll: 'forwards',\n    direction: \"normal\",\n    begi", " if (eventData.data.direction != null) {\n        ", "uild() {\n    Flex({ direction: FlexDirection.Colu", " angle: 80,\n        direction: GradientDirection.", "ion: \" + obj.$attrs.direction);\n      expect(obj.", "'90%')\n      Flex({ direction: FlexDirection.Row,", "  expect(obj.$attrs.direction).assertEqual('Direc", ".$attrs.constructor.direction).assertEqual('FlexD", " {\n    Flex({\n      direction: FlexDirection.Colu", "    .direction(this.direction)\n        .key('rowD", "gin(5)\n      Flex({ direction: FlexDirection.Row,", "dth('90%')\n        .direction(this.direction)\n   ", "  events_emitter.on(directionChangeEvent, this.st", "    Text('slider in direction set').fontSize(9).f", "   Text('slider out direction set').fontSize(9).f", ".InSet,\n            direction: this.decorationVal", ".TopStart;\n  @State direction: Direction = Direct", "gn')\n\n        Text('direction').fontSize(20).font", "ction value\" + this.direction);\n      }\n    }\n  }", "'90%')\n      Flex({ direction: FlexDirection.Row ", "xExample {\n  @State direction: FlexDirection = Fl", "umber = 3;\n  @State direction: Axis = Axis.Horizo", "weekStyle)\n        .direction(this.direction)\n   ", "uild() {\n    Flex({ direction: FlexDirection.Row,", "OutSet,\n            direction: Axis.Vertical\n    ", " ATTRS_DIRECTION = 'direction'\nconst ATTRS_ALIGN ", "\n    angle: 90,\n    direction: GradientDirection.", "rations: 1,\n        direction: 'alternate',\n     ", " if (eventData.data.direction) {\n        this.dir", "CallBack);\n\n    let directionChangeEvent = {\n    ", "ion) {\n        this.direction = eventData.data.di", "ull) {\n        this.direction = eventData.data.di", "on = eventData.data.direction;\n      } else if (e", ".log(\"Calendar page direction value\" + this.direc", "    .direction(this.direction)\n        .backgroun", "ttrs.linearGradient.direction).assertEqual('Gradi"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "Qrcode.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "transition.ets", "Image.ets", "List.test.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "positionSetting.ets", "animatorOption.ets", "tapGesture.ets", "FlexJsunit.test.ets", "flexDirection.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "flex.ets", "marqueeProps.test.js", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "BackgroundJsunit.test.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "GradientDirectionJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "RowJsunit.test.ets", "index.js", "ohosRouterA.ets", "Link.ets", "slider.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderOptions", "api_method_name": "reverse", "api_method_all": "reverse?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 70, "since": 8, "api_used": "\u662f", "lines": ["          animation.reverse()\n        }, 500)\n\n", "state).reverse(this.reverse).fixedSize(this.fix", ") {\n        Button('reverse').key('button3').wi", "s.Initial;\n  @State reverse: boolean = false;\n ", "state).reverse(this.reverse).fixedSize(false).p", "lMode.None\n  @State reverse: boolean = false\n  ", "     this.animation.reverse();\n          });\n  ", "> {\n      animation.reverse()\n    }, 500)\n\n    ", ") {\n        Button('reverse').width(100).paddin", ";\n          Button('reverse').borderRadius(8).b", "his.reverse = !this.reverse\n        })\n        ", "his.reverse = !this.reverse\n          try {\n   ", "=> {\n          this.reverse = !this.reverse\n   ", " .state(this.state).reverse(this.reverse).fixed", "rizontal,\n          reverse: false,\n          s"], "files": ["index.js", "animateMotionProps.test.js", "imageAnimatorProps.test.js", "animationStatus.ets", "imageAnimator.ets", "Slider.ets", "animatorOption.ets", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderInterface", "api_method_all": "interface SliderInterface {\n  \n  (options?: SliderOptions): SliderAttribute;\n}", "api_method_name": "SliderInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SliderInterface", "api_method_name": "options", "api_method_all": "(options?: SliderOptions): SliderAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 791, "since": 7, "api_used": "\u662f", "lines": ["= await router.push(options);\n          await U", " start\");\n      let options = {\n        uri: 'p", "(obj.$attrs.overlay.options.offset.x).assertEqu", "(obj.$attrs.overlay.options.align).assertEqual(", "(obj.$attrs.overlay.options.offset.y).assertEqu", " (done) {\n      let options = {\n        uri: 'p"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_all": "declare class SliderAttribute extends CommonMethod<SliderAttribute> {\n  \n  blockColor(value: ResourceColor): SliderAttribute;\n\n  \n  trackColor(value: ResourceColor): SliderAttribute;\n\n  \n  selectedColor(value: ResourceColor): SliderAttribute;\n\n  \n  minLabel(value: string): SliderAttribute;\n\n  \n  maxLabel(value: string): SliderAttribute;\n\n  \n  showSteps(value: boolean): SliderAttribute;\n\n  \n  showTips(value: boolean): SliderAttribute;\n\n  \n  trackThickness(value: Length): SliderAttribute;\n\n  \n  onChange(callback: (value: number, mode: SliderChangeMode) => void): SliderAttribute;\n}", "api_method_name": "SliderAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_name": "blockColor", "api_method_all": "blockColor(value: ResourceColor): SliderAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["      })\n          .blockColor(0xCCCCCC)\n         ", "      })\n          .blockColor('#FFFF0000')\n      ", "      })\n          .blockColor(Color.Red)\n        ", "    })\n            .blockColor(Color.Blue)\n       ", "ider')\n            .blockColor(0xCCCCCC)\n         ", "      })\n          .blockColor(Color.Blue)\n       "], "files": ["slider.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_name": "trackColor", "api_method_all": "trackColor(value: ResourceColor): SliderAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["or.Blue)\n          .trackColor(Color.Gray)\n       ", "0000FF')\n          .trackColor('#FF808080')\n      ", ".Blue)\n            .trackColor(Color.Gray)\n       ", "xCCCCCC)\n          .trackColor(Color.Black)\n      ", "CCCCC)\n            .trackColor(Color.Black)\n      "], "files": ["slider.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_name": "selectedColor", "api_method_all": "selectedColor(value: ResourceColor): SliderAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 36, "since": 7, "api_used": "\u662f", "lines": ["xpect(objNew.$attrs.selectedColor).assertEqual('#FF00", "cted: 0 })\n        .selectedColor(0xffffff)\n        .", "t: 50 })\n          .selectedColor('#FFFF0000')\n      ", "r.Black)\n          .selectedColor(0xCCCCCC)\n         ", "false })\n          .selectedColor('#FFFF0000')\n      ", "t(false)\n          .selectedColor(0x39a2db)\n         ", "or.Gray)\n          .selectedColor(Color.Blue)\n       ", "\n        }\n        .selectedColor(0x39a2db)\n        .", " if (eventData.data.selectedColor != null) {\n        ", "ata: {\n            \"selectedColor\": '-a',\n          }", ".selectedColor(this.selectedColor)\n        .onChange(", "or = eventData.data.selectedColor;\n      }\n      if (", ".Gray)\n            .selectedColor(Color.Blue)\n       ", "ata: {\n            \"selectedColor\": '#330A59F8',\n    ", "FF0000')\n          .selectedColor('#FF0000FF')\n      ", "('toggle')\n        .selectedColor(this.selectedColor)", "Black)\n            .selectedColor(0xCCCCCC)\n         ", "heckbox1')\n        .selectedColor(0xed6f21)\n        .", "ata: {\n            \"selectedColor\": '-0.1',\n         ", "  expect(obj.$attrs.selectedColor).assertEqual('#330A", "  expect(obj.$attrs.selectedColor).assertEqual('#FFFF", "FF00DDDD')\n        .selectedColor(0xffffff)\n        .", "is.color2)\n        .selectedColor(this.color3)\n      ", "Group'})\n          .selectedColor(0xed6f21)\n         ", "ull) {\n        this.selectedColor = eventData.data.se", "eExample {\n  @State selectedColor: Color = '#330A59F7", "(8)\n        Button('selectedColor').onClick(() => {\n ", "xpect(objNew.$attrs.selectedColor).assertEqual('#330A", "heckbox2')\n        .selectedColor(0x39a2db)\n        .", "ct(true)\n          .selectedColor(0x39a2db)\n         ", "lor.Red)\n          .selectedColor(Color.Blue)\n       ", "n: true })\n        .selectedColor(0x39a2db)\n        .", " true })\n          .selectedColor('#FFFF0000')\n      "], "files": ["ResponseRegion.ets", "checkbox.ets", "Toggle.ets", "AlphabetIndexer.ets", "slider.ets", "ToggleJsunit.test.ets", "PatternLock.ets", "toggle.ets", "checkboxGroup.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_name": "minLabel", "api_method_all": "minLabel(value: string): SliderAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["808080')\n          .minLabel('10')\n          .ma"], "files": ["Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_name": "maxLabel", "api_method_all": "maxLabel(value: string): SliderAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["el('10')\n          .maxLabel('10')\n          .sh"], "files": ["Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_name": "showSteps", "api_method_all": "showSteps(value: boolean): SliderAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["CCCCC)\n            .showSteps(false)\n            ", "or.Blue)\n          .showSteps(true)\n          .sh", "s(false)\n          .showSteps(false)\n          .o", ".Blue)\n            .showSteps(true)\n            .", "  expect(obj.$attrs.showSteps).assertEqual(\"false", "  expect(obj.$attrs.showSteps).assertEqual(\"true\"", "xCCCCCC)\n          .showSteps(false)\n          .s", "ps(true)\n          .showSteps(true)\n          .ke"], "files": ["SliderJsunit.test.ets", "slider.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_name": "showTips", "api_method_all": "showTips(value: boolean): SliderAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["or.Gray)\n          .showTips(true)\n          .sh", "el('10')\n          .showTips(false)\n          .s", "  expect(obj.$attrs.showTips).assertEqual(\"true\"", "s(false)\n          .showTips(false)\n          .o", "(true)\n            .showTips(true)\n            .", "  expect(obj.$attrs.showTips).assertEqual(\"false", "false)\n            .showTips(false)\n            ", "ps(true)\n          .showTips(true)\n          .on"], "files": ["SliderJsunit.test.ets", "slider.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_name": "trackThickness", "api_method_all": "trackThickness(value: Length): SliderAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["false)\n            .trackThickness(1)\n            .onC"], "files": ["slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_name": "onChangecallback", "api_method_all": "onChange(callback: (value: number, mode: SliderChangeMode) => void): SliderAttribute;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SliderAttribute", "api_method_name": "onChangecallback", "api_method_all": "onChange(callback: (value: number, mode: SliderChangeMode) => void): SliderAttribute;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}