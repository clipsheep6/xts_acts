{"subsystem_ch": "\u6587\u4ef6\u5b58\u50a8\u5b50\u7cfb\u7edf", "subsystem_en": "storage", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.fileio", "api": [{"api_class_name": "fileIO", "api_method_all": "declare namespace fileIO {\n    export { access };\n    export { accessSync };\n    export { chmod };\n    export { chmodSync };\n    export { chown };\n    export { chownSync };\n    export { close };\n    export { closeSync };\n    export { copyFile };\n    export { copyFileSync };\n    export { createStream };\n    export { createStreamSync };\n    export { createWatcher };\n    export { fchmod };\n    export { fchmodSync };\n    export { fchown };\n    export { fchownSync };\n    export { fdatasync };\n    export { fdatasyncSync };\n    export { fdopenStream };\n    export { fdopenStreamSync };\n    export { fstat };\n    export { fstatSync };\n    export { fsync };\n    export { fsyncSync };\n    export { ftruncate };\n    export { ftruncateSync };\n    export { hash };\n    export { lchown };\n    export { lchownSync };\n    export { lstat };\n    export { lstatSync };\n    export { mkdir };\n    export { mkdirSync };\n    export { mkdtemp };\n    export { mkdtempSync };\n    export { open };\n    export { openSync };\n    export { opendir };\n    export { opendirSync };\n    export { read };\n    export { readSync };\n    export { readText };\n    export { readTextSync };\n    export { rename };\n    export { renameSync };\n    export { rmdir };\n    export { rmdirSync };\n    export { stat };\n    export { statSync };\n    export { symlink };\n    export { symlinkSync };\n    export { truncate };\n    export { truncateSync };\n    export { unlink };\n    export { unlinkSync };\n    export { write };\n    export { writeSync };\n    export { Dir };\n    export { Dirent };\n    export { ReadOut };\n    export { Stat };\n    export { Stream };\n    export { Watcher };\n}", "api_method_name": "fileIO", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": ["await nextFileName('fileIOTest');\n    expect(p", "/Common'\n\ndescribe('fileIOTestDir', function (", "/Common'\n\ndescribe('fileIOTestStream', functio", "./Common'\ndescribe('fileIOTest', function () {", "/Common'\n\ndescribe('fileIOTestStat', function ", "await nextFileName('fileIOTest');\n    try {\n  ", "Common';\n\ndescribe('fileIOTestDirent', functio", "await nextFileName('fileIOTest');\n\n    try {\n "], "files": ["access.test.js", "FileIODirent.test.js", "FileIODir.test.js", "FileIOStream.test.js", "FileIOStat.test.js", "unlink.test.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dir", "api_method_all": "declare interface Dir {\n    \n    read(): Promise<Dirent>;\n    read(callback: AsyncCallback<Dirent>): void;\n    \n    readSync(): Dirent;\n    \n    close(): Promise<void>;\n    close(callback: AsyncCallback<void>): void;\n    \n    closeSync(): void;\n}", "api_method_name": "Dir", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 173, "since": 6, "api_used": "\u662f", "lines": ["ORAGE_FileIO_Stat_isDirectory_0000\n   * @tc", "nment.getStorageDataDir();\n      expect(isS", "      expect(stat.isDirectory(-1) == null).", "      expect(stat.isDirectory()).assertTrue", "eio_dir_read_sync_isDirectory_000', 0, asyn", "umber SUB_DF_FileIO_Dir_ReadSync_isFile_000", "xpect(typeof(stat.isDirectory()) == 'boolea", " Function of API, isDirectory. Determine wh", " Function of API, isDirectory. The paramete", "ORAGE_FileIO_Stat_isDirectory_0100\n   * @tc", "umber SUB_DF_FileIO_Dir_ReadSync_isFIFO_001", "describe('fileIOTestDir', function () {\n\n  ", "ect(isBoolean(dir.isDirectory())).assertTru", "')\nrequire('./FileIODir.test.js')\nrequire('", "     expect(!stat.isDirectory()).assertTrue", "    expect(dirent.isDirectory() !== null);\n", "eio_dir_read_sync_isDirectory_001', 0, asyn", "\n      expect(dir.isDirectory() === false).", "ironment.getUserDataDir((err, url) => {\n   ", "eio_dir_read_sync_isDirectory_001') + 'd';\n", "nment.getStorageDataDir(\"123%$*&^\");\n      ", "eio_dir_read_sync_isDirectory_001 has faile", "')\nrequire('./FileIODirent.test.js')\nrequir", "nment.getStorageDataDir((err, url) => {\n   ", "eio_dir_read_sync_isDirectory_000') + 'd';\n", "nment.getStorageDataDir(true);\n      expect", "umber SUB_DF_FileIO_Dir_ReadSync_isSocket_0", "ait context.getFilesDir();\n  let BASE_PATH ", "umber SUB_DF_FileIO_Dir_ReadSync_isSymbolic", "ironment.getUserDataDir(\"123#$%^&*\");\n     ", "describe('fileIOTestDirent', function () {\n", "umber SUB_DF_FileIO_Dir_ReadSync_isFIFO_000", "ironment.getUserDataDir();\n      expect(isS", "ORAGE_FileIO_Stat_isDirectory_0200\n   * @tc", "umber SUB_DF_FileIO_Dir_ReadSync_isFile_001", "e();\n      dirent.isDirectory(-1);\n      ex", "\n   * @tc.desc Test Dir.readSync() interfac", "ORAGE_FileIO_Stat_isDirectory_0300\n   * @tc", "ironment.getUserDataDir(true);\n      expect", "eio_dir_read_sync_isDirectory_000 has faile"], "files": ["List.test.js", "all.test.js", "FileIODirent.test.js", "FileIODir.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "FileIOStat.test.js", "environment.test.js", "fstat.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dir", "api_method_name": "read", "api_method_all": "read(): Promise<Dirent>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Dir", "api_method_name": "read", "api_method_all": "read(callback: AsyncCallback<Dirent>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 851, "since": 6, "api_used": "\u662f", "lines": ["test_error_012 call readText success.' + data.text);\n        exp", "_writeText_012 call readText callback fail, code: ' + code + ', ", "istributedfile/File_readText_008',\n      text: 'Text that just f", "},\n    });\n    file.readArrayBuffer({\n      uri: 'internal://cac", "  console.log('File_read_array_buffer_011 => pass, data.buffer: ", "  console.log('File_readText_008 call writeText success.');\n    ", "istributedfile/File_read_array_buffer_010',\n      buffer: buffer", " });\n\n  \n  it('File_readText_009', 0, async function (done) {\n  ", "n (done) {\n    file.readText({\n      uri: 'internal://app/file_t", "},\n    });\n    file.readText({\n      uri: 'internal://app/file_t", "n (done) {\n    file.readArrayBuffer({\n      uri: 'internal://cac", "riteArrayBuffer_011 readArrayBuffer , code: ' + code + ', data: ", "istributedfile/File_readText_008'\n    });\n    setTimeout(\n      ", "  console.log('File_readText_009 call readText callback fail, co", "},\n    });\n    file.readArrayBuffer({\n      uri: 'internal://app", "istributedfile/File_read_array_buffer_010',\n      position: 0,\n ", "test_error_012 call readText fail, code: ' + code + ', data: ' +", "rue();\n      fileio.readSync(fd, new ArrayBuffer(4096), {\n      ", "e_readText_009 call readText callback fail, code: ' + code + ', ", "iteText_012 => call readText pass, ' + data.text);\n        done(", " });\n\n  \n  it('File_read_array_buffer_011', 0, async function (d", "  console.log('File_readText_008 call readText callback fail, co", "test_error_006 call readArrayBuffer fail, code: ' + code + ', da", "istributedfile/File_readText_008',\n      success: function (data", "()\n    let len = ss.readSync(new ArrayBuffer(4096))\n    console.", "  console.log('File_read_array_buffer_010 call writeArrayBuffer ", "riteArrayBuffer_011 readArrayBuffer: call success' + data.buffer", "n (done) {\n    file.readArrayBuffer({\n      uri: 'internal://app", "  console.log('File_read_array_buffer_010 , code: ' + code + ', ", " });\n\n  \n  it('File_readText_008', 0, async function (done) {\n  ", "ray_buffer_010 call readArrayBuffer success. data.buffer:' + dat", "      let rlen = ss.readSync(new ArrayBuffer(209715200));\n      ", "  let rlen = fileio.readSync(fd, new ArrayBuffer(209715200));\n  ", "e_readText_008 call readText success. data.text:' + data.text);\n", "  console.log('File_readText_008 call writeText callback fail, c", "},\n    });\n    file.readText({\n      uri: 'internal://app/../../", "  console.log('File_read_array_buffer_011 , code: ' + code + ', ", " });\n\n  \n  it('File_read_array_buffer_010', 0, async function (d", "  console.log('File_read_array_buffer_010 call readArrayBuffer s", "e_readText_008 call readText callback fail, code: ' + code + ', ", "  console.log('File_readText_009 => pass, data.text:' + data.tex", "   let red = fileio.readSync(fd, new ArrayBuffer(4096), {\n      ", "n (done) {\n    file.readText({\n      uri: 'internal://app/../../", "  console.log('File_readText_008 call readText success. data.tex", "istributedfile/File_read_array_buffer_010'\n    });\n    setTimeou", "test_error_005 call readText fail, code: ' + code + ', data: ' +"], "files": ["List.test.js", "FileIODirent.test.js", "Common.js", "FileIO.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "open.test.js", "FileIOStream.test.js", "ftruncate.test.js", "FileIOError.test.js", "access.test.js", "File.test.js", "fdopenStream.test.js", "all.test.js", "truncate.test.js", "read.test.js", "close.test.js", "FileError.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dir", "api_method_name": "readSync", "api_method_all": "readSync(): Dirent;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 149, "since": 6, "api_used": "\u662f", "lines": ["();\n      expect(dd.readSync() == null).assertTr", "{\n        expect(dd.readSync() !== null).assertT", " try {\n      fileio.readSync(-1, new ArrayBuffer", " 0o2);\n      fileio.readSync(fd, new ArrayBuffer", "rue();\n      fileio.readSync(fd, new ArrayBuffer", "();\n      expect(dd.readSync() !== null).assertT", "   let red = fileio.readSync(fd, new ArrayBuffer", "  }\n      expect(dd.readSync() == null).assertTr", "    let dirent = dd.readSync();\n      expect(dir", "  let rlen = fileio.readSync(fd1, new ArrayBuffe", "  let rlen = fileio.readSync(fd, new ArrayBuffer", "et bool = typeof(dd.readSync());\n          expec", "()\n    let len = ss.readSync(new ArrayBuffer(409", "   let ret = fileio.readSync(fd, new ArrayBuffer", "   let len = fileio.readSync(fd, new ArrayBuffer", "          expect(dd.readSync() !== null).assertT", "();\n      expect(dd.readSync(-1) == null).assert", "      let rlen = ss.readSync(new ArrayBuffer(209"], "files": ["ftruncate.test.js", "FileIOError.test.js", "fdopenStream.test.js", "all.test.js", "FileIODirent.test.js", "FileIODir.test.js", "read.test.js", "truncate.test.js", "FileIOStream.test.js", "Common.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dir", "api_method_name": "close", "api_method_all": "close(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Dir", "api_method_name": "close", "api_method_all": "close(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 490, "since": 6, "api_used": "\u662f", "lines": [" len)\n    expect(ss.closeSync() !== null).assertTrue()\n    return", ", 0o777)\n    fileio.closeSync(fd)\n    return true\n  }\n  catch (e)", "      expect(fileio.closeSync(fd2) !== null).assertTrue();\n      ", "      expect(fileio.closeSync(fd) == null).assertTrue();\n      ex", "t('fileio_test_open_close_sync_000', 0, async function () {\n    l", "e('fileio_test_open_close_sync_000');\n    try {\n      let fd = fi", ", 0o777)\n    fileio.closeSync(fd)\n    return true\n  } \n  catch (e", ");\n    }\n    fileio.closeSync(fd);\n    setTimeout(\n      function", "      expect(fileio.closeSync(fd) !== null).assertTrue();\n      e", "();\n      expect(ss.closeSync() !== null).assertTrue();\n      exp", "Sync(fd)\n    fileio.closeSync(fd)\n    return true\n  } \n  catch (e", "g('fileio_test_open_close_sync_000 has failed for ' + e);\n      e", " + e)\n    expect(ss.closeSync() !== null).assertTrue()\n    return", "Sync(fd)\n    fileio.closeSync(fd)\n    return true\n  }\n  catch (e)"], "files": ["List.test.js", "FileIODirent.test.js", "open_close.test.js", "fsync.test.js", "createWatcher.test.js", "Common.js", "FileIO.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "fstat.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "FileIOError.test.js", "access.test.js", "lseek.test.js", "opendir_close.test.js", "fdopenStream.test.js", "all.test.js", "write.test.js", "fchown.test.js", "fdatasync.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "close.test.js", "flush.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dir", "api_method_name": "closeSync", "api_method_all": "closeSync(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 407, "since": 6, "api_used": "\u662f", "lines": [" + e)\n    expect(ss.closeSync() !== null).assertT", "      expect(fileio.closeSync(fd) == null).assert", " len)\n    expect(ss.closeSync() !== null).assertT", "Sync(fd)\n    fileio.closeSync(fd)\n    return true", ");\n    }\n    fileio.closeSync(fd);\n    setTimeout", "      expect(fileio.closeSync(fd2) !== null).asse", ", 0o777)\n    fileio.closeSync(fd)\n    return true", "      expect(fileio.closeSync(fd) !== null).asser", "();\n      expect(ss.closeSync() !== null).assertT"], "files": ["FileIODirent.test.js", "open_close.test.js", "fsync.test.js", "createWatcher.test.js", "Common.js", "FileIO.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "fstat.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "FileIOError.test.js", "access.test.js", "lseek.test.js", "opendir_close.test.js", "fdopenStream.test.js", "all.test.js", "write.test.js", "fchown.test.js", "fdatasync.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "close.test.js", "flush.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dirent", "api_method_all": "declare interface Dirent {\n    \n    readonly name: string;\n    \n    isBlockDevice(): boolean;\n    \n    isCharacterDevice(): boolean;\n    \n    isDirectory(): boolean;\n    \n    isFIFO(): boolean;\n    \n    isFile(): boolean;\n    \n    isSocket(): boolean;\n    \n    isSymbolicLink(): boolean;\n}", "api_method_name": "Dirent", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": ["')\nrequire('./FileIODirent.test.js')\nrequire('", "describe('fileIOTestDirent', function () {\n\n  "], "files": ["FileIODirent.test.js", "List.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dirent", "api_method_name": "isBlockDevice", "api_method_all": "isBlockDevice(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 58, "since": 6, "api_used": "\u662f", "lines": ["pect(isBoolean(stat.isBlockDevice())).assertTrue();\n ", "* @tc.desc Test the isBlockDevice() method of class F", "leio_dir_read_async_isBlockDevice_000') + 'd';\n    le", "leio_dir_read_async_isBlockDevice_000', 0, async func", "      expect(dirent.isBlockDevice() !== null);\n      ", "* @tc.desc Test the isBlockDevice() method of class L", "ileio_dir_read_sync_isBlockDevice_001 has failed for ", "@tc.desc Test Lstat.isBlockDevice() interface.\n   * @", "@tc.desc Test Fstat.isBlockDevice() interface.\n   * @", "\n      expect(!stat.isBlockDevice(-1)).assertTrue();\n", "sc Function of API, isBlockDevice. Determine whether ", ");\n      expect(dir.isBlockDevice() === false).assert", "ileio_dir_read_sync_isBlockDevice_000 has failed for ", "sc Function of API, isBlockDevice. The parameter is -", "* @tc.desc Test the isBlockDevice method of class lst", "ileio_dir_read_sync_isBlockDevice_001', 0, async func", "leio_dir_read_async_isBlockDevice_000\n   * @tc.desc T", "leio_dir_read_async_isBlockDevice_001 has failed for ", "ileio_dir_read_sync_isBlockDevice_000') + 'd';\n    le", "STORAGE_FileIO_Stat_isBlockDevice_0000\n   * @tc.name ", "STORAGE_FileIO_Stat_isBlockDevice_0200\n   * @tc.name ", "ileio_dir_read_sync_isBlockDevice_000', 0, async func", "rue();\n      dirent.isBlockDevice(-1);\n      expect(n", "xpect(isBoolean(dir.isBlockDevice())).assertTrue();\n ", ";\n      expect(stat.isBlockDevice() === false).assert", "ileio_dir_read_sync_isBlockDevice_001') + 'd';\n    le", ";\n      expect(stat.isBlockDevice(-1) === false).asse", "ct(isBoolean(dirent.isBlockDevice())).assertTrue();\n ", "STORAGE_FileIO_Stat_isBlockDevice_0100\n   * @tc.name ", "leio_dir_read_async_isBlockDevice_000 has failed for ", "\n      expect(!stat.isBlockDevice()).assertTrue();\n  ", "leio_dir_read_async_isBlockDevice_001', 0, async func", "leio_dir_read_async_isBlockDevice_001') + 'd';\n    le", " expect(typeof(stat.isBlockDevice()) == 'boolean').as", "leio_dir_read_async_isBlockDevice_001\n   * @tc.desc T"], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dirent", "api_method_name": "isCharacterDevice", "api_method_all": "isCharacterDevice(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 58, "since": 6, "api_used": "\u662f", "lines": ["ileio_dir_read_sync_isCharacterDevice_001') + 'd';\n    le", "STORAGE_FileIO_stat_isCharacterDevice_0000\n   * @tc.name ", "      expect(dirent.isCharacterDevice() !== null);\n      ", "STORAGE_FileIO_Stat_isCharacterDevice_0200\n   * @tc.name ", ");\n      expect(dir.isCharacterDevice() === false).assert", "\n      expect(!stat.isCharacterDevice(-1)).assertTrue();\n", ";\n      expect(stat.isCharacterDevice(-1) === false).asse", "@tc.desc Test Lstat.isCharacterDevice() interface.\n   * @", "ileio_dir_read_sync_isCharacterDevice_001 has failed for ", "ileio_dir_read_sync_isCharacterDevice_001', 0, async func", "ileio_dir_read_sync_isCharacterDevice_000 has failed for ", "xpect(isBoolean(dir.isCharacterDevice())).assertTrue();\n ", "STORAGE_FileIO_Stat_isCharacterDevice_0100\n   * @tc.name ", "leio_dir_read_async_isCharacterDevice_001') + 'd';\n    le", "ileio_dir_read_sync_isCharacterDevice_000') + 'd';\n    le", "@tc.desc Test Fstat.isCharacterDevice() interface.\n   * T", "leio_dir_read_async_isCharacterDevice_000', 0, async func", "ct(isBoolean(dirent.isCharacterDevice())).assertTrue();\n ", "sc Function of API, isCharacterDevice. The parameter is -", "leio_dir_read_async_isCharacterDevice_001\n   * @tc.desc T", "leio_dir_read_async_isCharacterDevice_001 has failed for ", "sc Function of API, isCharacterDevice. Determine whether ", "leio_dir_read_async_isCharacterDevice_000') + 'd';\n    le", "\n      expect(!stat.isCharacterDevice()).assertTrue();\n  ", "pect(isBoolean(stat.isCharacterDevice())).assertTrue();\n ", " expect(typeof(stat.isCharacterDevice()) == 'boolean').as", "* @tc.desc Test the isCharacterDevice method of class lst", "rue();\n      dirent.isCharacterDevice(-1);\n      expect(n", "leio_dir_read_async_isCharacterDevice_000 has failed for ", "ileio_dir_read_sync_isCharacterDevice_000', 0, async func", ";\n      expect(stat.isCharacterDevice() === false).assert", "leio_dir_read_async_isCharacterDevice_000\n   * @tc.desc T", "leio_dir_read_async_isCharacterDevice_001', 0, async func", "@tc.desc Test Fstat.isCharacterDevice() interface.\n   * @", "@tc.desc Test Lstat.isCharacterDevice() interface.\n   * T"], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dirent", "api_method_name": "isDirectory", "api_method_all": "isDirectory(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 100, "since": 6, "api_used": "\u662f", "lines": ["sc Function of API, isDirectory. Determine whether ", "ileio_dir_read_sync_isDirectory_000', 0, async func", "      expect(dirent.isDirectory() !== null);\n      ", "ileio_dir_read_sync_isDirectory_001') + 'd';\n    le", "xpect(isBoolean(dir.isDirectory())).assertTrue();\n ", "ileio_dir_read_sync_isDirectory_000 has failed for ", "STORAGE_FileIO_Stat_isDirectory_0100\n   * @tc.name ", "leio_dir_read_async_isDirectory_001', 0, async func", "leio_dir_read_async_isDirectory_000') + 'd';\n    le", " expect(typeof(stat.isDirectory()) == 'boolean').as", "ileio_dir_read_sync_isDirectory_001', 0, async func", "ileio_dir_read_sync_isDirectory_001 has failed for ", "rue();\n      dirent.isDirectory(-1);\n      expect(n", "STORAGE_FileIO_Stat_isDirectory_0000\n   * @tc.name ", "ileio_dir_read_sync_isDirectory_000') + 'd';\n    le", "leio_dir_read_async_isDirectory_000 has failed for ", ");\n      expect(dir.isDirectory() === false).assert", "leio_dir_read_async_isDirectory_001\n   * @tc.desc T", "leio_dir_read_async_isDirectory_001') + 'd';\n    le", "leio_dir_read_async_isDirectory_000\n   * @tc.desc T", ";\n      expect(stat.isDirectory(-1) == null).assert", "STORAGE_FileIO_Stat_isDirectory_0300\n   * @tc.name ", "leio_dir_read_async_isDirectory_000', 0, async func", "        expect(stat.isDirectory()).assertTrue();\n  ", "\n      expect(!stat.isDirectory()).assertTrue();\n  ", "sc Function of API, isDirectory. The parameter is -", "leio_dir_read_async_isDirectory_001 has failed for ", "STORAGE_FileIO_Stat_isDirectory_0200\n   * @tc.name "], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dirent", "api_method_name": "isFIFO", "api_method_all": "isFIFO(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 62, "since": 6, "api_used": "\u662f", "lines": ["@tc.desc Test lstat.isFIFO() interface.\n   * @", " expect(typeof(stat.isFIFO()) == 'boolean').as", "\n      expect(!stat.isFIFO()).assertTrue();\n  ", "leio_dir_read_async_isFIFO_000\n   * @tc.desc T", "FileIO_Dir_ReadSync_isFIFO_0000\n   * @tc.name ", "@tc.desc Test Fstat.isFIFO() interface.\n   * T", "ileio_dir_read_sync_isFIFO_001', 0, async func", "ileio_dir_read_sync_isFIFO_001 has failed for ", "@tc.desc Test Fstat.isFIFO() interface.\n   * @", ");\n      expect(dir.isFIFO() === false).assert", "ileio_dir_read_sync_isFIFO_001\n   * @tc.desc T", ";\n      expect(stat.isFIFO() === false).assert", "sc Function of API, isFIFO. The parameter is -", "leio_dir_read_async_isFIFO_001 has failed for ", "leio_dir_read_async_isFIFO_000 has failed for ", "ileio_dir_read_sync_isFIFO_001') + 'd';\n    le", "ileio_dir_read_sync_isFIFO_000') + 'd';\n    le", "ileio_dir_read_sync_isFIFO_000 has failed for ", ";\n      expect(stat.isFIFO(-1) === false).asse", "leio_dir_read_async_isFIFO_001', 0, async func", "rue();\n      dirent.isFIFO(-1);\n      expect(n", "pect(isBoolean(stat.isFIFO())).assertTrue();\n ", "ileio_dir_read_sync_isFIFO_000', 0, async func", "@tc.desc Test Lstat.isFIFO() interface.\n   * T", "ileio_dir_read_sync_isFIFO_000\n   * @tc.desc T", "      expect(dirent.isFIFO() !== null);\n      ", "xpect(isBoolean(dir.isFIFO())).assertTrue();\n ", "leio_dir_read_async_isFIFO_000') + 'd';\n    le", ";\n      expect(stat.isFIFO(-1) == null).assert", "leio_dir_read_async_isFIFO_001\n   * @tc.desc T", "ct(isBoolean(dirent.isFIFO())).assertTrue()\n  ", "leio_dir_read_async_isFIFO_000', 0, async func", "FileIO_Dir_ReadSync_isFIFO_0010\n   * @tc.name ", "leio_dir_read_async_isFIFO_001') + 'd';\n    le", "sc Function of API, isFIFO. Determine whether ", "@tc.desc Test Lstat.isFIFO() interface.\n   * @"], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dirent", "api_method_name": "isFile", "api_method_all": "isFile(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 73, "since": 6, "api_used": "\u662f", "lines": ["ileio_dir_read_sync_isFile_001 has failed for ", "ileio_dir_read_sync_isFile_001') + 'd';\n    le", ";\n      expect(stat.isFile()).assertTrue();\n  ", "      expect(dirent.isFile() !== null);\n      ", "ileio_dir_read_sync_isFile_000 has failed for ", "xpect(isBoolean(dir.isFile())).assertTrue();\n ", "@tc.desc Test Fstat.isFile() interface.\n   * T", "sc Function of API, isFile. Determine whether ", "@tc.desc Test lstat.isFile() interface.\n   * @", "sc Function of API, isFile. The parameter is -", " expect(typeof(stat.isFile()) == 'boolean').as", "ileio_dir_read_sync_isFile_000') + 'd';\n    le", "pect(isBoolean(stat.isFile())).assertTrue();\n ", ";\n      expect(stat.isFile(-1) === false).asse", "FileIO_Dir_ReadSync_isFile_0010\n   * @tc.name ", ";\n      expect(stat.isFile(-1) == null).assert", "STORAGE_FileIO_Stat_isFile_0000\n   * @tc.name ", "rue();\n      dirent.isFile(-1);\n      expect(n", "}\n}\nexport function isFileExist(fpath) {\n  try", "@tc.desc Test Lstat.isFile() interface.\n   * T", "ileio_dir_read_sync_isFile_000\n   * @tc.desc T", "ileio_dir_read_sync_isFile_001\n   * @tc.desc T", "STORAGE_FileIO_Stat_isFile_0100\n   * @tc.name ", "@tc.desc Test Fstat.isFile() interface.\n   * @", "STORAGE_FileIO_Stat_isFile_0200\n   * @tc.name ", "FileIO_Dir_ReadSync_isFile_0000\n   * @tc.name ", "ct(isBoolean(dirent.isFile())).assertTrue();\n ", ";\n      expect(stat.isFile() === false).assert", "\n      expect(!stat.isFile()).assertTrue();\n  ", "ileio_dir_read_sync_isFile_000', 0, async func", "ileio_dir_read_sync_isFile_001', 0, async func", "STORAGE_FileIO_Stat_isFile_0300\n   * @tc.name ", ");\n      expect(dir.isFile()).assertTrue();\n  "], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "FileIOStat.test.js", "fstat.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dirent", "api_method_name": "isSocket", "api_method_all": "isSocket(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 57, "since": 6, "api_used": "\u662f", "lines": [";\n      expect(stat.isSocket(-1) == null).assert", "@tc.desc Test Fstat.isSocket() interface.\n   * @", "ileio_dir_read_sync_isSocket_000 has failed for ", " Test Stat.statsync_isSocket() interfaces.\n   * ", "ileio_dir_read_sync_isSocket_001') + 'd';\n    le", "sc Function of API, isSocket. Determine whether ", ";\n      expect(stat.isSocket() === false).assert", ";\n      expect(stat.isSocket(-1) === false).asse", "xpect(isBoolean(dir.isSocket())).assertTrue();\n ", "\n      expect(!stat.isSocket()).assertTrue();\n  ", "ileio_dir_read_sync_isSocket_000', 0, async func", "      expect(dirent.isSocket() !== null);\n      ", "ileio_dir_read_sync_isSocket_001', 0, async func", "FileIO_Dir_ReadSync_isSocket_0010\n   * @tc.name ", "@tc.desc Test lstat.isSocket() interface.\n   * @", " expect(typeof(stat.isSocket()) == 'boolean').as", "ileio_dir_read_sync_isSocket_001 has failed for ", "ileio_dir_read_sync_isSocket_000\n   * @tc.desc T", "ileio_dir_read_sync_isSocket_000') + 'd';\n    le", "STORAGE_FileIO_Stat_isSocket_0100\n   * @tc.name ", "STORAGE_FileIO_Stat_isSocket_0200\n   * @tc.name ", "True()\n      dirent.isSocket(-1);\n      expect(n", "@tc.desc Test Lstat.isSocket() interface.\n   * T", "ileio_dir_read_sync_isSocket_001\n   * @tc.desc T", "@tc.desc Test Lstat.isSocket() interface.\n   * @", "sc Function of API, isSocket. The parameter is -", "FileIO_Dir_ReadSync_isSocket_0000\n   * @tc.name ", "pect(isBoolean(stat.isSocket())).assertTrue();\n ", "rue();\n      dirent.isSocket(-1);\n      expect(n", "@tc.desc Test Fstat.isSocket() interface.\n   * T", "ct(isBoolean(dirent.isSocket())).assertTrue();\n ", ");\n      expect(dir.isSocket() === false).assert", "STORAGE_FileIO_Stat_isSocket_0000\n   * @tc.name "], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dirent", "api_method_name": "isSymbolicLink", "api_method_all": "isSymbolicLink(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 59, "since": 6, "api_used": "\u662f", "lines": ["ileio_dir_read_sync_isSymbolicLink_000', 0, async func", "ileio_dir_read_sync_isSymbolicLink_000\n   * @tc.desc T", "ileio_dir_read_sync_isSymbolicLink_001') + 'd';\n    le", "ileio_dir_read_sync_isSymbolicLink_001', 0, async func", "xpect(isBoolean(dir.isSymbolicLink())).assertTrue();\n ", ";\n      expect(stat.isSymbolicLink(-1) == null).assert", ";\n      expect(stat.isSymbolicLink() === false).assert", "\n   * @tc.desc Test isSymbolicLink() interface\n   * @t", "@tc.desc Test lstat.isSymbolicLink() interface.\n   * @", ");\n      expect(dir.isSymbolicLink() === false).assert", "ct(isBoolean(dirent.isSymbolicLink())).assertTrue();\n ", "@tc.desc Test Lstat.isSymbolicLink() interface.\n   * T", "Test Stat.statasync_isSymbolicLink() interfaces.\n   * ", "sc Function of API, isSymbolicLink. The parameter is -", "STORAGE_FileIO_Stat_isSymbolicLink_0000\n   * @tc.name ", " expect(typeof(stat.isSymbolicLink()) == 'boolean').as", "STORAGE_FileIO_Stat_isSymbolicLink_0100\n   * @tc.name ", "@tc.desc Test fstat.isSymbolicLink() interface.\n   * @", "ileio_dir_read_sync_isSymbolicLink_001 has failed for ", "sc Function of API, isSymbolicLink. Determine whether ", ";\n      expect(stat.isSymbolicLink(-1) === false).asse", "      expect(dirent.isSymbolicLink() !== null);\n      ", "STORAGE_FileIO_Stat_isSymbolicLink_0200\n   * @tc.name ", "pect(isBoolean(stat.isSymbolicLink())).assertTrue();\n ", "@tc.desc Test Fstat.isSymbolicLink() interface.\n   * @", "rue();\n      dirent.isSymbolicLink(-1);\n      expect(n", "\n      expect(!stat.isSymbolicLink()).assertTrue();\n  ", "ileio_dir_read_sync_isSymbolicLink_000') + 'd';\n    le", "ileio_dir_read_sync_isSymbolicLink_000 has failed for ", "@tc.desc Test Fstat.isSymbolicLink() interface.\n   * T", "@tc.desc Test Lstat.isSymbolicLink() interface.\n   * @", "ileio_dir_read_sync_isSymbolicLink_001\n   * @tc.desc T", "FileIO_Dir_ReadSync_isSymbolicLink_0000\n   * @tc.name ", "FileIO_Dir_ReadSync_isSymbolicLink_0010\n   * @tc.name "], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Dirent", "api_method_name": "name", "api_method_all": "readonly name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 756, "since": 6, "api_used": "\u662f", "lines": ["nSync_1600\n   * @tc.name fileio_test_open_01", "nSync_2500\n   * @tc.name fileio_test_open_02", "nSync_3600\n   * @tc.name fileio_test_open_03", "nSync_1500\n   * @tc.name fileio_test_open_01", "nSync_0800\n   * @tc.name fileio_test_open_sy", "f API, openSync(filename too long).\n   */\n  ", "nSync_1900\n   * @tc.name fileio_test_open_01", "nSync_0400\n   * @tc.name fileio_test_open_sy", "nSync_3800\n   * @tc.name fileio_test_open_03", "nSync_1400\n   * @tc.name fileio_test_open_01", "nSync_0180\n   * @tc.name FileIo_test_error_0", "nSync_0220\n   * @tc.name FileIo_test_error_0", "nSync_0160\n   * @tc.name FileIo_test_error_0", "nSync_2700\n   * @tc.name fileio_test_open_02", "nSync_0600\n   * @tc.name fileio_test_open_sy", "nSync_2600\n   * @tc.name fileio_test_open_02", "nSync_3700\n   * @tc.name fileio_test_open_03", "nSync_1000\n   * @tc.name fileio_test_open_sy", "nSync_3000\n   * @tc.name fileio_test_open_03", "nSync_1700\n   * @tc.name fileio_test_open_01", "nSync_0210\n   * @tc.name FileIo_test_error_0", "nSync_0700\n   * @tc.name fileio_test_open_sy", "nSync_3500\n   * @tc.name fileio_test_open_03", "nSync_0300\n   * @tc.name fileio_test_open_sy", "eSync_0000\n   * @tc.name fileio_test_close_s", "nSync_0200\n   * @tc.name FileIo_test_error_0", "p_openSync\n   * @tc.name fileioPerformance_p", "nSync_0200\n   * @tc.name fileio_test_open_sy", "nSync_3200\n   * @tc.name fileio_test_open_03", "nSync_0900\n   * @tc.name fileio_test_open_sy", "nSync_2800\n   * @tc.name fileio_test_open_02", "nSync_3300\n   * @tc.name fileio_test_open_03", "nSync_0190\n   * @tc.name FileIo_test_error_0", "nSync_1800\n   * @tc.name fileio_test_open_01", "nSync_0150\n   * @tc.name FileIo_test_error_0", "nSync_2400\n   * @tc.name fileio_test_open_02", "nSync_2200\n   * @tc.name fileio_test_open_02", "p_copyFile\n   * @tc.name fileioPerformance_p", "sSync_0000\n   * @tc.name fileio_test_access_", "nSync_3400\n   * @tc.name fileio_test_open_03", "nSync_2300\n   * @tc.name fileio_test_open_02", "nSync_0170\n   * @tc.name FileIo_test_error_0", "_List_1500\n   * @tc.name File_List_015\n   * ", "nSync_0500\n   * @tc.name fileio_test_open_sy", "eSync_0100\n   * @tc.name fileio_test_close_s", "f API, openSync(filename has special charact", "nSync_2100\n   * @tc.name fileio_test_open_02", "nSync_2900\n   * @tc.name fileio_test_open_02", "nSync_0100\n   * @tc.name fileio_test_open_sy", "nSync_3100\n   * @tc.name fileio_test_open_03"], "files": ["List.test.js", "FileIODirent.test.js", "securitylabel.test.js", "FileIOStat.test.js", "createWatcher.test.js", "FileIO.test.js", "FileVirtualPath.test.js", "lstat.test.js", "FileIOStream.test.js", "fstat.test.js", "FileIOError.test.js", "File.test.js", "StorageStatistics.test.js", "write.test.js", "all.test.js", "VolumeManager.test.js", "filemanager.test.js", "read.test.js", "stat.test.js", "rename.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_all": "declare interface Stat {\n    \n    readonly dev: number;\n    \n    readonly ino: number;\n    \n    readonly mode: number;\n    \n    readonly nlink: number;\n    \n    readonly uid: number;\n    \n    readonly gid: number;\n    \n    readonly rdev: number;\n    \n    readonly size: number;\n    \n    readonly blocks: number;\n    \n    readonly atime: number;\n    \n    readonly mtime: number;\n    \n    readonly ctime: number;\n    \n    isBlockDevice(): boolean;\n    \n    isCharacterDevice(): boolean;\n    \n    isDirectory(): boolean;\n    \n    isFIFO(): boolean;\n    \n    isFile(): boolean;\n    \n    isSocket(): boolean;\n    \n    isSymbolicLink(): boolean;\n}", "api_method_name": "Stat", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 132, "since": 6, "api_used": "\u662f", "lines": [" SUB_STORAGE_FileIO_Stat_isDirectory_0200\n  ", "\n   * @tc.desc Test Stat.statsync_IsCharacte", "\n   * @tc.desc Test Stat.statsync_isFIFO() i", " SUB_STORAGE_FileIO_Stat_isFile_0300\n   * @t", " SUB_STORAGE_FileIO_Stat_isFile_0100\n   * @t", " SUB_STORAGE_FileIO_Stat_isDirectory_0000\n  ", " SUB_STORAGE_FileIO_Stat_isBlockDevice_0000\n", " SUB_STORAGE_FileIO_Stat_isBlockDevice_0100\n", " SUB_STORAGE_FileIO_Stat_isFile_0000\n   * @t", "e() method of class Stat.\n   * @tc.size MEDI", " SUB_STORAGE_FileIO_Stat_ctime_0000\n   * @tc", " SUB_STORAGE_FileIO_Stat_isFile_0200\n   * @t", " SUB_STORAGE_FileIO_Stat_isFifo_0200\n   * @t", "\n   * @tc.desc Test Stat.statsync_isFile() i", " SUB_STORAGE_FileIO_Stat_isSocket_0000\n   * ", "\n   * @tc.desc Test Stat.lstatAsync() interf", " SUB_STORAGE_FileIO_Stat_isCharacterDevice_0", "describe('fileIOTestStat', function () {\n\n  ", " SUB_STORAGE_FileIO_Stat_mtime_0000\n   * @tc", "\n   * @tc.desc Test Stat.FstatAsync() interf", " SUB_STORAGE_FileIO_Stat_isSocket_0100\n   * ", "\n   * @tc.desc Test Stat.statsync_isSocket()", " SUB_STORAGE_FileIO_Stat_isSymbolicLink_0100", " SUB_STORAGE_FileIO_Stat_isSocket_0200\n   * ", " SUB_STORAGE_FileIO_Stat_isFifo_0100\n   * @t", "\n   * @tc.desc Test Stat.statsync_isDirector", " SUB_STORAGE_FileIO_Stat_isDirectory_0300\n  ", " SUB_STORAGE_FileIO_Stat_isSymbolicLink_0200", "e() method of class Stat.\n   * This interfac", "\n   * @tc.desc Test Stat.statSync_IsBlockDev", " SUB_STORAGE_FileIO_Stat_isDirectory_0100\n  ", "')\nrequire('./FileIOStat.test.js')\nrequire('", " SUB_STORAGE_FileIO_Stat_isSymbolicLink_0000", " SUB_STORAGE_FileIO_Stat_isBlockDevice_0200\n"], "files": ["List.test.js", "StorageStatistics.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "isBlockDevice", "api_method_all": "isBlockDevice(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 58, "since": 6, "api_used": "\u662f", "lines": ["pect(isBoolean(stat.isBlockDevice())).assertTrue();\n ", "* @tc.desc Test the isBlockDevice() method of class F", "leio_dir_read_async_isBlockDevice_000') + 'd';\n    le", "leio_dir_read_async_isBlockDevice_000', 0, async func", "      expect(dirent.isBlockDevice() !== null);\n      ", "* @tc.desc Test the isBlockDevice() method of class L", "ileio_dir_read_sync_isBlockDevice_001 has failed for ", "@tc.desc Test Lstat.isBlockDevice() interface.\n   * @", "@tc.desc Test Fstat.isBlockDevice() interface.\n   * @", "\n      expect(!stat.isBlockDevice(-1)).assertTrue();\n", "sc Function of API, isBlockDevice. Determine whether ", ");\n      expect(dir.isBlockDevice() === false).assert", "ileio_dir_read_sync_isBlockDevice_000 has failed for ", "sc Function of API, isBlockDevice. The parameter is -", "* @tc.desc Test the isBlockDevice method of class lst", "ileio_dir_read_sync_isBlockDevice_001', 0, async func", "leio_dir_read_async_isBlockDevice_000\n   * @tc.desc T", "leio_dir_read_async_isBlockDevice_001 has failed for ", "ileio_dir_read_sync_isBlockDevice_000') + 'd';\n    le", "STORAGE_FileIO_Stat_isBlockDevice_0000\n   * @tc.name ", "STORAGE_FileIO_Stat_isBlockDevice_0200\n   * @tc.name ", "ileio_dir_read_sync_isBlockDevice_000', 0, async func", "rue();\n      dirent.isBlockDevice(-1);\n      expect(n", "xpect(isBoolean(dir.isBlockDevice())).assertTrue();\n ", ";\n      expect(stat.isBlockDevice() === false).assert", "ileio_dir_read_sync_isBlockDevice_001') + 'd';\n    le", ";\n      expect(stat.isBlockDevice(-1) === false).asse", "ct(isBoolean(dirent.isBlockDevice())).assertTrue();\n ", "STORAGE_FileIO_Stat_isBlockDevice_0100\n   * @tc.name ", "leio_dir_read_async_isBlockDevice_000 has failed for ", "\n      expect(!stat.isBlockDevice()).assertTrue();\n  ", "leio_dir_read_async_isBlockDevice_001', 0, async func", "leio_dir_read_async_isBlockDevice_001') + 'd';\n    le", " expect(typeof(stat.isBlockDevice()) == 'boolean').as", "leio_dir_read_async_isBlockDevice_001\n   * @tc.desc T"], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "isCharacterDevice", "api_method_all": "isCharacterDevice(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 58, "since": 6, "api_used": "\u662f", "lines": ["ileio_dir_read_sync_isCharacterDevice_001') + 'd';\n    le", "STORAGE_FileIO_stat_isCharacterDevice_0000\n   * @tc.name ", "      expect(dirent.isCharacterDevice() !== null);\n      ", "STORAGE_FileIO_Stat_isCharacterDevice_0200\n   * @tc.name ", ");\n      expect(dir.isCharacterDevice() === false).assert", "\n      expect(!stat.isCharacterDevice(-1)).assertTrue();\n", ";\n      expect(stat.isCharacterDevice(-1) === false).asse", "@tc.desc Test Lstat.isCharacterDevice() interface.\n   * @", "ileio_dir_read_sync_isCharacterDevice_001 has failed for ", "ileio_dir_read_sync_isCharacterDevice_001', 0, async func", "ileio_dir_read_sync_isCharacterDevice_000 has failed for ", "xpect(isBoolean(dir.isCharacterDevice())).assertTrue();\n ", "STORAGE_FileIO_Stat_isCharacterDevice_0100\n   * @tc.name ", "leio_dir_read_async_isCharacterDevice_001') + 'd';\n    le", "ileio_dir_read_sync_isCharacterDevice_000') + 'd';\n    le", "@tc.desc Test Fstat.isCharacterDevice() interface.\n   * T", "leio_dir_read_async_isCharacterDevice_000', 0, async func", "ct(isBoolean(dirent.isCharacterDevice())).assertTrue();\n ", "sc Function of API, isCharacterDevice. The parameter is -", "leio_dir_read_async_isCharacterDevice_001\n   * @tc.desc T", "leio_dir_read_async_isCharacterDevice_001 has failed for ", "sc Function of API, isCharacterDevice. Determine whether ", "leio_dir_read_async_isCharacterDevice_000') + 'd';\n    le", "\n      expect(!stat.isCharacterDevice()).assertTrue();\n  ", "pect(isBoolean(stat.isCharacterDevice())).assertTrue();\n ", " expect(typeof(stat.isCharacterDevice()) == 'boolean').as", "* @tc.desc Test the isCharacterDevice method of class lst", "rue();\n      dirent.isCharacterDevice(-1);\n      expect(n", "leio_dir_read_async_isCharacterDevice_000 has failed for ", "ileio_dir_read_sync_isCharacterDevice_000', 0, async func", ";\n      expect(stat.isCharacterDevice() === false).assert", "leio_dir_read_async_isCharacterDevice_000\n   * @tc.desc T", "leio_dir_read_async_isCharacterDevice_001', 0, async func", "@tc.desc Test Fstat.isCharacterDevice() interface.\n   * @", "@tc.desc Test Lstat.isCharacterDevice() interface.\n   * T"], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "isDirectory", "api_method_all": "isDirectory(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 100, "since": 6, "api_used": "\u662f", "lines": ["sc Function of API, isDirectory. Determine whether ", "ileio_dir_read_sync_isDirectory_000', 0, async func", "      expect(dirent.isDirectory() !== null);\n      ", "ileio_dir_read_sync_isDirectory_001') + 'd';\n    le", "xpect(isBoolean(dir.isDirectory())).assertTrue();\n ", "ileio_dir_read_sync_isDirectory_000 has failed for ", "STORAGE_FileIO_Stat_isDirectory_0100\n   * @tc.name ", "leio_dir_read_async_isDirectory_001', 0, async func", "leio_dir_read_async_isDirectory_000') + 'd';\n    le", " expect(typeof(stat.isDirectory()) == 'boolean').as", "ileio_dir_read_sync_isDirectory_001', 0, async func", "ileio_dir_read_sync_isDirectory_001 has failed for ", "rue();\n      dirent.isDirectory(-1);\n      expect(n", "STORAGE_FileIO_Stat_isDirectory_0000\n   * @tc.name ", "ileio_dir_read_sync_isDirectory_000') + 'd';\n    le", "leio_dir_read_async_isDirectory_000 has failed for ", ");\n      expect(dir.isDirectory() === false).assert", "leio_dir_read_async_isDirectory_001\n   * @tc.desc T", "leio_dir_read_async_isDirectory_001') + 'd';\n    le", "leio_dir_read_async_isDirectory_000\n   * @tc.desc T", ";\n      expect(stat.isDirectory(-1) == null).assert", "STORAGE_FileIO_Stat_isDirectory_0300\n   * @tc.name ", "leio_dir_read_async_isDirectory_000', 0, async func", "        expect(stat.isDirectory()).assertTrue();\n  ", "\n      expect(!stat.isDirectory()).assertTrue();\n  ", "sc Function of API, isDirectory. The parameter is -", "leio_dir_read_async_isDirectory_001 has failed for ", "STORAGE_FileIO_Stat_isDirectory_0200\n   * @tc.name "], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "isFIFO", "api_method_all": "isFIFO(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 62, "since": 6, "api_used": "\u662f", "lines": ["@tc.desc Test lstat.isFIFO() interface.\n   * @", " expect(typeof(stat.isFIFO()) == 'boolean').as", "\n      expect(!stat.isFIFO()).assertTrue();\n  ", "leio_dir_read_async_isFIFO_000\n   * @tc.desc T", "FileIO_Dir_ReadSync_isFIFO_0000\n   * @tc.name ", "@tc.desc Test Fstat.isFIFO() interface.\n   * T", "ileio_dir_read_sync_isFIFO_001', 0, async func", "ileio_dir_read_sync_isFIFO_001 has failed for ", "@tc.desc Test Fstat.isFIFO() interface.\n   * @", ");\n      expect(dir.isFIFO() === false).assert", "ileio_dir_read_sync_isFIFO_001\n   * @tc.desc T", ";\n      expect(stat.isFIFO() === false).assert", "sc Function of API, isFIFO. The parameter is -", "leio_dir_read_async_isFIFO_001 has failed for ", "leio_dir_read_async_isFIFO_000 has failed for ", "ileio_dir_read_sync_isFIFO_001') + 'd';\n    le", "ileio_dir_read_sync_isFIFO_000') + 'd';\n    le", "ileio_dir_read_sync_isFIFO_000 has failed for ", ";\n      expect(stat.isFIFO(-1) === false).asse", "leio_dir_read_async_isFIFO_001', 0, async func", "rue();\n      dirent.isFIFO(-1);\n      expect(n", "pect(isBoolean(stat.isFIFO())).assertTrue();\n ", "ileio_dir_read_sync_isFIFO_000', 0, async func", "@tc.desc Test Lstat.isFIFO() interface.\n   * T", "ileio_dir_read_sync_isFIFO_000\n   * @tc.desc T", "      expect(dirent.isFIFO() !== null);\n      ", "xpect(isBoolean(dir.isFIFO())).assertTrue();\n ", "leio_dir_read_async_isFIFO_000') + 'd';\n    le", ";\n      expect(stat.isFIFO(-1) == null).assert", "leio_dir_read_async_isFIFO_001\n   * @tc.desc T", "ct(isBoolean(dirent.isFIFO())).assertTrue()\n  ", "leio_dir_read_async_isFIFO_000', 0, async func", "FileIO_Dir_ReadSync_isFIFO_0010\n   * @tc.name ", "leio_dir_read_async_isFIFO_001') + 'd';\n    le", "sc Function of API, isFIFO. Determine whether ", "@tc.desc Test Lstat.isFIFO() interface.\n   * @"], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "isFile", "api_method_all": "isFile(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 73, "since": 6, "api_used": "\u662f", "lines": ["ileio_dir_read_sync_isFile_001 has failed for ", "ileio_dir_read_sync_isFile_001') + 'd';\n    le", ";\n      expect(stat.isFile()).assertTrue();\n  ", "      expect(dirent.isFile() !== null);\n      ", "ileio_dir_read_sync_isFile_000 has failed for ", "xpect(isBoolean(dir.isFile())).assertTrue();\n ", "@tc.desc Test Fstat.isFile() interface.\n   * T", "sc Function of API, isFile. Determine whether ", "@tc.desc Test lstat.isFile() interface.\n   * @", "sc Function of API, isFile. The parameter is -", " expect(typeof(stat.isFile()) == 'boolean').as", "ileio_dir_read_sync_isFile_000') + 'd';\n    le", "pect(isBoolean(stat.isFile())).assertTrue();\n ", ";\n      expect(stat.isFile(-1) === false).asse", "FileIO_Dir_ReadSync_isFile_0010\n   * @tc.name ", ";\n      expect(stat.isFile(-1) == null).assert", "STORAGE_FileIO_Stat_isFile_0000\n   * @tc.name ", "rue();\n      dirent.isFile(-1);\n      expect(n", "}\n}\nexport function isFileExist(fpath) {\n  try", "@tc.desc Test Lstat.isFile() interface.\n   * T", "ileio_dir_read_sync_isFile_000\n   * @tc.desc T", "ileio_dir_read_sync_isFile_001\n   * @tc.desc T", "STORAGE_FileIO_Stat_isFile_0100\n   * @tc.name ", "@tc.desc Test Fstat.isFile() interface.\n   * @", "STORAGE_FileIO_Stat_isFile_0200\n   * @tc.name ", "FileIO_Dir_ReadSync_isFile_0000\n   * @tc.name ", "ct(isBoolean(dirent.isFile())).assertTrue();\n ", ";\n      expect(stat.isFile() === false).assert", "\n      expect(!stat.isFile()).assertTrue();\n  ", "ileio_dir_read_sync_isFile_000', 0, async func", "ileio_dir_read_sync_isFile_001', 0, async func", "STORAGE_FileIO_Stat_isFile_0300\n   * @tc.name ", ");\n      expect(dir.isFile()).assertTrue();\n  "], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "FileIOStat.test.js", "fstat.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "isSocket", "api_method_all": "isSocket(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 57, "since": 6, "api_used": "\u662f", "lines": [";\n      expect(stat.isSocket(-1) == null).assert", "@tc.desc Test Fstat.isSocket() interface.\n   * @", "ileio_dir_read_sync_isSocket_000 has failed for ", " Test Stat.statsync_isSocket() interfaces.\n   * ", "ileio_dir_read_sync_isSocket_001') + 'd';\n    le", "sc Function of API, isSocket. Determine whether ", ";\n      expect(stat.isSocket() === false).assert", ";\n      expect(stat.isSocket(-1) === false).asse", "xpect(isBoolean(dir.isSocket())).assertTrue();\n ", "\n      expect(!stat.isSocket()).assertTrue();\n  ", "ileio_dir_read_sync_isSocket_000', 0, async func", "      expect(dirent.isSocket() !== null);\n      ", "ileio_dir_read_sync_isSocket_001', 0, async func", "FileIO_Dir_ReadSync_isSocket_0010\n   * @tc.name ", "@tc.desc Test lstat.isSocket() interface.\n   * @", " expect(typeof(stat.isSocket()) == 'boolean').as", "ileio_dir_read_sync_isSocket_001 has failed for ", "ileio_dir_read_sync_isSocket_000\n   * @tc.desc T", "ileio_dir_read_sync_isSocket_000') + 'd';\n    le", "STORAGE_FileIO_Stat_isSocket_0100\n   * @tc.name ", "STORAGE_FileIO_Stat_isSocket_0200\n   * @tc.name ", "True()\n      dirent.isSocket(-1);\n      expect(n", "@tc.desc Test Lstat.isSocket() interface.\n   * T", "ileio_dir_read_sync_isSocket_001\n   * @tc.desc T", "@tc.desc Test Lstat.isSocket() interface.\n   * @", "sc Function of API, isSocket. The parameter is -", "FileIO_Dir_ReadSync_isSocket_0000\n   * @tc.name ", "pect(isBoolean(stat.isSocket())).assertTrue();\n ", "rue();\n      dirent.isSocket(-1);\n      expect(n", "@tc.desc Test Fstat.isSocket() interface.\n   * T", "ct(isBoolean(dirent.isSocket())).assertTrue();\n ", ");\n      expect(dir.isSocket() === false).assert", "STORAGE_FileIO_Stat_isSocket_0000\n   * @tc.name "], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "isSymbolicLink", "api_method_all": "isSymbolicLink(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 59, "since": 6, "api_used": "\u662f", "lines": ["ileio_dir_read_sync_isSymbolicLink_000', 0, async func", "ileio_dir_read_sync_isSymbolicLink_000\n   * @tc.desc T", "ileio_dir_read_sync_isSymbolicLink_001') + 'd';\n    le", "ileio_dir_read_sync_isSymbolicLink_001', 0, async func", "xpect(isBoolean(dir.isSymbolicLink())).assertTrue();\n ", ";\n      expect(stat.isSymbolicLink(-1) == null).assert", ";\n      expect(stat.isSymbolicLink() === false).assert", "\n   * @tc.desc Test isSymbolicLink() interface\n   * @t", "@tc.desc Test lstat.isSymbolicLink() interface.\n   * @", ");\n      expect(dir.isSymbolicLink() === false).assert", "ct(isBoolean(dirent.isSymbolicLink())).assertTrue();\n ", "@tc.desc Test Lstat.isSymbolicLink() interface.\n   * T", "Test Stat.statasync_isSymbolicLink() interfaces.\n   * ", "sc Function of API, isSymbolicLink. The parameter is -", "STORAGE_FileIO_Stat_isSymbolicLink_0000\n   * @tc.name ", " expect(typeof(stat.isSymbolicLink()) == 'boolean').as", "STORAGE_FileIO_Stat_isSymbolicLink_0100\n   * @tc.name ", "@tc.desc Test fstat.isSymbolicLink() interface.\n   * @", "ileio_dir_read_sync_isSymbolicLink_001 has failed for ", "sc Function of API, isSymbolicLink. Determine whether ", ";\n      expect(stat.isSymbolicLink(-1) === false).asse", "      expect(dirent.isSymbolicLink() !== null);\n      ", "STORAGE_FileIO_Stat_isSymbolicLink_0200\n   * @tc.name ", "pect(isBoolean(stat.isSymbolicLink())).assertTrue();\n ", "@tc.desc Test Fstat.isSymbolicLink() interface.\n   * @", "rue();\n      dirent.isSymbolicLink(-1);\n      expect(n", "\n      expect(!stat.isSymbolicLink()).assertTrue();\n  ", "ileio_dir_read_sync_isSymbolicLink_000') + 'd';\n    le", "ileio_dir_read_sync_isSymbolicLink_000 has failed for ", "@tc.desc Test Fstat.isSymbolicLink() interface.\n   * T", "@tc.desc Test Lstat.isSymbolicLink() interface.\n   * @", "ileio_dir_read_sync_isSymbolicLink_001\n   * @tc.desc T", "FileIO_Dir_ReadSync_isSymbolicLink_0000\n   * @tc.name ", "FileIO_Dir_ReadSync_isSymbolicLink_0010\n   * @tc.name "], "files": ["all.test.js", "FileIODirent.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "dev", "api_method_all": "readonly dev: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 244, "since": 6, "api_used": "\u662f", "lines": ["dirent_is_character_device_000 has failed f", "t_stat_is_character_device_000 has failed f", "_test_stat_is_block_device_000');\n    expec", "g('fileio_test_stat_dev_000 has failed for ", "t_stat_is_character_device_002', 0, async f", "est_dirent_is_block_device_001 has failed f", "_test_stat_is_block_device_001', 0, async f", "_test_stat_is_block_device_002 has failed f", "_test_stat_is_block_device_001');\n    expec", "est_dirent_is_block_device_000', 0, async f", "t_stat_is_character_device_000', 0, async f", "t_stat_is_character_device_002\n   * @tc.des", "t_stat_is_character_device_002 has failed f", "_test_stat_is_block_device_000 has failed f", "_test_stat_is_block_device_002');\n    expec", "_test_stat_is_block_device_002', 0, async f", " expect(typeof(stat.dev) == 'number').asser", "('fileio_test_stat_rdev_000');\n    expect(p", "est_dirent_is_block_device_000 has failed f", "_test_stat_is_block_device_002\n   * @tc.des", "('fileio_test_stat_rdev_000 has failed for ", "t_stat_is_character_device_001 has failed f", "_test_stat_is_block_device_000\n   * @tc.des", "dirent_is_character_device_000') + 'd';\n   ", "t_stat_is_character_device_001\n   * @tc.des", "_test_stat_is_block_device_001 has failed f", "('fileio_test_stat_rdev_000', 0, async func", "expect(typeof(stat.rdev) == 'number').asser", "r it is a character device. The return valu", "dirent_is_character_device_001', 0, async f", "t_stat_is_character_device_000\n   * @tc.des", "t_stat_is_character_device_002');\n    expec", "ether it is a block device. The return valu", "est_dirent_is_block_device_001') + 'd';\n   ", "est_dirent_is_block_device_001', 0, async f", "est_dirent_is_block_device_000') + 'd';\n   ", "dirent_is_character_device_001 has failed f", "t('fileio_test_stat_dev_000', 0, async func", "_test_stat_is_block_device_001\n   * @tc.des", "t_stat_is_character_device_001');\n    expec", "dirent_is_character_device_001') + 'd';\n   ", "_test_stat_is_block_device_000', 0, async f", "e('fileio_test_stat_dev_000');\n    expect(p", "dirent_is_character_device_000', 0, async f", "t_stat_is_character_device_001', 0, async f", "t_stat_is_character_device_000');\n    expec"], "files": ["filemanager.test.js", "all.test.js", "FileIODirent.test.js", "stat.test.js", "statfs.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "ino", "api_method_all": "readonly ino: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 34, "since": 6, "api_used": "\u662f", "lines": ["xpect(isIntNum(stat.ino)).assertTrue();\n   ", "'fileio_lstat_async_ino_000', 0, async func", "t('fileio_test_stat_ino_000', 0, async func", "\n  it('fileio_lstat_ino_000', 0, async func", "'fileio_fstat_async_ino_000');\n    expect(p", "'fileio_lstat_async_ino_000');\n    expect(p", "g('fileio_test_stat_ino_000 has failed for ", "'fileio_fstat_async_ino_000', 0, async func", "'fileio_lstat_async_ino_000 has failed for ", " fileio_lstat_async_ino_000\n   * @tc.desc T", "g('fileio_stat_sync_ino_000 has failed for ", "eName('fileio_lstat_ino_000');\n    expect(p", "'fileio_fstat_async_ino_000 has failed for ", "* @tc.desc Test the ino member of class Sta", "\n  it('fileio_fstat_ino_000', 0, async func", "e.log('fileio_lstat_ino_000 has failed for ", "e('fileio_test_stat_ino_000');\n    expect(p", "e('fileio_stat_sync_ino_000');\n    expect(p", "eName('fileio_fstat_ino_000');\n    expect(p", "('fileio_stat_async_ino_000', 0, async func", " expect(typeof(stat.ino) == 'number').asser", "e fileio_stat_async_ino_000\n   * @tc.desc T", "('fileio_stat_async_ino_000');\n    expect(p", "t('fileio_stat_sync_ino_000', 0, async func", "('fileio_stat_async_ino_000 has failed for ", "* @tc.desc Test the ino member of class Lst", " fileio_fstat_async_ino_000\n   * @tc.desc T", "e.log('fileio_fstat_ino_000 has failed for "], "files": ["lstat.test.js", "stat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "mode", "api_method_all": "readonly mode: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 195, "since": 6, "api_used": "\u662f", "lines": ["sc Function of API, mode=0o007. The test fil", "of API, flags=0o002.mode=0o004\n   */\n  it('f", "eio.statSync(dpath).mode & 0o777) == 0o660).", "eio.statSync(fpath).mode & 0o777) == 0o040).", "API, flags=0o40002. mode=0o700\n   */\n  it('f", "of API, flags=0o002.mode=0o400\n   */\n  it('f", "lags not for value, mode not for value).\n   ", "sc Function of API, mode=0o260. The test fil", "eio.statSync(fpath).mode & 0o777) == 0o400).", "of API, flags=0o002.mode=0o040\n   */\n  it('f", "sc Function of API, mode=0o040. The test fil", "sc Function of API, mode=0o460\n   */\n  it('f", "enSync(flags=0o102, mode=0o777). The test fi", "of API, flags=0o002.mode=0o001\n   */\n  it('f", "tion of API, access(mode=2). The test file i", "of API, flags=0o102.mode=0o700\n   */\n  it('f", "eio.statSync(fpath).mode & 0o777) == 0o460).", "sc Function of API, mode=0o010. The test fil", "eio.statSync(fpath).mode & 0o777) == 0o100).", "esc Function of API,mode=1 The test file is ", "of API, flags=0o002.mode=0o100\n   */\n  it('f", "of API, flags=0o002.mode=0o007\n   */\n  it('f", "sc Function of API, mode=0o002. The test fil", "tion of API, access(mode=1). The test file i", "eio.statSync(fpath).mode & 0o777) == 0o020).", "sc Function of API, mode=0o100. The test fil", "eio.statSync(fpath).mode & 0o777) == 0o070).", "eio.statSync(fpath).mode & 0o777) == 0o002).", "of API, flags=0o002.mode=0o200\n   */\n  it('f", "f API,  flags=0o002.mode=0o070\n   */\n  it('f", "eio.statSync(fpath).mode & 0o777) == 0o700).", "of API, flags=0o002.mode=0o020\n   */\n  it('f", "eio.statSync(fpath).mode & 0o777) == 0o004).", "PI, flags=0o1000002.mode=0o700\n   */\n  it('f", "tion of API, access(mode=4).\n   */\n  it('fil", "eio.statSync(fpath).mode & 0o777) == 0o200).", "sc Function of API, mode=0o020. The test fil", "sc Function of API, mode=0o200. The test fil", "eio.statSync(fpath).mode & 0o777) == 0o660).", "eio.statSync(fpath).mode & 0o777) == 0o007).", "sc Function of API, mode=0o700. The test fil", "sc Function of API, mode=0o070. The test fil", "of API, flags=0o002.mode=0o010\n   */\n  it('f", "sc Function of API, mode=0o400. The test fil", "of API, flags=0o002.mode=0o002\n   */\n  it('f", "eio.statSync(fpath).mode & 0o777) == 0o010).", " of API,flags=0o002.mode=0o700\n   */\n  it('f", "eio.statSync(fpath).mode & 0o777) == 0o260).", "sc Function of API, mode=0o660\n   */\n  it('f"], "files": ["FileIOError.test.js", "File.test.js", "fdopenStream.test.js", "fchmod.test.js", "stat.test.js", "chmod.test.js", "lstat.test.js", "FileIOStream.test.js", "FileIOStat.test.js", "fstat.test.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "nlink", "api_method_all": "readonly nlink: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 778, "since": 6, "api_used": "\u662f", "lines": ["+ i);\n      fileio.unlinkSync(fpathTarget);\n ", "     expect(fileio.unlinkSync(fpath) !== null", "+ e);\n      fileio.unlinkSync(fpath);\n    }\n ", "+ e);\n      fileio.unlinkSync(fpath);\n      f"], "files": ["List.test.js", "symlink.test.js", "FileIODirent.test.js", "open_close.test.js", "fsync.test.js", "securitylabel.test.js", "FileIOStat.test.js", "createWatcher.test.js", "FileIO.test.js", "hash.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "fstat.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "unlink.test.js", "FileIOError.test.js", "access.test.js", "copyFile.test.js", "lseek.test.js", "File.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "chown.test.js", "fchown.test.js", "chmod.test.js", "fdatasync.test.js", "rmdir.test.js", "lchown.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "close.test.js", "rename.test.js", "flush.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "uid", "api_method_all": "readonly uid: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 68, "since": 7, "api_used": "\u662f", "lines": ["fchownSync(fd, stat.uid, stat.gid);\n      e", "\n    let UID = stat.uid\n    let GID = stat.", "'fileio_fstat_async_uid_000 has failed for ", "t('fileio_test_stat_uid_000', 0, async func", "\n  it('fileio_lstat_uid_000', 0, async func", "o.chown(fpath, stat.uid, stat.gid, function", " fileio_fstat_async_uid_000\n   * @tc.desc T", "eName('fileio_lstat_uid_000');\n    expect(p", "eName('fileio_fstat_uid_000');\n    expect(p", "ownSync(fpath, stat.uid, stat.gid));\n      ", "\n    let UID = stat.uid;\n    let fd;\n    tr", "'fileio_lstat_async_uid_000 has failed for ", "\n  it('fileio_fstat_uid_000', 0, async func", "e.log('fileio_lstat_uid_000 has failed for ", "'fileio_lstat_async_uid_000');\n    expect(p", " fileio_lstat_async_uid_000\n   * @tc.desc T", "t('fileio_stat_sync_uid_000', 0, async func", "'fileio_lstat_async_uid_000', 0, async func", "* @tc.desc Test the uid member of class Lst", "o.chown(fpath, stat.uid, stat.gid) == null)", "ownSync(fpath, stat.uid, stat.gid) == null)", "xpect(isIntNum(stat.uid)).assertTrue();\n   ", ".lchown(fpath, stat.uid, stat.gid) == null)", ".lchown(fpath, stat.uid, stat.gid, function", "chownSync('/', stat.uid, stat.gid));\n      ", "eio.fchown(fd, stat.uid, stat.gid, function", "'fileio_fstat_async_uid_000');\n    expect(p", "g('fileio_test_stat_uid_000 has failed for ", "'fileio_fstat_async_uid_000', 0, async func", "e('fileio_stat_sync_uid_000');\n    expect(p", "eio.fchown(-1, stat.uid, stat.gid);\n      e", " expect(typeof(stat.uid) == 'number').asser", "e.log('fileio_fstat_uid_000 has failed for ", "e('fileio_test_stat_uid_000');\n    expect(p", "eio.fchown(fd, stat.uid, stat.gid);\n      e"], "files": ["lchown.test.js", "StorageStatistics.test.js", "chown.test.js", "fchown.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js", "VolumeManager.test.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "gid", "api_method_all": "readonly gid: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 52, "since": 7, "api_used": "\u662f", "lines": ["eName('fileio_fstat_gid_000');\n    expect(p", "('fileio_stat_async_gid_000', 0, async func", "\n    let GID = stat.gid\n    let fd;\n    try", "* @tc.desc Test the gid member of class Sta", "ath, stat.uid, stat.gid, function (error) {", "\n    let GID = stat.gid\n    let fd = null\n ", "e.log('fileio_fstat_gid_000 has failed for ", "t('fileio_stat_sync_gid_000', 0, async func", " expect(typeof(stat.gid) == 'number').asser", "'/', stat.uid, stat.gid));\n      expect(nul", "g('fileio_stat_sync_gid_000 has failed for ", "e fileio_stat_async_gid_000\n   * @tc.desc T", "\n  it('fileio_fstat_gid_000', 0, async func", "ath, stat.uid, stat.gid) == null).assertTru", "'fileio_fstat_async_gid_000 has failed for ", "\n    let GID = stat.gid\n    try {\n      let", "'fileio_fstat_async_gid_000', 0, async func", "('fileio_stat_async_gid_000');\n    expect(p", "'fileio_fstat_async_gid_000');\n    expect(p", "t('fileio_test_stat_gid_000', 0, async func", "(-1, stat.uid, stat.gid);\n      expect(null", " fileio_fstat_async_gid_000\n   * @tc.desc T", "'fileio_lstat_async_gid_000', 0, async func", "\n    let GID = stat.gid\n    try {\n      exp", "xpect(isIntNum(stat.gid)).assertTrue();\n   ", "g('fileio_test_stat_gid_000 has failed for ", "* @tc.desc Test the gid member of class Lst", "(fd, stat.uid, stat.gid, function (err) {\n ", "e('fileio_test_stat_gid_000');\n    expect(p", "e('fileio_stat_sync_gid_000');\n    expect(p", "'fileio_lstat_async_gid_000');\n    expect(p", "(fd, stat.uid, stat.gid);\n      expect(file", "e.log('fileio_lstat_gid_000 has failed for ", "'fileio_lstat_async_gid_000 has failed for ", " fileio_lstat_async_gid_000\n   * @tc.desc T", "\n  it('fileio_lstat_gid_000', 0, async func", "eName('fileio_lstat_gid_000');\n    expect(p", "ath, stat.uid, stat.gid));\n      expect(fil"], "files": ["lchown.test.js", "chown.test.js", "fchown.test.js", "stat.test.js", "lstat.test.js", "fstat.test.js", "FileIOStat.test.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "rdev", "api_method_all": "readonly rdev: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 34, "since": 6, "api_used": "\u662f", "lines": ["xpect(isIntNum(stat.rdev)).assertTrue();\n   ", "('fileio_stat_async_rdev_000 has failed for ", "* @tc.desc Test the rdev member of class Lst", "'fileio_fstat_async_rdev_000', 0, async func", "t('fileio_test_stat_rdev_000', 0, async func", "t('fileio_stat_sync_rdev_000', 0, async func", "\n  it('fileio_fstat_rdev_000', 0, async func", "'fileio_fstat_async_rdev_000 has failed for ", "e('fileio_stat_sync_rdev_000');\n    expect(p", "'fileio_lstat_async_rdev_000 has failed for ", "g('fileio_stat_sync_rdev_000 has failed for ", "('fileio_stat_async_rdev_000');\n    expect(p", "'fileio_fstat_async_rdev_000');\n    expect(p", " fileio_lstat_async_rdev_000\n   * @tc.desc T", "g('fileio_test_stat_rdev_000 has failed for ", "e('fileio_test_stat_rdev_000');\n    expect(p", "e.log('fileio_fstat_rdev_000 has failed for ", "'fileio_lstat_async_rdev_000', 0, async func", "e fileio_stat_async_rdev_000\n   * @tc.desc T", "'fileio_lstat_async_rdev_000');\n    expect(p", "e.log('fileio_lstat_rdev_000 has failed for ", "* @tc.desc Test the rdev member of class Sta", "\n  it('fileio_lstat_rdev_000', 0, async func", " fileio_fstat_async_rdev_000\n   * @tc.desc T", "eName('fileio_lstat_rdev_000');\n    expect(p", "eName('fileio_fstat_rdev_000');\n    expect(p", " expect(typeof(stat.rdev) == 'number').asser", "('fileio_stat_async_rdev_000', 0, async func"], "files": ["lstat.test.js", "stat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "size", "api_method_all": "readonly size: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 257, "since": 6, "api_used": "\u662f", "lines": ["pect(typeof(stat.blksize) == 'number').asser", "fileio_test_stat_blksize_000 has failed for ", "e('fileio_test_stat_size_000');\n    expect(p", "directory.\n   * @tc.size MEDIUM\n   * @tc.typ", "interface.\n   * @tc.size MEDIUM\n   * @tc.typ", " interface\n   * @tc.size MEDIUM(\u4e2d\u578b)\n   * @tc", "olic link.\n   * @tc.size MEDIUM\n   * @tc.typ", "xpect(isIntNum(stat.size)).assertTrue();\n   ", " expect(typeof(stat.size) == 'number').asser", "g('fileio_test_stat_size_000 has failed for ", "t('fileio_test_stat_size_000', 0, async func", " variable.\n   * @tc.size MEDIUM\n   * @tc.typ", "e.log('fileio_fstat_size_000 has failed for ", " a socket.\n   * @tc.size MEDIUM\n   * @tc.typ", "al device.\n   * @tc.size MEDIUM\n   * @tc.typ", "eio.statSync(fpath).size == 10).assertTrue()", "fileio_test_stat_blksize_000', 0, async func", "ass Lstat.\n   * @tc.size MEDIUM\n   * @tc.typ", "fileio_test_stat_blksize_000');\n    expect(p", "eName('fileio_fstat_size_000');\n    expect(p", "rmal file.\n   * @tc.size MEDIUM\n   * @tc.typ", " fileio_fstat_async_size_000\n   * @tc.desc T", "ew ArrayBuffer(stat.size));\n      expect(len", "ync model.\n   * @tc.size MEDIUM\n   * @tc.typ", "as a FIFO.\n   * @tc.size MEDIUM\n   * @tc.typ", "\n  it('fileio_fstat_size_000', 0, async func"], "files": ["filemanager.test.js", "File.test.js", "StorageStatistics.test.js", "write.test.js", "all.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "lstat.test.js", "securitylabel.test.js", "fstat.test.js", "FileIOStat.test.js", "VolumeManager.test.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "blocks", "api_method_all": "readonly blocks: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 37, "since": 6, "api_used": "\u662f", "lines": ["e('fileio_test_stat_blocks_000');\n    expect(p", "'fileio_fstat_async_blocks_000');\n    expect(p", "eName('fileio_fstat_blocks_000');\n    expect(p", "e fileio_stat_async_blocks_000\n   * @tc.desc T", " fileio_lstat_async_blocks_000\n   * @tc.desc T", "xpect(isIntNum(stat.blocks)).assertTrue();\n   ", "@tc.desc Test Fstat.blocks() interface.\n   * @", "e.log('fileio_fstat_blocks_000 has failed for ", "'fileio_lstat_async_blocks_000', 0, async func", "t('fileio_stat_sync_blocks_000', 0, async func", "'fileio_lstat_async_blocks_000 has failed for ", " fileio_fstat_async_blocks_000\n   * @tc.desc T", "@tc.desc Test lstat.blocks() interface.\n   * @", " expect(typeof(stat.blocks) == 'number').asser", "\n  it('fileio_lstat_blocks_000', 0, async func", "eName('fileio_lstat_blocks_000');\n    expect(p", "e.log('fileio_lstat_blocks_000 has failed for ", "('fileio_stat_async_blocks_000', 0, async func", "* @tc.desc Test the blocks member of class Sta", "\n  it('fileio_fstat_blocks_000', 0, async func", "('fileio_stat_async_blocks_000');\n    expect(p", "g('fileio_stat_sync_blocks_000 has failed for ", "'fileio_lstat_async_blocks_000');\n    expect(p", "('fileio_stat_async_blocks_000 has failed for ", "'fileio_fstat_async_blocks_000 has failed for ", " @tc.desc Test Stat.blocks() interface.\n   * @", "t('fileio_test_stat_blocks_000', 0, async func", "e('fileio_stat_sync_blocks_000');\n    expect(p", "g('fileio_test_stat_blocks_000 has failed for ", "'fileio_fstat_async_blocks_000', 0, async func", "* @tc.desc Test the blocks member of class lst"], "files": ["lstat.test.js", "stat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "atime", "api_method_all": "readonly atime: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 37, "since": 6, "api_used": "\u662f", "lines": ["t('fileio_stat_sync_atime_000', 0, async func", "('fileio_stat_async_atime_000');\n    expect(p", "e('fileio_stat_sync_atime_000');\n    expect(p", "e.log('fileio_fstat_atime_000 has failed for ", "'fileio_fstat_async_atime_000 has failed for ", "\n  it('fileio_lstat_atime_000', 0, async func", "'fileio_lstat_async_atime_000', 0, async func", "e fileio_stat_async_atime_000\n   * @tc.desc T", "'fileio_fstat_async_atime_000');\n    expect(p", " expect(typeof(stat.atime) == 'number').asser", "'fileio_lstat_async_atime_000 has failed for ", "t('fileio_test_stat_atime_000', 0, async func", "@tc.desc Test lstat.atime() interface.\n   * @", "eName('fileio_lstat_atime_000');\n    expect(p", "('fileio_stat_async_atime_000', 0, async func", "g('fileio_test_stat_atime_000 has failed for ", "'fileio_lstat_async_atime_000');\n    expect(p", "* @tc.desc Test the atime member of class Sta", "e.log('fileio_lstat_atime_000 has failed for ", "@tc.desc Test Fstat.atime() interface.\n   * @", "g('fileio_stat_sync_atime_000 has failed for ", "* @tc.desc Test the atime member of class lst", " fileio_lstat_async_atime_000\n   * @tc.desc T", "eName('fileio_fstat_atime_000');\n    expect(p", "\n  it('fileio_fstat_atime_000', 0, async func", "('fileio_stat_async_atime_000 has failed for ", " @tc.desc Test Stat.atime() interface.\n   * @", " fileio_fstat_async_atime_000\n   * @tc.desc T", "xpect(isIntNum(stat.atime)).assertTrue();\n   ", "'fileio_fstat_async_atime_000', 0, async func", "e('fileio_test_stat_atime_000');\n    expect(p"], "files": ["lstat.test.js", "stat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "mtime", "api_method_all": "readonly mtime: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 39, "since": 6, "api_used": "\u662f", "lines": ["'fileio_lstat_async_mtime_000 has failed for ", "\n  it('fileio_lstat_mtime_000', 0, async func", "eName('fileio_fstat_mtime_000');\n    expect(p", " fileio_lstat_async_mtime_000\n   * @tc.desc T", "'fileio_lstat_async_mtime_000');\n    expect(p", "'fileio_fstat_async_mtime_000');\n    expect(p", "('fileio_stat_async_mtime_000');\n    expect(p", "t('fileio_stat_sync_mtime_000', 0, async func", "t('fileio_test_stat_mtime_000', 0, async func", "e.log('fileio_lstat_mtime_000 has failed for ", "'fileio_fstat_async_mtime_000 has failed for ", "g('fileio_test_stat_mtime_000 has failed for ", "STORAGE_FileIO_Stat_mtime_0000\n   * @tc.name ", "'fileio_fstat_async_mtime_000', 0, async func", "'fileio_lstat_async_mtime_000', 0, async func", "@tc.desc Test Fstat.mtime() interface.\n   * @", "eName('fileio_lstat_mtime_000');\n    expect(p", "\n  it('fileio_fstat_mtime_000', 0, async func", "e.log('fileio_fstat_mtime_000 has failed for ", "e('fileio_stat_sync_mtime_000');\n    expect(p", "* @tc.desc Test the mtime member of class lst", "('fileio_stat_async_mtime_000 has failed for ", "e fileio_stat_async_mtime_000\n   * @tc.desc T", " @tc.desc Test Stat.mtime() interface.\n   * @", " fileio_fstat_async_mtime_000\n   * @tc.desc T", " expect(typeof(stat.mtime) == 'number').asser", "g('fileio_stat_sync_mtime_000 has failed for ", "* @tc.desc Test the mtime member of class Sta", "e('fileio_test_stat_mtime_000');\n    expect(p", "me fileio_test_stat_mtime_000\n   * @tc.desc F", "xpect(isIntNum(stat.mtime)).assertTrue();\n   ", "('fileio_stat_async_mtime_000', 0, async func", "@tc.desc Test lstat.mtime() interface.\n   * @"], "files": ["lstat.test.js", "stat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stat", "api_method_name": "ctime", "api_method_all": "readonly ctime: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 36, "since": 6, "api_used": "\u662f", "lines": ["me fileio_test_stat_ctime_000\n   * @tc.desc F", "'fileio_lstat_async_ctime_000', 0, async func", "'fileio_lstat_async_ctime_000 has failed for ", "* @tc.desc Test the ctime member of class lst", "\n  it('fileio_fstat_ctime_000', 0, async func", "\n  it('fileio_lstat_ctime_000', 0, async func", " fileio_lstat_async_ctime_000\n   * @tc.desc T", "('fileio_stat_async_ctime_000');\n    expect(p", "('fileio_stat_async_ctime_000', 0, async func", "'fileio_fstat_async_ctime_000', 0, async func", "e.log('fileio_lstat_ctime_000 has failed for ", "g('fileio_test_stat_ctime_000 has failed for ", " fileio_fstat_async_ctime_000\n   * @tc.desc T", "('fileio_stat_async_ctime_000 has failed for ", "'fileio_fstat_async_ctime_000 has failed for ", "* @tc.desc Test the ctime member of class Sta", "STORAGE_FileIO_Stat_ctime_0000\n   * @tc.name ", "'fileio_lstat_async_ctime_000');\n    expect(p", "eName('fileio_fstat_ctime_000');\n    expect(p", "e('fileio_stat_sync_ctime_000');\n    expect(p", "'fileio_fstat_async_ctime_000');\n    expect(p", "t('fileio_stat_sync_ctime_000', 0, async func", " expect(typeof(stat.ctime) == 'number').asser", "t('fileio_test_stat_ctime_000', 0, async func", "g('fileio_stat_sync_ctime_000 has failed for ", "e('fileio_test_stat_ctime_000');\n    expect(p", "e fileio_stat_async_ctime_000\n   * @tc.desc T", "eName('fileio_lstat_ctime_000');\n    expect(p", "xpect(isIntNum(stat.ctime)).assertTrue();\n   "], "files": ["lstat.test.js", "stat.test.js", "fstat.test.js", "FileIOStat.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_all": "declare interface Stream {\n    \n    close(): Promise<void>;\n    close(callback: AsyncCallback<void>): void;\n    \n    closeSync(): void;\n    \n    flush(): Promise<void>;\n    flush(callback: AsyncCallback<void>): void;\n    \n    flushSync(): void;\n    \n    write(buffer: ArrayBuffer | string, options?: {\n        offset?: number;\n        length?: number;\n        position?: number;\n        encoding?: string;\n    }): Promise<number>;\n    write(buffer: ArrayBuffer | string, callback: AsyncCallback<number>): void;\n    write(buffer: ArrayBuffer | string, options: {\n        offset?: number;\n        length?: number;\n        position?: number;\n        encoding?: string;\n    }, callback: AsyncCallback<number>): void;\n    \n    writeSync(buffer: ArrayBuffer | string, options?: {\n        offset?: number;\n        length?: number;\n        position?: number;\n        encoding?: string;\n    }): number;\n    \n    read(buffer: ArrayBuffer, options?: {\n        position?: number;\n        offset?: number;\n        length?: number;\n    }): Promise<ReadOut>;\n    read(buffer: ArrayBuffer, callback: AsyncCallback<ReadOut>): void;\n    read(buffer: ArrayBuffer, options: {\n        position?: number;\n        offset?: number;\n        length?: number;\n    }, callback: AsyncCallback<ReadOut>): void;\n    \n    readSync(buffer: ArrayBuffer, options?: {\n        position?: number;\n        offset?: number;\n        length?: number;\n    }): number;\n}", "api_method_name": "Stream", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 189, "since": 6, "api_used": "\u662f", "lines": ["FileIO_stream_CreateStreamSync_1700\n   * @tc.n", "FileIO_stream_CreateStreamSync_2200\n   * @tc.n", "t ss = fileio.createStreamSync(fpath, 'ab+');\n", "t ss = fileio.createStreamSync(fpath, 'rb');\n ", "\n      fileio.createStreamSync(fpath, 'r+');\n ", "FileIO_stream_CreateStreamSync_2300\n   * @tc.n", "t ss = fileio.createStreamSync(fpath, 'ab');\n ", "\n      fileio.createStreamSync(fpath, 'rb');\n ", "FileIO_stream_CreateStreamSync_2400\n   * @tc.n", "describe('fileIOTestStream', function () {\n\n  ", "FileIO_stream_CreateStreamSync_2500\n   * @tc.n", "t ss = fileio.createStreamSync(fpath, 'a');\n  ", "y {\n    ss = fileio.Stream.createStreamSync(fp", "t ss = fileio.createStreamSync(fpath, 'r');\n  ", "\n      fileio.createStreamSync('', 'r');\n     ", "t ss = fileio.createStreamSync(fpath, 'a+');\n ", "t ss = fileio.createStreamSync(fpath, 'w+');\n ", "t ss = fileio.createStreamSync(fpath, 'wb');\n ", "FileIO_stream_CreateStreamSync_1900\n   * @tc.n", "FileIO_stream_CreateStreamSync_1500\n   * @tc.n", "\n      fileio.createStreamSync(fpath, '');\n   ", "FileIO_stream_CreateStreamSync_2100\n   * @tc.n", "fileio.Stream.createStreamSync(fpath, 'r+')\n  ", "FileIO_stream_CreateStreamSync_1800\n   * @tc.n", "FileIO_stream_CreateStreamSync_2000\n   * @tc.n", "t ss = fileio.createStreamSync(fpath, 'wb+');\n", "t ss = fileio.createStreamSync(fpath, 'w');\n  ", "\n      fileio.createStreamSync(fpath, 'r');\n  ", "t ss = fileio.createStreamSync(fpath, 'r+');\n ", "\n      fileio.createStreamSync(fpath, 'rb+');\n", "FileIO_stream_CreateStreamSync_1600\n   * @tc.n", "  ss = fileio.createStreamSync(fpath, 'r');\n  ", "t ss = fileio.createStreamSync(fpath, 'rb+');\n"], "files": ["FileIOError.test.js", "List.test.js", "createStream.test.js", "write.test.js", "all.test.js", "fdopenStream.test.js", "read.test.js", "FileIOStream.test.js", "close.test.js", "flush.test.js", "Common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "close", "api_method_all": "close(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "close", "api_method_all": "close(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 490, "since": 6, "api_used": "\u662f", "lines": [" len)\n    expect(ss.closeSync() !== null).assertTrue()\n    return", ", 0o777)\n    fileio.closeSync(fd)\n    return true\n  }\n  catch (e)", "      expect(fileio.closeSync(fd2) !== null).assertTrue();\n      ", "      expect(fileio.closeSync(fd) == null).assertTrue();\n      ex", "t('fileio_test_open_close_sync_000', 0, async function () {\n    l", "e('fileio_test_open_close_sync_000');\n    try {\n      let fd = fi", ", 0o777)\n    fileio.closeSync(fd)\n    return true\n  } \n  catch (e", ");\n    }\n    fileio.closeSync(fd);\n    setTimeout(\n      function", "      expect(fileio.closeSync(fd) !== null).assertTrue();\n      e", "();\n      expect(ss.closeSync() !== null).assertTrue();\n      exp", "Sync(fd)\n    fileio.closeSync(fd)\n    return true\n  } \n  catch (e", "g('fileio_test_open_close_sync_000 has failed for ' + e);\n      e", " + e)\n    expect(ss.closeSync() !== null).assertTrue()\n    return", "Sync(fd)\n    fileio.closeSync(fd)\n    return true\n  }\n  catch (e)"], "files": ["List.test.js", "FileIODirent.test.js", "open_close.test.js", "fsync.test.js", "createWatcher.test.js", "Common.js", "FileIO.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "fstat.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "FileIOError.test.js", "access.test.js", "lseek.test.js", "opendir_close.test.js", "fdopenStream.test.js", "all.test.js", "write.test.js", "fchown.test.js", "fdatasync.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "close.test.js", "flush.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "closeSync", "api_method_all": "closeSync(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 407, "since": 6, "api_used": "\u662f", "lines": [" + e)\n    expect(ss.closeSync() !== null).assertT", "      expect(fileio.closeSync(fd) == null).assert", " len)\n    expect(ss.closeSync() !== null).assertT", "Sync(fd)\n    fileio.closeSync(fd)\n    return true", ");\n    }\n    fileio.closeSync(fd);\n    setTimeout", "      expect(fileio.closeSync(fd2) !== null).asse", ", 0o777)\n    fileio.closeSync(fd)\n    return true", "      expect(fileio.closeSync(fd) !== null).asser", "();\n      expect(ss.closeSync() !== null).assertT"], "files": ["FileIODirent.test.js", "open_close.test.js", "fsync.test.js", "createWatcher.test.js", "Common.js", "FileIO.test.js", "createStream.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "fchmod.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "fstat.test.js", "ftruncate.test.js", "posix_fallocate.test.js", "FileIOError.test.js", "access.test.js", "lseek.test.js", "opendir_close.test.js", "fdopenStream.test.js", "all.test.js", "write.test.js", "fchown.test.js", "fdatasync.test.js", "truncate.test.js", "read.test.js", "stat.test.js", "close.test.js", "flush.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "flush", "api_method_all": "flush(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ertTrue();\n      ss.flush().then(\n        function (err) {\n      "], "files": ["flush.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "flush", "api_method_all": "flush(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": ["ertTrue();\n      ss.flush(function (err) {\n        expect(ss.clos", "'fileio_test_stream_flush_async_000 has failed for ' + e);\n      ", "'fileio_test_stream_flush_sync_001', 0, async function () {\n    l", "'fileio_test_stream_flush_sync_000', 0, async function () {\n    l", "'fileio_test_stream_flush_async_001', 0, async function (done) {\n", "sc Function of API, flushSync.\n   */\n  it('fileio_test_stream_flu", " fileio_test_stream_flush_sync_001\n   * @tc.desc Function of API,", "'fileio_test_stream_flush_async_001 has failed for ' + e);\n      ", "'fileio_test_stream_flush_sync_000 has failed for ' + e);\n      e", "'fileio_test_stream_flush_sync_000');\n    expect(prepareFile(fpat", "();\n      expect(ss.flushSync() == null).assertTrue();\n      expe", "'fileio_test_stream_flush_sync_001');\n    expect(prepareFile(fpat", " fileio_test_stream_flush_sync_000\n   * @tc.desc Function of API,", "ertTrue();\n      ss.flushSync();\n      expect(null).assertFail();", "'fileio_test_stream_flush_async_001');\n    expect(prepareFile(fpa", "'fileio_test_stream_flush_async_000', 0, async function (done) {\n", "();\n      expect(ss.flushSync() !== null).assertTrue();\n      exp", "'fileio_test_stream_flush_async_000');\n    expect(prepareFile(fpa", "fileio/class_stream/flush.test.js');\nrequire('./module_fileio/cla", "'fileio_test_stream_flush_sync_001 has failed for ' + e);\n      e"], "files": ["flush.test.js", "List.test.js", "FileIOStream.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "flushSync", "api_method_all": "flushSync(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["();\n      expect(ss.flushSync() !== null).assertT", "();\n      expect(ss.flushSync() == null).assertTr", "ertTrue();\n      ss.flushSync();\n      expect(nul", "sc Function of API, flushSync.\n   */\n  it('fileio"], "files": ["flush.test.js", "FileIOStream.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "write", "api_method_all": "write(buffer: ArrayBuffer | string, options?: {\n        offset?: number;\n        length?: number;\n        position?: number;\n        encoding?: string;\n    }): Promise<number>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "write", "api_method_all": "write(buffer: ArrayBuffer | string, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 670, "since": 6, "api_used": "\u662f", "lines": ["n (done) {\n    file.writeText({\n      uri: 'internal://app../file", "istributedfile/File_writeArrayBuffer_011'\n    });\n    setTimeout(", "  console.log('File_writeText_012 mkdir success');\n        done()", "test_error_002 call writeText fail, code: ' + code + ', data: ' +", "n (done) {\n    file.writeText({\n      uri: 'internal://app/file_t", "  console.log('File_writeText_012 call readText callback fail, co", "e_readText_008 call writeText callback fail, code: ' + code + ', ", "  console.log('File_writeText_012  call delete callback fail, cod", "ray_buffer_010 call writeArrayBuffer success.');\n        done();\n", "  console.log('File_writeArrayBuffer_011 readArrayBuffer: call su", " });\n\n  \n  it('File_writeArrayBuffer_011', 0, async function (don", "e_readText_008 call writeText success.');\n        done();\n      }", "test_error_003 call writeArrayBuffer success.');\n        expect(n", "n (done) {\n    file.writeText({\n      uri: 'internal://cache/../.", "test_error_003 call writeArrayBuffer fail, code: ' + code + ', da", "test_error_011 call writeText success.');\n        expect(null).as", "  console.log('File_writeArrayBuffer_011 call writeArrayBuffer su", " 32, 33]);\n    file.writeArrayBuffer({\n      uri: 'internal://app", "test_error_002 call writeText success.');\n        expect(null).as", "test_error_011 call writeText fail, code: ' + code + ', data: ' +", "istributedfile/File_writeText_012',\n      text: 'sawyerwang',\n   ", "Sync(fd)\n    fileio.writeSync(fd, content)\n    fileio.fsyncSync(f", "istributedfile/File_writeText_012',\n      success: function () {\n", "n (done) {\n    file.writeText({\n      uri: 'internal://app/../../", "      expect(fileio.writeSync(fd, FILE_CONTENT) !== null).assertT", " 32, 33]);\n    file.writeArrayBuffer({\n      uri: 'internal://cac", "istributedfile/File_writeArrayBuffer_011',\n      buffer: buf,\n   ", " });\n\n  \n  it('File_writeText_012', 0, async function (done) {\n  ", "  console.log('File_writeText_012 , code: ' + code + ', data: ' +", "istributedfile/File_writeText_012',\n      success: function (data", "test_error_012 call writeText fail, code: ' + code + ', data: ' +", "rrayBuffer_011 call writeArrayBuffer success.');\n        done();\n", "test_error_012 call writeText success.');\n        done();\n      }", "},\n    });\n    file.writeText({\n      uri: 'internal://cache/../.", "  console.log('File_writeArrayBuffer_011 readArrayBuffer , code: ", "rue();\n      fileio.writeSync(fd, FILE_CONTENT, {\n        encodin", "istributedfile/File_writeArrayBuffer_011',\n      success: functio", "  console.log('File_writeText_012 => call readText pass, ' + data", "   let wri = fileio.writeSync(fd, FILE_CONTENT, {\n        encodin", "  console.log('File_writeArrayBuffer_011 , code: ' + code + ', da", "  console.log('File_writeText_012 delete success');\n        done("], "files": ["FileIOError.test.js", "List.test.js", "createStream.test.js", "File.test.js", "write.test.js", "all.test.js", "FileVirtualPath.test.js", "stat.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "FileError.test.js", "createWatcher.test.js", "flush.test.js", "fstat.test.js", "Common.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "write", "api_method_all": "write(buffer: ArrayBuffer | string, options: {\n        offset?: number;\n        length?: number;\n        position?: number;\n        encoding?: string;\n    }, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 670, "since": 6, "api_used": "\u662f", "lines": ["n (done) {\n    file.writeText({\n      uri: 'internal://app../file", "istributedfile/File_writeArrayBuffer_011'\n    });\n    setTimeout(", "  console.log('File_writeText_012 mkdir success');\n        done()", "test_error_002 call writeText fail, code: ' + code + ', data: ' +", "n (done) {\n    file.writeText({\n      uri: 'internal://app/file_t", "  console.log('File_writeText_012 call readText callback fail, co", "e_readText_008 call writeText callback fail, code: ' + code + ', ", "  console.log('File_writeText_012  call delete callback fail, cod", "ray_buffer_010 call writeArrayBuffer success.');\n        done();\n", "  console.log('File_writeArrayBuffer_011 readArrayBuffer: call su", " });\n\n  \n  it('File_writeArrayBuffer_011', 0, async function (don", "e_readText_008 call writeText success.');\n        done();\n      }", "test_error_003 call writeArrayBuffer success.');\n        expect(n", "n (done) {\n    file.writeText({\n      uri: 'internal://cache/../.", "test_error_003 call writeArrayBuffer fail, code: ' + code + ', da", "test_error_011 call writeText success.');\n        expect(null).as", "  console.log('File_writeArrayBuffer_011 call writeArrayBuffer su", " 32, 33]);\n    file.writeArrayBuffer({\n      uri: 'internal://app", "test_error_002 call writeText success.');\n        expect(null).as", "test_error_011 call writeText fail, code: ' + code + ', data: ' +", "istributedfile/File_writeText_012',\n      text: 'sawyerwang',\n   ", "Sync(fd)\n    fileio.writeSync(fd, content)\n    fileio.fsyncSync(f", "istributedfile/File_writeText_012',\n      success: function () {\n", "n (done) {\n    file.writeText({\n      uri: 'internal://app/../../", "      expect(fileio.writeSync(fd, FILE_CONTENT) !== null).assertT", " 32, 33]);\n    file.writeArrayBuffer({\n      uri: 'internal://cac", "istributedfile/File_writeArrayBuffer_011',\n      buffer: buf,\n   ", " });\n\n  \n  it('File_writeText_012', 0, async function (done) {\n  ", "  console.log('File_writeText_012 , code: ' + code + ', data: ' +", "istributedfile/File_writeText_012',\n      success: function (data", "test_error_012 call writeText fail, code: ' + code + ', data: ' +", "rrayBuffer_011 call writeArrayBuffer success.');\n        done();\n", "test_error_012 call writeText success.');\n        done();\n      }", "},\n    });\n    file.writeText({\n      uri: 'internal://cache/../.", "  console.log('File_writeArrayBuffer_011 readArrayBuffer , code: ", "rue();\n      fileio.writeSync(fd, FILE_CONTENT, {\n        encodin", "istributedfile/File_writeArrayBuffer_011',\n      success: functio", "  console.log('File_writeText_012 => call readText pass, ' + data", "   let wri = fileio.writeSync(fd, FILE_CONTENT, {\n        encodin", "  console.log('File_writeArrayBuffer_011 , code: ' + code + ', da", "  console.log('File_writeText_012 delete success');\n        done("], "files": ["FileIOError.test.js", "List.test.js", "createStream.test.js", "File.test.js", "write.test.js", "all.test.js", "FileVirtualPath.test.js", "stat.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "FileError.test.js", "createWatcher.test.js", "flush.test.js", "fstat.test.js", "Common.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "writeSync", "api_method_all": "writeSync(buffer: ArrayBuffer | string, options?: {\n        offset?: number;\n        length?: number;\n        position?: number;\n        encoding?: string;\n    }): number;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 88, "since": 6, "api_used": "\u662f", "lines": ["      let wlen = ss.writeSync(text);\n      expect", "sc Function of API, writeSync.\n   */\n  it('fileio", "rue();\n      fileio.writeSync(fd, FILE_CONTENT, {", "   let res = fileio.writeSync(fd, FILE_CONTENT, {", "      expect(fileio.writeSync(fd, FILE_CONTENT, {", "      expect(fileio.writeSync(fd, randomString(40", "   let wri = fileio.writeSync(fd, FILE_CONTENT, {", " console.log(fileio.writeSync(-1, FILE_CONTENT));", "();\n      expect(ss.writeSync(text) == text.lengt", "   let res = fileio.writeSync(fd, FILE_CONTENT);\n", "Sync(fd)\n    fileio.writeSync(fd, content)\n    fi", " try {\n      fileio.writeSync(fd, FILE_CONTENT, {", "();\n      expect(ss.writeSync(FILE_CONTENT, {\n   ", "      expect(fileio.writeSync(fd, FILE_CONTENT) !", "rue();\n      fileio.writeSync(fd, 'hello', {\n    ", "      expect(fileio.writeSync(fd, text, {\n       ", "   let wri = fileio.writeSync(fd, 'hello', {\n    ", " try {\n      fileio.writeSync(1, 1);\n      expect"], "files": ["FileIOError.test.js", "createStream.test.js", "write.test.js", "all.test.js", "stat.test.js", "lstat.test.js", "open.test.js", "FileIOStream.test.js", "fstat.test.js", "flush.test.js", "Common.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "read", "api_method_all": "read(buffer: ArrayBuffer, options?: {\n        position?: number;\n        offset?: number;\n        length?: number;\n    }): Promise<ReadOut>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "read", "api_method_all": "read(buffer: ArrayBuffer, callback: AsyncCallback<ReadOut>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 851, "since": 6, "api_used": "\u662f", "lines": ["test_error_012 call readText success.' + data.text);\n        exp", "_writeText_012 call readText callback fail, code: ' + code + ', ", "istributedfile/File_readText_008',\n      text: 'Text that just f", "},\n    });\n    file.readArrayBuffer({\n      uri: 'internal://cac", "  console.log('File_read_array_buffer_011 => pass, data.buffer: ", "  console.log('File_readText_008 call writeText success.');\n    ", "istributedfile/File_read_array_buffer_010',\n      buffer: buffer", " });\n\n  \n  it('File_readText_009', 0, async function (done) {\n  ", "n (done) {\n    file.readText({\n      uri: 'internal://app/file_t", "},\n    });\n    file.readText({\n      uri: 'internal://app/file_t", "n (done) {\n    file.readArrayBuffer({\n      uri: 'internal://cac", "riteArrayBuffer_011 readArrayBuffer , code: ' + code + ', data: ", "istributedfile/File_readText_008'\n    });\n    setTimeout(\n      ", "  console.log('File_readText_009 call readText callback fail, co", "},\n    });\n    file.readArrayBuffer({\n      uri: 'internal://app", "istributedfile/File_read_array_buffer_010',\n      position: 0,\n ", "test_error_012 call readText fail, code: ' + code + ', data: ' +", "rue();\n      fileio.readSync(fd, new ArrayBuffer(4096), {\n      ", "e_readText_009 call readText callback fail, code: ' + code + ', ", "iteText_012 => call readText pass, ' + data.text);\n        done(", " });\n\n  \n  it('File_read_array_buffer_011', 0, async function (d", "  console.log('File_readText_008 call readText callback fail, co", "test_error_006 call readArrayBuffer fail, code: ' + code + ', da", "istributedfile/File_readText_008',\n      success: function (data", "()\n    let len = ss.readSync(new ArrayBuffer(4096))\n    console.", "  console.log('File_read_array_buffer_010 call writeArrayBuffer ", "riteArrayBuffer_011 readArrayBuffer: call success' + data.buffer", "n (done) {\n    file.readArrayBuffer({\n      uri: 'internal://app", "  console.log('File_read_array_buffer_010 , code: ' + code + ', ", " });\n\n  \n  it('File_readText_008', 0, async function (done) {\n  ", "ray_buffer_010 call readArrayBuffer success. data.buffer:' + dat", "      let rlen = ss.readSync(new ArrayBuffer(209715200));\n      ", "  let rlen = fileio.readSync(fd, new ArrayBuffer(209715200));\n  ", "e_readText_008 call readText success. data.text:' + data.text);\n", "  console.log('File_readText_008 call writeText callback fail, c", "},\n    });\n    file.readText({\n      uri: 'internal://app/../../", "  console.log('File_read_array_buffer_011 , code: ' + code + ', ", " });\n\n  \n  it('File_read_array_buffer_010', 0, async function (d", "  console.log('File_read_array_buffer_010 call readArrayBuffer s", "e_readText_008 call readText callback fail, code: ' + code + ', ", "  console.log('File_readText_009 => pass, data.text:' + data.tex", "   let red = fileio.readSync(fd, new ArrayBuffer(4096), {\n      ", "n (done) {\n    file.readText({\n      uri: 'internal://app/../../", "  console.log('File_readText_008 call readText success. data.tex", "istributedfile/File_read_array_buffer_010'\n    });\n    setTimeou", "test_error_005 call readText fail, code: ' + code + ', data: ' +"], "files": ["List.test.js", "FileIODirent.test.js", "Common.js", "FileIO.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "open.test.js", "FileIOStream.test.js", "ftruncate.test.js", "FileIOError.test.js", "access.test.js", "File.test.js", "fdopenStream.test.js", "all.test.js", "truncate.test.js", "read.test.js", "close.test.js", "FileError.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "read", "api_method_all": "read(buffer: ArrayBuffer, options: {\n        position?: number;\n        offset?: number;\n        length?: number;\n    }, callback: AsyncCallback<ReadOut>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 851, "since": 6, "api_used": "\u662f", "lines": ["test_error_012 call readText success.' + data.text);\n        exp", "_writeText_012 call readText callback fail, code: ' + code + ', ", "istributedfile/File_readText_008',\n      text: 'Text that just f", "},\n    });\n    file.readArrayBuffer({\n      uri: 'internal://cac", "  console.log('File_read_array_buffer_011 => pass, data.buffer: ", "  console.log('File_readText_008 call writeText success.');\n    ", "istributedfile/File_read_array_buffer_010',\n      buffer: buffer", " });\n\n  \n  it('File_readText_009', 0, async function (done) {\n  ", "n (done) {\n    file.readText({\n      uri: 'internal://app/file_t", "},\n    });\n    file.readText({\n      uri: 'internal://app/file_t", "n (done) {\n    file.readArrayBuffer({\n      uri: 'internal://cac", "riteArrayBuffer_011 readArrayBuffer , code: ' + code + ', data: ", "istributedfile/File_readText_008'\n    });\n    setTimeout(\n      ", "  console.log('File_readText_009 call readText callback fail, co", "},\n    });\n    file.readArrayBuffer({\n      uri: 'internal://app", "istributedfile/File_read_array_buffer_010',\n      position: 0,\n ", "test_error_012 call readText fail, code: ' + code + ', data: ' +", "rue();\n      fileio.readSync(fd, new ArrayBuffer(4096), {\n      ", "e_readText_009 call readText callback fail, code: ' + code + ', ", "iteText_012 => call readText pass, ' + data.text);\n        done(", " });\n\n  \n  it('File_read_array_buffer_011', 0, async function (d", "  console.log('File_readText_008 call readText callback fail, co", "test_error_006 call readArrayBuffer fail, code: ' + code + ', da", "istributedfile/File_readText_008',\n      success: function (data", "()\n    let len = ss.readSync(new ArrayBuffer(4096))\n    console.", "  console.log('File_read_array_buffer_010 call writeArrayBuffer ", "riteArrayBuffer_011 readArrayBuffer: call success' + data.buffer", "n (done) {\n    file.readArrayBuffer({\n      uri: 'internal://app", "  console.log('File_read_array_buffer_010 , code: ' + code + ', ", " });\n\n  \n  it('File_readText_008', 0, async function (done) {\n  ", "ray_buffer_010 call readArrayBuffer success. data.buffer:' + dat", "      let rlen = ss.readSync(new ArrayBuffer(209715200));\n      ", "  let rlen = fileio.readSync(fd, new ArrayBuffer(209715200));\n  ", "e_readText_008 call readText success. data.text:' + data.text);\n", "  console.log('File_readText_008 call writeText callback fail, c", "},\n    });\n    file.readText({\n      uri: 'internal://app/../../", "  console.log('File_read_array_buffer_011 , code: ' + code + ', ", " });\n\n  \n  it('File_read_array_buffer_010', 0, async function (d", "  console.log('File_read_array_buffer_010 call readArrayBuffer s", "e_readText_008 call readText callback fail, code: ' + code + ', ", "  console.log('File_readText_009 => pass, data.text:' + data.tex", "   let red = fileio.readSync(fd, new ArrayBuffer(4096), {\n      ", "n (done) {\n    file.readText({\n      uri: 'internal://app/../../", "  console.log('File_readText_008 call readText success. data.tex", "istributedfile/File_read_array_buffer_010'\n    });\n    setTimeou", "test_error_005 call readText fail, code: ' + code + ', data: ' +"], "files": ["List.test.js", "FileIODirent.test.js", "Common.js", "FileIO.test.js", "FileVirtualPath.test.js", "FileIODir.test.js", "open.test.js", "FileIOStream.test.js", "ftruncate.test.js", "FileIOError.test.js", "access.test.js", "File.test.js", "fdopenStream.test.js", "all.test.js", "truncate.test.js", "read.test.js", "close.test.js", "FileError.test.js", "readtext.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stream", "api_method_name": "readSync", "api_method_all": "readSync(buffer: ArrayBuffer, options?: {\n        position?: number;\n        offset?: number;\n        length?: number;\n    }): number;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 149, "since": 6, "api_used": "\u662f", "lines": ["();\n      expect(dd.readSync() == null).assertTr", "{\n        expect(dd.readSync() !== null).assertT", " try {\n      fileio.readSync(-1, new ArrayBuffer", " 0o2);\n      fileio.readSync(fd, new ArrayBuffer", "rue();\n      fileio.readSync(fd, new ArrayBuffer", "();\n      expect(dd.readSync() !== null).assertT", "   let red = fileio.readSync(fd, new ArrayBuffer", "  }\n      expect(dd.readSync() == null).assertTr", "    let dirent = dd.readSync();\n      expect(dir", "  let rlen = fileio.readSync(fd1, new ArrayBuffe", "  let rlen = fileio.readSync(fd, new ArrayBuffer", "et bool = typeof(dd.readSync());\n          expec", "()\n    let len = ss.readSync(new ArrayBuffer(409", "   let ret = fileio.readSync(fd, new ArrayBuffer", "   let len = fileio.readSync(fd, new ArrayBuffer", "          expect(dd.readSync() !== null).assertT", "();\n      expect(dd.readSync(-1) == null).assert", "      let rlen = ss.readSync(new ArrayBuffer(209"], "files": ["ftruncate.test.js", "FileIOError.test.js", "fdopenStream.test.js", "all.test.js", "FileIODirent.test.js", "FileIODir.test.js", "read.test.js", "truncate.test.js", "FileIOStream.test.js", "Common.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ReadOut", "api_method_all": "declare interface ReadOut {\n    \n    bytesRead: number;\n    \n    offset: number;\n    \n    buffer: ArrayBuffer;\n}", "api_method_name": "ReadOut", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["sc Test readAsync() ReadOut.offset interfaces.\n"], "files": ["read.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ReadOut", "api_method_name": "bytesRead", "api_method_all": "bytesRead: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 6, "api_used": "\u662f", "lines": ["     expect(readout.bytesRead == 4).assertTrue();", "        expect(data.bytesRead == FILE_CONTENT.len", ");\n      expect(res.bytesRead == FILE_CONTENT.len", "         expect(res.bytesRead == FILE_CONTENT.len", "     expect(readout.bytesRead == FILE_CONTENT.len", "     expect(readout.bytesRead == 3).assertTrue();"], "files": ["fdopenStream.test.js", "open.test.js", "read.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ReadOut", "api_method_name": "offset", "api_method_all": "offset: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 92, "since": 7, "api_used": "\u662f", "lines": ["of API, length = 1, offset = 1.\n   */\n  it('fi", "er(4096), {\n        offset: -1\n     });\n      ", "sc Function of API, offset & length & position", "_CONTENT, {\n        offset: invalidOffset,\n   ", "er(4096), {\n        offset: invalidOffset,\n   ", "er(4096), {\n        offset: 1,\n        length:", "sc Function of API, offset = 1.\n   */\n  it('fi", "sc Function of API, offset.\n   */\n  it('fileio", "g: 'utf-8',\n        offset: 1,\n        length:", "ion of API, invalid offset.\n   */\n  it('fileio", "er(4096), {\n        offset: 1,\n      });\n     ", "_CONTENT, {\n        offset: 1,\n        length:", "osition: 1,\n        offset: 1,\n        length:", "sc Function of API, offset=1.\n   */\n  it('file", "osition: 0,\n        offset: 1,\n        length:", "unction of API, Set offset and length.\n   */\n ", "er(4096), {\n        offset: 1\n      });\n      ", "ion of API, invalid offset\n   */\n  it('fileio_", "fd, text, {\n        offset: 1,\n      }) == tex", "er(bufLen), {\n      offset: 1,\n      });\n     "], "files": ["filemanager.test.js", "write.test.js", "all.test.js", "read.test.js", "open.test.js", "FileIOStream.test.js", "FileIO.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ReadOut", "api_method_name": "buffer", "api_method_all": "buffer: ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 129, "since": 6, "api_used": "\u662f", "lines": ["it('File_read_array_buffer_010', 0, async func", "yBuffer_003',\n      buffer: buf,\n      append:", " new Uint8Array(res.buffer))) == FILE_CONTENT)", "og('File_read_array_buffer_011 , code: ' + cod", "     expect(readout.buffer.byteLength == 4096)", "og('File_read_array_buffer_010 call writeArray", "yBuffer_002',\n      buffer: buf,\n      success", " @tc.desc Write the buffer content to file.(ca", "ile/File_read_array_buffer_010'\n    });\n    se", "_buffer_010',\n      buffer: buffer,\n      succ", "_test_error',\n      buffer: buf,\n      success", "s, Content:' + data.buffer);\n        expect(nu", "yBuffer_005',\n      buffer: buf,\n      success", "     uri: '',\n      buffer: buf,\n      success", "ile/File_read_array_buffer_010',\n      buffer:", "yBuffer_006',\n      buffer: buf,\n      success", "og('File_read_array_buffer_010 call readArrayB", "ta.buffer: ' + data.buffer);\n        done();\n ", "all success' + data.buffer);\n        done();\n ", "on (done) {\n    var buffer = new Uint8Array([4", "yBuffer_009',\n      buffer: buf,\n      success", "010',\n      buffer: buffer,\n      success: fun", "yBuffer_010',\n      buffer: buf,\n      append:", "yBuffer_011',\n      buffer: buf,\n      append:", "yBuffer_001',\n      buffer: buf,\n      append:", "ata.buffer:' + data.buffer);\n        done();\n ", "r_011 => pass, data.buffer: ' + data.buffer);\n", "og('File_read_array_buffer_010 , code: ' + cod", "yBuffer_012',\n      buffer: buf,\n      append:", "yBuffer_003',\n      buffer: buf,\n      success", "yBuffer_004',\n      buffer: buf,\n      append:", "og('File_read_array_buffer_011 => pass, data.b", "yBuffer_008',\n      buffer: buf,\n      success", "uffer success. data.buffer:' + data.buffer);\n ", "it('File_read_array_buffer_011', 0, async func", "AGE_File_read_array_buffer_0100\n   * @tc.name ", "ile/File_read_array_buffer_010',\n      positio", "yBuffer_005',\n      buffer: buf,\n      positio"], "files": ["File.test.js", "FileVirtualPath.test.js", "read.test.js", "open.test.js", "FileError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Watcher", "api_method_all": "declare interface Watcher {\n    \n    stop(): Promise<void>;\n    stop(callback: AsyncCallback<void>): void;\n}", "api_method_name": "Watcher", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 41, "since": 6, "api_used": "\u662f", "lines": ["('fileio_test_createWatcher_008 has failed for ", "('fileio_test_createWatcher_007 has failed for ", "cribe('fileio_createWatcher', function () {\n\n  ", "('fileio_test_createWatcher_async_002', 0, asyn", " await fileio.createWatcher(fpath, event, funct", "('fileio_test_createWatcher_async_006 flag is' ", "('fileio_test_createWatcher_async_001', 0, asyn", "('fileio_test_createWatcher_002 has failed for ", "('fileio_test_createWatcher_async_006');\n    ex", "class_watcher/createWatcher.test.js');\nrequire(", "('fileio_test_createWatcher_async_007', 0, asyn", "('fileio_test_createWatcher_async_000', 0, asyn", "('fileio_test_createWatcher_async_004', 0, asyn", "('fileio_test_createWatcher_async_002');\n    ex", "('fileio_test_createWatcher_async_006', 0, asyn", "('fileio_test_createWatcher_async_004');\n    ex", "('fileio_test_createWatcher_000 has failed for ", "('fileio_test_createWatcher_async_008', 0, asyn", "('fileio_test_createWatcher_async_007 flag is '", "('fileio_test_createWatcher_001 has failed for ", "('fileio_test_createWatcher_003 has failed for ", "('fileio_test_createWatcher_async_005');\n    ex", "('fileio_test_createWatcher_async_007');\n    ex", "('fileio_test_createWatcher_006 has failed for ", "('fileio_test_createWatcher_async_005', 0, asyn", "('fileio_test_createWatcher_async_003', 0, asyn", "('fileio_test_createWatcher_async_005 flag is '", "('fileio_test_createWatcher_async_000');\n    ex", "('fileio_test_createWatcher_004 has failed for ", "('fileio_test_createWatcher_async_001');\n    ex", "('fileio_test_createWatcher_async_003');\n    ex", "('fileio_test_createWatcher_005 has failed for "], "files": ["List.test.js", "createWatcher.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Watcher", "api_method_name": "stop", "api_method_all": "stop(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Watcher", "api_method_name": "stop", "api_method_all": "stop(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["r, after);\n      ob.stop(function () {\n        expect(flag == 3)", "tTrue();\n        ob.stopSync();\n        expect(fileio.unlinkSync", "er);\n      await ob.stop();\n      console.log('fileio_test_creat", "e(fd, ss);\n      ob.stopSync();\n      expect(flag == 1).assertTr", "e(fd, ss);\n      ob.stop(function () {\n        expect(flag == 4)", "ion () {\n        ob.stopSync();\n        console.log('fileio_test", "ss);\n      await ob.stop();\n      console.log('fileio_test_creat", ");\n        await ob.stop();\n        expect(fileio.unlinkSync(aft"], "files": ["createWatcher.test.js"], "is_white": " ", "desc": " "}]}