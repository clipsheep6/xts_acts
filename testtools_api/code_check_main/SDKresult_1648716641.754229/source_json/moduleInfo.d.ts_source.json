{"subsystem_ch": "\u5305\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "appexecfwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\bundle\\moduleInfo", "api": [{"api_class_name": "ModuleInfo", "api_method_all": "export interface ModuleInfo {\r\n  \r\n  readonly moduleName: string;\r\n\r\n  \r\n  readonly moduleSourceDir: string;\r\n}", "api_method_name": "ModuleInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 91, "since": 7, "api_used": "\u662f", "lines": [" \n    it('bms_getHapModuleInfo_0100', 0, async fun", "          expect(hapModuleInfo.reqCapabilities[i])", "          expect(hapModuleInfo.name).assertEqual('", "let i = 0, len = hapModuleInfo.reqCapabilities.len", " \n    it('bms_getHapModuleInfo_0200', 0, async fun", "+ JSON.stringify(hapModuleInfo.deviceTypes));\n    ", "      if (result.hapModuleInfos.length > 0) {\n    ", "          expect(hapModuleInfo.iconId).assertEqual", "          expect(hapModuleInfo.supportedModes).ass", "   expect(result.hapModuleInfos[1].mainAbilityName", "          expect(hapModuleInfo.backgroundImg).asse", "   expect(typeof hapModuleInfo.abilityInfo).assert", "console.info('===hapModuleInfo.abilityInfo===' + J", "   expect(result.hapModuleInfos[0].mainAbilityName", "          expect(hapModuleInfo.description).assert", "          expect(hapModuleInfo.moduleName).assertE", "   expect(result.hapModuleInfos[1].moduleName).ass", "oduleInfo(result.hapModuleInfos[1]);\n             ", "   expect(result.hapModuleInfos.length).assertEqua", "          expect(hapModuleInfo.icon).assertEqual('", "          expect(hapModuleInfo.label).assertEqual(", "          expect(hapModuleInfo.installationFree).a", "    title: 'Test HapModuleInfo'\n    },\n    onInit(", "====begin bms_getHapModuleInfo_0300===========')\n ", "          expect(hapModuleInfo.labelId).assertEqua", "====begin bms_getHapModuleInfo_0100===========')\n ", "             let hapModuleInfo = result.hapModuleI", "          expect(hapModuleInfo.descriptionId).asse", "   expect(typeof hapModuleInfo.reqCapabilities).as", "          expect(hapModuleInfo.deviceTypes[0]).ass", "          expect(hapModuleInfo.mainAbilityName).as", "====begin bms_getHapModuleInfo_0200===========')\n ", "   expect(result.hapModuleInfos[0].moduleName).ass", "is.title = 'Test HapModuleInfo';\n    },\n    onShow", "          expect(hapModuleInfo.abilityInfo[j].name", "+ JSON.stringify(hapModuleInfo.reqCapabilities));\n", "console.info('===hapModuleInfo devicetypes===' + J", " \n    it('bms_getHapModuleInfo_0300', 0, async fun", "oduleInfo(result.hapModuleInfos[0]);\n             ", "      if (result.hapModuleInfos.length == 2) {\n   ", "   console.info('hapModuleInfo.reqCapabilities' + ", "            checkHapModuleInfo(result.hapModuleInf", "          expect(hapModuleInfo.mainElementName).as", "+ JSON.stringify(hapModuleInfo.abilityInfo));\n    ", "uleInfo = result.hapModuleInfos[0];\n              ", "let j = 0, len = hapModuleInfo.abilityInfo.length;"], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ModuleInfo", "api_method_name": "moduleName", "api_method_all": "readonly moduleName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 49, "since": 7, "api_used": "\u662f", "lines": ["info.moduleInfos[s].moduleName).assertEqual(\"entry", "info.moduleInfos[j].moduleName).assertEqual(\"entry", "data.moduleInfos[0].moduleName).assertEqual('entry", "nfo.abilityInfos[j].moduleName).assertEqual(\"entry", "Info.moduleInfos[s].moduleName).assertEqual(\"entry", "o[i].moduleInfos[j].moduleName.length).assertLarge", "    expect(dataInfo.moduleName).assertEqual('entry", ";\n      expect(data.moduleName).assertEqual(\"entry", "a[i].moduleInfos[0].moduleName).assertEqual('entry", "xpect(hapModuleInfo.moduleName).assertEqual('entry", "Info.moduleInfos[j].moduleName).assertEqual(\"entry", "    expect(datainfo.moduleName).assertEqual(\"entry", "=======' + dataInfo.moduleName);\n        console.i", "t.hapModuleInfos[0].moduleName).assertEqual('entry", "t.hapModuleInfos[1].moduleName).assertEqual('bmsma", "expect(typeof (data.moduleName)).assertEqual(\"stri", "ect(typeof dataInfo.moduleName).assertEqual('strin"], "files": ["ActsBmsHapModuleTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets", "ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ModuleInfo", "api_method_name": "moduleSourceDir", "api_method_all": "readonly moduleSourceDir: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 35, "since": 0, "api_used": "\u662f", "lines": ["(Array.isArray(info.moduleSourceDirs)).assertEqual(true", "info.moduleInfos[j].moduleSourceDir).assertEqual(DIR1)\n", ";\n      expect(info.moduleSourceDirs[0]).assertEqual(\"/", "Info.moduleInfos[j].moduleSourceDir).assertEqual(DIR1)\n", "ray.isArray(data[i].moduleSourceDirs)).assertEqual(true", " expect(datainfo[i].moduleSourceDirs.length).assertLarg", "data.moduleInfos[0].moduleSourceDir).assertEqual('/data", "     expect(data[i].moduleSourceDirs[0]).assertEqual('/", "(Array.isArray(data.moduleSourceDirs)).assertEqual(true", "o[i].moduleInfos[j].moduleSourceDir.length).assertLarge", "Info.moduleInfos[j].moduleSourceDir).assertEqual(DIR2)\n", ";\n      expect(data.moduleSourceDirs[0]).assertEqual('/", "(bundleInfo.appInfo.moduleSourceDirs.length).assertEqua", "info.moduleInfos[j].moduleSourceDir.length).assertLarge", "    expect(datainfo.moduleSourceDirs.length).assertLarg", "a[i].moduleInfos[0].moduleSourceDir).assertEqual('/data"], "files": ["getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}]}