{"subsystem_ch": "\u6cdbSensor\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "sensors", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.sensor", "api": [{"api_class_name": "sensor", "api_method_all": "declare namespace sensor {\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER, callback: Callback<AccelerometerResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED, callback: Callback<AccelerometerUncalibratedResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_AMBIENT_LIGHT, callback: Callback<LightResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_AMBIENT_TEMPERATURE, callback: Callback<AmbientTemperatureResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_BAROMETER, callback: Callback<BarometerResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_GRAVITY, callback: Callback<GravityResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE, callback: Callback<GyroscopeResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, callback: Callback<GyroscopeUncalibratedResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_HALL, callback: Callback<HallResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_HEART_RATE, callback: Callback<HeartRateResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_HUMIDITY, callback: Callback<HumidityResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_LINEAR_ACCELERATION, callback: Callback<LinearAccelerometerResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD, callback: Callback<MagneticFieldResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, callback: Callback<MagneticFieldUncalibratedResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_ORIENTATION, callback: Callback<OrientationResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_PEDOMETER, callback: Callback<PedometerResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, callback: Callback<PedometerDetectionResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_PROXIMITY, callback: Callback<ProximityResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_ROTATION_VECTOR, callback: Callback<RotationVectorResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_SIGNIFICANT_MOTION, callback: Callback<SignificantMotionResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function on(type: SensorType.SENSOR_TYPE_ID_WEAR_DETECTION, callback: Callback<WearDetectionResponse>,\r\n        options?: Options): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER, callback: Callback<AccelerometerResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED, callback: Callback<AccelerometerUncalibratedResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_AMBIENT_LIGHT, callback: Callback<LightResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_AMBIENT_TEMPERATURE, callback: Callback<AmbientTemperatureResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_BAROMETER, callback: Callback<BarometerResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_GRAVITY, callback: Callback<GravityResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE, callback: Callback<GyroscopeResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, callback: Callback<GyroscopeUncalibratedResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_HALL, callback: Callback<HallResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_HEART_RATE, callback: Callback<HeartRateResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_HUMIDITY, callback: Callback<HumidityResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_LINEAR_ACCELERATION, callback: Callback<LinearAccelerometerResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD, callback: Callback<MagneticFieldResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, callback: Callback<MagneticFieldUncalibratedResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_ORIENTATION, callback: Callback<OrientationResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_PEDOMETER, callback: Callback<PedometerResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, callback: Callback<PedometerDetectionResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_PROXIMITY, callback: Callback<ProximityResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_ROTATION_VECTOR, callback: Callback<RotationVectorResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_SIGNIFICANT_MOTION, callback: Callback<SignificantMotionResponse>): void;\r\n\r\n    \r\n    function once(type: SensorType.SENSOR_TYPE_ID_WEAR_DETECTION, callback: Callback<WearDetectionResponse>): void;\r\n\r\n    \r\n     function off(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER, callback?: Callback<AccelerometerResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED,\r\n        callback?: Callback<AccelerometerUncalibratedResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_AMBIENT_LIGHT, callback?: Callback<LightResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_AMBIENT_TEMPERATURE, callback?: Callback<AmbientTemperatureResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_BAROMETER, callback?: Callback<BarometerResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_GRAVITY, callback?: Callback<GravityResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE, callback?: Callback<GyroscopeResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, callback?: Callback<GyroscopeUncalibratedResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_HALL, callback?: Callback<HallResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_HEART_RATE, callback?: Callback<HeartRateResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_HUMIDITY, callback?: Callback<HumidityResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_LINEAR_ACCELERATION, callback?: Callback<LinearAccelerometerResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD, callback?: Callback<MagneticFieldResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, callback?: Callback<MagneticFieldUncalibratedResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_ORIENTATION, callback?: Callback<OrientationResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_PEDOMETER, callback?: Callback<PedometerResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, callback?: Callback<PedometerDetectionResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_PROXIMITY, callback?: Callback<ProximityResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_ROTATION_VECTOR, callback?: Callback<RotationVectorResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_SIGNIFICANT_MOTION, callback?: Callback<SignificantMotionResponse>): void;\r\n\r\n    \r\n    function off(type: SensorType.SENSOR_TYPE_ID_WEAR_DETECTION, callback?: Callback<WearDetectionResponse>): void;\r\n\r\n    \r\n    interface LocationOptions {\r\n        latitude: number;\r\n        longitude: number;\r\n        altitude: number;\r\n    }\r\n\r\n    \r\n    interface GeomagneticResponse {\r\n        x: number;\r\n        y: number;\r\n        z: number;\r\n        geomagneticDip: number;\r\n        deflectionAngle: number;\r\n        levelIntensity: number;\r\n        totalIntensity: number;\r\n    }\r\n\r\n   \r\n    function getGeomagneticField(locationOptions: LocationOptions, timeMillis: number, callback: AsyncCallback<GeomagneticResponse>): void;\r\n    function getGeomagneticField(locationOptions: LocationOptions, timeMillis: number): Promise<GeomagneticResponse>;\r\n\r\n   \r\n    function getAltitude(seaPressure: number, currentPressure: number, callback: AsyncCallback<number>): void;\r\n    function getAltitude(seaPressure: number, currentPressure: number): Promise<number>;\r\n\r\n    \r\n    function getGeomagneticDip(inclinationMatrix: Array<number>, callback: AsyncCallback<number>): void;\r\n    function getGeomagneticDip(inclinationMatrix: Array<number>): Promise<number>;\r\n\r\n    \r\n    function getAngleModify(currentRotationMatrix: Array<number>, preRotationMatrix: Array<number>,\r\n        callback: AsyncCallback<Array<number>>): void;\r\n    function getAngleModify(currentRotationMatrix: Array<number>, preRotationMatrix: Array<number>): Promise<Array<number>>;\r\n\r\n    \r\n    function createRotationMatrix(rotationVector: Array<number>, callback: AsyncCallback<Array<number>>): void;\r\n    function createRotationMatrix(rotationVector: Array<number>): Promise<Array<number>>;\r\n\r\n    \r\n    interface CoordinatesOptions {\r\n        \r\n        x: number;\r\n        \r\n        y: number;\r\n    }\r\n\r\n    \r\n    function transformCoordinateSystem(inRotationVector: Array<number>, coordinates: CoordinatesOptions,\r\n        callback: AsyncCallback<Array<number>>): void;\r\n    function transformCoordinateSystem(inRotationVector: Array<number>, coordinates: CoordinatesOptions): Promise<Array<number>>;\r\n\r\n    \r\n    function createQuaternion(rotationVector: Array<number>, callback: AsyncCallback<Array<number>>): void;\r\n    function createQuaternion(rotationVector: Array<number>): Promise<Array<number>>;\r\n\r\n    \r\n    function getDirection(rotationMatrix: Array<number>, callback: AsyncCallback<Array<number>>): void;\r\n    function getDirection(rotationMatrix: Array<number>): Promise<Array<number>>;\r\n\r\n    \r\n    interface RotationMatrixResponse {\r\n        rotation: Array<number>;\r\n        inclination: Array<number>\r\n    }\r\n\r\n    \r\n    function createRotationMatrix(gravity: Array<number>, geomagnetic: Array<number>, callback: AsyncCallback<RotationMatrixResponse>): void;\r\n    function createRotationMatrix(gravity: Array<number>, geomagnetic: Array<number>,): Promise<RotationMatrixResponse>;\r\n\r\n    \r\n    interface Options {\r\n        interval?: number; \r\n    }\r\n\r\n    \r\n    enum SensorType {\r\n        SENSOR_TYPE_ID_ACCELEROMETER = 1,          \r\n        SENSOR_TYPE_ID_GYROSCOPE = 2,              \r\n        SENSOR_TYPE_ID_AMBIENT_LIGHT = 5,          \r\n        SENSOR_TYPE_ID_MAGNETIC_FIELD = 6,         \r\n        SENSOR_TYPE_ID_BAROMETER = 8,              \r\n        SENSOR_TYPE_ID_HALL = 10,                  \r\n        SENSOR_TYPE_ID_PROXIMITY = 12,             \r\n        SENSOR_TYPE_ID_HUMIDITY = 13,              \r\n        SENSOR_TYPE_ID_ORIENTATION = 256,          \r\n        SENSOR_TYPE_ID_GRAVITY = 257,              \r\n        SENSOR_TYPE_ID_LINEAR_ACCELERATION = 258,  \r\n        SENSOR_TYPE_ID_ROTATION_VECTOR = 259,      \r\n        SENSOR_TYPE_ID_AMBIENT_TEMPERATURE = 260,  \r\n        SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED = 261,  \r\n        SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED = 263,  \r\n        SENSOR_TYPE_ID_SIGNIFICANT_MOTION = 264,    \r\n        SENSOR_TYPE_ID_PEDOMETER_DETECTION = 265,   \r\n        SENSOR_TYPE_ID_PEDOMETER = 266,             \r\n        SENSOR_TYPE_ID_HEART_RATE = 278,            \r\n        SENSOR_TYPE_ID_WEAR_DETECTION = 280,        \r\n        SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED = 281,   \r\n    }\r\n\r\n    \r\n    interface Response {\r\n        timestamp: number; \r\n    }\r\n\r\n    \r\n    interface AccelerometerResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n    }\r\n\r\n    \r\n    interface LinearAccelerometerResponse extends Response{\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n    }\r\n\r\n    \r\n    interface AccelerometerUncalibratedResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n        biasX: number; \r\n        biasY: number; \r\n        biasZ: number; \r\n    }\r\n\r\n    \r\n    interface GravityResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n    }\r\n\r\n    \r\n    interface OrientationResponse extends Response {\r\n        alpha: number; \r\n        beta: number; \r\n        gamma: number; \r\n    }\r\n\r\n    \r\n    interface RotationVectorResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n        w: number; \r\n    }\r\n\r\n    \r\n    interface GyroscopeResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n    }\r\n\r\n    \r\n    interface GyroscopeUncalibratedResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n        biasX: number; \r\n        biasY: number; \r\n        biasZ: number; \r\n    }\r\n\r\n    \r\n    interface SignificantMotionResponse extends Response {\r\n        scalar: number; \r\n    }\r\n\r\n    \r\n    interface ProximityResponse extends Response {\r\n        distance: number; \r\n    }\r\n\r\n    \r\n    interface LightResponse extends Response {\r\n        intensity: number; \r\n    }\r\n\r\n    \r\n    interface HallResponse extends Response {\r\n        status: number; \r\n    }\r\n\r\n    \r\n    interface MagneticFieldResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n    }\r\n\r\n    \r\n    interface MagneticFieldUncalibratedResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n        biasX: number; \r\n        biasY: number; \r\n        biasZ: number; \r\n    }\r\n\r\n    \r\n    interface PedometerResponse extends Response {\r\n        steps: number; \r\n    }\r\n\r\n    \r\n    interface HumidityResponse extends Response {\r\n        humidity: number; \r\n    }\r\n\r\n    \r\n    interface PedometerDetectionResponse extends Response {\r\n        scalar: number; \r\n    }\r\n\r\n    \r\n    interface AmbientTemperatureResponse extends Response {\r\n        temperature: number; \r\n    }\r\n\r\n    \r\n    interface BarometerResponse extends Response {\r\n        pressure: number; \r\n    }\r\n\r\n    \r\n    interface HeartRateResponse extends Response {\r\n        heartRate: number; \r\n    }\r\n\r\n    \r\n    interface WearDetectionResponse extends Response {\r\n        value: number; \r\n    }\r\n }", "api_method_name": "sensor", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 354, "since": 0, "api_used": "\u662f", "lines": ["", "Test_084\");\n        sensor.getAngleModify([3.4", "090 start')\n        sensor.createQuaternion([0", "Test_082\");\n        sensor.getAngleModify([0.0", "98 start\");\n        sensor.createRotationMatri", " sensor from '@ohos.sensor'\n\nimport { describe", "092 start')\n        sensor.createQuaternion([0", "099 start')\n        sensor.createRotationMatri", "Test_083\");\n        sensor.getAngleModify([1, ", "Test_081\");\n        sensor.getAngleModify([3.4", "102 start')\n        sensor.getGeomagneticDip([", "095 start')\n        sensor.createQuaternion([0", "100 start')\n        sensor.createRotationMatri", "on (done) {\n        sensor.createRotationMatri", "101 start')\n        sensor.getGeomagneticDip([", "on (done) {\n        sensor.getAltitude(0, 100)", "--------\");\n        sensor.transformCoordinate", "Test_080\");\n        sensor.getAngleModify([1.1", "Test_087\");\n        sensor.getAngleModify([0.0", "094 start')\n        sensor.createQuaternion([0", "Test_079\");\n        sensor.getAngleModify([3.4", "41.2109375]\n        sensor.getGeomagneticField", "097 start')\n        sensor.createQuaternion([0", "103 start')\n        sensor.getAltitude(0, 100,", "on (done) {\n        sensor.getDirection([1, 2,", "088 start')\n        sensor.createQuaternion([0", "104 start')\n        sensor.getAltitude(5, 0, (", "= i\n                sensor.getGeomagneticField", "on (done) {\n        sensor.getAltitude(5, 0).t", "093 start')\n        sensor.createQuaternion([0", "091 start')\n        sensor.createQuaternion([-", "Test_076\");\n        sensor.getAngleModify([3.4", "on (done) {\n        sensor.getDirection(rotati", "Test_078\");\n        sensor.getAngleModify([1, ", "Test_085\");\n        sensor.getAngleModify([1.1", "096 start')\n        sensor.createQuaternion([-", "089 start')\n        sensor.createQuaternion([3"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER, callback: Callback<AccelerometerResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED, callback: Callback<AccelerometerUncalibratedResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_AMBIENT_LIGHT, callback: Callback<LightResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_AMBIENT_TEMPERATURE, callback: Callback<AmbientTemperatureResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_BAROMETER, callback: Callback<BarometerResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_GRAVITY, callback: Callback<GravityResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE, callback: Callback<GyroscopeResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, callback: Callback<GyroscopeUncalibratedResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_HALL, callback: Callback<HallResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_HEART_RATE, callback: Callback<HeartRateResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_HUMIDITY, callback: Callback<HumidityResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_LINEAR_ACCELERATION, callback: Callback<LinearAccelerometerResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD, callback: Callback<MagneticFieldResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, callback: Callback<MagneticFieldUncalibratedResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_ORIENTATION, callback: Callback<OrientationResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_PEDOMETER, callback: Callback<PedometerResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, callback: Callback<PedometerDetectionResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_PROXIMITY, callback: Callback<ProximityResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_ROTATION_VECTOR, callback: Callback<RotationVectorResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_SIGNIFICANT_MOTION, callback: Callback<SignificantMotionResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "on", "api_method_all": "function on(type: SensorType.SENSOR_TYPE_ID_WEAR_DETECTION, callback: Callback<WearDetectionResponse>,\r\n        options?: Options): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2564, "since": 8, "api_used": "\u662f", "lines": ["reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "xecute()\n    },\n    onReady() {\n    },\n}\n", "ne) {\n        function vibrateCallback(error) {\n            if", " {\n                console.info('VibratorJsTest003  vibrator e", "\n\n        \n        console.info('beforeEach caled')\n    })\n\n  ", "getDefaultService('config')\n        this.timeout = 5000\n      ", "\n\n        \n        console.info('afterEach caled')\n    })\n\n   ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", " {\n                console.info('VibratorJsTest003  vibrator s", "02\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onDestroy');\n    }\n};\n", " {\n                console.info('VibratorJsTest001  vibrator e", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", " {\n                console.info('VibratorJsTest001  vibrator s", "      console.info('onShow finish')\n        const core = Core.", "\n    afterAll(function () {\n\n        \n        console.info('af", " {\n                console.info('VibratorJsTest002  vibrator e", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "\n\n        \n        console.info('afterAll caled')\n    })\n\n    ", "01\", 0, async function (done) {\n        function vibrateCallba", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "    beforeAll(function () {\n\n        \n        console.info('be", "nfo('AceApplication onDestroy');\n    }\n};\n", " {\n                done();\n            }, 500);\n        }\n    ", "xport default {\n    onCreate() {\n        console.info('AceAppl", "\n\n        \n        console.info('beforeAll caled')\n    })\n\n   ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ratorJsTest\", function () {\n    beforeAll(function () {\n\n     ", "03\", 0, async function (done) {\n        function vibrateCallba", "out = 5000\n        configService.setConfig(this)\n\n        requ", " {\n                console.info('VibratorJsTest002  vibrator s", "re.init()\n\n        const configService = core.getDefaultServic", "0, async function (done) {\n        function vibrateCallback(er", "04\", 0, async function (done) {\n        function vibrateCallba", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "   beforeEach(function () {\n\n        \n        console.info('be", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "    afterEach(function () {\n\n        \n        console.info('af", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER, callback: Callback<AccelerometerResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED, callback: Callback<AccelerometerUncalibratedResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_AMBIENT_LIGHT, callback: Callback<LightResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_AMBIENT_TEMPERATURE, callback: Callback<AmbientTemperatureResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_BAROMETER, callback: Callback<BarometerResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_GRAVITY, callback: Callback<GravityResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE, callback: Callback<GyroscopeResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, callback: Callback<GyroscopeUncalibratedResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_HALL, callback: Callback<HallResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_HEART_RATE, callback: Callback<HeartRateResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_HUMIDITY, callback: Callback<HumidityResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_LINEAR_ACCELERATION, callback: Callback<LinearAccelerometerResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD, callback: Callback<MagneticFieldResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, callback: Callback<MagneticFieldUncalibratedResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_ORIENTATION, callback: Callback<OrientationResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_PEDOMETER, callback: Callback<PedometerResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, callback: Callback<PedometerDetectionResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_PROXIMITY, callback: Callback<ProximityResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_ROTATION_VECTOR, callback: Callback<RotationVectorResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_SIGNIFICANT_MOTION, callback: Callback<SignificantMotionResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "once", "api_method_all": "function once(type: SensorType.SENSOR_TYPE_ID_WEAR_DETECTION, callback: Callback<WearDetectionResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 160, "since": 8, "api_used": "\u662f", "lines": ["METER_UNCALIBRATED, onceSensorCallback);\n    })\n})\n", "ientLightJSTest016  once success data: ' + data.intensity);\n    ", "_TYPE_ID_BAROMETER, onceSensorCallback);\n    })\n})\n", "E_ID_ACCELEROMETER, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest024 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBIEN", " }\n        function oncePromise() {\n            return new Promi", "() {\n        sensor.once(5, function () { }, 5);\n        expect(", "             sensor.once(1, function (error, data) {\n           ", " {\n        function onceSensorCallback(error, data) {\n          ", "ientLightJSTest005  once success data: ' + data.intensity);\n    ", "orGravityJSTest005  once error');\n                expect(false).", "lerometerJSTest016  once success x: ' + data.x + \"y: \" \n        ", "lerometerJSTest005  once error');\n                expect(false).", "() {\n        sensor.once(1, function () { }, 5);\n        expect(", "   }\n        sensor.once(-1, onceSensorCallback);\n    })\n\n    \n ", "lerometerJSTest005  once success x: ' + data.x + \"y: \" \n        ", "ientLightJSTest011  once error');\n                expect(false).", "ensor.once(2000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "   }\n        sensor.once(1000000, onceSensorCallback);\n    })\n\n ", "ientLightJSTest005  once error');\n                expect(false).", "ientLightJSTest011  once success');\n                expect(true)", "ensor.once(1000000, onceSensorCallback);\n    })\n\n    /*\n     * @", "ientLightJSTest016  once error');\n                        expect", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "E_ID_AMBIENT_LIGHT, onceSensorCallback);\n    })\n\n    \n    it(\"SU", "cAlgorithmJSTest025 once success');\n                    expect(f", "lerometerJSTest011  once error');\n                expect(false).", "cAlgorithmJSTest016 once success');\n                    expect(f", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "BarometerJSTest005  once success pressure: ' + data.pressure);\n ", "BarometerJSTest005  once error');\n                expect(false).", "   }\n        sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BAROME", "   }\n        sensor.once(2000000, onceSensorCallback);\n    })\n\n ", "lerometerJSTest011  once success');\n                expect(true)", "             sensor.once(5, function (error, data) {\n           ", "alibratedJSTest002  once error');\n                expect(false).", "    sensor.once(-1, onceSensorCallback);\n    })\n\n    \n    it(\"Se", "lerometerJSTest016  once error');\n                        expect"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER, callback?: Callback<AccelerometerResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED,\r\n        callback?: Callback<AccelerometerUncalibratedResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_AMBIENT_LIGHT, callback?: Callback<LightResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_AMBIENT_TEMPERATURE, callback?: Callback<AmbientTemperatureResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_BAROMETER, callback?: Callback<BarometerResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_GRAVITY, callback?: Callback<GravityResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE, callback?: Callback<GyroscopeResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, callback?: Callback<GyroscopeUncalibratedResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_HALL, callback?: Callback<HallResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_HEART_RATE, callback?: Callback<HeartRateResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_HUMIDITY, callback?: Callback<HumidityResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_LINEAR_ACCELERATION, callback?: Callback<LinearAccelerometerResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD, callback?: Callback<MagneticFieldResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, callback?: Callback<MagneticFieldUncalibratedResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_ORIENTATION, callback?: Callback<OrientationResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_PEDOMETER, callback?: Callback<PedometerResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, callback?: Callback<PedometerDetectionResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_PROXIMITY, callback?: Callback<ProximityResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_ROTATION_VECTOR, callback?: Callback<RotationVectorResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_SIGNIFICANT_MOTION, callback?: Callback<SignificantMotionResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "off", "api_method_all": "function off(type: SensorType.SENSOR_TYPE_ID_WEAR_DETECTION, callback?: Callback<WearDetectionResponse>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 268, "since": 8, "api_used": "\u662f", "lines": ["lerometerJSTest001  off success');\n                        expe", "lerometerJSTest001  off error');\n                        expect", "lerometerJSTest010  off error');\n                expect(false).", "lerometerJSTest003  off error');\n                        expect", "\n            return offPromise2();\n        });\n        done();\n", "\"VibratorJsTest017  off success\");\n            expect(true).ass", "lerometerJSTest014  off1  success');\n                        ex", "lerometerJSTest016  off success');\n                        expe", "             sensor.off(1, (error) => {\n                    if ", "\n            return offPromise();\n        }, () => {\n          ", " {\n        function offCallback(error) {\n            if (error)", "lerometerJSTest014  off2 error');\n                        expec", "lerometerJSTest015  off success');\n                        expe", "sensor.off(1000000, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest003  off success');\n                        expe", "() {\n        sensor.off(1, 5);\n        expect(true).assertTrue(", "lerometerJSTest014  off2 success');\n                        exp", "atorJsTest010  stop off');\n                expect(false).assert", "lerometerJSTest008  off error');\n                expect(false).", "lerometerJSTest009  off success');\n                expect(true)", "lerometerJSTest010  off success');\n                expect(true)", "   }\n        sensor.off(1000000, offCallback);\n    })\n\n    \n   ", "lerometerJSTest008  off success');\n                expect(true)", "   }\n        sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"", "   }\n        sensor.off(1, offCallback);\n    })\n\n    \n    it(\"S", "\"VibratorJsTest017  off error\");\n            setTimeout(() => {", "lerometerJSTest009  off error');\n                expect(false).", "             sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCELE", "}\n\n        function offPromise1() {\n            return new Prom", ");\n        function offPromise() {\n            return new Promi", "lerometerJSTest014  off1  error');\n                        expe", "      sensor.off(1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens", "lerometerJSTest015  off error');\n                        expect", "\n            return offPromise();\n        });\n        done();\n ", "lerometerJSTest016  off error');\n                        expect", ");\n        function offPromise2() {\n            return new Prom", "     sensor.off(-1, offCallback);\n    })\n\n    \n    it(\"SUB_Sens"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "getGeomagneticField", "api_method_all": "function getGeomagneticField(locationOptions: LocationOptions, timeMillis: number, callback: AsyncCallback<GeomagneticResponse>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": ["             sensor.getGeomagneticField({\n                    'latitude': GEOMA", "375]\n        sensor.getGeomagneticField({ 'latitude': Number.NaN, 'longitude': ", "-\");\n        sensor.getGeomagneticField({ 'latitude': 0, 'longitude': Number.NE", "375]\n        sensor.getGeomagneticField({ 'latitude': 0, 'longitude': 0, 'altit", "       await sensor.getGeomagneticField({ 'latitude': 0, 'longitude': Number.Na", "       await sensor.getGeomagneticField({ 'latitude': 80, 'longitude': 0, 'alti", "375]\n        sensor.getGeomagneticField({ 'latitude': Number.MAX_VALUE, 'longit", "-\");\n        sensor.getGeomagneticField({ 'latitude': 0, 'longitude': Number.Na", "       await sensor.getGeomagneticField({ 'latitude': Number.MAX_VALUE, 'longit", "-\");\n        sensor.getGeomagneticField({ 'latitude': 0, 'longitude': Number.MA", "       await sensor.getGeomagneticField({ 'latitude': Number.NaN, 'longitude': ", "       await sensor.getGeomagneticField({\n                'latitude': GEOMAGNET", "875]\n        sensor.getGeomagneticField({ 'latitude': 0, 'longitude': 0, 'altit", "       await sensor.getGeomagneticField({ 'latitude': 0, 'longitude': 0, 'altit", "       await sensor.getGeomagneticField({ 'latitude': 0, 'longitude': Number.NE", "       await sensor.getGeomagneticField({ 'latitude': 0, 'longitude': Number.MA", "             sensor.getGeomagneticField({ 'latitude': 80, 'longitude': 0, 'alti", "       await sensor.getGeomagneticField({ 'latitude': Number.NEGATIVE_INFINITY,", "375]\n        sensor.getGeomagneticField({ 'latitude': Number.NEGATIVE_INFINITY,", "-\");\n        sensor.getGeomagneticField({ 'latitude': 0, 'longitude': 0, 'altit"], "files": ["SensorGeomagneticTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "getGeomagneticField", "api_method_all": "function getGeomagneticField(locationOptions: LocationOptions, timeMillis: number): Promise<GeomagneticResponse>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "getAltitude", "api_method_all": "function getAltitude(seaPressure: number, currentPressure: number, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["rt')\n        sensor.getAltitude(5, 0, (error, data) => {\n            if", "rt')\n        sensor.getAltitude(0, 100, (error, data) => {\n            "], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "getAltitude", "api_method_all": "function getAltitude(seaPressure: number, currentPressure: number): Promise<number>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["e) {\n        sensor.getAltitude(0, 100).then((data) => {\n            co", "e) {\n        sensor.getAltitude(5, 0).then((data) => {\n            cons"], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "getGeomagneticDip", "api_method_all": "function getGeomagneticDip(inclinationMatrix: Array<number>, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["t(data).assertEqual(getGeomagneticDipResult[2])\n            done()\n        },", "t(data).assertEqual(getGeomagneticDipResult[3])\n            }\n            don", "t(data).assertEqual(getGeomagneticDipResult[3])\n            done()\n        },", "t(data).assertEqual(getGeomagneticDipResult[2])\n            }\n            don", "d\")\n    })\n\n    let getGeomagneticDipResult = [0.8760581016540527, 0.862170, ", "t(data).assertEqual(getGeomagneticDipResult[0])\n            }\n            don", "rt')\n        sensor.getGeomagneticDip([1, 2, 3, 4], (error, data) => {\n      ", "rt')\n        sensor.getGeomagneticDip([1, 2, 3, 4, 5, 6, 7, 8, 9], (error, da"], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "getGeomagneticDip", "api_method_all": "function getGeomagneticDip(inclinationMatrix: Array<number>): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "getAngleModify", "api_method_all": "function getAngleModify(currentRotationMatrix: Array<number>, preRotationMatrix: Array<number>,\r\n        callback: AsyncCallback<Array<number>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["3\");\n        sensor.getAngleModify([1, 2, 3, 1, 2, 3, 1, 2, 3], [2, 2, 2, ", "1\");\n        sensor.getAngleModify([3.40282e+38 + 1, 3.40282e+38 + 1, 3.40", "2\");\n        sensor.getAngleModify([0.0 / 0.0, 0.0 / 0.0, 0.0 / 0.0, 0.0 /", "4\");\n        sensor.getAngleModify([3.40282e+38, 3.40282e+38, 3.40282e+38,", "7\");\n        sensor.getAngleModify([0.0 / 0.0, 0.0 / 0.0, 0.0 / 0.0, 0.0 /", "0\");\n        sensor.getAngleModify([1.17549e-38, 1.17549e-38, 1.17549e-38,", "6\");\n        sensor.getAngleModify([3.40282e+38 + 1, 3.40282e+38 + 1, 3.40", "8\");\n        sensor.getAngleModify([1, 2, 3, 1, 2, 3, 1, 2, 3], [2, 2, 2, ", "9\");\n        sensor.getAngleModify([3.40282e+38, 3.40282e+38, 3.40282e+38,", "5\");\n        sensor.getAngleModify([1.17549e-38, 1.17549e-38, 1.17549e-38,"], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "getAngleModify", "api_method_all": "function getAngleModify(currentRotationMatrix: Array<number>, preRotationMatrix: Array<number>): Promise<Array<number>>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "createRotationMatrix", "api_method_all": "function createRotationMatrix(rotationVector: Array<number>, callback: AsyncCallback<Array<number>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["ata[i]).assertEqual(createRotationMatrixResult[1][i])\n            }\n            ", "e) {\n        sensor.createRotationMatrix(gravity[2], geomagnetic[2], (error, dat", "e) {\n        sensor.createRotationMatrix(gravity[0], geomagnetic[0], (error, dat", "t\");\n        sensor.createRotationMatrix([-0.0245, 0.402, 0.0465], (error, data)", " })\n    })\n\n    let createRotationMatrixResult = [\n        [0.6724675297737122, ", "ata[i]).assertEqual(createRotationMatrixResult[0][i])\n            }\n            ", "ata[i]).assertEqual(createRotationMatrixResult[0][i])\n                }\n        "], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "createRotationMatrix", "api_method_all": "function createRotationMatrix(rotationVector: Array<number>): Promise<Array<number>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["e) {\n        sensor.createRotationMatrix(gravity[0], geomagnetic[0]).then((data)", "e) {\n        sensor.createRotationMatrix(gravity[1], geomagnetic[1]).then((data)", "rt')\n        sensor.createRotationMatrix([0, 0, 0]).then((data) => {\n           ", "rt')\n        sensor.createRotationMatrix([-0.0245, 0.402, 0.0465]).then((data) =", "e) {\n        sensor.createRotationMatrix(gravity[2], geomagnetic[2]).then((data)"], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "transformCoordinateSystem", "api_method_all": "function transformCoordinateSystem(inRotationVector: Array<number>, coordinates: CoordinatesOptions,\r\n        callback: AsyncCallback<Array<number>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["ata[i]).assertEqual(transformCoordinateSystemResult[2][i]);\n                }\n       ", "-\");\n        sensor.transformCoordinateSystem([3.40282e+39, 3.40282e+39, 3.40282e+39,", "qual(JSON.stringify(transformCoordinateSystemResult[1]))\n                }\n          ", "});\n    })\n\n    let transformCoordinateSystemResult = [\n        [1.500000, 1.500000, ", "ata[i]).assertEqual(transformCoordinateSystemResult[0][i]);\n            }\n           ", "-\");\n        sensor.transformCoordinateSystem([3.40282e+38, 3.40282e+38, 3.40282e+38,", "-\");\n        sensor.transformCoordinateSystem([1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5", "qual(JSON.stringify(transformCoordinateSystemResult[0]))\n            }\n            do"], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "transformCoordinateSystem", "api_method_all": "function transformCoordinateSystem(inRotationVector: Array<number>, coordinates: CoordinatesOptions): Promise<Array<number>>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "createQuaternion", "api_method_all": "function createQuaternion(rotationVector: Array<number>, callback: AsyncCallback<Array<number>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["rt')\n        sensor.createQuaternion([0.25, 0.14], (error, data) => {\n      ", "rt')\n        sensor.createQuaternion([3.40282e+38, 3.40282e+38, 3.40282e+38]", "rt')\n        sensor.createQuaternion([0, 0, 0], (error, data) => {\n         ", "rt')\n        sensor.createQuaternion([0.52, -0.336, -0.251], (error, data) =", "rt')\n        sensor.createQuaternion([-0.325, -0.562, -0.25], (error, data) "], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "createQuaternion", "api_method_all": "function createQuaternion(rotationVector: Array<number>): Promise<Array<number>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["rt')\n        sensor.createQuaternion([0.25, 0.14]).then((data) => {\n        ", "rt')\n        sensor.createQuaternion([0.52, -0.336, -0.251]).then((data) => ", "rt')\n        sensor.createQuaternion([-0.325, -0.562, -0.25]).then((data) =>", "rt')\n        sensor.createQuaternion([0, 0, 0]).then((data) => {\n           ", "rt')\n        sensor.createQuaternion([0, 0]).then((data) => {\n            co"], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "getDirection", "api_method_all": "function getDirection(rotationMatrix: Array<number>, callback: AsyncCallback<Array<number>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["e) {\n        sensor.getDirection(rotationMatrix[0], (error, data) => {\n ", "e) {\n        sensor.getDirection(rotationMatrix[1], function (error, dat"], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "getDirection", "api_method_all": "function getDirection(rotationMatrix: Array<number>): Promise<Array<number>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["e) {\n        sensor.getDirection(rotationMatrix[0]).then((data) => {\n   ", "e) {\n        sensor.getDirection(rotationMatrix[1]).then((data) => {\n   ", "e) {\n        sensor.getDirection([1, 2, 3, 1, 2, 3, 1, 2, 3, 0]).then((d"], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "createRotationMatrix", "api_method_all": "function createRotationMatrix(gravity: Array<number>, geomagnetic: Array<number>, callback: AsyncCallback<RotationMatrixResponse>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["ata[i]).assertEqual(createRotationMatrixResult[1][i])\n            }\n            ", "e) {\n        sensor.createRotationMatrix(gravity[2], geomagnetic[2], (error, dat", "e) {\n        sensor.createRotationMatrix(gravity[0], geomagnetic[0], (error, dat", "t\");\n        sensor.createRotationMatrix([-0.0245, 0.402, 0.0465], (error, data)", " })\n    })\n\n    let createRotationMatrixResult = [\n        [0.6724675297737122, ", "ata[i]).assertEqual(createRotationMatrixResult[0][i])\n            }\n            ", "ata[i]).assertEqual(createRotationMatrixResult[0][i])\n                }\n        "], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "sensor", "api_method_name": "createRotationMatrix", "api_method_all": "function createRotationMatrix(gravity: Array<number>, geomagnetic: Array<number>,): Promise<RotationMatrixResponse>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["e) {\n        sensor.createRotationMatrix(gravity[0], geomagnetic[0]).then((data)", "e) {\n        sensor.createRotationMatrix(gravity[1], geomagnetic[1]).then((data)", "rt')\n        sensor.createRotationMatrix([0, 0, 0]).then((data) => {\n           ", "rt')\n        sensor.createRotationMatrix([-0.0245, 0.402, 0.0465]).then((data) =", "e) {\n        sensor.createRotationMatrix(gravity[2], geomagnetic[2]).then((data)"], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LocationOptions", "api_method_all": "interface LocationOptions {\r\n        latitude: number;\r\n        longitude: number;\r\n        altitude: number;\r\n    }", "api_method_name": "LocationOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationOptions", "api_method_name": "latitude", "api_method_all": "latitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": ["GeomagneticField({ 'latitude': 0, 'longitude': N", "GeomagneticField({ 'latitude': 80, 'longitude': ", "({\n                'latitude': GEOMAGNETIC_COORD", "GeomagneticField({ 'latitude': Number.NEGATIVE_I", "GeomagneticField({ 'latitude': Number.NaN, 'long", "GeomagneticField({ 'latitude': Number.MAX_VALUE,", "GeomagneticField({ 'latitude': 0, 'longitude': 0", "                   'latitude': GEOMAGNETIC_COORD"], "files": ["SensorGeomagneticTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LocationOptions", "api_method_name": "longitude", "api_method_all": "longitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": ["({ 'latitude': 80, 'longitude': 0, 'altitude': 0 ", "d({ 'latitude': 0, 'longitude': 0, 'altitude': Nu", "tude': Number.NaN, 'longitude': 0, 'altitude': 0 ", "d({ 'latitude': 0, 'longitude': Number.MAX_VALUE,", "d({ 'latitude': 0, 'longitude': Number.NaN, 'alti", "NEGATIVE_INFINITY, 'longitude': 0, 'altitude': 0 ", "],\n                'longitude': GEOMAGNETIC_COORD", "d({ 'latitude': 0, 'longitude': Number.NEGATIVE_I", " Number.MAX_VALUE, 'longitude': 0, 'altitude': 0 ", "                   'longitude': GEOMAGNETIC_COORD", "d({ 'latitude': 0, 'longitude': 0, 'altitude': 0 "], "files": ["SensorGeomagneticTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LocationOptions", "api_method_name": "altitude", "api_method_all": "altitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": ["NEGATIVE_INFINITY, 'altitude': 0 },\n            ", "0, 'longitude': 0, 'altitude': Number.NEGATIVE_I", "N, 'longitude': 0, 'altitude': 0 },\n            ", " Number.MAX_VALUE, 'altitude': 0 }, timeMillis[0", "0, 'longitude': 0, 'altitude': Number.MAX_VALUE ", "0, 'longitude': 0, 'altitude': 0 }, Number.MAX_V", "tude': Number.NaN, 'altitude': 0 }, timeMillis[0", "tude': Number.NaN, 'altitude': 0 },\n            ", "E, 'longitude': 0, 'altitude': 0 },\n            ", "0, 'longitude': 0, 'altitude': Number.MIN_VALUE ", " Number.MAX_VALUE, 'altitude': 0 },\n            ", "0, 'longitude': 0, 'altitude': Number.NaN }, tim", "N, 'longitude': 0, 'altitude': 0 }, timeMillis[0", "0, 'longitude': 0, 'altitude': Number.NaN },\n   ", "0, 'longitude': 0, 'altitude': 0 }, timeMillis[j", "COORDINATES[j][1], 'altitude': GEOMAGNETIC_COORD", "Y, 'longitude': 0, 'altitude': 0 },\n            ", "0, 'longitude': 0, 'altitude': 0 },\n            ", "COORDINATES[i][1], 'altitude': GEOMAGNETIC_COORD", "0, 'longitude': 0, 'altitude': 0 }, Number.MIN_V"], "files": ["SensorGeomagneticTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GeomagneticResponse", "api_method_all": "interface GeomagneticResponse {\r\n        x: number;\r\n        y: number;\r\n        z: number;\r\n        geomagneticDip: number;\r\n        deflectionAngle: number;\r\n        levelIntensity: number;\r\n        totalIntensity: number;\r\n    }", "api_method_name": "GeomagneticResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeomagneticResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GeomagneticResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GeomagneticResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 8, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GeomagneticResponse", "api_method_name": "geomagneticDip", "api_method_all": "geomagneticDip: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 131, "since": 8, "api_used": "\u662f", "lines": ["       + data.z + ',geomagneticDip: ' + data.geomagnet", "        expect(data.geomagneticDip).assertEqual(GEOMAG", "& Number.isNaN(data.geomagneticDip)).assertTrue()\n    ", "',z: ' + data.z + ',geomagneticDip: ' + data.geomagnet", "gneticDip: ' + data.geomagneticDip\n                   ", "        expect(data.geomagneticDip).assertEqual(geomag", "                + ',geomagneticDip: ' + data.geomagnet"], "files": ["SensorGeomagneticTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GeomagneticResponse", "api_method_name": "deflectionAngle", "api_method_all": "deflectionAngle: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 131, "since": 8, "api_used": "\u662f", "lines": ["t(Number.isNaN(data.deflectionAngle) && Number.isNaN(da", "tionAngle: ' + data.deflectionAngle + ',levelIntensity:", "                + ',deflectionAngle: ' + data.deflectio", "        expect(data.deflectionAngle).assertEqual(geomag", "        expect(data.deflectionAngle).assertEqual(GEOMAG"], "files": ["SensorGeomagneticTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GeomagneticResponse", "api_method_name": "levelIntensity", "api_method_all": "levelIntensity: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 129, "since": 8, "api_used": "\u662f", "lines": ["t(Number.isNaN(data.levelIntensity) && Number.isNaN(da", "             + data.levelIntensity + ',totalIntensity:", "Intensity: ' + data.levelIntensity\n                   ", "        expect(data.levelIntensity).assertEqual(GEOMAG", "        expect(data.levelIntensity).assertEqual(geomag", "deflectionAngle + ',levelIntensity: '\n                ", "deflectionAngle + ',levelIntensity: ' + data.levelInte"], "files": ["SensorGeomagneticTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GeomagneticResponse", "api_method_name": "totalIntensity", "api_method_all": "totalIntensity: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 129, "since": 8, "api_used": "\u662f", "lines": ["                + ',totalIntensity: ' + data.totalInte", "        expect(data.totalIntensity).assertEqual(geomag", "        expect(data.totalIntensity).assertEqual(GEOMAG", "Intensity: ' + data.totalIntensity)\n                  ", "& Number.isNaN(data.totalIntensity)).assertTrue();\n   ", ".levelIntensity + ',totalIntensity: ' + data.totalInte"], "files": ["SensorGeomagneticTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CoordinatesOptions", "api_method_all": "interface CoordinatesOptions {\r\n        \r\n        x: number;\r\n        \r\n        y: number;\r\n    }", "api_method_name": "CoordinatesOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CoordinatesOptions", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CoordinatesOptions", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RotationMatrixResponse", "api_method_all": "interface RotationMatrixResponse {\r\n        rotation: Array<number>;\r\n        inclination: Array<number>\r\n    }", "api_method_name": "RotationMatrixResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RotationMatrixResponse", "api_method_name": "rotation", "api_method_all": "rotation: Array<number>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["     {\n            \"rotation\": [-0.7980074882507", "sensor.getDirection(rotationMatrix[0]).then((dat", "     {\n            \"rotation\": [-0.8206444382667", "     {\n            \"rotation\": [null, null, null", "     {\n            \"rotation\": [0.95836514234542", "sensor.getDirection(rotationMatrix[0], (error, d", "sensor.getDirection(rotationMatrix[1], function ", "sensor.getDirection(rotationMatrix[1]).then((dat", "398]\n    ]\n\n    let rotationMatrix = [\n        ["], "files": ["SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Options", "api_method_all": "interface Options {\r\n        interval?: number; \r\n    }", "api_method_name": "Options", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Options", "api_method_name": "interval", "api_method_all": "interval?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["function () { }, { 'interval': 100000000 }, 5);\n", "}\n            }, { 'interval': 200000000 });\n   "], "files": ["SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_all": "enum SensorType {\r\n        SENSOR_TYPE_ID_ACCELEROMETER = 1,          \r\n        SENSOR_TYPE_ID_GYROSCOPE = 2,              \r\n        SENSOR_TYPE_ID_AMBIENT_LIGHT = 5,          \r\n        SENSOR_TYPE_ID_MAGNETIC_FIELD = 6,         \r\n        SENSOR_TYPE_ID_BAROMETER = 8,              \r\n        SENSOR_TYPE_ID_HALL = 10,                  \r\n        SENSOR_TYPE_ID_PROXIMITY = 12,             \r\n        SENSOR_TYPE_ID_HUMIDITY = 13,              \r\n        SENSOR_TYPE_ID_ORIENTATION = 256,          \r\n        SENSOR_TYPE_ID_GRAVITY = 257,              \r\n        SENSOR_TYPE_ID_LINEAR_ACCELERATION = 258,  \r\n        SENSOR_TYPE_ID_ROTATION_VECTOR = 259,      \r\n        SENSOR_TYPE_ID_AMBIENT_TEMPERATURE = 260,  \r\n        SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED = 261,  \r\n        SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED = 263,  \r\n        SENSOR_TYPE_ID_SIGNIFICANT_MOTION = 264,    \r\n        SENSOR_TYPE_ID_PEDOMETER_DETECTION = 265,   \r\n        SENSOR_TYPE_ID_PEDOMETER = 266,             \r\n        SENSOR_TYPE_ID_HEART_RATE = 278,            \r\n        SENSOR_TYPE_ID_WEAR_DETECTION = 280,        \r\n        SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED = 281,   \r\n    }", "api_method_name": "SensorType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 63, "since": 8, "api_used": "\u662f", "lines": ["  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_PEDO", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ACCE", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_AMBI", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_GRAV", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_AMBI", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_HUMI", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_MAGN", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_MAGN", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_ORIE", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_LINE", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_GRAV", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_BARO", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_HUMI", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ACCE", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_HEAR", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_PEDO", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_GYRO", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_LINE", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_ORIE", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_ACCE", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_HEAR", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_GYRO", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_MAGN", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_GYRO", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_HALL", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_PROX", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_PEDO", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_BARO", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_ORIE", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_PROX", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_AMBI", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_HEAR", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_LINE", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_BARO", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_HUMI", "   sensor.on(sensor.SensorType.SENSOR_TYPE_ID_HALL", "  sensor.off(sensor.SensorType.SENSOR_TYPE_ID_HALL", " sensor.once(sensor.SensorType.SENSOR_TYPE_ID_GRAV"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_ACCELEROMETER", "api_method_all": "SENSOR_TYPE_ID_ACCELEROMETER = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["n(sensor.SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED, funct", "f(sensor.SensorType.SENSOR_TYPE_ID_ACCELEROMETER, (error) => {\n     ", "e(sensor.SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED, onceS", "e(sensor.SensorType.SENSOR_TYPE_ID_ACCELEROMETER, onceSensorCallback", "f(sensor.SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED, (erro", "n(sensor.SensorType.SENSOR_TYPE_ID_ACCELEROMETER, function (error, d"], "files": ["SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_GYROSCOPE", "api_method_all": "SENSOR_TYPE_ID_GYROSCOPE = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["e(sensor.SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, onceS", "n(sensor.SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, funct", "f(sensor.SensorType.SENSOR_TYPE_ID_GYROSCOPE, (error) => {\n     ", "n(sensor.SensorType.SENSOR_TYPE_ID_GYROSCOPE, function (error, d", "f(sensor.SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, (erro", "e(sensor.SensorType.SENSOR_TYPE_ID_GYROSCOPE, onceSensorCallback"], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Gyroscope.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_AMBIENT_LIGHT", "api_method_all": "SENSOR_TYPE_ID_AMBIENT_LIGHT = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e(sensor.SensorType.SENSOR_TYPE_ID_AMBIENT_LIGHT, onceSensorCallback", "n(sensor.SensorType.SENSOR_TYPE_ID_AMBIENT_LIGHT, function (error, d", "f(sensor.SensorType.SENSOR_TYPE_ID_AMBIENT_LIGHT, (error) => {\n     "], "files": ["SensorOnOffTest.test_Ambient_Light.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_MAGNETIC_FIELD", "api_method_all": "SENSOR_TYPE_ID_MAGNETIC_FIELD = 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["e(sensor.SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, onceS", "n(sensor.SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD, function (error, d", "e(sensor.SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD, onceSensorCallback", "f(sensor.SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD, (error) => {\n     ", "n(sensor.SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, funct", "f(sensor.SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, (erro"], "files": ["SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_BAROMETER", "api_method_all": "SENSOR_TYPE_ID_BAROMETER = 8,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e(sensor.SensorType.SENSOR_TYPE_ID_BAROMETER, onceSensorCallback", "f(sensor.SensorType.SENSOR_TYPE_ID_BAROMETER, (error) => {\n     ", "n(sensor.SensorType.SENSOR_TYPE_ID_BAROMETER, function (error, d"], "files": ["SensorOnOffTest.test_Barometer.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_HALL", "api_method_all": "SENSOR_TYPE_ID_HALL = 10,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e(sensor.SensorType.SENSOR_TYPE_ID_HALL, onceSensorCallback", "f(sensor.SensorType.SENSOR_TYPE_ID_HALL, (error) => {\n     ", "n(sensor.SensorType.SENSOR_TYPE_ID_HALL, function (error, d"], "files": ["SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_PROXIMITY", "api_method_all": "SENSOR_TYPE_ID_PROXIMITY = 12,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["n(sensor.SensorType.SENSOR_TYPE_ID_PROXIMITY, function (error, d", "e(sensor.SensorType.SENSOR_TYPE_ID_PROXIMITY, onceSensorCallback", "f(sensor.SensorType.SENSOR_TYPE_ID_PROXIMITY, (error) => {\n     "], "files": ["SensorOnOffTest.test_Proxinity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_HUMIDITY", "api_method_all": "SENSOR_TYPE_ID_HUMIDITY = 13,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e(sensor.SensorType.SENSOR_TYPE_ID_HUMIDITY, onceSensorCallback", "n(sensor.SensorType.SENSOR_TYPE_ID_HUMIDITY, function (error, d", "f(sensor.SensorType.SENSOR_TYPE_ID_HUMIDITY, (error) => {\n     "], "files": ["SensorOnOffTest.test_Humidity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_ORIENTATION", "api_method_all": "SENSOR_TYPE_ID_ORIENTATION = 256,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e(sensor.SensorType.SENSOR_TYPE_ID_ORIENTATION, onceSensorCallback", "f(sensor.SensorType.SENSOR_TYPE_ID_ORIENTATION, (error) => {\n     ", "n(sensor.SensorType.SENSOR_TYPE_ID_ORIENTATION, function (error, d"], "files": ["SensorOnOffTest.test_Orientation.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_GRAVITY", "api_method_all": "SENSOR_TYPE_ID_GRAVITY = 257,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["n(sensor.SensorType.SENSOR_TYPE_ID_GRAVITY, function (error, d", "e(sensor.SensorType.SENSOR_TYPE_ID_GRAVITY, onceSensorCallback", "f(sensor.SensorType.SENSOR_TYPE_ID_GRAVITY, (error) => {\n     "], "files": ["SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_LINEAR_ACCELERATION", "api_method_all": "SENSOR_TYPE_ID_LINEAR_ACCELERATION = 258,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["n(sensor.SensorType.SENSOR_TYPE_ID_LINEAR_ACCELERATION, function (error, d", "f(sensor.SensorType.SENSOR_TYPE_ID_LINEAR_ACCELERATION, (error) => {\n     ", "e(sensor.SensorType.SENSOR_TYPE_ID_LINEAR_ACCELERATION, onceSensorCallback"], "files": ["SensorOnOffTest.test_Linear_Acceleration.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_ROTATION_VECTOR", "api_method_all": "SENSOR_TYPE_ID_ROTATION_VECTOR = 259,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e(sensor.SensorType.SENSOR_TYPE_ID_ROTATION_VECTOR, onceSensorCallback", "n(sensor.SensorType.SENSOR_TYPE_ID_ROTATION_VECTOR, function (error, d", "f(sensor.SensorType.SENSOR_TYPE_ID_ROTATION_VECTOR, (error) => {\n     "], "files": ["SensorOnOffTest.test_Rotation_Vector.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_AMBIENT_TEMPERATURE", "api_method_all": "SENSOR_TYPE_ID_AMBIENT_TEMPERATURE = 260,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e(sensor.SensorType.SENSOR_TYPE_ID_AMBIENT_TEMPERATURE, onceSensorCallback", "n(sensor.SensorType.SENSOR_TYPE_ID_AMBIENT_TEMPERATURE, function (error, d", "f(sensor.SensorType.SENSOR_TYPE_ID_AMBIENT_TEMPERATURE, (error) => {\n     "], "files": ["SensorOnOffTest.test_Temperature.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED", "api_method_all": "SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED = 261,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["e(sensor.SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, onceSensorCallback", "n(sensor.SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, function (error, d", "f(sensor.SensorType.SENSOR_TYPE_ID_MAGNETIC_FIELD_UNCALIBRATED, (error) => {\n     "], "files": ["SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED", "api_method_all": "SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED = 263,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["f(sensor.SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, (error) => {\n     ", "e(sensor.SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, onceSensorCallback", "n(sensor.SensorType.SENSOR_TYPE_ID_GYROSCOPE_UNCALIBRATED, function (error, d"], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_SIGNIFICANT_MOTION", "api_method_all": "SENSOR_TYPE_ID_SIGNIFICANT_MOTION = 264,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["n(sensor.SensorType.SENSOR_TYPE_ID_SIGNIFICANT_MOTION, function (error, d", "e(sensor.SensorType.SENSOR_TYPE_ID_SIGNIFICANT_MOTION, onceSensorCallback", "f(sensor.SensorType.SENSOR_TYPE_ID_SIGNIFICANT_MOTION, (error) => {\n     "], "files": ["SensorOnOffTest.test_Significant_Motion.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_PEDOMETER_DETECTION", "api_method_all": "SENSOR_TYPE_ID_PEDOMETER_DETECTION = 265,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["f(sensor.SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, (error) => {\n     ", "n(sensor.SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, function (error, d", "e(sensor.SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, onceSensorCallback"], "files": ["SensorOnOffTest.test_Pedometer_Detection.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_PEDOMETER", "api_method_all": "SENSOR_TYPE_ID_PEDOMETER = 266,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["n(sensor.SensorType.SENSOR_TYPE_ID_PEDOMETER, function (error, d", "e(sensor.SensorType.SENSOR_TYPE_ID_PEDOMETER, onceSensorCallback", "f(sensor.SensorType.SENSOR_TYPE_ID_PEDOMETER, (error) => {\n     ", "n(sensor.SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, function", "e(sensor.SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, onceSens", "f(sensor.SensorType.SENSOR_TYPE_ID_PEDOMETER_DETECTION, (error) "], "files": ["SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test_Pedometer_Detection.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_HEART_RATE", "api_method_all": "SENSOR_TYPE_ID_HEART_RATE = 278,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["f(sensor.SensorType.SENSOR_TYPE_ID_HEART_RATE, (error) => {\n     ", "n(sensor.SensorType.SENSOR_TYPE_ID_HEART_RATE, function (error, d", "e(sensor.SensorType.SENSOR_TYPE_ID_HEART_RATE, onceSensorCallback"], "files": ["SensorOnOffTest.test_Heart_Rate.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_WEAR_DETECTION", "api_method_all": "SENSOR_TYPE_ID_WEAR_DETECTION = 280,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["n(sensor.SensorType.SENSOR_TYPE_ID_WEAR_DETECTION, function (error, d", "e(sensor.SensorType.SENSOR_TYPE_ID_WEAR_DETECTION, onceSensorCallback", "f(sensor.SensorType.SENSOR_TYPE_ID_WEAR_DETECTION, (error) => {\n     "], "files": ["SensorOnOffTest.test_Wear_Detection.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SensorType", "api_method_name": "SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED", "api_method_all": "SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED = 281,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["f(sensor.SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED, (error) => {\n     ", "e(sensor.SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED, onceSensorCallback", "n(sensor.SensorType.SENSOR_TYPE_ID_ACCELEROMETER_UNCALIBRATED, function (error, d"], "files": ["SensorOnOffTest.test_Accelerometer_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Response", "api_method_all": "interface Response {\r\n        timestamp: number; \r\n    }", "api_method_name": "Response", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Response", "api_method_name": "timestamp", "api_method_all": "timestamp: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["        expect(data.timestamp).assertInstanceOf('"], "files": ["SensorOnOffTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerResponse", "api_method_all": "interface AccelerometerResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n    }", "api_method_name": "AccelerometerResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 8, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LinearAccelerometerResponse", "api_method_all": "interface LinearAccelerometerResponse extends Response{\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n    }", "api_method_name": "LinearAccelerometerResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LinearAccelerometerResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LinearAccelerometerResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LinearAccelerometerResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 8, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerUncalibratedResponse", "api_method_all": "interface AccelerometerUncalibratedResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n        biasX: number; \r\n        biasY: number; \r\n        biasZ: number; \r\n    }", "api_method_name": "AccelerometerUncalibratedResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerUncalibratedResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerUncalibratedResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerUncalibratedResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 8, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerUncalibratedResponse", "api_method_name": "biasX", "api_method_all": "biasX: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": ["z + \"biasX:\" + data.biasX + \"biasY: \" + data.", "z + \"biasX:\" + data.biasX + \"biasY: \" \n      ", "        + data.z + \"biasX:\" + data.biasX + \"b", "expect(typeof (data.biasX)).assertEqual(\"numb", "+ \"z: \" + data.z + \"biasX:\" + data.biasX + \"b"], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerUncalibratedResponse", "api_method_name": "biasY", "api_method_all": "biasY: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": ["X:\" + data.biasX + \"biasY: \" \n               ", "             + data.biasY + \"biasZ: \" + data.", "X:\" + data.biasX + \"biasY: \" + data.biasY + \"", "expect(typeof (data.biasY)).assertEqual(\"numb", " + \"biasY: \" + data.biasY + \"biasZ: \" + data."], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerUncalibratedResponse", "api_method_name": "biasZ", "api_method_all": "biasZ: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": [" + \"biasZ: \" + data.biasZ);\n                 ", ": \" + data.biasY + \"biasZ: \" + data.biasZ);\n ", " + \"biasZ: \" + data.biasZ);\n                e", "expect(typeof (data.biasZ)).assertEqual(\"numb", "    + data.biasY + \"biasZ: \" + data.biasZ);\n "], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GravityResponse", "api_method_all": "interface GravityResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n    }", "api_method_name": "GravityResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GravityResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GravityResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GravityResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 8, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "OrientationResponse", "api_method_all": "interface OrientationResponse extends Response {\r\n        alpha: number; \r\n        beta: number; \r\n        gamma: number; \r\n    }", "api_method_name": "OrientationResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "OrientationResponse", "api_method_name": "alpha", "api_method_all": "alpha: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "OrientationResponse", "api_method_name": "beta", "api_method_all": "beta: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "OrientationResponse", "api_method_name": "gamma", "api_method_all": "gamma: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RotationVectorResponse", "api_method_all": "interface RotationVectorResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n        w: number; \r\n    }", "api_method_name": "RotationVectorResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RotationVectorResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RotationVectorResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RotationVectorResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 8, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RotationVectorResponse", "api_method_name": "w", "api_method_all": "w: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 180, "since": 0, "api_used": "\u662f", "lines": ["   let exitTime = now.getTime() + NumberM", "--start');\n        await sensor.getGeomag", " NaN, NaN]\n        await sensor.getGeomag", "Millis) {\n    let now = new Date()\n    le", ") {\n    let now = new Date()\n    let exit", "46.859375]\n        await sensor.getGeomag", " console.info('onShow finish')\n        co", "       })\n\n        await promise.then(() ", ".21484375]\n        await sensor.getGeomag", "           return new Promise((resolve, r", "ate()\n        if (now.getTime > exitTime)", "---');\n            await sensor.getGeomag", "st expectExtend = new ExpectExtend({\n    ", "i++) {\n            await sensor.getGeomag", "promiseArray.push(new Promise((resolve, r", "0 start');\n        await sensor.on(testSe", " + NumberMillis\n    while (true) {\n      ", "31937.875]\n        await sensor.getGeomag", ") {\n        now = new Date()\n        if (", "-------');\n        await sensor.getGeomag", "    let promise = new Promise((resolve, r", " (true) {\n        now = new Date()\n      ", " = this.$t('strings.world');\n    },\n    o", "1.2109375]\n        await sensor.getGeomag", "');\n    },\n    onShow() {\n        console"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeResponse", "api_method_all": "interface GyroscopeResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n    }", "api_method_name": "GyroscopeResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 8, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeUncalibratedResponse", "api_method_all": "interface GyroscopeUncalibratedResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n        biasX: number; \r\n        biasY: number; \r\n        biasZ: number; \r\n    }", "api_method_name": "GyroscopeUncalibratedResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeUncalibratedResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeUncalibratedResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeUncalibratedResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 8, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeUncalibratedResponse", "api_method_name": "biasX", "api_method_all": "biasX: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": ["z + \"biasX:\" + data.biasX + \"biasY: \" + data.", "z + \"biasX:\" + data.biasX + \"biasY: \" \n      ", "        + data.z + \"biasX:\" + data.biasX + \"b", "expect(typeof (data.biasX)).assertEqual(\"numb", "+ \"z: \" + data.z + \"biasX:\" + data.biasX + \"b"], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeUncalibratedResponse", "api_method_name": "biasY", "api_method_all": "biasY: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": ["X:\" + data.biasX + \"biasY: \" \n               ", "             + data.biasY + \"biasZ: \" + data.", "X:\" + data.biasX + \"biasY: \" + data.biasY + \"", "expect(typeof (data.biasY)).assertEqual(\"numb", " + \"biasY: \" + data.biasY + \"biasZ: \" + data."], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeUncalibratedResponse", "api_method_name": "biasZ", "api_method_all": "biasZ: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": [" + \"biasZ: \" + data.biasZ);\n                 ", ": \" + data.biasY + \"biasZ: \" + data.biasZ);\n ", " + \"biasZ: \" + data.biasZ);\n                e", "expect(typeof (data.biasZ)).assertEqual(\"numb", "    + data.biasY + \"biasZ: \" + data.biasZ);\n "], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SignificantMotionResponse", "api_method_all": "interface SignificantMotionResponse extends Response {\r\n        scalar: number; \r\n    }", "api_method_name": "SignificantMotionResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SignificantMotionResponse", "api_method_name": "scalar", "api_method_all": "scalar: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["expect(typeof (data.scalar)).assertEqual(\"numb", "st005  once success scalar: ' + data.scalar);\n", "ss scalar: ' + data.scalar);\n                 ", "ss scalar: ' + data.scalar);\n                e", "st001  once success scalar: ' + data.scalar);\n"], "files": ["SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Pedometer_Detection.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProximityResponse", "api_method_all": "interface ProximityResponse extends Response {\r\n        distance: number; \r\n    }", "api_method_name": "ProximityResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProximityResponse", "api_method_name": "distance", "api_method_all": "distance: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["expect(typeof (data.distance)).assertEqual(\"numb", "st005  once success distance: ' + data.distance)", " distance: ' + data.distance);\n                 ", " distance: ' + data.distance);\n                e", "Test001  on success distance: ' + data.distance)"], "files": ["SensorOnOffTest.test_Proxinity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightResponse", "api_method_all": "interface LightResponse extends Response {\r\n        intensity: number; \r\n    }", "api_method_name": "LightResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LightResponse", "api_method_name": "intensity", "api_method_all": "intensity: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["cess data: ' + data.intensity);\n                e", "expect(typeof (data.intensity)).assertEqual(\"numb", "cess data: ' + data.intensity);\n                 "], "files": ["SensorOnOffTest.test_Ambient_Light.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HallResponse", "api_method_all": "interface HallResponse extends Response {\r\n        status: number; \r\n    }", "api_method_name": "HallResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HallResponse", "api_method_name": "status", "api_method_all": "status: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["Test001  on success status: ' + data.status);\n", "expect(typeof (data.status)).assertEqual(\"numb", "ss status: ' + data.status);\n                 ", "st005  once success status: ' + data.status);\n", "ss status: ' + data.status);\n                e"], "files": ["SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldResponse", "api_method_all": "interface MagneticFieldResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n    }", "api_method_name": "MagneticFieldResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 8, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldUncalibratedResponse", "api_method_all": "interface MagneticFieldUncalibratedResponse extends Response {\r\n        x: number; \r\n        y: number; \r\n        z: number; \r\n        biasX: number; \r\n        biasY: number; \r\n        biasZ: number; \r\n    }", "api_method_name": "MagneticFieldUncalibratedResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldUncalibratedResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 8, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldUncalibratedResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 8, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldUncalibratedResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 8, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldUncalibratedResponse", "api_method_name": "biasX", "api_method_all": "biasX: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": ["z + \"biasX:\" + data.biasX + \"biasY: \" + data.", "z + \"biasX:\" + data.biasX + \"biasY: \" \n      ", "        + data.z + \"biasX:\" + data.biasX + \"b", "expect(typeof (data.biasX)).assertEqual(\"numb", "+ \"z: \" + data.z + \"biasX:\" + data.biasX + \"b"], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldUncalibratedResponse", "api_method_name": "biasY", "api_method_all": "biasY: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": ["X:\" + data.biasX + \"biasY: \" \n               ", "             + data.biasY + \"biasZ: \" + data.", "X:\" + data.biasX + \"biasY: \" + data.biasY + \"", "expect(typeof (data.biasY)).assertEqual(\"numb", " + \"biasY: \" + data.biasY + \"biasZ: \" + data."], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MagneticFieldUncalibratedResponse", "api_method_name": "biasZ", "api_method_all": "biasZ: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": [" + \"biasZ: \" + data.biasZ);\n                 ", ": \" + data.biasY + \"biasZ: \" + data.biasZ);\n ", " + \"biasZ: \" + data.biasZ);\n                e", "expect(typeof (data.biasZ)).assertEqual(\"numb", "    + data.biasY + \"biasZ: \" + data.biasZ);\n "], "files": ["SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PedometerResponse", "api_method_all": "interface PedometerResponse extends Response {\r\n        steps: number; \r\n    }", "api_method_name": "PedometerResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PedometerResponse", "api_method_name": "steps", "api_method_all": "steps: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["st001  once success steps: ' + data.steps);\n ", "ess steps: ' + data.steps);\n                e", "ess steps: ' + data.steps);\n                 ", "expect(typeof (data.steps)).assertEqual(\"numb", "st005  once success steps: ' + data.steps);\n "], "files": ["SensorOnOffTest.test_Pedometer.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HumidityResponse", "api_method_all": "interface HumidityResponse extends Response {\r\n        humidity: number; \r\n    }", "api_method_name": "HumidityResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HumidityResponse", "api_method_name": "humidity", "api_method_all": "humidity: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["expect(typeof (data.humidity)).assertEqual(\"numb", " humidity: ' + data.humidity);\n                e", "Test001  on success humidity: ' + data.humidity)", " humidity: ' + data.humidity);\n                 ", "st005  once success humidity: ' + data.humidity)"], "files": ["SensorOnOffTest.test_Humidity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PedometerDetectionResponse", "api_method_all": "interface PedometerDetectionResponse extends Response {\r\n        scalar: number; \r\n    }", "api_method_name": "PedometerDetectionResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PedometerDetectionResponse", "api_method_name": "scalar", "api_method_all": "scalar: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["expect(typeof (data.scalar)).assertEqual(\"numb", "st005  once success scalar: ' + data.scalar);\n", "ss scalar: ' + data.scalar);\n                 ", "ss scalar: ' + data.scalar);\n                e", "st001  once success scalar: ' + data.scalar);\n"], "files": ["SensorOnOffTest.test_Significant_Motion.js", "SensorOnOffTest.test_Pedometer_Detection.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AmbientTemperatureResponse", "api_method_all": "interface AmbientTemperatureResponse extends Response {\r\n        temperature: number; \r\n    }", "api_method_name": "AmbientTemperatureResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AmbientTemperatureResponse", "api_method_name": "temperature", "api_method_all": "temperature: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["mperature: ' + data.temperature);\n                 ", "st001  once success temperature: ' + data.temperatu", "expect(typeof (data.temperature)).assertEqual(\"numb", "st005  once success temperature: ' + data.temperatu", "mperature: ' + data.temperature);\n                e"], "files": ["SensorOnOffTest.test_Temperature.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BarometerResponse", "api_method_all": "interface BarometerResponse extends Response {\r\n        pressure: number; \r\n    }", "api_method_name": "BarometerResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BarometerResponse", "api_method_name": "pressure", "api_method_all": "pressure: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["Test001  on success pressure: ' + data.pressure)", " pressure: ' + data.pressure);\n                e", "expect(typeof (data.pressure)).assertEqual(\"numb", " pressure: ' + data.pressure);\n                 ", "st005  once success pressure: ' + data.pressure)"], "files": ["SensorOnOffTest.test_Barometer.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HeartRateResponse", "api_method_all": "interface HeartRateResponse extends Response {\r\n        heartRate: number; \r\n    }", "api_method_name": "HeartRateResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HeartRateResponse", "api_method_name": "heartRate", "api_method_all": "heartRate: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["expect(typeof (data.heartRate)).assertEqual(\"numb", "st001  once success heartRate: ' + data.heartRate", "heartRate: ' + data.heartRate);\n                 ", "heartRate: ' + data.heartRate);\n                e", "st005  once success heartRate: ' + data.heartRate"], "files": ["SensorOnOffTest.test_Heart_Rate.js"], "is_white": " ", "desc": " "}, {"api_class_name": "WearDetectionResponse", "api_method_all": "interface WearDetectionResponse extends Response {\r\n        value: number; \r\n    }", "api_method_name": "WearDetectionResponse", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "WearDetectionResponse", "api_method_name": "value", "api_method_all": "value: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["ess value: ' + data.value);\n                 ", "st001  once success value: ' + data.value);\n ", "expect(typeof (data.value)).assertEqual(\"numb", "st005  once success value: ' + data.value);\n ", "ess value: ' + data.value);\n                e"], "files": ["SensorOnOffTest.test_Wear_Detection.js"], "is_white": " ", "desc": " "}]}