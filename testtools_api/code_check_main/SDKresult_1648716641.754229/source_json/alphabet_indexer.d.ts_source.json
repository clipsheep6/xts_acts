{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\alphabet_indexer", "api": [{"api_class_name": "IndexerAlign", "api_method_all": "declare enum IndexerAlign {\n  \n  Left,\n\n  \n  Right,\n}", "api_method_name": "IndexerAlign", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["        .alignStyle(IndexerAlign.Right)\n        .mar", "        .alignStyle(IndexerAlign.Left)\n        .onSe"], "files": ["AlphabetIndexer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IndexerAlign", "api_method_name": "Left", "api_method_all": "Left,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 54, "since": 7, "api_used": "\u662f", "lines": ["tion: BadgePosition.Left,\n            maxCou", ".value.typeDirectionLeft);\n        console.i", "ement).assertEqual('Left')\n        console.i", "       placementPropLeft : this.placementPro", "tLeft:this.placementLeft,\n             place", ", left: this.paddingLeft })\n        .margin(", "sertEqual('placementLeft')\n        expect(ob", "= GradientDirection.LeftTop\n\n  build() {\n   ", "t = Placement.BottomLeft\n  @State placementT", "ement(\"typeDirectionLeft\").getInspector()\n  ", "ll,\n        typeLoopLeft : null,\n        typ", "nStyle(IndexerAlign.Left)\n        .onSelecte", "           placementLeft:this.placementLeft,", "  this.typeDirectionLeft = this.$element(\"ty", "marqueeDirectionPropLeft', 0, async function", "('GradientDirection.Left');\n      expect(obj", "('GradientDirection.LeftTop');\n      console", "('testbadgeplacementLeft START');\n        co", "ement(\"placementPropLeft\").getInspector()\n  ", "       typeDirectionLeft : this.typeDirectio", "ual(Placement.BottomLeft);\n      }\n      let", "('testbadgeplacementLeft', 0, async function", "Equal('typeDirectionLeft')\n        expect(ob", ") {\n          Text('Left').fontSize(25)\n    ", ",\n         placementLeft:null,\n         plac", "tion-'BadgePosition.Left'\" + JSON.stringify(", "  this.placementPropLeft = this.$element(\"pl", "       placementPropLeft : null,\n        pla", "('GradientDirection.LeftBottom');\n      cons", "ment = Placement.TopLeft\n  @State placementO", ": GradientDirection.Left,\n    colors: [[0xAE", ": this.typeDirectionLeft,\n            typeDi", ": GradientDirection.LeftBottom\n          }\n ", ": this.placementPropLeft,\n            placem", "            typeLoopLeft : this.typeLoopLeft", "Left : this.typeLoopLeft,\n            typeRi", "0px\"\n  @State marginLeft: string = \"10px\"\n  ", "ement(\"typeDirectionLeft\").getInspector()\n\n ", "Text(\"BadgePosition.Left\").fontSize(16)\n    ", "       this.typeLoopLeft = this.$element(\"ty", "t, left: this.marginLeft })\n        .constra", "This.value.placementLeft);\n        console.i", "       typeDirectionLeft : null,\n        typ", "  testbadgeplacementLeft\n      * @tc.desc   ", "   testPlacementPropLeft\n     * @tc.desc    ", "qual('BadgePosition.Left');\n      console.lo", "\"5\"\n  @State paddingLeft: string= \"5\"\n  @Sta", "      this.placementLeft = this.$element(\"pl", "tEqual(Placement.TopLeft);\n      }\n      let", ".$element(\"placementLeft\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "placement.ets", "GradientDirectionJsunit.test.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "colorGradient.ets", "gradientDirection.ets", "Text.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IndexerAlign", "api_method_name": "Right", "api_method_all": "Right,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 60, "since": 7, "api_used": "\u662f", "lines": ["  });\n    },\n    setRightButton(e) {\n        ", "qual('BadgePosition.RightTop');\n      console", "('testbadgeplacementRight', 0, async function", "ype: ResponseType = RightClick;\n  @Builder Co", "ual(Placement.BottomRight);\n      }\n      let", ": GradientDirection.RightBottom\n          }\n ", "('testbadgeplacementRightTop', 0, async funct", "nStyle(IndexerAlign.Right)\n        .margin({ ", ": null,\n        typeRight : null,\n    },\n\n   ", ".$element(\"placementRight\").getInspector()\n  ", "       placementPropRight : this.placementPro", "       typeDirectionRight : null,\n        typ", ",\n         placementRightTop:null,\n         p", ": this.typeDirectionRight,\n            typeLo", "tion: BadgePosition.Right,\n            maxCou", "ition-BadgePosition.Right\" + JSON.stringify(o", "htTop:this.placementRightTop,\n             pl", "  testbadgeplacementRightTop\n      * @tc.desc", "Text(\"BadgePosition.RightTop\").fontSize(16)\n ", "tion: BadgePosition.RightTop,\n            max", "           placementRightTop:this.placementRi", "This.value.placementRight);\n        console.i", "ypeRight : this.typeRight,\n        }\n    },\n\n", "       placementPropRight : null,\n        pla", "('GradientDirection.RightBottom');\n      cons", "Right:this.placementRight,\n             place", "()\n        this.typeRight = this.$element(\"ty", "  this.placementPropRight = this.$element(\"pl", "tion-'BadgePosition.RightTop'\" + JSON.stringi", "ft,\n            typeRight : this.typeRight,\n ", "      this.placementRightTop = this.$element(", "('testbadgeplacementRight START');\n        co", ",\n         placementRight:null,\n         plac", "('testbadgeplacementRightTop START');\n       ", ".$element(\"placementRightTop\").getInspector()", "sertEqual('placementRight')\n        expect(ob", "      this.placementRight = this.$element(\"pl", ") {\n          Text('Right').fontSize(25)\n    ", "t = Placement.BottomRight\n\n  @Builder popupBu", "  this.typeDirectionRight = this.$element(\"ty", "       typeDirectionRight : this.typeDirectio", "  testbadgeplacementRight\n      * @tc.desc   ", "qual('BadgePosition.Right');\n      console.lo", "ement(\"typeDirectionRight\").getInspector()\n  ", "tEqual(Placement.TopRight);\n      }\n      let", "ment = Placement.TopRight\n  @State placementT", "           placementRight:this.placementRight", ": this.placementPropRight,\n            placem", "ement(\"placementPropRight\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "GradientDirectionJsunit.test.ets", "placement.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "bindContextMenu.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Interface", "api_method_all": "interface AlphabetIndexerInterface {\n  \n  (value: { arrayValue: Array<string>; selected: number }): AlphabetIndexerAttribute;\n}", "api_method_name": "Interface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Interface", "api_method_name": "value", "api_method_all": "(value: { arrayValue: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Interface", "api_method_name": "selected", "api_method_all": "selected: number }): AlphabetIndexerAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 185, "since": 7, "api_used": "\u662f", "lines": ["or = eventData.data.selectedColor;\n      }\n     ", "\n        }\n        .selectedColor(0x39a2db)\n    ", "FF0000')\n          .selectedColor('#FF0000FF')\n ", " if (eventData.data.selectedColor != null) {\n   ", "opup(true)\n        .selectedFont({ size: 16, wei", "ample01 {\n  private selectedDate: Date = new Dat", "ent === item ? this.selectedIcon : this.normalIc", "lor.Red)\n          .selectedColor(Color.Blue)\n  ", "ct(true)\n          .selectedColor(0x39a2db)\n    ", "FF00DDDD')\n        .selectedColor(0xffffff)\n    ", "ata: {\n            \"selectedColor\": '#330A59F8',", "eExample {\n  @State selectedColor: Color = '#330", "t(false)\n          .selectedColor(0x39a2db)\n    ", "     selected: this.selectedDate,\n        type: ", "s.fruits,\n          selected: this.select,\n     ", "  expect(obj.$attrs.selectedColor).assertEqual('", "ata: {\n            \"selectedColor\": '-0.1',\n    ", "n: true })\n        .selectedColor(0x39a2db)\n    ", "Black)\n            .selectedColor(0xCCCCCC)\n    ", "xpect(objNew.$attrs.selectedColor).assertEqual('", "ata: {\n            \"selectedColor\": '-a',\n      ", "select = jsonString.selectedIndex\n            re", "r.Black)\n          .selectedColor(0xCCCCCC)\n    ", "Group'})\n          .selectedColor(0xed6f21)\n    ", "heckbox2')\n        .selectedColor(0x39a2db)\n    ", ".selectedColor(this.selectedColor)\n        .onCh", "s.splice(jsonString.selectedIndex, 1)\n          ", ".numbers[jsonString.selectedIndex]\n            t", "mg.png\"}])\n        .selected(2)\n        .value('", "t ATTRS_SELECTED = 'selected'\nconst ATTRS_LONG_C", "yValue: this.value, selected: 0 })\n        .colo", "or.Gray)\n          .selectedColor(Color.Blue)\n  ", "alth_heart.png\"))\n  selectedIcon: Resource = ($r", "fontColor)\n        .selectedOptionFont({size: 40", "ull) {\n        this.selectedColor = eventData.da", "heckbox1')\n        .selectedColor(0xed6f21)\n    ", "('toggle')\n        .selectedColor(this.selectedC", ".Gray)\n            .selectedColor(Color.Blue)\n  ", "FF737373')\n        .selectedBackgroundColor('#FF", "2200-1-1'),\n        selected: this.selectedDate,"], "files": ["Select.ets", "PatternLock.ets", "textPickerDialog.ets", "Slider.ets", "AlphabetIndexer.ets", "Constants.ets", "ToggleJsunit.test.ets", "sideBar.ets", "toggle.ets", "checkboxGroup.ets", "datePicker.ets", "dragEvent2.ets", "index.js", "inputProps.test.js", "optionProps.test.js", "ResponseRegion.ets", "dragEvent.ets", "checkbox.ets", "select.ets", "Toggle.ets", "listProps.test.js", "slider.ets", "textareaProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_all": "declare class AlphabetIndexerAttribute extends CommonMethod<AlphabetIndexerAttribute> {\n  \n  onSelected(callback: (index: number) => void): AlphabetIndexerAttribute;\n\n  \n  color(value: ResourceColor): AlphabetIndexerAttribute;\n\n  \n  selectedColor(value: ResourceColor): AlphabetIndexerAttribute;\n\n  \n  popupColor(value: ResourceColor): AlphabetIndexerAttribute;\n\n  \n  selectedBackgroundColor(value: ResourceColor): AlphabetIndexerAttribute;\n\n  \n  popupBackground(value: ResourceColor): AlphabetIndexerAttribute;\n\n  \n  usingPopup(value: boolean): AlphabetIndexerAttribute;\n\n  \n  selectedFont(value: Font): AlphabetIndexerAttribute;\n\n  \n  popupFont(value: Font): AlphabetIndexerAttribute;\n\n  \n  itemSize(value: string | number): AlphabetIndexerAttribute;\n\n  \n  font(value: Font): AlphabetIndexerAttribute;\n\n  \n  alignStyle(value: IndexerAlign): AlphabetIndexerAttribute;\n\n  \n  onSelect(callback: (index: number) => void): AlphabetIndexerAttribute;\n\n  \n  onRequestPopupData(callback: (index: number) => Array<string>): AlphabetIndexerAttribute;\n\n  \n  onPopupSelect(callback: (index: number) => void): AlphabetIndexerAttribute;\n\n  \n  selected(index: number): AlphabetIndexerAttribute;\n\n  \n  popupPosition(value: Position): AlphabetIndexerAttribute;\n}", "api_method_name": "Attribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 26, "since": 0, "api_used": "\u662f", "lines": ["sertEqual('TextTimerAttribute');\n      done();\n  ", " });\n      textTimerAttribute.fontColor(Color.Bla", "ck);\n      textTimerAttribute.fontSize(50);\n     ", "    const textPickerAttribute = new TextPickerAtt", "50);\n      textTimerAttribute.format('hh:mm:ss.ms", "CE_calendar_CalendarAttribute_direction] start to", "CE_calendar_CalendarAttribute_direction', 0, asyn", "ute = new TextPickerAttribute();\n      textPicker", ".info('test'+nameA+'AttributeNameProp START');\n  ", "   it('test'+nameA+'AttributeNamePropNone', 0, as", "   it('test'+nameA+'AttributeNameProp', 0, async ", "e();\n      textTimerAttribute.onTimer((utc: numbe", "     const textTimerAttribute = new TextTimerAttr", "();\n      textPickerAttribute.defaultPickerItemHe", ".info('test'+nameA+'AttributeNamePropNone START')", "CE_calendar_CalendarAttribute_direction] change c", "CE_calendar_CalendarAttribute_direction] START');", "bute = new TextTimerAttribute();\n      textTimerA"], "files": ["animateTransformProps.test.js", "TextPickerJsunit.test.ets", "TextTimerJsunit.test.ets", "animateMotionProps.test.js", "CalendarJsunit.test.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "onSelectedcallback", "api_method_all": "onSelected(callback: (index: number) => void): AlphabetIndexerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "onSelectedcallback", "api_method_all": "onSelected(callback: (index: number) => void): AlphabetIndexerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "color", "api_method_all": "color(value: ResourceColor): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 276, "since": 7, "api_used": "\u662f", "lines": ["(obj.$attrs.divider.color).assertEqual(\"#FFFF", "        radius: 20, color: Color.Gray, offset", "bjNew.$attrs.shadow.color).assertEqual(\"#FF00", " 2.000000;\n  @State color: string = 0xFFFFFF;", " { radius: 'error', color: 'error', offsetX: ", "rt default function colorGradientJsunit() {\n ", " if (eventData.data.colorValues != null) {\n  ", "ata: {\n            \"colorValues\": JSON.string", "  console.info(\"get colorGradient state pages", "ing = 150;\n  @State colorValues: Array = [[0x", "ull) {\n        this.color = eventData.data.co", "bjNew.$attrs.shadow.color).assertEqual(\"#8000", "bjNew.$attrs.shadow.color).assertEqual(\"#FF80", "ull) {\n        this.colorValues = JSON.parse(", "\n        }.border({ color: Color.Black, width", "TRS_SHADOW_COLOR = 'color'\nconst ATTRS_SHADOW", "ection.Top,\n        colors: [[0xAEE1E1, 0.0],", "        color: this.color,\n          startMar", "t(obj.$attrs.shadow.color).assertEqual(\"#FF80", ".border({ width: 5, color: 0x317AF7, radius: ", "    radius: 60,\n    colors:[[0xAEE1E1, 0.0], ", "r({ strokeWidth: 2, color: 0xFFFFFF, startMar", "ata: {\n            \"color\": '0xFF0000'\n      ", "(obj.$attrs.divider.color).assertEqual(\"#FF00", " console.info(\"push colorGradient page result", "radius: 0x7FFFFFFF, color: 0x7FFFFFFF, offset", "      console.info(\"colorGradient beforeEach ", "        uri: 'pages/colorGradient',\n      }\n ", "Direction.Left,\n    colors: [[0xAEE1E1, 0.0],", "s));\n        if (!(\"colorGradient\" == pages.n", " if (eventData.data.color != null) {\n        ", ",\n    end: 359,\n    colors: [[0xAEE1E1, 0.0],", "      console.info(\"colorGradient after each ", "    Text(`text font color ${this.fontColor}`)", "   Text('background color').fontSize(9).width", "arse(eventData.data.colorValues);\n      }\n   ", "ject= { radius: 10, color: Color.Gray, offset", "or = eventData.data.color;\n      }\n      if (", "console.error(\"push colorGradient page error:", "radius: 0x80000000, color: 0x80000000, offset", "bjNew.$attrs.shadow.color).assertEqual(\"#7FFF", "ata: {\n            \"color\": \"#FF0000FF\"\n     ", "fontColor)\n        .colorBlend(Color.Green)\n ", "right: 20, size: 2, color: Color.Blue })\n    ", "  if(eventData.data.colorValues != null) {\n  ", "= \"200px\";\n  @State color: Array = [[0x080808", "okeWidth,\n          color: this.color,\n      "], "files": ["ohosPrompt.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "Qrcode.ets", "Span.ets", "Progress.ets", "toolbarItemProps.test.js", "marquee.ets", "basicabilityapi.test.js", "DividerJsunit.test.ets", "Divider.ets", "border.ets", "systemPrompt.ets", "List.test.ets", "scrollCode.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "gauge.ets", "TextJsunit.test.ets", "swiper.ets", "Blank.ets", "text.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "labelProps.test.js", "image.ets", "ListJsunit.test.ets", "loadingProgress.ets", "stepperProps.test.js", "ratingProps.test.js", "ColorGradientJsunit.test.ets", "PatternLock.ets", "ShapeJsunit.test.ets", "badge.ets", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "pickerProps.test.js", "selectProps.test.js", "span.ets", "NavigatorCode.ets", "BackgroundAndSizeSettingJsunit.test.ets", "mouseEvent.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "divider.ets", "Constants.ets", "progress.ets", "sliderProps.test.js", "WebPage.ets", "inputProps.test.js", "index.js", "progressProps.test.js", "Badge.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "selectedColor", "api_method_all": "selectedColor(value: ResourceColor): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 36, "since": 7, "api_used": "\u662f", "lines": ["xpect(objNew.$attrs.selectedColor).assertEqual('#FF00", "cted: 0 })\n        .selectedColor(0xffffff)\n        .", "t: 50 })\n          .selectedColor('#FFFF0000')\n      ", "r.Black)\n          .selectedColor(0xCCCCCC)\n         ", "false })\n          .selectedColor('#FFFF0000')\n      ", "t(false)\n          .selectedColor(0x39a2db)\n         ", "or.Gray)\n          .selectedColor(Color.Blue)\n       ", "\n        }\n        .selectedColor(0x39a2db)\n        .", " if (eventData.data.selectedColor != null) {\n        ", "ata: {\n            \"selectedColor\": '-a',\n          }", ".selectedColor(this.selectedColor)\n        .onChange(", "or = eventData.data.selectedColor;\n      }\n      if (", ".Gray)\n            .selectedColor(Color.Blue)\n       ", "ata: {\n            \"selectedColor\": '#330A59F8',\n    ", "FF0000')\n          .selectedColor('#FF0000FF')\n      ", "('toggle')\n        .selectedColor(this.selectedColor)", "Black)\n            .selectedColor(0xCCCCCC)\n         ", "heckbox1')\n        .selectedColor(0xed6f21)\n        .", "ata: {\n            \"selectedColor\": '-0.1',\n         ", "  expect(obj.$attrs.selectedColor).assertEqual('#330A", "  expect(obj.$attrs.selectedColor).assertEqual('#FFFF", "FF00DDDD')\n        .selectedColor(0xffffff)\n        .", "is.color2)\n        .selectedColor(this.color3)\n      ", "Group'})\n          .selectedColor(0xed6f21)\n         ", "ull) {\n        this.selectedColor = eventData.data.se", "eExample {\n  @State selectedColor: Color = '#330A59F7", "(8)\n        Button('selectedColor').onClick(() => {\n ", "xpect(objNew.$attrs.selectedColor).assertEqual('#330A", "heckbox2')\n        .selectedColor(0x39a2db)\n        .", "ct(true)\n          .selectedColor(0x39a2db)\n         ", "lor.Red)\n          .selectedColor(Color.Blue)\n       ", "n: true })\n        .selectedColor(0x39a2db)\n        .", " true })\n          .selectedColor('#FFFF0000')\n      "], "files": ["ResponseRegion.ets", "checkbox.ets", "Toggle.ets", "AlphabetIndexer.ets", "slider.ets", "ToggleJsunit.test.ets", "PatternLock.ets", "toggle.ets", "checkboxGroup.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "popupColor", "api_method_all": "popupColor(value: ResourceColor): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["tIndexer')\n        .popupColor('#FF737373')\n      ", "askColor,\n          popupColor: Color.White,\n     ", "Indexer1')\n        .popupColor('#FF737373')\n      ", "33000000,\n          popupColor: Color.White,\n     "], "files": ["bindPopup.ets", "placement.ets", "AlphabetIndexer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "selectedBackgroundColor", "api_method_all": "selectedBackgroundColor(value: ResourceColor): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["FF737373')\n        .selectedBackgroundColor('#FF0000E6')\n      "], "files": ["AlphabetIndexer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "popupBackground", "api_method_all": "popupBackground(value: ResourceColor): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["FF0000E6')\n        .popupBackground('#FF00DDDD')\n      "], "files": ["AlphabetIndexer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "usingPopup", "api_method_all": "usingPopup(value: boolean): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["FF00DDDD')\n        .usingPopup(false)\n        .sel", "FF00DDDD')\n        .usingPopup(true)\n        .sele"], "files": ["AlphabetIndexer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "selectedFont", "api_method_all": "selectedFont(value: Font): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["pup(false)\n        .selectedFont({ size: 16, weight:", "opup(true)\n        .selectedFont({ size: 16, weight:"], "files": ["AlphabetIndexer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "popupFont", "api_method_all": "popupFont(value: Font): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["Regular })\n        .popupFont({ size: 30, weight:", "Lighter })\n        .popupFont({ size: 30, weight:"], "files": ["AlphabetIndexer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "itemSize", "api_method_all": "itemSize(value: string | number): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [".Italic })\n        .itemSize(28)\n        .alignS", ".Normal })\n        .itemSize(28)\n        .alignS"], "files": ["AlphabetIndexer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "font", "api_method_all": "font(value: Font): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1278, "since": 7, "api_used": "\u662f", "lines": ["g container: grid').fontSize(20).fontColor(C", "height(40)\n        .fontSize(16)\n        .ba", "   Text('saturate').fontSize(15).fontColor(0", "t('2')\n            .fontSize(20)\n           ", "').key(\"alignSelf\").fontSize(9).fontColor(0x", "nSelf\").fontSize(9).fontColor(0xCCCCCC).widt", "margin(30)\n        .fontSize(20)\n        .on", "ETS TEST')\n        .fontSize(50)\n        .fo", "rast').fontSize(15).fontColor(0xCCCCCC).widt", "blur').fontSize(15).fontColor(0xCCCCCC).widt", "Basis').fontSize(9).fontColor(0xCCCCCC).widt", "  Text('hueRotate').fontSize(15).fontColor(0", "adow').fontSize(15).fontColor(0xCCCCCC).widt", " Text('alignItems').fontSize(9).fontColor(0x", " row').fontSize(20).fontColor(Color.Black).w", " Text('flexShrink').fontSize(9).fontColor(0x", "  Text('grayscale').fontSize(15).fontColor(0", "     Text('shadow').fontSize(15).fontColor(0", "  Text('font blur').fontSize(15).fontColor(0", "bb2cb)\n            .fontSize(20)\n           ", "cale').fontSize(15).fontColor(0xCCCCCC).widt", "t('1')\n            .fontSize(20)\n           ", "       Text('Left').fontSize(25)\n        }\n ", "ty 4').fontSize(20).fontColor(Color.Black).w", "t('4')\n            .fontSize(20)\n           ", "ness').fontSize(15).fontColor(0xCCCCCC).widt", "xGrow\").fontSize(9).fontColor(0xCCCCCC).widt", "ext('backdropBlur').fontSize(15).fontColor(0", "grid').fontSize(20).fontColor(Color.Black).w", "   Text('contrast').fontSize(15).fontColor(0", "vert').fontSize(15).fontColor(0xCCCCCC).widt", "     Text('Center').fontSize(25)\n        }\n ", "Blur').fontSize(15).fontColor(0xCCCCCC).widt", "displayPriority 4').fontSize(20).fontColor(C", "ntSize(50)\n        .fontWeight(FontWeight.Bo", "Items').fontSize(9).fontColor(0xCCCCCC).widt", "t('3')\n            .fontSize(20)\n           ", "ng container: row').fontSize(20).fontColor(C", " Text('brightness').fontSize(15).fontColor(0", "      Text('Right').fontSize(25)\n        }\n ", "w').key(\"flexGrow\").fontSize(9).fontColor(0x", "  Text('flexBasis').fontSize(9).fontColor(0x", "tate').fontSize(15).fontColor(0xCCCCCC).widt", "hrink').fontSize(9).fontColor(0xCCCCCC).widt", "     Text('invert').fontSize(15).fontColor(0", "10 }) {\n      Text('font blur').fontSize(15)", "2cb)\n              .fontSize(40)\n           ", "rate').fontSize(15).fontColor(0xCCCCCC).widt"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "placement.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "PanDirectionJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "Stack.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "stepper.ets", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "lazyForEach.ets", "listItem.ets", "grid.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "rating.ets", "Path.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "GestureModeJsunit.test.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "Calendar.ets", "refresh.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "alignStyle", "api_method_all": "alignStyle(value: IndexerAlign): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["emSize(28)\n        .alignStyle(IndexerAlign.Right)", "emSize(28)\n        .alignStyle(IndexerAlign.Left)\n"], "files": ["AlphabetIndexer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "onSelectcallback", "api_method_all": "onSelect(callback: (index: number) => void): AlphabetIndexerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "onSelectcallback", "api_method_all": "onSelect(callback: (index: number) => void): AlphabetIndexerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "onRequestPopupDatacallback", "api_method_all": "onRequestPopupData(callback: (index: number) => Array<string>): AlphabetIndexerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "onRequestPopupDatacallback", "api_method_all": "onRequestPopupData(callback: (index: number) => Array<string>): AlphabetIndexerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "onPopupSelectcallback", "api_method_all": "onPopupSelect(callback: (index: number) => void): AlphabetIndexerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "onPopupSelectcallback", "api_method_all": "onPopupSelect(callback: (index: number) => void): AlphabetIndexerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "selected", "api_method_all": "selected(index: number): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 185, "since": 7, "api_used": "\u662f", "lines": ["or = eventData.data.selectedColor;\n      }\n     ", "\n        }\n        .selectedColor(0x39a2db)\n    ", "FF0000')\n          .selectedColor('#FF0000FF')\n ", " if (eventData.data.selectedColor != null) {\n   ", "opup(true)\n        .selectedFont({ size: 16, wei", "ample01 {\n  private selectedDate: Date = new Dat", "ent === item ? this.selectedIcon : this.normalIc", "lor.Red)\n          .selectedColor(Color.Blue)\n  ", "ct(true)\n          .selectedColor(0x39a2db)\n    ", "FF00DDDD')\n        .selectedColor(0xffffff)\n    ", "ata: {\n            \"selectedColor\": '#330A59F8',", "eExample {\n  @State selectedColor: Color = '#330", "t(false)\n          .selectedColor(0x39a2db)\n    ", "     selected: this.selectedDate,\n        type: ", "s.fruits,\n          selected: this.select,\n     ", "  expect(obj.$attrs.selectedColor).assertEqual('", "ata: {\n            \"selectedColor\": '-0.1',\n    ", "n: true })\n        .selectedColor(0x39a2db)\n    ", "Black)\n            .selectedColor(0xCCCCCC)\n    ", "xpect(objNew.$attrs.selectedColor).assertEqual('", "ata: {\n            \"selectedColor\": '-a',\n      ", "select = jsonString.selectedIndex\n            re", "r.Black)\n          .selectedColor(0xCCCCCC)\n    ", "Group'})\n          .selectedColor(0xed6f21)\n    ", "heckbox2')\n        .selectedColor(0x39a2db)\n    ", ".selectedColor(this.selectedColor)\n        .onCh", "s.splice(jsonString.selectedIndex, 1)\n          ", ".numbers[jsonString.selectedIndex]\n            t", "mg.png\"}])\n        .selected(2)\n        .value('", "t ATTRS_SELECTED = 'selected'\nconst ATTRS_LONG_C", "yValue: this.value, selected: 0 })\n        .colo", "or.Gray)\n          .selectedColor(Color.Blue)\n  ", "alth_heart.png\"))\n  selectedIcon: Resource = ($r", "fontColor)\n        .selectedOptionFont({size: 40", "ull) {\n        this.selectedColor = eventData.da", "heckbox1')\n        .selectedColor(0xed6f21)\n    ", "('toggle')\n        .selectedColor(this.selectedC", ".Gray)\n            .selectedColor(Color.Blue)\n  ", "FF737373')\n        .selectedBackgroundColor('#FF", "2200-1-1'),\n        selected: this.selectedDate,"], "files": ["Select.ets", "PatternLock.ets", "textPickerDialog.ets", "Slider.ets", "AlphabetIndexer.ets", "Constants.ets", "ToggleJsunit.test.ets", "sideBar.ets", "toggle.ets", "checkboxGroup.ets", "datePicker.ets", "dragEvent2.ets", "index.js", "inputProps.test.js", "optionProps.test.js", "ResponseRegion.ets", "dragEvent.ets", "checkbox.ets", "select.ets", "Toggle.ets", "listProps.test.js", "slider.ets", "textareaProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "popupPosition", "api_method_all": "popupPosition(value: Position): AlphabetIndexerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}