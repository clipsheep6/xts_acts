{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\scroll", "api": [{"api_class_name": "ScrollDirection", "api_method_all": "declare enum ScrollDirection {\n  \n  Vertical,\n\n  \n  Horizontal,\n\n  \n  Free,\n\n  \n  None,\n}", "api_method_name": "ScrollDirection", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["        .scrollable(ScrollDirection.Horizontal)\n\n      ", "        .scrollable(ScrollDirection.Vertical)\n\n        ", ": ScrollDirection = ScrollDirection.Vertical;\n  @State ", ")\n      .scrollable(ScrollDirection.None)\n      .scroll", ")\n      .scrollable(ScrollDirection.Free)\n      .scroll", "}\n      .scrollable(ScrollDirection.Vertical)\n      .sc", "lable).assertEqual('ScrollDirection.Vertical');\n      d", "lable).assertEqual('ScrollDirection.Horizontal')\n      ", "lable).assertEqual('ScrollDirection.None')\n      expect", " @State scrollable: ScrollDirection = ScrollDirection.N", " @State scrollable: ScrollDirection = ScrollDirection.V", "     \"scrollable\": \"ScrollDirection.Vertical\"\n         ", "lable).assertEqual('ScrollDirection.Vertical');\n      e", ")\n      .scrollable(ScrollDirection.Horizontal)\n\n      ", "\n      }.scrollable(ScrollDirection.Vertical).scrollBar", ": ScrollDirection = ScrollDirection.None\n  @State scrol", "lable).assertEqual('ScrollDirection.Vertical')\n      ex"], "files": ["scrollBar.ets", "ScrollJsunit.test.ets", "canvas2.ets", "ScrollBar.ets", "scrollCode.ets", "canvas.ets", "Scroll.ets", "ScrollCodeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollDirection", "api_method_name": "Vertical", "api_method_all": "Vertical,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 99, "since": 7, "api_used": "\u662f", "lines": ["nValue: Axis = Axis.Vertical\n  @State value: num", "ber = 40\n  @State inVerticalSetValue: number = 4", "ble(ScrollDirection.Vertical).scrollBar(BarState", "er = 40\n  @State outVerticalSetValue: number = 4", "             this.inVerticalSetValue = value\n   ", "'ScrollBarDirection.Vertical');\n      console.in", ".listDirection(Axis.Vertical)\n        .key('Navi", " getInspectorByKey('VerticalAlign');\n      conso", "beforeEach get enumsVerticalAlign state pages.na", "th: 1 }).alignItems(VerticalAlign.Bottom).justif", "ection: Axis = Axis.Vertical;\n  @State editMode:", "n = ScrollDirection.Vertical;\n  @State scrollBar", "\n      }.alignItems(VerticalAlign.Center).height", " console.info('enumsVerticalAlignTest_0100 START", " ScrollBarDirection.Vertical;\n  @State stateValu", "'ScrollBarDirection.Vertical');\n      done();\n  ", "  \"direction\": Axis.Vertical,\n          }\n      ", "beforeEach get enumsVerticalAlign state pages:' ", "h: 1 })\n      .key('VerticalAlign')\n    }.width(", " console.info('enumsVerticalAlignTest_0100 END')", "ms: VerticalAlign = VerticalAlign.Center\n  @Stat", "   uri: 'pages/enumsVerticalAlign',\n      }\n    ", "    direction: Axis.Vertical\n          })\n      ", "ble(ScrollDirection.Vertical)\n\n        ScrollBar", "Items).assertEqual('VerticalAlign.Center');\n    ", "al('ScrollDirection.Vertical');\n      done();\n  ", ").assertEqual('Axis.Vertical');\n      expect(obj", "            this.outVerticalSetValue = value\n   ", " @State alignItems: VerticalAlign = VerticalAlig", "\": \"ScrollDirection.Vertical\"\n          }\n      ", "th: 1 }).alignItems(VerticalAlign.Center).justif", ".listDirection(Axis.Vertical) // \u6392\u5217\u65b9\u5411\n        .d", "        Text(this.inVerticalSetValue.toFixed(0))", "al('ScrollDirection.Vertical');\n      expect(obj", "1F3F5)\n\n      Text('Vertical divider').fontSize(", "eforeEach push enumsVerticalAlign page result:' ", "        if (!('enumsVerticalAlign' == pages.name", "       Text(this.outVerticalSetValue.toFixed(0))", "\n      }.alignItems(VerticalAlign.Top).height('1", "  });\n\n    it('enumsVerticalAlignTest_0100', 0, ", "\n      }.alignItems(VerticalAlign.Center).width(", "fault function enumsVerticalAlignJsunit() {\n  de", " {\n  describe('enumsVerticalAlign', function () ", "eforeEach push enumsVerticalAlign page error:' +", "     value: this.outVerticalSetValue,\n          ", "      value: this.inVerticalSetValue,\n          ", " console.info(\"enumsVerticalAlignTest_0100 compo"], "files": ["dividerProps.test.js", "canvas2.ets", "ScrollBarJsunit.test.ets", "tabsProps.test.js", "canvas.ets", "Row.ets", "Navigation.ets", "divider.ets", "enumsVerticalAlign.ets", "ScrollerBarJsunit.test.ets", "navigation.ets", "Scroll.ets", "videoProps.test.js", "EnmusHorizontalAlignJsunit.test.ets", "swiperProps.test.js", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "List.ets", "RowJsunit.test.ets", "index.js", "ScrollCodeJsunit.test.ets", "edgeEffect.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "slider.ets", "ScrollJsunit.test.ets", "Calendar.ets", "ListJsunit.test.ets", "ScrollBar.ets", "row.ets", "scrollCode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollDirection", "api_method_name": "Horizontal", "api_method_all": "Horizontal,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 86, "since": 7, "api_used": "\u662f", "lines": ["Items).assertEqual('HorizontalAlign.Center')\n     ", "Items).assertEqual('HorizontalAlign.End');\n      c", "  });\n\n    it('enumsHorizontalAlignTest_0100', 0, ", "   uri: 'pages/enumsHorizontalAlign',\n      }\n    ", "eforeEach push enumsHorizontalAlign page error:' +", "Items).assertEqual('HorizontalAlign.Center');\n    ", "orationValue\": Axis.Horizontal\n          }\n       ", "Column0 alignItems-'HorizontalAlign.Center':\" + JS", "istDirection\": Axis.Horizontal\n          }\n       ", "rection: Axis= Axis.Horizontal\n  @State Begin: num", ".$attrs.alignItems-'HorizontalAlign.Start':\" + JSO", " ScrollBarDirection.Horizontal\n      };\n      try ", "t.ets';\nimport enmusHorizontalAlignJsunit from './", " getInspectorByKey('HorizontalAlign');\n      conso", "eforeEach push enumsHorizontalAlign page result:' ", " {\n  describe('enumsHorizontalAlign', function () ", "Column2 alignItems-'HorizontalAlign.End':\" + JSON.", " console.info(\"enumsHorizontalAlignTest_0100 compo", "\n      }.alignItems(HorizontalAlign.Start).width('", ").assertEqual('Axis.Horizontal');\n      console.in", "\n      }.alignItems(HorizontalAlign.End).width('90", "\n      }.alignItems(HorizontalAlign.Center).width(", "beforeEach get enumsHorizontalAlign state pages:' ", "        .alignItems(HorizontalAlign.Center)\n\n     ", ": HorizontalAlign = HorizontalAlign.Start;\n\n  onPa", "Column1 alignItems-'HorizontalAlign.Start':\" + JSO", " @State alignItems: HorizontalAlign = HorizontalAl", "ingJsunit();\n  enmusHorizontalAlignJsunit();\n}", "h('100%')\n    .key('HorizontalAlign')\n  }\n}\n", "Items(this.toggle ? HorizontalAlign.Start : Horizo", "Items).assertEqual('HorizontalAlign.Start');\n     ", "       \"alignItems\":HorizontalAlign.Center\n       ", "Items).assertEqual('HorizontalAlign.Start')\n      ", "Jsunit from './EnmusHorizontalAlignJsunit.test.ets", " console.info('enumsHorizontalAlignTest_0100 START", " console.info('enumsHorizontalAlignTest_0100 END')", "    direction: Axis.Horizontal,\n          reverse:", "en }) {\n      Text('Horizontal divider').fontSize(", "beforeEach get enumsHorizontalAlign state pages.na", "ection: Axis = Axis.Horizontal;\n  @State weekStyle", "zontalAlign.Start : HorizontalAlign.Center)\n  }\n\n ", "ble(ScrollDirection.Horizontal)\n\n      Scroll() {\n", "        .alignItems(HorizontalAlign.End)\n\n        ", "        .alignItems(HorizontalAlign.Start)\n\n      ", "===============enumsHorizontalAlign test beforeEac"], "files": ["ScrollBarJsunit.test.ets", "Slider.ets", "enumsHorizontalAlign.ets", "divider.ets", "column.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "videoProps.test.js", "EnmusHorizontalAlignJsunit.test.ets", "GridContainer.ets", "index.js", "ColumnJsunit.test.ets", "calendar.ets", "progressProps.test.js", "ScrollJsunit.test.ets", "Calendar.ets", "Column.ets", "ListJsunit.test.ets", "ScrollBar.ets", "List.test.ets", "motionPath.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollDirection", "api_method_name": "Free", "api_method_all": "Free,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["       this.fillPropFreeze = this.$element(\"", "lThis.value.fillPropFreeze);\n        console", "s.$element(\"fillPropFreeze\").getInspector()\n", "NavigationTitleMode.Free)\n      .hideTitleBa", "ssertEqual('fillPropFreeze')\n        expect(", "ble(ScrollDirection.Free)\n      .scrollBar(B", "est'+nameA+'FillPropFreeze START');\n        ", "eeze : this.fillPropFreeze,\n            fill", "ll,\n        fillPropFreeze : null,\n        f", "est'+nameA+'FillPropFreeze', 0, async functi", "NavigationTitleMode.Free)\n    }\n  }\n}\n\n\n", "NavigationTitleMode.Free\n\n  private stateCha", "            fillPropFreeze : this.fillPropFr"], "files": ["animateTransformProps.test.js", "Navigation.ets", "animateMotionProps.test.js", "index.js", "navigation.ets", "Scroll.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollDirection", "api_method_name": "None", "api_method_all": "None,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5542, "since": 7, "api_used": "\u662f", "lines": ["('GradientDirection.None');\n      console.in", ".objectFit(ImageFit.None)\n          .objectR", "rtEqual(\"EdgeEffect.None\");\n      done();\n  ", ".objectFit(ImageFit.None).width(110).height(", ": GradientDirection.None\n          }\n       ", "ton === MouseButton.None) {\n            this", "(ImageInterpolation.None)\n          .renderM", "\"TextDecorationType.None\\\",\\\"color\\\":\\\"#FFFF", "Effect = EdgeEffect.None\n\n  build() {\n    St", "'ImageInterpolation.None')\n      expect(obj.", " .editable(EditMode.None)\n          .key('li", "   \"sticky\": Sticky.None\n          }\n       ", "assertEqual('Sticky.None');\n      console.in", "n = ScrollDirection.None\n  @State scrollBarC", "sibility(Visibility.None)\n        .fontWeigh", "fillMode = FillMode.None\n          try {\n   ", "this.eventAction = 'None'\n          }\n      ", " TextDecorationType.None;\n\n  build() {\n    F", "rtEqual('EdgeEffect.None');\n      expect(obj", "flow\": TextOverflow.None,\n          }\n      ", " TextDecorationType.None, color: Color.Red }", "rtEqual(\"Visibility.None\")\n      expect(obj.", "geEffect(EdgeEffect.None)\n        .chainAnim", "bility\": Visibility.None,\n          }\n      ", "FillMode = FillMode.None\n  @State reverse: b", "sertEqual('ImageFit.None')\n      expect(obj.", " .fillMode(FillMode.None).iterations(this.it", "ion === MouseAction.None) {\n            this", "erflow(TextOverflow.None)\n        .textCase(", "          .overlay('None', { align: Alignmen", "\"TextDecorationType.None\", color: \"#FFFF0000", " TextDecorationType.None, \"color\": Color.Red", "Equal('TextOverflow.None');\n      console.in", "rtEqual('Visibility.None');\n      console.in", "ssertEqual(FillMode.None);\n      }\n      let", "ble(ScrollDirection.None)\n      .scrollBar(B", "Effect = EdgeEffect.None;\n  @State chainAnim", "al('ScrollDirection.None')\n      expect(obj.", "'TextDecorationType.None');\n      expect(dec", "       Text('sticky:None , item1111')\n      ", "\"TextDecorationType.Noneh\", color: \"#FFFF000", "this.eventButton = 'None'\n          }\n      ", "number = EdgeEffect.None\n  @State autoPlay: ", "    }.sticky(Sticky.None)\n          .editabl"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "toolbarProps.test.js", "imageFit.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "badgeProps.test.js", "FillModeJsunit.test.ets", "dialogProps.test.js", "Image.ets", "formProps.test.js", "ListItem.ets", "stackProps.test.js", "Text.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "Scroll.ets", "text.ets", "canvasProps.test.js", "VisibilityJsunit.test.ets", "edgeEffect.ets", "richtextProps.test.js", "labelProps.test.js", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "marqueeProps.test.js", "imageAnimatorProps.test.js", "tabsProps.test.js", "qrcodeProps.test.js", "popupProps.test.js", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "List.ets", "optionProps.test.js", "animateTransformProps.test.js", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "gridColProps.test.js", "imageAnimator.ets", "span.ets", "buttonProps.test.js", "animateProps.test.js", "mouseEvent.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "chartProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "panelProps.test.js", "menuProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scroller", "api_method_all": "declare class Scroller {\n  \n  constructor();\n\n  \n  scrollTo(value: {\n    xOffset: number | string;\n    yOffset: number | string;\n    animation?: { duration: number; curve: Curve };\n  });\n\n  \n  scrollEdge(value: Edge);\n\n  \n  scrollPage(value: { next: boolean; direction?: Axis });\n\n  \n  currentOffset();\n\n  \n  scrollToIndex(value: number);\n}", "api_method_name": "Scroller", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["er1: Scroller = new Scroller();\n  private scroll", "  private scroller: Scroller = new Scroller()\n  ", "ler: Scroller = new Scroller()\n  private arr: nu", "er2: Scroller = new Scroller();\n  private scroll", " Page\";\n  scroller: Scroller = new Scroller();\n\n", "r = 30;\n  scroller: Scroller = new Scroller()\n  ", "ollbarTest from  './ScrollerBarJsunit.test.ets';", "ler: Scroller = new Scroller();\n\n  onPageShow() ", " private scroller2: Scroller = new Scroller();\n ", "er3: Scroller = new Scroller();\n  private arr1: ", " private scroller3: Scroller = new Scroller();\n ", " private scroller1: Scroller = new Scroller();\n ", "ler: Scroller = new Scroller();\n  private settin", "  private scroller: Scroller = new Scroller();\n "], "files": ["scrollBar.ets", "canvas2.ets", "ScrollBar.ets", "List.test.ets", "scrollCode.ets", "canvas.ets", "Scroll.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Scroller", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Scroller", "api_method_name": "scrollTo", "api_method_all": "scrollTo(value: {\n    xOffset: number | string;\n    yOffset: number | string;\n    animation?: { duration: number; curve: Curve };\n  });", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["      this.scroller.scrollTo({\n                x", " {\n                \"scrollToIndex\": 10,\n        ", "pect(eventData.data.scrollToIndex).assertEqual(1", "    });\n    },\n\n    scrollTouchUp() {\n        pr", "          message: 'scrollTop'\n        });\n    }", "    });\n    },\n\n    scrollTop() {\n        prompt", "      this.scroller.scrollToIndex(0)\n           ", "      this.scroller.scrollTo({ xOffset: 0, yOffs", "          message: 'scrollTouchUp'\n        });\n "], "files": ["scrollCode.ets", "index.js", "Scroll.ets", "ScrollCodeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Scroller", "api_method_name": "scrollEdge", "api_method_all": "scrollEdge(value: Edge);", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["      this.scroller.scrollEdge(Edge.Top)\n        }", "      this.scroller.scrollEdge(Edge.Top)\n         "], "files": ["scrollCode.ets", "Scroll.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Scroller", "api_method_name": "scrollPage", "api_method_all": "scrollPage(value: { next: boolean; direction?: Axis });", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["True:null,\n         scrollPageFalse:null,\n        ", ",5,6,7,8],\n         scrollPageTrue:null,\n         ", "is.scrollPageFalse, scrollPageNone:this.scrollPage", "rs.id).assertEqual('scrollPageNone')\n        expec", "*/\n     it('testlistscrollPageFalse', 0, async fun", "ne = this.$element(\"scrollPageNone\").getInspector(", "c.name      testlistscrollPageTrue\n      * @tc.des", "nsole.info('testlistscrollPageNone START');\n      ", "nsole.info('testlistscrollPageFalse START');\n     ", "scrollPageTrue:this.scrollPageTrue,\n             s", "se(globalThis.value.scrollPageFalse);\n        cons", "rs.id).assertEqual('scrollPageFalse')\n        expe", "/\n      it('testlistscrollPageNone', 0, async func", "      this.scroller.scrollPage({ next: true })\n   ", "tor()\n         this.scrollPageNone = this.$element", "se = this.$element(\"scrollPageFalse\").getInspector", "      this.scroller.scrollPage({\n                n", "ue = this.$element(\"scrollPageTrue\").getInspector(", "eTrue,\n             scrollPageFalse:this.scrollPag", " */\n    it('testlistscrollPageTrue', 0, async func", "es(){\n         this.scrollPageTrue = this.$element", "nsole.info('testlistscrollPageTrue START');\n      ", "alse:null,\n         scrollPageNone:null,\n         ", "tor()\n         this.scrollPageFalse = this.$elemen", "crollPageFalse:this.scrollPageFalse, scrollPageNon", " this.showPropNone, scrollPageTrue:this.scrollPage", "scrollPageNone:this.scrollPageNone,\n             c", "se(globalThis.value.scrollPageNone);\n        conso", "se(globalThis.value.scrollPageTrue);\n        conso", "rs.id).assertEqual('scrollPageTrue')\n        expec", "c.name      testlistscrollPageNone\n      * @tc.des", "c.name      testlistscrollPageFalse\n      * @tc.de"], "files": ["scrollCode.ets", "listProps.test.js", "Scroll.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Scroller", "api_method_name": "currentOffset", "api_method_all": "currentOffset();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["fset: this.scroller.currentOffset().yOffset + 100 })\n", "      this.scroller.currentOffset()\n            })\n  "], "files": ["scrollCode.ets", "Scroll.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Scroller", "api_method_name": "scrollToIndex", "api_method_all": "scrollToIndex(value: number);", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["      this.scroller.scrollToIndex(0)\n              co", "pect(eventData.data.scrollToIndex).assertEqual(10)\n  ", " {\n                \"scrollToIndex\": 10,\n             "], "files": ["scrollCode.ets", "Scroll.ets", "ScrollCodeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollInterface", "api_method_all": "interface ScrollInterface {\n  \n  (scroller?: Scroller): ScrollAttribute;\n}", "api_method_name": "ScrollInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollInterface", "api_method_name": "scroller", "api_method_all": "(scroller?: Scroller): ScrollAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": ["        ScrollBar({ scroller: this.scroller2, di", "roller();\n  private scroller2: Scroller = new Sc", "\n              this.scroller.scrollPage({\n      ", ")\n      Scroll(this.scroller) {\n        Column()", "t: 0, yOffset: this.scroller.currentOffset().yOf", "{\n      Scroll(this.scroller) {\n        Column()", "dth: number = 30;\n  scroller: Scroller = new Scr", "ar({ scroller: this.scroller, direction: this.di", "        ScrollBar({ scroller: this.scroller, dir", "ar({ scroller: this.scroller2, direction: Scroll", "        Scroll(this.scroller) {\n          Flex({", "Example {\n  private scroller1: Scroller = new Sc", "        ScrollBar({ scroller: this.scroller1, di", "roller();\n  private scroller3: Scroller = new Sc", "Example {\n  private scroller: Scroller = new Scr", "\n              this.scroller.currentOffset()\n   ", "ar({ scroller: this.scroller1, direction: Scroll", "   }\n          this.scroller.scrollPage({ next: ", "\n              this.scroller.scrollEdge(Edge.Top", "\n              this.scroller.scrollTo({\n        ", " = \"Scroll Page\";\n  scroller: Scroller = new Scr", "        Scroll(this.scroller2) {\n          Flex(", "        Scroll(this.scroller1) {\n          Flex(", "=> {\n          this.scroller.scrollTo({ xOffset:", "=> {\n          this.scroller.scrollEdge(Edge.Top", "\n              this.scroller.scrollToIndex(0)\n  "], "files": ["scrollBar.ets", "canvas2.ets", "ScrollBar.ets", "scrollCode.ets", "canvas.ets", "Scroll.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_all": "declare class ScrollAttribute extends CommonMethod<ScrollAttribute> {\n  \n  scrollable(value: ScrollDirection): ScrollAttribute;\n\n  \n  onScroll(event: (xOffset: number, yOffset: number) => void): ScrollAttribute;\n\n  \n  onScrollEdge(event: (side: Edge) => void): ScrollAttribute;\n\n  \n  onScrollEnd(event: () => void): ScrollAttribute;\n\n  \n  scrollBar(barState: BarState): ScrollAttribute;\n\n  \n  scrollBarColor(color: Color | number | string): ScrollAttribute;\n\n  \n  scrollBarWidth(value: number | string): ScrollAttribute;\n\n  \n  edgeEffect(edgeEffect: EdgeEffect): ScrollAttribute;\n}", "api_method_name": "ScrollAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "scrollable", "api_method_all": "scrollable(value: ScrollDirection): ScrollAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 114, "since": 7, "api_used": "\u662f", "lines": ["le = eventData.data.scrollable;\n      }\n      if (", "is.vertical)\n      .scrollable(this.scrollable)\n  ", "State.Off)\n        .scrollable(ScrollDirection.Ver", " console.info(\"this.scrollable:\" + this.scrollable", "ScrollCode\")\n      .scrollable(this.scrollable)\n  ", ".height(100)\n      .scrollable(ScrollDirection.Hor", "ght('350%')\n      }.scrollable(ScrollDirection.Ver", "   .scrollable(this.scrollable)\n      .scrollBar(t", "bleValue != null && scrollableValue.length != 0) {", "ollCode_002] change scrollable error: \" + err.mess", "xpect(objNew.$attrs.scrollable).assertEqual(false)", "umber = 20\n  @State scrollable: ScrollDirection = ", "  expect(obj.$attrs.scrollable).assertEqual(true);", "s null or empty \" + scrollableValue);\n      }\n    ", "ean = true\n  @State scrollable: boolean = true\n  @", "ata: {\n            \"scrollable\": \"false53\",\n      ", "ull) {\n        this.scrollable = eventData.data.sc", "  expect(obj.$attrs.scrollable).assertEqual(false)", "ue = eventData.data.scrollable;\n      console.info", "ntData));\n      var scrollableValue = eventData.da", "leValue);\n      if (scrollableValue != null && scr", "ata: {\n            \"scrollable\": \"false\",\n        ", "3\")\n          Text(\"scrollable4\")\n          Text(\"", "4\")\n          Text(\"scrollable1\")\n          Text(\"", "ATTRS_SCROLLABLE = 'scrollable'\nconst ATTRS_CLICKA", "ght('100%')\n      }.scrollable(ScrollDirection.Ver", "  this.scrollable = scrollableValue;\n        conso", "   .scrollable(this.scrollable)\n      .barMode(thi", " if (eventData.data.scrollable != null) {\n        ", "   }\n      }\n      .scrollable(ScrollDirection.Ver", "      console.info(\"scrollableValue is null or emp", "      console.info(\"scrollableValue:\" + scrollable", "30)\n          Text(\"scrollable1\")\n          Text(\"", "ata: {\n            \"scrollable\": \"ScrollDirection.", "= 0) {\n        this.scrollable = scrollableValue;\n", "scrollable:\" + this.scrollable);\n      } else {\n  ", "1\")\n          Text(\"scrollable2\")\n          Text(\"", "  expect(obj.$attrs.scrollable).assertEqual('Scrol", "2\")\n          Text(\"scrollable3\")\n          Text(\"", "scrollableValue:\" + scrollableValue);\n      if (sc", "rollCode {\n  @State scrollable: ScrollDirection = ", "ata: {\n            \"scrollable\": \"avc12321\",\n     "], "files": ["index.js", "tabs.ets", "scrollBar.ets", "tabContentProps.test.js", "Tab.ets", "TabsJsunit.test.ets", "Constants.ets", "ScrollJsunit.test.ets", "CheckboxGroupJsunit.test.ets", "canvas2.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "ScrollBar.ets", "scrollCode.ets", "canvas.ets", "Scroll.ets", "ScrollCodeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "onScrollevent", "api_method_all": "onScroll(event: (xOffset: number, yOffset: number) => void): ScrollAttribute;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "onScrollevent", "api_method_all": "onScroll(event: (xOffset: number, yOffset: number) => void): ScrollAttribute;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "onScrollEdgeevent", "api_method_all": "onScrollEdge(event: (side: Edge) => void): ScrollAttribute;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "onScrollEdgeevent", "api_method_all": "onScrollEdge(event: (side: Edge) => void): ScrollAttribute;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "onScrollEndevent", "api_method_all": "onScrollEnd(event: () => void): ScrollAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "onScrollEndevent", "api_method_all": "onScrollEnd(event: () => void): ScrollAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "scrollBar", "api_method_all": "scrollBar(barState: BarState): ScrollAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 109, "since": 7, "api_used": "\u662f", "lines": [" console.info(\"this.scrollBarColor:\" + this.scrol", "s null or empty \" + scrollBarColorValue);\n      }", "ue = eventData.data.scrollBarColor;\n      console", "ue = eventData.data.scrollBarWidth;\n      console", "BarValue != null && scrollBarValue.length != 0) {", "      console.info(\"scrollBarValue:\" + scrollBarV", "thValue);\n      if (scrollBarWidthValue != null &", "llBarColorValue:\" + scrollBarColorValue);\n      i", "s null or empty \" + scrollBarWidthValue);\n      }", ".Vertical;\n  @State scrollBar: BarState = BarStat", "llBarColor:\" + this.scrollBarColor);\n      } else", "= 0) {\n        this.scrollBar = scrollBarValue;\n ", "lorValue != null && scrollBarColorValue.length !=", ";\n      }\n      var scrollBarValue = eventData.da", "BarState.On)\n      .scrollBarColor(Color.Gray).sc", "s null or empty \" + scrollBarValue);\n      }\n    ", ".scrollable)\n      .scrollBar(this.scrollBar)\n   ", "arValue);\n      if (scrollBarValue != null && scr", "= 0) {\n        this.scrollBarColor = scrollBarCol", "dthValue != null && scrollBarWidthValue.length !=", "    .scrollBar(this.scrollBar)\n      .scrollBarCo", "      console.info(\"scrollBarWidthValue:\" + scrol", "   this.scrollBar = scrollBarValue;\n        conso", "is.scrollBarWidth = scrollBarWidthValue;\n        ", ";\n      }\n      var scrollBarWidthValue = eventDa", "FF0000FF\";\n  @State scrollBarWidth: number = 30;\n", "orValue);\n      if (scrollBarColorValue != null &", "ollBarColor)\n      .scrollBarWidth(this.scrollBar", "rState.On;\n  @State scrollBarColor: Color = \"#FF0", "      console.info(\"scrollBarColorValue is null o", "arColor(Color.Gray).scrollBarWidth(10)\n    }\n    ", ";\n      }\n      var scrollBarColorValue = eventDa", "llBarWidth:\" + this.scrollBarWidth);\n      } else", ".scrollBar:\" + this.scrollBar);\n      } else {\n  ", " console.info(\"this.scrollBar:\" + this.scrollBar)", "      console.info(\"scrollBarWidthValue is null o", "Direction.Vertical).scrollBar(BarState.On)\n      ", "= 0) {\n        this.scrollBarWidth = scrollBarWid", "ue = eventData.data.scrollBar;\n      console.info", " console.info(\"this.scrollBarWidth:\" + this.scrol", "llBarWidthValue:\" + scrollBarWidthValue);\n      i", "      console.info(\"scrollBarColorValue:\" + scrol", "is.scrollBarColor = scrollBarColorValue;\n        ", "      console.info(\"scrollBarValue is null or emp", "s.scrollBar)\n      .scrollBarColor(this.scrollBar", "\"scrollBarValue:\" + scrollBarValue);\n      if (sc", "scrollBarColor(this.scrollBarColor)\n      .scroll"], "files": ["scrollBar.ets", "ScrollJsunit.test.ets", "canvas2.ets", "ScrollBarJsunit.test.ets", "List.test.ets", "scrollCode.ets", "ScrollerBarJsunit.test.ets", "canvas.ets", "Scroll.ets", "ScrollCodeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "scrollBarColor", "api_method_all": "scrollBarColor(color: Color | number | string): ScrollAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 28, "since": 7, "api_used": "\u662f", "lines": ["tringify(obj.$attrs.scrollBarColor));\n      console.lo", "sole.log(\"cd scroll scrollBarColor\" + JSON.stringify(o", "llBarColorValue:\" + scrollBarColorValue);\n      if (sc", "s null or empty \" + scrollBarColorValue);\n      }\n    ", "rState.On;\n  @State scrollBarColor: Color = \"#FF0000FF", "orValue);\n      if (scrollBarColorValue != null && scr", "ata: {\n            \"scrollBarColor\": \"#FFB6C1\"\n       ", "scrollBarColor(this.scrollBarColor)\n      .scrollBarWi", "s.scrollBar)\n      .scrollBarColor(this.scrollBarColor", "  expect(obj.$attrs.scrollBarColor).assertEqual('#FF00", "= 0) {\n        this.scrollBarColor = scrollBarColorVal", "ue = eventData.data.scrollBarColor;\n      console.info", "  expect(obj.$attrs.scrollBarColor).assertEqual('#FFFF", "arState.Off)\n      .scrollBarColor(Color.Red)\n      .s", "llBarColor:\" + this.scrollBarColor);\n      } else {\n  ", " console.info(\"this.scrollBarColor:\" + this.scrollBarC", "BarState.On)\n      .scrollBarColor(Color.Gray).scrollB", "      console.info(\"scrollBarColorValue is null or emp", ";\n      }\n      var scrollBarColorValue = eventData.da", "lorValue != null && scrollBarColorValue.length != 0) {", "      console.info(\"scrollBarColorValue:\" + scrollBarC", "is.scrollBarColor = scrollBarColorValue;\n        conso", "ction.None\n  @State scrollBarColor: Color = Color.Pink"], "files": ["ScrollJsunit.test.ets", "canvas2.ets", "scrollCode.ets", "canvas.ets", "Scroll.ets", "ScrollCodeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "scrollBarWidth", "api_method_all": "scrollBarWidth(value: number | string): ScrollAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 28, "since": 7, "api_used": "\u662f", "lines": ["llBarWidth:\" + this.scrollBarWidth);\n      } else {\n  ", "sole.log(\"cd scroll scrollBarWidth\" + JSON.stringify(o", ";\n      }\n      var scrollBarWidthValue = eventData.da", "ollBarColor)\n      .scrollBarWidth(this.scrollBarWidth", "dthValue != null && scrollBarWidthValue.length != 0) {", " console.info(\"this.scrollBarWidth:\" + this.scrollBarW", "  expect(obj.$attrs.scrollBarWidth).assertEqual('40.00", "thValue);\n      if (scrollBarWidthValue != null && scr", "  expect(obj.$attrs.scrollBarWidth).assertEqual('20.00", "tringify(obj.$attrs.scrollBarWidth));\n      expect(obj", "ata: {\n            \"scrollBarWidth\": 40\n          }\n  ", "  expect(obj.$attrs.scrollBarWidth).assertEqual('30.00", "testcase {\n  @State scrollBarWidth: number = 20\n  @Sta", "llBarWidthValue:\" + scrollBarWidthValue);\n      if (sc", "r(Color.Red)\n      .scrollBarWidth(5)\n      .width(300", "      console.info(\"scrollBarWidthValue is null or emp", "arColor(Color.Gray).scrollBarWidth(10)\n    }\n    .widt", "FF0000FF\";\n  @State scrollBarWidth: number = 30;\n  scr", "scrollBarWidth(this.scrollBarWidth)\n      .onScroll((x", "s null or empty \" + scrollBarWidthValue);\n      }\n    ", "= 0) {\n        this.scrollBarWidth = scrollBarWidthVal", "scrollBarWidth(this.scrollBarWidth)\n      .key('scroll", "is.scrollBarWidth = scrollBarWidthValue;\n        conso", "      console.info(\"scrollBarWidthValue:\" + scrollBarW", "ue = eventData.data.scrollBarWidth;\n      console.info"], "files": ["ScrollJsunit.test.ets", "canvas2.ets", "scrollCode.ets", "canvas.ets", "Scroll.ets", "ScrollCodeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ScrollAttribute", "api_method_name": "edgeEffect", "api_method_all": "edgeEffect(edgeEffect: EdgeEffect): ScrollAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 47, "since": 0, "api_used": "\u662f", "lines": [");\n    });\n\n    it('edgeEffectTest_0200', 0, async", "      console.info(\"edgeEffect page state change c", "an = false\n  @State edgeEffect: EdgeEffect = EdgeE", "      console.info('edgeEffectTest_0100 START');\n ", "console.error(\"push edgeEffect page error: \" + err", "rt default function edgeEffectJsunit(){\n  describe", "  console.info(\"get edgeEffect state success \" + J", "tringify(obj.$attrs.edgeEffect))\n      expect(obj.", "        uri: 'pages/edgeEffect',\n      }\n      try", "      console.info('edgeEffectTest_0200 END');\n   ", "      console.info('edgeEffectTest_0200 START');\n ", "/ \u6bcf\u884c\u4e4b\u95f4\u7684\u5206\u754c\u7ebf\n        .edgeEffect(this.edgeEffect) //", "      console.info(\"edgeEffect after each called\")", "  expect(obj.$attrs.edgeEffect).assertEqual('EdgeE", ");\n    });\n\n    it('edgeEffectTest_0100', 0, async", "t.test.ets';\nimport edgeEffectJsunit from './EdgeE", "xpect(objNew.$attrs.edgeEffect).assertEqual('EdgeE", "      console.info(\"edgeEffectTest_0100 component ", "      console.info(\"edgeEffectTest_0200 component ", "ct = eventData.data.edgeEffect;\n      }\n      if (", "{\n    console.info('edgeEffect page show called');", "       console.log(\"edgeEffectTest_0200 change com", " if (eventData.data.edgeEffect != null) {\n        ", "   .effectMode(this.edgeEffect)\n      .indicatorSt", "ull) {\n        this.edgeEffect = eventData.data.ed", "ata: {\n            \"edgeEffect\": EdgeEffect.Spring", "ct = eventData.data.edgeEffect;\n      }\n    }\n  }\n", "AutoLinear\n  @State edgeEffect: number = EdgeEffec", "        })\n        .edgeEffect(this.edgeEffect)\n  ", "console.log('List\u2018s edgeEffect is ' + JSON.stringi", "  expect(obj.$attrs.edgeEffect).assertEqual(\"EdgeE", " console.info(\"push edgeEffect page success \" + JS", "   .edgeEffect(this.edgeEffect) // \u6ed1\u52a8\u5230\u8fb9\u7f18\u65e0\u6548\u679c\n      ", "      console.info(\"edgeEffectTest_0200 start to p", "gin: 20 })\n        .edgeEffect(EdgeEffect.None)\n  ", "n = false;\n  @State edgeEffect: EdgeEffect = EdgeE", "   .edgeEffect(this.edgeEffect)\n        .chainAnim", "unit(){\n  describe('edgeEffectTest', function (){\n", "  sliderJsunit();\n  edgeEffectJsunit();\n  checkbox", "s));\n        if (!(\"edgeEffect\" == pages.name)) {\n"], "files": ["EdgeEffectJsunit.test.ets", "swiper.ets", "list.ets", "List.ets", "ListJsunit.test.ets", "List.test.ets", "edgeEffect.ets"], "is_white": " ", "desc": " "}]}