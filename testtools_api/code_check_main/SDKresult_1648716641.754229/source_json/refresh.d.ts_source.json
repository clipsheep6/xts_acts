{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\refresh", "api": [{"api_class_name": "RefreshStatus", "api_method_all": "declare enum RefreshStatus {\n  \n  Inactive,\n\n  \n  Drag,\n\n  \n  OverDrag,\n\n  \n  Refresh,\n\n  \n  Done,\n}", "api_method_name": "RefreshStatus", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["ART');\n      expect(RefreshStatus.OverDrag).assertEqu", "ART');\n      expect(RefreshStatus.Inactive).assertEqu", "nge((refreshStatus: RefreshStatus) => {\n        conso"], "files": ["RefreshJsunit.test.ets", "refresh.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshStatus", "api_method_name": "Inactive", "api_method_all": "Inactive,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["xpect(RefreshStatus.Inactive).assertEqual(0);\n  ", "  this.controller.onInactive()\n          })\n    "], "files": ["RefreshJsunit.test.ets", "WebPage.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshStatus", "api_method_name": "Drag", "api_method_all": "Drag,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 88, "since": 8, "api_used": "\u662f", "lines": ["    console.info(\"onDragMove emit action sta", "ole.log('ListItem onDragStarts, ' + extraPar", "onsole.log('apple onDragStart onAction')\n   ", "sible)\n          .onDragStart((event: DragEv", "    console.info(\"onDragEnter emit action st", "onsole.log('Ting--onDragStart--orange')\n    ", "    console.info(\"onDragLeave emit action st", "       \"ACTION\": 'onDragLeave onAction'\n    ", "  @State dragEvent: DragEvent = ''\n  @State ", "onsole.log('Ting--onDragStart--ListItem')\n  ", "    })\n          .onDragStart((event: DragEv", "onDragEnter((event: DragEvent, extraParams: ", "e.info('Ting--onItemDragStart' + event.y)\n  ", "}\n      })\n      .onDragLeave((event: DragEv", "onsole.log('Ting--onDragStart--apple')\n     ", ".onDragMove((event: DragEvent, extraParams: ", "}\n      })\n      .onDragMove((event: DragEve", "onDragLeave((event: DragEvent, extraParams: ", "       \"ACTION\": 'onDragMove onAction'\n     ", "gin: 20 })\n      .onDragEnter((event: DragEv", "console.log('Text onDragStarts, ' + extraPar", "onsole.log('Ting--onDragStart--banana')\n    ", "y\n@Component\nstruct Drag2Example {\n  @State ", "console.log('List onDragLeave, ' + extraPara", "y\n@Component\nstruct DragExample {\n  @State n", "       \"ACTION\": 'onDragStart onAction'\n    ", "console.log('List onDragMove, ' + extraParam", "sible)\n          .onDragStart(() => {\n      ", "    console.info(\"onDragEnter start to emit ", "    console.info(\"onDragLeave start to emit ", "    .onDrop((event: DragEvent, extraParams: ", "    console.info(\"onDragMove start to emit a", "console.log('List onDragEnter, ' + extraPara", "Item')\n          .onDragStart((event: DragEv", "e.info('Ting--onItemDragStart' + event.x)\n  ", "agStart((event: ItemDragInfo, itemIndex: num", "e)\n          .onItemDragStart((event: ItemDr", "onDragStart((event: DragEvent, extraParams: "], "files": ["dragEvent.ets", "DragEventJsunit.test.ets", "RefreshJsunit.test.ets", "List.ets", "panelProps.test.js", "dragEvent2.ets", "List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshStatus", "api_method_name": "OverDrag", "api_method_all": "OverDrag,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["xpect(RefreshStatus.OverDrag).assertEqual(2);\n  "], "files": ["RefreshJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshStatus", "api_method_name": "Refresh", "api_method_all": "Refresh,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 123, "since": 8, "api_used": "\u662f", "lines": ["ART');\n      expect(RefreshStatus.Inactive).ass", "     console.info(\"[RefreshProps] get inspector", "le.log(\"webTest : onRefreshAccessedHistory .ref", "     console.log('onRefreshing test')\n      })\n", "  console.info('testRefreshDisabledPropTrue STA", ";\n\n    \n    it('testRefreshDisabledPropNone', 0", " console.info('[testRefresh01 strJson]' + strJs", " = eventData.data.isRefreshing;\n      }\n    }\n ", "+;\n          this.isRefreshing = false\n        ", "      })\n        .onRefreshAccessedHistory((e) ", ";\n\n    \n    it('testRefreshClassProp', 0, async", "le.log(\"webTest : onRefreshAccessedHistory .url", ";\n\n    \n    it('testRefreshRefPropNone', 0, asy", "  console.info('testRefreshRefPropNone START');", ";\n\n    \n    it('testRefreshIdProp', 0, async fu", "y\n@Component\nstruct RefreshCreateComponent {\n  ", " refreshing: this.isRefreshing, offset: 120, fr", " console.info('[testRefresh02] END');\n      don", " console.info('[testRefresh03] START');\n      e", "* @tc.name      testRefreshComponent\n     * @tc", "     console.info(\"[RefreshProps] get globalThi", " console.info('[testRefresh02] START');\n      e", "  console.info('testRefreshClassPropNone START'", ";\n\n    \n    it('testRefreshRefProp', 0, async f", ";\n\n    \n    it('testRefreshFocusablePropTrue', ", "  console.info('testRefreshIdProp START');\n    ", "  console.info('testRefreshClassProp START');\n ", "f (eventData.data.isRefreshing != null) {\n     ", "l) {\n        this.isRefreshing = eventData.data", "   Column() {\n      Refresh({ refreshing: this.", ";\n\n    \n    it('testRefreshDisabledPropTrue', 0", "ponent {\n  @State isRefreshing: boolean = false", "   });\n\n    it('testRefresh03', 0, async functi", ";\n\n    \n    it('testRefreshDisabledPropFalse', ", "  console.info('testRefreshRefProp START');\n   ", "   });\n\n    it('testRefresh02', 0, async functi", ")\n      })\n      .onRefreshing(() => {\n        ", "ART');\n      expect(RefreshStatus.OverDrag).ass", " console.info('[testRefresh03] END');\n      don", "  console.info('testRefreshDisabledPropNone STA", " console.info('[testRefresh01] END');\n      don", "     */\n    it('testRefreshComponent', 0, async", "freshJsunit from './RefreshJsunit.test.ets';\nim", "  console.info('testRefreshDisabledPropFalse ST", "nge((refreshStatus: RefreshStatus) => {\n       ", "   });\n\n    it('testRefresh01', 0, async functi", " console.info('[testRefresh01] START');\n      a", "      console.info('Refresh onStateChange state", ";\n\n    \n    it('testRefreshClassPropNone', 0, a"], "files": ["WebPage.ets", "RefreshJsunit.test.ets", "commonComponentJsApi.test.js", "refresh.ets", "refreshProps.test.js", "List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshStatus", "api_method_name": "Done", "api_method_all": "Done,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 59, "since": 8, "api_used": "\u662f", "lines": ["eyType(EnterKeyType.Done)\n          .placeho", "        enterkeytypeDone : null,\n        ent", "ed');\n  }\n\n  onBuildDone() {\n    console.inf", "Equal('EnterKeyType.Done')\n      console.inf"], "files": ["Select.ets", "Shape.ets", "Flex.ets", "PatternLock.ets", "Navigator.ets", "Polyline.ets", "RowSplit.ets", "Slider.ets", "Qrcode.ets", "Text.ets", "Rect.ets", "Navigation.ets", "Counter.ets", "Stack.ets", "TextInput.ets", "Span.ets", "AlphabetIndexer.ets", "Progress.ets", "Panel.ets", "Path.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "DataPanel.ets", "Rating.ets", "AppStorage.ets", "TextArea.ets", "GridContainer.ets", "inputProps.test.js", "index.js", "Divider.ets", "Link.ets", "TextInputJsunit.test.ets", "Toggle.ets", "Button.ets", "Image.ets", "Polygon.ets", "Column.ets", "ScrollBar.ets", "ColumnSplit.ets", "Marquee.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshInterface", "api_method_all": "interface RefreshInterface {\n  \n  (value: { refreshing: boolean; offset?: number | string; friction?: number | string }): RefreshAttribute;\n}", "api_method_name": "RefreshInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshInterface", "api_method_name": "value", "api_method_all": "(value: { refreshing: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 8, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshInterface", "api_method_name": "offset", "api_method_all": "offset?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 372, "since": 8, "api_used": "\u662f", "lines": ["     xs: { span: 2, offset: 6 },\n             ", " color: Color.Gray, offsetX: 5, offsetY: 5 }\n ", "ffsetX: 0x80000000, offsetY: 0x80000000 };\n   ", "rror',\n            \"offset\": 'error'\n         ", "n\": 1,\n            \"offset\": 2\n          }\n   ", "00000,\n            \"offset\": 0x80000000\n      ", "ttrs.useSizeType.sm.offset).assertEqual(0x7FFF", "     xs: { span: 1, offset: 0 }, sm: { span: t", "     lg: { span: 2, offset: 2 }\n            })", "bjNew.$attrs.shadow.offsetY).assertEqual(\"10.0", "     sm: { span: 6, offset: 2 },\n             ", "ttrs.useSizeType.sm.offset).assertEqual(-21474", "     xs: { span: 2, offset: 10 },\n            ", "     xs: { span: 6, offset: 0 },\n             ", "     md: { span: 2, offset: 2 },\n             ", "ttrs.useSizeType.sm.offset).assertEqual(2);\n  ", " color: 0x80000000, offsetX: 0x80000000, offse", "     sm: { span: 2, offset: 8 },\n             ", "     md: { span: 6, offset: 4 },\n             ", "et = eventData.data.offset;\n      } else if (e", " span: this.smSpan, offset: this.smOffset },\n ", "     lg: { span: 2, offset: 4 }\n            })", "FFFFF,\n            \"offset\": 0x7FFFFFFF\n      ", "r.Gray, offsetX: 5, offsetY: 5 }\n  @State gray", "ttrs.useSizeType.sm.offset).assertEqual(1);\n  ", "ttrs.useSizeType.sm.offset).assertEqual(0);\n  ", "bjNew.$attrs.shadow.offsetY).assertEqual(\"2147", ".Gray, offsetX: 10, offsetY: 10\n      };\n     ", "ffsetX: 0x7FFFFFFF, offsetY: 0x7FFFFFFF };\n   ", "     xs: { span: 2, offset: 8 },\n             ", "     md: { span: 2, offset: 10 },\n            ", "     sm: { span: 2, offset: 0 },\n             ", "gCallBack);\n    let offsetChangeEvent = {\n    ", "gn: this.alignment, offset: { x: this.x, y: th", "     md: { span: 5, offset: 1 }, lg: { span: 7", " color: Color.Gray, offsetX: 10, offsetY: 10\n ", "bjNew.$attrs.shadow.offsetX).assertEqual(\"10.0", " color: 0x7FFFFFFF, offsetX: 0x7FFFFFFF, offse", "t(obj.$attrs.shadow.offsetY).assertEqual(\"5.00", "     lg: { span: 6, offset: 6 }\n            })", "bjNew.$attrs.shadow.offsetX).assertEqual(\"2147", "     md: { span: 2, offset: 0 },\n             ", "1 }, lg: { span: 7, offset: 2 }\n        })\n   ", "  events_emitter.on(offsetChangeEvent, this.st", "     sm: { span: 2, offset: 10 },\n            ", ": Alignment.Bottom, offset: { x: 0, y: 20 } })", "     lg: { span: 2, offset: 0 }\n            })", "t(obj.$attrs.shadow.offsetX).assertEqual(\"5.00"], "files": ["Shape.ets", "panDirection.ets", "pathProps.test.js", "ImageEffectsJsunit.test.ets", "gridContainer.ets", "circleProps.test.js", "Text.ets", "lineProps.test.js", "imageFit.ets", "imageEffects.ets", "TextJsunit.test.ets", "popupProps.test.js", "Constants.ets", "polylineProps.test.js", "refreshProps.test.js", "PositionSettingJsunit.test.ets", "Scroll.ets", "customDialogController.ets", "CustomDialog.ets", "ellipseProps.test.js", "touchAble.ets", "polygonProps.test.js", "positionSetting.ets", "GridContainer.ets", "enumsLineCapStyle.ets", "GridSettingsJsunit.test.ets", "index.js", "OverlayJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "listProps.test.js", "gridSettings.ets", "gridColProps.test.js", "textPathProps.test.js", "gestureMode.ets", "refresh.ets", "motionPath.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshInterface", "api_method_name": "friction", "api_method_all": "friction?: number | string }): RefreshAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 50, "since": 8, "api_used": "\u662f", "lines": ["p =  this.$element(\"frictionProp\").getInspector(", "tringify(obj.$attrs.friction));//pro\n        don", "pFalse,\n            frictionProp : this.friction", "frictionProp : this.frictionProp\n        }\n    }", "alse: null,\n        frictionProp: null\n    },\n\n ", "n: 1500,\n  easing: 'friction',\n  delay: 100,\n  f", "se(globalThis.value.frictionProp);//id\n        c", "ctor()\n        this.frictionProp =  this.$elemen", "rs.id).assertEqual('frictionProp')//id\n        e", " 1500,\n    easing: 'friction',\n    delay: 100,\n ", "shing, offset: 120, friction: 100 }) {\n        T"], "files": ["refreshProps.test.js", "refresh.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshAttribute", "api_method_all": "declare class RefreshAttribute extends CommonMethod<RefreshAttribute> {\n  \n  onStateChange(callback: (state: RefreshStatus) => void): RefreshAttribute;\n\n  \n  onRefreshing(callback: () => void): RefreshAttribute;\n}", "api_method_name": "RefreshAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshAttribute", "api_method_name": "onStateChangecallback", "api_method_all": "onStateChange(callback: (state: RefreshStatus) => void): RefreshAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshAttribute", "api_method_name": "onStateChangecallback", "api_method_all": "onStateChange(callback: (state: RefreshStatus) => void): RefreshAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshAttribute", "api_method_name": "onRefreshingcallback", "api_method_all": "onRefreshing(callback: () => void): RefreshAttribute;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RefreshAttribute", "api_method_name": "onRefreshingcallback", "api_method_all": "onRefreshing(callback: () => void): RefreshAttribute;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}