{"subsystem_ch": "\u5305\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "appexecfwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.bundle", "api": [{"api_class_name": "bundle", "api_method_all": "declare namespace bundle {\r\n\r\n\r\n  enum BundleFlag {\r\n    GET_BUNDLE_DEFAULT = 0x00000000,\r\n    GET_BUNDLE_WITH_ABILITIES = 0x00000001,\r\n    GET_ABILITY_INFO_WITH_PERMISSION = 0x00000002,\r\n    GET_ABILITY_INFO_WITH_APPLICATION = 0x00000004,\r\n    GET_APPLICATION_INFO_WITH_PERMISSION = 0x00000008,\r\n    GET_BUNDLE_WITH_REQUESTED_PERMISSION = 0x00000010,\r\n    GET_ALL_APPLICATION_INFO = 0xFFFF0000,\r\n    \r\n    GET_ABILITY_INFO_WITH_METADATA = 0x00000020,\r\n    \r\n     GET_BUNDLE_WITH_EXTENSION_ABILITY = 0x00000020,\r\n    \r\n     GET_APPLICATION_INFO_WITH_METADATA = 0x00000040,\r\n    \r\n    GET_ABILITY_INFO_SYSTEMAPP_ONLY = 0x00000080,\r\n    \r\n    GET_ABILITY_INFO_WITH_DISABLE = 0x00000100,\r\n    \r\n    GET_APPLICATION_INFO_WITH_DISABLE = 0x00000200,\r\n  }\r\n\r\n\r\n  enum ExtensionFlag {\r\n    GET_EXTENSION_INFO_DEFAULT = 0x00000000,\r\n    GET_EXTENSION_INFO_WITH_PERMISSION = 0x00000002,\r\n    GET_EXTENSION_INFO_WITH_APPLICATION = 0x00000004,\r\n    GET_EXTENSION_INFO_WITH_METADATA = 0x00000020,\r\n  }\r\n\r\n\r\n  export enum ColorMode {\r\n    AUTO_MODE = -1,\r\n    DARK_MODE = 0,\r\n    LIGHT_MODE = 1,\r\n  }\r\n\r\n\r\n  export enum GrantStatus {\r\n    PERMISSION_DENIED = -1,\r\n    PERMISSION_GRANTED = 0,\r\n  }\r\n\r\n  \r\n  export enum AbilityType {\r\n    \r\n    UNKNOWN,\r\n\r\n    \r\n    PAGE,\r\n\r\n    \r\n    SERVICE,\r\n\r\n    \r\n    DATA,\r\n  }\r\n\r\n  \r\n  export enum AbilitySubType {\r\n    UNSPECIFIED = 0,\r\n    CA = 1,\r\n  }\r\n\r\n  \r\n  export enum DisplayOrientation {\r\n    \r\n    UNSPECIFIED,\r\n\r\n    \r\n    LANDSCAPE,\r\n\r\n    \r\n    PORTRAIT,\r\n\r\n    \r\n    FOLLOW_RECENT,\r\n  }\r\n\r\n  \r\n  export enum LaunchMode {\r\n    \r\n    SINGLETON = 0,\r\n\r\n    \r\n    STANDARD = 1,\r\n  }\r\n\r\n  \r\n  export enum ExtensionAbilityType {\r\n    \r\n    FORM = 0,\r\n    \r\n    WORK_SCHEDULER = 1,\r\n    \r\n    INPUT_METHOD = 2,\r\n    \r\n    SERVICE = 3,\r\n    \r\n    ACCESSIBILITY = 4,\r\n    \r\n    DATA_SHARE = 5,\r\n    \r\n    FILE_SHARE = 6,\r\n    \r\n    STATIC_SUBSCRIBER = 7,\r\n    \r\n    WALLPAPER = 8,\r\n    \r\n    UNSPECIFIED = 9,\r\n  }\r\n\r\n  \r\n  export interface BundleOptions {\r\n    \r\n    userId?: number;\r\n  }\r\n\r\n  \r\n  export enum InstallErrorCode{\r\n    SUCCESS = 0,\r\n    STATUS_INSTALL_FAILURE = 1,\r\n    STATUS_INSTALL_FAILURE_ABORTED = 2,\r\n    STATUS_INSTALL_FAILURE_INVALID = 3,\r\n    STATUS_INSTALL_FAILURE_CONFLICT = 4,\r\n    STATUS_INSTALL_FAILURE_STORAGE = 5,\r\n    STATUS_INSTALL_FAILURE_INCOMPATIBLE = 6,\r\n    STATUS_UNINSTALL_FAILURE = 7,\r\n    STATUS_UNINSTALL_FAILURE_BLOCKED = 8,\r\n    STATUS_UNINSTALL_FAILURE_ABORTED = 9,\r\n    STATUS_UNINSTALL_FAILURE_CONFLICT = 10,\r\n    STATUS_INSTALL_FAILURE_DOWNLOAD_TIMEOUT = 0x0B,\r\n    STATUS_INSTALL_FAILURE_DOWNLOAD_FAILED = 0x0C,\r\n    \r\n    STATUS_RECOVER_FAILURE_INVALID = 0x0D,\r\n    \r\n    STATUS_ABILITY_NOT_FOUND = 0x40,\r\n    \r\n    STATUS_BMS_SERVICE_ERROR = 0x41,\r\n    \r\n    STATUS_FAILED_NO_SPACE_LEFT = 0x42,\r\n    \r\n    STATUS_GRANT_REQUEST_PERMISSIONS_FAILED = 0x43,\r\n    \r\n    STATUS_INSTALL_PERMISSION_DENIED = 0x44,\r\n    \r\n    STATUS_UNINSTALL_PERMISSION_DENIED = 0x45,\r\n  }\r\n\r\n  \r\n   function getBundleInfo(bundleName: string, bundleFlags: number, options: BundleOptions, callback: AsyncCallback<BundleInfo>): void;\r\n   function getBundleInfo(bundleName: string, bundleFlags: number, callback: AsyncCallback<BundleInfo>): void;\r\n   function getBundleInfo(bundleName: string, bundleFlags: number, options?: BundleOptions): Promise<BundleInfo>;\r\n\r\n  \r\n  function getBundleInstaller(callback: AsyncCallback<BundleInstaller>): void;\r\n  function getBundleInstaller(): Promise<BundleInstaller>;\r\n   \r\n  \r\n  function getAbilityInfo(bundleName: string, abilityName: string, callback: AsyncCallback<AbilityInfo>): void;\r\n  function getAbilityInfo(bundleName: string, abilityName: string): Promise<AbilityInfo>;\r\n\r\n  \r\n  function getApplicationInfo(bundleName: string, bundleFlags: number, userId: number, callback: AsyncCallback<ApplicationInfo>) : void;\r\n  function getApplicationInfo(bundleName: string, bundleFlags: number, callback: AsyncCallback<ApplicationInfo>) : void;\r\n  function getApplicationInfo(bundleName: string, bundleFlags: number, userId?: number) : Promise<ApplicationInfo>;\r\n\r\n  \r\n  function queryAbilityByWant(want: Want, bundleFlags: number, userId: number, callback: AsyncCallback<Array<AbilityInfo>>): void;\r\n  function queryAbilityByWant(want: Want, bundleFlags: number, callback: AsyncCallback<Array<AbilityInfo>>): void;\r\n  function queryAbilityByWant(want: Want, bundleFlags: number, userId?:number): Promise<Array<AbilityInfo>>;\r\n\r\n  \r\n  function getAllBundleInfo(bundleFlag: BundleFlag, userId: number, callback: AsyncCallback<Array<BundleInfo>>) : void;\r\n  function getAllBundleInfo(bundleFlag: BundleFlag, callback: AsyncCallback<Array<BundleInfo>>) : void;\r\n  function getAllBundleInfo(bundleFlag: BundleFlag, userId?: number) : Promise<Array<BundleInfo>>;\r\n\r\n  \r\n  function getAllApplicationInfo(bundleFlags: number, userId: number, callback: AsyncCallback<Array<ApplicationInfo>>) : void;\r\n  function getAllApplicationInfo(bundleFlags: number, callback: AsyncCallback<Array<ApplicationInfo>>) : void;\r\n  function getAllApplicationInfo(bundleFlags: number, userId?: number) : Promise<Array<ApplicationInfo>>;\r\n\r\n  \r\n   function getNameForUid(uid: number, callback: AsyncCallback<string>) : void\r\n   function getNameForUid(uid: number) : Promise<string>;\r\n\r\n  \r\n  function getBundleArchiveInfo(hapFilePath: string, bundleFlags: number, callback: AsyncCallback<BundleInfo>) : void\r\n  function getBundleArchiveInfo(hapFilePath: string, bundleFlags: number) : Promise<BundleInfo>;\r\n\r\n  \r\n  function getLaunchWantForBundle(bundleName: string, callback: AsyncCallback<Want>): void;\r\n  function getLaunchWantForBundle(bundleName: string): Promise<Want>;\r\n\r\n  \r\n  function getModuleUsageRecords(maxNum: number, callback: AsyncCallback<Array<ModuleUsageRecord>>): void;\r\n  function getModuleUsageRecords(maxNum: number): Promise<Array<ModuleUsageRecord>>;\r\n\r\n  \r\n  function cleanBundleCacheFiles(bundleName: string, callback: AsyncCallback<void>): void;\r\n  function cleanBundleCacheFiles(bundleName: string): Promise<void>;\r\n\r\n  \r\n  function setApplicationEnabled(bundleName: string, isEnable: boolean, callback: AsyncCallback<void>): void;\r\n  function setApplicationEnabled(bundleName: string, isEnable: boolean): Promise<void>;\r\n\r\n  \r\n  function setAbilityEnabled(info: AbilityInfo, isEnable: boolean, callback: AsyncCallback<void>): void;\r\n  function setAbilityEnabled(info: AbilityInfo, isEnable: boolean): Promise<void>;\r\n\r\n  \r\n  function queryExtensionAbilityInfosByWant(want: Want, extensionFlags: number, userId: number, callback: AsyncCallback<Array<ExtensionAbilityInfo>>): void;\r\n  function queryExtensionAbilityInfosByWant(want: Want, extensionFlags: number, callback: AsyncCallback<Array<ExtensionAbilityInfo>>): void;\r\n  function queryExtensionAbilityInfosByWant(want: Want, extensionFlags: number, userId?: number): Promise<Array<ExtensionAbilityInfo>>;\r\n\r\n  \r\n  function getPermissionDef(permissionName: string, callback: AsyncCallback<PermissionDef>): void;\r\n  function getPermissionDef(permissionName: string): Promise<PermissionDef>;\r\n\r\n  \r\n  function getAbilityLabel(bundleName: string, abilityName: string, callback: AsyncCallback<string>): void;\r\n  function getAbilityLabel(bundleName: string, abilityName: string): Promise<string>;\r\n\r\n  \r\n  function getAbilityIcon(bundleName: string, abilityName: string, callback: AsyncCallback<image.PixelMap>): void;\r\n  function getAbilityIcon(bundleName: string, abilityName: string): Promise<image.PixelMap>;\r\n\r\n   \r\n  function isAbilityEnabled(info: AbilityInfo, callback: AsyncCallback<boolean>): void;\r\n  function isAbilityEnabled(info: AbilityInfo): Promise<boolean>;\r\n\r\n  \r\n  function isApplicationEnabled(bundleName: string, callback: AsyncCallback<boolean>): void;\r\n  function isApplicationEnabled(bundleName: string): Promise<boolean>;\r\n}", "api_method_name": "bundle", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 563, "since": 0, "api_used": "\u662f", "lines": ["", "             expect(bundleInfo.reqPermissions.", "installer.uninstall(bundleName, {\n            ", "t installer = await bundle.getBundleInstaller(", ".getApplicationInfo(bundleName, 0, 0).then(app", "tart');\n        let bundlePath = ['/data/test/", ".hap'];\n        let bundlePath2 = ['/data/test", "undleName, 16).then(bundleInfo => {\n          ", "undle.getBundleInfo(bundleName, 16).then(bundl", "             expect(bundleInfo.reqPermissions[", "tart');\n        let bundlePath1 = ['/data/test", "             expect(bundleInfo.reqPermissionSt", "CESS\");\n            bundle.getApplicationInfo(", ".hap'];\n        let bundleName = 'com.example.", "  installer.install(bundlePath, {\n            ", "o.name).assertEqual(bundleName);\n             ", "  installer.install(bundlePath2, {\n           ", "  installer.install(bundlePath1, {\n           ", "CESS\");\n            bundle.getBundleInfo(bundl", "             expect(bundleInfo.name).assertEqu", " bundle from '@ohos.bundle'\nimport { describe,"], "files": ["GetAbilityLabelJsUnit.test.ets", "ActsBmsCleanCacheTest.test.js", "ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ActsBmsMetaDataTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "getApplicationInfoJsunit.test.ets", "ActsBmsJsTest.test.js", "GetabilityInfo.test.ets", "ActsBmsQueryAbilityByWant.test.js", "IsApplicationEnabledETSUnit.ets", "IsAbilityEnabledETSUnit.ets", "ActsBmsFormsInfoTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getBundleInfo", "api_method_all": "function getBundleInfo(bundleName: string, bundleFlags: number, options: BundleOptions, callback: AsyncCallback<BundleInfo>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 146, "since": 7, "api_used": "\u662f", "lines": ["tainfo = await demo.getBundleInfo(NAME2, demo.BundleFlag.GET_BUNDLE_WITH_", "m1';\n        bundle.getBundleInfo(bundleName, 1, callback);\n        funct", "ps.\n     */\n    it('getBundleInfo_0700', 0, async function (done) {\n     ", "sult = await bundle.getBundleInfo(bundleName, 1);\n            expect(resu", "console.info('====> getBundleInfos_06600 =====>' + JSON.stringify(data[i]", "ata3 = await bundle.getBundleInfo(BUNDLE_NAME5, 1)\n            console.in", " * @tc.name BUNDLE::getBundleInfo\n     * @tc.desc Test getBundleInfo inte", "\n            bundle.getBundleInfo(bundleName, 1, async (err, result) => {", "tainfo = await demo.getBundleInfo(NAME1, \n                demo.BundleFlag", "    * @tc.desc Test getBundleInfo interfaces with two haps.\n     */\n    i", "console.info('====> getBundleInfos_02200 =====>' + JSON.stringify(data[i]", "    * @tc.desc Test getBundleInfos interfaces with two haps and different", "   })\n\n    \n    it('getBundleInfos_0600', 0, async function (done) {\n    ", "\n            bundle.getBundleInfo(BUNDLE_NAME2, 1, (err, data3) => {\n    ", "         await demo.getBundleInfo(NAME2, demo.BundleFlag.GET_BUNDLE_WITH_", "console.info('====> getBundleInfos_04400 =====>' + JSON.stringify(data[i]", "*\n     * @tc.number getBundleInfo_0700\n     * @tc.name BUNDLE::getBundleI", "   })\n\n    \n    it('getBundleInfo_0600', 0, async function (done) {\n     ", "tainfo = await demo.getBundleInfo(NAME1, demo.BundleFlag.GET_BUNDLE_DEFAU", "             bundle.getBundleInfo(bundleName, 1, callback);\n            }", " * @tc.name BUNDLE::getBundleInfos\n     * @tc.desc Test getBundleInfos in", "tainfo = await demo.getBundleInfo(NAME1, demo.BundleFlag.GET_BUNDLE_WITH_", "*\n     * @tc.number getBundleInfos_0200\n     * @tc.name BUNDLE::getBundle", "   })\n\n    \n    it('getBundleInfos_0100', 0, async function (done) {\n    ", "*\n     * @tc.number getBundleInfos_0400\n     * @tc.name BUNDLE::getBundle", "    * @tc.desc Test getBundleInfos interfaces with two haps.\n     */\n    ", "ps.\n     */\n    it('getBundleInfo_0200', 0, async function (done) {\n     ", "Info = await bundle.getBundleInfo(bundleName)\n        let data = await bu", "   })\n\n    \n    it('getBundleInfo_1200', 0, async function (done) {\n     ", "console.info('====> getBundleInfos_05500 =====>' + JSON.stringify(data[i]", "console.info('====> getBundleInfos_09900 =====>' + JSON.stringify(data[i]", "         await demo.getBundleInfo(NAME1, demo.BundleFlag.GET_BUNDLE_DEFAU", "\n            bundle.getBundleInfo(bundleName, 1, callback);\n            a", "console.info('====> getBundleInfos_03300 =====>' + JSON.stringify(data[i]", "   })\n\n    \n    it('getBundleInfo_1100', 0, async function (done) {\n     ", "console.info('====> getBundleInfos_07700 =====>' + JSON.stringify(data[i]", "t');\n        bundle.getBundleInfo(LAUNCHER_BUNDLE_NAME, DEFAULT_USER_ID).", "  });\n\n    \n    it('getBundleInfoTest_100', 0, async function (done) {\n  ", "ps.\n     */\n    it('getBundleInfos_0200', 0, async function (done) {\n    ", "*\n     * @tc.number getBundleInfo_0200\n     * @tc.name BUNDLE::getBundleI", "sult = await bundle.getBundleInfo(bundleName, 1)\n            console.debu", " () {\n\n    \n    it('getBundleInfo_0100', 0, async function (done) {\n     ", "     console.debug('getBundleInfoTest_100 start');\n        bundle.getBund", "console.info('====> getBundleInfos_08800 =====>' + JSON.stringify(data[i]"], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "ActsBmsJsTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getBundleInfo", "api_method_all": "function getBundleInfo(bundleName: string, bundleFlags: number, callback: AsyncCallback<BundleInfo>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 146, "since": 7, "api_used": "\u662f", "lines": ["tainfo = await demo.getBundleInfo(NAME2, demo.BundleFlag.GET_BUNDLE_WITH_", "m1';\n        bundle.getBundleInfo(bundleName, 1, callback);\n        funct", "ps.\n     */\n    it('getBundleInfo_0700', 0, async function (done) {\n     ", "sult = await bundle.getBundleInfo(bundleName, 1);\n            expect(resu", "console.info('====> getBundleInfos_06600 =====>' + JSON.stringify(data[i]", "ata3 = await bundle.getBundleInfo(BUNDLE_NAME5, 1)\n            console.in", " * @tc.name BUNDLE::getBundleInfo\n     * @tc.desc Test getBundleInfo inte", "\n            bundle.getBundleInfo(bundleName, 1, async (err, result) => {", "tainfo = await demo.getBundleInfo(NAME1, \n                demo.BundleFlag", "    * @tc.desc Test getBundleInfo interfaces with two haps.\n     */\n    i", "console.info('====> getBundleInfos_02200 =====>' + JSON.stringify(data[i]", "    * @tc.desc Test getBundleInfos interfaces with two haps and different", "   })\n\n    \n    it('getBundleInfos_0600', 0, async function (done) {\n    ", "\n            bundle.getBundleInfo(BUNDLE_NAME2, 1, (err, data3) => {\n    ", "         await demo.getBundleInfo(NAME2, demo.BundleFlag.GET_BUNDLE_WITH_", "console.info('====> getBundleInfos_04400 =====>' + JSON.stringify(data[i]", "*\n     * @tc.number getBundleInfo_0700\n     * @tc.name BUNDLE::getBundleI", "   })\n\n    \n    it('getBundleInfo_0600', 0, async function (done) {\n     ", "tainfo = await demo.getBundleInfo(NAME1, demo.BundleFlag.GET_BUNDLE_DEFAU", "             bundle.getBundleInfo(bundleName, 1, callback);\n            }", " * @tc.name BUNDLE::getBundleInfos\n     * @tc.desc Test getBundleInfos in", "tainfo = await demo.getBundleInfo(NAME1, demo.BundleFlag.GET_BUNDLE_WITH_", "*\n     * @tc.number getBundleInfos_0200\n     * @tc.name BUNDLE::getBundle", "   })\n\n    \n    it('getBundleInfos_0100', 0, async function (done) {\n    ", "*\n     * @tc.number getBundleInfos_0400\n     * @tc.name BUNDLE::getBundle", "    * @tc.desc Test getBundleInfos interfaces with two haps.\n     */\n    ", "ps.\n     */\n    it('getBundleInfo_0200', 0, async function (done) {\n     ", "Info = await bundle.getBundleInfo(bundleName)\n        let data = await bu", "   })\n\n    \n    it('getBundleInfo_1200', 0, async function (done) {\n     ", "console.info('====> getBundleInfos_05500 =====>' + JSON.stringify(data[i]", "console.info('====> getBundleInfos_09900 =====>' + JSON.stringify(data[i]", "         await demo.getBundleInfo(NAME1, demo.BundleFlag.GET_BUNDLE_DEFAU", "\n            bundle.getBundleInfo(bundleName, 1, callback);\n            a", "console.info('====> getBundleInfos_03300 =====>' + JSON.stringify(data[i]", "   })\n\n    \n    it('getBundleInfo_1100', 0, async function (done) {\n     ", "console.info('====> getBundleInfos_07700 =====>' + JSON.stringify(data[i]", "t');\n        bundle.getBundleInfo(LAUNCHER_BUNDLE_NAME, DEFAULT_USER_ID).", "  });\n\n    \n    it('getBundleInfoTest_100', 0, async function (done) {\n  ", "ps.\n     */\n    it('getBundleInfos_0200', 0, async function (done) {\n    ", "*\n     * @tc.number getBundleInfo_0200\n     * @tc.name BUNDLE::getBundleI", "sult = await bundle.getBundleInfo(bundleName, 1)\n            console.debu", " () {\n\n    \n    it('getBundleInfo_0100', 0, async function (done) {\n     ", "     console.debug('getBundleInfoTest_100 start');\n        bundle.getBund", "console.info('====> getBundleInfos_08800 =====>' + JSON.stringify(data[i]"], "files": ["ActsBmsHapModuleTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "ActsBmsJsTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getBundleInfo", "api_method_all": "function getBundleInfo(bundleName: string, bundleFlags: number, options?: BundleOptions): Promise<BundleInfo>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["\n            bundle.getBundleInfo(bundleName, 16).then(bundleInfo => {\n  ", "e) {\n        bundle.getBundleInfo(bundleName).then(dataInfo => {\n        ", "\n            bundle.getBundleInfo(bundleName, 1,).then(async (result) => "], "files": ["ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ActsBmsJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getBundleInstaller", "api_method_all": "function getBundleInstaller(callback: AsyncCallback<BundleInstaller>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 145, "since": 7, "api_used": "\u662f", "lines": ["ller = await bundle.getBundleInstaller();\n        installer.install(['/data/te", "ller = await bundle.getBundleInstaller();\n        installer.install(bundlePath", "ller = await bundle.getBundleInstaller();\n        installer.install(\n         ", "ller = await bundle.getBundleInstaller();\n        console.log('========install", "ller = await bundle.getBundleInstaller()\n        installer.install([SYSTEM_PAT"], "files": ["ActsBmsMetaDataTest.test.js", "ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "ActsBmsJsTest.test.js", "ActsBmsFormsInfoTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getBundleInstaller", "api_method_all": "function getBundleInstaller(): Promise<BundleInstaller>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["one) {\n        demo.getBundleInstaller().then((data) => {\n            data.uni", "one) {\n        demo.getBundleInstaller().then((data) => {\n            data.ins", "TH1]\n        bundle.getBundleInstaller().then(installer => {\n            funct", "one) {\n        demo.getBundleInstaller().then(async (data) => {\n            aw", "\n        await demo.getBundleInstaller().then((data) => {\n            data.ins"], "files": ["ActsBmsCleanCacheTest.test.js", "ExampleJsunit.test.js", "ActsBmsQueryAbilityByWant.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAbilityInfo", "api_method_all": "function getAbilityInfo(bundleName: string, abilityName: string, callback: AsyncCallback<AbilityInfo>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["  });\n\n    \n    it('getAbilityInfo_100', 0, async function (done) {\n      ", "await bundleManager.getAbilityInfo(bundleName_other, abilityName_other)\n  ", "await bundleManager.getAbilityInfo(bundleName, abilityName, (err, data) =>", "     console.debug('getAbilityInfo_100 start');\n        bundle.getAbilityI", "t');\n        bundle.getAbilityInfo(LAUNCHER_BUNDLE_NAME, LAUNCHER_MAIN_ABI"], "files": ["GetabilityInfo.test.ets", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAbilityInfo", "api_method_all": "function getAbilityInfo(bundleName: string, abilityName: string): Promise<AbilityInfo>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["await bundleManager.getAbilityInfo(bundleName, abilityName1).then((data) =", "await bundleManager.getAbilityInfo(bundleName, abilityName)\n        .then(", "      bundleManager.getAbilityInfo(bundleName1, abilityName)\n        .then", "      bundleManager.getAbilityInfo(bundleName2, abilityName)\n        .then"], "files": ["GetabilityInfo.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getApplicationInfo", "api_method_all": "function getApplicationInfo(bundleName: string, bundleFlags: number, userId: number, callback: AsyncCallback<ApplicationInfo>) : void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 148, "since": 7, "api_used": "\u662f", "lines": ["_001, datas);\n      getApplicationInfoSuccess(TAG_TEST_0400_001, datas);\n     ", "_001, datas);\n      getApplicationInfoSuccess(TAG_TEST_0300_001, datas);\n     ", "     console.debug('getApplicationInfoTest_100 start');\n        bundle.getAppl", "0100_001 = ' bundle_getApplicationInfo_test_0100_001 ';\nconst TAG_TEST_0100_00", "data = await Bundle.getApplicationInfo(BUNDLE_NAME, Bundle.BundleFlag.GET_ALL_", "\n\n    \n    function getApplicationInfoSuccess(msg, data) {\n      console.info(", "00_003, data)\n      getApplicationInfoSuccess(TAG_TEST_0200_003, data);\n      ", "lityInfo_test_0100] getApplicationInfo promise data is: ' + JSON.stringify(dat", "console.info(msg + 'getApplicationInfoSuccess data length [' + data.length + '", "0100_003 = ' bundle_getApplicationInfo_test_0100_003 ';\nconst TAG_TEST_0200_00", "0200_003 = ' bundle_getApplicationInfo_test_0200_006 ';\nconst TAG_TEST_0300_00", "00_002, data)\n      getApplicationInfoSuccess(TAG_TEST_0200_002, data);\n      ", "0600_003 = ' bundle_getApplicationInfo_test_0600_0013 ';\nconst BUNDLE_NAME = '", "0200_001 = ' bundle_getApplicationInfo_test_0200_004 ';\nconst TAG_TEST_0200_00", "0_001, datas)\n      getApplicationInfoSuccess(TAG_TEST_0400_001, datas);\n     ", "t');\n        bundle.getApplicationInfo(LAUNCHER_BUNDLE_NAME, DEFAULT_FLAG, DEF", "\n            bundle.getApplicationInfo(bundleName, bundle.BundleFlag.GET_APPLI", "lityInfo_test_0600] getApplicationInfo data promise is: ' + JSON.stringify(dat", "0_002, data);\n      getApplicationInfoSuccess_plus(TAG_TEST_0200_002, data);\n ", "0400_001 = ' bundle_getApplicationInfo_test_0400_008 ';\nconst TAG_TEST_0500_00", "0_001, data);\n      getApplicationInfoSuccess(TAG_TEST_0100_001, data);\n      ", "00_002, data)\n      getApplicationInfoSuccess(TAG_TEST_0100_002, data);\n      ", "0600_001 = ' bundle_getApplicationInfo_test_0600_0011 ';\nconst TAG_TEST_0600_0", "0600_002 = ' bundle_getApplicationInfo_test_0600_0012 ';\nconst TAG_TEST_0600_0", "0100_002 = ' bundle_getApplicationInfo_test_0100_002 ';\nconst TAG_TEST_0100_00", "lityInfo_test_0200] getApplicationInfo callback data is: ' + JSON.stringify(da", "00_001, data)\n      getApplicationInfoSuccess(TAG_TEST_0100_001, data);\n      ", "data = await Bundle.getApplicationInfo(BUNDLE_NAME, Bundle.BundleFlag.GET_APPL", "0_002, data);\n      getApplicationInfoSuccess_plus(TAG_TEST_0100_002, data);\n ", "0200_002 = ' bundle_getApplicationInfo_test_0200_005 ';\nconst TAG_TEST_0200_00", "0300_001 = ' bundle_getApplicationInfo_test_0300_007 ';\nconst TAG_TEST_0400_00", "0_001, data);\n      getApplicationInfoSuccess(TAG_TEST_0200_001, data);\n      ", "0_001, datas)\n      getApplicationInfoSuccess(TAG_TEST_0300_001, datas);\n     ", "\n            bundle.getApplicationInfo(bundleName, bundle.BundleFlag.GET_BUNDL", "lityInfo_test_0400] getApplicationInfo data is: ' + JSON.stringify(data));\n   ", "0_003, data);\n      getApplicationInfoSuccess_plus(TAG_TEST_0100_003, data);\n ", "0_003, data);\n      getApplicationInfoSuccess_plus(TAG_TEST_0200_003, data);\n ", "ime();\n      Bundle.getApplicationInfo(BUNDLE_NAME, Bundle.BundleFlag.GET_APPL", ");\n          bundle.getApplicationInfo(bundleName, bundle.BundleFlag.GET_APPLI", "0500_002 = ' bundle_getApplicationInfo_test_0500_0010 ';\nconst TAG_TEST_0600_0", "0500_001 = ' bundle_getApplicationInfo_test_0500_009 ';\nconst TAG_TEST_0500_00", "00_001, data)\n      getApplicationInfoSuccess(TAG_TEST_0200_001, data);\n      ", "  });\n\n    \n    it('getApplicationInfoTest_100', 0, async function (done) {\n  ", "00_003, data)\n      getApplicationInfoSuccess(TAG_TEST_0100_003, data);\n      "], "files": ["getAllApplicationInfoJsunit.test.ets", "ActsBmsAccessTokenTest.test.js", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets", "List.test.ets", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getApplicationInfo", "api_method_all": "function getApplicationInfo(bundleName: string, bundleFlags: number, callback: AsyncCallback<ApplicationInfo>) : void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 148, "since": 7, "api_used": "\u662f", "lines": ["_001, datas);\n      getApplicationInfoSuccess(TAG_TEST_0400_001, datas);\n     ", "_001, datas);\n      getApplicationInfoSuccess(TAG_TEST_0300_001, datas);\n     ", "     console.debug('getApplicationInfoTest_100 start');\n        bundle.getAppl", "0100_001 = ' bundle_getApplicationInfo_test_0100_001 ';\nconst TAG_TEST_0100_00", "data = await Bundle.getApplicationInfo(BUNDLE_NAME, Bundle.BundleFlag.GET_ALL_", "\n\n    \n    function getApplicationInfoSuccess(msg, data) {\n      console.info(", "00_003, data)\n      getApplicationInfoSuccess(TAG_TEST_0200_003, data);\n      ", "lityInfo_test_0100] getApplicationInfo promise data is: ' + JSON.stringify(dat", "console.info(msg + 'getApplicationInfoSuccess data length [' + data.length + '", "0100_003 = ' bundle_getApplicationInfo_test_0100_003 ';\nconst TAG_TEST_0200_00", "0200_003 = ' bundle_getApplicationInfo_test_0200_006 ';\nconst TAG_TEST_0300_00", "00_002, data)\n      getApplicationInfoSuccess(TAG_TEST_0200_002, data);\n      ", "0600_003 = ' bundle_getApplicationInfo_test_0600_0013 ';\nconst BUNDLE_NAME = '", "0200_001 = ' bundle_getApplicationInfo_test_0200_004 ';\nconst TAG_TEST_0200_00", "0_001, datas)\n      getApplicationInfoSuccess(TAG_TEST_0400_001, datas);\n     ", "t');\n        bundle.getApplicationInfo(LAUNCHER_BUNDLE_NAME, DEFAULT_FLAG, DEF", "\n            bundle.getApplicationInfo(bundleName, bundle.BundleFlag.GET_APPLI", "lityInfo_test_0600] getApplicationInfo data promise is: ' + JSON.stringify(dat", "0_002, data);\n      getApplicationInfoSuccess_plus(TAG_TEST_0200_002, data);\n ", "0400_001 = ' bundle_getApplicationInfo_test_0400_008 ';\nconst TAG_TEST_0500_00", "0_001, data);\n      getApplicationInfoSuccess(TAG_TEST_0100_001, data);\n      ", "00_002, data)\n      getApplicationInfoSuccess(TAG_TEST_0100_002, data);\n      ", "0600_001 = ' bundle_getApplicationInfo_test_0600_0011 ';\nconst TAG_TEST_0600_0", "0600_002 = ' bundle_getApplicationInfo_test_0600_0012 ';\nconst TAG_TEST_0600_0", "0100_002 = ' bundle_getApplicationInfo_test_0100_002 ';\nconst TAG_TEST_0100_00", "lityInfo_test_0200] getApplicationInfo callback data is: ' + JSON.stringify(da", "00_001, data)\n      getApplicationInfoSuccess(TAG_TEST_0100_001, data);\n      ", "data = await Bundle.getApplicationInfo(BUNDLE_NAME, Bundle.BundleFlag.GET_APPL", "0_002, data);\n      getApplicationInfoSuccess_plus(TAG_TEST_0100_002, data);\n ", "0200_002 = ' bundle_getApplicationInfo_test_0200_005 ';\nconst TAG_TEST_0200_00", "0300_001 = ' bundle_getApplicationInfo_test_0300_007 ';\nconst TAG_TEST_0400_00", "0_001, data);\n      getApplicationInfoSuccess(TAG_TEST_0200_001, data);\n      ", "0_001, datas)\n      getApplicationInfoSuccess(TAG_TEST_0300_001, datas);\n     ", "\n            bundle.getApplicationInfo(bundleName, bundle.BundleFlag.GET_BUNDL", "lityInfo_test_0400] getApplicationInfo data is: ' + JSON.stringify(data));\n   ", "0_003, data);\n      getApplicationInfoSuccess_plus(TAG_TEST_0100_003, data);\n ", "0_003, data);\n      getApplicationInfoSuccess_plus(TAG_TEST_0200_003, data);\n ", "ime();\n      Bundle.getApplicationInfo(BUNDLE_NAME, Bundle.BundleFlag.GET_APPL", ");\n          bundle.getApplicationInfo(bundleName, bundle.BundleFlag.GET_APPLI", "0500_002 = ' bundle_getApplicationInfo_test_0500_0010 ';\nconst TAG_TEST_0600_0", "0500_001 = ' bundle_getApplicationInfo_test_0500_009 ';\nconst TAG_TEST_0500_00", "00_001, data)\n      getApplicationInfoSuccess(TAG_TEST_0200_001, data);\n      ", "  });\n\n    \n    it('getApplicationInfoTest_100', 0, async function (done) {\n  ", "00_003, data)\n      getApplicationInfoSuccess(TAG_TEST_0100_003, data);\n      "], "files": ["getAllApplicationInfoJsunit.test.ets", "ActsBmsAccessTokenTest.test.js", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "GetabilityInfo.test.ets", "List.test.ets", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getApplicationInfo", "api_method_all": "function getApplicationInfo(bundleName: string, bundleFlags: number, userId?: number) : Promise<ApplicationInfo>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["\n      await Bundle.getApplicationInfo('', 0)\n        .then((data) => {\n      ", "\n      await Bundle.getApplicationInfo('', '0', USER_ID_100)\n        .then((da", "\n            bundle.getApplicationInfo(bundleName, 0, 0).then(applicationInfo ", "\n      await Bundle.getApplicationInfo(BUNDLE_NAME, 0)\n        .then((data) =>"], "files": ["getApplicationInfoJsunit.test.ets", "ActsBmsAccessTokenTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "queryAbilityByWant", "api_method_all": "function queryAbilityByWant(want: Want, bundleFlags: number, userId: number, callback: AsyncCallback<Array<AbilityInfo>>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 55, "since": 7, "api_used": "\u662f", "lines": ["    * @tc.desc Test queryAbilityByWant interfaces with one hap.\n     */\n    it", " {\n    \n    it('bms_queryAbilityByWant_0100', 0, async function (done){\n      ", "ps.\n     */\n    it('queryAbilityByWant_0300', 0, async function (done) {\n     ", "     console.debug('queryAbilityByWantTest_100 start');\n        bundle.queryAb", "     async function queryAbilityByWants(){\n            await demo.queryAbility", "ty';\n        bundle.queryAbilityByWant(\n            {\n                bundleNa", "  });\n\n    \n    it('queryAbilityByWantTest_100', 0, async function (done) {\n  ", "nfos = await bundle.queryAbilityByWant({\n                    action: 'action.s", "================bms_queryAbilityByWant_0100==================');\n        let b", ")\n\n    \n    it('bms_queryAbilityByWant_0200', 0, async function (done){\n      ", "*\n     * @tc.number queryAbilityByWant_0300\n     * @tc.name BUNDLE::queryAbili", "=');\n        bundle.queryAbilityByWant(\n            {\n                action: ", "   console.log('bms_queryAbilityByWant_0100 test query system app err is ' + e", "*\n     * @tc.number queryAbilityByWant_0100\n     * @tc.name BUNDLE::queryAbili", "nfos = await bundle.queryAbilityByWant({\n                action: 'action.syste", "    * @tc.desc Test queryAbilityByWant interfaces with two haps.\n     */\n    i", "         await demo.queryAbilityByWant(\n                    {\n                ", "t');\n        bundle.queryAbilityByWant({\n            bundleName: LAUNCHER_BUND", "   console.log('bms_queryAbilityByWant_0100 install called: ' + data)\n        ", "ap.\n     */\n    it('queryAbilityByWant_0100', 0, async function (done) {\n     ", "                    queryAbilityByWants();\n                });\n            });", " * @tc.name BUNDLE::queryAbilityByWant\n     * @tc.desc Test queryAbilityByWant", "\n            bundle.queryAbilityByWant(\n                {\n                    ", "=');\n        bundle.queryAbilityByWant(\n            {\n                bundleNa", "         await demo.queryAbilityByWant(\n                {\n                    ", "   console.log('bms_queryAbilityByWant_0200 test query system app err is ' + e", "    * @tc.desc Test queryAbilityByWant interfaces with none hap.\n     */\n    i", "             bundle.queryAbilityByWant(\n                    {\n                ", "================bms_queryAbilityByWant_0200==================');\n        bundl", "*\n     * @tc.number queryAbilityByWant_0200\n     * @tc.name BUNDLE::queryAbili", "*\n     * @tc.number queryAbilityByWant_0400\n     * @tc.name BUNDLE::queryAbili", "ps.\n     */\n    it('queryAbilityByWant_0200', 0, async function (done) {\n     ", "             bundle.queryAbilityByWant({\n                    action: ['action.", "ap.\n     */\n    it('queryAbilityByWant_0400', 0, async function (done) {\n     ", " {\n            demo.queryAbilityByWant(\n                {\n                    ", "    * @tc.desc Test queryAbilityByWant interfaces with three haps.\n     */\n   ", "   console.log('bms_queryAbilityByWant_0200 test query system app ' + jsondata"], "files": ["ActsBmsMetaDataTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "ActsBmsQueryAbilityByWant.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "queryAbilityByWant", "api_method_all": "function queryAbilityByWant(want: Want, bundleFlags: number, callback: AsyncCallback<Array<AbilityInfo>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 55, "since": 7, "api_used": "\u662f", "lines": ["    * @tc.desc Test queryAbilityByWant interfaces with one hap.\n     */\n    it", " {\n    \n    it('bms_queryAbilityByWant_0100', 0, async function (done){\n      ", "ps.\n     */\n    it('queryAbilityByWant_0300', 0, async function (done) {\n     ", "     console.debug('queryAbilityByWantTest_100 start');\n        bundle.queryAb", "     async function queryAbilityByWants(){\n            await demo.queryAbility", "ty';\n        bundle.queryAbilityByWant(\n            {\n                bundleNa", "  });\n\n    \n    it('queryAbilityByWantTest_100', 0, async function (done) {\n  ", "nfos = await bundle.queryAbilityByWant({\n                    action: 'action.s", "================bms_queryAbilityByWant_0100==================');\n        let b", ")\n\n    \n    it('bms_queryAbilityByWant_0200', 0, async function (done){\n      ", "*\n     * @tc.number queryAbilityByWant_0300\n     * @tc.name BUNDLE::queryAbili", "=');\n        bundle.queryAbilityByWant(\n            {\n                action: ", "   console.log('bms_queryAbilityByWant_0100 test query system app err is ' + e", "*\n     * @tc.number queryAbilityByWant_0100\n     * @tc.name BUNDLE::queryAbili", "nfos = await bundle.queryAbilityByWant({\n                action: 'action.syste", "    * @tc.desc Test queryAbilityByWant interfaces with two haps.\n     */\n    i", "         await demo.queryAbilityByWant(\n                    {\n                ", "t');\n        bundle.queryAbilityByWant({\n            bundleName: LAUNCHER_BUND", "   console.log('bms_queryAbilityByWant_0100 install called: ' + data)\n        ", "ap.\n     */\n    it('queryAbilityByWant_0100', 0, async function (done) {\n     ", "                    queryAbilityByWants();\n                });\n            });", " * @tc.name BUNDLE::queryAbilityByWant\n     * @tc.desc Test queryAbilityByWant", "\n            bundle.queryAbilityByWant(\n                {\n                    ", "=');\n        bundle.queryAbilityByWant(\n            {\n                bundleNa", "         await demo.queryAbilityByWant(\n                {\n                    ", "   console.log('bms_queryAbilityByWant_0200 test query system app err is ' + e", "    * @tc.desc Test queryAbilityByWant interfaces with none hap.\n     */\n    i", "             bundle.queryAbilityByWant(\n                    {\n                ", "================bms_queryAbilityByWant_0200==================');\n        bundl", "*\n     * @tc.number queryAbilityByWant_0200\n     * @tc.name BUNDLE::queryAbili", "*\n     * @tc.number queryAbilityByWant_0400\n     * @tc.name BUNDLE::queryAbili", "ps.\n     */\n    it('queryAbilityByWant_0200', 0, async function (done) {\n     ", "             bundle.queryAbilityByWant({\n                    action: ['action.", "ap.\n     */\n    it('queryAbilityByWant_0400', 0, async function (done) {\n     ", " {\n            demo.queryAbilityByWant(\n                {\n                    ", "    * @tc.desc Test queryAbilityByWant interfaces with three haps.\n     */\n   ", "   console.log('bms_queryAbilityByWant_0200 test query system app ' + jsondata"], "files": ["ActsBmsMetaDataTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "ActsBmsQueryAbilityByWant.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "queryAbilityByWant", "api_method_all": "function queryAbilityByWant(want: Want, bundleFlags: number, userId?:number): Promise<Array<AbilityInfo>>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAllBundleInfo", "api_method_all": "function getAllBundleInfo(bundleFlag: BundleFlag, userId: number, callback: AsyncCallback<Array<BundleInfo>>) : void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["t data = await demo.getAllBundleInfo(1)\n            expect(typeof data).asse", "t data = await demo.getAllBundleInfo(0)\n\n            for (let i = 0; i < dat", "\n            bundle.getAllBundleInfo(1, USERID, (err, bundleInfos) => {\n    ", "  });\n\n    \n    it('getAllBundleInfoTest_100', 0, async function (done) {\n  ", "         await demo.getAllBundleInfo(0, (error, data) => {\n\n                ", "t data = await demo.getAllBundleInfo(0)\n            expect(typeof data).asse", "nfos = await bundle.getAllBundleInfo(1, USERID)\n            for (let i = 0; ", "         await demo.getAllBundleInfo(0, (error, data) => {\n                e", "         await demo.getAllBundleInfo(1, (error, data) => {\n                e", "     console.debug('getAllBundleInfoTest_100 start');\n        bundle.getAllB", "t data = await demo.getAllBundleInfo(1)\n\n            for (let i = 0; i < dat"], "files": ["ActsBmsGetBackGroundModes.test.js", "ExampleJsunit.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAllBundleInfo", "api_method_all": "function getAllBundleInfo(bundleFlag: BundleFlag, callback: AsyncCallback<Array<BundleInfo>>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["t data = await demo.getAllBundleInfo(1)\n            expect(typeof data).asse", "t data = await demo.getAllBundleInfo(0)\n\n            for (let i = 0; i < dat", "\n            bundle.getAllBundleInfo(1, USERID, (err, bundleInfos) => {\n    ", "  });\n\n    \n    it('getAllBundleInfoTest_100', 0, async function (done) {\n  ", "         await demo.getAllBundleInfo(0, (error, data) => {\n\n                ", "t data = await demo.getAllBundleInfo(0)\n            expect(typeof data).asse", "nfos = await bundle.getAllBundleInfo(1, USERID)\n            for (let i = 0; ", "         await demo.getAllBundleInfo(0, (error, data) => {\n                e", "         await demo.getAllBundleInfo(1, (error, data) => {\n                e", "     console.debug('getAllBundleInfoTest_100 start');\n        bundle.getAllB", "t data = await demo.getAllBundleInfo(1)\n\n            for (let i = 0; i < dat"], "files": ["ActsBmsGetBackGroundModes.test.js", "ExampleJsunit.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAllBundleInfo", "api_method_all": "function getAllBundleInfo(bundleFlag: BundleFlag, userId?: number) : Promise<Array<BundleInfo>>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["t');\n        bundle.getAllBundleInfo(DEFAULT_FLAG).then(data => {\n          "], "files": ["ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAllApplicationInfo", "api_method_all": "function getAllApplicationInfo(bundleFlags: number, userId: number, callback: AsyncCallback<Array<ApplicationInfo>>) : void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["tainfo = await demo.getAllApplicationInfo(8, 100)\n            console.info(\"=====", "0300_001 = ' bundle_getAllApplicationInfo_test_0300_007 ';\nconst TAG_TEST_0400_00", "0200_003 = ' bundle_getAllApplicationInfo_test_0200_006 ';\nconst TAG_TEST_0300_00", "0500_002 = ' bundle_getAllApplicationInfo_test_0500_0010 ';\nconst USER_ID_100 = 1", "0200_001 = ' bundle_getAllApplicationInfo_test_0200_004 ';\nconst TAG_TEST_0200_00", "         await demo.getAllApplicationInfo(8, 100, (error, datainfo) => {\n        ", "ime();\n      Bundle.getAllApplicationInfo(Bundle.BundleFlag.GET_APPLICATION_INFO_", "0200_002 = ' bundle_getAllApplicationInfo_test_0200_005 ';\nconst TAG_TEST_0200_00", "         await demo.getAllApplicationInfo(0, 100, (error, datainfo) => {\n        ", "0100_002 = ' bundle_getAllApplicationInfo_test_0100_002 ';\nconst TAG_TEST_0100_00", "data = await Bundle.getAllApplicationInfo(Bundle.BundleFlag.GET_ALL_APPLICATION_I", "0100_001 = ' bundle_getAllApplicationInfo_test_0100_001 ';\nconst TAG_TEST_0100_00", "pInfoJsunit from './getAllApplicationInfoJsunit.test.ets';\nimport getAbilityLabel", "data = await Bundle.getAllApplicationInfo(Bundle.BundleFlag.GET_APPLICATION_INFO_", "     console.debug('getAllApplicationInfoTest_100 start');\n        bundle.getAllA", "tainfo = await demo.getAllApplicationInfo(8, 100)\n            checkgetApplication", "0100_003 = ' bundle_getAllApplicationInfo_test_0100_003 ';\nconst TAG_TEST_0200_00", "tainfo = await demo.getAllApplicationInfo(0, 100)\n            expect(datainfo.len", "  });\n\n    \n    it('getAllApplicationInfoTest_100', 0, async function (done) {\n  ", "0500_001 = ' bundle_getAllApplicationInfo_test_0500_009 ';\nconst TAG_TEST_0500_00", "0400_001 = ' bundle_getAllApplicationInfo_test_0400_008 ';\nconst TAG_TEST_0500_00"], "files": ["List.test.ets", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAllApplicationInfo", "api_method_all": "function getAllApplicationInfo(bundleFlags: number, callback: AsyncCallback<Array<ApplicationInfo>>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["tainfo = await demo.getAllApplicationInfo(8, 100)\n            console.info(\"=====", "0300_001 = ' bundle_getAllApplicationInfo_test_0300_007 ';\nconst TAG_TEST_0400_00", "0200_003 = ' bundle_getAllApplicationInfo_test_0200_006 ';\nconst TAG_TEST_0300_00", "0500_002 = ' bundle_getAllApplicationInfo_test_0500_0010 ';\nconst USER_ID_100 = 1", "0200_001 = ' bundle_getAllApplicationInfo_test_0200_004 ';\nconst TAG_TEST_0200_00", "         await demo.getAllApplicationInfo(8, 100, (error, datainfo) => {\n        ", "ime();\n      Bundle.getAllApplicationInfo(Bundle.BundleFlag.GET_APPLICATION_INFO_", "0200_002 = ' bundle_getAllApplicationInfo_test_0200_005 ';\nconst TAG_TEST_0200_00", "         await demo.getAllApplicationInfo(0, 100, (error, datainfo) => {\n        ", "0100_002 = ' bundle_getAllApplicationInfo_test_0100_002 ';\nconst TAG_TEST_0100_00", "data = await Bundle.getAllApplicationInfo(Bundle.BundleFlag.GET_ALL_APPLICATION_I", "0100_001 = ' bundle_getAllApplicationInfo_test_0100_001 ';\nconst TAG_TEST_0100_00", "pInfoJsunit from './getAllApplicationInfoJsunit.test.ets';\nimport getAbilityLabel", "data = await Bundle.getAllApplicationInfo(Bundle.BundleFlag.GET_APPLICATION_INFO_", "     console.debug('getAllApplicationInfoTest_100 start');\n        bundle.getAllA", "tainfo = await demo.getAllApplicationInfo(8, 100)\n            checkgetApplication", "0100_003 = ' bundle_getAllApplicationInfo_test_0100_003 ';\nconst TAG_TEST_0200_00", "tainfo = await demo.getAllApplicationInfo(0, 100)\n            expect(datainfo.len", "  });\n\n    \n    it('getAllApplicationInfoTest_100', 0, async function (done) {\n  ", "0500_001 = ' bundle_getAllApplicationInfo_test_0500_009 ';\nconst TAG_TEST_0500_00", "0400_001 = ' bundle_getAllApplicationInfo_test_0400_008 ';\nconst TAG_TEST_0500_00"], "files": ["List.test.ets", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAllApplicationInfo", "api_method_all": "function getAllApplicationInfo(bundleFlags: number, userId?: number) : Promise<Array<ApplicationInfo>>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["t');\n        bundle.getAllApplicationInfo(DEFAULT_FLAG, DEFAULT_USER_ID).then(dat", "\n      await Bundle.getAllApplicationInfo('0')\n        .then((data) => {\n        ", "\n      await Bundle.getAllApplicationInfo('0', USER_ID_100)\n        .then((data) "], "files": ["getAllApplicationInfoJsunit.test.ets", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getNameForUid", "api_method_all": "function getNameForUid(uid: number, callback: AsyncCallback<string>) : void\r\n   function getNameForUid(uid: number) : Promise<string>;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["      console.info(\"getNameForUid fail:\" + JSON.stringify(err))\n         ", "   })\n\n    \n    it('getNameForUid_0100', 0, async function (done) {\n     ", "   })\n\n    \n    it('getNameForUid_0200', 0, async function (done) {\n     ", "data = await bundle.getNameForUid(dataInfo.uid)\n        expect(data).asse"], "files": ["ActsBmsJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getNameForUid", "api_method_all": "function getNameForUid(uid: number) : Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["\n            bundle.getNameForUid(dataInfo.uid).then(data => {\n          "], "files": ["ActsBmsJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getBundleArchiveInfo", "api_method_all": "function getBundleArchiveInfo(hapFilePath: string, bundleFlags: number, callback: AsyncCallback<BundleInfo>) : void\r\n  function getBundleArchiveInfo(hapFilePath: string, bundleFlags: number) : Promise<BundleInfo>;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 59, "since": 7, "api_used": "\u662f", "lines": ["      console.info(\"getBundleArchiveInfo fail\" + JSON.stringify(err))\n          ", "    * @tc.desc Test getBundleArchiveInfo interfaces with two hap.\n     */\n    it", "ap.\n     */\n    it('getBundleArchiveInfo_0800', 0, async function (done) {\n     ", "*\n     * @tc.number getBundleArchiveInfo_0900\n     * @tc.name BUNDLE::getBundleA", "*\n     * @tc.number getBundleArchiveInfo_0500\n     * @tc.name BUNDLE::getBundleA", "tainfo = await demo.getBundleArchiveInfo(PATH + BMSJSTEST4, 1)\n            expec", "ap.\n     */\n    it('getBundleArchiveInfo_0500', 0, async function (done) {\n     ", "*\n     * @tc.number getBundleArchiveInfo_0700\n     * @tc.name BUNDLE::getBundleA", "   })\n\n    \n    it('getBundleArchiveInfo_0100', 0, async function (done) {\n     ", "*\n     * @tc.number getBundleArchiveInfo_0400\n     * @tc.name BUNDLE::getBundleA", "*\n     * @tc.number getBundleArchiveInfo_0800\n     * @tc.name BUNDLE::getBundleA", "      console.info(\"getBundleArchiveInfo success\" + JSON.stringify(datainfo))\n  ", "ap.\n     */\n    it('getBundleArchiveInfo_0400', 0, async function (done) {\n     ", "\n        await demo.getBundleArchiveInfo(' ', 1, OnReceiveEvent)\n        functio", "*\n     * @tc.number getBundleArchiveInfo_1000\n     * @tc.name BUNDLE::getBundleA", "   })\n\n    \n    it('getBundleArchiveInfo_0300', 0, async function (done) {\n     ", "      console.info(\"getBundleArchiveInfo sucess\" + JSON.stringify(datainfo));\n  ", "   })\n\n    \n    it('getBundleArchiveInfo_0200', 0, async function (done) {\n     ", "      console.info(\"getBundleArchiveInfo error\" + JSON.stringify(err));\n        ", " * @tc.name BUNDLE::getBundleArchiveInfo\n     * @tc.desc Test getBundleArchiveIn", "         await demo.getBundleArchiveInfo(PATH + BMSJSTEST4, 1, OnReceiveEvent)\n\n", "ap.\n     */\n    it('getBundleArchiveInfo_0700', 0, async function (done) {\n     ", "ata5 = await bundle.getBundleArchiveInfo(BUNDLE_PATH5, 1)\n            console.in", "tainfo = await demo.getBundleArchiveInfo(PATH + BMSJSTEST2, 1)\n            expec", "ap.\n     */\n    it('getBundleArchiveInfo_0900', 0, async function (done) {\n     ", "    * @tc.desc Test getBundleArchiveInfo interfaces with none hap.\n     */\n    i", "         await demo.getBundleArchiveInfo(PATH + BMSJSTEST1, 1, OnReceiveEvent)\n\n", "    * @tc.desc Test getBundleArchiveInfo interfaces with error hap.\n     */\n    ", "*\n     * @tc.number getBundleArchiveInfo_0600\n     * @tc.name BUNDLE::getBundleA", "*\n     * @tc.number getBundleArchiveInfo_1100\n     * @tc.name BUNDLE::getBundleA", "         await demo.getBundleArchiveInfo(PATH + BMSJSTEST2, 1, OnReceiveEvent)\n\n", "\n            bundle.getBundleArchiveInfo(BUNDLE_PATH2, 1, (err, data5) => {\n    ", "ap.\n     */\n    it('getBundleArchiveInfo_0600', 0, async function (done) {\n     ", "\n        await demo.getBundleArchiveInfo(PATH + ERROR, 1, OnReceiveEvent)\n      ", "    * @tc.desc Test getBundleArchiveInfo interfaces with one hap.\n     */\n    it", "ap.\n     */\n    it('getBundleArchiveInfo_1000', 0, async function (done) {\n     ", "tainfo = await demo.getBundleArchiveInfo(PATH + BMSJSTEST1, 1)\n            expec"], "files": ["ActsBmsGetBackGroundModes.test.js", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getBundleArchiveInfo", "api_method_all": "function getBundleArchiveInfo(hapFilePath: string, bundleFlags: number) : Promise<BundleInfo>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["\n        await demo.getBundleArchiveInfo(PATH + ERROR, 1).then(datainfo => {\n   ", "tainfo = await demo.getBundleArchiveInfo(' ', 1).then(datainfo => {\n            "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getLaunchWantForBundle", "api_method_all": "function getLaunchWantForBundle(bundleName: string, callback: AsyncCallback<Want>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["  });\n\n    \n    it('getLaunchWantForBundleTest_100', 0, async function (done) {\n  ", "     console.debug('getLaunchWantForBundleTest_100 start');\n        bundle.getLaun"], "files": ["ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getLaunchWantForBundle", "api_method_all": "function getLaunchWantForBundle(bundleName: string): Promise<Want>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["t');\n        bundle.getLaunchWantForBundle(LAUNCHER_BUNDLE_NAME).then(data => {\n  "], "files": ["ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getModuleUsageRecords", "api_method_all": "function getModuleUsageRecords(maxNum: number, callback: AsyncCallback<Array<ModuleUsageRecord>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getModuleUsageRecords", "api_method_all": "function getModuleUsageRecords(maxNum: number): Promise<Array<ModuleUsageRecord>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "cleanBundleCacheFiles", "api_method_all": "function cleanBundleCacheFiles(bundleName: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["             bundle.cleanBundleCacheFiles('com.example.third1', (err) => {\n      ", "             bundle.cleanBundleCacheFiles(null, (err) => {\n                    if", "             bundle.cleanBundleCacheFiles(\"wrong bundle name\", (err) => {\n       "], "files": ["ActsBmsCleanCacheTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "cleanBundleCacheFiles", "api_method_all": "function cleanBundleCacheFiles(bundleName: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "setApplicationEnabled", "api_method_all": "function setApplicationEnabled(bundleName: string, isEnable: boolean, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["  });\n\n    \n    it('setApplicationEnabledTest_100', 0, async function (done) {\n  ", "     console.debug('setApplicationEnabledTest_100 start');\n        bundle.setAppl"], "files": ["ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "setApplicationEnabled", "api_method_all": "function setApplicationEnabled(bundleName: string, isEnable: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["\n      await Bundle.setApplicationEnabled(BUNDLE_NAME, true)\n        .then((data)", "\n      await Bundle.setApplicationEnabled(BUNDLE_NAME, false)\n        .then((data", "t');\n        bundle.setApplicationEnabled(LAUNCHER_BUNDLE_NAME, false).then(data "], "files": ["IsApplicationEnabledETSUnit.ets", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "setAbilityEnabled", "api_method_all": "function setAbilityEnabled(info: AbilityInfo, isEnable: boolean, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["  });\n\n    \n    it('setAbilityEnabledTest_100', 0, async function (done) {\n  ", "     console.debug('setAbilityEnabledTest_100 start');\n        let abilityInf"], "files": ["ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "setAbilityEnabled", "api_method_all": "function setAbilityEnabled(info: AbilityInfo, isEnable: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["\n      await Bundle.setAbilityEnabled(ABILITY, true)\n        .then((data) => ", "\n      await Bundle.setAbilityEnabled(ABILITY, false)\n        .then((data) =>", "  };\n        bundle.setAbilityEnabled(abilityInfo, false).then(data => {\n    "], "files": ["IsAbilityEnabledETSUnit.ets", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "queryExtensionAbilityInfosByWant", "api_method_all": "function queryExtensionAbilityInfosByWant(want: Want, extensionFlags: number, userId: number, callback: AsyncCallback<Array<ExtensionAbilityInfo>>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "queryExtensionAbilityInfosByWant", "api_method_all": "function queryExtensionAbilityInfosByWant(want: Want, extensionFlags: number, callback: AsyncCallback<Array<ExtensionAbilityInfo>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "queryExtensionAbilityInfosByWant", "api_method_all": "function queryExtensionAbilityInfosByWant(want: Want, extensionFlags: number, userId?: number): Promise<Array<ExtensionAbilityInfo>>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getPermissionDef", "api_method_all": "function getPermissionDef(permissionName: string, callback: AsyncCallback<PermissionDef>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getPermissionDef", "api_method_all": "function getPermissionDef(permissionName: string): Promise<PermissionDef>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAbilityLabel", "api_method_all": "function getAbilityLabel(bundleName: string, abilityName: string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 59, "since": 8, "api_used": "\u662f", "lines": ["   \n    it('context_getAbilityLabel_test_0100', 0, async function (done) {\n", "\n      await Bundle.getAbilityLabel(BUNDLE_NAME_ERROR, ABILITY_NAME_ERROR)\n", "sole.info('[context_getAbilityLabel_test_0600]  callBack error: ' + error);", "sole.info('[context_getAbilityLabel_test_0100]  promise data is: ' + JSON.s", "ationTime('[context_getAbilityLabel_test_0600]', timeOldStamp, timeNewStamp", "elFailure('[context_getAbilityLabel_test_0600]', error);\n        expect(dat", "ationTime('[context_getAbilityLabel_test_0200]', timeOldStamp, timeNewStamp", "sole.info('[context_getAbilityLabel_test_0200]  callBack data is:' + JSON.s", "sole.info('[context_getAbilityLabel_test_0100]  promise error is: ' + error", "\n      await Bundle.getAbilityLabel(OTHER_BUNDLE_NAME, OTHER_ABILITY_NAME)\n", "Error;\n      Bundle.getAbilityLabel(BUNDLE_NAME, SERVICE_ABILITY_NAME, (err", ".sleep(2000);\n      getAbilityLabelSuccess('[context_getAbilityLabel_test_0", "elSuccess('[context_getAbilityLabel_test_0200]', mData);\n      done();\n    ", "rt default function getAbilityLabelJsUnit() {\n\n  describe('context_getAbili", "  describe('context_getAbilityLabel_test', function () {\n    \n    it('conte", ".sleep(2000);\n      getAbilityLabelFailure('[context_getAbilityLabel_test_0", "ationTime('[context_getAbilityLabel_test_0500]', timeOldStamp, timeNewStamp", "Error;\n      Bundle.getAbilityLabel(BUNDLE_NAME_ERROR, ABILITY_NAME_ERROR, ", "       await bundle.getAbilityLabel(LAUNCHER_BUNDLE_NAME, LAUNCHER_MAIN_ABI", "ationTime('[context_getAbilityLabel_test_0300]', timeOldStamp, timeNewStamp", "   \n    it('context_getAbilityLabel_test_0500', 0, async function (done) {\n", "elFailure('[context_getAbilityLabel_test_0400]', mError);\n      done();\n   ", "sole.info('[context_getAbilityLabel_test_0300]  promise data is: ' + JSON.s", "sole.info('[context_getAbilityLabel_test_0500]  promise error is: ' + error", "+ error);\n          getAbilityLabelFailure('[context_getAbilityLabel_test_0", "ationTime('[context_getAbilityLabel_test_0400]', timeOldStamp, timeNewStamp", "    console.debug('[getAbilityLabelTest_100] promise START');\n        await", "sole.info('[context_getAbilityLabel_test_0400]  callBack error: ' + error);", "\n      await Bundle.getAbilityLabel(BUNDLE_NAME, ABILITY_NAME)\n        .the", "  });\n\n    \n    it('getAbilityLabelTest_100', 0, async function (done) {\n  ", "sole.info('[context_getAbilityLabel_test_0200]  callBack error: ' + error);", "sole.info('[context_getAbilityLabel_test_0300]  promise error is: ' + error", "sole.info('[context_getAbilityLabel_test_0400]  callBack data is:' + JSON.s", "   \n    it('context_getAbilityLabel_test_0400', 0, async function (done) {\n", "ime();\n      Bundle.getAbilityLabel(OTHER_BUNDLE_NAME, OTHER_ABILITY_NAME, ", "elSuccess('[context_getAbilityLabel_test_0100]', mData);\n      done();\n    ", "sole.info('[context_getAbilityLabel_test_0500]  promise data is: ' + JSON.s", "   \n    it('context_getAbilityLabel_test_0200', 0, async function (done) {\n", "' + error);\n        getAbilityLabelFailure('[context_getAbilityLabel_test_0", "elFailure('[context_getAbilityLabel_test_0500]', mError);\n        });\n     ", ";\n        });\n      getAbilityLabelSuccess('[context_getAbilityLabel_test_0", "   \n    it('context_getAbilityLabel_test_0600', 0, async function (done) {\n", "ole.error('[context_getAbilityLabel_test_0200]Operation failed. Cause: ' + ", "ationTime('[context_getAbilityLabel_test_0100]', timeOldStamp, timeNewStamp", "mData;\n      Bundle.getAbilityLabel(BUNDLE_NAME, ABILITY_NAME, (error, data", "elFailure('[context_getAbilityLabel_test_0300]', mError);\n      done();\n   ", "   \n    it('context_getAbilityLabel_test_0700', 0, async function (done) {\n", "   \n    it('context_getAbilityLabel_test_0300', 0, async function (done) {\n"], "files": ["GetAbilityLabelJsUnit.test.ets", "List.test.ets", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAbilityLabel", "api_method_all": "function getAbilityLabel(bundleName: string, abilityName: string): Promise<string>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAbilityIcon", "api_method_all": "function getAbilityIcon(bundleName: string, abilityName: string, callback: AsyncCallback<image.PixelMap>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["   * @tc.name: test getAbilityIcon\n     * @tc.desc: get the abilityIcon\n  ", "      console.info(\"getAbilityIcon fail:\" + JSON.stringify(err))\n         ", "  console.info('bms_getAbilityIcon_0200 success: ' + JSON.stringify(pixelm", "  * @tc.number: bms_getAbilityIcon_0200\n     * @tc.name: test getAbilityIc", "     */\n    it('bms_getAbilityIcon_0200', 0, async function (done) {\n     ", "   console.log('bms_getAbilityIcon_0100 success: ' + pixelmap);\n          ", "e) {\n        bundle.getAbilityIcon(BUNDLE_NAME6, ABILITIY_NAME, (err, pixe", "   * @tc.name: test getAbilityIcon`\n     * @tc.desc: get the abilityIcon\n ", "     */\n    it('bms_getAbilityIcon_0100', 0, async function (done) {\n     ", "  * @tc.number: bms_getAbilityIcon_0100\n     * @tc.name: test getAbilityIc"], "files": ["ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "getAbilityIcon", "api_method_all": "function getAbilityIcon(bundleName: string, abilityName: string): Promise<image.PixelMap>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["e) {\n        bundle.getAbilityIcon(BUNDLE_NAME6, ABILITIY_NAME).then(pixel"], "files": ["ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "isAbilityEnabled", "api_method_all": "function isAbilityEnabled(info: AbilityInfo, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 60, "since": 8, "api_used": "\u662f", "lines": ["   \n    it('context_isAbilityEnabled_test_0200', 0, async function (done) {\n", "   \n    it('context_isAbilityEnabled_test_0500', 0, async function (done) {\n", "ationTime('[context_isAbilityEnabled_test_0300]', timeOldStamp, timeNewStamp", "   \n    it('context_isAbilityEnabled_test_0300', 0, async function (done) {\n", "mData;\n      Bundle.isAbilityEnabled(ABILITY_ERROR, (error, data) => {\n     ", "sole.info('[context_isAbilityEnabled_test_0600]  promise data is: ' + JSON.s", "sole.info('[context_isAbilityEnabled_test_0600]  set enable false data is: '", "edSuccess('[context_isAbilityEnabled_test_0200]', mData);\n      done();\n    ", "sole.info('[context_isAbilityEnabled_test_0100]  promise data is: ' + JSON.s", "sole.info('[context_isAbilityEnabled_test_0100]  promise error is: ' + error", "sole.info('[context_isAbilityEnabled_test_0400]  Failure ');\n      getAbilit", "rt default function isAbilityEnabledETSUnit() {\n  describe('context_isAbilit", "   \n    it('context_isAbilityEnabled_test_0400', 0, async function (done) {\n", "sole.info('[context_isAbilityEnabled_test_0200]  callBack data is:' + JSON.s", "sole.info('[context_isAbilityEnabled_test_0300]  promise error is: ' + error", "   \n    it('context_isAbilityEnabled_test_0100', 0, async function (done) {\n", "   \n    it('context_isAbilityEnabled_test_0600', 0, async function (done) {\n", "sole.info('[context_isAbilityEnabled_test_0200]  callBack error: ' + error);", "bledFalse('[context_isAbilityEnabled_test_0300]', mData);\n      done();\n    ", "ationTime('[context_isAbilityEnabled_test_0100]', timeOldStamp, timeNewStamp", "sole.info('[context_isAbilityEnabled_test_0500]  set enable true data is: ' ", "  describe('context_isAbilityEnabled_test', function () {\n    \n    it('conte", "edSuccess('[context_isAbilityEnabled_test_0100]', mData);\n      done();\n    ", "sole.info('[context_isAbilityEnabled_test_0500]  set enable true error is: '", "sole.info('[context_isAbilityEnabled_test_0500]  promise data is: ' + JSON.s", "ationTime('[context_isAbilityEnabled_test_0600]', timeOldStamp, timeNewStamp", "sole.info('[context_isAbilityEnabled_test_0700]  callBack data is:' + JSON.s", "sole.info('[context_isAbilityEnabled_test_0400]  callBack error: ' + error);", "mData;\n      Bundle.isAbilityEnabled(ABILITY, (error, data) => {\n        if(", "sole.info('[context_isAbilityEnabled_test_0400]  callBack data is:' + JSON.s", "sole.info('[context_isAbilityEnabled_test_0700]  callBack error: ' + error);", "sole.info('[context_isAbilityEnabled_test_0500]  promise error is: ' + error", "ole.error('[context_isAbilityEnabled_test_0400]Operation failed. Cause: ' + ", "ole.error('[context_isAbilityEnabled_test_0200]Operation failed. Cause: ' + ", "sole.info('[context_isAbilityEnabled_test_0600]  set enable false error is: ", "   \n    it('context_isAbilityEnabled_test_0700', 0, async function (done) {\n", "ationTime('[context_isAbilityEnabled_test_0700]', timeOldStamp, timeNewStamp", "sole.info('[context_isAbilityEnabled_test_0600]  promise error is: ' + error", "ole.error('[context_isAbilityEnabled_test_0700]Operation failed. Cause: ' + ", "abledTrue('[context_isAbilityEnabled_test_0500]', mData);\n      done();\n    ", "sole.info('[context_isAbilityEnabled_test_0300]  promise data is: ' + JSON.s", "ationTime('[context_isAbilityEnabled_test_0500]', timeOldStamp, timeNewStamp", "sole.info('[context_isAbilityEnabled_test_0700]  set enable true error is: '", "ationTime('[context_isAbilityEnabled_test_0200]', timeOldStamp, timeNewStamp", "sole.info('[context_isAbilityEnabled_test_0700]  set enable true data is: ' ", "bledFalse('[context_isAbilityEnabled_test_0600]', mData);\n      done();\n    "], "files": ["IsAbilityEnabledETSUnit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "isAbilityEnabled", "api_method_all": "function isAbilityEnabled(info: AbilityInfo): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["\n      await Bundle.isAbilityEnabled(ABILITY)\n        .then((data) => {\n    ", "\n      await Bundle.isAbilityEnabled(ABILITY_ERROR)\n        .then((data) => "], "files": ["IsAbilityEnabledETSUnit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "isApplicationEnabled", "api_method_all": "function isApplicationEnabled(bundleName: string, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 45, "since": 0, "api_used": "\u662f", "lines": ["sole.info('[context_isApplicationEnabled_test_0300]  promise error is: ' + error", "sole.info('[context_isApplicationEnabled_test_0400]  callBack error: ' + error);", "TSUnit.ets\";\nimport isApplicationEnabledETSUnit from \"./IsApplicationEnabledETSU", "ole.error('[context_isApplicationEnabled_test_0600]Operation failed. Cause: ' + ", "ationTime('[context_isApplicationEnabled_test_0600]', timeOldStamp, timeNewStamp", "   \n    it('context_isApplicationEnabled_test_0100', 0, async function (done) {\n", "sole.info('[context_isApplicationEnabled_test_0600]  callBack data is:' + JSON.s", "sole.info('[context_isApplicationEnabled_test_0300]  promise data is: ' + JSON.s", "sole.info('[context_isApplicationEnabled_test_0500]  set enable true error is: '", "   \n    it('context_isApplicationEnabled_test_0200', 0, async function (done) {\n", "sole.info('[context_isApplicationEnabled_test_0600]  set enable false error is: ", "ationTime('[context_isApplicationEnabled_test_0200]', timeOldStamp, timeNewStamp", "yEnableETSUnit();\n  isApplicationEnabledETSUnit();\n}", "mData;\n      Bundle.isApplicationEnabled(BUNDLE_NAME_ERROR, (error, data) => {\n ", "ationTime('[context_isApplicationEnabled_test_0500]', timeOldStamp, timeNewStamp", "sole.info('[context_isApplicationEnabled_test_0600]  set enable false data is: '", "sole.info('[context_isApplicationEnabled_test_0100]  promise error is: ' + error", "sole.info('[context_isApplicationEnabled_test_0500]  promise data is: ' + JSON.s", "abledTrue('[context_isApplicationEnabled_test_0500]', mData);\n      done();\n    ", "   \n    it('context_isApplicationEnabled_test_0600', 0, async function (done) {\n", "edSuccess('[context_isApplicationEnabled_test_0200]', mData);\n      done();\n    ", "ole.error('[context_isApplicationEnabled_test_0400]Operation failed. Cause: ' + ", "sole.info('[context_isApplicationEnabled_test_0500]  set enable true data is: ' ", "sole.info('[context_isApplicationEnabled_test_0400]  callBack data is:' + JSON.s", "sole.info('[context_isApplicationEnabled_test_0400]  Failure ');\n      done();\n ", "edSuccess('[context_isApplicationEnabled_test_0100]', mData);\n      done();\n    ", "   \n    it('context_isApplicationEnabled_test_0500', 0, async function (done) {\n", "sole.info('[context_isApplicationEnabled_test_0100]  promise data is: ' + JSON.s", "ationTime('[context_isApplicationEnabled_test_0400]', timeOldStamp, timeNewStamp", "sole.info('[context_isApplicationEnabled_test_0200]  callBack error: ' + error);", "sole.info('[context_isApplicationEnabled_test_0600]  callBack error: ' + error);", "bledFalse('[context_isApplicationEnabled_test_0300]', mData);\n      done();\n    ", "ationTime('[context_isApplicationEnabled_test_0100]', timeOldStamp, timeNewStamp", "ole.error('[context_isApplicationEnabled_test_0200]Operation failed. Cause: ' + ", "   \n    it('context_isApplicationEnabled_test_0300', 0, async function (done) {\n", "bledFalse('[context_isApplicationEnabled_test_0300]', mData);\n      console.info", "  describe('context_isApplicationEnabled_test', function () {\n    \n    it('conte", "mData;\n      Bundle.isApplicationEnabled(BUNDLE_NAME, (error, data) => {\n       ", "sole.info('[context_isApplicationEnabled_test_0200]  callBack data is:' + JSON.s", "   \n    it('context_isApplicationEnabled_test_0400', 0, async function (done) {\n", "sole.info('[context_isApplicationEnabled_test_0500]  promise error is: ' + error", "bledFalse('[context_isApplicationEnabled_test_0600]', mData);\n      done();\n    ", "ationTime('[context_isApplicationEnabled_test_0300]', timeOldStamp, timeNewStamp"], "files": ["List.test.ets", "IsApplicationEnabledETSUnit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "bundle", "api_method_name": "isApplicationEnabled", "api_method_all": "function isApplicationEnabled(bundleName: string): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["\n      await Bundle.isApplicationEnabled(BUNDLE_NAME_ERROR)\n        .then((data)", "\n      await Bundle.isApplicationEnabled(BUNDLE_NAME)\n        .then((data) => {\n"], "files": ["IsApplicationEnabledETSUnit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_all": "enum BundleFlag {\r\n    GET_BUNDLE_DEFAULT = 0x00000000,\r\n    GET_BUNDLE_WITH_ABILITIES = 0x00000001,\r\n    GET_ABILITY_INFO_WITH_PERMISSION = 0x00000002,\r\n    GET_ABILITY_INFO_WITH_APPLICATION = 0x00000004,\r\n    GET_APPLICATION_INFO_WITH_PERMISSION = 0x00000008,\r\n    GET_BUNDLE_WITH_REQUESTED_PERMISSION = 0x00000010,\r\n    GET_ALL_APPLICATION_INFO = 0xFFFF0000,\r\n    \r\n    GET_ABILITY_INFO_WITH_METADATA = 0x00000020,\r\n    \r\n     GET_BUNDLE_WITH_EXTENSION_ABILITY = 0x00000020,\r\n    \r\n     GET_APPLICATION_INFO_WITH_METADATA = 0x00000040,\r\n    \r\n    GET_ABILITY_INFO_SYSTEMAPP_ONLY = 0x00000080,\r\n    \r\n    GET_ABILITY_INFO_WITH_DISABLE = 0x00000100,\r\n    \r\n    GET_APPLICATION_INFO_WITH_DISABLE = 0x00000200,\r\n  }", "api_method_name": "BundleFlag", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 81, "since": 7, "api_used": "\u662f", "lines": ["ionInfo(NAME1, demo.BundleFlag.GET_APPLICATION_INF", "_APPLICATION|bundle.BundleFlag.GET_ABILITY_INFO_SY", "licationInfo(Bundle.BundleFlag.GET_APPLICATION_INF", "dleInfo(NAME1, demo.BundleFlag.GET_BUNDLE_DEFAULT,", "               demo.BundleFlag.GET_APPLICATION_INF", "\n            bundle.BundleFlag.GET_ABILITY_INFO_WI", "          }, bundle.BundleFlag.GET_ABILITY_INFO_WI", "_NAME_OTHER, Bundle.BundleFlag.GET_APPLICATION_INF", "WITH_ABILITIES|demo.BundleFlag.GET_BUNDLE_WITH_REQ", "HER,\n        Bundle.BundleFlag.GET_APPLICATION_INF", "dleInfo(NAME2, demo.BundleFlag.GET_BUNDLE_WITH_ABI", "ionInfo(NAME1, demo.BundleFlag.GET_BUNDLE_DEFAULT,", "eInfo('error', demo.BundleFlag.GET_BUNDLE_WITH_ABI", "(bundleName, bundle.BundleFlag.GET_BUNDLE_DEFAULT)", "               demo.BundleFlag.GET_BUNDLE_WITH_ABI", "BUNDLE_NAME, Bundle.BundleFlag.GET_ALL_APPLICATION", "(bundleName, bundle.BundleFlag.GET_APPLICATION_INF", "licationInfo(Bundle.BundleFlag.GET_ALL_APPLICATION", "dleInfo(NAME1, demo.BundleFlag.GET_BUNDLE_WITH_ABI", "ionInfo(NAME3, demo.BundleFlag.GET_APPLICATION_INF", "ITH_PERMISSION|demo.BundleFlag.GET_APPLICATION_INF", "dleInfo(NAME1, demo.BundleFlag.GET_BUNDLE_DEFAULT)", "BUNDLE_NAME, Bundle.BundleFlag.GET_APPLICATION_INF", "(bundleName, bundle.BundleFlag.GET_BUNDLE_WITH_ABI"], "files": ["ActsBmsMetaDataTest.test.js", "getAllApplicationInfoJsunit.test.ets", "ActsBmsAccessTokenTest.test.js", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "ActsBmsQueryAbilityByWant.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_BUNDLE_DEFAULT", "api_method_all": "GET_BUNDLE_DEFAULT = 0x00000000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["E1, demo.BundleFlag.GET_BUNDLE_DEFAULT, OnReceiveEvent)\n  ", "E1, demo.BundleFlag.GET_BUNDLE_DEFAULT, 100, (error, datai", "E1, demo.BundleFlag.GET_BUNDLE_DEFAULT, 100).then(datainfo", "1', demo.BundleFlag.GET_BUNDLE_DEFAULT);\n            expec", "me, demo.BundleFlag.GET_BUNDLE_DEFAULT\n                ).t", "E1, demo.BundleFlag.GET_BUNDLE_DEFAULT)\n            expect", "E2, demo.BundleFlag.GET_BUNDLE_DEFAULT);\n            expec", ", bundle.BundleFlag.GET_BUNDLE_DEFAULT).then((applicationI"], "files": ["ExampleJsunit.test.js", "ActsBmsAccessTokenTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_BUNDLE_WITH_ABILITIES", "api_method_all": "GET_BUNDLE_WITH_ABILITIES = 0x00000001,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 26, "since": 7, "api_used": "\u662f", "lines": ["E1, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES, {\n                ", "r', demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES, OnReceiveEvent)\n  ", "E5, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES).then(dataInfo3 => ", "1', demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES);\n            expec", "r', demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES).then(datainfo => {", "E2, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES, OnReceiveEvent)\n  ", "E1, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES);\n            conso", "E3, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES).then(dataInfo1 => ", "D1, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES);\n            expec", "E1, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES, bundleOptions);\n  ", "    demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES).then(datainfo => {", "E1, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES, bundleOptions, (er", "E1, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES, OnReceiveEvent)\n  ", "E2, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES)\n            expect", "E2, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES);\n            expec", ", bundle.BundleFlag.GET_BUNDLE_WITH_ABILITIES)\n            .then(", "ER, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES).then(datainfo => {", "E4, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES).then(dataInfo2 => ", "    demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES|demo.BundleFlag.GET", "E1, demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES);\n            expec", " ', demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES).then(datainfo => {", " ', demo.BundleFlag.GET_BUNDLE_WITH_ABILITIES, OnReceiveEvent)\n\n "], "files": ["ExampleJsunit.test.js", "ActsBmsAccessTokenTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_ABILITY_INFO_WITH_PERMISSION", "api_method_all": "GET_ABILITY_INFO_WITH_PERMISSION = 0x00000002,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["    demo.BundleFlag.GET_ABILITY_INFO_WITH_PERMISSION | \n                "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_ABILITY_INFO_WITH_APPLICATION", "api_method_all": "GET_ABILITY_INFO_WITH_APPLICATION = 0x00000004,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["  bundle.BundleFlag.GET_ABILITY_INFO_WITH_APPLICATION|bundle.BundleFlag.G", " }, demo.BundleFlag.GET_ABILITY_INFO_WITH_APPLICATION | \n                ", ", bundle.BundleFlag.GET_ABILITY_INFO_WITH_APPLICATION|bundle.BundleFlag.G"], "files": ["ExampleJsunit.test.js", "ActsBmsQueryAbilityByWant.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_APPLICATION_INFO_WITH_PERMISSION", "api_method_all": "GET_APPLICATION_INFO_WITH_PERMISSION = 0x00000008,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": ["o(Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION)\n        .catch((er", "o(Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION, (error, data) => {", "    demo.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION, 100, (error, datai", "  Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION)\n        .then((dat", "E3, demo.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION,\n                de", "OR, demo.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION, 100).then(datainfo", "o(Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION, USER_ID_100)\n     ", "E1, demo.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION, 100,\n             ", "    demo.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION|demo.BundleFlag.GET", ", Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION,\n        USER_ID_10", "    demo.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION, 100)\n            c", "'', demo.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION, 100, (error, datai", ", Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION,\n          USER_ID_", "o(Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION, USER_ID_100,\n     ", ", bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION)\n          .then((a", ", bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION)\n            .then(", ", Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION)\n        .catch((er", ", Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION, (error, data) => {", "OR, demo.BundleFlag.GET_APPLICATION_INFO_WITH_PERMISSION, 100, (error, datai"], "files": ["getApplicationInfoJsunit.test.ets", "getAllApplicationInfoJsunit.test.ets", "ActsBmsAccessTokenTest.test.js", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_BUNDLE_WITH_REQUESTED_PERMISSION", "api_method_all": "GET_BUNDLE_WITH_REQUESTED_PERMISSION = 0x00000010,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["IES|demo.BundleFlag.GET_BUNDLE_WITH_REQUESTED_PERMISSION)\n            expect"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_ALL_APPLICATION_INFO", "api_method_all": "GET_ALL_APPLICATION_INFO = 0xFFFF0000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": [", Bundle.BundleFlag.GET_ALL_APPLICATION_INFO, USER_ID_100)\n     ", ", Bundle.BundleFlag.GET_ALL_APPLICATION_INFO)\n        .catch((er", "o(Bundle.BundleFlag.GET_ALL_APPLICATION_INFO, USER_ID_100)\n     ", "o(Bundle.BundleFlag.GET_ALL_APPLICATION_INFO)\n        .catch((er", " }, demo.BundleFlag.GET_ALL_APPLICATION_INFO, 100)\n            e"], "files": ["getApplicationInfoJsunit.test.ets", "getAllApplicationInfoJsunit.test.ets", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_ABILITY_INFO_WITH_METADATA", "api_method_all": "GET_ABILITY_INFO_WITH_METADATA = 0x00000020,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["    demo.BundleFlag.GET_ABILITY_INFO_WITH_METADATA,\n                  ", ", bundle.BundleFlag.GET_ABILITY_INFO_WITH_METADATA, 100).then(dataInfo"], "files": ["ActsBmsMetaDataTest.test.js", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_BUNDLE_WITH_EXTENSION_ABILITY", "api_method_all": "GET_BUNDLE_WITH_EXTENSION_ABILITY = 0x00000020,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_APPLICATION_INFO_WITH_METADATA", "api_method_all": "GET_APPLICATION_INFO_WITH_METADATA = 0x00000040,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["ION|demo.BundleFlag.GET_APPLICATION_INFO_WITH_METADATA,\n                10"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_ABILITY_INFO_SYSTEMAPP_ONLY", "api_method_all": "GET_ABILITY_INFO_SYSTEMAPP_ONLY = 0x00000080,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["N|bundle.BundleFlag.GET_ABILITY_INFO_SYSTEMAPP_ONLY, \n        100).then", "N|bundle.BundleFlag.GET_ABILITY_INFO_SYSTEMAPP_ONLY, \n                1"], "files": ["ActsBmsQueryAbilityByWant.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_ABILITY_INFO_WITH_DISABLE", "api_method_all": "GET_ABILITY_INFO_WITH_DISABLE = 0x00000100,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BundleFlag", "api_method_name": "GET_APPLICATION_INFO_WITH_DISABLE", "api_method_all": "GET_APPLICATION_INFO_WITH_DISABLE = 0x00000200,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": [", Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_DISABLE,\n        USER_ID_10", "o(Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_DISABLE)\n        .catch((er", ", Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_DISABLE)\n        .catch((er", "o(Bundle.BundleFlag.GET_APPLICATION_INFO_WITH_DISABLE, USER_ID_100)\n     "], "files": ["getApplicationInfoJsunit.test.ets", "getAllApplicationInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionFlag", "api_method_all": "enum ExtensionFlag {\r\n    GET_EXTENSION_INFO_DEFAULT = 0x00000000,\r\n    GET_EXTENSION_INFO_WITH_PERMISSION = 0x00000002,\r\n    GET_EXTENSION_INFO_WITH_APPLICATION = 0x00000004,\r\n    GET_EXTENSION_INFO_WITH_METADATA = 0x00000020,\r\n  }", "api_method_name": "ExtensionFlag", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionFlag", "api_method_name": "GET_EXTENSION_INFO_DEFAULT", "api_method_all": "GET_EXTENSION_INFO_DEFAULT = 0x00000000,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionFlag", "api_method_name": "GET_EXTENSION_INFO_WITH_PERMISSION", "api_method_all": "GET_EXTENSION_INFO_WITH_PERMISSION = 0x00000002,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionFlag", "api_method_name": "GET_EXTENSION_INFO_WITH_APPLICATION", "api_method_all": "GET_EXTENSION_INFO_WITH_APPLICATION = 0x00000004,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionFlag", "api_method_name": "GET_EXTENSION_INFO_WITH_METADATA", "api_method_all": "GET_EXTENSION_INFO_WITH_METADATA = 0x00000020,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ColorMode", "api_method_all": "export enum ColorMode {\r\n    AUTO_MODE = -1,\r\n    DARK_MODE = 0,\r\n    LIGHT_MODE = 1,\r\n  }", "api_method_name": "ColorMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": [".assertEqual(bundle.ColorMode.DARK_MODE);\n       ", ".assertEqual(bundle.ColorMode.LIGHT_MODE);\n      ", ".assertEqual(bundle.ColorMode.AUTO_MODE);\n       "], "files": ["ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ColorMode", "api_method_name": "AUTO_MODE", "api_method_all": "AUTO_MODE = -1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["al(bundle.ColorMode.AUTO_MODE);\n        expect(da"], "files": ["ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ColorMode", "api_method_name": "DARK_MODE", "api_method_all": "DARK_MODE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["al(bundle.ColorMode.DARK_MODE);\n        expect(da"], "files": ["ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ColorMode", "api_method_name": "LIGHT_MODE", "api_method_all": "LIGHT_MODE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["al(bundle.ColorMode.LIGHT_MODE);\n        expect(ty"], "files": ["ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GrantStatus", "api_method_all": "export enum GrantStatus {\r\n    PERMISSION_DENIED = -1,\r\n    PERMISSION_GRANTED = 0,\r\n  }", "api_method_name": "GrantStatus", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GrantStatus", "api_method_name": "PERMISSION_DENIED", "api_method_all": "PERMISSION_DENIED = -1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["ual(\"STATUS_INSTALL_PERMISSION_DENIED\");\n            done", "al(STATUS_UNINSTALL_PERMISSION_DENIED);\n            expec", "onst STATUS_INSTALL_PERMISSION_DENIED = 0X44;\nconst STATU", "l(\"STATUS_UNINSTALL_PERMISSION_DENIED\");\n            done", "st STATUS_UNINSTALL_PERMISSION_DENIED = 0X45;\n\nconst LAUN", "qual(STATUS_INSTALL_PERMISSION_DENIED);\n            expec"], "files": ["ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GrantStatus", "api_method_name": "PERMISSION_GRANTED", "api_method_all": "PERMISSION_GRANTED = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityType", "api_method_all": "export enum AbilityType {\r\n    \r\n    UNKNOWN,\r\n\r\n    \r\n    PAGE,\r\n\r\n    \r\n    SERVICE,\r\n\r\n    \r\n    DATA,\r\n  }", "api_method_name": "AbilityType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["e).assertEqual(demo.AbilityType.PAGE)\n             "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityType", "api_method_name": "UNKNOWN", "api_method_all": "UNKNOWN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityType", "api_method_name": "PAGE", "api_method_all": "PAGE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["al(demo.AbilityType.PAGE)\n                  "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityType", "api_method_name": "SERVICE", "api_method_all": "SERVICE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["yLabel(BUNDLE_NAME, SERVICE_ABILITY_NAME, (erro", ".MainAbility'\nconst SERVICE_ABILITY_NAME = 'com", "sage == \"STATUS_BMS_SERVICE_ERROR\" ||\n         "], "files": ["GetAbilityLabelJsUnit.test.ets", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilityType", "api_method_name": "DATA", "api_method_all": "DATA,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["ILITY_INFO_WITH_METADATA, 100).then(dataInfo", "ATION_INFO_WITH_METADATA,\n                10", "ILITY_INFO_WITH_METADATA,\n                  "], "files": ["ActsBmsMetaDataTest.test.js", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilitySubType", "api_method_all": "export enum AbilitySubType {\r\n    UNSPECIFIED = 0,\r\n    CA = 1,\r\n  }", "api_method_name": "AbilitySubType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["e).assertEqual(demo.AbilitySubType.UNSPECIFIED)\n      ", "        expect(demo.AbilitySubType.CA).assertEqual(1);"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilitySubType", "api_method_name": "UNSPECIFIED", "api_method_all": "UNSPECIFIED = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [".DisplayOrientation.UNSPECIFIED)\n                  ", "demo.AbilitySubType.UNSPECIFIED)\n                  "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AbilitySubType", "api_method_name": "CA", "api_method_all": "CA = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": ["LITY_INFO_WITH_APPLICATION|bundle.BundleFl", "BundleFlag.GET_APPLICATION_INFO_WITH_METAD", "leFlag.GET_ALL_APPLICATION_INFO, USER_ID_1", "sion.BMS_PERMISSION_CAMERA\")\n             ", "leFlag.GET_ALL_APPLICATION_INFO)\n        .", "demo.AbilitySubType.CA).assertEqual(1);\n  ", "(\"ohos.permission.LOCATION_IN_BACKGROUND\")", "BundleFlag.GET_APPLICATION_INFO_WITH_PERMI", "leFlag.GET_ALL_APPLICATION_INFO, 100)\n    ", "BundleFlag.GET_APPLICATION_INFO_WITH_DISAB", "LITY_INFO_WITH_APPLICATION | \n            "], "files": ["getAllApplicationInfoJsunit.test.ets", "ActsBmsAccessTokenTest.test.js", "ExampleJsunit.test.js", "getApplicationInfoJsunit.test.ets", "ActsBmsQueryAbilityByWant.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DisplayOrientation", "api_method_all": "export enum DisplayOrientation {\r\n    \r\n    UNSPECIFIED,\r\n\r\n    \r\n    LANDSCAPE,\r\n\r\n    \r\n    PORTRAIT,\r\n\r\n    \r\n    FOLLOW_RECENT,\r\n  }", "api_method_name": "DisplayOrientation", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["n).assertEqual(demo.DisplayOrientation.UNSPECIFIED)\n      "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DisplayOrientation", "api_method_name": "UNSPECIFIED", "api_method_all": "UNSPECIFIED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [".DisplayOrientation.UNSPECIFIED)\n                  ", "demo.AbilitySubType.UNSPECIFIED)\n                  "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DisplayOrientation", "api_method_name": "LANDSCAPE", "api_method_all": "LANDSCAPE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DisplayOrientation", "api_method_name": "PORTRAIT", "api_method_all": "PORTRAIT,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DisplayOrientation", "api_method_name": "FOLLOW_RECENT", "api_method_all": "FOLLOW_RECENT,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LaunchMode", "api_method_all": "export enum LaunchMode {\r\n    \r\n    SINGLETON = 0,\r\n\r\n    \r\n    STANDARD = 1,\r\n  }", "api_method_name": "LaunchMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["e).assertEqual(demo.LaunchMode.STANDARD)\n         ", "e).assertEqual(demo.LaunchMode.SINGLETON)\n        "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LaunchMode", "api_method_name": "SINGLETON", "api_method_all": "SINGLETON = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ual(demo.LaunchMode.SINGLETON)\n                ex"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LaunchMode", "api_method_name": "STANDARD", "api_method_all": "STANDARD = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ual(demo.LaunchMode.STANDARD)\n                  "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_all": "export enum ExtensionAbilityType {\r\n    \r\n    FORM = 0,\r\n    \r\n    WORK_SCHEDULER = 1,\r\n    \r\n    INPUT_METHOD = 2,\r\n    \r\n    SERVICE = 3,\r\n    \r\n    ACCESSIBILITY = 4,\r\n    \r\n    DATA_SHARE = 5,\r\n    \r\n    FILE_SHARE = 6,\r\n    \r\n    STATIC_SUBSCRIBER = 7,\r\n    \r\n    WALLPAPER = 8,\r\n    \r\n    UNSPECIFIED = 9,\r\n  }", "api_method_name": "ExtensionAbilityType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_name": "FORM", "api_method_all": "FORM = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_name": "WORK_SCHEDULER", "api_method_all": "WORK_SCHEDULER = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_name": "INPUT_METHOD", "api_method_all": "INPUT_METHOD = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_name": "SERVICE", "api_method_all": "SERVICE = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 9, "api_used": "\u662f", "lines": ["yLabel(BUNDLE_NAME, SERVICE_ABILITY_NAME, (erro", ".MainAbility'\nconst SERVICE_ABILITY_NAME = 'com", "sage == \"STATUS_BMS_SERVICE_ERROR\" ||\n         "], "files": ["GetAbilityLabelJsUnit.test.ets", "ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_name": "ACCESSIBILITY", "api_method_all": "ACCESSIBILITY = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_name": "DATA_SHARE", "api_method_all": "DATA_SHARE = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_name": "FILE_SHARE", "api_method_all": "FILE_SHARE = 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_name": "STATIC_SUBSCRIBER", "api_method_all": "STATIC_SUBSCRIBER = 7,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_name": "WALLPAPER", "api_method_all": "WALLPAPER = 8,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ExtensionAbilityType", "api_method_name": "UNSPECIFIED", "api_method_all": "UNSPECIFIED = 9,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 9, "api_used": "\u662f", "lines": [".DisplayOrientation.UNSPECIFIED)\n                  ", "demo.AbilitySubType.UNSPECIFIED)\n                  "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BundleOptions", "api_method_all": "export interface BundleOptions {\r\n    \r\n    userId?: number;\r\n  }", "api_method_name": "BundleOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BundleOptions", "api_method_name": "userId", "api_method_all": "userId?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 289, "since": 7, "api_used": "\u662f", "lines": [", {\n                userId: 100,\n             ", "Path, {\n            userId: 100,\n            i", "ath1, {\n            userId: 100,\n            i", "                    userId: 100,\n             ", "    {\n              userId: 100,\n             ", "  {\n                userId: 100,\n             ", "{\n                  userId: 100,\n             ", "ap'], {\n            userId: 100,\n            i"], "files": ["ActsBmsCleanCacheTest.test.js", "ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ActsBmsMetaDataTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "ActsBmsJsTest.test.js", "ActsBmsQueryAbilityByWant.test.js", "ActsBmsFormsInfoTest.test.js", "ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_all": "export enum InstallErrorCode{\r\n    SUCCESS = 0,\r\n    STATUS_INSTALL_FAILURE = 1,\r\n    STATUS_INSTALL_FAILURE_ABORTED = 2,\r\n    STATUS_INSTALL_FAILURE_INVALID = 3,\r\n    STATUS_INSTALL_FAILURE_CONFLICT = 4,\r\n    STATUS_INSTALL_FAILURE_STORAGE = 5,\r\n    STATUS_INSTALL_FAILURE_INCOMPATIBLE = 6,\r\n    STATUS_UNINSTALL_FAILURE = 7,\r\n    STATUS_UNINSTALL_FAILURE_BLOCKED = 8,\r\n    STATUS_UNINSTALL_FAILURE_ABORTED = 9,\r\n    STATUS_UNINSTALL_FAILURE_CONFLICT = 10,\r\n    STATUS_INSTALL_FAILURE_DOWNLOAD_TIMEOUT = 0x0B,\r\n    STATUS_INSTALL_FAILURE_DOWNLOAD_FAILED = 0x0C,\r\n    \r\n    STATUS_RECOVER_FAILURE_INVALID = 0x0D,\r\n    \r\n    STATUS_ABILITY_NOT_FOUND = 0x40,\r\n    \r\n    STATUS_BMS_SERVICE_ERROR = 0x41,\r\n    \r\n    STATUS_FAILED_NO_SPACE_LEFT = 0x42,\r\n    \r\n    STATUS_GRANT_REQUEST_PERMISSIONS_FAILED = 0x43,\r\n    \r\n    STATUS_INSTALL_PERMISSION_DENIED = 0x44,\r\n    \r\n    STATUS_UNINSTALL_PERMISSION_DENIED = 0x45,\r\n  }", "api_method_name": "InstallErrorCode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["0100\n    * @tc.name InstallErrorCode::STATUS_FAILED_NO_S", "s).assertEqual(demo.InstallErrorCode.STATUS_UNINSTALL_FA", "        expect(demo.InstallErrorCode.STATUS_GRANT_REQUES", "        expect(demo.InstallErrorCode.STATUS_FAILED_NO_SP", "s).assertEqual(demo.InstallErrorCode.SUCCESS)\n        ex", "s).assertEqual(demo.InstallErrorCode.SUCCESS);\n         ", "0200\n    * @tc.name InstallErrorCode::STATUS_FAILED_NO_S"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "SUCCESS", "api_method_all": "SUCCESS = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 260, "since": 7, "api_used": "\u662f", "lines": ["ssage).assertEqual(\"SUCCESS\");\n            bund", "ssage).assertEqual(\"SUCCESS\");\n            inst", "ssage).assertEqual(\"SUCCESS\");\n            done", "ssage).assertEqual('SUCCESS');\n                ", "ssage).assertEqual('SUCCESS');\n    \n           ", "ssage).assertEqual('SUCCESS');\n            inst", "ssage).assertEqual('SUCCESS');\n            bund", "ssage).assertEqual(\"SUCCESS\");\n              do", "ssage).assertEqual('SUCCESS');\n            let ", "ssage).assertEqual(\"SUCCESS\");\n          bundle"], "files": ["ActsBmsCleanCacheTest.test.js", "ActsBmsHapModuleTest.test.js", "ActsBmsAccessTokenTest.test.js", "ActsBmsMetaDataTest.test.js", "ExampleJsunit.test.js", "ActsBmsGetBackGroundModes.test.js", "ActsBmsJsTest.test.js", "ActsBmsQueryAbilityByWant.test.js", "ActsBmsFormsInfoTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_INSTALL_FAILURE", "api_method_all": "STATUS_INSTALL_FAILURE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 49, "since": 7, "api_used": "\u662f", "lines": ["ssage).assertEqual('STATUS_INSTALL_FAILURE_INCOMPATIBLE');\n   ", "a.statusMessage == \"STATUS_INSTALL_FAILURE_DOWNLOAD_TIMEOUT\" |", "a.statusMessage == \"STATUS_INSTALL_FAILURE_STORAGE\").assertTru", "status).assertEqual(STATUS_INSTALL_FAILURE_INCOMPATIBLE);\n    ", "ONFLICT = 4;\n\nconst STATUS_INSTALL_FAILURE_INCOMPATIBLE = 6;\n\n", "ssage).assertEqual(\"STATUS_INSTALL_FAILURE_INVALID\");\n        ", "status).assertEqual(STATUS_INSTALL_FAILURE_CONFLICT);\n        ", "_INVALID = 3;\nconst STATUS_INSTALL_FAILURE_CONFLICT = 4;\n\ncons", "a.statusMessage == \"STATUS_INSTALL_FAILURE_CONFLICT\" ||\n      ", "RR_CODE = -1;\nconst STATUS_INSTALL_FAILURE_INVALID = 3;\nconst ", "ssage).assertEqual(\"STATUS_INSTALL_FAILURE_CONFLICT\");\n       ", "ssage).assertEqual('STATUS_INSTALL_FAILURE_CONFLICT');\n       ", "ssage).assertEqual('STATUS_INSTALL_FAILURE_INVALID');\n        ", "a.statusMessage == \"STATUS_INSTALL_FAILURE_DOWNLOAD_FAILED\" ||", "a.statusMessage == \"STATUS_INSTALL_FAILURE_INVALID\" ||\n       ", "status).assertEqual(STATUS_INSTALL_FAILURE_INVALID);\n         ", "a.statusMessage == \"STATUS_INSTALL_FAILURE\" ||\n               ", "a.statusMessage == \"STATUS_INSTALL_FAILURE_ABORTED\" ||\n       "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_INSTALL_FAILURE_ABORTED", "api_method_all": "STATUS_INSTALL_FAILURE_ABORTED = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["a.statusMessage == \"STATUS_INSTALL_FAILURE_ABORTED\" ||\n               "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_INSTALL_FAILURE_INVALID", "api_method_all": "STATUS_INSTALL_FAILURE_INVALID = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["status).assertEqual(STATUS_INSTALL_FAILURE_INVALID);\n            conso", "ssage).assertEqual(\"STATUS_INSTALL_FAILURE_INVALID\");\n            done", "a.statusMessage == \"STATUS_INSTALL_FAILURE_INVALID\" ||\n               ", "RR_CODE = -1;\nconst STATUS_INSTALL_FAILURE_INVALID = 3;\nconst STATUS_I", "ssage).assertEqual('STATUS_INSTALL_FAILURE_INVALID');\n            getI", "ssage).assertEqual('STATUS_INSTALL_FAILURE_INVALID');\n            done"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_INSTALL_FAILURE_CONFLICT", "api_method_all": "STATUS_INSTALL_FAILURE_CONFLICT = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 7, "api_used": "\u662f", "lines": ["status).assertEqual(STATUS_INSTALL_FAILURE_CONFLICT);\n                c", "_INVALID = 3;\nconst STATUS_INSTALL_FAILURE_CONFLICT = 4;\n\nconst STATUS_", "ssage).assertEqual(\"STATUS_INSTALL_FAILURE_CONFLICT\");\n            done", "ssage).assertEqual('STATUS_INSTALL_FAILURE_CONFLICT');\n                ", "status).assertEqual(STATUS_INSTALL_FAILURE_CONFLICT);\n            conso", "a.statusMessage == \"STATUS_INSTALL_FAILURE_CONFLICT\" ||\n               "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_INSTALL_FAILURE_STORAGE", "api_method_all": "STATUS_INSTALL_FAILURE_STORAGE = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["a.statusMessage == \"STATUS_INSTALL_FAILURE_STORAGE\").assertTrue();\n   "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_INSTALL_FAILURE_INCOMPATIBLE", "api_method_all": "STATUS_INSTALL_FAILURE_INCOMPATIBLE = 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["ONFLICT = 4;\n\nconst STATUS_INSTALL_FAILURE_INCOMPATIBLE = 6;\n\ndescribe('Act", "ssage).assertEqual('STATUS_INSTALL_FAILURE_INCOMPATIBLE');\n                ", "ssage).assertEqual('STATUS_INSTALL_FAILURE_INCOMPATIBLE');\n            let ", "status).assertEqual(STATUS_INSTALL_FAILURE_INCOMPATIBLE);\n                c"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_UNINSTALL_FAILURE", "api_method_all": "STATUS_UNINSTALL_FAILURE = 7,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["a.statusMessage == \"STATUS_UNINSTALL_FAILURE_ABORTED\").assertTru", "ssage).assertEqual(\"STATUS_UNINSTALL_FAILURE\")\n                d", "mo.InstallErrorCode.STATUS_UNINSTALL_FAILURE)\n                ex", "mo.InstallErrorCode.STATUS_UNINSTALL_FAILURE_ABORTED)\n          ", "ssage).assertEqual(\"STATUS_UNINSTALL_FAILURE_CONFLICT\")\n        ", "ssage).assertEqual(\"STATUS_UNINSTALL_FAILURE_ABORTED\")\n         ", "a.statusMessage == \"STATUS_UNINSTALL_FAILURE_BLOCKED\" ||\n       ", "a.statusMessage == \"STATUS_UNINSTALL_FAILURE_CONFLICT\" ||\n      ", "mo.InstallErrorCode.STATUS_UNINSTALL_FAILURE_CONFLICT)\n         "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_UNINSTALL_FAILURE_BLOCKED", "api_method_all": "STATUS_UNINSTALL_FAILURE_BLOCKED = 8,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["a.statusMessage == \"STATUS_UNINSTALL_FAILURE_BLOCKED\" ||\n               "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_UNINSTALL_FAILURE_ABORTED", "api_method_all": "STATUS_UNINSTALL_FAILURE_ABORTED = 9,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["ssage).assertEqual(\"STATUS_UNINSTALL_FAILURE_ABORTED\")\n                d", "a.statusMessage == \"STATUS_UNINSTALL_FAILURE_ABORTED\").assertTrue();\n   ", "mo.InstallErrorCode.STATUS_UNINSTALL_FAILURE_ABORTED)\n                ex"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_UNINSTALL_FAILURE_CONFLICT", "api_method_all": "STATUS_UNINSTALL_FAILURE_CONFLICT = 10,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["mo.InstallErrorCode.STATUS_UNINSTALL_FAILURE_CONFLICT)\n                ex", "ssage).assertEqual(\"STATUS_UNINSTALL_FAILURE_CONFLICT\")\n                d", "a.statusMessage == \"STATUS_UNINSTALL_FAILURE_CONFLICT\" ||\n               "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_INSTALL_FAILURE_DOWNLOAD_TIMEOUT", "api_method_all": "STATUS_INSTALL_FAILURE_DOWNLOAD_TIMEOUT = 0x0B,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["a.statusMessage == \"STATUS_INSTALL_FAILURE_DOWNLOAD_TIMEOUT\" ||\n               "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_INSTALL_FAILURE_DOWNLOAD_FAILED", "api_method_all": "STATUS_INSTALL_FAILURE_DOWNLOAD_FAILED = 0x0C,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["a.statusMessage == \"STATUS_INSTALL_FAILURE_DOWNLOAD_FAILED\" ||\n               "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_RECOVER_FAILURE_INVALID", "api_method_all": "STATUS_RECOVER_FAILURE_INVALID = 0x0D,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_ABILITY_NOT_FOUND", "api_method_all": "STATUS_ABILITY_NOT_FOUND = 0x40,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["a.statusMessage == \"STATUS_ABILITY_NOT_FOUND\").assertTrue();\n   "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_BMS_SERVICE_ERROR", "api_method_all": "STATUS_BMS_SERVICE_ERROR = 0x41,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["a.statusMessage == \"STATUS_BMS_SERVICE_ERROR\" ||\n               "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_FAILED_NO_SPACE_LEFT", "api_method_all": "STATUS_FAILED_NO_SPACE_LEFT = 0x42,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["est install errcode STATUS_FAILED_NO_SPACE_LEFT.\n    */\n     it('in", "e InstallErrorCode::STATUS_FAILED_NO_SPACE_LEFT\n    * @tc.desc Test", "mo.InstallErrorCode.STATUS_FAILED_NO_SPACE_LEFT).assertEqual(66);\n ", "est install errcode STATUS_FAILED_NO_SPACE_LEFT.\n    */\n    it('ins"], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_GRANT_REQUEST_PERMISSIONS_FAILED", "api_method_all": "STATUS_GRANT_REQUEST_PERMISSIONS_FAILED = 0x43,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["mo.InstallErrorCode.STATUS_GRANT_REQUEST_PERMISSIONS_FAILED).assertEqual(67);\n "], "files": ["ExampleJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_INSTALL_PERMISSION_DENIED", "api_method_all": "STATUS_INSTALL_PERMISSION_DENIED = 0x44,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["status).assertEqual(STATUS_INSTALL_PERMISSION_DENIED);\n            expec", "sunit/index'\n\nconst STATUS_INSTALL_PERMISSION_DENIED = 0X44;\nconst STATU", "ssage).assertEqual(\"STATUS_INSTALL_PERMISSION_DENIED\");\n            done"], "files": ["ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "InstallErrorCode", "api_method_name": "STATUS_UNINSTALL_PERMISSION_DENIED", "api_method_all": "STATUS_UNINSTALL_PERMISSION_DENIED = 0x45,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["status).assertEqual(STATUS_UNINSTALL_PERMISSION_DENIED);\n            expec", "ssage).assertEqual(\"STATUS_UNINSTALL_PERMISSION_DENIED\");\n            done", "ENIED = 0X44;\nconst STATUS_UNINSTALL_PERMISSION_DENIED = 0X45;\n\nconst LAUN"], "files": ["ActsBmsJsUnPermissionTest.test.js"], "is_white": " ", "desc": " "}]}