{"subsystem_ch": "\u77ed\u8ddd\u901a\u4fe1\u5b50\u7cfb\u7edf", "subsystem_en": "communication", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.geolocation", "api": [{"api_class_name": "geolocation", "api_method_all": "declare namespace geolocation {\r\n    \r\n    function on(type: 'locationChange', request: LocationRequest, callback: Callback<Location>) : void;\r\n\r\n    \r\n    function off(type: 'locationChange', callback?: Callback<Location>) : void;\r\n\r\n    \r\n    function on(type: 'locationServiceState', callback: Callback<boolean>) : void;\r\n\r\n    \r\n    function off(type: 'locationServiceState', callback?: Callback<boolean>) : void;\r\n\r\n    \r\n    function on(type: 'cachedGnssLocationsReporting', request: CachedGnssLocationsRequest, callback: Callback<Array<Location>>) : void;\r\n\r\n    \r\n    function off(type: 'cachedGnssLocationsReporting', callback?: Callback<Array<Location>>) : void;\r\n\r\n    \r\n    function on(type: 'gnssStatusChange', callback: Callback<SatelliteStatusInfo>) : void;\r\n\r\n    \r\n    function off(type: 'gnssStatusChange', callback?: Callback<SatelliteStatusInfo>) : void;\r\n\r\n    \r\n    function on(type: 'nmeaMessageChange', callback: Callback<string>) : void;\r\n\r\n    \r\n    function off(type: 'nmeaMessageChange', callback?: Callback<string>) : void;\r\n\r\n    \r\n    function on(type: 'fenceStatusChange', request: GeofenceRequest, want: WantAgent) : void;\r\n\r\n    \r\n    function off(type: 'fenceStatusChange', request: GeofenceRequest, want: WantAgent) : void;\r\n\r\n    \r\n    function getCurrentLocation(request: CurrentLocationRequest, callback: AsyncCallback<Location>) : void;\r\n    function getCurrentLocation(callback: AsyncCallback<Location>) : void;\r\n    function getCurrentLocation(request?: CurrentLocationRequest) : Promise<Location>;\r\n\r\n    \r\n    function getLastLocation(callback: AsyncCallback<Location>) : void;\r\n    function getLastLocation() : Promise<Location>;\r\n\r\n    \r\n    function isLocationEnabled(callback: AsyncCallback<boolean>) : void;\r\n    function isLocationEnabled() : Promise<boolean>;\r\n\r\n    \r\n    function requestEnableLocation(callback: AsyncCallback<boolean>) : void;\r\n    function requestEnableLocation() : Promise<boolean>;\r\n\r\n    \r\n    function enableLocation(callback: AsyncCallback<boolean>) : void;\r\n    function enableLocation() : Promise<boolean>;\r\n\r\n    \r\n    function disableLocation(callback: AsyncCallback<boolean>) : void;\r\n    function disableLocation() : Promise<boolean>;\r\n\r\n    \r\n    function getAddressesFromLocation(request: ReverseGeoCodeRequest, callback: AsyncCallback<Array<GeoAddress>>) : void;\r\n    function getAddressesFromLocation(request: ReverseGeoCodeRequest) : Promise<Array<GeoAddress>>;\r\n\r\n    \r\n    function getAddressesFromLocationName(request: GeoCodeRequest, callback: AsyncCallback<Array<GeoAddress>>) : void;\r\n    function getAddressesFromLocationName(request: GeoCodeRequest) : Promise<Array<GeoAddress>>;\r\n\r\n    \r\n    function isGeoServiceAvailable(callback: AsyncCallback<boolean>) : void;\r\n    function isGeoServiceAvailable() : Promise<boolean>;\r\n\r\n    \r\n    function getCachedGnssLocationsSize(callback: AsyncCallback<number>) : void;\r\n    function getCachedGnssLocationsSize() : Promise<number>;\r\n\r\n    \r\n    function flushCachedGnssLocations(callback: AsyncCallback<boolean>) : void;\r\n    function flushCachedGnssLocations() : Promise<boolean>;\r\n\r\n    \r\n    function sendCommand(command: LocationCommand, callback: AsyncCallback<boolean>) : void;\r\n    function sendCommand(command: LocationCommand) : Promise<boolean>;\r\n\r\n    \r\n    export interface SatelliteStatusInfo {\r\n        satellitesNumber: number;\r\n        satelliteIds: Array<number>;\r\n        carrierToNoiseDensitys: Array<number>;\r\n        altitudes: Array<number>;\r\n        azimuths: Array<number>;\r\n        carrierFrequencies: Array<number>;\r\n    }\r\n\r\n    \r\n    export interface CachedGnssLocationsRequest {\r\n        reportingPeriodSec: number;\r\n        wakeUpCacheQueueFull: boolean;\r\n    }\r\n\r\n    \r\n    export interface GeofenceRequest {\r\n        priority: LocationRequestPriority;\r\n        scenario: LocationRequestScenario;\r\n        geofence: Geofence;\r\n    }\r\n\r\n    \r\n    export interface Geofence {\r\n        latitude: number;\r\n        longitude: number;\r\n        radius: number;\r\n        expiration: number;\r\n    }\r\n\r\n    \r\n    function isLocationPrivacyConfirmed(type : LocationPrivacyType, callback: AsyncCallback<boolean>) : void;\r\n    function isLocationPrivacyConfirmed(type : LocationPrivacyType,) : Promise<boolean>;\r\n\r\n    \r\n    function setLocationPrivacyConfirmStatus(type : LocationPrivacyType, isConfirmed : boolean, callback: AsyncCallback<boolean>) : void;\r\n    function setLocationPrivacyConfirmStatus(type : LocationPrivacyType, isConfirmed : boolean) : Promise<boolean>;\r\n\r\n    \r\n    export interface ReverseGeoCodeRequest {\r\n        locale?: string;\r\n        latitude: number;\r\n        longitude: number;\r\n        maxItems?: number;\r\n    }\r\n\r\n    \r\n    export interface GeoCodeRequest {\r\n        locale?: string;\r\n        description: string;\r\n        maxItems?: number;\r\n        minLatitude?: number;\r\n        minLongitude?: number;\r\n        maxLatitude?: number;\r\n        maxLongitude?: number;\r\n    }\r\n\r\n    \r\n    export interface GeoAddress {\r\n        latitude?: number;\r\n        longitude?: number;\r\n        locale?: string;\r\n        placeName?: string;\r\n        countryCode?: string;\r\n        countryName?: string;\r\n        administrativeArea?: string;\r\n        subAdministrativeArea?: string;\r\n        locality?: string;\r\n        subLocality?: string;\r\n        roadName?: string;\r\n        subRoadName?: string;\r\n        premises?: string;\r\n        postalCode?: string;\r\n        phoneNumber?: string;\r\n        addressUrl?: string;\r\n        descriptions?: Array<string>;\r\n        descriptionsSize?: number;\r\n    }\r\n\r\n    \r\n    export interface LocationRequest {\r\n        priority?: LocationRequestPriority;\r\n        scenario?: LocationRequestScenario;\r\n        timeInterval?: number;\r\n        distanceInterval?: number;\r\n        maxAccuracy?: number;\r\n    }\r\n\r\n    \r\n    export interface CurrentLocationRequest {\r\n        priority?: LocationRequestPriority;\r\n        scenario?: LocationRequestScenario;\r\n        maxAccuracy?: number;\r\n        timeoutMs?: number;\r\n    }\r\n\r\n    \r\n    export interface Location {\r\n        latitude: number;\r\n        longitude: number;\r\n        altitude: number;\r\n        accuracy: number;\r\n        speed: number;\r\n        timeStamp: number;\r\n        direction: number;\r\n        timeSinceBoot: number;\r\n        additions?: Array<string>;\r\n        additionSize?: number;\r\n    }\r\n\r\n    \r\n    export enum LocationRequestPriority {\r\n        UNSET = 0x200,\r\n        ACCURACY,\r\n        LOW_POWER,\r\n        FIRST_FIX,\r\n    }\r\n\r\n    \r\n    export enum LocationRequestScenario {\r\n        UNSET = 0x300,\r\n        NAVIGATION,\r\n        TRAJECTORY_TRACKING,\r\n        CAR_HAILING,\r\n        DAILY_LIFE_SERVICE,\r\n        NO_POWER,\r\n    }\r\n\r\n    \r\n    export enum GeoLocationErrorCode {\r\n        INPUT_PARAMS_ERROR = 101,\r\n        REVERSE_GEOCODE_ERROR,\r\n        GEOCODE_ERROR,\r\n        LOCATOR_ERROR,\r\n        LOCATION_SWITCH_ERROR,\r\n        LAST_KNOWN_LOCATION_ERROR,\r\n        LOCATION_REQUEST_TIMEOUT_ERROR,\r\n    }\r\n\r\n    \r\n    export enum LocationPrivacyType {\r\n        OTHERS = 0,\r\n        STARTUP,\r\n        CORE_LOCATION,\r\n    }\r\n\r\n    \r\n    export interface LocationCommand {\r\n        scenario: LocationRequestScenario;\r\n        command: string;\r\n    }\r\n}", "api_method_name": "geolocation", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "on", "api_method_all": "function on(type: 'locationChange', request: LocationRequest, callback: Callback<Location>) : void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "off", "api_method_all": "function off(type: 'locationChange', callback?: Callback<Location>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "on", "api_method_all": "function on(type: 'locationServiceState', callback: Callback<boolean>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "off", "api_method_all": "function off(type: 'locationServiceState', callback?: Callback<boolean>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "on", "api_method_all": "function on(type: 'cachedGnssLocationsReporting', request: CachedGnssLocationsRequest, callback: Callback<Array<Location>>) : void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "off", "api_method_all": "function off(type: 'cachedGnssLocationsReporting', callback?: Callback<Array<Location>>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "on", "api_method_all": "function on(type: 'gnssStatusChange', callback: Callback<SatelliteStatusInfo>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "off", "api_method_all": "function off(type: 'gnssStatusChange', callback?: Callback<SatelliteStatusInfo>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "on", "api_method_all": "function on(type: 'nmeaMessageChange', callback: Callback<string>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 7, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "off", "api_method_all": "function off(type: 'nmeaMessageChange', callback?: Callback<string>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "on", "api_method_all": "function on(type: 'fenceStatusChange', request: GeofenceRequest, want: WantAgent) : void;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 4002, "since": 7, "api_used": "\u662f", "lines": ["n (done) {\n        console.info('[bluetoot", "tEqual(2);\n        done();\n    })\n\n\n    \n ", "= bluetooth.BLE.getConnectedBLEDevices();\n", "   beforeEach(function () {\n        consol", "Create() {\n        console.info('AceApplic", "t:\n                console.info('[bluetoot", "3:\n                console.info('[bluetoot", "estroy() {\n        console.info('AceApplic", "itle: \"\"\n    },\n    onInit() {\n        thi", "01', 0, async function (done) {\n        co", "  configService.setConfig(this)\n\n        r", "ction () {\n        console.info('afterAll ", "ooth_js] bt turning on:'+ JSON.stringify(s", "2:\n                console.info('[bluetoot", "ction () {\n        console.info('beforeAll", "'[bluetooth_js] getConnectedBLEDevices tes", "Instance()\n        const expectExtend = ne", "world');\n    },\n    onShow() {\n        con", "finish')\n    },\n    onReady() {\n        co", "1:\n                console.info('[bluetoot", "y finish')\n        const core = Core.getIn", "xport default {\n    onCreate() {\n        c", " }\n\n    async function tryToEnableBt() {\n ", "t()\n\n        const configService = core.ge", "nfo('AceApplication onDestroy');\n    }\n};\n", "    beforeAll(function () {\n        consol", "re.init()\n\n        const configService = c", "    afterEach(function () {\n        consol", "\n    afterAll(function () {\n        consol", "uetooth_js] bt turn on:'+ JSON.stringify(s", "      console.info('onShow finish')\n    },", "nfo('AceApplication onCreate');\n    },\n   ", ")\n    })\n\n    function sleep(delay) {\n    ", "reate');\n    },\n    onDestroy() {\n        ", "0, async function (done) {\n        console", "othhostTest', function() {\n\n    let gattSe", "getDefaultService('config')\n        config", "nReady() {\n        console.info('onReady f", "      console.info('onReady finish')\n     ", "('config')\n        configService.setConfig", "onShow() {\n        console.info('onShow fi", "ction () {\n        console.info('afterEach", "0:\n                console.info('[bluetoot", "ction () {\n        console.info('beforeEac", "e.info('AceApplication onDestroy');\n    }\n", "etState();\n        console.info('[bluetoot", "e.info('AceApplication onCreate');\n    },\n"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "off", "api_method_all": "function off(type: 'fenceStatusChange', request: GeofenceRequest, want: WantAgent) : void;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 96, "since": 7, "api_used": "\u662f", "lines": ["               data.offset +'descriptorUuid", "' + data.transId + 'offset:' + data.offset ", "LE scan device find off2:\" + JSON.stringify", "     \"offset\": data.offset,\n               ", "   await gattClient.off('BLEConnectionState", "   await gattServer.off('characteristicRead", " + 'offset:' + data.offset + 'isPrep:' + da", "    await bluetooth.off('stateChange', resu", " + 'offset:' + data.offset + 'charUuid:' +\n", "   await gattClient.off('BLECharacteristicC", "\n            expect(off).assertTrue();\n    ", "ead response\", data.offset),\n              ", "    await bluetooth.off('bluetoothDeviceFin", "    await bluetooth.off(\"sppRead\",-1, (resu", "ooth_js] bt turning off:'+ JSON.stringify(s", "         status: 0, offset: 0, value: array", "oth_js] pinRequired off:\" + JSON.stringify(", "   await gattServer.off('descriptorRead', f", "   await gattServer.off('connectStateChange", "      bluetooth.BLE.off('pinRequired', resu", "bluetoothDeviceFind off:\" + JSON.stringify(", ") {\n            let off = wifi.disableHotsp", "tooth_js] charaRead off data:\" + JSON.strin", "_js] BLECharcChange_off data-> \" + JSON.str", "   await gattServer.off('characteristicWrit", "BLEConneStateChange_off data-> \" + JSON.str", "uetooth_js] bt turn off:'+ JSON.stringify(s", "tspot result -> \" + off);\n            expec", "' + data.transId + 'offset:' + \n           ", " connectStateChange_off Data:\" + JSON.strin", "   await gattServer.off('descriptorWrite', ", "      bluetooth.BLE.off('bondStateChange', ", "                   \"offset\": data.offset,\n ", "      bluetooth.BLE.off('BLEDeviceFind', re", "ooth_js] charaWrite off data2:\" + JSON.stri"], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getCurrentLocation", "api_method_all": "function getCurrentLocation(request: CurrentLocationRequest, callback: AsyncCallback<Location>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getCurrentLocation", "api_method_all": "function getCurrentLocation(callback: AsyncCallback<Location>) : void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getCurrentLocation", "api_method_all": "function getCurrentLocation(request?: CurrentLocationRequest) : Promise<Location>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getLastLocation", "api_method_all": "function getLastLocation(callback: AsyncCallback<Location>) : void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getLastLocation", "api_method_all": "function getLastLocation() : Promise<Location>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "isLocationEnabled", "api_method_all": "function isLocationEnabled(callback: AsyncCallback<boolean>) : void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "isLocationEnabled", "api_method_all": "function isLocationEnabled() : Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "requestEnableLocation", "api_method_all": "function requestEnableLocation(callback: AsyncCallback<boolean>) : void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "requestEnableLocation", "api_method_all": "function requestEnableLocation() : Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "enableLocation", "api_method_all": "function enableLocation(callback: AsyncCallback<boolean>) : void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "enableLocation", "api_method_all": "function enableLocation() : Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "disableLocation", "api_method_all": "function disableLocation(callback: AsyncCallback<boolean>) : void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "disableLocation", "api_method_all": "function disableLocation() : Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getAddressesFromLocation", "api_method_all": "function getAddressesFromLocation(request: ReverseGeoCodeRequest, callback: AsyncCallback<Array<GeoAddress>>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getAddressesFromLocation", "api_method_all": "function getAddressesFromLocation(request: ReverseGeoCodeRequest) : Promise<Array<GeoAddress>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getAddressesFromLocationName", "api_method_all": "function getAddressesFromLocationName(request: GeoCodeRequest, callback: AsyncCallback<Array<GeoAddress>>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getAddressesFromLocationName", "api_method_all": "function getAddressesFromLocationName(request: GeoCodeRequest) : Promise<Array<GeoAddress>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "isGeoServiceAvailable", "api_method_all": "function isGeoServiceAvailable(callback: AsyncCallback<boolean>) : void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "isGeoServiceAvailable", "api_method_all": "function isGeoServiceAvailable() : Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getCachedGnssLocationsSize", "api_method_all": "function getCachedGnssLocationsSize(callback: AsyncCallback<number>) : void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "getCachedGnssLocationsSize", "api_method_all": "function getCachedGnssLocationsSize() : Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "flushCachedGnssLocations", "api_method_all": "function flushCachedGnssLocations(callback: AsyncCallback<boolean>) : void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "flushCachedGnssLocations", "api_method_all": "function flushCachedGnssLocations() : Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "sendCommand", "api_method_all": "function sendCommand(command: LocationCommand, callback: AsyncCallback<boolean>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "sendCommand", "api_method_all": "function sendCommand(command: LocationCommand) : Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "isLocationPrivacyConfirmed", "api_method_all": "function isLocationPrivacyConfirmed(type : LocationPrivacyType, callback: AsyncCallback<boolean>) : void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "isLocationPrivacyConfirmed", "api_method_all": "function isLocationPrivacyConfirmed(type : LocationPrivacyType,) : Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "setLocationPrivacyConfirmStatus", "api_method_all": "function setLocationPrivacyConfirmStatus(type : LocationPrivacyType, isConfirmed : boolean, callback: AsyncCallback<boolean>) : void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "geolocation", "api_method_name": "setLocationPrivacyConfirmStatus", "api_method_all": "function setLocationPrivacyConfirmStatus(type : LocationPrivacyType, isConfirmed : boolean) : Promise<boolean>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SatelliteStatusInfo", "api_method_all": "export interface SatelliteStatusInfo {\r\n        satellitesNumber: number;\r\n        satelliteIds: Array<number>;\r\n        carrierToNoiseDensitys: Array<number>;\r\n        altitudes: Array<number>;\r\n        azimuths: Array<number>;\r\n        carrierFrequencies: Array<number>;\r\n    }", "api_method_name": "SatelliteStatusInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SatelliteStatusInfo", "api_method_name": "satellitesNumber", "api_method_all": "satellitesNumber: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SatelliteStatusInfo", "api_method_name": "satelliteIds", "api_method_all": "satelliteIds: Array<number>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SatelliteStatusInfo", "api_method_name": "carrierToNoiseDensitys", "api_method_all": "carrierToNoiseDensitys: Array<number>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SatelliteStatusInfo", "api_method_name": "altitudes", "api_method_all": "altitudes: Array<number>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SatelliteStatusInfo", "api_method_name": "azimuths", "api_method_all": "azimuths: Array<number>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SatelliteStatusInfo", "api_method_name": "carrierFrequencies", "api_method_all": "carrierFrequencies: Array<number>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CachedGnssLocationsRequest", "api_method_all": "export interface CachedGnssLocationsRequest {\r\n        reportingPeriodSec: number;\r\n        wakeUpCacheQueueFull: boolean;\r\n    }", "api_method_name": "CachedGnssLocationsRequest", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CachedGnssLocationsRequest", "api_method_name": "reportingPeriodSec", "api_method_all": "reportingPeriodSec: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CachedGnssLocationsRequest", "api_method_name": "wakeUpCacheQueueFull", "api_method_all": "wakeUpCacheQueueFull: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeofenceRequest", "api_method_all": "export interface GeofenceRequest {\r\n        priority: LocationRequestPriority;\r\n        scenario: LocationRequestScenario;\r\n        geofence: Geofence;\r\n    }", "api_method_name": "GeofenceRequest", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeofenceRequest", "api_method_name": "priority", "api_method_all": "priority: LocationRequestPriority", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeofenceRequest", "api_method_name": "scenario", "api_method_all": "scenario: LocationRequestScenario", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeofenceRequest", "api_method_name": "geofence", "api_method_all": "geofence: Geofence", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Geofence", "api_method_all": "export interface Geofence {\r\n        latitude: number;\r\n        longitude: number;\r\n        radius: number;\r\n        expiration: number;\r\n    }", "api_method_name": "Geofence", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Geofence", "api_method_name": "latitude", "api_method_all": "latitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Geofence", "api_method_name": "longitude", "api_method_all": "longitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Geofence", "api_method_name": "radius", "api_method_all": "radius: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Geofence", "api_method_name": "expiration", "api_method_all": "expiration: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ReverseGeoCodeRequest", "api_method_all": "export interface ReverseGeoCodeRequest {\r\n        locale?: string;\r\n        latitude: number;\r\n        longitude: number;\r\n        maxItems?: number;\r\n    }", "api_method_name": "ReverseGeoCodeRequest", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ReverseGeoCodeRequest", "api_method_name": "locale", "api_method_all": "locale?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ReverseGeoCodeRequest", "api_method_name": "latitude", "api_method_all": "latitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ReverseGeoCodeRequest", "api_method_name": "longitude", "api_method_all": "longitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ReverseGeoCodeRequest", "api_method_name": "maxItems", "api_method_all": "maxItems?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoCodeRequest", "api_method_all": "export interface GeoCodeRequest {\r\n        locale?: string;\r\n        description: string;\r\n        maxItems?: number;\r\n        minLatitude?: number;\r\n        minLongitude?: number;\r\n        maxLatitude?: number;\r\n        maxLongitude?: number;\r\n    }", "api_method_name": "GeoCodeRequest", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoCodeRequest", "api_method_name": "locale", "api_method_all": "locale?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoCodeRequest", "api_method_name": "description", "api_method_all": "description: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["s the ashmem object description and creates a new o", "o get the interface description\n     * @tc.desc    ", "he object interface description\n     * @tc.desc    "], "files": ["RpcClientJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GeoCodeRequest", "api_method_name": "maxItems", "api_method_all": "maxItems?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoCodeRequest", "api_method_name": "minLatitude", "api_method_all": "minLatitude?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoCodeRequest", "api_method_name": "minLongitude", "api_method_all": "minLongitude?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoCodeRequest", "api_method_name": "maxLatitude", "api_method_all": "maxLatitude?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoCodeRequest", "api_method_name": "maxLongitude", "api_method_all": "maxLongitude?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_all": "export interface GeoAddress {\r\n        latitude?: number;\r\n        longitude?: number;\r\n        locale?: string;\r\n        placeName?: string;\r\n        countryCode?: string;\r\n        countryName?: string;\r\n        administrativeArea?: string;\r\n        subAdministrativeArea?: string;\r\n        locality?: string;\r\n        subLocality?: string;\r\n        roadName?: string;\r\n        subRoadName?: string;\r\n        premises?: string;\r\n        postalCode?: string;\r\n        phoneNumber?: string;\r\n        addressUrl?: string;\r\n        descriptions?: Array<string>;\r\n        descriptionsSize?: number;\r\n    }", "api_method_name": "GeoAddress", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "latitude", "api_method_all": "latitude?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "longitude", "api_method_all": "longitude?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "locale", "api_method_all": "locale?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "placeName", "api_method_all": "placeName?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "countryCode", "api_method_all": "countryCode?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": [" \" + JSON.stringify(countryCode));\n        expect(J", "... \");\n        let countryCode = wifi.getCountryCo", "pect(JSON.stringify(countryCode)).assertEqual('\"CN\""], "files": ["WifiSta.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "countryName", "api_method_all": "countryName?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "administrativeArea", "api_method_all": "administrativeArea?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "subAdministrativeArea", "api_method_all": "subAdministrativeArea?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "locality", "api_method_all": "locality?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "subLocality", "api_method_all": "subLocality?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "roadName", "api_method_all": "roadName?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "subRoadName", "api_method_all": "subRoadName?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "premises", "api_method_all": "premises?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "postalCode", "api_method_all": "postalCode?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "phoneNumber", "api_method_all": "phoneNumber?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "addressUrl", "api_method_all": "addressUrl?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "descriptions", "api_method_all": "descriptions?: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoAddress", "api_method_name": "descriptionsSize", "api_method_all": "descriptionsSize?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequest", "api_method_all": "export interface LocationRequest {\r\n        priority?: LocationRequestPriority;\r\n        scenario?: LocationRequestScenario;\r\n        timeInterval?: number;\r\n        distanceInterval?: number;\r\n        maxAccuracy?: number;\r\n    }", "api_method_name": "LocationRequest", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequest", "api_method_name": "priority", "api_method_all": "priority?: LocationRequestPriority", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequest", "api_method_name": "scenario", "api_method_all": "scenario?: LocationRequestScenario", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequest", "api_method_name": "timeInterval", "api_method_all": "timeInterval?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequest", "api_method_name": "distanceInterval", "api_method_all": "distanceInterval?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequest", "api_method_name": "maxAccuracy", "api_method_all": "maxAccuracy?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CurrentLocationRequest", "api_method_all": "export interface CurrentLocationRequest {\r\n        priority?: LocationRequestPriority;\r\n        scenario?: LocationRequestScenario;\r\n        maxAccuracy?: number;\r\n        timeoutMs?: number;\r\n    }", "api_method_name": "CurrentLocationRequest", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CurrentLocationRequest", "api_method_name": "priority", "api_method_all": "priority?: LocationRequestPriority", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CurrentLocationRequest", "api_method_name": "scenario", "api_method_all": "scenario?: LocationRequestScenario", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CurrentLocationRequest", "api_method_name": "maxAccuracy", "api_method_all": "maxAccuracy?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CurrentLocationRequest", "api_method_name": "timeoutMs", "api_method_all": "timeoutMs?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_all": "export interface Location {\r\n        latitude: number;\r\n        longitude: number;\r\n        altitude: number;\r\n        accuracy: number;\r\n        speed: number;\r\n        timeStamp: number;\r\n        direction: number;\r\n        timeSinceBoot: number;\r\n        additions?: Array<string>;\r\n        additionSize?: number;\r\n    }", "api_method_name": "Location", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "latitude", "api_method_all": "latitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "longitude", "api_method_all": "longitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "altitude", "api_method_all": "altitude: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "accuracy", "api_method_all": "accuracy: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "speed", "api_method_all": "speed: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "timeStamp", "api_method_all": "timeStamp: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "direction", "api_method_all": "direction: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "timeSinceBoot", "api_method_all": "timeSinceBoot: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "additions", "api_method_all": "additions?: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Location", "api_method_name": "additionSize", "api_method_all": "additionSize?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestPriority", "api_method_all": "export enum LocationRequestPriority {\r\n        UNSET = 0x200,\r\n        ACCURACY,\r\n        LOW_POWER,\r\n        FIRST_FIX,\r\n    }", "api_method_name": "LocationRequestPriority", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestPriority", "api_method_name": "UNSET", "api_method_all": "UNSET = 0x200,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestPriority", "api_method_name": "ACCURACY", "api_method_all": "ACCURACY,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestPriority", "api_method_name": "LOW_POWER", "api_method_all": "LOW_POWER,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": [".ScanDuty.SCAN_MODE_LOW_POWER) !=result );\n      "], "files": ["Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestPriority", "api_method_name": "FIRST_FIX", "api_method_all": "FIRST_FIX,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestScenario", "api_method_all": "export enum LocationRequestScenario {\r\n        UNSET = 0x300,\r\n        NAVIGATION,\r\n        TRAJECTORY_TRACKING,\r\n        CAR_HAILING,\r\n        DAILY_LIFE_SERVICE,\r\n        NO_POWER,\r\n    }", "api_method_name": "LocationRequestScenario", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestScenario", "api_method_name": "UNSET", "api_method_all": "UNSET = 0x300,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestScenario", "api_method_name": "NAVIGATION", "api_method_all": "NAVIGATION,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestScenario", "api_method_name": "TRAJECTORY_TRACKING", "api_method_all": "TRAJECTORY_TRACKING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestScenario", "api_method_name": "CAR_HAILING", "api_method_all": "CAR_HAILING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestScenario", "api_method_name": "DAILY_LIFE_SERVICE", "api_method_all": "DAILY_LIFE_SERVICE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationRequestScenario", "api_method_name": "NO_POWER", "api_method_all": "NO_POWER,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoLocationErrorCode", "api_method_all": "export enum GeoLocationErrorCode {\r\n        INPUT_PARAMS_ERROR = 101,\r\n        REVERSE_GEOCODE_ERROR,\r\n        GEOCODE_ERROR,\r\n        LOCATOR_ERROR,\r\n        LOCATION_SWITCH_ERROR,\r\n        LAST_KNOWN_LOCATION_ERROR,\r\n        LOCATION_REQUEST_TIMEOUT_ERROR,\r\n    }", "api_method_name": "GeoLocationErrorCode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoLocationErrorCode", "api_method_name": "INPUT_PARAMS_ERROR", "api_method_all": "INPUT_PARAMS_ERROR = 101,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoLocationErrorCode", "api_method_name": "REVERSE_GEOCODE_ERROR", "api_method_all": "REVERSE_GEOCODE_ERROR,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoLocationErrorCode", "api_method_name": "GEOCODE_ERROR", "api_method_all": "GEOCODE_ERROR,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoLocationErrorCode", "api_method_name": "LOCATOR_ERROR", "api_method_all": "LOCATOR_ERROR,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoLocationErrorCode", "api_method_name": "LOCATION_SWITCH_ERROR", "api_method_all": "LOCATION_SWITCH_ERROR,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoLocationErrorCode", "api_method_name": "LAST_KNOWN_LOCATION_ERROR", "api_method_all": "LAST_KNOWN_LOCATION_ERROR,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GeoLocationErrorCode", "api_method_name": "LOCATION_REQUEST_TIMEOUT_ERROR", "api_method_all": "LOCATION_REQUEST_TIMEOUT_ERROR,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationPrivacyType", "api_method_all": "export enum LocationPrivacyType {\r\n        OTHERS = 0,\r\n        STARTUP,\r\n        CORE_LOCATION,\r\n    }", "api_method_name": "LocationPrivacyType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationPrivacyType", "api_method_name": "OTHERS", "api_method_all": "OTHERS = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationPrivacyType", "api_method_name": "STARTUP", "api_method_all": "STARTUP,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationPrivacyType", "api_method_name": "CORE_LOCATION", "api_method_all": "CORE_LOCATION,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationCommand", "api_method_all": "export interface LocationCommand {\r\n        scenario: LocationRequestScenario;\r\n        command: string;\r\n    }", "api_method_name": "LocationCommand", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationCommand", "api_method_name": "scenario", "api_method_all": "scenario: LocationRequestScenario", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LocationCommand", "api_method_name": "command", "api_method_all": "command: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["unction of the flushcommands interface\n     * @"], "files": ["RpcClientJsunit.test.js"], "is_white": " ", "desc": " "}]}