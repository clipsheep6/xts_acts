{"subsystem_ch": "\u516c\u5171\u57fa\u7840\u7c7b\u5e93", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.util.PlainArray", "api": [{"api_class_name": "PlainArray", "api_method_all": "declare class PlainArray<T> {\r\n  \r\n  constructor();\r\n  \r\n  length: number;\r\n  \r\n  add(key: number, value: T): void;\r\n  \r\n  clear(): void;\r\n  \r\n  clone(): PlainArray<T>;\r\n  \r\n  has(key: number): boolean;\r\n  \r\n  get(key: number): T;\r\n  \r\n  getIndexOfKey(key: number): number;\r\n  \r\n  getIndexOfValue(value: T): number;\r\n  \r\n  isEmpty(): boolean;\r\n  \r\n  getKeyAt(index: number): number;\r\n  \r\n  remove(key: number): T;\r\n  \r\n  removeAt(index: number): T;\r\n  \r\n  removeRangeFrom(index: number, size: number): number;\r\n  \r\n  setValueAt(index: number, value: T): void;\r\n  \r\n  toString(): String;\r\n  \r\n  getValueAt(index: number): T;\r\n  \r\n  forEach(callbackfn: (value: T, index?: number, PlainArray?: PlainArray<T>) => void,\r\n  thisArg?: Object): void;\r\n  \r\n  [Symbol.iterator](): IterableIterator<[number, T]>;\r\n}", "api_method_name": "PlainArray", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 47, "since": 8, "api_used": "\u662f", "lines": ["st.js');\nrequire('./PlainArray.test.js');\nrequire(", "nArray\";\n\ndescribe(\"PlainArrayTest\", function () {", "et plainArray = new PlainArray();\n    try {\n      ", "ay from \"@ohos.util.PlainArray\";\n\ndescribe(\"PlainA", "et plainArray = new PlainArray();\n    let c = {nam", "unit/index';\nimport PlainArray from \"@ohos.util.Pl", "et plainArray = new PlainArray();\n    let res1 = p", "et plainArray = new PlainArray();\n    let clonePla", "et plainArray = new PlainArray();\n    let a = [1, ", "et plainArray = new PlainArray();\n    } catch (err", "et plainArray = new PlainArray();\n    let result =", "et plainArray = new PlainArray();\n    let res = pl", "et plainArray = new PlainArray();\n    for (let i =", "(\"Cannot create new PlainArray\");\n    }\n  });\n  it", "et plainArray = new PlainArray();\n    plainArray.a", "et plainArray = new PlainArray();\n    let c = fals"], "files": ["PlainArray.test.js", "Main.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "add", "api_method_all": "add(key: number, value: T): void;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 1442, "since": 8, "api_used": "\u662f", "lines": ["st();\n    arrayList.add(1);\n    arrayList.a", "    })\n        core.addService('expect', ex", "st();\n    arrayList.add(\"\u56db\");\n    arrayList", "d(1);\n    arrayList.add(\"\u4e09\");\n    arrayList", "d(1);\n    arrayList.add(\"a\");\n    arrayList", "d(1);\n    arrayList.add(\"b\");\n    arrayList", "d(1);\n    arrayList.add(2);\n    arrayList.a", "\"a\");\n    arrayList.add(1);\n    arrayList.a", "d(3);\n    arrayList.add(1);\n    arrayList.a", "3\u5c81\"};\n    arrayList.add(a);\n    let res = a", "d(2);\n    arrayList.add(14);\n    arrayList.", ", 4];\n    arrayList.add(a);\n    let res = a", "d(4);\n    arrayList.add(3);\n    arrayList.a", "st();\n    arrayList.add(\"\u56db\");\n    let res =", "true;\n    arrayList.add(a);\n    let res = a", "d(1);\n    arrayList.add(\"b\");\n    let res =", "\"c\");\n    arrayList.add(1);\n    arrayList.r", "\"\u4e09\");\n    arrayList.add(1);\n    arrayList.a", "st();\n    arrayList.add(4);\n    arrayList.a", "st();\n    arrayList.add(8);\n    let res = a", "\"b\");\n    arrayList.add(\"c\");\n    arrayList", "\"\u56db\");\n    arrayList.add(\"\u4e09\");\n    arrayList"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "Process.test.js", "Vector.test.js", "PlainArray.test.js", "xml.test.js", "ArrayList.test.js", "index.js", "HashSet.test.js", "Worker.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "clear", "api_method_all": "clear(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 30, "since": 8, "api_used": "\u662f", "lines": ["t.add(14);\n    list.clear();\n    let res = li", "\n    lightWeightMap.clear();\n    let res = li", "ual(5);\n    hashSet.clear();\n    let res1 = h", "  let res = hashSet.clear();\n    expect(res).", "5,33);\n        that.clear()\n        var resul", "(5);\n    plainArray.clear();\n    let res1 = p", "add(5);\n    hashSet.clear();\n    let res = ha", ".add(\"a\");\n    list.clear();\n    let res = li", "ew List();\n    list.clear();\n    let res1 = l", "\n    lightWeightSet.clear();\n    let res = li", ", \"a\");\n    treeMap.clear();\n    expect(treeM", "\n    lightWeightSet.clear();\n    let res1 = l", "hMap();\n    hashMap.clear();\n    let res = ha", "add(2);\n    treeSet.clear();\n    let res = tr", "add(14);\n    vector.clear();\n    let res = ve", ", \"c\");\n    treeMap.clear();\n    let res = tr", "t();\n    linkedList.clear();\n    const len = ", "length\n        that.clear()\n        var resul", "ual(5);\n    hashMap.clear();\n    let res1 = h", "(0);\n    plainArray.clear();\n    let res2 = p", "(14);\n    arrayList.clear();\n    let res = ar", ", \"E\");\n    hashMap.clear();\n    let res = ha"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "clone", "api_method_all": "clone(): PlainArray<T>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["narray = plainArray.clone();\n    let cloneLen", "ewlist = linkedList.clone();\n    let res = tr", "et res = plainArray.clone();\n    let arr = []", ".length;\n    expect(cloneLength).assertEqual(", "   let list1 = list.clone();\n    list1.addFir", "ay.clone();\n    let cloneLength = clonePlaina", "let res = arrayList.clone();\n    let arr = []", "ainArray();\n    let clonePlainarray = plainAr", "  let cloneLength = clonePlainarray.length;\n ", "   let res = vector.clone();\n    let arr = []"], "files": ["LinkedList.test.js", "Vector.test.js", "PlainArray.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "has", "api_method_all": "has(key: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 544, "since": 8, "api_used": "\u662f", "lines": [" new HashMap();\n    hashMap.set(\"\", \"A\");\n ", "let res = arrayList.has(\"\u56db\");\n    expect(re", "\"A\");\n    let res = hashMap.get(3.14);\n    ", "let res = arrayList.has(\"\u4e09\");\n    expect(re", ", c);\n    let res = hashMap.get(1);\n    exp", "\"A\");\n    let res = hashMap.get(\"\");\n    ex", "\"A\");\n    let res = hashMap.get(1);\n    exp", "et res = linkedList.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(1, 2);\n    ", "\"A\");\n    let res = hashMap.get(\"a\");\n    e", "\n    let res = list.has(\"a\");\n    expect(re", "\n    let res = list.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(3.14, \"A\");", "et res = linkedList.has(\"a\");\n    expect(re", "   let res = vector.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(1, \"A\");\n  ", "i\", age: \"13\"};\n    hashMap.set(1, c);\n    ", "let res = arrayList.has(a);\n    expect(res)", "    try {\n      let hashMap = new HashMap()", " new HashMap();\n    hashMap.set(\"a\", \"A\");\n", "Map();\n      expect(hashMap != undefined).a", "    let res = deque.has(6);\n    expect(res)", "\"A\");\n    let res = hashMap.get(\"$\");\n    e", "   let res = vector.has(8);\n    expect(res)", "nction () {\n    let hashMap = new HashMap()", "\n    let res = list.has(\"d\");\n    expect(re", " new HashMap();\n    hashMap.set(\"$\", \"A\");\n", "let res = arrayList.has(\"\u4e8c\");\n    expect(re", "t res1 = linkedList.has(\"d\");\n    expect(re", "  let res1 = vector.has(\"\u4e8c\");\n    expect(re", " c = [1, 2, 3];\n    hashMap.set(1, c);\n    ", "   let res = vector.has(\"\u4e09\");\n    expect(re", "let res = arrayList.has(8);\n    expect(res)", ", 2);\n    let res = hashMap.get(1);\n    exp"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "get", "api_method_all": "get(key: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 517, "since": 8, "api_used": "\u662f", "lines": ["onfigService = core.getDefaultService('conf", "     var info = app.getInfo()\n        expec", "    let res = deque.getLast();\n    expect(r", "    let res = deque.getLast();\n      expect", "let res = arrayList.getIndexOf(\"A\");\n    ex", "\n    let res = list.getIndexOf(\"b\");\n    ex", "et res1 = arrayList.getLastIndexOf(1);\n    ", "let res = arrayList.getLastIndexOf(1);\n    ", "et res = linkedList.get(0);\n    expect(res)", "  const core = Core.getInstance()\n        c", "let res = arrayList.getCapacity();\n    expe", "\n    let res = list.getLastIndexOf(\"f\");\n  ", "et res1 = arrayList.getIndexOf(1);\n    expe", "let res = arrayList.getIndexOf(99);\n    let", "    let res = deque.getFirst();\n    expect(", "    let res = deque.getFirst();\n      expec", "\n    let res = list.getIndexOf(\"f\");\n    ex", "t res1 = linkedList.get(1);\n    expect(res1", "\n    let res = list.getLastIndexOf(\"a\");\n  "], "files": ["ExampleJsunit.test.js", "List.test.js", "LightWeightSet.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "getIndexOfKey", "api_method_all": "getIndexOfKey(key: number): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["es = lightWeightMap.getIndexOfKey(2);\n    expect(res)", "et res = plainArray.getIndexOfKey(9);\n    expect(res)", "   res = plainArray.getIndexOfKey(12);\n    expect(res", "et res = plainArray.getIndexOfKey(2);\n    expect(res)"], "files": ["LightWeightMap.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "getIndexOfValue", "api_method_all": "getIndexOfValue(value: T): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["   res = plainArray.getIndexOfValue(\"Z\");\n    expect(re", "es = lightWeightMap.getIndexOfValue(\"F\");\n    expect(re", "et res = plainArray.getIndexOfValue(\"A\");\n    expect(re", "et res = plainArray.getIndexOfValue(\"Asad\");\n    expect"], "files": ["LightWeightMap.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "isEmpty", "api_method_all": "isEmpty(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 34, "since": 8, "api_used": "\u662f", "lines": ["  let res = hashSet.isEmpty();\n    expect(res).", "ty = lightWeightMap.isEmpty();\n    expect(isEmp", " it(\"SR000GGR47_testisEmpty057\", 0, function ()", " +\n            info.isEmptyElementTag()+ info.i", "s2 = lightWeightMap.isEmpty();\n    expect(res2)", "    let res = stack.isEmpty();\n    expect(res).", "et res = plainArray.isEmpty();\n    expect(res).", "   let res = vector.isEmpty();\n    expect(res).", " it(\"SR000GGR44_testisEmpty031\", 0, function ()", " it(\"SR000GGR44_testisEmpty030\", 0, function ()", " let res1 = hashMap.isEmpty();\n    expect(res).", "\n    let res = list.isEmpty();\n    expect(res).", " it(\"SR000GGR47_testisEmpty058\", 0, function ()", "s1 = lightWeightMap.isEmpty();\n    expect(res1)", " let res1 = treeSet.isEmpty();\n    expect(res1)", "rtEqual(0);\n    let isEmpty = lightWeightMap.is", "es = lightWeightSet.isEmpty();\n    expect(res).", "let res = arrayList.isEmpty();\n    expect(res).", " let res2 = treeSet.isEmpty();\n    expect(res2)", "Empty();\n    expect(isEmpty).assertEqual(true);", "  var result = that.isEmpty()\n        expect(re"], "files": ["LightWeightSet.test.js", "List.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "getKeyAt", "api_method_all": "getKeyAt(index: number): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["et res = plainArray.getKeyAt(2);\n    expect(res)", "   res = plainArray.getKeyAt(10);\n    expect(res", "et res = plainArray.getKeyAt(50);\n    expect(res", "es = lightWeightMap.getKeyAt(1);\n    expect(res)", "es = lightWeightMap.getKeyAt(\"123\");\n    } catch"], "files": ["LightWeightMap.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "remove", "api_method_all": "remove(key: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 93, "since": 8, "api_used": "\u662f", "lines": ["d(1);\n    arrayList.removeByRange(1, 3);\n    l", "  let res = hashSet.remove(1);\n    expect(res)", "3) {\n        vector.remove(123);\n      } else ", "es = lightWeightMap.remove(3);\n    expect(res)", "\n    let res = list.removeFirstFound(\"b\");\n   ", "et res = linkedList.removeFirst();\n    expect(", " try {\n      vector.removeByRange(1, 7);\n    }", "acity();\n    vector.removeByRange(0, capacity)", "\n    let res = list.remove(\"d\");\n    expect(re", "8) {\n        vector.remove(8);\n      }\n    }\n ", "let res = arrayList.removeByRange(6, 8);\n    }", "dd(\"a\");\n    vector.removeByIndex(2);\n    let ", " try {\n      vector.removeByIndex(12);\n    } c", " try {\n      vector.removeByRange(3, 1);\n    }", "dd(\"a\");\n    vector.remove(\"\u4e09\");\n    let res =", "\"a\");\n    arrayList.remove(\"\u4e09\");\n    let res =", "\"a\");\n    arrayList.removeByIndex(2);\n    let ", "acity();\n    vector.removeByRange(0, capacity ", "\n    let res = list.removeByIndex(2);\n    let ", "\n    let res = list.removeLastFound(\"b\");\n    ", "\n    let res = list.removeLast();\n    expect(r", "   let res = vector.remove(2);\n    expect(res)", "let res = arrayList.removeByIndex(5);\n    } ca", "     let res = list.removeByIndex(10);\n    } c", "\n    let res = list.remove(\"a\");\n    let arr =", "  let res = hashMap.remove(3);\n    expect(res)", "{\n        arrayList.remove(item);\n      }\n    ", "es = lightWeightMap.removeAt(1);\n    expect(re", "    let res = list1.removeLast();\n    expect(r", "let res = arrayList.removeByRange(3, 1);\n    }", " try {\n      vector.removeByRange(length + 1, ", "\n    let res = list.remove();\n    expect(res).", "let res = arrayList.remove(\"A\");\n    expect(re", "et res = linkedList.removeByIndex(1);\n    } ca", "ssage).assertEqual(\"removeByIndex is out-of-bo", "d(1);\n    arrayList.removeByRange(0, 9);\n    l", ".add(\"b\");\n    list.removeByIndex(2);\n    let ", " try {\n      vector.removeByRange(-1, capacity", "     let res = list.removeByIndex(5);\n    } ca", "s3 = lightWeightMap.removeAt(10);\n    expect(r", ".add(1);\n    vector.removeByRange(1, 3);\n    l", "     let res = list.removeByIndex(1);\n    } ca"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "removeAt", "api_method_all": "removeAt(index: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["es = lightWeightMap.removeAt(1);\n    expect(res)", "es = lightWeightMap.removeAt(\"123\");\n    } catch", "s3 = lightWeightMap.removeAt(10);\n    expect(res", "es = lightWeightSet.removeAt(\"123\");\n    } catch", "et res = plainArray.removeAt(2);\n    } catch (er", "et res = plainArray.removeAt(2);\n    expect(res)", "   res = plainArray.removeAt(12);\n    expect(res", "es = lightWeightSet.removeAt(1);\n    expect(res)"], "files": ["LightWeightMap.test.js", "PlainArray.test.js", "LightWeightSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "removeRangeFrom", "api_method_all": "removeRangeFrom(index: number, size: number): number;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": [" {\n      plainArray.removeRangeFrom(1, -1);\n    } catch", "E\");\n    plainArray.removeRangeFrom(2, 2);\n    let keys", "E\");\n    plainArray.removeRangeFrom(0, 5);\n    let res ", " {\n      plainArray.removeRangeFrom(15, 5);\n    } catch"], "files": ["PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "setValueAt", "api_method_all": "setValueAt(index: number, value: T): void;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["\n    lightWeightMap.setValueAt(4, \"F\");\n    let re", "E\");\n    plainArray.setValueAt(2, \"V\");\n    let ke", " {\n      plainArray.setValueAt(8, \"V\");\n    } catc", " {\n      plainArray.setValueAt(-1, \"X\");\n    } cat", "\n    lightWeightMap.setValueAt(0, \"a\");\n    let re"], "files": ["LightWeightMap.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "toString", "api_method_all": "toString(): String;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 131, "since": 8, "api_used": "\u662f", "lines": ["      expect(result.toString()).assertEqual('')\n", "      expect(result.toString()).assertEqual(\"DEF", "   let res = vector.toString();\n    expect(res).", "      expect(result.toString()).assertEqual(\"da,", "   var res = params.toString();\n        expect(r", "es = lightWeightMap.toString();\n    expect(res).", "t res1 = plainArray.toString();\n    expect(res1)", "      expect(result.toString()).assertEqual(\"val", "\n        expect(res.toString()).assertEqual(\"htt", "es = lightWeightSet.toString();\n    expect(res).", "et res = plainArray.toString();\n    expect(res).", "var result = params.toString()\n        expect(re", "var result = params.toString();\n        expect(r", "   let res = gaogao.toString();\n        expect(r", "         expect(err.toString()).assertEqual(\"Err"], "files": ["LightWeightSet.test.js", "url.test.js", "util.test.js", "uri.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "getValueAt", "api_method_all": "getValueAt(index: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["es = lightWeightSet.getValueAt(9999);\n    let res1", "es = lightWeightSet.getValueAt(\"123\");\n    } catch", "es = lightWeightMap.getValueAt(\"123\");\n    } catch", "es = lightWeightMap.getValueAt(1);\n    expect(res)", "et res = plainArray.getValueAt(2);\n    expect(res)", "es = lightWeightSet.getValueAt(1);\n    expect(res)", "et res = plainArray.getValueAt(50);\n    expect(res", "   res = plainArray.getValueAt(12);\n    expect(res"], "files": ["LightWeightMap.test.js", "PlainArray.test.js", "LightWeightSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: T, index?: number, PlainArray?: PlainArray<T>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 5, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: T, index?: number, PlainArray?: PlainArray<T>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 4, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PlainArray", "api_method_name": "length", "api_method_all": "length: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 327, "since": 8, "api_used": "\u662f", "lines": ["et res1 = arrayList.length;\n    expect(res).as", "   let res1 = deque.length;\n    expect(res1).a", "let res = arrayList.length;\n    expect(res).as", "   let size = deque.length;\n    expect(size).a", "   let size = deque.length;\n    let arr = [];\n", "= 0; i < linkedList.length; i++) {\n      if (l", "\n    let res = list.length;\n    expect(res).as", "r (let i = 0; i < a.length; i++) {\n      expec", "x = 0; index < list.length; index++) {\n      e", "let res = arrayList.length;\n    let res1 = arr", "st len = linkedList.length;\n    expect(len).as"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "Queue.test.js", "LightWeightMap.test.js", "LightWeightSet.test.js", "HashMap.test.js", "Worker.test.js", "TreeSet.test.js", "Process.test.js", "PlainArray.test.js", "TreeMap.test.js", "worker.js"], "is_white": " ", "desc": " "}]}