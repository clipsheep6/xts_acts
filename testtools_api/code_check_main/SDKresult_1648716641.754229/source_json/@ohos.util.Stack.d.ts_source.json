{"subsystem_ch": "\u516c\u5171\u57fa\u7840\u7c7b\u5e93", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.util.Stack", "api": [{"api_class_name": "Stack", "api_method_all": "declare class Stack<T> {\r\n  \r\n  constructor();\r\n  \r\n  length: number;\r\n  \r\n  isEmpty(): boolean;\r\n  \r\n  peek(): T;\r\n  \r\n  pop(): T;\r\n  \r\n  push(item: T): T;\r\n  \r\n  locate(element: T): number;\r\n  \r\n  forEach(callbackfn: (value: T, index?: number, stack?: Stack<T>) => void,\r\n  thisArg?: Object): void;\r\n  \r\n  [Symbol.iterator](): IterableIterator<T>;\r\n}", "api_method_name": "Stack", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["    let stack = new Stack();\n    let a = {nam", "    let stack = new Stack();\n    let arr = []", "    let stack = new Stack();\n      expect(sta", "    let stack = new Stack();\n    let arr = {}", "    let stack = new Stack();\n    stack.push(n", "unit/index';\nimport Stack from \"@ohos.util.St", "    let stack = new Stack();\n    stack.push(0", "    let stack = new Stack();\n    stack.push(\"", ".Stack\";\n\ndescribe(\"StackTest\", function () {", "    let stack = new Stack();\n    for (let i =", "    let stack = new Stack();\n    let res = st", "    let stack = new Stack();\n    stack.push(t", "ck from \"@ohos.util.Stack\";\n\ndescribe(\"StackT", "    let stack = new Stack();\n    stack.push(u", "    let stack = new Stack();\n    stack.push(-", "    let stack = new Stack();\n    stack.push(f", "st.js');\nrequire('./Stack.test.js');\nrequire(", "    let stack = new Stack();\n    let a = [1, ", "    let stack = new Stack();\n    stack.push(1", "    let stack = new Stack();\n    stack.push(8"], "files": ["Stack.test.js", "Main.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stack", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stack", "api_method_name": "isEmpty", "api_method_all": "isEmpty(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 34, "since": 8, "api_used": "\u662f", "lines": ["  let res = hashSet.isEmpty();\n    expect(res).", "ty = lightWeightMap.isEmpty();\n    expect(isEmp", " it(\"SR000GGR47_testisEmpty057\", 0, function ()", " +\n            info.isEmptyElementTag()+ info.i", "s2 = lightWeightMap.isEmpty();\n    expect(res2)", "    let res = stack.isEmpty();\n    expect(res).", "et res = plainArray.isEmpty();\n    expect(res).", "   let res = vector.isEmpty();\n    expect(res).", " it(\"SR000GGR44_testisEmpty031\", 0, function ()", " it(\"SR000GGR44_testisEmpty030\", 0, function ()", " let res1 = hashMap.isEmpty();\n    expect(res).", "\n    let res = list.isEmpty();\n    expect(res).", " it(\"SR000GGR47_testisEmpty058\", 0, function ()", "s1 = lightWeightMap.isEmpty();\n    expect(res1)", " let res1 = treeSet.isEmpty();\n    expect(res1)", "rtEqual(0);\n    let isEmpty = lightWeightMap.is", "es = lightWeightSet.isEmpty();\n    expect(res).", "let res = arrayList.isEmpty();\n    expect(res).", " let res2 = treeSet.isEmpty();\n    expect(res2)", "Empty();\n    expect(isEmpty).assertEqual(true);", "  var result = that.isEmpty()\n        expect(re"], "files": ["LightWeightSet.test.js", "List.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stack", "api_method_name": "peek", "api_method_all": "peek(): T;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": ["   let res1 = stack.peek();\n    expect(res).", "    let res = stack.peek();\n    expect(res).", "   let res1 = stack.peek();\n    expect(res1)"], "files": ["Stack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stack", "api_method_name": "pop", "api_method_all": "pop(): T;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 21, "since": 8, "api_used": "\u662f", "lines": ["    let res = stack.pop();\n    expect(res).", "pFirst();\n    deque.popLast();\n    deque.in", "ont(\"z\");\n    deque.popFirst();\n    deque.p", "  let res = treeSet.popLast();\n    expect(r", " let res1 = treeSet.popFirst();\n    expect(", "rtEnd(6);\n    deque.popFirst();\n    deque.p", "    let res = queue.pop();\n    expect(res).", "    let res = deque.popLast();\n    expect(r", "    let res = queue.pop();\n    let res1 = q", "ont(\"\u56db\");\n    deque.popFirst();\n    deque.p", "    let res = stack.pop();\n    let res1 = s", "    let res = deque.popFirst();\n    expect(", "  let res = treeSet.popFirst();\n    expect("], "files": ["TreeSet.test.js", "Stack.test.js", "Queue.test.js", "Deque.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stack", "api_method_name": "push", "api_method_all": "push(item: T): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 161, "since": 8, "api_used": "\u662f", "lines": [" queue) {\n      arr.push(item);\n    }\n    le", "dex) => {\n      arr.push(item);\n    });\n    ", " queue) {\n      arr.push(item);\n    }\n    ex", " Stack();\n    stack.push(8);\n    let res = s", " deque) {\n      arr.push(item);\n    }\n    le", "ayList) {\n      arr.push(item);\n    }\n    le", "().value;\n      arr.push(tmp);\n    } while (", " Stack();\n    stack.push(\"\u56db\");\n    let res =", "e; i++) {\n      arr.push(itr.next().value);\n", "f list) {\n      arr.push(item);\n    }\n    le", "f list) {\n      arr.push(item);\n    }\n    fo"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stack", "api_method_name": "locate", "api_method_all": "locate(element: T): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": ["    let res = stack.locate(\"A\");\n    let res1 ", "rray into a newly-allocated u8\n\t   array using", "\n\t   into a newly allocated u8 array.\n     * @", "nto the newly\n\t   allocated u8 array using the", "ay into the newly allocated u8\n\t   array using", "rray into a newly allocated u8 array.\n     * @", "   let res1 = stack.locate(\"C\");\n    expect(re"], "files": ["util.test.js", "Stack.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stack", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: T, index?: number, stack?: Stack<T>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 5, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stack", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: T, index?: number, stack?: Stack<T>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 4, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Stack", "api_method_name": "length", "api_method_all": "length: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 327, "since": 8, "api_used": "\u662f", "lines": ["et res1 = arrayList.length;\n    expect(res).as", "   let res1 = deque.length;\n    expect(res1).a", "let res = arrayList.length;\n    expect(res).as", "   let size = deque.length;\n    expect(size).a", "   let size = deque.length;\n    let arr = [];\n", "= 0; i < linkedList.length; i++) {\n      if (l", "\n    let res = list.length;\n    expect(res).as", "r (let i = 0; i < a.length; i++) {\n      expec", "x = 0; index < list.length; index++) {\n      e", "let res = arrayList.length;\n    let res1 = arr", "st len = linkedList.length;\n    expect(len).as"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "Queue.test.js", "LightWeightMap.test.js", "LightWeightSet.test.js", "HashMap.test.js", "Worker.test.js", "TreeSet.test.js", "Process.test.js", "PlainArray.test.js", "TreeMap.test.js", "worker.js"], "is_white": " ", "desc": " "}]}