{"subsystem_ch": "Misc\u8f6f\u4ef6\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "miscservices", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.inputmethodengine", "api": [{"api_class_name": "inputMethodEngine", "api_method_all": "declare namespace inputMethodEngine {\r\n    const ENTER_KEY_TYPE_UNSPECIFIED: number;\r\n    const ENTER_KEY_TYPE_GO: number;\r\n    const ENTER_KEY_TYPE_SEARCH: number;\r\n    const ENTER_KEY_TYPE_SEND: number;\r\n    const ENTER_KEY_TYPE_NEXT: number;\r\n    const ENTER_KEY_TYPE_DONE: number;\r\n    const ENTER_KEY_TYPE_PREVIOUS: number;\r\n\r\n    const PATTERN_NULL: number;\r\n    const PATTERN_TEXT: number;\r\n    const PATTERN_NUMBER: number;\r\n    const PATTERN_PHONE: number;\r\n    const PATTERN_DATETIME: number;\r\n    const PATTERN_EMAIL: number;\r\n    const PATTERN_URI: number;\r\n    const PATTERN_PASSWORD: number;\r\n\r\n    const FLAG_SELECTING: number;\r\n    const FLAG_SINGLE_LINE: number;\r\n\r\n    const DISPLAY_MODE_PART: number;\r\n    const DISPLAY_MODE_FULL: number;\r\n\r\n    const OPTION_ASCII: number;\r\n    const OPTION_NONE: number;\r\n    const OPTION_AUTO_CAP_CHARACTERS: number;\r\n    const OPTION_AUTO_CAP_SENTENCES: number;\r\n    const OPTION_AUTO_WORDS: number;\r\n    const OPTION_MULTI_LINE: number;\r\n    const OPTION_NO_FULLSCREEN: number;\r\n\r\n    function getInputMethodEngine(): InputMethodEngine;\r\n\r\n    function createKeyboardDelegate(): KeyboardDelegate;\r\n\r\n    interface KeyboardController {\r\n        hideKeyboard(callback: AsyncCallback<void>): void;\r\n\r\n        hideKeyboard(): Promise<void>;\r\n    }\r\n\r\n    interface InputMethodEngine {\r\n        on(type: 'inputStart', callback: (kbController: KeyboardController, textInputClient: TextInputClient) => void): void;\r\n\r\n        off(type: 'inputStart', callback?: (kbController: KeyboardController, textInputClient: TextInputClient) => void): void;\r\n\r\n        on(type: 'keyboardShow'|'keyboardHide', callback: () => void): void;\r\n\r\n        off(type: 'keyboardShow'|'keyboardHide', callback?: () => void): void;\r\n    }\r\n\r\n    interface TextInputClient {\r\n        sendKeyFunction(action: number, callback: AsyncCallback<boolean>): void;\r\n\r\n        sendKeyFunction(action: number): Promise<boolean>;\r\n\r\n        deleteForward(length: number, callback: AsyncCallback<boolean>): void;\r\n\r\n        deleteForward(length: number): Promise<boolean>;\r\n\r\n        deleteBackward(length: number, callback: AsyncCallback<boolean>): void;\r\n\r\n        deleteBackward(length: number): Promise<boolean>;\r\n\r\n        insertText(text: string, callback: AsyncCallback<boolean>): void;\r\n\r\n        insertText(text: string): Promise<boolean>;\r\n\r\n        getForward(length: number, callback: AsyncCallback<string>): void;\r\n\r\n        getForward(length: number): Promise<string>;\r\n\r\n        getBackward(length: number, callback: AsyncCallback<string>): void;\r\n\r\n        getBackward(length: number): Promise<string>;\r\n\r\n        getEditorAttribute(callback: AsyncCallback<EditorAttribute>): void;\r\n\r\n        getEditorAttribute(): Promise<EditorAttribute>;\r\n    }\r\n\r\n    interface KeyboardDelegate {\r\n        on(type: 'keyDown'|'keyUp', callback: (event: KeyEvent) => boolean): void;\r\n\r\n        off(type: 'keyDown'|'keyUp', callback?: (event: KeyEvent) => boolean): void;\r\n\r\n        on(type: 'cursorContextChange', callback: (x: number, y: number, height: number) => void): void;\r\n\r\n        off(type: 'cursorContextChange', callback?: (x: number, y: number, height: number) => void): void;\r\n\r\n        on(type: 'selectionChange', callback: (oldBegin: number, oldEnd: number, newBegin: number, newEnd: number) => void): void;\r\n\r\n        off(type: 'selectionChange', callback?: (oldBegin: number, oldEnd: number, newBegin: number, newEnd: number) => void): void;\r\n\r\n        on(type: 'textChange', callback: (text: string) => void): void;\r\n\r\n        off(type: 'textChange', callback?: (text: string) => void): void;\r\n    }\r\n\r\n    interface EditorAttribute {\r\n        readonly inputPattern: number;\r\n        readonly enterKeyType: number;\r\n    }\r\n\r\n    interface KeyEvent {\r\n        readonly keyCode: number;\r\n        readonly keyAction: number;\r\n    }\r\n}", "api_method_name": "inputMethodEngine", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 145, "since": 0, "api_used": "\u662f", "lines": ["      let keyType = inputMethodEngine.ENTER_KEY_TYPE_DONE", ".log(\"************* inputMethodEngine Test start*********", "      let keyType = inputMethodEngine.ENTER_KEY_TYPE_SEND", ");\n    });\n\n    it('inputMethodEngine_test_006', 0, async", "ate = null;\n    var inputMethodEngineObject = inputMethod", "\n      console.log(\"inputMethodEngine_test_005 result:\" +", "      let keyType = inputMethodEngine.ENTER_KEY_TYPE_PREV", "\n      console.log(\"inputMethodEngine afterEach start:\" +", "\n      console.log(\"inputMethodEngine_test_007 result:\" +", "r);\n      });\n      inputMethodEngineObject.on('keyboardH", "       console.log(\"inputMethodEngine beforeEach keyDown:", "      let keyType = inputMethodEngine.ENTER_KEY_TYPE_UNSP", "       console.log(\"inputMethodEngine beforeEach keyboard", "       console.log(\"inputMethodEngine beforeEach cursorCo", ");\n    });\n\n    it('inputMethodEngine_test_005', 0, async", ");\n    });\n\n    it('inputMethodEngine_test_002', 0, async", "      let keyType = inputMethodEngine.PATTERN_NULL;\n     ", "dEngine from '@ohos.inputMethodEngine';\nimport Utils from", ");\n    });\n\n    it('inputMethodEngine_test_000', 0, async", "/index.ets\";\nimport inputMethodEngine from '@ohos.inputMe", "\n      console.log(\"inputMethodEngine_test_006 result:\" +", "afterEach start:\" + inputMethodEngineObject);\n      await", "       console.log(\"inputMethodEngine beforeEach selectio", ");\n    });\n\n    it('inputMethodEngine_test_004', 0, async", "rt default function inputMethodEngineJsunit() {\n  describ", "       console.log(\"inputMethodEngine beforeEach textChan", "      let keyType = inputMethodEngine.ENTER_KEY_TYPE_GO;\n", "\n      console.log(\"inputMethodEngine_test_004 result:\" +", "mKeyboardDelegate = inputMethodEngine.createKeyboardDeleg", "\n      console.log(\"inputMethodEngine_test_003 result:\" +", "\n      console.log(\"inputMethodEngine_test_002 result:\" +", ");\n    });\n\n    it('inputMethodEngine_test_003', 0, async", "      let keyType = inputMethodEngine.ENTER_KEY_TYPE_SEAR", "       console.log(\"inputMethodEngine beforeEach inputSta", "\n      console.log(\"inputMethodEngine_test_001 result:\" +", "ethodEngineObject = inputMethodEngine.getInputMethodEngin", "      let keyType = inputMethodEngine.ENTER_KEY_TYPE_NEXT", ");\n    });\n\n    it('inputMethodEngine_test_007', 0, async", "er;\n      });\n      inputMethodEngineObject.on('keyboardS", "tion (done) {\n      inputMethodEngineObject.on('inputStar", ");\n    });\n\n    it('inputMethodEngine_test_001', 0, async", ");\n    });\n\n    it('inputMethodEngine_test_008', 0, async", "       console.log(\"inputMethodEngine beforeEach keyUp:\" "], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "getInputMethodEngine", "api_method_all": "function getInputMethodEngine(): InputMethodEngine;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.getInputMethodEngine();\n    var textInpu"], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "createKeyboardDelegate", "api_method_all": "function createKeyboardDelegate(): KeyboardDelegate;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.createKeyboardDelegate();\n      mKeyboardD"], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "ENTER_KEY_TYPE_UNSPECIFIED", "api_method_all": "const ENTER_KEY_TYPE_UNSPECIFIED: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.ENTER_KEY_TYPE_UNSPECIFIED;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "ENTER_KEY_TYPE_GO", "api_method_all": "const ENTER_KEY_TYPE_GO: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.ENTER_KEY_TYPE_GO;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "ENTER_KEY_TYPE_SEARCH", "api_method_all": "const ENTER_KEY_TYPE_SEARCH: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.ENTER_KEY_TYPE_SEARCH;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "ENTER_KEY_TYPE_SEND", "api_method_all": "const ENTER_KEY_TYPE_SEND: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.ENTER_KEY_TYPE_SEND;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "ENTER_KEY_TYPE_NEXT", "api_method_all": "const ENTER_KEY_TYPE_NEXT: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.ENTER_KEY_TYPE_NEXT;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "ENTER_KEY_TYPE_DONE", "api_method_all": "const ENTER_KEY_TYPE_DONE: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.ENTER_KEY_TYPE_DONE;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "ENTER_KEY_TYPE_PREVIOUS", "api_method_all": "const ENTER_KEY_TYPE_PREVIOUS: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.ENTER_KEY_TYPE_PREVIOUS;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "PATTERN_NULL", "api_method_all": "const PATTERN_NULL: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.PATTERN_NULL;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "PATTERN_TEXT", "api_method_all": "const PATTERN_TEXT: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.PATTERN_TEXT;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "PATTERN_NUMBER", "api_method_all": "const PATTERN_NUMBER: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.PATTERN_NUMBER;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "PATTERN_PHONE", "api_method_all": "const PATTERN_PHONE: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.PATTERN_PHONE;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "PATTERN_DATETIME", "api_method_all": "const PATTERN_DATETIME: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.PATTERN_DATETIME;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "PATTERN_EMAIL", "api_method_all": "const PATTERN_EMAIL: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.PATTERN_EMAIL;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "PATTERN_URI", "api_method_all": "const PATTERN_URI: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.PATTERN_URI;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "PATTERN_PASSWORD", "api_method_all": "const PATTERN_PASSWORD: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.PATTERN_PASSWORD;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "FLAG_SELECTING", "api_method_all": "const FLAG_SELECTING: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.FLAG_SELECTING;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "FLAG_SINGLE_LINE", "api_method_all": "const FLAG_SINGLE_LINE: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.FLAG_SINGLE_LINE;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "DISPLAY_MODE_PART", "api_method_all": "const DISPLAY_MODE_PART: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.DISPLAY_MODE_PART;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "DISPLAY_MODE_FULL", "api_method_all": "const DISPLAY_MODE_FULL: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.DISPLAY_MODE_FULL;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "OPTION_ASCII", "api_method_all": "const OPTION_ASCII: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.OPTION_ASCII;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "OPTION_NONE", "api_method_all": "const OPTION_NONE: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.OPTION_NONE;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "OPTION_AUTO_CAP_CHARACTERS", "api_method_all": "const OPTION_AUTO_CAP_CHARACTERS: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.OPTION_AUTO_CAP_CHARACTERS;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "OPTION_AUTO_CAP_SENTENCES", "api_method_all": "const OPTION_AUTO_CAP_SENTENCES: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.OPTION_AUTO_CAP_SENTENCES;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "OPTION_AUTO_WORDS", "api_method_all": "const OPTION_AUTO_WORDS: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.OPTION_AUTO_WORDS;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "OPTION_MULTI_LINE", "api_method_all": "const OPTION_MULTI_LINE: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.OPTION_MULTI_LINE;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "inputMethodEngine", "api_method_name": "OPTION_NO_FULLSCREEN", "api_method_all": "const OPTION_NO_FULLSCREEN: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= inputMethodEngine.OPTION_NO_FULLSCREEN;\n      console.log("], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardController", "api_method_all": "interface KeyboardController {\r\n        hideKeyboard(callback: AsyncCallback<void>): void;\r\n\r\n        hideKeyboard(): Promise<void>;\r\n    }", "api_method_name": "KeyboardController", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardController", "api_method_name": "hideKeyboard", "api_method_all": "hideKeyboard(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["thodEngine_test_037 hideKeyboard promise error----\" + JSON.stringify(err", "       kbController.hideKeyboard(() => {\n          console.log(\"inputMet", "thodEngine_test_040 hideKeyboard:\" + value);\n          expect(1 == 1).as", "thodEngine_test_037 hideKeyboard promise result-----\" + JSON.stringify(r"], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardController", "api_method_name": "hideKeyboard", "api_method_all": "hideKeyboard(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["mise = kbController.hideKeyboard();\n        promise.then(res => {\n      "], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "InputMethodEngine", "api_method_all": "interface InputMethodEngine {\r\n        on(type: 'inputStart', callback: (kbController: KeyboardController, textInputClient: TextInputClient) => void): void;\r\n\r\n        off(type: 'inputStart', callback?: (kbController: KeyboardController, textInputClient: TextInputClient) => void): void;\r\n\r\n        on(type: 'keyboardShow'|'keyboardHide', callback: () => void): void;\r\n\r\n        off(type: 'keyboardShow'|'keyboardHide', callback?: () => void): void;\r\n    }", "api_method_name": "InputMethodEngine", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["nputMethodEngine.getInputMethodEngine();\n    var textInpu"], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "InputMethodEngine", "api_method_name": "on", "api_method_all": "on(type: 'inputStart', callback: (kbController: KeyboardController, textInputClient: TextInputClient) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "InputMethodEngine", "api_method_name": "on", "api_method_all": "on(type: 'inputStart', callback: (kbController: KeyboardController, textInputClient: TextInputClient) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "InputMethodEngine", "api_method_name": "off", "api_method_all": "off(type: 'inputStart', callback?: (kbController: KeyboardController, textInputClient: TextInputClient) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "InputMethodEngine", "api_method_name": "off", "api_method_all": "off(type: 'inputStart', callback?: (kbController: KeyboardController, textInputClient: TextInputClient) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "InputMethodEngine", "api_method_name": "on", "api_method_all": "on(type: 'keyboardShow'|'keyboardHide', callback: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "InputMethodEngine", "api_method_name": "on", "api_method_all": "on(type: 'keyboardShow'|'keyboardHide', callback: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "InputMethodEngine", "api_method_name": "off", "api_method_all": "off(type: 'keyboardShow'|'keyboardHide', callback?: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "InputMethodEngine", "api_method_name": "off", "api_method_all": "off(type: 'keyboardShow'|'keyboardHide', callback?: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_all": "interface TextInputClient {\r\n        sendKeyFunction(action: number, callback: AsyncCallback<boolean>): void;\r\n\r\n        sendKeyFunction(action: number): Promise<boolean>;\r\n\r\n        deleteForward(length: number, callback: AsyncCallback<boolean>): void;\r\n\r\n        deleteForward(length: number): Promise<boolean>;\r\n\r\n        deleteBackward(length: number, callback: AsyncCallback<boolean>): void;\r\n\r\n        deleteBackward(length: number): Promise<boolean>;\r\n\r\n        insertText(text: string, callback: AsyncCallback<boolean>): void;\r\n\r\n        insertText(text: string): Promise<boolean>;\r\n\r\n        getForward(length: number, callback: AsyncCallback<string>): void;\r\n\r\n        getForward(length: number): Promise<string>;\r\n\r\n        getBackward(length: number, callback: AsyncCallback<string>): void;\r\n\r\n        getBackward(length: number): Promise<string>;\r\n\r\n        getEditorAttribute(callback: AsyncCallback<EditorAttribute>): void;\r\n\r\n        getEditorAttribute(): Promise<EditorAttribute>;\r\n    }", "api_method_name": "TextInputClient", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "sendKeyFunction", "api_method_all": "sendKeyFunction(action: number, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["028 textInputClient sendKeyFunction:\" + value);\n          expect(value).ass", "    textInputClient.sendKeyFunction(0, (value) => {\n          console.log(\""], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "sendKeyFunction", "api_method_all": "sendKeyFunction(action: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["e = textInputClient.sendKeyFunction(0);\n        promise.then(res => {\n     "], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "deleteForward", "api_method_all": "deleteForward(length: number, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["thodEngine_test_031 deleteForward promise error----\" + JSON.stringify(err", "thodEngine_test_031 deleteForward promise result-----\" + JSON.stringify(r", "thodEngine_test_030 deleteForward:\" + value);\n          expect(value).ass", "    textInputClient.deleteForward(1, (value) => {\n          console.log(\""], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "deleteForward", "api_method_all": "deleteForward(length: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["e = textInputClient.deleteForward(1);\n        promise.then(res => {\n     "], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "deleteBackward", "api_method_all": "deleteBackward(length: number, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["thodEngine_test_033 deleteBackward promise result-----\" + JSON.stringify(r", "    textInputClient.deleteBackward(1, (value) => {\n          console.log(\"", "thodEngine_test_033 deleteBackward promise error----\" + JSON.stringify(err", "thodEngine_test_032 deleteBackward:\" + value);\n          expect(value).ass"], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "deleteBackward", "api_method_all": "deleteBackward(length: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["e = textInputClient.deleteBackward(1);\n        promise.then(res => {\n     "], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "insertText", "api_method_all": "insertText(text: string, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "insertText", "api_method_all": "insertText(text: string): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "getForward", "api_method_all": "getForward(length: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["    textInputClient.getForward(1, (value) => {\n          console.log(\"", "thodEngine_test_036 getForward:\" + value);\n          expect(value).ass", "thodEngine_test_037 getForward promise error----\" + JSON.stringify(err", "thodEngine_test_037 getForward promise result-----\" + JSON.stringify(r"], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "getForward", "api_method_all": "getForward(length: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["e = textInputClient.getForward(1);\n        promise.then(res => {\n     "], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "getBackward", "api_method_all": "getBackward(length: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "getBackward", "api_method_all": "getBackward(length: number): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "getEditorAttribute", "api_method_all": "getEditorAttribute(callback: AsyncCallback<EditorAttribute>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["thodEngine_test_037 getEditorAttribute promise result-----\" + JSON.stringify(r", "    textInputClient.getEditorAttribute(1, (editorAttribute) => {\n          con", "thodEngine_test_036 getEditorAttribute:\" + value);\n          expect(editorAttr", "thodEngine_test_037 getEditorAttribute promise error----\" + JSON.stringify(err"], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextInputClient", "api_method_name": "getEditorAttribute", "api_method_all": "getEditorAttribute(): Promise<EditorAttribute>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["e = textInputClient.getEditorAttribute();\n        promise.then(res => {\n      "], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_all": "interface KeyboardDelegate {\r\n        on(type: 'keyDown'|'keyUp', callback: (event: KeyEvent) => boolean): void;\r\n\r\n        off(type: 'keyDown'|'keyUp', callback?: (event: KeyEvent) => boolean): void;\r\n\r\n        on(type: 'cursorContextChange', callback: (x: number, y: number, height: number) => void): void;\r\n\r\n        off(type: 'cursorContextChange', callback?: (x: number, y: number, height: number) => void): void;\r\n\r\n        on(type: 'selectionChange', callback: (oldBegin: number, oldEnd: number, newBegin: number, newEnd: number) => void): void;\r\n\r\n        off(type: 'selectionChange', callback?: (oldBegin: number, oldEnd: number, newBegin: number, newEnd: number) => void): void;\r\n\r\n        on(type: 'textChange', callback: (text: string) => void): void;\r\n\r\n        off(type: 'textChange', callback?: (text: string) => void): void;\r\n    }", "api_method_name": "KeyboardDelegate", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": [");\n      });\n      mKeyboardDelegate.on('selectionChange", ");\n      });\n      mKeyboardDelegate.on('keyUp', (keyEve", ");\n      });\n      mKeyboardDelegate.on('textChange', (t", "tMethodEngine.createKeyboardDelegate();\n      mKeyboardD", "ction () {\n    var mKeyboardDelegate = null;\n    var inp", "dDelegate();\n      mKeyboardDelegate.on('keyDown', (keyE", ");\n      });\n      mKeyboardDelegate.on('cursorContextCh", ");\n      });\n      mKeyboardDelegate = inputMethodEngine"], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "on", "api_method_all": "on(type: 'keyDown'|'keyUp', callback: (event: KeyEvent) => boolean): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "on", "api_method_all": "on(type: 'keyDown'|'keyUp', callback: (event: KeyEvent) => boolean): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "off", "api_method_all": "off(type: 'keyDown'|'keyUp', callback?: (event: KeyEvent) => boolean): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "off", "api_method_all": "off(type: 'keyDown'|'keyUp', callback?: (event: KeyEvent) => boolean): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "on", "api_method_all": "on(type: 'cursorContextChange', callback: (x: number, y: number, height: number) => void): void;", "api_type": "callback", "api_args_count": 5, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "on", "api_method_all": "on(type: 'cursorContextChange', callback: (x: number, y: number, height: number) => void): void;", "api_type": "callback", "api_args_count": 5, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "off", "api_method_all": "off(type: 'cursorContextChange', callback?: (x: number, y: number, height: number) => void): void;", "api_type": "callback", "api_args_count": 5, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "off", "api_method_all": "off(type: 'cursorContextChange', callback?: (x: number, y: number, height: number) => void): void;", "api_type": "callback", "api_args_count": 5, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "on", "api_method_all": "on(type: 'selectionChange', callback: (oldBegin: number, oldEnd: number, newBegin: number, newEnd: number) => void): void;", "api_type": "callback", "api_args_count": 6, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "on", "api_method_all": "on(type: 'selectionChange', callback: (oldBegin: number, oldEnd: number, newBegin: number, newEnd: number) => void): void;", "api_type": "callback", "api_args_count": 6, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "off", "api_method_all": "off(type: 'selectionChange', callback?: (oldBegin: number, oldEnd: number, newBegin: number, newEnd: number) => void): void;", "api_type": "callback", "api_args_count": 6, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "off", "api_method_all": "off(type: 'selectionChange', callback?: (oldBegin: number, oldEnd: number, newBegin: number, newEnd: number) => void): void;", "api_type": "callback", "api_args_count": 6, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "on", "api_method_all": "on(type: 'textChange', callback: (text: string) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "on", "api_method_all": "on(type: 'textChange', callback: (text: string) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "off", "api_method_all": "off(type: 'textChange', callback?: (text: string) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyboardDelegate", "api_method_name": "off", "api_method_all": "off(type: 'textChange', callback?: (text: string) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "EditorAttribute", "api_method_all": "interface EditorAttribute {\r\n        readonly inputPattern: number;\r\n        readonly enterKeyType: number;\r\n    }", "api_method_name": "EditorAttribute", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": [" textInputClient.getEditorAttribute(1, (editorAttribute", " textInputClient.getEditorAttribute();\n        promise.", "dEngine_test_036 getEditorAttribute:\" + value);\n       ", "dEngine_test_037 getEditorAttribute promise error----\" ", "dEngine_test_037 getEditorAttribute promise result-----"], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "EditorAttribute", "api_method_name": "inputPattern", "api_method_all": "readonly inputPattern: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["ect(editorAttribute.inputPattern).assertEqual(1);\n  ", "         expect(res.inputPattern).assertEqual(1);\n  "], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "EditorAttribute", "api_method_name": "enterKeyType", "api_method_all": "readonly enterKeyType: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["         expect(res.enterKeyType).assertEqual(1);\n  ", "ect(editorAttribute.enterKeyType).assertEqual(1);\n  ", ".Normal })\n        .enterKeyType(EnterKeyType.Search"], "files": ["input.ets", "InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_all": "interface KeyEvent {\r\n        readonly keyCode: number;\r\n        readonly keyAction: number;\r\n    }", "api_method_name": "KeyEvent", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_name": "keyCode", "api_method_all": "readonly keyCode: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["    expect(keyEvent.keyCode).assertEqual('1');\n", " keyUp:\" + keyEvent.keyCode);\n        expect(ke"], "files": ["InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "KeyEvent", "api_method_name": "keyAction", "api_method_all": "readonly keyAction: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}