{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\radio", "api": [{"api_class_name": "RadioOptions", "api_method_all": "declare interface RadioOptions {\n  \n  group: string;\n\n  \n  value: string;\n}", "api_method_name": "RadioOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RadioOptions", "api_method_name": "group", "api_method_all": "group: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 53, "since": 8, "api_used": "\u662f", "lines": ["essage: 'Open ' + e.groupid\n        })\n    }\n", " name: 'checkbox3', group: 'checkboxGroup' })", "    });\n    },\n\n    groupCollapse() {\n       ", "Group({\n            groupid: 'group1'\n       ", "({ value: 'Radio3', group: 'radioGroup' }).ch", "({ value: 'Radio2', group: 'radioGroup' }).ch", "name: 'checkbox1',  group: 'checkboxGroup'})\n", "ssage: 'Close ' + e.groupid\n        })\n    },", "          message: 'groupCollapse'\n        })", "    });\n    },\n\n    groupExpand() {\n        p", "Group({\n            groupid: 'GROUP1'\n       ", " name: 'checkbox1', group: 'checkboxGroup' })", " name: 'checkbox2', group: 'checkboxGroup' })", "({ value: 'Radio1', group: 'radioGroup' }).ch", "     CheckboxGroup({group : 'checkboxGroup'})", "ertEqual('list-item-group')\n         expect(o", "          groupid: 'group1'\n        })\n    },", "          message: 'groupExpand'\n        });\n", "name: 'checkbox2',  group: 'checkboxGroup'})\n", "    });\n    },\n\n    groupClick() {\n        pr", "          message: 'groupClick'\n        });\n "], "files": ["listItemGroupProps.test.js", "checkbox.ets", "radio.ets", "checkboxGroup.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioOptions", "api_method_name": "value", "api_method_all": "value: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 8, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioInterface", "api_method_all": "interface RadioInterface {\n  \n  (options: RadioOptions): RadioAttribute;\n}", "api_method_name": "RadioInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RadioInterface", "api_method_name": "options", "api_method_all": "(options: RadioOptions): RadioAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 791, "since": 8, "api_used": "\u662f", "lines": ["= await router.push(options);\n          await U", " start\");\n      let options = {\n        uri: 'p", "(obj.$attrs.overlay.options.offset.x).assertEqu", "(obj.$attrs.overlay.options.align).assertEqual(", "(obj.$attrs.overlay.options.offset.y).assertEqu", " (done) {\n      let options = {\n        uri: 'p"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioAttribute", "api_method_all": "declare class RadioAttribute extends CommonMethod<RadioAttribute> {\n  \n  checked(value: boolean): RadioAttribute;\n\n  \n  onChange(callback: (isChecked: boolean) => void): RadioAttribute;\n}", "api_method_name": "RadioAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RadioAttribute", "api_method_name": "checked", "api_method_all": "checked(value: boolean): RadioAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 88, "since": 8, "api_used": "\u662f", "lines": ["ctor()\n        this.checkedFalse = this.$elemen", "  expect(obj.$attrs.checked).assertEqual('false", " this.toggleList[i].checked = false\n           ", "pNone,\n\n            checkedTrue : this.checkedT", ": this.checkedTrue, checkedFalse : this.checked", "st ATTRS_CHECKED = 'checked'\nconst ATTRS_SELECT", "up: 'radioGroup' }).checked(false)\n          .h", "up: 'radioGroup' }).checked(true)\n          .he", " checkedTrue : this.checkedTrue, checkedFalse :", "edTrue,\n            checkedFalse : this.checked", "(e) {\n        if (e.checked === true) {\n       ", " checkedNone : this.checkedNone,\n            ch", " \"name\":\"Bedroom\", \"checked\":false },\n         ", "\", \"name\":\"Study\", \"checked\":false },\n        ]", " checkedTrue : this.checkedTrue,\n            ch", "edNone,\n            checkedTrue : this.checkedT", " this.checkedFalse, checkedNone : this.checkedN", "checkedFalse : this.checkedFalse, checkedNone :", "se = this.$element(\"checkedFalse\").getInspector", " this.toggleList[i].checked = true\n            ", "ne = this.$element(\"checkedNone\").getInspector(", ":\"Second bedroom\", \"checked\":false },\n         ", "checkedFalse : this.checkedFalse,\n\n        }\n  ", "ne : null,\n\n        checkedTrue : null,\n       ", "lse : null,\n        checkedNone : null,\n       ", "ueNone,\n            checkedNone : this.checkedN", ".checked);\n    if(e.checked){\n      prompt.show", "ctor()\n        this.checkedNone = this.$element", "rue : null,\n        checkedFalse : null,\n      ", "ue = this.$element(\"checkedTrue\").getInspector(", "  expect(obj.$attrs.checked).assertEqual('true'", "me\":\"Living room\", \"checked\":true },\n          ", "ues(){\n        this.checkedTrue = this.$element", "{\n    console.log(e.checked);\n    if(e.checked)", "one : null,\n        checkedNone : null,\n       ", "rue : null,\n        checkedFalse : null,\n    },", "one : null,\n        checkedTrue : null,\n       ", " checkedNone : this.checkedNone,\n            sh", "ctor()\n        this.checkedTrue = this.$element"], "files": ["switchProps.test.js", "radio.ets", "Constants.ets", "inputProps.test.js", "index.js", "toggleProps.test.js", "RadioJsunit.test.ets", "searchProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RadioAttribute", "api_method_name": "onChangecallback", "api_method_all": "onChange(callback: (isChecked: boolean) => void): RadioAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "RadioAttribute", "api_method_name": "onChangecallback", "api_method_all": "onChange(callback: (isChecked: boolean) => void): RadioAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}