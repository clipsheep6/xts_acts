{"subsystem_ch": "\u5206\u5e03\u5f0f\u6570\u636e\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "distributeddatamgr", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.data.storage", "api": [{"api_class_name": "storage", "api_method_all": "declare namespace storage {\n    \n\n    function getStorageSync(path: string): Storage;\n    function getStorage(path: string, callback: AsyncCallback<Storage>): void;\n    function getStorage(path: string): Promise<Storage>;\n\n    \n    function deleteStorageSync(path: string): void;\n    function deleteStorage(path: string, callback: AsyncCallback<void>): void;\n    function deleteStorage(path: string): Promise<void>;\n\n    \n    function removeStorageFromCacheSync(path: string): void;\n    function removeStorageFromCache(path: string, callback: AsyncCallback<void>): void;\n    function removeStorageFromCache(path: string): Promise<void>;\n\n    \n    interface Storage {\n        \n        getSync(key: string, defValue: ValueType): ValueType;\n        get(key: string, defValue: ValueType, callback: AsyncCallback<ValueType>): void;\n        get(key: string, defValue: ValueType): Promise<ValueType>;\n\n        \n        hasSync(key: string): boolean;\n        has(key: string, callback: AsyncCallback<boolean>): boolean;\n        has(key: string): Promise<boolean>;\n\n        \n        putSync(key: string, value: ValueType): void;\n        put(key: string, value: ValueType, callback: AsyncCallback<void>): void;\n        put(key: string, value: ValueType): Promise<void>;\n\n        \n        deleteSync(key: string): void;\n        delete(key: string, callback: AsyncCallback<void>): void;\n        delete(key: string): Promise<void>;\n\n        \n        clearSync(): void;\n        clear(callback: AsyncCallback<void>): void;\n        clear(): Promise<void>;\n\n        \n        flushSync(): void;\n        flush(callback: AsyncCallback<void>): void;\n        flush(): Promise<void>;\n\n        \n        on(type: 'change', callback: Callback<StorageObserver>): void;\n\n        \n        off(type: 'change', callback: Callback<StorageObserver>): void;\n    }\n\n    \n    type ValueType = number | string | boolean;\n\n    \n    interface StorageObserver {\n        \n        key: string;\n    }\n\n    \n    const MAX_KEY_LENGTH: 80;\n\n    \n    const MAX_VALUE_LENGTH: 8192;\n}", "api_method_name": "storage", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 42, "since": 0, "api_used": "\u662f", "lines": ["  try {\n            storage.deleteStorageSync('", "    const promise = storage.removeStorageFromCa", "ageSync('/data/test_storage4');\n        perf = ", "ageSync('/data/test_storage2');\n        perf = ", " PATH = '/data/test_storage';\nvar mPref;\n\ndescr", "'afterAll')\n        storage.deleteStorageSync(P", "sunit/index'\nimport storage from '@ohos.data.st", "\n        let perf = storage.getStorageSync('/da", "Storage('/data/test_storage4');\n        promise", "r mPref;\n\ndescribe('storageTest', function () {", ") {\n        mPref = storage.getStorageSync(PATH", " PATH = '/data/test_storage';\nconst KEY_TEST_IN", "cheSync('/data/test_storage1');\n        } catch", "omCache('/data/test_storage2');\n        promise", "ageSync('/data/test_storage3');\n        } catch", "    const promise = storage.deleteStorage('/dat", "ageSync('/data/test_storage1');\n        perf.pu", "  try {\n            storage.removeStorageFromCa", "    const promise = storage.getStorage(PATH);\n ", "l')\n        mPref = storage.getStorageSync(PATH", "ge from '@ohos.data.storage'\n\nconst PATH = '/da", "ageSync('/data/test_storage3');\n        try {\n "], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageHelperJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "getStorageSync", "api_method_all": "function getStorageSync(path: string): Storage;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 6, "api_used": "\u662f", "lines": ["    mPref = storage.getStorageSync(PATH);\n    })\n\n    ", " let perf = storage.getStorageSync('/data/test_storage", "    mPref = storage.getStorageSync(PATH);\n        mPre"], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageHelperJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "getStorage", "api_method_all": "function getStorage(path: string, callback: AsyncCallback<Storage>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 9, "since": 6, "api_used": "\u662f", "lines": [" let perf = storage.getStorageSync('/data/test_storage2');\n        per", " let perf = storage.getStorageSync('/data/test_storage1');\n        per", " let perf = storage.getStorageSync('/data/test_storage3');\n        try", "    mPref = storage.getStorageSync(PATH);\n    })\n\n    afterAll(functio", "    mPref = storage.getStorageSync(PATH);\n        mPref.putSync('test'", " let perf = storage.getStorageSync('/data/test_storage4');\n        per"], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageHelperJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "getStorage", "api_method_all": "function getStorage(path: string): Promise<Storage>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["t promise = storage.getStorage(PATH);\n        promise.then((pref) => {"], "files": ["StorageHelperJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "deleteStorageSync", "api_method_all": "function deleteStorageSync(path: string): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["l')\n        storage.deleteStorageSync(PATH);\n    })\n\n    ", "            storage.deleteStorageSync('/data/test_storage"], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageHelperJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "deleteStorage", "api_method_all": "function deleteStorage(path: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": ["l')\n        storage.deleteStorageSync(PATH);\n    })\n\n    it('testClear001", "            storage.deleteStorageSync('/data/test_storage3');\n        } c", "l')\n        storage.deleteStorageSync(PATH);\n    })\n\n    \n    it('testCle", "t promise = storage.deleteStorage('/data/test_storage4');\n        promise", "l')\n        storage.deleteStorageSync(PATH);\n    })\n\n    \n    it('testGet"], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageHelperJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "deleteStorage", "api_method_all": "function deleteStorage(path: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "removeStorageFromCacheSync", "api_method_all": "function removeStorageFromCacheSync(path: string): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["            storage.removeStorageFromCacheSync('/data/test_storage"], "files": ["StorageHelperJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "removeStorageFromCache", "api_method_all": "function removeStorageFromCache(path: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": ["            storage.removeStorageFromCacheSync('/data/test_storage1');\n        } c", "t promise = storage.removeStorageFromCache('/data/test_storage2');\n        promise"], "files": ["StorageHelperJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "removeStorageFromCache", "api_method_all": "function removeStorageFromCache(path: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "MAX_KEY_LENGTH", "api_method_all": "const MAX_KEY_LENGTH: 80", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["= factory.Constants.MAX_KEY_LENGTH;\n        console.in", "= factory.Constants.MAX_KEY_LENGTH_DEVICE;\n        con"], "files": ["SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "storage", "api_method_name": "MAX_VALUE_LENGTH", "api_method_all": "const MAX_VALUE_LENGTH: 8192", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["  factory.Constants.MAX_VALUE_LENGTH = 123;\n        } ca", "t(factory.Constants.MAX_VALUE_LENGTH).assertEqual(419430", "an NOT set value to MAX_VALUE_LENGTH : ' + e);\n         ", "= factory.Constants.MAX_VALUE_LENGTH;\n        console.in"], "files": ["SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_all": "interface Storage {\n        \n        getSync(key: string, defValue: ValueType): ValueType;\n        get(key: string, defValue: ValueType, callback: AsyncCallback<ValueType>): void;\n        get(key: string, defValue: ValueType): Promise<ValueType>;\n\n        \n        hasSync(key: string): boolean;\n        has(key: string, callback: AsyncCallback<boolean>): boolean;\n        has(key: string): Promise<boolean>;\n\n        \n        putSync(key: string, value: ValueType): void;\n        put(key: string, value: ValueType, callback: AsyncCallback<void>): void;\n        put(key: string, value: ValueType): Promise<void>;\n\n        \n        deleteSync(key: string): void;\n        delete(key: string, callback: AsyncCallback<void>): void;\n        delete(key: string): Promise<void>;\n\n        \n        clearSync(): void;\n        clear(callback: AsyncCallback<void>): void;\n        clear(): Promise<void>;\n\n        \n        flushSync(): void;\n        flush(callback: AsyncCallback<void>): void;\n        flush(): Promise<void>;\n\n        \n        on(type: 'change', callback: Callback<StorageObserver>): void;\n\n        \n        off(type: 'change', callback: Callback<StorageObserver>): void;\n    }", "api_method_name": "Storage", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 31, "since": 6, "api_used": "\u662f", "lines": ["", "ise = storage.deleteStorage('/data/test_storage", "est.js')\nrequire('./StorageCallBackJsunit.test.", "      storage.deleteStorageSync(PATH);\n    })\n\n", "taFWK_JSPreferences_Storage_0140\n     * @tc.des", "est.js')\nrequire('./StorageSyncJsunit.test.js')", " \n    it('testRemoveStorageFromCache001', 0, fu", "ise = storage.removeStorageFromCache('/data/tes", "taFWK_JSPreferences_Storage_0150\n     * @tc.des", "t perf = storage.getStorageSync('/data/test_sto", "est.js')\nrequire('./StoragePromiseJsunit.test.j", "    \n    it('testGetStorageHelper001', 0, funct", " \n    it('testRemoveStorageFromCache002', 0, as", " mPref = storage.getStorageSync(PATH);\n    })\n\n", " \n    it('testDeleteStorageHelper001', 0, funct", "      storage.deleteStorageSync('/data/test_sto", "    \n    it('testGetStorageHelper002', 0, async", "taFWK_JSPreferences_Storage_0130\n     * @tc.des", " mPref = storage.getStorageSync(PATH);\n        ", " \n    it('testDeleteStorageHelper002', 0, async", "      storage.removeStorageFromCacheSync('/data", "romise = storage.getStorage(PATH);\n        prom"], "files": ["List.test.js", "StorageSyncJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageHelperJsunit.test.js", "StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "getSync", "api_method_all": "getSync(key: string, defValue: ValueType): ValueType;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 6, "api_used": "\u662f", "lines": [").assertEqual(mPref.getSync(KEY_TEST_FLOAT_ELEM", ").assertEqual(mPref.getSync(KEY_TEST_LONG_ELEME", "  assertEqual(mPref.getSync(KEY_TEST_STRING_ELE", "  var value = mPref.getSync('test', 0);\n       ", ").assertEqual(mPref.getSync(KEY_TEST_INT_ELEMEN", ").assertEqual(mPref.getSync(KEY_TEST_STRING_ELE", ").assertEqual(mPref.getSync(KEY_TEST_BOOLEAN_EL"], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageHelperJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "get", "api_method_all": "get(key: string, defValue: ValueType, callback: AsyncCallback<ValueType>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 1110, "since": 6, "api_used": "\u662f", "lines": ["onfigService = core.getDefaultService('config')\n        configS", "console.log(TAG + \":getFileType_callback_0052 start\");\n        ", "nst age = resultSet.getLong(resultSet.getColumnIndex(\"age\"))\n  ", ".assertEqual(result.getLong(0));\n            expect(true).asser", ".assertEqual(result.getLong(0));\n            result = null\n    ", "  const core = Core.getInstance()\n        const expectExtend = ", " salary = resultSet.getDouble(resultSet.getColumnIndex(\"salary\"", "console.log(TAG + \":getType_promise_0041 start\");\n        try {", "\n            helper.getType(\n                URI\n              ", " injectRef = Object.getPrototypeOf(global) || global\ninjectRef.", "   })\n\n    \n    it('getType_callback_0040', 0, async function (", "t.getLong(resultSet.getColumnIndex(\"id\"))\n            const nam", "t.getLong(resultSet.getColumnIndex(\"age\"))\n            const sa", "     \"image\n    it('getFileType_promise_0051', 0, async functio", "getDouble(resultSet.getColumnIndex(\"salary\"))\n            const", "console.log(TAG + \":getFileType_callback_0050 start\");\n        ", "ore = await dataRdb.getRdbStore(config, 1);\n            console", "e = await resultSet.getLong(resultSet.getColumnIndex(\"age\"))\n\n ", "ore = await dataRdb.getRdbStore(STORE_CONFIG, 1);\n        await", "d = await resultSet.getLong(resultSet.getColumnIndex(\"id\"))\n   ", "console.log(TAG + \":getType_callback_0040 start\");\n        try ", "e = await resultSet.getString(resultSet.getColumnIndex(\"name\"))", "t.getLong(resultSet.getColumnIndex(\"id\"))\n                const", "\n            helper.getType(\n                URI,\n             ", "console.log(TAG + \":getType_callback_0040 end\");\n    })\n\n    \n ", "===================>getTypeCallback=======================>\");\n", "console.log(TAG + \":getType_promise_0041 end\");\n    })\n\n    \n  ", ".assertEqual(result.getLong(0));\n        }\n        done();\n    ", "onst id = resultSet.getLong(resultSet.getColumnIndex(\"id\"))\n   ", "console.log(TAG + \":getFileType_promise_0051 start\");\n        t", ".assertEqual(result.getLong(0))\n        }\n        done();\n     ", "     \"image\n    it('getFileType_callback_0052', 0, async functi", "getString(resultSet.getColumnIndex(\"name\"))\n            const a", "lobType = resultSet.getBlob(resultSet.getColumnIndex(\"blobType\"", "e.log(TAG + \"result get value failed\")\n                expect(n", ".assertEqual(result.getLong(0))\n            result = null\n     ", "   })\n\n    \n    it('getType_promise_0041', 0, async function (d", "t.getLong(resultSet.getColumnIndex(\"age\"))\n\n                awa", "st name = resultSet.getString(resultSet.getColumnIndex(\"name\"))", "\n            helper.getFileTypes(\n                URI,\n        ", "getString(resultSet.getColumnIndex(\"name\"))\n                con", "\n            helper.getFileTypes(\n                null,\n       ", "   })\n\n    \n    it('getFileType_callback_0050', 0, async functi"], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "get", "api_method_all": "get(key: string, defValue: ValueType): Promise<ValueType>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 85, "since": 6, "api_used": "\u662f", "lines": ["    await kvManager.getKVStore(TEST_STORE_ID, options).then((st", "      await kvStore.getResultSet('batch_test_string_key').then(", "      await kvStore.getResultSet(localDeviceId, query).then((re", "      await kvStore.getResultSet('test_key_string', 123).then((", "      await kvStore.getResultSet().then((result) => {\n         ", "      await kvStore.getResultSize(localDeviceId, query).then((r", "t promise = storage.getStorage(PATH);\n        promise.then((pre", "    await kvManager.getAllKVStoreId(TEST_BUNDLE_NAME).then((dat", "    await kvManager.getKVStore(TEST_STORE_ID).then((store) => {", "       kvStore.put(\"getDeviceId\", \"byPut\").then((data) => {\n   ", "      await kvStore.getEntries(query).then((entries) => {\n     ", "      await kvStore.getEntries(query).then((entrys) => {\n      ", "    await kvManager.getKVStore(options).then((store) => {\n     ", "  });\n        await getDeviceId.then(function(deviceId) {\n     ", "    await kvManager.getKVStore(TEST_STORE_ID, options).then(asy", "      await kvStore.getResultSet(query).then((result) => {\n    ", "      await kvStore.getResultSize(query).then((resultSize) => {", "      await kvStore.getEntries(localDeviceId, query).then((entr", "    await kvManager.getAllKVStoreId(TEST_BUNDLE_NAME).then(asyn", "    await kvManager.getKVStore(TEST_STORE_ID, optionsInfo).then", "      await kvStore.getResultSet('test').then((result) => {\n   "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "hasSync", "api_method_all": "hasSync(key: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": [").assertEqual(mPref.hasSync(KEY_TEST_INT_ELEMEN", ").assertEqual(mPref.hasSync(KEY_TEST_BOOLEAN_EL", ").assertEqual(mPref.hasSync(KEY_TEST_FLOAT_ELEM", ").assertEqual(mPref.hasSync(KEY_TEST_LONG_ELEME", ").assertEqual(mPref.hasSync(KEY_TEST_STRING_ELE"], "files": ["StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "has", "api_method_all": "has(key: string, callback: AsyncCallback<boolean>): boolean;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 16, "since": 6, "api_used": "\u662f", "lines": ["nst promise = mPref.has(KEY_TEST_STRING_ELEMENT);\n        promi", "        await mPref.has(KEY_TEST_INT_ELEMENT, function (err, re", "        await mPref.has(KEY_TEST_STRING_ELEMENT, function (err,", "nst promise = mPref.has(KEY_TEST_LONG_ELEMENT);\n        promise", ").assertEqual(mPref.hasSync(KEY_TEST_BOOLEAN_ELEMENT));\n    })\n", "        await mPref.has(KEY_TEST_BOOLEAN_ELEMENT, function (err", "        await mPref.has(KEY_TEST_FLOAT_ELEMENT, function (err, ", ").assertEqual(mPref.hasSync(KEY_TEST_INT_ELEMENT));\n    })\n\n   ", "        await mPref.has(KEY_TEST_LONG_ELEMENT, function (err, r", "nst promise = mPref.has(KEY_TEST_FLOAT_ELEMENT);\n        promis", ").assertEqual(mPref.hasSync(KEY_TEST_STRING_ELEMENT));\n    })\n\n", "nst promise = mPref.has(KEY_TEST_BOOLEAN_ELEMENT);\n        prom", ").assertEqual(mPref.hasSync(KEY_TEST_LONG_ELEMENT));\n    })\n\n  ", "nst promise = mPref.has(KEY_TEST_INT_ELEMENT);\n        promise.", ").assertEqual(mPref.hasSync(KEY_TEST_FLOAT_ELEMENT));\n    })\n\n "], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "has", "api_method_all": "has(key: string): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "putSync", "api_method_all": "putSync(key: string, value: ValueType): void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 52, "since": 6, "api_used": "\u662f", "lines": ["ge1');\n        perf.putSync('test', 2);\n       ", " () {\n        mPref.putSync(KEY_TEST_BOOLEAN_EL", "nc();\n        mPref.putSync(KEY_TEST_LONG_ELEME", "nc();\n        mPref.putSync(KEY_TEST_INT_ELEMEN", "ver);\n        mPref.putSync(KEY_TEST_STRING_ELE", " () {\n        mPref.putSync(KEY_TEST_INT_ELEMEN", " () {\n        mPref.putSync(KEY_TEST_FLOAT_ELEM", " () {\n        mPref.putSync(KEY_TEST_LONG_ELEME", "nc();\n        mPref.putSync(KEY_TEST_STRING_ELE", "ne) {\n        mPref.putSync(KEY_TEST_INT_ELEMEN", "nc();\n        mPref.putSync(KEY_TEST_FLOAT_ELEM", "bc\");\n        mPref.putSync(KEY_TEST_STRING_ELE", "ne) {\n        mPref.putSync(KEY_TEST_STRING_ELE", " () {\n        mPref.putSync(KEY_TEST_STRING_ELE", "ne) {\n        mPref.putSync(KEY_TEST_FLOAT_ELEM", "ATH);\n        mPref.putSync('test', 2);\n       ", "ne) {\n        mPref.putSync(KEY_TEST_LONG_ELEME", "ne) {\n        mPref.putSync(KEY_TEST_BOOLEAN_EL", " {\n            pref.putSync('test', 2);\n       ", "st\");\n        mPref.putSync(KEY_TEST_INT_ELEMEN", " {\n            perf.putSync(\"int\", 3);\n        ", "nc();\n        mPref.putSync(KEY_TEST_BOOLEAN_EL"], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageHelperJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "put", "api_method_all": "put(key: string, value: ValueType, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 578, "since": 6, "api_used": "\u662f", "lines": ["nst promise = mPref.put(KEY_TEST_BOOLEAN_ELEMENT, true);\n      ", "nst promise = mPref.put(KEY_TEST_FLOAT_ELEMENT, 4.0);\n        p", "        await mPref.put(KEY_TEST_BOOLEAN_ELEMENT, true, functio", "ne) {\n        mPref.putSync(KEY_TEST_FLOAT_ELEMENT, 1.1);\n     ", "        await mPref.put(KEY_TEST_STRING_ELEMENT, '', function (", " {\n            pref.putSync('test', 2);\n            pref.flushS", "        await mPref.put(KEY_TEST_FLOAT_ELEMENT, 4.0, function (", "nst promise = mPref.put(KEY_TEST_STRING_ELEMENT, '');\n        p", "/**\n     * @tc.name put String callback interface test\n     * @", " {\n            perf.putSync(\"int\", 3);\n        } catch (e) {\n  ", "nc();\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 3);\n        c", "nst promise = mPref.put(KEY_TEST_STRING_ELEMENT, 'test');\n     ", "ne) {\n        mPref.putSync(KEY_TEST_LONG_ELEMENT, 0);\n        ", "nc();\n        mPref.putSync(KEY_TEST_FLOAT_ELEMENT, 3.0);\n     ", "nst promise = mPref.put(KEY_TEST_INT_ELEMENT, 4);\n        promi", "ne) {\n        mPref.putSync(KEY_TEST_STRING_ELEMENT, \"abc\");\n  ", "nc();\n        mPref.putSync(KEY_TEST_LONG_ELEMENT, 4);\n        ", " () {\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 1);\n        e", "st\");\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 3);\n        m", "ne) {\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 1);\n        c", "nst promise = mPref.put(KEY_TEST_LONG_ELEMENT, 4);\n        prom", "nc();\n        mPref.putSync(KEY_TEST_LONG_ELEMENT, 3);\n        ", "        await mPref.put(KEY_TEST_INT_ELEMENT, 4, function (err,", " () {\n        mPref.putSync(KEY_TEST_STRING_ELEMENT, \"test\");\n ", "nc();\n        mPref.putSync(KEY_TEST_STRING_ELEMENT, \"test\");\n ", "        await mPref.put(KEY_TEST_LONG_ELEMENT, 4, function (err", "ne) {\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 1);\n        a", "ATH);\n        mPref.putSync('test', 2);\n        mPref.flushSync", "ne) {\n        mPref.putSync(KEY_TEST_FLOAT_ELEMENT, 2.0);\n     ", "120\n     * @tc.desc put String callback interface test\n     */\n", "nc();\n        mPref.putSync(KEY_TEST_STRING_ELEMENT, \"abc\");\n  ", "/**\n     * @tc.name put String promise interface test\n     * @t", "130\n     * @tc.desc put String promise interface test\n     */\n ", "nc();\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 3);\n        a", "ne) {\n        mPref.putSync(KEY_TEST_BOOLEAN_ELEMENT, false);\n ", "ge1');\n        perf.putSync('test', 2);\n        try {\n         ", "ne) {\n        mPref.putSync(KEY_TEST_STRING_ELEMENT, \"test\");\n "], "files": ["DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "StorageCallBackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "SchemaJsunit.test.js", "KvStoreResultSetJsunit.test.js", "StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "put", "api_method_all": "put(key: string, value: ValueType): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 54, "since": 6, "api_used": "\u662f", "lines": ["      await kvStore.put(KEY_TEST_STRING_ELEMENT, '').then((data", "      await kvStore.put(KEY_TEST_STRING_ELEMENT, str).then(asyn", "            kvStore.put(\"getDeviceId\", \"byPut\").then((data) => ", "      await kvStore.put(KEY_TEST_INT_ELEMENT, intValue).then(as", "            kvStore.putBatch(entries).then((data) => {\n        ", "      await kvStore.put(KEY_TEST_STRING_ELEMENT, null).then((da", "      await kvStore.putBatch(entries).then(async (err) => {\n   "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "deleteSync", "api_method_all": "deleteSync(key: string): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 3, "since": 6, "api_used": "\u662f", "lines": ["/**\n     * @tc.name deleteSync promise interface t", "140\n     * @tc.desc deleteSync promise interface t", ";\n            mPref.deleteSync(KEY_TEST_STRING_ELE"], "files": ["StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "delete", "api_method_all": "delete(key: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 224, "since": 6, "api_used": "\u662f", "lines": [" console.log(TAG + 'delete done: ' + ret)\n                expect(n", "console.log(TAG + \":delete_callback_0113 end\");\n    })\n\n    /**\n  ", "est\n     */\n    it('delete_callback_0112', 0, async function (done", "console.log(TAG + \":delete_callback_0113 start\");\n        try {\n  ", "'')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "@tc.name data share delete_callback test\n     * @tc.number SUB_DDM", "console.log(TAG + \":delete_callback_0110 start\");\n        try {\n  ", "t')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "console.log(TAG + \":delete_promise_0111 end\");\n    })\n\n    /**\n   ", "UB_DDM_DataShare_JS_delete_callback_0110\n     * @tc.desc data shar", "UB_DDM_DataShare_JS_delete_promise_0111\n     * @tc.desc data share", "est\n     */\n    it('delete_promise_0111', 0, async function (done)", "console.log(TAG + \":delete_callback_0112 start\");\n        try {\n  ", "console.log(TAG + \":delete_promise_0111 start\");\n        try {\n   ", "\n            helper.delete(\n                null,\n                ", "@tc.desc data share delete_callback test\n     */\n    it('delete_ca", "ePromise = rdbStore.delete(predicates)\n            deletePromise.t", " console.log(TAG + 'delete with wrong conditions')\n            })\n", "      await dataRdb.deleteRdbStore(\"Predicates.db\");\n    })\n\n    f", "@tc.name data share delete_promise test\n     * @tc.number SUB_DDM_", "i')\n            let deletePromise = rdbStore.delete(predicates)\n  ", ")\n            await deletePromise\n        }\n        //\u5220\u9664\u540e\u67e5\u8be2\n      ", "UB_DDM_DataShare_JS_delete_callback_0112\n     * @tc.desc data shar", "console.log(TAG + \":delete_callback_0110 end\");\n    })\n\n    /**\n  ", "UB_DDM_DataShare_JS_delete_callback_0113\n     * @tc.desc data shar", "===================>deleteCallback=======================>\");\n    ", "      await dataRdb.deleteRdbStore('Delete.db');\n    })\n\n    after", " 1)\n            let deletePromise = rdbStore.delete(predicates)\n  ", "est\n     */\n    it('delete_callback_0110', 0, async function (done", "\n            helper.delete(\n                URI,\n                d", "@tc.desc data share delete_promise test\n     */\n    it('delete_pro", "est\n     */\n    it('delete_callback_0113', 0, async function (done", ")\n            await deletePromise\n        }\n        done()\n       ", "n')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "28)\n            let deletePromise = rdbStore.delete(predicates)\n  ", "console.log(TAG + \":delete_callback_0112 end\");\n    })\n\n    /**\n  "], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "delete", "api_method_all": "delete(key: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 31, "since": 6, "api_used": "\u662f", "lines": ["      await kvStore.deleteBatch(keys).then((err) => {\n            ", "      await kvStore.delete(KEY_TEST_FLOAT_ELEMENT).then((data) => ", "icates)\n            deletePromise.then(async (ret) => {\n          ", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME).then(() => {\n ", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME, data[i]).then(", "      await kvStore.delete(KEY_TEST_BOOLEAN_ELEMENT).then((data) =", "      await kvStore.delete(KEY_TEST_INT_ELEMENT).then((data) => {\n", "      await kvStore.delete(KEY_TEST_STRING_ELEMENT).then((data) =>"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "clearSync", "api_method_all": "clearSync(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 34, "since": 6, "api_used": "\u662f", "lines": ["nc();\n        mPref.clearSync();\n        expect(\"", " () {\n        mPref.clearSync();\n        var obse", " () {\n        mPref.clearSync();\n        expect(-", "ne) {\n        mPref.clearSync();\n        mPref.pu", "ne) {\n        mPref.clearSync();\n        const pr", " () {\n        mPref.clearSync();\n        mPref.pu", "ne) {\n        mPref.clearSync();\n        await mP"], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "clear", "api_method_all": "clear(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 35, "since": 6, "api_used": "\u662f", "lines": ["ne) {\n        mPref.clearSync();\n        await mPref.put(KEY_TEST", " () {\n        mPref.clearSync();\n        mPref.putSync(KEY_TEST_L", "        await mPref.clear(function (err, ret) {\n            expec", " () {\n        mPref.clearSync();\n        expect(-1).assertEqual(m", "nc();\n        mPref.clearSync();\n        expect(\"defaultvalue\").a", "ne) {\n        mPref.clearSync();\n        mPref.putSync(KEY_TEST_S", "ne) {\n        mPref.clearSync();\n        const promise = mPref.ge", " () {\n        mPref.clearSync();\n        mPref.putSync(KEY_TEST_F", "ne) {\n        mPref.clearSync();\n        const promise = mPref.pu", " () {\n        mPref.clearSync();\n        mPref.putSync(KEY_TEST_B", " () {\n        mPref.clearSync();\n        mPref.putSync(KEY_TEST_I", " () {\n        mPref.clearSync();\n        mPref.putSync(KEY_TEST_S", "ne) {\n        mPref.clearSync();\n        await mPref.get(KEY_TEST", "ne) {\n        mPref.clearSync();\n        mPref.putSync(KEY_TEST_L", "ne) {\n        mPref.clearSync();\n        mPref.putSync(KEY_TEST_F", " () {\n        mPref.clearSync();\n        var observer = function ", "ne) {\n        mPref.clearSync();\n        mPref.putSync(KEY_TEST_I"], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "clear", "api_method_all": "clear(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["nst promise = mPref.clear();\n        promise.then((ret) => {\n    "], "files": ["StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "flushSync", "api_method_all": "flushSync(): void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 23, "since": 6, "api_used": "\u662f", "lines": ["se));\n        mPref.flushSync();\n        expect(t", " 0));\n        mPref.flushSync();\n        expect(4", "st\");\n        mPref.flushSync();\n        await mP", ", 2);\n        mPref.flushSync();\n        var valu", ";\n            mPref.flushSync();\n            expe", ", 3);\n        mPref.flushSync();\n        mPref.cl", "st\");\n        mPref.flushSync();\n        const pr", ");\n            pref.flushSync();\n            var ", ", 3);\n        mPref.flushSync();\n        expect('", "e\"));\n        mPref.flushSync();\n        expect('", ".0));\n        mPref.flushSync();\n        expect(4"], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageHelperJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "flush", "api_method_all": "flush(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 29, "since": 6, "api_used": "\u662f", "lines": ["se));\n        mPref.flushSync();\n        expect(true).assertEqual", "e\"));\n        mPref.flushSync();\n        expect('').assertEqual(m", ");\n            pref.flushSync();\n            var value = mPref.ge", ", 2);\n        mPref.flushSync();\n        var value = mPref.getSyn", "/**\n     * @tc.name flush callback interface test\n     * @tc.numb", ";\n            mPref.flushSync();\n            expect(true).assertE", ";\n            mPref.flushSync();\n            expect('').assertEqu", ";\n            mPref.flush();\n            expect('test').assertEqu", "st\");\n        mPref.flushSync();\n        const promise = mPref.cl", "st\");\n        mPref.flushSync();\n        await mPref.clear(functi", "st\");\n        mPref.flushSync();\n        await mPref.get(KEY_TEST", "st\");\n        mPref.flushSync();\n        const promise = mPref.ge", ";\n            mPref.flushSync();\n            expect(4).assertEqua", "010\n     * @tc.desc flush callback interface test\n     */\n    it(", " 0));\n        mPref.flushSync();\n        expect(4).assertEqual(mP", "/**\n     * @tc.name flush promise interface test\n     * @tc.numbe", ".0));\n        mPref.flushSync();\n        expect(4.0).assertEqual(", ", 3);\n        mPref.flushSync();\n        mPref.clearSync();\n     ", "150\n     * @tc.desc flush promise interface test\n     */\n    it('", "        await mPref.flush(function (err, ret) {\n            expec", ";\n            mPref.flushSync();\n            expect(4.0).assertEq", ", 3);\n        mPref.flushSync();\n        expect('test').assertEqu"], "files": ["StoragePromiseJsunit.test.js", "StorageCallBackJsunit.test.js", "StorageHelperJsunit.test.js", "StorageSyncJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "flush", "api_method_all": "flush(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "on", "api_method_all": "on(type: 'change', callback: Callback<StorageObserver>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 9120, "since": 6, "api_used": "\u662f", "lines": ["ction () {\n        console.info(TAG + 'beforeEach')\n    })\n\n  ", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ",\n                \"longValue\": -9223372036854775808,\n         ", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "('config')\n        configService.setConfig(this)\n\n        requ", "foreAll(async function () {\n        console.info(TAG + 'before", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", ",\n                \"longValue\": 9223372036854775807,\n          ", "ction () {\n        console.info(TAG + 'afterAll')\n        rdbS", "ction () {\n        console.info(TAG + 'beforeAll')\n        rdb", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "      console.info('onShow finish')\n        const core = Core.", "aType1() {\n        console.log(TAG + \"buildAllDataType1 start\"", " }\n\n    async function buildAllDataType3() {\n        console.l", "xport default {\n    onCreate() {\n        console.info('TestApp", ";\n    })\n\n    function resultSize(resultSet) {\n        if (!re", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "RDB_JSKITS _TEST]'\nconst CREATE_TABLE_ALL_DATA_TYPE_SQL = \"CRE", "fterAll(async function () {\n        console.info(TAG + 'afterA", "2, 3])\n            const valueBucket = {\n                \"inte", "w finish')\n        const core = Core.getInstance()\n        con", " }\n\n    async function buildAllDataType1() {\n        console.l", "    afterEach(function () {\n        console.info(TAG + 'afterE", "alue INTEGER , primLongValue INTEGER , \"\n+ \"primShortValue INT", "Create() {\n        console.info('TestApplication onCreate');\n ", "ata.dataAbility';\n\nconst TAG = '[RDB_JSKITS _TEST]'\nconst CREA", "getDefaultService('config')\n        configService.setConfig(th", "      }\n    }\n\n    console.log(TAG + \"*************Unit Test B", "rder` INTEGER);\";\n\nconst STORE_CONFIG = {\n    name: \"Predicate", "onShow() {\n        console.info('onShow finish')\n        const", "aType3() {\n        console.log(TAG + \"buildAllDataType3 start\"", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "   beforeEach(function () {\n        console.info(TAG + 'before", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "dicatesTest', function () {\n    beforeAll(async function () {\n", "ction () {\n        console.info(TAG + 'afterEach')\n    })\n\n   ", "fo('TestApplication onDestroy');\n    }\n};\n", ",\n                \"longValue\": 1,\n                \"shortValue\"", "itle: ''\n    },\n    onInit() {\n        this.title = this.$t('s", "01', 0, async function (done) {\n        console.log(TAG + \"***", "ore.init()\n        const configService = core.getDefaultServic", "gerValue INTEGER , longValue INTEGER , shortValue INTEGER , bo", "aType2() {\n        console.log(TAG + \"buildAllDataType2 start\"", " }\n\n    async function buildAllDataType2() {\n        console.l", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Storage", "api_method_name": "off", "api_method_all": "off(type: 'change', callback: Callback<StorageObserver>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 78, "since": 6, "api_used": "\u662f", "lines": ["IJKLMN\").limitAs(3).offsetAs(1);\n        let result = await rdb", "            kvStore.off('syncComplete');\n        }catch(e) {\n  ", "            kvStore.off('dataChange', func);\n        }catch(e) ", "            kvStore.off('dataChange', func1);\n        }catch(e)", "   })\n\n    \n    it('off_0030', 0, async function (done) {\n     ", "            kvStore.off('syncComplete', func);\n            kvSt", "IJKLMN\").limitAs(3).offsetAs(0);\n        let result = await rdb", "ver);\n        mPref.off('change', observer);\n        mPref.putS", "/**\n     * @tc.name off interface test\n     * @tc.number SUB_DD", "160\n     * @tc.desc off interface test\n     */\n    it('testUnRe", "            kvStore.off('syncComplete', func1);\n            exp", "IJKLMN\").limitAs(3).offsetAs(-1);\n        let result = await rd", "IJKLMN\").limitAs(3).offsetAs(1);\n        let predicates = dataA", "console.log(TAG + \":off_0031 start\");\n        try {\n           ", "            kvStore.off('syncComplete', func);\n            expe", ";\n        kvManager.off('distributedDataServiceDie', deathCallb", "console.log(TAG + \":off_0031 end\");\n    })\n\n    \n    it('getTyp", "\n            helper.off(\n                \"dataChange\",\n        ", "@tc.name predicates offset normal test\n     * @tc.number SUB_DD", "IJKLMN\").limitAs(3).offsetAs(0);\n        let predicates = dataA", "console.log(TAG + \":off_0030 start\");\n        try {\n           ", "console.log(TAG + \":off_0030 end\");\n    })\n\n    \n    it('off_00", ");\n        rdbStore.off(\"dataChange\", (device) => {\n           ", "            kvStore.off('dataChange', func);\n            kvStor", "            kvStore.off('dataChange');\n        }catch(e) {\n    ", "            kvStore.off('syncComplete', func);\n        }catch(e", "IJKLMN\").limitAs(3).offsetAs(5);\n        let predicates = dataA", "@tc.desc predicates offset normal test\n     */\n    it('testOffs", "IJKLMN\").limitAs(3).offsetAs(5);\n        let result = await rdb", "IJKLMN\").limitAs(3).offsetAs(-1);\n        let predicates = data", "   })\n\n    \n    it('off_0031', 0, async function (done) {\n     ", " console.log(TAG + \"off dataChange success\");\n        expect(rd"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "StorageSyncJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "ObjectStoreJsunit.test.js", "KvManagerPromiseJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StorageObserver", "api_method_all": "interface StorageObserver {\n        \n        key: string;\n    }", "api_method_name": "StorageObserver", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "StorageObserver", "api_method_name": "key", "api_method_all": "key: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 586, "since": 6, "api_used": "\u662f", "lines": ["ST_FLOAT_ELEMENT = 'key_test_float';\nconst ", "try = {\n            key : prefix + i,\n     ", "ST_FLOAT_ELEMENT = 'key_test_float_2';\ncons", "_BOOLEAN_ELEMENT = 'key_test_boolean';\ncons", "T_STRING_ELEMENT = 'key_test_string';\n\nvar ", "                    key : key + i,\n        ", "T_STRING_ELEMENT = 'key_test_string_2';\ncon", "EST_SYNC_ELEMENT = 'key_test_sync';\n\nconst ", "TEST_INT_ELEMENT = 'key_test_int';\nconst KE", "T_STRING_ELEMENT = 'key_test_string';\nvar m", "                var key = 'batch_test_strin", "              key : key + i,\n              ", "rObserver001 key' + key);\n            expec", "('abc').assertEqual(key);\n        };\n      ", "ect('').assertEqual(key);\n        };\n      ", " 'batch_test_number_key';\n                v", "_BOOLEAN_ELEMENT = 'key_test_boolean_2';\nco", "EST_LONG_ELEMENT = 'key_test_long';\nconst K", "'abcd').assertEqual(key);\n        };\n      ", "RegisterObserver001 key' + key);\n          ", " 'batch_test_number_key', function (err,ent", " 'batch_test_string_key';\n                v", " 'batch_test_string_key', function (err,ent", "                var key = 'batch_test_numbe", "bserver = function (key) {\n            expe", "TEST_INT_ELEMENT = 'key_test_int_2';\nconst ", "bserver = function (key) {\n            cons"], "files": ["DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "StorageCallBackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvStoreResultSetJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}]}