{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\video", "api": [{"api_class_name": "SeekMode", "api_method_all": "declare enum SeekMode {\n  \n  PreviousKeyframe,\n\n  \n  NextKeyframe,\n\n  \n  ClosestKeyframe,\n\n  \n  Accurate,\n}", "api_method_name": "SeekMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["r.setCurrentTime(9, SeekMode.Accurate);\n        ", "r.setCurrentTime(9, SeekMode.ClosestKeyframe);\n ", "r.setCurrentTime(9, SeekMode.NextKeyframe);\n    ", "r.setCurrentTime(9, SeekMode.PreviousKeyframe);\n"], "files": ["video.ets", "Video.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SeekMode", "api_method_name": "PreviousKeyframe", "api_method_all": "PreviousKeyframe,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["entTime(9, SeekMode.PreviousKeyframe);\n        });\n     "], "files": ["Video.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SeekMode", "api_method_name": "NextKeyframe", "api_method_all": "NextKeyframe,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["entTime(9, SeekMode.NextKeyframe);\n        });\n     "], "files": ["Video.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SeekMode", "api_method_name": "ClosestKeyframe", "api_method_all": "ClosestKeyframe,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["entTime(9, SeekMode.ClosestKeyframe);\n        });\n     "], "files": ["Video.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SeekMode", "api_method_name": "Accurate", "api_method_all": "Accurate,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["entTime(9, SeekMode.Accurate);\n        });\n     "], "files": ["video.ets", "Video.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_all": "declare enum PlaybackSpeed {\n  \n  Speed_Forward_0_75_X,\n\n  \n  Speed_Forward_1_00_X,\n\n  \n  Speed_Forward_1_25_X,\n\n  \n  Speed_Forward_1_75_X,\n\n  \n  Speed_Forward_2_00_X,\n}", "api_method_name": "PlaybackSpeed", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["   \"progressRates\": PlaybackSpeed.Speed_Forward_1_25_", "   \"progressRates\": PlaybackSpeed.Speed_Forward_1_00_", "   \"progressRates\": PlaybackSpeed.Speed_Forward_1_75_", "   \"progressRates\": PlaybackSpeed.Speed_Forward_2_00_", "   \"progressRates\": PlaybackSpeed.Speed_Forward_0_75_"], "files": ["VideoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_name": "Speed_Forward_0_75_X", "api_method_all": "Speed_Forward_0_75_X,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["tes\": PlaybackSpeed.Speed_Forward_0_75_X,\n          }\n      "], "files": ["VideoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_name": "Speed_Forward_1_00_X", "api_method_all": "Speed_Forward_1_00_X,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["tes\": PlaybackSpeed.Speed_Forward_1_00_X,\n          }\n      "], "files": ["VideoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_name": "Speed_Forward_1_25_X", "api_method_all": "Speed_Forward_1_25_X,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["tes\": PlaybackSpeed.Speed_Forward_1_25_X,\n          }\n      "], "files": ["VideoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_name": "Speed_Forward_1_75_X", "api_method_all": "Speed_Forward_1_75_X,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["tes\": PlaybackSpeed.Speed_Forward_1_75_X,\n          }\n      "], "files": ["VideoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PlaybackSpeed", "api_method_name": "Speed_Forward_2_00_X", "api_method_all": "Speed_Forward_2_00_X,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["tes\": PlaybackSpeed.Speed_Forward_2_00_X,\n          }\n      "], "files": ["VideoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOptions", "api_method_all": "declare interface VideoOptions {\n  \n  src?: string | Resource;\n\n  \n  currentProgressRate?: number | string | PlaybackSpeed;\n\n  \n  previewUri?: string | PixelMap | Resource;\n\n  \n  controller?: VideoController;\n}", "api_method_name": "VideoOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOptions", "api_method_name": "src", "api_method_all": "src?: string | Resource", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 90, "since": 7, "api_used": "\u662f", "lines": ["  if(eventData.data.srcValue != null) {\n   ", "mage();\n        img.src = 'common/images/su", " if (eventData.data.srcValue != null) {\n   ", "jpg\"},\n            {src: \"/common/images/im", "      {\n            src: '/comment/bg1.jpg'", "number = 3\n  @State src: string = \"Running ", "ges: [\n            {src: \"/common/images/im", "r sres = obj.$attrs.src.slice(res, res + 16", "      {\n            src: '/comment/bg.jpg',", "      {\n            src: '/comment/bg2.jpg'", "ew Image();\n    img.src = \"/images/bg.jpg\";", "{\n        src: this.srcs,\n        previewUr", ",\n        src: this.src\n      })\n        .f", "omponent {\n  @State srcs: string = \"/images", "  expect(obj.$attrs.src.slice(res, res + 16", "    Video({\n        src: this.srcs,\n       ", "omponent {\n  @State srcs: string = '/resour", ",\n        src: this.src\n      })\n        .k", "ar res = obj.$attrs.src.indexOf('rawfile/te", "     }\n\n      Web({ src: $rawfile('indextes", " is: \" + obj.$attrs.src);\n      console.inf", "ample.com'\n  @State src: string = this.on\n ", "est_0200 obj.$attrs.src is: \" + obj.$attrs.", "      {\n            src: '/comment/bg3.jpg'", ".fromStart,\n        src: this.src\n      })\n", "mage();\n        img.src = 'common/images/im", "ull) {\n        this.srcValue = eventData.da", "ue = eventData.data.srcValue;\n      }\n    }", "      {\n            src: '/comment/bg4.jpg'"], "files": ["backgroundAndSizeSetting.ets", "imageFit.ets", "ImageJsunit.test.ets", "Video.ets", "videoProps.test.js", "global.ets", "TextJsunit.test.ets", "video.ets", "WebPage.ets", "marquee.ets", "imageProps.test.js", "animationStatus.ets", "background.ets", "imageAnimator.ets", "index.js", "fillMode.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOptions", "api_method_name": "currentProgressRate", "api_method_all": "currentProgressRate?: number | string | PlaybackSpeed", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["tProgressRate: this.currentProgressRates,\n        controlle", "img.jpeg\";\n  @State currentProgressRates: number = 1;\n  @St", "reviewUris,\n        currentProgressRate: this.currentProgre", "gressRates \" + this.currentProgressRates)\n      }\n      if ", "ull) {\n        this.currentProgressRates = eventData.data.p", "dark.jpg';\n  @State currentProgressRates: number = 1;\n  @St", "      console.info(\"currentProgressRates \" + this.currentPr"], "files": ["video.ets", "Video.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOptions", "api_method_name": "previewUri", "api_method_all": "previewUri?: string | PixelMap | Resource", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["iler.mp4\";\n  @State previewUris: string = \"/images", " this.srcs,\n        previewUri: this.previewUri,\n ", "   previewUri: this.previewUri,\n        controller", "show.mp4';\n  @State previewUri: string = '/resourc", "   previewUri: this.previewUris,\n        currentPr", " this.srcs,\n        previewUri: this.previewUris,\n"], "files": ["video.ets", "Video.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOptions", "api_method_name": "controller", "api_method_all": "controller?: VideoController", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 50, "since": 7, "api_used": "\u662f", "lines": [" {\n            this.controller.stop()\n          })", " {\n            this.controller.onInactive()\n      ", " {\n            this.controller.loadData({\n        ", "s.accessStep = this.controller.accessStep(1)\n     ", ".nextMonth,\n        controller: this.Controller\n  ", "t getHitTest = this.controller.getHitTest()\n      ", "string= ''\n  @State controller: SearchController= ", " {\n            this.controller.registerJavaScriptP", "cessBackward = this.controller.accessBackward()\n  ", "', controller: this.controller })\n        .searchB", " {\n            this.controller.forward()\n         ", "on.Start, index: 1, controller: this.controller })", " {\n            this.controller.runJavaScript({\n   ", " {\n            this.controller.requestFocus()\n    ", " {\n            this.controller.clearHistory()\n    ", ")=>{\n          this.controller.stop()\n          th", "tion.End, index: 1, controller: this.controller })", "gressRates,\n        controller: this.myVideoContro", " {\n            this.controller.refresh()\n         ", " {\n            this.controller.onActive()\n        ", " {\n            this.controller.close()\n           ", "{\n      TextTimer({ controller: this.myTimerContro", "8, controller: this.controller})\n        .key('tex", "ccessForward = this.controller.accessForward()\n   ", "r: 'input content', controller: this.controller })", " {\n            this.controller.deleteJavaScriptReg", "1, controller: this.controller }) {\n        TabCon", "previewUri,\n        controller: this.myVideoContro", "tTestType.Unknown\n  controller: WebController = ne", "timeZoneOffset: -8, controller: this.controller})\n", ", libraryname: '3', controller: this.xComponentCon", "omDialogExample {\n  controller: CustomDialogContro", "Example {\n  private controller: TabsController = n", " boolean = false;\n  controller: TextClockControlle", " {\n            this.controller.loadUrl({\n         ", " {\n            this.controller.backward()\n        ", "=> {\n          this.controller.caretPosition(4)\n  ", "n = false\n  private controller: TabsController = n", ": this.barPosition, controller: this.controller, i", "('indextest.html'), controller: this.controller })", "), controller: this.controller })\n        .domStor", "n, controller: this.controller, index: this.index ", "=> {\n          this.controller.changeIndex(0)\n    ", "rl);\n          this.controller.runJavaScript('test", ")=>{\n          this.controller.start()\n        })\n"], "files": ["textClock.ets", "tabs.ets", "Video.ets", "WebPage.ets", "video.ets", "Tab.ets", "textInput.ets", "textTimer.ets", "Calendar.ets", "XComponentPage.ets", "search.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoController", "api_method_all": "declare class VideoController {\n  \n  constructor();\n\n  \n  start();\n\n  \n  pause();\n\n  \n  stop();\n\n  \n  setCurrentTime(value: number);\n\n  \n  requestFullscreen(value: boolean);\n\n  \n  exitFullscreen();\n\n  \n  setCurrentTime(value: number, seekMode: SeekMode);\n}", "api_method_name": "VideoController", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": [" myVideoController: VideoController = new VideoControll", " {\n          this.myVideoController.pause();\n        })", "l) {\n        this.myVideoController.stop();\n      }\n   ", "l) {\n        this.myVideoController.start();\n      }\n  ", " controller: this.myVideoController\n      })\n\n        .", " controller: this.myVideoController\n      })\n        .k", "deoController = new VideoController();\n  @State startSt", " {\n          this.myVideoController.start();\n        })", " {\n          this.myVideoController.stop();\n        });", "boolean = true;\n  myVideoController: VideoController = ", " {\n          this.myVideoController.setCurrentTime(9, S", " {\n          this.myVideoController.setCurrentTime(9);\n"], "files": ["video.ets", "Video.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoController", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoController", "api_method_name": "start", "api_method_all": "start();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 804, "since": 7, "api_used": "\u662f", "lines": ["geValue}`)\n        .startAngle(`${this.startA", "in = eventData.data.startMargin;\n      }\n    ", " = \"Running Marquee starts rolling\"\n  @State ", "fo(\"[testEllipse02] start to publish emit\");\n", "fo(\"[testEllipse06] start to publish emit\");\n", "    console.info(\"Onstart emit action state e", "(\"enable beforeEach start\");\n      let option", "    console.info('Onstart current action stat", "ue = eventData.data.startAngleValue;\n      }\n", "nsole.info(\"button1 start to emit action stat", "is.color,\n          startMargin: this.startMa", "  startMargin: this.startMargin,\n          en", "(\"column beforeEach start\");\n      let option", "nfo(\"[testEnable03] start to publish emit\");\n", "   })\n      Button('start')\n        .key('but", "fo(\"[testEllipse03] start to publish emit\");\n", "ull) {\n        this.startMargin = eventData.d", "eExample {\n  @State start: boolean = false\n  ", "{\n    console.info(\"start run testcase!!!!\")\n", "sole.info(\"Onbounce start to emit action stat", "ull) {\n        this.startAngleValue = eventDa", "\"ellipse beforeEach start\");\n      let option", "nsole.info(\"onClick start to emit action stat", " if (eventData.data.startMargin != null) {\n  ", "fo(\"[testEllipse04] start to publish emit\");\n", "(\"appear beforeEach start\");\n      let option", "info(\"disAppearFlag start to emit action stat", "sole.info(\"onChange start to emit action stat", "      console.info(\"start to emit action stat", " if (eventData.data.startAngleValue != null) ", "ole.info(\"touchFlag start to emit action stat", ".startAngle(`${this.startAngleValue}`)\n      ", "      \"start\": this.start,\n              }\n  ", "  Marquee({\n        start: this.start,\n      ", "le.info(\"appearFlag start to emit action stat", "=> {\n          this.start = true\n          tr", "nsole.info(\"Onstart start to emit action stat", " {\n                \"start\": this.start,\n     ", "fo(\"[testEllipse07] start to publish emit\");\n", "    console.info(\"Onstart start to emit actio", "        start: this.start,\n        step: this", "fo(\"[testEllipse05] start to publish emit\");\n", "sole.info(\"Onfinish start to emit action stat", ".info(\"onAreaChange start to emit action stat", "nfo(\"[testColumn02] start to publish emit\");\n", "ring = 20;\n  @State startAngleValue: string =", " 0xFFFFFF;\n  @State startMargin: number = 20.", "nfo(\"[testEnable02] start to publish emit\");\n", "e.info(\"[TouchAble] start to emit action stat", "nsole.info(\"button2 start to emit action stat"], "files": ["ImageJsunit.test.ets", "configuration.ets", "ImageEffectsJsunit.test.ets", "video.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "sourceType.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "TextStyleJsunit.test.ets", "geometryTransition.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "mediaquery.test.js", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "ResponseRegion.ets", "basicabilityapi.test.js", "RichTextJsunit.test.ets", "CalendarJsunit.test.ets", "transition.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "CurvesJsunit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "VideoJsunit.test.ets", "touch.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "SourceTypeJsunit.test.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "gauge.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "Scroll.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "SearchJsunit.test.ets", "VisibilityJsunit.test.ets", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "Canvas2Jsunit.test.ets", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "Utils.ets", "ShapeJsunit.test.ets", "PieceCode.ets", "GlobalJsunit.test.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "textClock.ets", "tabs.ets", "BindMenuJsunit.test.ets", "videoProps.test.js", "list.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "DatePickerJsunit.test.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "Video.ets", "TextAreaJsunit.test.ets", "textareaProps.test.js", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "BorderJsunit.test.ets", "direction2.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "canvas.ets", "AboutToDisappearJsunit.test.ets", "CircleJsunit.test.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "line.ets", "TransFormJsunit.test.ets", "touchAble.ets", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "datePicker.ets", "pageTransition.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "TabsJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "areaChange.ets", "BindPopupJsunit.test.ets", "timeStamp.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoController", "api_method_name": "pause", "api_method_all": "pause();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 56, "since": 7, "api_used": "\u662f", "lines": ["s.myVideoController.pause();\n        });\n    ", "s.myTimerController.pause();\n        });\n    ", "     this.animation.pause();\n          });\n  ", "          animation.pause()\n        }, 1000)\n", "     });\n    },\n    pause(){\n\n        prompt.", "{\n          Button('pause').borderRadius(8).b", "})\n\n        Button('pause').key('button2').wi", "> {\n      animation.pause()\n    }, 1000)\n\n   ", " })\n        Button('pause').key('button1').wi", "this.$refs.animator.pause();\n    },\n    handl", "});\n        Button(\"pause\").onClick(() => {\n "], "files": ["Video.ets", "video.ets", "textTimer.ets", "animationStatus.ets", "imageAnimator.ets", "animatorOption.ets", "index.js", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoController", "api_method_name": "stop", "api_method_all": "stop();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["          message: 'stop'\n        });\n    },", "})\n\n        Button('stop').key('button3').wi", "nt('customMarquee').stop();\n        prompt.s", "});\n        Button(\"stop\").onClick(() => {\n ", "    this.controller.stop()\n          this.on", ";\n        function9.stop();\n        prompt.s", "      console.info('stopPropagation')\n      ", "s.myVideoController.stop();\n        });\n    ", "s.myVideoController.stop();\n      }\n    }\n  ", "    this.controller.stop()\n          })\n    ", "this.$refs.animator.stop();\n    },\n//\n    fo", "e: 'function9 video stop.'\n        })\n    },", " })\n        Button('stop').key('button2').wi", "   })\n      Button(\"stop TextClock\")\n       ", "nY + ')')\n          stopPropagation: () => {", "     });\n    },\n    stop(){\n        prompt.s", "     });\n    },\n    stop() {\n        prompt.", "        }\n          stopPropagation: () => {"], "files": ["textClock.ets", "touch.ets", "WebPage.ets", "video.ets", "mouseEvent.ets", "animationStatus.ets", "imageAnimator.ets", "index.js", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoController", "api_method_name": "setCurrentTime", "api_method_all": "setCurrentTime(value: number);", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["s.myVideoController.setCurrentTime(9, SeekMode.Closest", "});\n        Button(\"setCurrentTime\").onClick(() => {\n ", ";\n        function6.setCurrentTime({\n            curre", "s.myVideoController.setCurrentTime(9, SeekMode.Previou", ") {\n        Button(\"setCurrentTime\").onClick(() => {\n ", "e: 'function6 video setCurrentTime.'\n        })\n    },", "s.myVideoController.setCurrentTime(9, SeekMode.Accurat", "s.myVideoController.setCurrentTime(9);\n        });\n   ", "s.myVideoController.setCurrentTime(9, SeekMode.NextKey"], "files": ["video.ets", "Video.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoController", "api_method_name": "requestFullscreen", "api_method_all": "requestFullscreen(value: boolean);", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [";\n        function7.requestFullscreen({\n            scree", "e: 'function7 video requestFullscreen.'\n        })\n\n    }"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoController", "api_method_name": "exitFullscreen", "api_method_all": "exitFullscreen();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["e: 'function8 video exitFullscreen.'\n        })\n    },", ";\n        function8.exitFullscreen();\n        prompt.s"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoController", "api_method_name": "setCurrentTime", "api_method_all": "setCurrentTime(value: number, seekMode: SeekMode);", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["s.myVideoController.setCurrentTime(9, SeekMode.Closest", "});\n        Button(\"setCurrentTime\").onClick(() => {\n ", ";\n        function6.setCurrentTime({\n            curre", "s.myVideoController.setCurrentTime(9, SeekMode.Previou", ") {\n        Button(\"setCurrentTime\").onClick(() => {\n ", "e: 'function6 video setCurrentTime.'\n        })\n    },", "s.myVideoController.setCurrentTime(9, SeekMode.Accurat", "s.myVideoController.setCurrentTime(9);\n        });\n   ", "s.myVideoController.setCurrentTime(9, SeekMode.NextKey"], "files": ["video.ets", "Video.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoInterface", "api_method_all": "interface VideoInterface {\n  \n  (value: VideoOptions): VideoAttribute;\n}", "api_method_name": "VideoInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoInterface", "api_method_name": "value", "api_method_all": "(value: VideoOptions): VideoAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_all": "declare class VideoAttribute extends CommonMethod<VideoAttribute> {\n  \n  muted(value: boolean): VideoAttribute;\n\n  \n  autoPlay(value: boolean): VideoAttribute;\n\n  \n  controls(value: boolean): VideoAttribute;\n\n  \n  loop(value: boolean): VideoAttribute;\n\n  \n  objectFit(value: ImageFit): VideoAttribute;\n\n  \n  onStart(event: () => void): VideoAttribute;\n\n  \n  onPause(event: () => void): VideoAttribute;\n\n  \n  onFinish(event: () => void): VideoAttribute;\n\n  \n  onFullscreenChange(callback: (event?: { fullscreen: boolean }) => void): VideoAttribute;\n  \n  onPrepared(callback: (event?: { duration: number }) => void): VideoAttribute;\n\n  \n  onSeeking(callback: (event?: { time: number }) => void): VideoAttribute;\n\n  \n  onSeeked(callback: (event?: { time: number }) => void): VideoAttribute;\n\n  \n  onUpdate(callback: (event?: { time: number }) => void): VideoAttribute;\n\n  \n  onError(event: () => void): VideoAttribute;\n}", "api_method_name": "VideoAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "muted", "api_method_all": "muted(value: boolean): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 33, "since": 7, "api_used": "\u662f", "lines": ["ctor()\n        this.mutedPropFalse = this.$el", "autoPlays)\n        .muted(true)\n        .cont", "rs.id).assertEqual('mutedPropFalse')\n        ", "rs.id).assertEqual('mutedPropNone')\n        e", "rue : null,\n        mutedPropNone : null,\n   ", "  expect(obj.$attrs.muted).assertEqual('false", "rs.id).assertEqual('mutedPropTrue')\n        e", "ctor()\n        this.mutedPropTrue = this.$ele", "utedPropTrue : this.mutedPropTrue,\n          ", "se = this.$element(\"mutedPropFalse\").getInspe", "opNone,\n            mutedPropFalse : this.mut", "ne = this.$element(\"mutedPropNone\").getInspec", "pFalse,\n            mutedPropTrue : this.mute", "se(globalThis.value.mutedPropFalse);\n        ", "ctor()\n        this.mutedPropNone = this.$ele", "lse : null,\n        mutedPropTrue : null,\n   ", "ue = this.$element(\"mutedPropTrue\").getInspec", "one : null,\n        mutedPropFalse : null,\n  ", "se(globalThis.value.mutedPropNone);\n        c", "opTrue,\n            mutedPropNone : this.mute", "utedPropNone : this.mutedPropNone,\n          ", "tringify(obj.$attrs.muted));\n      console.lo", "tedPropFalse : this.mutedPropFalse,\n         ", "nsole.log(\"cd video muted\" + JSON.stringify(o", "o(\"[videoProps] get muted value is: \" + JSON.", "tringify(obj.$attrs.muted));\n        done();\n", "se(globalThis.value.mutedPropTrue);\n        c", "  expect(obj.$attrs.muted).assertEqual('true'"], "files": ["videoProps.test.js", "VideoJsunit.test.ets", "Video.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "autoPlay", "api_method_all": "autoPlay(value: boolean): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": ["xpect(objNew.$attrs.autoPlay).assertEqual('false", "tringify(obj.$attrs.autoPlay))\n      console.log", "     .autoPlay(this.autoPlays)\n        .muted(tr", "  expect(obj.$attrs.autoPlay).assertEqual('true'", "eight(500)\n        .autoPlay(this.autoPlays)\n   ", "tringify(obj.$attrs.autoPlay));\n      console.lo", "nsole.log(\"cd video autoPlay\" + JSON.stringify(o", "ull) {\n        this.autoPlay = eventData.data.au", "   .index(1)\n      .autoPlay(true)\n      .interv", "     .autoPlay(this.autoPlays)\n        .controls", "ay = eventData.data.autoPlay;\n      }\n      if (", "umber = 1;\n  @State autoPlays: boolean = false;\n", "ata: {\n            \"autoPlay\": \"false123\"\n      ", "(this.index)\n      .autoPlay(this.autoPlay)\n    ", "ffect.None\n  @State autoPlay: boolean = true\n  @", "ata: {\n            \"autoPlay\": \"false\"\n         ", "umber = 1;\n  @State autoPlays: boolean = true;\n ", "nsole.log('Swiper\u2018s autoPlay is ' + JSON.stringi", "     .autoPlay(this.autoPlay)\n      .interval(th", " if (eventData.data.autoPlay != null) {\n        "], "files": ["Video.ets", "VideoJsunit.test.ets", "video.ets", "swiper.ets", "SwiperJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "controls", "api_method_all": "controls(value: boolean): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": ["ctor()\n        this.controlsPropTrue = this.$ele", "se = this.$element(\"controlsPropFalse\").getInspe", "ctor()\n        this.controlsPropNone = this.$ele", "se(globalThis.value.controlsPropFalse);\n        ", "ue = this.$element(\"controlsPropTrue\").getInspec", "tringify(obj.$attrs.controls));\n        done();\n", "autoPlays)\n        .controls(this.controlsss)\n\n ", "one : null,\n        controlsPropFalse : null,\n  ", "ctor()\n        this.controlsPropFalse = this.$el", "  expect(obj.$attrs.controls).assertEqual('true'", "an = true;\n  @State controlsss: boolean = true;\n", "rs.id).assertEqual('controlsPropNone')\n        e", "o(\"[videoProps] get controls value is: \" + JSON.", "nsole.log(\"cd video controls\" + JSON.stringify(o", "  expect(obj.$attrs.controls).assertEqual('false", "ne = this.$element(\"controlsPropNone\").getInspec", "olsPropFalse : this.controlsPropFalse,\n         ", "     .controls(this.controlsss)\n\n      Row() {\n ", "uted(true)\n        .controls(this.controlsss)\n  ", "     .controls(this.controlsss)\n        .loop(tr", "tringify(obj.$attrs.controls));\n      console.lo", "rs.id).assertEqual('controlsPropFalse')\n        ", "opTrue,\n            controlsPropNone : this.cont", "opNone,\n            controlsPropFalse : this.con", "lse : null,\n        controlsPropTrue : null,\n   ", "rue : null,\n        controlsPropNone : null,\n   ", "rs.id).assertEqual('controlsPropTrue')\n        e", "se(globalThis.value.controlsPropNone);\n        c", "n = false;\n  @State controlsss: boolean = true;\n", "se(globalThis.value.controlsPropTrue);\n        c", "rolsPropNone : this.controlsPropNone,\n          ", "rolsPropTrue : this.controlsPropTrue,\n          ", "pFalse,\n            controlsPropTrue : this.cont"], "files": ["VideoJsunit.test.ets", "videoProps.test.js", "Video.ets", "video.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "loop", "api_method_all": "loop(value: boolean): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 85, "since": 6, "api_used": "\u662f", "lines": ["r)\n      .loop(this.loop)\n      .duration(th", "nsole.log('Swiper\u2018s loop is ' + JSON.stringi", "opTrue,\n            loopPropNone : this.loop", "opNone,\n            loopPropFalse : this.loo", "opTrue,\n            loopPropFalse: this.loop", "se = this.$element(\"loopPropFalse\").getInspe", "op = eventData.data.loop;\n      }\n      if (", "xpect(objNew.$attrs.loop).assertEqual('true'", "pFalse,\n            loopPropTrue : this.loop", "umber = 50\n  @State loop: number = 3\n  @Stat", "ata: {\n            \"loop\": \"true123\"\n       ", "ctor()\n        this.loopPropNone = this.$ele", " this.step,\n        loop: this.loop,\n       ", "pFalse,\n            loopPropTrue: this.loopP", "one : null,\n        loopPropFalse : null,\n  ", "alse: null,\n        loopPropTrue: null,\n    ", "\n        loop: this.loop,\n        fromStart:", " },\n                loop: {\n                ", "tringify(obj.$attrs.loop));\n      console.lo", "loopPropNone : this.loopPropNone,\n          ", " loopPropTrue: this.loopPropTrue,\n          ", "tringify(obj.$attrs.loop))\n      console.log", "ull) {\n        this.loop = eventData.data.lo", "rue : null,\n        loopPropNone : null,\n   ", "ean = true\n  @State loop: boolean = false\n  ", "True: null,\n        loopPropFalse: null,\n   ", "oopPropFalse : this.loopPropFalse,\n         ", "  expect(obj.$attrs.loop).assertEqual('false", "lse : null,\n        loopPropTrue : null,\n   ", "ontrolsss)\n        .loop(true)\n        .obje", "ata: {\n            \"loop\": true\n          }\n", "xpect(objNew.$attrs.loop).assertEqual('false", "s.indicator)\n      .loop(this.loop)\n      .d", "nsole.log(\"cd video loop\" + JSON.stringify(o", "loopPropFalse: this.loopPropFalse,\n         ", "ue = this.$element(\"loopPropTrue\").getInspec", "ctor()\n        this.loopPropFalse = this.$el", " if (eventData.data.loop != null) {\n        ", "loopPropTrue : this.loopPropTrue,\n          ", "ctor()\n        this.loopPropTrue = this.$ele", "icator(true)\n      .loop(false)\n      .durat"], "files": ["Marquee.ets", "Video.ets", "VideoJsunit.test.ets", "swiperProps.test.js", "videoProps.test.js", "swiper.ets", "marqueeProps.test.js", "marquee.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "objectFit", "api_method_all": "objectFit(value: ImageFit): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["nd.png\")\n          .objectFit(ImageFit.Fill)\n    ", "nd.png\")\n          .objectFit(ImageFit.None)\n    ", "tringify(obj.$attrs.objectFit));\n      expect(obj", "ashed)\n            .objectFit(ImageFit.Auto).widt", "console.log(\"image3 objectFit\" + JSON.stringify(o", "console.log(\"image4 objectFit\" + JSON.stringify(o", "nd.png\")\n          .objectFit(ImageFit.Contain)\n ", "loop(true)\n        .objectFit(ImageFit.Cover)\n   ", " = this.on\n  @State objectFit: ImageFit = Cover\n\n", "  expect(obj.$attrs.objectFit).assertEqual('Image", " }) {\n        Text('objectFit').fontSize(16).font", "ashed)\n            .objectFit(ImageFit.None).widt", "console.log(\"image2 objectFit\" + JSON.stringify(o", "console.log(\"image5 objectFit\" + JSON.stringify(o", "tringify(obj.$attrs.objectFit));\n      console.lo", "nd.png\")\n          .objectFit(ImageFit.ScaleDown)", "xCCCCCC)\n          .objectFit(ImageFit.Cover)\n   ", "tringify(obj.$attrs.objectFit));\n      console.in", "ashed)\n            .objectFit(ImageFit.Contain).w", "nsole.log(\"cd video objectFit\" + JSON.stringify(o", "console.log(\"image1 objectFit\" + JSON.stringify(o"], "files": ["ImageJsunit.test.ets", "imageFit.ets", "VideoJsunit.test.ets", "Video.ets", "Image.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onStartevent", "api_method_all": "onStart(event: () => void): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onStartevent", "api_method_all": "onStart(event: () => void): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onPauseevent", "api_method_all": "onPause(event: () => void): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onPauseevent", "api_method_all": "onPause(event: () => void): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onFinishevent", "api_method_all": "onFinish(event: () => void): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onFinishevent", "api_method_all": "onFinish(event: () => void): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onFullscreenChangecallback", "api_method_all": "onFullscreenChange(callback: (event?: { fullscreen: boolean }) => void): VideoAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onFullscreenChangecallback", "api_method_all": "onFullscreenChange(callback: (event?: { fullscreen: boolean }) => void): VideoAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onPreparedcallback", "api_method_all": "onPrepared(callback: (event?: { duration: number }) => void): VideoAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onPreparedcallback", "api_method_all": "onPrepared(callback: (event?: { duration: number }) => void): VideoAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onSeekingcallback", "api_method_all": "onSeeking(callback: (event?: { time: number }) => void): VideoAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onSeekingcallback", "api_method_all": "onSeeking(callback: (event?: { time: number }) => void): VideoAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onSeekedcallback", "api_method_all": "onSeeked(callback: (event?: { time: number }) => void): VideoAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onSeekedcallback", "api_method_all": "onSeeked(callback: (event?: { time: number }) => void): VideoAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onUpdatecallback", "api_method_all": "onUpdate(callback: (event?: { time: number }) => void): VideoAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onUpdatecallback", "api_method_all": "onUpdate(callback: (event?: { time: number }) => void): VideoAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onErrorevent", "api_method_all": "onError(event: () => void): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoAttribute", "api_method_name": "onErrorevent", "api_method_all": "onError(event: () => void): VideoAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}