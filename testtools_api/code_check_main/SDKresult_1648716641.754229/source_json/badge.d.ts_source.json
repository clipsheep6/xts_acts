{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\badge", "api": [{"api_class_name": "BadgePosition", "api_method_all": "declare enum BadgePosition {\n  \n  RightTop,\n\n  \n  Right,\n\n  \n  Left,\n}", "api_method_name": "BadgePosition", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["\"yr badge0 position-BadgePosition.Right\" + JSON.strin", "yr badge2 position-'BadgePosition.Left'\" + JSON.strin", "          position: BadgePosition.RightTop,\n         ", "ition).assertEqual('BadgePosition.Left');\n      conso", "')\n\n          Text(\"BadgePosition.Left\").fontSize(16)", "          position: BadgePosition.Left,\n            m", "')\n\n          Text(\"BadgePosition.RightTop\").fontSize", "ition).assertEqual('BadgePosition.Right');\n      cons", "ition).assertEqual('BadgePosition.RightTop');\n      c", "yr badge1 position-'BadgePosition.RightTop'\" + JSON.s", "          position: BadgePosition.Right,\n            "], "files": ["Badge.ets", "BadgeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgePosition", "api_method_name": "RightTop", "api_method_all": "RightTop,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": [".$element(\"placementRightTop\").getInspector()\n  ", "tion-'BadgePosition.RightTop'\" + JSON.stringify(", "      this.placementRightTop = this.$element(\"pl", ",\n         placementRightTop:null,\n         plac", "Text(\"BadgePosition.RightTop\").fontSize(16)\n    ", "This.value.placementRightTop);\n        console.i", "tion: BadgePosition.RightTop,\n            maxCou", "  testbadgeplacementRightTop\n      * @tc.desc   ", "sertEqual('placementRightTop')\n        expect(ob", "           placementRightTop:this.placementRight", "('testbadgeplacementRightTop START');\n        co", "qual('BadgePosition.RightTop');\n      console.lo", "htTop:this.placementRightTop,\n             place", "('testbadgeplacementRightTop', 0, async function"], "files": ["Badge.ets", "badgeProps.test.js", "BadgeJsunit.test.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgePosition", "api_method_name": "Right", "api_method_all": "Right,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 60, "since": 7, "api_used": "\u662f", "lines": ["  });\n    },\n    setRightButton(e) {\n        ", "qual('BadgePosition.RightTop');\n      console", "('testbadgeplacementRight', 0, async function", "ype: ResponseType = RightClick;\n  @Builder Co", "ual(Placement.BottomRight);\n      }\n      let", ": GradientDirection.RightBottom\n          }\n ", "('testbadgeplacementRightTop', 0, async funct", "nStyle(IndexerAlign.Right)\n        .margin({ ", ": null,\n        typeRight : null,\n    },\n\n   ", ".$element(\"placementRight\").getInspector()\n  ", "       placementPropRight : this.placementPro", "       typeDirectionRight : null,\n        typ", ",\n         placementRightTop:null,\n         p", ": this.typeDirectionRight,\n            typeLo", "tion: BadgePosition.Right,\n            maxCou", "ition-BadgePosition.Right\" + JSON.stringify(o", "htTop:this.placementRightTop,\n             pl", "  testbadgeplacementRightTop\n      * @tc.desc", "Text(\"BadgePosition.RightTop\").fontSize(16)\n ", "tion: BadgePosition.RightTop,\n            max", "           placementRightTop:this.placementRi", "This.value.placementRight);\n        console.i", "ypeRight : this.typeRight,\n        }\n    },\n\n", "       placementPropRight : null,\n        pla", "('GradientDirection.RightBottom');\n      cons", "Right:this.placementRight,\n             place", "()\n        this.typeRight = this.$element(\"ty", "  this.placementPropRight = this.$element(\"pl", "tion-'BadgePosition.RightTop'\" + JSON.stringi", "ft,\n            typeRight : this.typeRight,\n ", "      this.placementRightTop = this.$element(", "('testbadgeplacementRight START');\n        co", ",\n         placementRight:null,\n         plac", "('testbadgeplacementRightTop START');\n       ", ".$element(\"placementRightTop\").getInspector()", "sertEqual('placementRight')\n        expect(ob", "      this.placementRight = this.$element(\"pl", ") {\n          Text('Right').fontSize(25)\n    ", "t = Placement.BottomRight\n\n  @Builder popupBu", "  this.typeDirectionRight = this.$element(\"ty", "       typeDirectionRight : this.typeDirectio", "  testbadgeplacementRight\n      * @tc.desc   ", "qual('BadgePosition.Right');\n      console.lo", "ement(\"typeDirectionRight\").getInspector()\n  ", "tEqual(Placement.TopRight);\n      }\n      let", "ment = Placement.TopRight\n  @State placementT", "           placementRight:this.placementRight", ": this.placementPropRight,\n            placem", "ement(\"placementPropRight\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "GradientDirectionJsunit.test.ets", "placement.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "bindContextMenu.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgePosition", "api_method_name": "Left", "api_method_all": "Left,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 54, "since": 7, "api_used": "\u662f", "lines": ["tion: BadgePosition.Left,\n            maxCou", ".value.typeDirectionLeft);\n        console.i", "ement).assertEqual('Left')\n        console.i", "       placementPropLeft : this.placementPro", "tLeft:this.placementLeft,\n             place", ", left: this.paddingLeft })\n        .margin(", "sertEqual('placementLeft')\n        expect(ob", "= GradientDirection.LeftTop\n\n  build() {\n   ", "t = Placement.BottomLeft\n  @State placementT", "ement(\"typeDirectionLeft\").getInspector()\n  ", "ll,\n        typeLoopLeft : null,\n        typ", "nStyle(IndexerAlign.Left)\n        .onSelecte", "           placementLeft:this.placementLeft,", "  this.typeDirectionLeft = this.$element(\"ty", "marqueeDirectionPropLeft', 0, async function", "('GradientDirection.Left');\n      expect(obj", "('GradientDirection.LeftTop');\n      console", "('testbadgeplacementLeft START');\n        co", "ement(\"placementPropLeft\").getInspector()\n  ", "       typeDirectionLeft : this.typeDirectio", "ual(Placement.BottomLeft);\n      }\n      let", "('testbadgeplacementLeft', 0, async function", "Equal('typeDirectionLeft')\n        expect(ob", ") {\n          Text('Left').fontSize(25)\n    ", ",\n         placementLeft:null,\n         plac", "tion-'BadgePosition.Left'\" + JSON.stringify(", "  this.placementPropLeft = this.$element(\"pl", "       placementPropLeft : null,\n        pla", "('GradientDirection.LeftBottom');\n      cons", "ment = Placement.TopLeft\n  @State placementO", ": GradientDirection.Left,\n    colors: [[0xAE", ": this.typeDirectionLeft,\n            typeDi", ": GradientDirection.LeftBottom\n          }\n ", ": this.placementPropLeft,\n            placem", "            typeLoopLeft : this.typeLoopLeft", "Left : this.typeLoopLeft,\n            typeRi", "0px\"\n  @State marginLeft: string = \"10px\"\n  ", "ement(\"typeDirectionLeft\").getInspector()\n\n ", "Text(\"BadgePosition.Left\").fontSize(16)\n    ", "       this.typeLoopLeft = this.$element(\"ty", "t, left: this.marginLeft })\n        .constra", "This.value.placementLeft);\n        console.i", "       typeDirectionLeft : null,\n        typ", "  testbadgeplacementLeft\n      * @tc.desc   ", "   testPlacementPropLeft\n     * @tc.desc    ", "qual('BadgePosition.Left');\n      console.lo", "\"5\"\n  @State paddingLeft: string= \"5\"\n  @Sta", "      this.placementLeft = this.$element(\"pl", "tEqual(Placement.TopLeft);\n      }\n      let", ".$element(\"placementLeft\").getInspector()\n  "], "files": ["badgeProps.test.js", "index.js", "popupProps.test.js", "marqueeProps.test.js", "AlphabetIndexer.ets", "gridSettings.ets", "placement.ets", "GradientDirectionJsunit.test.ets", "BadgeJsunit.test.ets", "PlacementJsunit.test.ets", "Badge.ets", "colorGradient.ets", "gradientDirection.ets", "Text.ets", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeStyle", "api_method_all": "declare interface BadgeStyle {\n  \n  color?: ResourceColor;\n\n  \n  fontSize?: number | string;\n\n  \n  badgeSize?: number | string;\n\n  \n  badgeColor?: ResourceColor;\n}", "api_method_name": "BadgeStyle", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeStyle", "api_method_name": "color", "api_method_all": "color?: ResourceColor", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 276, "since": 7, "api_used": "\u662f", "lines": ["(obj.$attrs.divider.color).assertEqual(\"#FFFF", "        radius: 20, color: Color.Gray, offset", "bjNew.$attrs.shadow.color).assertEqual(\"#FF00", " 2.000000;\n  @State color: string = 0xFFFFFF;", " { radius: 'error', color: 'error', offsetX: ", "rt default function colorGradientJsunit() {\n ", " if (eventData.data.colorValues != null) {\n  ", "ata: {\n            \"colorValues\": JSON.string", "  console.info(\"get colorGradient state pages", "ing = 150;\n  @State colorValues: Array = [[0x", "ull) {\n        this.color = eventData.data.co", "bjNew.$attrs.shadow.color).assertEqual(\"#8000", "bjNew.$attrs.shadow.color).assertEqual(\"#FF80", "ull) {\n        this.colorValues = JSON.parse(", "\n        }.border({ color: Color.Black, width", "TRS_SHADOW_COLOR = 'color'\nconst ATTRS_SHADOW", "ection.Top,\n        colors: [[0xAEE1E1, 0.0],", "        color: this.color,\n          startMar", "t(obj.$attrs.shadow.color).assertEqual(\"#FF80", ".border({ width: 5, color: 0x317AF7, radius: ", "    radius: 60,\n    colors:[[0xAEE1E1, 0.0], ", "r({ strokeWidth: 2, color: 0xFFFFFF, startMar", "ata: {\n            \"color\": '0xFF0000'\n      ", "(obj.$attrs.divider.color).assertEqual(\"#FF00", " console.info(\"push colorGradient page result", "radius: 0x7FFFFFFF, color: 0x7FFFFFFF, offset", "      console.info(\"colorGradient beforeEach ", "        uri: 'pages/colorGradient',\n      }\n ", "Direction.Left,\n    colors: [[0xAEE1E1, 0.0],", "s));\n        if (!(\"colorGradient\" == pages.n", " if (eventData.data.color != null) {\n        ", ",\n    end: 359,\n    colors: [[0xAEE1E1, 0.0],", "      console.info(\"colorGradient after each ", "    Text(`text font color ${this.fontColor}`)", "   Text('background color').fontSize(9).width", "arse(eventData.data.colorValues);\n      }\n   ", "ject= { radius: 10, color: Color.Gray, offset", "or = eventData.data.color;\n      }\n      if (", "console.error(\"push colorGradient page error:", "radius: 0x80000000, color: 0x80000000, offset", "bjNew.$attrs.shadow.color).assertEqual(\"#7FFF", "ata: {\n            \"color\": \"#FF0000FF\"\n     ", "fontColor)\n        .colorBlend(Color.Green)\n ", "right: 20, size: 2, color: Color.Blue })\n    ", "  if(eventData.data.colorValues != null) {\n  ", "= \"200px\";\n  @State color: Array = [[0x080808", "okeWidth,\n          color: this.color,\n      "], "files": ["ohosPrompt.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "Qrcode.ets", "Span.ets", "Progress.ets", "toolbarItemProps.test.js", "marquee.ets", "basicabilityapi.test.js", "DividerJsunit.test.ets", "Divider.ets", "border.ets", "systemPrompt.ets", "List.test.ets", "scrollCode.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "gauge.ets", "TextJsunit.test.ets", "swiper.ets", "Blank.ets", "text.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "labelProps.test.js", "image.ets", "ListJsunit.test.ets", "loadingProgress.ets", "stepperProps.test.js", "ratingProps.test.js", "ColorGradientJsunit.test.ets", "PatternLock.ets", "ShapeJsunit.test.ets", "badge.ets", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "pickerProps.test.js", "selectProps.test.js", "span.ets", "NavigatorCode.ets", "BackgroundAndSizeSettingJsunit.test.ets", "mouseEvent.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "divider.ets", "Constants.ets", "progress.ets", "sliderProps.test.js", "WebPage.ets", "inputProps.test.js", "index.js", "progressProps.test.js", "Badge.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeStyle", "api_method_name": "fontSize", "api_method_all": "fontSize?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 588, "since": 7, "api_used": "\u662f", "lines": ["lor.Green)\n        .fontSize(this.fontSize)\n    ", "w').key(\"flexGrow\").fontSize(9).fontColor(0xCCCC", "t('4')\n            .fontSize(20)\n            .us", "ge Two')\n          .fontSize(35)\n          .font", "  Text('grayscale').fontSize(15).fontColor(0xCCC", "     Text('shadow').fontSize(15).fontColor(0xCCC", "  Text('hueRotate').fontSize(15).fontColor(0xCCC", "t('1')\n            .fontSize(20)\n            .us", "     Text('invert').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backdr", "ETS TEST')\n        .fontSize(50)\n        .fontWe", "g container: grid').fontSize(20).fontColor(Color", "(60)\n              .fontSize(18)\n              .", "0)\n                .fontSize(16)\n               ", "ext('default text').fontSize(20)\n\n      Text(`te", " {\n                \"fontSize\": this.fontSize,\n  ", "   \"fontSize\": this.fontSize,\n              }\n  ", "2cb)\n              .fontSize(40)\n              .", "     Text('Center').fontSize(25)\n        }\n     ", "     .fontSize(this.fontSize)\n        .allowScal", "bb2cb)\n            .fontSize(20)\n            .as", "').key(\"alignSelf\").fontSize(9).fontColor(0xCCCC", "  Text('font blur').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backgr", "ng container: row').fontSize(20).fontColor(Color", "Color.Red;\n  @State fontSize: string = 20;\n  @St", "xt font size ${this.fontSize}`)\n        .fontSiz", "enter)\n            .fontSize(20)\n        }, item", "fontColor)\n        .fontSize(20)\n        .key('f", "t('3')\n            .fontSize(20)\n            .us", "e four')\n          .fontSize(35)\n          .font", " Text('brightness').fontSize(15).fontColor(0xCCC", "margin(30)\n        .fontSize(20)\n        .onClic", " Text('alignItems').fontSize(9).fontColor(0xCCCC", " state is: ' + this.fontSize);\n          try {\n ", "displayPriority 4').fontSize(20).fontColor(Color", " layer')\n          .fontSize(12).fontColor(0xCCC", "olor.Blue;\n  @State fontSize: number = 50;\n  @St", "  Text('flexBasis').fontSize(9).fontColor(0xCCCC", "   Text('saturate').fontSize(15).fontColor(0xCCC", "ext('backdropBlur').fontSize(15).fontColor(0xCCC", "ge One')\n          .fontSize(35)\n          .font", "   Text('contrast').fontSize(15).fontColor(0xCCC", "t('2')\n            .fontSize(20)\n            .us", "       Text('Left').fontSize(25)\n        }\n     ", "      Text('Right').fontSize(25)\n        }\n     ", " Three')\n          .fontSize(35)\n          .font", " Text('flexShrink').fontSize(9).fontColor(0xCCCC"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "placement.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "Stack.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "stepper.ets", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "MarqueeJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "lazyForEach.ets", "listItem.ets", "grid.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "rating.ets", "Path.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "Toggle.ets", "slider.ets", "Calendar.ets", "refresh.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeStyle", "api_method_name": "badgeSize", "api_method_all": "badgeSize?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["this.fontSizeValue, badgeSize: 50, badgeColor: Co", "og(\"yr badge0 style.badgeSize\" + style.badgeSize)", "\n      expect(style.badgeSize).assertEqual('20.00", ".badgeSize\" + style.badgeSize);\n      expect(styl", "Pink, fontSize: 16, badgeSize: 20, badgeColor: Co", "FF, fontSize: '16', badgeSize: '20', badgeColor: ", "1,\n        style: { badgeSize: 6, badgeColor: Col", "FFFF, fontSize: 16, badgeSize: 20, badgeColor: Co", "Value, fontSize: 9, badgeSize: 20, badgeColor: Co"], "files": ["Badge.ets", "badge.ets", "BadgeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeStyle", "api_method_name": "badgeColor", "api_method_all": "badgeColor?: ResourceColor", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["le: { badgeSize: 6, badgeColor: Color.Red }\n      ", "onfig:{\n            badgeColor:\"#0a59f7\",\n        ", "', badgeSize: '20', badgeColor: Color.Red }\n      ", "lue, badgeSize: 50, badgeColor: Color.Red }\n      ", " 16, badgeSize: 20, badgeColor: Color.Red }\n      ", ": 9, badgeSize: 20, badgeColor: Color.Red }\n      ", "nfig:{\n             badgeColor:\"#0a59f7\",\n        "], "files": ["Badge.ets", "badge.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeParam", "api_method_all": "declare interface BadgeParam {\n  \n  position?: BadgePosition;\n\n  \n  style: BadgeStyle;\n}", "api_method_name": "BadgeParam", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeParam", "api_method_name": "position", "api_method_all": "position?: BadgePosition", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 103, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.position.x).assertEqual('25.", " console.info(\"push positionSetting page result:", "ion1);\n        this.position2 = JSON.parse(event", "on')\n\n        Text('position').fontSize(20).font", "arse(eventData.data.position1);\n        this.pos", " 25 })\n            .position({ x: '100%', y: '10", ")\n          Text(`4 position(${this.position2.x}", " getInspectorByKey('position1');\n      console.i", "t('background image position').fontSize(9).width", ".firstState)\n      .position({ x: '35%', y: 0 })", "      console.info(\"positionSetting after each c", "t ATTRS_POSITION = 'position'\nconst ATTRS_POSITI", "arse(eventData.data.position2);\n      } else if ", "osition2.x, y: this.position2.y })\n            .", "(`4 position(${this.position2.x}, ${this.positio", ".position({ x: this.position1.x, y: this.positio", "  events_emitter.on(positionChangeEvent, this.st", "s));\n        if (!(\"positionSetting\" == pages.na", "  expect(obj.$attrs.position.y).assertEqual('15.", "console.error(\"push positionSetting page error:\"", " if (eventData.data.position1) {\n        this.po", "{\n    console.info(\"position page stateChangCall", "PositionSetting005] position1: \" + JSON.stringif", "extLabel('')\n      .position({ x: '35%', y: 0 })", "rt default function positionSettingJsunit() {\n  ", "  console.info(\"get positionSetting state pages:", "        uri: 'pages/positionSetting',\n      }\n  ", ")\n            .key('position1')\n          Text('", ")\n            .key('position2')\n        }.width(", "PositionSetting005] position: \" + JSON.stringify", "CallBack);\n\n    let positionChangeEvent = {\n    ", "osition1.x, y: this.position1.y })\n            .", "  })\n      }\n      .position({ x: '35%', y: 0 })", "sibilityJsunit();\n  positionSettingJsunit();\n  b", "5, y: 15};\n  @State position2: {x: string, y: st", "ze(20)\n            .position({ x: this.position2", "on1) {\n        this.position1 = JSON.parse(event", "      console.info(\"positionSetting beforeEach s", "osition1.x}, ${this.position1.y})`)\n            ", "0 })\n      }\n      .position({ x: '35%', y: 0 })", ")\n          Text(`2 position(${this.position1.x}", "  console.info(\"get positionSetting state pages.", "(`2 position(${this.position1.x}, ${this.positio", "tringify(obj.$attrs.position));\n      expect(obj", "ction.Rtl;\n  @State position1: {x: string, y: st", ".position({ x: this.position2.x, y: this.positio", "t.test.ets';\nimport positionSettingJsunit from '", " getInspectorByKey('position2');\n      console.i", "osition2.x}, ${this.position2.y})`)\n            ", "Start)\n            .position({ x: this.position1"], "files": ["backgroundAndSizeSetting.ets", "stepper.ets", "WebPage.ets", "PositionSettingJsunit.test.ets", "TextJsunit.test.ets", "Constants.ets", "Stepper.ets", "positionSetting.ets", "background.ets", "bindPopup.ets", "placement.ets", "motionPath.ets", "BadgeJsunit.test.ets", "List.test.ets", "badge.ets", "Text.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeParam", "api_method_name": "style", "api_method_all": "style: BadgeStyle", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1756, "since": 7, "api_used": "\u662f", "lines": ["ogress({ value: 25, style: ProgressStyle.Ecli", "yle));\n      expect(style.fontSize).assertEqu", "ue: 20, total: 150, style: ProgressStyle.Line", "    Text(`text font style ${this.fontStyle}`)", "ue: 20, total: 150, style: ProgressStyle.Ecli", "x317AF7, radius: 8, style: BorderStyle.Dotted", "tyle);\n      expect(style.fontSize).assertEqu", "tBadge05] component style is: \" + JSON.string", " step: 1,\n          style: SliderStyle.OutSet", ".border({ width: 1, style: BorderStyle.Dashed", " family: 'cursive', style: FontStyle.Italic }", " step: 1,\n          style: SliderStyle.InSet,", "osition: 1,\n        style: { badgeSize: 6, ba", "tep: 1,\n            style: SliderStyle.OutSet", ".border({ width: 1, style: this.borderStyle }", "  expect(fontObject.style).assertEqual('FontS", "xCount: 99,\n        style: { color: this.colo", "ue: 20, total: 150, style: ProgressStyle.Caps", "mber = 100\n  @State style: ProgressStyle = Pr", "WINDOWBLUR_STYLE = 'style'\nconst ATTRS_FONTFA", "parse(objNew.$attrs.style);\n      expect(styl", "mily: 'sans-serif', style: FontStyle.Normal\n ", "ON.parse(obj.$attrs.style);\n      expect(obj.", "parse(objNew.$attrs.style);\n      console.inf", "0, family: 'serif', style: FontStyle.Normal }", "ogress({ value: 20, style: ProgressStyle.Line", " \" + JSON.stringify(style));\n      expect(sty", "dge');\n      expect(style.fontSize).assertEqu", "ogress({ value: 27, style: ProgressStyle.Caps", "objNew));\n      let style = JSON.parse(objNew", "pValue,\n            style: SliderStyle.InSet,", "is.message,\n        style: { color: this.colo", "fy(obj));\n      let style = JSON.parse(obj.$a"], "files": ["Select.ets", "ratingProps.test.js", "SelectJsunit.test.ets", "dividerProps.test.js", "BadgeJsunit.test.ets", "Slider.ets", "badge.ets", "pickerViewProps.test.js", "qrcodeProps.test.js", "divProps.test.js", "textStyle.ets", "TextInput.ets", "AlphabetIndexer.ets", "Constants.ets", "Progress.ets", "Sidebar.ets", "Badge.ets", "SliderJsunit.test.ets", "stepperItemProps.test.js", "progress.ets", "canvasProps.test.js", "sliderProps.test.js", "toolbarItemProps.test.js", "videoProps.test.js", "positionSetting.ets", "TextArea.ets", "inputProps.test.js", "index.js", "optionProps.test.js", "border.ets", "richtextProps.test.js", "pickerProps.test.js", "select.ets", "labelProps.test.js", "textArea.ets", "slider.ets", "textInput.ets", "progressProps.test.js", "selectProps.test.js", "gestureMode.ets", "search.ets", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeParamWithNumber", "api_method_all": "declare interface BadgeParamWithNumber extends BadgeParam {\n  \n  count: number;\n\n  \n  maxCount?: number;\n}", "api_method_name": "BadgeParamWithNumber", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeParamWithNumber", "api_method_name": "count", "api_method_all": "count: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 183, "since": 7, "api_used": "\u662f", "lines": [" getInspectorByKey('counter');\n      let obj ", "pExample {\n  @State count: number = 0\n  @Stat", "onent({ count: this.countDownStartValue, cost", "eExample {\n  @State counts: number = 1;\n  @St", "None:null,\n         count:null,\n         visi", "e(\n    TapGesture({ count: 2 })\n      .onActi", " {\n    Text(`${this.counter}sec`)\n      .font", "   TimerComponent({ counter: 0, changePerSec:", "})\n  }\n\n  describe('counterTest', function ()", "ct badge {\n  @State counts: number = 33\n  @St", "        count: this.counts,\n        maxCount:", "d refresh: ' + this.counter)\n          .fontS", " {\n            this.counts++\n          })\n   ", "\n              this.countDownStartValue -= 1\n", "         count:this.count,\n             visib", "OUNTRY\": localeInfo.countryOrRegion,\n        ", "   TimerComponent({ counter: 10, changePerSec", "event.repeat) {this.count++}\n        console.", "        count: this.counts,\n            posit", "t:null,\n         maxcountNone:null,\n         ", "an = false\n  @State counter: number = 0\n\n  on", "e:null,\n         maxcount:null,\n         maxc", "in(100)\n      .key('counter')\n      .onInc(()", "y\n@Component\nstruct counter {\n  @State value:", "rt default function counterJsunit() {\n\n  func", "tNone,\n             count:this.count,\n       ", "t.test.ets';\nimport counterJsunit from './Cou", "  expect(obj.$attrs.count).assertEqual('33');", "an = false\n  @State countDownStartValue: numb", "(() => {\n      this.counter += this.changePer", "Component {\n  @Prop count: number\n  private c", "\n      Text(`${this.count}`)\n        .key(\"Te", "\n              this.countDownStartValue += 1\n", "sole.log(\"yr badge0 count-'33'\" + JSON.string", "Badge({\n            count: this.counts,\n     ", "s onAction:' + this.count + '\\nPanGesture off", "lumnSplitJsunit()\n  counterJsunit()\n  flexJsu", "    Badge({\n        count: this.counts,\n     ", "tringify(obj.$attrs.count))\n      expect(obj.", "ountDownComponent({ count: this.countDownStar", "               this.counts++\n              })", "omponent {\n  @State counter: number = 0\n  pri", "       Text(`${this.countDownStartValue}`)\n  ", "=> {\n          this.counter++;\n          this"], "files": ["configuration.ets", "CounterJsunit.test.ets", "BadgeJsunit.test.ets", "badge.ets", "Counter.ets", "Badge.ets", "Prop.ets", "tapGesture.ets", "index.js", "inputProps.test.js", "basicabilityapi.test.js", "animateTransformProps.test.js", "badgeProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "textareaProps.test.js", "aboutToDisappear.ets", "refresh.ets", "gestureMode.ets", "List.test.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeParamWithNumber", "api_method_name": "maxCount", "api_method_all": "maxCount?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.maxCount).assertEqual('99');", "tringify(obj.$attrs.maxCount))\n      console.log", "sole.log(\"yr badge0 maxCount-'99'\" + JSON.string", "ghtTop,\n            maxCount: 99,\n            st", "his.counts,\n        maxCount: 99,\n        style:", ".Right,\n            maxCount: 99,\n            st", "n.Left,\n            maxCount: 99,\n            st"], "files": ["Badge.ets", "badge.ets", "BadgeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeParamWithString", "api_method_all": "declare interface BadgeParamWithString extends BadgeParam {\n  \n  value: string;\n}", "api_method_name": "BadgeParamWithString", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeParamWithString", "api_method_name": "value", "api_method_all": "value: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeInterface", "api_method_all": "interface BadgeInterface {\n  \n  (value: BadgeParamWithNumber): BadgeAttribute;\n\n  \n  (value: BadgeParamWithString): BadgeAttribute;\n}", "api_method_name": "BadgeInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeInterface", "api_method_name": "value", "api_method_all": "(value: BadgeParamWithNumber): BadgeAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeInterface", "api_method_name": "value", "api_method_all": "(value: BadgeParamWithString): BadgeAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BadgeAttribute", "api_method_all": "declare class BadgeAttribute extends CommonMethod<BadgeAttribute> {}", "api_method_name": "BadgeAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}