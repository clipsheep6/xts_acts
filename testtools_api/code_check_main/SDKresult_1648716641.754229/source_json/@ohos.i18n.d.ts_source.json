{"subsystem_ch": "\u5168\u7403\u5316\u5b50\u7cfb\u7edf", "subsystem_en": "global", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.i18n", "api": [{"api_class_name": "i18n", "api_method_all": "declare namespace i18n {\n\nexport function getDisplayCountry(country: string, locale: string, sentenceCase?: boolean): string;\n\n\nexport function getDisplayLanguage(language: string, locale: string, sentenceCase?: boolean): string;\n\n\nexport function getSystemLanguages(): Array<string>;\n\n\nexport function getSystemCountries(language: string): Array<string>;\n\n\nexport function isSuggested(language: string, region?: string): boolean;\n\n\nexport function getSystemLanguage(): string;\n\n\nexport function setSystemLanguage(language: string): boolean;\n\n\nexport function getSystemRegion(): string;\n\n\nexport function setSystemRegion(region: string): boolean;\n\n\nexport function getSystemLocale(): string;\n\n\nexport function setSystemLocale(locale: string): boolean;\n\n\nexport interface Util {\n    \n    unitConvert(fromUnit: UnitInfo, toUnit: UnitInfo, value: number, locale: string, style?: string): string;\n}\n\n\nexport interface UnitInfo {\n    \n    unit: string\n\n    \n    measureSystem: string\n}\n\n\nexport interface PhoneNumberFormatOptions {\n    \n    type: string;\n}\n\n\nexport class PhoneNumberFormat {\n    \n    constructor(country: string, options?: PhoneNumberFormatOptions);\n\n    \n    isValidNumber(number: string): boolean;\n\n    \n    format(number: string): string;\n}\n\n\n export function getCalendar(locale: string, type?: string): Calendar;\n\nexport class Calendar {\n    \n    setTime(date: Date): void;\n\n    \n     setTime(time: number): void;\n\n    \n    set(year: number, month: number, date:number, hour?: number, minute?: number, second?: number): void;\n\n    \n    setTimeZone(timezone: string): void;\n\n    \n    getTimeZone(): string;\n\n    \n    getFirstDayOfWeek(): number;\n\n    \n    setFirstDayOfWeek(value: number): void;\n\n    \n    getMinimalDaysInFirstWeek(): number;\n\n    \n    setMinimalDaysInFirstWeek(value: number): void;\n\n    \n    get(field: string): number;\n\n    \n    getDisplayName(locale: string): string;\n\n    \n    isWeekend(date?: Date): boolean;\n}\n\n\nexport function isRTL(locale: string): boolean;\n\n\n export function getLineInstance(locale: string): BreakIterator;\n\n\nexport class BreakIterator {\n    \n    current(): number;\n\n    \n    first(): number;\n\n    \n    last(): number;\n\n    \n    next(index?: number): number;\n\n    \n    previous(): number;\n\n    \n    setLineBreakText(text: string): void;\n\n    \n    following(offset: number): number;\n\n    \n    getLineBreakText(): string;\n\n    \n    isBoundary(offset: number): boolean;\n}\n\n\nexport function getInstance(locale?:string): IndexUtil;\n\n\nexport class IndexUtil {\n    \n    getIndexList(): Array<string>;\n\n    \n    addLocale(locale: string): void;\n\n    \n    getIndex(text: string): string;\n}\n\n\nexport class Character {\n    \n    isDigit(char: string): boolean;\n\n    \n    isSpaceChar(char: string): boolean;\n\n    \n    isWhitespace(char: string): boolean;\n\n    \n    isRTL(char: string): boolean;\n\n    \n    isIdeograph(char: string): boolean;\n\n    \n    isLetter(char: string): boolean;\n\n    \n    isLowerCase(char: string): boolean;\n\n    \n    isUpperCase(char: string): boolean;\n\n    \n    getType(char: string): string;\n}\n\n\n export function is24HourClock(): boolean;\n\n\n  export function set24HourClock(option: boolean): boolean;\n\n\nexport function addPreferredLanguage(language: string, index?: number): boolean;\n\n\nexport function removePreferredLanguage(index: number): boolean;\n\n\nexport function getPreferredLanguageList(): Array<string>;\n\n\nexport function getFirstPreferredLanguage(): string;\n\n\nexport function getTimeZone(zoneID?: string): TimeZone;\n\n\nexport class TimeZone {\n    \n    getID(): string;\n\n    \n    getDisplayName(locale?: string, isDST?: boolean): string;\n\n    \n    getRawOffset(): number;\n\n    \n    getOffset(date?: number): number;\n}\n}", "api_method_name": "i18n", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 688, "since": 0, "api_used": "\u662f", "lines": ["       console.log('i18n_test_0850 ' + lang)", "       console.log('i18n_test_0300 ' + local", "       console.log('i18n_test_0500 ' + value", "   })\n\n    \n    it('i18n_test_0400', 0, func", "   })\n\n    \n    it('i18n_test_0800', 0, func", "       console.log('i18n_test_1000 ' + value", "       console.log('i18n_test_0900 ' + lang)", "gion\n    */\n    it('i18n_test_1200', 0, func", "       console.log('i18n_test_1420 ' + value", "       console.log('i18n_test_0850 ' + value", "       console.log('i18n_test_0900 ' + value", "       console.log('i18n_test_0200 ' + regio", "       console.log('i18n_test_1200 ' + value", "cale\n    */\n    it('i18n_test_1600', 0, func", "   })\n\n    \n    it('i18n_test_0100', 0, func", "       console.log('i18n_test_0800 ' + value", "       console.log('i18n_test_0800 ' + lang)", "uage\n    */\n    it('i18n_test_1100', 0, func", "       console.log('i18n_test_0600 ' + value", "       console.log('i18n_test_1200 ' + regio", "rt I18n from '@ohos.i18n'\nimport intl from '", "   })\n\n    \n    it('i18n_test_0300', 0, func", "       console.log('i18n_test_0600 ' + lang)", "       console.log('i18n_test_0700 ' + value", "   })\n\n    \n    it('i18n_test_0600', 0, func", "   })\n\n    \n    it('i18n_test_0500', 0, func", "       console.log('i18n_test_1000 ' + lang)", "       console.log('i18n_test_0400 ' + value", "gion\n    */\n    it('i18n_test_1440', 0, func", "   })\n\n    \n    it('i18n_test_0200', 0, func", "       console.log('i18n_test_1300 ' + value", "       console.log('i18n_test_0100 ' + lang)", "       console.log('i18n_test_1500 ' + value", "       console.log('i18n_test_0500 ' + lang)", "   })\n\n    \n    it('i18n_test_1000', 0, func", "gion\n    */\n    it('i18n_test_1400', 0, func", "       console.log('i18n_test_1400 ' + value", "       console.log('i18n_test_0700 ' + lang)", "gion\n    */\n    it('i18n_test_1420', 0, func", "       console.log('i18n_test_1440 ' + value", "igon\n    */\n    it('i18n_test_1500', 0, func", "       console.log('i18n_test_1600 ' + value", "       console.log('i18n_test_1300 ' + regio", "   })\n\n    \n    it('i18n_test_0850', 0, func", "   })\n\n    \n    it('i18n_test_0900', 0, func", "       console.log('i18n_test_0400 ' + lang)", "       console.log('i18n_test_1100 ' + lang)", "   })\n\n    \n    it('i18n_test_0700', 0, func", "gion\n    */\n    it('i18n_test_1300', 0, func", "       console.log('i18n_test_1100 ' + value"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Util", "api_method_all": "export interface Util {\n    \n    unitConvert(fromUnit: UnitInfo, toUnit: UnitInfo, value: number, locale: string, style?: string): string;\n}", "api_method_name": "Util", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["   let value = I18n.Util.unitConvert({unit: ", "       value = I18n.Util.unitConvert({unit: "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Util", "api_method_name": "unitConvert", "api_method_all": "unitConvert(fromUnit: UnitInfo, toUnit: UnitInfo, value: number, locale: string, style?: string): string;", "api_type": "", "api_args_count": 5, "api_level": 21, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["  value = I18n.Util.unitConvert({unit: 'hour', meas", " the performance of unitConvert\n    */\n    it('perf", "    * @tc.name test unitConvert interface from kilo", " the performance of unitConvert\n    * @tc.desc chec", "t value = I18n.Util.unitConvert({unit: 'celsius', m", "t value = I18n.Util.unitConvert({unit: 'acre', meas", "t value = I18n.Util.unitConvert({unit: 'meter', mea", "t value = I18n.Util.unitConvert({unit: 'kilometer-p", "    * @tc.name test unitConvert interface from cels", "    * @tc.name test unitConvert interface from mete", " * @tc.desc get the unitConvert value\n    */\n    it", "t value = I18n.Util.unitConvert({unit: 'cup', measu", "    * @tc.name test unitConvert interface from acre", "    * @tc.name test unitConvert interface from hour", "t value = I18n.Util.unitConvert({unit: 'hour', meas", "    * @tc.name test unitConvert interface from cup "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UnitInfo", "api_method_all": "export interface UnitInfo {\n    \n    unit: string\n\n    \n    measureSystem: string\n}", "api_method_name": "UnitInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PhoneNumberFormatOptions", "api_method_all": "export interface PhoneNumberFormatOptions {\n    \n    type: string;\n}", "api_method_name": "PhoneNumberFormatOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PhoneNumberFormatOptions", "api_method_name": "type", "api_method_all": "type: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 26, "since": 8, "api_used": "\u662f", "lines": ["umberFormat('US', {'type': 'E164'});\n       ", "2023379 and RFC3966 type param\n    * @tc.des", "0574676 and RFC3966 type param\n    * @tc.des", "umberFormat('CN', {'type': 'RFC3966'});\n    ", "6 and INTERNATIONAL type param\n    * @tc.des", "057467 and NATIONAL type param\n    * @tc.des", "umberFormat('CN', {'type': 'NATIONAL'});\n   ", "3510574676 and E164 type param\n    * @tc.des", " locale and ordinal type\n    * @tc.desc chec", "umberFormat('CN', {'type': 'INTERNATIONAL'})", "574676 and NATIONAL type param\n    * @tc.des", "9 and INTERNATIONAL type param\n    * @tc.des", "umberFormat('US', {'type': 'INTERNATIONAL'})", "ef = Object.getPrototypeOf(global) || global", "6262023379 and E164 type param\n    * @tc.des", "7 4676 and NATIONAL type param\n    * @tc.des", "umberFormat('CN', {'type': 'E164'});\n       ", "umberFormat('US', {'type': 'NATIONAL'});\n   ", "746761 and NATIONAL type param\n    * @tc.des", "PluralRules('zh', {'type': 'ordinal'});\n    ", "023379 and NATIONAL type param\n    * @tc.des", "umberFormat('US', {'type': 'RFC3966'});\n    "], "files": ["I18n.test.js", "Perf.test.js", "Intl.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PhoneNumberFormat", "api_method_all": "export class PhoneNumberFormat {\n    \n    constructor(country: string, options?: PhoneNumberFormatOptions);\n\n    \n    isValidNumber(number: string): boolean;\n\n    \n    format(number: string): string;\n}", "api_method_name": "PhoneNumberFormat", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 35, "since": 8, "api_used": "\u662f", "lines": ["nenumber = new I18n.PhoneNumberFormat('CN', {'type': 'INT", "nenumber = new I18n.PhoneNumberFormat('CN', {'type': 'RFC", "nenumber = new I18n.PhoneNumberFormat('US', {'type': 'NAT", "nenumber = new I18n.PhoneNumberFormat('CN');\n        let ", "nenumber = new I18n.PhoneNumberFormat('CN', {'type': 'NAT", "nenumber = new I18n.PhoneNumberFormat('CN', {'type': 'E16", "nenumber = new I18n.PhoneNumberFormat('US');\n        let ", "nenumber = new I18n.PhoneNumberFormat('US', {'type': 'E16", " the performance of PhoneNumberFormat\n    */\n    it('perf", "nenumber = new I18n.PhoneNumberFormat('US', {'type': 'INT", " the performance of PhoneNumberFormat\n    * @tc.desc chec", "nenumber = new I18n.PhoneNumberFormat('CN');\n        }\n  ", "nenumber = new I18n.PhoneNumberFormat('US', {'type': 'RFC"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PhoneNumberFormat", "api_method_name": "constructor", "api_method_all": "constructor(country: string, options?: PhoneNumberFormatOptions)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PhoneNumberFormat", "api_method_name": "isValidNumber", "api_method_all": "isValidNumber(number: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 67, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.name test isValidNumber interface with 8613", "    * @tc.name test isValidNumber interface with 135 ", "    * @tc.name test isValidNumber interface with tel:", "    * @tc.name test isValidNumber interface with +861", "valid = phonenumber.isValidNumber('13510574676' + ran", "valid = phonenumber.isValidNumber('135 1057 467' + ra", "    * @tc.name test isValidNumber interface with 135-", " * @tc.desc get the isValidNumber value\n    */\n     i", "valid = phonenumber.isValidNumber('110');\n        con", "valid = phonenumber.isValidNumber('86-135-1057-467' +", "valid = phonenumber.isValidNumber('0755-6100088' + ra", "valid = phonenumber.isValidNumber('tel:+86-135-1057-4", "    * @tc.name test isValidNumber interface with +86 ", " * @tc.desc get the isValidNumber value\n    */\n    it", "valid = phonenumber.isValidNumber('62620233' + ran);\n", "    * @tc.name test isValidNumber interface with 110 ", "valid = phonenumber.isValidNumber('135-1057-467' + ra", "    * @tc.name test isValidNumber interface with 1351", "valid = phonenumber.isValidNumber('+86 135 1057 467' ", "valid = phonenumber.isValidNumber('135105746' + ran);", "valid = phonenumber.isValidNumber('+861351057467' + r", "valid = phonenumber.isValidNumber('861351057467' + ra", "    * @tc.name test isValidNumber interface with 86-1", "valid = phonenumber.isValidNumber('6262023379' + ran)", "    * @tc.name test isValidNumber interface with 0755", "valid = phonenumber.isValidNumber('135105746' + ran +", "valid = phonenumber.isValidNumber('1351057467' + ran)", "    * @tc.name test isValidNumber interface with 6262", "valid = phonenumber.isValidNumber('626202337' + ran);"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PhoneNumberFormat", "api_method_name": "format", "api_method_all": "format(number: string): string;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 285, "since": 8, "api_used": "\u662f", "lines": ["0100\n    * @tc.name format the datetime with e", "st_0300 ' + datefmt.format(date));\n        exp", "0310\n    * @tc.name format the date with en-US", "value = phonenumber.format('135105746' + ran);", "let value = datefmt.format(date);\n        cons", "st_0200 ' + datefmt.format(date));\n        exp", "value = phonenumber.format('135 1057 467' + ra", "    * @tc.name test format interface with 135 ", "0300\n    * @tc.name format the date with en lo", "st_0700 ' + datefmt.format(date));\n        exp", "0600\n    * @tc.name format the hour with en an", "     expect(datefmt.format(date)).assertEqual(", "0700\n    * @tc.name format the hour with en an", "    * @tc.name test format interface with 1351", "0120\n    * @tc.name format the datetime with e", "value = phonenumber.format('13510574676' + ran", "value = phonenumber.format('626202337' + ran);", "0320\n    * @tc.name format the date with en-GB", "st_0600 ' + datefmt.format(date));\n        exp", "0200\n    * @tc.name format the date with zh lo", "    * @tc.name test format interface with 6262", "st_0310 ' + datefmt.format(date));\n        exp", "st_0500 ' + datefmt.format(date));\n        exp", "0500\n    * @tc.name format the hour with ban a", "st_0320 ' + datefmt.format(date));\n        exp", "0400\n    * @tc.name format the date with aa lo", "value = phonenumber.format('1351057467' + ran)"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_all": "export class Calendar {\n    \n    setTime(date: Date): void;\n\n    \n     setTime(time: number): void;\n\n    \n    set(year: number, month: number, date:number, hour?: number, minute?: number, second?: number): void;\n\n    \n    setTimeZone(timezone: string): void;\n\n    \n    getTimeZone(): string;\n\n    \n    getFirstDayOfWeek(): number;\n\n    \n    setFirstDayOfWeek(value: number): void;\n\n    \n    getMinimalDaysInFirstWeek(): number;\n\n    \n    setMinimalDaysInFirstWeek(value: number): void;\n\n    \n    get(field: string): number;\n\n    \n    getDisplayName(locale: string): string;\n\n    \n    isWeekend(date?: Date): boolean;\n}", "api_method_name": "Calendar", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 47, "since": 8, "api_used": "\u662f", "lines": [" calendar = I18n.getCalendar('zh');\n        cale", "e performance of getCalendar\n    */\n    it('perf", " calendar = I18n.getCalendar('ja', 'japanese');\n", "@tc.desc get the getCalendar value\n    */\n    it", "@tc.desc get the getCalendar value\n    */\n     i", " calendar = I18n.getCalendar('zh', 'chinese');\n ", " * @tc.name test getCalendar interface with zh p", "ertEqual('Gregorian Calendar');\n    })\n\n    /**\n", "e performance of getCalendar\n    * @tc.desc chec", " calendar = I18n.getCalendar('zh');\n        //ac", " calendar = I18n.getCalendar('zh');\n        }\n  ", " calendar = I18n.getCalendar('zh', 'japanese');\n", " * @tc.name test getCalendar interface\n    * @tc", " calendar = I18n.getCalendar('zh');\n        let "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "setTime", "api_method_all": "setTime(date: Date): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 25, "since": 8, "api_used": "\u662f", "lines": ["           calendar.setTime(date1);\n        }\n ", "    * @tc.name test setTime interface with wron", ");\n        calendar.setTimeZone('Asia/Shanghai'", "ormance of calendar.setTime\n    */\n    it('perf", "ormance of calendar.setTimeZone\n    * @tc.desc ", "ormance of calendar.setTime with time param\n   ", "ormance of calendar.setTimeZone\n    */\n    it('", ");\n        calendar.setTime(10540800000);\n     ", "ormance of calendar.setTime with date param\n   ", "    * @tc.name test setTime interface with date", ");\n        calendar.setTime(date1);\n        let", "    * @tc.name test setTime interface\n    * @tc", "           calendar.setTimeZone('Asia/Shanghai'", ");\n        calendar.setTimeZone('AAA');\n       ", "    * @tc.name test setTimeZone and getTimeZone", " * @tc.desc get the setTime value\n    */\n    it", " * @tc.desc get the setTimeZone and getTimeZone", "    * @tc.name test setTimeZone with AAA param ", "           calendar.setTime(10540800000);\n     "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "setTime", "api_method_all": "setTime(time: number): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 25, "since": 8, "api_used": "\u662f", "lines": ["           calendar.setTime(date1);\n        }\n ", "    * @tc.name test setTime interface with wron", ");\n        calendar.setTimeZone('Asia/Shanghai'", "ormance of calendar.setTime\n    */\n    it('perf", "ormance of calendar.setTimeZone\n    * @tc.desc ", "ormance of calendar.setTime with time param\n   ", "ormance of calendar.setTimeZone\n    */\n    it('", ");\n        calendar.setTime(10540800000);\n     ", "ormance of calendar.setTime with date param\n   ", "    * @tc.name test setTime interface with date", ");\n        calendar.setTime(date1);\n        let", "    * @tc.name test setTime interface\n    * @tc", "           calendar.setTimeZone('Asia/Shanghai'", ");\n        calendar.setTimeZone('AAA');\n       ", "    * @tc.name test setTimeZone and getTimeZone", " * @tc.desc get the setTime value\n    */\n    it", " * @tc.desc get the setTimeZone and getTimeZone", "    * @tc.name test setTimeZone with AAA param ", "           calendar.setTime(10540800000);\n     "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "set", "api_method_all": "set(year: number, month: number, date:number, hour?: number, minute?: number, second?: number): void;", "api_type": "", "api_args_count": 6, "api_level": 11, "api_used_count": 174, "since": 7, "api_used": "\u662f", "lines": ["   let value = I18n.setSystemRegion('zh-CN'", "   let value = I18n.setSystemRegion('US');\n", "2000\n    * @tc.name setSystemLocale with zh", "   let value = I18n.setSystemLanguage('en')", "  let region = I18n.setSystemRegion('GB');\n", ");\n        calendar.setMinimalDaysInFirstWe", "   let value = I18n.setSystemLanguage('ko-K", "   let value = I18n.setSystemRegion('ACN');", "1400\n    * @tc.name setSystemRegion with AA", "   let value = I18n.setSystemLocale('en-Lat", "1440\n    * @tc.name setSystemRegion with cn", "   let value = I18n.setSystemLanguage('');\n", "1420\n    * @tc.name setSystemRegion with AC", "  let region = I18n.setSystemRegion('CN');\n", "   let value = I18n.setSystemLanguage('aaa'", "   let value = I18n.setSystemLocale('zh-Han", "   let value = I18n.setSystemLanguage('es-a", "   let value = I18n.setSystemLanguage('it-I", "   let value = I18n.setSystemLocale('zh-AAA", "1200\n    * @tc.name setSystemRegion with US", "1800\n    * @tc.name setSystemLocale with aa", "1300\n    * @tc.name setSystemRegion with nu", "1900\n    * @tc.name setSystemLocale with zh", "   let value = I18n.setSystemLanguage('aabb", ");\n        calendar.setTime(date1);\n       ", "1700\n    * @tc.name setSystemLocale with nu", "  let region = I18n.setSystemRegion('US');\n", "t afterValue = I18n.set24HourClock(hour);\n ", "   let value = I18n.setSystemRegion('cn');\n", "   let value = I18n.setSystemLocale('aa');\n", " * @tc.desc get the setMinimalDaysInFirstWe", "   let value = I18n.setSystemRegion('');\n  ", "   let value = I18n.setSystemLanguage('aa')", "1500\n    * @tc.name setSystemRegion with zh", "1100\n    * @tc.name setSystemLanguage with ", "1600\n    * @tc.name setSystemLocale with en", "   let value = I18n.setSystemLocale('');\n  ", "   let value = I18n.setSystemRegion('AA');\n", "    * @tc.name test setMinimalDaysInFirstWe", "      configService.setConfig(this)\n\n      "], "files": ["I18n.test.js", "Resmgr.test.js", "Lang.test.js", "Perf.test.js", "index.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "setTimeZone", "api_method_all": "setTimeZone(timezone: string): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": [" * @tc.desc get the setTimeZone and getTimeZone val", "ormance of calendar.setTimeZone\n    * @tc.desc chec", "ormance of calendar.setTimeZone\n    */\n    it('perf", "    * @tc.name test setTimeZone and getTimeZone int", ");\n        calendar.setTimeZone('AAA');\n        let", ");\n        calendar.setTimeZone('Asia/Shanghai');\n ", "    * @tc.name test setTimeZone with AAA param and ", "           calendar.setTimeZone('Asia/Shanghai');\n "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "getTimeZone", "api_method_all": "getTimeZone(): string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["est setTimeZone and getTimeZone interface\n    * @tc", " * @tc.desc get the getTimeZone value\n    */\n    it", "let timezone = I18n.getTimeZone('Asia/Shanghai');\n ", "ormance of calendar.getTimeZone\n    */\n    it('perf", "   value = calendar.getTimeZone();\n        }\n      ", "    * @tc.name test getTimeZone method\n    * @tc.de", " the performance of getTimeZone\n    * @tc.desc chec", "    timezone = I18n.getTimeZone('ACT');\n        }\n ", "et value = calendar.getTimeZone();\n        console.", "timezone = calendar.getTimeZone();\n        console.", "the setTimeZone and getTimeZone value\n    */\n    it", "let timezone = I18n.getTimeZone();\n        let valu", "ormance of calendar.getTimeZone\n    * @tc.desc chec", "    timezone = I18n.getTimeZone();\n        }\n      ", " the performance of getTimeZone with zoneID param\n ", "let timezone = I18n.getTimeZone('ACT');\n        let", " with AAA param and getTimeZone interface\n    * @tc", " the performance of getTimeZone\n    */\n    it('perf"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "getFirstDayOfWeek", "api_method_all": "getFirstDayOfWeek(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["   value = calendar.getFirstDayOfWeek();\n        }\n      ", "ek with 7 param and getFirstDayOfWeek interface\n    * @tc", "et value = calendar.getFirstDayOfWeek();\n        console.", "ek with 0 param and getFirstDayOfWeek interface\n    * @tc", "ormance of calendar.getFirstDayOfWeek\n    */\n    it('perf", "firstday = calendar.getFirstDayOfWeek();\n        console.", "tFirstDayOfWeek and getFirstDayOfWeek interface\n    * @tc", "ormance of calendar.getFirstDayOfWeek\n    * @tc.desc chec", "tFirstDayOfWeek and getFirstDayOfWeek value\n    */\n    it", "ek with 8 param and getFirstDayOfWeek interface\n    * @tc"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "setFirstDayOfWeek", "api_method_all": "setFirstDayOfWeek(value: number): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.name test setFirstDayOfWeek with 7 param and ge", "ormance of calendar.setFirstDayOfWeek\n    * @tc.desc chec", "           calendar.setFirstDayOfWeek(1);\n        }\n     ", ");\n        calendar.setFirstDayOfWeek(7);\n        let val", " * @tc.desc get the setFirstDayOfWeek and getFirstDayOfWe", ");\n        calendar.setFirstDayOfWeek(1);\n        let val", ");\n        calendar.setFirstDayOfWeek(0);\n        let val", "    * @tc.name test setFirstDayOfWeek with 8 param and ge", ");\n        calendar.setFirstDayOfWeek(8);\n        let val", "ormance of calendar.setFirstDayOfWeek\n    */\n    it('perf", "    * @tc.name test setFirstDayOfWeek with 0 param and ge", "    * @tc.name test setFirstDayOfWeek and getFirstDayOfWe"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "getMinimalDaysInFirstWeek", "api_method_all": "getMinimalDaysInFirstWeek(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["DaysInFirstWeek and getMinimalDaysInFirstWeek interface\n    * @tc", "DaysInFirstWeek and getMinimalDaysInFirstWeek value\n    */\n    it", "ek with 0 param and getMinimalDaysInFirstWeek interface\n    * @tc", "ormance of calendar.getMinimalDaysInFirstWeek\n    */\n    it('perf", "ek with 7 param and getMinimalDaysInFirstWeek interface\n    * @tc", "ek with 8 param and getMinimalDaysInFirstWeek interface\n    * @tc", "   value = calendar.getMinimalDaysInFirstWeek();\n        }\n      ", "ormance of calendar.getMinimalDaysInFirstWeek\n    * @tc.desc chec", " miniday = calendar.getMinimalDaysInFirstWeek();\n        console.", "et value = calendar.getMinimalDaysInFirstWeek();\n        console."], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "setMinimalDaysInFirstWeek", "api_method_all": "setMinimalDaysInFirstWeek(value: number): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["ormance of calendar.setMinimalDaysInFirstWeek\n    */\n    it('perf", ");\n        calendar.setMinimalDaysInFirstWeek(7);\n        let val", "    * @tc.name test setMinimalDaysInFirstWeek with 0 param and ge", "    * @tc.name test setMinimalDaysInFirstWeek and getMinimalDaysI", "    * @tc.name test setMinimalDaysInFirstWeek with 7 param and ge", "ormance of calendar.setMinimalDaysInFirstWeek\n    * @tc.desc chec", ");\n        calendar.setMinimalDaysInFirstWeek(8);\n        let val", "    * @tc.name test setMinimalDaysInFirstWeek with 8 param and ge", ");\n        calendar.setMinimalDaysInFirstWeek(1);\n        let val", ");\n        calendar.setMinimalDaysInFirstWeek(0);\n        let val", " * @tc.desc get the setMinimalDaysInFirstWeek and getMinimalDaysI", "           calendar.setMinimalDaysInFirstWeek(1);\n        }\n     "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "get", "api_method_all": "get(field: string): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 785, "since": 7, "api_used": "\u662f", "lines": ["onfigService = core.getDefaultService('conf", "syslocale: ' + I18n.getSystemLocale());\n   ", "2280\n    * @tc.name getSystemCountries with", "  let locale = I18n.getSystemLocale();\n    ", "   let value = I18n.getDisplayLanguage('zh-", "   let value = I18n.getDisplayCountry('zh-C", "2200\n    * @tc.name getSystemCountries with", "4300\n    * @tc.name getDisplayCountry with ", "3900\n    * @tc.name getDisplayCountry with ", "    let lang = I18n.getSystemLanguage();\n  ", "2100\n    * @tc.name getSystemLanguages\n    ", "4000\n    * @tc.name getDisplayCountry with ", "   let count = I18n.getSystemCountries('zh-", "   let count = I18n.getSystemCountries('en'", "  const core = Core.getInstance()\n        c", "   let value = I18n.getDisplayCountry('zh',", "3800\n    * @tc.name getDisplayCountry with ", "4100\n    * @tc.name getDisplayCountry with ", "2240\n    * @tc.name getSystemCountries with", "2220\n    * @tc.name getSystemCountries with", "4200\n    * @tc.name getDisplayCountry with ", "  let region = I18n.getSystemRegion();\n    ", "   let count = I18n.getSystemCountries('aaa", "' prelang: ' + I18n.getPreferredLanguageLis", "4600\n    * @tc.name getDisplayLanguage with", "2260\n    * @tc.name getSystemCountries with", "   let value = I18n.getDisplayCountry('zh-H", "4500\n    * @tc.name getDisplayLanguage with", "   let count = I18n.getSystemCountries('');", "    let lang = I18n.getSystemLanguages();\n ", "4400\n    * @tc.name getDisplayLanguage with"], "files": ["I18n.test.js", "Resmgr.test.js", "Lang.test.js", "Perf.test.js", "index.js", "Intl.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "getDisplayName", "api_method_all": "getDisplayName(locale: string): string;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 37, "since": 8, "api_used": "\u662f", "lines": ["let name = calendar.getDisplayName('zh');\n        cons", "    * @tc.name test getDisplayName interface with en p", "    * @tc.name test getDisplayName method with true pa", "et value = timezone.getDisplayName('zh-CN');\n        c", "    * @tc.name test getDisplayName with en-US and true", "    name = calendar.getDisplayName('zh');\n        }\n  ", "    * @tc.name test getDisplayName method with zh-CN p", "et value = timezone.getDisplayName(false);\n        con", "et value = timezone.getDisplayName('zh-CN', false);\n  ", "et value = timezone.getDisplayName();\n        console.", "et value = timezone.getDisplayName('en-US', true);\n   ", "et value = timezone.getDisplayName(true);\n        cons", "    * @tc.name test getDisplayName method\n    * @tc.de", "    * @tc.name test getDisplayName with zh-CN and fals", " the performance of getDisplayName\n    */\n    it('perf", " * @tc.desc get the getDisplayName value\n    */\n    it", "    * @tc.name test getDisplayName interface\n    * @tc", "    * @tc.name test getDisplayName with locale\n    * @", "et value = calendar.getDisplayName('en');\n        cons", "et value = calendar.getDisplayName('zh');\n        cons", "    * @tc.name test getDisplayName with timezone id\n  ", "   value = timezone.getDisplayName('zh-CN');\n        }", "et value = timezone.getDisplayName('zh-CN', true);\n   ", "let name = calendar.getDisplayName('ja');\n        cons", "    * @tc.name test getDisplayName method with false p", " the performance of getDisplayName\n    * @tc.desc chec"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Calendar", "api_method_name": "isWeekend", "api_method_all": "isWeekend(date?: Date): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["et value = calendar.isWeekend();\n        console.", "et value = calendar.isWeekend(new Date(2021, 10, ", "   value = calendar.isWeekend(new Date(2021, 10, ", "    * @tc.name test isWeekend interface\n    * @tc", " * @tc.desc get the isWeekend value\n    */\n    it", " the performance of isWeekend\n    * @tc.desc chec", " the performance of isWeekend\n    */\n    it('perf", "et value = calendar.isWeekend(new Date(2022, 10, "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BreakIterator", "api_method_all": "export class BreakIterator {\n    \n    current(): number;\n\n    \n    first(): number;\n\n    \n    last(): number;\n\n    \n    next(index?: number): number;\n\n    \n    previous(): number;\n\n    \n    setLineBreakText(text: string): void;\n\n    \n    following(offset: number): number;\n\n    \n    getLineBreakText(): string;\n\n    \n    isBoundary(offset: number): boolean;\n}", "api_method_name": "BreakIterator", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BreakIterator", "api_method_name": "current", "api_method_all": "current(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 31, "since": 8, "api_used": "\u662f", "lines": ["t3);\n        expect(current3).assertEqual(8);\n ", "qual(3);\n        // current\n        let current", "t_iterator_1000 ' + current4);\n        expect(c", "t_iterator_1000 ' + current2);\n        expect(c", "current\n        let current4 = iterator.current", "t2);\n        expect(current2).assertEqual(3);\n ", " the performance of current\n    */\n    it('perf", "et value = iterator.current();\n        console.", "t_iterator_1000 ' + current);\n        expect(cu", "current\n        let current3 = iterator.current", "t4);\n        expect(current4).assertEqual(3);\n\n", "t_iterator_0900 ' + current);\n        expect(cu", "tTrue();\n        // current\n        let current", "qual(8);\n        // current\n        let current", "False();\n        // current\n        let current", "   value = iterator.current();\n        }\n      ", " @tc.desc check the current result\n    */\n    i", " current = iterator.current();\n        console.", "current3 = iterator.current();\n        console.", "current2 = iterator.current();\n        console.", "    * @tc.name test current interface\n    * @tc", "current\n        let current = iterator.current(", " the performance of current\n    * @tc.desc chec", "nt);\n        expect(current).assertEqual(0);\n  ", "nt);\n        expect(current).assertEqual(11);\n ", "orld.');\n        // current\n        let current", "current\n        let current2 = iterator.current", "current4 = iterator.current();\n        console.", "t_iterator_1000 ' + current3);\n        expect(c"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BreakIterator", "api_method_name": "first", "api_method_all": "first(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["'i18n_test_7920 ' + firstday);\n        expect", "et value = iterator.first();\n        console.", " the performance of first\n    */\n    it('perf", "ay);\n        expect(firstday).assertEqual(1);", "Time');\n        let firstday = calendar.getFi", "    * @tc.name test first interface\n    * @tc", " the performance of first\n    * @tc.desc chec", " @tc.desc check the first\n    */\n    it('i18n", "   value = iterator.first();\n        }\n      "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BreakIterator", "api_method_name": "last", "api_method_all": "last(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["   value = iterator.last();\n        }\n      ", " the performance of last\n    */\n    it('perf", " @tc.desc check the last interface\n    */\n  ", "    * @tc.name test last interface\n    * @tc", " the performance of last\n    * @tc.desc chec", "et value = iterator.last();\n        console."], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BreakIterator", "api_method_name": "next", "api_method_all": "next(index?: number): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 19, "since": 8, "api_used": "\u662f", "lines": [" next 5\n        let next2 = iterator.next(5)", "// next\n        let next = iterator.next();\n", "    * @tc.name test next interface\n    * @tc", " @tc.desc check the next interface\n    */\n  ", "   value = iterator.next();\n        }\n      ", "et next2 = iterator.next(5);\n        console", "    * @tc.name test next interface with para", "t_iterator_1000 ' + next2);\n        expect(n", " the performance of next\n    * @tc.desc chec", "et value = iterator.next(2);\n        console", " @tc.desc check the next interface with para", " the performance of next\n    */\n    it('perf", "t_iterator_1000 ' + next);\n        expect(ne", "let next = iterator.next();\n        console.", "et value = iterator.next();\n        console.", "xt);\n        expect(next).assertEqual(3);\n  ", "t2);\n        expect(next2).assertEqual(30);\n", "qual(3);\n        // next 5\n        let next2", "qual(0);\n        // next\n        let next = "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BreakIterator", "api_method_name": "previous", "api_method_all": "previous(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["revious\n        let previous = iterator.previous", "et value = iterator.previous();\n        console.", "t_iterator_1000 ' + previous);\n        expect(pr", "    * @tc.name test previous interface\n    * @tc", " the performance of previous\n    * @tc.desc chec", " the performance of previous\n    */\n    it('perf", " @tc.desc check the previous interface\n    */\n  ", "   value = iterator.previous();\n        }\n      ", "us);\n        expect(previous).assertEqual(26);\n ", "ual(30);\n        // previous\n        let previou", "previous = iterator.previous();\n        console."], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BreakIterator", "api_method_name": "setLineBreakText", "api_method_all": "setLineBreakText(text: string): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 21, "since": 8, "api_used": "\u662f", "lines": ["           iterator.setLineBreakText('My name is Tom.Wel", ");\n        iterator.setLineBreakText('My name is Tom.Wel", " the performance of setLineBreakText\n    * @tc.desc chec", " the performance of setLineBreakText\n    */\n    it('perf"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BreakIterator", "api_method_name": "following", "api_method_all": "following(offset: number): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [" @tc.desc check the following interface\n    */\n  ", "ual(26);\n        // following 2\n        let follw", " the performance of following\n    */\n    it('perf", "ollwoing = iterator.following(3);\n        console", "   value = iterator.following(1);\n        }\n     ", "    * @tc.name test following interface\n    * @tc", " the performance of following\n    * @tc.desc chec", "et value = iterator.following(1);\n        console"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BreakIterator", "api_method_name": "getLineBreakText", "api_method_all": "getLineBreakText(): string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": [" the performance of getLineBreakText\n    */\n    it('perf", " @tc.desc check the getLineBreakText interface\n    */\n  ", "et value = iterator.getLineBreakText();\n        console.", "   value = iterator.getLineBreakText();\n        }\n      ", " the performance of getLineBreakText\n    * @tc.desc chec", "    * @tc.name test getLineBreakText interface\n    * @tc"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BreakIterator", "api_method_name": "isBoundary", "api_method_all": "isBoundary(offset: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.name test isBoundary interface\n    * @tc", "et value = iterator.isBoundary(3);\n        console", "   value = iterator.isBoundary(10);\n        }\n    ", "et value = iterator.isBoundary(10);\n        consol", " the performance of isBoundary\n    * @tc.desc chec", "qual(8);\n        // isBoundary\n        let value =", " @tc.desc check the isBoundary interface\n    */\n  ", " the performance of isBoundary\n    */\n    it('perf"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IndexUtil", "api_method_all": "export class IndexUtil {\n    \n    getIndexList(): Array<string>;\n\n    \n    addLocale(locale: string): void;\n\n    \n    getIndex(text: string): string;\n}", "api_method_name": "IndexUtil", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "IndexUtil", "api_method_name": "getIndexList", "api_method_all": "getIndexList(): Array<string>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.name test getIndexList interface\n    * @tc", " the performance of getIndexList\n    * @tc.desc chec", "  let value = index.getIndexList();\n        let len ", " the performance of getIndexList\n    */\n    it('perf", " @tc.desc check the getIndexList interface\n    */\n  ", "      value = index.getIndexList();\n        }\n      "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IndexUtil", "api_method_name": "addLocale", "api_method_all": "addLocale(locale: string): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": [" the performance of addLocale\n    */\n    it('perf", "{\n            index.addLocale('en');\n        }\n  ", " @tc.desc check the addLocale interface\n    */\n  ", " the performance of addLocale\n    * @tc.desc chec", "    * @tc.name test addLocale interface\n    * @tc", "ce();\n        index.addLocale('en');\n        let "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IndexUtil", "api_method_name": "getIndex", "api_method_all": "getIndex(text: string): string;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": [" @tc.desc check the getIndexList interface\n    *", "  let value = index.getIndexList();\n        let ", "  let value = index.getIndex('z');\n        conso", "  let value = index.getIndex('a');\n        conso", "    * @tc.name test getIndexList interface\n    *", " the performance of getIndexList\n    */\n    it('", "    * @tc.name test getIndex interface\n    * @tc", " @tc.desc check the getIndex interface\n    */\n  ", " the performance of getIndexList\n    * @tc.desc ", " the performance of getIndex\n    * @tc.desc chec", "      value = index.getIndex('a');\n        }\n   ", "      value = index.getIndexList();\n        }\n  ", " the performance of getIndex\n    */\n    it('perf"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Character", "api_method_all": "export class Character {\n    \n    isDigit(char: string): boolean;\n\n    \n    isSpaceChar(char: string): boolean;\n\n    \n    isWhitespace(char: string): boolean;\n\n    \n    isRTL(char: string): boolean;\n\n    \n    isIdeograph(char: string): boolean;\n\n    \n    isLetter(char: string): boolean;\n\n    \n    isLowerCase(char: string): boolean;\n\n    \n    isUpperCase(char: string): boolean;\n\n    \n    getType(char: string): string;\n}", "api_method_name": "Character", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 46, "since": 8, "api_used": "\u662f", "lines": ["       value = I18n.Character.isLowerCase('abc');", "   let value = I18n.Character.isDigit('123');\n   ", "   let value = I18n.Character.isLowerCase('abc');", "   let value = I18n.Character.isIdeograph('\u6211');\n ", "   let value = I18n.Character.isLetter('123');\n  ", "   let value = I18n.Character.isIdeograph('\u79c1\u305f\u3061');", "       value = I18n.Character.isUpperCase('ABC');", "   let value = I18n.Character.isLowerCase('ABCdef", "   let value = I18n.Character.getType('a');\n     ", "       value = I18n.Character.isRTL('abc');\n     ", "   let value = I18n.Character.isSpaceChar(' ');\n ", "   let value = I18n.Character.isIdeograph('abc');", "   let value = I18n.Character.isLetter('123abc');", "   let value = I18n.Character.getType('   ');\n   ", "   let value = I18n.Character.isDigit('');\n      ", "   let value = I18n.Character.isUpperCase('ABCdef", "   let value = I18n.Character.isSpaceChar('   ');", "   let value = I18n.Character.isRTL('\u6211\u662f\u5c0f\u660e');\n    ", "   let value = I18n.Character.getType('123');\n   ", "   let value = I18n.Character.isWhitespace('\\u000", "   let value = I18n.Character.isDigit('123abc');\n", "   let value = I18n.Character.isLetter('abc123');", "   let value = I18n.Character.isLowerCase('ABC');", "   let value = I18n.Character.isUpperCase('ABC');", "   let value = I18n.Character.isUpperCase('abc');", "   let value = I18n.Character.getType('\u0661\u0662\u0663\u0664\u0665\u0666\u0667');", "       value = I18n.Character.isWhitespace('abc')", "   let value = I18n.Character.isSpaceChar('abc');", "   let value = I18n.Character.isIdeograph('\uc6b0\ub9ac');\n", "   let value = I18n.Character.isLowerCase('abcDEF", "       value = I18n.Character.isDigit('abc');\n   ", "       value = I18n.Character.isLetter('abc');\n  ", "   let value = I18n.Character.isDigit('abc123');\n", "   let value = I18n.Character.isRTL('\u0661\u0662\u0663\u0664\u0665\u0666\u0667');\n ", "   let value = I18n.Character.isUpperCase('abcDEF", "   let value = I18n.Character.isWhitespace('abc')", "   let value = I18n.Character.isDigit('abc');\n   ", "   let value = I18n.Character.isRTL('abc');\n     ", "   let value = I18n.Character.isRTL('\u0646\u062d\u0646');\n     ", "   let value = I18n.Character.isLetter('abc');\n  ", "   let value = I18n.Character.getType('123abc');\n", "       value = I18n.Character.isSpaceChar('abc');", "   let value = I18n.Character.getType('ABC');\n   ", "   let value = I18n.Character.getType('ABCdef');\n", "       value = I18n.Character.isIdeograph('abc');", "       value = I18n.Character.getType('a');\n     "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Character", "api_method_name": "isDigit", "api_method_all": "isDigit(char: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": ["    * @tc.name test isDigit interface\n    * @tc", "ue = I18n.Character.isDigit('123');\n        con", "    * @tc.name test isDigit interface with abc1", " the performance of isDigit\n    */\n    it('perf", "    * @tc.name test isDigit interface with null", "ue = I18n.Character.isDigit('abc');\n        con", "    * @tc.name test isDigit interface with 123a", "ue = I18n.Character.isDigit('123abc');\n        ", "ue = I18n.Character.isDigit('abc123');\n        ", " the performance of isDigit\n    * @tc.desc chec", "ue = I18n.Character.isDigit('abc');\n        }\n ", "ue = I18n.Character.isDigit('');\n        consol", "    * @tc.name test isDigit interface with 123 ", " @tc.desc check the isDigit interface\n    */\n  "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Character", "api_method_name": "isSpaceChar", "api_method_all": "isSpaceChar(char: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["ue = I18n.Character.isSpaceChar('abc');\n        }\n ", "    * @tc.name test isSpaceChar interface with abc ", "ue = I18n.Character.isSpaceChar('   ');\n        con", " the performance of isSpaceChar\n    * @tc.desc chec", "    * @tc.name test isSpaceChar interface with mult", "ue = I18n.Character.isSpaceChar('abc');\n        con", "ue = I18n.Character.isSpaceChar(' ');\n        conso", "    * @tc.name test isSpaceChar interface with one ", " @tc.desc check the isSpaceChar interface\n    */\n  ", " the performance of isSpaceChar\n    */\n    it('perf"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Character", "api_method_name": "isWhitespace", "api_method_all": "isWhitespace(char: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["ue = I18n.Character.isWhitespace('abc');\n        }\n ", "    * @tc.name test isWhitespace interface with \\u00", "    * @tc.name test isWhitespace interface with abc ", "ue = I18n.Character.isWhitespace('abc');\n        con", "ue = I18n.Character.isWhitespace('\\u0009');\n        ", " the performance of isWhitespace\n    */\n    it('perf", " the performance of isWhitespace\n    * @tc.desc chec", " @tc.desc check the isWhitespace interface\n    */\n  "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Character", "api_method_name": "isRTL", "api_method_all": "isRTL(char: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": [" the performance of isRTL\n    * @tc.desc chec", " @tc.desc check the isRTL interface\n    */\n  ", "ue = I18n.Character.isRTL('abc');\n        con", "    * @tc.name test isRTL interface with en-U", "    * @tc.name test isRTL interface with ar p", "ue = I18n.Character.isRTL('\u6211\u662f\u5c0f\u660e');\n        co", "   let value = I18n.isRTL('ar');\n        cons", "    * @tc.name test isRTL interface with abc ", "ue = I18n.Character.isRTL('\u0646\u062d\u0646');\n        con", "    * @tc.name test isRTL interface with \u0646\u062d\u0646 ", "ue = I18n.Character.isRTL('\u0661\u0662\u0663\u0664\u0665\u0666\u0667');\n       ", "   let value = I18n.isRTL('en-US');\n        c", "    * @tc.name test isRTL interface with \u6211\u662f\u5c0f\u660e", "    * @tc.name test isRTL interface with \u0661\u0662\u0663\u0664", "   let value = I18n.isRTL('zh-CN');\n        c", "       value = I18n.isRTL('zh-CN');\n        }", " * @tc.desc get the isRTL value\n    */\n    it", "    * @tc.name test isRTL interface with zh-C", "ue = I18n.Character.isRTL('abc');\n        }\n ", " the performance of isRTL\n    */\n    it('perf"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Character", "api_method_name": "isIdeograph", "api_method_all": "isIdeograph(char: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": [" the performance of isIdeograph\n    * @tc.desc chec", "    * @tc.name test isIdeograph interface with abc ", "ue = I18n.Character.isIdeograph('abc');\n        con", "    * @tc.name test isIdeograph interface with '\u79c1\u305f'", " the performance of isIdeograph\n    */\n    it('perf", " @tc.desc check the isIdeograph interface\n    */\n  ", "ue = I18n.Character.isIdeograph('\uc6b0\ub9ac');\n        cons", "ue = I18n.Character.isIdeograph('\u79c1\u305f\u3061');\n        con", "ue = I18n.Character.isIdeograph('abc');\n        }\n ", "ue = I18n.Character.isIdeograph('\u6211');\n        conso", "    * @tc.name test isIdeograph interface with '\u6211' ", "    * @tc.name test isIdeograph interface with '\uc6b0\ub9ac'"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Character", "api_method_name": "isLetter", "api_method_all": "isLetter(char: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["    * @tc.name test isLetter interface with 123a", "    * @tc.name test isLetter interface with abc ", "ue = I18n.Character.isLetter('123');\n        con", " the performance of isLetter\n    */\n    it('perf", "    * @tc.name test isLetter interface with 123 ", "ue = I18n.Character.isLetter('abc');\n        con", " @tc.desc check the isLetter interface\n    */\n  ", "    * @tc.name test isLetter interface with abc1", "ue = I18n.Character.isLetter('abc123');\n        ", " the performance of isLetter\n    * @tc.desc chec", "ue = I18n.Character.isLetter('abc');\n        }\n ", "ue = I18n.Character.isLetter('123abc');\n        "], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Character", "api_method_name": "isLowerCase", "api_method_all": "isLowerCase(char: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["ue = I18n.Character.isLowerCase('ABC');\n        con", " the performance of isLowerCase\n    */\n    it('perf", "ue = I18n.Character.isLowerCase('abcDEF');\n        ", " the performance of isLowerCase\n    * @tc.desc chec", "ue = I18n.Character.isLowerCase('ABCdef');\n        ", "ue = I18n.Character.isLowerCase('abc');\n        con", "    * @tc.name test isLowerCase interface with abc ", "   * @tc.name ftest isLowerCase interface with ABC ", "    * @tc.name test isLowerCase interface with ABCd", " @tc.desc check the isLowerCase interface\n    */\n  ", "ue = I18n.Character.isLowerCase('abc');\n        }\n ", "    * @tc.name test isLowerCase interface with abcD"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Character", "api_method_name": "isUpperCase", "api_method_all": "isUpperCase(char: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["    * @tc.name test isUpperCase interface with ABC ", "    * @tc.name test isUpperCase interface with abc ", "    * @tc.name test isUpperCase interface with abcD", "ue = I18n.Character.isUpperCase('abcDEF');\n        ", " @tc.desc check the isUpperCase interface\n    */\n  ", "ue = I18n.Character.isUpperCase('abc');\n        con", "ue = I18n.Character.isUpperCase('ABCdef');\n        ", "    * @tc.name test isUpperCase interface with ABCd", "ue = I18n.Character.isUpperCase('ABC');\n        }\n ", " the performance of isUpperCase\n    * @tc.desc chec", "ue = I18n.Character.isUpperCase('ABC');\n        con", " the performance of isUpperCase\n    */\n    it('perf"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Character", "api_method_name": "getType", "api_method_all": "getType(char: string): string;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 24, "since": 0, "api_used": "\u662f", "lines": ["ue = I18n.Character.getType('123');\n        con", "    * @tc.name test getType interface with mult", "ue = I18n.Character.getType('ABCdef');\n        ", " the performance of getType\n    * @tc.desc chec", "ue = I18n.Character.getType('   ');\n        con", "ue = I18n.Character.getType('a');\n        }\n   ", " the performance of getType\n    */\n    it('perf", "    * @tc.name test getType interface with 123a", "ue = I18n.Character.getType('a');\n        conso", "    * @tc.name test getType interface with ABCd", "    * @tc.name test getType interface with 123 ", "   * @tc.name ftest getType interface with ABC ", "ue = I18n.Character.getType('\u0661\u0662\u0663\u0664\u0665\u0666\u0667');\n       ", " @tc.desc check the getType interface\n    */\n  ", "ue = I18n.Character.getType('ABC');\n        con", "ue = I18n.Character.getType('123abc');\n        ", "    * @tc.name test getType interface with \u0661\u0662\u0663\u0664", "    * @tc.name test getType interface with a pa"], "files": ["I18n.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TimeZone", "api_method_all": "export class TimeZone {\n    \n    getID(): string;\n\n    \n    getDisplayName(locale?: string, isDST?: boolean): string;\n\n    \n    getRawOffset(): number;\n\n    \n    getOffset(date?: number): number;\n}", "api_method_name": "TimeZone", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 48, "since": 8, "api_used": "\u662f", "lines": ["ance of calendar.getTimeZone\n    */\n    it('perf", "value = calendar.getTimeZone();\n        }\n      ", " * @tc.name test getTimeZone method\n    * @tc.de", " setTimeZone and getTimeZone value\n    */\n    it", "ezone = calendar.getTimeZone();\n        console.", "e performance of getTimeZone with zoneID param\n ", " timezone = I18n.getTimeZone('ACT');\n        }\n ", " setTimeZone and getTimeZone interface\n    * @tc", "@tc.desc get the setTimeZone and getTimeZone val", " * @tc.name test setTimeZone and getTimeZone int", "ance of calendar.getTimeZone\n    * @tc.desc chec", " timezone = I18n.getTimeZone('Asia/Shanghai');\n ", " timezone = I18n.getTimeZone('ACT');\n        let", " timezone = I18n.getTimeZone();\n        }\n      ", "        calendar.setTimeZone('AAA');\n        let", "ance of calendar.setTimeZone\n    */\n    it('perf", "value = calendar.getTimeZone();\n        console.", "e performance of getTimeZone\n    */\n    it('perf", "e performance of getTimeZone\n    * @tc.desc chec", " timezone = I18n.getTimeZone();\n        let valu", "th AAA param and getTimeZone interface\n    * @tc", "@tc.desc get the getTimeZone value\n    */\n    it", "        calendar.setTimeZone('Asia/Shanghai');\n ", " * @tc.name test setTimeZone with AAA param and ", "ance of calendar.setTimeZone\n    * @tc.desc chec"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TimeZone", "api_method_name": "getID", "api_method_all": "getID(): string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": [" * @tc.desc get the getID value\n    */\n    it", " the performance of getID\n    */\n    it('perf", "    * @tc.name test getID\n    * @tc.desc get ", "et value = timezone.getID();\n        console.", "   value = timezone.getID();\n        }\n      ", " the performance of getID\n    * @tc.desc chec"], "files": ["Perf.test.js", "Lang.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TimeZone", "api_method_name": "getDisplayName", "api_method_all": "getDisplayName(locale?: string, isDST?: boolean): string;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 37, "since": 8, "api_used": "\u662f", "lines": ["let name = calendar.getDisplayName('zh');\n        cons", "    * @tc.name test getDisplayName interface with en p", "    * @tc.name test getDisplayName method with true pa", "et value = timezone.getDisplayName('zh-CN');\n        c", "    * @tc.name test getDisplayName with en-US and true", "    name = calendar.getDisplayName('zh');\n        }\n  ", "    * @tc.name test getDisplayName method with zh-CN p", "et value = timezone.getDisplayName(false);\n        con", "et value = timezone.getDisplayName('zh-CN', false);\n  ", "et value = timezone.getDisplayName();\n        console.", "et value = timezone.getDisplayName('en-US', true);\n   ", "et value = timezone.getDisplayName(true);\n        cons", "    * @tc.name test getDisplayName method\n    * @tc.de", "    * @tc.name test getDisplayName with zh-CN and fals", " the performance of getDisplayName\n    */\n    it('perf", " * @tc.desc get the getDisplayName value\n    */\n    it", "    * @tc.name test getDisplayName interface\n    * @tc", "    * @tc.name test getDisplayName with locale\n    * @", "et value = calendar.getDisplayName('en');\n        cons", "et value = calendar.getDisplayName('zh');\n        cons", "    * @tc.name test getDisplayName with timezone id\n  ", "   value = timezone.getDisplayName('zh-CN');\n        }", "et value = timezone.getDisplayName('zh-CN', true);\n   ", "let name = calendar.getDisplayName('ja');\n        cons", "    * @tc.name test getDisplayName method with false p", " the performance of getDisplayName\n    * @tc.desc chec"], "files": ["I18n.test.js", "Lang.test.js", "Perf.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TimeZone", "api_method_name": "getRawOffset", "api_method_all": "getRawOffset(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": [" the performance of getRawOffset\n    * @tc.desc chec", "    * @tc.name test getRawOffset method\n    * @tc.de", " * @tc.desc get the getRawOffset value\n    */\n    it", "et value = timezone.getRawOffset();\n        console.", "    * @tc.name test getRawOffset method with timezon", "   value = timezone.getRawOffset();\n        }\n      ", " the performance of getRawOffset\n    */\n    it('perf"], "files": ["Perf.test.js", "Lang.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TimeZone", "api_method_name": "getOffset", "api_method_all": "getOffset(date?: number): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["et value = timezone.getOffset();\n        console.", " the performance of getOffset\n    */\n    it('perf", "et value = timezone.getOffset(10540800000);\n     ", "    * @tc.name test getOffset method with timezon", " the performance of getOffset\n    * @tc.desc chec", "    * @tc.name test getOffset method\n    * @tc.de", "   value = timezone.getOffset();\n        }\n      ", "    * @tc.name test getOffset method with date an", "    * @tc.name test getOffset method with date pa", " * @tc.desc get the getOffset value\n    */\n    it"], "files": ["Perf.test.js", "Lang.test.js"], "is_white": " ", "desc": " "}]}