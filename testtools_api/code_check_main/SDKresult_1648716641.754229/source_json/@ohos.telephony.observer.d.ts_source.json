{"subsystem_ch": "\u7535\u8bdd\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "telephony", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.telephony.observer", "api": [{"api_class_name": "observer", "api_method_all": "declare namespace observer {\n  type NetworkState = radio.NetworkState;\n  type SignalInformation = radio.SignalInformation;\n  type CellInformation = radio.CellInformation;\n  type DataConnectState = data.DataConnectState;\n  type RatType = radio.RadioTechnology;\n  type DataFlowType = data.DataFlowType;\n  type CallState = call.CallState;\n  type CardType = sim.CardType;\n  type SimState = sim.SimState;\n\n  \n  function on(type: 'networkStateChange', callback: Callback<NetworkState>): void;\n  function on(type: 'networkStateChange', options: { slotId: number }, callback: Callback<NetworkState>): void;\n\n  function off(type: 'networkStateChange', callback?: Callback<NetworkState>): void;\n\n  \n  function on(type: 'signalInfoChange', callback: Callback<Array<SignalInformation>>): void;\n  function on(type: 'signalInfoChange', options: { slotId: number },\n    callback: Callback<Array<SignalInformation>>): void;\n\n  function off(type: 'signalInfoChange', callback?: Callback<Array<SignalInformation>>): void;\n\n  \n  function on(type: 'cellInfoChange', callback: Callback<Array<CellInformation>>): void;\n  function on(type: 'cellInfoChange', options: { slotId: number },\n    callback: Callback<Array<CellInformation>>): void;\n\n  \n  function off(type: 'cellInfoChange', callback?: Callback<Array<CellInformation>>): void;\n\n  \n  function on(type: 'cellularDataConnectionStateChange',\n    callback: Callback<{ state: DataConnectState, network: RatType }>): void;\n  function on(type: 'cellularDataConnectionStateChange', options: { slotId: number },\n    callback: Callback<{ state: DataConnectState, network: RatType }>): void;\n\n  \n  function off(type: 'cellularDataConnectionStateChange',\n    callback?: Callback<{ state: DataConnectState, network: RatType }>): void;\n\n  \n  function on(type: 'cellularDataFlowChange', callback: Callback<DataFlowType>): void;\n  function on(type: 'cellularDataFlowChange', options: { slotId: number },\n    callback: Callback<DataFlowType>): void;\n\n  \n  function off(type: 'cellularDataFlowChange', callback?: Callback<DataFlowType>): void;\n\n  \n  function on(type: 'callStateChange', callback: Callback<{ state: CallState, number: string }>): void;\n  function on(type: 'callStateChange', options: { slotId: number },\n    callback: Callback<{ state: CallState, number: string }>): void;\n\n  function off(type: 'callStateChange', callback?: Callback<{ state: CallState, number: string }>): void;\n\n  \n  function on(type: 'simStateChange', callback: Callback<SimStateData>): void;\n  function on(type: 'simStateChange', options: { slotId: number }, callback: Callback<SimStateData>): void;\n\n  \n  function off(type: 'simStateChange', callback?: Callback<SimStateData>): void;\n\n  \n  export interface SimStateData {\n    type: CardType;\n    state: SimState;\n    \n    reason: LockReason;\n  }\n\n  \n  export enum LockReason {\n    SIM_NONE,\n    SIM_PIN,\n    SIM_PUK,\n    SIM_PN_PIN, //Network Personalization (refer 3GPP TS 22.022 [33])\n    SIM_PN_PUK,\n    SIM_PU_PIN, //network sUbset Personalization (refer 3GPP TS 22.022 [33])\n    SIM_PU_PUK,\n    SIM_PP_PIN, //service Provider Personalization (refer 3GPP TS 22.022 [33])\n    SIM_PP_PUK,\n    SIM_PC_PIN, //Corporate Personalization (refer 3GPP TS 22.022 [33])\n    SIM_PC_PUK,\n    SIM_SIM_PIN, //SIM/USIM personalisation (refer 3GPP TS 22.022 [33])\n    SIM_SIM_PUK,\n  }\n}", "api_method_name": "observer", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 293, "since": 0, "api_used": "\u662f", "lines": ["'Telephony_observer_observer_DataConnectState_01", "on (done) {\n        observer.off('signalInfoChan", " Telephony_observer_observer_DataConnectState_01", "tOptionsJsunit();\n  observerJsunit();\n  radioJsu", "rt default function observerJsunit() {\n  describ", "om '@ohos.telephony.observer';\n\nlet hunupTimeOut", "\n            func = observer.once;\n        } els", "sage = `${caseName} observer.once or observer.on", " \n    it('Telephony_observer_observer_DataConnec", "hony.radio';\nimport observer from '@ohos.telepho", "********* Telephony_observer_observer_DataConnec", "on (done) {\n        observer.on('callStateChange", "phony.call';\nimport observer from '@ohos.telepho", "nction () {\n        observer.off('callStateChang", "nge listen and test observer.off() to view the c", "                    observer.off('callStateChang", "on (done) {\n        observer.off('networkStateCh", "om '@ohos.telephony.observer'\nimport sim from \"@", "om '@ohos.telephony.observer'\nimport cellular fr", "`);\n                observer.off('callStateChang", " Error(`${caseName} observer.once or observer.on", "on (done) {\n        observer.on('networkStateCha", "om '@ohos.telephony.observer'\nimport {LockReason", "sunit/index'\nimport observer from '@ohos.telepho", "e} observer.once or observer.on is not exit,opti", "om '@ohos.telephony.observer';\nimport {describe,", "\n            func = observer.on;\n        }\n     ", "om '@ohos.telephony.observer';\nimport { describe", "it.test.ets'\nimport observerJsunit from './Obser", "on (done) {\n        observer.on('signalInfoChang", "nge listen and test observer.on({slotId:0}) to v"], "files": ["ScenceInCalling.js", "ObserverJsunit.test.ets", "NetworkSearchErrors.test.js", "List.test.ets", "CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'networkStateChange', callback: Callback<NetworkState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'networkStateChange', options: { slotId: number }, callback: Callback<NetworkState>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "off", "api_method_all": "function off(type: 'networkStateChange', callback?: Callback<NetworkState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 403, "since": 8, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'signalInfoChange', callback: Callback<Array<SignalInformation>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'signalInfoChange', options: { slotId: number },\n    callback: Callback<Array<SignalInformation>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "off", "api_method_all": "function off(type: 'signalInfoChange', callback?: Callback<Array<SignalInformation>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 403, "since": 8, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'cellInfoChange', callback: Callback<Array<CellInformation>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'cellInfoChange', options: { slotId: number },\n    callback: Callback<Array<CellInformation>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "off", "api_method_all": "function off(type: 'cellInfoChange', callback?: Callback<Array<CellInformation>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 403, "since": 8, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'cellularDataConnectionStateChange',\n    callback: Callback<{ state: DataConnectState, network: RatType }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'cellularDataConnectionStateChange', options: { slotId: number },\n    callback: Callback<{ state: DataConnectState, network: RatType }>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "off", "api_method_all": "function off(type: 'cellularDataConnectionStateChange',\n    callback?: Callback<{ state: DataConnectState, network: RatType }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 403, "since": 8, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'cellularDataFlowChange', callback: Callback<DataFlowType>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'cellularDataFlowChange', options: { slotId: number },\n    callback: Callback<DataFlowType>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "off", "api_method_all": "function off(type: 'cellularDataFlowChange', callback?: Callback<DataFlowType>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 403, "since": 8, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'callStateChange', callback: Callback<{ state: CallState, number: string }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'callStateChange', options: { slotId: number },\n    callback: Callback<{ state: CallState, number: string }>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "off", "api_method_all": "function off(type: 'callStateChange', callback?: Callback<{ state: CallState, number: string }>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 403, "since": 8, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'simStateChange', callback: Callback<SimStateData>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "on", "api_method_all": "function on(type: 'simStateChange', options: { slotId: number }, callback: Callback<SimStateData>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "observer", "api_method_name": "off", "api_method_all": "function off(type: 'simStateChange', callback?: Callback<SimStateData>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 403, "since": 8, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SimStateData", "api_method_all": "export interface SimStateData {\n    type: CardType;\n    state: SimState;\n    \n    reason: LockReason;\n  }", "api_method_name": "SimStateData", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 52, "since": 7, "api_used": "\u662f", "lines": [" Telephony_observer_SimStateData_type_0200\n     * @t", " Telephony_observer_SimStateData_type_0100\n     * @t", " Telephony_observer_SimStateData_type_0300 Test end ", " the state value of SimStateData object\n     */\n    ", "'Telephony_observer_SimStateData_type_0100', 0, func", " Telephony_observer_SimStateData_state_0200 Test sta", " Telephony_observer_SimStateData_type_0100 Test end ", "\n      const ready: SimStateData = {\n        state: ", " Telephony_observer_SimStateData_state_0300 Test sta", "      const loaded: SimStateData = {\n        state: ", "'Telephony_observer_SimStateData_type_0300', 0, func", "  const cuDualMode: SimStateData = {\n        type: s", " Telephony_observer_SimStateData_state_0200 Test end", " Telephony_Observer_SimStateData_Reason Test start *", "'Telephony_Observer_SimStateData_Reason', 0, async f", "      const locked: SimStateData = {\n        state: ", "     const unknown: SimStateData = {\n        state: ", "'Telephony_observer_SimStateData_state_0200', 0, fun", "  const dualModeCG: SimStateData = {\n        type: s", " Telephony_observer_SimStateData_type_0200 Test star", " Telephony_observer_SimStateData_type_0300 Test star", "'Telephony_observer_SimStateData_type_0200', 0, func", "nst singleModeUSim: SimStateData = {\n        type: s", " Telephony_observer_SimStateData_type_0100 Test star", "nst singleModeRUim: SimStateData = {\n        type: s", "/Utils.ets'\nimport {SimStateData} from '@ohos.teleph", " Telephony_observer_SimStateData_type_0300\n     * @t", " ctNationalRoaming: SimStateData = {\n        type: s", " Telephony_observer_SimStateData_state_0100 Test end", " Telephony_observer_SimStateData_state_0300\n     * @", " Telephony_observer_SimStateData_state_0300 Test end", "  const notPresent: SimStateData = {\n        state: ", " Telephony_observer_SimStateData_state_0100\n     * @", "nst singleModeIsim: SimStateData = {\n        type: s", " Telephony_Observer_SimStateData_Reason\n     * @tc.n", "'Telephony_observer_SimStateData_state_0100', 0, fun", " Telephony_observer_SimStateData_state_0100 Test sta", "k the type value of SimStateData object\n     */\n    ", " Telephony_observer_SimStateData_type_0200 Test end ", "dualModeTelecomLte: SimStateData = {\n        type: s", "  const dualModeUg: SimStateData = {\n        type: s", "    const notReady: SimStateData = {\n        state: ", " Telephony_observer_SimStateData_state_0200\n     * @", "'Telephony_observer_SimStateData_state_0300', 0, fun", "  const singleMode: SimStateData = {\n        type: s", "     const unknown: SimStateData = {\n        type: s"], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SimStateData", "api_method_name": "type", "api_method_all": "type: CardType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 843, "since": 6, "api_used": "\u662f", "lines": ["itCancel (caseName, type, slotId) {\n    retu", "\n     *             type TRANSFER_TYPE_NO_RE", "ng (data) {\n    if (typeof data === 'object'", "tId SLOT_ID_INVALID type RESTRICTION_TYPE_AL", "\n     *             type TRANSFER_TYPE_NOT_R", " });\n    }\n\n    if (typeof args[args.length ", "LE,\n                type:TRANSFER_TYPE_UNCON", "     .decoration({ \"type\": TextDecorationTyp", "ey('panel2')\n      .type(PanelType.Minibar)\n", "le\")\n      }\n      .type(ButtonType.Capsule)", "ISABLE,\n            type:TRANSFER_TYPE_NO_RE", "ngType,\n            type,\n            phoneN", "tCalling (caseName, type, mode, slotId) {\n  ", "get: \"pages/index\", type: NavigationType.Rep", "\"3.Normal\")\n      }.type(ButtonType.Normal)\n", "\n     *             type TRANSFER_TYPE_UNCON", " scenceLimitCalling type:${type},mode:${mode", "lor: Color\n  }> = { type: TextDecorationType", "LimitCalling type:${type},mode:${mode}`);\n  ", " 40, 20], max: 100, type: DataPanelType.Line", "ALID, {\n            type:RESTRICTION_TYPE_AL", "ef = Object.getPrototypeOf(global) || global", " 40, 20], max: 100, type: DataPanelType.Circ", "} scenceLimitCancel type:${type}`);\n        ", "n: decoration<{\n    type: TextDecorationType", "t args = Array.prototype.slice.call(argument", "T_ID, {\n            type,\n            mode:R", "get: \"pages/index\", type: NavigationType.Bac", "key('panel')\n      .type(PanelType.Foldable)", "      .decoration({ type: TextDecorationType", "Button('1.value', { type: ButtonType.Circle,", "eName, settingType, type, phoneNumber) {\n   ", "get the data stream type and\n     *         ", "ey('panel3')\n      .type(PanelType.Temporary", "eLimitCancel type:${type}`);\n        call.se", "      }\n        if (typeof func !== 'functio", "get: \"pages/index\", type: NavigationType.Pus", ".getTime();\n    if (typeof args[args.length ", "T_ID, {\n            type,\n            mode,\n"], "files": ["Utils.ets", "Stability_test.js", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "ScenceLimitCalling.js", "Span.ets", "Contacts_test.js", "ContactCard_test.js", "Panel.ets", "ConvertOptionsJsunit.test.ets", "common.js", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "SimManager.test.js", "ApiToPromise.js", "Voicemail_test.js", "ScenceTransfer.js", "index.js", "CallManageAll.test.js", "SmsMmsError.test.js", "ApiToPromisePerfomance.js", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "ApiToPromiseReliability.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SimStateData", "api_method_name": "state", "api_method_all": "state: SimState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 134, "since": 7, "api_used": "\u662f", "lines": ["information at this state\nexport function sce", " reachState,get the state CALL_STATUS_DISCONN", "\n            find = stateStorage.find(ele => ", ", stateEffect: this.stateEffect })\n        .f", "tate) {\n    return (state === CALL_STATUS_DIS", "ngupCall2 get right state error,error:${toStr", "Info) {\n            stateStorage.push({...cal", "information of this state\nexport function sce", " ButtonType.Circle, stateEffect: this.stateEf", "cence,when specific state arrive,we get the i", "tc.name    Unwanted state,run function cancel", "Storage:${toString({stateStorage})}`);\n      ", "tc.name    Unwanted state,run function setMut", "nupTimeOut);\n}\n\nlet stateStorage = [];\nexport", " the information of state when unHoldCall the", "         let find = stateStorage.find(ele => ", "testcase {\n  @State stateEffect: boolean = tr", " the information of state at CALL_STATUS_HOLD", "tc.name    Unwanted state,run function setAud", "lding get the right state error,error:${toStr", "angup get the right state success ,data:${toS", "me} reach the right state error,error:${toStr", "angupCall get right state success,data:${toSt", "hStateTimeout);\n    stateStorage = [];\n    le", "            \"answer_state\": \"1\"\n             ", "tc.name    Unwanted state ,run the function i", "State,get the right state checkState:${checkS", "lding get the right state success,data:${toSt", "ngupCall2 get right state success,data:${toSt", "eInCalling,specific state arrive,get the info", "angupCall get right state error,error:${toStr", "ow:${toString(now)},stateStorage:${toString({", "angup get the right state error,error:${toStr", "tc.name    Unwanted state,run function muteRi", "function isHanupEd (state) {\n    return (stat", "_DISCONNECTING) || (state === CALL_STATUS_DIS", "CALL_STATUS_HOLDING state\nexport function sce", "me} reach the right state success,data:${toSt", "ype.Capsule)\n      .stateEffect(false)\n      ", " the information of state when hunup the call"], "files": ["ConnectionJsunit.test.ets", "Calllog_test.js", "Stability_test.js", "SimJsunit.test.ets", "ScenceInCalling.js", "CallManageAll.test.js", "Performance_test.js", "Button.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "RadioSecondJsunit.test.ets", "SimManager.test.js", "common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SimStateData", "api_method_name": "reason", "api_method_all": "reason: LockReason", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["bSocketCloseOptions.reason).assertEqual(\"test ", "bSocketCloseOptions_reason_0100', 0, async fun", "   code: 1,\n        reason: \"test reason\"\n    ", "      reason: \"test reason\"\n      }\n      expe", "d)\n        || (data.reason == null || data.rea", "bSocketCloseOptions_reason_0100 Test start****", ").assertEqual(\"test reason\");\n      console.lo", "bSocketCloseOptions_reason_0100 Test end******", "son == null || data.reason === undefined)){\n  ", "      reason: \"test reason\"\n      }\n      webS"], "files": ["ObserverJsunit.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_all": "export enum LockReason {\n    SIM_NONE,\n    SIM_PIN,\n    SIM_PUK,\n    SIM_PN_PIN, //Network Personalization (refer 3GPP TS 22.022 [33])\n    SIM_PN_PUK,\n    SIM_PU_PIN, //network sUbset Personalization (refer 3GPP TS 22.022 [33])\n    SIM_PU_PUK,\n    SIM_PP_PIN, //service Provider Personalization (refer 3GPP TS 22.022 [33])\n    SIM_PP_PUK,\n    SIM_PC_PIN, //Corporate Personalization (refer 3GPP TS 22.022 [33])\n    SIM_PC_PUK,\n    SIM_SIM_PIN, //SIM/USIM personalisation (refer 3GPP TS 22.022 [33])\n    SIM_SIM_PUK,\n  }", "api_method_name": "LockReason", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 61, "since": 8, "api_used": "\u662f", "lines": ["_PP_PUK property of LockReason\n     */\n    it('Tel", " Telephony_observer_LockReason_SIM_NONE_0100 Test ", "_PU_PIN property of LockReason\n     */\n    it('Tel", "pect(4).assertEqual(LockReason.SIM_PN_PUK)\n      d", "'Telephony_observer_LockReason_SIM_PP_PIN_0100', 0", "'Telephony_observer_LockReason_SIM_NONE_0100', 0, ", "'Telephony_observer_LockReason_SIM_PC_PUK_0100', 0", "_PU_PUK property of LockReason\n     */\n    it('Tel", " Telephony_observer_LockReason_SIM_PN_PUK_0100\n   ", "_PN_PUK property of LockReason\n     */\n    it('Tel", " Telephony_observer_LockReason_SIM_PP_PIN_0100 Tes", "_PC_PIN property of LockReason\n     */\n    it('Tel", "pect(8).assertEqual(LockReason.SIM_PP_PUK)\n      d", " Telephony_observer_LockReason_SIM_PU_PUK_0100 Tes", "pect(0).assertEqual(LockReason.SIM_NONE)\n      don", " Telephony_observer_LockReason_SIM_NONE_0100\n     ", " Telephony_observer_LockReason_SIM_PP_PUK_0100 Tes", " Telephony_observer_LockReason_SIM_PU_PUK_0100\n   ", " Telephony_observer_LockReason_SIM_PU_PIN_0100\n   ", " Telephony_observer_LockReason_SIM_SIM_PIN_0100\n  ", "'Telephony_observer_LockReason_SIM_PC_PIN_0100', 0", " Telephony_observer_LockReason_SIM_PC_PIN_0100\n   ", "y.observer'\nimport {LockReason} from '@ohos.teleph", "'Telephony_observer_LockReason_SIM_PN_PUK_0100', 0", "IM_NONE property of LockReason\n     */\n    it('Tel", "_PP_PIN property of LockReason\n     */\n    it('Tel", " Telephony_observer_LockReason_SIM_PP_PIN_0100\n   ", " Telephony_observer_LockReason_SIM_PC_PUK_0100\n   ", " Telephony_observer_LockReason_SIM_PN_PUK_0100 Tes", "pect(6).assertEqual(LockReason.SIM_PU_PUK)\n      d", " Telephony_observer_LockReason_SIM_PC_PIN_0100 Tes", "'Telephony_observer_LockReason_SIM_PU_PUK_0100', 0", "_PC_PUK property of LockReason\n     */\n    it('Tel", "pect(5).assertEqual(LockReason.SIM_PU_PIN)\n      d", " Telephony_observer_LockReason_SIM_PU_PIN_0100 Tes", "ect(10).assertEqual(LockReason.SIM_PC_PUK)\n      d", "pect(9).assertEqual(LockReason.SIM_PC_PIN)\n      d", " Telephony_observer_LockReason_SIM_PP_PUK_0100\n   ", "pect(7).assertEqual(LockReason.SIM_PP_PIN)\n      d", "'Telephony_observer_LockReason_SIM_PP_PUK_0100', 0", "'Telephony_observer_LockReason_SIM_PU_PIN_0100', 0", " Telephony_observer_LockReason_SIM_PC_PUK_0100 Tes"], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_PN_PIN", "api_method_all": "SIM_PN_PIN, //Network Personalization (refer 3GPP TS 22.022 [33]", "api_type": "", "api_args_count": 0, "api_level": 40, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["0101';\nexport const SIM_PN_PIN_PASSWORD = '1111';", "LOCK, password: env.SIM_PN_PIN_PASSWORD };\n    try", "LOCK, password: env.SIM_PN_PIN_PASSWORD };\n    sim"], "files": ["SimManager.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_PU_PIN", "api_method_all": "SIM_PU_PIN, //network sUbset Personalization (refer 3GPP TS 22.022 [33]", "api_type": "", "api_args_count": 0, "api_level": 40, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["observer_LockReason_SIM_PU_PIN_0100 Test start ***", "  * @tc.name      : SIM_PU_PIN\n     * @tc.desc    ", "ertEqual(LockReason.SIM_PU_PIN)\n      done()\n     ", "observer_LockReason_SIM_PU_PIN_0100', 0, function ", "observer_LockReason_SIM_PU_PIN_0100\n     * @tc.nam", "observer_LockReason_SIM_PU_PIN_0100 Test end *****", "sc      : check the SIM_PU_PIN property of LockRea"], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_PP_PIN", "api_method_all": "SIM_PP_PIN, //service Provider Personalization (refer 3GPP TS 22.022 [33]", "api_type": "", "api_args_count": 0, "api_level": 40, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["sc      : check the SIM_PP_PIN property of LockRea", "observer_LockReason_SIM_PP_PIN_0100 Test end *****", "observer_LockReason_SIM_PP_PIN_0100', 0, function ", "observer_LockReason_SIM_PP_PIN_0100 Test start ***", "  * @tc.name      : SIM_PP_PIN\n     * @tc.desc    ", "observer_LockReason_SIM_PP_PIN_0100\n     * @tc.nam", "ertEqual(LockReason.SIM_PP_PIN)\n      done()\n     "], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_PC_PIN", "api_method_all": "SIM_PC_PIN, //Corporate Personalization (refer 3GPP TS 22.022 [33]", "api_type": "", "api_args_count": 0, "api_level": 40, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["observer_LockReason_SIM_PC_PIN_0100', 0, function ", "observer_LockReason_SIM_PC_PIN_0100 Test start ***", "observer_LockReason_SIM_PC_PIN_0100\n     * @tc.nam", "ertEqual(LockReason.SIM_PC_PIN)\n      done()\n     ", "  * @tc.name      : SIM_PC_PIN\n     * @tc.desc    ", "sc      : check the SIM_PC_PIN property of LockRea", "observer_LockReason_SIM_PC_PIN_0100 Test end *****"], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_SIM_PIN", "api_method_all": "SIM_SIM_PIN, //SIM/USIM personalisation (refer 3GPP TS 22.022 [33]", "api_type": "", "api_args_count": 0, "api_level": 40, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["sc      : check the SIM_SIM_PIN property of LockRea", "  * @tc.name      : SIM_SIM_PIN\n     * @tc.desc    ", "observer_LockReason_SIM_SIM_PIN_0100 Test end *****", "observer_LockReason_SIM_SIM_PIN_0100', 0, function ", "observer_LockReason_SIM_SIM_PIN_0100\n     * @tc.nam", "ertEqual(LockReason.SIM_SIM_PIN)\n      done()\n     ", "observer_LockReason_SIM_SIM_PIN_0100 Test start ***"], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_NONE", "api_method_all": "SIM_NONE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["observer_LockReason_SIM_NONE_0100\n     * @tc.nam", "sc      : check the SIM_NONE property of LockRea", "  * @tc.name      : SIM_NONE\n     * @tc.desc    ", "observer_LockReason_SIM_NONE_0100 Test end *****", "observer_LockReason_SIM_NONE_0100 Test start ***", "ertEqual(LockReason.SIM_NONE)\n      done()\n     ", "observer_LockReason_SIM_NONE_0100', 0, function "], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_PIN", "api_method_all": "SIM_PIN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["rver_LockReason_SIM_SIM_PIN_0100\n     * @tc.nam", "    : check the SIM_SIM_PIN property of LockRea", "rver_LockReason_SIM_SIM_PIN_0100', 0, function ", "K === env.CONSTANTS.SIM_PIN_LOCK).assertTrue();", "DisconnectedDetails.SIM_PIN_NEED);\n      expect", "@tc.name      : SIM_SIM_PIN\n     * @tc.desc    ", "rver_LockReason_SIM_SIM_PIN_0100 Test end *****", "DisconnectedDetails_SIM_PIN_NEED\n       * @tc.n", "rver_LockReason_SIM_SIM_PIN_0100 Test start ***", "qual(LockReason.SIM_SIM_PIN)\n      done()\n     ", "e();\n    expect(sim.SIM_PIN_LOCK === env.CONSTA", "DisconnectedDetails_SIM_PIN_NEED\",0,async funct", "DisconnectedDetails_SIM_PIN_NEED';\n      consol"], "files": ["SimManager.test.js", "ObserverJsunit.test.ets", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_PUK", "api_method_all": "SIM_PUK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["K === env.CONSTANTS.SIM_PUK_LOCK).assertTrue();", "qual(LockReason.SIM_SIM_PUK)\n      done()\n     ", "@tc.name      : SIM_SIM_PUK\n     * @tc.desc    ", "rver_LockReason_SIM_SIM_PUK_0100', 0, function ", "rver_LockReason_SIM_SIM_PUK_0100 Test start ***", "    : check the SIM_SIM_PUK property of LockRea", "rver_LockReason_SIM_SIM_PUK_0100\n     * @tc.nam", "e();\n    expect(sim.SIM_PUK_LOCK === env.CONSTA", "rver_LockReason_SIM_SIM_PUK_0100 Test end *****"], "files": ["SimManager.test.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_PN_PUK", "api_method_all": "SIM_PN_PUK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["sc      : check the SIM_PN_PUK property of LockRea", "observer_LockReason_SIM_PN_PUK_0100 Test start ***", "  * @tc.name      : SIM_PN_PUK\n     * @tc.desc    ", "ertEqual(LockReason.SIM_PN_PUK)\n      done()\n     ", "observer_LockReason_SIM_PN_PUK_0100', 0, function ", "observer_LockReason_SIM_PN_PUK_0100\n     * @tc.nam", "observer_LockReason_SIM_PN_PUK_0100 Test end *****"], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_PU_PUK", "api_method_all": "SIM_PU_PUK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["ertEqual(LockReason.SIM_PU_PUK)\n      done()\n     ", "observer_LockReason_SIM_PU_PUK_0100\n     * @tc.nam", "observer_LockReason_SIM_PU_PUK_0100 Test end *****", "observer_LockReason_SIM_PU_PUK_0100', 0, function ", "observer_LockReason_SIM_PU_PUK_0100 Test start ***", "  * @tc.name      : SIM_PU_PUK\n     * @tc.desc    ", "sc      : check the SIM_PU_PUK property of LockRea"], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_PP_PUK", "api_method_all": "SIM_PP_PUK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["ertEqual(LockReason.SIM_PP_PUK)\n      done()\n     ", "observer_LockReason_SIM_PP_PUK_0100\n     * @tc.nam", "observer_LockReason_SIM_PP_PUK_0100 Test start ***", "observer_LockReason_SIM_PP_PUK_0100 Test end *****", "sc      : check the SIM_PP_PUK property of LockRea", "observer_LockReason_SIM_PP_PUK_0100', 0, function ", "  * @tc.name      : SIM_PP_PUK\n     * @tc.desc    "], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_PC_PUK", "api_method_all": "SIM_PC_PUK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["observer_LockReason_SIM_PC_PUK_0100 Test start ***", "ertEqual(LockReason.SIM_PC_PUK)\n      done()\n     ", "observer_LockReason_SIM_PC_PUK_0100 Test end *****", "  * @tc.name      : SIM_PC_PUK\n     * @tc.desc    ", "observer_LockReason_SIM_PC_PUK_0100', 0, function ", "sc      : check the SIM_PC_PUK property of LockRea", "observer_LockReason_SIM_PC_PUK_0100\n     * @tc.nam"], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LockReason", "api_method_name": "SIM_SIM_PUK", "api_method_all": "SIM_SIM_PUK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": ["sc      : check the SIM_SIM_PUK property of LockRea", "ertEqual(LockReason.SIM_SIM_PUK)\n      done()\n     ", "observer_LockReason_SIM_SIM_PUK_0100', 0, function ", "observer_LockReason_SIM_SIM_PUK_0100 Test end *****", "observer_LockReason_SIM_SIM_PUK_0100\n     * @tc.nam", "observer_LockReason_SIM_SIM_PUK_0100 Test start ***", "  * @tc.name      : SIM_SIM_PUK\n     * @tc.desc    "], "files": ["ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}]}