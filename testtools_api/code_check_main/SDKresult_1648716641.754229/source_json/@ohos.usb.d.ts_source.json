{"subsystem_ch": "USB\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "usb", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.usb", "api": [{"api_class_name": "usb", "api_method_all": "declare namespace usb {\n    \n    function getDevices(): Array<Readonly<USBDevice>>;\n\n    \n    function connectDevice(device: USBDevice): Readonly<USBDevicePipe>;\n\n    \n    function hasRight(deviceName: string): boolean;\n\n    \n    function requestRight(deviceName: string): Promise<boolean>;\n\n    \n    function claimInterface(pipe: USBDevicePipe, iface: USBInterface, force?: boolean): number;\n\n    \n    function releaseInterface(pipe: USBDevicePipe, iface: USBInterface): number;\n\n    \n    function setConfiguration(pipe: USBDevicePipe, config: USBConfig): number;\n\n    \n    function setInterface(pipe: USBDevicePipe, iface: USBInterface): number;\n\n    \n    function getRawDescriptor(pipe: USBDevicePipe): Uint8Array;\n\n    \n    function getFileDescriptor(pipe: USBDevicePipe): number;\n\n    \n    function controlTransfer(pipe: USBDevicePipe, contrlparam: USBControlParams, timeout?: number): Promise<number>;\n\n    \n    function bulkTransfer(pipe: USBDevicePipe, endpoint: USBEndpoint, buffer: Uint8Array,\n        timeout?: number): Promise<number>;\n\n    \n    function closePipe(pipe: USBDevicePipe): number;\n\n    \n    interface USBEndpoint {\n        \n        address: number;\n\n        \n        attributes: number;\n\n        \n        interval: number;\n\n        \n        maxPacketSize: number;\n\n        \n        direction: USBRequestDirection;\n\n        \n        number: number;\n\n        \n        type: number;\n\n        \n        interfaceId: number;\n    }\n\n\n    \n    interface USBInterface {\n        \n        id: number;\n\n        \n        protocol: number;\n\n        \n        clazz: number;\n\n        \n        subClass: number;\n\n        \n        alternateSetting: number;\n\n        \n        name: string;\n\n        \n        endpoints: Array<USBEndpoint>;\n    }\n\n    \n    interface USBConfig {\n        \n        id: number;\n\n        \n        attributes: number;\n\n        \n        maxPower: number;\n\n        \n        name: string;\n\n        \n        isRemoteWakeup: boolean;\n\n        \n        isSelfPowered: boolean;\n\n        \n        interfaces: Array<USBInterface>;\n    }\n\n    \n    interface USBDevice {\n        \n        busNum: number;\n        \n        devAddress: number;\n        \n        serial: string;\n        \n        name: string;\n        \n        manufacturerName: string;\n        \n        productName: string;\n        \n        version: string;\n        \n        vendorId: number;\n        \n        productId: number;\n        \n        clazz: number;\n        \n        subClass: number;\n        \n        protocol: number;\n        \n        configs: Array<USBConfig>;\n    }\n\n    \n    interface USBDevicePipe {\n        \n        busNum: number;\n        \n        devAddress: number;\n    }\n\n    \n    interface USBControlParams {\n        \n        request: number;\n        \n        target: USBRequestTargetType;\n        \n        reqType: USBControlRequestType;\n        \n        value: number;\n        \n        index: number;\n        \n        data: Uint8Array;\n    }\n\n    \n    enum USBRequestTargetType {\n        \n        USB_REQUEST_TARGET_DEVICE = 0,\n        \n        USB_REQUEST_TARGET_INTERFACE,\n        \n        USB_REQUEST_TARGET_ENDPOINT,\n        \n        USB_REQUEST_TARGET_OTHER\n    }\n\n    \n    enum USBControlRequestType {\n        \n        USB_REQUEST_TYPE_STANDARD = 0,\n        \n        USB_REQUEST_TYPE_CLASS,\n        \n        USB_REQUEST_TYPE_VENDOR\n    }\n\n    \n    enum USBRequestDirection {\n        \n        USB_REQUEST_DIR_TO_DEVICE = 0,\n        \n        USB_REQUEST_DIR_FROM_DEVICE = 0x80\n    }\n}", "api_method_name": "usb", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 1284, "since": 0, "api_used": "\u662f", "lines": ["", ";\n    console.info('usb case maskCode ' + m", " \u5207\u6362\u5230 device\n    var usbPortList = usb.getPo", ")\n\n  \n  it('SUB_USB_usb_function_to_string_", ".getPorts()\n    if (usbPortList.length > 0)", "r strMaskCode = usb.usbFunctionsToString(ma", "      console.info('usb case set data role ", "      console.info('usb case setPortRoles r", "a role 1');\n        usb.setPortRoles(usbPor", "      console.info('usb case setPortRoles e", "  var strMaskCode = usb.usbFunctionsToStrin", "ort usb from '@ohos.usb';\nimport CheckEmpty", "  console.info('usb usb_function_to_string_", "th > 0) {\n      if (usbPortList[0].status.c", ";\n    var Version = usb.getVersion()\n    co", "   usb.setPortRoles(usbPortList[0].id, 2, 2", "de ' + maskCode + ' usbFunctionsToString re", "  var usbPortList = usb.getPorts()\n    if (", "{\n    console.info('usb usb_function_to_str", ";\n    console.info('usb usb_function_to_str"], "files": ["UsbPortJsunitEx.test.js", "UsbAutoJsunit.test.js", "UsbFunctionsJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbPortJsunit.test.js", "UsbFunctionsJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "getDevices", "api_method_all": "function getDevices(): Array<Readonly<USBDevice>>;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["  gDeviceList = usb.getDevices();\n  })\n  beforeEac", "sole.info('usb case getDevices ret length: ' + gDe", "  gDeviceList = usb.getDevices();\n    if (gDeviceL", "  gDeviceList = usb.getDevices();\n    gDeviceList[", "  gDeviceList = usb.getDevices();\n    gPipe = usb."], "files": ["UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "connectDevice", "api_method_all": "function connectDevice(device: USBDevice): Readonly<USBDevicePipe>;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 63, "since": 8, "api_used": "\u662f", "lines": ["        gPipe = usb.connectDevice(gDeviceList[0])\n   ", "  }\n    gPipe = usb.connectDevice(gDeviceList[0])\n   ", "usbDevicePipe = usb.connectDevice(device)\n    } catch", " }\n\n    gPipe = usb.connectDevice(gDeviceList[0])\n   ", "sole.info('usb unit connectDevice gPipe ret : ' + JSO", "();\n    gPipe = usb.connectDevice(gDeviceList[0])\n   ", "sole.info('usb unit connectDevice  gPipe ret : ' + JS", "sole.info('usb case connectDevice ret: ' + JSON.strin", "  console.info('usb connectDevice fail\uff1a' + err);\n    "], "files": ["UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "hasRight", "api_method_all": "function hasRight(deviceName: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 47, "since": 8, "api_used": "\u662f", "lines": [" var hasRight = usb.hasRight(gDeviceList[i].name", "  console.info('usb hasRight ret :' + hasRight);", "me + '$#'\n      var hasRight = usb.hasRight(devi", "+ 'abcdg'\n      var hasRight = usb.hasRight(devi", " has_right ret :' + hasRight);\n      expect(hasR", " var hasRight = usb.hasRight(deviceName)\n      c", "ht(diviceName).then(hasRight => {\n        consol", "eList[0].name).then(hasRight => {\n\n      }).catc", "eList[0].name).then(hasRight => {\n      }).catch", " has_right ret :' + hasRight);\n    }\n\n    consol", "ht);\n        expect(hasRight).assertFalse();\n   ", "b hasRight ret :' + hasRight);\n      expect(hasR", "eList[i].name).then(hasRight => {\n        expect", "uest_right ret :' + hasRight);\n        console.i", "ight);\n      expect(hasRight == false).assertTru", "uest_right ret :' + hasRight);\n        expect(ha", "  var isRight = usb.hasRight(gDeviceList[0].name", "h; i++) {\n      var hasRight = usb.hasRight(gDev", "=> {\n        expect(hasRight).assertTrue();\n    "], "files": ["UsbCoreJsunit.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "requestRight", "api_method_all": "function requestRight(deviceName: string): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["h; i++) {\n      usb.requestRight(gDeviceList[i].name).then(hasRight => {", "e + '123'\n      usb.requestRight(diviceName).then(hasRight => {\n        ", "sRight) {\n      usb.requestRight(gDeviceList[0].name).then(hasRight => {", "me + '@#'\n      usb.requestRight(diviceName).then(hasRight => {\n        "], "files": ["UsbCoreJsunit.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "claimInterface", "api_method_all": "function claimInterface(pipe: USBDevicePipe, iface: USBInterface, force?: boolean): number;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 29, "since": 8, "api_used": "\u662f", "lines": ["  var isClaim = usb.claimInterface(gPipe, gDeviceList[", "ram.isClaimed = usb.claimInterface(testParam.pip, test", "  var isClaim = usb.claimInterface(gPipe, TmpInterface", "var isClaimed = usb.claimInterface(gPipe, gDeviceList[", "sole.info('usb case claimInterface function return: ' "], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "releaseInterface", "api_method_all": "function releaseInterface(pipe: USBDevicePipe, iface: USBInterface): number;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["      isClaim = usb.releaseInterface(gPipe, gDeviceList[", "sole.info('usb case releaseInterface function return: ' ", "  var isClaim = usb.releaseInterface(gPipe, tmpInterface"], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "setConfiguration", "api_method_all": "function setConfiguration(pipe: USBDevicePipe, config: USBConfig): number;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["sole.info('usb case setConfiguration return : ' + ret);\n", "  * @tc.name      : setConfiguration\n   * @tc.desc      ", "      var ret = usb.setConfiguration(gPipe, gDeviceList[", "      var ret = usb.setConfiguration(gPipe, config)\n    "], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "setInterface", "api_method_all": "function setInterface(pipe: USBDevicePipe, iface: USBInterface): number;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 19, "since": 8, "api_used": "\u662f", "lines": ["      var ret = usb.setInterface(gPipe, tmpInterface", "sole.info('usb case setInterface return : ' + ret);\n", "  * @tc.name      : setInterface\n   * @tc.desc      ", "sole.info('usb case setInterface return : ' + ret)\n\n", "      var ret = usb.setInterface(gPipe, gDeviceList[", "sole.info('usb case setInterface return : ' + ret)\n "], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "getRawDescriptor", "api_method_all": "function getRawDescriptor(pipe: USBDevicePipe): Uint8Array;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["sole.info('usb case getRawDescriptor ret: ' + descriptor", "ar descriptor = usb.getRawDescriptor(gPipe);\n    console", "sole.info('usb case getRawDescriptor param: ' + JSON.str"], "files": ["UsbCoreJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "getFileDescriptor", "api_method_all": "function getFileDescriptor(pipe: USBDevicePipe): number;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["sole.info('usb case getFileDescriptor ret: ' + fileDescri", "ileDescriptor = usb.getFileDescriptor(gPipe);\n    console", "ileDescriptor = usb.getFileDescriptor(tempPipe);\n    expe", "sole.info('usb case getFileDescriptor param: ' + JSON.str"], "files": ["UsbCoreJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "controlTransfer", "api_method_all": "function controlTransfer(pipe: USBDevicePipe, contrlparam: USBControlParams, timeout?: number): Promise<number>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["caseName) {\n    usb.controlTransfer(pip, controlParam, timeout).then(data ="], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "bulkTransfer", "api_method_all": "function bulkTransfer(pipe: USBDevicePipe, endpoint: USBEndpoint, buffer: Uint8Array,\n        timeout?: number): Promise<number>;", "api_type": "Promise", "api_args_count": 4, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "usb", "api_method_name": "closePipe", "api_method_all": "function closePipe(pipe: USBDevicePipe): number;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 37, "since": 8, "api_used": "\u662f", "lines": ["sole.info('usb case closePipe ret: ' + isPipClose", "ar isPipClose = usb.closePipe(tmpPipe);\n    conso", "ar isPipClose = usb.closePipe(usbDevicePipe);\n   ", "sole.info('usb case closePipe param: ' + JSON.str", "ar isPipClose = usb.closePipe(gPipe)\n    console.", "ar isPipClose = usb.closePipe(gPipe);\n    expect(", "ar isPipClose = usb.closePipe(gPipe);\n    console"], "files": ["UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBEndpoint", "api_method_all": "interface USBEndpoint {\n        \n        address: number;\n\n        \n        attributes: number;\n\n        \n        interval: number;\n\n        \n        maxPacketSize: number;\n\n        \n        direction: USBRequestDirection;\n\n        \n        number: number;\n\n        \n        type: number;\n\n        \n        interfaceId: number;\n    }", "api_method_name": "USBEndpoint", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBEndpoint", "api_method_name": "address", "api_method_all": "address: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["stParam.outEndpoint.address = 123\n    usb.bulkT"], "files": ["UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBEndpoint", "api_method_name": "attributes", "api_method_all": "attributes: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["igs[j]\n      config.attributes = 154\n      var ret", "   : \u53cd\u5411\u6d4b\u8bd5 USBConfig\u7684attributes \u8d4b\u503c\u9519\u8bef \u8bbe\u7f6e\u8bbe\u5907\u63a5\u53e3\n   */\n "], "files": ["UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBEndpoint", "api_method_name": "interval", "api_method_all": "interval: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBEndpoint", "api_method_name": "maxPacketSize", "api_method_all": "maxPacketSize: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["xOutSize = endpoint.maxPacketSize;\n        } else if ", "axInSize = endpoint.maxPacketSize;\n          testPara", "xOutSize = endpoint.maxPacketSize;\n          testPara", "axInSize = endpoint.maxPacketSize;\n        }\n      }\n"], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBEndpoint", "api_method_name": "direction", "api_method_all": "direction: USBRequestDirection", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["       if (endpoint.direction == usb.USB_REQUEST_", "} else if (endpoint.direction == usb.USB_REQUEST_"], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBEndpoint", "api_method_name": "number", "api_method_all": "number: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 19, "since": 8, "api_used": "\u662f", "lines": [" })\n\n  /**\n   * @tc.number    : SUB_USB_contro", " })\n\n  /**\n   * @tc.number    : SUB_USB_set_co", " })\n\n  /**\n   * @tc.number    : SUB_USB_set_in", " })\n\n  /**\n   * @tc.number    : get_current_fu", " })\n\n  /**\n   * @tc.number    : get_ports_test", "[k];\n      endpoint.number = 1;\n      endpoint", " })\n\n  /**\n   * @tc.number    : SUB_USB_reques", "stParam.outEndpoint.number = 123\n    usb.bulkT", " })\n\n  /**\n   * @tc.number    : get_supported_"], "files": ["UsbAutoJsunit.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBEndpoint", "api_method_name": "type", "api_method_all": "type: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["ef = Object.getPrototypeOf(global) || global", "\n      if (endpoint.type == EventConstants.U", "(obj) {\n    return (typeof obj == 'undefined", "= 1;\n      endpoint.type = 1;\n      endpoint", "stParam.outEndpoint.type = 123\n    usb.bulkT"], "files": ["UsbDevicePipeJsunit_A.test.js", "CheckEmptyUtils.js", "UsbDevicePipeJsunit.test.js", "index.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBEndpoint", "api_method_name": "interfaceId", "api_method_all": "interfaceId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBInterface", "api_method_all": "interface USBInterface {\n        \n        id: number;\n\n        \n        protocol: number;\n\n        \n        clazz: number;\n\n        \n        subClass: number;\n\n        \n        alternateSetting: number;\n\n        \n        name: string;\n\n        \n        endpoints: Array<USBEndpoint>;\n    }", "api_method_name": "USBInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBInterface", "api_method_name": "id", "api_method_all": "id: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": [" var portId = gPort.id;\n    var powerRole ", "oles(usbPortList[i].id, usb.SINK, usb.DEVI", "oles(usbPortList[0].id, usb.SINK, usb.DEVI", "[j]));\n      config.id = 255\n      var ret", "       tmpInterface.id = 134\n        var i", "       tmpInterface.id = 234\n        var r", "ID = usbPortList[0].id + 10\n    var maskCo", "       TmpInterface.id = 123\n        var i", " var portId = gPort.id - 1;\n    var dataRo", ".desc      : \u53cd\u5411\u6d4b\u8bd5 \u6539\u53d8id \u83b7\u53d6\u6307\u5b9a\u7684\u7aef\u53e3\u652f\u6301\u7684\u6a21\u5f0f\u5217\u8868\u7684\u7ec4\u5408\u63a9\u7801", " var portId = gPort.id - 3;\n    var powerR", "odes(usbPortList[i].id)\n      expect(maskC", "sdfsd'\n      config.id = 154\n      var ret", "tend({\n            'id': 'extend'\n        ", "es[k];\n\t\tinterfaces.id = 1;\n\t\tinterfaces.n", "oles(usbPortList[0].id, 2, 2).then(data =>", "oles(usbPortList[i].id, usb.SOURCE, usb.HO", "s[j];\n      configs.id = 1;\n      configs.", "  endpoint.interfaceid = 1;\n      if (endp", "oles(usbPortList[0].id, usb.SOURCE, usb.HO", " var portId = gPort.id - 1;\n    var powerR"], "files": ["index.js", "UsbPortJsunitEx.test.js", "UsbAutoJsunit.test.js", "UsbFunctionsJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbPortJsunit.test.js", "UsbFunctionsJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBInterface", "api_method_name": "protocol", "api_method_all": "protocol: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["protocol ' + device.protocol);\n    expect(CheckE", "onfig.interfaces[j].protocol != 2) {\n      retur", "(usbDevicePipe) + ' protocol ' + device.protocol", "       tmpInterface.protocol = 124\n        var i", "st[0]));\n    device.protocol = 2 + 10000\n    try", "       TmpInterface.protocol = 120\n        var i", "\n      tmpInterface.protocol = 482\n      var ret"], "files": ["UsbDevicePipeJsunit_A.test.js", "UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBInterface", "api_method_name": "clazz", "api_method_all": "clazz: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["onfig.interfaces[j].clazz != 10 ||\n      test", "\n      tmpInterface.clazz = 482\n      var ret", " ' clazz ' + device.clazz);\n    expect(CheckE", "       tmpInterface.clazz = 78\n        var is", "       TmpInterface.clazz = 784\n        var i", "   : \u53cd\u5411\u6d4b\u8bd5 Interface\u7684clazz \u8bbe\u7f6e\u8bbe\u5907\u63a5\u53e3\n   */\n  it('", "(usbDevicePipe) + ' clazz ' + device.clazz);\n", "st[0]));\n    device.clazz = 2 + 10000\n    try"], "files": ["UsbDevicePipeJsunit_A.test.js", "UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBInterface", "api_method_name": "subClass", "api_method_all": "subClass: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["       tmpInterface.subClass = 784\n        var i", "\n      tmpInterface.subClass = 482\n      var ret", "       TmpInterface.subClass = 1210\n        var ", "   : \u53cd\u5411\u6d4b\u8bd5 Interface\u7684subClass \u8bbe\u7f6e\u8bbe\u5907\u63a5\u53e3\n   */\n  it('"], "files": ["UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBInterface", "api_method_name": "alternateSetting", "api_method_all": "alternateSetting: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": [" = '';\n\t\tinterfaces.alternateSetting = 1;\n        var is"], "files": ["UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBInterface", "api_method_name": "name", "api_method_all": "name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 65, "since": 8, "api_used": "\u662f", "lines": ["ns_test_02\n   * @tc.name      : usbFunctionS", "ce_test_05\n   * @tc.name      : setInterface", "t_right_02\n   * @tc.name      : requestRight", "es_test_01\n   * @tc.name      : getSupported", "+ ' name ' + device.name);\n    expect(CheckE", "ight(gDeviceList[i].name)\n      console.info", "ns_test_01\n   * @tc.name      : getCurrentFu", ":' + gDeviceList[i].name);\n        expect(fa", "       tmpInterface.name = '134wer'\n        ", "me = gDeviceList[i].name\n      deviceName = ", "me = gDeviceList[i].name\n      diviceName = ", "er_test_09\n   * @tc.name      : controlTrans", "er_test_08\n   * @tc.name      : controlTrans", "ight(gDeviceList[0].name);\n    if (!isRight)", "st[0]));\n    device.name = 2 + 10000\n    try", "ight(gDeviceList[0].name).then(hasRight => {", "(usbDevicePipe) + ' name ' + device.name);\n ", "ce_test_04\n   * @tc.name      : setInterface", "ce_test_06\n   * @tc.name      : setInterface", "es_test_02\n   * @tc.name      : getSupported", "ts_test_01\n   * @tc.name      : getPorts\n   ", "       TmpInterface.name = '123sdf'\n        ", "t_right_03\n   * @tc.name      : requestRight", "ight(gDeviceList[i].name).then(hasRight => {"], "files": ["UsbAutoJsunit.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbFunctionsJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBInterface", "api_method_name": "endpoints", "api_method_all": "endpoints: Array<USBEndpoint>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["onfig.interfaces[j].endpoints[k];\n      if (endpo", "onfig.interfaces[j].endpoints[k];\n      endpoint.", "onfig.interfaces[j].endpoints.length == 0) {\n    ", "onfig.interfaces[j].endpoints.length; k++) {\n    "], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBConfig", "api_method_all": "interface USBConfig {\n        \n        id: number;\n\n        \n        attributes: number;\n\n        \n        maxPower: number;\n\n        \n        name: string;\n\n        \n        isRemoteWakeup: boolean;\n\n        \n        isSelfPowered: boolean;\n\n        \n        interfaces: Array<USBInterface>;\n    }", "api_method_name": "USBConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["tc.desc      : \u53cd\u5411\u6d4b\u8bd5 USBConfig\u7684attributes \u8d4b\u503c\u9519\u8bef \u8bbe\u7f6e\u8bbe", "tc.desc      : \u53cd\u5411\u6d4b\u8bd5 USBConfig\u7684name \u8d4b\u503c\u9519\u8bef \u8bbe\u7f6e\u8bbe\u5907\u63a5\u53e3\n  "], "files": ["UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBConfig", "api_method_name": "id", "api_method_all": "id: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": [" var portId = gPort.id;\n    var powerRole ", "oles(usbPortList[i].id, usb.SINK, usb.DEVI", "oles(usbPortList[0].id, usb.SINK, usb.DEVI", "[j]));\n      config.id = 255\n      var ret", "       tmpInterface.id = 134\n        var i", "       tmpInterface.id = 234\n        var r", "ID = usbPortList[0].id + 10\n    var maskCo", "       TmpInterface.id = 123\n        var i", " var portId = gPort.id - 1;\n    var dataRo", ".desc      : \u53cd\u5411\u6d4b\u8bd5 \u6539\u53d8id \u83b7\u53d6\u6307\u5b9a\u7684\u7aef\u53e3\u652f\u6301\u7684\u6a21\u5f0f\u5217\u8868\u7684\u7ec4\u5408\u63a9\u7801", " var portId = gPort.id - 3;\n    var powerR", "odes(usbPortList[i].id)\n      expect(maskC", "sdfsd'\n      config.id = 154\n      var ret", "tend({\n            'id': 'extend'\n        ", "es[k];\n\t\tinterfaces.id = 1;\n\t\tinterfaces.n", "oles(usbPortList[0].id, 2, 2).then(data =>", "oles(usbPortList[i].id, usb.SOURCE, usb.HO", "s[j];\n      configs.id = 1;\n      configs.", "  endpoint.interfaceid = 1;\n      if (endp", "oles(usbPortList[0].id, usb.SOURCE, usb.HO", " var portId = gPort.id - 1;\n    var powerR"], "files": ["index.js", "UsbPortJsunitEx.test.js", "UsbAutoJsunit.test.js", "UsbFunctionsJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbPortJsunit.test.js", "UsbFunctionsJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBConfig", "api_method_name": "attributes", "api_method_all": "attributes: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["igs[j]\n      config.attributes = 154\n      var ret", "   : \u53cd\u5411\u6d4b\u8bd5 USBConfig\u7684attributes \u8d4b\u503c\u9519\u8bef \u8bbe\u7f6e\u8bbe\u5907\u63a5\u53e3\n   */\n "], "files": ["UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBConfig", "api_method_name": "maxPower", "api_method_all": "maxPower: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["= '';\n      configs.maxPower = 1;\n      configs."], "files": ["UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBConfig", "api_method_name": "name", "api_method_all": "name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 65, "since": 8, "api_used": "\u662f", "lines": ["ns_test_02\n   * @tc.name      : usbFunctionS", "ce_test_05\n   * @tc.name      : setInterface", "t_right_02\n   * @tc.name      : requestRight", "es_test_01\n   * @tc.name      : getSupported", "+ ' name ' + device.name);\n    expect(CheckE", "ight(gDeviceList[i].name)\n      console.info", "ns_test_01\n   * @tc.name      : getCurrentFu", ":' + gDeviceList[i].name);\n        expect(fa", "       tmpInterface.name = '134wer'\n        ", "me = gDeviceList[i].name\n      deviceName = ", "me = gDeviceList[i].name\n      diviceName = ", "er_test_09\n   * @tc.name      : controlTrans", "er_test_08\n   * @tc.name      : controlTrans", "ight(gDeviceList[0].name);\n    if (!isRight)", "st[0]));\n    device.name = 2 + 10000\n    try", "ight(gDeviceList[0].name).then(hasRight => {", "(usbDevicePipe) + ' name ' + device.name);\n ", "ce_test_04\n   * @tc.name      : setInterface", "ce_test_06\n   * @tc.name      : setInterface", "es_test_02\n   * @tc.name      : getSupported", "ts_test_01\n   * @tc.name      : getPorts\n   ", "       TmpInterface.name = '123sdf'\n        ", "t_right_03\n   * @tc.name      : requestRight", "ight(gDeviceList[i].name).then(hasRight => {"], "files": ["UsbAutoJsunit.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbFunctionsJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBConfig", "api_method_name": "isRemoteWakeup", "api_method_all": "isRemoteWakeup: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBConfig", "api_method_name": "isSelfPowered", "api_method_all": "isSelfPowered: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["true;\n      configs.isSelfPowered = true;\n      var r"], "files": ["UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBConfig", "api_method_name": "interfaces", "api_method_all": "interfaces: Array<USBInterface>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 95, "since": 8, "api_used": "\u662f", "lines": ["f (testParam.config.interfaces[j].clazz != 10 ||\n ", "   testParam.config.interfaces[j].subclass != 0 ||", "eList[0].configs[j].interfaces[0])\n        expect(", " < testParam.config.interfaces[j].endpoints.length", "eList[0].configs[j].interfaces[0], true)\n      exp", "rent device.configs.interfaces.length = 0');\n     ", "eList[0].configs[j].interfaces[k]\n        TmpInter", "eList[0].configs[j].interfaces[k], true)\n        c", "eList[0].configs[j].interfaces[k]\n        tmpInter", "f (testParam.config.interfaces[j].endpoints.length", "eList[0].configs[j].interfaces.length == 0) {\n    ", "eList[0].configs[j].interfaces[0]));\n        tmpIn", "   testParam.config.interfaces[j].protocol != 2) {", " = testParam.config.interfaces[j].endpoints[k];\n  ", "eList[0].configs[j].interfaces[k])\n          conso", " = testParam.config.interfaces[j]\n      return bfi", "eList[0].configs[j].interfaces.length; k++) {\n    ", " = testParam.config.interfaces[j]\n      return tru", " < testParam.config.interfaces.length; j++) {\n    "], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_all": "interface USBDevice {\n        \n        busNum: number;\n        \n        devAddress: number;\n        \n        serial: string;\n        \n        name: string;\n        \n        manufacturerName: string;\n        \n        productName: string;\n        \n        version: string;\n        \n        vendorId: number;\n        \n        productId: number;\n        \n        clazz: number;\n        \n        subClass: number;\n        \n        protocol: number;\n        \n        configs: Array<USBConfig>;\n    }", "api_method_name": "USBDevice", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "busNum", "api_method_all": "busNum: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["    var tempPipe = {busNum : 255, devAddress :", "s = -23\n    tmpPipe.busNum = -23\n    var isPip", "' busNum ' + device.busNum);\n    expect(CheckE", "st[0]));\n    device.busNum = 2 + 1000\n    try ", "e = {busNum : gPipe.busNum, devAddress : 255}\n", "Pipe));\n    tmpPipe.busNum = -23\n    var isPip", "    var tempPipe = {busNum : gPipe.busNum, dev", "vicePipe) +\n      ' busNum ' + device.busNum);"], "files": ["UsbCoreJsunit.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "devAddress", "api_method_all": "devAddress: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["pe = {busNum : 255, devAddress : gPipe.devAddress}", "Num : gPipe.busNum, devAddress : 255}\n    console.", "vAddress ' + device.devAddress);\n    expect(CheckE", "Pipe));\n    tmpPipe.devAddress = -23\n    var isPip", "vicePipe) +\n      ' devAddress ' + device.devAddre", "pe = {busNum : 255, devAddress : 255}\n    console.", "st[0]));\n    device.devAddress = 2 + 10000\n    try", "Pipe));\n    tmpPipe.devAddress = -23\n    tmpPipe.b", " devAddress : gPipe.devAddress}\n    console.info('"], "files": ["UsbCoreJsunit.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "serial", "api_method_all": "serial: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["st[0]));\n    device.serial = 'asdfsd'\n    try ", "vicePipe) +\n      ' serial ' + device.serial);", "' serial ' + device.serial);\n    expect(CheckE"], "files": ["UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "name", "api_method_all": "name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 65, "since": 8, "api_used": "\u662f", "lines": ["ns_test_02\n   * @tc.name      : usbFunctionS", "ce_test_05\n   * @tc.name      : setInterface", "t_right_02\n   * @tc.name      : requestRight", "es_test_01\n   * @tc.name      : getSupported", "+ ' name ' + device.name);\n    expect(CheckE", "ight(gDeviceList[i].name)\n      console.info", "ns_test_01\n   * @tc.name      : getCurrentFu", ":' + gDeviceList[i].name);\n        expect(fa", "       tmpInterface.name = '134wer'\n        ", "me = gDeviceList[i].name\n      deviceName = ", "me = gDeviceList[i].name\n      diviceName = ", "er_test_09\n   * @tc.name      : controlTrans", "er_test_08\n   * @tc.name      : controlTrans", "ight(gDeviceList[0].name);\n    if (!isRight)", "st[0]));\n    device.name = 2 + 10000\n    try", "ight(gDeviceList[0].name).then(hasRight => {", "(usbDevicePipe) + ' name ' + device.name);\n ", "ce_test_04\n   * @tc.name      : setInterface", "ce_test_06\n   * @tc.name      : setInterface", "es_test_02\n   * @tc.name      : getSupported", "ts_test_01\n   * @tc.name      : getPorts\n   ", "       TmpInterface.name = '123sdf'\n        ", "t_right_03\n   * @tc.name      : requestRight", "ight(gDeviceList[i].name).then(hasRight => {"], "files": ["UsbAutoJsunit.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbFunctionsJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "manufacturerName", "api_method_all": "manufacturerName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["urerName ' + device.manufacturerName);\n    expect(CheckE", "st[0]));\n    device.manufacturerName = 2 + 10000\n    try", "vicePipe) +\n      ' manufacturerName ' + device.manufact"], "files": ["UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "productName", "api_method_all": "productName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["vicePipe) +\n      ' productName ' + device.productN", "ductName ' + device.productName);\n    expect(CheckE", "st[0]));\n    device.productName = 'sdfsdfe'\n    try"], "files": ["UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "version", "api_method_all": "version: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 21, "since": 8, "api_used": "\u662f", "lines": [" + Version)\n\n    // version > 17  host currentM", "info('begin test getversion :' + Version)\n\n    ", "\n    gDeviceList[0].version;\n    gDeviceList[0]", " unit begin test getversion :' + Version)\n\n    ", "vicePipe) +\n      ' version ' + device.version)", "info('begin test getversion :' + Version)\n    /", "Version)\n    //  17 version host currentMode = ", "st[0]));\n    device.version = 'gwefsdf'\n    try", " version ' + device.version);\n    expect(CheckE", " unit begin test getversion :' + Version)\n    /", "' + Version)\n    // version > 17  host currentM", "info('begin test getversion :' + Version)\n  })\n"], "files": ["UsbPortJsunitEx.test.js", "UsbAutoJsunit.test.js", "UsbFunctionsJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbPortJsunit.test.js", "UsbFunctionsJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "vendorId", "api_method_all": "vendorId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["st[0]));\n    device.vendorId = 2 + 10000\n    try", "vicePipe) +\n      ' vendorId ' + device.vendorId", "vendorId ' + device.vendorId);\n    expect(CheckE"], "files": ["UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "productId", "api_method_all": "productId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["roductId ' + device.productId);\n    expect(CheckE", "vicePipe) +\n      ' productId ' + device.productI", "st[0]));\n    device.productId = 2 + 10000\n    try"], "files": ["UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "clazz", "api_method_all": "clazz: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["onfig.interfaces[j].clazz != 10 ||\n      test", "\n      tmpInterface.clazz = 482\n      var ret", " ' clazz ' + device.clazz);\n    expect(CheckE", "       tmpInterface.clazz = 78\n        var is", "       TmpInterface.clazz = 784\n        var i", "   : \u53cd\u5411\u6d4b\u8bd5 Interface\u7684clazz \u8bbe\u7f6e\u8bbe\u5907\u63a5\u53e3\n   */\n  it('", "(usbDevicePipe) + ' clazz ' + device.clazz);\n", "st[0]));\n    device.clazz = 2 + 10000\n    try"], "files": ["UsbDevicePipeJsunit_A.test.js", "UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "subClass", "api_method_all": "subClass: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["       tmpInterface.subClass = 784\n        var i", "\n      tmpInterface.subClass = 482\n      var ret", "       TmpInterface.subClass = 1210\n        var ", "   : \u53cd\u5411\u6d4b\u8bd5 Interface\u7684subClass \u8bbe\u7f6e\u8bbe\u5907\u63a5\u53e3\n   */\n  it('"], "files": ["UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "protocol", "api_method_all": "protocol: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["protocol ' + device.protocol);\n    expect(CheckE", "onfig.interfaces[j].protocol != 2) {\n      retur", "(usbDevicePipe) + ' protocol ' + device.protocol", "       tmpInterface.protocol = 124\n        var i", "st[0]));\n    device.protocol = 2 + 10000\n    try", "       TmpInterface.protocol = 120\n        var i", "\n      tmpInterface.protocol = 482\n      var ret"], "files": ["UsbDevicePipeJsunit_A.test.js", "UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevice", "api_method_name": "configs", "api_method_all": "configs: Array<USBConfig>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 136, "since": 8, "api_used": "\u662f", "lines": ["e 06 current device.configs.length = 0');\n     ", "e 04 current device.configs.length = 0');\n     ", "e 03 current device.configs.interfaces.length =", "ipe, gDeviceList[0].configs[j])\n      console.i", " = testParam.device.configs[0]\n      testParam.", "e 05 current device.configs.length = 0');\n     ", "e 03 current device.configs.length = 0');\n     ", "e 02 current device.configs.interfaces.length =", "gify(gDeviceList[0].configs[j]));\n      config.", " j < gDeviceList[0].configs.length; j++) {\n    ", "ipe, gDeviceList[0].configs[j].interfaces[0], t", "e 05 current device.configs.interfaces.length =", "ce = gDeviceList[0].configs[j].interfaces[k]\n  ", "gify(gDeviceList[0].configs[j].interfaces[0]));", "e 02 current device.configs.length = 0');\n     ", " k < gDeviceList[0].configs[j].interfaces.lengt", "ipe, gDeviceList[0].configs[j].interfaces[0])\n ", "case current device.configs.length = 0');\n     ", " if (gDeviceList[0].configs[j].interfaces.lengt", "ipe, gDeviceList[0].configs[j].interfaces[k])\n ", "e 04 current device.configs.interfaces.length =", " if (gDeviceList[0].configs.length == 0) {\n    ", "case current device.configs.interfaces.length =", "ipe, gDeviceList[0].configs[j].interfaces[k], t"], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevicePipe", "api_method_all": "interface USBDevicePipe {\n        \n        busNum: number;\n        \n        devAddress: number;\n    }", "api_method_name": "USBDevicePipe", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevicePipe", "api_method_name": "busNum", "api_method_all": "busNum: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["    var tempPipe = {busNum : 255, devAddress :", "s = -23\n    tmpPipe.busNum = -23\n    var isPip", "' busNum ' + device.busNum);\n    expect(CheckE", "st[0]));\n    device.busNum = 2 + 1000\n    try ", "e = {busNum : gPipe.busNum, devAddress : 255}\n", "Pipe));\n    tmpPipe.busNum = -23\n    var isPip", "    var tempPipe = {busNum : gPipe.busNum, dev", "vicePipe) +\n      ' busNum ' + device.busNum);"], "files": ["UsbCoreJsunit.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBDevicePipe", "api_method_name": "devAddress", "api_method_all": "devAddress: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["pe = {busNum : 255, devAddress : gPipe.devAddress}", "Num : gPipe.busNum, devAddress : 255}\n    console.", "vAddress ' + device.devAddress);\n    expect(CheckE", "Pipe));\n    tmpPipe.devAddress = -23\n    var isPip", "vicePipe) +\n      ' devAddress ' + device.devAddre", "pe = {busNum : 255, devAddress : 255}\n    console.", "st[0]));\n    device.devAddress = 2 + 10000\n    try", "Pipe));\n    tmpPipe.devAddress = -23\n    tmpPipe.b", " devAddress : gPipe.devAddress}\n    console.info('"], "files": ["UsbCoreJsunit.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBControlParams", "api_method_all": "interface USBControlParams {\n        \n        request: number;\n        \n        target: USBRequestTargetType;\n        \n        reqType: USBControlRequestType;\n        \n        value: number;\n        \n        index: number;\n        \n        data: Uint8Array;\n    }", "api_method_name": "USBControlParams", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBControlParams", "api_method_name": "request", "api_method_all": "request: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 70, "since": 8, "api_used": "\u662f", "lines": ["fo('usb case device request right failed : ' + ", "onsole.info('usb 10 requestRight error:' + erro", "onsole.info('usb 12 requestRight end:');\n      ", "onsole.info('usb 04 requestRight end:');\n      ", "onsole.info('usb 06 requestRight end:');\n      ", "onsole.info('usb 08 requestRight error:' + erro", "onsole.info('usb 10 requestRight end:');\n      ", "h; i++) {\n      usb.requestRight(gDeviceList[i]", "  console.info('usb request_right_01 begin');\n ", "  console.info('usb request_right ret :' + hasR", "onsole.info('usb 03 requestRight error:' + erro", "onsole.info('usb 13 requestRight error:' + erro", "onsole.info('usb 11 requestRight error:' + erro", "onsole.info('usb 11 requestRight end:');\n      ", "me + '@#'\n      usb.requestRight(diviceName).th", "onsole.info('usb 05 requestRight error:' + erro", "onsole.info('usb 12 requestRight error:' + erro", "number    : SUB_USB_request_right_02\n   * @tc.n", "  * @tc.name      : requestRight\n   * @tc.desc ", "onsole.info('usb 07 requestRight end:');\n      ", "  console.info('usb request_right_02 begin');\n ", "onsole.info('usb 09 requestRight error:' + erro", "onsole.info('usb 13 requestRight end:');\n      ", "onsole.info('usb 02 requestRight error:' + erro", "\n\n\n  \n  it('SUB_USB_request_right_01', 0, funct", "onsole.info('usb 02 requestRight end:');\n      ", "onsole.info('usb 03 requestRight end:');\n      ", "onsole.info('usb 07 requestRight error:' + erro", "  console.info('usb request_right_01 :  PASS');", "onsole.info('usb 05 requestRight end:');\n      ", "onsole.info('usb 04 requestRight error:' + erro", "   */\n  it('SUB_USB_request_right_02', 0, funct", "onsole.info('usb 09 requestRight end:');\n      ", "sRight) {\n      usb.requestRight(gDeviceList[0]", "onsole.info('usb 08 requestRight end:');\n      ", "onsole.info('usb 06 requestRight error:' + erro", "onsole.info('usb 01 requestRight error:' + erro"], "files": ["UsbCoreJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBControlParams", "api_method_name": "target", "api_method_all": "target: USBRequestTargetType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBControlParams", "api_method_name": "reqType", "api_method_all": "reqType: USBControlRequestType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": [": requestCmd,\n      reqType: requestType,\n     ", "ClearFeature: cmd 1 reqType 0 value 0 index 0\n "], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBControlParams", "api_method_name": "value", "api_method_all": "value: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": [" = iReqType\n    var value = iValue;\n    var i", "now;\n  }\n\n  \n  fill(value) {\n    return (valu", "tType,\n      value: value,\n      index: index", " requestType,\n      value: value,\n      index", "e > 9 ? '' : '0') + value;\n  }\n\n  \n  concatDa", "alue) {\n    return (value > 9 ? '' : '0') + v", "re: cmd 1 reqType 0 value 0 index 0\n   */\n   "], "files": ["DateAndTimeUtil.js", "UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBControlParams", "api_method_name": "index", "api_method_all": "index: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 22, "since": 8, "api_used": "\u662f", "lines": ["e = iValue;\n    var index = iIndex;\n    var c", "1 reqType 0 value 0 index 0\n   */\n    it('SUB", "value: value,\n      index: index,\n      data:", " } from 'deccjsunit/index'\n\n\n\ndescribe('UsbCo", " } from 'deccjsunit/index'\n\n\ndescribe('UsbFun", "1 reqType 0 value 0 index 0\n   */\n      it('S", " } from 'deccjsunit/index'\n\n\ndescribe('UsbAut", "d} from 'deccjsunit/index'\n\nconst injectRef =", "tr.substring(0, str.indexOf(':'));\n    const ", " } from 'deccjsunit/index'\n\n\ndescribe('UsbDev", " } from 'deccjsunit/index'\n\n\ndescribe('UsbPor", "value,\n      index: index,\n      data: tmpUin"], "files": ["index.js", "UsbPortJsunitEx.test.js", "UsbAutoJsunit.test.js", "UsbFunctionsJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbPortJsunit.test.js", "UsbFunctionsJsunit.test.js", "DateAndTimeUtil.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBControlParams", "api_method_name": "data", "api_method_all": "data: Uint8Array", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 95, "since": 8, "api_used": "\u662f", "lines": ["K, usb.DEVICE).then(data => {\n          cons", "RCE, usb.HOST).then(data => {\n          cons", "rtRoles return: ' + data);\n        }).catch(", "RolesEx return: ' + data);\n        }).catch(", "ansfer controlParam.data buffer : ' + contro", ".info('usb case set data role 1, data role 1", "sfer ret data : ' + data + ' ' + caseName);\n", "ASS');\n      expect(data >= 0).assertTrue();", "se set data role 1, data role 1');\n        u", "ansfer_test_02 send data: ' + testParam.send", "ASS');\n      expect(data).assertEqual(-1);\n ", "t[0].id, 2, 2).then(data => {\n          cons", "controlTransfer ret data : ' + data + ' ' + ", "tRoles  return: ' + data);\n        }).catch(", "er_test_04 ret: ' + data);\n      console.inf", "er_test_03 ret: ' + data);\n      console.inf", "t8Array, 5000).then(data => {\n      console.", " : ' + controlParam.data + ' ' + caseName);\n", "er_test_02 ret: ' + data);\n      console.inf", "er_test_05 ret: ' + data);\n      console.inf", "e readData ret: ' + data);\n      console.inf", "aram, timeout).then(data => {\n      console.", "xport default {\n    data: {\n        title: \"", "index: index,\n      data: tmpUint8Array\n    "], "files": ["index.js", "UsbPortJsunitEx.test.js", "UsbAutoJsunit.test.js", "UsbFunctionsJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js", "UsbCoreJsunit.test.js", "UsbPortJsunit.test.js", "UsbFunctionsJsunit.test.js", "UsbDevicePipeJsunit.test.js", "UsbCoreJsunitEx.test.js", "UsbDevicePipeJsunitEx.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBRequestTargetType", "api_method_all": "enum USBRequestTargetType {\n        \n        USB_REQUEST_TARGET_DEVICE = 0,\n        \n        USB_REQUEST_TARGET_INTERFACE,\n        \n        USB_REQUEST_TARGET_ENDPOINT,\n        \n        USB_REQUEST_TARGET_OTHER\n    }", "api_method_name": "USBRequestTargetType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBRequestTargetType", "api_method_name": "USB_REQUEST_TARGET_DEVICE", "api_method_all": "USB_REQUEST_TARGET_DEVICE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["ANDARD << 5) | (usb.USB_REQUEST_TARGET_DEVICE & 0x1f), 0, 0)\n    ", "ANDARD << 5) | (usb.USB_REQUEST_TARGET_DEVICE & 0x1f), (2 << 8), "], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBRequestTargetType", "api_method_name": "USB_REQUEST_TARGET_INTERFACE", "api_method_all": "USB_REQUEST_TARGET_INTERFACE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["ANDARD << 5) | (usb.USB_REQUEST_TARGET_INTERFACE & 0x1f), (2 << 8), ", "ANDARD << 5) | (usb.USB_REQUEST_TARGET_INTERFACE & 0x1f), 0, 1)\n    "], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBRequestTargetType", "api_method_name": "USB_REQUEST_TARGET_ENDPOINT", "api_method_all": "USB_REQUEST_TARGET_ENDPOINT,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["_CLASS << 5) | (usb.USB_REQUEST_TARGET_ENDPOINT & 0x1f), (2 << 8), "], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBControlRequestType", "api_method_all": "enum USBControlRequestType {\n        \n        USB_REQUEST_TYPE_STANDARD = 0,\n        \n        USB_REQUEST_TYPE_CLASS,\n        \n        USB_REQUEST_TYPE_VENDOR\n    }", "api_method_name": "USBControlRequestType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBControlRequestType", "api_method_name": "USB_REQUEST_TYPE_STANDARD", "api_method_all": "USB_REQUEST_TYPE_STANDARD = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["< 7)\n        | (usb.USB_REQUEST_TYPE_STANDARD << 5) | (usb.USB_RE"], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBControlRequestType", "api_method_name": "USB_REQUEST_TYPE_CLASS", "api_method_all": "USB_REQUEST_TYPE_CLASS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["\n            | (usb.USB_REQUEST_TYPE_CLASS << 5) | (usb.USB_RE", "< 7)\n        | (usb.USB_REQUEST_TYPE_CLASS << 5) | (usb.USB_RE"], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBRequestDirection", "api_method_all": "enum USBRequestDirection {\n        \n        USB_REQUEST_DIR_TO_DEVICE = 0,\n        \n        USB_REQUEST_DIR_FROM_DEVICE = 0x80\n    }", "api_method_name": "USBRequestDirection", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "USBRequestDirection", "api_method_name": "USB_REQUEST_DIR_TO_DEVICE", "api_method_all": "USB_REQUEST_DIR_TO_DEVICE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["sferParam(255, (usb.USB_REQUEST_DIR_TO_DEVICE << 7)\n        | (us", "sferParam(255, (usb.USB_REQUEST_DIR_TO_DEVICE << 7)\n          | (", "ansferParam(1, (usb.USB_REQUEST_DIR_TO_DEVICE << 7)\n        | (us", "nt.direction == usb.USB_REQUEST_DIR_TO_DEVICE) {\n          testPa", "sferParam(255, (usb.USB_REQUEST_DIR_TO_DEVICE << 7)\n            |"], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "USBRequestDirection", "api_method_name": "USB_REQUEST_DIR_FROM_DEVICE", "api_method_all": "USB_REQUEST_DIR_FROM_DEVICE = 0x80", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["sferParam(255, (usb.USB_REQUEST_DIR_FROM_DEVICE << 7)\n        | (us", "ansferParam(8, (usb.USB_REQUEST_DIR_FROM_DEVICE << 7)\n        | (us", "nsferParam(10, (usb.USB_REQUEST_DIR_FROM_DEVICE << 7)\n        | (us", "ansferParam(0, (usb.USB_REQUEST_DIR_FROM_DEVICE << 7)\n        | (us", "nt.direction == usb.USB_REQUEST_DIR_FROM_DEVICE) {\n          testPa", "ansferParam(6, (usb.USB_REQUEST_DIR_FROM_DEVICE << 7)\n        | (us"], "files": ["UsbDevicePipeJsunit.test.js", "UsbDevicePipeJsunitEx.test.js", "UsbDevicePipeJsunit_A.test.js"], "is_white": " ", "desc": " "}]}