{"subsystem_ch": "\u77ed\u8ddd\u901a\u4fe1\u5b50\u7cfb\u7edf", "subsystem_en": "communication", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.connectedTag", "api": [{"api_class_name": "connectedTag", "api_method_all": "declare namespace connectedTag {\n    \n    function init(): boolean;\n\n    \n    function uninit(): boolean;\n\n    \n    function readNdefTag(): Promise<string>;\n    function readNdefTag(callback: AsyncCallback<string>): void;\n\n    \n    function writeNdefTag(data: string): Promise<void>;\n    function writeNdefTag(data: string, callback: AsyncCallback<void>): void;\n\n    \n    function on(type: \"notify\", callback: Callback<number>): void;\n\n    \n    function off(type: \"notify\", callback?:Callback<number>): void;\n\n    \n    enum NfcRfType {\n        \n        NFC_RF_LEAVE = 0;\n\n        \n        NFC_RF_ENTER = 1;\n    }\n}", "api_method_name": "connectedTag", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "connectedTag", "api_method_name": "init", "api_method_all": "function init(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["Instance()\n    core.init()\n    const configS", "xtend)\n        core.init()\n\n        const co"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "connectedTag", "api_method_name": "uninit", "api_method_all": "function uninit(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "connectedTag", "api_method_name": "readNdefTag", "api_method_all": "function readNdefTag(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "connectedTag", "api_method_name": "readNdefTag", "api_method_all": "function readNdefTag(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "connectedTag", "api_method_name": "writeNdefTag", "api_method_all": "function writeNdefTag(data: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "connectedTag", "api_method_name": "writeNdefTag", "api_method_all": "function writeNdefTag(data: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "connectedTag", "api_method_name": "on", "api_method_all": "function on(type: \"notify\", callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3899, "since": 8, "api_used": "\u662f", "lines": ["onShow() {\n        console.info('onShow finish')\n    },\n    on", "ction () {\n        console.info('afterAll called')\n    })\n\n   ", "0:\n                console.info('[bluetooth_js] bt turn off:'+", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "n (done) {\n        console.info('[bluetooth_js] enable start')", "etState();\n        console.info('[bluetooth_js] getState On = ", "('config')\n        configService.setConfig(this)\n\n        requ", "ooth_js] bt turning on:'+ JSON.stringify(sta));\n              ", "finish')\n    },\n    onReady() {\n        console.info('onReady ", " }\n\n    async function tryToEnableBt() {\n        let sta = blu", "t:\n                console.info('[bluetooth_js] enable success", "   beforeEach(function () {\n        console.info('beforeEach c", "ction () {\n        console.info('beforeAll called')\n        ga", "      console.info('onReady finish')\n        const core = Core", "e.info('AceApplication onDestroy');\n    }\n};\n", "ction () {\n        console.info('beforeEach called')\n\n    })\n ", "1:\n                console.info('[bluetooth_js] bt turning on:", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "3:\n                console.info('[bluetooth_js] bt turning off", "0, async function (done) {\n        console.info('[bluetooth_js", "uetooth_js] bt turn on:'+ JSON.stringify(sta));\n              ", "y finish')\n        const core = Core.getInstance()\n        con", "= bluetooth.BLE.getConnectedBLEDevices();\n        console.info", "n (done) {\n        console.info('[bluetooth_js] getConnectedBL", "      console.info('onShow finish')\n    },\n    onReady() {\n   ", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "    beforeAll(function () {\n        console.info('beforeAll ca", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "tEqual(2);\n        done();\n    })\n\n\n    \n    it('SUB_COMMUNACA", "xport default {\n    onCreate() {\n        console.info('AceAppl", "01', 0, async function (done) {\n        console.info('[bluetoo", "getDefaultService('config')\n        configService.setConfig(th", "ction () {\n        console.info('afterEach called')\n    })\n   ", "\n    afterAll(function () {\n        console.info('afterAll cal", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "nReady() {\n        console.info('onReady finish')\n        cons", "2:\n                console.info('[bluetooth_js] bt turn on:'+ ", "'[bluetooth_js] getConnectedBLEDevices test start ...');\n     ", ")\n    })\n\n    function sleep(delay) {\n        return new Promi", "re.init()\n\n        const configService = core.getDefaultServic", "othhostTest', function() {\n\n    let gattServer = null;\n    let", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "t()\n\n        const configService = core.getDefaultService('con", "    afterEach(function () {\n        console.info('afterEach ca", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RpcJsunit.test.js", "BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "app.js", "WifiSoftAP.test.js", "WifiSta.test.js", "index.js", "RpcClientJsunit.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "connectedTag", "api_method_name": "off", "api_method_all": "function off(type: \"notify\", callback?:Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 96, "since": 8, "api_used": "\u662f", "lines": ["     \"offset\": data.offset,\n                    \"value\": str2ab", "   await gattServer.off('characteristicRead', function (data) {", "      bluetooth.BLE.off('BLEDeviceFind', result => {\n          ", "tooth_js] charaRead off data:\" + JSON.stringify(data));\n       ", "     \"offset\": data.offset,\n                    \"value\": data.v", "' + data.transId + 'offset:' + data.offset + 'isPrep:' + data.i", "               data.offset +'descriptorUuid:' + data.descriptor", "\n            expect(off).assertTrue();\n        }\n        let Ho", "    await bluetooth.off(\"sppRead\",-1, (result) => {\n           ", "oth_js] pinRequired off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('connectStateChange', function (data) {", ") {\n            let off = wifi.disableHotspot();\n            aw", "\n            expect(off).assertTrue();\n        }\n        consol", " connectStateChange_off Data:\" + JSON.stringify(data));\n       ", "' + data.transId + 'offset:' + data.offset + 'charUuid:' +\n    ", " + 'offset:' + data.offset + 'isPrep:' + data.isPrep +\n        ", "' + data.transId + 'offset:' + \n                data.offset +'d", "bluetoothDeviceFind off:\" + JSON.stringify(result));\n          ", "   await gattServer.off('descriptorRead', function (data) {\n   ", "   await gattServer.off('descriptorWrite', function (data) {\n  ", "    await bluetooth.off('bluetoothDeviceFind', result => {\n    ", "tspot result -> \" + off);\n            expect(off).assertTrue();", "uetooth_js] bt turn off:'+ JSON.stringify(sta));\n              ", " + 'offset:' + data.offset + 'charUuid:' +\n                data", "         status: 0, offset: 0, value: arrayBuffer};\n        let", "   await gattServer.off('characteristicWrite', function (data) ", "    await bluetooth.off('stateChange', result => {\n            ", "ooth_js] bt turning off:'+ JSON.stringify(sta));\n              ", "      bluetooth.BLE.off('bondStateChange', result => {\n        ", "      bluetooth.BLE.off('pinRequired', result => {\n            ", "ooth_js] charaWrite off data2:\" + JSON.stringify(data));\n      ", "ead response\", data.offset),\n                };\n               ", "_js] BLECharcChange_off data-> \" + JSON.stringify(data));\n     ", "   await gattClient.off('BLECharacteristicChange', function (da", "   await gattClient.off('BLEConnectionStateChange', function (d", "                   \"offset\": data.offset,\n                    \"", "BLEConneStateChange_off data-> \" + JSON.stringify(data));\n     ", "LE scan device find off2:\" + JSON.stringify(result));\n         "], "files": ["BluetoothOn.test.js", "BluetoothBle.test.js", "WifiP2P.test.js", "WifiSoftAP.test.js", "WifiSta.test.js", "Bluetooth.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NfcRfType", "api_method_all": "enum NfcRfType {\n        \n        NFC_RF_LEAVE = 0;\n\n        \n        NFC_RF_ENTER = 1;\n    }", "api_method_name": "NfcRfType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NfcRfType", "api_method_name": "NFC_RF_LEAVE", "api_method_all": "NFC_RF_LEAVE = 0;", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "NfcRfType", "api_method_name": "NFC_RF_ENTER", "api_method_all": "NFC_RF_ENTER = 1;", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}