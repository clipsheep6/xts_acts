{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\text_area", "api": [{"api_class_name": "TextAreaController", "api_method_all": "declare class TextAreaController {\n  \n  constructor();\n  \n  caretPosition(value: number): void;\n}", "api_method_name": "TextAreaController", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaController", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaController", "api_method_name": "caretPosition", "api_method_all": "caretPosition(value: number): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["    this.controller.caretPosition(4)\n        })\n    }", "ext')\n      Button('caretPosition')\n        .onClick("], "files": ["textInput.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaOptions", "api_method_all": "declare interface TextAreaOptions {\n  \n  placeholder?: ResourceStr;\n\n  \n  text?: ResourceStr;\n\n  \n  controller?: TextAreaController;\n}", "api_method_name": "TextAreaOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaOptions", "api_method_name": "placeholder", "api_method_all": "placeholder?: ResourceStr", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 125, "since": 7, "api_used": "\u662f", "lines": ["is.text })\n        .placeholderColor('#FFC0C0C0')\n ", "        TextInput({ placeholder: 'textInput 3', tex", "Search({ value: '', placeholder: \"\" }).width('85%')", "        TextInput({ placeholder: 'textInput 8', tex", "Type.Go)\n          .placeholderColor('#FFC0C0C0')\n ", "        TextInput({ placeholder: 'textInput 6', tex", "        TextInput({ placeholder: 'textInput 5', tex", " {\n      TextArea({ placeholder: 'input your word',", "Search({ value: '', placeholder: 'input content', c", "Color.Red)\n        .placeholderFont({\n          siz", "('search')\n        .placeholderColor(Color.Red)\n   ", "pe.Send)\n          .placeholderColor('#FFC0C0C0')\n ", "FFC0C0C0')\n        .placeholderFont({ size: 30, wei", "        TextInput({ placeholder: 'textInput 4', tex", "inputType)\n        .placeholderColor(\"rgb(0,0,225)\"", "        TextInput({ placeholder: 'textInput 10', te", "        TextInput({ placeholder: 'textInput 9', tex", "pe.Done)\n          .placeholderColor('#FFC0C0C0')\n ", "        TextInput({ placeholder: 'textInput 2', tex", "textArea')\n        .placeholderColor(\"rgb(0,0,225)\"", "        TextInput({ placeholder: 'textInput 7', tex", "C0C0C0')\n          .placeholderFont({ size: 30, wei", "0,0,225)\")\n        .placeholderFont({ size: 30, wei", "pe.Next)\n          .placeholderColor('#FFC0C0C0')\n ", ".Search)\n          .placeholderColor('#FFC0C0C0')\n ", "        TextInput({ placeholder: 'textInput 1', tex", " {\n      TextArea({ placeholder: 'input your word' ", "Search({ value: '', placeholder: '' }).width('90%')", "0)\n      TextArea({ placeholder: 'Please entry keyw"], "files": ["TextInputJsunit.test.ets", "Navigation.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "textArea.ets", "textInput.ets", "textareaProps.test.js", "TextArea.ets", "inputProps.test.js", "index.js", "search.ets", "navigation.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaOptions", "api_method_name": "text", "api_method_all": "text?: ResourceStr", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2156, "since": 7, "api_used": "\u662f", "lines": ["height;\n    this.context.imageSmoothingEnabl", " false;\n    this.context.drawImage(img, 30, ", "    }, item => item.text)\n      }\n      .wid", "riority: 3 },\n    { text: '4\\n(priority:4)',", "          Text(item.text)\n              .wid", ")\n      Button(this.text)\n        .key('enab", "xt = eventData.data.text\n      }\n    }\n  }\n\n", " })\n          .key('text1')\n          .onCli", " })\n          .key('text2')\n          .onCli", "6)\n                .textAlign(TextAlign.Cent", "oundColor(0xF5DEB3).textAlign(TextAlign.Cent", "2 = offscreen.getContext(\"2d\");\n    var img ", "xD2B48C)\n          .textAlign(TextAlign.Cent", "Italic bold cursive text')\n        .fontColo", "      Text('default text').fontSize(20)\n\n   ", "{\n          this.context.imageSmoothingEnabl", "FEEEE)\n            .textAlign(TextAlign.Cent", "alue)\n        .key('text1')\n        .backgro", "0BFFF)\n            .textAlign(TextAlign.Cent", "riority: 1 },\n    { text: '2\\n(priority:2)',", "size)\n        .key('text2')\n        .margin(", "ast({ message: 'The text is hidden', duratio", "olor')\n\n      Text(`text font size ${this.fo", "ight')\n\n      Text(`text fontFamily ${this.f", "Size')\n\n      Text(`text font style ${this.f", "ull) {\n        this.text = eventData.data.te", "riority: 2 },\n    { text: '3\\n(priority:3)',", "en: any[] = [\n    { text: '1\\n(priority:1)',", "('90%')\n      Text('text')\n        .blur(thi", "     Canvas(this.context)\n        .width('10", "682B4)\n            .textAlign(TextAlign.Cent", "xF5DEB3)\n          .textAlign(TextAlign.Cent", "582B4)\n            .textAlign(TextAlign.Cent", "an = true;\n  @State text: string = \"enable\";", " if (eventData.data.text != null) {\n        ", "class ChildInfo {\n  text: string = ''\n  prio", "2 = offscreen.getContext(\"2d\");\n    var imag", "ast({ message: 'The text is shown', duration", "tyle')\n\n      Text(`text fontWeight ${this.f", "(18)\n              .textAlign(TextAlign.Cent", "ze(20)\n\n      Text(`text font color ${this.f"], "files": ["ohosPrompt.ets", "ImageJsunit.test.ets", "textProps.test.js", "Navigator.ets", "canvas2.ets", "Qrcode.ets", "Navigation.ets", "TextPickerJsunit.test.ets", "Span.ets", "sourceType.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "searchProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "TextClockJsunit.test.ets", "textTimer.ets", "Swiper.ets", "basicabilityapi.test.js", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "systemPrompt.ets", "Image.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "focus.ets", "touch.ets", "Text.ets", "SpanJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "Sidebar.ets", "Scroll.ets", "text.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "positionSetting.ets", "TextArea.ets", "edgeEffect.ets", "richtextProps.test.js", "stepper.ets", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "FlexDirectionJsunit.test.ets", "flex.ets", "gridContainer.ets", "textPickerDialog.ets", "gridPage.ets", "enable.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "list.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "pickerProps.test.js", "listItem.ets", "grid.ets", "textareaProps.test.js", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "buttonProps.test.js", "List.test.js", "global.ets", "EnableJsunit.test.ets", "canvas.ets", "pickerViewProps.test.js", "bindContextMenu.ets", "switchProps.test.js", "TextInput.ets", "appear.ets", "Constants.ets", "commonComponentJsApi.test.js", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "areaChange.ets", "GridItem.ets", "timeStamp.ets", "Toggle.ets", "sharedTransition.ets", "ScrollBar.ets", "search.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaOptions", "api_method_name": "controller", "api_method_all": "controller?: TextAreaController", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 50, "since": 8, "api_used": "\u662f", "lines": [" {\n            this.controller.stop()\n          })", " {\n            this.controller.onInactive()\n      ", " {\n            this.controller.loadData({\n        ", "s.accessStep = this.controller.accessStep(1)\n     ", ".nextMonth,\n        controller: this.Controller\n  ", "t getHitTest = this.controller.getHitTest()\n      ", "string= ''\n  @State controller: SearchController= ", " {\n            this.controller.registerJavaScriptP", "cessBackward = this.controller.accessBackward()\n  ", "', controller: this.controller })\n        .searchB", " {\n            this.controller.forward()\n         ", "on.Start, index: 1, controller: this.controller })", " {\n            this.controller.runJavaScript({\n   ", " {\n            this.controller.requestFocus()\n    ", " {\n            this.controller.clearHistory()\n    ", ")=>{\n          this.controller.stop()\n          th", "tion.End, index: 1, controller: this.controller })", "gressRates,\n        controller: this.myVideoContro", " {\n            this.controller.refresh()\n         ", " {\n            this.controller.onActive()\n        ", " {\n            this.controller.close()\n           ", "{\n      TextTimer({ controller: this.myTimerContro", "8, controller: this.controller})\n        .key('tex", "ccessForward = this.controller.accessForward()\n   ", "r: 'input content', controller: this.controller })", " {\n            this.controller.deleteJavaScriptReg", "1, controller: this.controller }) {\n        TabCon", "previewUri,\n        controller: this.myVideoContro", "tTestType.Unknown\n  controller: WebController = ne", "timeZoneOffset: -8, controller: this.controller})\n", ", libraryname: '3', controller: this.xComponentCon", "omDialogExample {\n  controller: CustomDialogContro", "Example {\n  private controller: TabsController = n", " boolean = false;\n  controller: TextClockControlle", " {\n            this.controller.loadUrl({\n         ", " {\n            this.controller.backward()\n        ", "=> {\n          this.controller.caretPosition(4)\n  ", "n = false\n  private controller: TabsController = n", ": this.barPosition, controller: this.controller, i", "('indextest.html'), controller: this.controller })", "), controller: this.controller })\n        .domStor", "n, controller: this.controller, index: this.index ", "=> {\n          this.controller.changeIndex(0)\n    ", "rl);\n          this.controller.runJavaScript('test", ")=>{\n          this.controller.start()\n        })\n"], "files": ["textClock.ets", "tabs.ets", "Video.ets", "WebPage.ets", "video.ets", "Tab.ets", "textInput.ets", "textTimer.ets", "Calendar.ets", "XComponentPage.ets", "search.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaInterface", "api_method_all": "interface TextAreaInterface {\n  \n  (value?: TextAreaOptions): TextAreaAttribute;\n}", "api_method_name": "TextAreaInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaInterface", "api_method_name": "value", "api_method_all": "(value?: TextAreaOptions): TextAreaAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 8, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_all": "declare class TextAreaAttribute extends CommonMethod<TextAreaAttribute> {\n  \n  placeholderColor(value: ResourceColor): TextAreaAttribute;\n\n  \n  placeholderFont(value: Font): TextAreaAttribute;\n\n  \n  textAlign(value: TextAlign): TextAreaAttribute;\n\n  \n  caretColor(value: ResourceColor): TextAreaAttribute;\n\n  \n  fontColor(value: ResourceColor): TextAreaAttribute;\n\n  \n  fontSize(value: Length): TextAreaAttribute;\n\n  \n  fontStyle(value: FontStyle): TextAreaAttribute;\n\n  \n  fontWeight(value: number | FontWeight | string): TextAreaAttribute;\n\n  \n  fontFamily(value: ResourceStr): TextAreaAttribute;\n\n  \n  inputFilter(value: ResourceStr, error?: (value: string) => void): TextAreaAttribute;\n\n  \n  onChange(callback: (value: string) => void): TextAreaAttribute;\n\n  \n  onCopy(callback: (value: string) => void): TextAreaAttribute;\n\n  \n  onCut(callback: (value: string) => void): TextAreaAttribute;\n\n  \n  onPaste(callback: (value: string) => void): TextAreaAttribute;\n}", "api_method_name": "TextAreaAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "placeholderColor", "api_method_all": "placeholderColor(value: ResourceColor): TextAreaAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 28, "since": 7, "api_used": "\u662f", "lines": ["pe.Done)\n          .placeholderColor('#FFC0C0C0')\n      ", "is.text })\n        .placeholderColor('#FFC0C0C0')\n      ", "pe.Send)\n          .placeholderColor('#FFC0C0C0')\n      ", "  expect(obj.$attrs.placeholderColor).assertEqual('#FFC0", "textArea')\n        .placeholderColor(\"rgb(0,0,225)\")\n   ", "Type.Go)\n          .placeholderColor('#FFC0C0C0')\n      ", "inputType)\n        .placeholderColor(\"rgb(0,0,225)\")\n   ", "pe.Next)\n          .placeholderColor('#FFC0C0C0')\n      ", "('search')\n        .placeholderColor(Color.Red)\n        ", ".Search)\n          .placeholderColor('#FFC0C0C0')\n      "], "files": ["TextInputJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "textArea.ets", "textInput.ets", "TextArea.ets", "search.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "placeholderFont", "api_method_all": "placeholderFont(value: Font): TextAreaAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 29, "since": 7, "api_used": "\u662f", "lines": ["FFC0C0C0')\n        .placeholderFont({ size: 30, weight:", "  expect(obj.$attrs.placeholderFont).assertContain('Fon", "Color.Red)\n        .placeholderFont({\n          size: 1", " is: \" + obj.$attrs.placeholderFont);\n      console.inf", "0,0,225)\")\n        .placeholderFont({ size: 30, weight:", "C0C0C0')\n          .placeholderFont({ size: 30, weight:", " is: \" + obj.$attrs.placeholderFont.size);\n      consol"], "files": ["TextInputJsunit.test.ets", "TextInput.ets", "textArea.ets", "textInput.ets", "TextArea.ets", "search.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "textAlign", "api_method_all": "textAlign(value: TextAlign): TextAreaAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 199, "since": 7, "api_used": "\u662f", "lines": ["wberry')\n          .textAlign(TextAlign.Center).b", "ign: \" + obj.$attrs.textAlign);\n      expect(obj.", "th(120).height(120).textAlign(TextAlign.Center).f", "PositionSetting001] textAlign: \" + obj.$attrs.tex", "xD2B48C)\n          .textAlign(TextAlign.Center)\n ", "(10)\n              .textAlign(TextAlign.Center).b", "dth('90%')\n        .textAlign(TextAlign.Start).ma", "'mango')\n          .textAlign(TextAlign.Center).b", "0BFFF)\n            .textAlign(TextAlign.Center)\n ", "Radius(10)\n        .textAlign(TextAlign.Center).b", "682B4)\n            .textAlign(TextAlign.Center)\n ", "'cursive')\n        .textAlign(TextAlign.Center)\n ", "banana')\n          .textAlign(TextAlign.Center).b", "  expect(obj.$attrs.textAlign).assertEqual('TextA", " if (eventData.data.textAlign) {\n        this.ali", "PositionSetting003] textAlign: \" + obj.$attrs.tex", "FEEEE)\n            .textAlign(TextAlign.Center)\n ", " ATTRS_TEXTALIGN = 'textAlign'\nconst ATTRS_CONTEN", "height(50)\n        .textAlign(TextAlign.Center)\n ", "  expect(obj.$attrs.textAlign).assertEqual(\"TextA", "oundColor(0xF5DEB3).textAlign(TextAlign.Center)\n ", " getInspectorByKey('textAlign');\n      console.in", "xFFEFD5)\n          .textAlign(TextAlign.Center)\n ", "xF5DEB3)\n          .textAlign(TextAlign.Center)\n ", "orange')\n          .textAlign(TextAlign.Center).b", "582B4)\n            .textAlign(TextAlign.Center)\n ", "C4)\n          .key('textAlign')\n\n        Text('di", "6)\n                .textAlign(TextAlign.Center)\n ", "6)\n                .textAlign(TextAlign.Center).b", "(18)\n              .textAlign(TextAlign.Center)\n ", "'apple')\n          .textAlign(TextAlign.Center).b", "ata: {\n            \"textAlign\": Alignment.BottomE"], "files": ["flex.ets", "gridContainer.ets", "gridPage.ets", "canvas.ets", "badge.ets", "bindContextMenu.ets", "Text.ets", "textStyle.ets", "Navigation.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "Constants.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "text.ets", "Grid.ets", "FormComponentPage.ets", "layoutConstraints.ets", "list.ets", "positionSetting.ets", "List.ets", "TextArea.ets", "GridContainer.ets", "dragEvent2.ets", "index.js", "Swiper.ets", "edgeEffect.ets", "backgroundAndSizeSetting.ets", "border.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "GridItem.ets", "TextAreaJsunit.test.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "listItem.ets", "grid.ets", "image.ets", "sharedTransition.ets", "ScrollBar.ets", "ColumnSplit.ets", "scrollCode.ets", "NavigatorCode.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "caretColor", "api_method_all": "caretColor(value: ResourceColor): TextAreaAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["gn.Center)\n        .caretColor('#FF000000')\n      ", "Align.End)\n        .caretColor('#FF000000')\n      ", "textAlign)\n        .caretColor(Color.Blue)\n       ", "ormal })\n          .caretColor('#FF000000')\n      ", "  expect(obj.$attrs.caretColor).assertEqual('#FF00", "ign.Start)\n        .caretColor('#FF000000')\n      "], "files": ["TextInputJsunit.test.ets", "TextAreaJsunit.test.ets", "TextInput.ets", "textArea.ets", "textInput.ets", "TextArea.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "fontColor", "api_method_all": "fontColor(value: ResourceColor): TextAreaAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 384, "since": 7, "api_used": "\u662f", "lines": ["Size(35)\n          .fontColor(Color.Blue)\n       ", " {\n                \"fontColor\": this.fontColor,\n ", "ize(9).width('90%').fontColor(0xCCCCCC)\n        R", "hrink').fontSize(9).fontColor(0xCCCCCC).width('90", "extStyle {\n  @State fontColor: Color = Color.Red;", "grid').fontSize(20).fontColor(Color.Black).width(", "pect(eventData.data.fontColor).assertEqual(Color.", "\"[testTextStyle001] fontColor: \" + obj.$attrs.fon", "Blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ness').fontSize(15).fontColor(0xCCCCCC).width('90", "rast').fontSize(15).fontColor(0xCCCCCC).width('90", "ty 4').fontSize(20).fontColor(Color.Black).width(", "s rolling\"\n  @State fontColor: Color = Color.Blue", "blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ive text')\n        .fontColor(Color.Red)\n        ", "lor) {\n        this.fontColor = eventData.data.fo", "vert').fontSize(15).fontColor(0xCCCCCC).width('90", "'marquee')\n        .fontColor(this.fontColor)\n   ", "      .fontSize(12).fontColor(0xCCCCCC).maxLines(", "adow').fontSize(15).fontColor(0xCCCCCC).width('90", "tate').fontSize(15).fontColor(0xCCCCCC).width('90", "    .fontColor(this.fontColor)\n        .colorBlen", "  \"fontColor\": this.fontColor,\n              }\n  ", "xGrow\").fontSize(9).fontColor(0xCCCCCC).width('90", " row').fontSize(20).fontColor(Color.Black).width(", "  expect(obj.$attrs.fontColor).assertEqual('#FFFF", "e(20)\n        .key('fontColor')\n\n      Text(`text", "Items').fontSize(9).fontColor(0xCCCCCC).width('90", "or = eventData.data.fontColor;\n      } else if (e", "pro text')\n        .fontColor(Color.Orange)\n     ", "cale').fontSize(15).fontColor(0xCCCCCC).width('90", "ntColor}`)\n        .fontColor(this.fontColor)\n   ", "lor: \" + obj.$attrs.fontColor);\n      expect(obj.", "\"[testTextStyle002] fontColor: \" + obj.$attrs.fon", "ageShow() {\n    let fontColorChangeEvent = {\n    ", "    .fontColor(this.fontColor)\n        .fontSize(", " getInspectorByKey('fontColor');\n      console.in", "  events_emitter.on(fontColorChangeEvent, this.te", "rate').fontSize(15).fontColor(0xCCCCCC).width('90", "Basis').fontSize(9).fontColor(0xCCCCCC).width('90", " state is: ' + this.fontColor);\n          try {\n ", "ata: {\n            \"fontColor\": Color.Blue\n      ", "t font color ${this.fontColor}`)\n        .fontCol", "nSelf\").fontSize(9).fontColor(0xCCCCCC).width('90", " if (eventData.data.fontColor) {\n        this.fon"], "files": ["enumsHorizontalAlign.ets", "imageFit.ets", "Span.ets", "column.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "textArea.ets", "textInput.ets", "transForm.ets", "path.ets", "Column.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "PatternLock.ets", "Stepper.ets", "enumsImage.ets", "PieceCode.ets", "textStyle.ets", "imageEffects.ets", "textClock.ets", "layoutConstraints.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "Path.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "TextTimerJsunit.test.ets", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "ColumnSplit.ets", "colorGradient.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "fontSize", "api_method_all": "fontSize(value: Length): TextAreaAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 588, "since": 7, "api_used": "\u662f", "lines": ["lor.Green)\n        .fontSize(this.fontSize)\n    ", "w').key(\"flexGrow\").fontSize(9).fontColor(0xCCCC", "t('4')\n            .fontSize(20)\n            .us", "ge Two')\n          .fontSize(35)\n          .font", "  Text('grayscale').fontSize(15).fontColor(0xCCC", "     Text('shadow').fontSize(15).fontColor(0xCCC", "  Text('hueRotate').fontSize(15).fontColor(0xCCC", "t('1')\n            .fontSize(20)\n            .us", "     Text('invert').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backdr", "ETS TEST')\n        .fontSize(50)\n        .fontWe", "g container: grid').fontSize(20).fontColor(Color", "(60)\n              .fontSize(18)\n              .", "0)\n                .fontSize(16)\n               ", "ext('default text').fontSize(20)\n\n      Text(`te", " {\n                \"fontSize\": this.fontSize,\n  ", "   \"fontSize\": this.fontSize,\n              }\n  ", "2cb)\n              .fontSize(40)\n              .", "     Text('Center').fontSize(25)\n        }\n     ", "     .fontSize(this.fontSize)\n        .allowScal", "bb2cb)\n            .fontSize(20)\n            .as", "').key(\"alignSelf\").fontSize(9).fontColor(0xCCCC", "  Text('font blur').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backgr", "ng container: row').fontSize(20).fontColor(Color", "Color.Red;\n  @State fontSize: string = 20;\n  @St", "xt font size ${this.fontSize}`)\n        .fontSiz", "enter)\n            .fontSize(20)\n        }, item", "fontColor)\n        .fontSize(20)\n        .key('f", "t('3')\n            .fontSize(20)\n            .us", "e four')\n          .fontSize(35)\n          .font", " Text('brightness').fontSize(15).fontColor(0xCCC", "margin(30)\n        .fontSize(20)\n        .onClic", " Text('alignItems').fontSize(9).fontColor(0xCCCC", " state is: ' + this.fontSize);\n          try {\n ", "displayPriority 4').fontSize(20).fontColor(Color", " layer')\n          .fontSize(12).fontColor(0xCCC", "olor.Blue;\n  @State fontSize: number = 50;\n  @St", "  Text('flexBasis').fontSize(9).fontColor(0xCCCC", "   Text('saturate').fontSize(15).fontColor(0xCCC", "ext('backdropBlur').fontSize(15).fontColor(0xCCC", "ge One')\n          .fontSize(35)\n          .font", "   Text('contrast').fontSize(15).fontColor(0xCCC", "t('2')\n            .fontSize(20)\n            .us", "       Text('Left').fontSize(25)\n        }\n     ", "      Text('Right').fontSize(25)\n        }\n     ", " Three')\n          .fontSize(35)\n          .font", " Text('flexShrink').fontSize(9).fontColor(0xCCCC"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "placement.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "Stack.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "stepper.ets", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "MarqueeJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "lazyForEach.ets", "listItem.ets", "grid.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "rating.ets", "Path.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "Toggle.ets", "slider.ets", "Calendar.ets", "refresh.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "fontStyle", "api_method_all": "fontStyle(value: FontStyle): TextAreaAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 62, "since": 7, "api_used": "\u662f", "lines": ["gCallBack);\n    let fontStyleChangeEvent = {\n    ", "\"[testTextStyle014] fontStyle: \" + obj.$attrs.fon", "ull) {\n        this.fontStyle = eventData.data.fo", "  expect(obj.$attrs.fontStyle).assertEqual('FontS", "  events_emitter.on(fontStyleChangeEvent, this.te", "le = eventData.data.fontStyle;\n      }\n      if(e", "ata: {\n            \"fontStyle\": FontStyle.Normal\n", "t font style ${this.fontStyle}`)\n        .fontSty", "ntSize(20)\n        .fontStyle(FontStyle.Normal)\n ", "ntStyle}`)\n        .fontStyle(this.fontStyle)\n   ", "number = 1\n  @State fontStyle: FontStyle = FontSt", "\"[testTextStyle015] fontStyle: \" + obj.$attrs.fon", "ntSize(20)\n        .fontStyle(FontStyle.Italic)\n ", "\"[testTextStyle012] fontStyle: \" + obj.$attrs.fon", ".Bold)\n            .fontStyle(FontStyle.Italic)\n ", "\"[testTextStyle011] fontStyle: \" + obj.$attrs.fon", "ring = 20;\n  @State fontStyle: FontStyle = FontSt", "else {\n        this.fontStyle = eventData.data.fo", "    .fontStyle(this.fontStyle)\n        .fontSize(", " getInspectorByKey('fontStyle');\n      console.in", "ata: {\n            \"fontStyle\": 0x80000000\n      ", "ns-serif\")\n        .fontStyle(FontStyle.Normal)\n ", " ATTRS_FONTSTYLE = 'fontStyle'\nconst ATTRS_FONTSI", "ition.End;\n  @State fontStyle: FontStyle = FontSt", "le = eventData.data.fontStyle;\n      }\n    }\n  }\n", "  if(eventData.data.fontStyle != null) {\n        ", "ata: {\n            \"fontStyle\": 'error'\n         ", "yle: \" + obj.$attrs.fontStyle);\n      expect(obj.", "ata: {\n            \"fontStyle\": 0x7FFFFFFF\n      ", "    .fontStyle(this.fontStyle)\n        .showDelet", "his.Color)\n        .fontStyle(this.fontStyle)\n   ", "e(20)\n        .key('fontStyle')\n\n      Text(`text", "\"[testTextStyle013] fontStyle: \" + obj.$attrs.fon"], "files": ["TextInputJsunit.test.ets", "textStyle.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "textArea.ets", "textInput.ets", "Constants.ets", "TextArea.ets", "PieceCode.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "fontWeight", "api_method_all": "fontWeight(value: number | FontWeight | string): TextAreaAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 147, "since": 7, "api_used": "\u662f", "lines": [": FoodData\n  @State fontWeight: FontWeight = FontW", "\"[testTextStyle020] fontWeight: \" + obj.$attrs.fon", "Size(17.4)\n        .fontWeight(this.fontWeight)\n  ", "ata: {\n            \"fontWeight\": 0x80000000\n      ", "(2)\n    }\n    .key('fontWeight')\n  }\n\n  build() {\n", "ata: {\n            \"fontWeight\": 400\n          }\n ", "ata: {\n            \"fontWeight\": 0x7FFFFFFF\n      ", "  expect(obj.$attrs.fontWeight).assertEqual('FontW", "ght) {\n        this.fontWeight = eventData.data.fo", " getInspectorByKey('fontWeight');\n      console.in", "ATTRS_FONTWEIGHT = 'fontWeight'\nconst ATTRS_FONTST", "ntSize(50)\n        .fontWeight(FontWeight.Bold)\n  ", "\"[testTextStyle018] fontWeight: \" + obj.$attrs.fon", "   .fontWeight(this.fontWeight)\n        .fontSize(", "tWeight}`)\n        .fontWeight(this.fontWeight)\n  ", "gCallBack);\n    let fontWeightChangeEvent = {\n    ", "t fontWeight ${this.fontWeight}`)\n        .fontWei", "  events_emitter.on(fontWeightChangeEvent, this.te", ".fontSize)\n        .fontWeight(FontWeight.Bold)\n  ", "le.Italic;\n  @State fontWeight: string = 700;\n  @S", "ht = eventData.data.fontWeight;\n      } else if (e", "e(20)\n        .key('fontWeight')\n\n      Text(`text", "le.Italic)\n        .fontWeight(700)\n        .fontF", "ata: {\n            \"fontWeight\": 'error'\n         ", "ale(false)\n        .fontWeight(FontWeight.Bold)\n  ", "ght: \" + obj.$attrs.fontWeight);\n      expect(obj.", "\"[testTextStyle017] fontWeight: \" + obj.$attrs.fon", "le.Normal)\n        .fontWeight(400)\n        .fontF", ")\n\n      Text(`text fontWeight ${this.fontWeight}`", "\"[testTextStyle016] fontWeight: \" + obj.$attrs.fon", "\"[testTextStyle019] fontWeight: \" + obj.$attrs.fon", "   .fontWeight(this.fontWeight)\n        .layoutWei", " if (eventData.data.fontWeight) {\n        this.fon"], "files": ["systemRouterA.ets", "RowSplit.ets", "gridPage.ets", "Slider.ets", "PanDirectionJsunit.test.ets", "Qrcode.ets", "Text.ets", "textStyle.ets", "Counter.ets", "Stack.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "Constants.ets", "ohosRouterB.ets", "Progress.ets", "Blank.ets", "ColumnSplit.ets", "Prop.ets", "Scroll.ets", "FormComponentPage.ets", "GestureModeJsunit.test.ets", "TextStyleJsunit.test.ets", "marquee.ets", "Rating.ets", "AppStorage.ets", "TextArea.ets", "QrCode.ets", "GridContainer.ets", "direction.ets", "ohosRouterA.ets", "index.ets", "Link.ets", "systemRouterB.ets", "TextInputJsunit.test.ets", "TextAreaJsunit.test.ets", "textArea.ets", "textInput.ets", "Button.ets", "Image.ets", "Calendar.ets", "fontWeight.ets", "ScrollBar.ets", "Badge.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "fontFamily", "api_method_all": "fontFamily(value: ResourceStr): TextAreaAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 48, "since": 7, "api_used": "\u662f", "lines": ["gCallBack);\n    let fontFamilyChangeEvent = {\n    ", "\"[testTextStyle023] fontFamily: \" + obj.$attrs.fon", "ily: \" + obj.$attrs.fontFamily);\n      expect(obj.", "  expect(obj.$attrs.fontFamily).assertEqual('cursi", "\"[testTextStyle022] fontFamily: \" + obj.$attrs.fon", "  events_emitter.on(fontFamilyChangeEvent, this.te", "  expect(obj.$attrs.fontFamily).assertEqual('sans-", "e(20)\n        .key('fontFamily')\n\n      Text('red ", "tringify(obj.$attrs.fontFamily));\n      console.lo", "fontStyle)\n        .fontFamily(\"sans-serif\")\n     ", "  expect(obj.$attrs.fontFamily).assertEqual(\"sans-", "eight(700)\n        .fontFamily('cursive')\n        ", "ht.Bold)\n          .fontFamily('cursive')\n        ", "eight(400)\n        .fontFamily('source-sans-pro,cu", "ight.Bold)\n        .fontFamily('cursive')\n        ", "onsole.log(\"cd text fontFamily\" + JSON.stringify(o", "ily) {\n        this.fontFamily = eventData.data.fo", "ATTRS_FONTFAMILY = 'fontFamily'\nconst ATTRS_FONTWE", "tFamily}`)\n        .fontFamily(this.fontFamily)\n  ", "99')\n              .fontFamily('source-sans-pro,cu", "ly = eventData.data.fontFamily;\n      } else {\n   ", "t fontFamily ${this.fontFamily}`)\n        .fontFam", "ata: {\n            \"fontFamily\": 'Arial'\n         ", "\"[testTextStyle021] fontFamily: \" + obj.$attrs.fon", "  expect(obj.$attrs.fontFamily).assertEqual('Arial", "  expect(obj.$attrs.fontFamily).assertEqual('error", " getInspectorByKey('fontFamily');\n      console.in", " if (eventData.data.fontFamily) {\n        this.fon", "ing = 700;\n  @State fontFamily: string = 'sans-ser", "ight.Bold)\n        .fontFamily(\"sans-serif\")\n     ", "ing(5)\n            .fontFamily(\"sans-serif\")\n     ", "   .fontFamily(this.fontFamily)\n        .fontSize(", ")\n\n      Text(`text fontFamily ${this.fontFamily}`", "ata: {\n            \"fontFamily\": 'error'\n         "], "files": ["TextInputJsunit.test.ets", "textStyle.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "textArea.ets", "textInput.ets", "Constants.ets", "sideBar.ets", "TextArea.ets", "Marquee.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "inputFiltervalue", "api_method_all": "inputFilter(value: ResourceStr, error?: (value: string) => void): TextAreaAttribute;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "inputFiltervalue", "api_method_all": "inputFilter(value: ResourceStr, error?: (value: string) => void): TextAreaAttribute;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "onChangecallback", "api_method_all": "onChange(callback: (value: string) => void): TextAreaAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "onChangecallback", "api_method_all": "onChange(callback: (value: string) => void): TextAreaAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "onCopycallback", "api_method_all": "onCopy(callback: (value: string) => void): TextAreaAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "onCopycallback", "api_method_all": "onCopy(callback: (value: string) => void): TextAreaAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "onCutcallback", "api_method_all": "onCut(callback: (value: string) => void): TextAreaAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "onCutcallback", "api_method_all": "onCut(callback: (value: string) => void): TextAreaAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "onPastecallback", "api_method_all": "onPaste(callback: (value: string) => void): TextAreaAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextAreaAttribute", "api_method_name": "onPastecallback", "api_method_all": "onPaste(callback: (value: string) => void): TextAreaAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}