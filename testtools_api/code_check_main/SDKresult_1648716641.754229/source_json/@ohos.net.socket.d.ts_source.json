{"subsystem_ch": "\u7535\u8bdd\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "telephony", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.net.socket", "api": [{"api_class_name": "socket", "api_method_all": "declare namespace socket {\r\n  export \r\n  \r\n  function constructUDPSocketInstance(): UDPSocket;\r\n\r\n  \r\n  function constructTCPSocketInstance(): TCPSocket;\r\n\r\n  export interface UDPSendOptions {\r\n    \r\n    data: string | ArrayBuffer;\r\n    \r\n    address: NetAddress;\r\n  }\r\n\r\n  export interface ExtraOptionsBase {\r\n    \r\n    receiveBufferSize?: number;\r\n    \r\n    sendBufferSize?: number;\r\n    \r\n    reuseAddress?: boolean;\r\n    \r\n    socketTimeout?: number;\r\n  }\r\n\r\n  export interface UDPExtraOptions extends ExtraOptionsBase {\r\n    \r\n    broadcast?: boolean;\r\n  }\r\n\r\n  export interface SocketStateBase {\r\n    \r\n    isBound: boolean;\r\n    \r\n    isClose: boolean;\r\n    \r\n    isConnected: boolean;\r\n  }\r\n\r\n  export interface SocketRemoteInfo {\r\n    \r\n    address: string;\r\n    \r\n    family: 'IPv4' | 'IPv6';\r\n    \r\n    port: number;\r\n    \r\n    size: number;\r\n  }\r\n\r\n  export interface UDPSocket {\r\n    \r\n    bind(address: NetAddress, callback: AsyncCallback<void>): void;\r\n    bind(address: NetAddress): Promise<void>;\r\n\r\n    \r\n    send(options: UDPSendOptions, callback: AsyncCallback<void>): void;\r\n    send(options: UDPSendOptions): Promise<void>;\r\n\r\n    \r\n    close(callback: AsyncCallback<void>): void;\r\n    close(): Promise<void>;\r\n\r\n    \r\n    getState(callback: AsyncCallback<SocketStateBase>): void;\r\n    getState(): Promise<SocketStateBase>;\r\n\r\n    \r\n    setExtraOptions(options: UDPExtraOptions, callback: AsyncCallback<void>): void;\r\n    setExtraOptions(options: UDPExtraOptions): Promise<void>;\r\n\r\n    \r\n    on(type: 'message', callback: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;\r\n\r\n    \r\n    off(type: 'message', callback?: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;\r\n\r\n    \r\n    on(type: 'listening' | 'close', callback: Callback<void>): void;\r\n\r\n    \r\n    off(type: 'listening' | 'close', callback?: Callback<void>): void;\r\n\r\n    \r\n    on(type: 'error', callback: ErrorCallback): void;\r\n\r\n    \r\n    off(type: 'error', callback?: ErrorCallback): void;\r\n  }\r\n\r\n  export interface TCPConnectOptions {\r\n    \r\n    address: NetAddress;\r\n    \r\n    timeout?: number;\r\n  }\r\n\r\n  export interface TCPSendOptions {\r\n    \r\n    data: string | ArrayBuffer;\r\n    \r\n    encoding?: string;\r\n  }\r\n\r\n  export interface TCPExtraOptions extends ExtraOptionsBase {\r\n    \r\n    keepAlive?: boolean;\r\n    \r\n    OOBInline?: boolean;\r\n    \r\n    TCPNoDelay?: boolean;\r\n    \r\n    socketLinger: {on: boolean, linger: number};\r\n  }\r\n\r\n  export interface TCPSocket {\r\n    \r\n    bind(address: NetAddress, callback: AsyncCallback<void>): void;\r\n    bind(address: NetAddress): Promise<void>;\r\n\r\n    \r\n    connect(options: TCPConnectOptions, callback: AsyncCallback<void>): void;\r\n    connect(options: TCPConnectOptions): Promise<void>;\r\n\r\n    \r\n    send(options: TCPSendOptions, callback: AsyncCallback<void>): void;\r\n    send(options: TCPSendOptions): Promise<void>;\r\n\r\n    \r\n    close(callback: AsyncCallback<void>): void;\r\n    close(): Promise<void>;\r\n\r\n    \r\n    getRemoteAddress(callback: AsyncCallback<NetAddress>): void;\r\n    getRemoteAddress(): Promise<NetAddress>;\r\n\r\n    \r\n    getState(callback: AsyncCallback<SocketStateBase>): void;\r\n    getState(): Promise<SocketStateBase>;\r\n\r\n    \r\n    setExtraOptions(options: TCPExtraOptions, callback: AsyncCallback<void>): void;\r\n    setExtraOptions(options: TCPExtraOptions): Promise<void>;\r\n\r\n    \r\n    on(type: 'message', callback: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;\r\n\r\n    \r\n    off(type: 'message', callback?: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;\r\n\r\n    \r\n    on(type: 'connect' | 'close', callback: Callback<void>): void;\r\n\r\n    \r\n    off(type: 'connect' | 'close', callback?: Callback<void>): void;\r\n\r\n    \r\n    on(type: 'error', callback: ErrorCallback): void;\r\n\r\n    \r\n    off(type: 'error', callback?: ErrorCallback): void;\r\n  }\r\n}", "api_method_name": "socket", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 165, "since": 0, "api_used": "\u662f", "lines": ["/index.ets\";\nimport socket from '@ohos.net.soc", "et tcpExtraOptions: socket.TCPExtraOptions = {", "t.test.ets';\nimport socketJsunit from './Socke", "    let netAddress: socket.NetAddress = {\n    ", "ect(tcpExtraOptions.socketLinger.on).assertTru", "ct(extraOptionsBase.socketTimeout === 5000).as", "et_ExtraOptionsBase_socketTimeout_0100 Test st", "elay: true,\n        socketLinger: {\n          ", "ket_TCPExtraOptions_socketLinger_0100\n     * @", "    var tcpSocket = socket.constructTCPSocketI", "t socketRemoteInfo: socket.SocketRemoteInfo = ", "et_ExtraOptionsBase_socketTimeout_0100 Test en", "******\");\n      let socketStateBase: socket.So", " tcpConnectOptions: socket.TCPConnectOptions =", "    var udpSocket = socket.constructUDPSocketI", "t extraOptionsBase: socket.ExtraOptionsBase = ", "  : TCPExtraOptions.socketLinger\n     */\n    i", "et socketStateBase: socket.SocketStateBase = {", "ket from '@ohos.net.socket'\nimport utils from ", "     }\n      expect(socketRemoteInfo.size === ", "let tcpSendOptions: socket.TCPSendOptions = {\n", "ket_TCPExtraOptions_socketLinger_0100 Test sta", "ite() {\n  //other\n  socketJsunit();\n  webSocke", "ct(!tcpExtraOptions.socketLinger.linger).asser", "     }\n      expect(socketRemoteInfo.port === ", ".log(\"************* socket Test start*********", "nit() {\n  describe('socketTest', function () {", "ress: true,\n        socketTimeout: 5000,\n     ", "  : TCPExtraOptions.socketLinger\n     * @tc.de", "******\");\n      let socketRemoteInfo: socket.S", "ket_TCPExtraOptions_socketLinger_0100', 0, asy", "     }\n      expect(socketStateBase.isClose).a", "let udpSendOptions: socket.UDPSendOptions = {\n", "et_ExtraOptionsBase_socketTimeout_0100', 0, as", "rt default function socketJsunit() {\n  describ"], "files": ["List.test.ets", "SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "socket", "api_method_name": "constructUDPSocketInstance", "api_method_all": "function constructUDPSocketInstance(): UDPSocket;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["phony_Socket_Socket_constructUDPSocketInstance_0100 Test start****", "phony_Socket_Socket_constructUDPSocketInstance_0100', 0, async fun", " udpSocket = socket.constructUDPSocketInstance();\n      expect(udp", "phony_Socket_Socket_constructUDPSocketInstance_0100 Test end******"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "socket", "api_method_name": "constructTCPSocketInstance", "api_method_all": "function constructTCPSocketInstance(): TCPSocket;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["phony_Socket_Socket_constructTCPSocketInstance_0100 Test start****", " tcpSocket = socket.constructTCPSocketInstance();\n      expect(tcp", "phony_Socket_Socket_constructTCPSocketInstance_0100 Test end******", "phony_Socket_Socket_constructTCPSocketInstance_0100', 0, async fun"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSendOptions", "api_method_all": "export interface UDPSendOptions {\r\n    \r\n    data: string | ArrayBuffer;\r\n    \r\n    address: NetAddress;\r\n  }", "api_method_name": "UDPSendOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["t('Telephony_Socket_UDPSendOptions_data_0100', 0, asyn", "** Telephony_Socket_UDPSendOptions_data_0100 Test star", "SendOptions: socket.UDPSendOptions = {\n        data: \"", "** Telephony_Socket_UDPSendOptions_data_0100 Test end*"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSendOptions", "api_method_name": "data", "api_method_all": "data: string | ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2666, "since": 0, "api_used": "\u662f", "lines": ["T, RTT_MSG, (error, data) => {\n            i", "_NOT_EXIST, (error, data) => {\n            i", "_ID_NOT_EXIST).then(data => {\n            ex", ", PHONE_LIST2).then(data => {\n            ex", "XIST, RTT_MSG).then(data => {\n            ex", "}, function (error, data) {});\n        try {", "success,case failed,data:${toString(data)}`)", "ID_INVALID, (error, data) => {\n            i", "OT_ID_INVALID).then(data => {\n            ex", "xport default {\n    data: {\n        title: \"", "                let data = await hangupCall(", "HONE_LIST2, (error, data) => {\n            i", " success ${toString(data)}`);\n            }\n", "led,data:${toString(data)}`);\n            do"], "files": ["ConnectionJsunit.test.ets", "Stability_test.js", "SimJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "ScenceLimitCalling.js", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "ConnectionSecondJsUnit.test.ets", "recovery_test.js", "ConvertOptionsJsunit.test.ets", "common.js", "DataPanel.ets", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "SimManager.test.js", "ApiToPromise.js", "Voicemail_test.js", "ScenceTransfer.js", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "CellularDataAbnorma.test.js", "Calllog_test.js", "ApiToPromiseReliability.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSendOptions", "api_method_name": "address", "api_method_all": "address: NetAddress", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 138, "since": 0, "api_used": "\u662f", "lines": ["                    address: {\n                ", "     address: \"test address\",\n        family: 1", "contact_data postal_address insert error = \" + ", "me to obtain all IP addresses based on the defa", "                    address: \"192.168.1.3\"\n    ", "     : Binds the IP address and port number.\n  ", "le.getAddressByName(addressBaidu, (error, value", "dress: \"second test address\"\n      }\n      sock", "tent_type\": \"postal_address\",\n                \"", "Address = {\n        address: \"second test addre", "test data\",\n        address: {\n          addres", "     address: \"test address\",\n        family: '", "s.address === \"test address\").assertTrue()\n    ", " = 1 data is postal_address\n            conditi", "                    address: \"192.168.1.2\"\n    ", "ddress: {\n          address: \"test address\",\n  ", "  expect(netAddress.address === \"test address\")", "wContactId, \"postal_address\", \"dddd\", \"\");\n    ", "Options = {\n        address: {\n          addres", "                    address: \"192.168.1.1\"\n    ", ".getAddressesByName(addressBaidu, (error, value", "_data in batches of address book\n     * @tc.des", "tent_type\": \"postal_address\",\n                 ", "Address = {\n        address: \"test address\",\n  ", "oteInfo = {\n        address: \"test address\",\n  ", "     address: \"test address\",\n          family:"], "files": ["ConnectionJsunit.test.ets", "SmsMmsJsunit.test.ets", "SocketJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "ConnectionSecondJsUnit.test.ets", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtraOptionsBase", "api_method_all": "export interface ExtraOptionsBase {\r\n    \r\n    receiveBufferSize?: number;\r\n    \r\n    sendBufferSize?: number;\r\n    \r\n    reuseAddress?: boolean;\r\n    \r\n    socketTimeout?: number;\r\n  }", "api_method_name": "ExtraOptionsBase", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 16, "since": 0, "api_used": "\u662f", "lines": ["t('Telephony_Socket_ExtraOptionsBase_receiveBufferSize_0", "** Telephony_Socket_ExtraOptionsBase_receiveBufferSize_0", "t('Telephony_Socket_ExtraOptionsBase_reuseAddress_0100',", "OptionsBase: socket.ExtraOptionsBase = {\n        receive", "t('Telephony_Socket_ExtraOptionsBase_socketTimeout_0100'", "t('Telephony_Socket_ExtraOptionsBase_sendBufferSize_0100", "** Telephony_Socket_ExtraOptionsBase_sendBufferSize_0100", "** Telephony_Socket_ExtraOptionsBase_reuseAddress_0100 T", "** Telephony_Socket_ExtraOptionsBase_socketTimeout_0100 "], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtraOptionsBase", "api_method_name": "receiveBufferSize", "api_method_all": "receiveBufferSize?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["et_ExtraOptionsBase_receiveBufferSize_0100', 0, async fun", "onsBase = {\n        receiveBufferSize: 1,\n        sendBuf", "et_ExtraOptionsBase_receiveBufferSize_0100 Test start****", "ct(extraOptionsBase.receiveBufferSize === 1).assertTrue()", "et_ExtraOptionsBase_receiveBufferSize_0100 Test end******"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtraOptionsBase", "api_method_name": "sendBufferSize", "api_method_all": "sendBufferSize?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["ferSize: 1,\n        sendBufferSize: 1,\n        reuseAd", "et_ExtraOptionsBase_sendBufferSize_0100', 0, async fun", "ct(extraOptionsBase.sendBufferSize === 1).assertTrue()", "et_ExtraOptionsBase_sendBufferSize_0100 Test end******", "et_ExtraOptionsBase_sendBufferSize_0100 Test start****"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtraOptionsBase", "api_method_name": "reuseAddress", "api_method_all": "reuseAddress?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["ferSize: 1,\n        reuseAddress: true,\n        sock", "et_ExtraOptionsBase_reuseAddress_0100 Test start****", "et_ExtraOptionsBase_reuseAddress_0100 Test end******", "et_ExtraOptionsBase_reuseAddress_0100', 0, async fun", "ct(extraOptionsBase.reuseAddress).assertTrue()\n     "], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ExtraOptionsBase", "api_method_name": "socketTimeout", "api_method_all": "socketTimeout?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["et_ExtraOptionsBase_socketTimeout_0100', 0, async fun", "et_ExtraOptionsBase_socketTimeout_0100 Test end******", "et_ExtraOptionsBase_socketTimeout_0100 Test start****", "ress: true,\n        socketTimeout: 5000,\n      }\n    ", "ct(extraOptionsBase.socketTimeout === 5000).assertTru"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPExtraOptions", "api_method_all": "export interface UDPExtraOptions extends ExtraOptionsBase {\r\n    \r\n    broadcast?: boolean;\r\n  }", "api_method_name": "UDPExtraOptions", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["xtraOptions: socket.UDPExtraOptions = {}\n      try {\n  ", "xtraOptions: socket.UDPExtraOptions = {\n        broadca", "xtraOptions: socket.UDPExtraOptions = {}\n      socket.U"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPExtraOptions", "api_method_name": "broadcast", "api_method_all": "broadcast?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["Options = {\n        broadcast: true\n      }\n     ", "iled to set up cell broadcast\n   * @tc.desc     F"], "files": ["SocketJsunit.test.ets", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SocketStateBase", "api_method_all": "export interface SocketStateBase {\r\n    \r\n    isBound: boolean;\r\n    \r\n    isClose: boolean;\r\n    \r\n    isConnected: boolean;\r\n  }", "api_method_name": "SocketStateBase", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["** Telephony_Socket_SocketStateBase_isClose_0100 Test e", "** Telephony_Socket_SocketStateBase_isClose_0100 Test s", "etStateBase: socket.SocketStateBase = {\n        isBound", "etStateBase: socket.SocketStateBase = data\n        cons", "t('Telephony_Socket_SocketStateBase_isClose_0100', 0, a"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SocketStateBase", "api_method_name": "isBound", "api_method_all": "isBound: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["ateBase = {\n        isBound: true,\n        isCl"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SocketStateBase", "api_method_name": "isClose", "api_method_all": "isClose: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["ket_SocketStateBase_isClose_0100', 0, async fun", "ket_SocketStateBase_isClose_0100 Test end******", "ect(socketStateBase.isClose).assertTrue()\n     ", "ing(socketStateBase.isClose)}`);\n        done()", "ket_SocketStateBase_isClose_0100 Test start****", "ound: true,\n        isClose: true,\n        isCo"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SocketStateBase", "api_method_name": "isConnected", "api_method_all": "isConnected: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["lose: true,\n        isConnected: true\n      }\n     "], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SocketRemoteInfo", "api_method_all": "export interface SocketRemoteInfo {\r\n    \r\n    address: string;\r\n    \r\n    family: 'IPv4' | 'IPv6';\r\n    \r\n    port: number;\r\n    \r\n    size: number;\r\n  }", "api_method_name": "SocketRemoteInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["** Telephony_Socket_SocketRemoteInfo_size_0100 Test star", "t('Telephony_Socket_SocketRemoteInfo_port_0100', 0, asyn", "t('Telephony_Socket_SocketRemoteInfo_size_0100', 0, asyn", "** Telephony_Socket_SocketRemoteInfo_port_0100 Test star", "** Telephony_Socket_SocketRemoteInfo_size_0100 Test end*", "tRemoteInfo: socket.SocketRemoteInfo = data.remoteInfo;\n", "** Telephony_Socket_SocketRemoteInfo_port_0100 Test end*", "tRemoteInfo: socket.SocketRemoteInfo = {\n        address"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SocketRemoteInfo", "api_method_name": "address", "api_method_all": "address: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 138, "since": 0, "api_used": "\u662f", "lines": ["                    address: {\n                ", "     address: \"test address\",\n        family: 1", "contact_data postal_address insert error = \" + ", "me to obtain all IP addresses based on the defa", "                    address: \"192.168.1.3\"\n    ", "     : Binds the IP address and port number.\n  ", "le.getAddressByName(addressBaidu, (error, value", "dress: \"second test address\"\n      }\n      sock", "tent_type\": \"postal_address\",\n                \"", "Address = {\n        address: \"second test addre", "test data\",\n        address: {\n          addres", "     address: \"test address\",\n        family: '", "s.address === \"test address\").assertTrue()\n    ", " = 1 data is postal_address\n            conditi", "                    address: \"192.168.1.2\"\n    ", "ddress: {\n          address: \"test address\",\n  ", "  expect(netAddress.address === \"test address\")", "wContactId, \"postal_address\", \"dddd\", \"\");\n    ", "Options = {\n        address: {\n          addres", "                    address: \"192.168.1.1\"\n    ", ".getAddressesByName(addressBaidu, (error, value", "_data in batches of address book\n     * @tc.des", "tent_type\": \"postal_address\",\n                 ", "Address = {\n        address: \"test address\",\n  ", "oteInfo = {\n        address: \"test address\",\n  ", "     address: \"test address\",\n          family:"], "files": ["ConnectionJsunit.test.ets", "SmsMmsJsunit.test.ets", "SocketJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "ConnectionSecondJsUnit.test.ets", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SocketRemoteInfo", "api_method_name": "family", "api_method_all": "family: 'IPv4' | 'IPv6'", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 33, "since": 0, "api_used": "\u662f", "lines": ["    \"family_name\": \"family_name\",\n            ", "t address\",\n        family: 3,\n        port: 8", "amilyNamePhonetic: \"familyNamePhonetic\",\n     ", "address\",\n          family: 1,\n          port:", "t address\",\n        family: 'IPv4',\n        po", "    \"family_name\": \"family_name1\",\n           ", "  expect(netAddress.family === 1).assertTrue()", "t address\",\n        family: 1,\n        port: 8", "sCai\",\n            \"family_name\": \"family_name", ": {\n                familyName: \"familyName\",\n", "cai1\",\n            \"family_name\": \"family_name", "], [\"family_name\", \"family_name8\"],\n          ", "    \"family_name\": \"family_name8\",\n           ", "e\",\n                familyNamePhonetic: \"famil", "], [\"family_name\", \"family_name\"],\n           ", "       familyName: \"familyName\",\n             ", "fo\", \"xiaocai1\"], [\"family_name\", \"family_name", "], [\"family_name\", \"family_name1\"],\n          ", "nfo\", \"BossCai\"], [\"family_name\", \"family_name", "ocai\",\n            \"family_name\": \"family_name", "nfo\", \"xiaocai\"], [\"family_name\", \"family_name"], "files": ["SocketJsunit.test.ets", "common.js", "ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SocketRemoteInfo", "api_method_name": "port", "api_method_all": "port: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 933, "since": 7, "api_used": "\u662f", "lines": ["", " '@system.device'\nimport router from '@syste", "ephony.observer';\nimport {describe, afterAll", "rom './Const.js';\nimport {toString} from './", "'./lib/Const.js';\nimport {toString} from './", "me/regenerator')\n\nexport default {\n    data:", "NUS_VALUE = -100;\nexport const TEST_RELY_NUM", "ace test function\nexport async function apiT", "NUMBER = '10010';\nexport const AUTO_ACCEPT_N", "ApiToPromise.js';\nimport {TEST_RELY_NUMBER} ", "rom '@system.app'\nimport device from '@syste", "t for Reliability\nexport const TEST_PERF_COU", "SWORD = '000001';\nexport const ERROR_PASSWOR", "ATUS_DIALING = 2;\nexport const CALL_STATUS_A", ", '10000000002'];\nexport const NULL_PHONE_NU", " = 'abcdefghijk';\nexport const BOUNDARY_NUMB", "INT = 2147483649;\nexport const MINUS_BOUNDAR", "UMBER2 = '10010';\nexport const PHONE_NUMBER_", " ['10000000001'];\nexport const PHONE_LIST2 =", "ity test function\nexport async function apiT", "= '089800000000';\nexport const PHONE_NUMBER_", "E_MAIL = '12599';\nexport const PHONE_NUMBER_", "ERF_COUNT * 0.5;\n\nexport const CALL_STATUS_A", "rn data;\n    }\n}\n\nexport function promisify ", " '@system.router'\nimport {Core, ExpectExtend", "_8 = '86459751';\n\nexport const PHONE_NUMBER_", "st < perfTime);\n}\nexport function validate (", "flag}`);\n    }\n}\n\nexport async function apiT", " = '10000000001';\nexport const PHONE_NUMBER_", "789012345678901';\nexport const CALL_EMERGENC", "789012345678901';\nexport const EMERGENCY_NUM", "unt for Perfomace\nexport const PERF_GOAL_TIM", "TATUS_ACTIVE = 0;\nexport const CALL_STATUS_H", "HONE_NUMBER = '';\nexport const SPECIA_CHAR_N", ".telephony.call';\nimport observer from '@oho", "eccjsunit/index';\nimport {\n    AUTO_ACCEPT_N", "ATUS_HOLDING = 1;\nexport const CALL_STATUS_D", "om '@system.file'\nimport app from '@system.a", "ApiToPromise.js';\nimport {\n    scenceInCalli", "Y_NUMBER = '112';\nexport const RIGHT_PASSWOR", " = '\"=#$%^&*()+';\nexport const PHONE_NUMBER_", "NT = -2147483649;\nexport const MINUS_VALUE =", "LL_EMERGENCY = 2;\nexport const PHONE_LIST = "], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "ScenceLimitCalling.js", "Stack.ets", "HttpJsunit.test.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "app.js", "ConnectionSecondJsUnit.test.ets", "recovery_test.js", "ConvertOptionsJsunit.test.ets", "common.js", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "SimManager.test.js", "Voicemail_test.js", "ScenceTransfer.js", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "index.ets", "ApiToPromisePerfomance.js", "Divider.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "ApiToPromiseReliability.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SocketRemoteInfo", "api_method_name": "size", "api_method_all": "size: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 200, "since": 0, "api_used": "\u662f", "lines": ["sync function query(size) {\n                ", "               this.sizeType = SizeType.LG\n ", "iner({ columns: 12, sizeType: SizeType.SM, g", " 12, sizeType: this.sizeType, gutter: 10, ma", "owSplit1')\n      .resizeable(true)\n    }\n   ", "Query size is = ' + size);\n                e", "iner({ columns: 12, sizeType: SizeType.LG, g", "ueryBatch(map, tag, size) {\n            var ", "g + ' contactsQuery size is = ' + size);\n   ", "stcase {\n  @State resizeable: boolean = fals", "   var size = array.size();\n                ", "ontainer {\n  @State sizeType: SizeType = Siz", "ueryForBatchInsert: size' + size);\n         ", "atchInsert: size' + size);\n                e", "t1')\n            .resizeable(false)\n        ", "                var size = array.size();\n   ", "sultSet.rowCount == size).assertEqual(true);", " \"0\"], [\"voice_file_size\", \"0\"], [\"voice_dur", "nto test')\n        .size({ width: 100, heigh", "iner({ columns: 12, sizeType: SizeType.Auto,", "sultSet.rowCount == size);\n                 ", " .resizeable(this.resizeable)\n      .onClick", "rowSplit')\n      .resizeable(this.resizeable", "({ columns: \"auto\", sizeType: SizeType.MD, g", "actsQuery(tag, uri, size) {\n            var ", "ing= \"100\"\n  @State size: size = { width: 20", "               this.sizeType = SizeType.MD\n ", "iner({ columns: 12, sizeType: this.sizeType,", "               this.sizeType = SizeType.XS\n ", "100\"\n  @State size: size = { width: 200, hei", "               this.sizeType = SizeType.SM\n ", "l)\n          .autoResize(false)\n          .s", "it')\n            .resizeable(true)\n         "], "files": ["Calllog_test.js", "ContactMerge_test.js", "SocketJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "Image.ets", "RowSplit.ets", "Voicemail_test.js", "GridContainer.ets", "recovery_test.js", "ColumnSplit.ets", "common.js", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_all": "export interface UDPSocket {\r\n    \r\n    bind(address: NetAddress, callback: AsyncCallback<void>): void;\r\n    bind(address: NetAddress): Promise<void>;\r\n\r\n    \r\n    send(options: UDPSendOptions, callback: AsyncCallback<void>): void;\r\n    send(options: UDPSendOptions): Promise<void>;\r\n\r\n    \r\n    close(callback: AsyncCallback<void>): void;\r\n    close(): Promise<void>;\r\n\r\n    \r\n    getState(callback: AsyncCallback<SocketStateBase>): void;\r\n    getState(): Promise<SocketStateBase>;\r\n\r\n    \r\n    setExtraOptions(options: UDPExtraOptions, callback: AsyncCallback<void>): void;\r\n    setExtraOptions(options: UDPExtraOptions): Promise<void>;\r\n\r\n    \r\n    on(type: 'message', callback: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;\r\n\r\n    \r\n    off(type: 'message', callback?: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;\r\n\r\n    \r\n    on(type: 'listening' | 'close', callback: Callback<void>): void;\r\n\r\n    \r\n    off(type: 'listening' | 'close', callback?: Callback<void>): void;\r\n\r\n    \r\n    on(type: 'error', callback: ErrorCallback): void;\r\n\r\n    \r\n    off(type: 'error', callback?: ErrorCallback): void;\r\n  }", "api_method_name": "UDPSocket", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 190, "since": 0, "api_used": "\u662f", "lines": [": Sends data over a UDPSocket connection.\n     */", " : Telephony_Socket_UDPSocket_bind_0200\n     * @t", "ket_Socket_constructUDPSocketInstance_0100', 0, a", "t('Telephony_Socket_UDPSocket_send_0200', 0, asyn", "t('Telephony_Socket_UDPSocket_send_0300', 0, asyn", "** Telephony_Socket_UDPSocket_send_0100 Test star", " : Telephony_Socket_UDPSocket_bind_0400\n     * @t", " : Telephony_Socket_UDPSocket_send_0300\n     * @t", "= \"Telephony_Socket_UDPSocket_bind_0300\"\n      le", "** Telephony_Socket_UDPSocket_bind_0400 Test end*", "** Telephony_Socket_UDPSocket_send_0200 Test star", "ket_Socket_constructUDPSocketInstance_0100 Test s", "** Telephony_Socket_UDPSocket_bind_0300 Test star", "= \"Telephony_Socket_UDPSocket_send_0100\"\n      if", "= \"Telephony_Socket_UDPSocket_bind_0100\"\n      co", "** Telephony_Socket_UDPSocket_bind_0100 Test star", "** Telephony_Socket_UDPSocket_bind_0200 Test star", "** Telephony_Socket_UDPSocket_bind_0400 Test star", "t('Telephony_Socket_UDPSocket_bind_0100', 0, asyn", "** Telephony_Socket_UDPSocket_bind_0100 Test end*", "     }\n      socket.UDPSocket.send(udpSendOptions", "** Telephony_Socket_UDPSocket_send_0100 Test end*", " : Telephony_Socket_UDPSocket_send_0200\n     * @t", "t = socket.constructUDPSocketInstance();\n      ex", "t('Telephony_Socket_UDPSocket_bind_0400', 0, asyn", "t('Telephony_Socket_UDPSocket_send_0100', 0, asyn", "** Telephony_Socket_UDPSocket_bind_0300 Test end*", "= \"Telephony_Socket_UDPSocket_bind_0400\"\n      if", "t('Telephony_Socket_UDPSocket_bind_0200', 0, asyn", " : Telephony_Socket_UDPSocket_send_0100\n     * @t", "** Telephony_Socket_UDPSocket_send_0200 Test end*", "     }\n      socket.UDPSocket.bind(netAddress).th", "       await socket.UDPSocket.bind(netAddress).th", "= \"Telephony_Socket_UDPSocket_send_0200\"\n      if", "= \"Telephony_Socket_UDPSocket_send_0300\"\n      if", " : Telephony_Socket_UDPSocket_send_0400\n     * @t", "= \"Telephony_Socket_UDPSocket_bind_0200\"\n      co", "ket_Socket_constructUDPSocketInstance_0100 Test e", " : Telephony_Socket_UDPSocket_bind_0100\n     * @t", " : Telephony_Socket_UDPSocket_bind_0300\n     * @t", "** Telephony_Socket_UDPSocket_send_0300 Test star", "t('Telephony_Socket_UDPSocket_bind_0300', 0, asyn", "** Telephony_Socket_UDPSocket_bind_0200 Test end*", "     }\n      socket.UDPSocket.bind(netAddress, (e", "** Telephony_Socket_UDPSocket_send_0300 Test end*"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "bind", "api_method_all": "bind(address: NetAddress, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 58, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_bindSocket_0100 Test end*************\");\n   ", "\n     * @tc.name    bindSocket\n     * @tc.desc    Function test\n", "ny_Socket_UDPSocket_bind_0100\"\n      console.log(\"************* ", "ny_Socket_TCPSocket_bind_0100\"\n      let netAddress: socket.NetA", "ny_Socket_UDPSocket_bind_0300\"\n      let netAddress: socket.NetA", "ny_Socket_TCPSocket_bind_0200\n     * @tc.name      : bind\n     *", "ny_Socket_UDPSocket_bind_0300 Test end*************\");\n      don", "ny_Socket_TCPSocket_bind_0100 Test end*************\");\n      don", "nnection_Connection_bindSocket_0100 Test start*************\");\n ", "  * @tc.name      : bind\n     * @tc.desc      : Binds the IP add", "ny_Socket_TCPSocket_bind_0200 Test end*************\");\n      don", "ny_Socket_UDPSocket_bind_0400\n     * @tc.name      : bind\n     *", "ny_Socket_TCPSocket_bind_0300', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_bind_0300 Test start*************\");\n      l", "ny_Socket_UDPSocket_bind_0100 Test start*************\");\n      l", "ny_Socket_TCPSocket_bind_0200 Test start*************\");\n      l", "ny_Socket_TCPSocket_bind_0100\n     * @tc.name      : bind\n     *", "ny_Socket_UDPSocket_bind_0400 Test end*************\");\n      don", "ny_Socket_TCPSocket_bind_0100', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_bind_0300\"\n      let netAddress: socket.NetA", "ny_Socket_TCPSocket_bind_0300\n     * @tc.name      : bind\n     *", "ny_Socket_TCPSocket_bind_0200\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_bind_0400', 0, async function (done) {\n     ", "=> {\n        handle.bindSocket(1, (error, value) => {\n          ", "ny_Socket_UDPSocket_bind_0100 Test end*************\");\n      don", "ny_Socket_UDPSocket_bind_0300\n     * @tc.name      : bind\n     *", "ny_Socket_UDPSocket_bind_0300', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_bind_0200 Test end*************\");\n      don", "ny_Socket_TCPSocket_bind_0100 Test start*************\");\n      l", "   socket.UDPSocket.bind(netAddress, (error, data) => {\n        ", "ny_Socket_UDPSocket_bind_0400 Test start*************\");\n      l", "nnection_Connection_bindSocket_0100', 0, async function (done) {", "ny_Socket_UDPSocket_bind_0300 Test start*************\");\n      l", "ny_Socket_UDPSocket_bind_0400\"\n      if (utils.notCheck) {\n     ", "   socket.TCPSocket.bind(netAddress, (error, data) => {\n        ", "ny_Socket_UDPSocket_bind_0200\"\n      console.log(\"************* ", "ny_Socket_UDPSocket_bind_0100\n     * @tc.name      : bind\n     *", "ny_Socket_TCPSocket_bind_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_bind_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_bind_0200 Test start*************\");\n      i", "ny_Socket_UDPSocket_bind_0100', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_bind_0200\n     * @tc.name      : bind\n     *", "nnection_Connection_bindSocket_0100\n     * @tc.name    bindSocke"], "files": ["ConnectionJsunit.test.ets", "SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "bind", "api_method_all": "bind(address: NetAddress): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["it socket.UDPSocket.bind(netAddress).then(data => {\n          co", "   socket.TCPSocket.bind(netAddress).then(data => {\n        cons", "   socket.UDPSocket.bind(netAddress).then(data => {\n        cons"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "send", "api_method_all": "send(options: UDPSendOptions, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 130, "since": 0, "api_used": "\u662f", "lines": ["ny_Socket_UDPSocket_send_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_send_0300 Test start*************\");\n      l", "ny_Socket_UDPSocket_send_0400 Test start*************\");\n      l", "ny_Socket_UDPSocket_send_0300\"\n      if (utils.notCheck) {\n     ", "et_ExtraOptionsBase_sendBufferSize_0100', 0, async function (don", "ny_Socket_UDPSocket_send_0100\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0400', 0, async function (done) {\n     ", "Point))\n      ret = sendTouchEvent(movePoint)\n      if (ret == f", "ny_Socket_UDPSocket_send_0200 Test start*************\");\n      l", "ny_Socket_TCPSocket_send_0100\n     * @tc.name      : send\n     *", "ngify(upPoint))\n    sendTouchEvent(upPoint)\n    await this.sleep", "et_ExtraOptionsBase_sendBufferSize_0100 Test start*************\"", "et_ExtraOptionsBase_sendBufferSize_0100 Test end*************\");", "ny_Socket_UDPSocket_send_0200\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_send_0100\"\n      if (utils.notCheck) {\n     ", "   socket.UDPSocket.send(udpSendOptions, (error, data) => {\n    ", "  * @tc.name      : send\n     * @tc.desc      : Sends data over ", "ny_Socket_UDPSocket_send_0300 Test end*************\");\n      don", "ny_Socket_UDPSocket_send_0400\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0400\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_send_0100 Test start*************\");\n      l", "ny_Socket_UDPSocket_send_0300', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_send_0100', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_send_0300\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0400 Test end*************\");\n      don", "ferSize: 1,\n        sendBufferSize: 1,\n        reuseAddress: tru", "ct(extraOptionsBase.sendBufferSize === 1).assertTrue()\n      con", "ify(downPonit))\n    sendTouchEvent(downPonit);\n    console.info(", "ny_Socket_UDPSocket_send_0200\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0100 Test end*************\");\n      don", "ny_Socket_UDPSocket_send_0200 Test end*************\");\n      don"], "files": ["Utils.ets", "SmsMmsJsunit.test.ets", "SocketJsunit.test.ets", "NetworkSearchErrors.test.js", "WebSocketJsunit.test.ets", "SimManager.test.js", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "send", "api_method_all": "send(options: UDPSendOptions): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["   socket.TCPSocket.send(tcpSendOptions).then(data => {\n        ", "  }\n      webSocket.send(\"test data\").then(data => {\n        exp", "ne) {\n        radio.sendUpdateCellLocationRequest().then(data =>", "   socket.UDPSocket.send(udpSendOptions).then(data => {\n        "], "files": ["NetworkSearchErrors.test.js", "SocketJsunit.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "close", "api_method_all": "close(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 272, "since": 0, "api_used": "\u662f", "lines": ["        })\n        .closeEffect(false)\n    }\n    .key('flex')\n   ", "        })\n        .closeEffect(true)\n      DataPanel({ values: [", "          resultSet.close();\n            } catch (error) {\n      ", "          resultSet.close();\n            await callLogDelete(\"abn", "BLE = 0; // tran is close\nexport const TRANSFER_ENABLE = 1; // tr", "          resultSet.close();\n                } catch (error) {\n  ", "        })\n        .closeEffect(false)\n\n      DataPanel({ values:", "          resultSet.close();\n                done();\n            ", "          resultSet.close();\n                await callLogDelete(", "FER_ERASURE = 4; // close tran function\nexport const CALL_TRANSFE", "          resultSet.close();\n                await deleteRawConta"], "files": ["Calllog_test.js", "ContactMerge_test.js", "Stability_test.js", "SocketJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "Performance_test.js", "WebSocketJsunit.test.ets", "Voicemail_test.js", "recovery_test.js", "Groups_test.js", "DataPanel.ets", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "close", "api_method_all": "close(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["   socket.TCPSocket.close().then(data => {\n        console.log(`$", "   socket.UDPSocket.close().then(data => {\n        console.log(`$", "  }\n      webSocket.close(webSocketCloseOptions).then(data => {\n "], "files": ["SocketJsunit.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "getState", "api_method_all": "getState(callback: AsyncCallback<SocketStateBase>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 26, "since": 0, "api_used": "\u662f", "lines": ["ny_Socket_TCPSocket_getState_0200\"\n      if (utils.notCheck) {\n     ", "   socket.TCPSocket.getState((error, data) => {\n        if (error) {", "   socket.UDPSocket.getState((error, data) => {\n        if (error) {", "ny_Socket_TCPSocket_getState_0100', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_getState_0200 Test start*************\");\n      l", "ny_Socket_TCPSocket_getState_0100 Test start*************\");\n      l", "ny_Socket_TCPSocket_getState_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_getState_0100 Test start*************\");\n      l", "ny_Socket_TCPSocket_getState_0200\n     * @tc.name      : getState\n  ", "ny_Socket_UDPSocket_getState_0100\n     * @tc.name      : getState\n  ", "ny_Socket_UDPSocket_getState_0200\n     * @tc.name      : getState\n  ", "ny_Socket_UDPSocket_getState_0200\"\n      if (utils.notCheck) {\n     ", "  * @tc.name      : getState\n     * @tc.desc      : Obtains the stat", "ny_Socket_UDPSocket_getState_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_getState_0100\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_getState_0200 Test end*************\");\n      don", "ny_Socket_UDPSocket_getState_0200 Test start*************\");\n      l", "ny_Socket_TCPSocket_getState_0100\"\n      if (utils.notCheck) {\n     ", "ny_Socket_TCPSocket_getState_0100 Test end*************\");\n      don", "ny_Socket_TCPSocket_getState_0100\n     * @tc.name      : getState\n  ", "ny_Socket_TCPSocket_getState_0200 Test end*************\");\n      don", "ny_Socket_UDPSocket_getState_0100', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_getState_0100 Test end*************\");\n      don"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "getState", "api_method_all": "getState(): Promise<SocketStateBase>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["   socket.UDPSocket.getState().then(data => {\n        console.log(`$", "   socket.TCPSocket.getState().then(data => {\n        console.log(`$"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "setExtraOptions", "api_method_all": "setExtraOptions(options: UDPExtraOptions, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 56, "since": 0, "api_used": "\u662f", "lines": ["ny_Socket_UDPSocket_setExtraOptions_0300 Test start*************\");\n      l", "ny_Socket_UDPSocket_setExtraOptions_0100\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_setExtraOptions_0400\"\n      let udpExtraOptions: socket", "ny_Socket_UDPSocket_setExtraOptions_0400\n     * @tc.name      : setExtraOpt", "ny_Socket_TCPSocket_setExtraOptions_0200\n     * @tc.name      : setExtraOpt", "ny_Socket_UDPSocket_setExtraOptions_0400 Test start*************\");\n      l", "ny_Socket_TCPSocket_setExtraOptions_0300 Test end*************\");\n      don", "ny_Socket_TCPSocket_setExtraOptions_0300\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_setExtraOptions_0100 Test start*************\");\n      l", "ny_Socket_TCPSocket_setExtraOptions_0200 Test start*************\");\n      l", "ny_Socket_UDPSocket_setExtraOptions_0200', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_setExtraOptions_0100 Test end*************\");\n      don", "   socket.UDPSocket.setExtraOptions(udpExtraOptions, (error) => {\n        i", "ny_Socket_UDPSocket_setExtraOptions_0200\n     * @tc.name      : setExtraOpt", "ny_Socket_TCPSocket_setExtraOptions_0100', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_setExtraOptions_0300\"\n      if (utils.notCheck) {\n     ", "ny_Socket_TCPSocket_setExtraOptions_0400\n     * @tc.name      : setExtraOpt", "it socket.UDPSocket.setExtraOptions(udpExtraOptions);\n        console.log(`", "ny_Socket_UDPSocket_setExtraOptions_0200 Test start*************\");\n      l", "ny_Socket_UDPSocket_setExtraOptions_0300', 0, async function (done) {\n     ", "  * @tc.name      : setExtraOptions\n     * @tc.desc      : Sets other attri", "ny_Socket_UDPSocket_setExtraOptions_0300\n     * @tc.name      : setExtraOpt", "ny_Socket_TCPSocket_setExtraOptions_0200\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_setExtraOptions_0400 Test end*************\");\n      don", "ny_Socket_TCPSocket_setExtraOptions_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_setExtraOptions_0300 Test end*************\");\n      don", "ny_Socket_UDPSocket_setExtraOptions_0200 Test end*************\");\n      don", "ny_Socket_TCPSocket_setExtraOptions_0100\n     * @tc.name      : setExtraOpt", "ny_Socket_UDPSocket_setExtraOptions_0400', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_setExtraOptions_0300\n     * @tc.name      : setExtraOpt", "ny_Socket_TCPSocket_setExtraOptions_0100\"\n      if (utils.notCheck) {\n     ", "it socket.TCPSocket.setExtraOptions(tcpExtraOptions);\n        console.log(`", "ny_Socket_UDPSocket_setExtraOptions_0100\n     * @tc.name      : setExtraOpt", "ny_Socket_UDPSocket_setExtraOptions_0100 Test end*************\");\n      don", "   socket.TCPSocket.setExtraOptions(tcpExtraOptions, (error) => {\n        i", "ny_Socket_TCPSocket_setExtraOptions_0200 Test end*************\");\n      don", "ny_Socket_UDPSocket_setExtraOptions_0100', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_setExtraOptions_0100 Test start*************\");\n      l", "ny_Socket_UDPSocket_setExtraOptions_0200\"\n      let udpExtraOptions: socket", "ny_Socket_TCPSocket_setExtraOptions_0300', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_setExtraOptions_0300 Test start*************\");\n      l"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "setExtraOptions", "api_method_all": "setExtraOptions(options: UDPExtraOptions): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "on", "api_method_all": "on(type: 'message', callback: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 7, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "off", "api_method_all": "off(type: 'message', callback?: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 403, "since": 0, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "on", "api_method_all": "on(type: 'listening' | 'close', callback: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 7, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "off", "api_method_all": "off(type: 'listening' | 'close', callback?: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 403, "since": 0, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 7, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UDPSocket", "api_method_name": "off", "api_method_all": "off(type: 'error', callback?: ErrorCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 403, "since": 0, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPConnectOptions", "api_method_all": "export interface TCPConnectOptions {\r\n    \r\n    address: NetAddress;\r\n    \r\n    timeout?: number;\r\n  }", "api_method_name": "TCPConnectOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 8, "since": 0, "api_used": "\u662f", "lines": ["t('Telephony_Socket_TCPConnectOptions_timeout_0100', 0, a", "** Telephony_Socket_TCPConnectOptions_timeout_0100 Test e", "** Telephony_Socket_TCPConnectOptions_timeout_0100 Test s", "nectOptions: socket.TCPConnectOptions = {\n        address"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPConnectOptions", "api_method_name": "address", "api_method_all": "address: NetAddress", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 138, "since": 0, "api_used": "\u662f", "lines": ["                    address: {\n                ", "     address: \"test address\",\n        family: 1", "contact_data postal_address insert error = \" + ", "me to obtain all IP addresses based on the defa", "                    address: \"192.168.1.3\"\n    ", "     : Binds the IP address and port number.\n  ", "le.getAddressByName(addressBaidu, (error, value", "dress: \"second test address\"\n      }\n      sock", "tent_type\": \"postal_address\",\n                \"", "Address = {\n        address: \"second test addre", "test data\",\n        address: {\n          addres", "     address: \"test address\",\n        family: '", "s.address === \"test address\").assertTrue()\n    ", " = 1 data is postal_address\n            conditi", "                    address: \"192.168.1.2\"\n    ", "ddress: {\n          address: \"test address\",\n  ", "  expect(netAddress.address === \"test address\")", "wContactId, \"postal_address\", \"dddd\", \"\");\n    ", "Options = {\n        address: {\n          addres", "                    address: \"192.168.1.1\"\n    ", ".getAddressesByName(addressBaidu, (error, value", "_data in batches of address book\n     * @tc.des", "tent_type\": \"postal_address\",\n                 ", "Address = {\n        address: \"test address\",\n  ", "oteInfo = {\n        address: \"test address\",\n  ", "     address: \"test address\",\n          family:"], "files": ["ConnectionJsunit.test.ets", "SmsMmsJsunit.test.ets", "SocketJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "ConnectionSecondJsUnit.test.ets", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPConnectOptions", "api_method_name": "timeout", "api_method_all": "timeout?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 60, "since": 0, "api_used": "\u662f", "lines": ["\n    function sleep(timeout) {\n        return n", "t);\n                timeout = setTimeout(functi", "Information sleep ${timeout}ms`);\n             ", "t(tcpConnectOptions.timeout === 1000).assertTru", "`${caseName} ${tag} timeout,hunup is runed`;\n  ", "from` +\n        ` ${timeoutflag ? 'local' : 'op", "`${caseName} ${tag} timeout reachState,callId i", "t) => {\n        let timeout = null;\n        if ", "nfig')\n        this.timeout = 30000\n        con", "t_TCPConnectOptions_timeout_0100 Test start****", "})\n      setTimeout(timeout, 3000)\n      consol", "new Date();\n    let timeoutflag = false;\n    le", "t_TCPConnectOptions_timeout_0100 Test end******", "       clearTimeout(timeout);\n                t", "                    timeout = setTimeout(functi", "`${caseName} ${tag} timeout hangupCall success,", "       clearTimeout(timeout);\n                 ", "                if (timeoutflag === false) {\n  ", "   Want.parameters['timeout'] = 100000\n        ", "nfig')\n        this.timeout = 30000;\n        co", "\n        },\n        timeout: 1000\n      }\n     ", "elaytime) {\n    let timeout = null;\n    if (cal", "t_TCPConnectOptions_timeout_0100', 0, async fun", "                    timeoutflag = true;\n       ", "`${caseName} ${tag} timeout hangupCall error,er", "e();\n            }, timeout);\n        })\n    }\n", "`${caseName} ${tag} timeout reachState,start hu"], "files": ["SocketJsunit.test.ets", "ScenceInCalling.js", "ObserverJsunit.test.ets", "NetworkSearchErrors.test.js", "index.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSendOptions", "api_method_all": "export interface TCPSendOptions {\r\n    \r\n    data: string | ArrayBuffer;\r\n    \r\n    encoding?: string;\r\n  }", "api_method_name": "TCPSendOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["t('Telephony_Socket_TCPSendOptions_encoding_0100', 0, ", "SendOptions: socket.TCPSendOptions = {\n        data: \"", "** Telephony_Socket_TCPSendOptions_data_0100 Test end*", "** Telephony_Socket_TCPSendOptions_data_0100 Test star", "t('Telephony_Socket_TCPSendOptions_data_0100', 0, asyn", "** Telephony_Socket_TCPSendOptions_encoding_0100 Test "], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSendOptions", "api_method_name": "data", "api_method_all": "data: string | ArrayBuffer", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2666, "since": 0, "api_used": "\u662f", "lines": ["T, RTT_MSG, (error, data) => {\n            i", "_NOT_EXIST, (error, data) => {\n            i", "_ID_NOT_EXIST).then(data => {\n            ex", ", PHONE_LIST2).then(data => {\n            ex", "XIST, RTT_MSG).then(data => {\n            ex", "}, function (error, data) {});\n        try {", "success,case failed,data:${toString(data)}`)", "ID_INVALID, (error, data) => {\n            i", "OT_ID_INVALID).then(data => {\n            ex", "xport default {\n    data: {\n        title: \"", "                let data = await hangupCall(", "HONE_LIST2, (error, data) => {\n            i", " success ${toString(data)}`);\n            }\n", "led,data:${toString(data)}`);\n            do"], "files": ["ConnectionJsunit.test.ets", "Stability_test.js", "SimJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "ScenceLimitCalling.js", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "ConnectionSecondJsUnit.test.ets", "recovery_test.js", "ConvertOptionsJsunit.test.ets", "common.js", "DataPanel.ets", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "SimManager.test.js", "ApiToPromise.js", "Voicemail_test.js", "ScenceTransfer.js", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "CellularDataAbnorma.test.js", "Calllog_test.js", "ApiToPromiseReliability.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSendOptions", "api_method_name": "encoding", "api_method_all": "encoding?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 91, "since": 0, "api_used": "\u662f", "lines": ["test data\",\n        encoding: \"test encoding\"\n  ", "pect(tcpSendOptions.encoding === \"test encoding\"", ".encoding === \"test encoding\").assertTrue()\n    ", "n\":\"1.0\",'+\n      '\"encoding\":\"utf-8\"}},'+\n     ", "<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n      ", "cket_TCPSendOptions_encoding_0100 Test end******", "    encoding: \"test encoding\"\n      }\n      expe", "    encoding: \"test encoding\"\n      }\n      sock", "cket_TCPSendOptions_encoding_0100', 0, async fun", "<?xml version=\"1.0\" encoding=\"utf-8\"?>';\n       ", "cket_TCPSendOptions_encoding_0100 Test start****"], "files": ["ConvertOptionsJsunit.test.ets", "SocketJsunit.test.ets", "SmsMmsError.test.js", "HttpRequestOptionsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPExtraOptions", "api_method_all": "export interface TCPExtraOptions extends ExtraOptionsBase {\r\n    \r\n    keepAlive?: boolean;\r\n    \r\n    OOBInline?: boolean;\r\n    \r\n    TCPNoDelay?: boolean;\r\n    \r\n    socketLinger: {on: boolean, linger: number};\r\n  }", "api_method_name": "TCPExtraOptions", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 29, "since": 0, "api_used": "\u662f", "lines": ["t('Telephony_Socket_TCPExtraOptions_socketLinger_0100',", "** Telephony_Socket_TCPExtraOptions_keepAlive_0100 Test", "  * @tc.desc      : TCPExtraOptions.OOBInline\n     */\n ", "  * @tc.name      : TCPExtraOptions.socketLinger\n     *", "xtraOptions: socket.TCPExtraOptions = {\n        socketL", "t('Telephony_Socket_TCPExtraOptions_OOBInline_0100', 0,", " : Telephony_Socket_TCPExtraOptions_TCPNoDelay_0100\n   ", "** Telephony_Socket_TCPExtraOptions_socketLinger_0100 T", " : Telephony_Socket_TCPExtraOptions_OOBInline_0100\n    ", "  * @tc.name      : TCPExtraOptions.OOBInline\n     * @t", "  * @tc.name      : TCPExtraOptions.TCPNoDelay\n     * @", "  * @tc.desc      : TCPExtraOptions.TCPNoDelay\n     */\n", "xtraOptions: socket.TCPExtraOptions = {\n        keepAli", "t('Telephony_Socket_TCPExtraOptions_TCPNoDelay_0100', 0", "  * @tc.desc      : TCPExtraOptions.socketLinger\n     *", "** Telephony_Socket_TCPExtraOptions_OOBInline_0100 Test", "** Telephony_Socket_TCPExtraOptions_TCPNoDelay_0100 Tes", " : Telephony_Socket_TCPExtraOptions_socketLinger_0100\n ", "t('Telephony_Socket_TCPExtraOptions_keepAlive_0100', 0,"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPExtraOptions", "api_method_name": "keepAlive", "api_method_all": "keepAlive?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 0, "api_used": "\u662f", "lines": ["ket_TCPExtraOptions_keepAlive_0100 Test end******", "ect(tcpExtraOptions.keepAlive).assertTrue()\n     ", "ket_TCPExtraOptions_keepAlive_0100', 0, async fun", "Options = {\n        keepAlive: true,\n        OOBI", "ket_TCPExtraOptions_keepAlive_0100 Test start****"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPExtraOptions", "api_method_name": "OOBInline", "api_method_all": "OOBInline?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["ket_TCPExtraOptions_OOBInline_0100\n     * @tc.nam", "ket_TCPExtraOptions_OOBInline_0100 Test end******", "  : TCPExtraOptions.OOBInline\n     * @tc.desc    ", "live: true,\n        OOBInline: false,\n        TCP", "ket_TCPExtraOptions_OOBInline_0100', 0, async fun", "  : TCPExtraOptions.OOBInline\n     */\n    it('Tel", "ket_TCPExtraOptions_OOBInline_0100 Test start****", "live: true,\n        OOBInline: true,\n        TCPN", "ct(!tcpExtraOptions.OOBInline).assertTrue()\n     "], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPExtraOptions", "api_method_name": "TCPNoDelay", "api_method_all": "TCPNoDelay?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["ket_TCPExtraOptions_TCPNoDelay_0100', 0, async fun", "ket_TCPExtraOptions_TCPNoDelay_0100\n     * @tc.nam", "line: true,\n        TCPNoDelay: true,\n        sock", "  : TCPExtraOptions.TCPNoDelay\n     * @tc.desc    ", "ect(tcpExtraOptions.TCPNoDelay).assertTrue()\n     ", "ket_TCPExtraOptions_TCPNoDelay_0100 Test end******", "ket_TCPExtraOptions_TCPNoDelay_0100 Test start****", "ine: false,\n        TCPNoDelay: true,\n        sock", "  : TCPExtraOptions.TCPNoDelay\n     */\n    it('Tel"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPExtraOptions", "api_method_name": "socketLinger", "api_method_all": "socketLinger: {on: boolean, linger: number}", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 0, "api_used": "\u662f", "lines": ["  : TCPExtraOptions.socketLinger\n     */\n    it('Tel", "  : TCPExtraOptions.socketLinger\n     * @tc.desc    ", "ct(!tcpExtraOptions.socketLinger.linger).assertTrue(", "ect(tcpExtraOptions.socketLinger.on).assertTrue()\n  ", "ket_TCPExtraOptions_socketLinger_0100 Test end******", "ket_TCPExtraOptions_socketLinger_0100', 0, async fun", "ket_TCPExtraOptions_socketLinger_0100\n     * @tc.nam", "Options = {\n        socketLinger: {\n          on: tr", "elay: true,\n        socketLinger: {\n          on: tr", "ket_TCPExtraOptions_socketLinger_0100 Test start****"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_all": "export interface TCPSocket {\r\n    \r\n    bind(address: NetAddress, callback: AsyncCallback<void>): void;\r\n    bind(address: NetAddress): Promise<void>;\r\n\r\n    \r\n    connect(options: TCPConnectOptions, callback: AsyncCallback<void>): void;\r\n    connect(options: TCPConnectOptions): Promise<void>;\r\n\r\n    \r\n    send(options: TCPSendOptions, callback: AsyncCallback<void>): void;\r\n    send(options: TCPSendOptions): Promise<void>;\r\n\r\n    \r\n    close(callback: AsyncCallback<void>): void;\r\n    close(): Promise<void>;\r\n\r\n    \r\n    getRemoteAddress(callback: AsyncCallback<NetAddress>): void;\r\n    getRemoteAddress(): Promise<NetAddress>;\r\n\r\n    \r\n    getState(callback: AsyncCallback<SocketStateBase>): void;\r\n    getState(): Promise<SocketStateBase>;\r\n\r\n    \r\n    setExtraOptions(options: TCPExtraOptions, callback: AsyncCallback<void>): void;\r\n    setExtraOptions(options: TCPExtraOptions): Promise<void>;\r\n\r\n    \r\n    on(type: 'message', callback: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;\r\n\r\n    \r\n    off(type: 'message', callback?: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;\r\n\r\n    \r\n    on(type: 'connect' | 'close', callback: Callback<void>): void;\r\n\r\n    \r\n    off(type: 'connect' | 'close', callback?: Callback<void>): void;\r\n\r\n    \r\n    on(type: 'error', callback: ErrorCallback): void;\r\n\r\n    \r\n    off(type: 'error', callback?: ErrorCallback): void;\r\n  }", "api_method_name": "TCPSocket", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 224, "since": 0, "api_used": "\u662f", "lines": ["= \"Telephony_Socket_TCPSocket_bind_0400\"\n      if", "= \"Telephony_Socket_TCPSocket_bind_0200\"\n      if", "t('Telephony_Socket_TCPSocket_send_0200', 0, asyn", "t('Telephony_Socket_TCPSocket_bind_0400', 0, asyn", "** Telephony_Socket_TCPSocket_send_0100 Test end*", "** Telephony_Socket_TCPSocket_bind_0200 Test star", "** Telephony_Socket_TCPSocket_send_0200 Test star", "= \"Telephony_Socket_TCPSocket_bind_0300\"\n      le", " : Telephony_Socket_TCPSocket_bind_0100\n     * @t", "** Telephony_Socket_TCPSocket_bind_0100 Test end*", "ket_Socket_constructTCPSocketInstance_0100 Test e", " : Telephony_Socket_TCPSocket_send_0100\n     * @t", "** Telephony_Socket_TCPSocket_bind_0300 Test end*", "     }\n      socket.TCPSocket.bind(netAddress).th", " : Telephony_Socket_TCPSocket_send_0200\n     * @t", "t('Telephony_Socket_TCPSocket_send_0300', 0, asyn", "** Telephony_Socket_TCPSocket_bind_0300 Test star", "     }\n      socket.TCPSocket.send(tcpSendOptions", "     }\n      socket.TCPSocket.bind(netAddress, (e", "** Telephony_Socket_TCPSocket_bind_0200 Test end*", "** Telephony_Socket_TCPSocket_send_0200 Test end*", " : Telephony_Socket_TCPSocket_bind_0200\n     * @t", "** Telephony_Socket_TCPSocket_send_0100 Test star", "t('Telephony_Socket_TCPSocket_bind_0100', 0, asyn", "t('Telephony_Socket_TCPSocket_send_0100', 0, asyn", " : Telephony_Socket_TCPSocket_send_0300\n     * @t", " : Telephony_Socket_TCPSocket_send_0400\n     * @t", "** Telephony_Socket_TCPSocket_bind_0400 Test star", "** Telephony_Socket_TCPSocket_send_0300 Test star", "t('Telephony_Socket_TCPSocket_bind_0200', 0, asyn", "= \"Telephony_Socket_TCPSocket_send_0100\"\n      if", "ket_Socket_constructTCPSocketInstance_0100', 0, a", "= \"Telephony_Socket_TCPSocket_send_0200\"\n      if", "** Telephony_Socket_TCPSocket_bind_0100 Test star", "= \"Telephony_Socket_TCPSocket_bind_0100\"\n      le", "ket_Socket_constructTCPSocketInstance_0100 Test s", ": Sends data over a TCPSocket connection.\n     */", "** Telephony_Socket_TCPSocket_bind_0400 Test end*", "** Telephony_Socket_TCPSocket_send_0300 Test end*", " : Telephony_Socket_TCPSocket_bind_0300\n     * @t", "t = socket.constructTCPSocketInstance();\n      ex", "= \"Telephony_Socket_TCPSocket_send_0300\"\n      if", "t('Telephony_Socket_TCPSocket_bind_0300', 0, asyn", " : Telephony_Socket_TCPSocket_bind_0400\n     * @t"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "bind", "api_method_all": "bind(address: NetAddress, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 58, "since": 0, "api_used": "\u662f", "lines": ["nnection_Connection_bindSocket_0100 Test end*************\");\n   ", "\n     * @tc.name    bindSocket\n     * @tc.desc    Function test\n", "ny_Socket_UDPSocket_bind_0100\"\n      console.log(\"************* ", "ny_Socket_TCPSocket_bind_0100\"\n      let netAddress: socket.NetA", "ny_Socket_UDPSocket_bind_0300\"\n      let netAddress: socket.NetA", "ny_Socket_TCPSocket_bind_0200\n     * @tc.name      : bind\n     *", "ny_Socket_UDPSocket_bind_0300 Test end*************\");\n      don", "ny_Socket_TCPSocket_bind_0100 Test end*************\");\n      don", "nnection_Connection_bindSocket_0100 Test start*************\");\n ", "  * @tc.name      : bind\n     * @tc.desc      : Binds the IP add", "ny_Socket_TCPSocket_bind_0200 Test end*************\");\n      don", "ny_Socket_UDPSocket_bind_0400\n     * @tc.name      : bind\n     *", "ny_Socket_TCPSocket_bind_0300', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_bind_0300 Test start*************\");\n      l", "ny_Socket_UDPSocket_bind_0100 Test start*************\");\n      l", "ny_Socket_TCPSocket_bind_0200 Test start*************\");\n      l", "ny_Socket_TCPSocket_bind_0100\n     * @tc.name      : bind\n     *", "ny_Socket_UDPSocket_bind_0400 Test end*************\");\n      don", "ny_Socket_TCPSocket_bind_0100', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_bind_0300\"\n      let netAddress: socket.NetA", "ny_Socket_TCPSocket_bind_0300\n     * @tc.name      : bind\n     *", "ny_Socket_TCPSocket_bind_0200\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_bind_0400', 0, async function (done) {\n     ", "=> {\n        handle.bindSocket(1, (error, value) => {\n          ", "ny_Socket_UDPSocket_bind_0100 Test end*************\");\n      don", "ny_Socket_UDPSocket_bind_0300\n     * @tc.name      : bind\n     *", "ny_Socket_UDPSocket_bind_0300', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_bind_0200 Test end*************\");\n      don", "ny_Socket_TCPSocket_bind_0100 Test start*************\");\n      l", "   socket.UDPSocket.bind(netAddress, (error, data) => {\n        ", "ny_Socket_UDPSocket_bind_0400 Test start*************\");\n      l", "nnection_Connection_bindSocket_0100', 0, async function (done) {", "ny_Socket_UDPSocket_bind_0300 Test start*************\");\n      l", "ny_Socket_UDPSocket_bind_0400\"\n      if (utils.notCheck) {\n     ", "   socket.TCPSocket.bind(netAddress, (error, data) => {\n        ", "ny_Socket_UDPSocket_bind_0200\"\n      console.log(\"************* ", "ny_Socket_UDPSocket_bind_0100\n     * @tc.name      : bind\n     *", "ny_Socket_TCPSocket_bind_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_bind_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_bind_0200 Test start*************\");\n      i", "ny_Socket_UDPSocket_bind_0100', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_bind_0200\n     * @tc.name      : bind\n     *", "nnection_Connection_bindSocket_0100\n     * @tc.name    bindSocke"], "files": ["ConnectionJsunit.test.ets", "SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "bind", "api_method_all": "bind(address: NetAddress): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["it socket.UDPSocket.bind(netAddress).then(data => {\n          co", "   socket.TCPSocket.bind(netAddress).then(data => {\n        cons", "   socket.UDPSocket.bind(netAddress).then(data => {\n        cons"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "connect", "api_method_all": "connect(options: TCPConnectOptions, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 382, "since": 7, "api_used": "\u662f", "lines": ["-HttpRequestOptions_connectTimeout Test is starting----------------", ".log(\"************* connection Test start*************\");\n\n    \n   ", "eout: 60,\n          connectTimeout: 60\n        }\n        var httpRe", "_HttpRequestOptions_connectTimeout_0100 : error = \" + error);\n     ", "_HttpRequestOptions_connectTimeout_0100\", 0, async function (done) ", "ion from '@ohos.net.connection'\nimport utils from './Utils.ets'\n\nex", "      try {\n        connection.createNetConnection(3000);\n        e", "_HttpRequestOptions_connectTimeout_0200\", 0, async function (done) ", "eout: 60,\n          connectTimeout: 0.1\n        }\n        var httpR", "      try {\n        connection.createNetConnection(5000);\n        e", "_HttpRequestOptions_connectTimeout_0200 : error = \" + error);\n     ", "out: 0.1,\n          connectTimeout: 60\n        }\n        var httpRe", "nit() {\n  describe('connectionTest', function () {\n    const TIMEOU", "'\n        }\n        connection.createNetConnection(netSpecifier, 50", "      try {\n        connection.createNetConnection(8000);\n        e", "-HttpRequestOptions_connectTimeout_01 Test end---------------------", "rt default function connectionJsunit() {\n  describe('connectionTest", "-HttpRequestOptions_connectTimeout Test end-----------------------\"", "-HttpRequestOptions_connectTimeout_01 Test is starting-------------", "/index.ets\";\nimport connection from '@ohos.net.connection'\nimport u"], "files": ["ConnectionJsunit.test.ets", "HttpRequestJsunit.test.ets", "RequestMethodJsunit.test.ets", "SocketJsunit.test.ets", "HttpResponseJsunit.test.ets", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "ConnectionSecondJsUnit.test.ets", "List.test.ets", "HttpRequestOptionsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "connect", "api_method_all": "connect(options: TCPConnectOptions): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": ["**********\");\n      connection.getAllNets().then(data => {\n        ", "andle) => {\n        connection.getNetCapabilities(handle[0]).then((", "romise_1300';\n      connection.getAllNets().then((handle) => {\n    ", "turn;\n      }\n      connection.getConnectionProperties().then(data ", "**********\");\n      connection.getDefaultNet().then(data => {\n     ", "TID_IVVALID);\n      connection.reportNetConnected(handle).then(() =", "**********\");\n      connection.enableAirplaneMode().then(data => {\n", "ID_IVVALID2);\n      connection.reportNetDisconnected(handle).then((", "  }\n      webSocket.connect(\"www.baidu.com\").then(data => {\n       ", "turn;\n      }\n      connection.getNetCapabilities().then(data => {\n", "TID_IVVALID);\n      connection.reportNetDisconnected(handle).then((", "**********\");\n      connection.hasDefaultNet().then(activated => {\n", "**********\");\n      connection.getDefaultNet().then((handle) => {\n ", "ID_IVVALID2);\n      connection.reportNetConnected(handle).then(() =", "**********\");\n      connection.disableAirplaneMode().then(data => {", "nection.reportNetDisconnected(handle).then(() => {\n        expect()", "   socket.TCPSocket.connect(tcpConnectOptions).then(function (data)"], "files": ["ConnectionJsunit.test.ets", "SocketJsunit.test.ets", "ConnectionSecondJsUnit.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "send", "api_method_all": "send(options: TCPSendOptions, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 130, "since": 0, "api_used": "\u662f", "lines": ["ny_Socket_UDPSocket_send_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_send_0300 Test start*************\");\n      l", "ny_Socket_UDPSocket_send_0400 Test start*************\");\n      l", "ny_Socket_UDPSocket_send_0300\"\n      if (utils.notCheck) {\n     ", "et_ExtraOptionsBase_sendBufferSize_0100', 0, async function (don", "ny_Socket_UDPSocket_send_0100\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0400', 0, async function (done) {\n     ", "Point))\n      ret = sendTouchEvent(movePoint)\n      if (ret == f", "ny_Socket_UDPSocket_send_0200 Test start*************\");\n      l", "ny_Socket_TCPSocket_send_0100\n     * @tc.name      : send\n     *", "ngify(upPoint))\n    sendTouchEvent(upPoint)\n    await this.sleep", "et_ExtraOptionsBase_sendBufferSize_0100 Test start*************\"", "et_ExtraOptionsBase_sendBufferSize_0100 Test end*************\");", "ny_Socket_UDPSocket_send_0200\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_send_0100\"\n      if (utils.notCheck) {\n     ", "   socket.UDPSocket.send(udpSendOptions, (error, data) => {\n    ", "  * @tc.name      : send\n     * @tc.desc      : Sends data over ", "ny_Socket_UDPSocket_send_0300 Test end*************\");\n      don", "ny_Socket_UDPSocket_send_0400\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0400\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_send_0100 Test start*************\");\n      l", "ny_Socket_UDPSocket_send_0300', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_send_0100', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_send_0300\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0400 Test end*************\");\n      don", "ferSize: 1,\n        sendBufferSize: 1,\n        reuseAddress: tru", "ct(extraOptionsBase.sendBufferSize === 1).assertTrue()\n      con", "ify(downPonit))\n    sendTouchEvent(downPonit);\n    console.info(", "ny_Socket_UDPSocket_send_0200\n     * @tc.name      : send\n     *", "ny_Socket_UDPSocket_send_0100 Test end*************\");\n      don", "ny_Socket_UDPSocket_send_0200 Test end*************\");\n      don"], "files": ["Utils.ets", "SmsMmsJsunit.test.ets", "SocketJsunit.test.ets", "NetworkSearchErrors.test.js", "WebSocketJsunit.test.ets", "SimManager.test.js", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "send", "api_method_all": "send(options: TCPSendOptions): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["   socket.TCPSocket.send(tcpSendOptions).then(data => {\n        ", "  }\n      webSocket.send(\"test data\").then(data => {\n        exp", "ne) {\n        radio.sendUpdateCellLocationRequest().then(data =>", "   socket.UDPSocket.send(udpSendOptions).then(data => {\n        "], "files": ["NetworkSearchErrors.test.js", "SocketJsunit.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "close", "api_method_all": "close(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 272, "since": 0, "api_used": "\u662f", "lines": ["        })\n        .closeEffect(false)\n    }\n    .key('flex')\n   ", "        })\n        .closeEffect(true)\n      DataPanel({ values: [", "          resultSet.close();\n            } catch (error) {\n      ", "          resultSet.close();\n            await callLogDelete(\"abn", "BLE = 0; // tran is close\nexport const TRANSFER_ENABLE = 1; // tr", "          resultSet.close();\n                } catch (error) {\n  ", "        })\n        .closeEffect(false)\n\n      DataPanel({ values:", "          resultSet.close();\n                done();\n            ", "          resultSet.close();\n                await callLogDelete(", "FER_ERASURE = 4; // close tran function\nexport const CALL_TRANSFE", "          resultSet.close();\n                await deleteRawConta"], "files": ["Calllog_test.js", "ContactMerge_test.js", "Stability_test.js", "SocketJsunit.test.ets", "Contacts_test.js", "ContactCard_test.js", "Performance_test.js", "WebSocketJsunit.test.ets", "Voicemail_test.js", "recovery_test.js", "Groups_test.js", "DataPanel.ets", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "close", "api_method_all": "close(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["   socket.TCPSocket.close().then(data => {\n        console.log(`$", "   socket.UDPSocket.close().then(data => {\n        console.log(`$", "  }\n      webSocket.close(webSocketCloseOptions).then(data => {\n "], "files": ["SocketJsunit.test.ets", "WebSocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "getRemoteAddress", "api_method_all": "getRemoteAddress(callback: AsyncCallback<NetAddress>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 13, "since": 0, "api_used": "\u662f", "lines": ["ny_Socket_TCPSocket_getRemoteAddress_0100 Test start*************\");\n      l", "ny_Socket_TCPSocket_getRemoteAddress_0100 Test end*************\");\n      don", "ny_Socket_TCPSocket_getRemoteAddress_0100', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_getRemoteAddress_0200 Test end*************\");\n      don", "ny_Socket_TCPSocket_getRemoteAddress_0200', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_getRemoteAddress_0200\n     * @tc.name      : getRemoteAd", "ny_Socket_TCPSocket_getRemoteAddress_0100\n     * @tc.name      : getRemoteAd", "  * @tc.name      : getRemoteAddress\n     * @tc.desc      : Obtains the peer", "ny_Socket_TCPSocket_getRemoteAddress_0200\"\n      if (utils.notCheck) {\n     ", "   socket.TCPSocket.getRemoteAddress((error) => {\n        if (error) {\n     ", "ny_Socket_TCPSocket_getRemoteAddress_0200 Test start*************\");\n      l", "ny_Socket_TCPSocket_getRemoteAddress_0100\"\n      if (utils.notCheck) {\n     "], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "getRemoteAddress", "api_method_all": "getRemoteAddress(): Promise<NetAddress>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["   socket.TCPSocket.getRemoteAddress().then(data => {\n        console.log(`$"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "getState", "api_method_all": "getState(callback: AsyncCallback<SocketStateBase>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 26, "since": 0, "api_used": "\u662f", "lines": ["ny_Socket_TCPSocket_getState_0200\"\n      if (utils.notCheck) {\n     ", "   socket.TCPSocket.getState((error, data) => {\n        if (error) {", "   socket.UDPSocket.getState((error, data) => {\n        if (error) {", "ny_Socket_TCPSocket_getState_0100', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_getState_0200 Test start*************\");\n      l", "ny_Socket_TCPSocket_getState_0100 Test start*************\");\n      l", "ny_Socket_TCPSocket_getState_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_getState_0100 Test start*************\");\n      l", "ny_Socket_TCPSocket_getState_0200\n     * @tc.name      : getState\n  ", "ny_Socket_UDPSocket_getState_0100\n     * @tc.name      : getState\n  ", "ny_Socket_UDPSocket_getState_0200\n     * @tc.name      : getState\n  ", "ny_Socket_UDPSocket_getState_0200\"\n      if (utils.notCheck) {\n     ", "  * @tc.name      : getState\n     * @tc.desc      : Obtains the stat", "ny_Socket_UDPSocket_getState_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_getState_0100\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_getState_0200 Test end*************\");\n      don", "ny_Socket_UDPSocket_getState_0200 Test start*************\");\n      l", "ny_Socket_TCPSocket_getState_0100\"\n      if (utils.notCheck) {\n     ", "ny_Socket_TCPSocket_getState_0100 Test end*************\");\n      don", "ny_Socket_TCPSocket_getState_0100\n     * @tc.name      : getState\n  ", "ny_Socket_TCPSocket_getState_0200 Test end*************\");\n      don", "ny_Socket_UDPSocket_getState_0100', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_getState_0100 Test end*************\");\n      don"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "getState", "api_method_all": "getState(): Promise<SocketStateBase>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["   socket.UDPSocket.getState().then(data => {\n        console.log(`$", "   socket.TCPSocket.getState().then(data => {\n        console.log(`$"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "setExtraOptions", "api_method_all": "setExtraOptions(options: TCPExtraOptions, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 56, "since": 0, "api_used": "\u662f", "lines": ["ny_Socket_UDPSocket_setExtraOptions_0300 Test start*************\");\n      l", "ny_Socket_UDPSocket_setExtraOptions_0100\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_setExtraOptions_0400\"\n      let udpExtraOptions: socket", "ny_Socket_UDPSocket_setExtraOptions_0400\n     * @tc.name      : setExtraOpt", "ny_Socket_TCPSocket_setExtraOptions_0200\n     * @tc.name      : setExtraOpt", "ny_Socket_UDPSocket_setExtraOptions_0400 Test start*************\");\n      l", "ny_Socket_TCPSocket_setExtraOptions_0300 Test end*************\");\n      don", "ny_Socket_TCPSocket_setExtraOptions_0300\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_setExtraOptions_0100 Test start*************\");\n      l", "ny_Socket_TCPSocket_setExtraOptions_0200 Test start*************\");\n      l", "ny_Socket_UDPSocket_setExtraOptions_0200', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_setExtraOptions_0100 Test end*************\");\n      don", "   socket.UDPSocket.setExtraOptions(udpExtraOptions, (error) => {\n        i", "ny_Socket_UDPSocket_setExtraOptions_0200\n     * @tc.name      : setExtraOpt", "ny_Socket_TCPSocket_setExtraOptions_0100', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_setExtraOptions_0300\"\n      if (utils.notCheck) {\n     ", "ny_Socket_TCPSocket_setExtraOptions_0400\n     * @tc.name      : setExtraOpt", "it socket.UDPSocket.setExtraOptions(udpExtraOptions);\n        console.log(`", "ny_Socket_UDPSocket_setExtraOptions_0200 Test start*************\");\n      l", "ny_Socket_UDPSocket_setExtraOptions_0300', 0, async function (done) {\n     ", "  * @tc.name      : setExtraOptions\n     * @tc.desc      : Sets other attri", "ny_Socket_UDPSocket_setExtraOptions_0300\n     * @tc.name      : setExtraOpt", "ny_Socket_TCPSocket_setExtraOptions_0200\"\n      if (utils.notCheck) {\n     ", "ny_Socket_UDPSocket_setExtraOptions_0400 Test end*************\");\n      don", "ny_Socket_TCPSocket_setExtraOptions_0200', 0, async function (done) {\n     ", "ny_Socket_UDPSocket_setExtraOptions_0300 Test end*************\");\n      don", "ny_Socket_UDPSocket_setExtraOptions_0200 Test end*************\");\n      don", "ny_Socket_TCPSocket_setExtraOptions_0100\n     * @tc.name      : setExtraOpt", "ny_Socket_UDPSocket_setExtraOptions_0400', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_setExtraOptions_0300\n     * @tc.name      : setExtraOpt", "ny_Socket_TCPSocket_setExtraOptions_0100\"\n      if (utils.notCheck) {\n     ", "it socket.TCPSocket.setExtraOptions(tcpExtraOptions);\n        console.log(`", "ny_Socket_UDPSocket_setExtraOptions_0100\n     * @tc.name      : setExtraOpt", "ny_Socket_UDPSocket_setExtraOptions_0100 Test end*************\");\n      don", "   socket.TCPSocket.setExtraOptions(tcpExtraOptions, (error) => {\n        i", "ny_Socket_TCPSocket_setExtraOptions_0200 Test end*************\");\n      don", "ny_Socket_UDPSocket_setExtraOptions_0100', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_setExtraOptions_0100 Test start*************\");\n      l", "ny_Socket_UDPSocket_setExtraOptions_0200\"\n      let udpExtraOptions: socket", "ny_Socket_TCPSocket_setExtraOptions_0300', 0, async function (done) {\n     ", "ny_Socket_TCPSocket_setExtraOptions_0300 Test start*************\");\n      l"], "files": ["SocketJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "setExtraOptions", "api_method_all": "setExtraOptions(options: TCPExtraOptions): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "on", "api_method_all": "on(type: 'message', callback: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 7, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "off", "api_method_all": "off(type: 'message', callback?: Callback<{message: ArrayBuffer, remoteInfo: SocketRemoteInfo}>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 403, "since": 0, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "on", "api_method_all": "on(type: 'connect' | 'close', callback: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 7, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "off", "api_method_all": "off(type: 'connect' | 'close', callback?: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 403, "since": 0, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 35526, "since": 7, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TCPSocket", "api_method_name": "off", "api_method_all": "off(type: 'error', callback?: ErrorCallback): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 403, "since": 0, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}]}