{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\line", "api": [{"api_class_name": "LineInterface", "api_method_all": "interface LineInterface {\n  \n  new (value?: { width?: string | number; height?: string | number }): LineAttribute;\n\n  \n  (value?: { width?: string | number; height?: string | number }): LineAttribute;\n}", "api_method_name": "LineInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LineInterface", "api_method_name": "new", "api_method_all": "new (value?: { width?: string | number; height?: string | number }): LineAttribute;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 445, "since": 7, "api_used": "\u662f", "lines": ["      let storage = new Storage();\n      co", "     })\n      Text('new area is: \\n' + this", "onst expectExtend = new ExpectExtend({\n    ", "PropertySubscriber =new IPropertySubscriber", ": VideoController = new VideoController();\n", "ge((oldValue: Area, newValue: Area) => {\n  ", " CommonShapeMethod= new Circle({ width: 280", "Storage(AppStorage, new Storage());\n      p", "yncedPropertyTwoWay(new SubscribedAbstractP", "    var offscreen = new OffscreenCanvas(300", "   let subscriber = new IPropertySubscriber", "title).assertEqual(\"new title\");\n      cons", "ata: MyDataSource = new MyDataSource()\n  bu", "et contentStorage = new ContentStorage();\n\n", "xtTimerController = new TextTimerController", "ay.aboutToBeDeleted(new SubscribedAbstractP", "onst reportExtend = new ReportExtend(file);", "e() {\n    let img = new ImageBitmap(\"/image", "> {\n            var newoptions = {\n        ", "is ${JSON.stringify(newValue)}`)\n          ", "xtClockController = new TextClockController", "\n      let oneWay = new SyncedPropertyOneWa", "ernLockController = new PatternLockControll", "is.animation.update(newoptions);\n          ", "tringify(oldValue)} newvalue is ${JSON.stri", "yncedPropertyOneWay(new SubscribedAbstractP", "  }\n    this.data = new MyDataSource(list)\n", "ze = JSON.stringify(newValue)\n          thi", "    this.maskType = new Circle({ width: 280", "     let abstract = new SubscribaleAbstract", "alendarController = new CalendarController(", "(time) {\n    return new Promise((resolve, r", "          \"title\": \"new title\"\n          }\n", "ata: MyDataSource = new MyDataSource([])\n  ", "mDialogController = new CustomDialogControl", "e() {\n    var img = new Image(\"/images/bg.j", "persistentStorage = new PersistentStorage(A", "   let subscriber = new ISinglePropertyChan", " CommonShapeMethod= new Rect({ width: 280, ", "2d\");\n    var img = new Image();\n    img.sr", " SwiperController = new SwiperController()\n", "\n      let twoWay = new SyncedPropertyTwoWa", "    this.clipType = new Rect({ width: 280, "], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "video.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "canvas2.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "CustomDialog.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "textTimer.ets", "Swiper.ets", "OverlayJsunit.test.ets", "DividerJsunit.test.ets", "basicabilityapi.test.js", "badgeProps.test.js", "scrollBar.ets", "dialogProps.test.js", "LinkJsunit.test.ets", "GridJsnuit.test.ets", "scrollCode.ets", "formProps.test.js", "VideoJsunit.test.ets", "circleProps.test.js", "XComponentPage.ets", "stackProps.test.js", "SpanJsunit.test.ets", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "ButtonJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "Scroll.ets", "customDialogController.ets", "GridContainerJsunit.test.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "shapeClipping.ets", "FlexJsunit.test.ets", "AppStorageJsunit.test.ets", "index.ets", "ProgressJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "Tab.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "videoProps.test.js", "optionProps.test.js", "AlphabetIndexerJsunit.test.ets", "calendar.ets", "TextInputJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "Video.ets", "StackJsunit.test.ets", "TextAreaJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "animateMotionProps.test.js", "pieceProps.test.js", "selectProps.test.js", "textareaProps.test.js", "ScrollJsunit.test.ets", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "search.ets", "NavigatorCode.ets", "patternLock.ets", "animateProps.test.js", "buttonProps.test.js", "global.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "canvas.ets", "pickerViewProps.test.js", "divProps.test.js", "switchProps.test.js", "commonComponentJsApi.test.js", "ellipseProps.test.js", "chartProps.test.js", "SliderJsunit.test.ets", "datePicker.ets", "sliderProps.test.js", "swiperProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Calendar.ets", "panelProps.test.js", "ScrollBar.ets", "Badge.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LineInterface", "api_method_name": "value", "api_method_all": "(value?: { width?: string | number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LineInterface", "api_method_name": "height", "api_method_all": "height?: string | number }): LineAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1455, "since": 7, "api_used": "\u662f", "lines": [" if (eventData.data.height != null) {\n        ", "     .width('100%').height('40%').backgroundCo", "    }.width('100%').height('100%')\n  }\n}", "\"img_height=\" + img.height);\n  }\n}", "\n    .width('100%').height('100%').margin({ to", "width(200)\n        .height(200)\n    }.width('1", ".gridSpan)\n        .height(\"100%\")\n        .ba", "        })\n        .height(\"100%\")\n        .ba", "th(`${this.width}`).height(`${this.height}`).k", "   let height = img.height;\n    this.context.i", ":100').width('34%').height(100)\n          .bac", " img.width;\n    let height = img.height;\n    t", "dth('90%')\n        .height(40)\n        .fontSi", "   console.log(\"img_height=\" + img.height);\n  ", "sole.log(\"imageData_height=\" + imageData.heigh", "     }.width('90%').height(120).padding(10).ba", "ull) {\n        this.height = eventData.data.he", "h('50%')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .shadow", "eight=\" + imageData.height);\n  }\n\n  testImage(", "s('100')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .graysc", "h('33%')\n          .height(80)\n          .line", "le.log(\"imagebitmap_height=\" + height);\n  }\n\n ", "h('60%')\n          .height(100)\n          .lin", "= \"200px\";\n  @State height: string = \"200px\";\n", "h}`).height(`${this.height}`).key('ellipse')\n ", " Text('no alignSelf,height:80').width('33%').h", "xGrow(1)\n          .height(100)\n          .lin", "ht = eventData.data.height;\n      }\n    }\n  }\n", "gebitmap_height=\" + height);\n  }\n\n  testOffscr", "xGrow(2)\n          .height(100)\n          .lin", "lumn().width('50%').height(30).backgroundColor", "h('40%')\n          .height(100)\n          .lin", "Size({ width: 1200, height: 160 })\n        .ke", "    })\n            .height(50)\n            .ba", "width('90%')\n      .height(120)\n      .padding", "   })\n\n            .height(50)\n            .ba", "ridOffset)\n        .height(\"100%\")\n        .ba", "an')\n      }\n      .height(200)\n    }\n    .bac", " Text('no alignSelf,height:100').width('34%').", "t:80').width('33%').height(80)\n          .back", "    }.width('100%').height('100%')\n  }\n\n  test"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "AlertDialog.ets", "sliderProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LineAttributeextendsCommonShapeMethod", "api_method_all": "declare class LineAttribute extends CommonShapeMethod<LineAttribute> {\n  \n  startPoint(value: Array<any>): LineAttribute;\n\n  \n  endPoint(value: Array<any>): LineAttribute;\n}", "api_method_name": "LineAttributeextendsCommonShapeMethod", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LineAttributeextendsCommonShapeMethod", "api_method_name": "startPoint", "api_method_all": "startPoint(value: Array<any>): LineAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"startPoint\": 50,\n            \"", "  expect(obj.$attrs.startPoint[0]).assertEqual(0);", "tringify(obj.$attrs.startPoint[0]));\n      console", " 50, height: 100 }).startPoint(this.startPoint).en", " if (eventData.data.startPoint != null) {\n        ", "  expect(obj.$attrs.startPoint[1]).assertEqual(0);", "tringify(obj.$attrs.startPoint[1]));\n      expect(", "0] = eventData.data.startPoint;\n      }\n      if (", " }).startPoint(this.startPoint).endPoint(this.endP", "eExample {\n  @State startPoint: Point = [0, 0]\n  @", "ull) {\n        this.startPoint[0] = eventData.data", "\": 50,\n            \"startPointOne\": 50,\n          ", "ata: {\n            \"startPoint\": 'A',\n            ", "1] = eventData.data.startPointOne;\n      }\n      i", "  expect(obj.$attrs.startPoint[1]).assertEqual(50)", " if (eventData.data.startPointOne != null) {\n     ", ": 'A',\n            \"startPointOne\": 'B',\n         ", "ull) {\n        this.startPoint[1] = eventData.data", "  expect(obj.$attrs.startPoint[0]).assertEqual(50)"], "files": ["line.ets", "LineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "LineAttributeextendsCommonShapeMethod", "api_method_name": "endPoint", "api_method_all": "endPoint(value: Array<any>): LineAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 23, "since": 0, "api_used": "\u662f", "lines": ["1] = eventData.data.endPointOne;\n      }\n      i", " if (eventData.data.endPointOne != null) {\n     ", "tringify(obj.$attrs.endPoint[0]));\n      console", "  expect(obj.$attrs.endPoint[1]).assertEqual(150", "  expect(obj.$attrs.endPoint[0]).assertEqual(0);", "oint).endPoint(this.endPoint)\n        .key('line", " if (eventData.data.endPoint != null) {\n        ", "nt(this.startPoint).endPoint(this.endPoint)\n    ", "tringify(obj.$attrs.endPoint[0]));\n      expect(", "  expect(obj.$attrs.endPoint[1]).assertEqual(0);", "ata: {\n            \"endPoint\": 100,\n            ", "  expect(obj.$attrs.endPoint[1]).assertEqual(100", "ata: {\n            \"endPoint\": 'A',\n            ", "  expect(obj.$attrs.endPoint[0]).assertEqual(50)", "  expect(obj.$attrs.endPoint[0]).assertEqual(100", "tringify(obj.$attrs.endPoint[1]));\n      expect(", "0] = eventData.data.endPoint;\n      }\n    }\n  }\n", "ull) {\n        this.endPoint[0] = eventData.data", ": 100,\n            \"endPointOne\": 150,\n         ", "tringify(obj.$attrs.endPoint[1]));\n      console", ": 'A',\n            \"endPointOne\": 'B',\n         ", "t = [0, 0]\n  @State endPoint: Point = [50, 100]\n", "ull) {\n        this.endPoint[1] = eventData.data"], "files": ["line.ets", "LineJsunit.test.ets"], "is_white": " ", "desc": " "}]}