{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\tabs", "api": [{"api_class_name": "BarMode", "api_method_all": "declare enum BarMode {\n  \n  Scrollable,\n\n  \n  Fixed,\n}", "api_method_name": "BarMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 15, "since": 7, "api_used": "\u662f", "lines": ["e\n  @State barMode: BarMode = BarMode.Fixed\n  @", "rMode).assertEqual('BarMode.Fixed');\n      cons", "tc.name      testTabBarModeFixed\n     * @tc.des", "tc.name      testTabBarModeNone\n     * @tc.desc", "onsole.info('testTabBarModeNone START');\n      ", "onsole.info('testTabBarModeFixed START');\n     ", " barMode: BarMode = BarMode.Fixed\n  @State barW", "rue)\n      .barMode(BarMode.Fixed)\n      .barWi", "lse)\n      .barMode(BarMode.Scrollable)\n      .", "rMode).assertEqual('BarMode.Fixed')\n      expec", "rMode).assertEqual('BarMode.Scrollable')\n      ", "  */\n    it('testTabBarModeScroll', 0, async fu", "  */\n    it('testTabBarModeFixed', 0, async fun", "onsole.info('testTabBarModeScroll START');\n    ", "  */\n    it('testTabBarModeNone', 0, async func"], "files": ["tabs.ets", "Tab.ets", "TabsJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BarMode", "api_method_name": "Scrollable", "api_method_all": "Scrollable,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["   .barMode(BarMode.Scrollable)\n      .barWidth(70", "      testTabContentScrollableFalse\n     * @tc.des", "      testTabContentScrollableTrue\n     * @tc.desc", "info('testTabContentScrollableNone START');\n      ", "  it('testTabContentScrollableTrue', 0, async func", "info('testTabContentScrollableTrue START');\n      ", "  it('testTabContentScrollableNone', 0, async func", "  it('testTabContentScrollableFalse', 0, async fun", "      testTabContentScrollableNone\n     * @tc.desc", "ssertEqual('BarMode.Scrollable')\n      expect(obj.", "info('testTabContentScrollableFalse START');\n     "], "files": ["tabContentProps.test.js", "TabJsunit.test.ets", "Tab.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BarMode", "api_method_name": "Fixed", "api_method_all": "Fixed,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 49, "since": 7, "api_used": "\u662f", "lines": ["lobalThis.value.typeFixedsizeTrue);\n        c", "se,\n            typeFixedsizeNull :  this.typ", "()\n        this.typeFixedsizeTrue = this.$ele", "()\n        this.typeFixedsizeFalse = this.$el", "ssertEqual('BarMode.Fixed')\n      expect(obj.", "t('testimageAnimatorFixedsizePropNull', 0, as", "lobalThis.value.typeFixedsizeFalse);\n        ", "lobalThis.value.modeFixed);\n        console.i", "tEqual(150.000000.toFixed(6))\n      console.i", ": null,\n        typeFixedsizeTrue : null,\n   ", "      testTabBarModeFixed\n     * @tc.desc    ", " this.$element(\"typeFixedsizeTrue\").getInspec", "zeFalse :  this.typeFixedsizeFalse, typeDurat", "nVerticalSetValue.toFixed(0)).fontSize(16)\n  ", ": null,\n        typeFixedsizeNull : null,\n   ", "(this.outSetValue.toFixed(0)).fontSize(16)\n  ", "tEqual(100.000000.toFixed(6))\n      console.i", "t(this.inSetValue.toFixed(0)).fontSize(16)\n  ", "ssertEqual('BarMode.Fixed');\n      console.in", "izeTrue :  this.typeFixedsizeTrue,\n          ", "tVerticalSetValue.toFixed(0)).fontSize(16)\n  ", "  it('testTabBarModeFixed', 0, async function", ": BarMode = BarMode.Fixed\n  @State barWidth: ", "d).assertEqual('modeFixed')\n        expect(ob", "rtEqual(40.000000.toFixed(6))\n      expect(ob", "ertEqual(1.000000.toFixed(6))\n      expect(ob", "Equal(1000.000000.toFixed(6))\n      console.i", "info('testTabBarModeFixed START');\n        co", "ertEqual(0.000000.toFixed(6))\n      expect(ob", "t('testimageAnimatorFixedsizePropFalse', 0, a", "ertEqual(3.000000.toFixed(6))\n      expect(ob", "d).assertEqual('typeFixedsizeNull')\n        e", " this.$element(\"typeFixedsizeFalse\").getInspe", "d).assertEqual('typeFixedsizeFalse')\n        ", "lobalThis.value.typeFixedsizeNull);\n        c", "tEqual(100.000000.toFixed(6))\n      expect(ob", "   .barMode(BarMode.Fixed)\n      .barWidth(70", "ue,\n            typeFixedsizeFalse :  this.ty", "rtEqual(70.000000.toFixed(6))\n      expect(ob", "()\n        this.typeFixedsizeNull = this.$ele", ": null,\n        typeFixedsizeFalse : null,\n  ", "t('testimageAnimatorFixedsizePropTrue', 0, as", " this.$element(\"typeFixedsizeNull\").getInspec", "d).assertEqual('typeFixedsizeTrue')\n        e", "eFixedsizeNull, typeFixedsizeTrue :  this.typ", "izeNull :  this.typeFixedsizeNull, typeFixeds"], "files": ["ProgressJsunit.test.ets", "SliderJsunit.test.ets", "DataPanelJsunit.test.ets", "tabs.ets", "Tab.ets", "TabsJsunit.test.ets", "slider.ets", "imageAnimatorProps.test.js", "TabJsunit.test.ets", "tabBarProps.test.js", "ListJsunit.test.ets", "index.js", "SwiperJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BarPosition", "api_method_all": "declare enum BarPosition {\n  \n  Start,\n\n  \n  End,\n}", "api_method_name": "BarPosition", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["Tabs({ barPosition: BarPosition.Start, index: 1, co", "ition).assertEqual('BarPosition.End')\n      expect(", "ition).assertEqual('BarPosition.Start');\n      cons", "tion: BarPosition = BarPosition.Start\n  @State inde", "ition).assertEqual('BarPosition.Start')\n      expec", "Tabs({ barPosition: BarPosition.End, index: 1, cont", "@State barPosition: BarPosition = BarPosition.Start"], "files": ["TabJsunit.test.ets", "Tab.ets", "TabsJsunit.test.ets", "tabs.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BarPosition", "api_method_name": "Start", "api_method_all": "Start,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 671, "since": 7, "api_used": "\u662f", "lines": ["log('ListItem onDragStarts, ' + extraParams)\n", "textAlign(TextAlign.Start).margin(15)\n      L", "         .onItemDragStart((event: ItemDragInf", "Equal(\"Alignment.TopStart\");\n      console.in", "ignItems: ItemAlign.Start, justifyContent: Fl", ".align(Alignment.TopStart)\n        Text('thir", "')\n          .onDragStart((event: DragEvent, ", "20).align(Alignment.Start)\n            .offse", "s.loop,\n        fromStart: this.fromStart,\n  ", "ignSelf = ItemAlign.Start;\n          break;\n ", "ertEqual('TextAlign.Start');\n      console.in", "e)\n          .onDragStart((event: DragEvent, ", "nimation complete onStart')\n          console", "ign\": \"Alignment.TopStart\",\n            \"x\": ", "   Text('alignItems(Start)').fontSize(9).font", "le.log('Ting--onDragStart--orange')\n         ", "le.log('apple onDragStart onAction')\n        ", "fo('Ting--onItemDragStart' + event.x)\n       ", "      console.info('Start')\n        })\n      ", "   \"ACTION\": 'onDragStart onAction'\n         ", "ntent: Alignment.TopStart }) {\n      Column()", "le.log('Ting--onDragStart--banana')\n         ", "20).align(Alignment.Start)\n            .posit", "ntent: Alignment.TopStart }) {\n          Row(", "reak;\n        case 'Start':\n          this.al", "op:100})\n        .onStart(() => {\n          c", "})\n          .onDragStart((event: DragEvent, ", " false\n  @State fromStart: boolean = true\n  @", "al('HorizontalAlign.Start');\n      console.in", "ertEqual(\"TextAlign.Start\");\n      console.in", ".align(Alignment.TopStart)\n          .zIndex(", "e)\n          .onDragStart(() => {\n           ", "n = HorizontalAlign.Start;\n\n  onPageShow() {\n", "ment = Alignment.TopStart;\n  @State direction", "textAlign(TextAlign.Start).margin(5)\n      Fl", "ole.log('Text onDragStarts, ' + extraParams)\n", "m: 40 })\n        .onStart(() => {\n          c", "textAlign(TextAlign.Start).margin(15)\n\n      ", "fo('Ting--onItemDragStart' + event.y)\n       ", "fromStart: this.fromStart,\n        src: this.", "Equal(\"Alignment.TopStart\");\n      expect(obj", "le.log('Ting--onDragStart--apple')\n          "], "files": ["flex.ets", "focus.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "row.ets", "DragEventJsunit.test.ets", "gridPage.ets", "canvas2.ets", "direction2.ets", "buttonProps.test.js", "canvas.ets", "Text.ets", "divider.ets", "imageFit.ets", "Stack.ets", "TextJsunit.test.ets", "SubscribaleAbstractJsunit.test.ets", "richText.ets", "column.ets", "zIndex.ets", "animationStatus.ets", "PositionSettingJsunit.test.ets", "fillMode.ets", "Prop.ets", "text.ets", "FormComponentPage.ets", "GridContainerJsunit.test.ets", "tabs.ets", "AlertDialog.ets", "WebPage.ets", "videoProps.test.js", "list.ets", "marquee.ets", "TabsJsunit.test.ets", "positionSetting.ets", "List.ets", "TabJsunit.test.ets", "GridContainer.ets", "dragEvent2.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "TextInputJsunit.test.ets", "calendar.ets", "GridItem.ets", "dragEvent.ets", "PanGesture.ets", "Marquee.ets", "Video.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "GridItem.test.ets", "textPathProps.test.js", "textInput.ets", "image.ets", "Calendar.ets", "fontWeight.ets", "imageAnimator.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "scrollCode.ets", "Column.ets", "button.ets", "span.ets", "NavigatorCode.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "BarPosition", "api_method_name": "End", "api_method_all": "End,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 440, "since": 7, "api_used": "\u662f", "lines": ["al('Alignment.BottomEnd')\n      console.inf", "tion = IconPosition.End;\n  @State fontStyle", "ems(HorizontalAlign.End)\n\n          GridCon", "ems(HorizontalAlign.End).width('90%').borde", "reak;\n        case 'End':\n          this.al", "olumnStart(1).columnEnd(5)\n        }\n      ", "nContent: Alignment.End }) {\n        Text('", "al('HorizontalAlign.End');\n      console.lo", "nsole.info('onActionEnd current action stat", "ntString = 'onActionEnd';\n        console.i", "++ Panel TestCase 1 End ++++++++++++++++');", "++ Panel TestCase 2 End ++++++++++++++++');", "ign(Alignment.BottomEnd)\n        .width('10", "ertEqual('Alignment.End')\n      console.inf", "ext('justifyContent(End)').fontSize(9).font", "n = Alignment.BottomEnd;\n      } else if (e", "yContent-'FlexAlign.End':\" + JSON.stringify", "ms-'HorizontalAlign.End':\" + JSON.stringify", ".align(Alignment.TopEnd)\n        .direction", "   Text('alignItems(End)').fontSize(9).font", "extAlign= TextAlign.End\n  @State lineHeight", "nContent-'FlexAlign.End':\" + JSON.stringify", "++ Panel TestCase 3 End ++++++++++++++++');", "nt: Alignment.BottomEnd }) {\n        Text('", "n\": Alignment.BottomEnd\n          }\n       ", "ssertEqual('onActionEnd')\n      }\n      let", "  })\n      .onActionEnd(() => {\n        con", "ignSelf = ItemAlign.End;\n          break;\n ", "ems(HorizontalAlign.End)\n\n        }.width('", "alignSelf(ItemAlign.End)\n        .borderWid", "   .align(Alignment.End)\n        .alignSelf", "nContent: Alignment.End }) {\n        Scroll", "ertEqual('FlexAlign.End');\n      console.lo", "nContent: FlexAlign.End,\n        }) {\n     ", "ertEqual(\"FlexAlign.End\");\n      console.lo", "  })\n      .onScrollEnd(() => {\n        con", "fyContent(FlexAlign.End)\n\n      Text('justi", "lignItems:ItemAlign.End,\n          alignCon", "ntent: Alignment.TopEnd }) {\n        Text('", "yContent: FlexAlign.End,\n          alignIte", "   }.rowStart(1).rowEnd(4)\n\n          ForEa"], "files": ["flex.ets", "panDirection.ets", "Flex.ets", "Tab.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "gridPage.ets", "PieceCode.ets", "Text.ets", "PanelJsunit.test.ets", "StepperJsunit.test.ets", "Stack.ets", "TextJsunit.test.ets", "ToggleJsunit.test.ets", "PositionSettingJsunit.test.ets", "ScrollerBarJsunit.test.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "AlertDialog.ets", "WebPage.ets", "NavigatorJsunit.test.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "GridContainer.ets", "TabJsunit.test.ets", "TextArea.ets", "FlexJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "TextInputJsunit.test.ets", "GridItem.ets", "GridItem.test.ets", "animateTransformProps.test.js", "PanGesture.ets", "scrollBar.ets", "StackJsunit.test.ets", "TextAreaJsunit.test.ets", "animateMotionProps.test.js", "NavigationJsunit.test.ets", "textareaProps.test.js", "LongPressGesture.test.ets", "Column.ets", "gestureMode.ets", "ListJsunit.test.ets", "row.ets", "scrollCode.ets", "buttonProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsController", "api_method_all": "declare class TabsController {\n  \n  constructor();\n\n  \n  changeIndex(value: number): void;\n}", "api_method_name": "TabsController", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["absController = new TabsController()\n\n  build() {\n    ", "private controller: TabsController = new TabsControlle"], "files": ["Tab.ets", "tabs.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsController", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsController", "api_method_name": "changeIndex", "api_method_all": "changeIndex(value: number): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["    this.controller.changeIndex(0)\n          consol", "n() {\n      Button('changeIndex')\n        .onClick("], "files": ["Tab.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsInterface", "api_method_all": "interface TabsInterface {\n  \n  (value?: { barPosition?: BarPosition; index?: number; controller?: TabsController }): TabsAttribute;\n}", "api_method_name": "TabsInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TabsInterface", "api_method_name": "value", "api_method_all": "(value?: { barPosition?: BarPosition", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsInterface", "api_method_name": "index", "api_method_all": "index?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1502, "since": 7, "api_used": "\u662f", "lines": ["       console.info(index.toString())\n       ", "Source([])\n  @State index: number = 1\n  @Stat", "    this.arr.splice(index, 1)\n          conso", " if (eventData.data.index != null) {\n        ", "    let callback = (indexEvent) => {\n        ", ";\n      }\n      let indexEvent = {\n        ev", "t));\n        expect(indexEvent.data.value).as", "    Stepper({\n      index: this.currentIndex\n", "d} from \"deccjsunit/index.ets\";\nimport testsu", ")\n      .index(this.index)\n      .autoPlay(th", "this.currentIndex = index\n    })\n    .align(A", "  events_emitter.on(indexEvent, callback);\n  ", "ngth\n  }\n\n  getData(index: number): any {\n   ", "t} from \"deccjsunit/index.ets\"\nimport router ", "events_emitter.emit(indexEvent, eventData);\n ", "chedCount(2)\n      .index(this.index)\n      .", " \" + JSON.stringify(indexEvent));\n        exp", "ull) {\n        this.index = parseInt(eventDat", "eInt(eventData.data.index);\n      }\n      if ", "(prevIndex: number, index: number) => {\n     ", "nsole.info(this.arr[index] + 'Delete')\n      ", "t} from \"deccjsunit/index.ets\";\nimport router", "')\n      .onChange((index: number) => {\n     ", "     .onItemDelete((index: number) => {\n     ", "   return this.list[index]\n  }\n\n  registerDat", "      }\n        let indexEvent = {\n          "], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "CommonJsunit.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "Swiper.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "SystemAppJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "sideBar.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "index.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "stepper.ets", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "Select.ets", "ratingProps.test.js", "MotionPathJsunit.test.ets", "stepperProps.test.js", "marqueeProps.test.js", "Tab.ets", "imageAnimatorProps.test.js", "Stepper.ets", "textPickerDialog.ets", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "tabs.ets", "BindMenuJsunit.test.ets", "videoProps.test.js", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "DatePickerJsunit.test.ets", "BasicJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "calendar.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "animateMotionProps.test.js", "listItem.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "ContentStorage.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "Constants.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "swiperProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsInterface", "api_method_name": "controller", "api_method_all": "controller?: TabsController }): TabsAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 50, "since": 7, "api_used": "\u662f", "lines": [" {\n            this.controller.stop()\n          })", " {\n            this.controller.onInactive()\n      ", " {\n            this.controller.loadData({\n        ", "s.accessStep = this.controller.accessStep(1)\n     ", ".nextMonth,\n        controller: this.Controller\n  ", "t getHitTest = this.controller.getHitTest()\n      ", "string= ''\n  @State controller: SearchController= ", " {\n            this.controller.registerJavaScriptP", "cessBackward = this.controller.accessBackward()\n  ", "', controller: this.controller })\n        .searchB", " {\n            this.controller.forward()\n         ", "on.Start, index: 1, controller: this.controller })", " {\n            this.controller.runJavaScript({\n   ", " {\n            this.controller.requestFocus()\n    ", " {\n            this.controller.clearHistory()\n    ", ")=>{\n          this.controller.stop()\n          th", "tion.End, index: 1, controller: this.controller })", "gressRates,\n        controller: this.myVideoContro", " {\n            this.controller.refresh()\n         ", " {\n            this.controller.onActive()\n        ", " {\n            this.controller.close()\n           ", "{\n      TextTimer({ controller: this.myTimerContro", "8, controller: this.controller})\n        .key('tex", "ccessForward = this.controller.accessForward()\n   ", "r: 'input content', controller: this.controller })", " {\n            this.controller.deleteJavaScriptReg", "1, controller: this.controller }) {\n        TabCon", "previewUri,\n        controller: this.myVideoContro", "tTestType.Unknown\n  controller: WebController = ne", "timeZoneOffset: -8, controller: this.controller})\n", ", libraryname: '3', controller: this.xComponentCon", "omDialogExample {\n  controller: CustomDialogContro", "Example {\n  private controller: TabsController = n", " boolean = false;\n  controller: TextClockControlle", " {\n            this.controller.loadUrl({\n         ", " {\n            this.controller.backward()\n        ", "=> {\n          this.controller.caretPosition(4)\n  ", "n = false\n  private controller: TabsController = n", ": this.barPosition, controller: this.controller, i", "('indextest.html'), controller: this.controller })", "), controller: this.controller })\n        .domStor", "n, controller: this.controller, index: this.index ", "=> {\n          this.controller.changeIndex(0)\n    ", "rl);\n          this.controller.runJavaScript('test", ")=>{\n          this.controller.start()\n        })\n"], "files": ["textClock.ets", "tabs.ets", "Video.ets", "WebPage.ets", "video.ets", "Tab.ets", "textInput.ets", "textTimer.ets", "Calendar.ets", "XComponentPage.ets", "search.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsAttribute", "api_method_all": "declare class TabsAttribute extends CommonMethod<TabsAttribute> {\n  \n  vertical(value: boolean): TabsAttribute;\n\n  \n  scrollable(value: boolean): TabsAttribute;\n\n  \n  barMode(value: BarMode): TabsAttribute;\n\n  \n  barWidth(value: Length): TabsAttribute;\n\n  \n  barHeight(value: Length): TabsAttribute;\n\n  \n  animationDuration(value: number): TabsAttribute;\n\n  \n  onChange(event: (index: number) => void): TabsAttribute;\n}", "api_method_name": "TabsAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TabsAttribute", "api_method_name": "vertical", "api_method_all": "vertical(value: boolean): TabsAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 121, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"vertical\": \"false\",\n        ", "ull) {\n        this.vertical = eventData.data.ve", "'Divider')\n        .vertical(false)\n        .str", "ole.log('obj.$attrs.vertical' + typeof (obj.$att", "tringify(obj.$attrs.vertical));\n      console.lo", " .key('tab')\n      .vertical(true)\n      .scroll", "yle.Round)\n        .vertical(false)\n        .col", "ata: {\n            \"vertical\": \"39284\",\n        ", "ole.log(\"cd divider vertical\" + JSON.stringify(o", "en')\n      }\n      .vertical(this.vertical)\n    ", " if (eventData.data.vertical != null) {\n        ", "     .vertical(this.vertical)\n        .height(15", " verticalTrue: this.verticalTrue,\n            ve", "     .vertical(this.vertical)\n      .scrollable(", "xpect(objNew.$attrs.vertical).assertEqual('false", "ata: {\n            \"vertical\": \"abc123\",\n       ", " typeof (obj.$attrs.vertical))\n      expect(obj.", "     .vertical(this.vertical)\n      .itemSpace(t", "one : null,\n        verticalTrue: null,\n        ", "nsole.log('Swiper\u2018s vertical is ' + JSON.stringi", "le.log(\"cd divider1 vertical\" + JSON.stringify(o", "textcase {\n  @State vertical: boolean = true\n  @", "  expect(obj.$attrs.vertical).assertEqual('true'", "number = 0\n  @State vertical: boolean = true\n  @", "is.duration)\n      .vertical(this.vertical)\n    ", "  expect(obj.$attrs.vertical).assertEqual('false", "ber = 1000\n  @State vertical: boolean = false\n  ", "tringify(obj.$attrs.vertical))\n      console.log", ".key('tab2')\n      .vertical(false)\n      .scrol", "ration(1000)\n      .vertical(false)\n      .disab", "al = eventData.data.vertical;\n      }\n      if (", "his.color)\n        .vertical(this.vertical)\n    ", "ata: {\n            \"vertical\": true\n          }\n", "opNone,\n            verticalTrue: this.verticalT", "True: null,\n        verticalFalse: null\n    },\n\n", "lor.Green)\n        .vertical(true)\n        .stro", "xpect(objNew.$attrs.vertical).assertEqual('true'", ")\n        Divider().vertical(true).margin(20).he"], "files": ["divider.ets", "tabs.ets", "swiperProps.test.js", "videoProps.test.js", "dividerProps.test.js", "swiper.ets", "Tab.ets", "TabsJsunit.test.ets", "tabsProps.test.js", "TabJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "navigation.ets", "Swiper.ets", "DividerJsunit.test.ets", "Divider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsAttribute", "api_method_name": "scrollable", "api_method_all": "scrollable(value: boolean): TabsAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 114, "since": 7, "api_used": "\u662f", "lines": ["le = eventData.data.scrollable;\n      }\n      if (", "is.vertical)\n      .scrollable(this.scrollable)\n  ", "State.Off)\n        .scrollable(ScrollDirection.Ver", " console.info(\"this.scrollable:\" + this.scrollable", "ScrollCode\")\n      .scrollable(this.scrollable)\n  ", ".height(100)\n      .scrollable(ScrollDirection.Hor", "ght('350%')\n      }.scrollable(ScrollDirection.Ver", "   .scrollable(this.scrollable)\n      .scrollBar(t", "bleValue != null && scrollableValue.length != 0) {", "ollCode_002] change scrollable error: \" + err.mess", "xpect(objNew.$attrs.scrollable).assertEqual(false)", "umber = 20\n  @State scrollable: ScrollDirection = ", "  expect(obj.$attrs.scrollable).assertEqual(true);", "s null or empty \" + scrollableValue);\n      }\n    ", "ean = true\n  @State scrollable: boolean = true\n  @", "ata: {\n            \"scrollable\": \"false53\",\n      ", "ull) {\n        this.scrollable = eventData.data.sc", "  expect(obj.$attrs.scrollable).assertEqual(false)", "ue = eventData.data.scrollable;\n      console.info", "ntData));\n      var scrollableValue = eventData.da", "leValue);\n      if (scrollableValue != null && scr", "ata: {\n            \"scrollable\": \"false\",\n        ", "3\")\n          Text(\"scrollable4\")\n          Text(\"", "4\")\n          Text(\"scrollable1\")\n          Text(\"", "ATTRS_SCROLLABLE = 'scrollable'\nconst ATTRS_CLICKA", "ght('100%')\n      }.scrollable(ScrollDirection.Ver", "  this.scrollable = scrollableValue;\n        conso", "   .scrollable(this.scrollable)\n      .barMode(thi", " if (eventData.data.scrollable != null) {\n        ", "   }\n      }\n      .scrollable(ScrollDirection.Ver", "      console.info(\"scrollableValue is null or emp", "      console.info(\"scrollableValue:\" + scrollable", "30)\n          Text(\"scrollable1\")\n          Text(\"", "ata: {\n            \"scrollable\": \"ScrollDirection.", "= 0) {\n        this.scrollable = scrollableValue;\n", "scrollable:\" + this.scrollable);\n      } else {\n  ", "1\")\n          Text(\"scrollable2\")\n          Text(\"", "  expect(obj.$attrs.scrollable).assertEqual('Scrol", "2\")\n          Text(\"scrollable3\")\n          Text(\"", "scrollableValue:\" + scrollableValue);\n      if (sc", "rollCode {\n  @State scrollable: ScrollDirection = ", "ata: {\n            \"scrollable\": \"avc12321\",\n     "], "files": ["index.js", "tabs.ets", "scrollBar.ets", "tabContentProps.test.js", "Tab.ets", "TabsJsunit.test.ets", "Constants.ets", "ScrollJsunit.test.ets", "CheckboxGroupJsunit.test.ets", "canvas2.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "ScrollBar.ets", "scrollCode.ets", "canvas.ets", "Scroll.ets", "ScrollCodeJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsAttribute", "api_method_name": "barMode", "api_method_all": "barMode(value: BarMode): TabsAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["llable(true)\n      .barMode(BarMode.Fixed)\n    ", "  expect(obj.$attrs.barMode).assertEqual('BarMo", "ull) {\n        this.barMode = eventData.data.ba", " if (eventData.data.barMode != null) {\n        ", "lable(false)\n      .barMode(BarMode.Scrollable)", "de = eventData.data.barMode;\n      }\n      if (", ".scrollable)\n      .barMode(this.barMode)\n     ", "      .barMode(this.barMode)\n      .barWidth(70", "ean = true\n  @State barMode: BarMode = BarMode."], "files": ["TabJsunit.test.ets", "Tab.ets", "TabsJsunit.test.ets", "tabs.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsAttribute", "api_method_name": "barWidth", "api_method_all": "barWidth(value: Length): TabsAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["rMode.Fixed)\n      .barWidth(70)\n      .barHeigh", "Mode.Fixed\n  @State barWidth: number = 70\n  @Sta", "ull) {\n        this.barWidth = parseInt(eventDat", "  expect(obj.$attrs.barWidth).assertEqual('70.00", ".Scrollable)\n      .barWidth(70)\n      .barHeigh", "eInt(eventData.data.barWidth);\n      }\n      if ", "  expect(obj.$attrs.barWidth).assertEqual(70.000", "his.barMode)\n      .barWidth(70)\n      .barHeigh", " if (eventData.data.barWidth != null) {\n        "], "files": ["TabJsunit.test.ets", "Tab.ets", "TabsJsunit.test.ets", "tabs.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsAttribute", "api_method_name": "barHeight", "api_method_all": "barHeight(value: Length): TabsAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.barHeight).assertEqual('150.0", "barWidth(70)\n      .barHeight(150)\n      .animati", " if (eventData.data.barHeight != null) {\n        ", "  expect(obj.$attrs.barHeight).assertEqual(150.00", "umber = 70\n  @State barHeight: number = 150\n  @St", "ull) {\n        this.barHeight = parseInt(eventDat", "eInt(eventData.data.barHeight);\n      }\n      if "], "files": ["TabJsunit.test.ets", "Tab.ets", "TabsJsunit.test.ets", "tabs.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsAttribute", "api_method_name": "animationDuration", "api_method_all": "animationDuration(value: number): TabsAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["ull) {\n        this.animationDuration = parseInt(eventDat", "rHeight(150)\n      .animationDuration(400)\n      .onChang", "eInt(eventData.data.animationDuration);\n      }\n    }\n  }", "mber = 150\n  @State animationDuration: number = 400\n  @St", " if (eventData.data.animationDuration != null) {\n        ", "rHeight(150)\n      .animationDuration(400)\n      .key('ta"], "files": ["Tab.ets", "tabs.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TabsAttribute", "api_method_name": "onChangeevent", "api_method_all": "onChange(event: (index: number) => void): TabsAttribute;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TabsAttribute", "api_method_name": "onChangeevent", "api_method_all": "onChange(event: (index: number) => void): TabsAttribute;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}