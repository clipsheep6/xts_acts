{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\divider", "api": [{"api_class_name": "DividerInterface", "api_method_all": "interface DividerInterface {\n  \n  (): DividerAttribute;\n}", "api_method_name": "DividerInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DividerAttribute", "api_method_all": "declare class DividerAttribute extends CommonMethod<DividerAttribute> {\n  \n  vertical(value: boolean): DividerAttribute;\n\n  \n  color(value: ResourceColor): DividerAttribute;\n\n  \n  strokeWidth(value: number | string): DividerAttribute;\n\n  \n  lineCap(value: LineCapStyle): DividerAttribute;\n}", "api_method_name": "DividerAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DividerAttribute", "api_method_name": "vertical", "api_method_all": "vertical(value: boolean): DividerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 121, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"vertical\": \"false\",\n        ", "ull) {\n        this.vertical = eventData.data.ve", "'Divider')\n        .vertical(false)\n        .str", "ole.log('obj.$attrs.vertical' + typeof (obj.$att", "tringify(obj.$attrs.vertical));\n      console.lo", " .key('tab')\n      .vertical(true)\n      .scroll", "yle.Round)\n        .vertical(false)\n        .col", "ata: {\n            \"vertical\": \"39284\",\n        ", "ole.log(\"cd divider vertical\" + JSON.stringify(o", "en')\n      }\n      .vertical(this.vertical)\n    ", " if (eventData.data.vertical != null) {\n        ", "     .vertical(this.vertical)\n        .height(15", " verticalTrue: this.verticalTrue,\n            ve", "     .vertical(this.vertical)\n      .scrollable(", "xpect(objNew.$attrs.vertical).assertEqual('false", "ata: {\n            \"vertical\": \"abc123\",\n       ", " typeof (obj.$attrs.vertical))\n      expect(obj.", "     .vertical(this.vertical)\n      .itemSpace(t", "one : null,\n        verticalTrue: null,\n        ", "nsole.log('Swiper\u2018s vertical is ' + JSON.stringi", "le.log(\"cd divider1 vertical\" + JSON.stringify(o", "textcase {\n  @State vertical: boolean = true\n  @", "  expect(obj.$attrs.vertical).assertEqual('true'", "number = 0\n  @State vertical: boolean = true\n  @", "is.duration)\n      .vertical(this.vertical)\n    ", "  expect(obj.$attrs.vertical).assertEqual('false", "ber = 1000\n  @State vertical: boolean = false\n  ", "tringify(obj.$attrs.vertical))\n      console.log", ".key('tab2')\n      .vertical(false)\n      .scrol", "ration(1000)\n      .vertical(false)\n      .disab", "al = eventData.data.vertical;\n      }\n      if (", "his.color)\n        .vertical(this.vertical)\n    ", "ata: {\n            \"vertical\": true\n          }\n", "opNone,\n            verticalTrue: this.verticalT", "True: null,\n        verticalFalse: null\n    },\n\n", "lor.Green)\n        .vertical(true)\n        .stro", "xpect(objNew.$attrs.vertical).assertEqual('true'", ")\n        Divider().vertical(true).margin(20).he"], "files": ["divider.ets", "tabs.ets", "swiperProps.test.js", "videoProps.test.js", "dividerProps.test.js", "swiper.ets", "Tab.ets", "TabsJsunit.test.ets", "tabsProps.test.js", "TabJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "navigation.ets", "Swiper.ets", "DividerJsunit.test.ets", "Divider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DividerAttribute", "api_method_name": "color", "api_method_all": "color(value: ResourceColor): DividerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 276, "since": 7, "api_used": "\u662f", "lines": ["(obj.$attrs.divider.color).assertEqual(\"#FFFF", "        radius: 20, color: Color.Gray, offset", "bjNew.$attrs.shadow.color).assertEqual(\"#FF00", " 2.000000;\n  @State color: string = 0xFFFFFF;", " { radius: 'error', color: 'error', offsetX: ", "rt default function colorGradientJsunit() {\n ", " if (eventData.data.colorValues != null) {\n  ", "ata: {\n            \"colorValues\": JSON.string", "  console.info(\"get colorGradient state pages", "ing = 150;\n  @State colorValues: Array = [[0x", "ull) {\n        this.color = eventData.data.co", "bjNew.$attrs.shadow.color).assertEqual(\"#8000", "bjNew.$attrs.shadow.color).assertEqual(\"#FF80", "ull) {\n        this.colorValues = JSON.parse(", "\n        }.border({ color: Color.Black, width", "TRS_SHADOW_COLOR = 'color'\nconst ATTRS_SHADOW", "ection.Top,\n        colors: [[0xAEE1E1, 0.0],", "        color: this.color,\n          startMar", "t(obj.$attrs.shadow.color).assertEqual(\"#FF80", ".border({ width: 5, color: 0x317AF7, radius: ", "    radius: 60,\n    colors:[[0xAEE1E1, 0.0], ", "r({ strokeWidth: 2, color: 0xFFFFFF, startMar", "ata: {\n            \"color\": '0xFF0000'\n      ", "(obj.$attrs.divider.color).assertEqual(\"#FF00", " console.info(\"push colorGradient page result", "radius: 0x7FFFFFFF, color: 0x7FFFFFFF, offset", "      console.info(\"colorGradient beforeEach ", "        uri: 'pages/colorGradient',\n      }\n ", "Direction.Left,\n    colors: [[0xAEE1E1, 0.0],", "s));\n        if (!(\"colorGradient\" == pages.n", " if (eventData.data.color != null) {\n        ", ",\n    end: 359,\n    colors: [[0xAEE1E1, 0.0],", "      console.info(\"colorGradient after each ", "    Text(`text font color ${this.fontColor}`)", "   Text('background color').fontSize(9).width", "arse(eventData.data.colorValues);\n      }\n   ", "ject= { radius: 10, color: Color.Gray, offset", "or = eventData.data.color;\n      }\n      if (", "console.error(\"push colorGradient page error:", "radius: 0x80000000, color: 0x80000000, offset", "bjNew.$attrs.shadow.color).assertEqual(\"#7FFF", "ata: {\n            \"color\": \"#FF0000FF\"\n     ", "fontColor)\n        .colorBlend(Color.Green)\n ", "right: 20, size: 2, color: Color.Blue })\n    ", "  if(eventData.data.colorValues != null) {\n  ", "= \"200px\";\n  @State color: Array = [[0x080808", "okeWidth,\n          color: this.color,\n      "], "files": ["ohosPrompt.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "Qrcode.ets", "Span.ets", "Progress.ets", "toolbarItemProps.test.js", "marquee.ets", "basicabilityapi.test.js", "DividerJsunit.test.ets", "Divider.ets", "border.ets", "systemPrompt.ets", "List.test.ets", "scrollCode.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "gauge.ets", "TextJsunit.test.ets", "swiper.ets", "Blank.ets", "text.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "labelProps.test.js", "image.ets", "ListJsunit.test.ets", "loadingProgress.ets", "stepperProps.test.js", "ratingProps.test.js", "ColorGradientJsunit.test.ets", "PatternLock.ets", "ShapeJsunit.test.ets", "badge.ets", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "pickerProps.test.js", "selectProps.test.js", "span.ets", "NavigatorCode.ets", "BackgroundAndSizeSettingJsunit.test.ets", "mouseEvent.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "divider.ets", "Constants.ets", "progress.ets", "sliderProps.test.js", "WebPage.ets", "inputProps.test.js", "index.js", "progressProps.test.js", "Badge.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DividerAttribute", "api_method_name": "strokeWidth", "api_method_all": "strokeWidth(value: number | string): DividerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 227, "since": 7, "api_used": "\u662f", "lines": ["(obj.$attrs.divider.strokeWidth).assertEqual(\"3.00v", "ole.log(\"cd divider strokeWidth\" + JSON.stringify(o", "stroke(Color.Black).strokeWidth(4)\n      .strokeDas", "ring = 50;\n  @State strokeWidthValue: string = 20;\n", "ical(true)\n        .strokeWidth(10)\n        .height", "ata: {\n            \"strokeWidthValue\": \"30\",\n      ", "}).stroke(0xEE8443).strokeWidth(10).strokeDashArray", "ata: {\n            \"strokeWidth\": \"3.000000vp\"\n    ", "strokeWidth(`${this.strokeWidthValue}`)\n        .wi", "ata: {\n            \"strokeWidthValue\": \"-30\",\n     ", "th = eventData.data.strokeWidth;\n      }\n      if (", "(obj.$attrs.divider.strokeWidth).assertEqual(\"2.00v", "})\n      .divider({ strokeWidth: 2, color: 0xFFFFFF", "  .stroke(0xEE8443).strokeWidth(10).strokeDashArray", "xpect(objNew.$attrs.strokeWidth).assertEqual('12111", " Color.Red\n  @State strokeWidth: number = 7\n  @Stat", "stroke(Color.Black).strokeWidth(2)\n\n      Text('bor", "leValue}`)\n        .strokeWidth(`${this.strokeWidth", "7).stroke(0xEE8443).strokeWidth(10).fillOpacity(1)\n", "  expect(obj.$attrs.strokeWidth).assertEqual('20.00", "  strokeWidth: this.strokeWidth,\n          color: t", "umber = 1;\n  @State strokeWidth: number = 1;\n  @Sta", "stroke(Color.Black).strokeWidth(3).key('path')\n\n   ", "cal(false)\n        .strokeWidth(5)\n        .color(t", "7).stroke(0xEE8443).strokeWidth(10).strokeLineJoin(", "xpect(objNew.$attrs.strokeWidth).assertEqual('-30.0", "  .strokeWidth(this.strokeWidth)\n      .antiAlias(t", "Black).key('path1').strokeWidth(3)\n\n      Text('Str", "ue = eventData.data.strokeWidthValue;\n      }\n     ", "tyle.Butt)\n        .strokeWidth(this.strokeWidth)\n ", "}).stroke(0xEE8443).strokeWidth(10).strokeOpacity(0", "                    strokeWidth: 5,\n               ", "ata: {\n            \"strokeWidthValue\": \"121111111\"\n", "tringify(obj.$attrs.strokeWidth));\n      console.lo", "  .strokeWidth(this.strokeWidth)\n        .color(thi", "  expect(obj.$attrs.strokeWidth).assertEqual(\"7.000", "lor.Green)\n        .strokeWidth(10)\n        .height", "n = false;\n  @State strokeWidth: number = 2.000000;", "ull) {\n        this.strokeWidthValue = eventData.da", "\n        .divider({ strokeWidth: 2, color: 0xFFFFFF", "divider({\n          strokeWidth: this.strokeWidth,\n", " if (eventData.data.strokeWidth != null) {\n        ", " if (eventData.data.strokeWidthValue != null) {\n   ", "ull) {\n        this.strokeWidth = eventData.data.st", "rokeOpacity)\n      .strokeWidth(this.strokeWidth)\n ", "xpect(objNew.$attrs.strokeWidth).assertEqual('30.00"], "files": ["Shape.ets", "pathProps.test.js", "circleProps.test.js", "lineProps.test.js", "divider.ets", "gauge.ets", "polylineProps.test.js", "Path.ets", "ellipseProps.test.js", "polygonProps.test.js", "list.ets", "List.ets", "dragEvent2.ets", "index.js", "enumsLineCapStyle.ets", "GaugeJsunit.test.ets", "DividerJsunit.test.ets", "Divider.ets", "edgeEffect.ets", "dragEvent.ets", "tspanProps.test.js", "svgProps.test.js", "shape.ets", "svgTextProps.test.js", "textPathProps.test.js", "path.ets", "ListJsunit.test.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DividerAttribute", "api_method_name": "lineCap", "api_method_all": "lineCap(value: LineCapStyle): DividerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 49, "since": 0, "api_used": "\u662f", "lines": ["tringify(obj.$attrs.lineCap));\n      expect(obj", "000ff';\n        ctx.lineCap = 'round';\n        ", "\n              this.lineCap();\n              th", "number = 7\n  @State lineCap: LineCapStyle = Lin", "Path();\n        ctx.lineCap = 'round';\n        ", "et inspector stroke-lineCap value is: \" + JSON.", "  expect(obj.$attrs.lineCap == LineCapStyle.Rou", ");\n    this.context.lineCap = 'round';\n    this", "25, 75, 55);\n  }\n\n  lineCap() {\n    this.contex", "le.log(\"cd divider1 lineCap\" + JSON.stringify(o", "rops] get inspector lineCap value is: \" + JSON.", "  expect(obj.$attrs.lineCap == LineCapStyle.Squ", "ole.log(\"cd divider lineCap\" + JSON.stringify(o", "his.color)\n        .lineCap(LineCapStyle.Round)", " Divider()\n        .lineCap(LineCapStyle.Butt)\n", " Divider()\n        .lineCap(LineCapStyle.Square", "le.log(\"cd divider2 lineCap\" + JSON.stringify(o", "h = 10;\n        ctx.lineCap = 'round';\n        ", " Divider()\n        .lineCap(LineCapStyle.Round)"], "files": ["lineProps.test.js", "divider.ets", "pathProps.test.js", "rectProps.test.js", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ellipseProps.test.js", "index.js", "canvas.ets", "DividerJsunit.test.ets", "Divider.ets"], "is_white": " ", "desc": " "}]}