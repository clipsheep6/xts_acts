{"subsystem_ch": "Misc\u8f6f\u4ef6\u670d\u52a1\u5b50\u7cfb\u7edf-\u8f93\u5165\u6cd5", "subsystem_en": "miscservices", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.request", "api": [{"api_class_name": "request", "api_method_all": "declare namespace request {\r\n\r\n  \r\n  const NETWORK_MOBILE: number;\r\n\r\n  \r\n  const NETWORK_WIFI: number;\r\n\r\n  \r\n  const ERROR_CANNOT_RESUME: number;\r\n\r\n  \r\n  const ERROR_DEVICE_NOT_FOUND: number;\r\n\r\n  \r\n  const ERROR_FILE_ALREADY_EXISTS: number;\r\n\r\n  \r\n  const ERROR_FILE_ERROR: number;\r\n\r\n  \r\n  const ERROR_HTTP_DATA_ERROR: number;\r\n\r\n  \r\n  const ERROR_INSUFFICIENT_SPACE: number;\r\n\r\n  \r\n  const ERROR_TOO_MANY_REDIRECTS: number;\r\n\r\n  \r\n  const ERROR_UNHANDLED_HTTP_CODE: number;\r\n\r\n  \r\n  const ERROR_UNKNOWN: number;\r\n\r\n  \r\n  const PAUSED_QUEUED_FOR_WIFI: number;\r\n\r\n  \r\n  const PAUSED_UNKNOWN: number;\r\n\r\n  \r\n  const PAUSED_WAITING_FOR_NETWORK: number;\r\n\r\n  \r\n  const PAUSED_WAITING_TO_RETRY: number;\r\n\r\n  \r\n  const SESSION_FAILED: number;\r\n\r\n  \r\n  const SESSION_PAUSED: number;\r\n\r\n  \r\n  const SESSION_PENDING: number;\r\n\r\n  \r\n  const SESSION_RUNNING: number;\r\n\r\n  \r\n  const SESSION_SUCCESSFUL: number;\r\n\r\n  \r\n  function download(config: DownloadConfig, callback: AsyncCallback<DownloadTask>): void;\r\n\r\n  \r\n  function download(config: DownloadConfig): Promise<DownloadTask>;\r\n\r\n  \r\n  function upload(config: UploadConfig, callback: AsyncCallback<UploadTask>): void;\r\n\r\n  \r\n  function upload(config: UploadConfig): Promise<UploadTask>;\r\n\r\n  \r\n  interface DownloadConfig {\r\n    \r\n    url: string;\r\n    \r\n    header?: Object;\r\n    \r\n    enableMetered?: boolean;\r\n    \r\n    enableRoaming?: boolean;\r\n    \r\n    description?: string;\r\n    \r\n    networkType?: number;\r\n    \r\n    filePath?: string;\r\n    \r\n    title?: string;\r\n  }\r\n\r\n  \r\n  interface DownloadInfo {\r\n    \r\n    description: string;\r\n    \t\r\n    downloadedBytes: number;\r\n    \r\n    downloadId: number;\r\n    \r\n    failedReason: number;\r\n    \r\n    fileName: string;\r\n    \r\n    filePath: string;\r\n    \r\n    pausedReason: number;\r\n    \r\n    status: number;\r\n    \r\n    targetURI: string;\r\n    \r\n    downloadTitle: string;\r\n    \r\n    downloadTotalBytes: number;\r\n  }\r\n\r\n  interface DownloadTask {\r\n    \r\n    on(type: 'progress', callback: (receivedSize: number, totalSize: number) => void): void;\r\n\r\n    \r\n    off(type: 'progress', callback?: (receivedSize: number, totalSize: number) => void): void;\r\n\r\n    \r\n    on(type: 'complete' | 'pause' | 'remove', callback: () => void): void;\r\n\r\n    \r\n    off(type: 'complete' | 'pause' | 'remove', callback?: () => void): void;\r\n\r\n    \r\n    on(type: 'fail', callback: (err: number) => void): void;\r\n\r\n    \r\n    off(type: 'fail', callback?: (err: number) => void): void;\r\n\r\n    \r\n    remove(callback: AsyncCallback<boolean>): void;\r\n\r\n    \r\n    remove(): Promise<boolean>;\r\n\r\n    \r\n    pause(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    pause(): Promise<void>;\r\n\r\n    \r\n    resume(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    resume(): Promise<void>;\r\n\r\n    \r\n    query(callback: AsyncCallback<DownloadInfo>): void;\r\n\r\n    \r\n    query(): Promise<DownloadInfo>;\r\n\r\n    \r\n    queryMimeType(callback: AsyncCallback<string>): void;\r\n\r\n    \r\n    queryMimeType(): Promise<string>;\r\n  }\r\n\r\n  \r\n  interface File {\r\n    \r\n    filename: string;\r\n    \r\n    name: string;\r\n    \r\n    uri: string;\r\n    \r\n    type: string;\r\n  }\r\n\r\n  \r\n  interface RequestData {\r\n    \r\n    name: string;\r\n    \r\n    value: string;\r\n  }\r\n\r\n  \r\n  interface UploadConfig {\r\n    \r\n    url: string;\r\n    \r\n    header: Object;\r\n    \r\n    method: string;\r\n    \r\n    files: Array<File>;\r\n    \r\n    data: Array<RequestData>;\r\n  }\r\n\r\n  interface UploadTask {\r\n    \r\n    on(type: 'progress', callback: (uploadedSize: number, totalSize: number) => void): void;\r\n\r\n    \r\n    off(type: 'progress', callback?: (uploadedSize: number, totalSize: number) => void): void;\r\n\r\n    \r\n    on(type: 'headerReceive', callback: (header: object) => void): void;\r\n\r\n    \r\n    off(type: 'headerReceive', callback?: (header: object) => void): void;\r\n\r\n    \r\n    remove(callback: AsyncCallback<boolean>): void;\r\n\r\n    \r\n    remove(): Promise<boolean>;\r\n  }\r\n}", "api_method_name": "request", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 190, "since": 0, "api_used": "\u662f", "lines": ["  });\n\n    \n    it('requestDownload_test_005', ", "/index.ets\";\nimport request from '@ohos.request", "t.test.ets';\nimport requestJsunit from './Reque", "  });\n\n    \n    it('requestDownload_test_012', ", ".log(\"************* request Test start*********", "       console.log(\"requestDownload_test_012 in", "request from '@ohos.request';\n\nexport default f", "**\");\n\n    \n    it('requestDownload_test_001', ", "       console.log(\"requestDownload_test_004 fa", "DownloadJsunit();\n  requestJsunit();\n  screenLo", "rt default function requestDownloadJsunit() {\n ", "       console.log(\"requestDownload_test_001 fa", "t.test.ets';\nimport requestDownloadJsunit from ", "       console.log(\"requestDownload_test_008 fa", "       console.log(\"requestDownload_test_003 fa", "  });\n\n    \n    it('requestDownload_test_004', ", "  });\n\n    \n    it('requestDownload_test_002', ", "  });\n\n    \n    it('requestDownload_test_008', ", "  });\n\n    \n    it('requestDownload_test_007', ", "      try {\n        request.download(downloadCo", "nit() {\n  describe('requestDownloadTest', funct", "       console.log(\"requestDownload_test_010 fa", "       console.log(\"requestDownload_test_002 fa", "tRequestJsunit();\n  requestDownloadJsunit();\n  ", "       console.log(\"requestDownload_test_005 fa", "       console.log(\"requestDownload_test_006 fa", "  });\n\n    \n    it('requestDownload_test_003', ", "       console.log(\"requestDownload_test_011 fa", "      let promise = request.download(downloadCo", "       console.log(\"requestDownload_test_009 fa", "  });\n\n    \n    it('requestDownload_test_006', ", "  });\n\n    \n    it('requestDownload_test_011', ", "  });\n\n    \n    it('requestDownload_test_010', ", "       console.log(\"requestDownload_test_007 fa", "      try {\n        request.download({\n        ", "  });\n\n    \n    it('requestDownload_test_009', ", "  });\n\n    \n    it('requestDownload_test_013', "], "files": ["RequestJsunit.test.ets", "Publicfunction.js", "InputRequestJsunit.test.ets", "List.test.ets", "RequestDownloadTaskJsunit.test.ets", "UploadCallbackXTSJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "download", "api_method_all": "function download(config: DownloadConfig, callback: AsyncCallback<DownloadTask>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 124, "since": 6, "api_used": "\u662f", "lines": ["      url: \"www.testdownload.com\",\n        enableMetered: false,\n   ", "\"info\").assertEqual(downloadInfo.description);\n                expec", "ct(100).assertEqual(downloadInfo.downloadedBytes);\n                e", "tEqual(downloadInfo.downloadId);\n                expect(101).assertE", "ct(101).assertEqual(downloadInfo.failedReason);\n                expe", ":\" + JSON.stringify(downloadTask))\n          downloadTask.off('progr", "{\n              if (downloadInfo !== undefined) {\n                ex", "oadTask))\n          downloadTask.on('progress', (receivedSize, total", "       console.log(\"downloadTask off_progress:\" + JSON.stringify(tot", ":\" + JSON.stringify(downloadTask))\n          downloadTask.on('comple", "oadTask))\n          downloadTask.off('progress', (receivedSize, tota", "ined) {\n            downloadTask.query((err, downloadInfo) => {\n    ", "ct(102).assertEqual(downloadInfo.pausedReason);\n                expe", "t promise = request.download(downloadConfig);\n        expect(promise", "ad(downloadConfig, (downloadTask) => {\n          console.log(\"downlo", "       console.log(\"downloadTask off_progress:\" + JSON.stringify(rec", "            expect(\"download.txt\").assertEqual(downloadInfo.fileName", "pect(1).assertEqual(downloadInfo.downloadId);\n                expect", ":\" + JSON.stringify(downloadTask))\n          downloadTask.on('progre", "y {\n        request.download(downloadConfig, (downloadTask) => {\n   ", " test\").assertEqual(downloadInfo.downloadTitle);\n                exp", "y {\n        request.download({\n          url: \"www.testdownload.com\"", "oadTask.query((err, downloadInfo) => {\n              if (downloadInf", "ct(200).assertEqual(downloadInfo.status);\n                expect(\"do", "d url\").assertEqual(downloadInfo.targetURI);\n                expect(", "       console.log(\"downloadTask on_progress:\" + JSON.stringify(rece", "       console.log(\"downloadTask on_progress:\" + JSON.stringify(tota", "tEqual(downloadInfo.downloadTotalBytes);\n              }\n           ", "            expect(\"download url\").assertEqual(downloadInfo.targetUR", "nction () {\n    let downloadConfig = {\n      url: \"www.baidu.com\"\n  ", "d.txt\").assertEqual(downloadInfo.fileName);\n                expect(\"", "t(1000).assertEqual(downloadInfo.downloadTotalBytes);\n              ", " = request.download(downloadConfig);\n        expect(promise).assertE", "tEqual(downloadInfo.downloadTitle);\n                expect(1000).ass", " description: \"test download\",\n        title: \"\"\n      };\n      try ", "\"C://\").assertEqual(downloadInfo.filePath);\n                expect(1", " => {\n          if (downloadTask !== undefined) {\n            downlo", "       console.log(\"downloadConfig result:\" + JSON.stringify(downloa", "            expect(\"download test\").assertEqual(downloadInfo.downloa", "   request.download(downloadConfig, (downloadTask) => {\n          co", "tEqual(downloadInfo.downloadedBytes);\n                expect(1).asse", "=====>`);\n      let downloadConfig = {\n        url: \"www.testdownloa"], "files": ["RequestDownloadTaskJsunit.test.ets", "InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "download", "api_method_all": "function download(config: DownloadConfig): Promise<DownloadTask>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": ["      url: \"www.testdownload.com\"\n        }).then(downloadTask => {\n", "om\"\n        }).then(downloadTask => {\n          if (downloadTask !=="], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "upload", "api_method_all": "function upload(config: UploadConfig, callback: AsyncCallback<UploadTask>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 46, "since": 6, "api_used": "\u662f", "lines": ["\u516c\u5171\u65b9\u6cd5\nfunction publicupload(UploadConfig){\n    console.log(`Testupd", "loadConfig(), (err, uploadTask) => {\n          if (err) {\n        ", "onsole.log(\"request_upload_0006 on data2 =\" + data2);\n            ", "onsole.log(\"request_upload_0006 remove =\" + data);\n            })\n", "load(uploadConfig, (uploadTask) => {\n          console.log(\"downlo", "e publicoffprogress uploadedSize =\" + data1);\n            console.", "a);\n                uploadTask = data;\n                expect(true", "list of files to be uploaded. Please use multipart/form-data to su", "onsole.log(\"request_upload_0006 progress uploadTask =\" + JSON.stri", "onsole.log(\"request_upload_0006 getUploadConfig() \" + getUploadCon", "sole.error(\"request_upload_0006 error: \" + err);\n      }\n      con", "(\"Testupdate before upload\");\n            await pubfun.publicuploa", "));\n        request.upload(getUploadConfig(), (err, uploadTask) =>", "update going upload uploadTask = \" + data);\n                upload", "onsole.log(\"request_upload_0006 off data1 =\" + data1);\n           ", "pload_0006 progress uploadTask =\" + JSON.stringify(uploadTask));\n ", "g(\"Testupdate going upload uploadTask = \" + data);\n               ", "ta\n    }\n    return uploadConfig\n  }\n}\n", ") {\n        request.upload(UploadConfig, (err, data) => {\n        ", "= {\n                uploadedSize : data1,\n                totalSiz", "ext'\n    };\n    let uploadConfig = {\n      url: \"www.baidu.com\",\n ", "un.publiconprogress(uploadTask, typeProgress);\n            expect(", "Task));\n            uploadTask.on('progress', function (data1, dat", "n UploadConfig\n}\n\n//upload\u516c\u5171\u65b9\u6cd5\nfunction publicupload(UploadConfig)", "eFail = 'fail';\nlet uploadTask;\nlet file7url = 'internal://cache/t", "(\"Testupdate before upload UploadConfig = \" + JSON.stringify(Uploa", "estupdate before getuploadconfig\");\n            let UploadConfig =", "ait pubfun.publicon(uploadTask, typeFail)\n            await pubfun", " })\n}\n\nexport{publicupload,publicon,publicoff,publicremove,publico", ":\" + JSON.stringify(uploadTask))\n          expect(true).assertTrue", "     })\n            uploadTask.off('progress', function (data1, da", "   \n    it('request_upload_0006', 0, async function (done) {\n     ", "=\" + JSON.stringify(uploadTask));\n            uploadTask.on('progr", "     })\n            uploadTask.remove((err, data) => {\n           ", "p://192.168.112.124/upload_test/',\n      header: headerHttp,\n     ", "e included with the upload request.\n        method: 'POST', // Req", "onsole.log(\"request_upload_0006 on data1 =\" + data1);\n            ", "------------request_upload_0006 end-----------------------\");\n    ", "onsole.log(\"request_upload_0006 off data2 =\" + data2);\n           ", "p://192.168.112.124/upload_test/',// Resource address.\n        hea", "y {\n        request.upload(uploadConfig, (uploadTask) => {\n       ", "te publiconprogress uploadedSize =\" + data1);\n            console.", "http'\n    }\n    let uploadConfig = {\n      url: 'http://192.168.11", "     request.upload(uploadConfig, (uploadTask) => {\n          cons"], "files": ["RequestDownloadTaskJsunit.test.ets", "Publicfunction.js", "UploadCallbackXTSJsunit.test.js", "RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "upload", "api_method_all": "function upload(config: UploadConfig): Promise<UploadTask>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 6, "api_used": "\u662f", "lines": ["pubfun.publicremove(uploadTask).then((data) => {\n                c", "it pubfun.publicoff(uploadTask, typeFail).then((data) => {\n       ", "n.publicoffprogress(uploadTask, typeProgress).then((data) => {\n   ", " await pubfun.publicupload(UploadConfig).then((data) => {\n        ", "ait pubfun.publicon(uploadTask, typeFail).then((data) => {\n       "], "files": ["UploadCallbackXTSJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "NETWORK_MOBILE", "api_method_all": "const NETWORK_MOBILE: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 6, "api_used": "\u662f", "lines": ["t_test_0001 request.NETWORK_MOBILE:\" + request.NETWORK", "_MOBILE:\" + request.NETWORK_MOBILE);\n        expect(re", "y {\n        request.NETWORK_MOBILE = 1;\n        consol", "     expect(request.NETWORK_MOBILE).assertEqual(1);\n  "], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "NETWORK_WIFI", "api_method_all": "const NETWORK_WIFI: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 6, "api_used": "\u662f", "lines": ["1);\n        request.NETWORK_WIFI = 2;\n        consol", "     expect(request.NETWORK_WIFI).assertEqual(2);\n  ", "t_test_0001 request.NETWORK_WIFI:\" + request.NETWORK", "RK_WIFI:\" + request.NETWORK_WIFI);\n        expect(re"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "ERROR_CANNOT_RESUME", "api_method_all": "const ERROR_CANNOT_RESUME: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["_RESUME:\" + request.ERROR_CANNOT_RESUME);\n        expect(re", "t_test_0001 request.ERROR_CANNOT_RESUME:\" + request.ERROR_C", "     expect(request.ERROR_CANNOT_RESUME).assertEqual(3);\n  ", "2);\n        request.ERROR_CANNOT_RESUME = 3;\n        consol"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "ERROR_DEVICE_NOT_FOUND", "api_method_all": "const ERROR_DEVICE_NOT_FOUND: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["t_test_0001 request.ERROR_DEVICE_NOT_FOUND:\" + request.ERROR_D", "     expect(request.ERROR_DEVICE_NOT_FOUND).assertEqual(4);\n  ", "T_FOUND:\" + request.ERROR_DEVICE_NOT_FOUND);\n        expect(re", "3);\n        request.ERROR_DEVICE_NOT_FOUND = 4;\n        consol"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "ERROR_FILE_ALREADY_EXISTS", "api_method_all": "const ERROR_FILE_ALREADY_EXISTS: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["y {\n        request.ERROR_FILE_ALREADY_EXISTS = 5;\n        consol", "t_test_0002 request.ERROR_FILE_ALREADY_EXISTS:\" + request.ERROR_F", "_EXISTS:\" + request.ERROR_FILE_ALREADY_EXISTS);\n        expect(re", "     expect(request.ERROR_FILE_ALREADY_EXISTS).assertEqual(5);\n  "], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "ERROR_FILE_ERROR", "api_method_all": "const ERROR_FILE_ERROR: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["     expect(request.ERROR_FILE_ERROR).assertEqual(6);\n  ", "E_ERROR:\" + request.ERROR_FILE_ERROR);\n        expect(re", "t_test_0002 request.ERROR_FILE_ERROR:\" + request.ERROR_F", "5);\n        request.ERROR_FILE_ERROR = 6;\n        consol"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "ERROR_HTTP_DATA_ERROR", "api_method_all": "const ERROR_HTTP_DATA_ERROR: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["t_test_0002 request.ERROR_HTTP_DATA_ERROR:\" + request.ERROR_H", "6);\n        request.ERROR_HTTP_DATA_ERROR = 7;\n        consol", "     expect(request.ERROR_HTTP_DATA_ERROR).assertEqual(7);\n  ", "A_ERROR:\" + request.ERROR_HTTP_DATA_ERROR);\n        expect(re"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "ERROR_INSUFFICIENT_SPACE", "api_method_all": "const ERROR_INSUFFICIENT_SPACE: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["     expect(request.ERROR_INSUFFICIENT_SPACE).assertEqual(8);\n  ", "7);\n        request.ERROR_INSUFFICIENT_SPACE = 8;\n        consol", "T_SPACE:\" + request.ERROR_INSUFFICIENT_SPACE);\n        expect(re", "t_test_0002 request.ERROR_INSUFFICIENT_SPACE:\" + request.ERROR_I"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "ERROR_TOO_MANY_REDIRECTS", "api_method_all": "const ERROR_TOO_MANY_REDIRECTS: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["     expect(request.ERROR_TOO_MANY_REDIRECTS).assertEqual(9);\n  ", "DIRECTS:\" + request.ERROR_TOO_MANY_REDIRECTS);\n        expect(re", "t_test_0003 request.ERROR_TOO_MANY_REDIRECTS:\" + request.ERROR_T", "y {\n        request.ERROR_TOO_MANY_REDIRECTS = 9;\n        consol"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "ERROR_UNHANDLED_HTTP_CODE", "api_method_all": "const ERROR_UNHANDLED_HTTP_CODE: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["9);\n        request.ERROR_UNHANDLED_HTTP_CODE = 10;\n        conso", "     expect(request.ERROR_UNHANDLED_HTTP_CODE).assertEqual(10);\n ", "t_test_0003 request.ERROR_UNHANDLED_HTTP_CODE:\" + request.ERROR_U", "TP_CODE:\" + request.ERROR_UNHANDLED_HTTP_CODE);\n        expect(re"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "ERROR_UNKNOWN", "api_method_all": "const ERROR_UNKNOWN: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["t_test_0003 request.ERROR_UNKNOWN:\" + request.ERROR_U", "0);\n        request.ERROR_UNKNOWN = 11;\n        conso", "     expect(request.ERROR_UNKNOWN).assertEqual(11);\n ", "UNKNOWN:\" + request.ERROR_UNKNOWN);\n        expect(re"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "PAUSED_QUEUED_FOR_WIFI", "api_method_all": "const PAUSED_QUEUED_FOR_WIFI: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["t_test_0003 request.PAUSED_QUEUED_FOR_WIFI:\" + request.PAUSED_", "1);\n        request.PAUSED_QUEUED_FOR_WIFI = 12;\n        conso", "OR_WIFI:\" + request.PAUSED_QUEUED_FOR_WIFI);\n        expect(re", "     expect(request.PAUSED_QUEUED_FOR_WIFI).assertEqual(12);\n "], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "PAUSED_UNKNOWN", "api_method_all": "const PAUSED_UNKNOWN: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["t_test_0004 request.PAUSED_UNKNOWN:\" + request.PAUSED_", "y {\n        request.PAUSED_UNKNOWN = 13;\n        conso", "UNKNOWN:\" + request.PAUSED_UNKNOWN);\n        expect(re", "     expect(request.PAUSED_UNKNOWN).assertEqual(13);\n "], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "PAUSED_WAITING_FOR_NETWORK", "api_method_all": "const PAUSED_WAITING_FOR_NETWORK: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["3);\n        request.PAUSED_WAITING_FOR_NETWORK = 14;\n        conso", "     expect(request.PAUSED_WAITING_FOR_NETWORK).assertEqual(14);\n ", "NETWORK:\" + request.PAUSED_WAITING_FOR_NETWORK);\n        expect(re", "t_test_0004 request.PAUSED_WAITING_FOR_NETWORK:\" + request.PAUSED_"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "PAUSED_WAITING_TO_RETRY", "api_method_all": "const PAUSED_WAITING_TO_RETRY: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["t_test_0004 request.PAUSED_WAITING_TO_RETRY:\" + request.PAUSED_", "     expect(request.PAUSED_WAITING_TO_RETRY).assertEqual(15);\n ", "4);\n        request.PAUSED_WAITING_TO_RETRY = 15;\n        conso", "O_RETRY:\" + request.PAUSED_WAITING_TO_RETRY);\n        expect(re"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "SESSION_FAILED", "api_method_all": "const SESSION_FAILED: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["t_test_0004 request.SESSION_FAILED:\" + request.SESSION", "5);\n        request.SESSION_FAILED = 16;\n        conso", "_FAILED:\" + request.SESSION_FAILED);\n        expect(re", "     expect(request.SESSION_FAILED).assertEqual(16);\n "], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "SESSION_PAUSED", "api_method_all": "const SESSION_PAUSED: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["y {\n        request.SESSION_PAUSED = 17;\n        conso", "_PAUSED:\" + request.SESSION_PAUSED);\n        expect(re", "     expect(request.SESSION_PAUSED).assertEqual(17);\n ", "t_test_0004 request.SESSION_PAUSED:\" + request.SESSION"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "SESSION_PENDING", "api_method_all": "const SESSION_PENDING: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["PENDING:\" + request.SESSION_PENDING);\n        expect(re", "     expect(request.SESSION_PENDING).assertEqual(18);\n ", "t_test_0004 request.SESSION_PENDING:\" + request.SESSION", "7);\n        request.SESSION_PENDING = 18;\n        conso"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "SESSION_RUNNING", "api_method_all": "const SESSION_RUNNING: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["t_test_0004 request.SESSION_RUNNING:\" + request.SESSION", "RUNNING:\" + request.SESSION_RUNNING);\n        expect(re", "     expect(request.SESSION_RUNNING).assertEqual(19);\n ", "8);\n        request.SESSION_RUNNING = 19;\n        conso"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "request", "api_method_name": "SESSION_SUCCESSFUL", "api_method_all": "const SESSION_SUCCESSFUL: number", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["t_test_0004 request.SESSION_SUCCESSFUL:\" + request.SESSION", "     expect(request.SESSION_SUCCESSFUL).assertEqual(20);\n ", "9);\n        request.SESSION_SUCCESSFUL = 20;\n        conso", "CESSFUL:\" + request.SESSION_SUCCESSFUL);\n        expect(re"], "files": ["RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadConfig", "api_method_all": "interface DownloadConfig {\r\n    \r\n    url: string;\r\n    \r\n    header?: Object;\r\n    \r\n    enableMetered?: boolean;\r\n    \r\n    enableRoaming?: boolean;\r\n    \r\n    description?: string;\r\n    \r\n    networkType?: number;\r\n    \r\n    filePath?: string;\r\n    \r\n    title?: string;\r\n  }", "api_method_name": "DownloadConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": ["ing = \"inputRequest_DownloadConfig_Test_001\";\n      co", "   it('inputRequest_DownloadConfig_Test_001', 0, async"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadConfig", "api_method_name": "url", "api_method_all": "url: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 6, "api_used": "\u662f", "lines": ["   expect(\"download url\").assertEqual(downl", "dConfig = {\n        url: \"www.testdownload.", "etUploadConfig(file7url)\n            consol", "oadConfig = {\n      url: \"www.baidu.com\",\n ", "oadConfig = {\n      url: 'http://192.168.11", "dConfig = {\n        url: 'http://192.168.11", "ploadTask;\nlet file7url = 'internal://cache", "oadConfig = {\n      url: \"www.baidu.com\"\n  ", "ownload({\n          url: \"www.testdownload.", "getUploadConfig(fileurl){\n    let File = {\n"], "files": ["RequestJsunit.test.ets", "Publicfunction.js", "InputRequestJsunit.test.ets", "RequestDownloadTaskJsunit.test.ets", "UploadCallbackXTSJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadConfig", "api_method_name": "header", "api_method_all": "header?: Object", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["[0] = file;\n    let headerHttp = {\n      heade", "[0] = File;\n    let headerHttp = { headers: 'h", "eaderHttp = {\n      headers: 'http'\n    }\n    ", "w.baidu.com\",\n      header: 'HTTP',\n      meth", " let headerHttp = { headers: 'http' }\n    let ", "ce address.\n        header: headerHttp, // Add", "pload_test/',\n      header: headerHttp,\n      ", "ds an HTTP or HTTPS header to be included with", "st/',\n      header: headerHttp,\n      method: ", "ypeHeaderReceive = 'headerReceive';\nvar typeFa", "ss.\n        header: headerHttp, // Adds an HTT", "name in the request header.\n        name: 'tes"], "files": ["RequestDownloadTaskJsunit.test.ets", "Publicfunction.js", "UploadCallbackXTSJsunit.test.js", "RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadConfig", "api_method_name": "enableMetered", "api_method_all": "enableMetered?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["nload.com\",\n        enableMetered: false,\n        ena"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadConfig", "api_method_name": "enableRoaming", "api_method_all": "enableRoaming?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["red: false,\n        enableRoaming: false,\n        des"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadConfig", "api_method_name": "description", "api_method_all": "description?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": ["ing: false,\n        description: \"test download\",\n ", "tEqual(downloadInfo.description);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadConfig", "api_method_name": "networkType", "api_method_all": "networkType?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadConfig", "api_method_name": "filePath", "api_method_all": "filePath?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.filePath);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadConfig", "api_method_name": "title", "api_method_all": "title?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 6, "api_used": "\u662f", "lines": ["it() {\n        this.title = this.$t('strings.", " download\",\n        title: \"\"\n      };\n      ", "efault {\n\tdata: {\n\t\ttitle: '',\n\t},\n\tonInit() ", "re.execute()\n\t\tthis.title = this.$t('strings.", "\n\tonInit() {\n\t\tthis.title = this.$t('strings.", "    data: {\n        title: \"\"\n    },\n    onIn"], "files": ["InputRequestJsunit.test.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_all": "interface DownloadInfo {\r\n    \r\n    description: string;\r\n    \t\r\n    downloadedBytes: number;\r\n    \r\n    downloadId: number;\r\n    \r\n    failedReason: number;\r\n    \r\n    fileName: string;\r\n    \r\n    filePath: string;\r\n    \r\n    pausedReason: number;\r\n    \r\n    status: number;\r\n    \r\n    targetURI: string;\r\n    \r\n    downloadTitle: string;\r\n    \r\n    downloadTotalBytes: number;\r\n  }", "api_method_name": "DownloadInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["   it('inputRequest_DownloadInfo_Test_002', 0, async", "ing = \"inputRequest_DownloadInfo_Test_002\";\n      tr"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "description", "api_method_all": "description: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 6, "api_used": "\u662f", "lines": ["ing: false,\n        description: \"test download\",\n ", "tEqual(downloadInfo.description);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "downloadedBytes", "api_method_all": "downloadedBytes: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.downloadedBytes);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "downloadId", "api_method_all": "downloadId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.downloadId);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "failedReason", "api_method_all": "failedReason: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.failedReason);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "fileName", "api_method_all": "fileName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.fileName);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "filePath", "api_method_all": "filePath: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.filePath);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "pausedReason", "api_method_all": "pausedReason: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.pausedReason);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "status", "api_method_all": "status: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.status);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "targetURI", "api_method_all": "targetURI: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.targetURI);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "downloadTitle", "api_method_all": "downloadTitle: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.downloadTitle);\n                e"], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadInfo", "api_method_name": "downloadTotalBytes", "api_method_all": "downloadTotalBytes: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["tEqual(downloadInfo.downloadTotalBytes);\n              }\n "], "files": ["InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_all": "interface DownloadTask {\r\n    \r\n    on(type: 'progress', callback: (receivedSize: number, totalSize: number) => void): void;\r\n\r\n    \r\n    off(type: 'progress', callback?: (receivedSize: number, totalSize: number) => void): void;\r\n\r\n    \r\n    on(type: 'complete' | 'pause' | 'remove', callback: () => void): void;\r\n\r\n    \r\n    off(type: 'complete' | 'pause' | 'remove', callback?: () => void): void;\r\n\r\n    \r\n    on(type: 'fail', callback: (err: number) => void): void;\r\n\r\n    \r\n    off(type: 'fail', callback?: (err: number) => void): void;\r\n\r\n    \r\n    remove(callback: AsyncCallback<boolean>): void;\r\n\r\n    \r\n    remove(): Promise<boolean>;\r\n\r\n    \r\n    pause(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    pause(): Promise<void>;\r\n\r\n    \r\n    resume(callback: AsyncCallback<void>): void;\r\n\r\n    \r\n    resume(): Promise<void>;\r\n\r\n    \r\n    query(callback: AsyncCallback<DownloadInfo>): void;\r\n\r\n    \r\n    query(): Promise<DownloadInfo>;\r\n\r\n    \r\n    queryMimeType(callback: AsyncCallback<string>): void;\r\n\r\n    \r\n    queryMimeType(): Promise<string>;\r\n  }", "api_method_name": "DownloadTask", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["unit from './RequestDownloadTaskJsunit.test.ets';\nim"], "files": ["List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "on", "api_method_all": "on(type: 'progress', callback: (receivedSize: number, totalSize: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "on", "api_method_all": "on(type: 'progress', callback: (receivedSize: number, totalSize: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "off", "api_method_all": "off(type: 'progress', callback?: (receivedSize: number, totalSize: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "off", "api_method_all": "off(type: 'progress', callback?: (receivedSize: number, totalSize: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "on", "api_method_all": "on(type: 'complete' | 'pause' | 'remove', callback: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "on", "api_method_all": "on(type: 'complete' | 'pause' | 'remove', callback: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "off", "api_method_all": "off(type: 'complete' | 'pause' | 'remove', callback?: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "off", "api_method_all": "off(type: 'complete' | 'pause' | 'remove', callback?: () => void): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "on", "api_method_all": "on(type: 'fail', callback: (err: number) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "on", "api_method_all": "on(type: 'fail', callback: (err: number) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "off", "api_method_all": "off(type: 'fail', callback?: (err: number) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "off", "api_method_all": "off(type: 'fail', callback?: (err: number) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "remove", "api_method_all": "remove(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 35, "since": 7, "api_used": "\u662f", "lines": ["  downloadTask.off('remove', (err) => {\n            console.log(\"d", "\n        Updatetask.remove((err,data) => {\n            console.log", "ert.equal(pasteData.removeRecordAt(2), true)\n        assert.equal(", "ert.equal(pasteData.removeRecordAt(0), true)\n        }\n        \n  ", "con,publicoff,publicremove,publiconprogress,publicoffprogress,getU", "ert.equal(pasteData.removeRecordAt(1), true)\n        assert.equal(", "g(\"downloadTask off_remove err:\" + err);\n            expect(true).", "\u516c\u5171\u65b9\u6cd5\nfunction publicremove(Updatetask, Type){\n    return new Promi", "ert.equal(pasteData.removeRecordAt(0), true)\n        assert.equal(", "og(\"downloadTask on_remove err:\" + err);\n            expect(true).", "         uploadTask.remove((err, data) => {\n              console.", "request_upload_0006 remove =\" + data);\n            })\n          }\n", "   downloadTask.on('remove', (err) => {\n            console.log(\"d", "ert.equal(pasteData.removeRecordAt(3), true)\n        \n        cons", "e.log(\"downloadTask remove err:\" + err);\n            expect(true).", "       downloadTask.remove((err) => {\n            console.log(\"dow", "ert.equal(pasteData.removeRecordAt(0), true)\n        \n        cons", "     })\n    })\n}\n\n//remove\u516c\u5171\u65b9\u6cd5\nfunction publicremove(Updatetask, T", "g(\"Testupdate publicremove =\" + data);\n            resolve(data);\n"], "files": ["RequestDownloadTaskJsunit.test.ets", "PasteBoardJsunit.test.js", "RequestJsunit.test.ets", "Publicfunction.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "remove", "api_method_all": "remove(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": [" await pubfun.publicremove(uploadTask).then((data) => {\n          "], "files": ["UploadCallbackXTSJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "pause", "api_method_all": "pause(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["   downloadTask.on('pause', (err) => {\n            console.log(\"d", "g(\"downloadTask off_pause err:\" + err);\n            expect(true).", "tEqual(downloadInfo.pausedReason);\n                expect(200).as", "og(\"downloadTask on_pause err:\" + err);\n            expect(true).", "  downloadTask.off('pause', (err) => {\n            console.log(\"d"], "files": ["RequestDownloadTaskJsunit.test.ets", "InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "pause", "api_method_all": "pause(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "resume", "api_method_all": "resume(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "resume", "api_method_all": "resume(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "query", "api_method_all": "query(callback: AsyncCallback<DownloadInfo>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["       downloadTask.query((err, downloadInfo) => {\n              ", "       downloadTask.query((err) => {\n            console.log(\"dow", "       downloadTask.queryMimeType((err) => {\n            console.", "e.log(\"downloadTask query err:\" + err);\n            expect(true).", "e.log(\"downloadTask queryMimeType err:\" + err);\n            expec"], "files": ["RequestDownloadTaskJsunit.test.ets", "InputRequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "query", "api_method_all": "query(): Promise<DownloadInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "queryMimeType", "api_method_all": "queryMimeType(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["e.log(\"downloadTask queryMimeType err:\" + err);\n            expect(true).", "       downloadTask.queryMimeType((err) => {\n            console.log(\"dow"], "files": ["RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DownloadTask", "api_method_name": "queryMimeType", "api_method_all": "queryMimeType(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_all": "interface File {\r\n    \r\n    filename: string;\r\n    \r\n    name: string;\r\n    \r\n    uri: string;\r\n    \r\n    type: string;\r\n  }", "api_method_name": "File", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 6, "since": 6, "api_used": "\u662f", "lines": ["g(fileurl){\n    let File = {\n        filenam", "\n    FileArray[0] = File;\n    let headerHttp", "  uri: 'C:\\\\Program Files',\n      type: 'tex", "OST.\n        files: FileArray, // A list of ", "path.\n    }\n    let FileArray=new Array();\n ", "ay=new Array();\n    FileArray[0] = File;\n   "], "files": ["RequestDownloadTaskJsunit.test.ets", "Publicfunction.js"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "filename", "api_method_all": "filename: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 6, "api_used": "\u662f", "lines": [" let file = {\n      filename: 'text.txt',\n      ", "et File = {\n        filename: 'test', // When mu", " let file = {\n      filename: 'test',\n      name"], "files": ["RequestDownloadTaskJsunit.test.ets", "Publicfunction.js", "RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "name", "api_method_all": "name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 127, "since": 6, "api_used": "\u662f", "lines": ["                    name: 'name', value: '12", "API_1800\n     * @tc.name      Adds PlainText", "API_2200\n     * @tc.name      Delete one wan", "ent_0100\n     * @tc.name    sendScreenLockEv", "API_2900\n     * @tc.name      Replaces uri r", "API_3200\n     * @tc.name      Adds one recor", "name: 'test',\n      name: 'test',\n      uri:", "eep_0100\n     * @tc.name      : on\n     * @t", "API_1700\n     * @tc.name      Adds 31 record", "API_2800\n     * @tc.name      Replaces htmlT", "API_4200\n     * @tc.name      \u6253\u5f00\u5185\u5bb9\u53d8\u5316\u901a\u77e5\u529f\u80fd\uff1a\u5411\u526a\u8d34", ": 'text.txt',\n      name: 'text.txt',\n      ", "API_2000\n     * @tc.name      Delete one htm", "API_3500\n     * @tc.name      Adds 30 record", "API_2700\n     * @tc.name      Replaces \u6587\u672c re", "API_2400\n     * @tc.name      Deletes 30 rec", "API_2100\n     * @tc.name      Delete one uri", "(!(\"input\" == pages.name)) {\n          let r", "led_0100\n     * @tc.name    on_screenlockEna", "ser_0100\n     * @tc.name      : on\n     * @t", "nOn_0100\n     * @tc.name    off_endScreenOn\n", "API_3000\n     * @tc.name      Replaces want ", "API_4000\n     * @tc.name      Set Property's", " file = {\n      filename: 'text.txt',\n      ", "Off_0100\n     * @tc.name    off_beginScreenO", "API_4300\n     * @tc.name      \u6253\u5f00\u5185\u5bb9\u53d8\u5316\u901a\u77e5\u529f\u80fd\uff1a\u5411\u526a\u8d34", "API_3100\n     * @tc.name      Replaces 300k\u6587", "API_2600\n     * @tc.name      Deletes \u6587\u672c\u3001uri", "een_0100\n     * @tc.name    off_unlockScreen", "API_3400\n     * @tc.name      Adds 15 record", "API_4100\n     * @tc.name      Clears pasteBo", "eep_0100\n     * @tc.name    off_endSleep\n   ", "eUp_0100\n     * @tc.name    off_endWakeUp\n  ", "API_1600\n     * @tc.name      Adds 30 record", "ion_0100\n     * @tc.name    off_beginExitAni", "nOn_0100\n     * @tc.name    off_beginScreenO", "API_3600\n     * @tc.name      Adds 31 record", "API_2300\n     * @tc.name      Deletes 300K P", "eep_0100\n     * @tc.name    off_beginSleep\n ", "             name: 'name', value: '123'\n    ", "API_3700\n     * @tc.name      Replaces one r", "API_3800\n     * @tc.name      Clears pasteBo", "API_1900\n     * @tc.name      Delete one Pla", "API_3300\n     * @tc.name      Adds 2 record(", "API_3900\n     * @tc.name      Adds Property\n", "eUp_0100\n     * @tc.name    off_beginWakeUp\n", "API_2500\n     * @tc.name      Deletes replac", " file = {\n      filename: 'test',\n      name", "led_0100\n     * @tc.name    off_screenlockEn", "ser_0100\n     * @tc.name    off_changeUser\n "], "files": ["RequestJsunit.test.ets", "SystemTimeJsunit.test.js", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets", "InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "uri", "api_method_all": "uri: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 87, "since": 6, "api_used": "\u662f", "lines": ["       \n        var uriText = 'Hello \u4e2d\u56fd!@#$", "       \n        var uriText = ''\n        co", "       \n        var uriText = 'https://www.", "teData.addUriRecord(uriText0)\n        \n    ", "\u5316\u901a\u77e5\u529f\u80fd\uff1a\u5411\u526a\u8d34\u677f\u6570\u636e\u589e\u52a0\u3001\u66f4\u65b0\u3001\u5220\u9664uri\u6570\u636e\u9879\n     * @tc.desc ", "ta.getPrimaryUri(), uriText)\n        \n     ", "e.log('Replaces the uriText = ' + uriText1)", "createUriData = ' + uriText)\n        var pa", "       \n        var uriText1 = 'https://www", "options = {\n        uri: 'pages/input',\n   ", "'addUriRecord = ' + uriText0)\n        paste", ": 'text.txt',\n      uri: 'C:\\\\Program Files", "Data.getRecordAt(2).uri, uriText)\n        a", "teData.addUriRecord(uriText)\n        \n     ", "board.createUriData(uriText)\n        \n     ", "Data.getRecordAt(1).uri, uriText1)\n        ", ".name      Replaces uri record\n     * @tc.d", "ame      Delete one uriText\n     * @tc.desc", "       \n        var uriText0 = 'https://www", "getRecordAt(1).uri, uriText1)\n        \n    ", "s the uriText = ' + uriText1)\n        paste", "ard.createUriRecord(uriText1)\n        asser", "name: 'test',\n      uri: 'internal://cache/", "ame      Deletes \u6587\u672c\u3001uri\u3001html\u3001want records\n ", "'addUriRecord = ' + uriText)\n        pasteD", "getRecordAt(2).uri, uriText)\n        assert"], "files": ["RequestJsunit.test.ets", "PasteBoardJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets", "InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "File", "api_method_name": "type", "api_method_all": "type: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 163, "since": 6, "api_used": "\u662f", "lines": ["ef = Object.getPrototypeOf(global) || global", "TYPE_TEXT_WANT MIME type of data')\n        a", ": MEDIUM\n     * @tc.type      : Function\n   ", "r word' })\n        .type(InputType.Normal)\n ", "TYPE_TEXT_HTML MIME type of data')\n        a", "he/test.txt',\n      type: 'txt'\n    }\n    le", "YPE_TEXT_PLAIN MIME type of data')\n        a", "og('Checks the MIME types of all content on ", "    y: downY,\n      type: TouchType.Down,\n  ", "ETYPE_TEXT_URI MIME type of data')\n        a", "y: y_value,\n        type: TouchType.Move,\n  ", "      y: upY,\n      type: TouchType.Up,\n    ", "yStep * i),\n        type: TouchType.Move\n   ", "ogram Files',\n      type: 'text'\n    };\n    "], "files": ["Utils.ets", "RequestJsunit.test.ets", "SystemTimeJsunit.test.js", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "input.ets", "index.js", "RequestDownloadTaskJsunit.test.ets", "UploadCallbackXTSJsunit.test.js", "InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RequestData", "api_method_all": "interface RequestData {\r\n    \r\n    name: string;\r\n    \r\n    value: string;\r\n  }", "api_method_name": "RequestData", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 3, "since": 6, "api_used": "\u662f", "lines": ["rm element.\n}]\n\nlet RequestDataArray=new Array();\n\n", "@ohos.request'\n\nlet RequestData = [{\n    name: '', ", "bmit.\n        data: RequestData // The requested fo"], "files": ["Publicfunction.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RequestData", "api_method_name": "name", "api_method_all": "name: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 127, "since": 6, "api_used": "\u662f", "lines": ["                    name: 'name', value: '12", "API_1800\n     * @tc.name      Adds PlainText", "API_2200\n     * @tc.name      Delete one wan", "ent_0100\n     * @tc.name    sendScreenLockEv", "API_2900\n     * @tc.name      Replaces uri r", "API_3200\n     * @tc.name      Adds one recor", "name: 'test',\n      name: 'test',\n      uri:", "eep_0100\n     * @tc.name      : on\n     * @t", "API_1700\n     * @tc.name      Adds 31 record", "API_2800\n     * @tc.name      Replaces htmlT", "API_4200\n     * @tc.name      \u6253\u5f00\u5185\u5bb9\u53d8\u5316\u901a\u77e5\u529f\u80fd\uff1a\u5411\u526a\u8d34", ": 'text.txt',\n      name: 'text.txt',\n      ", "API_2000\n     * @tc.name      Delete one htm", "API_3500\n     * @tc.name      Adds 30 record", "API_2700\n     * @tc.name      Replaces \u6587\u672c re", "API_2400\n     * @tc.name      Deletes 30 rec", "API_2100\n     * @tc.name      Delete one uri", "(!(\"input\" == pages.name)) {\n          let r", "led_0100\n     * @tc.name    on_screenlockEna", "ser_0100\n     * @tc.name      : on\n     * @t", "nOn_0100\n     * @tc.name    off_endScreenOn\n", "API_3000\n     * @tc.name      Replaces want ", "API_4000\n     * @tc.name      Set Property's", " file = {\n      filename: 'text.txt',\n      ", "Off_0100\n     * @tc.name    off_beginScreenO", "API_4300\n     * @tc.name      \u6253\u5f00\u5185\u5bb9\u53d8\u5316\u901a\u77e5\u529f\u80fd\uff1a\u5411\u526a\u8d34", "API_3100\n     * @tc.name      Replaces 300k\u6587", "API_2600\n     * @tc.name      Deletes \u6587\u672c\u3001uri", "een_0100\n     * @tc.name    off_unlockScreen", "API_3400\n     * @tc.name      Adds 15 record", "API_4100\n     * @tc.name      Clears pasteBo", "eep_0100\n     * @tc.name    off_endSleep\n   ", "eUp_0100\n     * @tc.name    off_endWakeUp\n  ", "API_1600\n     * @tc.name      Adds 30 record", "ion_0100\n     * @tc.name    off_beginExitAni", "nOn_0100\n     * @tc.name    off_beginScreenO", "API_3600\n     * @tc.name      Adds 31 record", "API_2300\n     * @tc.name      Deletes 300K P", "eep_0100\n     * @tc.name    off_beginSleep\n ", "             name: 'name', value: '123'\n    ", "API_3700\n     * @tc.name      Replaces one r", "API_3800\n     * @tc.name      Clears pasteBo", "API_1900\n     * @tc.name      Delete one Pla", "API_3300\n     * @tc.name      Adds 2 record(", "API_3900\n     * @tc.name      Adds Property\n", "eUp_0100\n     * @tc.name    off_beginWakeUp\n", "API_2500\n     * @tc.name      Deletes replac", " file = {\n      filename: 'test',\n      name", "led_0100\n     * @tc.name    off_screenlockEn", "ser_0100\n     * @tc.name    off_changeUser\n "], "files": ["RequestJsunit.test.ets", "SystemTimeJsunit.test.js", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets", "InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RequestData", "api_method_name": "value", "api_method_all": "value: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 30, "since": 6, "api_used": "\u662f", "lines": ["\n        .onChange((value: string) => {\n     ", "_034 InsertText:\" + value);\n          expect(", "   return this.rect_value = {\n      \"left\": t", "ient.getForward(1, (value) => {\n          con", "' // Represents the value of the form element", "        this.text = value\n        })\n      Te", "sendKeyFunction:\" + value);\n          expect(", ");\n          expect(value).assertEqual(true);", "40 hideKeyboard:\" + value);\n          expect(", ": \" + \"[x]=== \" + x_value + \"   [y]===\" + y_v", "t) / 10\n      let y_value = rect.top + (rect.", "id: 1,\n        x: x_value,\n        y: y_value", "t.deleteForward(1, (value) => {\n          con", "e + \"   [y]===\" + y_value);\n      let point: ", "rect));\n      let x_value = rect.left + (rect", "ttom;\n  static rect_value;\n\n  static sleep(ti", "InsertText('test', (value) => {\n          con", "sendKeyFunction(0, (value) => {\n          con", "EditorAttribute:\" + value);\n          expect(", "value,\n        y: y_value,\n        type: Touc", "_036 getForward:\" + value);\n          expect(", ".deleteBackward(1, (value) => {\n          con", "      name: 'name', value: '123'\n            ", " deleteBackward:\" + value);\n          expect(", "0 deleteForward:\" + value);\n          expect(", "e form element.\n    value: '' // Represents t"], "files": ["Utils.ets", "RequestJsunit.test.ets", "Publicfunction.js", "input.ets", "InputmethodEngineJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadConfig", "api_method_all": "interface UploadConfig {\r\n    \r\n    url: string;\r\n    \r\n    header: Object;\r\n    \r\n    method: string;\r\n    \r\n    files: Array<File>;\r\n    \r\n    data: Array<RequestData>;\r\n  }", "api_method_name": "UploadConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 17, "since": 6, "api_used": "\u662f", "lines": ["s));\n}\n\nfunction getUploadConfig(fileurl){\n    let F", "loadConfig() \" + getUploadConfig());\n        request", "ole.log(`Testupdate UploadConfig ${JSON.stringify(Up", "  })\n\n  function getUploadConfig() {\n    let file = ", "\");\n            let UploadConfig = pubfun.getUploadC", "dConfig = pubfun.getUploadConfig(file7url)\n         ", "     request.upload(UploadConfig, (err, data) => {\n ", "nction publicupload(UploadConfig){\n    console.log(`", "pdate before upload UploadConfig = \" + JSON.stringif", "  request.upload(getUploadConfig(), (err, uploadTask", "a.\n    }\n    return UploadConfig\n}\n\n//upload\u516c\u5171\u65b9\u6cd5\nfun", "uest_upload_0006 getUploadConfig() \" + getUploadConf", " \" + JSON.stringify(UploadConfig));\n            cons", "s: 'http' }\n    let UploadConfig = {\n        url: 'h", "pubfun.publicupload(UploadConfig).then((data) => {\n ", "ig ${JSON.stringify(UploadConfig)}`)\n    return new ", "ublicoffprogress,getUploadConfig,sleep}"], "files": ["Publicfunction.js", "UploadCallbackXTSJsunit.test.js", "RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadConfig", "api_method_name": "url", "api_method_all": "url: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 10, "since": 6, "api_used": "\u662f", "lines": ["   expect(\"download url\").assertEqual(downl", "dConfig = {\n        url: \"www.testdownload.", "etUploadConfig(file7url)\n            consol", "oadConfig = {\n      url: \"www.baidu.com\",\n ", "oadConfig = {\n      url: 'http://192.168.11", "dConfig = {\n        url: 'http://192.168.11", "ploadTask;\nlet file7url = 'internal://cache", "oadConfig = {\n      url: \"www.baidu.com\"\n  ", "ownload({\n          url: \"www.testdownload.", "getUploadConfig(fileurl){\n    let File = {\n"], "files": ["RequestJsunit.test.ets", "Publicfunction.js", "InputRequestJsunit.test.ets", "RequestDownloadTaskJsunit.test.ets", "UploadCallbackXTSJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadConfig", "api_method_name": "header", "api_method_all": "header: Object", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 6, "api_used": "\u662f", "lines": ["[0] = file;\n    let headerHttp = {\n      heade", "[0] = File;\n    let headerHttp = { headers: 'h", "eaderHttp = {\n      headers: 'http'\n    }\n    ", "w.baidu.com\",\n      header: 'HTTP',\n      meth", " let headerHttp = { headers: 'http' }\n    let ", "ce address.\n        header: headerHttp, // Add", "pload_test/',\n      header: headerHttp,\n      ", "ds an HTTP or HTTPS header to be included with", "st/',\n      header: headerHttp,\n      method: ", "ypeHeaderReceive = 'headerReceive';\nvar typeFa", "ss.\n        header: headerHttp, // Adds an HTT", "name in the request header.\n        name: 'tes"], "files": ["RequestDownloadTaskJsunit.test.ets", "Publicfunction.js", "UploadCallbackXTSJsunit.test.js", "RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadConfig", "api_method_name": "method", "api_method_all": "method: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 6, "api_used": "\u662f", "lines": ["ad request.\n        method: 'POST', // Request", "ader: 'HTTP',\n      method: 'post',\n      file", "th from '@ohos.inputmethod';\n\nexport default f", "  console.log(\"inputmethod_test_001 result:\" +", "\n\n    \n    it('inputmethod_test_MAX_TYPE_NUM_0", "\"************* inputmethod_test_MAX_TYPE_NUM_0", ");\n      expect(obj.methodId=='ServiceExtAbili", " 'POST', // Request method: POST, PUT. The def", "t.ets';\nimport inputmethodEngineJsunit from '.", ": headerHttp,\n      method: 'POST',\n      file", "hohJsunit();\n  inputmethodEngineJsunit();\n  in", "Jsunit from './InputmethodEngineJsunit.test.et"], "files": ["RequestJsunit.test.ets", "InputmethohJsunit.test.ets", "Publicfunction.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadConfig", "api_method_name": "files", "api_method_all": "files: Array<File>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 6, "api_used": "\u662f", "lines": ["thod: 'post',\n      files: file,\n      data: ", "thod: 'POST',\n      files: fileArray,\n      d", "fault POST.\n        files: FileArray, // A li", "Array, // A list of files to be uploaded. Ple"], "files": ["RequestDownloadTaskJsunit.test.ets", "Publicfunction.js", "RequestJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadConfig", "api_method_name": "data", "api_method_all": "data: Array<RequestData>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 151, "since": 6, "api_used": "\u662f", "lines": ["nlockScreen().then((data) => {\n          con", "sSecureMode((error, data) => {\n          if ", "ad_0006 remove =\" + data);\n            })\n  ", ".on('endScreenOn', (data) => {\n          con", "est_upload_0006 off data2 =\" + data2);\n     ", "est_upload_0006 off data1 =\" + data1);\n     ", "_0006 on data2 =\" + data2);\n            })\n ", "_PLAIN MIME type of data')\n        assert.eq", " files: file,\n      data: 'jason/xml'\n    };", "adTask.remove((err, data) => {\n             ", "', function (data1, data2) {\n              c", "on('unlockScreen', (data) => {\n          con", " ' + JSON.stringify(data));\n          expect", "0006 off data1 =\" + data1);\n              co", "0006 off data2 =\" + data2);\n            })\n ", "rogress', function (data1, data2) {\n        ", "_0006 on data1 =\" + data1);\n              co", "sSecureMode().then((data) => {\n          con", "ck.on('endWakeUp', (data) => {\n          con", "s: fileArray,\n      data: requestData\n    }\n", "creenLocked().then((data) => {\n          con", ".on('beginWakeUp', (data) => {\n          con", "ginExitAnimation', (data) => {\n          con", "n('beginScreenOn', (data) => {\n          con", "('beginScreenOff', (data) => {\n          con", "creenLocked((error, data) => {\n          if ", "uest_upload_0006 on data1 =\" + data1);\n     ", "uest_upload_0006 on data2 =\" + data2);\n     ", "xport default {\n    data: {\n        title: \"", "on('endScreenOff', (data) => {\n          con", "nlockScreen((error, data) => {\n          if "], "files": ["RequestJsunit.test.ets", "PasteBoardJsunit.test.js", "ScreenLockJsunit.test.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "index.js", "RequestDownloadTaskJsunit.test.ets", "UploadCallbackXTSJsunit.test.js", "Time.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_all": "interface UploadTask {\r\n    \r\n    on(type: 'progress', callback: (uploadedSize: number, totalSize: number) => void): void;\r\n\r\n    \r\n    off(type: 'progress', callback?: (uploadedSize: number, totalSize: number) => void): void;\r\n\r\n    \r\n    on(type: 'headerReceive', callback: (header: object) => void): void;\r\n\r\n    \r\n    off(type: 'headerReceive', callback?: (header: object) => void): void;\r\n\r\n    \r\n    remove(callback: AsyncCallback<boolean>): void;\r\n\r\n    \r\n    remove(): Promise<boolean>;\r\n  }", "api_method_name": "UploadTask", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_name": "on", "api_method_all": "on(type: 'progress', callback: (uploadedSize: number, totalSize: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_name": "on", "api_method_all": "on(type: 'progress', callback: (uploadedSize: number, totalSize: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_name": "off", "api_method_all": "off(type: 'progress', callback?: (uploadedSize: number, totalSize: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_name": "off", "api_method_all": "off(type: 'progress', callback?: (uploadedSize: number, totalSize: number) => void): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_name": "on", "api_method_all": "on(type: 'headerReceive', callback: (header: object) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_name": "on", "api_method_all": "on(type: 'headerReceive', callback: (header: object) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 3383, "since": 0, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_name": "off", "api_method_all": "off(type: 'headerReceive', callback?: (header: object) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_name": "off", "api_method_all": "off(type: 'headerReceive', callback?: (header: object) => void): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 53, "since": 0, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_name": "remove", "api_method_all": "remove(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 35, "since": 7, "api_used": "\u662f", "lines": ["  downloadTask.off('remove', (err) => {\n            console.log(\"d", "\n        Updatetask.remove((err,data) => {\n            console.log", "ert.equal(pasteData.removeRecordAt(2), true)\n        assert.equal(", "ert.equal(pasteData.removeRecordAt(0), true)\n        }\n        \n  ", "con,publicoff,publicremove,publiconprogress,publicoffprogress,getU", "ert.equal(pasteData.removeRecordAt(1), true)\n        assert.equal(", "g(\"downloadTask off_remove err:\" + err);\n            expect(true).", "\u516c\u5171\u65b9\u6cd5\nfunction publicremove(Updatetask, Type){\n    return new Promi", "ert.equal(pasteData.removeRecordAt(0), true)\n        assert.equal(", "og(\"downloadTask on_remove err:\" + err);\n            expect(true).", "         uploadTask.remove((err, data) => {\n              console.", "request_upload_0006 remove =\" + data);\n            })\n          }\n", "   downloadTask.on('remove', (err) => {\n            console.log(\"d", "ert.equal(pasteData.removeRecordAt(3), true)\n        \n        cons", "e.log(\"downloadTask remove err:\" + err);\n            expect(true).", "       downloadTask.remove((err) => {\n            console.log(\"dow", "ert.equal(pasteData.removeRecordAt(0), true)\n        \n        cons", "     })\n    })\n}\n\n//remove\u516c\u5171\u65b9\u6cd5\nfunction publicremove(Updatetask, T", "g(\"Testupdate publicremove =\" + data);\n            resolve(data);\n"], "files": ["RequestDownloadTaskJsunit.test.ets", "PasteBoardJsunit.test.js", "RequestJsunit.test.ets", "Publicfunction.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UploadTask", "api_method_name": "remove", "api_method_all": "remove(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": [" await pubfun.publicremove(uploadTask).then((data) => {\n          "], "files": ["UploadCallbackXTSJsunit.test.js"], "is_white": " ", "desc": " "}]}