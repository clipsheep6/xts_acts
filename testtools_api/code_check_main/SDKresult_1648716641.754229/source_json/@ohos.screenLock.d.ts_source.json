{"subsystem_ch": "Misc\u8f6f\u4ef6\u670d\u52a1\u5b50\u7cfb\u7edf-\u8f93\u5165\u6cd5", "subsystem_en": "miscservices", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.screenLock", "api": [{"api_class_name": "screenLock", "api_method_all": "declare namespace screenLock {\r\n\r\n  \r\n  function isScreenLocked(callback: AsyncCallback<boolean>): void;\r\n  function isScreenLocked(): Promise<boolean>;\r\n\r\n  \r\n  function isSecureMode(callback: AsyncCallback<boolean>): void;\r\n  function isSecureMode(): Promise<boolean>;\r\n\r\n  \r\n  function unlockScreen(callback: AsyncCallback<void>): void;\r\n  function unlockScreen():Promise<void>;\r\n\r\n  \r\n  function on(type: 'beginWakeUp' | 'endWakeUp' | 'beginScreenOn' | 'endScreenOn' | 'beginScreenOff' | 'endScreenOff' | 'unlockScreen' | 'beginExitAnimation', callback: Callback<void>): void;\r\n\r\n  \r\n  function on(type: 'beginSleep' | 'endSleep' | 'changeUser', callback: Callback<number>): void;\r\n\r\n  \r\n  function on(type: 'screenlockEnabled', callback: Callback<boolean>): void;\r\n\r\n  \r\n   function off(type: 'beginWakeUp' | 'endWakeUp' | 'beginScreenOn' | 'endScreenOn' | 'beginScreenOff' | 'endScreenOff' \r\n      | 'unlockScreen' | 'beginExitAnimation' | 'screenlockEnabled' | 'beginSleep' | 'endSleep' | 'changeUser', callback: Callback<void>): void;\r\n\r\n\r\n  \r\n  function sendScreenLockEvent(event: String, parameter: number, callback: AsyncCallback<boolean>): void;\r\n  function sendScreenLockEvent(event: String, parameter: number): Promise<boolean>;\r\n\r\n}", "api_method_name": "screenLock", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 38, "since": 0, "api_used": "\u662f", "lines": ["      try {\n        screenLock.unlockScreen().then", "      try {\n        screenLock.on('beginWakeUp', (", "      try {\n        screenLock.on('endSleep', (num", "      try {\n        screenLock.on('changeUser', (n", "      try {\n        screenLock.isScreenLocked().th", "      try {\n        screenLock.on('endWakeUp', (da", "      try {\n        screenLock.off('beginScreenOn'", "      try {\n        screenLock.sendScreenLockEvent", "      try {\n        screenLock.on('endScreenOff', ", "      try {\n        screenLock.isScreenLocked((err", "/index.ets\";\nimport screenLock from '@ohos.screenL", "      try {\n        screenLock.unlockScreen((error", "      try {\n        screenLock.on('beginSleep', (n", "      try {\n        screenLock.off('beginScreenOff", "      try {\n        screenLock.off('endSleep', (er", "t.test.ets';\nimport screenLockJsunit from './Scree", "      try {\n        screenLock.off('beginExitAnima", "      try {\n        screenLock.on('endScreenOn', (", "      try {\n        screenLock.on('screenlockEnabl", "      try {\n        screenLock.isSecureMode((error", "      try {\n        screenLock.off('changeUser', (", ".log(\"************* screenLock Test end***********", "eenLock from '@ohos.screenLock';\n\nexport default f", "      try {\n        screenLock.on('unlockScreen', ", "      try {\n        screenLock.off('endWakeUp', (e", "      try {\n        screenLock.isSecureMode().then", ".log(\"************* screenLock Test start*********", "      try {\n        screenLock.off('beginSleep', (", "rt default function screenLockJsunit() {\n  describ", "      try {\n        screenLock.on('beginScreenOff'", " requestJsunit();\n  screenLockJsunit();\n}", "      try {\n        screenLock.off('beginWakeUp', ", "      try {\n        screenLock.off('screenlockEnab", "nit() {\n  describe('screenLockTest', function () {", "      try {\n        screenLock.off('unlockScreen',", "      try {\n        screenLock.on('beginExitAnimat", "      try {\n        screenLock.on('beginScreenOn',", "      try {\n        screenLock.off('endScreenOn', "], "files": ["List.test.ets", "ScreenLockJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "isScreenLocked", "api_method_all": "function isScreenLocked(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["\n        screenLock.isScreenLocked((error, data) => {\n          if (error)", "Services_ScreenLock_isScreenLocked_0100\";\n      try {\n        screenLock.i", "Services_ScreenLock_isScreenLocked_0200\";\n      try {\n        screenLock.i", "Services_ScreenLock_isScreenLocked_0200', 0, async function (done) {\n     ", "Services_ScreenLock_isScreenLocked_0100', 0, async function (done) {\n     "], "files": ["ScreenLockJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "isScreenLocked", "api_method_all": "function isScreenLocked(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["\n        screenLock.isScreenLocked().then((data) => {\n          console.in"], "files": ["ScreenLockJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "isSecureMode", "api_method_all": "function isSecureMode(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["Services_ScreenLock_isSecureMode_0100\";\n      try {\n        screenLock.i", "Services_ScreenLock_isSecureMode_0200', 0, async function (done) {\n     ", "\n        screenLock.isSecureMode((error, data) => {\n          if (error)", "Services_ScreenLock_isSecureMode_0100', 0, async function (done) {\n     ", "Services_ScreenLock_isSecureMode_0200\";\n      try {\n        screenLock.i"], "files": ["ScreenLockJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "isSecureMode", "api_method_all": "function isSecureMode(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["\n        screenLock.isSecureMode().then((data) => {\n          console.in"], "files": ["ScreenLockJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "unlockScreen", "api_method_all": "function unlockScreen(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["ove the receives of unlockScreen\n     */\n    it('Miscservices_ScreenLock", "    screenLock.off('unlockScreen', (error) => {\n          if (error) {\n ", "Services_ScreenLock_unlockScreen_0100', 0, async function (done) {\n     ", "reenLock_ScreenLock_unlockScreen_0100 start*************\");\n      try {\n", "reenLock_ScreenLock_unlockScreen_0100\n     * @tc.name    off_unlockScree", "Services_ScreenLock_unlockScreen_0200\";\n      try {\n        screenLock.u", "     screenLock.on('unlockScreen', (data) => {\n          console.info(ca", "vices_ScreenLock_on_unlockScreen_0100\";\n      try {\n        screenLock.o", "  * @tc.name    off_unlockScreen\n     * @tc.desc    Remove the receives ", "reenLock_ScreenLock_unlockScreen_0100', 0, async function (done) {\n     ", "reenLock_ScreenLock_unlockScreen_0100 end*************\");\n    });\n\n    /", "Services_ScreenLock_unlockScreen_0100\"\n      try {\n        screenLock.un", "Services_ScreenLock_unlockScreen_0200', 0, async function (done) {\n     ", "vices_ScreenLock_on_unlockScreen_0100', 0, async function (done) {\n     ", "\n        screenLock.unlockScreen((error, data) => {\n          if (error)", "reenLock_ScreenLock_unlockScreen_0100 error \" + JSON.stringify(error));\n"], "files": ["ScreenLockJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "unlockScreen", "api_method_all": "function unlockScreen():Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["\n        screenLock.unlockScreen().then((data) => {\n          console.in"], "files": ["ScreenLockJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "on", "api_method_all": "function on(type: 'beginWakeUp' | 'endWakeUp' | 'beginScreenOn' | 'endScreenOn' | 'beginScreenOff' | 'endScreenOff' | 'unlockScreen' | 'beginExitAnimation', callback: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3383, "since": 7, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "on", "api_method_all": "function on(type: 'beginSleep' | 'endSleep' | 'changeUser', callback: Callback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3383, "since": 7, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "on", "api_method_all": "function on(type: 'screenlockEnabled', callback: Callback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3383, "since": 7, "api_used": "\u662f", "lines": ["e.info('Application onCreate')\n  },\n  onDestroy() {\n    consol", "       .fontWeight(FontWeight.Bold)\n    }\n    .width('100%')\n ", "ght.Bold)\n        .fontFamily(\"cursive\")\n        .fontStyle(Fo", "ch(async function (done) {\n      let options = {\n        uri: ", "e.info('Application onDestroy')\n  },\n}", " size: 40, weight: FontWeight.Normal, family: \"sans-serif\", st", "lity\";\n\n@Entry\n@Component\nstruct MyComponent {\n  aboutToAppear", "utToAppear() {\n    console.info(\"start run testcase!!!!\")\n    ", "ans-serif\", style: FontStyle.Normal })\n        .enterKeyType(E", "nd);\n        const configService = core.getDefaultService('con", "oreEach(async function (done) {\n      let options = {\n        ", "       .placeholderFont({ size: 40, weight: FontWeight.Normal,", "'config');\n        console.info('parameters---->' + JSON.strin", "sole.info('Application onCreate')\n  },\n  onDestroy() {\n    con", "       .fontWeight(FontWeight.Bold)\n        .fontFamily(\"cursi", "Flex({\n      direction: FlexDirection.Column,\n      alignItems", " = null;\n    var kbController = null;\n\n    console.log(\"******", "ponent\nstruct MyComponent {\n  aboutToAppear() {\n    console.in", "rror) => {\n        console.error('Operation failed. Cause: ' +", "  onCreate() {\n    console.info('Application onCreate')\n  },\n ", "        .fontStyle(FontStyle.Italic)\n        .fontColor(Color.", "sole.info('Application onDestroy')\n  },\n}", "check\n\n\n@Entry\n@Component\nstruct TextInputTest {\n  @State text", "xport default function inputMethodEngineJsunit() {\n  describe(", "rection: FlexDirection.Column,\n      alignItems: ItemAlign.Cen", "ne) {\n      let options = {\n        uri: 'pages/input',\n      ", "eight(60)\n        .fontSize(30)\n        .fontWeight(FontWeight", "nsole.error('Operation failed. Cause: ' + JSON.stringify(error", "ait router.push(options);\n          await Utils.sleep(1000);\n ", "execute();\n        console.info('Operation successful. Data: '", "TS TEST')\n        .fontSize(50)\n        .fontWeight(FontWeight", "Length(20)\n        .onChange((value: string) => {\n          th", "onsole.info('Operation successful. Data: ' + JSON.stringify(Wa", "tSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontFa", "oller = null;\n\n    console.log(\"************* inputMethodEngin", "\nexport default {\n  onCreate() {\n    console.info('Application", "cursive\")\n        .fontStyle(FontStyle.Italic)\n        .fontCo", "getDefaultService('config');\n        console.info('parameters-", "nstance();\n        const expectExtend = new ExpectExtend({\n   ", "e.Italic)\n        .fontColor(Color.Red)\n        .maxLength(20)", "ctExtend);\n        const reportExtend = new ReportExtend(file)", " onDestroy() {\n    console.info('Application onDestroy')\n  },\n", "appInfoTest', function () {\n    var mKeyboardDelegate = null;\n", "rtExtend);\n        const configService = core.getDefaultServic", "n onCreate')\n  },\n  onDestroy() {\n    console.info('Applicatio", "  configService.setConfig(Want.parameters);\n        testsuite(", "ameters));\n        configService.setConfig(Want.parameters);\n ", "nter,\n      justifyContent: FlexAlign.Center\n    }) {\n      Te", "Want) => {\n        const core = Core.getInstance();\n        co", "tSize(50)\n        .fontWeight(FontWeight.Bold)\n    }\n    .widt"], "files": ["Utils.ets", "PasteBoardJsunit.test.js", "InputRequestJsunit.test.ets", "InputmethohJsunit.test.ets", "SystemTimeJsunit.test.js", "app.js", "UploadCallbackXTSJsunit.test.js", "Time.test.js", "RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "SystemTimerJsunit.test.js", "input.ets", "index.js", "app.ets", "InputmethodEngineJsunit.test.ets", "index.ets", "Publicfunction.js", "SystemTimeJsunit.Pertest.js", "List.test.ets", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "off", "api_method_all": "function off(type: 'beginWakeUp' | 'endWakeUp' | 'beginScreenOn' | 'endScreenOn' | 'beginScreenOff' | 'endScreenOff' \r\n      | 'unlockScreen' | 'beginExitAnimation' | 'screenlockEnabled' | 'beginSleep' | 'endSleep' | 'changeUser', callback: Callback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 53, "since": 9, "api_used": "\u662f", "lines": ["\n        screenLock.off('endWakeUp', (error) => {\n          if ", "g(\"Testupdate publicoffprogress totalSize =\" + data2);\n        ", "e.log(\"downloadTask off_progress:\" + JSON.stringify(totalSize))", "e.log(\"downloadTask off_pause err:\" + err);\n            expect(", "         uploadTask.off('progress', function (data1, data2) {\n ", "   systemPasteboard.off(contentChanges)\n\n        \n        var t", "\n        screenLock.off('screenlockEnabled', (error) => {\n     ", "e.log(\"downloadTask off_remove err:\" + err);\n            expect", "\n     * @tc.name    off_beginExitAnimation\n     * @tc.desc    R", "g(\"Testupdate publicoff =\" + data);\n            resolve(data);\n", "e.log(\"downloadTask off_complete err:\" + err);\n            expe", "\n     * @tc.name    off_endWakeUp\n     * @tc.desc    Remove the", "\n     * @tc.name    off_unlockScreen\n     * @tc.desc    Remove ", "       downloadTask.off('complete', (err) => {\n            cons", "       downloadTask.off('remove', (err) => {\n            consol", "\n        screenLock.off('beginSleep', (error) => {\n          if", "\n     * @tc.name    off_beginWakeUp\n     * @tc.desc    Remove t", "\n     * @tc.name    off_beginScreenOff\n     * @tc.desc    Remov", "\n        screenLock.off('changeUser', (error) => {\n          if", "\n        Updatetask.off(Type, function(data1 ,data2){\n         ", "\n     * @tc.name    off_changeUser\n     * @tc.desc    Remove th", "\n        screenLock.off('beginScreenOn', (error) => {\n         ", "\n        screenLock.off('unlockScreen', (error) => {\n          ", "\n     * @tc.name    off_endSleep\n     * @tc.desc    Remove the ", "\n     * @tc.name    off_endScreenOn\n     * @tc.desc    Remove t", "       downloadTask.off('fail', (err) => {\n            console.", "e.log(\"downloadTask off_fail err:\" + err);\n            expect(t", "\n        screenLock.off('beginWakeUp', (error) => {\n          i", "\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(Updatetask, Type){\n    return n", "\n     * @tc.name    off_beginSleep\n     * @tc.desc    Remove th", "e.log(\"downloadTask off_progress:\" + JSON.stringify(receivedSiz", "\n        screenLock.off('beginScreenOff', (error) => {\n        ", "   systemPasteboard.off(contentChanges)\n        \n        var te", "\n        screenLock.off('endSleep', (error) => {\n          if (", "\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type){\n    return new Promi", "   })\n    })\n}\n\n//\u5176\u4ed6off\u516c\u5171\u65b9\u6cd5\nfunction publicoff(Updatetask, Type", "request_upload_0006 off data1 =\" + data1);\n              consol", "       downloadTask.off('pause', (err) => {\n            console", "\n        screenLock.off('beginExitAnimation', (error) => {\n    ", "request_upload_0006 off data2 =\" + data2);\n            })\n     ", "g(\"Testupdate publicoffprogress uploadedSize =\" + data1);\n     ", "       downloadTask.off('progress', (receivedSize, totalSize) =", "\n        Updatetask.off(Type, function(data){\n            conso", "\n        screenLock.off('endScreenOn', (error) => {\n          i", "     })\n    })\n}\n\n//offprogress\u516c\u5171\u65b9\u6cd5\nfunction publicoffprogress(", "\n     * @tc.name    off_beginScreenOn\n     * @tc.desc    Remove", "\n     * @tc.name    off_screenlockEnabled\n     * @tc.desc    Re"], "files": ["RequestJsunit.test.ets", "ScreenLockJsunit.test.ets", "PasteBoardJsunit.test.js", "SystemTimerJsunit.test.js", "Publicfunction.js", "RequestDownloadTaskJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "sendScreenLockEvent", "api_method_all": "function sendScreenLockEvent(event: String, parameter: number, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 9, "since": 0, "api_used": "\u662f", "lines": ["reenLock_ScreenLock_sendScreenLockEvent_0100 end*************\");\n    });\n\n    c", "reenLock_ScreenLock_sendScreenLockEvent_0100 error \" + JSON.stringify(error));\n", "reenLock_ScreenLock_sendScreenLockEvent_0100\n     * @tc.name    sendScreenLockE", "reenLock_ScreenLock_sendScreenLockEvent_0100 start*************\");\n      try {\n", "\n     * @tc.name    sendScreenLockEvent\n     * @tc.desc    screenlockAPP send e", "reenLock_ScreenLock_sendScreenLockEvent_0100', 0, async function (done) {\n     ", "\n        screenLock.sendScreenLockEvent('clock', 1000, (error, result) => {\n   ", "ckAPP send event to sendScreenLockEvent\n     */\n    it('Miscservices_ScreenLock", "reenLock_ScreenLock_sendScreenLockEvent_0100 success \" + JSON.stringify(result)"], "files": ["ScreenLockJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "screenLock", "api_method_name": "sendScreenLockEvent", "api_method_all": "function sendScreenLockEvent(event: String, parameter: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}