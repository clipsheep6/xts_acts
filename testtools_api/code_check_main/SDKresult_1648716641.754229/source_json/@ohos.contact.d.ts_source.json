{"subsystem_ch": "\u7535\u8bdd\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "telephony", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.contact", "api": [{"api_class_name": "contact", "api_method_all": "declare namespace contact {\n  \n  function addContact(contact: Contact, callback: AsyncCallback<number>): void;\n  function addContact(contact: Contact): Promise<number>;\n\n  \n  function selectContact(callback: AsyncCallback<Array<Contact>>): void;\n  function selectContact(): Promise<Array<Contact>>;\n\n  \n  function deleteContact(key: string, callback: AsyncCallback<void>): void;\n  function deleteContact(key: string): Promise<void>;\n\n  \n  function queryContact(key: string, callback: AsyncCallback<Contact>): void;\n  function queryContact(key: string, holder: Holder, callback: AsyncCallback<Contact>): void;\n  function queryContact(key: string, attrs: ContactAttributes, callback: AsyncCallback<Contact>): void;\n  function queryContact(key: string, holder: Holder, attrs: ContactAttributes, callback: AsyncCallback<Contact>): void;\n  function queryContact(key: string, holder?: Holder, attrs?: ContactAttributes): Promise<Contact>;\n\n  \n  function queryContacts(callback: AsyncCallback<Array<Contact>>): void;\n  function queryContacts(holder: Holder, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContacts(attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContacts(holder: Holder, attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContacts(holder?: Holder, attrs?: ContactAttributes): Promise<Array<Contact>>;\n\n  \n  function queryContactsByEmail(email: string, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContactsByEmail(email: string, holder: Holder, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContactsByEmail(email: string, attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContactsByEmail(email: string, holder: Holder, attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContactsByEmail(email: string, holder?: Holder, attrs?: ContactAttributes): Promise<Array<Contact>>;\n\n  \n  function queryContactsByPhoneNumber(phoneNumber: string, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContactsByPhoneNumber(phoneNumber: string, holder: Holder, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContactsByPhoneNumber(phoneNumber: string, attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContactsByPhoneNumber(phoneNumber: string, holder: Holder, attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;\n  function queryContactsByPhoneNumber(phoneNumber: string, holder?: Holder, attrs?: ContactAttributes): Promise<Array<Contact>>;\n\n  \n  function queryGroups(callback: AsyncCallback<Array<Group>>): void;\n  function queryGroups(holder: Holder, callback: AsyncCallback<Array<Group>>): void;\n  function queryGroups(holder?: Holder): Promise<Array<Group>>;\n\n  \n  function queryHolders(callback: AsyncCallback<Array<Holder>>): void;\n  function queryHolders(): Promise<Array<Holder>>;\n\n  \n  function queryKey(id: number, callback: AsyncCallback<string>): void;\n  function queryKey(id: number, holder: Holder, callback: AsyncCallback<string>): void;\n  function queryKey(id: number, holder?: Holder): Promise<string>;\n\n  \n  function queryMyCard(callback: AsyncCallback<Contact>): void;\n  function queryMyCard(attrs: ContactAttributes, callback: AsyncCallback<Contact>): void;\n  function queryMyCard(attrs?: ContactAttributes): Promise<Contact>;\n\n  \n  function updateContact(contact: Contact, callback: AsyncCallback<void>): void;\n  function updateContact(contact: Contact, attrs: ContactAttributes, callback: AsyncCallback<void>): void;\n  function updateContact(contact: Contact, attrs?: ContactAttributes): Promise<void>;\n\n  \n  function isLocalContact(id: number, callback: AsyncCallback<boolean>): void;\n  function isLocalContact(id: number): Promise<boolean>;\n\n  \n  function isMyCard(id: number, callback: AsyncCallback<boolean>): void;\n  function isMyCard(id: number): Promise<boolean>;\n\n  \n  class Contact {\n    \n    static readonly INVALID_CONTACT_ID: -1\n\n    \n    readonly id: number\n\n    \n    readonly key: string\n\n    \n    contactAttributes: ContactAttributes\n\n    \n    emails: Email[]\n\n    \n    events: Event[]\n\n    \n    groups: Group[]\n\n    \n    imAddresses: ImAddress[]\n\n    \n    phoneNumbers: PhoneNumber[]\n\n    \n    portrait: Portrait\n\n    \n    postalAddresses: PostalAddress[]\n\n    \n    relations: Relation[]\n\n    \n    sipAddresses: SipAddress[]\n\n    \n    websites: Website[]\n\n    \n    name: Name\n\n    \n    nickName: NickName\n\n    \n    note: Note\n\n    \n    organization: Organization\n  }\n\n  \n  class ContactAttributes {\n    \n    attributes: Attribute[]\n  }\n\n  \n  enum Attribute {\n    \n    ATTR_CONTACT_EVENT,\n\n    \n    ATTR_EMAIL,\n\n    \n    ATTR_GROUP_MEMBERSHIP,\n\n    \n    ATTR_IM,\n\n    \n    ATTR_NAME,\n\n    \n    ATTR_NICKNAME,\n\n    \n    ATTR_NOTE,\n\n    \n    ATTR_ORGANIZATION,\n\n    \n    ATTR_PHONE,\n\n    \n    ATTR_PORTRAIT,\n\n    \n    ATTR_POSTAL_ADDRESS,\n\n    \n    ATTR_RELATION,\n\n    \n    ATTR_SIP_ADDRESS,\n\n    \n    ATTR_WEBSITE\n  }\n\n  \n  class Email {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly EMAIL_HOME: 1\n\n    \n    static readonly EMAIL_WORK: 2\n\n    \n    static readonly EMAIL_OTHER: 3\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    email: string\n\n    \n    labelName: string\n\n    \n    displayName: string\n\n    \n    labelId: number\n  }\n\n  \n  class Event {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly EVENT_ANNIVERSARY: 1\n\n    \n    static readonly EVENT_OTHER: 2\n\n    \n    static readonly EVENT_BIRTHDAY: 3\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    eventDate: string\n\n    \n    labelName: string\n\n    \n    labelId: number\n  }\n\n  \n  class Group {\n    \n    groupId: number\n\n    \n    title: string\n  }\n\n  \n  class Holder {\n    \n    readonly bundleName: string\n\n    \n    readonly displayName: string\n\n    \n    holderId: number\n  }\n\n  \n  class ImAddress {\n    \n    static readonly CUSTOM_LABEL: -1\n\n    \n    static readonly IM_AIM: 0\n\n    \n    static readonly IM_MSN: 1\n\n    \n    static readonly IM_YAHOO: 2\n\n    \n    static readonly IM_SKYPE: 3\n\n    \n    static readonly IM_QQ: 4\n\n    \n    static readonly IM_ICQ: 6\n\n    \n    static readonly IM_JABBER: 7\n\n    \n    static readonly INVALID_LABEL_ID: -2\n\n    \n    imAddress: string\n\n    \n    labelName: string\n\n    \n    labelId: number\n  }\n\n  \n  class Name {\n    \n    familyName: string\n\n    \n    familyNamePhonetic: string\n\n    \n    fullName: string\n\n    \n    givenName: string\n\n    \n    givenNamePhonetic: string\n\n    \n    middleName: string\n\n    \n    middleNamePhonetic: string\n\n    \n    namePrefix: string\n\n    \n    nameSuffix: string\n  }\n\n  \n  class NickName {\n    \n    nickName: string\n  }\n\n  \n  class Note {\n    \n    noteContent: string\n  }\n\n  \n  class Organization {\n    \n    name: string\n\n    \n    title: string\n  }\n\n  \n  class PhoneNumber {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly NUM_HOME: 1\n\n    \n    static readonly NUM_MOBILE: 2\n\n    \n    static readonly NUM_WORK: 3\n\n    \n    static readonly NUM_FAX_WORK: 4\n\n    \n    static readonly NUM_FAX_HOME: 5\n\n    \n    static readonly NUM_PAGER: 6\n\n    \n    static readonly NUM_OTHER: 7\n\n    \n    static readonly NUM_CALLBACK: 8\n\n    \n    static readonly NUM_CAR: 9\n\n    \n    static readonly NUM_COMPANY_MAIN: 10\n\n    \n    static readonly NUM_ISDN: 11\n\n    \n    static readonly NUM_MAIN: 12\n\n    \n    static readonly NUM_OTHER_FAX: 13\n\n    \n    static readonly NUM_RADIO: 14\n\n    \n    static readonly NUM_TELEX: 15\n\n    \n    static readonly NUM_TTY_TDD: 16\n\n    \n    static readonly NUM_WORK_MOBILE: 17\n\n    \n    static readonly NUM_WORK_PAGER: 18\n\n    \n    static readonly NUM_ASSISTANT: 19\n\n    \n    static readonly NUM_MMS: 20\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    labelName: string\n\n    \n    phoneNumber: string\n\n    \n    labelId: number\n  }\n\n  \n  class Portrait {\n    \n    uri: string\n  }\n\n  \n  class PostalAddress {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly ADDR_HOME: 1\n\n    \n    static readonly ADDR_WORK: 2\n\n    \n    static readonly ADDR_OTHER: 3\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    city: string\n\n    \n    country: string\n\n    \n    labelName: string\n\n    \n    neighborhood: string\n\n    \n    pobox: string\n\n    \n    postalAddress: string\n\n    \n    postcode: string\n\n    \n    region: string\n\n    \n    street: string\n\n    \n    labelId: number\n  }\n\n  \n  class Relation {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly RELATION_ASSISTANT: 1\n\n    \n    static readonly RELATION_BROTHER: 2\n\n    \n    static readonly RELATION_CHILD: 3\n\n    \n    static readonly RELATION_DOMESTIC_PARTNER: 4\n\n    \n    static readonly RELATION_FATHER: 5\n\n    \n    static readonly RELATION_FRIEND: 6\n\n    \n    static readonly RELATION_MANAGER: 7\n\n    \n    static readonly RELATION_MOTHER: 8\n\n    \n    static readonly RELATION_PARENT: 9\n\n    \n    static readonly RELATION_PARTNER: 10\n\n    \n    static readonly RELATION_REFERRED_BY: 11\n\n    \n    static readonly RELATION_RELATIVE: 12\n\n    \n    static readonly RELATION_SISTER: 13\n\n    \n    static readonly RELATION_SPOUSE: 14\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    labelName: string\n\n    \n    relationName: string\n\n    \n    labelId: number\n  }\n\n  \n  class SipAddress {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly SIP_HOME: 1\n\n    \n    static readonly SIP_WORK: 2\n\n    \n    static readonly SIP_OTHER: 3\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    labelName: string\n\n    \n    sipAddress: string\n\n    \n    labelId: number\n  }\n\n  \n  class Website {\n    \n    website: string\n  }\n}", "api_method_name": "contact", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 5360, "since": 0, "api_used": "\u662f", "lines": ["", "contactsdataability/contacts/deleted_raw_contac", "6666\",\n            \"contacted_count\": 2,\n      ", "dataability\";\nconst contactUri = \"dataability:/", "n testsuite() {\n  //contact\n  ContactClassTest(", "ctClassTest from './contact/ContactClass_test.j", "contactsdataability/contacts/contact_data\";\ncon", "ataability/contacts/contact_data\";\nconst groupU", "ontacts/deleted_raw_contact\";\nconst profileRawC", "tact\";\nconst profilecontactUri = \"dataability:/", "[\"sort\", \"6666\"], [\"contacted_count\", \"2\"],\n   ", "contactsdataability/contacts/groups\";\nconst con", " GroupsTest from './contact/Groups_test.js'\nimp", "          [\"lastest_contacted_time\", \"2\"], [\"fa", "icemailTest from './contact/Voicemail_test.js'\n", "           \"lastest_contacted_time\": 21,\n      ", "CalllogTest from './contact/Calllog_test.js'\nim", "ability:///com.ohos.contactsdataability/contact", "contactsdataability/contacts/raw_contact\";\ncons", "           \"lastest_contacted_time\": 2,\n       ", "ability:///com.ohos.contactsdataability/profile", "ontactsTest from './contact/Contacts_test.js'\ni", "ataability/contacts/contact_blocklist\";\nconst d", "dataability/profile/contact_data\";\nconst profil", "actCardTest from './contact/ContactCard_test.js", "contactsdataability/contacts/contact\";\nconst ra", "6661\",\n            \"contacted_count\": 21,\n     ", "ecoveryTest from './contact/recovery_test.js'\ni", "acts/groups\";\nconst contactBlocklistUri = \"data", "bility/contacts/raw_contact\";\nconst contactData", "dataability/profile/contact_blocklist\";\nconst p", "terfaceTest from './contact/ObjectInterface_tes", "dataability/profile/contact\";\nconst profileCont", "profile/deleted_raw_contact\";\n\nconst URI_CALLLO", "contactsdataability/contacts/contact_blocklist\"", "ataability/contacts/contact\";\nconst rawContactU", "ability:///com.ohos.contactsdataability\";\nconst", "ntacterTest from './contact/ContacterJsunit.ets", "ability/profile/raw_contact\";\nconst profilecont", "raw_contact\";\nconst contactDataUri = \"dataabili"], "files": ["ContactMerge_test.js", "Stability_test.js", "ContacterJsunit.ets", "Contacts_test.js", "ContactCard_test.js", "recovery_test.js", "Performance_test.js", "SimManager.test.js", "ObjectInterface_test.js", "List.test.ets", "common.js", "Groups_test.js", "ContactClass_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "addContact", "api_method_all": "function addContact(contact: Contact, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.addContact(contactDataError);\n                cons", "= await contactsapi.addContact(contactData);\n            console.info(", "= await contactsapi.addContact(contactData);\n                console.i"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "addContact", "api_method_all": "function addContact(contact: Contact): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "selectContact", "api_method_all": "function selectContact(callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "selectContact", "api_method_all": "function selectContact(): Promise<Array<Contact>>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "deleteContact", "api_method_all": "function deleteContact(key: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.deleteContact(deleteId);\n                var gDelete "], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "deleteContact", "api_method_all": "function deleteContact(key: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContact", "api_method_all": "function queryContact(key: string, callback: AsyncCallback<Contact>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 27, "since": 0, "api_used": "\u662f", "lines": ["     async function queryContacted() {\n                var resultColumns", "= await contactsapi.queryContacts(holder);\n                console.info(", "              await queryContactDataInsert(DAHelper, rawContactIdFirst);", "              await queryContacted();\n                await deleteRawCon", "= await contactsapi.queryContacts(holder, ContactAttributes);\n          ", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n    ", "= await contactsapi.queryContact(queryId, holder, ContactAttributes);\n  ", "= await contactsapi.queryContact(queryId, holder);\n                conso", "= await contactsapi.queryContactsByEmail(email, holder);\n               ", "= await contactsapi.queryContact(queryId);\n                console.info(", "     async function queryContactDataInsert(DAHelper, rawContactIdFirst) ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, Cont", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttri", "= await contactsapi.queryContactsByEmail(email);\n                console", "= await contactsapi.queryContact(queryId);\n                if (resultSet", "     async function queryContactDataInsertTwo(DAHelper, rawContactIdSeco", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n           ", "= await contactsapi.queryContactsByEmail(email, holder, ContactAttribute", "= await contactsapi.queryContacts(ContactAttributes);\n                if", "= await contactsapi.queryContacts();\n                console.info(\"conta", "              await queryContactDataInsertTwo(DAHelper, rawContactIdSeco", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n   ", "= await contactsapi.queryContacts(ContactAttributes);\n                co"], "files": ["ContactMerge_test.js", "Contacts_test.js", "ContactCard_test.js", "ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContact", "api_method_all": "function queryContact(key: string, holder: Holder, callback: AsyncCallback<Contact>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 27, "since": 0, "api_used": "\u662f", "lines": ["     async function queryContacted() {\n                var resultColumns", "= await contactsapi.queryContacts(holder);\n                console.info(", "              await queryContactDataInsert(DAHelper, rawContactIdFirst);", "              await queryContacted();\n                await deleteRawCon", "= await contactsapi.queryContacts(holder, ContactAttributes);\n          ", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n    ", "= await contactsapi.queryContact(queryId, holder, ContactAttributes);\n  ", "= await contactsapi.queryContact(queryId, holder);\n                conso", "= await contactsapi.queryContactsByEmail(email, holder);\n               ", "= await contactsapi.queryContact(queryId);\n                console.info(", "     async function queryContactDataInsert(DAHelper, rawContactIdFirst) ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, Cont", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttri", "= await contactsapi.queryContactsByEmail(email);\n                console", "= await contactsapi.queryContact(queryId);\n                if (resultSet", "     async function queryContactDataInsertTwo(DAHelper, rawContactIdSeco", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n           ", "= await contactsapi.queryContactsByEmail(email, holder, ContactAttribute", "= await contactsapi.queryContacts(ContactAttributes);\n                if", "= await contactsapi.queryContacts();\n                console.info(\"conta", "              await queryContactDataInsertTwo(DAHelper, rawContactIdSeco", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n   ", "= await contactsapi.queryContacts(ContactAttributes);\n                co"], "files": ["ContactMerge_test.js", "Contacts_test.js", "ContactCard_test.js", "ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContact", "api_method_all": "function queryContact(key: string, attrs: ContactAttributes, callback: AsyncCallback<Contact>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 27, "since": 0, "api_used": "\u662f", "lines": ["     async function queryContacted() {\n                var resultColumns", "= await contactsapi.queryContacts(holder);\n                console.info(", "              await queryContactDataInsert(DAHelper, rawContactIdFirst);", "              await queryContacted();\n                await deleteRawCon", "= await contactsapi.queryContacts(holder, ContactAttributes);\n          ", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n    ", "= await contactsapi.queryContact(queryId, holder, ContactAttributes);\n  ", "= await contactsapi.queryContact(queryId, holder);\n                conso", "= await contactsapi.queryContactsByEmail(email, holder);\n               ", "= await contactsapi.queryContact(queryId);\n                console.info(", "     async function queryContactDataInsert(DAHelper, rawContactIdFirst) ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, Cont", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttri", "= await contactsapi.queryContactsByEmail(email);\n                console", "= await contactsapi.queryContact(queryId);\n                if (resultSet", "     async function queryContactDataInsertTwo(DAHelper, rawContactIdSeco", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n           ", "= await contactsapi.queryContactsByEmail(email, holder, ContactAttribute", "= await contactsapi.queryContacts(ContactAttributes);\n                if", "= await contactsapi.queryContacts();\n                console.info(\"conta", "              await queryContactDataInsertTwo(DAHelper, rawContactIdSeco", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n   ", "= await contactsapi.queryContacts(ContactAttributes);\n                co"], "files": ["ContactMerge_test.js", "Contacts_test.js", "ContactCard_test.js", "ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContact", "api_method_all": "function queryContact(key: string, holder: Holder, attrs: ContactAttributes, callback: AsyncCallback<Contact>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 27, "since": 0, "api_used": "\u662f", "lines": ["     async function queryContacted() {\n                var resultColumns", "= await contactsapi.queryContacts(holder);\n                console.info(", "              await queryContactDataInsert(DAHelper, rawContactIdFirst);", "              await queryContacted();\n                await deleteRawCon", "= await contactsapi.queryContacts(holder, ContactAttributes);\n          ", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n    ", "= await contactsapi.queryContact(queryId, holder, ContactAttributes);\n  ", "= await contactsapi.queryContact(queryId, holder);\n                conso", "= await contactsapi.queryContactsByEmail(email, holder);\n               ", "= await contactsapi.queryContact(queryId);\n                console.info(", "     async function queryContactDataInsert(DAHelper, rawContactIdFirst) ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, Cont", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttri", "= await contactsapi.queryContactsByEmail(email);\n                console", "= await contactsapi.queryContact(queryId);\n                if (resultSet", "     async function queryContactDataInsertTwo(DAHelper, rawContactIdSeco", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n           ", "= await contactsapi.queryContactsByEmail(email, holder, ContactAttribute", "= await contactsapi.queryContacts(ContactAttributes);\n                if", "= await contactsapi.queryContacts();\n                console.info(\"conta", "              await queryContactDataInsertTwo(DAHelper, rawContactIdSeco", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n   ", "= await contactsapi.queryContacts(ContactAttributes);\n                co"], "files": ["ContactMerge_test.js", "Contacts_test.js", "ContactCard_test.js", "ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContact", "api_method_all": "function queryContact(key: string, holder?: Holder, attrs?: ContactAttributes): Promise<Contact>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContacts", "api_method_all": "function queryContacts(callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContacts();\n                console.info(\"contac", "= await contactsapi.queryContacts(holder, ContactAttributes);\n           ", "= await contactsapi.queryContactsByEmail(email, holder, ContactAttributes", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttrib", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n            ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, Conta", "= await contactsapi.queryContacts(holder);\n                console.info(\"", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n    ", "= await contactsapi.queryContactsByEmail(email);\n                console.", "= await contactsapi.queryContacts(ContactAttributes);\n                con", "= await contactsapi.queryContactsByEmail(email, holder);\n                ", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n     ", "= await contactsapi.queryContacts(ContactAttributes);\n                if "], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContacts", "api_method_all": "function queryContacts(holder: Holder, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContacts();\n                console.info(\"contac", "= await contactsapi.queryContacts(holder, ContactAttributes);\n           ", "= await contactsapi.queryContactsByEmail(email, holder, ContactAttributes", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttrib", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n            ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, Conta", "= await contactsapi.queryContacts(holder);\n                console.info(\"", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n    ", "= await contactsapi.queryContactsByEmail(email);\n                console.", "= await contactsapi.queryContacts(ContactAttributes);\n                con", "= await contactsapi.queryContactsByEmail(email, holder);\n                ", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n     ", "= await contactsapi.queryContacts(ContactAttributes);\n                if "], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContacts", "api_method_all": "function queryContacts(attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContacts();\n                console.info(\"contac", "= await contactsapi.queryContacts(holder, ContactAttributes);\n           ", "= await contactsapi.queryContactsByEmail(email, holder, ContactAttributes", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttrib", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n            ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, Conta", "= await contactsapi.queryContacts(holder);\n                console.info(\"", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n    ", "= await contactsapi.queryContactsByEmail(email);\n                console.", "= await contactsapi.queryContacts(ContactAttributes);\n                con", "= await contactsapi.queryContactsByEmail(email, holder);\n                ", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n     ", "= await contactsapi.queryContacts(ContactAttributes);\n                if "], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContacts", "api_method_all": "function queryContacts(holder: Holder, attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 15, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContacts();\n                console.info(\"contac", "= await contactsapi.queryContacts(holder, ContactAttributes);\n           ", "= await contactsapi.queryContactsByEmail(email, holder, ContactAttributes", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttrib", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n            ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, Conta", "= await contactsapi.queryContacts(holder);\n                console.info(\"", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n    ", "= await contactsapi.queryContactsByEmail(email);\n                console.", "= await contactsapi.queryContacts(ContactAttributes);\n                con", "= await contactsapi.queryContactsByEmail(email, holder);\n                ", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n     ", "= await contactsapi.queryContacts(ContactAttributes);\n                if "], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContacts", "api_method_all": "function queryContacts(holder?: Holder, attrs?: ContactAttributes): Promise<Array<Contact>>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContactsByEmail", "api_method_all": "function queryContactsByEmail(email: string, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContactsByEmail(email, holder, ContactAttributes);\n    ", "= await contactsapi.queryContactsByEmail(email, holder);\n                console", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n            ", "= await contactsapi.queryContactsByEmail(email);\n                console.info(\"c", "= await contactsapi.queryContactsByEmail(email);\n                console.info(\"a"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContactsByEmail", "api_method_all": "function queryContactsByEmail(email: string, holder: Holder, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContactsByEmail(email, holder, ContactAttributes);\n    ", "= await contactsapi.queryContactsByEmail(email, holder);\n                console", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n            ", "= await contactsapi.queryContactsByEmail(email);\n                console.info(\"c", "= await contactsapi.queryContactsByEmail(email);\n                console.info(\"a"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContactsByEmail", "api_method_all": "function queryContactsByEmail(email: string, attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContactsByEmail(email, holder, ContactAttributes);\n    ", "= await contactsapi.queryContactsByEmail(email, holder);\n                console", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n            ", "= await contactsapi.queryContactsByEmail(email);\n                console.info(\"c", "= await contactsapi.queryContactsByEmail(email);\n                console.info(\"a"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContactsByEmail", "api_method_all": "function queryContactsByEmail(email: string, holder: Holder, attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContactsByEmail(email, holder, ContactAttributes);\n    ", "= await contactsapi.queryContactsByEmail(email, holder);\n                console", "= await contactsapi.queryContactsByEmail(email, ContactAttributes);\n            ", "= await contactsapi.queryContactsByEmail(email);\n                console.info(\"c", "= await contactsapi.queryContactsByEmail(email);\n                console.info(\"a"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContactsByEmail", "api_method_all": "function queryContactsByEmail(email: string, holder?: Holder, attrs?: ContactAttributes): Promise<Array<Contact>>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContactsByPhoneNumber", "api_method_all": "function queryContactsByPhoneNumber(phoneNumber: string, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n                console.i", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, ContactAttributes)", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttributes);\n      ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n                c"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContactsByPhoneNumber", "api_method_all": "function queryContactsByPhoneNumber(phoneNumber: string, holder: Holder, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n                console.i", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, ContactAttributes)", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttributes);\n      ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n                c"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContactsByPhoneNumber", "api_method_all": "function queryContactsByPhoneNumber(phoneNumber: string, attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n                console.i", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, ContactAttributes)", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttributes);\n      ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n                c"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContactsByPhoneNumber", "api_method_all": "function queryContactsByPhoneNumber(phoneNumber: string, holder: Holder, attrs: ContactAttributes, callback: AsyncCallback<Array<Contact>>): void;", "api_type": "callback", "api_args_count": 4, "api_level": null, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryContactsByPhoneNumber(phoneNumber);\n                console.i", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder, ContactAttributes)", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, ContactAttributes);\n      ", "= await contactsapi.queryContactsByPhoneNumber(phoneNumber, holder);\n                c"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryContactsByPhoneNumber", "api_method_all": "function queryContactsByPhoneNumber(phoneNumber: string, holder?: Holder, attrs?: ContactAttributes): Promise<Array<Contact>>;", "api_type": "Promise", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryGroups", "api_method_all": "function queryGroups(callback: AsyncCallback<Array<Group>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryGroups();\n                console.info(\"contac", "= await contactsapi.queryGroups(holder);\n                console.info(\""], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryGroups", "api_method_all": "function queryGroups(holder: Holder, callback: AsyncCallback<Array<Group>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryGroups();\n                console.info(\"contac", "= await contactsapi.queryGroups(holder);\n                console.info(\""], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryGroups", "api_method_all": "function queryGroups(holder?: Holder): Promise<Array<Group>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryHolders", "api_method_all": "function queryHolders(callback: AsyncCallback<Array<Holder>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryHolders();\n                console.info(\"contac"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryHolders", "api_method_all": "function queryHolders(): Promise<Array<Holder>>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryKey", "api_method_all": "function queryKey(id: number, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryKey(idtest, holder);\n                consol", "= await contactsapi.queryKey(idtest);\n                console.info(\""], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryKey", "api_method_all": "function queryKey(id: number, holder: Holder, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryKey(idtest, holder);\n                consol", "= await contactsapi.queryKey(idtest);\n                console.info(\""], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryKey", "api_method_all": "function queryKey(id: number, holder?: Holder): Promise<string>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryMyCard", "api_method_all": "function queryMyCard(callback: AsyncCallback<Contact>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryMyCard(ContactAttributes);\n                con", "= await contactsapi.queryMyCard(holder);\n                console.info(\""], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryMyCard", "api_method_all": "function queryMyCard(attrs: ContactAttributes, callback: AsyncCallback<Contact>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["= await contactsapi.queryMyCard(ContactAttributes);\n                con", "= await contactsapi.queryMyCard(holder);\n                console.info(\""], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "queryMyCard", "api_method_all": "function queryMyCard(attrs?: ContactAttributes): Promise<Contact>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "updateContact", "api_method_all": "function updateContact(contact: Contact, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["}\n            await updateContactData(\"8554544444\", dataIdTwo, \"contact_q", "}\n            await updateContactData(\"owjiuh111\", dataId, \"contact_query", ".info(testName + \"  updateContactData: code = \" + code);\n            slee", "= await contactsapi.updateContact(updateValues, condition);\n             ", "     async function updateContactData(updateDataValue, contactDataId, tes"], "files": ["ContactMerge_test.js", "ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "updateContact", "api_method_all": "function updateContact(contact: Contact, attrs: ContactAttributes, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["}\n            await updateContactData(\"8554544444\", dataIdTwo, \"contact_q", "}\n            await updateContactData(\"owjiuh111\", dataId, \"contact_query", ".info(testName + \"  updateContactData: code = \" + code);\n            slee", "= await contactsapi.updateContact(updateValues, condition);\n             ", "     async function updateContactData(updateDataValue, contactDataId, tes"], "files": ["ContactMerge_test.js", "ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "updateContact", "api_method_all": "function updateContact(contact: Contact, attrs?: ContactAttributes): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "isLocalContact", "api_method_all": "function isLocalContact(id: number, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["number  contactsApi_isLocalContact_test_2700\n     * @tc.name    Query isLo", "bnormal_contactsApi_isLocalContact_test_3900\n     * @tc.name    contactsAp", "bnormal_contactsApi_isLocalContact_test_3900 : query isExist = \" + isExist", "* @tc.name    Query isLocalContact exist\n     * @tc.desc    Function test\n", "Message contactsApi_isLocalContact_test_2700 isExist = \" + isExist);\n     ", "bnormal_contactsApi_isLocalContact_test_3900 query error = \" + error);\n   ", "= await contactsapi.isLocalContact(id);\n                console.info(\"logM", "= await contactsapi.isLocalContact(id);\n                console.info(\"abno", "name    contactsApi_isLocalContact is not exist\n     * @tc.desc    Functio", "bnormal_contactsApi_isLocalContact_test_3900\", 0, async function (done) {\n", "    it(\"contactsApi_isLocalContact_test_2700\", 0, async function (done) {\n", "e.info(\"contactsApi_isLocalContact_test_2700 query error = \" + error);\n   "], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "isLocalContact", "api_method_all": "function isLocalContact(id: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "isMyCard", "api_method_all": "function isMyCard(id: number, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": ["bnormal_contactsApi_isMyCard_test_3800\", 0, async function (done) {\n", "bnormal_contactsApi_isMyCard_test_3800 : query isExist = \" + isExist", "    it(\"contactsApi_isMyCard_test_2600\", 0, async function (done) {\n", "bnormal_contactsApi_isMyCard_test_3800\n     * @tc.name    isMyCard i", "number  contactsApi_isMyCard_test_2600\n     * @tc.name    Query myca", "= await contactsapi.isMyCard(id);\n                console.info(\"abno", "e.info(\"contactsApi_isMyCard_test_2600 query error = \" + error);\n   ", "e.info(\"contactsApi_isMyCard_test_2600 : query isExist = \" + isExist", "= await contactsapi.isMyCard(id);\n                console.info(\"cont", "bnormal_contactsApi_isMyCard_test_3800 query error = \" + error);\n   ", "\n     * @tc.name    isMyCard is not exist\n     * @tc.desc    Functio"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "contact", "api_method_name": "isMyCard", "api_method_all": "function isMyCard(id: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Contact", "api_method_all": "class Contact {\n    \n    static readonly INVALID_CONTACT_ID: -1\n\n    \n    readonly id: number\n\n    \n    readonly key: string\n\n    \n    contactAttributes: ContactAttributes\n\n    \n    emails: Email[]\n\n    \n    events: Event[]\n\n    \n    groups: Group[]\n\n    \n    imAddresses: ImAddress[]\n\n    \n    phoneNumbers: PhoneNumber[]\n\n    \n    portrait: Portrait\n\n    \n    postalAddresses: PostalAddress[]\n\n    \n    relations: Relation[]\n\n    \n    sipAddresses: SipAddress[]\n\n    \n    websites: Website[]\n\n    \n    name: Name\n\n    \n    nickName: NickName\n\n    \n    note: Note\n\n    \n    organization: Organization\n  }", "api_method_name": "Contact", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 4020, "since": 7, "api_used": "\u662f", "lines": ["() {\n        var rawContact = {\n            \"ph", "est from './contact/ContactCard_test.js'\nimport", "},\n    getProfileRawContact:\n    function () {\n", "est from './contact/Contacts_test.js'\nimport Gr", "const profileDeletedContactsUri = \"dataability:", "  };\n        var rawContactValuesTwo = {\n      ", ";\n        return rawContact;\n    },\n    getProf", "rray;\n    },\n    getContactBatchCompany:\n    fu", "ard_test.js'\nimport ContactsTest from './contac", "t\";\nconst deletedRawContactUri = \"dataability:/", "},\n    getProfileRawContactUpdate:\n    function", "ail_test.js'\nimport ContactClassTest from './co", "log_test.js'\nimport ContactCardTest from './con", "() {\n        var rawContactValuesOne = {\n      ", " getProfileUpdateRawContact:\n    function () {\n", " ]);\n        return ContactDataMap;\n    },\n    ", "/contact\";\nconst rawContactUri = \"dataability:/", "ass_test.js'\nimport ContacterTest from './conta", "tact\";\nconst profileContactDataUri = \"dataabili", ";\n        return rawContactMap;\n    },\n    getP", "   },\n    getProfileContactDataUpdateMap:\n    f", "   },\n    getProfileContactDataMap:\n    functio", "est from './contact/ContacterJsunit.ets'\n\nexpor", "   },\n    getProfileContactData:\n    function (", "},\n    getProfileRawContactUpdateMap:\n    funct", "},\n    getProfileRawContactMap:\n    function ()", "() {\n        var rawContactMap = new Map([\n    ", "est from './contact/ContactClass_test.js'\nimpor", "    getProfileUpdateContactData:\n    function (", "    getProfileUpdateContactDataMap:\n    functio", "on () {\n        var ContactDataMap = new Map([\n", "ntactClassTest();\n  ContacterTest();\n  CalllogT", " getProfileUpdateRawContactMap:\n    function ()", "   },\n    getProfileContactDataUpdate:\n    func", "\n  CalllogTest();\n  ContactCardTest();\n  Contac", "t\";\nconst profileRawContactUri = \"dataability:/", "ontactCardTest();\n  ContactsTest();\n  GroupsTes", "e() {\n  //contact\n  ContactClassTest();\n  Conta"], "files": ["ContactMerge_test.js", "Stability_test.js", "ContacterJsunit.ets", "Contacts_test.js", "ContactCard_test.js", "recovery_test.js", "Performance_test.js", "ObjectInterface_test.js", "List.test.ets", "common.js", "ContactClass_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ContactAttributes", "api_method_all": "class ContactAttributes {\n    \n    attributes: Attribute[]\n  }", "api_method_name": "ContactAttributes", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 18, "since": 0, "api_used": "\u662f", "lines": [" };\n            var ContactAttributes = {\n               ", "Number(phoneNumber, ContactAttributes);\n                c", "mail(email, holder, ContactAttributes);\n                c", "tsapi.queryContacts(ContactAttributes);\n                c", ") {\n            var ContactAttributes = {\n               ", "3\";\n            var ContactAttributes = {\n               ", "ct(queryId, holder, ContactAttributes);\n                c", "l\";\n            var ContactAttributes = {\n               ", "actsapi.queryMyCard(ContactAttributes);\n                c", "tsapi.queryContacts(ContactAttributes);\n                i", "tactsByEmail(email, ContactAttributes);\n                c", "eryContacts(holder, ContactAttributes);\n                c", "honeNumber, holder, ContactAttributes);\n                c"], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_all": "enum Attribute {\n    \n    ATTR_CONTACT_EVENT,\n\n    \n    ATTR_EMAIL,\n\n    \n    ATTR_GROUP_MEMBERSHIP,\n\n    \n    ATTR_IM,\n\n    \n    ATTR_NAME,\n\n    \n    ATTR_NICKNAME,\n\n    \n    ATTR_NOTE,\n\n    \n    ATTR_ORGANIZATION,\n\n    \n    ATTR_PHONE,\n\n    \n    ATTR_PORTRAIT,\n\n    \n    ATTR_POSTAL_ADDRESS,\n\n    \n    ATTR_RELATION,\n\n    \n    ATTR_SIP_ADDRESS,\n\n    \n    ATTR_WEBSITE\n  }", "api_method_name": "Attribute", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 78, "since": 0, "api_used": "\u662f", "lines": ["         expect(callAttributeOptions.startTime ==", "         expect(callAttributeOptions.speakerphone", "     expect(contact.Attribute.ATTR_WEBSITE === 0)", "\n            contactAttributes: {\n               ", "     expect(contact.Attribute.ATTR_RELATION === 1", "     expect(contact.Attribute.ATTR_SIP_ADDRESS ==", "     expect(contact.Attribute.ATTR_PORTRAIT === 0", "     expect(contact.Attribute.ATTR_EMAIL === 0).a", "         expect(callAttributeOptions.isEcc === IS", "('Telephony_contact_Attribute_0200', 0, async fun", "     expect(contact.Attribute.ATTR_CONTACT_EVENT ", "            let callAttributeOptions = new CallAt", "     expect(contact.Attribute.ATTR_PORTRAIT === 1", "     expect(contact.Attribute.ATTR_WEBSITE === 1)", "(\"Telephony_contact_Attribute_0100 end\")\n      do", "     expect(contact.Attribute.ATTR_NOTE === 0).as", "     expect(contact.Attribute.ATTR_RELATION === 0", "         expect(callAttributeOptions.accountNumbe", "('Telephony_contact_Attribute_0100', 0, async fun", "(\"Telephony_contact_Attribute_0200 end\")\n      do", "     expect(contact.Attribute.ATTR_PHONE === 0).a", "         expect(callAttributeOptions.conferenceSt", "     expect(contact.Attribute.ATTR_IM === 0).asse", "     expect(contact.Attribute.ATTR_POSTAL_ADDRESS", "     expect(contact.Attribute.ATTR_NICKNAME === 1", "     expect(contact.Attribute.ATTR_IM === 1).asse", "     expect(contact.Attribute.ATTR_NOTE === 1).as", ";\n    }\n}\nclass CallAttributeOptions {\n    constr", "teOptions = new CallAttributeOptions(AUTO_ACCEPT_", "         expect(callAttributeOptions.callState ==", "     expect(contact.Attribute.ATTR_EMAIL === 1).a", "         expect(callAttributeOptions.callId === T", "     expect(contact.Attribute.ATTR_NAME === 0).as", "(\"Telephony_contact_Attribute_0100 start\")\n      ", "     expect(contact.Attribute.ATTR_PHONE === 1).a", "         var ContactAttributes = {\n              ", "     expect(contact.Attribute.ATTR_NICKNAME === 0", "         expect(callAttributeOptions.accountId ==", "         expect(callAttributeOptions.callType ===", "ager ${toString(callAttributeOptions)}`);\n       ", "     expect(contact.Attribute.ATTR_GROUP_MEMBERSH", "     expect(contact.Attribute.ATTR_NAME === 1).as", "         expect(callAttributeOptions.videoState =", "     expect(contact.Attribute.ATTR_ORGANIZATION ="], "files": ["ContacterJsunit.ets", "CallJsunit.test.ets", "ConvertOptionsJsunit.test.ets", "ObjectInterface_test.js", "CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_CONTACT_EVENT", "api_method_all": "ATTR_CONTACT_EVENT,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_CONTACT_EVENT === 0).assertTrue()", "t(contact.Attribute.ATTR_CONTACT_EVENT === 1).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_EMAIL", "api_method_all": "ATTR_EMAIL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_EMAIL === 1).assertTrue()", "t(contact.Attribute.ATTR_EMAIL === 0).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_GROUP_MEMBERSHIP", "api_method_all": "ATTR_GROUP_MEMBERSHIP,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_GROUP_MEMBERSHIP === 1).assertTrue()", "t(contact.Attribute.ATTR_GROUP_MEMBERSHIP === 0).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_IM", "api_method_all": "ATTR_IM,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_IM === 0).assertTrue()", "t(contact.Attribute.ATTR_IM === 1).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_NAME", "api_method_all": "ATTR_NAME,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_NAME === 0).assertTrue()", "t(contact.Attribute.ATTR_NAME === 1).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_NICKNAME", "api_method_all": "ATTR_NICKNAME,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_NICKNAME === 0).assertTrue()", "t(contact.Attribute.ATTR_NICKNAME === 1).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_NOTE", "api_method_all": "ATTR_NOTE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_NOTE === 0).assertTrue()", "t(contact.Attribute.ATTR_NOTE === 1).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_ORGANIZATION", "api_method_all": "ATTR_ORGANIZATION,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_ORGANIZATION === 1).assertTrue()", "t(contact.Attribute.ATTR_ORGANIZATION === 0).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_PHONE", "api_method_all": "ATTR_PHONE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_PHONE === 1).assertTrue()", "t(contact.Attribute.ATTR_PHONE === 0).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_PORTRAIT", "api_method_all": "ATTR_PORTRAIT,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_PORTRAIT === 0).assertTrue()", "t(contact.Attribute.ATTR_PORTRAIT === 1).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_POSTAL_ADDRESS", "api_method_all": "ATTR_POSTAL_ADDRESS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_POSTAL_ADDRESS === 0).assertTrue()", "t(contact.Attribute.ATTR_POSTAL_ADDRESS === 1).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_RELATION", "api_method_all": "ATTR_RELATION,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_RELATION === 0).assertTrue()", "t(contact.Attribute.ATTR_RELATION === 1).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Attribute", "api_method_name": "ATTR_SIP_ADDRESS", "api_method_all": "ATTR_SIP_ADDRESS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["t(contact.Attribute.ATTR_SIP_ADDRESS === 1).assertTrue()", "t(contact.Attribute.ATTR_SIP_ADDRESS === 0).assertTrue()"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Email", "api_method_all": "class Email {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly EMAIL_HOME: 1\n\n    \n    static readonly EMAIL_WORK: 2\n\n    \n    static readonly EMAIL_OTHER: 3\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    email: string\n\n    \n    labelName: string\n\n    \n    displayName: string\n\n    \n    labelId: number\n  }", "api_method_name": "Email", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 51, "since": 0, "api_used": "\u662f", "lines": ["    await fuzzyQueryEmail(DAHelper, rawContac", " async function dataEmailInsert(DAHelper, raw", "     expect(contact.Email.email !== \"email2\")", "async function queryEmailInsert(DAHelper, raw", "sapi.queryContactsByEmail(email);\n           ", "(\"Telephony_contact_Email_0200 start\")\n      ", "     expect(contact.Email.CUSTOM_LABEL === 0)", "    await beforeDataEmailInsert(DAHelper, raw", "     expect(contact.Email.EMAIL_WORK === 2).a", "sapi.queryContactsByEmail(email, holder, Cont", " async function dataEmailUpdate(DAHelper, raw", "   await contactDataEmailInsert();\n          ", "('Telephony_contact_Email_0200', 0, async fun", "          await dataEmailUpdate(DAHelper, raw", "         await queryEmailInsert(DAHelper, raw", "('Telephony_contact_Email_0100', 0, async fun", "(\"Telephony_contact_Email_0100 end\")\n      do", "     expect(contact.Email.EMAIL_HOME === 1).a", "sapi.queryContactsByEmail(email, holder);\n   ", "sapi.queryContactsByEmail(email, ContactAttri", "          await dataEmailInsert(DAHelper, raw", "     expect(contact.Email.labelName !== \"emai", "     expect(contact.Email.email !== \"email\").", "(\"Telephony_contact_Email_0100 start\")\n      ", " function beforeDataEmailInsert(DAHelper, raw", "function contactDataEmailInsert() {\n         ", " function fuzzyQueryEmail(DAHelper, rawContac", "     expect(contact.Email.displayName !== \"em", "(\"Telephony_contact_Email_0200 end\")\n      do", "     expect(contact.Email.INVALID_LABEL_ID ==", "     expect(contact.Email.EMAIL_OTHER === 3)."], "files": ["ContacterJsunit.ets", "Contacts_test.js", "ContactCard_test.js", "ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Event", "api_method_all": "class Event {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly EVENT_ANNIVERSARY: 1\n\n    \n    static readonly EVENT_OTHER: 2\n\n    \n    static readonly EVENT_BIRTHDAY: 3\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    eventDate: string\n\n    \n    labelName: string\n\n    \n    labelId: number\n  }", "api_method_name": "Event", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 98, "since": 0, "api_used": "\u662f", "lines": ["allManager reachCallEventState time out';\n   ", "('Telephony_contact_Event_0200', 0, async fun", "{caseName} reachCallEventState error,case fai", "     expect(contact.Event.EVENT_BIRTHDAY === ", "          await dataEventUpdate(DAHelper, raw", "     expect(contact.Event.eventDate !== \"even", " async function dataEventUpdate(DAHelper, raw", "t function reachCallEventState (eventId) {\n  ", "geOff,\n    reachCallEventState\n} from './lib/", "ony_CallManager callEventChange error ${toStr", "(\"Telephony_contact_Event_0200 start\")\n      ", "ng accepted,the callEventChange event get EVE", "      core.subscribeEvent('task', reportExten", "     expect(contact.Event.EVENT_ANNIVERSARY =", "l;\n        reachCallEventState(EVENT_OTT_FUNC", " async function dataEventInsert(DAHelper, raw", "    await beforeDataEventInsert(DAHelper, raw", "('Telephony_contact_Event_0100', 0, async fun", "onit))\n    sendTouchEvent(downPonit);\n    con", "     expect(contact.Event.labelName !== \"even", "(\"Telephony_contact_Event_0100 start\")\n      ", "     ret = sendTouchEvent(movePoint)\n      if", "     expect(contact.Event.INVALID_LABEL_ID ==", "allManager reachCallEventState get the error ", "     expect(contact.Event.CUSTOM_LABEL === 0)", "     expect(contact.Event.EVENT_OTHER === 2).", "allManager reachCallEventState err message = ", "oint))\n    sendTouchEvent(upPoint)\n    await ", "(\"Telephony_contact_Event_0100 end\")\n      do", "allManager reachCallEventState get the right ", "{caseName} reachCallEventState success,case $", "(\"Telephony_contact_Event_0200 end\")\n      do", "       call.on('callEventChange', (err, value", " function beforeDataEventInsert(DAHelper, raw", "          await dataEventInsert(DAHelper, raw"], "files": ["Utils.ets", "ScenceInCalling.js", "ContacterJsunit.ets", "Contacts_test.js", "ContactCard_test.js", "CallJsunit.test.ets", "CallManageAll.test.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Group", "api_method_all": "class Group {\n    \n    groupId: number\n\n    \n    title: string\n  }", "api_method_name": "Group", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 128, "since": 0, "api_used": "\u662f", "lines": ["    getProfileUpdateGroup:\n    function () {\n", "it deleteAll(profileGroupUri, \"contactCard_de", "elper.insert(profileGroupUri, common.getProfi", "up_name\": \"TestFifthGroup\",\n            \"grou", "it deleteAll(profileGroupUri, \"contactCard_qu", "_test_7100\", profileGroupUri);\n              ", "   },\n    getProfileGroupMap:\n    function ()", "   },\n    getProfileGroup:\n    function () {\n", "    getProfileUpdateGroupMap:\n    function ()", " = common.getProfileGroupMap();\n             ", " function beforeDataGroupInsert(DAHelper, raw", "cts_test.js'\nimport GroupsTest from './contac", "data\";\nconst profileGroupUri = \"dataability:/", "roup_name\": \"ManagerGroup\"\n            };\n   ", "e contactCard_insertGroup_test_7000: rawConta", "ogMessage queryThreeGroup: error = \" + error)", "est from './contact/Groups_test.js'\nimport Ob", "    await queryThreeGroup(\n                  ", "        await deleteGroup(DAHelper, contactDa", "e contactCard_insertGroup_test_7000 is starti", " function queryThreeGroup(tag, DAHelper, rawC", "   await contactDataGroupInsert();\n          ", "(\"contactCard_insertGroup_test_7000\", 0, asyn", " async function dataGroupInsert(DAHelper, raw", "it deleteAll(profileGroupUri, \"contactCard_ba", "(\"contactCard_insertGroup_test_7000\");\n      ", "          await dataGroupUpdate(DAHelper, raw", "    await beforeDataGroupInsert(DAHelper, raw", "sync function deleteGroupContactDataInsert(DA", "(tag + ': queryThreeGroup start ! DAHelper = ", "i, common.getProfileGroup());\n               ", "e\": \"DeveloperFirsthGroup\",\n            \"grou", "elper.insert(profileGroupUri, groupValues);\n ", "        await deleteGroupContactDataInsert(DA", "it deleteAll(profileGroupUri, \"contactCard_in", "e contactCard_insertGroup_test_7000: raw_cont", " \"contactCard_insertGroup_test_7000\", DAHelpe", " async function dataGroupUpdate(DAHelper, raw", "e\", \"DeveloperFirsthGroup\"], [\"group_notes\", ", "  ContactsTest();\n  GroupsTest();\n  ObjectInt", "sync function deleteGroup(DAHelper, contactDa", "  contactCard_insertGroup_test_7000\n     * @t", "up_name\", \"TestFifthGroup\"], [\"group_notes\", "], "files": ["Contacts_test.js", "ContactCard_test.js", "ObjectInterface_test.js", "List.test.ets", "common.js", "Groups_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Holder", "api_method_all": "class Holder {\n    \n    readonly bundleName: string\n\n    \n    readonly displayName: string\n\n    \n    holderId: number\n  }", "api_method_name": "Holder", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["it contactsapi.queryHolders();\n               "], "files": ["ObjectInterface_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImAddress", "api_method_all": "class ImAddress {\n    \n    static readonly CUSTOM_LABEL: -1\n\n    \n    static readonly IM_AIM: 0\n\n    \n    static readonly IM_MSN: 1\n\n    \n    static readonly IM_YAHOO: 2\n\n    \n    static readonly IM_SKYPE: 3\n\n    \n    static readonly IM_QQ: 4\n\n    \n    static readonly IM_ICQ: 6\n\n    \n    static readonly IM_JABBER: 7\n\n    \n    static readonly INVALID_LABEL_ID: -2\n\n    \n    imAddress: string\n\n    \n    labelName: string\n\n    \n    labelId: number\n  }", "api_method_name": "ImAddress", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 28, "since": 0, "api_used": "\u662f", "lines": ["     expect(contact.ImAddress.IM_ICQ === 6).asser", "     expect(contact.ImAddress.IM_YAHOO === 2).ass", "     expect(contact.ImAddress.INVALID_LABEL_ID ==", "(\"Telephony_contact_ImAddress_0100 start\")\n      ", "(\"Telephony_contact_ImAddress_0100 end\")\n      do", "('Telephony_contact_ImAddress_0100', 0, async fun", "     expect(contact.ImAddress.IM_JABBER === 7).as", "     expect(contact.ImAddress.CUSTOM_LABEL === -1", "     expect(contact.ImAddress.labelName !== \"imAd", "     expect(contact.ImAddress.IM_AIM === 0).asser", "     expect(contact.ImAddress.IM_MSN === 1).asser", "     expect(contact.ImAddress.imAddress !== \"imAd", "(\"Telephony_contact_ImAddress_0200 end\")\n      do", "     expect(contact.ImAddress.IM_SKYPE === 3).ass", "('Telephony_contact_ImAddress_0200', 0, async fun", "     expect(contact.ImAddress.IM_QQ === 4).assert"], "files": ["ContacterJsunit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Name", "api_method_all": "class Name {\n    \n    familyName: string\n\n    \n    familyNamePhonetic: string\n\n    \n    fullName: string\n\n    \n    givenName: string\n\n    \n    givenNamePhonetic: string\n\n    \n    middleName: string\n\n    \n    middleNamePhonetic: string\n\n    \n    namePrefix: string\n\n    \n    nameSuffix: string\n  }", "api_method_name": "Name", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 1376, "since": 0, "api_used": "\u662f", "lines": [" console.log(`${caseName} disableLteEnhanceM", " console.log(`${caseName} joinConference suc", " console.log(`${caseName} combineConference ", " console.log(`${caseName} startRTT ${callId}", " console.log(`${caseName} enableLteEnhanceMo", " console.log(`${caseName} stopRTT ${callId} ", " console.log(`${caseName} stopRTT success,ca", " console.log(`${caseName} startRTT success,c", " console.log(`${caseName} joinConference ${C", " console.log(`${caseName} isLteEnhanceModeEn", " console.log(`${caseName} updateImsCallMode2", ") {\n        let caseName = 'Telephony_CallMa", " console.log(`${caseName} separateConference"], "files": ["ConnectionJsunit.test.ets", "SimJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "ObjectInterface_test.js", "ScenceLimitCalling.js", "Contacts_test.js", "ContactCard_test.js", "ConnectionSecondJsUnit.test.ets", "ContactClass_test.js", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "ContacterJsunit.ets", "CallJsunit.test.ets", "SimManager.test.js", "Voicemail_test.js", "ScenceTransfer.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "ApiToPromisePerfomance.js", "Calllog_test.js", "ApiToPromiseReliability.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NickName", "api_method_all": "class NickName {\n    \n    nickName: string\n  }", "api_method_name": "NickName", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 20, "since": 0, "api_used": "\u662f", "lines": ["wait fuzzyQueryPhoneNickName(DAHelper, rawContac", "          await dataNickNameInsert(DAHelper, raw", " async function dataNickNameUpdate(DAHelper, raw", "ync function contactNickNameInsert() {\n         ", "       await contactNickNameInsert();\n          ", " async function dataNickNameInsert(DAHelper, raw", " function beforedataNickNameInsert(DAHelper, raw", "    await beforedataNickNameInsert(DAHelper, raw", "          await dataNickNameUpdate(DAHelper, raw", "tion fuzzyQueryPhoneNickName(DAHelper, rawContac"], "files": ["Contacts_test.js", "ContactCard_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Note", "api_method_all": "class Note {\n    \n    noteContent: string\n  }", "api_method_name": "Note", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 20, "since": 0, "api_used": "\u662f", "lines": ["   await contactDataNoteInsert();\n          ", "    await fuzzyQueryNote(DAHelper, rawContac", "    await beforedataNoteInsert(DAHelper, raw", " async function dataNoteInsert(DAHelper, raw", " function fuzzyQueryNote(DAHelper, rawContac", " function beforedataNoteInsert(DAHelper, raw", "function contactDataNoteInsert() {\n         ", "          await dataNoteUpdate(DAHelper, raw", "          await dataNoteInsert(DAHelper, raw", " async function dataNoteUpdate(DAHelper, raw"], "files": ["Contacts_test.js", "ContactCard_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Organization", "api_method_all": "class Organization {\n    \n    name: string\n\n    \n    title: string\n  }", "api_method_name": "Organization", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PhoneNumber", "api_method_all": "class PhoneNumber {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly NUM_HOME: 1\n\n    \n    static readonly NUM_MOBILE: 2\n\n    \n    static readonly NUM_WORK: 3\n\n    \n    static readonly NUM_FAX_WORK: 4\n\n    \n    static readonly NUM_FAX_HOME: 5\n\n    \n    static readonly NUM_PAGER: 6\n\n    \n    static readonly NUM_OTHER: 7\n\n    \n    static readonly NUM_CALLBACK: 8\n\n    \n    static readonly NUM_CAR: 9\n\n    \n    static readonly NUM_COMPANY_MAIN: 10\n\n    \n    static readonly NUM_ISDN: 11\n\n    \n    static readonly NUM_MAIN: 12\n\n    \n    static readonly NUM_OTHER_FAX: 13\n\n    \n    static readonly NUM_RADIO: 14\n\n    \n    static readonly NUM_TELEX: 15\n\n    \n    static readonly NUM_TTY_TDD: 16\n\n    \n    static readonly NUM_WORK_MOBILE: 17\n\n    \n    static readonly NUM_WORK_PAGER: 18\n\n    \n    static readonly NUM_ASSISTANT: 19\n\n    \n    static readonly NUM_MMS: 20\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    labelName: string\n\n    \n    phoneNumber: string\n\n    \n    labelId: number\n  }", "api_method_name": "PhoneNumber", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 82, "since": 0, "api_used": "\u662f", "lines": ["y_CallManager_formatPhoneNumber_Promise_0100', 0, a", "y_CallManager_formatPhoneNumberToE164_Promise_0100\n", "lManager_isEmergencyPhoneNumber_Promise_1300', 0, a", "       await queryByPhoneNumberContainsField();\n   ", "\n     * @tc.name    PhoneNumber is 100000000000. Ca", " = await call.formatPhoneNumberToE164('52300000000'", "\n     * @tc.name    PhoneNumber: 120, options -1. C", "lManager_isEmergencyPhoneNumber_Async_1300 fail ');", "\n     * @tc.name    PhoneNumber is 52300000000, opt", " = await call.formatPhoneNumber('2000000');\n       ", "2000000. Call formatPhoneNumber() to format the num", "await queryByEndWithPhoneNumber();\n                ", "-1. Call isEmergencyPhoneNumber() to check whether ", "0000000. Call formatPhoneNumber() to format the num", "    call.isEmergencyPhoneNumber('110', emergencyNum", "y_CallManager_formatPhoneNumberToE164_Promise_0100'", "y_CallManager_formatPhoneNumber_Async_0100 finish d", "ync function queryByPhoneNumberContainsField() {\n  ", "y_CallManager_formatPhoneNumber_Async_0100 fail');\n", "\n     * @tc.name    PhoneNumber is 2000000. Call fo", "lManager_isEmergencyPhoneNumber_Async_1300', 0, asy", "y_CallManager_formatPhoneNumberToE164_Async_0100', ", "ction queryByEndWithPhoneNumber() {\n               ", "\n        call.formatPhoneNumberToE164('010-0000-000", "\n        call.formatPhoneNumber('100000000000', (er", "y_CallManager_formatPhoneNumberToE164_Async_0100\n  ", "y_CallManager_formatPhoneNumberToE164_Promise_0100 ", "it queryByStartsWithPhoneNumber();\n                ", "lManager_isEmergencyPhoneNumber_Promise_1300 finish", "y_CallManager_formatPhoneNumber_Promise_0100\n     *", "lManager_isEmergencyPhoneNumber_Async_1300 finish e", "ait call.isEmergencyPhoneNumber('120', emergencyNum", "y_CallManager_formatPhoneNumber_Promise_0100 fail')", "y_CallManager_formatPhoneNumberToE164_Async_0100 fa", "y_CallManager_formatPhoneNumber_Async_0100\n     * @", "on queryByStartsWithPhoneNumber() {\n               ", "y_CallManager_formatPhoneNumber_Promise_0100 finish", "\n     * @tc.name    PhoneNumber is 010-0000-0000, o", "y_CallManager_formatPhoneNumberToE164_Async_0100 fi", "lManager_isEmergencyPhoneNumber_Async_1300\n     * @", "ons: CN, call formatPhoneNumberToE164() to format t", "lManager_isEmergencyPhoneNumber_Promise_1300 fail '", "y_CallManager_formatPhoneNumber_Async_0100', 0, asy", "y_CallManager_formatPhoneNumber_Async_0100 err = ${", "lManager_isEmergencyPhoneNumber_Promise_1300\n     *", "it queryByStartsWithPhoneNumberError();\n           ", "\n     * @tc.name    PhoneNumber: 110, options -1. C"], "files": ["Calllog_test.js", "CallManageAll.test.js", "ContactCard_test.js", "Contacts_test.js", "ObjectInterface_test.js", "common.js", "ContactClass_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Portrait", "api_method_all": "class Portrait {\n    \n    uri: string\n  }", "api_method_name": "Portrait", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PostalAddress", "api_method_all": "class PostalAddress {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly ADDR_HOME: 1\n\n    \n    static readonly ADDR_WORK: 2\n\n    \n    static readonly ADDR_OTHER: 3\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    city: string\n\n    \n    country: string\n\n    \n    labelName: string\n\n    \n    neighborhood: string\n\n    \n    pobox: string\n\n    \n    postalAddress: string\n\n    \n    postcode: string\n\n    \n    region: string\n\n    \n    street: string\n\n    \n    labelId: number\n  }", "api_method_name": "PostalAddress", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 10, "since": 0, "api_used": "\u662f", "lines": [" async function dataPostalAddressInsert(DAHelper, raw", "          await dataPostalAddressInsert(DAHelper, raw", "assertEqual(contact.PostalAddress.ADDR_WORK);\n       ", "assertEqual(contact.PostalAddress.ADDR_HOME);\n       ", "dress = new contact.PostalAddress({\n                 ", "assertEqual(contact.PostalAddress.CUSTOM_LABEL);\n    ", "assertEqual(contact.PostalAddress.INVALID_LABEL_ID);\n", "assertEqual(contact.PostalAddress.ADDR_OTHER);\n      "], "files": ["Contacts_test.js", "ContactCard_test.js", "ContactClass_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Relation", "api_method_all": "class Relation {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly RELATION_ASSISTANT: 1\n\n    \n    static readonly RELATION_BROTHER: 2\n\n    \n    static readonly RELATION_CHILD: 3\n\n    \n    static readonly RELATION_DOMESTIC_PARTNER: 4\n\n    \n    static readonly RELATION_FATHER: 5\n\n    \n    static readonly RELATION_FRIEND: 6\n\n    \n    static readonly RELATION_MANAGER: 7\n\n    \n    static readonly RELATION_MOTHER: 8\n\n    \n    static readonly RELATION_PARENT: 9\n\n    \n    static readonly RELATION_PARTNER: 10\n\n    \n    static readonly RELATION_REFERRED_BY: 11\n\n    \n    static readonly RELATION_RELATIVE: 12\n\n    \n    static readonly RELATION_SISTER: 13\n\n    \n    static readonly RELATION_SPOUSE: 14\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    labelName: string\n\n    \n    relationName: string\n\n    \n    labelId: number\n  }", "api_method_name": "Relation", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 33, "since": 0, "api_used": "\u662f", "lines": ["assertEqual(contact.Relation.CUSTOM_LABEL);\n    ", "assertEqual(contact.Relation.RELATION_PARENT);\n ", "assertEqual(contact.Relation.RELATION_FATHER);\n ", "assertEqual(contact.Relation.RELATION_CHILD);\n  ", "assertEqual(contact.Relation.RELATION_REFERRED_B", "ation = new contact.Relation({\n                 ", "assertEqual(contact.Relation.RELATION_FRIEND);\n ", "relationName': 'testRelation'\n                })", "assertEqual(contact.Relation.RELATION_BROTHER);\n", " async function dataRelationInsert(DAHelper, raw", "          await dataRelationInsert(DAHelper, raw", "assertEqual(contact.Relation.RELATION_RELATIVE);", "assertEqual(contact.Relation.INVALID_LABEL_ID);\n", "assertEqual(contact.Relation.RELATION_MANAGER);\n", "   await contactDataRelationInsert();\n          ", "          await dataRelationUpdate(DAHelper, raw", " async function dataRelationUpdate(DAHelper, raw", "assertEqual(contact.Relation.RELATION_PARTNER);\n", "assertEqual(contact.Relation.RELATION_SISTER);\n ", "e).assertEqual('testRelation');\n            } ca", "assertEqual(contact.Relation.RELATION_SPOUSE);\n ", "    await beforeDataRelationInsert(DAHelper, raw", " function beforeDataRelationInsert(DAHelper, raw", "assertEqual(contact.Relation.RELATION_MOTHER);\n ", "assertEqual(contact.Relation.RELATION_ASSISTANT)", "assertEqual(contact.Relation.RELATION_DOMESTIC_P"], "files": ["Contacts_test.js", "ContactCard_test.js", "ContactClass_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SipAddress", "api_method_all": "class SipAddress {\n    \n    static readonly CUSTOM_LABEL: 0\n\n    \n    static readonly SIP_HOME: 1\n\n    \n    static readonly SIP_WORK: 2\n\n    \n    static readonly SIP_OTHER: 3\n\n    \n    static readonly INVALID_LABEL_ID: -1\n\n    \n    labelName: string\n\n    \n    sipAddress: string\n\n    \n    labelId: number\n  }", "api_method_name": "SipAddress", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 6, "since": 0, "api_used": "\u662f", "lines": ["r sip = new contact.SipAddress({\n                 ", "assertEqual(contact.SipAddress.SIP_OTHER);\n       ", "assertEqual(contact.SipAddress.CUSTOM_LABEL);\n    ", "assertEqual(contact.SipAddress.SIP_HOME);\n        ", "assertEqual(contact.SipAddress.INVALID_LABEL_ID);\n", "assertEqual(contact.SipAddress.SIP_WORK);\n        "], "files": ["ContactClass_test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Website", "api_method_all": "class Website {\n    \n    website: string\n  }", "api_method_name": "Website", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": [" async function dataWebsiteUpdate(DAHelper, raw", "          await dataWebsiteUpdate(DAHelper, raw", "    await beforeDataWebsiteInsert(DAHelper, raw", " async function dataWebsiteInsert(DAHelper, raw", "          await dataWebsiteInsert(DAHelper, raw", " function beforeDataWebsiteInsert(DAHelper, raw"], "files": ["Contacts_test.js", "ContactCard_test.js"], "is_white": " ", "desc": " "}]}