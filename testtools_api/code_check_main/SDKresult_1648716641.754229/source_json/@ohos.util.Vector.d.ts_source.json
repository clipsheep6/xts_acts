{"subsystem_ch": "\u516c\u5171\u57fa\u7840\u7c7b\u5e93", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.util.Vector", "api": [{"api_class_name": "Vector", "api_method_all": "declare class Vector<T> {\r\n  \r\n  constructor();\r\n  \r\n  length: number;\r\n  \r\n  add(element: T): boolean;\r\n  \r\n  insert(element: T, index: number): void;\r\n  \r\n  has(element: T): boolean;\r\n  \r\n  get(index: number): T;\r\n  \r\n  getIndexOf(element: T): number;\r\n  \r\n  getFirstElement(): T;\r\n  \r\n  getLastElement(): T;\r\n  \r\n  removeByIndex(index: number): T;\r\n  \r\n  remove(element: T): boolean;\r\n  \r\n  set(index: number, element: T): T;\r\n  \r\n  getLastIndexOf(element: T): number;\r\n  \r\n  getLastIndexFrom(element: T, index: number): number;\r\n  \r\n  getIndexFrom(element: T, index: number): number;\r\n  \r\n  removeByRange(fromIndex: number, toIndex: number): void;\r\n  \r\n  replaceAllElements(callbackfn: (value: T, index?: number, vector?: Vector<T>) => T,\r\n  thisArg?: Object): void;\r\n  \r\n  forEach(callbackfn: (value: T, index?: number, vector?: Vector<T>) => void,\r\n  thisArg?: Object): void;\r\n  \r\n  sort(comparator?: (firstValue: T, secondValue: T) => number): void;\r\n  \r\n  subVector(fromIndex: number, toIndex: number): Vector<T>;\r\n  \r\n  clear(): void;\r\n  \r\n  clone(): Vector<T>;\r\n  \r\n  setLength(newSize: number): void;\r\n  \r\n  getCapacity(): number;\r\n  \r\n  convertToArray(): Array<T>;\r\n  \r\n  isEmpty(): boolean;\r\n  \r\n  increaseCapacityTo(newCapacity: number): void;\r\n  \r\n  toString(): string;\r\n  \r\n  trimToCurrentLength(): void;\r\n  \r\n  copyToArray(array: Array<T>): void;\r\n  \r\n  [Symbol.iterator](): IterableIterator<T>;\r\n}", "api_method_name": "Vector", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["unit/index';\nimport Vector from \"@ohos.util.Ve", "   let vector = new Vector();\n    vector.add(4", "   let vector = new Vector();\n    let arr = []", "(\"SR000GGR47_testSubVector040\", 0, function ()", "   let vector = new Vector();\n    let a = {nam", "y {\n      vector.subVector(length + 1, length ", "   let vector = new Vector();\n    vector.add(\"", "let res = vector.subVector(4, 2);\n    } catch ", "(\"SR000GGR47_testSubVector039\", 0, function ()", "or from \"@ohos.util.Vector\";\n\ndescribe(\"Vector", "st.js');\nrequire('./Vector.test.js');\n\n", "let res = vector.subVector(2, 4);\n    let arr ", "   let vector = new Vector();\n    let a = [1, ", "   let vector = new Vector();\n    vector.add(1", "Vector\";\n\ndescribe(\"VectorTest\", function () {", "   let vector = new Vector();\n    let res = ve", "   let vector = new Vector();\n    } catch (err", "(\"SR000GGR47_testSubVector038\", 0, function ()"], "files": ["Vector.test.js", "Main.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "add", "api_method_all": "add(element: T): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1442, "since": 8, "api_used": "\u662f", "lines": ["st();\n    arrayList.add(1);\n    arrayList.a", "    })\n        core.addService('expect', ex", "st();\n    arrayList.add(\"\u56db\");\n    arrayList", "d(1);\n    arrayList.add(\"\u4e09\");\n    arrayList", "d(1);\n    arrayList.add(\"a\");\n    arrayList", "d(1);\n    arrayList.add(\"b\");\n    arrayList", "d(1);\n    arrayList.add(2);\n    arrayList.a", "\"a\");\n    arrayList.add(1);\n    arrayList.a", "d(3);\n    arrayList.add(1);\n    arrayList.a", "3\u5c81\"};\n    arrayList.add(a);\n    let res = a", "d(2);\n    arrayList.add(14);\n    arrayList.", ", 4];\n    arrayList.add(a);\n    let res = a", "d(4);\n    arrayList.add(3);\n    arrayList.a", "st();\n    arrayList.add(\"\u56db\");\n    let res =", "true;\n    arrayList.add(a);\n    let res = a", "d(1);\n    arrayList.add(\"b\");\n    let res =", "\"c\");\n    arrayList.add(1);\n    arrayList.r", "\"\u4e09\");\n    arrayList.add(1);\n    arrayList.a", "st();\n    arrayList.add(4);\n    arrayList.a", "st();\n    arrayList.add(8);\n    let res = a", "\"b\");\n    arrayList.add(\"c\");\n    arrayList", "\"\u56db\");\n    arrayList.add(\"\u4e09\");\n    arrayList"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "Process.test.js", "Vector.test.js", "PlainArray.test.js", "xml.test.js", "ArrayList.test.js", "index.js", "HashSet.test.js", "Worker.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "insert", "api_method_all": "insert(element: T, index: number): void;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 109, "since": 8, "api_used": "\u662f", "lines": ["2, 3, 4];\n    deque.insertFront(a);\n    let re", "\"a\");\n    arrayList.insert(1, 2);\n    let res ", " Deque();\n    deque.insertFront(undefined);\n  ", "y: \"we\"};\n    deque.insertEnd(a);\n    let res ", "rtEnd(8);\n    deque.insertEnd(\"\u4e09\");\n    let re", " Deque();\n    deque.insertEnd(8);\n    deque.in", " Deque();\n    deque.insertFront(\"$\");\n    let ", "\"a\");\n    arrayList.insert(8, 2);\n    let res ", "ont(\"\u4e8c\");\n    deque.insertEnd(5);\n    deque.in", "let res = arrayList.insert(8, 10);\n    } catch", "ont(\"\u4e8c\");\n    deque.insertEnd(1);\n    deque.in", "ont(\"\u4e09\");\n    deque.insertFront(\"\u56db\");\n    let ", "\"a\");\n    arrayList.insert(8, 2);\n    let arr ", " Deque();\n    deque.insertFront(null);\n    let", "rtEnd(1);\n    deque.insertEnd(2);\n    deque.in", " Deque();\n    deque.insertEnd(6);\n    let res ", "rtEnd(6);\n    deque.insertFront(\"\u4e09\");\n    dequ", "rtEnd(4);\n    deque.insertEnd(5);\n    deque.in", "rtEnd(3);\n    deque.insertEnd(4);\n    deque.in", "rtEnd(5);\n    deque.insertEnd(6);\n    deque.in", " Deque();\n    deque.insertFront(\"\u4e00\");\n    let ", " Deque();\n    deque.insertEnd(8);\n    let res ", "ont(\"\u4e00\");\n    deque.insertFront(\"\u4e8c\");\n    dequ", "e: \"15\"};\n    deque.insertFront(a);\n    let re", "rtEnd(2);\n    deque.insertEnd(3);\n    deque.in", "let res = arrayList.insert(8, -1);\n    } catch", "rtEnd(8);\n    deque.insertFront(\"\u4e00\");\n    let ", " Deque();\n    deque.insertFront(8);\n    let re", " Deque();\n    deque.insertFront(\" \");\n    let ", "let res = arrayList.insert(8, 11);\n    } catch", " i++) {\n      deque.insertFront(i);\n      let ", "End(\"\u56db\");\n    deque.insertEnd(\"\u4e09\");\n    let re", "ont(\"\u4e00\");\n    deque.insertFront(\"\u4e8c\");\n    let ", " Deque();\n    deque.insertEnd(\"\u56db\");\n    deque.", "rtEnd(8);\n    deque.insertFront(\"\u4e00\");\n    dequ", "\"a\");\n    arrayList.insert(1, 2);\n    let res1", "b\", \"c\"];\n    deque.insertEnd(a);\n    let res "], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "Vector.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "has", "api_method_all": "has(element: T): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 544, "since": 8, "api_used": "\u662f", "lines": [" new HashMap();\n    hashMap.set(\"\", \"A\");\n ", "let res = arrayList.has(\"\u56db\");\n    expect(re", "\"A\");\n    let res = hashMap.get(3.14);\n    ", "let res = arrayList.has(\"\u4e09\");\n    expect(re", ", c);\n    let res = hashMap.get(1);\n    exp", "\"A\");\n    let res = hashMap.get(\"\");\n    ex", "\"A\");\n    let res = hashMap.get(1);\n    exp", "et res = linkedList.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(1, 2);\n    ", "\"A\");\n    let res = hashMap.get(\"a\");\n    e", "\n    let res = list.has(\"a\");\n    expect(re", "\n    let res = list.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(3.14, \"A\");", "et res = linkedList.has(\"a\");\n    expect(re", "   let res = vector.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(1, \"A\");\n  ", "i\", age: \"13\"};\n    hashMap.set(1, c);\n    ", "let res = arrayList.has(a);\n    expect(res)", "    try {\n      let hashMap = new HashMap()", " new HashMap();\n    hashMap.set(\"a\", \"A\");\n", "Map();\n      expect(hashMap != undefined).a", "    let res = deque.has(6);\n    expect(res)", "\"A\");\n    let res = hashMap.get(\"$\");\n    e", "   let res = vector.has(8);\n    expect(res)", "nction () {\n    let hashMap = new HashMap()", "\n    let res = list.has(\"d\");\n    expect(re", " new HashMap();\n    hashMap.set(\"$\", \"A\");\n", "let res = arrayList.has(\"\u4e8c\");\n    expect(re", "t res1 = linkedList.has(\"d\");\n    expect(re", "  let res1 = vector.has(\"\u4e8c\");\n    expect(re", " c = [1, 2, 3];\n    hashMap.set(1, c);\n    ", "   let res = vector.has(\"\u4e09\");\n    expect(re", "let res = arrayList.has(8);\n    expect(res)", ", 2);\n    let res = hashMap.get(1);\n    exp"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "get", "api_method_all": "get(index: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 517, "since": 8, "api_used": "\u662f", "lines": ["onfigService = core.getDefaultService('conf", "     var info = app.getInfo()\n        expec", "    let res = deque.getLast();\n    expect(r", "    let res = deque.getLast();\n      expect", "let res = arrayList.getIndexOf(\"A\");\n    ex", "\n    let res = list.getIndexOf(\"b\");\n    ex", "et res1 = arrayList.getLastIndexOf(1);\n    ", "let res = arrayList.getLastIndexOf(1);\n    ", "et res = linkedList.get(0);\n    expect(res)", "  const core = Core.getInstance()\n        c", "let res = arrayList.getCapacity();\n    expe", "\n    let res = list.getLastIndexOf(\"f\");\n  ", "et res1 = arrayList.getIndexOf(1);\n    expe", "let res = arrayList.getIndexOf(99);\n    let", "    let res = deque.getFirst();\n    expect(", "    let res = deque.getFirst();\n      expec", "\n    let res = list.getIndexOf(\"f\");\n    ex", "t res1 = linkedList.get(1);\n    expect(res1", "\n    let res = list.getLastIndexOf(\"a\");\n  "], "files": ["ExampleJsunit.test.js", "List.test.js", "LightWeightSet.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "getIndexOf", "api_method_all": "getIndexOf(element: T): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 19, "since": 8, "api_used": "\u662f", "lines": ["let res = arrayList.getIndexOf(99);\n    let res1 =", "  let res1 = vector.getIndexOf(1);\n    expect(res1", "es = lightWeightMap.getIndexOfKey(2);\n    expect(r", "et res1 = arrayList.getIndexOf(1);\n    expect(res1", "   res = plainArray.getIndexOfKey(12);\n    expect(", "et res = plainArray.getIndexOfKey(2);\n    expect(r", "\n    let res = list.getIndexOf(1);\n    expect(res)", "\n    let res = list.getIndexOf(\"f\");\n    expect(re", "es = lightWeightSet.getIndexOf(2);\n    expect(res)", "\n    let res = list.getIndexOf(\"b\");\n    expect(re", "et res = linkedList.getIndexOf(1);\n    expect(res)", "et res = plainArray.getIndexOfValue(\"A\");\n    expe", "et res = plainArray.getIndexOfKey(9);\n    expect(r", "et res = plainArray.getIndexOfValue(\"Asad\");\n    e", "es = lightWeightMap.getIndexOfValue(\"F\");\n    expe", "let res = arrayList.getIndexOf(\"A\");\n    expect(re", "   let res = vector.getIndexOf(23);\n    expect(res", "   res = plainArray.getIndexOfValue(\"Z\");\n    expe"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "getFirstElement", "api_method_all": "getFirstElement(): T;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["   let res = vector.getFirstElement();\n    expect(res)."], "files": ["Vector.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "getLastElement", "api_method_all": "getLastElement(): T;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["   let res = vector.getLastElement();\n    let res1 = v", "   let res = vector.getLastElement();\n    expect(res)."], "files": ["Vector.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "removeByIndex", "api_method_all": "removeByIndex(index: number): T;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["\n    let res = list.removeByIndex(2);\n    let arr = [", "     let res = list.removeByIndex(1);\n    } catch (er", ".add(\"b\");\n    list.removeByIndex(2);\n    let arr = [", "let res = arrayList.removeByIndex(5);\n    } catch (er", "ssage).assertEqual(\"removeByIndex is out-of-bounds\");", " try {\n      vector.removeByIndex(12);\n    } catch (e", "et res = linkedList.removeByIndex(1);\n    } catch (er", "\"a\");\n    arrayList.removeByIndex(2);\n    let arr = [", "     let res = list.removeByIndex(10);\n    } catch (e", "dd(\"a\");\n    vector.removeByIndex(2);\n    let res = v", "     let res = list.removeByIndex(5);\n    } catch (er"], "files": ["LinkedList.test.js", "Vector.test.js", "List.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "remove", "api_method_all": "remove(element: T): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 93, "since": 8, "api_used": "\u662f", "lines": ["d(1);\n    arrayList.removeByRange(1, 3);\n    l", "  let res = hashSet.remove(1);\n    expect(res)", "3) {\n        vector.remove(123);\n      } else ", "es = lightWeightMap.remove(3);\n    expect(res)", "\n    let res = list.removeFirstFound(\"b\");\n   ", "et res = linkedList.removeFirst();\n    expect(", " try {\n      vector.removeByRange(1, 7);\n    }", "acity();\n    vector.removeByRange(0, capacity)", "\n    let res = list.remove(\"d\");\n    expect(re", "8) {\n        vector.remove(8);\n      }\n    }\n ", "let res = arrayList.removeByRange(6, 8);\n    }", "dd(\"a\");\n    vector.removeByIndex(2);\n    let ", " try {\n      vector.removeByIndex(12);\n    } c", " try {\n      vector.removeByRange(3, 1);\n    }", "dd(\"a\");\n    vector.remove(\"\u4e09\");\n    let res =", "\"a\");\n    arrayList.remove(\"\u4e09\");\n    let res =", "\"a\");\n    arrayList.removeByIndex(2);\n    let ", "acity();\n    vector.removeByRange(0, capacity ", "\n    let res = list.removeByIndex(2);\n    let ", "\n    let res = list.removeLastFound(\"b\");\n    ", "\n    let res = list.removeLast();\n    expect(r", "   let res = vector.remove(2);\n    expect(res)", "let res = arrayList.removeByIndex(5);\n    } ca", "     let res = list.removeByIndex(10);\n    } c", "\n    let res = list.remove(\"a\");\n    let arr =", "  let res = hashMap.remove(3);\n    expect(res)", "{\n        arrayList.remove(item);\n      }\n    ", "es = lightWeightMap.removeAt(1);\n    expect(re", "    let res = list1.removeLast();\n    expect(r", "let res = arrayList.removeByRange(3, 1);\n    }", " try {\n      vector.removeByRange(length + 1, ", "\n    let res = list.remove();\n    expect(res).", "let res = arrayList.remove(\"A\");\n    expect(re", "et res = linkedList.removeByIndex(1);\n    } ca", "ssage).assertEqual(\"removeByIndex is out-of-bo", "d(1);\n    arrayList.removeByRange(0, 9);\n    l", ".add(\"b\");\n    list.removeByIndex(2);\n    let ", " try {\n      vector.removeByRange(-1, capacity", "     let res = list.removeByIndex(5);\n    } ca", "s3 = lightWeightMap.removeAt(10);\n    expect(r", ".add(1);\n    vector.removeByRange(1, 3);\n    l", "     let res = list.removeByIndex(1);\n    } ca"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "set", "api_method_all": "set(index: number, element: T): T;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 666, "since": 8, "api_used": "\u662f", "lines": ["hMap();\n    hashMap.set(-1, \"A\");\n    let r", "hMap();\n    hashMap.set(1, \"A\");\n    let re", "hMap();\n    hashMap.set(\"a\", \"A\");\n    let ", "hMap();\n    hashMap.set(1, 3.14);\n    let r", "a = {};\n    hashMap.set(a, \"A\");\n    let re", ", \"A\");\n    hashMap.set(2, \"B\");\n    hashMa", " 2, 3];\n    hashMap.set(1, c);\n    let res ", "t(8, 2);\n    vector.set(1, \"\u4e8c\");\n    let re", "++) {\n      hashMap.set(1, i);\n    }\n    le", "hMap();\n    hashMap.set(1, \"A\");\n    hashMa", "++) {\n      hashMap.set(i, 1);\n      let re", "add(14);\n    vector.setLength(7);\n    let r", "hMap();\n    hashMap.set(\"$\", \"A\");\n    let ", "hMap();\n    hashMap.set(3.14, \"A\");\n    let", " try {\n      vector.set(12, \"\u4e8c\");\n    } cat", "hMap();\n    hashMap.set(1, 2);\n    let res ", ", \"B\");\n    hashMap.set(3, \"C\");\n    hashMa", ", \"C\");\n    hashMap.set(4, \"D\");\n    hashMa", "hMap();\n    hashMap.set(1, \"$\");\n    let re", "hMap();\n    hashMap.set(0.3, \"A\");\n    let ", "a = {};\n    hashMap.set(1, a);\n    let res ", "hMap();\n    hashMap.set(1, -1);\n    let res", "hMap();\n    hashMap.set(1, null);\n    let r", ".add(1);\n    vector.setLength(5);\n    let r", "\n    let res = list.set(2, \"d\");\n    let re", "hMap();\n    hashMap.set(\"\", \"A\");\n    let r", " \"13\"};\n    hashMap.set(1, c);\n    let res ", ", \"D\");\n    hashMap.set(5, \"E\");\n    let re", "rtEqual(\"ArrayList: set out-of-bounds\");\n  ", "      configService.setConfig(this)\n\n      "], "files": ["List.test.js", "LinkedList.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "getLastIndexOf", "api_method_all": "getLastIndexOf(element: T): number;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["   let res = vector.getLastIndexOf(1);\n    expect(res)", "let res = arrayList.getLastIndexOf(1);\n    expect(res)", "\n    let res = list.getLastIndexOf(\"f\");\n    expect(re", "et res1 = arrayList.getLastIndexOf(1);\n    expect(res)", "\n    let res = list.getLastIndexOf(\"a\");\n    expect(re", "   let res = vector.getLastIndexOf(\"\u4e8c\");\n    expect(re", "\n    let res = list.getLastIndexOf(\"F\");\n    expect(re"], "files": ["LinkedList.test.js", "Vector.test.js", "List.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "getLastIndexFrom", "api_method_all": "getLastIndexFrom(element: T, index: number): number;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["   let res = vector.getLastIndexFrom(1, 5);\n    expect(r"], "files": ["Vector.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "getIndexFrom", "api_method_all": "getIndexFrom(element: T, index: number): number;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["   let res = vector.getIndexFrom(1, 5);\n    expect(r"], "files": ["Vector.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "removeByRange", "api_method_all": "removeByRange(fromIndex: number, toIndex: number): void;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": [" try {\n      vector.removeByRange(1, 7);\n    } catch ", "acity();\n    vector.removeByRange(0, capacity);\n    l", " try {\n      vector.removeByRange(3, 1);\n    } catch ", "let res = arrayList.removeByRange(6, 8);\n    } catch ", "d(1);\n    arrayList.removeByRange(0, 9);\n    let res ", " try {\n      vector.removeByRange(-1, capacity);\n    ", " try {\n      vector.removeByRange(length + 1, 7);\n   ", "d(1);\n    arrayList.removeByRange(1, 3);\n    let arr ", "let res = arrayList.removeByRange(3, 1);\n    } catch ", "acity();\n    vector.removeByRange(0, capacity + 1);\n ", ".add(1);\n    vector.removeByRange(1, 3);\n    let arr "], "files": ["Vector.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "replaceAllElements", "api_method_all": "replaceAllElements(callbackfn: (value: T, index?: number, vector?: Vector<T>) => T,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 5, "api_level": 11, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["add(14);\n    vector.replaceAllElements((item, index) => {\n      return (item =", "st.add(5);\n    list.replaceAllElements((item, index) => {\n      return (item =", "t num = 0;\n    list.replaceAllElements((item, index) => {\n      num++;\n    });", "(14);\n    arrayList.replaceAllElements((item, index) => {\n      return (item ="], "files": ["Vector.test.js", "List.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "replaceAllElements", "api_method_all": "replaceAllElements(callbackfn: (value: T, index?: number, vector?: Vector<T>) => T,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 4, "api_level": 11, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["add(14);\n    vector.replaceAllElements((item, index) => {\n      return (item =", "st.add(5);\n    list.replaceAllElements((item, index) => {\n      return (item =", "t num = 0;\n    list.replaceAllElements((item, index) => {\n      num++;\n    });", "(14);\n    arrayList.replaceAllElements((item, index) => {\n      return (item ="], "files": ["Vector.test.js", "List.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: T, index?: number, vector?: Vector<T>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 5, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: T, index?: number, vector?: Vector<T>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 4, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "sortcomparator", "api_method_all": "sort(comparator?: (firstValue: T, secondValue: T) => number): void;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "sortcomparator", "api_method_all": "sort(comparator?: (firstValue: T, secondValue: T) => number): void;", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "subVector", "api_method_all": "subVector(fromIndex: number, toIndex: number): Vector<T>;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["   let res = vector.subVector(1, length + 1);\n   ", " try {\n      vector.subVector(length + 1, length ", "   let res = vector.subVector(2, 4);\n    let arr ", "   let res = vector.subVector(4, 2);\n    } catch "], "files": ["Vector.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "clear", "api_method_all": "clear(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 30, "since": 8, "api_used": "\u662f", "lines": ["t.add(14);\n    list.clear();\n    let res = li", "\n    lightWeightMap.clear();\n    let res = li", "ual(5);\n    hashSet.clear();\n    let res1 = h", "  let res = hashSet.clear();\n    expect(res).", "5,33);\n        that.clear()\n        var resul", "(5);\n    plainArray.clear();\n    let res1 = p", "add(5);\n    hashSet.clear();\n    let res = ha", ".add(\"a\");\n    list.clear();\n    let res = li", "ew List();\n    list.clear();\n    let res1 = l", "\n    lightWeightSet.clear();\n    let res = li", ", \"a\");\n    treeMap.clear();\n    expect(treeM", "\n    lightWeightSet.clear();\n    let res1 = l", "hMap();\n    hashMap.clear();\n    let res = ha", "add(2);\n    treeSet.clear();\n    let res = tr", "add(14);\n    vector.clear();\n    let res = ve", ", \"c\");\n    treeMap.clear();\n    let res = tr", "t();\n    linkedList.clear();\n    const len = ", "length\n        that.clear()\n        var resul", "ual(5);\n    hashMap.clear();\n    let res1 = h", "(0);\n    plainArray.clear();\n    let res2 = p", "(14);\n    arrayList.clear();\n    let res = ar", ", \"E\");\n    hashMap.clear();\n    let res = ha"], "files": ["LightWeightSet.test.js", "List.test.js", "LinkedList.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "clone", "api_method_all": "clone(): Vector<T>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["narray = plainArray.clone();\n    let cloneLen", "ewlist = linkedList.clone();\n    let res = tr", "et res = plainArray.clone();\n    let arr = []", ".length;\n    expect(cloneLength).assertEqual(", "   let list1 = list.clone();\n    list1.addFir", "ay.clone();\n    let cloneLength = clonePlaina", "let res = arrayList.clone();\n    let arr = []", "ainArray();\n    let clonePlainarray = plainAr", "  let cloneLength = clonePlainarray.length;\n ", "   let res = vector.clone();\n    let arr = []"], "files": ["LinkedList.test.js", "Vector.test.js", "PlainArray.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "setLength", "api_method_all": "setLength(newSize: number): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [".add(1);\n    vector.setLength(5);\n    let res1 = ", "add(14);\n    vector.setLength(7);\n    let res1 = "], "files": ["Vector.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "getCapacity", "api_method_all": "getCapacity(): number;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 24, "since": 8, "api_used": "\u662f", "lines": ["t capacity = vector.getCapacity();\n    try {\n      ", "t capacity = vector.getCapacity();\n    vector.remov", "let res = arrayList.getCapacity();\n    expect(res).", "   let res = vector.getCapacity();\n    expect(res).", "t capacity = vector.getCapacity();\n    vector.inser", "  var result = that.getCapacity()\n        expect(re"], "files": ["Vector.test.js", "util.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "convertToArray", "api_method_all": "convertToArray(): Array<T>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["   let arr = vector.convertToArray();\n    let a = [4, ", "\n    let res = list.convertToArray();\n\n    let a = [4,", "   const res = list.convertToArray();\n    expect(res.l", "let arr = arrayList.convertToArray();\n    let a = [4, "], "files": ["LinkedList.test.js", "Vector.test.js", "List.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "isEmpty", "api_method_all": "isEmpty(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 34, "since": 8, "api_used": "\u662f", "lines": ["  let res = hashSet.isEmpty();\n    expect(res).", "ty = lightWeightMap.isEmpty();\n    expect(isEmp", " it(\"SR000GGR47_testisEmpty057\", 0, function ()", " +\n            info.isEmptyElementTag()+ info.i", "s2 = lightWeightMap.isEmpty();\n    expect(res2)", "    let res = stack.isEmpty();\n    expect(res).", "et res = plainArray.isEmpty();\n    expect(res).", "   let res = vector.isEmpty();\n    expect(res).", " it(\"SR000GGR44_testisEmpty031\", 0, function ()", " it(\"SR000GGR44_testisEmpty030\", 0, function ()", " let res1 = hashMap.isEmpty();\n    expect(res).", "\n    let res = list.isEmpty();\n    expect(res).", " it(\"SR000GGR47_testisEmpty058\", 0, function ()", "s1 = lightWeightMap.isEmpty();\n    expect(res1)", " let res1 = treeSet.isEmpty();\n    expect(res1)", "rtEqual(0);\n    let isEmpty = lightWeightMap.is", "es = lightWeightSet.isEmpty();\n    expect(res).", "let res = arrayList.isEmpty();\n    expect(res).", " let res2 = treeSet.isEmpty();\n    expect(res2)", "Empty();\n    expect(isEmpty).assertEqual(true);", "  var result = that.isEmpty()\n        expect(re"], "files": ["LightWeightSet.test.js", "List.test.js", "TreeSet.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "increaseCapacityTo", "api_method_all": "increaseCapacityTo(newCapacity: number): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["add(14);\n    vector.increaseCapacityTo(30);\n    let res = ", "     lightWeightMap.increaseCapacityTo(\"qwe\");\n    } catch", "es = lightWeightSet.increaseCapacityTo(20);\n    expect(res", "(14);\n    arrayList.increaseCapacityTo(8);\n    let res = a", "\n    lightWeightMap.increaseCapacityTo(3);\n    let length ", "let res = arrayList.increaseCapacityTo();\n    } catch (err", "     lightWeightSet.increaseCapacityTo(3);\n    } catch (er", "es = lightWeightMap.increaseCapacityTo(10);\n    expect(res", "es = lightWeightSet.increaseCapacityTo(\"qwe\");\n    } catch", "(14);\n    arrayList.increaseCapacityTo(-1);\n    let res = "], "files": ["LightWeightMap.test.js", "Vector.test.js", "LightWeightSet.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "toString", "api_method_all": "toString(): string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 131, "since": 8, "api_used": "\u662f", "lines": ["      expect(result.toString()).assertEqual('')\n", "      expect(result.toString()).assertEqual(\"DEF", "   let res = vector.toString();\n    expect(res).", "      expect(result.toString()).assertEqual(\"da,", "   var res = params.toString();\n        expect(r", "es = lightWeightMap.toString();\n    expect(res).", "t res1 = plainArray.toString();\n    expect(res1)", "      expect(result.toString()).assertEqual(\"val", "\n        expect(res.toString()).assertEqual(\"htt", "es = lightWeightSet.toString();\n    expect(res).", "et res = plainArray.toString();\n    expect(res).", "var result = params.toString()\n        expect(re", "var result = params.toString();\n        expect(r", "   let res = gaogao.toString();\n        expect(r", "         expect(err.toString()).assertEqual(\"Err"], "files": ["LightWeightSet.test.js", "url.test.js", "util.test.js", "uri.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "trimToCurrentLength", "api_method_all": "trimToCurrentLength(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["add(14);\n    vector.trimToCurrentLength();\n    let res = ve", "(14);\n    arrayList.trimToCurrentLength();\n    let res = ar"], "files": ["Vector.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "copyToArray", "api_method_all": "copyToArray(array: Array<T>): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["   let res = vector.copyToArray(arr1);\n    let a = "], "files": ["Vector.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Vector", "api_method_name": "length", "api_method_all": "length: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 327, "since": 8, "api_used": "\u662f", "lines": ["et res1 = arrayList.length;\n    expect(res).as", "   let res1 = deque.length;\n    expect(res1).a", "let res = arrayList.length;\n    expect(res).as", "   let size = deque.length;\n    expect(size).a", "   let size = deque.length;\n    let arr = [];\n", "= 0; i < linkedList.length; i++) {\n      if (l", "\n    let res = list.length;\n    expect(res).as", "r (let i = 0; i < a.length; i++) {\n      expec", "x = 0; index < list.length; index++) {\n      e", "let res = arrayList.length;\n    let res1 = arr", "st len = linkedList.length;\n    expect(len).as"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "Queue.test.js", "LightWeightMap.test.js", "LightWeightSet.test.js", "HashMap.test.js", "Worker.test.js", "TreeSet.test.js", "Process.test.js", "PlainArray.test.js", "TreeMap.test.js", "worker.js"], "is_white": " ", "desc": " "}]}