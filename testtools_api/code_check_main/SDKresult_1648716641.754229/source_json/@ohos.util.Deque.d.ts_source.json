{"subsystem_ch": "\u516c\u5171\u57fa\u7840\u7c7b\u5e93", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.util.Deque", "api": [{"api_class_name": "Deque", "api_method_all": "declare class Deque<T> {\r\n  \r\n  constructor();\r\n  \r\n  length: number;\r\n  \r\n  insertFront(element: T): void;\r\n  \r\n  insertEnd(element: T): void;\r\n  \r\n  has(element: T): boolean;\r\n  \r\n  getFirst(): T;\r\n  \r\n  getLast(): T;\r\n  \r\n  popFirst(): T;\r\n  \r\n  popLast(): T;\r\n  \r\n  forEach(callbackfn: (value: T, index?: number, deque?: Deque<T>) => void,\r\n  thisArg?: Object): void;\r\n  \r\n  [Symbol.iterator](): IterableIterator<T>;\r\n}", "api_method_name": "Deque", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["    let deque = new Deque();\n    for (let i =", "unit/index';\nimport Deque from \"@ohos.util.De", "    let deque = new Deque();\n    let a = [1, ", "ue from \"@ohos.util.Deque\";\n\ndescribe(\"DequeT", ".Deque\";\n\ndescribe(\"DequeTest\", function () {", "st.js');\nrequire('./Deque.test.js');\nrequire(", "    let deque = new Deque();\n    deque.insert", "    let deque = new Deque();\n    } catch (err", "    let deque = new Deque();\n    let res = de", "    let deque = new Deque();\n    let a = {cla", "    let deque = new Deque();\n    let a = [\"a\"", "    let deque = new Deque();\n    let a = {nam"], "files": ["Main.test.js", "Deque.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 32, "since": 8, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "insertFront", "api_method_all": "insertFront(element: T): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 36, "since": 8, "api_used": "\u662f", "lines": [" Deque();\n    deque.insertFront(undefined);\n    let", " Deque();\n    deque.insertFront(8);\n    let res = d", "ont(\"s\");\n    deque.insertFront(\"z\");\n    deque.pop", "ont(\"a\");\n    deque.insertFront(\"b\");\n    deque.ins", "rtEnd(8);\n    deque.insertFront(\"\u4e00\");\n    deque.ins", " Deque();\n    deque.insertFront(\"\u4e00\");\n    let res =", "opLast();\n    deque.insertFront(8);\n    deque.inser", "ont(\"\u4e00\");\n    deque.insertFront(\"\u4e8c\");\n    deque.ins", "opLast();\n    deque.insertFront(\"\u56db\");\n    deque.ins", "2, 3, 4];\n    deque.insertFront(a);\n    let res = d", " Deque();\n    deque.insertFront(null);\n    let res ", "ont(\"\u4e09\");\n    deque.insertFront(\"\u56db\");\n    deque.pop", "e: \"15\"};\n    deque.insertFront(a);\n    let res = d", " i++) {\n      deque.insertFront(i);\n      let res =", "rtEnd(8);\n    deque.insertFront(\"a\");\n    deque.ins", "ont(\"\u4e09\");\n    deque.insertFront(\"\u56db\");\n    let arr =", " Deque();\n    deque.insertFront(\" \");\n    let res =", " Deque();\n    deque.insertFront(\"$\");\n    let res =", "opLast();\n    deque.insertFront(\"g\");\n    deque.ins", "rtEnd(6);\n    deque.insertFront(\"s\");\n    deque.ins", "rtEnd(6);\n    deque.insertFront(\"\u4e09\");\n    deque.ins", "ont(\"\u4e00\");\n    deque.insertFront(\"\u4e8c\");\n    let res =", "rtEnd(8);\n    deque.insertFront(\"\u4e00\");\n    let res ="], "files": ["Deque.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "insertEnd", "api_method_all": "insertEnd(element: T): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 47, "since": 8, "api_used": "\u662f", "lines": ["rtEnd(3);\n    deque.insertEnd(3);\n    deque.inser", "ont(\"\u4e8c\");\n    deque.insertEnd(1);\n    deque.inser", " Deque();\n    deque.insertEnd(8);\n    let res = d", "ont(\"\u4e8c\");\n    deque.insertEnd(5);\n    deque.inser", "b\", \"c\"];\n    deque.insertEnd(a);\n    let res = d", "End(\"\u56db\");\n    deque.insertEnd(\"\u4e09\");\n    let res =", "rtEnd(4);\n    deque.insertEnd(5);\n    deque.inser", "ont(\"\u56db\");\n    deque.insertEnd(6);\n    let arr = [", " Deque();\n    deque.insertEnd(undefined);\n    let", "rtEnd(1);\n    deque.insertEnd(2);\n    deque.inser", " Deque();\n    deque.insertEnd(6);\n    let res = d", " Deque();\n    deque.insertEnd(null);\n    let res ", "ont(\"g\");\n    deque.insertEnd(6);\n    let size = ", "rtEnd(2);\n    deque.insertEnd(3);\n    deque.inser", "rtEnd(5);\n    deque.insertEnd(6);\n    deque.popFi", " i++) {\n      deque.insertEnd(i);\n      let res =", "rtEnd(8);\n    deque.insertEnd(\"\u4e09\");\n    let res =", "rtEnd(3);\n    deque.insertEnd(4);\n    deque.inser", " Deque();\n    deque.insertEnd(\"\u56db\");\n    deque.ins", "ont(\"b\");\n    deque.insertEnd(5);\n    deque.inser", "rtEnd(8);\n    deque.insertEnd(1);\n    deque.inser", "Front(8);\n    deque.insertEnd(6);\n    let arr = [", "y: \"we\"};\n    deque.insertEnd(a);\n    let res = d", " Deque();\n    deque.insertEnd(8);\n    deque.inser", "rtEnd(5);\n    deque.insertEnd(6);\n    deque.inser", " Deque();\n    deque.insertEnd(\" \");\n    let res =", " Deque();\n    deque.insertEnd(\"$\");\n    let res ="], "files": ["Deque.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "has", "api_method_all": "has(element: T): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 544, "since": 8, "api_used": "\u662f", "lines": [" new HashMap();\n    hashMap.set(\"\", \"A\");\n ", "let res = arrayList.has(\"\u56db\");\n    expect(re", "\"A\");\n    let res = hashMap.get(3.14);\n    ", "let res = arrayList.has(\"\u4e09\");\n    expect(re", ", c);\n    let res = hashMap.get(1);\n    exp", "\"A\");\n    let res = hashMap.get(\"\");\n    ex", "\"A\");\n    let res = hashMap.get(1);\n    exp", "et res = linkedList.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(1, 2);\n    ", "\"A\");\n    let res = hashMap.get(\"a\");\n    e", "\n    let res = list.has(\"a\");\n    expect(re", "\n    let res = list.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(3.14, \"A\");", "et res = linkedList.has(\"a\");\n    expect(re", "   let res = vector.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(1, \"A\");\n  ", "i\", age: \"13\"};\n    hashMap.set(1, c);\n    ", "let res = arrayList.has(a);\n    expect(res)", "    try {\n      let hashMap = new HashMap()", " new HashMap();\n    hashMap.set(\"a\", \"A\");\n", "Map();\n      expect(hashMap != undefined).a", "    let res = deque.has(6);\n    expect(res)", "\"A\");\n    let res = hashMap.get(\"$\");\n    e", "   let res = vector.has(8);\n    expect(res)", "nction () {\n    let hashMap = new HashMap()", "\n    let res = list.has(\"d\");\n    expect(re", " new HashMap();\n    hashMap.set(\"$\", \"A\");\n", "let res = arrayList.has(\"\u4e8c\");\n    expect(re", "t res1 = linkedList.has(\"d\");\n    expect(re", "  let res1 = vector.has(\"\u4e8c\");\n    expect(re", " c = [1, 2, 3];\n    hashMap.set(1, c);\n    ", "   let res = vector.has(\"\u4e09\");\n    expect(re", "let res = arrayList.has(8);\n    expect(res)", ", 2);\n    let res = hashMap.get(1);\n    exp"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "getFirst", "api_method_all": "getFirst(): T;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["    let res = queue.getFirst();\n    expect(res).", "\n    let res = list.getFirst();\n    expect(res).", "   let res1 = queue.getFirst();\n    expect(res).", "    let res = deque.getFirst();\n      expect(res", "  let res = treeSet.getFirstValue();\n    expect(", "   let res = vector.getFirstElement();\n    expec", "  let res = treeMap.getFirstKey();\n    expect(re", "et res = linkedList.getFirst();\n    expect(res).", "    let res = deque.getFirst();\n    expect(res)."], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "Vector.test.js", "TreeMap.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "getLast", "api_method_all": "getLast(): T;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 30, "since": 8, "api_used": "\u662f", "lines": ["let res = arrayList.getLastIndexOf(1);\n    expe", "et res1 = arrayList.getLastIndexOf(1);\n    expe", "    let res = deque.getLast();\n    expect(res).", "   let res = vector.getLastElement();\n    expec", "   let res = vector.getLastElement();\n    let r", "  let res = treeSet.getLastValue();\n    expect(", "\n    let res = list.getLastIndexOf(\"f\");\n    ex", "   let res = vector.getLastIndexFrom(1, 5);\n   ", "\n    let res = list.getLastIndexOf(\"a\");\n    ex", "    let res = deque.getLast();\n      expect(res", "   let res = vector.getLastIndexOf(\"\u4e8c\");\n    ex", "  let res = treeMap.getLastKey();\n    expect(re", "et res = linkedList.getLast();\n    expect(res).", "   let res = vector.getLastIndexOf(1);\n    expe", "\n    let res = list.getLast();\n    expect(res).", "\n    let res = list.getLastIndexOf(\"F\");\n    ex"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "Vector.test.js", "TreeMap.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "popFirst", "api_method_all": "popFirst(): T;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": [" let res1 = treeSet.popFirst();\n    expect(res1)", "    let res = deque.popFirst();\n    expect(res).", "ont(\"z\");\n    deque.popFirst();\n    deque.popLas", "rtEnd(6);\n    deque.popFirst();\n    deque.popLas", "  let res = treeSet.popFirst();\n    expect(res).", "ont(\"\u56db\");\n    deque.popFirst();\n    deque.popLas"], "files": ["TreeSet.test.js", "Deque.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "popLast", "api_method_all": "popLast(): T;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["pFirst();\n    deque.popLast();\n    deque.insert", "  let res = treeSet.popLast();\n    expect(res).", "    let res = deque.popLast();\n    expect(res)."], "files": ["TreeSet.test.js", "Deque.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: T, index?: number, deque?: Deque<T>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 5, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: T, index?: number, deque?: Deque<T>) => void,\r\n  thisArg?: Object): void;", "api_type": "callback", "api_args_count": 4, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Deque", "api_method_name": "length", "api_method_all": "length: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 327, "since": 8, "api_used": "\u662f", "lines": ["et res1 = arrayList.length;\n    expect(res).as", "   let res1 = deque.length;\n    expect(res1).a", "let res = arrayList.length;\n    expect(res).as", "   let size = deque.length;\n    expect(size).a", "   let size = deque.length;\n    let arr = [];\n", "= 0; i < linkedList.length; i++) {\n      if (l", "\n    let res = list.length;\n    expect(res).as", "r (let i = 0; i < a.length; i++) {\n      expec", "x = 0; index < list.length; index++) {\n      e", "let res = arrayList.length;\n    let res1 = arr", "st len = linkedList.length;\n    expect(len).as"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "Queue.test.js", "LightWeightMap.test.js", "LightWeightSet.test.js", "HashMap.test.js", "Worker.test.js", "TreeSet.test.js", "Process.test.js", "PlainArray.test.js", "TreeMap.test.js", "worker.js"], "is_white": " ", "desc": " "}]}