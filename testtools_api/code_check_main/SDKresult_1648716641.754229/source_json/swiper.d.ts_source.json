{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\swiper", "api": [{"api_class_name": "SwiperController", "api_method_all": "declare class SwiperController {\n  \n  constructor();\n\n  \n  showNext();\n\n  \n  showPrevious();\n\n  \n  finishAnimation(callback?: () => void);\n}", "api_method_name": "SwiperController", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["perController = new SwiperController()\n  private data: M", "e swiperController: SwiperController = new SwiperControl"], "files": ["swiper.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperController", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperController", "api_method_name": "showNext", "api_method_all": "showNext();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["ex: 2});\n    },\n    showNext() {\n        this.$e", "$element('swiper2').showNext();\n    },\n    showP", "$element('swiper1').showNext();\n        this.$el", ".$element('swiper').showNext();\n        this.$el", "is.swiperController.showNext();\n            this", "is.swiperController.showNext()\n          })\n    "], "files": ["swiper.ets", "Swiper.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperController", "api_method_name": "showPrevious", "api_method_all": "showPrevious();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["is.swiperController.showPrevious()\n            this.", "is.swiperController.showPrevious()\n          })\n    ", "$element('swiper2').showPrevious();\n    },\n\n    onSh", ".$element('swiper').showPrevious();\n        this.$el", "$element('swiper1').showPrevious();\n        this.$el", "wNext();\n    },\n    showPrevious() {\n        this.$e"], "files": ["swiper.ets", "Swiper.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperController", "api_method_name": "finishAnimationcallback", "api_method_all": "finishAnimation(callback?: () => void);", "api_type": "callback", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperController", "api_method_name": "finishAnimationcallback", "api_method_all": "finishAnimation(callback?: () => void);", "api_type": "callback", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperDisplayMode", "api_method_all": "declare enum SwiperDisplayMode {\n  \n  Stretch,\n\n  \n  AutoLinear,\n}", "api_method_name": "SwiperDisplayMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["     */\n    it('testSwiperDisplayModePropAutoLinear', 0, ", "* @tc.name      testSwiperDisplayModePropStretch\n     * @", "  console.info('testSwiperDisplayModePropStretch START');", "splayMode: number = SwiperDisplayMode.AutoLinear\n  @State", "     */\n    it('testSwiperDisplayModePropStretch', 0, asy", "* @tc.name      testSwiperDisplayModePropAutoLinear\n     ", "  console.info('testSwiperDisplayModePropAutoLinear START"], "files": ["swiperProps.test.js", "swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperDisplayMode", "api_method_name": "Stretch", "api_method_all": "Stretch,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["alignSelf(ItemAlign.Stretch)\n        .borderWid", "     displayModePropStretch: null,\n        disp", "ent(\"displayModePropStretch\").getInspector()\n  ", "wiperDisplayModePropStretch\n     * @tc.desc    ", "wiperDisplayModePropStretch', 0, async function", "ertEqual(\"ItemAlign.Stretch\")\n      expect(obj.", "ignSelf = ItemAlign.Stretch;\n          break;\n ", "     displayModePropStretch: this.displayModePr", "this.displayModePropStretch,\n            displa", "this.displayModePropStretch = this.$element(\"di", "wiperDisplayModePropStretch START');\n        co", "alue.displayModePropStretch); //id\n        cons", "reak;\n        case 'Stretch':\n          this.al", "alignSelf(ItemAlign.Stretch)\n          .width('", "ual('displayModePropStretch') //ID\n        expe"], "files": ["flex.ets", "swiperProps.test.js", "TextJsunit.test.ets", "index.js", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperDisplayMode", "api_method_name": "AutoLinear", "api_method_all": "AutoLinear,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["this.displayModePropAutoLinear,\n        }\n    },\n\n", "     displayModePropAutoLinear: null,\n    },\n\n    ", "= SwiperDisplayMode.AutoLinear\n  @State edgeEffect", "ual('displayModePropAutoLinear') //ID\n        expe", "wiperDisplayModePropAutoLinear', 0, async function", "this.displayModePropAutoLinear = this.$element(\"di", "ent(\"displayModePropAutoLinear\").getInspector()\n  ", "alue.displayModePropAutoLinear); //id\n        cons", "     displayModePropAutoLinear: this.displayModePr", "wiperDisplayModePropAutoLinear\n     * @tc.desc    ", "wiperDisplayModePropAutoLinear START');\n        co"], "files": ["swiperProps.test.js", "swiper.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperInterface", "api_method_all": "interface SwiperInterface {\n  \n  (controller?: SwiperController): SwiperAttribute;\n}", "api_method_name": "SwiperInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperInterface", "api_method_name": "controller", "api_method_all": "(controller?: SwiperController): SwiperAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 50, "since": 7, "api_used": "\u662f", "lines": [" {\n            this.controller.stop()\n          })", " {\n            this.controller.onInactive()\n      ", " {\n            this.controller.loadData({\n        ", "s.accessStep = this.controller.accessStep(1)\n     ", ".nextMonth,\n        controller: this.Controller\n  ", "t getHitTest = this.controller.getHitTest()\n      ", "string= ''\n  @State controller: SearchController= ", " {\n            this.controller.registerJavaScriptP", "cessBackward = this.controller.accessBackward()\n  ", "', controller: this.controller })\n        .searchB", " {\n            this.controller.forward()\n         ", "on.Start, index: 1, controller: this.controller })", " {\n            this.controller.runJavaScript({\n   ", " {\n            this.controller.requestFocus()\n    ", " {\n            this.controller.clearHistory()\n    ", ")=>{\n          this.controller.stop()\n          th", "tion.End, index: 1, controller: this.controller })", "gressRates,\n        controller: this.myVideoContro", " {\n            this.controller.refresh()\n         ", " {\n            this.controller.onActive()\n        ", " {\n            this.controller.close()\n           ", "{\n      TextTimer({ controller: this.myTimerContro", "8, controller: this.controller})\n        .key('tex", "ccessForward = this.controller.accessForward()\n   ", "r: 'input content', controller: this.controller })", " {\n            this.controller.deleteJavaScriptReg", "1, controller: this.controller }) {\n        TabCon", "previewUri,\n        controller: this.myVideoContro", "tTestType.Unknown\n  controller: WebController = ne", "timeZoneOffset: -8, controller: this.controller})\n", ", libraryname: '3', controller: this.xComponentCon", "omDialogExample {\n  controller: CustomDialogContro", "Example {\n  private controller: TabsController = n", " boolean = false;\n  controller: TextClockControlle", " {\n            this.controller.loadUrl({\n         ", " {\n            this.controller.backward()\n        ", "=> {\n          this.controller.caretPosition(4)\n  ", "n = false\n  private controller: TabsController = n", ": this.barPosition, controller: this.controller, i", "('indextest.html'), controller: this.controller })", "), controller: this.controller })\n        .domStor", "n, controller: this.controller, index: this.index ", "=> {\n          this.controller.changeIndex(0)\n    ", "rl);\n          this.controller.runJavaScript('test", ")=>{\n          this.controller.start()\n        })\n"], "files": ["textClock.ets", "tabs.ets", "Video.ets", "WebPage.ets", "video.ets", "Tab.ets", "textInput.ets", "textTimer.ets", "Calendar.ets", "XComponentPage.ets", "search.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IndicatorStyle", "api_method_all": "declare interface IndicatorStyle {\n  \n  left?: Length;\n\n  \n  top?: Length;\n\n  \n  right?: Length;\n\n  \n  bottom?: Length;\n\n  \n  size?: Length;\n\n  \n  mask?: boolean;\n\n  \n  color?: ResourceColor;\n\n  \n  selectedColor?: ResourceColor;\n}", "api_method_name": "IndicatorStyle", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "IndicatorStyle", "api_method_name": "left", "api_method_all": "left?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 341, "since": 8, "api_used": "\u662f", "lines": ["One.right - rectOne.left) / 2;\n      let upY", "Style = ButtonStyle.left\n  @State iconsValue", "top: 30, right: 30, left: 30 })\n  }\n}", " (rect.right - rect.left) / 2;\n      let dow", "RGIN_LEFT = 'margin-left'\nconst ATTRS_BACKGR", "\n        .padding({ left: 5 })\n        .key(", "margin({ right: 30, left: 30 })\n    }\n    .w", "nfo);\n    this.rect_left = JSON.parse('[' + ", "          }.margin({left: 10, right: 10})\n  ", "}).margin({ top: 5, left: 20 })\n    }.width(", " (rect.right - rect.left);\n      let upY = r", "ct_value = {\n      \"left\": this.rect_left, \"", "  \"left\": this.rect_left, \"top\": this.rect_t", "5)\n      .padding({ left: 12 })\n    }.backgr", "0xFF0000).padding({ left: 20 })\n        .onC", "   let downX = rect.left + (rect.right - rec", "top: 0,\n            left: 0\n          }\n    ", "ontSize(20).margin({left:10})\n          }.ma", "top: 0,\n            left: 0\n          },\n   ", "350)\n    .padding({ left: 35, right: 35, top", "ight(400).padding({ left: 35, right: 35, top", "  let upX = rectOne.left + (rectOne.right - ", "ils {\n  static rect_left;\n  static rect_top;"], "files": ["Utils.ets", "marqueeProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "SourceTypeJsunit.test.ets", "canvas.ets", "Text.ets", "Navigation.ets", "divider.ets", "imageEffects.ets", "PanGestureJsunit.test.ets", "popupProps.test.js", "AlphabetIndexer.ets", "Constants.ets", "scrollCode.ets", "sideBar.ets", "animationStatus.ets", "toggle.ets", "Panel.ets", "Sidebar.ets", "fillMode.ets", "navigation.ets", "Scroll.ets", "text.ets", "FormComponentPage.ets", "TapGesture.test.ets", "list.ets", "List.ets", "ResponseRegionJsunit.test.ets", "index.js", "areaChange.ets", "edgeEffect.ets", "calendar.ets", "PriorityGestureJsunit.test.ets", "scrollBar.ets", "lazyForEach.ets", "Toggle.ets", "image.ets", "Calendar.ets", "fontWeight.ets", "sharedTransition.ets", "imageAnimator.ets", "ScrollBar.ets", "bindPopup.ets", "panel.ets", "button.ets", "span.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IndicatorStyle", "api_method_name": "top", "api_method_all": "top?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 607, "since": 8, "api_used": "\u662f", "lines": ["\n        }.margin({ top: 25 }).border({ wid", "th('100%').margin({ top: 5 })\n  }\n}\n", "t('100%').padding({ top: 5 })\n  }\n}\n", "')[0]\n    this.rect_top = JSON.parse('[' + ", "th('100%').margin({ top: 5 })\n  }\n  onPageS", " = AnimationStatus.Stopped\n          this.f", "00%')\n    .margin({ top: 5 })\n  }\n}", "          .margin({ top: 250 })\n      }\n   ", "})\n        Button('stop').key('button2').wi", "0%')\n    .padding({ top: 5 })\n  }\n}", "ontainer').margin({ top: 300 })\n    }\n  }\n}", "       }\n          stopPropagation: () => {", "          .margin({ top: 250 })\n          .", "ARGIN_TOP = 'margin-top'\nconst ATTRS_BORDER", ")\n        .margin({ top: 5 })\n        .key(", "\": this.rect_left, \"top\": this.rect_top, \"r", " }\n      .padding({ top: 50 })\n      .width", "        }).margin({ top: 5, left: 20 })\n   ", "ity\")\n        Text('top start')\n          .", "ht('100%').margin({ top: 30 })\n  }\n}", "%')\n    }.padding({ top: 20 })\n  }\n}", "th('100%').margin({ top: 20 })\n  }\n\n  onPag", "left;\n  static rect_top;\n  static rect_righ", "t, \"top\": this.rect_top, \"right\": this.rect", "0%')\n    .padding({ top: 5 })\n  }\n}\n", "0xDCDCDC).padding({ top: 5 })\n  }\n}", "0)\n        .margin({top:100})\n        .onSt", "t('100%').padding({ top: 5 })\n  }\n}", "   }\n    }.margin({ top: 5 })\n  }\n\n  onPage", "0xDCDCDC).padding({ top: 5 })\n  }\n\n   onPag", "th('100%').margin({ top: 5 })\n  }\n}", "f3f5)\n    .margin({ top: 10 })\n    .key('gr", "     console.info('stopPropagation')\n      ", "t: 200,\n            top: 0,\n            lef", "h('100%').padding({ top: 5 })\n  }\n}", "th('100%').margin({ top: 300 })\n  }\n}\n\n", "  .indicatorStyle({ top: 20, right: 20, siz"], "files": ["systemRouterA.ets", "configuration.ets", "video.ets", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "placement.ets", "playMode.ets", "Navigation.ets", "imageFit.ets", "richText.ets", "column.ets", "Panel.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "TapGesture.test.ets", "enumsLineCapStyle.ets", "Swiper.ets", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "scrollBar.ets", "transition.ets", "systemPrompt.ets", "gridSettings.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "polyline.ets", "focus.ets", "VideoJsunit.test.ets", "touch.ets", "ListItem.ets", "background.ets", "SourceTypeJsunit.test.ets", "Text.ets", "PanGestureJsunit.test.ets", "gauge.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "Sidebar.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "flexDirection.ets", "shapeClipping.ets", "edgeEffect.ets", "stepper.ets", "shape.ets", "image.ets", "loadingProgress.ets", "flex.ets", "Shape.ets", "Utils.ets", "gridContainer.ets", "Tab.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "popupProps.test.js", "textClock.ets", "tabs.ets", "videoProps.test.js", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "circle.ets", "listItem.ets", "grid.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "buttonProps.test.js", "animate.ets", "Flex.ets", "AnimationStatusJsunit.test.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "radio.ets", "ImageAnimatorJsunit.test.ets", "Constants.ets", "animationStatus.ets", "Path.ets", "fillMode.ets", "line.ets", "curves.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "progress.ets", "swiperProps.test.js", "WebPage.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "GridItem.ets", "slider.ets", "aboutToDisappear.ets", "Calendar.ets", "ScrollBar.ets", "panel.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IndicatorStyle", "api_method_name": "right", "api_method_all": "right?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 132, "since": 8, "api_used": "\u662f", "lines": ["ta: {\n            \"brightnessValue\": \"15\"\n   ", "One.left + (rectOne.right - rectOne.left) / 2", "_top;\n  static rect_right;\n  static rect_bott", "padding({ left: 35, right: 35, top: 35 })\n  }", "ta: {\n            \"brightnessValue\": 'error'\n", "('90%').height(40).brightness(this.brightness", ".padding({ top: 30, right: 30, left: 30 })\n  ", "')[1]\n    this.rect_right = JSON.parse('[' + ", "0).brightness(this.brightnessValue).key('cent", "}.margin({left: 10, right: 10})\n        }\n   ", "pect(objNew.$attrs.brightness).assertEqual(21", "ow4')\n\n      Text('brightness').fontSize(15).", "  let upX = rectOne.right + (rect.right - rec", "pect(objNew.$attrs.brightness).assertEqual(0.", "ll) {\n        this.brightnessValue = eventDat", "idth(360).padding({ right: 10, top: 10 })\n  }", "ring= 10;\n  @State brightnessValue: string= 2", ")\n        .margin({ right: 30, left: 30 })\n  ", "ctOne.right + (rect.right - rect.left);\n     ", "e = eventData.data.brightnessValue;\n      }\n ", "if (eventData.data.brightnessValue != null) {", "pect(objNew.$attrs.brightness).assertEqual(-2", " expect(obj.$attrs.brightness).assertEqual(20", "p\": this.rect_top, \"right\": this.rect_right, ", "pect(objNew.$attrs.brightness).assertEqual(15", "TTRS_BRIGHTNESS = 'brightness'\nconst ATTRS_BA", "ta: {\n            \"brightnessValue\": 0x7FFFFF", " \"right\": this.rect_right, \"bottom\": this.rec", "= rect.left + (rect.right - rect.left) / 2;\n ", "ta: {\n            \"brightnessValue\": 0x800000", "GIN_RIGHT = 'margin-right'\nconst ATTRS_CONSTR", "torStyle({ top: 20, right: 20, size: 2, color"], "files": ["Utils.ets", "ImageEffectsJsunit.test.ets", "marqueeProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "SourceTypeJsunit.test.ets", "canvas.ets", "Text.ets", "divider.ets", "imageFit.ets", "imageEffects.ets", "PanGestureJsunit.test.ets", "popupProps.test.js", "swiper.ets", "Constants.ets", "toggle.ets", "Scroll.ets", "text.ets", "FormComponentPage.ets", "WebPage.ets", "TapGesture.test.ets", "ResponseRegionJsunit.test.ets", "index.js", "areaChange.ets", "badgeProps.test.js", "calendar.ets", "PriorityGestureJsunit.test.ets", "lazyForEach.ets", "Toggle.ets", "image.ets", "Calendar.ets", "fontWeight.ets", "button.ets", "span.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IndicatorStyle", "api_method_name": "bottom", "api_method_all": "bottom?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 95, "since": 8, "api_used": "\u662f", "lines": [").margin({ top: 10, bottom: 10 })\n      Image(", ".padding({ top: 10, bottom: 10 }).margin(10)\n\n", "\"bottom\": this.rect_bottom\n    }\n  }\n\n  static", "ntSize(16).margin({ bottom: 10 })\n      Flex({", "r(0x317aff).margin({bottom:20})\n        .key('", "IN_BOTTOM = 'margin-bottom'\nconst ATTRS_BORDER", ": this.rect_right, \"bottom\": this.rect_bottom\n", " = rect.top + (rect.bottom - rect.top) / 2;\n  ", "tOne.bottom + (rect.bottom - rect.top);\n      ", "r(0x317aff).margin({bottom:50}).key('button')\n", ")\n        .margin({ bottom: 10 })\n        .onC", ")\n        .margin({ bottom: 40 })\n        .onS", "  let upY = rectOne.bottom + (rect.bottom - re", ")\n        .margin({ bottom: 10 })\n        .key", "')[0]\n    this.rect_bottom = JSON.parse('[' + ", "tOne.top + (rectOne.bottom - rectOne.top) / 2;", ")\n        .margin({ bottom: 20 })\n    }\n    .w", "d)\n      }.margin({ bottom: 10 })\n    }\n  }\n}\n", ")\n        .margin({ bottom: 20 })\n        .key", "ight;\n  static rect_bottom;\n  static rect_valu"], "files": ["animate.ets", "Utils.ets", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "playMode.ets", "SourceTypeJsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "Text.ets", "PanGestureJsunit.test.ets", "Stack.ets", "Constants.ets", "customDialogController.ets", "CustomDialog.ets", "FormComponentPage.ets", "textClock.ets", "geometryTransition.ets", "TapGesture.test.ets", "marquee.ets", "ResponseRegionJsunit.test.ets", "dragEvent2.ets", "index.js", "dragEvent.ets", "PriorityGestureJsunit.test.ets", "transition.ets", "transForm.ets", "Calendar.ets", "Marquee.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IndicatorStyle", "api_method_name": "size", "api_method_all": "size?: Length", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1127, "since": 8, "api_used": "\u662f", "lines": ["MD':\n          this.sizeType = SizeType.MD;\n", "    GridContainer({ sizeType: SizeType.SM })", "ontSize(20)\n      }.size({ width: '90%', hei", "ght(2)')\n          .size({ width: '30%', hei", " 12, sizeType: this.sizeType, gutter: 10, ma", "a.width;\n      this.sizeHeight = eventData.d", ")}`)\n          this.size = JSON.stringify(ne", ".$attrs.constructor.sizeType).assertEqual('S", "ring = 20;\n  @State sizeWidth: string = '100", " 'Small container', size: '30%' }];\n  @State", "ole.info(\"size page sizeChangCallBack\" + JSO", "    Text(`text font size ${this.fontSize}`)\n", "LG':\n          this.sizeType = SizeType.LG;\n", " = '100%';\n  @State sizeHeight: string = '10", "   Row()\n          .size({width: '30%', heig", "{\n    console.info(\"size page stateChangCall", "r(0xAFEEEE)\n      }.size({ width: '90%', hei", "Width, height: this.sizeHeight })\n          ", "llBackOne)\n\n    let sizeChangeEvent = {\n    ", "Weight')\n          .size({ width: '30%', hei", "[this.currentIndex].size)\n      .backgroundC", "area is: \\n' + this.size)\n        .key('text", " Row()\n            .size({ width: this.sizeW", "SM':\n          this.sizeType = SizeType.SM;\n", "  events_emitter.on(sizeChangeEvent, this.si", "rExample {\n  @State sizeType: SizeType = Siz", "tch (eventData.data.sizeType) {\n        case", "l: 'Big container', size: '97%' },\n    { lab", "ult:\n          this.sizeType = SizeType.Auto", "dex(2)')\n          .size({ width: '40%', hei", ".size({ width: this.sizeWidth, height: this.", "ght(1)')\n          .size({ width: '30%', hei", "to':\n          this.sizeType = SizeType.Auto", "abel: string = ''\n  size: string = ''\n};\n\ncl", "XS':\n          this.sizeType = SizeType.XS;\n", "top: 20, right: 20, size: 2, color: Color.Bl", "tem)\n      }\n      .size({ width: \"100%\", he", "t('background image size').fontSize(9).width", "{\n    console.info(\"size page weightChangCal", "   }\n  }\n\n  private sizeChangCallBack = (eve", ".rowsGap(10)\n      .size({ width: \"100%\", he", " = 'Text';\n  @State size: string = '';\n  @St", "{\n    console.info(\"size page sizeChangCallB", "iner({ columns: 12, sizeType: this.sizeType,", "dex(1)')\n          .size({ width: '70%', hei", "ata: {\n            \"sizeType\": 'SM'\n        ", "zeChangeEvent, this.sizeChangCallBack)\n\n    ", "dex(0)')\n          .size({ width: '90%', hei", "tData) {\n      this.sizeWidth = eventData.da"], "files": ["Select.ets", "ratingProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "SelectJsunit.test.ets", "gridContainer.ets", "imageAnimatorProps.test.js", "ContentStorage.test.ets", "RowSplit.ets", "background.ets", "Text.ets", "ColumnSplitJsunit.test.ets", "textStyle.ets", "TextInput.ets", "swiper.ets", "AlphabetIndexer.ets", "SystemRouterJsunit.test.ets", "zIndex.ets", "ColumnSplit.ets", "FormComponentPage.ets", "GridContainerJsunit.test.ets", "layoutConstraints.ets", "OhosRouterJsnuit.test.ets", "enumsItemAlign.ets", "swiperProps.test.js", "positionSetting.ets", "TextArea.ets", "GridContainer.ets", "dragEvent2.ets", "index.js", "AppStorageJsunit.test.ets", "areaChange.ets", "basicabilityapi.test.js", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "select.ets", "Toggle.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "Image.ets", "search.ets", "gridContainerProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "IndicatorStyle", "api_method_name": "mask", "api_method_all": "mask?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.maskColor != null) {\n   ", "lacement,\n          maskColor: 0x33000000,\n ", "const ATTRS_MASK = 'mask'\nconst ATTRS_MARKAN", "(indexEventOne.data.maskColor).assertEqual(0", "ementTwo,\n          maskColor: 0x33000000,\n ", "obj.$attrs.indicatormask).assertEqual('true'", "clip.png')\n        .mask(this.maskType)\n    ", "an = true;\n  @State maskType: CommonShapeMet", "obj.$attrs.indicatormask).assertEqual('false", "xpect(objNew.$attrs.mask.shape).assertEqual(", "spectorByKey('image_mask');\n      let objNew", "        .key('image_mask')\n    }\n\n    .width", "an = false\n  @State maskColor: string = 0x33", "false,\n            \"maskColor\": 0x33000009\n ", "  expect(obj.$attrs.mask.shape).assertEqual(", "  if(eventData.data.maskValue != null) {\n   ", "Props] get indicatormask value is: \" + JSON.", "or = eventData.data.maskColor;\n      }\n    }", "obj.$attrs.indicatormask));//prop\n        do", "true')\n\n      Text('mask')\n        .fontSize", "ect(indexEvent.data.maskColor).assertEqual(0", "ata: {\n            \"maskValue\": false\n      ", " {\n                \"maskColor\": this.maskCol", "\n        .mask(this.maskType)\n        .width", "entThree,\n          maskColor: 0x33000000,\n ", "spectorByKey('image_mask');\n      let obj = ", "    maskColor: this.maskColor,\n          pop", "t.Bottom,\n          maskColor: this.maskColo", "  \"maskColor\": this.maskColor,\n             ", "ull) {\n        this.maskColor = eventData.da", "ementOne,\n          maskColor: 0x33000000,\n ", "ull) {\n        this.maskType = new Circle({ "], "files": ["swiperProps.test.js", "Constants.ets", "bindPopup.ets", "ShapeClippingJsunit.test.ets", "placement.ets", "shapeClipping.ets", "BindPopupJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IndicatorStyle", "api_method_name": "color", "api_method_all": "color?: ResourceColor", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 276, "since": 8, "api_used": "\u662f", "lines": ["(obj.$attrs.divider.color).assertEqual(\"#FFFF", "        radius: 20, color: Color.Gray, offset", "bjNew.$attrs.shadow.color).assertEqual(\"#FF00", " 2.000000;\n  @State color: string = 0xFFFFFF;", " { radius: 'error', color: 'error', offsetX: ", "rt default function colorGradientJsunit() {\n ", " if (eventData.data.colorValues != null) {\n  ", "ata: {\n            \"colorValues\": JSON.string", "  console.info(\"get colorGradient state pages", "ing = 150;\n  @State colorValues: Array = [[0x", "ull) {\n        this.color = eventData.data.co", "bjNew.$attrs.shadow.color).assertEqual(\"#8000", "bjNew.$attrs.shadow.color).assertEqual(\"#FF80", "ull) {\n        this.colorValues = JSON.parse(", "\n        }.border({ color: Color.Black, width", "TRS_SHADOW_COLOR = 'color'\nconst ATTRS_SHADOW", "ection.Top,\n        colors: [[0xAEE1E1, 0.0],", "        color: this.color,\n          startMar", "t(obj.$attrs.shadow.color).assertEqual(\"#FF80", ".border({ width: 5, color: 0x317AF7, radius: ", "    radius: 60,\n    colors:[[0xAEE1E1, 0.0], ", "r({ strokeWidth: 2, color: 0xFFFFFF, startMar", "ata: {\n            \"color\": '0xFF0000'\n      ", "(obj.$attrs.divider.color).assertEqual(\"#FF00", " console.info(\"push colorGradient page result", "radius: 0x7FFFFFFF, color: 0x7FFFFFFF, offset", "      console.info(\"colorGradient beforeEach ", "        uri: 'pages/colorGradient',\n      }\n ", "Direction.Left,\n    colors: [[0xAEE1E1, 0.0],", "s));\n        if (!(\"colorGradient\" == pages.n", " if (eventData.data.color != null) {\n        ", ",\n    end: 359,\n    colors: [[0xAEE1E1, 0.0],", "      console.info(\"colorGradient after each ", "    Text(`text font color ${this.fontColor}`)", "   Text('background color').fontSize(9).width", "arse(eventData.data.colorValues);\n      }\n   ", "ject= { radius: 10, color: Color.Gray, offset", "or = eventData.data.color;\n      }\n      if (", "console.error(\"push colorGradient page error:", "radius: 0x80000000, color: 0x80000000, offset", "bjNew.$attrs.shadow.color).assertEqual(\"#7FFF", "ata: {\n            \"color\": \"#FF0000FF\"\n     ", "fontColor)\n        .colorBlend(Color.Green)\n ", "right: 20, size: 2, color: Color.Blue })\n    ", "  if(eventData.data.colorValues != null) {\n  ", "= \"200px\";\n  @State color: Array = [[0x080808", "okeWidth,\n          color: this.color,\n      "], "files": ["ohosPrompt.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "Qrcode.ets", "Span.ets", "Progress.ets", "toolbarItemProps.test.js", "marquee.ets", "basicabilityapi.test.js", "DividerJsunit.test.ets", "Divider.ets", "border.ets", "systemPrompt.ets", "List.test.ets", "scrollCode.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "gauge.ets", "TextJsunit.test.ets", "swiper.ets", "Blank.ets", "text.ets", "canvasProps.test.js", "BlankJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "labelProps.test.js", "image.ets", "ListJsunit.test.ets", "loadingProgress.ets", "stepperProps.test.js", "ratingProps.test.js", "ColorGradientJsunit.test.ets", "PatternLock.ets", "ShapeJsunit.test.ets", "badge.ets", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "stepperItemProps.test.js", "videoProps.test.js", "list.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "pickerProps.test.js", "selectProps.test.js", "span.ets", "NavigatorCode.ets", "BackgroundAndSizeSettingJsunit.test.ets", "mouseEvent.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "divProps.test.js", "divider.ets", "Constants.ets", "progress.ets", "sliderProps.test.js", "WebPage.ets", "inputProps.test.js", "index.js", "progressProps.test.js", "Badge.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "IndicatorStyle", "api_method_name": "selectedColor", "api_method_all": "selectedColor?: ResourceColor", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 36, "since": 8, "api_used": "\u662f", "lines": ["xpect(objNew.$attrs.selectedColor).assertEqual('#FF00", "cted: 0 })\n        .selectedColor(0xffffff)\n        .", "t: 50 })\n          .selectedColor('#FFFF0000')\n      ", "r.Black)\n          .selectedColor(0xCCCCCC)\n         ", "false })\n          .selectedColor('#FFFF0000')\n      ", "t(false)\n          .selectedColor(0x39a2db)\n         ", "or.Gray)\n          .selectedColor(Color.Blue)\n       ", "\n        }\n        .selectedColor(0x39a2db)\n        .", " if (eventData.data.selectedColor != null) {\n        ", "ata: {\n            \"selectedColor\": '-a',\n          }", ".selectedColor(this.selectedColor)\n        .onChange(", "or = eventData.data.selectedColor;\n      }\n      if (", ".Gray)\n            .selectedColor(Color.Blue)\n       ", "ata: {\n            \"selectedColor\": '#330A59F8',\n    ", "FF0000')\n          .selectedColor('#FF0000FF')\n      ", "('toggle')\n        .selectedColor(this.selectedColor)", "Black)\n            .selectedColor(0xCCCCCC)\n         ", "heckbox1')\n        .selectedColor(0xed6f21)\n        .", "ata: {\n            \"selectedColor\": '-0.1',\n         ", "  expect(obj.$attrs.selectedColor).assertEqual('#330A", "  expect(obj.$attrs.selectedColor).assertEqual('#FFFF", "FF00DDDD')\n        .selectedColor(0xffffff)\n        .", "is.color2)\n        .selectedColor(this.color3)\n      ", "Group'})\n          .selectedColor(0xed6f21)\n         ", "ull) {\n        this.selectedColor = eventData.data.se", "eExample {\n  @State selectedColor: Color = '#330A59F7", "(8)\n        Button('selectedColor').onClick(() => {\n ", "xpect(objNew.$attrs.selectedColor).assertEqual('#330A", "heckbox2')\n        .selectedColor(0x39a2db)\n        .", "ct(true)\n          .selectedColor(0x39a2db)\n         ", "lor.Red)\n          .selectedColor(Color.Blue)\n       ", "n: true })\n        .selectedColor(0x39a2db)\n        .", " true })\n          .selectedColor('#FFFF0000')\n      "], "files": ["ResponseRegion.ets", "checkbox.ets", "Toggle.ets", "AlphabetIndexer.ets", "slider.ets", "ToggleJsunit.test.ets", "PatternLock.ets", "toggle.ets", "checkboxGroup.ets", "Slider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_all": "declare class SwiperAttribute extends CommonMethod<SwiperAttribute> {\n  \n  index(value: number): SwiperAttribute;\n\n  \n  autoPlay(value: boolean): SwiperAttribute;\n\n  \n  interval(value: number): SwiperAttribute;\n\n  \n  indicator(value: boolean): SwiperAttribute;\n\n  \n  loop(value: boolean): SwiperAttribute;\n\n  \n  duration(value: number): SwiperAttribute;\n\n  \n  vertical(value: boolean): SwiperAttribute;\n\n  \n  itemSpace(value: number | string): SwiperAttribute;\n\n  \n  displayMode(value: SwiperDisplayMode): SwiperAttribute;\n\n  \n  cachedCount(value: number): SwiperAttribute;\n\n  \n  displayCount(value: number | string): SwiperAttribute;\n\n  \n  effectMode(value: EdgeEffect): SwiperAttribute;\n\n  \n  disableSwipe(value: boolean): SwiperAttribute;\n\n  \n  curve(value: Curve | string): SwiperAttribute;\n  \n  onChange(event: (index: number) => void): SwiperAttribute;\n\n  \n  indicatorStyle(value?: IndicatorStyle): SwiperAttribute;\n}", "api_method_name": "SwiperAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "index", "api_method_all": "index(value: number): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1502, "since": 7, "api_used": "\u662f", "lines": ["       console.info(index.toString())\n       ", "Source([])\n  @State index: number = 1\n  @Stat", "    this.arr.splice(index, 1)\n          conso", " if (eventData.data.index != null) {\n        ", "    let callback = (indexEvent) => {\n        ", ";\n      }\n      let indexEvent = {\n        ev", "t));\n        expect(indexEvent.data.value).as", "    Stepper({\n      index: this.currentIndex\n", "d} from \"deccjsunit/index.ets\";\nimport testsu", ")\n      .index(this.index)\n      .autoPlay(th", "this.currentIndex = index\n    })\n    .align(A", "  events_emitter.on(indexEvent, callback);\n  ", "ngth\n  }\n\n  getData(index: number): any {\n   ", "t} from \"deccjsunit/index.ets\"\nimport router ", "events_emitter.emit(indexEvent, eventData);\n ", "chedCount(2)\n      .index(this.index)\n      .", " \" + JSON.stringify(indexEvent));\n        exp", "ull) {\n        this.index = parseInt(eventDat", "eInt(eventData.data.index);\n      }\n      if ", "(prevIndex: number, index: number) => {\n     ", "nsole.info(this.arr[index] + 'Delete')\n      ", "t} from \"deccjsunit/index.ets\";\nimport router", "')\n      .onChange((index: number) => {\n     ", "     .onItemDelete((index: number) => {\n     ", "   return this.list[index]\n  }\n\n  registerDat", "      }\n        let indexEvent = {\n          "], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "Navigator.ets", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "Row.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "CommonJsunit.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "Swiper.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "systemPrompt.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "SystemAppJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "sideBar.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "Scroll.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "index.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "stepper.ets", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "Select.ets", "ratingProps.test.js", "MotionPathJsunit.test.ets", "stepperProps.test.js", "marqueeProps.test.js", "Tab.ets", "imageAnimatorProps.test.js", "Stepper.ets", "textPickerDialog.ets", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "tabs.ets", "BindMenuJsunit.test.ets", "videoProps.test.js", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "DatePickerJsunit.test.ets", "BasicJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "calendar.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "animateMotionProps.test.js", "listItem.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "SubscribedAbstractPropertyJsunit.test.ets", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "ContentStorage.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "Constants.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "Grid.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "WebPage.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "swiperProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "GridItem.ets", "tspanProps.test.js", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "autoPlay", "api_method_all": "autoPlay(value: boolean): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": ["xpect(objNew.$attrs.autoPlay).assertEqual('false", "tringify(obj.$attrs.autoPlay))\n      console.log", "     .autoPlay(this.autoPlays)\n        .muted(tr", "  expect(obj.$attrs.autoPlay).assertEqual('true'", "eight(500)\n        .autoPlay(this.autoPlays)\n   ", "tringify(obj.$attrs.autoPlay));\n      console.lo", "nsole.log(\"cd video autoPlay\" + JSON.stringify(o", "ull) {\n        this.autoPlay = eventData.data.au", "   .index(1)\n      .autoPlay(true)\n      .interv", "     .autoPlay(this.autoPlays)\n        .controls", "ay = eventData.data.autoPlay;\n      }\n      if (", "umber = 1;\n  @State autoPlays: boolean = false;\n", "ata: {\n            \"autoPlay\": \"false123\"\n      ", "(this.index)\n      .autoPlay(this.autoPlay)\n    ", "ffect.None\n  @State autoPlay: boolean = true\n  @", "ata: {\n            \"autoPlay\": \"false\"\n         ", "umber = 1;\n  @State autoPlays: boolean = true;\n ", "nsole.log('Swiper\u2018s autoPlay is ' + JSON.stringi", "     .autoPlay(this.autoPlay)\n      .interval(th", " if (eventData.data.autoPlay != null) {\n        "], "files": ["Video.ets", "VideoJsunit.test.ets", "video.ets", "swiper.ets", "SwiperJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "interval", "api_method_all": "interval(value: number): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 28, "since": 7, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.interval).assertEqual('2000'", "es = 0;\n        let intervalID = setInterval(fun", " if (eventData.data.interval != null) {\n        ", "t) => {\n            intervalID = setInterval(fun", "op = this.$element(\"intervalProp\").getInspector(", "ull) {\n        this.interval = parseInt(eventDat", "rs.id).assertEqual('intervalProp') //ID\n        ", "ata: {\n            \"interval\": \"3000\"\n          ", "  expect(obj.$attrs.interval).assertEqual('4000'", "ctor()\n        this.intervalProp = this.$element", "is.autoPlay)\n      .interval(this.interval)\n    ", "(\"[swiperProps] get interval value is: \" + JSON.", "es = 0;\n        let intervalID = -1;\n        let", "      clearInterval(intervalID);\n            con", "xpect(objNew.$attrs.interval).assertEqual('3000'", "tringify(obj.$attrs.interval));//prop\n        do", "eInt(eventData.data.interval);\n      }\n      if ", "tringify(obj.$attrs.interval))\n      console.log", "se(globalThis.value.intervalProp); //id\n        ", " intervalProp: this.intervalProp,\n            in", "alse: null,\n        intervalProp: null,\n        ", "pFalse,\n            intervalProp: this.intervalP", "     .interval(this.interval)\n      .indicator(t", "      clearInterval(intervalID);\n               ", "ean = true\n  @State interval: number = 4000\n  @S", "nsole.log('Swiper\u2018s interval is ' + JSON.stringi", "toPlay(true)\n      .interval(4000)\n      .indica"], "files": ["swiperProps.test.js", "swiper.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "indicator", "api_method_all": "indicator(value: boolean): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 111, "since": 7, "api_used": "\u662f", "lines": ["ne = this.$element(\"indicatorNone\").getInspector(", "alse: null,\n        indicatorMaskPropTrue: null,\n", "ctor()\n        this.indicatorTrue = this.$element", "ctor()\n        this.indicatorNone = this.$element", "rue : null,\n        indicatorNone : null\n    },\n\n", "Prop: null,\n        indicatorPropTrue: null,\n    ", "ating: this.rating, indicator: this.indicator })\n", "ng, indicator: this.indicator })\n        .stars(5", "alProp,\n            indicatorPropTrue: this.indic", ".edgeEffect)\n      .indicatorStyle({ top: 20, rig", "  expect(obj.$attrs.indicator).assertEqual(\"true\"", "  expect(obj.$attrs.indicator).assertEqual('true'", "xpect(objNew.$attrs.indicator).assertEqual('false", "nsole.info(\"rating2 indicator\" + JSON.stringify(o", "True: null,\n        indicatorDisabledPropFalse: n", "alse: null,\n        indicatorDisabledPropTrue: nu", "True: null,\n        indicatorMaskPropFalse: null,", "tringify(obj.$attrs.indicator))\n      expect(obj.", "Rating({ rating: 2, indicator: false })\n         ", "rFalse,\n            indicatorTrue : this.indicato", "ndicatorTrue : this.indicatorTrue,\n            in", "True: null,\n        indicatorPropFalse: null,\n   ", "ctor()\n        this.indicatorFalse = this.$elemen", "nsole.log('Swiper\u2018s indicator is ' + JSON.stringi", "ber = 4000\n  @State indicator: boolean = true\n  @", "ata: {\n            \"indicator\": \"false\"\n         ", "tringify(obj.$attrs.indicator))\n      console.log", "tringify(obj.$attrs.indicator))\n      console.inf", "ue = this.$element(\"indicatorTrue\").getInspector(", "lse : null,\n        indicatorTrue : null,\n       ", "ndicatorNone : this.indicatorNone\n        }\n    }", "is.interval)\n      .indicator(this.indicator)\n   ", "ize : null,\n        indicatorFalse : null,\n      ", "number = 1\n  @State indicator: boolean = false\n  ", "epsize,\n            indicatorFalse : this.indicat", "yle: \" + obj.$attrs.indicatorStyle);\n      expect", "se = this.$element(\"indicatorFalse\").getInspector", "catorPropTrue: this.indicatorPropTrue,\n          ", "est_0100 obj.$attrs.indicatorStyle: \" + obj.$attr", "    .indicator(this.indicator)\n      .loop(this.l", "Rating({ rating: 2, indicator: true })\n          ", "dicatorFalse : this.indicatorFalse,\n            i", "  expect(obj.$attrs.indicator).assertEqual(\"false", " if (eventData.data.indicator != null) {\n        ", "nsole.info(\"rating1 indicator\" + JSON.stringify(o", "orTrue,\n            indicatorNone : this.indicato", "or = eventData.data.indicator;\n      }\n      if (", "ull) {\n        this.indicator = eventData.data.in", "terval(4000)\n      .indicator(true)\n      .loop(f"], "files": ["ratingProps.test.js", "swiperProps.test.js", "swiper.ets", "RatingJsunit.test.ets", "Rating.ets", "rating.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "loop", "api_method_all": "loop(value: boolean): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 85, "since": 7, "api_used": "\u662f", "lines": ["r)\n      .loop(this.loop)\n      .duration(th", "nsole.log('Swiper\u2018s loop is ' + JSON.stringi", "opTrue,\n            loopPropNone : this.loop", "opNone,\n            loopPropFalse : this.loo", "opTrue,\n            loopPropFalse: this.loop", "se = this.$element(\"loopPropFalse\").getInspe", "op = eventData.data.loop;\n      }\n      if (", "xpect(objNew.$attrs.loop).assertEqual('true'", "pFalse,\n            loopPropTrue : this.loop", "umber = 50\n  @State loop: number = 3\n  @Stat", "ata: {\n            \"loop\": \"true123\"\n       ", "ctor()\n        this.loopPropNone = this.$ele", " this.step,\n        loop: this.loop,\n       ", "pFalse,\n            loopPropTrue: this.loopP", "one : null,\n        loopPropFalse : null,\n  ", "alse: null,\n        loopPropTrue: null,\n    ", "\n        loop: this.loop,\n        fromStart:", " },\n                loop: {\n                ", "tringify(obj.$attrs.loop));\n      console.lo", "loopPropNone : this.loopPropNone,\n          ", " loopPropTrue: this.loopPropTrue,\n          ", "tringify(obj.$attrs.loop))\n      console.log", "ull) {\n        this.loop = eventData.data.lo", "rue : null,\n        loopPropNone : null,\n   ", "ean = true\n  @State loop: boolean = false\n  ", "True: null,\n        loopPropFalse: null,\n   ", "oopPropFalse : this.loopPropFalse,\n         ", "  expect(obj.$attrs.loop).assertEqual('false", "lse : null,\n        loopPropTrue : null,\n   ", "ontrolsss)\n        .loop(true)\n        .obje", "ata: {\n            \"loop\": true\n          }\n", "xpect(objNew.$attrs.loop).assertEqual('false", "s.indicator)\n      .loop(this.loop)\n      .d", "nsole.log(\"cd video loop\" + JSON.stringify(o", "loopPropFalse: this.loopPropFalse,\n         ", "ue = this.$element(\"loopPropTrue\").getInspec", "ctor()\n        this.loopPropFalse = this.$el", " if (eventData.data.loop != null) {\n        ", "loopPropTrue : this.loopPropTrue,\n          ", "ctor()\n        this.loopPropTrue = this.$ele", "icator(true)\n      .loop(false)\n      .durat"], "files": ["Marquee.ets", "Video.ets", "VideoJsunit.test.ets", "swiperProps.test.js", "videoProps.test.js", "swiper.ets", "marqueeProps.test.js", "marquee.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "duration", "api_method_all": "duration(value: number): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 240, "since": 7, "api_used": "\u662f", "lines": ["reateAnimator({\n    duration: 3000,\n    fill: 'f", "ata: {\n            \"duration\": \"nan\"\n          }", "xpect(objNew.$attrs.duration).assertEqual('500.0", "ull) {\n        this.duration = parseInt(eventDat", "he text is hidden', duration: 2000 })\n          ", "nsole.info(\"button6 duration value is : \" + this", "value is : \" + this.duration)\n          animateT", "xpect(objNew.$attrs.duration).assertEqual('nan')", "ata: {\n            \"duration\": \"500\"\n          }", "        animateTo({ duration: this.duration }, (", "To({ duration: this.duration }, () => {\n        ", "gify(this.matrix1), duration: 200 })\n          t", "nsole.info(\"button6 duration test animateTo STAR", " if (eventData.data.duration != null) {\n        ", "3.jpg',\n            duration: 500,\n            w", "ssage: \"sucessful\", duration: 200 })\n          t", "     .duration(this.duration)\n      .vertical(th", "s = {\n              duration: 5000,\n            ", "        animateTo({ duration: 1000 }, () => {\n  ", "nsole.info(\"button1 duration test animateTo STAR", "nsole.info(\"button1 duration value is : \" + this", " {\n                \"duration\": this.duration,\n  ", "an = false\n  @State duration: number = 100\n  @St", "2.jpg',\n            duration: 500,\n            w", "options = {\n        duration: 2000,\n        iter", "   \"duration\": this.duration,\n              }\n  ", "  expect(obj.$attrs.duration).assertEqual('1000.", "4.jpg',\n            duration: 500,\n            w", "nsole.info(\"button7 duration test animateTo STAR", "eInt(eventData.data.duration);\n      }\n      if ", "an = false\n  @State duration: number = 1000\n  @S", "nsole.info(\"button7 duration value is : \" + this", "The text is shown', duration: 2000 })\n          ", "p(this.loop)\n      .duration(this.duration)\n    ", "1.jpg',\n            duration: 500,\n            w"], "files": ["animate.ets", "pageTransition2.ets", "ohosPrompt.ets", "imageAnimatorProps.test.js", "ohosMatrix4.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "fillMode.ets", "curves.ets", "chartProps.test.js", "SharedTransitionJsunit.test.ets", "pageTransition.ets", "geometryTransition.ets", "swiperProps.test.js", "AnimateJsunit.test.ets", "animatorOption.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "transition.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "vertical", "api_method_all": "vertical(value: boolean): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 121, "since": 7, "api_used": "\u662f", "lines": ["ata: {\n            \"vertical\": \"false\",\n        ", "ull) {\n        this.vertical = eventData.data.ve", "'Divider')\n        .vertical(false)\n        .str", "ole.log('obj.$attrs.vertical' + typeof (obj.$att", "tringify(obj.$attrs.vertical));\n      console.lo", " .key('tab')\n      .vertical(true)\n      .scroll", "yle.Round)\n        .vertical(false)\n        .col", "ata: {\n            \"vertical\": \"39284\",\n        ", "ole.log(\"cd divider vertical\" + JSON.stringify(o", "en')\n      }\n      .vertical(this.vertical)\n    ", " if (eventData.data.vertical != null) {\n        ", "     .vertical(this.vertical)\n        .height(15", " verticalTrue: this.verticalTrue,\n            ve", "     .vertical(this.vertical)\n      .scrollable(", "xpect(objNew.$attrs.vertical).assertEqual('false", "ata: {\n            \"vertical\": \"abc123\",\n       ", " typeof (obj.$attrs.vertical))\n      expect(obj.", "     .vertical(this.vertical)\n      .itemSpace(t", "one : null,\n        verticalTrue: null,\n        ", "nsole.log('Swiper\u2018s vertical is ' + JSON.stringi", "le.log(\"cd divider1 vertical\" + JSON.stringify(o", "textcase {\n  @State vertical: boolean = true\n  @", "  expect(obj.$attrs.vertical).assertEqual('true'", "number = 0\n  @State vertical: boolean = true\n  @", "is.duration)\n      .vertical(this.vertical)\n    ", "  expect(obj.$attrs.vertical).assertEqual('false", "ber = 1000\n  @State vertical: boolean = false\n  ", "tringify(obj.$attrs.vertical))\n      console.log", ".key('tab2')\n      .vertical(false)\n      .scrol", "ration(1000)\n      .vertical(false)\n      .disab", "al = eventData.data.vertical;\n      }\n      if (", "his.color)\n        .vertical(this.vertical)\n    ", "ata: {\n            \"vertical\": true\n          }\n", "opNone,\n            verticalTrue: this.verticalT", "True: null,\n        verticalFalse: null\n    },\n\n", "lor.Green)\n        .vertical(true)\n        .stro", "xpect(objNew.$attrs.vertical).assertEqual('true'", ")\n        Divider().vertical(true).margin(20).he"], "files": ["divider.ets", "tabs.ets", "swiperProps.test.js", "videoProps.test.js", "dividerProps.test.js", "swiper.ets", "Tab.ets", "TabsJsunit.test.ets", "tabsProps.test.js", "TabJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "navigation.ets", "Swiper.ets", "DividerJsunit.test.ets", "Divider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "itemSpace", "api_method_all": "itemSpace(value: number | string): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["eSwipe(true)\n      .itemSpace(0)\n      .onChange(", "eInt(eventData.data.itemSpace);\n      }\n    }\n  }", "    .itemSpace(this.itemSpace)\n      .displayMode", "an = false\n  @State itemSpace: number = 0\n  @Stat", "xpect(objNew.$attrs.itemSpace).assertEqual('1.00v", " if (eventData.data.itemSpace != null) {\n        ", "nsole.log('Swiper\u2018s itemSpace is ' + JSON.stringi", "ata: {\n            \"itemSpace\": \"1\"\n          }\n ", "ull) {\n        this.itemSpace = parseInt(eventDat", "is.vertical)\n      .itemSpace(this.itemSpace)\n   ", "tringify(obj.$attrs.itemSpace))\n      console.log", "  expect(obj.$attrs.itemSpace).assertEqual('0.00v"], "files": ["SwiperJsunit.test.ets", "swiper.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "displayMode", "api_method_all": "displayMode(value: SwiperDisplayMode): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["s.itemSpace)\n      .displayMode(this.displayMode)\n ", "number = 3\n  @State displayMode: number = SwiperDis", "dePropStretch: this.displayModePropStretch,\n       ", "ctor()\n        this.displayModePropAutoLinear = thi", "se(globalThis.value.displayModePropStretch); //id\n ", "tretch,\n            displayModePropAutoLinear: this", "Spring,\n            displayModePropStretch: this.di", "ropAutoLinear: this.displayModePropAutoLinear,\n    ", "se(globalThis.value.displayModePropAutoLinear); //i", "  .displayMode(this.displayMode)\n      .displayCoun", "ring: null,\n        displayModePropStretch: null,\n ", "rs.id).assertEqual('displayModePropStretch') //ID\n ", "ar = this.$element(\"displayModePropAutoLinear\").get", "ch = this.$element(\"displayModePropStretch\").getIns", "etch: null,\n        displayModePropAutoLinear: null", "rs.id).assertEqual('displayModePropAutoLinear') //I", "ctor()\n        this.displayModePropStretch = this.$"], "files": ["swiperProps.test.js", "swiper.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "cachedCount", "api_method_all": "cachedCount(value: number): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["tem)\n      }\n      .cachedCount(2)\n      .index(thi", "ey('swiper')\n      .cachedCount(2)\n      .index(1)\n"], "files": ["swiper.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "displayCount", "api_method_all": "displayCount(value: number | string): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["number = 1\n  @State displayCount: number = 3\n  @Stat", "displayMode)\n      .displayCount(this.displayCount)\n", " .displayCount(this.displayCount)\n      .effectMode("], "files": ["swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "effectMode", "api_method_all": "effectMode(value: EdgeEffect): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["isplayCount)\n      .effectMode(this.edgeEffect)\n  "], "files": ["swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "disableSwipe", "api_method_all": "disableSwipe(value: boolean): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.disableSwipe).assertEqual('false", "tical(false)\n      .disableSwipe(true)\n      .itemSp", "nsole.log('Swiper\u2018s disableSwipe is ' + JSON.stringi", "tringify(obj.$attrs.disableSwipe))\n      expect(obj."], "files": ["SwiperJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "curve", "api_method_all": "curve(value: Curve | string): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 51, "since": 8, "api_used": "\u662f", "lines": [")=> {\n          let curve = Curves.cubicBezie", "ata: {\n            \"curve\": 123\n          }\n ", "value is : \" + this.curve)\n          animateT", "ept(indexEvent.data.curve).assertEqual('Ease'", "   this.widthSize = curve.interpolate(0.5) * ", "  console.info(\"get curves state pages:\" + JS", "console.error(\"push curves page error:\" + err", "nsole.info(\"button2 curve value is : \" + this", "ept(indexEvent.data.curve).assertEqual('Linea", "nsole.info(\"button2 curve test animateTo STAR", "r({ duration: 1200, curve: Curve.Linear })\n  ", " if (eventData.data.curve != null) {\n        ", "mber = 100\n  @State curve: string = 'Ease'\n  ", "ept(indexEvent.data.curve).assertEqual('123')", "1.0);\n          let curve6 = Curves.LinearOut", "n({duration: 2000 , curve: Curves.spring(0.25", "        uri: 'pages/curves',\n      }\n      tr", "1.0);\n          let curve8 = Curves.ExtremeDe", "1.0);\n          let curve1 = Curves.init();\n ", " console.info(\"push curves page result:\" + JS", "1.0);\n          let curve9 = Curves.Sharp(0.3", "it();\n          let curve2 = Curves.Curve.Eas", "s));\n        if (!(\"curves\" == pages.name)) {", " Curves from '@ohos.curves'\n\n@Entry\n@Componen", " {\n                \"curve\": this.curve,\n     ", "      \"curve\": this.curve,\n              }\n  ", "o({ duration: 4000, curve: Curve.Linear }, ()", "1.0);\n          let curve10 = Curves.Rhythm(0", "  this.heightSize = curve.interpolate(0.5) * ", "ull) {\n        this.curve = eventData.data.cu", "        animateTo({ curve: this.curve }, () =", "1.0);\n          let curve4 = Curves.Curve.Eas", "t({ duration: 1500, curve: Curve.Ease })\n    ", "rt default function curvesJsunit() {\n  descri", "ve = eventData.data.curve;\n      }\n      if (", "1.0);\n          let curve3 = Curves.Curve.Eas", "  console.info(\"get curves state pages.name:\"", "ept(indexEvent.data.curve).assertEqual('abc')", "      console.info(\"curves beforeEach start\")", "      console.info(\"curves after each called\"", "ateTo({ curve: this.curve }, () => {\n        ", "1.0);\n          let curve5 = Curves.FastOutSl", "ata: {\n            \"curve\": \"Linear\"\n        ", "1.0);\n          let curve11 = Curves.cubicBez", "t.test.ets';\nimport curvesJsunit from './Curv", "1.0);\n          let curve12 = Curves.spring(1", "ata: {\n            \"curve\": 'abc'\n          }", "1.0);\n          let curve7 = Curves.FastOutLi"], "files": ["animate.ets", "pageTransition2.ets", "pageTransition.ets", "AnimateJsunit.test.ets", "motionPath.ets", "List.test.ets", "curves.ets", "CurvesJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "onChangeevent", "api_method_all": "onChange(event: (index: number) => void): SwiperAttribute;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "onChangeevent", "api_method_all": "onChange(event: (index: number) => void): SwiperAttribute;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SwiperAttribute", "api_method_name": "indicatorStyle", "api_method_all": "indicatorStyle(value?: IndicatorStyle): SwiperAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["est_0100 obj.$attrs.indicatorStyle: \" + obj.$attrs.ind", "yle: \" + obj.$attrs.indicatorStyle);\n      expect(obj.", ".edgeEffect)\n      .indicatorStyle({ top: 20, right: 2"], "files": ["SwiperJsunit.test.ets", "swiper.ets"], "is_white": " ", "desc": " "}]}