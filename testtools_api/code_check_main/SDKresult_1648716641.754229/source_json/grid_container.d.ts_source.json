{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\grid_container", "api": [{"api_class_name": "SizeType", "api_method_all": "declare enum SizeType {\n  \n  Auto,\n\n  \n  XS,\n\n  \n  SM,\n\n  \n  MD,\n\n  \n  LG,\n}", "api_method_name": "SizeType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 53, "since": 7, "api_used": "\u662f", "lines": ["                .useSizeType({\n                 ", "20)\n            .useSizeType({\n              xs:", "ings004] gridRow useSizeType: \" + JSON.stringify", "ings005] gridRow useSizeType: \" + JSON.stringify", "umns: 12, sizeType: SizeType.Auto, gutter: 10, m", "umns: 12, sizeType: SizeType.SM, gutter: 10, mar", "      }\n        .useSizeType({\n          xs: { s", "ntainer({ sizeType: SizeType.SM }) {\n      Row({", "    this.sizeType = SizeType.LG\n              })", ": \"auto\", sizeType: SizeType.MD, gutter: '10', m", "eType).assertEqual('SizeType.XS');\n      expect(", "xpect(obj.$attrs.useSizeType.sm.offset).assertEq", "    this.sizeType = SizeType.SM;\n          break", "umns: 12, sizeType: SizeType.LG, gutter: 10, mar", "eType).assertEqual('SizeType.SM');\n      console", "ings003] gridRow useSizeType: \" + JSON.stringify", "    this.sizeType = SizeType.SM\n              })", "xpect(obj.$attrs.useSizeType.sm.span).assertEqua", "ings001] gridRow useSizeType: \" + JSON.stringify", "ings002] gridRow useSizeType: \" + JSON.stringify", "izeType: SizeType = SizeType.XS\n  @State active:", "    this.sizeType = SizeType.LG;\n          break", "    this.sizeType = SizeType.MD;\n          break", "    this.sizeType = SizeType.Auto;\n          bre", "    this.sizeType = SizeType.XS\n              })", "izeType: SizeType = SizeType.XS;\n  private state", "\n  @State sizeType: SizeType = SizeType.XS\n  @St", "    this.sizeType = SizeType.MD\n              })", "    this.sizeType = SizeType.XS;\n          break", "    this.sizeType = SizeType.Auto;\n      }\n    }", "ngify(obj.$attrs.useSizeType));\n      expect(obj", "\n  @State sizeType: SizeType = SizeType.XS;\n  pr"], "files": ["index.js", "GridContainerJsunit.test.ets", "gridContainer.ets", "gridSettings.ets", "GridContainer.ets", "GridSettingsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SizeType", "api_method_name": "Auto", "api_method_all": "Auto,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 581, "since": 7, "api_used": "\u662f", "lines": ["pAuto : this.dirPropAuto,\n             dirPr", "     this.rotatePropAutoReverse = this.$elem", "\n            dirPropAuto : this.dirPropAuto,", ".objectFit(ImageFit.Auto).width(110).height(", "se : this.rotatePropAutoReverse,\n           ", "= SwiperDisplayMode.AutoLinear\n  @State edge", "is.$element(\"dirPropAuto\").getInspector()\n  ", "        this.dirPropAuto = this.$element(\"di", "ertEqual('Direction.Auto');\n      console.in", "ertEqual(\"ItemAlign.Auto\");\n      console.in", "autoReset' + this.isAutoReset).onClick(() =>", "sertEqual('BarState.Auto')\n      console.inf", "          rotatePropAutoReverse : this.rotat", "          .overlay('Auto', { align: Alignmen", "ateValue\": BarState.Auto\n          }\n       ", "emAlign = ItemAlign.Auto\n\n  build() {\n    Fl", "Style = BorderStyle.Auto;\n  @State borderRad", "pe) {\n        case 'Auto':\n          this.si", "ll,\n         dirPropAuto : null,\n         di", "rection = Direction.Auto\n  @State position: ", "ber= 30;\n  @State isAutoReset: boolean= true", "ignSelf = ItemAlign.Auto;\n      }\n    }\n  }\n", "n\", LayoutDirection.Auto);\n      let enable2", "ImageSize(ImageSize.Auto)\n        .width('90", "ertEqual('ImageSize.Auto');\n      console.in", "AutoReset = !this.isAutoReset\n        }).mar", "pAuto : this.dirPropAuto,\n            dirPro", "ignSelf = ItemAlign.Auto;\n          break;\n ", "ertEqual(\"Direction.Auto\")\n      expect(obj.", "ection\":  Direction.Auto,\n          }\n      ", "lf) {\n        case 'Auto':\n          this.al", ",\n        rotatePropAutoReverse : null,\n    ", "sizeType = SizeType.Auto;\n          break;\n ", " {\n          this.isAutoReset = !this.isAuto", "sizeType = SizeType.Auto;\n      }\n    }\n  }\n", " sizeType: SizeType.Auto, gutter: 10, margin", "al, state: BarState.Auto }) {\n          Text", "$element(\"rotatePropAutoReverse\").getInspect", "  .autoReset(this.isAutoReset)\n        .onPa", "ull,\n        dirPropAuto : null,\n        dir", "             dirPropAuto : this.dirPropAuto,", " == LayoutDirection.Auto)\n      .assertTrue;", "ertEqual(\"ItemAlign.Auto\")\n      expect(obj.", "emAlign = ItemAlign.Auto\n  @State borderStyl"], "files": ["ratingProps.test.js", "flex.ets", "listItemGroupProps.test.js", "formProps.test.js", "dividerProps.test.js", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "imageAnimatorProps.test.js", "tabContentProps.test.js", "textProps.test.js", "ScrollBarJsunit.test.ets", "enumsImage.ets", "toolbarProps.test.js", "tabsProps.test.js", "pickerViewProps.test.js", "qrcodeProps.test.js", "Text.ets", "divProps.test.js", "stackProps.test.js", "switchProps.test.js", "imageFit.ets", "TextJsunit.test.ets", "swiper.ets", "popupProps.test.js", "gridContainerProps.test.js", "CheckboxGroupJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "listItemProps.test.js", "searchProps.test.js", "chartProps.test.js", "gridRowProps.test.js", "EnmusImageJsunit.test.ets", "spanProps.test.js", "stepperItemProps.test.js", "canvasProps.test.js", "sliderProps.test.js", "swiperProps.test.js", "enumsItemAlign.ets", "toolbarItemProps.test.js", "videoProps.test.js", "RowJsunit.test.ets", "GridContainer.ets", "inputProps.test.js", "index.js", "FlexJsunit.test.ets", "optionProps.test.js", "tabBarProps.test.js", "toggleProps.test.js", "AppStorageJsunit.test.ets", "badgeProps.test.js", "border.ets", "pieceProps.test.js", "dialogProps.test.js", "imageProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "labelProps.test.js", "pickerProps.test.js", "progressProps.test.js", "selectProps.test.js", "textareaProps.test.js", "Direction2Jsunit.test.ets", "gridColProps.test.js", "panelProps.test.js", "ScrollBar.ets", "menuProps.test.js", "buttonProps.test.js", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SizeType", "api_method_name": "XS", "api_method_all": "XS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["set'\nconst ATTRS_FLEXSHRINK = 'flexShrink'", "sertEqual('SizeType.XS');\n      expect(obj", "sizeType = SizeType.XS;\n          break;\n ", "sizeType = SizeType.XS\n              }).ba", "SizeType = SizeType.XS;\n  private stateCha", "SizeType = SizeType.XS\n  @State active: bo", "reak;\n        case 'XS':\n          this.si", "            Button('XS')\n              .on"], "files": ["GridContainerJsunit.test.ets", "gridContainer.ets", "GridContainer.ets", "Constants.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SizeType", "api_method_name": "SM", "api_method_all": "SM,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["sizeType = SizeType.SM\n              }).ba", " sizeType: SizeType.SM, gutter: 10, margin", "reak;\n        case 'SM':\n          this.si", "sertEqual('SizeType.SM');\n      console.in", "sizeType = SizeType.SM;\n          break;\n ", "            Button('SM')\n              .on", " sizeType: SizeType.SM }) {\n      Row({}) ", "       \"sizeType\": 'SM'\n          }\n      "], "files": ["GridContainerJsunit.test.ets", "gridContainer.ets", "GridContainer.ets", "gridSettings.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SizeType", "api_method_name": "MD", "api_method_all": "MD,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["sizeType = SizeType.MD\n              }).ba", "sizeType = SizeType.MD;\n          break;\n ", " sizeType: SizeType.MD, gutter: '10', marg", "reak;\n        case 'MD':\n          this.si", "            Button('MD')\n              .on"], "files": ["gridContainer.ets", "GridContainer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "SizeType", "api_method_name": "LG", "api_method_all": "LG,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["reak;\n        case 'LG':\n          this.si", "sizeType = SizeType.LG;\n          break;\n ", "sizeType = SizeType.LG\n              }).ba", " sizeType: SizeType.LG, gutter: 10, margin", "            Button('LG')\n              .on"], "files": ["gridContainer.ets", "GridContainer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GridContainerOptions", "api_method_all": "declare interface GridContainerOptions {\n  \n  columns?: number | \"auto\";\n\n  \n  sizeType?: SizeType;\n\n  \n  gutter?: number | string;\n\n  \n  margin?: number | string;\n}", "api_method_name": "GridContainerOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GridContainerOptions", "api_method_name": "columns", "api_method_all": "columns?: number | \"auto\"", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 63, "since": 7, "api_used": "\u662f", "lines": ["ap = eventData.data.columnsGap\n      }\n      if", "fr 1fr 1fr')\n      .columnsGap(10)\n      .rowsG", "jAfterChange.$attrs.columnsTemplate).assertEqua", "olumnsTemplate(this.columnsTemplate)\n        .r", "jAfterChange.$attrs.columnsTemplate));\n      ex", "tringify(obj.$attrs.columnsTemplate));\n      ex", "    GridContainer({ columns: 12, sizeType: this", "  expect(obj.$attrs.columnsTemplate).assertEqua", "tem)\n      }\n      .columnsTemplate('1fr 1fr 1f", "    GridContainer({ columns: 12, sizeType: Size", "   .columnsGap(this.columnsGap)\n        .rowsGa", "tion(Column)\n      .columnsTemplate('1fr 1fr 1f", "ull) {\n        this.columnsTemplate = eventData", "  expect(obj.$attrs.columns).assertEqual('auto'", "       }\n          .columnsTemplate('1fr 1fr 1f", "tringify(obj.$attrs.columnsGap));\n      expect(", "tringify(obj.$attrs.columnsGap))\n      console.", "14', '15']\n  @State columnsGap: string= '2px'\n ", "ata: {\n            \"columnsTemplate\": '1fr 1fr ", "day)\n      }\n      .columnsTemplate('1fr 1fr 1f", " if (eventData.data.columnsGap != null) {\n     ", "jAfterChange.$attrs.columnsGap));\n      expect(", "ull) {\n        this.columnsGap = eventData.data", "te = eventData.data.columnsTemplate\n      }\n   ", "tringify(obj.$attrs.columnsTemplate))\n      con", "fr 1fr')\n          .columnsGap(10)\n          .r", "le.info('gridTest01 columnsGap attribute after ", "  expect(obj.$attrs.columnsGap).assertEqual('2.", ".$attrs.constructor.columns).assertEqual('12');", "dTest03 ] attribute columnsTemplate before chan", "ey('grid')\n        .columnsGap(this.columnsGap)", " if (eventData.data.columnsTemplate != null) {\n", "jAfterChange.$attrs.columnsGap).assertEqual('3.", "ing= '2px'\n  @State columnsTemplate: string = '", "s.rowsGap)\n        .columnsTemplate(this.column", "    GridContainer({ columns: \"auto\", sizeType: ", "ContainerProps] get columns value is: \" + JSON.", "dTest03 ] attribute columnsTemplate after chang", "ata: {\n            \"columnsGap\": '3px'\n        "], "files": ["Grid.ets", "GridItem.ets", "GridContainerJsunit.test.ets", "layoutConstraints.ets", "gridContainer.ets", "grid.ets", "gridPage.ets", "GridJsunit.test.ets", "GridContainer.ets", "GridJsnuit.test.ets", "gridContainerProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GridContainerOptions", "api_method_name": "sizeType", "api_method_all": "sizeType?: SizeType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["               this.sizeType = SizeType.MD\n     ", "ata: {\n            \"sizeType\": 'SM'\n          }\n", "rExample {\n  @State sizeType: SizeType = SizeTyp", "to':\n          this.sizeType = SizeType.Auto;\n  ", "iner({ columns: 12, sizeType: SizeType.LG, gutte", "               this.sizeType = SizeType.LG\n     ", "tch (eventData.data.sizeType) {\n        case 'Au", "ontainer obj.$attrs.sizeType:\" + JSON.stringify(", "iner({ columns: 12, sizeType: SizeType.Auto, gut", "SM':\n          this.sizeType = SizeType.SM;\n    ", "ult:\n          this.sizeType = SizeType.Auto;\n  ", "MD':\n          this.sizeType = SizeType.MD;\n    ", "XS':\n          this.sizeType = SizeType.XS;\n    ", "    GridContainer({ sizeType: SizeType.SM }) {\n ", "iner({ columns: 12, sizeType: this.sizeType, gut", ".$attrs.constructor.sizeType).assertEqual('SizeT", "iner({ columns: 12, sizeType: SizeType.SM, gutte", "tringify(obj.$attrs.sizeType)); //undefinde\n    ", "LG':\n          this.sizeType = SizeType.LG;\n    ", "({ columns: \"auto\", sizeType: SizeType.MD, gutte", " 12, sizeType: this.sizeType, gutter: 10, margin", "               this.sizeType = SizeType.XS\n     ", "               this.sizeType = SizeType.SM\n     ", "ontainer {\n  @State sizeType: SizeType = SizeTyp"], "files": ["GridContainerJsunit.test.ets", "gridContainer.ets", "GridContainer.ets", "gridSettings.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GridContainerOptions", "api_method_name": "gutter", "api_method_all": "gutter?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["ype: SizeType.Auto, gutter: 10, margin: 20 }) ", "  expect(obj.$attrs.gutter).assertEqual(\"30px\"", "ContainerProps] get gutter value is: \" + JSON.", "  expect(obj.$attrs.gutter).assertEqual(\"16px\"", ".$attrs.constructor.gutter).assertEqual('10.00", "tringify(obj.$attrs.gutter));\n        done();\n", "eType: SizeType.LG, gutter: 10, margin: 20 }) ", "ype: this.sizeType, gutter: 10, margin: 20 }) ", "eType: SizeType.MD, gutter: '10', margin: '20'", "eType: SizeType.SM, gutter: 10, margin: 20 }) "], "files": ["GridContainerJsunit.test.ets", "gridContainer.ets", "GridContainer.ets", "gridContainerProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GridContainerOptions", "api_method_name": "margin", "api_method_all": "margin?: number | string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 300, "since": 7, "api_used": "\u662f", "lines": ["height(60)\n        .margin({ bottom: 20 })\n   ", "editMode\n        }).margin({ top: 5, left: 20 ", "lor.Black)\n        .margin({ bottom: 40 })\n   ", "eight(210)\n        .margin({top:100})\n        ", "'100%' })\n        }.margin({ top: 25 }).border", "s.padding)\n        .margin(this.margin)\n      ", "    }.width('100%').margin({ top: 20 })\n  }\n\n ", "  expect(obj.$attrs.margin).assertEqual('40.00", "  expect(obj.$attrs.margin).assertEqual('20.00", "    }.width('100%').margin({ top: 5 })\n  }\n}\n", "TRS_MARGIN_RIGHT = 'margin-right'\nconst ATTRS_", "ATTRS_MARGIN_TOP = 'margin-top'\nconst ATTRS_BO", "padding;\n      this.margin = eventData.data.ma", "zeType, gutter: 10, margin: 20 }) {\n        Ro", "y('text2')\n        .margin({ right: 30, left: ", "RS_MARGIN_BOTTOM = 'margin-bottom'\nconst ATTRS", "editFlag\n        }).margin({ top: 5, left: 20 ", ".width('100%')\n    .margin({ top: 5 })\n  }\n}", "ey('gridContainer').margin({ top: 300 })\n    }", "ight(50)\n          .margin({ top: 250 })\n     ", ": 1 })\n\n      Text('margin and padding:').font", "eight(100)\n        .margin({ top: 5 })\n       ", "ring = 20;\n  @State margin: string = 20;\n  @St", " '10',\n            \"margin\": '40'\n          }\n", "    }.width('100%').margin({ top: 300 })\n  }\n}", "   })\n      }\n    }.margin({ top: 5 })\n  }\n\n  ", "       .margin(this.margin)\n        .backgroun", "0%').height('100%').margin({ top: 30 })\n  }\n}", "(0xAFEEEE)\n        .margin({ bottom: 10 })\n   ", "\n    .width('100%').margin({ top: 5 })\n  }\n  o", ".$attrs.constructor.margin).assertEqual('20.00", "0, y: 20 } })\n    }.margin(100)\n  }\n}", "TTRS_NARGIN_LEFT = 'margin-left'\nconst ATTRS_B", "in = eventData.data.margin;\n    }\n  }\n\n  priva", "    }.width('100%').margin({ top: 5 })\n  }\n}", "lor.Green)\n        .margin(30)\n        .fontSi", "olor(0xf1f3f5)\n    .margin({ top: 10 })\n    .k", "s.isShow\n        }).margin(3).backgroundColor("], "files": ["systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "playMode.ets", "Navigation.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "enumsLineCapStyle.ets", "Swiper.ets", "ResponseRegion.ets", "scrollBar.ets", "transition.ets", "systemPrompt.ets", "gridSettings.ets", "transForm.ets", "path.ets", "scrollCode.ets", "polyline.ets", "focus.ets", "Text.ets", "Counter.ets", "gauge.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "Scroll.ets", "customDialogController.ets", "GridContainerJsunit.test.ets", "positionSetting.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "edgeEffect.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "loadingProgress.ets", "Marquee.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "textClock.ets", "tabs.ets", "list.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "backgroundAndSizeSetting.ets", "dragEvent.ets", "lazyForEach.ets", "circle.ets", "grid.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "ScrollBar.ets", "appear.ets", "Constants.ets", "animationStatus.ets", "Path.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "GridItem.ets", "parallelGesture.ets", "slider.ets", "Calendar.ets", "gestureMode.ets", "refresh.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "GridContainerInterface", "api_method_all": "interface GridContainerInterface {\n  \n  (value?: GridContainerOptions): GridContainerAttribute;\n}", "api_method_name": "GridContainerInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GridContainerInterface", "api_method_name": "value", "api_method_all": "(value?: GridContainerOptions): GridContainerAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GridContainerAttribute", "api_method_all": "declare class GridContainerAttribute extends ColumnAttribute {}", "api_method_name": "GridContainerAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}