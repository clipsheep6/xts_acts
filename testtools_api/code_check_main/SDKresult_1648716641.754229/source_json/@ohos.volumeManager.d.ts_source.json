{"subsystem_ch": "\u5a92\u4f53\u5b50\u7cfb\u7edf", "subsystem_en": "multimedia", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.volumeManager", "api": [{"api_class_name": "volumeManager", "api_method_all": "declare namespace volumeManager {\n\n\n export interface Volume {\n  id: string;\n  uuid: string;\n  description: string;\n  removable: boolean;\n  state: number;\n  path: string;\n}\n\nfunction getAllVolumes(callback: AsyncCallback<Array<Volume>>): void;\nfunction getAllVolumes(): Promise<Array<Volume>>;\n\n\n \nfunction mount(volumeId: string, callback: AsyncCallback<boolean>): void;\nfunction mount(volumeId: string): Promise<boolean>;\n\n\nfunction unmount(volumeId: string, callback: AsyncCallback<boolean>): void;\nfunction unmount(volumeId: string): Promise<boolean>;\n\n}", "api_method_name": "volumeManager", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "volumeManager", "api_method_name": "getAllVolumes", "api_method_all": "function getAllVolumes(callback: AsyncCallback<Array<Volume>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "volumeManager", "api_method_name": "getAllVolumes", "api_method_all": "function getAllVolumes(): Promise<Array<Volume>>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "volumeManager", "api_method_name": "mount", "api_method_all": "function mount(volumeId: string, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "volumeManager", "api_method_name": "mount", "api_method_all": "function mount(volumeId: string): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "volumeManager", "api_method_name": "unmount", "api_method_all": "function unmount(volumeId: string, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "volumeManager", "api_method_name": "unmount", "api_method_all": "function unmount(volumeId: string): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Volume", "api_method_all": "export interface Volume {\n  id: string;\n  uuid: string;\n  description: string;\n  removable: boolean;\n  state: number;\n  path: string;\n}", "api_method_name": "Volume", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 698, "since": 9, "api_used": "\u662f", "lines": ["Manager3 : Media setVolume promise: successful", "  audioManager10.setVolume(audioMedia,lowVol);", "UB_AUDIO_MANAGER_SetVolume_004', 0, async func", "   audioManager2.setVolume(audioMedia,highVol)", "Manager4 : Media setVolume promise: successful", "Manager8 : Media setVolume promise: successful", "   audioManager9.setVolume(audioMedia,highVol)", "eworkTest: Media setVolume promise: successful", "Manager6 : Media setVolume promise: successful", "    audioManager.getVolume(audioMedia).then(fu", "UB_AUDIO_MANAGER_SetVolume_002', 0, async func", "eworkTest: Media setVolume Promise:Out of rang", "   audioManager6.setVolume(audioMedia,lowVol);", "   audioManager1.setVolume(audioMedia,highVol)", "   audioManager7.setVolume(audioMedia,highVol)", "eworkTest: Media getVolume Promise: FAIL :' + ", "   audioManager5.setVolume(audioMedia,highVol)", "eworkTest: Media getVolume Promise: Error :' +", "anager10 : Media setVolume promise: successful", "   audioManager4.setVolume(audioMedia,lowVol);", "UB_AUDIO_MANAGER_SetVolume_001', 0, async func", "e = audioManager.setVolume(audioMedia,minVol);", "UB_AUDIO_MANAGER_SetVolume_005', 0, async func", "   audioManager3.setVolume(audioMedia,highVol)", "eworkTest: Media getVolume Promise: PASS :' + ", "Manager9 : Media setVolume promise: successful", "Manager7 : Media setVolume promise: successful", "Manager5 : Media setVolume promise: successful", "   audioManager8.setVolume(audioMedia,lowVol);", "ait audioManager.setVolume(audioMedia,outOfRan", "Manager1 : Media setVolume promise: successful", "e = audioManager.setVolume(audioMedia,lowVol);", "Manager2 : Media setVolume promise: successful", "UB_AUDIO_MANAGER_SetVolume_003', 0, async func", "e = audioManager.setVolume(audioMedia,maxVol);"], "files": ["AudioVOIP.test.js", "HttpPlayerFuncPromiseTest.test.js", "AudioRenderer.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "AudioFramework.test.js", "PlayerLocalTestAudioAPI.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RingtonePlayer.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Volume", "api_method_name": "id", "api_method_all": "id: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6103, "since": 9, "api_used": "\u662f", "lines": ["      let audioTimeMiddle;\n        console", "gettime = audioTimeMiddle-audioTimeStart;\n", "_TC_015 sizeArray: width * height - \" +dat", "       })\n        .width('640px')\n        ", "eUri - Promise invalid uri RINGTONE_TYPE_D", "- Callback set Invalid uri\n               ", "romise.getSupportedVideoFormats();\n       ", "({\n                'id': 'extend'\n        ", "romise.getSupportedVideoFormats(async (err", "CapturerOptionsInvalid = {\n            str", "./test/CameraJSUnitVideoAsync.test'\n\n\nlet ", "CapturerOptionsInvalid).then(async functio", "- Promise  set invalid uri - Start() (Nega", "ri - promise - Invalid uri\n               ", "og({\n////          'id': 'report', 'unity'", "tend({\n            'id': 'extend'\n        ", "Component({\n        id: '',\n        type: ", "mise -enum (2) invalid value\n             ", "dio State is : invalid');\n                ", "   : Get supported video formats from came", "          audioTimeMiddle = (data-audioTim", "Uri - Callback Invalid RINGTONE_TYPE_MULTI", "log(TAG + 'Received id: ' + JSON.stringify", "tend({\n//          'id': 'extend'\n//      ", "Uri - Callback invalid uri\n               ", "./test/CameraJSUnitVideoPromise.test'\nimpo"], "files": ["List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetTestCallback.test.js", "albumGetFileAssetsCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "VideoPlayerFuncCallbackTest.test.js", "Camera.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "VideoRecorderEnumTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "filekeyTestCallBack.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderEnumTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumGetFileAssetsPromise.test.js", "fileAssetTestPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "fileAssetPromise2.test.js", "fileAssetUriTestCallBack.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "index.js", "fileAsset2.test.js", "mediaLibraryTestPromiseOnOff.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "filekeyTestPromise.test.js", "fileTestCallBack.test.js", "FileAssetGetThumbnailPromise.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Volume", "api_method_name": "uuid", "api_method_all": "uuid: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Volume", "api_method_name": "description", "api_method_all": "description: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 12, "since": 9, "api_used": "\u662f", "lines": ["perty);\n            description += i + \" = \" + prop", "obj) { \n        let description = \"\"; \n        for("], "files": ["HttpPlayerFuncPromiseTest.test.js", "HttpPlayerCompatibilityTest.test.js", "VideoPlayerAPICallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "VideoPlayerFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Volume", "api_method_name": "removable", "api_method_all": "removable: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Volume", "api_method_name": "state", "api_method_all": "state: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1920, "since": 9, "api_used": "\u662f", "lines": [" STATE : '+audioRen.state);\n\n        var buff", "PASS : ' + audioRen.state);\n     }\n     else ", " STATE : '+audioCap.state);\n\n        var buff", "audioRen.stop((err, state) => {\n         if (", " STATE : '+audioRen.state);\n\n     console.inf", " STATE : '+audioRen.state);\n\n        console.", "\n\n     if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        return r", "ioRen.release((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n    //      resul", " STATE : '+audioRen.state);\n\n     await audio", " STATE : '+audioRen.state);\n\n     var samplin", " STATE : '+audioRen.state);\n\n     return resu", "PASS : ' + audioRen.state);\n    //  }\n    // ", "udioRen.drain((err, state) => {\n         if (", "FAIL : ' + audioRen.state);\n         resultFl", " STATE : '+audioRen.state);\n\n     var bufferS", " STATE : '+audioRen.state);\n\n     if (resultF", " STATE : '+audioRen.state);\n\n        await au", "   //  if (audioRen.state==audio.AudioState.S", " STATE : '+audioCap.state);\n\n        await au"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Volume", "api_method_name": "path", "api_method_all": "path: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1580, "since": 9, "api_used": "\u662f", "lines": ["apturer : Path : '+fpath);\n\n        console.", "+dirPath);\n        fpath = dirPath+'/capture", "/var mediaDirTemp = path1 + packageName + '/", " = fileio.statSync(fpath).size;\n     console", "ioRendererOptions, fpath){\n\n     var resultF", "o.createStreamSync(fpath, 'r');\n        cons", "    }\n\n        var fpath = mediaDir+'/StarWa", "og: File Path: ' + fpath);\n        let disca", "r dirPath;\n    var fpath;\n    var resultFlag", " = fileio.openSync(fpath, 0o2002, 0o666);\n  ", "o.createStreamSync(fpath, 'r');\n     console", "ioCapturerOptions, fpath, AudioScene) {\n\n   ", "enderer : Path : '+fpath);\n\n     console.inf", " = fileio.statSync(fpath).size;\n        cons", "enderer : Path : '+fpath);\n\n     await audio", " = fileio.openSync(fpath, 0o102, 0o777);\n   ", "ioRendererOptions, fpath, AudioScene) {\n    ", "enderer : Path : '+fpath);\n\n        console.", "Name(){\n        var path1 = '/data/accounts/", "o\n     }\n\n     var fpath = mediaDir+'/StarWa", "og: File Path: ' + fpath);\n     let discardH"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "fileAssetCallBack2.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "favtrashTestPromise.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromise.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "favtrashTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "fileAssetPromise2.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "RecorderLocalTestAudioAPI.test.js", "fileAsset2.test.js", "VideoPlayerFuncPromiseTest.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}]}