{"subsystem_ch": "\u7535\u8bdd\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "telephony", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.telephony.call", "api": [{"api_class_name": "call", "api_method_all": "declare namespace call {\n  \n  function dial(phoneNumber: string, callback: AsyncCallback<boolean>): void;\n  function dial(phoneNumber: string, options: DialOptions, callback: AsyncCallback<boolean>): void;\n  function dial(phoneNumber: string, options?: DialOptions): Promise<boolean>;\n\n  \n  function makeCall(phoneNumber: string, callback: AsyncCallback<void>): void;\n  function makeCall(phoneNumber: string): Promise<void>;\n\n  \n  function hasCall(callback: AsyncCallback<boolean>): void;\n  function hasCall(): Promise<boolean>;\n\n  \n  function getCallState(callback: AsyncCallback<CallState>): void;\n  function getCallState(): Promise<CallState>;\n\n  \n  function muteRinger(callback: AsyncCallback<void>): void;\n  function muteRinger(): Promise<void>;\n\n  \n  function hasVoiceCapability(): boolean;\n\n  \n  function isEmergencyPhoneNumber(phoneNumber: string, callback: AsyncCallback<boolean>): void;\n  function isEmergencyPhoneNumber(phoneNumber: string, options: EmergencyNumberOptions, callback: AsyncCallback<boolean>): void;\n  function isEmergencyPhoneNumber(phoneNumber: string, options?: EmergencyNumberOptions): Promise<boolean>;\n\n  \n  function formatPhoneNumber(phoneNumber: string, callback: AsyncCallback<string>): void;\n  function formatPhoneNumber(phoneNumber: string, options: NumberFormatOptions, callback: AsyncCallback<string>): void;\n  function formatPhoneNumber(phoneNumber: string, options?: NumberFormatOptions): Promise<string>;\n\n  \n  function formatPhoneNumberToE164(phoneNumber: string, countryCode: string, callback: AsyncCallback<string>): void;\n  function formatPhoneNumberToE164(phoneNumber: string, countryCode: string): Promise<string>;\n\n  \n  function answer(callId: number, callback: AsyncCallback<void>): void;\n  function answer(callId: number): Promise<void>;\n\n  \n  function hangup(callId: number, callback: AsyncCallback<void>): void;\n  function hangup(callId: number): Promise<void>;\n\n  \n  function reject(callId: number, callback: AsyncCallback<void>): void;\n  function reject(callId: number, options: RejectMessageOptions, callback: AsyncCallback<void>): void;\n  function reject(callId: number, options?: RejectMessageOptions): Promise<void>;\n\n  \n  function holdCall(callId: number, callback: AsyncCallback<void>): void;\n  function holdCall(callId: number): Promise<void>;\n\n  \n  function unHoldCall(callId: number, callback: AsyncCallback<void>): void;\n  function unHoldCall(callId: number): Promise<void>;\n\n  \n  function switchCall(callId: number, callback: AsyncCallback<void>): void;\n  function switchCall(callId: number): Promise<void>;\n\n  \n  function combineConference(callId: number, callback: AsyncCallback<void>): void;\n  function combineConference(callId: number): Promise<void>;\n\n  \n  function getMainCallId(callId: number, callback: AsyncCallback<number>): void;\n  function getMainCallId(callId: number): Promise<number>;\n\n  \n  function getSubCallIdList(callId: number, callback: AsyncCallback<Array<string>>): void;\n  function getSubCallIdList(callId: number): Promise<Array<string>>;\n\n  \n  function getCallIdListForConference(callId: number, callback: AsyncCallback<Array<string>>): void;\n  function getCallIdListForConference(callId: number): Promise<Array<string>>;\n\n  \n  function getCallWaitingStatus(slotId: number, callback: AsyncCallback<CallWaitingStatus>): void;\n  function getCallWaitingStatus(slotId: number): Promise<CallWaitingStatus>;\n\n  \n  function setCallWaiting(slotId: number, activate: boolean, callback: AsyncCallback<void>): void;\n  function setCallWaiting(slotId: number, activate: boolean): Promise<void>;\n\n  \n  function startDTMF(callId: number, character: string, callback: AsyncCallback<void>): void;\n  function startDTMF(callId: number, character: string): Promise<void>;\n\n  \n  function stopDTMF(callId: number, callback: AsyncCallback<void>): void;\n  function stopDTMF(callId: number): Promise<void>;\n\n  \n  function isInEmergencyCall(callback: AsyncCallback<boolean>): void;\n  function isInEmergencyCall(): Promise<boolean>;\n\n  \n  function on(type: 'callDetailsChange', callback: Callback<CallAttributeOptions>): void;\n\n  \n  function off(type: 'callDetailsChange', callback?: Callback<CallAttributeOptions>): void;\n\n  \n  function on(type: 'callEventChange', callback: Callback<CallEventOptions>): void;\n\n  \n  function off(type: 'callEventChange', callback?: Callback<CallEventOptions>): void;\n\n  \n  function on(type: 'callDisconnectedCause', callback: Callback<DisconnectedDetails>): void;\n\n  \n  function off(type: 'callDisconnectedCause', callback?: Callback<DisconnectedDetails>): void;\n\n  \n  function isNewCallAllowed(callback: AsyncCallback<boolean>): void;\n  function isNewCallAllowed(): Promise<boolean>;\n\n  \n  function separateConference(callId: number, callback: AsyncCallback<void>): void;\n  function separateConference(callId: number): Promise<void>;\n\n  \n  function getCallRestrictionStatus(slotId: number, type: CallRestrictionType, callback: AsyncCallback<RestrictionStatus>): void;\n  function getCallRestrictionStatus(slotId: number, type: CallRestrictionType): Promise<RestrictionStatus>;\n\n  \n  function setCallRestriction(slotId: number, info: CallRestrictionInfo, callback: AsyncCallback<void>): void;\n  function setCallRestriction(slotId: number, info: CallRestrictionInfo): Promise<void>;\n\n  \n  function getCallTransferInfo(slotId: number, type: CallTransferType, callback: AsyncCallback<CallTransferResult>): void;\n  function getCallTransferInfo(slotId: number, type: CallTransferType): Promise<CallTransferResult>;\n\n  \n  function setCallTransfer(slotId: number, info: CallTransferInfo, callback: AsyncCallback<void>): void;\n  function setCallTransfer(slotId: number, info: CallTransferInfo): Promise<void>;\n\n  \n  function isRinging(callback: AsyncCallback<boolean>): void;\n  function isRinging(): Promise<boolean>;\n\n  \n  function setMuted(callback: AsyncCallback<void>): void;\n  function setMuted(): Promise<void>;\n\n  \n  function cancelMuted(callback: AsyncCallback<void>): void;\n  function cancelMuted(): Promise<void>;\n\n  \n  function setAudioDevice(device: AudioDevice, callback: AsyncCallback<void>): void;\n  function setAudioDevice(device: AudioDevice): Promise<void>;\n\n  \n  function joinConference(mainCallId: number, callNumberList: Array<string>, callback: AsyncCallback<void>): void;\n  function joinConference(mainCallId: number, callNumberList: Array<string>): Promise<void>;\n\n  \n  function updateImsCallMode(callId: number, mode: ImsCallMode, callback: AsyncCallback<void>): void;\n  function updateImsCallMode(callId: number, mode: ImsCallMode): Promise<void>;\n\n  \n  function enableImsSwitch(slotId: number, callback: AsyncCallback<void>): void;\n  function enableImsSwitch(slotId: number): Promise<void>;\n\n  \n  function disableImsSwitch(slotId: number, callback: AsyncCallback<void>): void;\n  function disableImsSwitch(slotId: number): Promise<void>;\n\n  \n  function isImsSwitchEnabled(slotId: number, callback: AsyncCallback<boolean>): void;\n  function isImsSwitchEnabled(slotId: number): Promise<boolean>;\n\n  \n  export enum ImsCallMode {\n    CALL_MODE_AUDIO_ONLY = 0,\n    CALL_MODE_SEND_ONLY,\n    CALL_MODE_RECEIVE_ONLY,\n    CALL_MODE_SEND_RECEIVE,\n    CALL_MODE_VIDEO_PAUSED,\n  }\n\n  \n  export enum AudioDevice {\n    DEVICE_MIC,\n    DEVICE_SPEAKER,\n    DEVICE_WIRED_HEADSET,\n    DEVICE_BLUETOOTH_SCO\n  }\n\n  \n  export enum CallRestrictionType {\n    RESTRICTION_TYPE_ALL_INCOMING = 0,\n    RESTRICTION_TYPE_ALL_OUTGOING,\n    RESTRICTION_TYPE_INTERNATIONAL,\n    RESTRICTION_TYPE_INTERNATIONAL_EXCLUDING_HOME,\n    RESTRICTION_TYPE_ROAMING_INCOMING,\n    RESTRICTION_TYPE_ALL_CALLS,\n    RESTRICTION_TYPE_OUTGOING_SERVICES,\n    RESTRICTION_TYPE_INCOMING_SERVICES,\n  }\n\n  \n  export interface CallTransferInfo {\n    transferNum: string;\n    type: CallTransferType;\n    settingType: CallTransferSettingType;\n  }\n\n  \n  export enum CallTransferType {\n    TRANSFER_TYPE_UNCONDITIONAL = 0,\n    TRANSFER_TYPE_BUSY,\n    TRANSFER_TYPE_NO_REPLY,\n    TRANSFER_TYPE_NOT_REACHABLE,\n  }\n\n  \n  export enum CallTransferSettingType {\n    CALL_TRANSFER_DISABLE = 0,\n    CALL_TRANSFER_ENABLE = 1,\n    CALL_TRANSFER_REGISTRATION = 3,\n    CALL_TRANSFER_ERASURE = 4,\n  }\n\n  \n  export interface CallAttributeOptions {\n    accountNumber: string;\n    speakerphoneOn: boolean;\n    accountId: number;\n    videoState: VideoStateType;\n    startTime: number;\n    isEcc: boolean;\n    callType: CallType;\n    callId: number;\n    callState: DetailedCallState;\n    conferenceState: ConferenceState;\n  }\n\n  \n  export enum ConferenceState {\n    TEL_CONFERENCE_IDLE = 0,\n    TEL_CONFERENCE_ACTIVE,\n    TEL_CONFERENCE_DISCONNECTING,\n    TEL_CONFERENCE_DISCONNECTED,\n  }\n\n  \n  export enum CallType {\n    TYPE_CS = 0, // CS\n    TYPE_IMS = 1, // IMS\n    TYPE_OTT = 2, // OTT\n    TYPE_ERR_CALL = 3, // OTHER\n  }\n\n  \n  export enum VideoStateType {\n    TYPE_VOICE = 0, // Voice\n    TYPE_VIDEO, // Video\n  }\n\n  \n  export enum DetailedCallState {\n    CALL_STATUS_ACTIVE = 0,\n    CALL_STATUS_HOLDING,\n    CALL_STATUS_DIALING,\n    CALL_STATUS_ALERTING,\n    CALL_STATUS_INCOMING,\n    CALL_STATUS_WAITING,\n    CALL_STATUS_DISCONNECTED,\n    CALL_STATUS_DISCONNECTING,\n    CALL_STATUS_IDLE,\n  }\n\n  \n  export interface CallRestrictionInfo {\n    type: CallRestrictionType;\n    password: string;\n    mode: CallRestrictionMode;\n  }\n\n  \n  export enum CallRestrictionMode {\n    RESTRICTION_MODE_DEACTIVATION = 0,\n    RESTRICTION_MODE_ACTIVATION,\n  }\n\n  \n  export interface CallEventOptions {\n    eventId: CallAbilityEventId,\n  }\n\n  \n  export enum CallAbilityEventId {\n    EVENT_DIAL_NO_CARRIER = 1,\n    EVENT_INVALID_FDN_NUMBER,\n  }\n\n  export enum CallState {\n    \n    CALL_STATE_UNKNOWN = -1,\n\n    \n    CALL_STATE_IDLE = 0,\n\n    \n    CALL_STATE_RINGING = 1,\n\n    \n    CALL_STATE_OFFHOOK = 2\n  }\n\n  export interface DialOptions {\n    \n    extras?: boolean;\n    \n    accountId?: number;\n    \n    videoState?: VideoStateType;\n    \n    dialScene?: DialScene;\n    \n    dialType?: DialType;\n  }\n\n  \n  export enum DialScene {\n    CALL_NORMAL = 0,\n    CALL_PRIVILEGED = 1,\n    CALL_EMERGENCY = 2,\n  }\n\n  \n  export enum DialType {\n    DIAL_CARRIER_TYPE = 0,\n    DIAL_VOICE_MAIL_TYPE = 1,\n    DIAL_OTT_TYPE = 2,\n  }\n\n  \n  export interface RejectMessageOptions {\n    messageContent: string;\n  }\n\n  \n  export interface CallTransferResult {\n    status: TransferStatus;\n    number: string;\n  }\n\n  \n  export enum CallWaitingStatus {\n    CALL_WAITING_DISABLE = 0,\n    CALL_WAITING_ENABLE = 1\n  }\n\n  \n  export enum RestrictionStatus {\n    RESTRICTION_DISABLE = 0,\n    RESTRICTION_ENABLE = 1\n  }\n\n  \n  export enum TransferStatus {\n    TRANSFER_DISABLE = 0,\n    TRANSFER_ENABLE = 1\n  }\n\n  \n  export interface EmergencyNumberOptions {\n    slotId?: number;\n  }\n\n  \n  export interface NumberFormatOptions {\n    countryCode?: string;\n  }\n\n  \n  export enum DisconnectedDetails {\n    UNASSIGNED_NUMBER = 1,\n    NO_ROUTE_TO_DESTINATION = 3,\n    CHANNEL_UNACCEPTABLE = 6,\n    OPERATOR_DETERMINED_BARRING = 8,\n    NORMAL_CALL_CLEARING = 16,\n    USER_BUSY = 17,\n    NO_USER_RESPONDING = 18,\n    USER_ALERTING_NO_ANSWER = 19,\n    CALL_REJECTED = 21,\n    NUMBER_CHANGED = 22,\n    DESTINATION_OUT_OF_ORDER = 27,\n    INVALID_NUMBER_FORMAT = 28,\n    NETWORK_OUT_OF_ORDER = 38,\n    TEMPORARY_FAILURE = 41,\n    INVALID_PARAMETER = 1025,\n    SIM_NOT_EXIT = 1026,\n    SIM_PIN_NEED = 1027,\n    CALL_NOT_ALLOW = 1029,\n    SIM_INVALID = 1045,\n    UNKNOWN = 1279,\n  };\n}", "api_method_name": "call", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 1730, "since": 0, "api_used": "\u662f", "lines": ["", "isEcc;\n        this.callType = callType;\n   ", "    hangupCall,\n    callDetailsChangeOn,\n   ", ";\n            await call.setCallPreferenceMo", "\n            expect(callAttributeOptions.sta", "`);\n            if (callState === CALL_STATE", "allId;\n        this.callState = callState;\n ", "54 case is over for callmanager CallManageIm", "    reachState,\n    callDetailsChangeOff,\n  ", "    this.callType = callType;\n        this.c", "\n            expect(callAttributeOptions.con", "LL_STATE_UNKNOWN || callState === CALL_STATE", "Manager callState ${callState} ${gloabCallId", "allAttributeOptions.callState === CALL_STATU", "mise_0100';\n        call.separateConference(", "sync_0100';\n        call.separateConference(", "y {\n            let callState = await call.g", "   isEcc, callType, callId, callState, confe", "etailsChangeOn,\n    callId as gloabCallId,\n ", "\n            expect(callAttributeOptions.vid", "allAttributeOptions.callId === TEMP_CALL_ID)", "sync_0100';\n        call.combineConference(C", "mise_0100';\n        call.combineConference(C", "teChange');\n        callDetailsChangeOff();\n", "   this.callState = callState;\n        this.", "allAttributeOptions.callType === DIAL_TYPE_O", "\n            expect(callAttributeOptions.isE", ", callType, callId, callState, conferenceSta", "sync_0100';\n        call.joinConference(CALL", "t callState = await call.getCallState();\n   ", "om '@ohos.telephony.call';\nimport observer f", "lephony_CallManager callState ${callState} $", "ime,\n        isEcc, callType, callId, callSt", "\n            expect(callAttributeOptions.spe", "\n            expect(callAttributeOptions.acc", "\n            expect(callAttributeOptions.cal", "ue;\n            let callAttributeOptions = n", "sync_0400';\n        call.enableLteEnhanceMod", "e);\n    });\n};\n\nvar callState = -1;\nvar timi", "{\n            await call.enableImsSwitch(DEF", "NG_TIME = 200;\n\nlet callId = null;\nclass Rej", "mise_0100';\n        call.joinConference(CALL", "      this.callId = callId;\n        this.cal", "      observer.off('callStateChange');\n     ", "       observer.on('callStateChange', {slotI", "lManager ${toString(callAttributeOptions)}`)", "lType;\n        this.callId = callId;\n       "], "files": ["Stability_test.js", "Flex.ets", "ScenceInCalling.js", "Performance_test.js", "Navigator.ets", "NetworkSearchErrors.test.js", "RowSplit.ets", "Slider.ets", "Qrcode.ets", "Text.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "Progress.ets", "Panel.ets", "Blank.ets", "Badge.ets", "common.js", "Scroll.ets", "DataPanel.ets", "ContactMerge_test.js", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "SimManager.test.js", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "ScenceTransfer.js", "GridContainer.ets", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Const.js", "Divider.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "dial", "api_method_all": "function dial(phoneNumber: string, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 97, "since": 8, "api_used": "\u662f", "lines": ["ncyCall_Async_0200  dial finish : data = ${data}`);\n            ", "ony_CallManager_IMS_dial_Promise_0100';\n        let flag = true;", "ony_CallManager_IMS_dial_Async_0600\n     * @tc.name    Dial a ca", "allManager_IMS_USSD_dial_Promise_0600';\n        call.dial(COMMAN", " a call by function dial by args phoneNumber NULL_PHONE_NUMBER o", "ony_CallManager_IMS_dial_Async_0600';\n        let flag = true;\n ", "le.log(`${caseName} dial error,error:${toString(error)}`);\n     ", "0600';\n        call.dial(COMMAND_CALL_ERROR, {accountId:DEFAULT_", "allManager_IMS_USSD_dial_Async_0600', 0, function (done) {\n     ", " a call by function dial by args phoneNumber PHONE_NUMBER_LENGTH", "CE_CALL_PRIVILEGED, dialType:DIAL_CARRIER_TYPE};\n        call.di", "0600';\n        call.dial(COMMAND_CALL_ERROR4, {accountId:DEFAULT", "TYPE};\n        call.dial(NULL_PHONE_NUMBER, obj, (error, data) =", "allManager_IMS_USSD_dial_Promise_0600\n     * @tc.name    Run the", "ony_CallManager_IMS_dial_Promise_0100', 0, function (done) {\n   ", ": MEDIA_TYPE_VOICE, dialScene: DIAL_SCENCE_CALL_PRIVILEGED,\n    ", "CE_CALL_PRIVILEGED, dialType:DIAL_CARRIER_TYPE}, (error, data) =", "\n     *             dialType:DIAL_CARRIER_TYPE} by promise,the f", "ILEGED,\n            dialType:DIAL_CARRIER_TYPE};\n        call.di", "\n     *             dialType:DIAL_CARRIER_TYPE} by callback,the ", "le.log(`${caseName} dial success,case ${data === true ? 'success", "_VOICE,\n            dialScene: DIAL_SCENCE_CALL_PRIVILEGED, dial", "   Run the function dial by args phoneNumber COMMAND_CALL_ERROR4", "cyCall_Promise_0200 dial finish : data = ${data}`);\n            ", " a call by function dial by args phoneNumber PHONE_NUMBER_LONG b", "cyCall_Promise_0200 dial fail : err = ${err}`);\n            done", "encyCall_Async_0200 dial fail : err = ${err}`);\n                ", "_VOICE,\n            dialScene:DIAL_SCENCE_CALL_PRIVILEGED, dialT", "ony_CallManager_IMS_dial_Async_0600', 0, function (done) {\n     ", "ony_CallManager_IMS_dial_Promise_0100\n     * @tc.name    Dial a ", "allManager_IMS_USSD_dial_Async_0600';\n        call.dial(COMMAND_", "le.log(`${caseName} dial error,case failed,error:${toString(erro", "allManager_IMS_USSD_dial_Promise_0600', 0, function (done) {\n   ", "r data = await call.dial(THE_THREE_NUMBER, options);\n           ", "ED,\n                dialType:DIAL_CARRIER_TYPE};\n            var", "e:MEDIA_TYPE_VOICE, dialScene:DIAL_SCENCE_CALL_PRIVILEGED,\n     ", "TYPE};\n        call.dial(THE_THREE_NUMBER, options, async (err, ", "ony_CallManager_IMS_dial_Promise_0900\n     * @tc.name    Dial a ", "allManager_IMS_USSD_dial_Async_0600\n     * @tc.name    Run the f", "te:MEDIA_TYPE_VOICE,dialScene:DIAL_SCENCE_CALL_PRIVILEGED,\n     ", "   Run the function dial by args phoneNumber COMMAND_CALL_ERROR "], "files": ["SimManager.test.js", "CallManageAll.test.js", "ScenceInCalling.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "dial", "api_method_all": "function dial(phoneNumber: string, options: DialOptions, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 97, "since": 8, "api_used": "\u662f", "lines": ["ncyCall_Async_0200  dial finish : data = ${data}`);\n            ", "ony_CallManager_IMS_dial_Promise_0100';\n        let flag = true;", "ony_CallManager_IMS_dial_Async_0600\n     * @tc.name    Dial a ca", "allManager_IMS_USSD_dial_Promise_0600';\n        call.dial(COMMAN", " a call by function dial by args phoneNumber NULL_PHONE_NUMBER o", "ony_CallManager_IMS_dial_Async_0600';\n        let flag = true;\n ", "le.log(`${caseName} dial error,error:${toString(error)}`);\n     ", "0600';\n        call.dial(COMMAND_CALL_ERROR, {accountId:DEFAULT_", "allManager_IMS_USSD_dial_Async_0600', 0, function (done) {\n     ", " a call by function dial by args phoneNumber PHONE_NUMBER_LENGTH", "CE_CALL_PRIVILEGED, dialType:DIAL_CARRIER_TYPE};\n        call.di", "0600';\n        call.dial(COMMAND_CALL_ERROR4, {accountId:DEFAULT", "TYPE};\n        call.dial(NULL_PHONE_NUMBER, obj, (error, data) =", "allManager_IMS_USSD_dial_Promise_0600\n     * @tc.name    Run the", "ony_CallManager_IMS_dial_Promise_0100', 0, function (done) {\n   ", ": MEDIA_TYPE_VOICE, dialScene: DIAL_SCENCE_CALL_PRIVILEGED,\n    ", "CE_CALL_PRIVILEGED, dialType:DIAL_CARRIER_TYPE}, (error, data) =", "\n     *             dialType:DIAL_CARRIER_TYPE} by promise,the f", "ILEGED,\n            dialType:DIAL_CARRIER_TYPE};\n        call.di", "\n     *             dialType:DIAL_CARRIER_TYPE} by callback,the ", "le.log(`${caseName} dial success,case ${data === true ? 'success", "_VOICE,\n            dialScene: DIAL_SCENCE_CALL_PRIVILEGED, dial", "   Run the function dial by args phoneNumber COMMAND_CALL_ERROR4", "cyCall_Promise_0200 dial finish : data = ${data}`);\n            ", " a call by function dial by args phoneNumber PHONE_NUMBER_LONG b", "cyCall_Promise_0200 dial fail : err = ${err}`);\n            done", "encyCall_Async_0200 dial fail : err = ${err}`);\n                ", "_VOICE,\n            dialScene:DIAL_SCENCE_CALL_PRIVILEGED, dialT", "ony_CallManager_IMS_dial_Async_0600', 0, function (done) {\n     ", "ony_CallManager_IMS_dial_Promise_0100\n     * @tc.name    Dial a ", "allManager_IMS_USSD_dial_Async_0600';\n        call.dial(COMMAND_", "le.log(`${caseName} dial error,case failed,error:${toString(erro", "allManager_IMS_USSD_dial_Promise_0600', 0, function (done) {\n   ", "r data = await call.dial(THE_THREE_NUMBER, options);\n           ", "ED,\n                dialType:DIAL_CARRIER_TYPE};\n            var", "e:MEDIA_TYPE_VOICE, dialScene:DIAL_SCENCE_CALL_PRIVILEGED,\n     ", "TYPE};\n        call.dial(THE_THREE_NUMBER, options, async (err, ", "ony_CallManager_IMS_dial_Promise_0900\n     * @tc.name    Dial a ", "allManager_IMS_USSD_dial_Async_0600\n     * @tc.name    Run the f", "te:MEDIA_TYPE_VOICE,dialScene:DIAL_SCENCE_CALL_PRIVILEGED,\n     ", "   Run the function dial by args phoneNumber COMMAND_CALL_ERROR "], "files": ["SimManager.test.js", "CallManageAll.test.js", "ScenceInCalling.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "dial", "api_method_all": "function dial(phoneNumber: string, options?: DialOptions): Promise<boolean>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["   });\n        call.dial(PHONE_NUMBER_LONG).then(data => {\n     ", "CALL};\n        call.dial(PHONE_NUMBER_LENGTH_11, obj).then(data ", "CE_CALL_PRIVILEGED, dialType:DIAL_CARRIER_TYPE}).then(data => {\n", ") => {\n        call.dial('##002#')\n            .then(data => {\n ", "R_TYPE};\n      call.dial(PHONE_NUMBER,options).then(data=>{\n    "], "files": ["CallManageAll.test.js", "ScenceTransfer.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "makeCall", "api_method_all": "function makeCall(phoneNumber: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": [" = \"\";\n        call.makeCall(telNumber,(error) => {\n          if(err"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "makeCall", "api_method_all": "function makeCall(phoneNumber: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["  try{\n        call.makeCall(telNumber).then(()=>{\n          console"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "hasCall", "api_method_all": "function hasCall(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 0, "api_used": "\u662f", "lines": ["lephony_CallManager_hasCall_Promise_0400 fail');\n            expect", "one) {\n        call.hasCall((err, data) => {\n            if (err) {", "lephony_CallManager_hasCall_Async_0400', 0, async function (done) {", "r data = await call.hasCall();\n            expect(data === false).a", "lephony_CallManager_hasCall_Async_0400\n     * @tc.name    When idle", "lephony_CallManager_hasCall_Async_0400 finish data = ${data}`);\n   ", "lephony_CallManager_hasCall_Promise_0400', 0, async function (done)", "lephony_CallManager_hasCall_Async_0400 fail');\n                expe", "lephony_CallManager_hasCall_Promise_0400\n     * @tc.name    When id", ".name    When idle, hasCall() is called to confirm that there is no", "lephony_CallManager_hasCall_Promise_0400 finish data = ${data}`);\n "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "hasCall", "api_method_all": "function hasCall(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getCallState", "api_method_all": "function getCallState(callback: AsyncCallback<CallState>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 14, "since": 0, "api_used": "\u662f", "lines": ["lephony_CallManager_getCallState_Promise_0100', 0, async function (done)", "one) {\n        call.getCallState((err, data) => {\n            if (err) {", "lephony_CallManager_getCallState_Promise_0100 : err = ${err.message}`);\n", "lephony_CallManager_getCallState_Promise_0100\n     * @tc.name    To get ", "lephony_CallManager_getCallState_Async_0100', 0, async function (done) {", "lState = await call.getCallState();\n            console.log(`Telephony_C", "lephony_CallManager_getCallState_Promise_0100 finish data = ${data}`);\n ", "nager hangupCall or getCallState error');\n        }\n    });\n\n    afterAl", "lephony_CallManager_getCallState_Async_0100\n     * @tc.name    To get th", "e call status, call getCallState() to get the current call status.\n     ", "lephony_CallManager_getCallState_Async_0100 finish data = ${data}`);\n   ", "lephony_CallManager_getCallState_Async_0100 : err = ${err.message}`);\n  ", "r data = await call.getCallState();\n            expect(data === call.CAL"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getCallState", "api_method_all": "function getCallState(): Promise<CallState>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "muteRinger", "api_method_all": "function muteRinger(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["0100';\n        call.muteRinger((error, data) => {\n            if (erro", "lephony_CallManager_muteRinger_Promise_0100';\n        call.muteRinger(", " state,run function muteRinger by callback,the function return void\n  ", "lephony_CallManager_muteRinger_Async_0100', 0, function (done) {\n     ", "lephony_CallManager_muteRinger_Promise_0100', 0, function (done) {\n   ", "lephony_CallManager_muteRinger_Promise_0100\n     * @tc.name    Unwante", " state,run function muteRinger by promise,the function return void\n   ", "lephony_CallManager_muteRinger_Async_0100';\n        call.muteRinger((e", "lephony_CallManager_muteRinger_Async_0100\n     * @tc.name    Unwanted "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "muteRinger", "api_method_all": "function muteRinger(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0100';\n        call.muteRinger()\n            .then(data => {\n         "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "hasVoiceCapability", "api_method_all": "function hasVoiceCapability(): boolean;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["iceCapablity = call.hasVoiceCapability();\n      if(voiceCa"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isEmergencyPhoneNumber", "api_method_all": "function isEmergencyPhoneNumber(phoneNumber: string, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["r data = await call.isEmergencyPhoneNumber('120', emergencyNumberOptions);\n       ", "lephony_CallManager_isEmergencyPhoneNumber_Async_1300 finish err = ${err}`);\n     ", "T_ID);\n        call.isEmergencyPhoneNumber('110', emergencyNumberOptions, (err) =>", "0, options -1. Call isEmergencyPhoneNumber() to check whether it is an emergency\n ", "lephony_CallManager_isEmergencyPhoneNumber_Async_1300 fail ');\n            done();", "lephony_CallManager_isEmergencyPhoneNumber_Promise_1300 finish err = ${err}`);\n   ", "lephony_CallManager_isEmergencyPhoneNumber_Promise_1300', 0, async function (done)", "lephony_CallManager_isEmergencyPhoneNumber_Promise_1300\n     * @tc.name    PhoneNu", "lephony_CallManager_isEmergencyPhoneNumber_Async_1300\n     * @tc.name    PhoneNumb", "lephony_CallManager_isEmergencyPhoneNumber_Promise_1300 fail ');\n            done(", "lephony_CallManager_isEmergencyPhoneNumber_Async_1300', 0, async function (done) {"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isEmergencyPhoneNumber", "api_method_all": "function isEmergencyPhoneNumber(phoneNumber: string, options: EmergencyNumberOptions, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["r data = await call.isEmergencyPhoneNumber('120', emergencyNumberOptions);\n       ", "lephony_CallManager_isEmergencyPhoneNumber_Async_1300 finish err = ${err}`);\n     ", "T_ID);\n        call.isEmergencyPhoneNumber('110', emergencyNumberOptions, (err) =>", "0, options -1. Call isEmergencyPhoneNumber() to check whether it is an emergency\n ", "lephony_CallManager_isEmergencyPhoneNumber_Async_1300 fail ');\n            done();", "lephony_CallManager_isEmergencyPhoneNumber_Promise_1300 finish err = ${err}`);\n   ", "lephony_CallManager_isEmergencyPhoneNumber_Promise_1300', 0, async function (done)", "lephony_CallManager_isEmergencyPhoneNumber_Promise_1300\n     * @tc.name    PhoneNu", "lephony_CallManager_isEmergencyPhoneNumber_Async_1300\n     * @tc.name    PhoneNumb", "lephony_CallManager_isEmergencyPhoneNumber_Promise_1300 fail ');\n            done(", "lephony_CallManager_isEmergencyPhoneNumber_Async_1300', 0, async function (done) {"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isEmergencyPhoneNumber", "api_method_all": "function isEmergencyPhoneNumber(phoneNumber: string, options?: EmergencyNumberOptions): Promise<boolean>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "formatPhoneNumber", "api_method_all": "function formatPhoneNumber(phoneNumber: string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 25, "since": 7, "api_used": "\u662f", "lines": ["lephony_CallManager_formatPhoneNumber_Async_0100', 0, async function (done) {", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100 finish data = ${data", "lephony_CallManager_formatPhoneNumber_Async_0100\n     * @tc.name    PhoneNumb", "lephony_CallManager_formatPhoneNumber_Async_0100 finish data = ${data}`);\n   ", "er is 2000000. Call formatPhoneNumber() to format the number.\n     *         ", ", options: CN, call formatPhoneNumberToE164() to format the number,\n     *   ", " 100000000000. Call formatPhoneNumber() to format the number.\n     *         ", "r data = await call.formatPhoneNumberToE164('52300000000', numberFormatOption", "lephony_CallManager_formatPhoneNumberToE164_Async_0100 finish data = ${data}`", "'CN');\n        call.formatPhoneNumberToE164('010-0000-0000', numberFormatOpti", "lephony_CallManager_formatPhoneNumberToE164_Async_0100 fail');\n              ", "lephony_CallManager_formatPhoneNumberToE164_Async_0100', 0, async function (d", "lephony_CallManager_formatPhoneNumberToE164_Async_0100\n     * @tc.name    Pho", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100\n     * @tc.name    P", "r data = await call.formatPhoneNumber('2000000');\n            expect(data ===", "lephony_CallManager_formatPhoneNumber_Async_0100 fail');\n                expe", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100', 0, async function ", "lephony_CallManager_formatPhoneNumber_Async_0100 err = ${err.message}`);\n    ", "lephony_CallManager_formatPhoneNumber_Promise_0100 finish data = ${data}`);\n ", "lephony_CallManager_formatPhoneNumber_Promise_0100\n     * @tc.name    PhoneNu", "lephony_CallManager_formatPhoneNumber_Promise_0100', 0, async function (done)", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100 fail');\n            ", "one) {\n        call.formatPhoneNumber('100000000000', (err, data) => {\n      ", "lephony_CallManager_formatPhoneNumber_Promise_0100 fail');\n            expect"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "formatPhoneNumber", "api_method_all": "function formatPhoneNumber(phoneNumber: string, options: NumberFormatOptions, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 25, "since": 7, "api_used": "\u662f", "lines": ["lephony_CallManager_formatPhoneNumber_Async_0100', 0, async function (done) {", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100 finish data = ${data", "lephony_CallManager_formatPhoneNumber_Async_0100\n     * @tc.name    PhoneNumb", "lephony_CallManager_formatPhoneNumber_Async_0100 finish data = ${data}`);\n   ", "er is 2000000. Call formatPhoneNumber() to format the number.\n     *         ", ", options: CN, call formatPhoneNumberToE164() to format the number,\n     *   ", " 100000000000. Call formatPhoneNumber() to format the number.\n     *         ", "r data = await call.formatPhoneNumberToE164('52300000000', numberFormatOption", "lephony_CallManager_formatPhoneNumberToE164_Async_0100 finish data = ${data}`", "'CN');\n        call.formatPhoneNumberToE164('010-0000-0000', numberFormatOpti", "lephony_CallManager_formatPhoneNumberToE164_Async_0100 fail');\n              ", "lephony_CallManager_formatPhoneNumberToE164_Async_0100', 0, async function (d", "lephony_CallManager_formatPhoneNumberToE164_Async_0100\n     * @tc.name    Pho", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100\n     * @tc.name    P", "r data = await call.formatPhoneNumber('2000000');\n            expect(data ===", "lephony_CallManager_formatPhoneNumber_Async_0100 fail');\n                expe", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100', 0, async function ", "lephony_CallManager_formatPhoneNumber_Async_0100 err = ${err.message}`);\n    ", "lephony_CallManager_formatPhoneNumber_Promise_0100 finish data = ${data}`);\n ", "lephony_CallManager_formatPhoneNumber_Promise_0100\n     * @tc.name    PhoneNu", "lephony_CallManager_formatPhoneNumber_Promise_0100', 0, async function (done)", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100 fail');\n            ", "one) {\n        call.formatPhoneNumber('100000000000', (err, data) => {\n      ", "lephony_CallManager_formatPhoneNumber_Promise_0100 fail');\n            expect"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "formatPhoneNumber", "api_method_all": "function formatPhoneNumber(phoneNumber: string, options?: NumberFormatOptions): Promise<string>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "formatPhoneNumberToE164", "api_method_all": "function formatPhoneNumberToE164(phoneNumber: string, countryCode: string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["lephony_CallManager_formatPhoneNumberToE164_Promise_0100 finish data = ${data}`);\n ", ", options: CN, call formatPhoneNumberToE164() to format the number,\n     *         ", "'CN');\n        call.formatPhoneNumberToE164('010-0000-0000', numberFormatOptions.co", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100\n     * @tc.name    PhoneNu", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100', 0, async function (done)", "lephony_CallManager_formatPhoneNumberToE164_Promise_0100 fail');\n            expect", "lephony_CallManager_formatPhoneNumberToE164_Async_0100\n     * @tc.name    PhoneNumb", "lephony_CallManager_formatPhoneNumberToE164_Async_0100 fail');\n                expe", "lephony_CallManager_formatPhoneNumberToE164_Async_0100 finish data = ${data}`);\n   ", "lephony_CallManager_formatPhoneNumberToE164_Async_0100', 0, async function (done) {", "r data = await call.formatPhoneNumberToE164('52300000000', numberFormatOptions.coun"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "formatPhoneNumberToE164", "api_method_all": "function formatPhoneNumberToE164(phoneNumber: string, countryCode: string): Promise<string>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "answer", "api_method_all": "function answer(callId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 30, "since": 7, "api_used": "\u662f", "lines": ["ony_CallManager_IMS_answer_Async_0100', 0, function (done) {\n     ", "al a call and after answering the call,run function setDeviceDirec", "ony_CallManager_IMS_answer_Promise_0100\n     * @tc.name    Run fun", " {\n                \"answer_state\": \"1\"\n            };\n            ", "al a call and after answering the call,run function controlCamera ", "al a call and after answering the call,run function setDisplayWind", "00\"],\n            [\"answer_state\", \"4\"], [\"create_time\", \"40000\"],", "al a call and after answering the call,run function setCameraZoom ", "ony_CallManager_IMS_answer_Async_0100\n     * @tc.name    Run funct", "0100';\n        call.answer(BOUNDARY_NUMBER_INT, (error) => {\n     ", "ony_CallManager_IMS_answer_Promise_0100', 0, function (done) {\n   ", "time\", \"end_time\", \"answer_state\", \"create_time\", \"number_location", "al a call and after answering the call,run function setPreviewWind", "ony_CallManager_IMS_answer_Promise_0100';\n        call.answer(CALL", "al a call and after answering the call,run function setPausePictur", "ony_CallManager_IMS_answer_Async_0100';\n        call.answer(BOUNDA", "00\"],\n            [\"answer_state\", \"1\"], [\"create_time\", \"400\"], [", ": 300,\n            \"answer_state\": 1,\n            \"create_time\": 4", ": 400,\n            \"answer_state\": 4,\n            \"create_time\": 4", "           map.set(\"answer_state\", \"1\");\n                    await", "                   \"answer_state\": \"1\"\n                };\n        ", "ame    Run function answer by args callId CALL_ID_NOT_EXIST by pro", "ame    Run function answer by args callId BOUNDARY_NUMBER_INT by c"], "files": ["Calllog_test.js", "Stability_test.js", "CallManageAll.test.js", "Performance_test.js", "common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "answer", "api_method_all": "function answer(callId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["0100';\n        call.answer(CALL_ID_NOT_EXIST).then(() => {\n       "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "hangup", "api_method_all": "function hangup(callId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 63, "since": 7, "api_used": "\u662f", "lines": ["ase\nexport function hangupCall2 (caseName, done, callId, delaytime", "ame} ${tag} timeout hangupCall error,error:${toString(error)}`;\n  ", "cenceInCalling,\n    hangupCall2,\n    hangupCall,\n    callDetailsCh", "sage = `${caseName} hangupCall2 get right state success,data:${toS", "lephony_CallManager hangupCall success ${toString(data)}`);\n      ", "   let data = await hangupCall('Telephony_CallManager', gloabCallI", "ony_CallManager_IMS_hangup_Async_0100', 0, function (done) {\n     ", "   hangupCall2,\n    hangupCall,\n    callDetailsChangeOn,\n    callI", "sage = `${caseName} hangupCall2 error,need callId`;\n        consol", "ony_CallManager_IMS_hangup_Promise_0100', 0, function (done) {\n   ", "Fail();\n            hangupCall2(caseName, done, callId);\n        }", "lephony_CallManager hangupCall or getCallState error');\n        }\n", "ony_CallManager_IMS_hangup_Promise_0100\n     * @tc.name    Run fun", "                    hangupCall2(caseName, done, callId);\n         ", "sage = `${caseName} hangupCall get right state error,error:${toStr", "ta)}`);\n            hangupCall2(caseName, done, callId);\n        }", "ame} ${tag} timeout hangupCall success,data:${toString(data)}`;\n  ", "= `${caseName} func hangup,error:${toString(error)}`;\n            ", " `${caseName} hunup,hangupCall2 callId ${callId}`;\n        console", "g(`${caseName} func hangup success,${toString(data)}`);\n          ", ";\n        }\n        hangupCall2(caseName, done, callId);\n    });\n\n", "ony_CallManager_IMS_hangup_Async_0100';\n        call.hangup(BOUNDA", "ony_CallManager_IMS_hangup_Promise_0100';\n        call.hangup(CALL", "ion\nexport function hangupCall (caseName, callId) {\n    return new", " `${caseName} hunup,hangupCall callId:${callId}`;\n            cons", "sage = `${caseName} hangupCall get right state success,data:${toSt", "ony_CallManager_IMS_hangup_Async_0100\n     * @tc.name    Run funct", "ame    Run function hangup by args callId CALL_ID_NOT_EXIST by pro", "ame    Run function hangup by args callId BOUNDARY_NUMBER_INT by c", "sage = `${caseName} hangupCall2 get right state error,error:${toSt", "`);\n                hangupCall2(caseName, done, callId);\n         ", "0100';\n        call.hangup(BOUNDARY_NUMBER_INT, (error) => {\n     ", "();\n                hangupCall2(caseName, done, callId);\n         "], "files": ["CallManageAll.test.js", "ScenceInCalling.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "hangup", "api_method_all": "function hangup(callId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["   });\n        call.hangup(callId)\n            .then((data) => {\n ", "                    hangupCall(caseName, callId).then(data => {\n  ", "0100';\n        call.hangup(CALL_ID_NOT_EXIST).then(() => {\n       ", "ATUS_DISCONNECTED, 'hangupCall2', true)\n            .then(data => ", ");\n            call.hangup(callId)\n                .then((data) =>", "ATUS_DISCONNECTED, 'hangupCall', true)\n                .then(data "], "files": ["CallManageAll.test.js", "ScenceInCalling.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "reject", "api_method_all": "function reject(callId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 103, "since": 7, "api_used": "\u662f", "lines": ["ise(async (resolve, reject) => {\n        let {caseName, callId} = ", "ony_CallManager_IMS_reject_Async_0100\n     * @tc.name    Run funct", "ony_CallManager_IMS_reject_Promise_0100', 0, function (done) {\n   ", "le.log(`${caseName} reject success,case failed,data:${toString(dat", "0100';\n        call.reject(BOUNDARY_NUMBER_INT, (error) => {\n     ", "lephony_CallManager_reject_Async_0400';\n        let callId = null;", "w Promise((resolve, reject) => {\n        reachStateTimeout = setIn", "                    reject(new Error(message));\n                })", "ssage);\n            reject(new Error(message));\n        };\n       ", "                    reject(new Error(`flag:${flag}`));\n           ", "                    reject(new Error(message));\n                  ", "w Promise((resolve, reject) => {\n        setTimeout(() => {\n      ", "  data = await call.reject(callId, new RejectMessageOptions(REJECT", "ony_CallManager_IMS_reject_Async_0100';\n        call.reject(BOUNDA", "lephony_CallManager_reject_Promise_0400\n     * @tc.name    Test th", "ssage);\n            reject(new Error(message));\n        }\n    });\n", "w Promise((resolve, reject) => {\n        let {caseName, dialOption", "                    reject(new Error(message));\n                }\n", "le.log(`${caseName} reject error,case success,err:${toString(err)}", "                    reject(error);\n                } else {\n      ", "ony_CallManager_IMS_reject_Async_0100', 0, function (done) {\n     ", "w Promise((resolve, reject) => {\n        let {caseName, phoneNumbe", "ony_CallManager_IMS_reject_Promise_0100';\n        call.reject(CALL", "w Promise((resolve, reject) => {\n            function excuteCallba", "                    reject(new Error(message));\n                },", "ony_CallManager_IMS_reject_Promise_0100\n     * @tc.name    Run fun", "lephony_CallManager_reject_Promise_0400';\n        let callId = nul", "(function (resolve, reject) {\n            console.log(`Telephony_C", "lephony_CallManager_reject_Promise_0400', 0, async function (done)", "ame    Run function reject by args callId BOUNDARY_NUMBER_INT by c", "d;\n            call.reject(callId, new RejectMessageOptions(REJECT", "lephony_CallManager_reject_Async_0400', 0, async function (done) {", "ame    Run function reject by args callId CALL_ID_NOT_EXIST by pro", "lephony_CallManager_reject_Async_0400\n     * @tc.name    Test the "], "files": ["Utils.ets", "ScenceLimitCalling.js", "ScenceInCalling.js", "CallJsunit.test.ets", "NetworkSearchErrors.test.js", "ApiToPromise.js", "ScenceTransfer.js", "ApiToPromiseReliability.js", "CallManageAll.test.js", "ApiToPromisePerfomance.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "reject", "api_method_all": "function reject(callId: number, options: RejectMessageOptions, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 103, "since": 7, "api_used": "\u662f", "lines": ["ise(async (resolve, reject) => {\n        let {caseName, callId} = ", "ony_CallManager_IMS_reject_Async_0100\n     * @tc.name    Run funct", "ony_CallManager_IMS_reject_Promise_0100', 0, function (done) {\n   ", "le.log(`${caseName} reject success,case failed,data:${toString(dat", "0100';\n        call.reject(BOUNDARY_NUMBER_INT, (error) => {\n     ", "lephony_CallManager_reject_Async_0400';\n        let callId = null;", "w Promise((resolve, reject) => {\n        reachStateTimeout = setIn", "                    reject(new Error(message));\n                })", "ssage);\n            reject(new Error(message));\n        };\n       ", "                    reject(new Error(`flag:${flag}`));\n           ", "                    reject(new Error(message));\n                  ", "w Promise((resolve, reject) => {\n        setTimeout(() => {\n      ", "  data = await call.reject(callId, new RejectMessageOptions(REJECT", "ony_CallManager_IMS_reject_Async_0100';\n        call.reject(BOUNDA", "lephony_CallManager_reject_Promise_0400\n     * @tc.name    Test th", "ssage);\n            reject(new Error(message));\n        }\n    });\n", "w Promise((resolve, reject) => {\n        let {caseName, dialOption", "                    reject(new Error(message));\n                }\n", "le.log(`${caseName} reject error,case success,err:${toString(err)}", "                    reject(error);\n                } else {\n      ", "ony_CallManager_IMS_reject_Async_0100', 0, function (done) {\n     ", "w Promise((resolve, reject) => {\n        let {caseName, phoneNumbe", "ony_CallManager_IMS_reject_Promise_0100';\n        call.reject(CALL", "w Promise((resolve, reject) => {\n            function excuteCallba", "                    reject(new Error(message));\n                },", "ony_CallManager_IMS_reject_Promise_0100\n     * @tc.name    Run fun", "lephony_CallManager_reject_Promise_0400';\n        let callId = nul", "(function (resolve, reject) {\n            console.log(`Telephony_C", "lephony_CallManager_reject_Promise_0400', 0, async function (done)", "ame    Run function reject by args callId BOUNDARY_NUMBER_INT by c", "d;\n            call.reject(callId, new RejectMessageOptions(REJECT", "lephony_CallManager_reject_Async_0400', 0, async function (done) {", "ame    Run function reject by args callId CALL_ID_NOT_EXIST by pro", "lephony_CallManager_reject_Async_0400\n     * @tc.name    Test the "], "files": ["Utils.ets", "ScenceLimitCalling.js", "ScenceInCalling.js", "CallJsunit.test.ets", "NetworkSearchErrors.test.js", "ApiToPromise.js", "ScenceTransfer.js", "ApiToPromiseReliability.js", "CallManageAll.test.js", "ApiToPromisePerfomance.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "reject", "api_method_all": "function reject(callId: number, options?: RejectMessageOptions): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["====>`);\n      call.reject(CALL_ID_NOT_EXIST).then(() => {\n       ", "0100';\n        call.reject(CALL_ID_NOT_EXIST).then(() => {\n       "], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "holdCall", "api_method_all": "function holdCall(callId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 15, "since": 7, "api_used": "\u662f", "lines": ["   Run the function holdCall by args callId CALL_ID_NOT_EXIST by cal", "ony_CallManager_IMS_holdCall_Async_0100';\n        call.holdCall(CALL", "0100';\n        call.holdCall(CALL_ID_NOT_EXIST, (error, data) => {\n ", "le.log(`${caseName} holdCall ${CALL_ID_NOT_EXIST} error,case success", "ony_CallManager_IMS_holdCall_Promise_0100';\n        call.holdCall(CA", "ony_CallManager_IMS_holdCall_Promise_0100\n     * @tc.name    Run the", ");\n            call.holdCall(callId, (error, data) => {\n            ", "   Run the function holdCall by args callId CALL_ID_NOT_EXIST by pro", "ony_CallManager_IMS_holdCall_Async_0100', 0, function (done) {\n     ", "me} scenceInHolding holdCall error,error:${toString(error)}`;\n      ", "ony_CallManager_IMS_holdCall_Async_0100\n     * @tc.name    Run the f", "ony_CallManager_IMS_holdCall_Promise_0100', 0, function (done) {\n   ", "le.log(`${caseName} holdCall success,case failed,data:${toString(dat"], "files": ["CallManageAll.test.js", "ScenceInCalling.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "holdCall", "api_method_all": "function holdCall(callId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["0100';\n        call.holdCall(CALL_ID_NOT_EXIST).then(data => {\n     "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "unHoldCall", "api_method_all": "function unHoldCall(callId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["le.log(`${caseName} unHoldCall success,case failed,data:${toString(dat", "ony_CallManager_IMS_unHoldCall_Promise_0100', 0, function (done) {\n   ", "   Run the function unHoldCall by args callId CALL_ID_NOT_EXIST by pro", "age = `${caseName}  unHoldCall error,error:${toString(error)}`;\n      ", "ony_CallManager_IMS_unHoldCall_Async_0100';\n        call.unHoldCall(CA", "ation of state when unHoldCall the call\nexport function scenceInCallin", "ony_CallManager_IMS_unHoldCall_Async_0100\n     * @tc.name    Run the f", "   Run the function unHoldCall by args callId CALL_ID_NOT_EXIST by cal", "ony_CallManager_IMS_unHoldCall_Promise_0100';\n        call.unHoldCall(", "ony_CallManager_IMS_unHoldCall_Async_0100', 0, function (done) {\n     ", "e.log(`${caseName}  unHoldCall data,data:${toString(data)},\n          ", "le.log(`${caseName} unHoldCall ${CALL_ID_NOT_EXIST} error,case success", ");\n            call.unHoldCall(callId, (error, data) => {\n            ", "ony_CallManager_IMS_unHoldCall_Promise_0100\n     * @tc.name    Run the", "0100';\n        call.unHoldCall(CALL_ID_NOT_EXIST, (error, data) => {\n "], "files": ["CallManageAll.test.js", "ScenceInCalling.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "unHoldCall", "api_method_all": "function unHoldCall(callId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["0100';\n        call.unHoldCall(CALL_ID_NOT_EXIST).then(data => {\n     "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "switchCall", "api_method_all": "function switchCall(callId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["   Run the function switchCall by args callId CALL_ID_NOT_EXIST by pro", "ony_CallManager_IMS_switchCall_Async_0100';\n        call.switchCall(CA", "ony_CallManager_IMS_switchCall_Async_0100\n     * @tc.name    Run the f", "   Run the function switchCall by args callId CALL_ID_NOT_EXIST by cal", "ony_CallManager_IMS_switchCall_Async_0100', 0, function (done) {\n     ", "le.log(`${caseName} switchCall ${CALL_ID_NOT_EXIST} error,case success", "ony_CallManager_IMS_switchCall_Promise_0100', 0, function (done) {\n   ", "ony_CallManager_IMS_switchCall_Promise_0100\n     * @tc.name    Run the", "le.log(`${caseName} switchCall ${CALL_ID_NOT_EXIST} success,case faile", "ony_CallManager_IMS_switchCall_Promise_0100';\n        call.switchCall(", "0100';\n        call.switchCall(CALL_ID_NOT_EXIST, (error, data) => {\n "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "switchCall", "api_method_all": "function switchCall(callId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["0100';\n        call.switchCall(CALL_ID_NOT_EXIST).then(data => {\n     "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "combineConference", "api_method_all": "function combineConference(callId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["0100';\n        call.combineConference(CALL_ID_NOT_EXIST, (error, data) => {\n ", "ony_CallManager_IMS_combineConference_Async_0100', 0, function (done) {\n     ", "ony_CallManager_IMS_combineConference_Promise_0100';\n        call.combineConf", "ony_CallManager_IMS_combineConference_Promise_0100', 0, function (done) {\n   ", "le.log(`${caseName} combineConference ${CALL_ID_NOT_EXIST} error,case success", "le.log(`${caseName} combineConference success,case failed,data:${toString(dat", "ony_CallManager_IMS_combineConference_Async_0100';\n        call.combineConfer"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "combineConference", "api_method_all": "function combineConference(callId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["0100';\n        call.combineConference(CALL_ID_NOT_EXIST).then(data => {\n     "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getMainCallId", "api_method_all": "function getMainCallId(callId: number, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["r data = await call.getMainCallId(CALL_ID_NOT_EXIST);\n            expect(", "CallId is 999, call getMainCallId() to get the call and return -1\n     * ", "lephony_CallManager_getMainCallId_Promise_0100 finish data = ${data}`);\n ", "lephony_CallManager_getMainCallId_Promise_0100', 0, async function (done)", "lephony_CallManager_getMainCallId_Promise_0100\n     * @tc.name    If main", "lephony_CallManager_getMainCallId_Async_0100 finish data = ${data}`);\n   ", "lephony_CallManager_getMainCallId_Async_0100\n     * @tc.name    If the ma", "lephony_CallManager_getMainCallId_Async_0100', 0, async function (done) {", "one) {\n        call.getMainCallId(CALL_ID_NOT_EXIST, (err, data) => {\n   ", "lephony_CallManager_getMainCallId_Async_0100 fail');\n                done"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getMainCallId", "api_method_all": "function getMainCallId(callId: number): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getSubCallIdList", "api_method_all": "function getSubCallIdList(callId: number, callback: AsyncCallback<Array<string>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["lephony_CallManager_getSubCallIdList_Async_0100', 0, async function (done) {", "lephony_CallManager_getSubCallIdList_Async_0100 finish data = ${data}`);\n   ", "lephony_CallManager_getSubCallIdList_Async_0100 fail');\n                done", "callId is 999, call getSubCallIdList() to get the sub-call list\n     * @tc.d", "lephony_CallManager_getSubCallIdList_Promise_0100', 0, async function (done)", "lephony_CallManager_getSubCallIdList_Async_0100\n     * @tc.name    If callId", "r data = await call.getSubCallIdList(CALL_ID_NOT_EXIST);\n            expect(", "callId is 999, call getSubCallIdList() to get the call list of subcalls and ", "lephony_CallManager_getSubCallIdList_Promise_0100 fail');\n            expect", "lephony_CallManager_getSubCallIdList_Promise_0100\n     * @tc.name    If call", "one) {\n        call.getSubCallIdList(CALL_ID_NOT_EXIST, (err, data) => {\n   ", "lephony_CallManager_getSubCallIdList_Promise_0100 finish data = ${data}`);\n "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getSubCallIdList", "api_method_all": "function getSubCallIdList(callId: number): Promise<Array<string>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getCallIdListForConference", "api_method_all": "function getCallIdListForConference(callId: number, callback: AsyncCallback<Array<string>>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["lephony_CallManager_getCallIdListForConference_Promise_0100 finish data = ${data}`);\n ", "one) {\n        call.getCallIdListForConference(CALL_ID_NOT_EXIST, (err, data) => {\n   ", "lephony_CallManager_getCallIdListForConference_Async_0100 fail');\n                expe", "lephony_CallManager_getCallIdListForConference_Async_0100\n     * @tc.name    CallId fo", "lephony_CallManager_getCallIdListForConference_Promise_0100 fail');\n            done()", "lephony_CallManager_getCallIdListForConference_Async_0100 finish data = ${data}`);\n   ", "lephony_CallManager_getCallIdListForConference_Promise_0100\n     * @tc.name    GetCall", "lephony_CallManager_getCallIdListForConference_Promise_0100', 0, async function (done)", "r data = await call.getCallIdListForConference(CALL_ID_NOT_EXIST);\n            expect(", ", the callback call getCallIdListForConference () to obtain a list all the phone call\n", "lephony_CallManager_getCallIdListForConference_Async_0100', 0, async function (done) {"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getCallIdListForConference", "api_method_all": "function getCallIdListForConference(callId: number): Promise<Array<string>>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getCallWaitingStatus", "api_method_all": "function getCallWaitingStatus(slotId: number, callback: AsyncCallback<CallWaitingStatus>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["le.log(`${caseName} getCallWaitingStatus success,case failed,data:${toString(dat", "ony_CallManager_IMS_getCallWaitingStatus_Promise_0500\n     * @tc.name    Run the", "ony_CallManager_IMS_getCallWaitingStatus_Async_0500\n     * @tc.name    Run the f", "   Run the function getCallWaitingStatus by args slotId SLOT_ID_INVALID by callb", "le.log(`${caseName} getCallWaitingStatus error,case success,error:${toString(err", "ony_CallManager_IMS_getCallWaitingStatus_Promise_0500', 0, function (done) {\n   ", "   Run the function getCallWaitingStatus by args slotId SLOT_ID_INVALID by promi", "ony_CallManager_IMS_getCallWaitingStatus_Async_0500';\n        call.getCallWaitin", "0500';\n        call.getCallWaitingStatus(SLOT_ID_INVALID, (error, data) => {\n   ", "ony_CallManager_IMS_getCallWaitingStatus_Promise_0500';\n        call.getCallWait", "ony_CallManager_IMS_getCallWaitingStatus_Async_0500', 0, function (done) {\n     "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getCallWaitingStatus", "api_method_all": "function getCallWaitingStatus(slotId: number): Promise<CallWaitingStatus>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["0500';\n        call.getCallWaitingStatus(SLOT_ID_INVALID).then(data => {\n       "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "setCallWaiting", "api_method_all": "function setCallWaiting(slotId: number, activate: boolean, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": ["le.log(`${caseName} setCallWaiting success,case failed,data:${toString(dat", "ony_CallManager_IMS_setCallWaiting_Async_0700\n     * @tc.name    Run the f", "ony_CallManager_IMS_setCallWaiting_Promise_0700', 0, function (done) {\n   ", "ony_CallManager_IMS_setCallWaiting_Promise_0700';\n        call.setCallWait", "0700';\n        call.setCallWaiting(SLOT_ID_INVALID, true, (error, data) =>", "le.log(`${caseName} setCallWaiting error,case success,error:${toString(err", "ony_CallManager_IMS_setCallWaiting_Promise_0700\n     * @tc.name    Run the", "ony_CallManager_IMS_setCallWaiting_Async_0700';\n        call.setCallWaitin", "   Run the function setCallWaiting by args slotId SLOT_ID_INVALID activate", "ony_CallManager_IMS_setCallWaiting_Async_0700', 0, function (done) {\n     "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "setCallWaiting", "api_method_all": "function setCallWaiting(slotId: number, activate: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["0700';\n        call.setCallWaiting(SLOT_ID_INVALID, true).then(data => {\n "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "startDTMF", "api_method_all": "function startDTMF(callId: number, character: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["ony_CallManager_IMS_startDTMF_Async_1300\n     * @tc.name    Run funct", "ony_CallManager_IMS_startDTMF_Promise_1300', 0, function (done) {\n   ", "ony_CallManager_IMS_startDTMF_Promise_1300\n     * @tc.name    Dial a ", "       run function startDTMF by args callId BOUNDARY_NUMBER_INT char", "ony_CallManager_IMS_startDTMF_Promise_1300';\n        scenceInCalling(", "d;\n            call.startDTMF(BOUNDARY_NUMBER_INT, SENT_STRING_C).the", "1300';\n        call.startDTMF(MINUS_VALUE, SENT_STRING_C, (error) => ", "ame    Run function startDTMF by args callId MINUS_VALUE  character C", "ony_CallManager_IMS_startDTMF_Async_1300', 0, function (done) {\n     ", "ony_CallManager_IMS_startDTMF_Async_1300';\n        call.startDTMF(MIN"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "startDTMF", "api_method_all": "function startDTMF(callId: number, character: string): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "stopDTMF", "api_method_all": "function stopDTMF(callId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["ony_CallManager_IMS_stopDTMF_Async_0100\n      * @tc.name    Run func", "ony_CallManager_IMS_stopDTMF_Promise_0100';\n        call.stopDTMF(BO", "ony_CallManager_IMS_stopDTMF_Promise_0100\n     * @tc.name    Run fun", "ame    Run function stopDTMF by args callId BOUNDARY_NUMBER_INT by p", "ame    Run function stopDTMF by args callId CALL_ID_NOT_EXIST  by ca", "0100';\n        call.stopDTMF(CALL_ID_NOT_EXIST, (error, data) => {\n ", "ony_CallManager_IMS_stopDTMF_Async_0100';\n        call.stopDTMF(CALL", "ony_CallManager_IMS_stopDTMF_Promise_0100', 0, function (done) {\n   ", "ony_CallManager_IMS_stopDTMF_Async_0100', 0, function (done) {\n     "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "stopDTMF", "api_method_all": "function stopDTMF(callId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["0100';\n        call.stopDTMF(BOUNDARY_NUMBER_INT).then(data => {\n   "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isInEmergencyCall", "api_method_all": "function isInEmergencyCall(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["lephony_CallManager_isInEmergencyCall_Promise_0200 dial finish : data = ${dat", "lephony_CallManager_isInEmergencyCall_Promise_0200 dial fail : err = ${err}`)", "lephony_CallManager_isInEmergencyCall_Async_0200', 0, async function (done) {", "               call.isInEmergencyCall((err, data) => {\n                      ", "EE_NUMBER) and call isInEmergencyCall() to determine whether\n     *          ", "lephony_CallManager_isInEmergencyCall_Promise_0200 finish : data = ${data}`);", "lephony_CallManager_isInEmergencyCall_Async_0200 isInEmrgencyCall finish : da", "lephony_CallManager_isInEmergencyCall_Async_0200\n     * @tc.name    Dial an e", "lephony_CallManager_isInEmergencyCall_Promise_0200', 0, async function (done)", "lephony_CallManager_isInEmergencyCall_Promise_0200\n     * @tc.name    Dial an", "r data = await call.isInEmergencyCall();\n                        console.log(", "lephony_CallManager_isInEmergencyCall_Async_0200 isInEmrgencyCall fail : err ", "lephony_CallManager_isInEmergencyCall_Async_0200  dial finish : data = ${data", "lephony_CallManager_isInEmergencyCall_Promise_0200 fail : err = ${err}`);\n   ", "lephony_CallManager_isInEmergencyCall_Async_0200 dial fail : err = ${err}`);\n"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isInEmergencyCall", "api_method_all": "function isInEmergencyCall(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "on", "api_method_all": "function on(type: 'callDetailsChange', callback: Callback<CallAttributeOptions>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "off", "api_method_all": "function off(type: 'callDetailsChange', callback?: Callback<CallAttributeOptions>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 403, "since": 7, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "on", "api_method_all": "function on(type: 'callEventChange', callback: Callback<CallEventOptions>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "off", "api_method_all": "function off(type: 'callEventChange', callback?: Callback<CallEventOptions>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 403, "since": 7, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "on", "api_method_all": "function on(type: 'callDisconnectedCause', callback: Callback<DisconnectedDetails>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 35526, "since": 6, "api_used": "\u662f", "lines": ["\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = '112';\nconst DIAL_", "       this.messageContent = str;\n    }\n}\nclass EmergencyNumbe", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ".conferenceState = conferenceState;\n    }\n}\n\nconst sleep = (ti", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "IDLE\n} from './lib/Const.js';\nimport {toString} from './lib/Ap", "xecute()\n    },\n    onReady() {\n    },\n}\n", "enceInCalling.js';\nconst GETMAIN_CALLID_ERRO = -1;\nconst REJEC", "untNumber, speakerphoneOn, accountId, videoState, startTime,\n ", "45678901234567890;\nconst ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nc", " ERR_SLOT_ID = -1;\nconst SLOTID = 0;\nconst THE_THREE_NUMBER = ", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", "t = 30000;\n        configService.setConfig(this)\n        requi", "ass NumberFormatOptions {\n    constructor (str) {\n        this", "r from '@ohos.telephony.observer';\nimport {describe, afterAll,", "callId, callState, conferenceState) {\n        this.accountNumb", "      this.speakerphoneOn = speakerphoneOn;\n        this.accou", "ss RejectMessageOptions {\n    constructor (str) {\n        this", "rphoneOn = speakerphoneOn;\n        this.accountId = accountId;", "TYPE_ERR_CALL = 3;\nconst TIME_OUT = 20000;\nconst WAITING_TIME ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "getDefaultService('config')\n        this.timeout = 30000;\n    ", "      console.info('onShow finish')\n        const core = Core.", "ssageOptions {\n    constructor (str) {\n        this.messageCon", "xport default {\n    onCreate() {\n        console.info('TestApp", "EE_NUMBER = '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OU", "nceState;\n    }\n}\n\nconst sleep = (time) => {\n    return new Pr", "umberOptions {\n    constructor (num) {\n        this.slotId = n", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "l from '@ohos.telephony.call';\nimport observer from '@ohos.tel", "w finish')\n        const core = Core.getInstance()\n        con", "nageImsCall', function () {\n    beforeAll(async function (done", "Create() {\n        console.info('TestApplication onCreate');\n ", " EmergencyNumberOptions {\n    constructor (num) {\n        this", "ormatOptions {\n    constructor (str) {\n        this.countryCod", "onShow() {\n        console.info('onShow finish')\n        const", "_CALLID_ERRO = -1;\nconst REJECT_MESSAGE_STR = 'Hi,hello?';\ncon", " TIME_OUT = 20000;\nconst WAITING_TIME = 200;\n\nlet callId = nul", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "fo('TestApplication onDestroy');\n    }\n};\n", "  configService.setConfig(this)\n        require('../../../test", "STR = 'Hi,hello?';\nconst REJECT_MESSAGE_NUM = 1234567890123456", "ibuteOptions {\n    constructor (accountNumber, speakerphoneOn,", "ss CallAttributeOptions {\n    constructor (accountNumber, spea", "ore.init()\n        const configService = core.getDefaultServic", "tate;\n        this.conferenceState = conferenceState;\n    }\n}\n", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["ConnectionJsunit.test.ets", "Utils.ets", "Stability_test.js", "SimJsunit.test.ets", "Flex.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "WebSocketJsunit.test.ets", "RowSplit.ets", "NetworkSearchErrors.test.js", "RadioSecondJsunit.test.ets", "Slider.ets", "ObjectInterface_test.js", "RadioJsunit.test.ets", "Qrcode.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "Counter.ets", "ScenceLimitCalling.js", "Stack.ets", "Span.ets", "List.test.ets", "Contacts_test.js", "ContactCard_test.js", "HttpJsunit.test.ets", "Progress.ets", "app.js", "Panel.ets", "ConnectionSecondJsUnit.test.ets", "Blank.ets", "Badge.ets", "recovery_test.js", "common.js", "Scroll.ets", "ConvertOptionsJsunit.test.ets", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "ContacterJsunit.ets", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "ApiToPromise.js", "Rating.ets", "Voicemail_test.js", "SimManager.test.js", "ScenceTransfer.js", "GridContainer.ets", "app.ets", "index.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Groups_test.js", "Const.js", "ApiToPromisePerfomance.js", "Divider.ets", "index.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "Image.ets", "ApiToPromiseReliability.js", "Column.ets", "ColumnSplit.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "off", "api_method_all": "function off(type: 'callDisconnectedCause', callback?: Callback<DisconnectedDetails>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 403, "since": 7, "api_used": "\u662f", "lines": ["     sm: { span: 2, offset: 0 },\n                  md: { span: ", " {\n        observer.off('callStateChange');\n        callDetails", "     md: { span: 2, offset: 0 },\n                  lg: { span: ", "     lg: { span: 2, offset: 0 }\n                })\n            ", "           observer.off('callStateChange');\n                han", "       .offset(this.offset)\n        .flexBasis(this.flexBasis)\n", "angeOff');\n    call.off('callDetailsChange');\n}\n\nlet reachState", "sole.info(` current offset is ${xOffset} ${yOffset}`)\n      })\n", "           observer.off('callStateChange');\n                   ", " y: \"50\" }\n  @State offset: offset<{\n    x: string,\n    y: stri", " }\n  @State offset: offset<{\n    x: string,\n    y: string\n  }> ", "arkAnchor)\n        .offset(this.offset)\n        .flexBasis(this", "     xs: { span: 6, offset: 0 },\n                  sm: { span: ", "nk')\n      Text('on/off').fontSize(18).height(60)\n    }\n    .ke"], "files": ["HttpRequestJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "CallJsunit.test.ets", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "ObserverJsunit.test.ets", "StatisticsJsunit.test.ets", "GridContainer.ets", "Blank.ets", "CallManageAll.test.js", "Scroll.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isNewCallAllowed", "api_method_all": "function isNewCallAllowed(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["lephony_CallManager_isNewCallAllowed_Async_0200', 0, function (done) {\n     ", "lephony_CallManager_isNewCallAllowed_Promise_0200\n     * @tc.name    Unwante", "e ,run the function isNewCallAllowed by promise ,the function return true\n  ", "lephony_CallManager_isNewCallAllowed_Promise_0200';\n        call.isNewCallAl", "e ,run the function isNewCallAllowed by callback ,the function return true\n ", "lephony_CallManager_isNewCallAllowed_Async_0200';\n        call.isNewCallAllo", "0200';\n        call.isNewCallAllowed(function (error, data) {\n            if", "lephony_CallManager_isNewCallAllowed_Promise_0200', 0, function (done) {\n   ", "lephony_CallManager_isNewCallAllowed_Async_0200\n     * @tc.name    Unwanted "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isNewCallAllowed", "api_method_all": "function isNewCallAllowed(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0200';\n        call.isNewCallAllowed()\n            .then(data => {\n         "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "separateConference", "api_method_all": "function separateConference(callId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["le.log(`${caseName} separateConference success,case failed,data:${toString(dat", "ony_CallManager_IMS_separateConference_Promise_0100', 0, function (done) {\n   ", "0100';\n        call.separateConference(CALL_ID_NOT_EXIST, (error, data) => {\n ", "ony_CallManager_IMS_separateConference_Promise_0100';\n        call.separateCon", "le.log(`${caseName} separateConference ${CALL_ID_NOT_EXIST} error,case success", "ony_CallManager_IMS_separateConference_Async_0100', 0, function (done) {\n     ", "ony_CallManager_IMS_separateConference_Async_0100';\n        call.separateConfe"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "separateConference", "api_method_all": "function separateConference(callId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0100';\n        call.separateConference(CALL_ID_NOT_EXIST).then(data => {\n     "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getCallRestrictionStatus", "api_method_all": "function getCallRestrictionStatus(slotId: number, type: CallRestrictionType, callback: AsyncCallback<RestrictionStatus>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["ony_CallManager_IMS_getCallRestrictionStatus_Promise_1100', 0, function (done) {\n   ", "ame    Run function getCallRestrictionStatus by promise by arg slotId (that is at SL", "ony_CallManager_IMS_getCallRestrictionStatus_Async_1100\n     * @tc.name    Run funct", "ony_CallManager_IMS_getCallRestrictionStatus_Promise_1100';\n        call.getCallRest", "ony_CallManager_IMS_getCallRestrictionStatus_Promise_1100\n     * @tc.name    Run fun", "ony_CallManager_IMS_getCallRestrictionStatus_Async_1100', 0, function (done) {\n     ", "1100';\n        call.getCallRestrictionStatus(SLOT_ID_INVALID, RESTRICTION_TYPE_ROAMI", "ame    Run function getCallRestrictionStatus by callback by arg slotId\n     *       ", "ony_CallManager_IMS_getCallRestrictionStatus_Async_1100';\n        call.getCallRestri"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getCallRestrictionStatus", "api_method_all": "function getCallRestrictionStatus(slotId: number, type: CallRestrictionType): Promise<RestrictionStatus>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "setCallRestriction", "api_method_all": "function setCallRestriction(slotId: number, info: CallRestrictionInfo, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["ony_CallManager_IMS_setCallRestriction_Async_1200\n     * @tc.name    Run funct", "1200';\n        call.setCallRestriction(SLOT_ID_INVALID, {\n            type:RES", "de}`);\n        call.setCallRestriction(slotId ? slotId : DEFAULT_SLOT_ID, {\n  ", "pe}`);\n        call.setCallRestriction(slotId ? slotId : DEFAULT_SLOT_ID, {\n  ", "le.log(`${caseName} setCallRestriction success, data:${toString(data)}`);\n    ", "ony_CallManager_IMS_setCallRestriction_Async_1200';\n        call.setCallRestri", "ame    Run function setCallRestriction by callback\n     *             by arg s", "ony_CallManager_IMS_setCallRestriction_Promise_1200', 0, function (done) {\n   ", "ony_CallManager_IMS_setCallRestriction_Promise_1200';\n        call.setCallRest", "le.log(`${caseName} setCallRestriction error,error:${toString(error)}`);\n     ", "ony_CallManager_IMS_setCallRestriction_Async_1200', 0, function (done) {\n     ", "ame    Run function setCallRestriction by promise\n     *             by arg sl", "ony_CallManager_IMS_setCallRestriction_Promise_1200\n     * @tc.name    Run fun"], "files": ["CallManageAll.test.js", "ScenceLimitCalling.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "setCallRestriction", "api_method_all": "function setCallRestriction(slotId: number, info: CallRestrictionInfo): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getCallTransferInfo", "api_method_all": "function getCallTransferInfo(slotId: number, type: CallTransferType, callback: AsyncCallback<CallTransferResult>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["ony_CallManager_IMS_getCallTransferInfo_Promise_1500';\n        try {\n          ", "1500';\n        call.getCallTransferInfo(SLOT_ID_INVALID, TRANSFER_TYPE_UNCONDIT", "r data = await call.getCallTransferInfo(SLOT_ID_INVALID, TRANSFER_TYPE_NOT_REAC", "ony_CallManager_IMS_getCallTransferInfo_Async_1500\n     * @tc.name    Run funct", "ony_CallManager_IMS_getCallTransferInfo_Async_1500', 0, async function (done) {", "le.log(`${caseName} getCallTransferInfo success,case failed,data:${toString(dat", "ony_CallManager_IMS_getCallTransferInfo_Promise_1500\n     * @tc.name    Run fun", "ony_CallManager_IMS_getCallTransferInfo_Promise_1500', 0, async function (done)", "ame    Run function getCallTransferInfo by args slotId SLOT_ID_INVALID,\n     * ", "ony_CallManager_IMS_getCallTransferInfo_Async_1500';\n        call.getCallTransf", "le.log(`${caseName} getCallTransferInfo error, case success. error:${toString(e"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "getCallTransferInfo", "api_method_all": "function getCallTransferInfo(slotId: number, type: CallTransferType): Promise<CallTransferResult>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "setCallTransfer", "api_method_all": "function setCallTransfer(slotId: number, info: CallTransferInfo, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": [") => {\n        call.setCallTransfer(0, {\n            settingType,\n         ", "t data = await call.setCallTransfer(SLOT_ID_INVALID, {\n                sett", "ony_CallManager_IMS_setCallTransfer_Async_1300';\n        call.setCallTransf", "ony_CallManager_IMS_setCallTransfer_Promise_1300\n     * @tc.name    Run fun", "ony_CallManager_IMS_setCallTransfer_Async_1300\n     * @tc.name    Run funct", "ony_CallManager_IMS_setCallTransfer_Promise_1300', 0, async function (done)", "ony_CallManager_IMS_setCallTransfer_Async_1300', 0, async function (done) {", "ony_CallManager_IMS_setCallTransfer_Promise_1300';\n        try {\n          ", "1300';\n        call.setCallTransfer(SLOT_ID_INVALID, {\n            settingT", "ame    Run function setCallTransfer by args slotId SLOT_ID_INVALID,settingT"], "files": ["CallManageAll.test.js", "ScenceTransfer.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "setCallTransfer", "api_method_all": "function setCallTransfer(slotId: number, info: CallTransferInfo): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isRinging", "api_method_all": "function isRinging(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["lephony_CallManager_isRinging_Async_0100';\n        call.isRinging(fun", "lephony_CallManager_isRinging_Promise_0100';\n        call.isRinging()", "e ,run the function isRinging by promise ,the function return false\n ", "0100';\n        call.isRinging(function (error, data) {\n            if", "e ,run the function isRinging by callback ,the function return false\n", "lephony_CallManager_isRinging_Promise_0100', 0, function (done) {\n   ", "lephony_CallManager_isRinging_Async_0100', 0, function (done) {\n     ", "lephony_CallManager_isRinging_Promise_0100\n     * @tc.name    Unwante", "lephony_CallManager_isRinging_Async_0100\n     * @tc.name    Unwanted "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isRinging", "api_method_all": "function isRinging(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0100';\n        call.isRinging()\n            .then(data => {\n         "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "setMuted", "api_method_all": "function setMuted(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["lephony_CallManager_setMuted_Async_0300', 0, function (done) {\n     ", "lephony_CallManager_setMuted_Async_0300\n     * @tc.name    Unwanted ", "lephony_CallManager_setMuted_Async_0300';\n        call.setMuted((err", " state,run function setMuted by promise,the function return error\n  ", "lephony_CallManager_setMuted_Promise_0300';\n        call.setMuted()\n", "lephony_CallManager_setMuted_Promise_0300\n     * @tc.name    Unwante", "lephony_CallManager_setMuted_Promise_0300', 0, function (done) {\n   ", "0300';\n        call.setMuted((error, data) => {\n            if (erro", " state,run function setMuted by callback,the function return error\n "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "setMuted", "api_method_all": "function setMuted(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0300';\n        call.setMuted()\n            .then(data => {\n         "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "cancelMuted", "api_method_all": "function cancelMuted(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["lephony_CallManager_cancelMuted_Promise_0300\n     * @tc.name    Unwante", "lephony_CallManager_cancelMuted_Promise_0300', 0, function (done) {\n   ", "0300';\n        call.cancelMuted((error, data) => {\n            if (erro", "lephony_CallManager_cancelMuted_Async_0300', 0, function (done) {\n     ", " state,run function cancelMuted by callback,the function return error\n ", " state,run function cancelMuted by promise,the function return error\n  ", "lephony_CallManager_cancelMuted_Async_0300\n     * @tc.name    Unwanted ", "lephony_CallManager_cancelMuted_Promise_0300';\n        call.cancelMuted", "lephony_CallManager_cancelMuted_Async_0300';\n        call.cancelMuted(("], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "cancelMuted", "api_method_all": "function cancelMuted(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0300';\n        call.cancelMuted()\n            .then(data => {\n         "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "setAudioDevice", "api_method_all": "function setAudioDevice(device: AudioDevice, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["lephony_CallManager_setAudioDevice_Async_0500';\n        call.setAudioDevic", "lephony_CallManager_setAudioDevice_Promise_0500', 0, function (done) {\n   ", " state,run function setAudioDevice by callback and by arg DEVICE_EARPIECE,", "lephony_CallManager_setAudioDevice_Async_0500', 0, function (done) {\n     ", "lephony_CallManager_setAudioDevice_Promise_0500';\n        call.setAudioDev", " state,run function setAudioDevice by promise and by arg DEVICE_EARPIECE,\n", "lephony_CallManager_setAudioDevice_Async_0500\n     * @tc.name    Unwanted ", "0500';\n        call.setAudioDevice(DEVICE_EARPIECE, (error, data) => {\n   ", "lephony_CallManager_setAudioDevice_Promise_0500\n     * @tc.name    Unwante"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "setAudioDevice", "api_method_all": "function setAudioDevice(device: AudioDevice): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0500';\n        call.setAudioDevice(DEVICE_EARPIECE)\n            .then(data"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "joinConference", "api_method_all": "function joinConference(mainCallId: number, callNumberList: Array<string>, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["ony_CallManager_IMS_joinConference_Promise_0100';\n        call.joinConfere", "le.log(`${caseName} joinConference success,case failed,data:${toString(dat", "ony_CallManager_IMS_joinConference_Async_0100', 0, function (done) {\n     ", "ony_CallManager_IMS_joinConference_Async_0100';\n        call.joinConferenc", "le.log(`${caseName} joinConference ${CALL_ID_NOT_EXIST} error,case success", "0100';\n        call.joinConference(CALL_ID_NOT_EXIST, PHONE_LIST2, (error,", "ony_CallManager_IMS_joinConference_Promise_0100', 0, function (done) {\n   "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "joinConference", "api_method_all": "function joinConference(mainCallId: number, callNumberList: Array<string>): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0100';\n        call.joinConference(CALL_ID_NOT_EXIST, PHONE_LIST2).then(da"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "updateImsCallMode", "api_method_all": "function updateImsCallMode(callId: number, mode: ImsCallMode, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["le.log(`${caseName} updateImsCallMode2 error,case success,error:${toString(er", "ony_CallManager_IMS_updateImsCallMode_Promise_0700';\n        call.updateImsCa", "ony_CallManager_IMS_updateImsCallMode_Async_0700\n     * @tc.name    Run funct", "ony_CallManager_IMS_updateImsCallMode_Promise_0700\n     * @tc.name    Run fun", "ony_CallManager_IMS_updateImsCallMode_Promise_0700', 0, async function (done)", "ony_CallManager_IMS_updateImsCallMode_Async_0700';\n        call.updateImsCall", "ony_CallManager_IMS_updateImsCallMode_Async_0700', 0, async function (done) {", "ame    Run function updateImsCallMode by args callId CALL_ID_NOT_EXIST,\n     ", "le.log(`${caseName} updateImsCallMode2 success,case failed,data:${toString(da", "le.log(`${caseName} updateImsCallMode success,case failed,data:${toString(dat", "0700';\n        call.updateImsCallMode(CALL_ID_NOT_EXIST, CALL_MODE_SEND_RECEI", "le.log(`${caseName} updateImsCallMode error,case success,error:${toString(err"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "updateImsCallMode", "api_method_all": "function updateImsCallMode(callId: number, mode: ImsCallMode): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "enableImsSwitch", "api_method_all": "function enableImsSwitch(slotId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["ony_CallManager_IMS_enableImsSwitch_Promise_0400\n     * @tc.name    Run the", "le.log(`${caseName} enableImsSwitch success,case failed,data:${toString(dat", "ony_CallManager_IMS_enableImsSwitch_Async_0400\n     * @tc.name    Run the f", "   Run the function enableImsSwitch by args callId SLOT_ID_INVALID by callb", "ony_CallManager_IMS_enableImsSwitch_Async_0400', 0, function (done) {\n     ", "le.log(`${caseName} enableImsSwitch error,case success,error:${toString(err", "ony_CallManager_IMS_enableImsSwitch_Async_0400';\n        call.enableImsSwit", "lephony_CallManager enableImsSwitch success');\n            await call.setCa", "ony_CallManager_IMS_enableImsSwitch_Promise_0400', 0, function (done) {\n   ", "   Run the function enableImsSwitch by args callId SLOT_ID_INVALID by promi", "ony_CallManager_IMS_enableImsSwitch_Promise_0400';\n        call.enableImsSw", "0400';\n        call.enableImsSwitch(SLOT_ID_INVALID, (error, data) => {\n   ", "         await call.enableImsSwitch(DEFAULT_SLOT_ID);\n            console.l", "llPreferenceMode or enableImsSwitch error,error:${\n                toString"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "enableImsSwitch", "api_method_all": "function enableImsSwitch(slotId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0400';\n        call.enableImsSwitch(SLOT_ID_INVALID).then(data => {\n       "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "disableImsSwitch", "api_method_all": "function disableImsSwitch(slotId: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["ony_CallManager_IMS_disableImsSwitch_Async_0600\n     * @tc.name    Run the f", "0600';\n        call.disableImsSwitch(SLOT_ID_INVALID, (error, data) => {\n   ", "ony_CallManager_IMS_disableImsSwitch_Promise_0600';\n        call.disableImsS", "le.log(`${caseName} disableImsSwitch success,case failed,data:${toString(dat", "   Run the function disableImsSwitch by args callId SLOT_ID_INVALID by promi", "ony_CallManager_IMS_disableImsSwitch_Async_0600';\n        call.disableImsSwi", "ony_CallManager_IMS_disableImsSwitch_Async_0600', 0, function (done) {\n     ", "le.log(`${caseName} disableImsSwitch error,case success,error:${toString(err", "ony_CallManager_IMS_disableImsSwitch_Promise_0600', 0, function (done) {\n   ", "ony_CallManager_IMS_disableImsSwitch_Promise_0600\n     * @tc.name    Run the", "   Run the function disableImsSwitch by args callId SLOT_ID_INVALID by callb"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "disableImsSwitch", "api_method_all": "function disableImsSwitch(slotId: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0600';\n        call.disableImsSwitch(SLOT_ID_INVALID).then(data => {\n       "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isImsSwitchEnabled", "api_method_all": "function isImsSwitchEnabled(slotId: number, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["ony_CallManager_IMS_isImsSwitchEnabled_Async_0500\n     * @tc.name    Run the f", "   Run the function isImsSwitchEnabled by args callId SLOT_ID_INVALID by promi", "0500';\n        call.isImsSwitchEnabled(SLOT_ID_INVALID, (error, data) => {\n   ", "ony_CallManager_IMS_isImsSwitchEnabled_Promise_0500', 0, function (done) {\n   ", "le.log(`${caseName} isImsSwitchEnabled error,case success,error:${toString(err", "le.log(`${caseName} isImsSwitchEnabled success,case failed,data:${toString(dat", "ony_CallManager_IMS_isImsSwitchEnabled_Async_0500';\n        call.isImsSwitchEn", "   Run the function isImsSwitchEnabled by args callId SLOT_ID_INVALID by callb", "ony_CallManager_IMS_isImsSwitchEnabled_Async_0500', 0, function (done) {\n     ", "ony_CallManager_IMS_isImsSwitchEnabled_Promise_0500';\n        call.isImsSwitch", "ony_CallManager_IMS_isImsSwitchEnabled_Promise_0500\n     * @tc.name    Run the"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "call", "api_method_name": "isImsSwitchEnabled", "api_method_all": "function isImsSwitchEnabled(slotId: number): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["0500';\n        call.isImsSwitchEnabled(SLOT_ID_INVALID).then(data => {\n       "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImsCallMode", "api_method_all": "export enum ImsCallMode {\n    CALL_MODE_AUDIO_ONLY = 0,\n    CALL_MODE_SEND_ONLY,\n    CALL_MODE_RECEIVE_ONLY,\n    CALL_MODE_SEND_RECEIVE,\n    CALL_MODE_VIDEO_PAUSED,\n  }", "api_method_name": "ImsCallMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": ["llManager_IMS_updateImsCallMode_Async_0700', 0, asy", "(`${caseName} updateImsCallMode2 success,case faile", "llManager_IMS_updateImsCallMode_Promise_0700', 0, a", "(`${caseName} updateImsCallMode success,case failed", "llManager_IMS_updateImsCallMode_Async_0700';\n      ", "llManager_IMS_updateImsCallMode_Promise_0700\n     *", "llManager_IMS_updateImsCallMode_Async_0700\n     * @", "(`${caseName} updateImsCallMode2 error,case success", " Run function updateImsCallMode by args callId CALL", "\n        call.updateImsCallMode(CALL_ID_NOT_EXIST, ", "(`${caseName} updateImsCallMode error,case success,", "llManager_IMS_updateImsCallMode_Promise_0700';\n    "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImsCallMode", "api_method_name": "CALL_MODE_AUDIO_ONLY", "api_method_all": "CALL_MODE_AUDIO_ONLY = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["6&#';\n\nexport const CALL_MODE_AUDIO_ONLY = 0;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImsCallMode", "api_method_name": "CALL_MODE_SEND_ONLY", "api_method_all": "CALL_MODE_SEND_ONLY,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["E = 3;\nexport const CALL_MODE_SEND_ONLY = 1;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImsCallMode", "api_method_name": "CALL_MODE_RECEIVE_ONLY", "api_method_all": "CALL_MODE_RECEIVE_ONLY,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["Y = 1;\nexport const CALL_MODE_RECEIVE_ONLY = 2;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImsCallMode", "api_method_name": "CALL_MODE_SEND_RECEIVE", "api_method_all": "CALL_MODE_SEND_RECEIVE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["(CALL_ID_NOT_EXIST, CALL_MODE_SEND_RECEIVE, (error, data) => {", "Y = 0;\nexport const CALL_MODE_SEND_RECEIVE = 3;\nexport const C", "(CALL_ID_NOT_EXIST, CALL_MODE_SEND_RECEIVE).then(data => {\n   ", " *             mode CALL_MODE_SEND_RECEIVE by callback,the fun", "2,\n    RTT_MSG,\n    CALL_MODE_SEND_RECEIVE,\n    POS_700,\n    P", " *             mode CALL_MODE_SEND_RECEIVE by promise,\n     * "], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImsCallMode", "api_method_name": "CALL_MODE_VIDEO_PAUSED", "api_method_all": "CALL_MODE_VIDEO_PAUSED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["Y = 2;\nexport const CALL_MODE_VIDEO_PAUSED = 4;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioDevice", "api_method_all": "export enum AudioDevice {\n    DEVICE_MIC,\n    DEVICE_SPEAKER,\n    DEVICE_WIRED_HEADSET,\n    DEVICE_BLUETOOTH_SCO\n  }", "api_method_name": "AudioDevice", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["hony_CallManager_setAudioDevice_Async_0500\n     * @", "hony_CallManager_setAudioDevice_Promise_0500\n     *", "hony_CallManager_setAudioDevice_Async_0500';\n      ", "ate,run function setAudioDevice by promise and by a", "ate,run function setAudioDevice by callback and by ", "e = 'Telephony_Call_AudioDevice_DEVICE_MIC';\n      ", "0';\n        call.setAudioDevice(DEVICE_EARPIECE, (e", "hony_CallManager_setAudioDevice_Promise_0500';\n    ", " * @tc.name    Enum AudioDevice\n       * @tc.desc  ", "hony_CallManager_setAudioDevice_Async_0500', 0, fun", " it(\"Telephony_Call_AudioDevice_DEVICE_MIC\",0,async", "ber  Telephony_Call_AudioDevice_DEVICE_MIC\n       *", "0';\n        call.setAudioDevice(DEVICE_EARPIECE)\n  ", "hony_CallManager_setAudioDevice_Promise_0500', 0, f", "0).assertEqual(call.AudioDevice.DEVICE_MIC);\n      "], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioDevice", "api_method_name": "DEVICE_MIC", "api_method_all": "DEVICE_MIC,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["ny_Call_AudioDevice_DEVICE_MIC\n       * @tc.name  ", "al(call.AudioDevice.DEVICE_MIC);\n      console.log", "ny_Call_AudioDevice_DEVICE_MIC';\n      console.log", "ny_Call_AudioDevice_DEVICE_MIC\",0,async function(d"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioDevice", "api_method_name": "DEVICE_SPEAKER", "api_method_all": "DEVICE_SPEAKER,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["E = 0;\nexport const DEVICE_SPEAKER = 1;\nexport const D"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AudioDevice", "api_method_name": "DEVICE_WIRED_HEADSET", "api_method_all": "DEVICE_WIRED_HEADSET,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["R = 1;\nexport const DEVICE_WIRED_HEADSET = 2;\nexport const D"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionType", "api_method_all": "export enum CallRestrictionType {\n    RESTRICTION_TYPE_ALL_INCOMING = 0,\n    RESTRICTION_TYPE_ALL_OUTGOING,\n    RESTRICTION_TYPE_INTERNATIONAL,\n    RESTRICTION_TYPE_INTERNATIONAL_EXCLUDING_HOME,\n    RESTRICTION_TYPE_ROAMING_INCOMING,\n    RESTRICTION_TYPE_ALL_CALLS,\n    RESTRICTION_TYPE_OUTGOING_SERVICES,\n    RESTRICTION_TYPE_INCOMING_SERVICES,\n  }", "api_method_name": "CallRestrictionType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["\n     *             CallRestrictionType RESTRICTION_TYPE_RO", " is SLOT_ID_INVALID CallRestrictionType RESTRICTION_TYPE_RO"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionType", "api_method_name": "RESTRICTION_TYPE_ALL_INCOMING", "api_method_all": "RESTRICTION_TYPE_ALL_INCOMING = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": [" {\n            type:RESTRICTION_TYPE_ALL_INCOMING,\n            passwo", "LOT_ID_INVALID type RESTRICTION_TYPE_ALL_INCOMING password RIGHT_PASS", "RIGHT_PASSWORD,\n    RESTRICTION_TYPE_ALL_INCOMING,\n    TRANSFER_TYPE_", " = 1;\n\nexport const RESTRICTION_TYPE_ALL_INCOMING = 0;\nexport const R"], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionType", "api_method_name": "RESTRICTION_TYPE_ALL_OUTGOING", "api_method_all": "RESTRICTION_TYPE_ALL_OUTGOING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["G = 0;\nexport const RESTRICTION_TYPE_ALL_OUTGOING = 1;\nexport const R"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionType", "api_method_name": "RESTRICTION_TYPE_INTERNATIONAL", "api_method_all": "RESTRICTION_TYPE_INTERNATIONAL,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["L = 2;\nexport const RESTRICTION_TYPE_INTERNATIONAL_EXCLUDING_HOME = 3;", "G = 1;\nexport const RESTRICTION_TYPE_INTERNATIONAL = 2;\nexport const R"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionType", "api_method_name": "RESTRICTION_TYPE_INTERNATIONAL_EXCLUDING_HOME", "api_method_all": "RESTRICTION_TYPE_INTERNATIONAL_EXCLUDING_HOME,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["L = 2;\nexport const RESTRICTION_TYPE_INTERNATIONAL_EXCLUDING_HOME = 3;\nexport const R"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionType", "api_method_name": "RESTRICTION_TYPE_ROAMING_INCOMING", "api_method_all": "RESTRICTION_TYPE_ROAMING_INCOMING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["us(SLOT_ID_INVALID, RESTRICTION_TYPE_ROAMING_INCOMING)\n            .then(", "   POS_Z_ERROR,\n    RESTRICTION_TYPE_ROAMING_INCOMING,\n    RESTRICTION_MO", "us(SLOT_ID_INVALID, RESTRICTION_TYPE_ROAMING_INCOMING, (error, data) => {", "E = 3;\nexport const RESTRICTION_TYPE_ROAMING_INCOMING = 4;\nexport const R", "CallRestrictionType RESTRICTION_TYPE_ROAMING_INCOMING ,\n     *           "], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionType", "api_method_name": "RESTRICTION_TYPE_ALL_CALLS", "api_method_all": "RESTRICTION_TYPE_ALL_CALLS,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["S = 6;\nexport const RESTRICTION_TYPE_ALL_CALLS = 5;\nexport const R"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionType", "api_method_name": "RESTRICTION_TYPE_OUTGOING_SERVICES", "api_method_all": "RESTRICTION_TYPE_OUTGOING_SERVICES,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["S = 7;\nexport const RESTRICTION_TYPE_OUTGOING_SERVICES = 6;\nexport const R"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionType", "api_method_name": "RESTRICTION_TYPE_INCOMING_SERVICES", "api_method_all": "RESTRICTION_TYPE_INCOMING_SERVICES,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["G = 4;\nexport const RESTRICTION_TYPE_INCOMING_SERVICES = 7;\nexport const R"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferInfo", "api_method_all": "export interface CallTransferInfo {\n    transferNum: string;\n    type: CallTransferType;\n    settingType: CallTransferSettingType;\n  }", "api_method_name": "CallTransferInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["_CallManager_IMS_getCallTransferInfo_Async_1500', 0, asy", "ber  Telephony_Call_CallTransferInfo_Type\n       * @tc.n", "_CallManager_IMS_getCallTransferInfo_Promise_1500';\n    ", "ata = await call.getCallTransferInfo(SLOT_ID_INVALID, TR", "e = 'Telephony_Call_CallTransferInfo_Type';\n      consol", "log(`${caseName} getCallTransferInfo error, case success", "_CallManager_IMS_getCallTransferInfo_Promise_1500\n     *", "0';\n        call.getCallTransferInfo(SLOT_ID_INVALID, TR", "_CallManager_IMS_getCallTransferInfo_Async_1500\n     * @", "_CallManager_IMS_getCallTransferInfo_Async_1500';\n      ", "_CallManager_IMS_getCallTransferInfo_Promise_1500', 0, a", "    Run function getCallTransferInfo by args slotId SLOT", " it('Telephony_Call_CallTransferInfo_Type', 0, function ", "c.name    Interface CallTransferInfo\n       * @tc.desc  ", "log(`${caseName} getCallTransferInfo success,case failed"], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferInfo", "api_method_name": "transferNum", "api_method_all": "transferNum: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["_TYPE_UNCONDITIONAL,transferNum PHONE_NUMBER_AREA_L", "NSFER_TYPE_NO_REPLY,transferNum PHONE_NUMBER_LENGTH", "_REPLY,\n            transferNum:PHONE_NUMBER_LENGTH", "callTransferInfo = {transferNum:'10000000001', type", "AL,\n                transferNum:PHONE_NUMBER_AREA_L"], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferInfo", "api_method_name": "type", "api_method_all": "type: CallTransferType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 843, "since": 7, "api_used": "\u662f", "lines": ["itCancel (caseName, type, slotId) {\n    retu", "\n     *             type TRANSFER_TYPE_NO_RE", "ng (data) {\n    if (typeof data === 'object'", "tId SLOT_ID_INVALID type RESTRICTION_TYPE_AL", "\n     *             type TRANSFER_TYPE_NOT_R", " });\n    }\n\n    if (typeof args[args.length ", "LE,\n                type:TRANSFER_TYPE_UNCON", "     .decoration({ \"type\": TextDecorationTyp", "ey('panel2')\n      .type(PanelType.Minibar)\n", "le\")\n      }\n      .type(ButtonType.Capsule)", "ISABLE,\n            type:TRANSFER_TYPE_NO_RE", "ngType,\n            type,\n            phoneN", "tCalling (caseName, type, mode, slotId) {\n  ", "get: \"pages/index\", type: NavigationType.Rep", "\"3.Normal\")\n      }.type(ButtonType.Normal)\n", "\n     *             type TRANSFER_TYPE_UNCON", " scenceLimitCalling type:${type},mode:${mode", "lor: Color\n  }> = { type: TextDecorationType", "LimitCalling type:${type},mode:${mode}`);\n  ", " 40, 20], max: 100, type: DataPanelType.Line", "ALID, {\n            type:RESTRICTION_TYPE_AL", "ef = Object.getPrototypeOf(global) || global", " 40, 20], max: 100, type: DataPanelType.Circ", "} scenceLimitCancel type:${type}`);\n        ", "n: decoration<{\n    type: TextDecorationType", "t args = Array.prototype.slice.call(argument", "T_ID, {\n            type,\n            mode:R", "get: \"pages/index\", type: NavigationType.Bac", "key('panel')\n      .type(PanelType.Foldable)", "      .decoration({ type: TextDecorationType", "Button('1.value', { type: ButtonType.Circle,", "eName, settingType, type, phoneNumber) {\n   ", "get the data stream type and\n     *         ", "ey('panel3')\n      .type(PanelType.Temporary", "eLimitCancel type:${type}`);\n        call.se", "      }\n        if (typeof func !== 'functio", "get: \"pages/index\", type: NavigationType.Pus", ".getTime();\n    if (typeof args[args.length ", "T_ID, {\n            type,\n            mode,\n"], "files": ["Utils.ets", "Stability_test.js", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "ScenceLimitCalling.js", "Span.ets", "Contacts_test.js", "ContactCard_test.js", "Panel.ets", "ConvertOptionsJsunit.test.ets", "common.js", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "SimManager.test.js", "ApiToPromise.js", "Voicemail_test.js", "ScenceTransfer.js", "index.js", "CallManageAll.test.js", "SmsMmsError.test.js", "ApiToPromisePerfomance.js", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "ApiToPromiseReliability.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferInfo", "api_method_name": "settingType", "api_method_all": "settingType: CallTransferSettingType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["er(0, {\n            settingType,\n            type,\n", ", {\n                settingType:CALL_TRANSFER_DISAB", "00000001', type: 2, settingType: 1}\n      expect(ca", "rCalling (caseName, settingType, type, phoneNumber)", "ALID, {\n            settingType:CALL_TRANSFER_DISAB", "tId SLOT_ID_INVALID,settingType CALL_TRANSFER_DISAB"], "files": ["CallManageAll.test.js", "ScenceTransfer.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferType", "api_method_all": "export enum CallTransferType {\n    TRANSFER_TYPE_UNCONDITIONAL = 0,\n    TRANSFER_TYPE_BUSY,\n    TRANSFER_TYPE_NO_REPLY,\n    TRANSFER_TYPE_NOT_REACHABLE,\n  }", "api_method_name": "CallTransferType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["1).assertEqual(call.CallTransferType.TRANSFER_TYPE_BUSY)", " * @tc.name    Enum CallTransferType\n       * @tc.desc  ", "ber  Telephony_Call_CallTransferType_TRANSFER_TYPE_BUSY\n", " it(\"Telephony_Call_CallTransferType_TRANSFER_TYPE_BUSY\"", "e = 'Telephony_Call_CallTransferType_TRANSFER_TYPE_BUSY'"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferType", "api_method_name": "TRANSFER_TYPE_UNCONDITIONAL", "api_method_all": "TRANSFER_TYPE_UNCONDITIONAL = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["fo(SLOT_ID_INVALID, TRANSFER_TYPE_UNCONDITIONAL, (error, data) => {", "               type:TRANSFER_TYPE_UNCONDITIONAL,\n                tr", "_NOT_REACHABLE,\n    TRANSFER_TYPE_UNCONDITIONAL,\n    PHONE_NUMBER_A", " *             type TRANSFER_TYPE_UNCONDITIONAL  by callback,\n     ", "\uff09 tran\nexport const TRANSFER_TYPE_UNCONDITIONAL = 0; // uncondition", " *             type TRANSFER_TYPE_UNCONDITIONAL,transferNum PHONE_N"], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferType", "api_method_name": "TRANSFER_TYPE_BUSY", "api_method_all": "TRANSFER_TYPE_BUSY,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["ll.CallTransferType.TRANSFER_TYPE_BUSY);\n      console.log", "ll_CallTransferType_TRANSFER_TYPE_BUSY';\n      console.log", " = 2;\n\nexport const TRANSFER_TYPE_BUSY = 1; // tran busy\ne", "ll_CallTransferType_TRANSFER_TYPE_BUSY\n       * @tc.name  ", "ll_CallTransferType_TRANSFER_TYPE_BUSY\",0,async function(d"], "files": ["CallJsunit.test.ets", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferType", "api_method_name": "TRANSFER_TYPE_NO_REPLY", "api_method_all": "TRANSFER_TYPE_NO_REPLY,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["ANSFER_DISABLE,\n    TRANSFER_TYPE_NO_REPLY,\n    COMMAND_CALL_E", "n busy\nexport const TRANSFER_TYPE_NO_REPLY = 2;// no response ", " *             type TRANSFER_TYPE_NO_REPLY,transferNum PHONE_N", "E,\n            type:TRANSFER_TYPE_NO_REPLY,\n            transf"], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferType", "api_method_name": "TRANSFER_TYPE_NOT_REACHABLE", "api_method_all": "TRANSFER_TYPE_NOT_REACHABLE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": [" *             type TRANSFER_TYPE_NOT_REACHABLE by promise,\n     * ", "E_ALL_INCOMING,\n    TRANSFER_TYPE_NOT_REACHABLE,\n    TRANSFER_TYPE_", "e tran\nexport const TRANSFER_TYPE_NOT_REACHABLE = 3; // untouchable", "fo(SLOT_ID_INVALID, TRANSFER_TYPE_NOT_REACHABLE);\n            conso"], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferSettingType", "api_method_all": "export enum CallTransferSettingType {\n    CALL_TRANSFER_DISABLE = 0,\n    CALL_TRANSFER_ENABLE = 1,\n    CALL_TRANSFER_REGISTRATION = 3,\n    CALL_TRANSFER_ERASURE = 4,\n  }", "api_method_name": "CallTransferSettingType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": [" * @tc.name    Enum CallTransferSettingType\n       * @tc.desc  ", "e = 'Telephony_Call_CallTransferSettingType_CALL_TRANSFER_ERASU", " it(\"Telephony_Call_CallTransferSettingType_CALL_TRANSFER_ERASU", "3).assertEqual(call.CallTransferSettingType.CALL_TRANSFER_REGIS", "4).assertEqual(call.CallTransferSettingType.CALL_TRANSFER_ERASU", "ber  Telephony_Call_CallTransferSettingType_CALL_TRANSFER_REGIS", "ber  Telephony_Call_CallTransferSettingType_CALL_TRANSFER_ERASU", " it(\"Telephony_Call_CallTransferSettingType_CALL_TRANSFER_REGIS", "e = 'Telephony_Call_CallTransferSettingType_CALL_TRANSFER_REGIS"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferSettingType", "api_method_name": "CALL_TRANSFER_DISABLE", "api_method_all": "CALL_TRANSFER_DISABLE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["E = 0;\nexport const CALL_TRANSFER_DISABLE = 1;\nexport const C", "        settingType:CALL_TRANSFER_DISABLE,\n            type:T", "INVALID,settingType CALL_TRANSFER_DISABLE,\n     *            ", "        settingType:CALL_TRANSFER_DISABLE,\n                ty", "MBER_AREA_LAND,\n    CALL_TRANSFER_DISABLE,\n    TRANSFER_TYPE_"], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferSettingType", "api_method_name": "CALL_TRANSFER_ENABLE", "api_method_all": "CALL_TRANSFER_ENABLE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": [" open\n\nexport const CALL_TRANSFER_ENABLE = 0;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferSettingType", "api_method_name": "CALL_TRANSFER_REGISTRATION", "api_method_all": "CALL_TRANSFER_REGISTRATION = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["E = 1;\nexport const CALL_TRANSFER_REGISTRATION = 3; // open tran f", "TransferSettingType.CALL_TRANSFER_REGISTRATION);\n      console.log", "TransferSettingType_CALL_TRANSFER_REGISTRATION\",0,async function(d", "TransferSettingType_CALL_TRANSFER_REGISTRATION\n       * @tc.name  ", "TransferSettingType_CALL_TRANSFER_REGISTRATION';\n      console.log"], "files": ["CallJsunit.test.ets", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferSettingType", "api_method_name": "CALL_TRANSFER_ERASURE", "api_method_all": "CALL_TRANSFER_ERASURE = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["TransferSettingType.CALL_TRANSFER_ERASURE);\n      console.log", "nction\nexport const CALL_TRANSFER_ERASURE = 4; // close tran ", "TransferSettingType_CALL_TRANSFER_ERASURE\n       * @tc.name  ", "TransferSettingType_CALL_TRANSFER_ERASURE';\n      console.log", "TransferSettingType_CALL_TRANSFER_ERASURE\",0, function(done){"], "files": ["CallJsunit.test.ets", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_all": "export interface CallAttributeOptions {\n    accountNumber: string;\n    speakerphoneOn: boolean;\n    accountId: number;\n    videoState: VideoStateType;\n    startTime: number;\n    isEcc: boolean;\n    callType: CallType;\n    callId: number;\n    callState: DetailedCallState;\n    conferenceState: ConferenceState;\n  }", "api_method_name": "CallAttributeOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["e = 'Telephony_Call_CallAttributeOptions_CallId';\n      cons", " str;\n    }\n}\nclass CallAttributeOptions {\n    constructor (", "ber  Telephony_Call_CallAttributeOptions_CallId\n       * @tc", "c.name    Interface CallAttributeOptions\n       * @tc.desc  ", " data;\n  }\n}\n\nclass CallAttributeOptions {\n  constructor (ca", "ributeOptions = new CallAttributeOptions(AUTO_ACCEPT_NUMBER,", " it('Telephony_Call_CallAttributeOptions_CallId', 0, functio"], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_name": "accountNumber", "api_method_all": "accountNumber: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["his.accountNumber = accountNumber;\n        this.speak", "allAttributeOptions.accountNumber === AUTO_ACCEPT_NUM", "ate) {\n        this.accountNumber = accountNumber;\n  ", " {\n    constructor (accountNumber, speakerphoneOn, ac"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_name": "speakerphoneOn", "api_method_all": "speakerphoneOn: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["is.speakerphoneOn = speakerphoneOn;\n        this.accou", "tor (accountNumber, speakerphoneOn, accountId, videoSt", "umber;\n        this.speakerphoneOn = speakerphoneOn;\n ", "allAttributeOptions.speakerphoneOn === SPEAK_ON).asser"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_name": "accountId", "api_method_all": "accountId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["oneOn;\n        this.accountId = accountId;\n      ", "allAttributeOptions.accountId === DEFAULT_SLOT_ID", "ns = {extras:false, accountId:DEFAULT_SLOT_ID, vi", "EPT_NUMBER options {accountId: DEFAULT_SLOT_ID,\n ", "   this.accountId = accountId;\n        this.video", "er, speakerphoneOn, accountId, videoState, startT", "     *             {accountId:DEFAULT_SLOT_ID,vid", "OMMAND_CALL_ERROR, {accountId:DEFAULT_SLOT_ID, vi", "MMAND_CALL_ERROR4, {accountId:DEFAULT_SLOT_ID, vi", "   const options = {accountId:SLOTID, videoState:", "     *             {accountId:DEFAULT_SLOT_ID, vi", "     *             {accountId: DEFAULT_SLOT_ID, v", "\n        let obj = {accountId: DEFAULT_SLOT_ID, v", "     let options = {accountId: DEFAULT_SLOT_ID, v", "\n        let obj = {accountId:DEFAULT_SLOT_ID, vi"], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_name": "videoState", "api_method_all": "videoState: VideoStateType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["untId;\n        this.videoState = videoState;\n     ", "Id:DEFAULT_SLOT_ID, videoState:MEDIA_TYPE_VOICE, d", "d: DEFAULT_SLOT_ID, videoState: MEDIA_TYPE_VOICE, ", " {accountId:SLOTID, videoState:MEDIA_TYPE_VOICE, d", "Id:DEFAULT_SLOT_ID, videoState:MEDIA_TYPE_VOICE,\n ", "phoneOn, accountId, videoState, startTime,\n       ", "d: DEFAULT_SLOT_ID, videoState: MEDIA_TYPE_VOICE,\n", "  this.videoState = videoState;\n        this.start", "\n     *             videoState: MEDIA_TYPE_VOICE,d", "tId:DEFAULT_SLOT_ID,videoState:MEDIA_TYPE_VOICE,di", "allAttributeOptions.videoState === MEDIA_TYPE_VOIC"], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_name": "startTime", "api_method_all": "startTime: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 36, "since": 7, "api_used": "\u662f", "lines": ["\": \"eth0\",\n        \"startTime\": 1,\n        \"endTi", " \"eth0\",\n          \"startTime\": Date.now() - 60 *", " \"test\",\n          \"startTime\": Date.now() - 60 *", " \"eth0\",\n          \"startTime\": time,\n          \"", "\": \"eth0\",\n        \"startTime\": Date.now(),\n     ", " timing = endTime - startTime;\n                if", "State;\n        this.startTime = startTime;\n      ", " \"eth0\",\n          \"startTime\": Date.now(),\n     ", "st cost = endTime - startTime;\n    console.log(`$", "allAttributeOptions.startTime);\n          }\n     ", " \"eth0\",\n          \"startTime\": 1981080000,\n     ", "{caseName} success, startTime = :` + callAttribut", "   this.startTime = startTime;\n        this.isEcc", "\": \"test\",\n        \"startTime\": Date.now() - 60 *", " \"eth0\",\n          \"startTime\": 1,\n          \"end", ";\n            const startTime = new Date().getTim", "\": \"eth0\",\n        \"startTime\": time,\n        \"en", "\": \"eth0\",\n        \"startTime\": 1981080000,\n     ", " });\n    }\n\n    let startTime = new Date().getTim", "allAttributeOptions.startTime === CURRENT_TIME).a", "ountId, videoState, startTime,\n        isEcc, cal"], "files": ["CallJsunit.test.ets", "CallManageAll.test.js", "ApiToPromisePerfomance.js", "StatisticsJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_name": "isEcc", "api_method_all": "isEcc: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": [" startTime,\n        isEcc, callType, callId, ", "tTime;\n        this.isEcc = isEcc;\n        th", "       this.isEcc = isEcc;\n        this.callT", "allAttributeOptions.isEcc === IS_ECC).assertT"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_name": "callType", "api_method_all": "callType: CallType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["isEcc;\n        this.callType = callType;\n       ", "    this.callType = callType;\n        this.callI", "ime,\n        isEcc, callType, callId, callState,", "allAttributeOptions.callType === DIAL_TYPE_OTT)."], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_name": "callId", "api_method_all": "callId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 177, "since": 7, "api_used": "\u662f", "lines": ["ll2(caseName, done, callId);\n                 ", "etailsChangeOn,\n    callId as gloabCallId,\n   ", "itchEnabled by args callId SLOT_ID_INVALID by ", " unHoldCall by args callId CALL_ID_NOT_EXIST b", "leImsSwitch by args callId SLOT_ID_INVALID by ", "      callId = data.callId;\n            call.s", "ion stopRTT by args callId CALL_ID_NOT_EXIST b", "      callId = data.callId;\n        } catch (e", "ll2(caseName, done, callId);\n    });\n\n    /**\n", "NG_TIME = 200;\n\nlet callId = null;\nclass Rejec", "      callId = data.callId;\n            let in", "caseName} stopRTT ${callId} error,case success", "ll2(caseName, done, callId);\n            });\n ", " switchCall by args callId CALL_ID_NOT_EXIST b", "   isEcc, callType, callId, callState, confere", "allAttributeOptions.callId === TEMP_CALL_ID).a", "ta => {\n            callId = data.callId;\n    ", "      this.callId = callId;\n        this.callS", "aseName} startRTT ${callId} error,case success", "      callId = data.callId;\n            let ca", "    });\n            callId = data.callId;\n    ", "on holdCall by args callId CALL_ID_NOT_EXIST b", "lType;\n        this.callId = callId;\n        t", "ImsCallMode by args callId CALL_ID_NOT_EXIST,\n"], "files": ["CallManageAll.test.js", "ScenceInCalling.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_name": "callState", "api_method_all": "callState: DetailedCallState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 63, "since": 7, "api_used": "\u662f", "lines": ["ng(err)}` +\n      `,callStateInfo ${toString(call", "      observer.off('callStateChange');\n        ca", "ateStorage.push({...callStateInfo});\n            ", "         return ele.callState === CALL_STATUS_DIS", "allId;\n        this.callState = callState;\n      ", "allAttributeOptions.callState === CALL_STATUS_DIA", "y {\n            let callState = await call.getCal", "         return ele.callState === checkState;\n   ", "\n      observer.on('callStateChange', (data) => {", "bserver_observer_on_callStateChange_0100 Test sta", "L_STATUS_DIALING || callState === call.CALL_STATU", "           callId = callStateInfo.callId;\n       ", "e.log(`${caseName}  callStateChange,data:${toStri", "                if (callState === call.CALL_STATU", "    }\n        func('callStateChange', {slotId:DEF", "lephony_CallManager callState ${callState} ${gloa", "fo)}`);\n        if (callStateInfo) {\n            ", "bserver_observer_on_callStateChange_0100', 0, asy", "bserver_observer_on_callStateChange_0200\n     * @", "LL_STATE_UNKNOWN || callState === CALL_STATE_IDLE", "ll the on method of callStateChange\n     */\n    i", "Manager callState ${callState} ${gloabCallId}`);\n", "         return ele.callState === checkState && e", "                    callState === call.CALL_STATU", "or ${toString(err)},callStateInfo ${\n            ", ", callType, callId, callState, conferenceState) {", "       observer.on('callStateChange', {slotId: DE", "e);\n    });\n};\n\nvar callState = -1;\nvar timing = ", "bserver_observer_on_callStateChange_0100 Test end", "lId === null && ele.callState === CALL_STATUS_DIA", "tateInfo ${toString(callStateInfo)}`);\n        if", "    }\n        func('callStateChange', {slotId: DE", " @tc.name      : on_callStateChange\n     * @tc.de", "`);\n            if (callState === CALL_STATE_UNKN", "le.log(`${caseName} callStateChange,data:${toStri", "tailsChange', (err, callStateInfo) => {\n        c", "bserver_observer_on_callStateChange_0100\n     * @", "      observer.off('callStateChange');\n          ", "   this.callState = callState;\n        this.confe"], "files": ["CallManageAll.test.js", "ScenceInCalling.js", "ObserverJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAttributeOptions", "api_method_name": "conferenceState", "api_method_all": "conferenceState: ConferenceState", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": [" callId, callState, conferenceState) {\n        this.acc", "State;\n        this.conferenceState = conferenceState;\n", "allAttributeOptions.conferenceState === TEL_CONFERENCE_", "s.conferenceState = conferenceState;\n    }\n}\n\nconst sle"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConferenceState", "api_method_all": "export enum ConferenceState {\n    TEL_CONFERENCE_IDLE = 0,\n    TEL_CONFERENCE_ACTIVE,\n    TEL_CONFERENCE_DISCONNECTING,\n    TEL_CONFERENCE_DISCONNECTED,\n  }", "api_method_name": "ConferenceState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ConferenceState", "api_method_name": "TEL_CONFERENCE_IDLE", "api_method_all": "TEL_CONFERENCE_IDLE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["NG,\n                TEL_CONFERENCE_IDLE);\n            conso", " = 8;\n\nexport const TEL_CONFERENCE_IDLE = 0;\nexport const T", "ON_UNSUPPORTED,\n    TEL_CONFERENCE_IDLE\n} from './lib/Const", "conferenceState === TEL_CONFERENCE_IDLE).assertTrue();\n    "], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConferenceState", "api_method_name": "TEL_CONFERENCE_ACTIVE", "api_method_all": "TEL_CONFERENCE_ACTIVE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["E = 0;\nexport const TEL_CONFERENCE_ACTIVE = 1;\nexport const T"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConferenceState", "api_method_name": "TEL_CONFERENCE_DISCONNECTING", "api_method_all": "TEL_CONFERENCE_DISCONNECTING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["E = 1;\nexport const TEL_CONFERENCE_DISCONNECTING = 2;\nexport const T"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ConferenceState", "api_method_name": "TEL_CONFERENCE_DISCONNECTED", "api_method_all": "TEL_CONFERENCE_DISCONNECTED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["G = 2;\nexport const TEL_CONFERENCE_DISCONNECTED = 3;\n\nexport const "], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallType", "api_method_all": "export enum CallType {\n    TYPE_CS = 0, // CS\n    TYPE_IMS = 1, // IMS\n    TYPE_OTT = 2, // OTT\n    TYPE_ERR_CALL = 3, // OTHER\n  }", "api_method_name": "CallType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CallType", "api_method_name": "TYPE_CS", "api_method_all": "TYPE_CS = 0, // CS", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": [";\nexport const CALL_TYPE_CS = 0;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallType", "api_method_name": "TYPE_IMS", "api_method_all": "TYPE_IMS = 1, // IMS", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": [";\nexport const CALL_TYPE_IMS = 1;\n\nexport const "], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallType", "api_method_name": "TYPE_OTT", "api_method_all": "TYPE_OTT = 2, // OTT", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["RMAL, dialType:DIAL_TYPE_OTT}\n     *            ", "_TIME, IS_ECC, DIAL_TYPE_OTT, TEMP_CALL_ID, CALL", "RMAL, dialType:DIAL_TYPE_OTT};\n        call.dial", "LL_NORMAL,\n    DIAL_TYPE_OTT,\n    EVENT_OTT_FUNC", "s.callType === DIAL_TYPE_OTT).assertTrue();\n    "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallType", "api_method_name": "TYPE_ERR_CALL", "api_method_all": "TYPE_ERR_CALL = 3, // OTHER", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["EGED, dialType:DIAL_TYPE_ERR_CALL};\n        call.dial", "      dialType:DIAL_TYPE_ERR_CALL} by promise,the fun", "= '112';\nconst DIAL_TYPE_ERR_CALL = 3;\nconst TIME_OUT"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoStateType", "api_method_all": "export enum VideoStateType {\n    TYPE_VOICE = 0, // Voice\n    TYPE_VIDEO, // Video\n  }", "api_method_name": "VideoStateType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoStateType", "api_method_name": "TYPE_VOICE", "api_method_all": "TYPE_VOICE = 0, // Voice", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 21, "since": 7, "api_used": "\u662f", "lines": [", videoState: MEDIA_TYPE_VOICE, dialScene: DIAL_SC", "ID,videoState:MEDIA_TYPE_VOICE,dialScene:DIAL_SCEN", "  videoState: MEDIA_TYPE_VOICE,dialScene: DIAL_SCE", "\nexport const MEDIA_TYPE_VOICE = 0;\nexport const D", "D, videoState:MEDIA_TYPE_VOICE,\n            dialSc", "IVILEGED,\n    MEDIA_TYPE_VOICE,\n    ROTATION_MINUS", "D, videoState:MEDIA_TYPE_VOICE,\n        dialScene:", "D, videoState:MEDIA_TYPE_VOICE, dialScene:DIAL_SCE", ", videoState: MEDIA_TYPE_VOICE,\n            dialSc", "              MEDIA_TYPE_VOICE, CURRENT_TIME, IS_E", "\nexport const MEDIA_TYPE_VOICE = 0;\nexport const M", "ideoState === MEDIA_TYPE_VOICE).assertTrue();\n    "], "files": ["CallJsunit.test.ets", "CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoStateType", "api_method_name": "TYPE_VIDEO", "api_method_all": "TYPE_VIDEO, // Video", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["\nexport const MEDIA_TYPE_VIDEO = 1;\nexport const M"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DetailedCallState", "api_method_all": "export enum DetailedCallState {\n    CALL_STATUS_ACTIVE = 0,\n    CALL_STATUS_HOLDING,\n    CALL_STATUS_DIALING,\n    CALL_STATUS_ALERTING,\n    CALL_STATUS_INCOMING,\n    CALL_STATUS_WAITING,\n    CALL_STATUS_DISCONNECTED,\n    CALL_STATUS_DISCONNECTING,\n    CALL_STATUS_IDLE,\n  }", "api_method_name": "DetailedCallState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DetailedCallState", "api_method_name": "CALL_STATUS_ACTIVE", "api_method_all": "CALL_STATUS_ACTIVE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": [" callState === call.CALL_STATUS_ACTIVE ||\n                ", "EFAULT_SLOT_ID,\n    CALL_STATUS_ACTIVE,\n    REACH_TIMES,\n ", " 0.5;\n\nexport const CALL_STATUS_ACTIVE = 0;\nexport const C", "eachState(caseName, CALL_STATUS_ACTIVE, 'scenceInUnHolding"], "files": ["CallManageAll.test.js", "ScenceInCalling.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DetailedCallState", "api_method_name": "CALL_STATUS_HOLDING", "api_method_all": "CALL_STATUS_HOLDING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["L_PHONE_NUMBER,\n    CALL_STATUS_HOLDING,\n    CALL_STATUS_DI", " the information at CALL_STATUS_HOLDING state\nexport functi", "eachState(caseName, CALL_STATUS_HOLDING, 'scenceInHolding',", "E = 0;\nexport const CALL_STATUS_HOLDING = 1;\nexport const C", "rmation of state at CALL_STATUS_HOLDING state\nexport functi"], "files": ["ScenceInCalling.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DetailedCallState", "api_method_name": "CALL_STATUS_DIALING", "api_method_all": "CALL_STATUS_DIALING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 26, "since": 7, "api_used": "\u662f", "lines": ["G = 1;\nexport const CALL_STATUS_DIALING = 2;\nexport const C", "         checkState:CALL_STATUS_DIALING\n            });\n   ", "eachState(caseName, CALL_STATUS_DIALING, '', false).then(da", "(callState === call.CALL_STATUS_DIALING || callState === ca", "         checkState:CALL_STATUS_DIALING\n        }).then(dat", "& ele.callState === CALL_STATUS_DIALING) {\n                ", "tions.callState === CALL_STATUS_DIALING).assertTrue();\n    ", "MBER_LENGTH_11,\n    CALL_STATUS_DIALING,\n    CALL_ID_NOT_EX", "STATUS_HOLDING,\n    CALL_STATUS_DIALING,\n    CALL_STATUS_DI", "_OTT, TEMP_CALL_ID, CALL_STATUS_DIALING,\n                TE"], "files": ["CallManageAll.test.js", "ScenceInCalling.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DetailedCallState", "api_method_name": "CALL_STATUS_ALERTING", "api_method_all": "CALL_STATUS_ALERTING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": [" callState === call.CALL_STATUS_ALERTING) {\n                ", "G = 2;\nexport const CALL_STATUS_ALERTING = 3;\nexport const C"], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DetailedCallState", "api_method_name": "CALL_STATUS_INCOMING", "api_method_all": "CALL_STATUS_INCOMING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["G = 3;\nexport const CALL_STATUS_INCOMING = 4;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DetailedCallState", "api_method_name": "CALL_STATUS_WAITING", "api_method_all": "CALL_STATUS_WAITING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["G = 4;\nexport const CALL_STATUS_WAITING = 5;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DetailedCallState", "api_method_name": "CALL_STATUS_DISCONNECTED", "api_method_all": "CALL_STATUS_DISCONNECTED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["TING) || (state === CALL_STATUS_DISCONNECTED);\n}\n\nexport functio", "State,get the state CALL_STATUS_DISCONNECTED from` +\n        ` $", "n ele.callState === CALL_STATUS_DISCONNECTED && ele.callId === t", "ptions.checkState = CALL_STATUS_DISCONNECTED;\n                sc", "G = 5;\nexport const CALL_STATUS_DISCONNECTED = 6;\nexport const C", "eachState(caseName, CALL_STATUS_DISCONNECTED, 'hangupCall2', tru", "eachState(caseName, CALL_STATUS_DISCONNECTED, 'hangupCall', true", "n ele.callState === CALL_STATUS_DISCONNECTED;\n                }\n", "STATUS_DIALING,\n    CALL_STATUS_DISCONNECTED,\n    CALL_STATUS_DI"], "files": ["ScenceInCalling.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DetailedCallState", "api_method_name": "CALL_STATUS_DISCONNECTING", "api_method_all": "CALL_STATUS_DISCONNECTING,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["S_DISCONNECTED,\n    CALL_STATUS_DISCONNECTING,\n    TIMEOUT_LENTH,", "D = 6;\nexport const CALL_STATUS_DISCONNECTING = 7;\nexport const C", "  return (state === CALL_STATUS_DISCONNECTING) || (state === CALL"], "files": ["ScenceInCalling.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DetailedCallState", "api_method_name": "CALL_STATUS_IDLE", "api_method_all": "CALL_STATUS_IDLE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["G = 7;\nexport const CALL_STATUS_IDLE = 8;\n\nexport const "], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionInfo", "api_method_all": "export interface CallRestrictionInfo {\n    type: CallRestrictionType;\n    password: string;\n    mode: CallRestrictionMode;\n  }", "api_method_name": "CallRestrictionInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["c.name    Interface CallRestrictionInfo\n       * @tc.desc  ", "e = 'Telephony_Call_CallRestrictionInfo_Type';\n      consol", " it('Telephony_Call_CallRestrictionInfo_Type', 0, function ", "e = 'Telephony_Call_CallRestrictionInfo_Mode';\n      consol", " it('Telephony_Call_CallRestrictionInfo_Mode', 0, function ", "ber  Telephony_Call_CallRestrictionInfo_Mode\n       * @tc.n", "ber  Telephony_Call_CallRestrictionInfo_Type\n       * @tc.n"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionInfo", "api_method_name": "type", "api_method_all": "type: CallRestrictionType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 843, "since": 7, "api_used": "\u662f", "lines": ["itCancel (caseName, type, slotId) {\n    retu", "\n     *             type TRANSFER_TYPE_NO_RE", "ng (data) {\n    if (typeof data === 'object'", "tId SLOT_ID_INVALID type RESTRICTION_TYPE_AL", "\n     *             type TRANSFER_TYPE_NOT_R", " });\n    }\n\n    if (typeof args[args.length ", "LE,\n                type:TRANSFER_TYPE_UNCON", "     .decoration({ \"type\": TextDecorationTyp", "ey('panel2')\n      .type(PanelType.Minibar)\n", "le\")\n      }\n      .type(ButtonType.Capsule)", "ISABLE,\n            type:TRANSFER_TYPE_NO_RE", "ngType,\n            type,\n            phoneN", "tCalling (caseName, type, mode, slotId) {\n  ", "get: \"pages/index\", type: NavigationType.Rep", "\"3.Normal\")\n      }.type(ButtonType.Normal)\n", "\n     *             type TRANSFER_TYPE_UNCON", " scenceLimitCalling type:${type},mode:${mode", "lor: Color\n  }> = { type: TextDecorationType", "LimitCalling type:${type},mode:${mode}`);\n  ", " 40, 20], max: 100, type: DataPanelType.Line", "ALID, {\n            type:RESTRICTION_TYPE_AL", "ef = Object.getPrototypeOf(global) || global", " 40, 20], max: 100, type: DataPanelType.Circ", "} scenceLimitCancel type:${type}`);\n        ", "n: decoration<{\n    type: TextDecorationType", "t args = Array.prototype.slice.call(argument", "T_ID, {\n            type,\n            mode:R", "get: \"pages/index\", type: NavigationType.Bac", "key('panel')\n      .type(PanelType.Foldable)", "      .decoration({ type: TextDecorationType", "Button('1.value', { type: ButtonType.Circle,", "eName, settingType, type, phoneNumber) {\n   ", "get the data stream type and\n     *         ", "ey('panel3')\n      .type(PanelType.Temporary", "eLimitCancel type:${type}`);\n        call.se", "      }\n        if (typeof func !== 'functio", "get: \"pages/index\", type: NavigationType.Pus", ".getTime();\n    if (typeof args[args.length ", "T_ID, {\n            type,\n            mode,\n"], "files": ["Utils.ets", "Stability_test.js", "ScenceInCalling.js", "DataJsunit.test.ets", "Performance_test.js", "Navigator.ets", "Text.ets", "HttpRequestOptionsJsunit.test.ets", "RequestMethodJsunit.test.ets", "ScenceLimitCalling.js", "Span.ets", "Contacts_test.js", "ContactCard_test.js", "Panel.ets", "ConvertOptionsJsunit.test.ets", "common.js", "DataPanel.ets", "ContactClass_test.js", "HttpRequestJsunit.test.ets", "ContactMerge_test.js", "HttpResponseJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "SimManager.test.js", "ApiToPromise.js", "Voicemail_test.js", "ScenceTransfer.js", "index.js", "CallManageAll.test.js", "SmsMmsError.test.js", "ApiToPromisePerfomance.js", "CellularDataAbnorma.test.js", "Calllog_test.js", "Button.ets", "ApiToPromiseReliability.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionInfo", "api_method_name": "password", "api_method_all": "password: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 8, "api_used": "\u662f", "lines": ["-1;\n\n// sim correct password\nexport const CORREC", "VATION,\n            password:RIGHT_PASSWORD,\n   ", ";\n\n// sim incorrect password\nexport const INCORR", "state: sim.LOCK_ON, password: env.CORRECT_PIN };", "tionInfo = {type:0, password: '123456', mode:1}\n", "  mode,\n            password:RIGHT_PASSWORD,\n   ", "COMING,\n            password:RIGHT_PASSWORD,\n   ", "N_TYPE_ALL_INCOMING password RIGHT_PASSWORD\n    ", "e: sim.PN_PIN_LOCK, password: env.SIM_PN_PIN_PAS", "tate: sim.LOCK_OFF, password: env.CORRECT_PIN };"], "files": ["ScenceLimitCalling.js", "SimJsunit.test.ets", "CallJsunit.test.ets", "SimManager.test.js", "CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionInfo", "api_method_name": "mode", "api_method_all": "mode: CallRestrictionMode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 112, "since": 8, "api_used": "\u662f", "lines": ["nge((value: number, mode: SliderChangeMode) ", "estsort8\"], [\"merge_mode\", \"0\"], [\"is_need_m", "alling type:${type},mode:${mode}`);\n        ", "  type,\n            mode,\n            passwo", "\n     *             mode RESTRICTION_MODE_AC", "e.Temporary)\n      .mode(PanelMode.Full)\n   ", "ng (caseName, type, mode, slotId) {\n    retu", "SSWORD,\n            mode:RESTRICTION_MODE_AC", "eight},mode:${value.mode}`)\n      })\n\n    }.", "\n     *             mode CALL_MODE_SEND_RECE", "       this.Begin = mode\n            console", "ype.Minibar)\n      .mode(PanelMode.Mini)\n   ", "lue + '---mode: ' + mode)\n          })\n     ", "  type,\n            mode:RESTRICTION_MODE_DE", "pe.Foldable)\n      .mode(PanelMode.Half)\n   ", "ue: ' + value + '---mode: ' + mode)\n        ", "type:${type},mode:${mode}`);\n        call.se", "ght:${value.height},mode:${value.mode}`)\n   ", "testsort\"], [\"merge_mode\", \"0\"], [\"is_need_m", "eight},mode:${value.mode}`)\n      })\n\n      ", "estsort1\"], [\"merge_mode\", \"0\"], [\"is_need_m"], "files": ["ConnectionJsunit.test.ets", "ScenceLimitCalling.js", "CallManageAll.test.js", "CallJsunit.test.ets", "Panel.ets", "Slider.ets", "common.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionMode", "api_method_all": "export enum CallRestrictionMode {\n    RESTRICTION_MODE_DEACTIVATION = 0,\n    RESTRICTION_MODE_ACTIVATION,\n  }", "api_method_name": "CallRestrictionMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionMode", "api_method_name": "RESTRICTION_MODE_DEACTIVATION", "api_method_all": "RESTRICTION_MODE_DEACTIVATION = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["D, DEFAULT_SLOT_ID, RESTRICTION_MODE_DEACTIVATION} from './Const.js';", "e,\n            mode:RESTRICTION_MODE_DEACTIVATION,\n            passwo", " = 4;\n\nexport const RESTRICTION_MODE_DEACTIVATION = 0;\nexport const R"], "files": ["Const.js", "ScenceLimitCalling.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallRestrictionMode", "api_method_name": "RESTRICTION_MODE_ACTIVATION", "api_method_all": "RESTRICTION_MODE_ACTIVATION,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["AMING_INCOMING,\n    RESTRICTION_MODE_ACTIVATION,\n    RIGHT_PASSWORD", " *             mode RESTRICTION_MODE_ACTIVATION,the function return", "N = 0;\nexport const RESTRICTION_MODE_ACTIVATION = 1;\nexport const R", "D,\n            mode:RESTRICTION_MODE_ACTIVATION\n        })\n        ", "D,\n            mode:RESTRICTION_MODE_ACTIVATION\n        }, (error, "], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallEventOptions", "api_method_all": "export interface CallEventOptions {\n    eventId: CallAbilityEventId,\n  }", "api_method_name": "CallEventOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["e = 'Telephony_Call_CallEventOptions_EventId';\n      con", "ber  Telephony_Call_CallEventOptions_EventId\n       * @t", "c.name    Interface CallEventOptions\n       * @tc.desc  ", " it('Telephony_Call_CallEventOptions_EventId', 0, functi"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAbilityEventId", "api_method_all": "export enum CallAbilityEventId {\n    EVENT_DIAL_NO_CARRIER = 1,\n    EVENT_INVALID_FDN_NUMBER,\n  }", "api_method_name": "CallAbilityEventId", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["ber  Telephony_Call_CallAbilityEventId_EVENT_DIAL_NO_CARRI", "1).assertEqual(call.CallAbilityEventId.EVENT_DIAL_NO_CARRI", " * @tc.name    Enum CallAbilityEventId\n       * @tc.desc  ", " it(\"Telephony_Call_CallAbilityEventId_EVENT_DIAL_NO_CARRI", "ber  Telephony_Call_CallAbilityEventId_EVENT_INVALID_FDN_N", "2).assertEqual(call.CallAbilityEventId.EVENT_INVALID_FDN_N", "e = 'Telephony_Call_CallAbilityEventId_EVENT_INVALID_FDN_N", " it(\"Telephony_Call_CallAbilityEventId_EVENT_INVALID_FDN_N", "e = 'Telephony_Call_CallAbilityEventId_EVENT_DIAL_NO_CARRI"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAbilityEventId", "api_method_name": "EVENT_DIAL_NO_CARRIER", "api_method_all": "EVENT_DIAL_NO_CARRIER = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": [".CallAbilityEventId.EVENT_DIAL_NO_CARRIER);\n      console.log", "_CallAbilityEventId_EVENT_DIAL_NO_CARRIER\n       * @tc.name  ", "_CallAbilityEventId_EVENT_DIAL_NO_CARRIER';\n      console.log", "_CallAbilityEventId_EVENT_DIAL_NO_CARRIER\",0, function(done){"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallAbilityEventId", "api_method_name": "EVENT_INVALID_FDN_NUMBER", "api_method_all": "EVENT_INVALID_FDN_NUMBER,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["_CallAbilityEventId_EVENT_INVALID_FDN_NUMBER';\n      console.log", "_CallAbilityEventId_EVENT_INVALID_FDN_NUMBER\n       * @tc.name  ", "_CallAbilityEventId_EVENT_INVALID_FDN_NUMBER\",0, function(done){", ".CallAbilityEventId.EVENT_INVALID_FDN_NUMBER);\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallState", "api_method_all": "export enum CallState {\n    \n    CALL_STATE_UNKNOWN = -1,\n\n    \n    CALL_STATE_IDLE = 0,\n\n    \n    CALL_STATE_RINGING = 1,\n\n    \n    CALL_STATE_OFFHOOK = 2\n  }", "api_method_name": "CallState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["hony_CallManager_getCallState_Promise_0100\n     *", "ate = await call.getCallState();\n            cons", "all status, call getCallState() to get the curren", "hony_CallManager_getCallState_Async_0100 finish d", "hony_CallManager_getCallState_Async_0100', 0, asy", ") {\n        call.getCallState((err, data) => {\n  ", "er hangupCall or getCallState error');\n        }\n", "hony_CallManager_getCallState_Async_0100 : err = ", "hony_CallManager_getCallState_Promise_0100', 0, a", "hony_CallManager_getCallState_Promise_0100 finish", "ata = await call.getCallState();\n            expe", "hony_CallManager_getCallState_Async_0100\n     * @", "hony_CallManager_getCallState_Promise_0100 : err "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallState", "api_method_name": "CALL_STATE_UNKNOWN", "api_method_all": "CALL_STATE_UNKNOWN = -1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["L_ID_NOT_EXIST,\n    CALL_STATE_UNKNOWN,\n    CALL_STATE_IDL", "  if (callState === CALL_STATE_UNKNOWN || callState === CA", " = 5;\n\nexport const CALL_STATE_UNKNOWN = -1;\nexport const "], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallState", "api_method_name": "CALL_STATE_IDLE", "api_method_all": "CALL_STATE_IDLE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 0, "api_used": "\u662f", "lines": [" = -1;\nexport const CALL_STATE_IDLE = 0;\nexport const C", "_STATE_UNKNOWN,\n    CALL_STATE_IDLE,\n    DEFAULT_SLOT_I", "xpect(data === call.CALL_STATE_IDLE).assertTrue();\n    ", "WN || callState === CALL_STATE_IDLE) {\n                ", " *             call.CALL_STATE_IDLE is returned\n     * "], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallState", "api_method_name": "CALL_STATE_RINGING", "api_method_all": "CALL_STATE_RINGING = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["E = 0;\nexport const CALL_STATE_RINGING = 1;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallState", "api_method_name": "CALL_STATE_OFFHOOK", "api_method_all": "CALL_STATE_OFFHOOK = 2", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["G = 1;\nexport const CALL_STATE_OFFHOOK = 2;\n\nexport const "], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DialOptions", "api_method_all": "export interface DialOptions {\n    \n    extras?: boolean;\n    \n    accountId?: number;\n    \n    videoState?: VideoStateType;\n    \n    dialScene?: DialScene;\n    \n    dialType?: DialType;\n  }", "api_method_name": "DialOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": [" it(\"Telephony_Call_DialOptions_Extras\",0,async fun", "g = \"Telephony_Call_DialOptions_extras\";\n      cons"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialOptions", "api_method_name": "extras", "api_method_all": "extras?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["     let options = {extras:false, accountId:DE", "ny_Call_DialOptions_extras\";\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialOptions", "api_method_name": "accountId", "api_method_all": "accountId?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["oneOn;\n        this.accountId = accountId;\n      ", "allAttributeOptions.accountId === DEFAULT_SLOT_ID", "ns = {extras:false, accountId:DEFAULT_SLOT_ID, vi", "EPT_NUMBER options {accountId: DEFAULT_SLOT_ID,\n ", "   this.accountId = accountId;\n        this.video", "er, speakerphoneOn, accountId, videoState, startT", "     *             {accountId:DEFAULT_SLOT_ID,vid", "OMMAND_CALL_ERROR, {accountId:DEFAULT_SLOT_ID, vi", "MMAND_CALL_ERROR4, {accountId:DEFAULT_SLOT_ID, vi", "   const options = {accountId:SLOTID, videoState:", "     *             {accountId:DEFAULT_SLOT_ID, vi", "     *             {accountId: DEFAULT_SLOT_ID, v", "\n        let obj = {accountId: DEFAULT_SLOT_ID, v", "     let options = {accountId: DEFAULT_SLOT_ID, v", "\n        let obj = {accountId:DEFAULT_SLOT_ID, vi"], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialOptions", "api_method_name": "videoState", "api_method_all": "videoState?: VideoStateType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 7, "api_used": "\u662f", "lines": ["untId;\n        this.videoState = videoState;\n     ", "Id:DEFAULT_SLOT_ID, videoState:MEDIA_TYPE_VOICE, d", "d: DEFAULT_SLOT_ID, videoState: MEDIA_TYPE_VOICE, ", " {accountId:SLOTID, videoState:MEDIA_TYPE_VOICE, d", "Id:DEFAULT_SLOT_ID, videoState:MEDIA_TYPE_VOICE,\n ", "phoneOn, accountId, videoState, startTime,\n       ", "d: DEFAULT_SLOT_ID, videoState: MEDIA_TYPE_VOICE,\n", "  this.videoState = videoState;\n        this.start", "\n     *             videoState: MEDIA_TYPE_VOICE,d", "tId:DEFAULT_SLOT_ID,videoState:MEDIA_TYPE_VOICE,di", "allAttributeOptions.videoState === MEDIA_TYPE_VOIC"], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialOptions", "api_method_name": "dialScene", "api_method_all": "dialScene?: DialScene", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["e:MEDIA_TYPE_VOICE, dialScene:DIAL_SCENCE_CALL_PR", "e: MEDIA_TYPE_VOICE,dialScene: DIAL_SCENCE_CALL_N", "te:MEDIA_TYPE_VOICE,dialScene:DIAL_SCENCE_CALL_PR", "_VOICE,\n            dialScene: DIAL_SCENCE_CALL_N", ": MEDIA_TYPE_VOICE, dialScene: DIAL_SCENCE_CALL_P", "TYPE_VOICE,\n        dialScene:DIAL_SCENCE_CALL_PR", "_VOICE,\n            dialScene:DIAL_SCENCE_CALL_PR", "_VOICE,\n            dialScene: DIAL_SCENCE_CALL_P"], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialOptions", "api_method_name": "dialType", "api_method_all": "dialType?: DialType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["SCENCE_CALL_NORMAL, dialType:DIAL_TYPE_OTT};\n   ", "CE_CALL_PRIVILEGED, dialType:DIAL_CARRIER_TYPE},", "ILEGED,\n            dialType:DIAL_CARRIER_TYPE};", "CE_CALL_PRIVILEGED, dialType:DIAL_TYPE_ERR_CALL}", "ED,\n                dialType:DIAL_CARRIER_TYPE};", "CE_CALL_PRIVILEGED, dialType:DIAL_CARRIER_TYPE})", "\n     *             dialType:DIAL_TYPE_ERR_CALL}", "CE_CALL_PRIVILEGED, dialType:DIAL_CARRIER_TYPE};", "SCENCE_CALL_NORMAL, dialType:DIAL_TYPE_OTT}\n    ", "\n     *             dialType:DIAL_CARRIER_TYPE} "], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialScene", "api_method_all": "export enum DialScene {\n    CALL_NORMAL = 0,\n    CALL_PRIVILEGED = 1,\n    CALL_EMERGENCY = 2,\n  }", "api_method_name": "DialScene", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DialScene", "api_method_name": "CALL_NORMAL", "api_method_all": "CALL_NORMAL = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["lScene: DIAL_SCENCE_CALL_NORMAL, dialType:DIAL_TYPE", "_0,\n    DIAL_SCENCE_CALL_NORMAL,\n    DIAL_TYPE_OTT,", "t const DIAL_SCENCE_CALL_NORMAL = 0;\nexport const D"], "files": ["CallJsunit.test.ets", "CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DialScene", "api_method_name": "CALL_PRIVILEGED", "api_method_all": "CALL_PRIVILEGED = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 17, "since": 8, "api_used": "\u662f", "lines": ["lScene: DIAL_SCENCE_CALL_PRIVILEGED, dialType:DIAL_CARR", "alScene:DIAL_SCENCE_CALL_PRIVILEGED, dialType:DIAL_CARR", "alScene:DIAL_SCENCE_CALL_PRIVILEGED,\n                di", "lScene: DIAL_SCENCE_CALL_PRIVILEGED,\n     *            ", "alScene:DIAL_SCENCE_CALL_PRIVILEGED, dialType:DIAL_TYPE", "PE,\n    DIAL_SCENCE_CALL_PRIVILEGED,\n    MEDIA_TYPE_VOI", "alScene:DIAL_SCENCE_CALL_PRIVILEGED,\n     *            ", "alScene:DIAL_SCENCE_CALL_PRIVILEGED,\n            dialTy", "t const DIAL_SCENCE_CALL_PRIVILEGED = 1;\nexport const B", "t const DIAL_SCENCE_CALL_PRIVILEGED = 1;\nexport const D"], "files": ["CallJsunit.test.ets", "CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DialScene", "api_method_name": "CALL_EMERGENCY", "api_method_all": "CALL_EMERGENCY = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["st DIAL_SCENCE_CALL_CALL_EMERGENCY = 2;\nexport const D", "8901';\nexport const CALL_EMERGENCY = 2;\nexport const P"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DialType", "api_method_all": "export enum DialType {\n    DIAL_CARRIER_TYPE = 0,\n    DIAL_VOICE_MAIL_TYPE = 1,\n    DIAL_OTT_TYPE = 2,\n  }", "api_method_name": "DialType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DialType", "api_method_name": "DIAL_CARRIER_TYPE", "api_method_all": "DIAL_CARRIER_TYPE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["           dialType:DIAL_CARRIER_TYPE};\n        call.dial", "L_PHONE_NUMBER,\n    DIAL_CARRIER_TYPE,\n    DIAL_SCENCE_CA", "RIVILEGED, dialType:DIAL_CARRIER_TYPE}, (error, data) => ", "           dialType:DIAL_CARRIER_TYPE} by callback,the ca", "2 = 3;\nexport const DIAL_CARRIER_TYPE = 0;\nexport const D", "L = 0;\nexport const DIAL_CARRIER_TYPE = 0;\nexport const D", "RIVILEGED, dialType:DIAL_CARRIER_TYPE};\n      call.dial(P", "RIVILEGED, dialType:DIAL_CARRIER_TYPE};\n        call.dial", "           dialType:DIAL_CARRIER_TYPE};\n            var d", "           dialType:DIAL_CARRIER_TYPE} by promise,the fun", "RIVILEGED, dialType:DIAL_CARRIER_TYPE}).then(data => {\n  ", "           dialType:DIAL_CARRIER_TYPE} by callback,the fu"], "files": ["CallJsunit.test.ets", "CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DialType", "api_method_name": "DIAL_VOICE_MAIL_TYPE", "api_method_all": "DIAL_VOICE_MAIL_TYPE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["E = 0;\nexport const DIAL_VOICE_MAIL_TYPE = 1;\nexport const D"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DialType", "api_method_name": "DIAL_OTT_TYPE", "api_method_all": "DIAL_OTT_TYPE = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["E = 1;\nexport const DIAL_OTT_TYPE = 2;\nexport const D"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RejectMessageOptions", "api_method_all": "export interface RejectMessageOptions {\n    messageContent: string;\n  }", "api_method_name": "RejectMessageOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["allId = null;\nclass RejectMessageOptions {\n    constructor (", ".reject(callId, new RejectMessageOptions(REJECT_MESSAGE_NUM)", ".reject(callId, new RejectMessageOptions(REJECT_MESSAGE_STR)"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RejectMessageOptions", "api_method_name": "messageContent", "api_method_all": "messageContent: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["     let options = {messageContent:\"hello\"}\n      call", "str) {\n        this.messageContent = str;\n    }\n}\nclas"], "files": ["CallManageAll.test.js", "CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferResult", "api_method_all": "export interface CallTransferResult {\n    status: TransferStatus;\n    number: string;\n  }", "api_method_name": "CallTransferResult", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["e = 'Telephony_Call_CallTransferResult_Status';\n      cons", "e = 'Telephony_Call_CallTransferResult_Number';\n      cons", "c.name    Interface CallTransferResult\n       * @tc.desc  ", " it('Telephony_Call_CallTransferResult_Number', 0, functio", " it('Telephony_Call_CallTransferResult_Status', 0, functio", "ber  Telephony_Call_CallTransferResult_Number\n       * @tc", "ber  Telephony_Call_CallTransferResult_Status\n       * @tc"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferResult", "api_method_name": "status", "api_method_all": "status: TransferStatus", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 99, "since": 8, "api_used": "\u662f", "lines": ["xiaohong\"], [\"voice_status\", \"0\"]]);\n        v", "4454445254\", \"voice_status\": 0\n            };\n", "            [\"merge_status\", \"1\"], [\"is_merge_", " voice mailbox with status 0 or id and return ", ": \"2800name\", voice_statuss: \"0\"\n             ", "pdate the voicemail status, pass in a non-exis", "             \"voice_status\": 1\n               ", "et the current call status.\n     *            ", "            [\"voice_status\", \"0\"]\n        ]);\n", ": \"xiaofen\", \"voice_status\": 1\n            };\n", "\"xiaohei\"], [\"voice_status\", \"0\"]]);\n        v", " \"xiaoming\", \"voice_status\": 1\n            };\n", "eting the voicemail status, pass in a non-exis", "xiaoming\"], [\"voice_status\", \"0\"]]);\n        v", "  mapOne.set(\"voice_status\", \"1\");\n           ", ": \"1557254\", \"voice_status\": 1\n            };\n", ": \"xiaohei\", \"voice_status\": 0\n            };\n", ": \"xiaohei\", \"voice_status\": 1\n            };\n", " When the voicemail status is added, a non-exi", "   Insert voicemail status 0\n     * @tc.desc  ", " \"xiaoming\", \"voice_status\": 0\n            };\n", "     map.set(\"voice_status\", \"0\");\n           ", "5754445254\", \"voice_status\": 1\n               ", " \"xiaohong\", \"voice_status\": 0\n            };\n", " \"18862013\", \"voice_status\": 0\n            };\n", ": \"2700name\", voice_statuss: \"1\"\n             ", "\"xiaofen\"], [\"voice_status\", \"0\"]]);\n        v", "5444445254\", \"voice_status\": 0\n            };\n", "tion.equalTo(\"voice_status\", \"0\");\n           ", ": \"1557254\", \"voice_status\": 0\n            };\n", "o get the idle call status, call getCallState(", "\"xiaohei\"], [\"voice_status\", \"1\"]]);\n        v", "     map.set(\"voice_status\", \"1\");\n           ", ": \"2800name\", voice_status: \"1\"\n              ", "             \"voice_status\": 0\n               ", "\"100578615\", \"voice_status\": 1\n            };\n", "tion.equalTo(\"voice_status\", \"1\");\n           ", "4452542200\", \"voice_status\": 0\n            };\n", "5754445254\", \"voice_status\": 0\n            };\n"], "files": ["ConnectionJsunit.test.ets", "SmsMmsJsunit.test.ets", "SimJsunit.test.ets", "SocketJsunit.test.ets", "CallManageAll.test.js", "CallJsunit.test.ets", "SimManager.test.js", "RadioSecondJsunit.test.ets", "Voicemail_test.js", "common.js", "SmsMmsError.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallTransferResult", "api_method_name": "number", "api_method_all": "number: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1139, "since": 7, "api_used": "\u662f", "lines": ["\n    /**\n     * @tc.number  Telephony_CallMana"], "files": ["ConnectionJsunit.test.ets", "Stability_test.js", "SimJsunit.test.ets", "SocketJsunit.test.ets", "ScenceInCalling.js", "Performance_test.js", "WebSocketJsunit.test.ets", "NetworkSearchErrors.test.js", "Slider.ets", "ObjectInterface_test.js", "Text.ets", "Counter.ets", "Contacts_test.js", "ContactCard_test.js", "recovery_test.js", "common.js", "Scroll.ets", "SmsMmsJsunit.test.ets", "ContactMerge_test.js", "ResponseCodeJsunit.test.ets", "CallJsunit.test.ets", "ObserverJsunit.test.ets", "Rating.ets", "SimManager.test.js", "Voicemail_test.js", "StatisticsJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Divider.ets", "CellularDataAbnorma.test.js", "Calllog_test.js", "Image.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CallWaitingStatus", "api_method_all": "export enum CallWaitingStatus {\n    CALL_WAITING_DISABLE = 0,\n    CALL_WAITING_ENABLE = 1\n  }", "api_method_name": "CallWaitingStatus", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 14, "since": 7, "api_used": "\u662f", "lines": ["_CallManager_IMS_getCallWaitingStatus_Async_0500\n     * @", "0';\n        call.getCallWaitingStatus(SLOT_ID_INVALID).th", "0';\n        call.getCallWaitingStatus(SLOT_ID_INVALID, (e", "_CallManager_IMS_getCallWaitingStatus_Async_0500', 0, fun", "_CallManager_IMS_getCallWaitingStatus_Promise_0500\n     *", "_CallManager_IMS_getCallWaitingStatus_Promise_0500', 0, f", "_CallManager_IMS_getCallWaitingStatus_Async_0500';\n      ", "_CallManager_IMS_getCallWaitingStatus_Promise_0500';\n    ", "log(`${caseName} getCallWaitingStatus error,case success,", "Run the function getCallWaitingStatus by args slotId SLOT", "log(`${caseName} getCallWaitingStatus success,case failed"], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallWaitingStatus", "api_method_name": "CALL_WAITING_DISABLE", "api_method_all": "CALL_WAITING_DISABLE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["89#';\n\nexport const CALL_WAITING_DISABLE = 0;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CallWaitingStatus", "api_method_name": "CALL_WAITING_ENABLE", "api_method_all": "CALL_WAITING_ENABLE = 1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["E = 0;\nexport const CALL_WAITING_ENABLE = 1;\n\nexport const "], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RestrictionStatus", "api_method_all": "export enum RestrictionStatus {\n    RESTRICTION_DISABLE = 0,\n    RESTRICTION_ENABLE = 1\n  }", "api_method_name": "RestrictionStatus", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["lManager_IMS_getCallRestrictionStatus_Promise_1100', 0, f", "Run function getCallRestrictionStatus by promise by arg s", "lManager_IMS_getCallRestrictionStatus_Promise_1100';\n    ", "lManager_IMS_getCallRestrictionStatus_Async_1100';\n      ", "        call.getCallRestrictionStatus(SLOT_ID_INVALID, RE", "lManager_IMS_getCallRestrictionStatus_Promise_1100\n     *", "lManager_IMS_getCallRestrictionStatus_Async_1100\n     * @", "lManager_IMS_getCallRestrictionStatus_Async_1100', 0, fun", "Run function getCallRestrictionStatus by callback by arg "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RestrictionStatus", "api_method_name": "RESTRICTION_DISABLE", "api_method_all": "RESTRICTION_DISABLE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": [" = 2;\n\nexport const RESTRICTION_DISABLE = 0;\nexport const R"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "RestrictionStatus", "api_method_name": "RESTRICTION_ENABLE", "api_method_all": "RESTRICTION_ENABLE = 1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["E = 0;\nexport const RESTRICTION_ENABLE = 1;\n\nexport const "], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TransferStatus", "api_method_all": "export enum TransferStatus {\n    TRANSFER_DISABLE = 0,\n    TRANSFER_ENABLE = 1\n  }", "api_method_name": "TransferStatus", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TransferStatus", "api_method_name": "TRANSFER_DISABLE", "api_method_all": "TRANSFER_DISABLE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["   settingType:CALL_TRANSFER_DISABLE,\n            type:T", "ID,settingType CALL_TRANSFER_DISABLE,\n     *            ", "AREA_LAND,\n    CALL_TRANSFER_DISABLE,\n    TRANSFER_TYPE_", ";\nexport const CALL_TRANSFER_DISABLE = 1;\nexport const C", "   settingType:CALL_TRANSFER_DISABLE,\n                ty", "616';\n\nexport const TRANSFER_DISABLE = 0; // tran is clo"], "files": ["CallManageAll.test.js", "Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TransferStatus", "api_method_name": "TRANSFER_ENABLE", "api_method_all": "TRANSFER_ENABLE = 1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [" close\nexport const TRANSFER_ENABLE = 1; // tran is ope", "\n\nexport const CALL_TRANSFER_ENABLE = 0;\nexport const C"], "files": ["Const.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EmergencyNumberOptions", "api_method_all": "export interface EmergencyNumberOptions {\n    slotId?: number;\n  }", "api_method_name": "EmergencyNumberOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": [" str;\n    }\n}\nclass EmergencyNumberOptions {\n    constructor (", "NumberOptions = new EmergencyNumberOptions(ERR_SLOT_ID);\n     "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "EmergencyNumberOptions", "api_method_name": "slotId", "api_method_all": "slotId?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 113, "since": 7, "api_used": "\u662f", "lines": ["ignalInfoChange', { slotId: SLOT_0 }, (network", "'callStateChange', {slotId: DEFAULT_SLOT_ID}, ", "d test observer.on({slotId:0}) to view the cal", "seName, type, mode, slotId) {\n    return new P", "ransferInfo by args slotId SLOT_ID_INVALID,\n  ", " abnormal input of \"slotId\", test getPreferred", "             by arg slotId SLOT_ID_INVALID typ", "eChange', {\n        slotId: SLOT_0\n      }, (d", "name    Verify the \"slotId\" abnormal input, te", "num) {\n        this.slotId = num;\n    }\n}\nclas", "el (caseName, type, slotId) {\n    return new P", "eChange', {\n        slotId: SLOT_0\n      }, (n", "et data = {\n        slotId: TRUE_SLOT_ID,\n    ", " abnormal input of \"slotId\", test getOperatorN", "face is tested, and slotId is abnormal.\n    * ", "'callStateChange', {slotId:DEFAULT_SLOT_ID}, (", "itingStatus by args slotId SLOT_ID_INVALID by ", "estriction(slotId ? slotId : DEFAULT_SLOT_ID, ", "oChange', {\n        slotId: SLOT_0\n      }, (s", ".setCallRestriction(slotId ? slotId : DEFAULT_", "ingEnabled, set the slotId to error values (3)", "ode = {\n            slotId: 55, //set the erro", "tting parameters as slotId error value (3), to", "ndMessage({\n        slotId: TRUE_SLOT_ID,\n    ", " by callback by arg slotId\n     *             ", "wChange', {\n        slotId: SLOT_0\n      }, (d", "oChange', {\n        slotId: SLOT_0\n      }, (c", "CallWaiting by args slotId SLOT_ID_INVALID act", "allTransfer by args slotId SLOT_ID_INVALID,set", "workStateChange', { slotId: SLOT_0 }, (network", "s by promise by arg slotId (that is at SLOT_ID", "  *             The slotId parameter is abnorm", " abnormal input of \"slotId\", test setPreferred"], "files": ["CellularDataAbnorma.test.js", "SmsMmsJsunit.test.ets", "ScenceLimitCalling.js", "ScenceInCalling.js", "ObserverJsunit.test.ets", "NetworkSearchErrors.test.js", "SimManager.test.js", "CallManageAll.test.js", "SmsMmsError.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NumberFormatOptions", "api_method_all": "export interface NumberFormatOptions {\n    countryCode?: string;\n  }", "api_method_name": "NumberFormatOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["FormatOptions = new NumberFormatOptions('CN');\n        call", "FormatOptions = new NumberFormatOptions('CN');\n        try ", " num;\n    }\n}\nclass NumberFormatOptions {\n    constructor ("], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "NumberFormatOptions", "api_method_name": "countryCode", "api_method_all": "countryCode?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["str) {\n        this.countryCode = str;\n    }\n}\nclas", "numberFormatOptions.countryCode);\n            expec", "numberFormatOptions.countryCode, (err, data) => {\n "], "files": ["CallManageAll.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_all": "export enum DisconnectedDetails {\n    UNASSIGNED_NUMBER = 1,\n    NO_ROUTE_TO_DESTINATION = 3,\n    CHANNEL_UNACCEPTABLE = 6,\n    OPERATOR_DETERMINED_BARRING = 8,\n    NORMAL_CALL_CLEARING = 16,\n    USER_BUSY = 17,\n    NO_USER_RESPONDING = 18,\n    USER_ALERTING_NO_ANSWER = 19,\n    CALL_REJECTED = 21,\n    NUMBER_CHANGED = 22,\n    DESTINATION_OUT_OF_ORDER = 27,\n    INVALID_NUMBER_FORMAT = 28,\n    NETWORK_OUT_OF_ORDER = 38,\n    TEMPORARY_FAILURE = 41,\n    INVALID_PARAMETER = 1025,\n    SIM_NOT_EXIT = 1026,\n    SIM_PIN_NEED = 1027,\n    CALL_NOT_ALLOW = 1029,\n    SIM_INVALID = 1045,\n    UNKNOWN = 1279,\n  }", "api_method_name": "DisconnectedDetails", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 60, "since": 8, "api_used": "\u662f", "lines": ["e = 'Telephony_Call_DisconnectedDetails_UNASSIGNED_NUMBER';", " it(\"Telephony_Call_DisconnectedDetails_CHANNEL_UNACCEPTABL", "7).assertEqual(call.DisconnectedDetails.USER_BUSY);\n      c", "9).assertEqual(call.DisconnectedDetails.USER_ALERTING_NO_AN", "e = 'Telephony_Call_DisconnectedDetails_CALL_REJECTED';\n   ", "e = 'Telephony_Call_DisconnectedDetails_CHANNEL_UNACCEPTABL", "8).assertEqual(call.DisconnectedDetails.NETWORK_OUT_OF_ORDE", " it(\"Telephony_Call_DisconnectedDetails_NO_USER_RESPONDING\"", "ber  Telephony_Call_DisconnectedDetails_CALL_REJECTED\n     ", "8).assertEqual(call.DisconnectedDetails.NO_USER_RESPONDING)", "8).assertEqual(call.DisconnectedDetails.INVALID_NUMBER_FORM", "1).assertEqual(call.DisconnectedDetails.TEMPORARY_FAILURE);", "5).assertEqual(call.DisconnectedDetails.INVALID_PARAMETER);", " it(\"Telephony_Call_DisconnectedDetails_NORMAL_CALL_CLEARIN", " it(\"Telephony_Call_DisconnectedDetails_INVALID_PARAMETER\",", " it(\"Telephony_Call_DisconnectedDetails_CALL_REJECTED\",0,as", "ber  Telephony_Call_DisconnectedDetails_DESTINATION_NETWORK", "6).assertEqual(call.DisconnectedDetails.NORMAL_CALL_CLEARIN", "e = 'Telephony_Call_DisconnectedDetails_INVALID_PARAMETER';", "8).assertEqual(call.DisconnectedDetails.OPERATOR_DETERMINED", "ber  Telephony_Call_DisconnectedDetails_INVALID_PARAMETER\n ", "6).assertEqual(call.DisconnectedDetails.SIM_NOT_EXIT);\n    ", " it(\"Telephony_Call_DisconnectedDetails_DESTINATION_OUT_OF_", "e = 'Telephony_Call_DisconnectedDetails_NORMAL_CALL_CLEARIN", " it(\"Telephony_Call_DisconnectedDetails_UNASSIGNED_NUMBER\",", "e = 'Telephony_Call_DisconnectedDetails_NO_USER_RESPONDING'", "7).assertEqual(call.DisconnectedDetails.DESTINATION_OUT_OF_", "e = 'Telephony_Call_DisconnectedDetails_DESTINATION_OUT_OF_", " * @tc.name    Enum DisconnectedDetails\n       * @tc.desc  ", "ber  Telephony_Call_DisconnectedDetails_NO_USER_RESPONDING\n", "ber  Telephony_Call_DisconnectedDetails_DESTINATION_OUT_OF_", "ber  Telephony_Call_DisconnectedDetails_NO_ROUTE_TO_DESTINA", "1).assertEqual(call.DisconnectedDetails.CALL_REJECTED);\n   ", "1).assertEqual(call.DisconnectedDetails.UNASSIGNED_NUMBER);", "6).assertEqual(call.DisconnectedDetails.CHANNEL_UNACCEPTABL", "ber  Telephony_Call_DisconnectedDetails_SIM_PIN_NEED\n      ", "2).assertEqual(call.DisconnectedDetails.NUMBER_CHANGED);\n  ", "e = 'Telephony_Call_DisconnectedDetails_NETWORK_OUT_OF_ORDE", " it(\"Telephony_Call_DisconnectedDetails_DESTINATION_NETWORK", "ber  Telephony_Call_DisconnectedDetails_NORMAL_CALL_CLEARIN", "ber  Telephony_Call_DisconnectedDetails_CHANNEL_UNACCEPTABL", "3).assertEqual(call.DisconnectedDetails.NO_ROUTE_TO_DESTINA"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "UNASSIGNED_NUMBER", "api_method_all": "UNASSIGNED_NUMBER = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails_UNASSIGNED_NUMBER\",0,async function(d", "DisconnectedDetails.UNASSIGNED_NUMBER);\n      expect(3).a", "DisconnectedDetails_UNASSIGNED_NUMBER';\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "NO_ROUTE_TO_DESTINATION", "api_method_all": "NO_ROUTE_TO_DESTINATION = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails_NO_ROUTE_TO_DESTINATION\n       * @tc.name  ", "DisconnectedDetails.NO_ROUTE_TO_DESTINATION);\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "CHANNEL_UNACCEPTABLE", "api_method_all": "CHANNEL_UNACCEPTABLE = 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.CHANNEL_UNACCEPTABLE);\n      expect(8).a", "DisconnectedDetails_CHANNEL_UNACCEPTABLE\",0,async function(d", "DisconnectedDetails_CHANNEL_UNACCEPTABLE';\n      console.log", "DisconnectedDetails_CHANNEL_UNACCEPTABLE\n       * @tc.name  "], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "OPERATOR_DETERMINED_BARRING", "api_method_all": "OPERATOR_DETERMINED_BARRING = 8,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.OPERATOR_DETERMINED_BARRING);\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "NORMAL_CALL_CLEARING", "api_method_all": "NORMAL_CALL_CLEARING = 16,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.NORMAL_CALL_CLEARING);\n      expect(17).", "DisconnectedDetails_NORMAL_CALL_CLEARING\",0,async function(d", "DisconnectedDetails_NORMAL_CALL_CLEARING\n       * @tc.name  ", "DisconnectedDetails_NORMAL_CALL_CLEARING';\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "USER_BUSY", "api_method_all": "USER_BUSY = 17,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.USER_BUSY);\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "NO_USER_RESPONDING", "api_method_all": "NO_USER_RESPONDING = 18,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.NO_USER_RESPONDING);\n      expect(19).", "DisconnectedDetails_NO_USER_RESPONDING\",0,async function(d", "DisconnectedDetails_NO_USER_RESPONDING';\n      console.log", "DisconnectedDetails_NO_USER_RESPONDING\n       * @tc.name  "], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "USER_ALERTING_NO_ANSWER", "api_method_all": "USER_ALERTING_NO_ANSWER = 19,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.USER_ALERTING_NO_ANSWER);\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "CALL_REJECTED", "api_method_all": "CALL_REJECTED = 21,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.CALL_REJECTED);\n      expect(22).", "DisconnectedDetails_CALL_REJECTED\",0,async function(d", "DisconnectedDetails_CALL_REJECTED';\n      console.log", "DisconnectedDetails_CALL_REJECTED\n       * @tc.name  "], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "NUMBER_CHANGED", "api_method_all": "NUMBER_CHANGED = 22,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.NUMBER_CHANGED);\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "DESTINATION_OUT_OF_ORDER", "api_method_all": "DESTINATION_OUT_OF_ORDER = 27,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails_DESTINATION_OUT_OF_ORDER';\n      console.log", "DisconnectedDetails_DESTINATION_OUT_OF_ORDER\",0,async function(d", "DisconnectedDetails.DESTINATION_OUT_OF_ORDER);\n      expect(28).", "DisconnectedDetails_DESTINATION_OUT_OF_ORDER\n       * @tc.name  "], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "INVALID_NUMBER_FORMAT", "api_method_all": "INVALID_NUMBER_FORMAT = 28,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.INVALID_NUMBER_FORMAT);\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "NETWORK_OUT_OF_ORDER", "api_method_all": "NETWORK_OUT_OF_ORDER = 38,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["Details_DESTINATION_NETWORK_OUT_OF_ORDER\",0,async function(d", "DisconnectedDetails.NETWORK_OUT_OF_ORDER);\n      expect(41).", "DisconnectedDetails_NETWORK_OUT_OF_ORDER';\n      console.log", "Details_DESTINATION_NETWORK_OUT_OF_ORDER\n       * @tc.name  "], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "TEMPORARY_FAILURE", "api_method_all": "TEMPORARY_FAILURE = 41,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.TEMPORARY_FAILURE);\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "INVALID_PARAMETER", "api_method_all": "INVALID_PARAMETER = 1025,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails_INVALID_PARAMETER\",0,async function(d", "DisconnectedDetails_INVALID_PARAMETER\n       * @tc.name  ", "DisconnectedDetails.INVALID_PARAMETER);\n      expect(1026", "DisconnectedDetails_INVALID_PARAMETER';\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "SIM_NOT_EXIT", "api_method_all": "SIM_NOT_EXIT = 1026,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.SIM_NOT_EXIT);\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "SIM_PIN_NEED", "api_method_all": "SIM_PIN_NEED = 1027,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails_SIM_PIN_NEED';\n      console.log", "DisconnectedDetails_SIM_PIN_NEED\",0,async function(d", "DisconnectedDetails_SIM_PIN_NEED\n       * @tc.name  ", "DisconnectedDetails.SIM_PIN_NEED);\n      expect(1029"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "CALL_NOT_ALLOW", "api_method_all": "CALL_NOT_ALLOW = 1029,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.CALL_NOT_ALLOW);\n      console.log"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "SIM_INVALID", "api_method_all": "SIM_INVALID = 1045,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["DisconnectedDetails.SIM_INVALID);\n      console.log", "DisconnectedDetails_SIM_INVALID\n       * @tc.name  ", "DisconnectedDetails_SIM_INVALID';\n      console.log", "DisconnectedDetails.SIM_INVALID);\n      expect(1045", "DisconnectedDetails_SIM_INVALID\",0,async function(d"], "files": ["CallJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DisconnectedDetails", "api_method_name": "UNKNOWN", "api_method_all": "UNKNOWN = 1279,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 27, "since": 0, "api_used": "\u662f", "lines": ["ectState.DATA_STATE_UNKNOWN);\n      console.log", "      radio.NETWORK_UNKNOWN,\n      radio.NETWOR", "e();\n    expect(sim.UNKNOWN_CARD === env.CONSTA", "ct(sms.SMS_ENCODING_UNKNOWN == 0).assertTrue();", "tate === CALL_STATE_UNKNOWN || callState === CA", " radio.NETWORK_TYPE_UNKNOWN,\n      radio.NETWOR", " type: sim.CardType.UNKNOWN_CARD\n      }\n      ", "ct(cardType === sim.UNKNOWN_CARD).assertTrue();", "IST,\n    CALL_STATE_UNKNOWN,\n    CALL_STATE_IDL", "o.NETWORK_SELECTION_UNKNOWN === 0).assertTrue()", "D === env.CONSTANTS.UNKNOWN_CARD).assertTrue();", "xpect(sim.SIM_STATE_UNKNOWN === env.CONSTANTS.S", "ate_DATA_DATA_STATE_UNKNOWN';\n      console.log", "(radio.NETWORK_TYPE_UNKNOWN === 0).assertTrue()", "=== radio.NR_OPTION_UNKNOWN).assertTrue();\n    ", "ectState_DATA_STATE_UNKNOWN\", 0, async function", "rt const CALL_STATE_UNKNOWN = -1;\nexport const ", "CONSTANTS.SIM_STATE_UNKNOWN).assertTrue();\n    ", "ectState.DATA_STATE_UNKNOWN,\n          cellular", "xpect(radio.NETWORK_UNKNOWN === 0).assertTrue()", "    radio.NR_OPTION_UNKNOWN,\n      radio.NR_OPT", "adioTech = [\n      'UNKNOWN', 'GSM', '1XRTT', '", ".SimState.SIM_STATE_UNKNOWN\n      }\n      expec", "ms.SEND_SMS_FAILURE_UNKNOWN).assertTrue();\n    ", "io.RADIO_TECHNOLOGY_UNKNOWN === 0).assertTrue()"], "files": ["SmsMmsJsunit.test.ets", "DataJsunit.test.ets", "ObserverJsunit.test.ets", "NetworkSearchErrors.test.js", "SimManager.test.js", "RadioSecondJsunit.test.ets", "CallManageAll.test.js", "SmsMmsError.test.js", "Const.js"], "is_white": " ", "desc": " "}]}