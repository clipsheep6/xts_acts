{"subsystem_ch": "\u5206\u5e03\u5f0f\u6570\u636e\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "distributeddatamgr", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.data.distributedData", "api": [{"api_class_name": "distributedData", "api_method_all": "declare namespace distributedData {\n    \n    interface KVManagerConfig {\n        \n        userInfo: UserInfo;\n\n        \n        bundleName: string;\n    }\n\n    \n    interface UserInfo {\n        \n        userId?: string;\n\n        \n        userType?: UserType;\n    }\n\n    \n    enum UserType {\n        \n        SAME_USER_ID = 0\n    }\n\n    \n    namespace Constants {\n        \n        const MAX_KEY_LENGTH = 1024;\n\n        \n        const MAX_VALUE_LENGTH = 4194303;\n\n        \n        const MAX_KEY_LENGTH_DEVICE = 896;\n\n        \n        const MAX_STORE_ID_LENGTH = 128;\n\n        \n        const MAX_QUERY_LENGTH = 512000;\n\n        \n        const MAX_BATCH_SIZE = 128;\n    }\n\n    \n    enum ValueType {\n        \n        STRING = 0,\n\n        \n        INTEGER = 1,\n\n        \n        FLOAT = 2,\n\n        \n        BYTE_ARRAY = 3,\n\n        \n        BOOLEAN = 4,\n\n        \n        DOUBLE = 5\n    }\n\n    \n    interface Value {\n        \n        type: ValueType;\n        \n        value: Uint8Array | string | number | boolean;\n    }\n\n    \n    interface Entry {\n        \n        key: string;\n        \n        value: Value;\n    }\n\n    \n    interface ChangeNotification {\n        \n        insertEntries: Entry[];\n        \n        updateEntries: Entry[];\n        \n        deleteEntries: Entry[];\n        \n        deviceId: string;\n    }\n\n    \n    enum SyncMode {\n        \n        PULL_ONLY = 0,\n        \n        PUSH_ONLY = 1,\n        \n        PUSH_PULL = 2\n    }\n\n    \n    enum SubscribeType {\n        \n        SUBSCRIBE_TYPE_LOCAL = 0,\n\n        \n        SUBSCRIBE_TYPE_REMOTE = 1,\n\n        \n        SUBSCRIBE_TYPE_ALL = 2,\n    }\n\n    \n    enum KVStoreType {\n        \n        DEVICE_COLLABORATION = 0,\n\n        \n        SINGLE_VERSION = 1,\n\n        \n        MULTI_VERSION = 2,\n    }\n\n    \n    enum SecurityLevel {\n        \n        NO_LEVEL = 0,\n\n        \n        S0 = 1,\n\n        \n        S1 = 2,\n\n        \n        S2 = 3,\n\n        \n        S3 = 5,\n\n        \n        S4 = 6,\n    }\n\n    \n    interface Options {\n        \n        createIfMissing?: boolean;\n        \n        encrypt?: boolean;\n        \n        backup?: boolean;\n        \n        autoSync?: boolean;\n        \n        kvStoreType?: KVStoreType;\n        \n        securityLevel?: SecurityLevel;\n        \n        schema?: Schema;\n    }\n\n    \n    class Schema {\n        \n        constructor()\n        \n\t\troot: FieldNode;  \n        \n        indexes: Array<string>;    \n        \n        mode: number;\n        \n        skip: number;\n    }\n\n    \n    class FieldNode {\n        \n        constructor(name: string)\n        \n        appendChild(child: FieldNode): boolean;\n        \n         default: string;\n         \n         nullable: boolean;\n         \n         type: number;\n    }\n\n    \n    interface KvStoreResultSet {\n        \n        getCount(): number;\n        \n        getPosition(): number;\n        \n        moveToFirst(): boolean;\n        \n        moveToLast(): boolean;\n        \n        moveToNext(): boolean;\n        \n        moveToPrevious(): boolean;\n        \n        move(offset: number): boolean;\n        \n        moveToPosition(position: number): boolean;\n        \n        isFirst(): boolean;\n        \n        isLast(): boolean;\n        \n        isBeforeFirst(): boolean;\n        \n        isAfterLast(): boolean;\n        \n        getEntry(): Entry;\n    }\n\n    \n    class Query {\n        \n        constructor()        \n        \n        reset(): Query;\n        \n        equalTo(field: string, value: number|string|boolean): Query;\n        \n        notEqualTo(field: string, value: number|string|boolean): Query;\n        \n        greaterThan(field: string, value: number|string|boolean): Query;\n        \n        lessThan(field: string, value: number|string): Query;\n        \n        greaterThanOrEqualTo(field: string, value: number|string): Query;\n        \n        lessThanOrEqualTo(field: string, value: number|string): Query;\n        \n        isNull(field: string): Query;\n        \n        inNumber(field: string, valueList: number[]): Query;\n        \n        inString(field: string, valueList: string[]): Query;\n        \n        notInNumber(field: string, valueList: number[]): Query;\n        \n        notInString(field: string, valueList: string[]): Query;\n        \n        like(field: string, value: string): Query;\n        \n        unlike(field: string, value: string): Query;\n        \n        and(): Query;\n        \n        or(): Query;\n        \n        orderByAsc(field: string): Query;\n        \n        orderByDesc(field: string): Query;\n        \n        limit(total: number, offset: number): Query;\n        \n        isNotNull(field: string): Query;\n        \n        beginGroup(): Query;\n        \n        endGroup(): Query;\n        \n        prefixKey(prefix: string): Query;\n        \n        setSuggestIndex(index: string): Query;\n\t\t\n\t\tdeviceId(deviceId:string):Query;\n\t\t\n\t\tgetSqlLike():string;\n    }\n\n    \n    interface KVStore {\n        \n        put(key: string, value: Uint8Array | string | number | boolean, callback: AsyncCallback<void>): void;\n        put(key: string, value: Uint8Array | string | number | boolean): Promise<void>;\n\n        \n        delete(key: string, callback: AsyncCallback<void>): void;\n        delete(key: string): Promise<void>;\n\n        \n        on(event: 'dataChange', type: SubscribeType, observer: Callback<ChangeNotification>): void;\n\n        \n        on(event: 'syncComplete', syncCallback: Callback<Array<[string, number]>>): void;\n\t\t\n        \n        off(event:'dataChange', observer?: Callback<ChangeNotification>): void;\n\n        \n        putBatch(entries: Entry[], callback: AsyncCallback<void>): void;\n        putBatch(entries: Entry[]): Promise<void>;\n\n        \n        deleteBatch(keys: string[], callback: AsyncCallback<void>): void;\n        deleteBatch(keys: string[]): Promise<void>;\n\n        \n        startTransaction(callback: AsyncCallback<void>): void;\n        startTransaction(): Promise<void>;\n\n        \n        commit(callback: AsyncCallback<void>): void;\n        commit(): Promise<void>;\n\n        \n        rollback(callback: AsyncCallback<void>): void;\n        rollback(): Promise<void>;\n\n        \n        enableSync(enabled: boolean, callback: AsyncCallback<void>): void;\n        enableSync(enabled: boolean): Promise<void>;\n\n        \n        setSyncRange(localLabels: string[], remoteSupportLabels: string[], callback: AsyncCallback<void>): void;\n        setSyncRange(localLabels: string[], remoteSupportLabels: string[]): Promise<void>;\n    }\n\n    \n    interface SingleKVStore extends KVStore {\n        \n        get(key: string, callback: AsyncCallback<Uint8Array | string | boolean | number>): void;\n        get(key: string): Promise<Uint8Array | string | boolean | number>;\n\n        \n        getEntries(keyPrefix: string, callback: AsyncCallback<Entry[]>): void;\n        getEntries(keyPrefix: string): Promise<Entry[]>;\n\n        \n        getEntries(query: Query, callback: AsyncCallback<Entry[]>): void;\n        getEntries(query: Query): Promise<Entry[]>;\n\n        \n        getResultSet(keyPrefix: string, callback: AsyncCallback<KvStoreResultSet>): void;\n        getResultSet(keyPrefix: string): Promise<KvStoreResultSet>;\n\n        \n        getResultSet(query: Query, callback: AsyncCallback<KvStoreResultSet>): void;\n        getResultSet(query: Query): Promise<KvStoreResultSet>;\n\n        \n        closeResultSet(resultSet: KvStoreResultSet, callback: AsyncCallback<void>): void;\n        closeResultSet(resultSet: KvStoreResultSet): Promise<void>;\n\n        \n        getResultSize(query: Query, callback: AsyncCallback<number>): void;\n        getResultSize(query: Query): Promise<number>;\n\n        \n        removeDeviceData(deviceId: string, callback: AsyncCallback<void>): void;\n        removeDeviceData(deviceId: string): Promise<void>;\n\n        \n         sync(deviceIdList: string[], mode: SyncMode, allowedDelayMs?: number): void;\n\n         \n         on(event: 'syncComplete', syncCallback: Callback<Array<[string, number]>>): void;\n\n         \n         off(event: 'syncComplete', syncCallback?: Callback<Array<[string, number]>>): void;\n\t \n\t \n         \n         setSyncParam(defaultAllowedDelayMs: number, callback: AsyncCallback<void>): void;\n         setSyncParam(defaultAllowedDelayMs: number): Promise<void>;\n\n         \n         getSecurityLevel(callback: AsyncCallback<SecurityLevel>): void;\n         getSecurityLevel(): Promise<SecurityLevel>;\n    }\n\n    \n    interface DeviceKVStore extends KVStore {\n        \n         get(deviceId: string, key: string, callback: AsyncCallback<boolean|string|number|Uint8Array>): void;\n         get(deviceId: string, key: string): Promise<boolean|string|number|Uint8Array>;\n\n         \n         getEntries(deviceId: string, keyPrefix: string, callback: AsyncCallback<Entry[]>): void;\n         getEntries(deviceId: string, keyPrefix: string): Promise<Entry[]>;\n\n         \n         getEntries(query: Query, callback: AsyncCallback<Entry[]>): void;\n         getEntries(query: Query): Promise<Entry[]>;\n\n         \n         getEntries(deviceId: string, query: Query, callback: AsyncCallback<Entry[]>): void;\n         getEntries(deviceId: string, query: Query): Promise<Entry[]>;\n\n         \n         getResultSet(deviceId: string, keyPrefix: string, callback: AsyncCallback<KvStoreResultSet>): void;\n         getResultSet(deviceId: string, keyPrefix: string): Promise<KvStoreResultSet>;\n\n         \n         getResultSet(query: Query, callback: AsyncCallback<KvStoreResultSet>): void;\n         getResultSet(query: Query): Promise<KvStoreResultSet>;\n\n         \n         getResultSet(deviceId: string, query: Query, callback: AsyncCallback<KvStoreResultSet>): void;\n         getResultSet(deviceId: string, query: Query): Promise<KvStoreResultSet>;\n\n         \n         closeResultSet(resultSet: KvStoreResultSet, callback: AsyncCallback<void>): void;\n         closeResultSet(resultSet: KvStoreResultSet): Promise<void>;\n\n         \n         getResultSize(query: Query, callback: AsyncCallback<number>): void;\n         getResultSize(query: Query): Promise<number>;\n\n         \n         getResultSize(deviceId: string, query: Query, callback: AsyncCallback<number>): void;\n         getResultSize(deviceId: string, query: Query): Promise<number>;\n\n         \n         removeDeviceData(deviceId: string, callback: AsyncCallback<void>): void;\n         removeDeviceData(deviceId: string): Promise<void>;\n         \n        \n        sync(deviceIdList: string[], mode: SyncMode, allowedDelayMs?: number): void;\n\n        \n        on(event: 'syncComplete', syncCallback: Callback<Array<[string, number]>>): void;\n\n        \n        off(event: 'syncComplete', syncCallback?: Callback<Array<[string, number]>>): void;\n    }\n    \n    \n    function createKVManager(config: KVManagerConfig, callback: AsyncCallback<KVManager>): void;\n    function createKVManager(config: KVManagerConfig): Promise<KVManager>;\n\n    \n    interface KVManager {\n        \n        getKVStore<T extends KVStore>(storeId: string, options: Options): Promise<T>;\n        getKVStore<T extends KVStore>(storeId: string, options: Options, callback: AsyncCallback<T>): void;\n\n        \n        closeKVStore(appId: string, storeId: string, kvStore: KVStore, callback: AsyncCallback<void>): void;\n        closeKVStore(appId: string, storeId: string, kvStore: KVStore): Promise<void>;\n\n        \n        deleteKVStore(appId: string, storeId: string, callback: AsyncCallback<void>): void;\n        deleteKVStore(appId: string, storeId: string): Promise<void>;\n\n        \n        getAllKVStoreId(appId: string, callback: AsyncCallback<string[]>): void;\n        getAllKVStoreId(appId: string): Promise<string[]>;\n\n        \n        on(event: 'distributedDataServiceDie', deathCallback: Callback<void>): void;\n\n        \n        off(event: 'distributedDataServiceDie', deathCallback?: Callback<void>): void;\n    }\n}", "api_method_name": "distributedData", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 32, "since": 0, "api_used": "\u662f", "lines": ["dm from '@ohos.data.distributedData';\n\ndescribe('QueryT", "dm from '@ohos.data.distributedData';\n\nconst TEST_BUNDL", "ry from '@ohos.data.distributedData'\n\nconst KEY_TEST_IN", "dm from '@ohos.data.distributedData';\n\ndescribe('FieldN", "      kvManager.on('distributedDataServiceDie', deathCa", "     kvManager.off('distributedDataServiceDie');\n      ", "ry from '@ohos.data.distributedData';\n\nconst TEST_BUNDL", "     kvManager.off('distributedDataServiceDie', deathCa", "ct from '@ohos.data.distributedDataObject';\n\nvar baseLi", "ry from '@ohos.data.distributedData';\n\ndescribe('KvStor"], "files": ["DeviceKvStorePromiseJsunit.test.js", "FieldNodeJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "QueryJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "distributedData", "api_method_name": "createKVManager", "api_method_all": "function createKVManager(config: KVManagerConfig, callback: AsyncCallback<KVManager>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["ole.log(\"beforeAll: createKVManager (single) with \" + JSON.stringify(option", "sole.log('beforeAll createKVManager success');\n            }).catch((err) =", "sole.log('beforeAll createKVManager success');\n        }).catch((err) => {\n", "sole.log('beforeAll createKVManager err ' + err);\n            });\n        }", "sole.log('beforeAll createKVManager err ' + err);\n        });\n        await", "sole.log('beforeAll createKVManager err ' + err);\n        });\n        conso", "      await factory.createKVManager(config, function (err, manager) {\n     ", "sole.log('beforeAll createKVManager success');\n            done();\n        "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "distributedData", "api_method_name": "createKVManager", "api_method_all": "function createKVManager(config: KVManagerConfig): Promise<KVManager>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["          await ddm.createKVManager(config).then((manager) => {\n           ", "      await factory.createKVManager(config).then((manager) => {\n           "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManagerConfig", "api_method_all": "interface KVManagerConfig {\n        \n        userInfo: UserInfo;\n\n        \n        bundleName: string;\n    }", "api_method_name": "KVManagerConfig", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "KVManagerConfig", "api_method_name": "userInfo", "api_method_all": "userInfo: UserInfo", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["UNDLE_NAME,\n        userInfo : {\n            use"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManagerConfig", "api_method_name": "bundleName", "api_method_all": "bundleName: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["et dseWant = {\n    \"bundleName\": \"com.examples.dat", " config = {\n        bundleName : TEST_BUNDLE_NAME,"], "files": ["DeviceKvStorePromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "DataShareJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UserInfo", "api_method_all": "interface UserInfo {\n        \n        userId?: string;\n\n        \n        userType?: UserType;\n    }", "api_method_name": "UserInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "UserInfo", "api_method_name": "userId", "api_method_all": "userId?: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 27, "since": 7, "api_used": "\u662f", "lines": ["  objects.push(user.userId);\n            objec", "R JOIN Book ON user.userId = Book.id WHERE Boo", "0.51},\n            {userId:4, firstName:\"sun\",", "\"\n    + \"name TEXT, userId INTEGER , \"\n    + \"", "0.51},\n            {userId:2, firstName:\"Li\", ", "TER JOIN Book USING(userId) WHERE Book.name = ", "  objects.push(book.userId);\n        });\n\n    ", "nfo : {\n            userId : '0',\n            ", "ISTS user \"\n    + \"(userId INTEGER PRIMARY KEY", "d) REFERENCES user (userId) ON UPDATE NO ACTIO", "0.51},\n            {userId:3, firstName:\"wang\"", " INTO user\"\n    + \"(userId, firstName, lastNam", ":2, name:\"xiyouji\", userId:2},\n            {id", "0.51},\n            {userId:5, firstName:\"ma\", ", "NTO Book (id, name, userId) \"\n    + \"VALUES (?", "    + \"FOREIGN KEY (userId) REFERENCES user (u", "d:1, name:\"sanguo\", userId:1},\n            {id", "name:\"shuihuchuan\", userId:3},\n        ]\n\n    ", "rs = [\n            {userId:1, firstName:\"Zhang", "OSS JOIN Book USING(userId) WHERE Book.name = "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UserInfo", "api_method_name": "userType", "api_method_all": "userType?: UserType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": [" : '0',\n            userType : ddm.UserType.SAME", " : '0',\n            userType : factory.UserType."], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UserType", "api_method_all": "enum UserType {\n        \n        SAME_USER_ID = 0\n    }", "api_method_name": "UserType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["     userType : ddm.UserType.SAME_USER_ID\n      ", " userType : factory.UserType.SAME_USER_ID\n      ", "ameUserId = factory.UserType.SAME_USER_ID;\n     "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "UserType", "api_method_name": "SAME_USER_ID", "api_method_all": "SAME_USER_ID = 0", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": [" : factory.UserType.SAME_USER_ID\n        }\n    }\n\n  ", "Type : ddm.UserType.SAME_USER_ID\n        }\n    }\n\n  ", " = factory.UserType.SAME_USER_ID;\n        console.in"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Constants", "api_method_all": "namespace Constants {\n        \n        const MAX_KEY_LENGTH = 1024;\n\n        \n        const MAX_VALUE_LENGTH = 4194303;\n\n        \n        const MAX_KEY_LENGTH_DEVICE = 896;\n\n        \n        const MAX_STORE_ID_LENGTH = 128;\n\n        \n        const MAX_QUERY_LENGTH = 512000;\n\n        \n        const MAX_BATCH_SIZE = 128;\n    }", "api_method_name": "Constants", "api_type": "", "api_level": 35, "api_args_count": 0, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": [")\n\n    \n    it('testConstantsMaxValueLength_001',", "eIdLength = factory.Constants.MAX_STORE_ID_LENGTH", ")\n\n    \n    it('testConstantsMaxQueryLength_001',", ")\n\n    \n    it('testConstantsMaxValueLength_002',", "     expect(factory.Constants.MAX_VALUE_LENGTH).a", "eryLength = factory.Constants.MAX_QUERY_LENGTH;\n ", ")\n\n    \n    it('testConstantsMaxStoreIdLength_001", "KeyLength = factory.Constants.MAX_KEY_LENGTH;\n   ", "lueLength = factory.Constants.MAX_VALUE_LENGTH;\n ", "gthDevice = factory.Constants.MAX_KEY_LENGTH_DEVI", "BatchSize = factory.Constants.MAX_BATCH_SIZE;\n   ", ")\n\n    \n    it('testConstantsMaxKeyLengthDevice_0", ")\n\n    \n    it('testConstantsMaxBatchSize_001', 0", "            factory.Constants.MAX_VALUE_LENGTH = ", ")\n\n    \n    it('testConstantsMaxKeyLength_001', 0"], "files": ["SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ValueType", "api_method_all": "enum ValueType {\n        \n        STRING = 0,\n\n        \n        INTEGER = 1,\n\n        \n        FLOAT = 2,\n\n        \n        BYTE_ARRAY = 3,\n\n        \n        BOOLEAN = 4,\n\n        \n        DOUBLE = 5\n    }", "api_method_name": "ValueType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 80, "since": 7, "api_used": "\u662f", "lines": ["     type : factory.ValueType.INTEGER,\n          ", " english.type = ddm.ValueType.STRING;\n           ", "     type : factory.ValueType.BOOLEAN,\n          ", "   first.type = ddm.ValueType.STRING;\n           ", "         type : ddm.ValueType.STRING,\n           ", "     type : factory.ValueType.DOUBLE,\n           ", "t(node.type === ddm.ValueType.BOOLEAN).assertTrue", "     type : factory.ValueType.FLOAT,\n            ", "  second.type = ddm.ValueType.STRING;\n           ", "    name.type = ddm.ValueType.INTEGER;\n          ", " english.type = ddm.ValueType.STRING;\n\n          ", "     type : factory.ValueType.STRING,\n           ", "     type : factory.ValueType.BYTE_ARRAY,\n       "], "files": ["DeviceKvStorePromiseJsunit.test.js", "FieldNodeJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ValueType", "api_method_name": "STRING", "api_method_all": "STRING = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 198, "since": 7, "api_used": "\u662f", "lines": [" mPref.put(KEY_TEST_STRING_ELEMENT, '', functi", "an';\nconst KEY_TEST_STRING_ELEMENT = 'key_test", " mPref.put(KEY_TEST_STRING_ELEMENT, '');\n     ", "ef.getSync(KEY_TEST_STRING_ELEMENT, \"defaultva", " mPref.get(KEY_TEST_STRING_ELEMENT, \"defaultva", "ef.putSync(KEY_TEST_STRING_ELEMENT, '');\n     ", "ef.putSync(KEY_TEST_STRING_ELEMENT, \"abcd\");\n ", "ef.getSync(KEY_TEST_STRING_ELEMENT, 0));\n    }", " mPref.get(KEY_TEST_STRING_ELEMENT, \"defaultVa", "ef.getSync(KEY_TEST_STRING_ELEMENT, \"default\")", "ef.putSync(KEY_TEST_STRING_ELEMENT, \"test\");\n ", "ef.getSync(KEY_TEST_STRING_ELEMENT, \"defaultVa", " mPref.put(KEY_TEST_STRING_ELEMENT, 'test');\n ", "deleteSync(KEY_TEST_STRING_ELEMENT);\n         ", " mPref.has(KEY_TEST_STRING_ELEMENT);\n        p", "ef.putSync(KEY_TEST_STRING_ELEMENT, \"abc\");\n  ", "ef.hasSync(KEY_TEST_STRING_ELEMENT));\n    })\n\n", " mPref.has(KEY_TEST_STRING_ELEMENT, function (", "ef.getSync(KEY_TEST_STRING_ELEMENT, 0.0));\n   "], "files": ["DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "FieldNodeJsunit.test.js", "StorageCallBackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvStoreResultSetJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ValueType", "api_method_name": "INTEGER", "api_method_all": "INTEGER = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 67, "since": 7, "api_used": "\u662f", "lines": [" TEXT ,\"\n    + \"age INTEGER , balance REAL  NOT", "XT , \"\n+ \"byteValue INTEGER , dateValue INTEGER", "INTEGER , longValue INTEGER , shortValue INTEGE", "GER , primByteValue INTEGER , primCharValue TEX", "XISTS test (\" + \"id INTEGER PRIMARY KEY AUTOINC", "llDataType \"\n+ \"(id INTEGER PRIMARY KEY AUTOINC", "XISTS test (' + 'id INTEGER PRIMARY KEY AUTOINC", ", \"\n+ \"integerValue INTEGER , longValue INTEGER", "er \"\n    + \"(userId INTEGER PRIMARY KEY AUTOINC", "TEXT , primIntValue INTEGER , primLongValue INT", "+ \"primBooleanValue INTEGER , primByteValue INT", "               \"age INTEGER)\"\n            try {", " NOT NULL, \" + \"age INTEGER, \" + \"salary REAL, ", " NOT NULL, ' + 'age INTEGER, ' + 'salary REAL, ", "GER , primLongValue INTEGER , \"\n+ \"primShortVal", "                \"id INTEGER PRIMARY KEY AUTOINC", "NOT EXISTS Book (id INTEGER PRIMARY KEY AUTOINC", "XISTS test (\" + \"id INTEGER PRIMARY KEY, \" + \"n", " \"name TEXT, userId INTEGER , \"\n    + \"FOREIGN ", "EGER , booleanValue INTEGER , \"\n+ \"doubleValue ", "INTEGER , timeValue INTEGER , timestampValue IN", "INTEGER , dateValue INTEGER , timeValue INTEGER", "NTEGER , shortValue INTEGER , booleanValue INTE", "            \"vendor INTEGER,\" +\n               ", " \"\n+ \"calendarValue INTEGER , characterValue TE", "\"\n+ \"primShortValue INTEGER , primFloatValue RE", "ER , timestampValue INTEGER , \"\n+ \"calendarValu", "Value TEXT, `order` INTEGER);\";\n\nconst STORE_CO"], "files": ["RdbstorePredicatesJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "QueryJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ValueType", "api_method_name": "FLOAT", "api_method_all": "FLOAT = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 132, "since": 7, "api_used": "\u662f", "lines": ["ef.putSync(KEY_TEST_FLOAT_ELEMENT, 4.0);\n    ", "ef.putSync(KEY_TEST_FLOAT_ELEMENT, 3.0);\n    ", "DEVICEKVSTORE_DELETEFLOAT_1200\n     * @tc.nam", "ore.delete(KEY_TEST_FLOAT_ELEMENT, function (", "ng';\nconst KEY_TEST_FLOAT_ELEMENT = 'key_test", "ELEMENT, VALUE_TEST_FLOAT_ELEMENT, async func", "GR_DEVICEKVSTORE_GETFLOAT_1100\n     * @tc.nam", " mPref.get(KEY_TEST_FLOAT_ELEMENT, 0.0, funct", " mPref.put(KEY_TEST_FLOAT_ELEMENT, 4.0, funct", "GR_DEVICEKVSTORE_PUTFLOAT_1400\n     * @tc.nam", "lDeviceId, KEY_TEST_FLOAT_ELEMENT, function (", "GR_DEVICEKVSTORE_PUTFLOAT_1300\n     * @tc.nam", " mPref.get(KEY_TEST_FLOAT_ELEMENT, 0.0);\n    ", "DEVICEKVSTORE_DELETEFLOAT_1100\n     * @tc.nam", " mPref.has(KEY_TEST_FLOAT_ELEMENT);\n        p", "_2';\nconst KEY_TEST_FLOAT_ELEMENT = 'key_test", "vStore.put(KEY_TEST_FLOAT_ELEMENT, VALUE_TEST", "GR_DEVICEKVSTORE_PUTFLOAT_1200\n     * @tc.nam", " mPref.has(KEY_TEST_FLOAT_ELEMENT, function (", "ef.getSync(KEY_TEST_FLOAT_ELEMENT, 1.0));\n   ", "vStore.put(KEY_TEST_FLOAT_ELEMENT, floatValue", "ef.hasSync(KEY_TEST_FLOAT_ELEMENT));\n    })\n\n", "ef.getSync(KEY_TEST_FLOAT_ELEMENT, 0.0));\n   ", "4;\nconst VALUE_TEST_FLOAT_ELEMENT = 4321.12;\n", "ef.putSync(KEY_TEST_FLOAT_ELEMENT, 1.1);\n    ", "ELEMENT, VALUE_TEST_FLOAT_ELEMENT, function (", " mPref.put(KEY_TEST_FLOAT_ELEMENT, 4.0);\n    ", "ef.putSync(KEY_TEST_FLOAT_ELEMENT, 2.0);\n    "], "files": ["DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "FieldNodeJsunit.test.js", "StorageCallBackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ValueType", "api_method_name": "BYTE_ARRAY", "api_method_all": "BYTE_ARRAY = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 15, "since": 7, "api_used": "\u662f", "lines": [": factory.ValueType.BYTE_ARRAY,\n                  ", "= factory.ValueType.BYTE_ARRAY;\n        console.in", "e.type === ddm.type.BYTE_ARRAY).assertTrue()\n     ", "ode.type = ddm.type.BYTE_ARRAY;\n            consol"], "files": ["DeviceKvStorePromiseJsunit.test.js", "FieldNodeJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ValueType", "api_method_name": "BOOLEAN", "api_method_all": "BOOLEAN = 4,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 70, "since": 7, "api_used": "\u662f", "lines": ["vStore.put(KEY_TEST_BOOLEAN_ELEMENT, boolValue)", "ELEMENT, VALUE_TEST_BOOLEAN_ELEMENT).then(async", "ELEMENT, VALUE_TEST_BOOLEAN_ELEMENT, async func", "ef.getSync(KEY_TEST_BOOLEAN_ELEMENT, true));\n  ", " mPref.has(KEY_TEST_BOOLEAN_ELEMENT, function (", "vStore.put(KEY_TEST_BOOLEAN_ELEMENT, VALUE_TEST", "e === ddm.ValueType.BOOLEAN).assertTrue()\n     ", ": factory.ValueType.BOOLEAN,\n                  ", " mPref.put(KEY_TEST_BOOLEAN_ELEMENT, true, func", "lDeviceId, KEY_TEST_BOOLEAN_ELEMENT).then((data", "ef.putSync(KEY_TEST_BOOLEAN_ELEMENT, true);\n   ", "at';\nconst KEY_TEST_BOOLEAN_ELEMENT = 'key_test", "ELEMENT, VALUE_TEST_BOOLEAN_ELEMENT, function (", " mPref.has(KEY_TEST_BOOLEAN_ELEMENT);\n        p", "vStore.get(KEY_TEST_BOOLEAN_ELEMENT, function (", "lDeviceId, KEY_TEST_BOOLEAN_ELEMENT, function (", "_2';\nconst KEY_TEST_BOOLEAN_ELEMENT = 'key_test", "2;\nconst VALUE_TEST_BOOLEAN_ELEMENT = true;\ncon", "ore.delete(KEY_TEST_BOOLEAN_ELEMENT).then((data", "ode.type = ddm.type.BOOLEAN;\n            consol", "ore.delete(KEY_TEST_BOOLEAN_ELEMENT, function (", "ned) && (VALUE_TEST_BOOLEAN_ELEMENT == data)).a", "ef.getSync(KEY_TEST_BOOLEAN_ELEMENT, false));\n ", "ef.putSync(KEY_TEST_BOOLEAN_ELEMENT, false);\n  ", "ELEMENT, VALUE_TEST_BOOLEAN_ELEMENT).then((data", "ef.hasSync(KEY_TEST_BOOLEAN_ELEMENT));\n    })\n\n", " mPref.put(KEY_TEST_BOOLEAN_ELEMENT, true);\n   "], "files": ["DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "FieldNodeJsunit.test.js", "StorageCallBackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ValueType", "api_method_name": "DOUBLE", "api_method_all": "DOUBLE = 5", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 28, "since": 7, "api_used": "\u662f", "lines": [": factory.ValueType.DOUBLE,\n                  ", "                 |  DOUBLE    * not-typedArray", "= factory.ValueType.DOUBLE;\n        console.in", "e.type === ddm.type.DOUBLE).assertTrue()\n     ", "\"doubleValue\", 0.0, DOUBLE_MAX);\n            l", "alTo(\"doubleValue\", DOUBLE_MAX);\n            l", "      var values = [DOUBLE_MAX.toString()];\n  ", "ode.type = ddm.type.DOUBLE;\n            consol", "Value\", DOUBLE_MAX, DOUBLE_MAX);\n            l", "32Array          |  DOUBLE\n    *           Flo", "ween(\"doubleValue\", DOUBLE_MAX, DOUBLE_MAX);\n ", "64Array          |  DOUBLE\n    *           Big", ".toString(), \"1.0\", DOUBLE_MAX.toString()];\n  ", "re = undefined;\nvar DOUBLE_MAX = 9223372036854", "     \"doubleValue\": DOUBLE_MAX,\n              "], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "FieldNodeJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Value", "api_method_all": "interface Value {\n        \n        type: ValueType;\n        \n        value: Uint8Array | string | number | boolean;\n    }", "api_method_name": "Value", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 570, "since": 7, "api_used": "\u662f", "lines": ["ingValue TEXT , blobValue BLOB , clobValue TE", "               \"blobValue\": u8,\n             ", "             \"doubleValue\": DOUBLE_MAX,\n     ", "            \"integerValue\": 1,\n              ", "          \"characterValue\": '\u4e2d',\n            ", "e INTEGER , primCharValue TEXT, `order` INTEG", "            \"integerValue\": 2147483647,\n     ", "             \"doubleValue\": 1.0,\n            ", "ue INTEGER , booleanValue INTEGER , \"\n+ \"doub", "            \"booleanValue\": false,\n          ", "Value INTEGER , dateValue INTEGER , timeValue", "               \"longValue\": -9223372036854775", "              \"floatValue\": 0.1234567,\n      ", "EGER , \"\n+ \"calendarValue INTEGER , character", "              \"shortValue\": 32767,\n          ", "               \"longValue\": 1,\n              ", "              \"floatValue\": 1.0,\n            ", "e INTEGER , primByteValue INTEGER , primCharV", "L , \"\n+ \"primBooleanValue INTEGER , primByteV", "              \"shortValue\": 1,\n              ", "               \"byteValue\": 1,\n            }\n", "            \"booleanValue\": true,\n           ", "NTEGER , \"\n+ \"doubleValue REAL , floatValue R", " INTEGER , timestampValue INTEGER , \"\n+ \"cale", "Value TEXT , primIntValue INTEGER , primLongV", "               \"byteValue\": 127,\n            ", "          \"characterValue\": ' ',\n            ", "              \"shortValue\": -32768,\n         ", "          \"characterValue\": '#',\n            ", " INTEGER , characterValue TEXT , primIntValue", "lobValue BLOB , clobValue TEXT , \"\n+ \"byteVal", "leValue REAL , floatValue REAL , stringValue ", "e INTEGER , primLongValue INTEGER , \"\n+ \"prim", "               \"longValue\": 92233720368547758", "Value INTEGER , timeValue INTEGER , timestamp", "REMENT, \"\n+ \"integerValue INTEGER , longValue", "             \"doubleValue\": Number.MIN_VALUE,", "             \"stringValue\": \"ABCDEFGHIJKLMN\",", "alue INTEGER , shortValue INTEGER , booleanVa", "              \"floatValue\": -0.123,\n         ", "ue REAL , primDoubleValue REAL , \"\n+ \"primBoo", "Value INTEGER , longValue INTEGER , shortValu", " INTEGER , primFloatValue REAL , primDoubleVa", "tValue REAL , stringValue TEXT , blobValue BL", "GER , \"\n+ \"primShortValue INTEGER , primFloat", "lue TEXT , \"\n+ \"byteValue INTEGER , dateValue", "            \"integerValue\": -2147483648,\n    "], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "StorageSyncJsunit.test.js", "FieldNodeJsunit.test.js", "StorageCallBackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvStoreResultSetJsunit.test.js", "StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Value", "api_method_name": "type", "api_method_all": "type: ValueType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 155, "since": 7, "api_used": "\u662f", "lines": ["ef = Object.getPrototypeOf(global) || global", ": {\n                type : factory.ValueType", "      console.info('type = ' + node.type);\n ", "                    type : factory.ValueType", "\n\n    \n     it('testtype001', 0, async funct", "        expect(node.type === ddm.type.INTEGE", "    node.type = ddm.type.INTEGER;\n          ", "   console.log(\"testtype002 fail on exceptio", "t(node.type === ddm.type.INTEGER).assertTrue", "    node.type = ddm.type.STRING;\n           ", "        expect(node.type === ddm.type.STRING", "   console.log(\"testtype001 fail on exceptio", "fo('type = ' + node.type);\n            expec", ");\n            node.type = ddm.type.INTEGER;", "() {\n        expect(typeof mPref).assertEqua", "\n\n    \n     it('testtype002', 0, async funct", ");\n            node.type = ddm.type.STRING;\n", "t(node.type === ddm.type.STRING).assertTrue("], "files": ["DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "FieldNodeJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "SchemaJsunit.test.js", "index.js", "KvStoreResultSetJsunit.test.js", "QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Value", "api_method_name": "value", "api_method_all": "value: Uint8Array | string | number | boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 460, "since": 7, "api_used": "\u662f", "lines": [")\n            const valueBucket = {\n         ", "tc.desc test double value with notBetween.\n  ", "tore.insert('test', valueBucket)\n        }\n  ", "ll,\n                valueBucket,\n            ", "****\");\n        var values = [1, -2147483648]", "****\");\n        var values = [-2147483648, 21", " @tc.desc test long value with notBetween.\n  ", "RI,\n                valueBucket,\n            ", "{\n            const valueBucket = {\n         ", "****\");\n        let values = [1, 2147483647];", " the common and min value test with notin.\n  ", "sert(\"AllDataType\", valueBucket)\n        }\n  ", " the common and max value test with notin.\n  ", "c.desc test integer value with notBetween.\n  ", "tIn(\"integerValue\", values);\n        let pred", "tc.desc test string value with notBetween.\n  ", "RI,\n                valueBucket\n             ", ";\n            const valueBucket = {\n         ", "esc the min and max value test with notin.\n  "], "files": ["RdbstorePredicatesJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Entry", "api_method_all": "interface Entry {\n        \n        key: string;\n        \n        value: Value;\n    }", "api_method_name": "Entry", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["KvStoreResultSet.GetEntry()testcase 001\n     ", "KvStoreResultSet.GetEntry()testcase 003\n     ", "ltSetGetEntry004 getEntry \" + entry);\n       ", "ltSetGetEntry001 getEntry \" + entry);\n       ", "tKvStoreResultSetGetEntry004 fail \" + e);\n   ", "tKvStoreResultSetGetEntry003 getEntry \" + ent", "ltSetGetEntry002 getEntry \" + entry);\n       ", "KvStoreResultSet.GetEntry()testcase 004\n     ", "tKvStoreResultSetGetEntry001 fail \" + e);\n   ", "tKvStoreResultSetGetEntry002', 0, async funct", "tKvStoreResultSetGetEntry004', 0, async funct", "ntry = resultSet.getEntry(1, 'test_string');\n", "ltSetGetEntry003 getEntry \" + entry);\n       ", "KvStoreResultSet.GetEntry()\n     * @tc.desc T", "tKvStoreResultSetGetEntry003', 0, async funct", "ntry = resultSet.getEntry();\n            cons", "tKvStoreResultSetGetEntry001', 0, async funct", "ntry = resultSet.getEntry(1);\n            con", "tKvStoreResultSetGetEntry002 getEntry \" + ent", "tKvStoreResultSetGetEntry001 getEntry \" + ent", "tKvStoreResultSetGetEntry002 fail \" + e);\n   ", "tKvStoreResultSetGetEntry003 fail \" + e);\n   ", "KvStoreResultSet.GetEntry()testcase 002\n     ", "tKvStoreResultSetGetEntry004 getEntry \" + ent"], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Entry", "api_method_name": "key", "api_method_all": "key: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 586, "since": 7, "api_used": "\u662f", "lines": ["ST_FLOAT_ELEMENT = 'key_test_float';\nconst ", "try = {\n            key : prefix + i,\n     ", "ST_FLOAT_ELEMENT = 'key_test_float_2';\ncons", "_BOOLEAN_ELEMENT = 'key_test_boolean';\ncons", "T_STRING_ELEMENT = 'key_test_string';\n\nvar ", "                    key : key + i,\n        ", "T_STRING_ELEMENT = 'key_test_string_2';\ncon", "EST_SYNC_ELEMENT = 'key_test_sync';\n\nconst ", "TEST_INT_ELEMENT = 'key_test_int';\nconst KE", "T_STRING_ELEMENT = 'key_test_string';\nvar m", "                var key = 'batch_test_strin", "              key : key + i,\n              ", "rObserver001 key' + key);\n            expec", "('abc').assertEqual(key);\n        };\n      ", "ect('').assertEqual(key);\n        };\n      ", " 'batch_test_number_key';\n                v", "_BOOLEAN_ELEMENT = 'key_test_boolean_2';\nco", "EST_LONG_ELEMENT = 'key_test_long';\nconst K", "'abcd').assertEqual(key);\n        };\n      ", "RegisterObserver001 key' + key);\n          ", " 'batch_test_number_key', function (err,ent", " 'batch_test_string_key';\n                v", " 'batch_test_string_key', function (err,ent", "                var key = 'batch_test_numbe", "bserver = function (key) {\n            expe", "TEST_INT_ELEMENT = 'key_test_int_2';\nconst ", "bserver = function (key) {\n            cons"], "files": ["DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "StorageCallBackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvStoreResultSetJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Entry", "api_method_name": "value", "api_method_all": "value: Value", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 460, "since": 7, "api_used": "\u662f", "lines": [")\n            const valueBucket = {\n         ", "tc.desc test double value with notBetween.\n  ", "tore.insert('test', valueBucket)\n        }\n  ", "ll,\n                valueBucket,\n            ", "****\");\n        var values = [1, -2147483648]", "****\");\n        var values = [-2147483648, 21", " @tc.desc test long value with notBetween.\n  ", "RI,\n                valueBucket,\n            ", "{\n            const valueBucket = {\n         ", "****\");\n        let values = [1, 2147483647];", " the common and min value test with notin.\n  ", "sert(\"AllDataType\", valueBucket)\n        }\n  ", " the common and max value test with notin.\n  ", "c.desc test integer value with notBetween.\n  ", "tIn(\"integerValue\", values);\n        let pred", "tc.desc test string value with notBetween.\n  ", "RI,\n                valueBucket\n             ", ";\n            const valueBucket = {\n         ", "esc the min and max value test with notin.\n  "], "files": ["RdbstorePredicatesJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ChangeNotification", "api_method_all": "interface ChangeNotification {\n        \n        insertEntries: Entry[];\n        \n        updateEntries: Entry[];\n        \n        deleteEntries: Entry[];\n        \n        deviceId: string;\n    }", "api_method_name": "ChangeNotification", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ChangeNotification", "api_method_name": "insertEntries", "api_method_all": "insertEntries: Entry[]", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ChangeNotification", "api_method_name": "updateEntries", "api_method_all": "updateEntries: Entry[]", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ChangeNotification", "api_method_name": "deleteEntries", "api_method_all": "deleteEntries: Entry[]", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ChangeNotification", "api_method_name": "deviceId", "api_method_all": "deviceId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 28, "since": 7, "api_used": "\u662f", "lines": [";\n            query.deviceId(localDeviceId);\n   ", ";\n            query.deviceId(\"$.name\");\n        ", ";\n            query.deviceId(\"0\");\n            e", "              query.deviceId(deviceId);\n        ", "dGet deviceId = ' + deviceId);\n                q", "     query.deviceId(deviceId);\n            }\n   ", ";\n            query.deviceId(\"kxx\").equalTo(\"key", ";\n            query.deviceId(\"k\", \"any\");\n      ", ".log('testPutAndGet deviceId = ' + deviceId);\n  ", "iceId.then(function(deviceId) {\n            cons", ";\n            query.deviceId(123);\n            c", "              query.deviceId(localDeviceId);\n   ", "    localDeviceId = deviceId;\n        }).catch((", "       resolve(data.deviceId);\n            });\n ", " ' + JSON.stringify(deviceId));\n            loca", "then(async function(deviceId) {\n            var "], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "QueryJsunit.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SyncMode", "api_method_all": "enum SyncMode {\n        \n        PULL_ONLY = 0,\n        \n        PUSH_ONLY = 1,\n        \n        PUSH_PULL = 2\n    }", "api_method_name": "SyncMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": [" var mode = factory.SyncMode.PULL_ONLY;\n        ", " pullonly = factory.SyncMode.PULL_ONLY;\n        ", " var mode = factory.SyncMode.PUSH_ONLY;\n        ", " var mode = factory.SyncMode.PUSH_PULL;\n        ", " pushpull = factory.SyncMode.PUSH_PULL;\n        ", " pushonly = factory.SyncMode.PUSH_ONLY;\n        ", "bStore.sync(dataRdb.SyncMode.SYNC_MODE_PULL, pre", "bStore.sync(dataRdb.SyncMode.SYNC_MODE_PUSH, pre"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SyncMode", "api_method_name": "PULL_ONLY", "api_method_all": "PULL_ONLY = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": [" = factory.SyncMode.PULL_ONLY;\n                co", " = factory.SyncMode.PULL_ONLY;\n        console.in"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SyncMode", "api_method_name": "PUSH_ONLY", "api_method_all": "PUSH_ONLY = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["e [JS-API8]Syncmode.PUSH_ONLY\n     * @tc.desc Tes", "Enum Value Syncmode.PUSH_ONLY\n     */\n    it('tes", " = factory.SyncMode.PUSH_ONLY;\n                co", " = factory.SyncMode.PUSH_ONLY;\n        console.in"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SyncMode", "api_method_name": "PUSH_PULL", "api_method_all": "PUSH_PULL = 2", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": [" = factory.SyncMode.PUSH_PULL;\n                co", "e [JS-API8]Syncmode.PUSH_PULL\n     * @tc.desc Tes", " = factory.SyncMode.PUSH_PULL;\n        console.in", "Enum Value Syncmode.PUSH_PULL\n     */\n    it('tes"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeType", "api_method_all": "enum SubscribeType {\n        \n        SUBSCRIBE_TYPE_LOCAL = 0,\n\n        \n        SUBSCRIBE_TYPE_REMOTE = 1,\n\n        \n        SUBSCRIBE_TYPE_ALL = 2,\n    }", "api_method_name": "SubscribeType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["t('testSubscribetypeSubscribeTypeAll_001', 0, functio", "var local = factory.SubscribeType.SUBSCRIBE_TYPE_LOCA", "  var all = factory.SubscribeType.SUBSCRIBE_TYPE_ALL;", "ataChange', factory.SubscribeType.SUBSCRIBE_TYPE_ALL,", "t('testSubscribetypeSubscribeTypeLocal_001', 0, funct", "ar remote = factory.SubscribeType.SUBSCRIBE_TYPE_REMO", "t('testSubscribetypeSubscribeTypeRemote_001', 0, func"], "files": ["SingleKvStorePromiseJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeType", "api_method_name": "SUBSCRIBE_TYPE_LOCAL", "api_method_all": "SUBSCRIBE_TYPE_LOCAL = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["ctory.SubscribeType.SUBSCRIBE_TYPE_LOCAL;\n        console.in", "Value Subscribetype.SUBSCRIBE_TYPE_LOCAL\n     */\n    it('tes", "-API8]Subscribetype.SUBSCRIBE_TYPE_LOCAL\n     * @tc.desc Tes"], "files": ["SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeType", "api_method_name": "SUBSCRIBE_TYPE_REMOTE", "api_method_all": "SUBSCRIBE_TYPE_REMOTE = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["ctory.SubscribeType.SUBSCRIBE_TYPE_REMOTE;\n        console.in", "Value Subscribetype.SUBSCRIBE_TYPE_REMOTE\n     */\n    it('tes", "-API8]Subscribetype.SUBSCRIBE_TYPE_REMOTE\n     * @tc.desc Tes"], "files": ["SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeType", "api_method_name": "SUBSCRIBE_TYPE_ALL", "api_method_all": "SUBSCRIBE_TYPE_ALL = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["ctory.SubscribeType.SUBSCRIBE_TYPE_ALL, function (data) {\n", "Value Subscribetype.SUBSCRIBE_TYPE_ALL\n     */\n    it('tes", "ctory.SubscribeType.SUBSCRIBE_TYPE_ALL;\n        console.in", "-API8]Subscribetype.SUBSCRIBE_TYPE_ALL\n     * @tc.desc Tes"], "files": ["SingleKvStorePromiseJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStoreType", "api_method_all": "enum KVStoreType {\n        \n        DEVICE_COLLABORATION = 0,\n\n        \n        SINGLE_VERSION = 1,\n\n        \n        MULTI_VERSION = 2,\n    }", "api_method_name": "KVStoreType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 48, "since": 7, "api_used": "\u662f", "lines": ["StoreType : factory.KVStoreType.SINGLE_VERSION,\n   ", "StoreType : factory.KVStoreType.MULTI_VERSION,\n    ", "s.kvStoreType = ddm.KVStoreType.DEVICE_COLLABORATIO", "var multi = factory.KVStoreType.MULTI_VERSION;\n    ", "aboration = factory.KVStoreType.DEVICE_COLLABORATIO", "s.kvStoreType = ddm.KVStoreType.SINGLE_VERSION;\n   ", ".kvStoreType == ddm.KVStoreType.DEVICE_COLLABORATIO", "StoreType : factory.KVStoreType.DEVICE_COLLABORATIO", "ar single = factory.KVStoreType.SINGLE_VERSION;\n   ", "  kvStoreType : ddm.KVStoreType.SINGLE_VERSION,\n   "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStoreType", "api_method_name": "DEVICE_COLLABORATION", "api_method_all": "DEVICE_COLLABORATION = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["e = ddm.KVStoreType.DEVICE_COLLABORATION;\n            option", "JS-API8]Kvstoretype.DEVICE_COLLABORATION\n     * @tc.desc Tes", "factory.KVStoreType.DEVICE_COLLABORATION,\n        schema : '", "factory.KVStoreType.DEVICE_COLLABORATION,\n            schema", "m Value Kvstoretype.DEVICE_COLLABORATION\n     */\n    it('tes", " == ddm.KVStoreType.DEVICE_COLLABORATION) {\n                ", "factory.KVStoreType.DEVICE_COLLABORATION;\n        console.in"], "files": ["DeviceKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStoreType", "api_method_name": "SINGLE_VERSION", "api_method_all": "SINGLE_VERSION = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 40, "since": 7, "api_used": "\u662f", "lines": ["factory.KVStoreType.SINGLE_VERSION,\n        schema : '", "factory.KVStoreType.SINGLE_VERSION,\n            schema", "m Value Kvstoretype.SINGLE_VERSION\n     */\n    it('tes", "factory.KVStoreType.SINGLE_VERSION;\n        console.in", "JS-API8]Kvstoretype.SINGLE_VERSION\n     * @tc.desc Tes", "e = ddm.KVStoreType.SINGLE_VERSION;\n            option", "e : ddm.KVStoreType.SINGLE_VERSION,\n        schema : {"], "files": ["SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStoreType", "api_method_name": "MULTI_VERSION", "api_method_all": "MULTI_VERSION = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["factory.KVStoreType.MULTI_VERSION,\n            schema", "m Value Kvstoretype.MULTI_VERSION\n     */\n    it('tes", "factory.KVStoreType.MULTI_VERSION;\n        console.in", "JS-API8]Kvstoretype.MULTI_VERSION\n     * @tc.desc Tes"], "files": ["KvManagerPromiseJsunit.test.js", "KvManagerCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SecurityLevel", "api_method_all": "enum SecurityLevel {\n        \n        NO_LEVEL = 0,\n\n        \n        S0 = 1,\n\n        \n        S1 = 2,\n\n        \n        S2 = 3,\n\n        \n        S3 = 5,\n\n        \n        S4 = 6,\n    }", "api_method_name": "SecurityLevel", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 128, "since": 7, "api_used": "\u662f", "lines": ["rityLevel : factory.SecurityLevel.S2,\n        }\n     ", "testSingleKvStoreGetSecurityLevel101');\n    //     tr", "ect(data == factory.SecurityLevel.S2).assertTrue();\n ", "pi SingleKvStore.GetSecurityLevel() testcase 101\n    ", "rityLevel : factory.SecurityLevel.S0,\n        }\n     ", "securityLevel : ddm.SecurityLevel.NO_LEVEL,\n    }\n\n  ", "   await kvStore.getSecurityLevel(function (err,data)", "testSingleKvStoreGetSecurityLevel101 getSecurityLevel", "I8]SingleKvStore.GetSecurityLevel()\n     * @tc.desc T", "testSingleKvStoreGetSecurityLevel101', 0, async funct", "SecurityLevel101 getSecurityLevel success');\n    //  ", "rityLevel : factory.SecurityLevel.NO_LEVEL,\n        }", "rityLevel : factory.SecurityLevel.S4,\n        }\n     ", "rityLevel : factory.SecurityLevel.S3,\n        }\n     ", "rityLevel : factory.SecurityLevel.S1,\n        }\n     ", "testSingleKvStoreGetSecurityLevel101 e ' + e);\n    //", "rityLevel : factory.SecurityLevel.S2,\n    }\n\n    befo"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SecurityLevel", "api_method_name": "NO_LEVEL", "api_method_all": "NO_LEVEL = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": [": ddm.SecurityLevel.NO_LEVEL,\n    }\n\n    beforeA", "-API8]Securitylevel.NO_LEVEL\n     * @tc.desc Tes", "ctory.SecurityLevel.NO_LEVEL;\n        console.in", "Value Securitylevel.NO_LEVEL\n     */\n    it('tes", "ctory.SecurityLevel.NO_LEVEL,\n        }\n        "], "files": ["KvManagerPromiseJsunit.test.js", "SchemaJsunit.test.js", "KvManagerCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SecurityLevel", "api_method_name": "S0", "api_method_all": "S0 = 1,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["ctory.SecurityLevel.S0,\n        }\n        ", "-API8]Securitylevel.S0\n     * @tc.desc Tes", "ctory.SecurityLevel.S0;\n        console.in", "t('testSecuritylevelS0_001', 0, function (", "Value Securitylevel.S0\n     */\n    it('tes", "TAMGR_SECURITYLEVEL_S0_0100\n     * @tc.nam"], "files": ["KvManagerPromiseJsunit.test.js", "KvManagerCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SecurityLevel", "api_method_name": "S1", "api_method_all": "S1 = 2,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["Value Securitylevel.S1\n     */\n    it('tes", "TAMGR_SECURITYLEVEL_S1_0100\n     * @tc.nam", "ctory.SecurityLevel.S1,\n        }\n        ", "t('testSecuritylevelS1_001', 0, function (", "ctory.SecurityLevel.S1;\n        console.in", "-API8]Securitylevel.S1\n     * @tc.desc Tes"], "files": ["KvManagerPromiseJsunit.test.js", "KvManagerCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SecurityLevel", "api_method_name": "S2", "api_method_all": "S2 = 3,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": ["ctory.SecurityLevel.S2;\n        console.in", "TAMGR_SECURITYLEVEL_S2_0100\n     * @tc.nam", "-API8]Securitylevel.S2\n     * @tc.desc Tes", "ctory.SecurityLevel.S2,\n        }\n        ", "ctory.SecurityLevel.S2,\n    }\n\n    beforeA", "t('testSecuritylevelS2_001', 0, function (", "ctory.SecurityLevel.S2).assertTrue();\n    ", "Value Securitylevel.S2\n     */\n    it('tes"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SecurityLevel", "api_method_name": "S3", "api_method_all": "S3 = 5,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["t('testSecuritylevelS3_001', 0, function (", "TAMGR_SECURITYLEVEL_S3_0100\n     * @tc.nam", "ctory.SecurityLevel.S3;\n        console.in", "Value Securitylevel.S3\n     */\n    it('tes", "ctory.SecurityLevel.S3,\n        }\n        ", "-API8]Securitylevel.S3\n     * @tc.desc Tes"], "files": ["KvManagerPromiseJsunit.test.js", "KvManagerCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SecurityLevel", "api_method_name": "S4", "api_method_all": "S4 = 6,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["t('testSecuritylevelS4_001', 0, function (", "ctory.SecurityLevel.S4;\n        console.in", "ctory.SecurityLevel.S4,\n        }\n        ", "TAMGR_SECURITYLEVEL_S4_0100\n     * @tc.nam", "Value Securitylevel.S4\n     */\n    it('tes", "-API8]Securitylevel.S4\n     * @tc.desc Tes"], "files": ["KvManagerPromiseJsunit.test.js", "KvManagerCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Options", "api_method_all": "interface Options {\n        \n        createIfMissing?: boolean;\n        \n        encrypt?: boolean;\n        \n        backup?: boolean;\n        \n        autoSync?: boolean;\n        \n        kvStoreType?: KVStoreType;\n        \n        securityLevel?: SecurityLevel;\n        \n        schema?: Schema;\n    }", "api_method_name": "Options", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Options", "api_method_name": "createIfMissing", "api_method_all": "createIfMissing?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 7, "api_used": "\u662f", "lines": ["nfo = {\n            createIfMissing : true,\n           ", "nfo = {\n            createIfMissing : false,\n          ", "options = {\n        createIfMissing : true,\n        enc"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Options", "api_method_name": "encrypt", "api_method_all": "encrypt?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 7, "api_used": "\u662f", "lines": [" false,\n            encrypt : false,\n          ", ": true,\n            encrypt : true,\n           ", ": true,\n            encrypt : false,\n          ", "ing : true,\n        encrypt : false,\n        ba"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Options", "api_method_name": "backup", "api_method_all": "backup?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 7, "api_used": "\u662f", "lines": ["pt : false,\n        backup : false,\n        au", ": true,\n            backup : false,\n          ", " false,\n            backup : true,\n           ", " false,\n            backup : false,\n          "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Options", "api_method_name": "autoSync", "api_method_all": "autoSync?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 7, "api_used": "\u662f", "lines": ["up : false,\n        autoSync : true,\n        kvS", " false,\n            autoSync : false,\n          ", " false,\n            autoSync : true,\n           ", ": true,\n            autoSync : true,\n           "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Options", "api_method_name": "kvStoreType", "api_method_all": "kvStoreType?: KVStoreType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 45, "since": 7, "api_used": "\u662f", "lines": [" false,\n            kvStoreType : factory.KVStoreTy", "            options.kvStoreType = ddm.KVStoreType.S", "ync : true,\n        kvStoreType : ddm.KVStoreType.S", "            options.kvStoreType = ddm.KVStoreType.D", "        if (options.kvStoreType == ddm.KVStoreType.", ": true,\n            kvStoreType : factory.KVStoreTy", "ync : true,\n        kvStoreType : factory.KVStoreTy"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Options", "api_method_name": "securityLevel", "api_method_all": "securityLevel?: SecurityLevel", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 7, "api_used": "\u662f", "lines": ["a : '',\n            securityLevel : factory.SecurityL", "chema : '',\n        securityLevel : factory.SecurityL", "chema : {},\n        securityLevel : ddm.SecurityLevel"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Options", "api_method_name": "schema", "api_method_all": "schema?: Schema", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 87, "since": 8, "api_used": "\u662f", "lines": ["ERSION,\n            schema : '',\n            s", "LE_VERSION,\n        schema : '',\n        secur", ");\n\n            let schema = new ddm.Schema();", "       console.log(\"schematestPutAndGet done\")", "   options.schema = schema;\n            await ", "LE_VERSION,\n        schema : {},\n        secur", "hema();\n            schema.root.appendChild(en", "RATION,\n            schema : '',\n            s", "glish);\n            schema.indexes = ['$.engli", "       console.log(\"schema fail on exception: ", "            options.schema = schema;\n         ", "LABORATION,\n        schema : '',\n        secur"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Schema", "api_method_all": "class Schema {\n        \n        constructor()\n        \n\t\troot: FieldNode;  \n        \n        indexes: Array<string>;    \n        \n        mode: number;\n        \n        skip: number;\n    }", "api_method_name": "Schema", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["et schema = new ddm.Schema();\n            sche", "est.js')\nrequire('./SchemaJsunit.test.js')", "\n    }\n}\n\ndescribe('SchemaTest', function() {\n", "et schema = new ddm.Schema();\n            expe"], "files": ["List.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Schema", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["@tc.desc predicates constructor test\n     */\n    it", "@tc.name predicates constructor test\n     * @tc.num"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Schema", "api_method_name": "root", "api_method_all": "root: FieldNode", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["\n\n    \n     it('testroot001', 0, async funct", " new ddm.FieldNode(\"root\");\n            let ", "\n            schema.root.appendChild(english", "      expect(schema.root instanceof ddm.Fiel", "\n            schema.root.appendChild(name);\n"], "files": ["FieldNodeJsunit.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Schema", "api_method_name": "indexes", "api_method_all": "indexes: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["\n\n    \n     it('testindexes001', 0, async funct", "sh.first' && schema.indexes[1] === '$.english.s", "\n            schema.indexes = ['$.name'];\n     ", "\n            schema.indexes = [];    // indexex", "\n            schema.indexes = ['$.english.first", "      expect(schema.indexes[0] === '$.english.f", "ty array -> invalid indexes.\n            expect"], "files": ["SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Schema", "api_method_name": "mode", "api_method_all": "mode: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 42, "since": 8, "api_used": "\u662f", "lines": ["ema mode = \"+schema.mode) \n            expec", "sync(syncDeviceIds, mode);\n            } cat", "\n\n    \n     it('testmode001', 0, async funct", "   \n    it('testSyncmodePullOnly_001', 0, fu", "\n            schema.mode = 1;\n            co", " */\n    it('testSyncmodePushOnly_001', 0, fu", "      expect(schema.mode === 0).assertTrue()", "\n\n    \n     it('testmode002', 0, async funct", "console.log(\"schema mode = \"+schema.mode) \n ", "ema mode = \"+schema.mode)   \n            exp", "\n            schema.mode = 0;\n            co", "t Js Enum Value Syncmode.PUSH_ONLY\n     */\n ", "t Js Enum Value Syncmode.PUSH_PULL\n     */\n ", "c.name [JS-API8]Syncmode.PUSH_ONLY\n     * @t", "sync(syncDeviceIds, mode, 10);\n            }", "                var mode = factory.SyncMode.", "console.log(\"schema mode = \"+schema.mode)   ", "c.name [JS-API8]Syncmode.PUSH_PULL\n     * @t", "\n            schema.mode = 1; // STRICT\n    ", " */\n    it('testSyncmodePushPull_001', 0, fu", "      expect(schema.mode === 1).assertTrue()"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Schema", "api_method_name": "skip", "api_method_all": "skip: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["\n            schema.skip = 0;\n            ex", "      expect(schema.skip === 0).assertTrue()", "\n\n    \n     it('testskip001', 0, async funct"], "files": ["SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FieldNode", "api_method_all": "class FieldNode {\n        \n        constructor(name: string)\n        \n        appendChild(child: FieldNode): boolean;\n        \n         default: string;\n         \n         nullable: boolean;\n         \n         type: number;\n    }", "api_method_name": "FieldNode", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 34, "since": 8, "api_used": "\u662f", "lines": [" let node = new ddm.FieldNode('first');\n         ", "root instanceof ddm.FieldNode).assertTrue();\n    ", "let child = new ddm.FieldNode();\n            node", "et child1 = new ddm.FieldNode(\"child1\");\n        ", "et child3 = new ddm.FieldNode(\"child3\");\n        ", "et child2 = new ddm.FieldNode(\"child2\");\n        ", " let node = new ddm.FieldNode(\"root\");\n          ", " let node = new ddm.FieldNode();\n            let ", "et second = new ddm.FieldNode('second');\n        ", "t english = new ddm.FieldNode('english');\n       ", "edData';\n\ndescribe('FieldNodeTest', function() {\n", "let child = new ddm.FieldNode(\"child\");\n         ", "est.js')\nrequire('./FieldNodeJsunit.test.js')\nreq", " let name = new ddm.FieldNode('name');\n          ", "let first = new ddm.FieldNode('first');\n         "], "files": ["FieldNodeJsunit.test.js", "List.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FieldNode", "api_method_name": "constructor", "api_method_all": "constructor(name: string)", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["@tc.desc predicates constructor test\n     */\n    it", "@tc.name predicates constructor test\n     * @tc.num"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FieldNode", "api_method_name": "appendChild", "api_method_all": "appendChild(child: FieldNode): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["            english.appendChild(second);\n\n         ", "        schema.root.appendChild(english);\n         ", ");\n            node.appendChild(child);\n        } c", ");\n            node.appendChild(child);\n           ", "        schema.root.appendChild(name);\n            ", ");\n            node.appendChild(child1);\n          ", ");\n            node.appendChild(child2);\n          ", ");\n            node.appendChild(child3);\n          ", "            english.appendChild(first);\n           "], "files": ["FieldNodeJsunit.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FieldNode", "api_method_name": "default", "api_method_all": "default: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 50, "since": 8, "api_used": "\u662f", "lines": ["", "ST_STRING_ELEMENT, \"defaultvalue\"));\n    })\n\n  ", "\n\n    \n     it('testdefault001', 0, async funct", "generator')\n\nexport default {\n    data: {\n     ", "ST_STRING_ELEMENT, \"defaultvalue\", function (er", "ST_STRING_ELEMENT, \"defaultvalue\");\n        pro", "_TEST_INT_ELEMENT, \"defaultvalue\"));\n    })\n\n  ", "ST_STRING_ELEMENT, \"defaultValue\"));\n    })\n\n  ", "ST_STRING_ELEMENT, \"defaultValue\");\n        pro", "ST_STRING_ELEMENT, \"defaultvalue\"));\n          ", "ST_STRING_ELEMENT, \"default\"));\n            don", "            expect(\"defaultvalue\").assertEqual(", "        expect(node.default === 'first name').a", "      console.info('defaultValue = ' + node.def", "vStore.setSyncParam(defaultAllowedDelayMs, func", "ST_STRING_ELEMENT, \"defaultValue\", function (er", ");\n            node.default = 'first name';\n   ", "ST_STRING_ELEMENT, \"defaultvalue\"));\n        })", "y {\n            var defaultAllowedDelayMs = 500", "ST_STRING_ELEMENT, \"defaultvalue\"));\n        mP", "e;\n            name.default = 0;\n\n            l", ";\n            first.default = 'first name';\n\n  ", "\n            second.default = 'second name';\n\n ", "ultValue = ' + node.default);\n            expec", "ST_STRING_ELEMENT, \"default\"));\n        }).catc", "ST_STRING_ELEMENT, \"defaultvalue\"));\n        ex", "vStore.setSyncParam(defaultAllowedDelayMs).then", "            expect(\"default\").\n                ", "();\n        expect(\"defaultvalue\").assertEqual(", "));\n        expect('defaultvalue').assertEqual(", "   console.log(\"testdefault001 fail on exceptio", "));\n        expect('defaultValue').assertEqual(", "            expect('defaultValue').assertEqual(", "ST_STRING_ELEMENT, \"default\"));\n            mPr"], "files": ["StorageSyncJsunit.test.js", "FieldNodeJsunit.test.js", "StorageCallBackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "app.js", "SchemaJsunit.test.js", "index.js", "StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FieldNode", "api_method_name": "nullable", "api_method_all": "nullable: boolean", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["      console.info('nullable = ' + node.nullable", ";\n            first.nullable = false;\n          ", "R;\n            name.nullable = false;\n          ", "\n\n    \n     it('testnullable001', 0, async funct", "        expect(node.nullable === false).assertTr", ");\n            node.nullable = false;\n          ", "nullable = ' + node.nullable);\n            expec", "\n            second.nullable = false;\n          ", "   console.log(\"testnullable001 fail on exceptio"], "files": ["FieldNodeJsunit.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FieldNode", "api_method_name": "type", "api_method_all": "type: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 155, "since": 7, "api_used": "\u662f", "lines": ["ef = Object.getPrototypeOf(global) || global", ": {\n                type : factory.ValueType", "      console.info('type = ' + node.type);\n ", "                    type : factory.ValueType", "\n\n    \n     it('testtype001', 0, async funct", "        expect(node.type === ddm.type.INTEGE", "    node.type = ddm.type.INTEGER;\n          ", "   console.log(\"testtype002 fail on exceptio", "t(node.type === ddm.type.INTEGER).assertTrue", "    node.type = ddm.type.STRING;\n           ", "        expect(node.type === ddm.type.STRING", "   console.log(\"testtype001 fail on exceptio", "fo('type = ' + node.type);\n            expec", ");\n            node.type = ddm.type.INTEGER;", "() {\n        expect(typeof mPref).assertEqua", "\n\n    \n     it('testtype002', 0, async funct", ");\n            node.type = ddm.type.STRING;\n", "t(node.type === ddm.type.STRING).assertTrue("], "files": ["DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "FieldNodeJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "SchemaJsunit.test.js", "index.js", "KvStoreResultSetJsunit.test.js", "QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_all": "interface KvStoreResultSet {\n        \n        getCount(): number;\n        \n        getPosition(): number;\n        \n        moveToFirst(): boolean;\n        \n        moveToLast(): boolean;\n        \n        moveToNext(): boolean;\n        \n        moveToPrevious(): boolean;\n        \n        move(offset: number): boolean;\n        \n        moveToPosition(position: number): boolean;\n        \n        isFirst(): boolean;\n        \n        isLast(): boolean;\n        \n        isBeforeFirst(): boolean;\n        \n        isAfterLast(): boolean;\n        \n        getEntry(): Entry;\n    }", "api_method_name": "KvStoreResultSet", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 254, "since": 7, "api_used": "\u662f", "lines": ["   console.log(\"testKvStoreResultSetGetPosition002 fail ", ")\n\n    \n    it('testKvStoreResultSetMoveToLast001', 0, a", "   console.log('testKvStoreResultSetGetCount002 closeRes", ")\n\n    \n    it('testKvStoreResultSetGetCount004', 0, asy", ")\n\n    \n    it('testKvStoreResultSetMoveToFirst003', 0, ", "   console.log(\"testKvStoreResultSetMoveToLast002 fail \"", "   console.log(\"testKvStoreResultSetMoveToLast002 moveTo", " = null;\n\ndescribe('KvStoreResultSetTest', function() {\n", "   console.log(\"testKvStoreResultSetGetCount004 fail \" +", "   console.log(\"testKvStoreResultSetGetPosition002 getPo", "   console.log('testKvStoreResultSetGetCount002 e ' + e)", "   console.log(\"testKvStoreResultSetGetPosition004 fail ", "   console.log(\"testKvStoreResultSetGetCount001 getCount", "   console.log(\"testKvStoreResultSetMoveToFirst004 fail ", "   console.log(\"testKvStoreResultSetMoveToFirst001 fail ", "   console.log(\"testKvStoreResultSetGetCount001 fail \" +", ")\n\n    \n    it('testKvStoreResultSetMoveToFirst001', 0, ", ")\n\n    \n    it('testKvStoreResultSetGetPosition003', 0, ", "   console.log(\"testKvStoreResultSetMoveToLast001 moveTo", "   console.log(\"testKvStoreResultSetGetCount003 fail \" +", ")\n\n    \n    it('testKvStoreResultSetGetPosition001', 0, ", "   console.log(\"testKvStoreResultSetMoveToFirst002 fail ", "   console.log(\"testKvStoreResultSetGetCount004 getCount", "   console.log(\"testKvStoreResultSetMoveToFirst003 moveT", "   console.log(\"testKvStoreResultSetMoveToLast001 fail \"", ")\n\n    \n    it('testKvStoreResultSetGetCount002', 0, asy", ")\n\n    \n    it('testKvStoreResultSetGetCount001', 0, asy", "   console.log(\"testKvStoreResultSetGetPosition003 getPo", "   console.log(\"testKvStoreResultSetMoveToFirst001 moveT", "   console.log(\"testKvStoreResultSetMoveToFirst002 getPo", "   console.log(\"testKvStoreResultSetMoveToFirst003 fail ", "   console.log(\"testKvStoreResultSetMoveToFirst004 moveT", "   console.log(\"testKvStoreResultSetGetCount003 getCount", ")\n\n    \n    it('testKvStoreResultSetGetCount003', 0, asy", ")\n\n    \n    it('testKvStoreResultSetMoveToFirst005', 0, ", ")\n\n    \n    it('testKvStoreResultSetGetPosition004', 0, ", "   console.log(\"testKvStoreResultSetGetPosition001 getPo", ")\n\n    \n    it('testKvStoreResultSetGetPosition002', 0, ", "   console.log(\"testKvStoreResultSetGetPosition004 getPo", "   console.log('testKvStoreResultSetGetCount002 getResul", ")\n\n    \n    it('testKvStoreResultSetMoveToFirst002', 0, ", "   console.log(\"testKvStoreResultSetGetPosition001 fail ", "   console.log(\"testKvStoreResultSetGetPosition003 fail ", "   console.log(\"testKvStoreResultSetMoveToFirst002 moveT", ")\n\n    \n    it('testKvStoreResultSetMoveToFirst004', 0, ", ")\n\n    \n    it('testKvStoreResultSetMoveToLast002', 0, a"], "files": ["KvStoreResultSetJsunit.test.js", "List.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "getCount", "api_method_all": "getCount(): number;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": ["r count = resultSet.getCount();\n            cons", "esultSetGetCount004 getCount \" + count);\n       ", "   expect(resultSet.getCount() == 0).assertTrue(", "r count = resultSet.getCount(123, 'test_string')", "esultSetGetCount003 getCount \" + count);\n       ", "          expect(rs.getCount() == 0).assertTrue(", "r count = resultSet.getCount(123);\n            c", "   expect(resultSet.getCount() == 10).assertTrue", "esultSetGetCount001 getCount \" + count);\n       "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "getPosition", "api_method_all": "getPosition(): number;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 31, "since": 8, "api_used": "\u662f", "lines": ["   expect(resultSet.getPosition() == -1).assertTrue", "ltSetMoveToFirst002 getPosition \" + pos);\n         ", "osition = resultSet.getPosition();\n            cons", "osition = resultSet.getPosition(123, 'test_string')", "moved && (resultSet.getPosition() == 2)).assertTrue", "osition = resultSet.getPosition();\n            expe", "moved && (resultSet.getPosition() == 0)).assertTrue", "ltSetGetPosition002 getPosition \" + position);\n    ", "moved && (resultSet.getPosition() == 5)).assertTrue", "osition = resultSet.getPosition(123);\n            c", "moved && (resultSet.getPosition() == 9)).assertTrue", "var pos = resultSet.getPosition();\n            cons", "ltSetGetPosition001 getPosition \" + position);\n    ", " 0 to \" + resultSet.getPosition());\n            exp", "ltSetGetPosition003 getPosition \" + position);\n    ", "   expect(resultSet.getPosition() == 0).assertTrue(", "moved && (resultSet.getPosition() == 4)).assertTrue", "ltSetGetPosition004 getPosition \" + position);\n    ", "moved && (resultSet.getPosition() == 1)).assertTrue", "sertEqual(resultSet.getPosition());\n        } catch"], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "moveToFirst", "api_method_all": "moveToFirst(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["r moved = resultSet.moveToFirst();\n            cons", "r moved = resultSet.moveToFirst(123);\n            c", "ltSetMoveToFirst004 moveToFirst \" + moved);\n       ", "          resultSet.moveToFirst();\n            expe", "ltSetMoveToFirst001 moveToFirst \" + moved);\n       ", "  moved = resultSet.moveToFirst();\n            expe", "ltSetMoveToFirst003 moveToFirst \" + moved);\n       ", "r moved = resultSet.moveToFirst(123, 'test_string')", "r moved = resultSet.moveToFirst();\n            expe", "ltSetMoveToFirst002 moveToFirst \" + moved);\n       "], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "moveToLast", "api_method_all": "moveToLast(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["r moved = resultSet.moveToLast(123, 'test_string')", "ultSetMoveToLast003 moveToLast \" + moved);\n       ", "ar flag = resultSet.moveToLast();\n            expe", "r moved = resultSet.moveToLast(123);\n            c", "ultSetMoveToLast004 moveToLast \" + moved);\n       ", "r moved = resultSet.moveToLast();\n            cons", "ultSetMoveToLast002 moveToLast \" + moved);\n       ", "          resultSet.moveToLast();\n            var ", "tSetIsAfterLast002  moveToLast  moved=\" + moved);\n", "ultSetMoveToLast001 moveToLast \" + moved);\n       "], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "moveToNext", "api_method_all": "moveToNext(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["r moved = resultSet.moveToNext(123, 'test_string')", "etMoveToPrevious002 moveToNext \" + moved);\n       ", "ultSetMoveToNext003 moveToNext \" + moved);\n       ", "ultSetMoveToNext004 moveToNext \" + moved);\n       ", "  moved = resultSet.moveToNext();\n            cons", "ultSetMoveToNext001 moveToNext \" + moved);\n       ", "tSetIsAfterLast002  moveToNext  moved=\" + moved);\n", "r moved = resultSet.moveToNext();\n            cons", "  moved = resultSet.moveToNext();\n            expe", "r moved = resultSet.moveToNext(123);\n            c", "r moved = resultSet.moveToNext();\n            var ", "ultSetMoveToNext002 moveToNext \" + moved);\n       "], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "moveToPrevious", "api_method_all": "moveToPrevious(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["r moved = resultSet.moveToPrevious(123, 'test_string')", "etMoveToPrevious003 moveToPrevious \" + moved);\n       ", "r moved = resultSet.moveToPrevious();\n            expe", "etMoveToPrevious002 moveToPrevious \" + moved);\n       ", "r moved = resultSet.moveToPrevious();\n            cons", "etMoveToPrevious004 moveToPrevious \" + moved);\n       ", "etMoveToPrevious001 moveToPrevious \" + moved);\n       ", "  moved = resultSet.moveToPrevious();\n            cons", "r moved = resultSet.moveToPrevious(123);\n            c"], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "move", "api_method_all": "move(offset: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 348, "since": 8, "api_used": "\u662f", "lines": ["'testDeviceKvStoreRemoveDeviceData104', 0, a", "'testDeviceKvStoreRemoveDeviceData101');\n   ", "PI8]DeviceKvStore.RemoveDeviceData()\n     * ", "    await kvStore.removeDeviceData(deviceid,", "'testDeviceKvStoreRemoveDeviceData104 remove", "'testDeviceKvStoreRemoveDeviceData101 remove", "moveDeviceData103 removeDeviceData success')", "'testDeviceKvStoreRemoveDeviceData103', 0, a", "moveDeviceData102 removeDeviceData fail');\n ", "'testDeviceKvStoreRemoveDeviceData103 remove", "moveDeviceData104 removeDeviceData success')", "          storage.removeStorageFromCacheSync", "Api DeviceKvStore.RemoveDeviceData testcase ", "'testDeviceKvStoreRemoveDeviceData103');\n   ", "\n    \n    it('testRemoveStorageFromCache001'", "'testDeviceKvStoreRemoveDeviceData001', 0, a", "'testDeviceKvStoreRemoveDeviceData101 e ' + ", "Api DeviceKvStore.RemoveDeviceData() testcas", "'testDeviceKvStoreRemoveDeviceData102', 0, a", "moveDeviceData101 removeDeviceData success')", "moveDeviceData101 removeDeviceData fail');\n ", "promise = storage.removeStorageFromCache('/d", "    await kvStore.removeDeviceData('', funct", "'testDeviceKvStoreRemoveDeviceData104');\n   ", "moveDeviceData104 removeDeviceData fail');\n ", "'testDeviceKvStoreRemoveDeviceData101 get su", "'testDeviceKvStoreRemoveDeviceData104 e ' + ", "moveDeviceData102 removeDeviceData success')", "'testDeviceKvStoreRemoveDeviceData001');\n   ", "    await kvStore.removeDeviceData(function ", "'testDeviceKvStoreRemoveDeviceData101 put su", "'testDeviceKvStoreRemoveDeviceData101', 0, a", "'testDeviceKvStoreRemoveDeviceData102 remove", "moveDeviceData103 removeDeviceData fail');\n ", "    await kvStore.removeDeviceData(null, fun", "\n    \n    it('testRemoveStorageFromCache002'", "'testDeviceKvStoreRemoveDeviceData103 e ' + ", "'testDeviceKvStoreRemoveDeviceData102');\n   "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "moveToPosition", "api_method_all": "moveToPosition(position: number): boolean;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["r moved = resultSet.moveToPosition(5);\n            con", "r moved = resultSet.moveToPosition(1, 'test_string');\n", "etMoveToPosition001 moveToPosition \" + moved);\n       ", "etMoveToPosition004 moveToPosition \" + moved);\n       ", "  moved = resultSet.moveToPosition(5);\n            con", "r moved = resultSet.moveToPosition();\n            cons", "etMoveToPosition003 moveToPosition \" + moved);\n       ", "etMoveToPosition002 moveToPosition \" + moved);\n       "], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "isFirst", "api_method_all": "isFirst(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["ar flag = resultSet.isFirst(1);\n            con", "ResultSetIsFirst001 isFirst \" + flag);\n        ", "ResultSetIsFirst003 isFirst \" + flag);\n        ", "ar flag = resultSet.isFirst(1, 'test_string');\n", "ResultSetIsFirst002 isFirst \" + flag);\n        ", "ar flag = resultSet.isFirst();\n            cons", "   flag = resultSet.isFirst();\n            cons", "ResultSetIsFirst004 isFirst \" + flag);\n        "], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "isLast", "api_method_all": "isLast(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["ar flag = resultSet.isLast(1);\n            con", "eResultSetIsLast004 isLast \" + flag);\n        ", "eResultSetIsLast001 isLast \" + flag);\n        ", "eResultSetIsLast003 isLast \" + flag);\n        ", "ar flag = resultSet.isLast();\n            cons", "eResultSetIsLast002 isLast \" + flag);\n        ", "ar flag = resultSet.isLast(1, 'test_string');\n"], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "isBeforeFirst", "api_method_all": "isBeforeFirst(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["ar flag = resultSet.isBeforeFirst();\n            cons", "SetIsBeforeFirst002 isBeforeFirst \" + flag);\n        ", "ar flag = resultSet.isBeforeFirst(1, 'test_string');\n", "SetIsBeforeFirst003 isBeforeFirst \" + flag);\n        ", "SetIsBeforeFirst001 isBeforeFirst \" + flag);\n        ", "SetIsBeforeFirst004 isBeforeFirst \" + flag);\n        ", "ar flag = resultSet.isBeforeFirst(1);\n            con"], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "isAfterLast", "api_method_all": "isAfterLast(): boolean;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["tSetIsAfterLast002  isAfterLast true=\" + flag);\n   ", "ar flag = resultSet.isAfterLast(1);\n            con", "ar flag = resultSet.isAfterLast(1, 'test_string');\n", "ltSetIsAfterLast004 isAfterLast \" + flag);\n        ", "ltSetIsAfterLast001 isAfterLast \" + flag);\n        ", "ar flag = resultSet.isAfterLast();\n            cons", "ltSetIsAfterLast003 isAfterLast \" + flag);\n        "], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KvStoreResultSet", "api_method_name": "getEntry", "api_method_all": "getEntry(): Entry;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["r entry = resultSet.getEntry(1);\n            con", "esultSetGetEntry003 getEntry \" + entry);\n       ", "esultSetGetEntry004 getEntry \" + entry);\n       ", "r entry = resultSet.getEntry(1, 'test_string');\n", "esultSetGetEntry001 getEntry \" + entry);\n       ", "  entry = resultSet.getEntry();\n            cons", "esultSetGetEntry002 getEntry \" + entry);\n       ", "r entry = resultSet.getEntry();\n            cons"], "files": ["KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_all": "class Query {\n        \n        constructor()        \n        \n        reset(): Query;\n        \n        equalTo(field: string, value: number|string|boolean): Query;\n        \n        notEqualTo(field: string, value: number|string|boolean): Query;\n        \n        greaterThan(field: string, value: number|string|boolean): Query;\n        \n        lessThan(field: string, value: number|string): Query;\n        \n        greaterThanOrEqualTo(field: string, value: number|string): Query;\n        \n        lessThanOrEqualTo(field: string, value: number|string): Query;\n        \n        isNull(field: string): Query;\n        \n        inNumber(field: string, valueList: number[]): Query;\n        \n        inString(field: string, valueList: string[]): Query;\n        \n        notInNumber(field: string, valueList: number[]): Query;\n        \n        notInString(field: string, valueList: string[]): Query;\n        \n        like(field: string, value: string): Query;\n        \n        unlike(field: string, value: string): Query;\n        \n        and(): Query;\n        \n        or(): Query;\n        \n        orderByAsc(field: string): Query;\n        \n        orderByDesc(field: string): Query;\n        \n        limit(total: number, offset: number): Query;\n        \n        isNotNull(field: string): Query;\n        \n        beginGroup(): Query;\n        \n        endGroup(): Query;\n        \n        prefixKey(prefix: string): Query;\n        \n        setSuggestIndex(index: string): Query;\n\t\t\n\t\tdeviceId(deviceId:string):Query;\n\t\t\n\t\tgetSqlLike():string;\n    }", "api_method_name": "Query", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 328, "since": 8, "api_used": "\u662f", "lines": ["edData';\n\ndescribe('QueryTest', function() {\n", "tc.desc Test Js Api Query.GreatThan() testcas", "* @tc.name [JS-API8]Query.LessThan().\n     * ", "query = new factory.Query();\n            quer", "tc.desc Test Js Api Query.GreaterThanOrEqualT", "  {\n            let QuerySqlPromise = rdbStor", "tc.desc Test Js Api Query.LessThan() testcase", ")\n            await QuerySqlPromise\n        }", "est.js')\nrequire('./QueryJsunit.test.js')\nreq", "    query = new ddm.Query();\n            expe", "* @tc.name [JS-API8]Query.GreaterThanOrEqualT", "query = new factory.Query();\n                ", "* @tc.name [JS-API8]Query.GreatThan().\n     *", " test\")\n            QuerySqlPromise.then(asyn"], "files": ["DeviceKvStorePromiseJsunit.test.js", "List.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "QueryJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["@tc.desc predicates constructor test\n     */\n    it", "@tc.name predicates constructor test\n     * @tc.num"], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "reset", "api_method_all": "reset(): Query;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 31, "since": 8, "api_used": "\u662f", "lines": [";\n            query.reset().inNumber(\"key\", u", ".\n            query.reset().inNumber(\"key\", f", ";\n            query.reset();\n        } catch ", ";\n            query.reset().inNumber(\"key\", c", ";\n            query.reset(3);\n            con", ";\n            query.reset().inNumber(\"key\", i", ";\n            query.reset();\n            cons", ";\n            query.reset();\n            quer", ";\n            query.reset();\n            expe", ";\n            query.reset().inNumber(\"key\", f", ";\n            query.reset().equalTo(\"key\", \"v", "ole.log(\"sql after  reset: \" + query.getSqlLi"], "files": ["QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "equalTo", "api_method_all": "equalTo(field: string, value: number|string|boolean): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 122, "since": 8, "api_used": "\u662f", "lines": ["         predicates.equalTo('age', 28)\n        ", "         predicates.equalTo(\"stringValue\", \"ABC", "()\n                .equalTo(\"characterValue\", '", "         predicates.equalTo('name', 'zhangsan')", "eValue\", -128).or().equalTo(\"byteValue\", 1);\n  ", "\")\n                .equalTo(\"characterValue\", '", "         predicates.equalTo('name', 'lisi')\n   ", "taAbilityPredicates.equalTo(\"integerValue\", 1);", "         predicates.equalTo(\"shortValue\", -3276", "()\n                .equalTo(\"integerValue\", 1);", "         predicates.equalTo(\"longValue\", 1);\n  ", "taAbilityPredicates.equalTo(\"shortValue\", -3276", "\n        predicates.equalTo(\"name\", \"zhangsan\")", "          predicate.equalTo(\"id\", 1);\n         ", "taAbilityPredicates.equalTo(\"longValue\", 1);\n  ", "         predicates.equalTo(\"booleanValue\", tru", "taAbilityPredicates.equalTo(\"booleanValue\", tru", "         predicates.equalTo(\"byteValue\", -128).", "         predicates.equalTo(\"floatValue\", -0.12", "         predicates.equalTo(\"doubleValue\", DOUB", "         predicates.equalTo(\"integerValue\", 1);", "taAbilityPredicates.equalTo(\"byteValue\", -128).", "HIJKLMN\").or().or().equalTo(\"integerValue\", 1);", "()\n                .equalTo(\"integerValue\", 214", "taAbilityPredicates.equalTo(\"doubleValue\", DOUB", "taAbilityPredicates.equalTo(\"stringValue\", \"ABC", "IJKLMN\").or().and().equalTo(\"integerValue\", 1);", "()\n                .equalTo(\"integerValue\", 1)\n", "         predicates.equalTo('aaa id', 1)\n      ", "taAbilityPredicates.equalTo(\"floatValue\", -0.12"], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "notEqualTo", "api_method_all": "notEqualTo(field: string, value: number|string|boolean): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 59, "since": 8, "api_used": "\u662f", "lines": ["taAbilityPredicates.notEqualTo(\"shortValue\", -3276", "@tc.desc predicates notEqualTo normal test\n     */", "         predicates.notEqualTo(\"floatValue\", -0.12", ";\n            query.notEqualTo(\"key\", 0);\n        ", "taAbilityPredicates.notEqualTo(\"floatValue\", -0.12", "         predicates.notEqualTo(\"doubleValue\", DOUB", "taAbilityPredicates.notEqualTo(\"stringValue\", \"ABC", "         predicates.notEqualTo(\"integerValue\", 1);", ";\n            query.notEqualTo(\"key2\", 5.0);\n     ", "         predicates.notEqualTo(\"shortValue\", -3276", "         predicates.notEqualTo(\"stringValue\", \"ABC", "taAbilityPredicates.notEqualTo(\"byteValue\", -128);", "alTo(\"key2\", \"str\").notEqualTo(\"key3\", false);\n   ", "lTo(\"key\", 0).and().notEqualTo(\"key\", 1).and();\n  ", ";\n            query.notEqualTo(\"key\", \"V0\").orderB", ";\n            query.notEqualTo(\"key\", false).order", "         predicates.notEqualTo(\"booleanValue\", tru", "@tc.name predicates notEqualTo normal test\n     * ", "taAbilityPredicates.notEqualTo(\"byteValue\", 1);\n  ", ";\n            query.notEqualTo(\"key3\", false);\n   ", "r(\"key\", [1, 7, 8]).notEqualTo(\"kkk\", 5);\n        ", "[\"v1\", \"v2\", \"v3\"]).notEqualTo(\"kkk\", \"v3\");\n     ", "taAbilityPredicates.notEqualTo(\"doubleValue\", DOUB", ";\n            query.notEqualTo(\"key1\", \"value\", \"t", "query.isNull(\"key\").notEqualTo(\"key1\", 4).isNull(\"", "taAbilityPredicates.notEqualTo(\"integerValue\", 1);", ";\n            query.notEqualTo(\"key4\", \"string\");\n", "taAbilityPredicates.notEqualTo(\"booleanValue\", tru", ";\n            query.notEqualTo(\"key\", 0).or(1).not", ";\n            query.notEqualTo(\"key2\", NaN);\n     ", ";\n            query.notEqualTo(\"key\", \"v1\");\n     ", ";\n            query.notEqualTo(\"key\", 0).and().not", ";\n            query.notEqualTo(\"key\", 5);\n        ", ";\n            query.notEqualTo(\"key0\", 5).equalTo(", "         predicates.notEqualTo(\"longValue\", 1);\n  ", "taAbilityPredicates.notEqualTo(\"longValue\", 1);\n  ", "         predicates.notEqualTo(\"byteValue\", -128);", ";\n            query.notEqualTo(\"key\", 0).and(1).no", ";\n            query.notEqualTo(\"key\", 0).or();\n   ", ";\n            query.notEqualTo(\"key1\", 5);\n       ", ".equalTo(\"key1\", 5).notEqualTo(\"key2\", \"str\").notE", "         predicates.notEqualTo(\"byteValue\", 1);\n  "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "greaterThan", "api_method_all": "greaterThan(field: string, value: number|string|boolean): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 92, "since": 8, "api_used": "\u662f", "lines": ["taAbilityPredicates.greaterThan(\"longValue\", -999);", "taAbilityPredicates.greaterThan(\"integerValue\", -99", "         predicates.greaterThan(\"stringValue\", \"ABC", "         predicates.greaterThan(\"integerValue\", 1);", "taAbilityPredicates.greaterThanOrEqualTo(\"longValue", "taAbilityPredicates.greaterThan(\"doubleValue\", 999.", "taAbilityPredicates.greaterThan(\"stringValue\", \"ABC", "@tc.name predicates greaterThan normal test\n     * ", "taAbilityPredicates.greaterThanOrEqualTo(\"stringVal", "taAbilityPredicates.greaterThan(\"doubleValue\", 0.0)", "taAbilityPredicates.greaterThanOrEqualTo(\"doubleVal", "taAbilityPredicates.greaterThanOrEqualTo(\"integerVa", "         predicates.greaterThan(\"doubleValue\", 0.0)", "taAbilityPredicates.greaterThan(\"stringValue\", \"ZZZ", "@tc.desc predicates greaterThanOrEqualTo normal tes", "@tc.name predicates greaterThanOrEqualTo normal tes", "         predicates.greaterThan(\"longValue\", 1);\n  ", "taAbilityPredicates.greaterThan(\"longValue\", 1);\n  ", "@tc.desc predicates greaterThan normal test\n     */", "taAbilityPredicates.greaterThan(\"integerValue\", 1);"], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "lessThan", "api_method_all": "lessThan(field: string, value: number|string): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 92, "since": 8, "api_used": "\u662f", "lines": ["taAbilityPredicates.lessThan(\"longValue\", -92233", "taAbilityPredicates.lessThan(\"longValue\", 1);\n  ", "taAbilityPredicates.lessThan(\"doubleValue\", 1.0)", "taAbilityPredicates.lessThanOrEqualTo(\"longValue", "         predicates.lessThan(\"doubleValue\", 0.0)", "taAbilityPredicates.lessThan(\"integerValue\", 1);", "         predicates.lessThan(\"integerValue\", 1);", "         predicates.lessThan(\"longValue\", 1);\n  ", "@tc.desc predicates lessThanOrEqualTo normal tes", "taAbilityPredicates.lessThanOrEqualTo(\"stringVal", "@tc.name predicates lessThanOrEqualTo normal tes", "taAbilityPredicates.lessThan(\"stringValue\", \"ABD", "         predicates.lessThan(\"stringValue\", \"ABD", "taAbilityPredicates.lessThanOrEqualTo(\"integerVa", "taAbilityPredicates.lessThan(\"doubleValue\", 0.0)", "taAbilityPredicates.lessThanOrEqualTo(\"doubleVal", "taAbilityPredicates.lessThan(\"integerValue\", -21", "@tc.desc predicates lessThan normal test\n     */", "@tc.name predicates lessThan normal test\n     * "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "greaterThanOrEqualTo", "api_method_all": "greaterThanOrEqualTo(field: string, value: number|string): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 34, "since": 8, "api_used": "\u662f", "lines": [";\n            query.greaterThanOrEqualTo(\"key1\", \"value\", \"t", ";\n            query.greaterThanOrEqualTo(\"key3\", true);\n    ", ";\n            query.greaterThanOrEqualTo(\"key4\", \"string\");\n", ";\n            query.greaterThanOrEqualTo(\"key1\", 5);\n       ", ";\n            query.greaterThanOrEqualTo(\"key2\", 5.0);\n     ", "5)\n                .greaterThanOrEqualTo(\"key1\", \"v5\")\n     ", "\")\n                .greaterThanOrEqualTo(\"key3\", false);\n   ", "         predicates.greaterThanOrEqualTo(\"stringValue\", \"ABC", "         predicates.greaterThanOrEqualTo(\"integerValue\", 1);", ";\n            query.greaterThanOrEqualTo(\"key0\", 5)\n        ", "@tc.name predicates greaterThanOrEqualTo normal test\n     * ", "taAbilityPredicates.greaterThanOrEqualTo(\"stringValue\", \"ABC", "         predicates.greaterThanOrEqualTo(\"doubleValue\", 0.0)", "         predicates.greaterThanOrEqualTo(\"longValue\", 1);\n  ", ";\n            query.greaterThanOrEqualTo(\"key\", 5);\n        ", ";\n            query.greaterThanOrEqualTo(\"key2\", NaN);\n     ", "@tc.desc predicates greaterThanOrEqualTo normal test\n     */", "taAbilityPredicates.greaterThanOrEqualTo(\"doubleValue\", 0.0)", "taAbilityPredicates.greaterThanOrEqualTo(\"integerValue\", 1);", "taAbilityPredicates.greaterThanOrEqualTo(\"longValue\", 1);\n  "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "lessThanOrEqualTo", "api_method_all": "lessThanOrEqualTo(field: string, value: number|string): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 34, "since": 8, "api_used": "\u662f", "lines": ["ualTo(\"key1\", \"v5\").lessThanOrEqualTo(\"key3\", false);\n   ", ";\n            query.lessThanOrEqualTo(\"key4\", \"string\");\n", "taAbilityPredicates.lessThanOrEqualTo(\"integerValue\", 1);", ";\n            query.lessThanOrEqualTo(\"key2\", 5.0);\n     ", "@tc.name predicates lessThanOrEqualTo normal test\n     * ", "         predicates.lessThanOrEqualTo(\"doubleValue\", 0.0)", ";\n            query.lessThanOrEqualTo(\"key1\", \"value\", \"t", "rEqualTo(\"key0\", 5).lessThanOrEqualTo(\"key1\", \"v5\").lessT", ";\n            query.lessThanOrEqualTo(\"key\", 5);\n        ", "@tc.desc predicates lessThanOrEqualTo normal test\n     */", ";\n            query.lessThanOrEqualTo(\"key3\", true);\n    ", "taAbilityPredicates.lessThanOrEqualTo(\"stringValue\", \"ABD", ";\n            query.lessThanOrEqualTo(\"key2\", NaN);\n     ", "         predicates.lessThanOrEqualTo(\"stringValue\", \"ABD", "taAbilityPredicates.lessThanOrEqualTo(\"longValue\", 1);\n  ", "taAbilityPredicates.lessThanOrEqualTo(\"doubleValue\", 0.0)", ";\n            query.lessThanOrEqualTo(\"key0\", 5).lessThan", "         predicates.lessThanOrEqualTo(\"integerValue\", 1);", "         predicates.lessThanOrEqualTo(\"longValue\", 1);\n  ", ";\n            query.lessThanOrEqualTo(\"key1\", 5);\n       "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "isNull", "api_method_all": "isNull(field: string): Query;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 30, "since": 8, "api_used": "\u662f", "lines": ["taAbilityPredicates.isNull(\"longValue\");\n     ", " @tc.desc resultSet isNull normal test\n     */", ";\n            query.isNull(\"key2\");\n          ", "\n        predicates.isNull(\"stringValue\");\n   ", "tEqualTo(\"key1\", 4).isNull(\"key2\");\n          ", " @tc.name resultSet isNull normal test\n     * ", "taAbilityPredicates.isNull(\"stringValue\");\n   ", ";\n            query.isNull(0);\n            con", "@tc.desc predicates isNull normal test\n     */", ";\n            query.isNull(\"key\").notEqualTo(\"", "\n        predicates.isNull(\"primLongValue\");\n ", ";\n            query.isNull(\"key\");\n           ", ";\n            query.isNull(\"key\", 0);\n        ", "taAbilityPredicates.isNull(\"primLongValue\");\n ", "taAbilityPredicates.isNull(\"stringValueX\");\n  ", "\n        predicates.isNull(\"longValue\");\n     ", "@tc.name predicates isNull normal test\n     * ", "\n        predicates.isNull(\"stringValueX\");\n  "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "inNumber", "api_method_all": "inNumber(field: string, valueList: number[]): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": [")\n            query.inNumber(\"key\", [1, 2, 97]);", ";\n            query.inNumber(\"key\", 0);\n        ", "       console.log(\"inNumber([1, 2, 97])  => \" +", ";\n            query.inNumber(\"key\", [1, 2.3, 987", ";\n            query.inNumber([0, 1]);\n          ", "       console.log(\"inNumber(Float32Array([-21,3", "      query.reset().inNumber(\"key\", u8);\n       ", "      query.reset().inNumber(\"key\", i16);\n      ", "       console.log(\"inNumber([1, -2.3, Number.MA", "       console.log(\"inNumber([1, 2, Number.MAX_V", "       console.log(\"inNumber(Float64Array([-21,3", ";\n            query.inNumber(\"key4\", [1, -2.3, N", "       console.log(\"inNumber(Int8Array([-21,31])", "      query.reset().inNumber(\"key\", f32e);\n     ", "       console.log(\"inNumber(Uint8Array([-21,31]", ";\n            query.inNumber(\"key\", b64);\n      ", "]).\n                inNumber(\"key2\", [0xf0123456", "      query.reset().inNumber(\"key\", c8);\n       ", "      query.reset().inNumber(\"key\", i32);\n      ", "      query.reset().inNumber(\"key\", f32);\n      ", "       console.log(\"inNumber(Uint16Array([-21,31", "       console.log(\"inNumber(Int32Array([-21,31]", "      query.reset().inNumber(\"key\", i8);\n       ", ";\n            query.inNumber(\"key\", u64);\n      ", "      query.reset().inNumber(\"key\", f64);\n      ", "       console.log(\"inNumber([1, 2, 0xa123456789", "      query.reset().inNumber(\"key\", u32);\n      ", "       console.log(\"inNumber(UInt32Array([-21,31", "       console.log(\"inNumber(Int16Array([-21,31]", ";\n            query.inNumber(\"key2\", [-1, 3, -98", ";\n            query.inNumber(\"key\");\n           ", ";\n            query.inNumber(\"key3\", [-1, 4, -98", ";\n            query.inNumber(\"key1\", [-1, 3, 987", "]).\n                inNumber(\"key2\", [0x10abcdef", "]).\n                inNumber(\"key2\", [0b10101]);", "      query.reset().inNumber(\"key\", u16);\n      "], "files": ["QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "inString", "api_method_all": "inString(field: string, valueList: string[]): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [";\n            query.inString(\"key\", 0);\n        ", ";\n            query.inString(\"key\", [\"a2z\" , 'z2", ";\n            query.inString(\"key2\", [\"AAA\" ]);\n", ";\n            query.inString(\"key\", [0, 1]);\n   ", "])\n                .inString(\"key2\", [\"AAA\" ])\n ", ";\n            query.inString(\"key1\", [\"AAA\", \"BB", "])\n                .inString(\"key2\", [\"AAA\", \"AA"], "files": ["QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "notInNumber", "api_method_all": "notInNumber(field: string, valueList: number[]): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["To(\"key\", 0).and(1).notInNumber(\"key\", [1, 3]);\n   ", "lTo(\"key\", 0).or(1).notInNumber(\"key\", [1, 3]);\n   ", ";\n            query.notInNumber(\"key\", [\"string\"]);", ";\n            query.notInNumber(\"key\", [1], 2);\n   ", ";\n            query.notInNumber(\"key\", [1, 2]);\n   ", "r(\"key\", [1, 2, 3]).notInNumber(\"key\", [1, 7, 8]).n", ";\n            query.notInNumber(\"key\", [1, 2, 3]).n", ";\n            query.notInNumber(\"key\", [1000]);\n   "], "files": ["QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "notInString", "api_method_all": "notInString(field: string, valueList: string[]): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": [";\n            query.notInString(\"key\", [\"v1\", \"v2\",", ";\n            query.notInString(\"key\", [\"v1\", \"NaN\"", ";\n            query.notInString(\"key\", [\"v1\", \"v2\"]", ";\n            query.notInString(\"key\", [\"\", \"abccd\"", ";\n            query.notInString(\"key\", [1, 2]);\n   "], "files": ["QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "like", "api_method_all": "like(field: string, value: string): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 78, "since": 8, "api_used": "\u662f", "lines": ["\n        predicates.like(\"stringValue\", \"\u4e2d\")", "@tc.name predicates like normal test\n     * ", "taAbilityPredicates.like(\"stringValue\", \"%LM", "@tc.desc predicates like normal test\n     */", "\n        predicates.like(\"stringValue\", \"ABC", "taAbilityPredicates.like(\"stringValue\", \"ABC", "\n        predicates.like(\"stringValue\", \"%LM", "\n        predicates.like(\"characterValue\", \"", "taAbilityPredicates.like(\"stringValue\", \"\u4e2d\")", "taAbilityPredicates.like(\"characterValue\", \""], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "unlike", "api_method_all": "unlike(field: string, value: string): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": [";\n            query.unlike(\"key\", \"v1\");\n     ", ";\n            query.unlike(\"key\", 0);\n        ", "unlike(\"key\", \"v1\").unlike(\"key\", \"v3\").unlike", "unlike(\"key\", \"v3\").unlike(\"key\", \"v2\");\n     ", ";\n            query.unlike(\"key\", \"str1\", \"str", ";\n            query.unlike(\"key\", \"v1\").unlike"], "files": ["QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "and", "api_method_all": "and(): Query;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 36, "since": 8, "api_used": "\u662f", "lines": ["CDEFGHIJKLMN\").or().and().equalTo(\"integerV", " * @tc.desc the min and max value test with", "TAG + \"set employee and product to be distr", "   * @tc.desc begin and end with ? by glob.", ".equalTo(\"key1\", 0).and().equalTo(\"key2\", \"", "@tc.desc the common and min value test with", "otEqualTo(\"key\", 0).and().notEqualTo(\"key\",", ";\n            query.and();\n            quer", "otEqualTo(\"key\", 0).and(1).notInNumber(\"key", "otEqualTo(\"key\", 1).and();\n            expe", "request\" + \" with \\\"and\\\" or use or() befor", "\")\n                .and()\n                .", "@tc.desc predicates and normal test\n     */", "@tc.desc the common and max value test with", "@tc.name predicates and normal test\n     * ", "y.isNotNull(\"key1\").and().notEqualTo(\"key1\"", "   * @tc.desc begin and end with * by glob."], "files": ["DataAbilityPredicatesJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "or", "api_method_all": "or(): Query;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 6347, "since": 7, "api_used": "\u662f", "lines": ["", "\n                \"shortValue\": -32768,\n   ", "ribe, beforeAll, beforeEach, afterEach, af", "ait dataRdb.getRdbStore(STORE_CONFIG, 1);\n", "result = await rdbStore.query(predicates);", "NTEGER , \"\n+ \"primShortValue INTEGER , pri", "ist.test')\n        core.execute()\n    },\n ", "sh')\n        const core = Core.getInstance", "unction () {\n    beforeAll(async function ", "rimCharValue TEXT, `order` INTEGER);\";\n\nco", "eccjsunit/index'\nimport dataRdb from '@oho", "e/regenerator')\n\nexport default {\n    data", "st configService = core.getDefaultService(", "\n                \"shortValue\": 1,\n        ", "mport {describe, beforeAll, beforeEach, af", "         await rdbStore.insert(\"AllDataTyp", "@ohos.data.rdb';\nimport dataAbility from '", "ngValue INTEGER , shortValue INTEGER , boo", "tes.db\",\n}\nvar rdbStore = undefined;\nvar D", "= this.$t('strings.world');\n    },\n    onS", "sole.info(TAG + 'beforeEach')\n    })\n\n    ", "sole.info(TAG + 'beforeAll')\n        rdbSt", "\n        await rdbStore.executeSql(CREATE_", "        })\n        core.addService('expect", "ectExtend)\n        core.init()\n        con", "\n                \"shortValue\": 32767,\n    ", "(\"byteValue\", -128).or().equalTo(\"byteValu", "      const core = Core.getInstance()\n    ", "3();\n    })\n\n    beforeEach(function () {\n", "el/runtime/regenerator')\n\nexport default {", "eAll')\n        rdbStore = await dataRdb.ge", "\ninjectRef.regeneratorRuntime = require('@", "edicates.equalTo(\"shortValue\", -32768.0);\n", "rAll')\n        rdbStore = null\n        awa", " dataRdb.deleteRdbStore(\"Predicates.db\");\n"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "orderByAsc", "api_method_all": "orderByAsc(field: string): Query;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["qualTo(\"key\", \"V0\").orderByAsc(\"sortbykey1\").order", ";\n            query.orderByAsc();\n            cons", ", \"ABCDEFGHIJKLMN\").orderByAsc(\"integerValue\").dis", "ualTo(\"key\", false).orderByAsc(1);\n            con", ", \"ABCDEFGHIJKLMN\").orderByAsc(\"integerValueX\").di", ";\n            query.orderByAsc(\"sortbykey\");\n     ", "ByAsc(\"sortbykey1\").orderByAsc(\"sortbykey2\");\n    "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "orderByDesc", "api_method_all": "orderByDesc(field: string): Query;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["qualTo(\"key\", \"V0\").orderByDesc(\"sortbykey1\").order", ";\n            query.orderByDesc();\n            cons", "yDesc(\"sortbykey1\").orderByDesc(\"sortbykey2\");\n    ", ";\n            query.orderByDesc(\"sortbykey\");\n     ", ", \"ABCDEFGHIJKLMN\").orderByDesc(\"integerValueX\").di", "ualTo(\"key\", false).orderByDesc(1);\n            con", ", \"ABCDEFGHIJKLMN\").orderByDesc(\"integerValue\").dis"], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "limit", "api_method_all": "limit(total: number, offset: number): Query;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 50, "since": 8, "api_used": "\u662f", "lines": [", \"ABCDEFGHIJKLMN\").limitAs(3).offsetAs(-1);\n", ", \"ABCDEFGHIJKLMN\").limitAs(100);\n        let", ", \"ABCDEFGHIJKLMN\").limitAs(0);\n        let p", ", \"ABCDEFGHIJKLMN\").limitAs(3).offsetAs(1);\n ", ";\n            query.limit(10, 2);\n           ", ", \"ABCDEFGHIJKLMN\").limitAs(1);\n        let r", "\"stringValue\", \"\u4e2d\").limitAs(1);\n        let r", "@tc.name predicates limit normal test\n     * ", ", \"ABCDEFGHIJKLMN\").limitAs(3);\n        let r", ".equalTo(\"key2\", 2).limit(10, 2);\n           ", ", \"ABCDEFGHIJKLMN\").limitAs(0);\n        let r", "ualTo(\"key\", false).limit(\"any\", 10);\n       ", ", \"ABCDEFGHIJKLMN\").limitAs(3).offsetAs(0);\n ", "ualTo(\"key\", false).limit(10, 2, \"any\");\n    ", "ualTo(\"key\", false).limit(10);\n            co", ", \"ABCDEFGHIJKLMN\").limitAs(3).offsetAs(5);\n ", ", \"ABCDEFGHIJKLMN\").limitAs(1);\n        let p", "qualTo(\"key\", \"vx\").limit(10, 2)\n            ", "\"stringValue\", \"\u4e2d\").limitAs(1);\n        let p", ", \"ABCDEFGHIJKLMN\").limitAs(-1);\n        let ", "@tc.desc predicates limit normal test\n     */", ", \"ABCDEFGHIJKLMN\").limitAs(3);\n        let p"], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "isNotNull", "api_method_all": "isNotNull(field: string): Query;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 31, "since": 8, "api_used": "\u662f", "lines": ["\n        predicates.isNotNull(\"primLongValue\");\n ", "\n        predicates.isNotNull(\"longValue\");\n     ", "@tc.name predicates isNotNull normal test\n     * ", "taAbilityPredicates.isNotNull(\"longValue\");\n     ", "\n        predicates.isNotNull(\"stringValueX\");\n  ", ";\n            query.isNotNull(1);\n            con", ";\n            query.isNotNull(\"key1\").and().notEq", ";\n            query.isNotNull(\"key\");\n           ", "\n        predicates.isNotNull(\"stringValue\");\n   ", "@tc.desc predicates isNotNull normal test\n     */", "taAbilityPredicates.isNotNull(\"stringValueX\");\n  ", ";\n            query.isNotNull(\"key2\", \"any\");\n   ", "taAbilityPredicates.isNotNull(\"stringValue\");\n   ", "taAbilityPredicates.isNotNull(\"primLongValue\");\n ", ";\n            query.isNotNull(\"$.name\");\n        "], "files": ["DataAbilityPredicatesJsunit.test.js", "QueryJsunit.test.js", "RdbstorePredicatesJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "beginGroup", "api_method_all": "beginGroup(): Query;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [";\n            query.beginGroup(1);\n            con", ";\n            query.beginGroup();\n            quer", ";\n            query.beginGroup();\n            expe", ";\n            query.beginGroup(\"any\", 1);\n        "], "files": ["QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "endGroup", "api_method_all": "endGroup(): Query;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": [";\n            query.endGroup();\n            quer", ";\n            query.endGroup();\n            expe", ";\n            query.endGroup(0);\n            con", ";\n            query.endGroup(\"any\");\n           "], "files": ["QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "prefixKey", "api_method_all": "prefixKey(prefix: string): Query;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 33, "since": 8, "api_used": "\u662f", "lines": [";\n            query.prefixKey(\"kx1\").or().prefixK", "efixKey(\"kx2\").or().prefixKey(\"kx3\");\n           ", "              query.prefixKey(\"batch_test\");\n    ", ";\n            query.prefixKey(123);\n            c", ";\n            query.prefixKey(\"0\");\n            e", ";\n            query.prefixKey(\"k\", \"any\");\n      ", ";\n            query.prefixKey(\"batch_test\");\n    ", ";\n            query.prefixKey('test_key_');\n     ", ";\n            query.prefixKey(\"$.name\");\n        ", "efixKey(\"kx1\").or().prefixKey(\"kx2\").or().prefixK"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "setSuggestIndex", "api_method_all": "setSuggestIndex(index: string): Query;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": [";\n            query.setSuggestIndex(\"k\", \"any\");\n      ", ";\n            query.setSuggestIndex(\"kxx\").or().equalTo", ";\n            query.setSuggestIndex(\"0\");\n            e", ";\n            query.setSuggestIndex(\"$.name\");\n        ", ";\n            query.setSuggestIndex(123);\n            c"], "files": ["QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "deviceId", "api_method_all": "deviceId(deviceId:string):Query;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 28, "since": 7, "api_used": "\u662f", "lines": [";\n            query.deviceId(localDeviceId);\n   ", ";\n            query.deviceId(\"$.name\");\n        ", ";\n            query.deviceId(\"0\");\n            e", "              query.deviceId(deviceId);\n        ", "dGet deviceId = ' + deviceId);\n                q", "     query.deviceId(deviceId);\n            }\n   ", ";\n            query.deviceId(\"kxx\").equalTo(\"key", ";\n            query.deviceId(\"k\", \"any\");\n      ", ".log('testPutAndGet deviceId = ' + deviceId);\n  ", "iceId.then(function(deviceId) {\n            cons", ";\n            query.deviceId(123);\n            c", "              query.deviceId(localDeviceId);\n   ", "    localDeviceId = deviceId;\n        }).catch((", "       resolve(data.deviceId);\n            });\n ", " ' + JSON.stringify(deviceId));\n            loca", "then(async function(deviceId) {\n            var "], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "QueryJsunit.test.js", "SchemaJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Query", "api_method_name": "getSqlLike", "api_method_all": "getSqlLike():string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 260, "since": 8, "api_used": "\u662f", "lines": ["r  reset: \" + query.getSqlLike());\n            con", "ultSet006 \" + query.getSqlLike());\n            awa", "       expect(query.getSqlLike() !== \"\").assertTru", ").assertEqual(query.getSqlLike());\n            con", "\"query is \" + query.getSqlLike());\n            exp", ").assertEqual(query.getSqlLike());\n            que", "    let sql = query.getSqlLike();\n            quer", "ultSet005 \" + query.getSqlLike());\n            awa", "xpect(sql === query.getSqlLike()).assertTrue();\n  ", "\"query is \" + query.getSqlLike());\n        } catch"], "files": ["DeviceKvStorePromiseJsunit.test.js", "QueryJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_all": "interface KVStore {\n        \n        put(key: string, value: Uint8Array | string | number | boolean, callback: AsyncCallback<void>): void;\n        put(key: string, value: Uint8Array | string | number | boolean): Promise<void>;\n\n        \n        delete(key: string, callback: AsyncCallback<void>): void;\n        delete(key: string): Promise<void>;\n\n        \n        on(event: 'dataChange', type: SubscribeType, observer: Callback<ChangeNotification>): void;\n\n        \n        on(event: 'syncComplete', syncCallback: Callback<Array<[string, number]>>): void;\n\t\t\n        \n        off(event:'dataChange', observer?: Callback<ChangeNotification>): void;\n\n        \n        putBatch(entries: Entry[], callback: AsyncCallback<void>): void;\n        putBatch(entries: Entry[]): Promise<void>;\n\n        \n        deleteBatch(keys: string[], callback: AsyncCallback<void>): void;\n        deleteBatch(keys: string[]): Promise<void>;\n\n        \n        startTransaction(callback: AsyncCallback<void>): void;\n        startTransaction(): Promise<void>;\n\n        \n        commit(callback: AsyncCallback<void>): void;\n        commit(): Promise<void>;\n\n        \n        rollback(callback: AsyncCallback<void>): void;\n        rollback(): Promise<void>;\n\n        \n        enableSync(enabled: boolean, callback: AsyncCallback<void>): void;\n        enableSync(enabled: boolean): Promise<void>;\n\n        \n        setSyncRange(localLabels: string[], remoteSupportLabels: string[], callback: AsyncCallback<void>): void;\n        setSyncRange(localLabels: string[], remoteSupportLabels: string[]): Promise<void>;\n    }", "api_method_name": "KVStore", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 666, "since": 7, "api_used": "\u662f", "lines": ["gerGetKVStore101 getKVStore success');\n        ", ".log('beforeEach getKVStore err ' + err);\n     ", "og('testKVManagerGetKVStore102 getKVStore succe", "StoreType : factory.KVStoreType.DEVICE_COLLABOR", "it('testKVManagerGetKVStore101', 0, async funct", "og('testKVManagerGetKVStore101');\n        try {", "StoreType : factory.KVStoreType.SINGLE_VERSION,", "og('testKVManagerGetKVStore101 getKVStore succe", "gerGetKVStore102 getKVStore e ' + e);\n         ", "og('testKVManagerGetKVStore103');\n        const", "ait kvManager.deleteKVStore(TEST_BUNDLE_NAME, T", ".log('beforeEach getKVStore success');\n        ", "og('testKVManagerGetKVStore102');\n        try {", "it('testKVManagerGetKVStore103', 0, async funct", "wait kvManager.closeKVStore(TEST_BUNDLE_NAME, T", "e.log('beforeAll getKVStore err ' + err);\n     ", "log('afterEach closeKVStore err ' + err);\n     ", "gerGetKVStore101 getKVStore e ' + e);\n         ", "og('testKVManagerGetKVStore102 getKVStore e ' +", " await kvManager.getKVStore(TEST_STORE_ID, opti", "og('testKVManagerGetKVStore102 getKVStore fail'", " await kvManager.getKVStore(options, function (", "it('testKVManagerGetKVStore102', 0, async funct", "og('afterEach deleteKVStore success');\n        ", "gerGetKVStore102 getKVStore fail');\n           ", "log('afterEach closeKVStore success');\n        ", "og('afterEach deleteKVStore err ' + err);\n     ", "og('testKVManagerGetKVStore101 getKVStore e ' +", "e.log('beforeAll getKVStore for getDeviceId suc", "gerGetKVStore102 getKVStore success');\n        "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "put", "api_method_all": "put(key: string, value: Uint8Array | string | number | boolean, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 578, "since": 8, "api_used": "\u662f", "lines": ["nst promise = mPref.put(KEY_TEST_BOOLEAN_ELEMENT, true);\n      ", "nst promise = mPref.put(KEY_TEST_FLOAT_ELEMENT, 4.0);\n        p", "        await mPref.put(KEY_TEST_BOOLEAN_ELEMENT, true, functio", "ne) {\n        mPref.putSync(KEY_TEST_FLOAT_ELEMENT, 1.1);\n     ", "        await mPref.put(KEY_TEST_STRING_ELEMENT, '', function (", " {\n            pref.putSync('test', 2);\n            pref.flushS", "        await mPref.put(KEY_TEST_FLOAT_ELEMENT, 4.0, function (", "nst promise = mPref.put(KEY_TEST_STRING_ELEMENT, '');\n        p", "/**\n     * @tc.name put String callback interface test\n     * @", " {\n            perf.putSync(\"int\", 3);\n        } catch (e) {\n  ", "nc();\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 3);\n        c", "nst promise = mPref.put(KEY_TEST_STRING_ELEMENT, 'test');\n     ", "ne) {\n        mPref.putSync(KEY_TEST_LONG_ELEMENT, 0);\n        ", "nc();\n        mPref.putSync(KEY_TEST_FLOAT_ELEMENT, 3.0);\n     ", "nst promise = mPref.put(KEY_TEST_INT_ELEMENT, 4);\n        promi", "ne) {\n        mPref.putSync(KEY_TEST_STRING_ELEMENT, \"abc\");\n  ", "nc();\n        mPref.putSync(KEY_TEST_LONG_ELEMENT, 4);\n        ", " () {\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 1);\n        e", "st\");\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 3);\n        m", "ne) {\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 1);\n        c", "nst promise = mPref.put(KEY_TEST_LONG_ELEMENT, 4);\n        prom", "nc();\n        mPref.putSync(KEY_TEST_LONG_ELEMENT, 3);\n        ", "        await mPref.put(KEY_TEST_INT_ELEMENT, 4, function (err,", " () {\n        mPref.putSync(KEY_TEST_STRING_ELEMENT, \"test\");\n ", "nc();\n        mPref.putSync(KEY_TEST_STRING_ELEMENT, \"test\");\n ", "        await mPref.put(KEY_TEST_LONG_ELEMENT, 4, function (err", "ne) {\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 1);\n        a", "ATH);\n        mPref.putSync('test', 2);\n        mPref.flushSync", "ne) {\n        mPref.putSync(KEY_TEST_FLOAT_ELEMENT, 2.0);\n     ", "120\n     * @tc.desc put String callback interface test\n     */\n", "nc();\n        mPref.putSync(KEY_TEST_STRING_ELEMENT, \"abc\");\n  ", "/**\n     * @tc.name put String promise interface test\n     * @t", "130\n     * @tc.desc put String promise interface test\n     */\n ", "nc();\n        mPref.putSync(KEY_TEST_INT_ELEMENT, 3);\n        a", "ne) {\n        mPref.putSync(KEY_TEST_BOOLEAN_ELEMENT, false);\n ", "ge1');\n        perf.putSync('test', 2);\n        try {\n         ", "ne) {\n        mPref.putSync(KEY_TEST_STRING_ELEMENT, \"test\");\n "], "files": ["DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "StorageCallBackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "SchemaJsunit.test.js", "KvStoreResultSetJsunit.test.js", "StoragePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "put", "api_method_all": "put(key: string, value: Uint8Array | string | number | boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 54, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.put(KEY_TEST_STRING_ELEMENT, '').then((data", "      await kvStore.put(KEY_TEST_STRING_ELEMENT, str).then(asyn", "            kvStore.put(\"getDeviceId\", \"byPut\").then((data) => ", "      await kvStore.put(KEY_TEST_INT_ELEMENT, intValue).then(as", "            kvStore.putBatch(entries).then((data) => {\n        ", "      await kvStore.put(KEY_TEST_STRING_ELEMENT, null).then((da", "      await kvStore.putBatch(entries).then(async (err) => {\n   "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "delete", "api_method_all": "delete(key: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 224, "since": 7, "api_used": "\u662f", "lines": [" console.log(TAG + 'delete done: ' + ret)\n                expect(n", "console.log(TAG + \":delete_callback_0113 end\");\n    })\n\n    /**\n  ", "est\n     */\n    it('delete_callback_0112', 0, async function (done", "console.log(TAG + \":delete_callback_0113 start\");\n        try {\n  ", "'')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "@tc.name data share delete_callback test\n     * @tc.number SUB_DDM", "console.log(TAG + \":delete_callback_0110 start\");\n        try {\n  ", "t')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "console.log(TAG + \":delete_promise_0111 end\");\n    })\n\n    /**\n   ", "UB_DDM_DataShare_JS_delete_callback_0110\n     * @tc.desc data shar", "UB_DDM_DataShare_JS_delete_promise_0111\n     * @tc.desc data share", "est\n     */\n    it('delete_promise_0111', 0, async function (done)", "console.log(TAG + \":delete_callback_0112 start\");\n        try {\n  ", "console.log(TAG + \":delete_promise_0111 start\");\n        try {\n   ", "\n            helper.delete(\n                null,\n                ", "@tc.desc data share delete_callback test\n     */\n    it('delete_ca", "ePromise = rdbStore.delete(predicates)\n            deletePromise.t", " console.log(TAG + 'delete with wrong conditions')\n            })\n", "      await dataRdb.deleteRdbStore(\"Predicates.db\");\n    })\n\n    f", "@tc.name data share delete_promise test\n     * @tc.number SUB_DDM_", "i')\n            let deletePromise = rdbStore.delete(predicates)\n  ", ")\n            await deletePromise\n        }\n        //\u5220\u9664\u540e\u67e5\u8be2\n      ", "UB_DDM_DataShare_JS_delete_callback_0112\n     * @tc.desc data shar", "console.log(TAG + \":delete_callback_0110 end\");\n    })\n\n    /**\n  ", "UB_DDM_DataShare_JS_delete_callback_0113\n     * @tc.desc data shar", "===================>deleteCallback=======================>\");\n    ", "      await dataRdb.deleteRdbStore('Delete.db');\n    })\n\n    after", " 1)\n            let deletePromise = rdbStore.delete(predicates)\n  ", "est\n     */\n    it('delete_callback_0110', 0, async function (done", "\n            helper.delete(\n                URI,\n                d", "@tc.desc data share delete_promise test\n     */\n    it('delete_pro", "est\n     */\n    it('delete_callback_0113', 0, async function (done", ")\n            await deletePromise\n        }\n        done()\n       ", "n')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "28)\n            let deletePromise = rdbStore.delete(predicates)\n  ", "console.log(TAG + \":delete_callback_0112 end\");\n    })\n\n    /**\n  "], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "delete", "api_method_all": "delete(key: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 31, "since": 7, "api_used": "\u662f", "lines": ["      await kvStore.deleteBatch(keys).then((err) => {\n            ", "      await kvStore.delete(KEY_TEST_FLOAT_ELEMENT).then((data) => ", "icates)\n            deletePromise.then(async (ret) => {\n          ", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME).then(() => {\n ", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME, data[i]).then(", "      await kvStore.delete(KEY_TEST_BOOLEAN_ELEMENT).then((data) =", "      await kvStore.delete(KEY_TEST_INT_ELEMENT).then((data) => {\n", "      await kvStore.delete(KEY_TEST_STRING_ELEMENT).then((data) =>"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "on", "api_method_all": "on(event: 'dataChange', type: SubscribeType, observer: Callback<ChangeNotification>): void;", "api_type": "", "api_args_count": 3, "api_level": 21, "api_used_count": 9171, "since": 7, "api_used": "\u662f", "lines": ["      console.info('onShow finish')\n      ", " }\n\n    async function buildAllDataType2()", "ction () {\n        console.info(TAG + 'aft", ".info('TestApplication onDestroy');\n    }\n", "fo('TestApplication onCreate');\n    },\n   ", "   beforeEach(function () {\n        consol", "ction () {\n        console.info(TAG + 'bef", " }\n\n    async function buildAllDataType3()", "aType2() {\n        console.log(TAG + \"buil", "deccjsunit/index'\n\nconst injectRef = Objec", ",\n                \"longValue\": 92233720368", "01', 0, async function (done) {\n        co", "  configService.setConfig(this)\n\n        r", ",\n                \"longValue\": -9223372036", " }\n\n    async function buildAllDataType1()", "      }\n    }\n\n    console.log(TAG + \"****", "dicatesTest', function () {\n    beforeAll(", "2, 3])\n            const valueBucket = {\n ", "rder` INTEGER);\";\n\nconst STORE_CONFIG = {\n", "Create() {\n        console.info('TestAppli", "Instance()\n        const expectExtend = ne", "world');\n    },\n    onShow() {\n        con", "xecute()\n    },\n    onReady() {\n    },\n}", "xport default {\n    onCreate() {\n        c", "estroy() {\n        console.info('TestAppli", "aType3() {\n        console.log(TAG + \"buil", "    afterEach(function () {\n        consol", "alue INTEGER , primLongValue INTEGER , \"\n+", ",\n                \"longValue\": 1,\n        ", ".info('TestApplication onCreate');\n    },\n", "ata.dataAbility';\n\nconst TAG = '[RDB_JSKIT", "reate');\n    },\n    onDestroy() {\n        ", "gerValue INTEGER , longValue INTEGER , sho", ";\n    })\n\n    function resultSize(resultSe", "getDefaultService('config')\n        config", "foreAll(async function () {\n        consol", "('config')\n        configService.setConfig", "fo('TestApplication onDestroy');\n    }\n};\n", "itle: ''\n    },\n    onInit() {\n        thi", "onShow() {\n        console.info('onShow fi", "ore.init()\n        const configService = c", "RDB_JSKITS _TEST]'\nconst CREATE_TABLE_ALL_", "fterAll(async function () {\n        consol", "aType1() {\n        console.log(TAG + \"buil", "it()\n        const configService = core.ge", "w finish')\n        const core = Core.getIn"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "on", "api_method_all": "on(event: 'syncComplete', syncCallback: Callback<Array<[string, number]>>): void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 9171, "since": 7, "api_used": "\u662f", "lines": ["      console.info('onShow finish')\n      ", " }\n\n    async function buildAllDataType2()", "ction () {\n        console.info(TAG + 'aft", ".info('TestApplication onDestroy');\n    }\n", "fo('TestApplication onCreate');\n    },\n   ", "   beforeEach(function () {\n        consol", "ction () {\n        console.info(TAG + 'bef", " }\n\n    async function buildAllDataType3()", "aType2() {\n        console.log(TAG + \"buil", "deccjsunit/index'\n\nconst injectRef = Objec", ",\n                \"longValue\": 92233720368", "01', 0, async function (done) {\n        co", "  configService.setConfig(this)\n\n        r", ",\n                \"longValue\": -9223372036", " }\n\n    async function buildAllDataType1()", "      }\n    }\n\n    console.log(TAG + \"****", "dicatesTest', function () {\n    beforeAll(", "2, 3])\n            const valueBucket = {\n ", "rder` INTEGER);\";\n\nconst STORE_CONFIG = {\n", "Create() {\n        console.info('TestAppli", "Instance()\n        const expectExtend = ne", "world');\n    },\n    onShow() {\n        con", "xecute()\n    },\n    onReady() {\n    },\n}", "xport default {\n    onCreate() {\n        c", "estroy() {\n        console.info('TestAppli", "aType3() {\n        console.log(TAG + \"buil", "    afterEach(function () {\n        consol", "alue INTEGER , primLongValue INTEGER , \"\n+", ",\n                \"longValue\": 1,\n        ", ".info('TestApplication onCreate');\n    },\n", "ata.dataAbility';\n\nconst TAG = '[RDB_JSKIT", "reate');\n    },\n    onDestroy() {\n        ", "gerValue INTEGER , longValue INTEGER , sho", ";\n    })\n\n    function resultSize(resultSe", "getDefaultService('config')\n        config", "foreAll(async function () {\n        consol", "('config')\n        configService.setConfig", "fo('TestApplication onDestroy');\n    }\n};\n", "itle: ''\n    },\n    onInit() {\n        thi", "onShow() {\n        console.info('onShow fi", "ore.init()\n        const configService = c", "RDB_JSKITS _TEST]'\nconst CREATE_TABLE_ALL_", "fterAll(async function () {\n        consol", "aType1() {\n        console.log(TAG + \"buil", "it()\n        const configService = core.ge", "w finish')\n        const core = Core.getIn"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "off", "api_method_all": "off(event:'dataChange', observer?: Callback<ChangeNotification>): void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 78, "since": 8, "api_used": "\u662f", "lines": ["            kvStore.off('syncComplete');\n  ", "            kvStore.off('syncComplete', fun", ";\n        kvManager.off('distributedDataSer", "@tc.desc predicates offset normal test\n    ", "   })\n\n    \n    it('off_0031', 0, async fun", "IJKLMN\").limitAs(3).offsetAs(1);\n        le", "            kvStore.off('dataChange');\n    ", "/**\n     * @tc.name off interface test\n    ", "IJKLMN\").limitAs(3).offsetAs(5);\n        le", "            kvStore.off('dataChange', func1", "IJKLMN\").limitAs(3).offsetAs(-1);\n        l", "@tc.name predicates offset normal test\n    ", "console.log(TAG + \":off_0030 start\");\n     ", "            kvStore.off('dataChange', func)", "console.log(TAG + \":off_0030 end\");\n    })\n", "ver);\n        mPref.off('change', observer)", "   })\n\n    \n    it('off_0030', 0, async fun", "\n            helper.off(\n                \"d", " console.log(TAG + \"off dataChange success\"", "IJKLMN\").limitAs(3).offsetAs(0);\n        le", "console.log(TAG + \":off_0031 end\");\n    })\n", "console.log(TAG + \":off_0031 start\");\n     ", "160\n     * @tc.desc off interface test\n    ", ");\n        rdbStore.off(\"dataChange\", (devi"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "StorageSyncJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "ObjectStoreJsunit.test.js", "KvManagerPromiseJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "putBatch", "api_method_all": "putBatch(entries: Entry[], callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 154, "since": 8, "api_used": "\u662f", "lines": [", ms));\n}\n\nfunction putBatchString(len, prefix) {\n    let entries = ", "StoreDeleteBatch101 putBatch success');\n                expect(err =", "vStoreGetEntries101 putBatch success');\n                expect(err =", "eKvStorePutBatch102 putBatch success');\n                expect(err =", "eKvStorePutBatch106 putBatch success');\n                expect(err =", "startTransaction101 putBatch success');\n                    expect(e", "StoreDeleteBatch103 putBatch success');\n                expect(err =", "eKvStorePutBatch001 putBatch fail ' + err);\n                expect(n", "eKvStorePutBatch005 putBatch fail ' + err);\n                expect(n", "eKvStorePutBatch004 putBatch success');\n                expect(err =", "startTransaction102 putBatch success');\n                    expect(e", "      await kvStore.putBatch(entries, async function (err,data) {\n  ", "eKvStorePutBatch002 putBatch success');\n                expect(err =", "     let entries =  putBatchString(10, 'batch_test_string_key');\n   ", "      let entries = putBatchString(10, 'batch_test_string_key');\n   ", "eKvStorePutBatch002 putBatch fail ' + err);\n                expect(n", "eKvStorePutBatch006 putBatch success');\n                expect(err =", "eKvStorePutBatch005 putBatch success');\n                expect(err =", "eKvStorePutBatch003 putBatch success');\n                expect(err =", "oreGetResultSize101 putBatch success');\n                expect(err =", "eKvStorePutBatch003 putBatch fail ' + err);\n                expect(n", "eKvStorePutBatch103 putBatch success');\n                expect(err =", "      await kvStore.putBatch(entries, async function (err, data) {\n ", "eKvStorePutBatch004 putBatch fail ' + err);\n                expect(n", "toreGetResultSet106 putBatch success');\n                expect(err =", "eKvStorePutBatch105 putBatch success');\n                expect(err =", "toreGetResultSet101 putBatch success');\n                expect(err =", "toreGetResultSet105 putBatch success');\n                expect(err =", "vStoreGetEntries102 putBatch success');\n                expect(err =", "eKvStorePutBatch104 putBatch success');\n                expect(err =", "eKvStorePutBatch001 putBatch success');\n                expect(err =", "oreGetResultSize102 putBatch success');\n                expect(err =", "eKvStorePutBatch101 putBatch success');\n                expect(err ="], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "putBatch", "api_method_all": "putBatch(entries: Entry[]): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 36, "since": 8, "api_used": "\u662f", "lines": ["            kvStore.putBatch(entries).then((data) => {\n             ", "      await kvStore.putBatch(entries).then(async (err) => {\n        "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SchemaJsunit.test.js", "KvStoreResultSetJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "deleteBatch", "api_method_all": "deleteBatch(keys: string[], callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": ["startTransaction101 deleteBatch success');\n                        expe", "StoreDeleteBatch101 deleteBatch success');\n                    expect(e", "StoreDeleteBatch003 deleteBatch fail ' + err);\n                    expe", "StoreDeleteBatch103 deleteBatch success');\n                    expect(e", "StoreDeleteBatch001 deleteBatch fail ' + err);\n                    expe", "StoreDeleteBatch001 deleteBatch success');\n                    expect(e", "startTransaction002 deleteBatch fail ' + err);\n                expect(n", "      await kvStore.deleteBatch(keys, function (err,data) {\n           ", "StoreDeleteBatch003 deleteBatch success');\n                }).catch((er", "startTransaction102 deleteBatch success');\n                        expe", "startTransaction002 deleteBatch success');\n                expect(err =", "StoreDeleteBatch002 deleteBatch fail ' + err);\n                expect(n", "startTransaction001 deleteBatch fail ' + err);\n                expect(n", "StoreDeleteBatch002 deleteBatch success');\n            }).catch((err) =", "      await kvStore.deleteBatch(keys, async function (err,data) {\n     ", "StoreDeleteBatch102 deleteBatch success');\n                expect(err =", "startTransaction001 deleteBatch success');\n                expect(err ="], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "deleteBatch", "api_method_all": "deleteBatch(keys: string[]): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.deleteBatch(keys).then((err) => {\n                 ", "      await kvStore.deleteBatch(keys).then((err) => {\n                c"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "startTransaction", "api_method_all": "startTransaction(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 232, "since": 8, "api_used": "\u662f", "lines": ["g('testDeviceKvStorestartTransaction102 startTransaction success');\n        ", "startTransaction101 startTransaction success');\n                expect(err =", "g('testDeviceKvStorestartTransaction101 entries: ' + JSON.stringify(entries)", "g('testDeviceKvStorestartTransaction101 putBatch success');\n                ", "g('testDeviceKvStorestartTransaction101 deleteBatch success');\n             ", "g('testDeviceKvStorestartTransaction102 e ' + e);\n            expect(null).a", "s Api DeviceKvStore.startTransaction testcase 105\n     */\n    it('testDevice", "g('testDeviceKvStorestartTransaction103 startTransaction success');\n        ", "startTransaction104 startTransaction success');\n                    expect(n", "s Api DeviceKvStore.startTransaction testcase 103\n     */\n    it('testDevice", "g('testDeviceKvStorestartTransaction101 commit success');\n                  ", "g('testDeviceKvStorestartTransaction102 entries: ' + JSON.stringify(entries)", "g('testDeviceKvStorestartTransaction105');\n        try {\n            await k", "      await kvStore.startTransaction(async function (err,data) {\n           ", "g('testDeviceKvStorestartTransaction102 0' + data)\n                count++;\n", "      await kvStore.startTransaction('test_string', function (err,data) {\n  ", "g('testDeviceKvStorestartTransaction101 0' + data)\n                count++;\n", "s Api DeviceKvStore.startTransaction testcase 101\n     */\n    it('testDevice", "-API8]DeviceKvStore.startTransaction()\n     * @tc.desc Test Js Api DeviceKvS", "g('testDeviceKvStorestartTransaction102 deleteBatch success');\n             ", "t('testDeviceKvStorestartTransaction103', 0, async function (done) {\n       ", "t('testDeviceKvStorestartTransaction102', 0, async function (done) {\n       ", "g('testDeviceKvStorestartTransaction101 e ' + e);\n            expect(null).a", "g('testDeviceKvStorestartTransaction104 e ' + e);\n            done();\n      ", "g('testDeviceKvStorestartTransaction103 e ' + e);\n            done();\n      ", "g('testDeviceKvStorestartTransaction104');\n        try {\n            await k", "g('testDeviceKvStorestartTransaction104 startTransaction success');\n        ", "g('testDeviceKvStorestartTransaction101 startTransaction success');\n        ", "t('testDeviceKvStorestartTransaction101', 0, async function (done) {\n       ", "      await kvStore.startTransaction(1, function (err,data) {\n              ", "s Api DeviceKvStore.startTransaction testcase 104\n     */\n    it('testDevice", "g('testDeviceKvStorestartTransaction102 rollback success');\n                ", "g('testDeviceKvStorestartTransaction103');\n        try {\n            await k", "g('testDeviceKvStorestartTransaction104 startTransaction fail');\n           ", "t('testDeviceKvStorestartTransaction104', 0, async function (done) {\n       ", "g('testDeviceKvStorestartTransaction101');\n        try {\n            var cou", "t('testDeviceKvStorestartTransaction105', 0, async function (done) {\n       ", "startTransaction104 startTransaction fail');\n                }\n             ", "g('testDeviceKvStorestartTransaction102 putBatch success');\n                ", "startTransaction103 startTransaction fail');\n                }\n             ", "g('testDeviceKvStorestartTransaction103 startTransaction fail');\n           ", "startTransaction103 startTransaction success');\n                    expect(n", "g('testDeviceKvStorestartTransaction102');\n        try {\n            var cou", "startTransaction102 startTransaction success');\n                expect(err =", "s Api DeviceKvStore.startTransaction testcase 102\n     */\n    it('testDevice"], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "startTransaction", "api_method_all": "startTransaction(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 10, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.startTransaction(2.000).then(async (err) => {\n          ", "      await kvStore.startTransaction('test_string').then(async (err) => {\n  ", "      await kvStore.startTransaction().then(async (err) => {\n               ", "      await kvStore.startTransaction(1).then(async (err) => {\n              "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "commit", "api_method_all": "commit(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 59, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.commit(async function (err,data) {\n           ", "startTransaction101 commit success');\n                            ", "iceKvStoreCommit102 commit fail');\n                }\n             ", "iceKvStoreCommit103 commit fail');\n                }\n             ", "iceKvStoreCommit101 commit fail');\n                }\n             ", "startTransaction001 commit fail ' + err);\n                expect(n", "iceKvStoreCommit001 commit success');\n                expect(null)", "     await rdbStore.commit()\n            await rdbStore.commit()\n\n", "iceKvStoreCommit002 commit fail ' + err);\n            });\n        ", "iceKvStoreCommit003 commit fail ' + err);\n            });\n        ", "eKvStoreRollback101 commit success');\n                    expect(n", "gleKvStoreCommit103 commit success');\n                    expect(n", "gleKvStoreCommit103 commit fail');\n                }\n             ", "iceKvStoreCommit103 commit success');\n                    expect(n", "eKvStoreRollback103 commit fail');\n                }\n             ", "gleKvStoreCommit102 commit fail');\n                }\n             ", "eKvStoreRollback101 commit fail');\n                }\n             ", "      await kvStore.commit('test_string', function (err,data) {\n  ", "iceKvStoreCommit003 commit success');\n                expect(null)", "      await kvStore.commit(1, function (err,data) {\n              ", "iceKvStoreCommit002 commit success');\n                expect(null)", "eKvStoreRollback102 commit fail');\n                }\n             ", "iceKvStoreCommit101 commit success');\n                    expect(n", "iceKvStoreCommit102 commit success');\n                    expect(n", "startTransaction001 commit success');\n                expect(err =", "     await rdbStore.commit()\n        } catch (e) {\n            exp", "     await rdbStore.commit()\n        } catch (e) {\n            awa", "gleKvStoreCommit101 commit fail');\n                }\n             ", "      await kvStore.commit(2.000, function (err,data) {\n          ", "     await rdbStore.commit()\n\n            let predicates = new dat", "eKvStoreRollback103 commit success');\n                    expect(n", "gleKvStoreCommit102 commit success');\n                    expect(n", "eKvStoreRollback102 commit success');\n                    expect(n", "iceKvStoreCommit001 commit fail ' + err);\n            });\n        ", "gleKvStoreCommit101 commit success');\n                    expect(n"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "commit", "api_method_all": "commit(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.commit('test_string').then(async (err) => {\n  ", "      await kvStore.commit().then(async (err) => {\n               ", "      await kvStore.commit(1).then(async (err) => {\n              ", "      await kvStore.commit(2.000).then(async (err) => {\n          "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "rollback", "api_method_all": "rollback(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 27, "since": 8, "api_used": "\u662f", "lines": ["eKvStoreRollback003 rollback success');\n                expect(null)", "ransactionMulti0003 rollback ***** \");\n        }\n        done()\n    ", "eKvStoreRollback001 rollback success');\n                expect(null)", "      await kvStore.rollback(2.000, function (err,data) {\n          ", "eKvStoreRollback003 rollback fail ' + err);\n            });\n        ", "startTransaction002 rollback success');\n                expect(err =", "startTransaction002 rollback fail ' + err);\n                expect(n", "eKvStoreRollback002 rollback fail ' + err);\n            });\n        ", "      await kvStore.rollback(1, function (err,data) {\n              ", "eKvStoreRollback002 rollback success');\n                expect(null)", "startTransaction102 rollback success');\n                            ", "      await kvStore.rollback(async function (err,data) {\n           ", "eKvStoreRollback001 rollback fail ' + err);\n            });\n        ", "      await kvStore.rollback('test_string', function (err,data) {\n  "], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "rollback", "api_method_all": "rollback(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.rollback(1).then(async (err) => {\n              ", "      await kvStore.rollback('test_string').then(async (err) => {\n  ", "      await kvStore.rollback(2.000).then(async (err) => {\n          ", "      await kvStore.rollback().then(async (err) => {\n               "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "enableSync", "api_method_all": "enableSync(enabled: boolean, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": ["vStoreEnableSync102 enableSync fail');\n                    expect(null", "vStoreEnableSync103 enableSync fail');\n                }\n             ", "vStoreEnableSync104 enableSync success');\n                    expect(n", "vStoreEnableSync104 enableSync fail');\n                }\n             ", "      await kvStore.enableSync(false, function (err,data) {\n          ", "      await kvStore.enableSync(true, function (err,data) {\n           ", "vStoreEnableSync004 enableSync success');\n                expect(null)", "vStoreEnableSync101 enableSync fail');\n                    expect(null", "vStoreEnableSync003 enableSync success');\n                expect(null)", "vStoreEnableSync001 enableSync fail ' + err);\n                expect(n", "vStoreEnableSync004 enableSync fail ' + err);\n            });\n        ", "vStoreEnableSync001 enableSync success');\n                expect(err =", "      await kvStore.enableSync(function (err,data) {\n                i", "      await kvStore.enableSync(null, function (err,data) {\n           ", "vStoreEnableSync002 enableSync success');\n                expect(err =", "vStoreEnableSync003 enableSync fail ' + err);\n            });\n        ", "vStoreEnableSync101 enableSync success');\n                    expect(e", "vStoreEnableSync002 enableSync fail ' + err);\n                expect(n", "vStoreEnableSync102 enableSync success');\n                    expect(e", "vStoreEnableSync103 enableSync success');\n                    expect(n"], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "enableSync", "api_method_all": "enableSync(enabled: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.enableSync(true).then((err) => {\n                c", "      await kvStore.enableSync().then((err) => {\n                conso", "      await kvStore.enableSync(null).then((err) => {\n                c", "      await kvStore.enableSync(false).then((err) => {\n                "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "setSyncRange", "api_method_all": "setSyncRange(localLabels: string[], remoteSupportLabels: string[], callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["toreSetSyncRange002 setSyncRange success');\n                expect(err =", "toreSetSyncRange001 setSyncRange success');\n                expect(err =", "toreSetSyncRange003 setSyncRange success');\n                expect(err =", "      await kvStore.setSyncRange(localLabels, remoteSupportLabels, funct"], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVStore", "api_method_name": "setSyncRange", "api_method_all": "setSyncRange(localLabels: string[], remoteSupportLabels: string[]): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.setSyncRange(localLabels, remoteSupportLabels).then("], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_all": "interface SingleKVStore extends KVStore {\n        \n        get(key: string, callback: AsyncCallback<Uint8Array | string | boolean | number>): void;\n        get(key: string): Promise<Uint8Array | string | boolean | number>;\n\n        \n        getEntries(keyPrefix: string, callback: AsyncCallback<Entry[]>): void;\n        getEntries(keyPrefix: string): Promise<Entry[]>;\n\n        \n        getEntries(query: Query, callback: AsyncCallback<Entry[]>): void;\n        getEntries(query: Query): Promise<Entry[]>;\n\n        \n        getResultSet(keyPrefix: string, callback: AsyncCallback<KvStoreResultSet>): void;\n        getResultSet(keyPrefix: string): Promise<KvStoreResultSet>;\n\n        \n        getResultSet(query: Query, callback: AsyncCallback<KvStoreResultSet>): void;\n        getResultSet(query: Query): Promise<KvStoreResultSet>;\n\n        \n        closeResultSet(resultSet: KvStoreResultSet, callback: AsyncCallback<void>): void;\n        closeResultSet(resultSet: KvStoreResultSet): Promise<void>;\n\n        \n        getResultSize(query: Query, callback: AsyncCallback<number>): void;\n        getResultSize(query: Query): Promise<number>;\n\n        \n        removeDeviceData(deviceId: string, callback: AsyncCallback<void>): void;\n        removeDeviceData(deviceId: string): Promise<void>;\n\n        \n         sync(deviceIdList: string[], mode: SyncMode, allowedDelayMs?: number): void;\n\n         \n         on(event: 'syncComplete', syncCallback: Callback<Array<[string, number]>>): void;\n\n         \n         off(event: 'syncComplete', syncCallback?: Callback<Array<[string, number]>>): void;\n\t \n\t \n         \n         setSyncParam(defaultAllowedDelayMs: number, callback: AsyncCallback<void>): void;\n         setSyncParam(defaultAllowedDelayMs: number): Promise<void>;\n\n         \n         getSecurityLevel(callback: AsyncCallback<SecurityLevel>): void;\n         getSecurityLevel(): Promise<SecurityLevel>;\n    }", "api_method_name": "SingleKVStore", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "get", "api_method_all": "get(key: string, callback: AsyncCallback<Uint8Array | string | boolean | number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 1110, "since": 8, "api_used": "\u662f", "lines": ["onfigService = core.getDefaultService('config')\n        configS", "console.log(TAG + \":getFileType_callback_0052 start\");\n        ", "nst age = resultSet.getLong(resultSet.getColumnIndex(\"age\"))\n  ", ".assertEqual(result.getLong(0));\n            expect(true).asser", ".assertEqual(result.getLong(0));\n            result = null\n    ", "  const core = Core.getInstance()\n        const expectExtend = ", " salary = resultSet.getDouble(resultSet.getColumnIndex(\"salary\"", "console.log(TAG + \":getType_promise_0041 start\");\n        try {", "\n            helper.getType(\n                URI\n              ", " injectRef = Object.getPrototypeOf(global) || global\ninjectRef.", "   })\n\n    \n    it('getType_callback_0040', 0, async function (", "t.getLong(resultSet.getColumnIndex(\"id\"))\n            const nam", "t.getLong(resultSet.getColumnIndex(\"age\"))\n            const sa", "     \"image\n    it('getFileType_promise_0051', 0, async functio", "getDouble(resultSet.getColumnIndex(\"salary\"))\n            const", "console.log(TAG + \":getFileType_callback_0050 start\");\n        ", "ore = await dataRdb.getRdbStore(config, 1);\n            console", "e = await resultSet.getLong(resultSet.getColumnIndex(\"age\"))\n\n ", "ore = await dataRdb.getRdbStore(STORE_CONFIG, 1);\n        await", "d = await resultSet.getLong(resultSet.getColumnIndex(\"id\"))\n   ", "console.log(TAG + \":getType_callback_0040 start\");\n        try ", "e = await resultSet.getString(resultSet.getColumnIndex(\"name\"))", "t.getLong(resultSet.getColumnIndex(\"id\"))\n                const", "\n            helper.getType(\n                URI,\n             ", "console.log(TAG + \":getType_callback_0040 end\");\n    })\n\n    \n ", "===================>getTypeCallback=======================>\");\n", "console.log(TAG + \":getType_promise_0041 end\");\n    })\n\n    \n  ", ".assertEqual(result.getLong(0));\n        }\n        done();\n    ", "onst id = resultSet.getLong(resultSet.getColumnIndex(\"id\"))\n   ", "console.log(TAG + \":getFileType_promise_0051 start\");\n        t", ".assertEqual(result.getLong(0))\n        }\n        done();\n     ", "     \"image\n    it('getFileType_callback_0052', 0, async functi", "getString(resultSet.getColumnIndex(\"name\"))\n            const a", "lobType = resultSet.getBlob(resultSet.getColumnIndex(\"blobType\"", "e.log(TAG + \"result get value failed\")\n                expect(n", ".assertEqual(result.getLong(0))\n            result = null\n     ", "   })\n\n    \n    it('getType_promise_0041', 0, async function (d", "t.getLong(resultSet.getColumnIndex(\"age\"))\n\n                awa", "st name = resultSet.getString(resultSet.getColumnIndex(\"name\"))", "\n            helper.getFileTypes(\n                URI,\n        ", "getString(resultSet.getColumnIndex(\"name\"))\n                con", "\n            helper.getFileTypes(\n                null,\n       ", "   })\n\n    \n    it('getFileType_callback_0050', 0, async functi"], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "get", "api_method_all": "get(key: string): Promise<Uint8Array | string | boolean | number>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 85, "since": 8, "api_used": "\u662f", "lines": ["    await kvManager.getKVStore(TEST_STORE_ID, options).then((st", "      await kvStore.getResultSet('batch_test_string_key').then(", "      await kvStore.getResultSet(localDeviceId, query).then((re", "      await kvStore.getResultSet('test_key_string', 123).then((", "      await kvStore.getResultSet().then((result) => {\n         ", "      await kvStore.getResultSize(localDeviceId, query).then((r", "t promise = storage.getStorage(PATH);\n        promise.then((pre", "    await kvManager.getAllKVStoreId(TEST_BUNDLE_NAME).then((dat", "    await kvManager.getKVStore(TEST_STORE_ID).then((store) => {", "       kvStore.put(\"getDeviceId\", \"byPut\").then((data) => {\n   ", "      await kvStore.getEntries(query).then((entries) => {\n     ", "      await kvStore.getEntries(query).then((entrys) => {\n      ", "    await kvManager.getKVStore(options).then((store) => {\n     ", "  });\n        await getDeviceId.then(function(deviceId) {\n     ", "    await kvManager.getKVStore(TEST_STORE_ID, options).then(asy", "      await kvStore.getResultSet(query).then((result) => {\n    ", "      await kvStore.getResultSize(query).then((resultSize) => {", "      await kvStore.getEntries(localDeviceId, query).then((entr", "    await kvManager.getAllKVStoreId(TEST_BUNDLE_NAME).then(asyn", "    await kvManager.getKVStore(TEST_STORE_ID, optionsInfo).then", "      await kvStore.getResultSet('test').then((result) => {\n   "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getEntries", "api_method_all": "getEntries(keyPrefix: string, callback: AsyncCallback<Entry[]>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 70, "since": 8, "api_used": "\u662f", "lines": ["eKvStorePutBatch004 getEntries success');\n                    expect(e", "eKvStorePutBatch102 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, 'batch_test_number_key',", "eKvStorePutBatch003 getEntries fail ' + err);\n                    expe", "vStoreGetEntries101 getEntries success');\n                    console.", "vStoreGetEntries002 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries(localDeviceId, 'batch_test_bool_key').t", "eKvStorePutBatch002 getEntries success');\n                    expect(e", "eKvStorePutBatch105 getEntries success');\n                    console.", "vStoreGetEntries001 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries('batch_test_number_key', function (err,", "eKvStorePutBatch002 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries(localDeviceId, 'batch_test_number_key')", "      await kvStore.getEntries(localDeviceId, 'batch_test_string_key')", "      await kvStore.getEntries(query, function (err,entrys) {\n        ", "eKvStorePutBatch004 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch101 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, 'batch_test_string_key',", "      await kvStore.getEntries('batch_test_bool_key', function (err,en", "eKvStorePutBatch104 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, query, function (err,ent", "      await kvStore.getEntries('batch_test_string_key', function (err,", "vStoreGetEntries002 getEntries success');\n                    expect(e", "eKvStorePutBatch006 getEntries success');\n                    expect(e", "eKvStorePutBatch006 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch001 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch001 getEntries success');\n                    console.", "vStoreGetEntries001 getEntries success');\n                    expect(e", "      await kvStore.getEntries(localDeviceId, 'batch_test_bool_key', f", "vStoreGetEntries102 getEntries success');\n                    console.", "eKvStorePutBatch005 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch003 getEntries success');\n                    expect(e", "eKvStorePutBatch005 getEntries success');\n                    expect(e", "eKvStorePutBatch106 getEntries success');\n                    console.", "eKvStorePutBatch103 getEntries success');\n                    console."], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getEntries", "api_method_all": "getEntries(keyPrefix: string): Promise<Entry[]>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getEntries(query).then((entrys) => {\n             ", "      await kvStore.getEntries('batch_test_number_key').then((entrys) ", "      await kvStore.getEntries(localDeviceId, query).then((entrys) => ", "      await kvStore.getEntries('batch_test_bool_key').then((entrys) =>", "      await kvStore.getEntries(query).then((entries) => {\n            ", "      await kvStore.getEntries('batch_test_string_key').then((entrys) "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getEntries", "api_method_all": "getEntries(query: Query, callback: AsyncCallback<Entry[]>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 70, "since": 8, "api_used": "\u662f", "lines": ["eKvStorePutBatch004 getEntries success');\n                    expect(e", "eKvStorePutBatch102 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, 'batch_test_number_key',", "eKvStorePutBatch003 getEntries fail ' + err);\n                    expe", "vStoreGetEntries101 getEntries success');\n                    console.", "vStoreGetEntries002 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries(localDeviceId, 'batch_test_bool_key').t", "eKvStorePutBatch002 getEntries success');\n                    expect(e", "eKvStorePutBatch105 getEntries success');\n                    console.", "vStoreGetEntries001 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries('batch_test_number_key', function (err,", "eKvStorePutBatch002 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries(localDeviceId, 'batch_test_number_key')", "      await kvStore.getEntries(localDeviceId, 'batch_test_string_key')", "      await kvStore.getEntries(query, function (err,entrys) {\n        ", "eKvStorePutBatch004 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch101 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, 'batch_test_string_key',", "      await kvStore.getEntries('batch_test_bool_key', function (err,en", "eKvStorePutBatch104 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, query, function (err,ent", "      await kvStore.getEntries('batch_test_string_key', function (err,", "vStoreGetEntries002 getEntries success');\n                    expect(e", "eKvStorePutBatch006 getEntries success');\n                    expect(e", "eKvStorePutBatch006 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch001 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch001 getEntries success');\n                    console.", "vStoreGetEntries001 getEntries success');\n                    expect(e", "      await kvStore.getEntries(localDeviceId, 'batch_test_bool_key', f", "vStoreGetEntries102 getEntries success');\n                    console.", "eKvStorePutBatch005 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch003 getEntries success');\n                    expect(e", "eKvStorePutBatch005 getEntries success');\n                    expect(e", "eKvStorePutBatch106 getEntries success');\n                    console.", "eKvStorePutBatch103 getEntries success');\n                    console."], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getEntries", "api_method_all": "getEntries(query: Query): Promise<Entry[]>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getEntries(query).then((entrys) => {\n             ", "      await kvStore.getEntries('batch_test_number_key').then((entrys) ", "      await kvStore.getEntries(localDeviceId, query).then((entrys) => ", "      await kvStore.getEntries('batch_test_bool_key').then((entrys) =>", "      await kvStore.getEntries(query).then((entries) => {\n            ", "      await kvStore.getEntries('batch_test_string_key').then((entrys) "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getResultSet", "api_method_all": "getResultSet(keyPrefix: string, callback: AsyncCallback<KvStoreResultSet>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 87, "since": 8, "api_used": "\u662f", "lines": ["toreGetResultSet104 getResultSet success');\n                expect(err !", "      await kvStore.getResultSet(localDeviceId, query, async function (e", "s Api DeviceKvStore.getResultSet() testcase 003\n     */\n    it('testDevi", "toreGetResultSet003 getResultSet fail ' + err);\n            });\n        ", "s Api DeviceKvStore.getResultSet() testcase 006\n     */\n    it('testDevi", "toreGetResultSet101 getResultSet success');\n                    resultSe", "reCloseResultSet002 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet001 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet004 getResultSet success');\n                expect(null)", "oreGetResultSize102 getResultSet success');\n                    expect(r", "toreGetResultSet001 getResultSet success');\n                resultSet = ", "toreGetResultSet002 getResultSet success');\n                resultSet = ", "oreGetResultSize001 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet102 getResultSet success');\n                resultSet = ", "s Api DeviceKvStore.getResultSet() testcase 004\n     */\n    it('testDevi", "      await kvStore.getResultSet(function (err, result) {\n              ", "toreGetResultSet005 getResultSet success');\n                resultSet = ", "      await kvStore.getResultSet(query, async function (err, result) {\n ", "toreGetResultSet006 getResultSet success');\n                resultSet = ", "reCloseResultSet002 getResultSet success');\n                resultSet = ", "toreGetResultSet106 getResultSet success');\n                    resultSe", "toreGetResultSet105 getResultSet success');\n                    resultSe", "oreGetResultSize101 getResultSet success');\n                    expect(r", "s Api DeviceKvStore.getResultSet() testcase 005\n     */\n    it('testDevi", "reCloseResultSet102 getResultSet success');\n                resultSet = ", "s Api DeviceKvStore.getResultSet() testcase 002\n     */\n    it('testDevi", "ole.log('beforeEach getResultSet success');\n            resultSet = resu", "toreGetResultSet005 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet006 getResultSet fail ' + err);\n                expect(n", "s Api DeviceKvStore.getResultSet() testcase 001\n     */\n    it('testDevi", "toreGetResultSet103 getResultSet success');\n                expect(err !", "toreGetResultSet002 getResultSet fail ' + err);\n                expect(n", "oreGetResultSize001 getResultSet success');\n                expect(resul", "      await kvStore.getResultSet(localDeviceId, 'batch_test_string_key')", "toreGetResultSet003 getResultSet success');\n                expect(null)", "toreGetResultSet004 getResultSet fail ' + err);\n            });\n        ", "      await kvStore.getResultSet(localDeviceId, 'batch_test_string_key',", "      await kvStore.getResultSet('test_key_string', 123, function (err, ", "-API8]DeviceKvStore.getResultSet()\n     * @tc.desc Test Js Api DeviceKvS"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getResultSet", "api_method_all": "getResultSet(keyPrefix: string): Promise<KvStoreResultSet>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSet(query).then((result) => {\n             ", "      await kvStore.getResultSet('test_key_string', 123).then((result) =", "      await kvStore.getResultSet('test').then((result) => {\n            ", "      await kvStore.getResultSet('batch_test_string_key').then((result) ", "      await kvStore.getResultSet().then((result) => {\n                co", "      await kvStore.getResultSet(localDeviceId, query).then((result) => "], "files": ["DeviceKvStorePromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getResultSet", "api_method_all": "getResultSet(query: Query, callback: AsyncCallback<KvStoreResultSet>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 87, "since": 8, "api_used": "\u662f", "lines": ["toreGetResultSet104 getResultSet success');\n                expect(err !", "      await kvStore.getResultSet(localDeviceId, query, async function (e", "s Api DeviceKvStore.getResultSet() testcase 003\n     */\n    it('testDevi", "toreGetResultSet003 getResultSet fail ' + err);\n            });\n        ", "s Api DeviceKvStore.getResultSet() testcase 006\n     */\n    it('testDevi", "toreGetResultSet101 getResultSet success');\n                    resultSe", "reCloseResultSet002 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet001 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet004 getResultSet success');\n                expect(null)", "oreGetResultSize102 getResultSet success');\n                    expect(r", "toreGetResultSet001 getResultSet success');\n                resultSet = ", "toreGetResultSet002 getResultSet success');\n                resultSet = ", "oreGetResultSize001 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet102 getResultSet success');\n                resultSet = ", "s Api DeviceKvStore.getResultSet() testcase 004\n     */\n    it('testDevi", "      await kvStore.getResultSet(function (err, result) {\n              ", "toreGetResultSet005 getResultSet success');\n                resultSet = ", "      await kvStore.getResultSet(query, async function (err, result) {\n ", "toreGetResultSet006 getResultSet success');\n                resultSet = ", "reCloseResultSet002 getResultSet success');\n                resultSet = ", "toreGetResultSet106 getResultSet success');\n                    resultSe", "toreGetResultSet105 getResultSet success');\n                    resultSe", "oreGetResultSize101 getResultSet success');\n                    expect(r", "s Api DeviceKvStore.getResultSet() testcase 005\n     */\n    it('testDevi", "reCloseResultSet102 getResultSet success');\n                resultSet = ", "s Api DeviceKvStore.getResultSet() testcase 002\n     */\n    it('testDevi", "ole.log('beforeEach getResultSet success');\n            resultSet = resu", "toreGetResultSet005 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet006 getResultSet fail ' + err);\n                expect(n", "s Api DeviceKvStore.getResultSet() testcase 001\n     */\n    it('testDevi", "toreGetResultSet103 getResultSet success');\n                expect(err !", "toreGetResultSet002 getResultSet fail ' + err);\n                expect(n", "oreGetResultSize001 getResultSet success');\n                expect(resul", "      await kvStore.getResultSet(localDeviceId, 'batch_test_string_key')", "toreGetResultSet003 getResultSet success');\n                expect(null)", "toreGetResultSet004 getResultSet fail ' + err);\n            });\n        ", "      await kvStore.getResultSet(localDeviceId, 'batch_test_string_key',", "      await kvStore.getResultSet('test_key_string', 123, function (err, ", "-API8]DeviceKvStore.getResultSet()\n     * @tc.desc Test Js Api DeviceKvS"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getResultSet", "api_method_all": "getResultSet(query: Query): Promise<KvStoreResultSet>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSet(query).then((result) => {\n             ", "      await kvStore.getResultSet('test_key_string', 123).then((result) =", "      await kvStore.getResultSet('test').then((result) => {\n            ", "      await kvStore.getResultSet('batch_test_string_key').then((result) ", "      await kvStore.getResultSet().then((result) => {\n                co", "      await kvStore.getResultSet(localDeviceId, query).then((result) => "], "files": ["DeviceKvStorePromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "closeResultSet", "api_method_all": "closeResultSet(resultSet: KvStoreResultSet, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 66, "since": 8, "api_used": "\u662f", "lines": ["reCloseResultSet103 closeResultSet fail');\n                }\n             ", "reCloseResultSet003 closeResultSet success');\n                expect(null)", "toreGetResultSet106 closeResultSet success');\n                        expe", "toreGetResultSet005 closeResultSet success');\n                expect(err =", "toreGetResultSet002 closeResultSet success');\n                expect(err =", "sole.log('afterEach closeResultSet success');\n        }).catch((err) => {\n", "reCloseResultSet102 closeResultSet fail');\n                        expect(", "reCloseResultSet003 closeResultSet fail ' + err);\n            });\n        ", "toreGetResultSet006 closeResultSet fail ' + err);\n                expect(n", "reCloseResultSet102 closeResultSet success');\n                        expe", "reCloseResultSet001 closeResultSet success');\n                expect(null)", "sole.log('afterEach closeResultSet fail ' + err);\n        });\n        awai", "      await kvStore.closeResultSet(function (err, data) {\n                ", "reCloseResultSet101 closeResultSet success');\n                    expect(n", "reCloseResultSet103 closeResultSet success');\n                    expect(n", "esultSetGetCount002 closeResultSet success');\n            }).catch((err) =", "toreGetResultSet101 closeResultSet success');\n                        expe", "reCloseResultSet002 closeResultSet success');\n                expect(err =", "reCloseResultSet002 closeResultSet fail ' + err);\n                expect(n", "toreGetResultSet005 closeResultSet fail ' + err);\n                expect(n", "esultSetGetCount002 closeResultSet fail ' + err);\n                expect(n", "toreGetResultSet001 closeResultSet success');\n                expect(err =", "toreGetResultSet105 closeResultSet success');\n                        expe", "toreGetResultSet006 closeResultSet success');\n                expect(err =", "reCloseResultSet001 closeResultSet fail ' + err);\n            });\n        ", "toreGetResultSet002 closeResultSet fail ' + err);\n                expect(n", "toreGetResultSet001 closeResultSet fail ' + err);\n                expect(n", "toreGetResultSet102 closeResultSet success');\n                    expect(e", "      await kvStore.closeResultSet(resultSet, function (err, data) {\n     ", "reCloseResultSet101 closeResultSet fail');\n                }\n             "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "closeResultSet", "api_method_all": "closeResultSet(resultSet: KvStoreResultSet): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.closeResultSet().then(() => {\n                console.", "      await kvStore.closeResultSet(resultSet).then((err) => {\n            ", "      await kvStore.closeResultSet(resultSet).then(() => {\n               ", "      await kvStore.closeResultSet(rs).then((err) => {\n                con"], "files": ["DeviceKvStorePromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getResultSize", "api_method_all": "getResultSize(query: Query, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSize(query, async function (err, resultSize)", "      await kvStore.getResultSize(localDeviceId, query, async function (e"], "files": ["DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getResultSize", "api_method_all": "getResultSize(query: Query): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSize(query).then((resultSize) => {\n         ", "      await kvStore.getResultSize(localDeviceId, query).then((resultSize)"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "removeDeviceData", "api_method_all": "removeDeviceData(deviceId: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": ["RemoveDeviceData001 removeDeviceData success');\n                expect(null)", "      await kvStore.removeDeviceData(function (err,data) {\n                i", "RemoveDeviceData001 removeDeviceData fail ' + err);\n            });\n        ", "RemoveDeviceData101 removeDeviceData fail');\n                        await k", "RemoveDeviceData004 removeDeviceData fail ' + err);\n            });\n        ", "RemoveDeviceData103 removeDeviceData fail');\n                }\n             ", "RemoveDeviceData101 removeDeviceData success');\n                        expe", "RemoveDeviceData102 removeDeviceData success');\n                    expect(n", "RemoveDeviceData003 removeDeviceData fail ' + err);\n            });\n        ", "RemoveDeviceData104 removeDeviceData fail');\n                }\n             ", "      await kvStore.removeDeviceData(null, function (err,data) {\n           ", "RemoveDeviceData103 removeDeviceData success');\n                    expect(n", "RemoveDeviceData003 removeDeviceData success');\n                expect(null)", "RemoveDeviceData102 removeDeviceData fail');\n                }\n             ", "      await kvStore.removeDeviceData('', function (err,data) {\n             ", "RemoveDeviceData004 removeDeviceData success');\n                expect(null)", "RemoveDeviceData104 removeDeviceData success');\n                    expect(n", "RemoveDeviceData002 removeDeviceData success');\n                expect(null)", "RemoveDeviceData002 removeDeviceData fail ' + err);\n            });\n        ", "      await kvStore.removeDeviceData(deviceid, async function (err,data) {\n "], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "removeDeviceData", "api_method_all": "removeDeviceData(deviceId: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.removeDeviceData('').then((err) => {\n                con", "      await kvStore.removeDeviceData(null).then((err) => {\n                c", "      await kvStore.removeDeviceData().then((err) => {\n                conso", "      await kvStore.removeDeviceData(deviceid).then((err) => {\n             "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "sync", "api_method_all": "sync(deviceIdList: string[], mode: SyncMode, allowedDelayMs?: number): void;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 1452, "since": 7, "api_used": "\u662f", "lines": ["  })\n\n    afterAll(async function () {\n     ", "tLessThan0006', 0, async function (done) {\n ", "IsNotNull0001', 0, async function (done) {\n ", "stEqualTo0007', 0, async function (done) {\n ", "stEqualTo0008', 0, async function (done) {\n ", "tLessThan0004', 0, async function (done) {\n ", "otEqualTo0005', 0, async function (done) {\n ", "tLessThan0002', 0, async function (done) {\n ", "stEqualTo0001', 0, async function (done) {\n ", " count;\n    }\n\n    async function buildAllDa", "otEqualTo0003', 0, async function (done) {\n ", "otEqualTo0004', 0, async function (done) {\n ", "OrEqualTo0002', 0, async function (done) {\n ", "estIsNull0004', 0, async function (done) {\n ", "OrEqualTo0004', 0, async function (done) {\n ", "tLessThan0008', 0, async function (done) {\n ", "tLessThan0007', 0, async function (done) {\n ", "estIsNull0003', 0, async function (done) {\n ", "eaterThan0003', 0, async function (done) {\n ", "IsNotNull0003', 0, async function (done) {\n ", "estIsNull0001', 0, async function (done) {\n ", "eaterThan0007', 0, async function (done) {\n ", "tLessThan0001', 0, async function (done) {\n ", "tLessThan0003', 0, async function (done) {\n ", "eaterThan0002', 0, async function (done) {\n ", "OrEqualTo0001', 0, async function (done) {\n ", "eaterThan0004', 0, async function (done) {\n ", "      }\n    }\n\n    async function buildAllDa", "stEqualTo0004', 0, async function (done) {\n ", "otEqualTo0002', 0, async function (done) {\n ", "stEqualTo0003', 0, async function (done) {\n ", "otEqualTo0007', 0, async function (done) {\n ", "estIsNull0002', 0, async function (done) {\n ", "eaterThan0001', 0, async function (done) {\n ", "otEqualTo0008', 0, async function (done) {\n ", "eaterThan0008', 0, async function (done) {\n ", "otEqualTo0001', 0, async function (done) {\n ", "OrEqualTo0003', 0, async function (done) {\n ", "stEqualTo0005', 0, async function (done) {\n ", "IsNotNull0002', 0, async function (done) {\n ", "tLessThan0005', 0, async function (done) {\n ", "() {\n    beforeAll(async function () {\n     ", "stEqualTo0002', 0, async function (done) {\n ", "stEqualTo0006', 0, async function (done) {\n ", "eaterThan0006', 0, async function (done) {\n ", "otEqualTo0006', 0, async function (done) {\n ", "IsNotNull0004', 0, async function (done) {\n ", "eaterThan0005', 0, async function (done) {\n "], "files": ["RdbstorePredicatesJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "on", "api_method_all": "on(event: 'syncComplete', syncCallback: Callback<Array<[string, number]>>): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 9171, "since": 7, "api_used": "\u662f", "lines": ["      console.info('onShow finish')\n      ", " }\n\n    async function buildAllDataType2()", "ction () {\n        console.info(TAG + 'aft", ".info('TestApplication onDestroy');\n    }\n", "fo('TestApplication onCreate');\n    },\n   ", "   beforeEach(function () {\n        consol", "ction () {\n        console.info(TAG + 'bef", " }\n\n    async function buildAllDataType3()", "aType2() {\n        console.log(TAG + \"buil", "deccjsunit/index'\n\nconst injectRef = Objec", ",\n                \"longValue\": 92233720368", "01', 0, async function (done) {\n        co", "  configService.setConfig(this)\n\n        r", ",\n                \"longValue\": -9223372036", " }\n\n    async function buildAllDataType1()", "      }\n    }\n\n    console.log(TAG + \"****", "dicatesTest', function () {\n    beforeAll(", "2, 3])\n            const valueBucket = {\n ", "rder` INTEGER);\";\n\nconst STORE_CONFIG = {\n", "Create() {\n        console.info('TestAppli", "Instance()\n        const expectExtend = ne", "world');\n    },\n    onShow() {\n        con", "xecute()\n    },\n    onReady() {\n    },\n}", "xport default {\n    onCreate() {\n        c", "estroy() {\n        console.info('TestAppli", "aType3() {\n        console.log(TAG + \"buil", "    afterEach(function () {\n        consol", "alue INTEGER , primLongValue INTEGER , \"\n+", ",\n                \"longValue\": 1,\n        ", ".info('TestApplication onCreate');\n    },\n", "ata.dataAbility';\n\nconst TAG = '[RDB_JSKIT", "reate');\n    },\n    onDestroy() {\n        ", "gerValue INTEGER , longValue INTEGER , sho", ";\n    })\n\n    function resultSize(resultSe", "getDefaultService('config')\n        config", "foreAll(async function () {\n        consol", "('config')\n        configService.setConfig", "fo('TestApplication onDestroy');\n    }\n};\n", "itle: ''\n    },\n    onInit() {\n        thi", "onShow() {\n        console.info('onShow fi", "ore.init()\n        const configService = c", "RDB_JSKITS _TEST]'\nconst CREATE_TABLE_ALL_", "fterAll(async function () {\n        consol", "aType1() {\n        console.log(TAG + \"buil", "it()\n        const configService = core.ge", "w finish')\n        const core = Core.getIn"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "off", "api_method_all": "off(event: 'syncComplete', syncCallback?: Callback<Array<[string, number]>>): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 78, "since": 8, "api_used": "\u662f", "lines": ["            kvStore.off('syncComplete');\n  ", "            kvStore.off('syncComplete', fun", ";\n        kvManager.off('distributedDataSer", "@tc.desc predicates offset normal test\n    ", "   })\n\n    \n    it('off_0031', 0, async fun", "IJKLMN\").limitAs(3).offsetAs(1);\n        le", "            kvStore.off('dataChange');\n    ", "/**\n     * @tc.name off interface test\n    ", "IJKLMN\").limitAs(3).offsetAs(5);\n        le", "            kvStore.off('dataChange', func1", "IJKLMN\").limitAs(3).offsetAs(-1);\n        l", "@tc.name predicates offset normal test\n    ", "console.log(TAG + \":off_0030 start\");\n     ", "            kvStore.off('dataChange', func)", "console.log(TAG + \":off_0030 end\");\n    })\n", "ver);\n        mPref.off('change', observer)", "   })\n\n    \n    it('off_0030', 0, async fun", "\n            helper.off(\n                \"d", " console.log(TAG + \"off dataChange success\"", "IJKLMN\").limitAs(3).offsetAs(0);\n        le", "console.log(TAG + \":off_0031 end\");\n    })\n", "console.log(TAG + \":off_0031 start\");\n     ", "160\n     * @tc.desc off interface test\n    ", ");\n        rdbStore.off(\"dataChange\", (devi"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "StorageSyncJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "ObjectStoreJsunit.test.js", "KvManagerPromiseJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "setSyncParam", "api_method_all": "setSyncParam(defaultAllowedDelayMs: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.setSyncParam(null, function (err,data) {\n           ", "      await kvStore.setSyncParam(defaultAllowedDelayMs, function (err,da", "      await kvStore.setSyncParam('', function (err,data) {\n             ", "      await kvStore.setSyncParam(function (err,data) {\n                i"], "files": ["SingleKvStoreCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "setSyncParam", "api_method_all": "setSyncParam(defaultAllowedDelayMs: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.setSyncParam(defaultAllowedDelayMs).then((err) => {\n", "      await kvStore.setSyncParam(null).then((err) => {\n                c", "      await kvStore.setSyncParam('').then((err) => {\n                con", "      await kvStore.setSyncParam().then((err) => {\n                conso"], "files": ["SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getSecurityLevel", "api_method_all": "getSecurityLevel(callback: AsyncCallback<SecurityLevel>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 19, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getSecurityLevel(function (err,data) {\n    //           ", "GetSecurityLevel103 getSecurityLevel fail' + err);\n                }\n       ", "GetSecurityLevel003 getSecurityLevel success');\n                expect(null)", "GetSecurityLevel101 getSecurityLevel success');\n    //             expect(da", "GetSecurityLevel001 getSecurityLevel fail ' + err);\n    //             expec", "GetSecurityLevel002 getSecurityLevel success');\n                expect(null)", "GetSecurityLevel104 getSecurityLevel success');\n                    expect(n", "GetSecurityLevel004 getSecurityLevel fail ' + err);\n            });\n        ", "      await kvStore.getSecurityLevel(1, function (err,data) {\n              ", "GetSecurityLevel102 getSecurityLevel success');\n                    expect(n", "GetSecurityLevel002 getSecurityLevel fail ' + err);\n            });\n        ", "GetSecurityLevel003 getSecurityLevel fail ' + err);\n            });\n        ", "      await kvStore.getSecurityLevel('test_string', function (err,data) {\n  ", "      await kvStore.getSecurityLevel(2.00, function (err,data) {\n           ", "GetSecurityLevel103 getSecurityLevel success');\n                    expect(n", "GetSecurityLevel004 getSecurityLevel success');\n                expect(null)", "GetSecurityLevel104 getSecurityLevel fail' + err);\n                }\n       ", "GetSecurityLevel102 getSecurityLevel fail' + err);\n                }\n       ", "GetSecurityLevel001 getSecurityLevel success');\n    //             expect(da"], "files": ["SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SingleKVStore", "api_method_name": "getSecurityLevel", "api_method_all": "getSecurityLevel(): Promise<SecurityLevel>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getSecurityLevel().then((data) => {\n    //             c", "      await kvStore.getSecurityLevel('test_string').then((data) => {\n       ", "      await kvStore.getSecurityLevel(2.000).then((data) => {\n               ", "      await kvStore.getSecurityLevel(1).then((data) => {\n                con"], "files": ["SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_all": "interface DeviceKVStore extends KVStore {\n        \n         get(deviceId: string, key: string, callback: AsyncCallback<boolean|string|number|Uint8Array>): void;\n         get(deviceId: string, key: string): Promise<boolean|string|number|Uint8Array>;\n\n         \n         getEntries(deviceId: string, keyPrefix: string, callback: AsyncCallback<Entry[]>): void;\n         getEntries(deviceId: string, keyPrefix: string): Promise<Entry[]>;\n\n         \n         getEntries(query: Query, callback: AsyncCallback<Entry[]>): void;\n         getEntries(query: Query): Promise<Entry[]>;\n\n         \n         getEntries(deviceId: string, query: Query, callback: AsyncCallback<Entry[]>): void;\n         getEntries(deviceId: string, query: Query): Promise<Entry[]>;\n\n         \n         getResultSet(deviceId: string, keyPrefix: string, callback: AsyncCallback<KvStoreResultSet>): void;\n         getResultSet(deviceId: string, keyPrefix: string): Promise<KvStoreResultSet>;\n\n         \n         getResultSet(query: Query, callback: AsyncCallback<KvStoreResultSet>): void;\n         getResultSet(query: Query): Promise<KvStoreResultSet>;\n\n         \n         getResultSet(deviceId: string, query: Query, callback: AsyncCallback<KvStoreResultSet>): void;\n         getResultSet(deviceId: string, query: Query): Promise<KvStoreResultSet>;\n\n         \n         closeResultSet(resultSet: KvStoreResultSet, callback: AsyncCallback<void>): void;\n         closeResultSet(resultSet: KvStoreResultSet): Promise<void>;\n\n         \n         getResultSize(query: Query, callback: AsyncCallback<number>): void;\n         getResultSize(query: Query): Promise<number>;\n\n         \n         getResultSize(deviceId: string, query: Query, callback: AsyncCallback<number>): void;\n         getResultSize(deviceId: string, query: Query): Promise<number>;\n\n         \n         removeDeviceData(deviceId: string, callback: AsyncCallback<void>): void;\n         removeDeviceData(deviceId: string): Promise<void>;\n         \n        \n        sync(deviceIdList: string[], mode: SyncMode, allowedDelayMs?: number): void;\n\n        \n        on(event: 'syncComplete', syncCallback: Callback<Array<[string, number]>>): void;\n\n        \n        off(event: 'syncComplete', syncCallback?: Callback<Array<[string, number]>>): void;\n    }", "api_method_name": "DeviceKVStore", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "get", "api_method_all": "get(deviceId: string, key: string, callback: AsyncCallback<boolean|string|number|Uint8Array>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 1110, "since": 8, "api_used": "\u662f", "lines": ["onfigService = core.getDefaultService('config')\n        configS", "console.log(TAG + \":getFileType_callback_0052 start\");\n        ", "nst age = resultSet.getLong(resultSet.getColumnIndex(\"age\"))\n  ", ".assertEqual(result.getLong(0));\n            expect(true).asser", ".assertEqual(result.getLong(0));\n            result = null\n    ", "  const core = Core.getInstance()\n        const expectExtend = ", " salary = resultSet.getDouble(resultSet.getColumnIndex(\"salary\"", "console.log(TAG + \":getType_promise_0041 start\");\n        try {", "\n            helper.getType(\n                URI\n              ", " injectRef = Object.getPrototypeOf(global) || global\ninjectRef.", "   })\n\n    \n    it('getType_callback_0040', 0, async function (", "t.getLong(resultSet.getColumnIndex(\"id\"))\n            const nam", "t.getLong(resultSet.getColumnIndex(\"age\"))\n            const sa", "     \"image\n    it('getFileType_promise_0051', 0, async functio", "getDouble(resultSet.getColumnIndex(\"salary\"))\n            const", "console.log(TAG + \":getFileType_callback_0050 start\");\n        ", "ore = await dataRdb.getRdbStore(config, 1);\n            console", "e = await resultSet.getLong(resultSet.getColumnIndex(\"age\"))\n\n ", "ore = await dataRdb.getRdbStore(STORE_CONFIG, 1);\n        await", "d = await resultSet.getLong(resultSet.getColumnIndex(\"id\"))\n   ", "console.log(TAG + \":getType_callback_0040 start\");\n        try ", "e = await resultSet.getString(resultSet.getColumnIndex(\"name\"))", "t.getLong(resultSet.getColumnIndex(\"id\"))\n                const", "\n            helper.getType(\n                URI,\n             ", "console.log(TAG + \":getType_callback_0040 end\");\n    })\n\n    \n ", "===================>getTypeCallback=======================>\");\n", "console.log(TAG + \":getType_promise_0041 end\");\n    })\n\n    \n  ", ".assertEqual(result.getLong(0));\n        }\n        done();\n    ", "onst id = resultSet.getLong(resultSet.getColumnIndex(\"id\"))\n   ", "console.log(TAG + \":getFileType_promise_0051 start\");\n        t", ".assertEqual(result.getLong(0))\n        }\n        done();\n     ", "     \"image\n    it('getFileType_callback_0052', 0, async functi", "getString(resultSet.getColumnIndex(\"name\"))\n            const a", "lobType = resultSet.getBlob(resultSet.getColumnIndex(\"blobType\"", "e.log(TAG + \"result get value failed\")\n                expect(n", ".assertEqual(result.getLong(0))\n            result = null\n     ", "   })\n\n    \n    it('getType_promise_0041', 0, async function (d", "t.getLong(resultSet.getColumnIndex(\"age\"))\n\n                awa", "st name = resultSet.getString(resultSet.getColumnIndex(\"name\"))", "\n            helper.getFileTypes(\n                URI,\n        ", "getString(resultSet.getColumnIndex(\"name\"))\n                con", "\n            helper.getFileTypes(\n                null,\n       ", "   })\n\n    \n    it('getFileType_callback_0050', 0, async functi"], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "get", "api_method_all": "get(deviceId: string, key: string): Promise<boolean|string|number|Uint8Array>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 85, "since": 8, "api_used": "\u662f", "lines": ["    await kvManager.getKVStore(TEST_STORE_ID, options).then((st", "      await kvStore.getResultSet('batch_test_string_key').then(", "      await kvStore.getResultSet(localDeviceId, query).then((re", "      await kvStore.getResultSet('test_key_string', 123).then((", "      await kvStore.getResultSet().then((result) => {\n         ", "      await kvStore.getResultSize(localDeviceId, query).then((r", "t promise = storage.getStorage(PATH);\n        promise.then((pre", "    await kvManager.getAllKVStoreId(TEST_BUNDLE_NAME).then((dat", "    await kvManager.getKVStore(TEST_STORE_ID).then((store) => {", "       kvStore.put(\"getDeviceId\", \"byPut\").then((data) => {\n   ", "      await kvStore.getEntries(query).then((entries) => {\n     ", "      await kvStore.getEntries(query).then((entrys) => {\n      ", "    await kvManager.getKVStore(options).then((store) => {\n     ", "  });\n        await getDeviceId.then(function(deviceId) {\n     ", "    await kvManager.getKVStore(TEST_STORE_ID, options).then(asy", "      await kvStore.getResultSet(query).then((result) => {\n    ", "      await kvStore.getResultSize(query).then((resultSize) => {", "      await kvStore.getEntries(localDeviceId, query).then((entr", "    await kvManager.getAllKVStoreId(TEST_BUNDLE_NAME).then(asyn", "    await kvManager.getKVStore(TEST_STORE_ID, optionsInfo).then", "      await kvStore.getResultSet('test').then((result) => {\n   "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getEntries", "api_method_all": "getEntries(deviceId: string, keyPrefix: string, callback: AsyncCallback<Entry[]>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 70, "since": 8, "api_used": "\u662f", "lines": ["eKvStorePutBatch004 getEntries success');\n                    expect(e", "eKvStorePutBatch102 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, 'batch_test_number_key',", "eKvStorePutBatch003 getEntries fail ' + err);\n                    expe", "vStoreGetEntries101 getEntries success');\n                    console.", "vStoreGetEntries002 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries(localDeviceId, 'batch_test_bool_key').t", "eKvStorePutBatch002 getEntries success');\n                    expect(e", "eKvStorePutBatch105 getEntries success');\n                    console.", "vStoreGetEntries001 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries('batch_test_number_key', function (err,", "eKvStorePutBatch002 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries(localDeviceId, 'batch_test_number_key')", "      await kvStore.getEntries(localDeviceId, 'batch_test_string_key')", "      await kvStore.getEntries(query, function (err,entrys) {\n        ", "eKvStorePutBatch004 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch101 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, 'batch_test_string_key',", "      await kvStore.getEntries('batch_test_bool_key', function (err,en", "eKvStorePutBatch104 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, query, function (err,ent", "      await kvStore.getEntries('batch_test_string_key', function (err,", "vStoreGetEntries002 getEntries success');\n                    expect(e", "eKvStorePutBatch006 getEntries success');\n                    expect(e", "eKvStorePutBatch006 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch001 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch001 getEntries success');\n                    console.", "vStoreGetEntries001 getEntries success');\n                    expect(e", "      await kvStore.getEntries(localDeviceId, 'batch_test_bool_key', f", "vStoreGetEntries102 getEntries success');\n                    console.", "eKvStorePutBatch005 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch003 getEntries success');\n                    expect(e", "eKvStorePutBatch005 getEntries success');\n                    expect(e", "eKvStorePutBatch106 getEntries success');\n                    console.", "eKvStorePutBatch103 getEntries success');\n                    console."], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getEntries", "api_method_all": "getEntries(deviceId: string, keyPrefix: string): Promise<Entry[]>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getEntries(query).then((entrys) => {\n             ", "      await kvStore.getEntries('batch_test_number_key').then((entrys) ", "      await kvStore.getEntries(localDeviceId, query).then((entrys) => ", "      await kvStore.getEntries('batch_test_bool_key').then((entrys) =>", "      await kvStore.getEntries(query).then((entries) => {\n            ", "      await kvStore.getEntries('batch_test_string_key').then((entrys) "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getEntries", "api_method_all": "getEntries(query: Query, callback: AsyncCallback<Entry[]>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 70, "since": 8, "api_used": "\u662f", "lines": ["eKvStorePutBatch004 getEntries success');\n                    expect(e", "eKvStorePutBatch102 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, 'batch_test_number_key',", "eKvStorePutBatch003 getEntries fail ' + err);\n                    expe", "vStoreGetEntries101 getEntries success');\n                    console.", "vStoreGetEntries002 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries(localDeviceId, 'batch_test_bool_key').t", "eKvStorePutBatch002 getEntries success');\n                    expect(e", "eKvStorePutBatch105 getEntries success');\n                    console.", "vStoreGetEntries001 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries('batch_test_number_key', function (err,", "eKvStorePutBatch002 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries(localDeviceId, 'batch_test_number_key')", "      await kvStore.getEntries(localDeviceId, 'batch_test_string_key')", "      await kvStore.getEntries(query, function (err,entrys) {\n        ", "eKvStorePutBatch004 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch101 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, 'batch_test_string_key',", "      await kvStore.getEntries('batch_test_bool_key', function (err,en", "eKvStorePutBatch104 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, query, function (err,ent", "      await kvStore.getEntries('batch_test_string_key', function (err,", "vStoreGetEntries002 getEntries success');\n                    expect(e", "eKvStorePutBatch006 getEntries success');\n                    expect(e", "eKvStorePutBatch006 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch001 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch001 getEntries success');\n                    console.", "vStoreGetEntries001 getEntries success');\n                    expect(e", "      await kvStore.getEntries(localDeviceId, 'batch_test_bool_key', f", "vStoreGetEntries102 getEntries success');\n                    console.", "eKvStorePutBatch005 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch003 getEntries success');\n                    expect(e", "eKvStorePutBatch005 getEntries success');\n                    expect(e", "eKvStorePutBatch106 getEntries success');\n                    console.", "eKvStorePutBatch103 getEntries success');\n                    console."], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getEntries", "api_method_all": "getEntries(query: Query): Promise<Entry[]>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getEntries(query).then((entrys) => {\n             ", "      await kvStore.getEntries('batch_test_number_key').then((entrys) ", "      await kvStore.getEntries(localDeviceId, query).then((entrys) => ", "      await kvStore.getEntries('batch_test_bool_key').then((entrys) =>", "      await kvStore.getEntries(query).then((entries) => {\n            ", "      await kvStore.getEntries('batch_test_string_key').then((entrys) "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getEntries", "api_method_all": "getEntries(deviceId: string, query: Query, callback: AsyncCallback<Entry[]>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 70, "since": 8, "api_used": "\u662f", "lines": ["eKvStorePutBatch004 getEntries success');\n                    expect(e", "eKvStorePutBatch102 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, 'batch_test_number_key',", "eKvStorePutBatch003 getEntries fail ' + err);\n                    expe", "vStoreGetEntries101 getEntries success');\n                    console.", "vStoreGetEntries002 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries(localDeviceId, 'batch_test_bool_key').t", "eKvStorePutBatch002 getEntries success');\n                    expect(e", "eKvStorePutBatch105 getEntries success');\n                    console.", "vStoreGetEntries001 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries('batch_test_number_key', function (err,", "eKvStorePutBatch002 getEntries fail ' + err);\n                    expe", "      await kvStore.getEntries(localDeviceId, 'batch_test_number_key')", "      await kvStore.getEntries(localDeviceId, 'batch_test_string_key')", "      await kvStore.getEntries(query, function (err,entrys) {\n        ", "eKvStorePutBatch004 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch101 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, 'batch_test_string_key',", "      await kvStore.getEntries('batch_test_bool_key', function (err,en", "eKvStorePutBatch104 getEntries success');\n                    console.", "      await kvStore.getEntries(localDeviceId, query, function (err,ent", "      await kvStore.getEntries('batch_test_string_key', function (err,", "vStoreGetEntries002 getEntries success');\n                    expect(e", "eKvStorePutBatch006 getEntries success');\n                    expect(e", "eKvStorePutBatch006 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch001 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch001 getEntries success');\n                    console.", "vStoreGetEntries001 getEntries success');\n                    expect(e", "      await kvStore.getEntries(localDeviceId, 'batch_test_bool_key', f", "vStoreGetEntries102 getEntries success');\n                    console.", "eKvStorePutBatch005 getEntries fail ' + err);\n                    expe", "eKvStorePutBatch003 getEntries success');\n                    expect(e", "eKvStorePutBatch005 getEntries success');\n                    expect(e", "eKvStorePutBatch106 getEntries success');\n                    console.", "eKvStorePutBatch103 getEntries success');\n                    console."], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getEntries", "api_method_all": "getEntries(deviceId: string, query: Query): Promise<Entry[]>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getEntries(query).then((entrys) => {\n             ", "      await kvStore.getEntries('batch_test_number_key').then((entrys) ", "      await kvStore.getEntries(localDeviceId, query).then((entrys) => ", "      await kvStore.getEntries('batch_test_bool_key').then((entrys) =>", "      await kvStore.getEntries(query).then((entries) => {\n            ", "      await kvStore.getEntries('batch_test_string_key').then((entrys) "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SchemaJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getResultSet", "api_method_all": "getResultSet(deviceId: string, keyPrefix: string, callback: AsyncCallback<KvStoreResultSet>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 87, "since": 8, "api_used": "\u662f", "lines": ["toreGetResultSet104 getResultSet success');\n                expect(err !", "      await kvStore.getResultSet(localDeviceId, query, async function (e", "s Api DeviceKvStore.getResultSet() testcase 003\n     */\n    it('testDevi", "toreGetResultSet003 getResultSet fail ' + err);\n            });\n        ", "s Api DeviceKvStore.getResultSet() testcase 006\n     */\n    it('testDevi", "toreGetResultSet101 getResultSet success');\n                    resultSe", "reCloseResultSet002 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet001 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet004 getResultSet success');\n                expect(null)", "oreGetResultSize102 getResultSet success');\n                    expect(r", "toreGetResultSet001 getResultSet success');\n                resultSet = ", "toreGetResultSet002 getResultSet success');\n                resultSet = ", "oreGetResultSize001 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet102 getResultSet success');\n                resultSet = ", "s Api DeviceKvStore.getResultSet() testcase 004\n     */\n    it('testDevi", "      await kvStore.getResultSet(function (err, result) {\n              ", "toreGetResultSet005 getResultSet success');\n                resultSet = ", "      await kvStore.getResultSet(query, async function (err, result) {\n ", "toreGetResultSet006 getResultSet success');\n                resultSet = ", "reCloseResultSet002 getResultSet success');\n                resultSet = ", "toreGetResultSet106 getResultSet success');\n                    resultSe", "toreGetResultSet105 getResultSet success');\n                    resultSe", "oreGetResultSize101 getResultSet success');\n                    expect(r", "s Api DeviceKvStore.getResultSet() testcase 005\n     */\n    it('testDevi", "reCloseResultSet102 getResultSet success');\n                resultSet = ", "s Api DeviceKvStore.getResultSet() testcase 002\n     */\n    it('testDevi", "ole.log('beforeEach getResultSet success');\n            resultSet = resu", "toreGetResultSet005 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet006 getResultSet fail ' + err);\n                expect(n", "s Api DeviceKvStore.getResultSet() testcase 001\n     */\n    it('testDevi", "toreGetResultSet103 getResultSet success');\n                expect(err !", "toreGetResultSet002 getResultSet fail ' + err);\n                expect(n", "oreGetResultSize001 getResultSet success');\n                expect(resul", "      await kvStore.getResultSet(localDeviceId, 'batch_test_string_key')", "toreGetResultSet003 getResultSet success');\n                expect(null)", "toreGetResultSet004 getResultSet fail ' + err);\n            });\n        ", "      await kvStore.getResultSet(localDeviceId, 'batch_test_string_key',", "      await kvStore.getResultSet('test_key_string', 123, function (err, ", "-API8]DeviceKvStore.getResultSet()\n     * @tc.desc Test Js Api DeviceKvS"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getResultSet", "api_method_all": "getResultSet(deviceId: string, keyPrefix: string): Promise<KvStoreResultSet>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSet(query).then((result) => {\n             ", "      await kvStore.getResultSet('test_key_string', 123).then((result) =", "      await kvStore.getResultSet('test').then((result) => {\n            ", "      await kvStore.getResultSet('batch_test_string_key').then((result) ", "      await kvStore.getResultSet().then((result) => {\n                co", "      await kvStore.getResultSet(localDeviceId, query).then((result) => "], "files": ["DeviceKvStorePromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getResultSet", "api_method_all": "getResultSet(query: Query, callback: AsyncCallback<KvStoreResultSet>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 87, "since": 8, "api_used": "\u662f", "lines": ["toreGetResultSet104 getResultSet success');\n                expect(err !", "      await kvStore.getResultSet(localDeviceId, query, async function (e", "s Api DeviceKvStore.getResultSet() testcase 003\n     */\n    it('testDevi", "toreGetResultSet003 getResultSet fail ' + err);\n            });\n        ", "s Api DeviceKvStore.getResultSet() testcase 006\n     */\n    it('testDevi", "toreGetResultSet101 getResultSet success');\n                    resultSe", "reCloseResultSet002 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet001 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet004 getResultSet success');\n                expect(null)", "oreGetResultSize102 getResultSet success');\n                    expect(r", "toreGetResultSet001 getResultSet success');\n                resultSet = ", "toreGetResultSet002 getResultSet success');\n                resultSet = ", "oreGetResultSize001 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet102 getResultSet success');\n                resultSet = ", "s Api DeviceKvStore.getResultSet() testcase 004\n     */\n    it('testDevi", "      await kvStore.getResultSet(function (err, result) {\n              ", "toreGetResultSet005 getResultSet success');\n                resultSet = ", "      await kvStore.getResultSet(query, async function (err, result) {\n ", "toreGetResultSet006 getResultSet success');\n                resultSet = ", "reCloseResultSet002 getResultSet success');\n                resultSet = ", "toreGetResultSet106 getResultSet success');\n                    resultSe", "toreGetResultSet105 getResultSet success');\n                    resultSe", "oreGetResultSize101 getResultSet success');\n                    expect(r", "s Api DeviceKvStore.getResultSet() testcase 005\n     */\n    it('testDevi", "reCloseResultSet102 getResultSet success');\n                resultSet = ", "s Api DeviceKvStore.getResultSet() testcase 002\n     */\n    it('testDevi", "ole.log('beforeEach getResultSet success');\n            resultSet = resu", "toreGetResultSet005 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet006 getResultSet fail ' + err);\n                expect(n", "s Api DeviceKvStore.getResultSet() testcase 001\n     */\n    it('testDevi", "toreGetResultSet103 getResultSet success');\n                expect(err !", "toreGetResultSet002 getResultSet fail ' + err);\n                expect(n", "oreGetResultSize001 getResultSet success');\n                expect(resul", "      await kvStore.getResultSet(localDeviceId, 'batch_test_string_key')", "toreGetResultSet003 getResultSet success');\n                expect(null)", "toreGetResultSet004 getResultSet fail ' + err);\n            });\n        ", "      await kvStore.getResultSet(localDeviceId, 'batch_test_string_key',", "      await kvStore.getResultSet('test_key_string', 123, function (err, ", "-API8]DeviceKvStore.getResultSet()\n     * @tc.desc Test Js Api DeviceKvS"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getResultSet", "api_method_all": "getResultSet(query: Query): Promise<KvStoreResultSet>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSet(query).then((result) => {\n             ", "      await kvStore.getResultSet('test_key_string', 123).then((result) =", "      await kvStore.getResultSet('test').then((result) => {\n            ", "      await kvStore.getResultSet('batch_test_string_key').then((result) ", "      await kvStore.getResultSet().then((result) => {\n                co", "      await kvStore.getResultSet(localDeviceId, query).then((result) => "], "files": ["DeviceKvStorePromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getResultSet", "api_method_all": "getResultSet(deviceId: string, query: Query, callback: AsyncCallback<KvStoreResultSet>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 87, "since": 8, "api_used": "\u662f", "lines": ["toreGetResultSet104 getResultSet success');\n                expect(err !", "      await kvStore.getResultSet(localDeviceId, query, async function (e", "s Api DeviceKvStore.getResultSet() testcase 003\n     */\n    it('testDevi", "toreGetResultSet003 getResultSet fail ' + err);\n            });\n        ", "s Api DeviceKvStore.getResultSet() testcase 006\n     */\n    it('testDevi", "toreGetResultSet101 getResultSet success');\n                    resultSe", "reCloseResultSet002 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet001 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet004 getResultSet success');\n                expect(null)", "oreGetResultSize102 getResultSet success');\n                    expect(r", "toreGetResultSet001 getResultSet success');\n                resultSet = ", "toreGetResultSet002 getResultSet success');\n                resultSet = ", "oreGetResultSize001 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet102 getResultSet success');\n                resultSet = ", "s Api DeviceKvStore.getResultSet() testcase 004\n     */\n    it('testDevi", "      await kvStore.getResultSet(function (err, result) {\n              ", "toreGetResultSet005 getResultSet success');\n                resultSet = ", "      await kvStore.getResultSet(query, async function (err, result) {\n ", "toreGetResultSet006 getResultSet success');\n                resultSet = ", "reCloseResultSet002 getResultSet success');\n                resultSet = ", "toreGetResultSet106 getResultSet success');\n                    resultSe", "toreGetResultSet105 getResultSet success');\n                    resultSe", "oreGetResultSize101 getResultSet success');\n                    expect(r", "s Api DeviceKvStore.getResultSet() testcase 005\n     */\n    it('testDevi", "reCloseResultSet102 getResultSet success');\n                resultSet = ", "s Api DeviceKvStore.getResultSet() testcase 002\n     */\n    it('testDevi", "ole.log('beforeEach getResultSet success');\n            resultSet = resu", "toreGetResultSet005 getResultSet fail ' + err);\n                expect(n", "toreGetResultSet006 getResultSet fail ' + err);\n                expect(n", "s Api DeviceKvStore.getResultSet() testcase 001\n     */\n    it('testDevi", "toreGetResultSet103 getResultSet success');\n                expect(err !", "toreGetResultSet002 getResultSet fail ' + err);\n                expect(n", "oreGetResultSize001 getResultSet success');\n                expect(resul", "      await kvStore.getResultSet(localDeviceId, 'batch_test_string_key')", "toreGetResultSet003 getResultSet success');\n                expect(null)", "toreGetResultSet004 getResultSet fail ' + err);\n            });\n        ", "      await kvStore.getResultSet(localDeviceId, 'batch_test_string_key',", "      await kvStore.getResultSet('test_key_string', 123, function (err, ", "-API8]DeviceKvStore.getResultSet()\n     * @tc.desc Test Js Api DeviceKvS"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getResultSet", "api_method_all": "getResultSet(deviceId: string, query: Query): Promise<KvStoreResultSet>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSet(query).then((result) => {\n             ", "      await kvStore.getResultSet('test_key_string', 123).then((result) =", "      await kvStore.getResultSet('test').then((result) => {\n            ", "      await kvStore.getResultSet('batch_test_string_key').then((result) ", "      await kvStore.getResultSet().then((result) => {\n                co", "      await kvStore.getResultSet(localDeviceId, query).then((result) => "], "files": ["DeviceKvStorePromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "closeResultSet", "api_method_all": "closeResultSet(resultSet: KvStoreResultSet, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 66, "since": 8, "api_used": "\u662f", "lines": ["reCloseResultSet103 closeResultSet fail');\n                }\n             ", "reCloseResultSet003 closeResultSet success');\n                expect(null)", "toreGetResultSet106 closeResultSet success');\n                        expe", "toreGetResultSet005 closeResultSet success');\n                expect(err =", "toreGetResultSet002 closeResultSet success');\n                expect(err =", "sole.log('afterEach closeResultSet success');\n        }).catch((err) => {\n", "reCloseResultSet102 closeResultSet fail');\n                        expect(", "reCloseResultSet003 closeResultSet fail ' + err);\n            });\n        ", "toreGetResultSet006 closeResultSet fail ' + err);\n                expect(n", "reCloseResultSet102 closeResultSet success');\n                        expe", "reCloseResultSet001 closeResultSet success');\n                expect(null)", "sole.log('afterEach closeResultSet fail ' + err);\n        });\n        awai", "      await kvStore.closeResultSet(function (err, data) {\n                ", "reCloseResultSet101 closeResultSet success');\n                    expect(n", "reCloseResultSet103 closeResultSet success');\n                    expect(n", "esultSetGetCount002 closeResultSet success');\n            }).catch((err) =", "toreGetResultSet101 closeResultSet success');\n                        expe", "reCloseResultSet002 closeResultSet success');\n                expect(err =", "reCloseResultSet002 closeResultSet fail ' + err);\n                expect(n", "toreGetResultSet005 closeResultSet fail ' + err);\n                expect(n", "esultSetGetCount002 closeResultSet fail ' + err);\n                expect(n", "toreGetResultSet001 closeResultSet success');\n                expect(err =", "toreGetResultSet105 closeResultSet success');\n                        expe", "toreGetResultSet006 closeResultSet success');\n                expect(err =", "reCloseResultSet001 closeResultSet fail ' + err);\n            });\n        ", "toreGetResultSet002 closeResultSet fail ' + err);\n                expect(n", "toreGetResultSet001 closeResultSet fail ' + err);\n                expect(n", "toreGetResultSet102 closeResultSet success');\n                    expect(e", "      await kvStore.closeResultSet(resultSet, function (err, data) {\n     ", "reCloseResultSet101 closeResultSet fail');\n                }\n             "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "closeResultSet", "api_method_all": "closeResultSet(resultSet: KvStoreResultSet): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.closeResultSet().then(() => {\n                console.", "      await kvStore.closeResultSet(resultSet).then((err) => {\n            ", "      await kvStore.closeResultSet(resultSet).then(() => {\n               ", "      await kvStore.closeResultSet(rs).then((err) => {\n                con"], "files": ["DeviceKvStorePromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getResultSize", "api_method_all": "getResultSize(query: Query, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSize(query, async function (err, resultSize)", "      await kvStore.getResultSize(localDeviceId, query, async function (e"], "files": ["DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getResultSize", "api_method_all": "getResultSize(query: Query): Promise<number>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSize(query).then((resultSize) => {\n         ", "      await kvStore.getResultSize(localDeviceId, query).then((resultSize)"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getResultSize", "api_method_all": "getResultSize(deviceId: string, query: Query, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSize(query, async function (err, resultSize)", "      await kvStore.getResultSize(localDeviceId, query, async function (e"], "files": ["DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "getResultSize", "api_method_all": "getResultSize(deviceId: string, query: Query): Promise<number>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.getResultSize(query).then((resultSize) => {\n         ", "      await kvStore.getResultSize(localDeviceId, query).then((resultSize)"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "removeDeviceData", "api_method_all": "removeDeviceData(deviceId: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 40, "since": 8, "api_used": "\u662f", "lines": ["RemoveDeviceData001 removeDeviceData success');\n                expect(null)", "      await kvStore.removeDeviceData(function (err,data) {\n                i", "RemoveDeviceData001 removeDeviceData fail ' + err);\n            });\n        ", "RemoveDeviceData101 removeDeviceData fail');\n                        await k", "RemoveDeviceData004 removeDeviceData fail ' + err);\n            });\n        ", "RemoveDeviceData103 removeDeviceData fail');\n                }\n             ", "RemoveDeviceData101 removeDeviceData success');\n                        expe", "RemoveDeviceData102 removeDeviceData success');\n                    expect(n", "RemoveDeviceData003 removeDeviceData fail ' + err);\n            });\n        ", "RemoveDeviceData104 removeDeviceData fail');\n                }\n             ", "      await kvStore.removeDeviceData(null, function (err,data) {\n           ", "RemoveDeviceData103 removeDeviceData success');\n                    expect(n", "RemoveDeviceData003 removeDeviceData success');\n                expect(null)", "RemoveDeviceData102 removeDeviceData fail');\n                }\n             ", "      await kvStore.removeDeviceData('', function (err,data) {\n             ", "RemoveDeviceData004 removeDeviceData success');\n                expect(null)", "RemoveDeviceData104 removeDeviceData success');\n                    expect(n", "RemoveDeviceData002 removeDeviceData success');\n                expect(null)", "RemoveDeviceData002 removeDeviceData fail ' + err);\n            });\n        ", "      await kvStore.removeDeviceData(deviceid, async function (err,data) {\n "], "files": ["DeviceKvStoreCallbackJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "removeDeviceData", "api_method_all": "removeDeviceData(deviceId: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["      await kvStore.removeDeviceData('').then((err) => {\n                con", "      await kvStore.removeDeviceData(null).then((err) => {\n                c", "      await kvStore.removeDeviceData().then((err) => {\n                conso", "      await kvStore.removeDeviceData(deviceid).then((err) => {\n             "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "sync", "api_method_all": "sync(deviceIdList: string[], mode: SyncMode, allowedDelayMs?: number): void;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 1452, "since": 7, "api_used": "\u662f", "lines": ["  })\n\n    afterAll(async function () {\n     ", "tLessThan0006', 0, async function (done) {\n ", "IsNotNull0001', 0, async function (done) {\n ", "stEqualTo0007', 0, async function (done) {\n ", "stEqualTo0008', 0, async function (done) {\n ", "tLessThan0004', 0, async function (done) {\n ", "otEqualTo0005', 0, async function (done) {\n ", "tLessThan0002', 0, async function (done) {\n ", "stEqualTo0001', 0, async function (done) {\n ", " count;\n    }\n\n    async function buildAllDa", "otEqualTo0003', 0, async function (done) {\n ", "otEqualTo0004', 0, async function (done) {\n ", "OrEqualTo0002', 0, async function (done) {\n ", "estIsNull0004', 0, async function (done) {\n ", "OrEqualTo0004', 0, async function (done) {\n ", "tLessThan0008', 0, async function (done) {\n ", "tLessThan0007', 0, async function (done) {\n ", "estIsNull0003', 0, async function (done) {\n ", "eaterThan0003', 0, async function (done) {\n ", "IsNotNull0003', 0, async function (done) {\n ", "estIsNull0001', 0, async function (done) {\n ", "eaterThan0007', 0, async function (done) {\n ", "tLessThan0001', 0, async function (done) {\n ", "tLessThan0003', 0, async function (done) {\n ", "eaterThan0002', 0, async function (done) {\n ", "OrEqualTo0001', 0, async function (done) {\n ", "eaterThan0004', 0, async function (done) {\n ", "      }\n    }\n\n    async function buildAllDa", "stEqualTo0004', 0, async function (done) {\n ", "otEqualTo0002', 0, async function (done) {\n ", "stEqualTo0003', 0, async function (done) {\n ", "otEqualTo0007', 0, async function (done) {\n ", "estIsNull0002', 0, async function (done) {\n ", "eaterThan0001', 0, async function (done) {\n ", "otEqualTo0008', 0, async function (done) {\n ", "eaterThan0008', 0, async function (done) {\n ", "otEqualTo0001', 0, async function (done) {\n ", "OrEqualTo0003', 0, async function (done) {\n ", "stEqualTo0005', 0, async function (done) {\n ", "IsNotNull0002', 0, async function (done) {\n ", "tLessThan0005', 0, async function (done) {\n ", "() {\n    beforeAll(async function () {\n     ", "stEqualTo0002', 0, async function (done) {\n ", "stEqualTo0006', 0, async function (done) {\n ", "eaterThan0006', 0, async function (done) {\n ", "otEqualTo0006', 0, async function (done) {\n ", "IsNotNull0004', 0, async function (done) {\n ", "eaterThan0005', 0, async function (done) {\n "], "files": ["RdbstorePredicatesJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "on", "api_method_all": "on(event: 'syncComplete', syncCallback: Callback<Array<[string, number]>>): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 9171, "since": 7, "api_used": "\u662f", "lines": ["      console.info('onShow finish')\n      ", " }\n\n    async function buildAllDataType2()", "ction () {\n        console.info(TAG + 'aft", ".info('TestApplication onDestroy');\n    }\n", "fo('TestApplication onCreate');\n    },\n   ", "   beforeEach(function () {\n        consol", "ction () {\n        console.info(TAG + 'bef", " }\n\n    async function buildAllDataType3()", "aType2() {\n        console.log(TAG + \"buil", "deccjsunit/index'\n\nconst injectRef = Objec", ",\n                \"longValue\": 92233720368", "01', 0, async function (done) {\n        co", "  configService.setConfig(this)\n\n        r", ",\n                \"longValue\": -9223372036", " }\n\n    async function buildAllDataType1()", "      }\n    }\n\n    console.log(TAG + \"****", "dicatesTest', function () {\n    beforeAll(", "2, 3])\n            const valueBucket = {\n ", "rder` INTEGER);\";\n\nconst STORE_CONFIG = {\n", "Create() {\n        console.info('TestAppli", "Instance()\n        const expectExtend = ne", "world');\n    },\n    onShow() {\n        con", "xecute()\n    },\n    onReady() {\n    },\n}", "xport default {\n    onCreate() {\n        c", "estroy() {\n        console.info('TestAppli", "aType3() {\n        console.log(TAG + \"buil", "    afterEach(function () {\n        consol", "alue INTEGER , primLongValue INTEGER , \"\n+", ",\n                \"longValue\": 1,\n        ", ".info('TestApplication onCreate');\n    },\n", "ata.dataAbility';\n\nconst TAG = '[RDB_JSKIT", "reate');\n    },\n    onDestroy() {\n        ", "gerValue INTEGER , longValue INTEGER , sho", ";\n    })\n\n    function resultSize(resultSe", "getDefaultService('config')\n        config", "foreAll(async function () {\n        consol", "('config')\n        configService.setConfig", "fo('TestApplication onDestroy');\n    }\n};\n", "itle: ''\n    },\n    onInit() {\n        thi", "onShow() {\n        console.info('onShow fi", "ore.init()\n        const configService = c", "RDB_JSKITS _TEST]'\nconst CREATE_TABLE_ALL_", "fterAll(async function () {\n        consol", "aType1() {\n        console.log(TAG + \"buil", "it()\n        const configService = core.ge", "w finish')\n        const core = Core.getIn"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceKVStore", "api_method_name": "off", "api_method_all": "off(event: 'syncComplete', syncCallback?: Callback<Array<[string, number]>>): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 78, "since": 8, "api_used": "\u662f", "lines": ["            kvStore.off('syncComplete');\n  ", "            kvStore.off('syncComplete', fun", ";\n        kvManager.off('distributedDataSer", "@tc.desc predicates offset normal test\n    ", "   })\n\n    \n    it('off_0031', 0, async fun", "IJKLMN\").limitAs(3).offsetAs(1);\n        le", "            kvStore.off('dataChange');\n    ", "/**\n     * @tc.name off interface test\n    ", "IJKLMN\").limitAs(3).offsetAs(5);\n        le", "            kvStore.off('dataChange', func1", "IJKLMN\").limitAs(3).offsetAs(-1);\n        l", "@tc.name predicates offset normal test\n    ", "console.log(TAG + \":off_0030 start\");\n     ", "            kvStore.off('dataChange', func)", "console.log(TAG + \":off_0030 end\");\n    })\n", "ver);\n        mPref.off('change', observer)", "   })\n\n    \n    it('off_0030', 0, async fun", "\n            helper.off(\n                \"d", " console.log(TAG + \"off dataChange success\"", "IJKLMN\").limitAs(3).offsetAs(0);\n        le", "console.log(TAG + \":off_0031 end\");\n    })\n", "console.log(TAG + \":off_0031 start\");\n     ", "160\n     * @tc.desc off interface test\n    ", ");\n        rdbStore.off(\"dataChange\", (devi"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "StorageSyncJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "ObjectStoreJsunit.test.js", "KvManagerPromiseJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_all": "interface KVManager {\n        \n        getKVStore<T extends KVStore>(storeId: string, options: Options): Promise<T>;\n        getKVStore<T extends KVStore>(storeId: string, options: Options, callback: AsyncCallback<T>): void;\n\n        \n        closeKVStore(appId: string, storeId: string, kvStore: KVStore, callback: AsyncCallback<void>): void;\n        closeKVStore(appId: string, storeId: string, kvStore: KVStore): Promise<void>;\n\n        \n        deleteKVStore(appId: string, storeId: string, callback: AsyncCallback<void>): void;\n        deleteKVStore(appId: string, storeId: string): Promise<void>;\n\n        \n        getAllKVStoreId(appId: string, callback: AsyncCallback<string[]>): void;\n        getAllKVStoreId(appId: string): Promise<string[]>;\n\n        \n        on(event: 'distributedDataServiceDie', deathCallback: Callback<void>): void;\n\n        \n        off(event: 'distributedDataServiceDie', deathCallback?: Callback<void>): void;\n    }", "api_method_name": "KVManager", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 378, "since": 7, "api_used": "\u662f", "lines": [")\n\n    \n    it('testKVManagerGetKVStore104', 0, a", "   console.log('testKVManagerGetKVStore104');\n   ", "   console.log('testKVManagerGetKVStore102');\n   ", "   console.log('testKVManagerGetKVStore108');\n   ", "   console.log('testKVManagerGetKVStore103 getKVS", "   console.log('testKVManagerGetKVStore106 getKVS", "og('beforeAll createKVManager success');\n        ", "og('beforeAll createKVManager err ' + err);\n     ", "   console.log('testKVManagerGetKVStore109 getKVS", "await factory.createKVManager(config).then((manag", "   console.log('testKVManagerGetKVStore104 getKVS", "   console.log('testKVManagerGetKVStore105 getKVS", "   console.log('testKVManagerGetKVStore106');\n   ", "   console.log('testKVManagerGetKVStore109');\n   ", ")\n\n    \n    it('testKVManagerGetKVStore106', 0, a", "   console.log('testKVManagerGetKVStore110 getKVS", "   console.log('testKVManagerGetKVStore107');\n   ", "   console.log('testKVManagerGetKVStore103');\n   ", ")\n\n    \n    it('testKVManagerGetKVStore110', 0, a", ")\n\n    \n    it('testKVManagerGetKVStore102', 0, a", ")\n\n    \n    it('testKVManagerGetKVStore105', 0, a", ")\n\n    \n    it('testKVManagerGetKVStore101', 0, a", ")\n\n    \n    it('testKVManagerGetKVStore107', 0, a", "   console.log('testKVManagerGetKVStore108 getKVS", "   console.log('testKVManagerGetKVStore105');\n   ", "   console.log('testKVManagerGetKVStore110');\n   ", ")\n\n    \n    it('testKVManagerGetKVStore109', 0, a", "   console.log('testKVManagerGetKVStore101');\n   ", "await factory.createKVManager(config, function (e", "   console.log('testKVManagerGetKVStore107 getKVS", "   console.log('testKVManagerGetKVStore102 getKVS", "   console.log('testKVManagerGetKVStore103 err ' ", " = null;\n\ndescribe('KVManagerCallbackTest', funct", ")\n\n    \n    it('testKVManagerGetKVStore103', 0, a", "   console.log('testKVManagerGetKVStore101 getKVS", ")\n\n    \n    it('testKVManagerGetKVStore108', 0, a"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_name": "getKVStore", "api_method_all": "getKVStore<T extends KVStore>(storeId: string, options: Options): Promise<T>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 32, "since": 7, "api_used": "\u662f", "lines": ["    await kvManager.getKVStore(TEST_STORE_ID).then((store) => {\n      ", "    await kvManager.getKVStore(TEST_STORE_ID, options).then((store) =>", "    await kvManager.getKVStore(options).then((store) => {\n            ", "    await kvManager.getKVStore(TEST_STORE_ID, options).then(async (sto", "    await kvManager.getKVStore(TEST_STORE_ID, optionsInfo).then((store"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_name": "getKVStore", "api_method_all": "getKVStore<T extends KVStore>(storeId: string, options: Options, callback: AsyncCallback<T>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 150, "since": 7, "api_used": "\u662f", "lines": ["anagerGetKVStore102 getKVStore success');\n                    expect(n", "anagerGetKVStore108 getKVStore e ' + e);\n            expect(null).asse", "anagerGetKVStore110 getKVStore e ' + e);\n            expect(null).asse", "anagerGetKVStore110 getKVStore success');\n                expect((err ", "ole.log('beforeEach getKVStore err ' + err);\n        });\n        conso", "anagerGetKVStore102 getKVStore fail');\n                }\n             ", "anagerGetKVStore107 getKVStore e ' + e);\n            expect(null).asse", "anagerGetKVStore112 getKVStore e ' + e);\n            expect(null).asse", "anagerGetKVStore104 getKVStore e ' + e);\n            done();\n        }", "anagerGetKVStore106 getKVStore success');\n                expect((err ", "anagerGetKVStore103 getKVStore e ' + e);\n            expect(null).asse", "anagerGetKVStore106 getKVStore e ' + e);\n            expect(null).asse", "    await kvManager.getKVStore(options, function (err, store) {\n      ", "    await kvManager.getKVStore(TEST_STORE_ID, optionsInfo, function (e", "anagerGetKVStore109 getKVStore success');\n                expect((err ", "anagerGetKVStore107 getKVStore success');\n                expect((err ", "anagerGetKVStore113 getKVStore e ' + e);\n            done();\n        }", "anagerGetKVStore104 getKVStore success');\n                    expect(n", "anagerGetKVStore105 getKVStore e ' + e);\n            expect(null).asse", "anagerGetKVStore113 getKVStore success');\n                    expect(n", "anagerGetKVStore101 getKVStore e ' + e);\n            expect(null).asse", "anagerGetKVStore104 getKVStore fail');\n                }\n             ", "anagerGetKVStore101 getKVStore success');\n                kvStore = st", "anagerGetKVStore111 getKVStore success');\n                expect((err ", "anagerGetKVStore111 getKVStore e ' + e);\n            expect(null).asse", "anagerGetKVStore109 getKVStore e ' + e);\n            expect(null).asse", "anagerGetKVStore112 getKVStore success');\n                expect((err ", "anagerGetKVStore103 getKVStore success');\n                console.log(", "    await kvManager.getKVStore(TEST_STORE_ID, options, function (err, ", "sole.log('beforeAll getKVStore for getDeviceId success');\n        }).c", "anagerGetKVStore102 getKVStore e ' + e);\n            done();\n        }", "anagerGetKVStore113 getKVStore fail');\n                }\n             ", "anagerGetKVStore105 getKVStore success');\n                expect((err ", "sole.log('beforeAll getKVStore err ' + err);\n        });\n        var g", "ole.log('beforeEach getKVStore success');\n            done();\n        ", "ole.log('beforeEach getKVStore success');\n        }).catch((err) => {\n", "anagerGetKVStore108 getKVStore success');\n                expect((err "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_name": "closeKVStore", "api_method_all": "closeKVStore(appId: string, storeId: string, kvStore: KVStore, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 52, "since": 8, "api_used": "\u662f", "lines": ["agerCloseKVStore102 closeKVStore e ' + e);\n                    done();\n ", "agerCloseKVStore002 closeKVStore e ' + e);\n            }\n        }).catc", "agerCloseKVStore101 closeKVStore success');\n                    expect((", "    await kvManager.closeKVStore(TEST_BUNDLE_NAME, function (err, data) ", "agerCloseKVStore002 closeKVStore success');\n                    expect(n", "agerCloseKVStore004 closeKVStore twice');\n            expect(null).asser", "agerCloseKVStore003 closeKVStore err ' + err);\n                });\n     ", "agerCloseKVStore004 closeKVStore twice err ' + err);\n        });\n       ", "agerCloseKVStore001 closeKVStore success');\n            }).catch((err) =", "agerCloseKVStore001 closeKVStore err ' + err);\n                expect(nu", "agerCloseKVStore104 closeKVStore twice e ' + e);\n            expect(null", "agerCloseKVStore002 closeKVStore err ' + err);\n                });\n     ", "agerCloseKVStore102 closeKVStore fail');\n                        }\n     ", "agerCloseKVStore103 closeKVStore success');\n                            ", "agerCloseKVStore103 closeKVStore fail');\n                        }\n     ", "agerCloseKVStore102 closeKVStore success');\n                            ", "sole.log('afterEach closeKVStore success');\n            await kvManager.", "sole.log('afterEach closeKVStore err ' + err);\n        });\n        kvSto", "agerCloseKVStore003 closeKVStore success');\n                    expect(n", "agerCloseKVStore104 closeKVStore twice ' + err);\n                if (err", "agerCloseKVStore104 closeKVStore redo.');\n        await kvManager.closeK", "    await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID, functi", "    await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID, kvStor", "agerCloseKVStore104 closeKVStore redo.');\n            await kvManager.cl", "agerCloseKVStore103 closeKVStore e ' + e);\n                    done();\n ", "agerCloseKVStore003 closeKVStore e ' + e);\n            }\n        }).catc"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_name": "closeKVStore", "api_method_all": "closeKVStore(appId: string, storeId: string, kvStore: KVStore): Promise<void>;", "api_type": "Promise", "api_args_count": 3, "api_level": 21, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["    await kvManager.closeKVStore(TEST_BUNDLE_NAME).then(() => {\n        ", "    await kvManager.closeKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID).then(("], "files": ["KvManagerPromiseJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_name": "deleteKVStore", "api_method_all": "deleteKVStore(appId: string, storeId: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 37, "since": 8, "api_used": "\u662f", "lines": ["gerDeleteKVStore102 deleteKVStore fail');\n                        }\n     ", "gerDeleteKVStore102 deleteKVStore success');\n                            ", "gerDeleteKVStore101 deleteKVStore success');\n                    expect((", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID);\n     ", "sole.log('afterEach deleteKVStore success');\n            }).catch((err) =", "gerDeleteKVStore103 deleteKVStore success');\n                    expect(n", "sole.log('beforeAll deleteKVStore error ' + err);\n                });\n   ", "sole.log('afterEach deleteKVStore success');\n                done();\n    ", "gerDeleteKVStore003 deleteKVStore success');\n            expect(null).ass", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID, functi", "gerDeleteKVStore102 deleteKVStore e ' + e);\n                    done();\n ", "gerDeleteKVStore001 deleteKVStore success');\n            }).catch((err) =", "gerDeleteKVStore002 deleteKVStore e ' + e);\n            }\n        }).catc", "gerDeleteKVStore001 deleteKVStore err ' + err);\n                expect(nu", "sole.log('beforeAll deleteKVStore store: ' + data[i]);\n                  ", "gerDeleteKVStore003 deleteKVStore err ' + err);\n        });\n        done(", "gerDeleteKVStore002 deleteKVStore success');\n                    expect(n", "sole.log('beforeAll deleteKVStore success ' + data[i]);\n                }", "gerDeleteKVStore103 deleteKVStore fail');\n                }\n             ", "sole.log('afterEach deleteKVStore err ' + err);\n            });\n        }", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME, function (err, data) ", "gerDeleteKVStore002 deleteKVStore err ' + err);\n                });\n     "], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_name": "deleteKVStore", "api_method_all": "deleteKVStore(appId: string, storeId: string): Promise<void>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["    await kvManager.deleteKVStore(TEST_BUNDLE_NAME).then(() => {\n        ", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME, TEST_STORE_ID).then((", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME, data[i]).then(() => {"], "files": ["DeviceKvStorePromiseJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SchemaJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_name": "getAllKVStoreId", "api_method_all": "getAllKVStoreId(appId: string, callback: AsyncCallback<string[]>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["rGetAllKVStoreId102 getAllKVStoreId e ' + e);\n                    expect(nu", "rGetAllKVStoreId001 getAllKVStoreId success');\n            console.log('tes", "rGetAllKVStoreId002 getAllKVStoreId success');\n                console.log(", "sole.log('beforeAll getAllKVStoreId size = ' + data.length);\n            fo", "sole.log('beforeAll getAllKVStoreId err ' + err);\n        });\n\n        cons", "rGetAllKVStoreId002 getAllKVStoreId err ' + err);\n                expect(nu", "rGetAllKVStoreId102 getAllKVStoreId success');\n                        cons", "rGetAllKVStoreId001 getAllKVStoreId err ' + err);\n            expect(null).", "    await kvManager.getAllKVStoreId(TEST_BUNDLE_NAME, function (err, data) ", "rGetAllKVStoreId101 getAllKVStoreId success');\n                console.log("], "files": ["KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_name": "getAllKVStoreId", "api_method_all": "getAllKVStoreId(appId: string): Promise<string[]>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["    await kvManager.getAllKVStoreId(TEST_BUNDLE_NAME).then(async (data) => ", "    await kvManager.getAllKVStoreId(TEST_BUNDLE_NAME).then((data) => {\n    "], "files": ["KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_name": "on", "api_method_all": "on(event: 'distributedDataServiceDie', deathCallback: Callback<void>): void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 9171, "since": 7, "api_used": "\u662f", "lines": ["      console.info('onShow finish')\n      ", " }\n\n    async function buildAllDataType2()", "ction () {\n        console.info(TAG + 'aft", ".info('TestApplication onDestroy');\n    }\n", "fo('TestApplication onCreate');\n    },\n   ", "   beforeEach(function () {\n        consol", "ction () {\n        console.info(TAG + 'bef", " }\n\n    async function buildAllDataType3()", "aType2() {\n        console.log(TAG + \"buil", "deccjsunit/index'\n\nconst injectRef = Objec", ",\n                \"longValue\": 92233720368", "01', 0, async function (done) {\n        co", "  configService.setConfig(this)\n\n        r", ",\n                \"longValue\": -9223372036", " }\n\n    async function buildAllDataType1()", "      }\n    }\n\n    console.log(TAG + \"****", "dicatesTest', function () {\n    beforeAll(", "2, 3])\n            const valueBucket = {\n ", "rder` INTEGER);\";\n\nconst STORE_CONFIG = {\n", "Create() {\n        console.info('TestAppli", "Instance()\n        const expectExtend = ne", "world');\n    },\n    onShow() {\n        con", "xecute()\n    },\n    onReady() {\n    },\n}", "xport default {\n    onCreate() {\n        c", "estroy() {\n        console.info('TestAppli", "aType3() {\n        console.log(TAG + \"buil", "    afterEach(function () {\n        consol", "alue INTEGER , primLongValue INTEGER , \"\n+", ",\n                \"longValue\": 1,\n        ", ".info('TestApplication onCreate');\n    },\n", "ata.dataAbility';\n\nconst TAG = '[RDB_JSKIT", "reate');\n    },\n    onDestroy() {\n        ", "gerValue INTEGER , longValue INTEGER , sho", ";\n    })\n\n    function resultSize(resultSe", "getDefaultService('config')\n        config", "foreAll(async function () {\n        consol", "('config')\n        configService.setConfig", "fo('TestApplication onDestroy');\n    }\n};\n", "itle: ''\n    },\n    onInit() {\n        thi", "onShow() {\n        console.info('onShow fi", "ore.init()\n        const configService = c", "RDB_JSKITS _TEST]'\nconst CREATE_TABLE_ALL_", "fterAll(async function () {\n        consol", "aType1() {\n        console.log(TAG + \"buil", "it()\n        const configService = core.ge", "w finish')\n        const core = Core.getIn"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "KVManager", "api_method_name": "off", "api_method_all": "off(event: 'distributedDataServiceDie', deathCallback?: Callback<void>): void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 78, "since": 8, "api_used": "\u662f", "lines": ["            kvStore.off('syncComplete');\n  ", "            kvStore.off('syncComplete', fun", ";\n        kvManager.off('distributedDataSer", "@tc.desc predicates offset normal test\n    ", "   })\n\n    \n    it('off_0031', 0, async fun", "IJKLMN\").limitAs(3).offsetAs(1);\n        le", "            kvStore.off('dataChange');\n    ", "/**\n     * @tc.name off interface test\n    ", "IJKLMN\").limitAs(3).offsetAs(5);\n        le", "            kvStore.off('dataChange', func1", "IJKLMN\").limitAs(3).offsetAs(-1);\n        l", "@tc.name predicates offset normal test\n    ", "console.log(TAG + \":off_0030 start\");\n     ", "            kvStore.off('dataChange', func)", "console.log(TAG + \":off_0030 end\");\n    })\n", "ver);\n        mPref.off('change', observer)", "   })\n\n    \n    it('off_0030', 0, async fun", "\n            helper.off(\n                \"d", " console.log(TAG + \"off dataChange success\"", "IJKLMN\").limitAs(3).offsetAs(0);\n        le", "console.log(TAG + \":off_0031 end\");\n    })\n", "console.log(TAG + \":off_0031 start\");\n     ", "160\n     * @tc.desc off interface test\n    ", ");\n        rdbStore.off(\"dataChange\", (devi"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "StorageSyncJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "ObjectStoreJsunit.test.js", "KvManagerPromiseJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}]}