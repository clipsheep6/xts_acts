{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\alert_dialog", "api": [{"api_class_name": "DialogAlignment", "api_method_all": "declare enum DialogAlignment {\n  \n  Top,\n\n  \n  Center,\n\n  \n  Bottom,\n\n  \n  Default,\n\n  \n  TopStart,\n\n  \n  TopEnd,\n\n  \n  CenterStart,\n\n  \n  CenterEnd,\n\n  \n  BottomStart,\n\n  \n  BottomEnd,\n}", "api_method_name": "DialogAlignment", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 13, "since": 7, "api_used": "\u662f", "lines": [": DialogAlignment = DialogAlignment.Default\n  @State on", "        alignment: 'DialogAlignment.Default',\n         ", "        alignment: 'DialogAlignment.Center',\n          ", "        alignment: 'DialogAlignment.Bottom',\n          ", "set,\n    alignment: DialogAlignment.Center,\n    customS", "  @State alignment: DialogAlignment = DialogAlignment.D", "        alignment: 'DialogAlignment.Top',\n             ", "        alignment: 'DialogAlignment.CenterStart',\n     ", "        alignment: 'DialogAlignment.CenterEnd',\n       ", "        alignment: 'DialogAlignment.TopEnd',\n          ", "        alignment: 'DialogAlignment.BottomStart',\n     ", "        alignment: 'DialogAlignment.TopStart',\n        ", "        alignment: 'DialogAlignment.BottomEnd',\n       "], "files": ["customDialogController.ets", "CustomDialog.ets", "AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialogAlignment", "api_method_name": "Top", "api_method_all": "Top,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 174, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.TopStart)\n          .zI", "nContent: Alignment.TopStart }) {\n      Scr", "acement = Placement.TopLeft\n  @State placem", "adientDirection.LeftTop\n\n  build() {\n    Co", "acement = Placement.TopRight\n  @State place", "   Text('alignItems(Top)').fontSize(9).font", "sertEqual(Placement.TopLeft);\n      }\n     ", "         placementOnTop: this.placementOnTo", "nContent: Alignment.TopStart }) {\n      Col", "nContent: Alignment.TopStart }) {\n         ", "sertEqual(Placement.TopRight);\n      }\n    ", "('GradientDirection.Top');\n      expect(obj", "ac).align(Alignment.Top)\n      }\n      .wid", "te edge: Edge= Edge.Top\n  private content: ", "ertEqual(\"Alignment.TopStart\");\n      conso", "b3).align(Alignment.TopStart)\n        Text(", "op: this.placementOnTop,\n          onStateC", "ent.data.placementOnTop).assertEqual(false)", "nContent: Alignment.TopStart }) {\n        T", " BadgePosition.RightTop,\n            maxCou", "ignment = Alignment.TopStart;\n  @State dire", "  @State placementOnTop: boolean = false\n\n ", "ertEqual(\"Alignment.TopStart\");\n      expec", "        \"placementOnTop\": this.placementOnT", "adientDirection.LeftTop');\n      console.in", "ac).align(Alignment.Top)\n      }.width('100", "p\": this.placementOnTop,\n              }\n  ", "ler.scrollEdge(Edge.Top)\n        })\n       ", "\"align\": \"Alignment.TopStart\",\n            ", "   .align(Alignment.TopStart)\n          .he", ": GradientDirection.Top,\n        colors: [[", "b3).align(Alignment.Top)\n        Text('Seco", "\"BadgePosition.RightTop\").fontSize(16)\n    ", "s.context.fillText('Top', 60, height + 10);", "Items(VerticalAlign.Top).height('15%').bord", "ler.scrollEdge(Edge.Top)\n            })\n   ", "nContent: Alignment.Top }) {\n        Text('"], "files": ["row.ets", "direction2.ets", "placement.ets", "BadgeJsunit.test.ets", "canvas.ets", "Text.ets", "Row.ets", "Stack.ets", "TextJsunit.test.ets", "popupProps.test.js", "scrollCode.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "Scroll.ets", "AlertDialog.ets", "list.ets", "positionSetting.ets", "List.ets", "RowJsunit.test.ets", "PlacementJsunit.test.ets", "index.js", "gradientDirection.ets", "OverlayJsunit.test.ets", "edgeEffect.ets", "badgeProps.test.js", "StackJsunit.test.ets", "bindPopup.ets", "Badge.ets", "BindPopupJsunit.test.ets", "buttonProps.test.js", "ColorGradientJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialogAlignment", "api_method_name": "Center", "api_method_all": "Center,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1686, "since": 7, "api_used": "\u662f", "lines": ["textAlign(TextAlign.Center)\n          .fontSiz", ") {\n          Text('Center').fontSize(25)\n    ", "yContent: FlexAlign.Center\n    }) {\n      Text", "exAlign = FlexAlign.Center\n  build() {\n    Fle", "textAlign(TextAlign.Center)\n        .width('90", "ignItems: ItemAlign.Center, justifyContent: Fl", "ignItems: ItemAlign.Center,\n      justifyConte", "al('HorizontalAlign.Center');\n      console.in", "textAlign(TextAlign.Center)\n          .layoutW", "textAlign(TextAlign.Center)\n          Text('3'", "ms\":HorizontalAlign.Center\n          }\n       ", "textAlign(TextAlign.Center)\n        Text('alig", "textAlign(TextAlign.Center)\n        Text('no a", "textAlign(TextAlign.Center).fontSize(16)\n    }", "ems(HorizontalAlign.Center).width('90%').borde", "textAlign(TextAlign.Center)\n        Text('flex", "textAlign(TextAlign.Center)\n                .b", "yContent: FlexAlign.Center\n    }) {\n      Canv", "textAlign(TextAlign.Center).borderRadius(10).b", "textAlign(TextAlign.Center)\n          Text('2'", "textAlign(TextAlign.Center)\n        }\n      }.", "textAlign(TextAlign.Center)\n              .bac", "Items(VerticalAlign.Center).width('90%').heigh", "textAlign(TextAlign.Center)\n        Text('no f", "yContent: FlexAlign.Center }) {\n      Marquee(", "\"align\": \"Alignment.Center\"\n          }\n      ", "textAlign(TextAlign.Center)\n          Text('4'", "ignSelf = ItemAlign.Center;\n          break;\n ", "textAlign(TextAlign.Center)\n            .fontS", "textAlign(TextAlign.Center)\n      }\n      .key", "ignItems: ItemAlign.Center }) {\n        Text('", "ignItems: ItemAlign.Center }) {\n      Text('da", "ertEqual(\"Alignment.Center\");\n      console.in", "   .align(Alignment.Center)\n    .key('stepper'", "yContent: FlexAlign.Center }) {\n      Ellipse(", "textAlign(TextAlign.Center).fontSize(16)\n     ", "reak;\n        case 'Center':\n          this.al", "textAlign(TextAlign.Center)\n      }.width('90%"], "files": ["systemRouterA.ets", "longPressGesture.ets", "playMode.ets", "enumsHorizontalAlign.ets", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "Progress.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Swiper.ets", "OverlayJsunit.test.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "transition.ets", "gridSettings.ets", "Image.ets", "Column.ets", "scrollCode.ets", "touch.ets", "EnmusFlexAlignJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "toggle.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "GridContainerJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "TextArea.ets", "tapGesture.ets", "FlexJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "stepper.ets", "row.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "textPickerDialog.ets", "gridPage.ets", "badge.ets", "textStyle.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "EnmusVerticalAlignJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "direction.ets", "backgroundAndSizeSetting.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "bindContextMenu.ets", "divider.ets", "ScrollBar.ets", "ellipse.ets", "radio.ets", "rating.ets", "enumsFlexAlign.ets", "DataPanel.ets", "Grid.ets", "AlertDialog.ets", "RowJsunit.test.ets", "index.js", "ColumnJsunit.test.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "Toggle.ets", "NavigationJsunit.test.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "Badge.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialogAlignment", "api_method_name": "Bottom", "api_method_all": "Bottom,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 119, "since": 7, "api_used": "\u662f", "lines": ["   .align(Alignment.Bottom)\n        .width('10", "adientDirection.LeftBottom\n          }\n       ", "dientDirection.RightBottom\n          }\n       ", "t: 'DialogAlignment.BottomEnd',\n            co", "ertEqual('Alignment.Bottom')\n      console.inf", "      this.placementBottom = this.$element(\"pl", "dientDirection.RightBottom');\n      console.in", "ertEqual(\"Alignment.BottomEnd\")\n      expect(o", "ertEqual('Alignment.BottomEnd')\n      console.", "nContent: Alignment.BottomEnd }) {\n        Tex", "ertEqual(\"Alignment.BottomStart\")\n      consol", " { align: Alignment.Bottom, offset: { x: 0, y:", "ignment = Alignment.Bottom\n\n  onPageShow() {\n ", ".$element(\"placementBottom\").getInspector()\n  ", "   Text('alignItems(Bottom)').fontSize(9).font", "   .align(Alignment.BottomStart)\n        .widt", "acement = Placement.BottomRight\n\n  @Builder po", "s.align = Alignment.BottomEnd;\n      } else if", "t: 'DialogAlignment.Bottom',\n            prima", "tom : this.placementBottom, placementNone : th", "Items(VerticalAlign.Bottom).justifyContent(Fle", "ertEqual(\"Alignment.Bottom\")\n      expect(obj.", "sertEqual(Placement.BottomRight);\n      }\n    ", "sertEqual(Placement.BottomLeft);\n      }\n     ", "ertEqual('Alignment.BottomStart')\n      consol", "this.currentTest = 'BottomStart'\n             ", "s.context.fillText('Bottom', 150, height - 10)", "lacement: Placement.Bottom,\n          maskColo", "adientDirection.LeftBottom');\n      console.in", "xtAlign\": Alignment.BottomEnd\n          }\n    ", "t: 'DialogAlignment.BottomStart',\n            ", "ertEqual(\"Alignment.Bottom\");\n      expect(obj", "nContent: Alignment.BottomStart }) {\n        T", "00 }\n  @State marginBottom: string = \"10px\"\n  ", "bottom: this.paddingBottom, top: this.paddingT", "l,\n        placementBottom : null,\n        pla", "acement = Placement.BottomLeft\n  @State placem", "           placementBottom : this.placementBot", ");\n    },\n\n    reachBottom(){\n        prompt.s", "px\"\n  @State paddingBottom: string= \"5\"\n  @Sta", "   .align(Alignment.BottomEnd)\n        .width(", "ignment = Alignment.Bottom\n  private content: ", " bottom: this.marginBottom, top: this.marginTo"], "files": ["placement.ets", "canvas.ets", "Text.ets", "imageFit.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "GradientDirectionJsunit.test.ets", "PositionSettingJsunit.test.ets", "touchAble.ets", "AlertDialog.ets", "positionSetting.ets", "index.js", "PlacementJsunit.test.ets", "OverlayJsunit.test.ets", "StackJsunit.test.ets", "bindPopup.ets", "row.ets", "overlay.ets", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DialogAlignment", "api_method_name": "Default", "api_method_all": "Default,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": [" : this.enterkeytypeDefault, enterkeytypeNext :", "estInputEnterkeytypeDefault START');\n        co", "t: 'DialogAlignment.Default',\n            prima", "tEqual('enterkeytypeDefault')\n        expect(ob", "   testlistshapemodeDefault\n      * @tc.desc   ", "nt(\"typeGridtemplateDefault\").getInspector()\n\n ", "sertEqual('shapemodeDefault')\n        expect(ob", "    typeGridtemplateDefault : null,\n    },\n\n   ", ",\n         shapemodeDefault:null,\n         shap", "           shapemodeDefault:this.shapemodeDefau", "o('testlistshapemodeDefault START');\n        co", "his.typeGridtemplateDefault = this.$element(\"ty", "        enterkeytypeDefault : null,\n        ent", "t = DialogAlignment.Default\n  @State onClickVal", "his.typeGridtemplateDefault,\n        }\n    },\n\n", "inerGridtemplatePropDefault', 0, async function", "estInputEnterkeytypeDefault\n     * @tc.desc    ", "estInputEnterkeytypeDefault', 0, async function", "      this.shapemodeDefault = this.$element(\"sh", "s.value.enterkeytypeDefault);\n        console.i", "lue.typeGridtemplateDefault);\n        console.i", "fault:this.shapemodeDefault, shapemodeRect:this", "igService = core.getDefaultService('config')\n  ", "igService = core.getDefaultService('config');\n ", "lement(\"enterkeytypeDefault\").getInspector()\n  ", "al('typeGridtemplateDefault')\n        expect(ob", "    typeGridtemplateDefault : this.typeGridtemp", "This.value.shapemodeDefault);\n        console.i", "        enterkeytypeDefault : this.enterkeytype", "t('testlistshapemodeDefault', 0, async function", ".$element(\"shapemodeDefault\").getInspector()\n  ", "   this.enterkeytypeDefault = this.$element(\"en"], "files": ["AlertDialog.ets", "listProps.test.js", "inputProps.test.js", "index.js", "customDialogController.ets", "gridContainerProps.test.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialogAlignment", "api_method_name": "TopStart", "api_method_all": "TopStart,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["   .align(Alignment.TopStart)\n          .height(", "   .align(Alignment.TopStart)\n          .zIndex(", "nContent: Alignment.TopStart }) {\n          Row(", "   .align(Alignment.TopStart)\n        .alignSelf", "\"align\": \"Alignment.TopStart\",\n            \"x\": ", "ertEqual(\"Alignment.TopStart\");\n      console.in", "ertEqual(\"Alignment.TopStart\");\n      expect(obj", "ertEqual('Alignment.TopStart')\n      console.inf", "t: 'DialogAlignment.TopStart',\n            prima", "ignment = Alignment.TopStart;\n  @State direction", "nContent: Alignment.TopStart }) {\n      Scroll(t", "nContent: Alignment.TopStart }) {\n        Text('", "nContent: Alignment.TopStart }) {\n      Column()", "ertEqual(\"Alignment.TopStart\")\n      expect(obj.", "b3).align(Alignment.TopStart)\n        Text('thir"], "files": ["Stack.ets", "StackJsunit.test.ets", "AlertDialog.ets", "TextJsunit.test.ets", "list.ets", "direction2.ets", "positionSetting.ets", "List.ets", "zIndex.ets", "scrollCode.ets", "OverlayJsunit.test.ets", "Text.ets", "edgeEffect.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialogAlignment", "api_method_name": "TopEnd", "api_method_all": "TopEnd,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["nContent: Alignment.TopEnd }) {\n        Text('", "ertEqual('Alignment.TopEnd')\n      console.inf", "   .align(Alignment.TopEnd)\n        .direction", "ertEqual(\"Alignment.TopEnd\")\n      expect(obj.", "t: 'DialogAlignment.TopEnd',\n            prima"], "files": ["StackJsunit.test.ets", "AlertDialog.ets", "Stack.ets", "TextJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialogAlignment", "api_method_name": "CenterStart", "api_method_all": "CenterStart,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["t: 'DialogAlignment.CenterStart',\n            prima"], "files": ["AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialogAlignment", "api_method_name": "CenterEnd", "api_method_all": "CenterEnd,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["t: 'DialogAlignment.CenterEnd',\n            prima"], "files": ["AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialogAlignment", "api_method_name": "BottomStart", "api_method_all": "BottomStart,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["this.currentTest = 'BottomStart'\n              }\n  ", "   .align(Alignment.BottomStart)\n        .width('10", "ertEqual(\"Alignment.BottomStart\")\n      console.inf", "ertEqual('Alignment.BottomStart')\n      console.inf", "t: 'DialogAlignment.BottomStart',\n            prima", "nContent: Alignment.BottomStart }) {\n        Text('"], "files": ["StackJsunit.test.ets", "AlertDialog.ets", "Stack.ets", "TextJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DialogAlignment", "api_method_name": "BottomEnd", "api_method_all": "BottomEnd,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["   .align(Alignment.BottomEnd)\n        .width('10", "ertEqual(\"Alignment.BottomEnd\")\n      expect(obj.", "nContent: Alignment.BottomEnd }) {\n        Text('", "xtAlign\": Alignment.BottomEnd\n          }\n       ", "ertEqual('Alignment.BottomEnd')\n      console.inf", "s.align = Alignment.BottomEnd;\n      } else if (e", "t: 'DialogAlignment.BottomEnd',\n            confi"], "files": ["StackJsunit.test.ets", "Stack.ets", "AlertDialog.ets", "TextJsunit.test.ets", "positionSetting.ets", "PositionSettingJsunit.test.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParam", "api_method_all": "declare interface AlertDialogParam {\n  \n  title?: ResourceStr;\n\n  \n  message: ResourceStr;\n\n  \n  autoCancel?: boolean;\n\n  \n  cancel?: () => void;\n\n  \n  alignment?: DialogAlignment;\n\n  \n  offset?: Offset;\n\n  \n  gridCount?: number;\n}", "api_method_name": "AlertDialogParam", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParam", "api_method_name": "cancel", "api_method_all": "cancel?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 170, "since": 7, "api_used": "\u662f", "lines": ["()\n            this.cancel()\n          }).back", "     },\n            cancel: function() {\n     ", "is.onAccept }),\n    cancel: this.existApp,\n   ", ") {\n        Button('cancel')\n          .onClic", "        animation.oncancel = function(){\n     ", "          animation.cancel()\n        }, 1500)\n", "{\n          Button('cancel').borderRadius(8).b", "mDialogController\n  cancel: () => void\n  confi", "       },\n          cancel: function() {\n     ", "g('sequence gesture canceled')\n      })\n    )\n", "     },\n            cancel: () => {\n          ", "onsole.info('dialog cancel callback');\n       ", "            value: 'cancel',\n                 ", "this.currentTest = 'cancel'\n            }\n    ", ": 'The animation is canceled.'\n            });", "console.log('dialog cancel callback');\n       ", " },\n                cancel: () => {\n          ", "stomDialogExample({ cancel: this.onCancel, con", "     this.animation.cancel();\n          });\n  ", "ture current action cancel\");\n      })\n    )\n "], "files": ["index.js", "ohosPrompt.ets", "AlertDialog.ets", "WebPage.ets", "systemPrompt.ets", "longPressGesture.ets", "animatorOption.ets", "gestureMode.ets", "basicabilityapi.test.js", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParam", "api_method_name": "title", "api_method_all": "title?: ResourceStr", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 81, "since": 7, "api_used": "\u662f", "lines": ["       console.log('titleMode')\n      })\n    ", "ialog({\n            title: 'Title Info',\n    ", "\n      console.log(\"title\")\n    })\n  }\n\n  @Bu", "ull) {\n        this.title = eventData.data.ti", " \"<div class=\\\"item-title\\\"><h1>\u6587\u672c\u6d4b\u8bd5(h1\u6d4b\u8bd5)</h", "ull) {\n        this.titleMode = eventData.dat", "nMenu({\n            title: 'Title Info',\n    ", "lder IngredientItem(title:string, name: strin", "       console.log('titleMode:' + titleModel)", "itle: string = 'old title'\n  @State x: number", "  {\n                title: 'title',\n         ", " if (eventData.data.title != null) {\n        ", "            title: 'title',\n                m", "le = eventData.data.title\n      }\n      if (e", "(obj.$attrs.overlay.title).assertEqual(\"new t", "an = false\n  @State titleMode: NavigationTitl", "yExample {\n  @State title: string = 'old titl", "de = eventData.data.titleMode;\n      }\n      ", "      \"title\": \"new title\"\n          }\n      ", "umn() {\n      Text('title')\n        .width(80", "      .subTitle('subtitle')\n      .menus(this", ".onTitleModeChange((titleModel: NavigationTit", "ationMenus1)\n      .titleMode(NavigationTitle", "ata: {\n            \"title\": \"new title\"\n     ", "e).assertEqual(\"old title\");\n      expect(obj", "0 })\n      }\n      .title(this.NavigationTitl", "wDialog({\n          title: 'Title Info',\n    ", "eight('50%')\n      .title('title')\n      .sub", "e).assertEqual(\"new title\");\n      console.in", "enu({\n              title: 'Title Info',\n    ", "gationMenus)\n      .titleMode(NavigationTitle", "      .overlay(this.title,\n              { al", ".show({\n            title: 'Title',\n         ", "onTitleModeChanged((titleModel: NavigationTit", "ogressChange: \" + e.title);\n        })\n      ", "Flex() {\n      Text(title)\n        .fontSize(", "50%')\n      .title('title')\n      .subTitle('", "(obj.$attrs.overlay.title).assertEqual(\"old t"], "files": ["Navigation.ets", "ohosPrompt.ets", "AlertDialog.ets", "WebPage.ets", "systemPrompt.ets", "NavigationJsunit.test.ets", "fontWeight.ets", "index.js", "basicabilityapi.test.js", "menuProps.test.js", "navigation.ets", "overlay.ets", "OverlayJsunit.test.ets", "RichText.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParam", "api_method_name": "message", "api_method_all": "message: ResourceStr", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 3690, "since": 7, "api_used": "\u662f", "lines": [" JSON.stringify(err.message))\n            }\n   ", " prompt.showToast({ message: 'The text is shown", " JSON.stringify(err.message))\n          }\n     ", "data error: \" + err.message);\n      }\n      don", "data error: \" + err.message);\n      }\n      awa", " JSON.stringify(err.message))\n        }\n      }", " prompt.showToast({ message: 'The text is hidde"], "files": ["ohosPrompt.ets", "configuration.ets", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "PathJsunit.test.ets", "ZIndexJsunit.test.ets", "sourceType.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "TextStyleJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "TextClockJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "ResponseRegion.ets", "basicabilityapi.test.js", "CalendarJsunit.test.ets", "transition.ets", "systemPrompt.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "VideoJsunit.test.ets", "touch.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "customDialogController.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "SearchJsunit.test.ets", "VisibilityJsunit.test.ets", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "QrCodeJsunit.test.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "PanGesture.ets", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "ColorGradientJsunit.test.ets", "ShapeJsunit.test.ets", "PieceCode.ets", "badge.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "textClock.ets", "tabs.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "BorderJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "ohosMatrix4.ets", "CircleJsunit.test.ets", "FocusJsunit.test.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "TransFormJsunit.test.ets", "priorityGesture.ets", "touchAble.ets", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "datePicker.ets", "pageTransition.ets", "AlertDialog.ets", "WebPage.ets", "TabsJsunit.test.ets", "ShapeClippingJsunit.test.ets", "GridSettingsJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "areaChange.ets", "parallelGesture.ets", "timeStamp.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "sharedTransition.ets", "motionPath.ets", "Badge.ets", "BindPopupJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParam", "api_method_name": "autoCancel", "api_method_all": "autoCancel?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["alogUser {\n  @State autoCancel: boolean = true\n  @", "ssage',\n            autoCancel: true,\n            ", " this.existApp,\n    autoCancel: true,\n    offset: "], "files": ["customDialogController.ets", "CustomDialog.ets", "AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParam", "api_method_name": "alignment", "api_method_all": "alignment?: DialogAlignment", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 15, "since": 7, "api_used": "\u662f", "lines": ["mber = -15\n  @State alignment: Alignment = Alignm", "ssage',\n            alignment: 'DialogAlignment.B", "ssage',\n            alignment: 'DialogAlignment.D", "an = false\n  @State alignment: DialogAlignment = ", "ssage',\n            alignment: 'DialogAlignment.C", "ssage',\n            alignment: 'DialogAlignment.T", "ull) {\n        this.alignment = eventData.data.al", "      { align: this.alignment, offset: { x: this.", "t: '1',\n            alignment: 'DialogAlignment.B", "offset: Offset,\n    alignment: DialogAlignment.Ce", "0CB',\n              alignment: 'DialogAlignment.T"], "files": ["customDialogController.ets", "overlay.ets", "CustomDialog.ets", "AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParam", "api_method_name": "offset", "api_method_all": "offset?: Offset", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 372, "since": 7, "api_used": "\u662f", "lines": ["     xs: { span: 2, offset: 6 },\n             ", " color: Color.Gray, offsetX: 5, offsetY: 5 }\n ", "ffsetX: 0x80000000, offsetY: 0x80000000 };\n   ", "rror',\n            \"offset\": 'error'\n         ", "n\": 1,\n            \"offset\": 2\n          }\n   ", "00000,\n            \"offset\": 0x80000000\n      ", "ttrs.useSizeType.sm.offset).assertEqual(0x7FFF", "     xs: { span: 1, offset: 0 }, sm: { span: t", "     lg: { span: 2, offset: 2 }\n            })", "bjNew.$attrs.shadow.offsetY).assertEqual(\"10.0", "     sm: { span: 6, offset: 2 },\n             ", "ttrs.useSizeType.sm.offset).assertEqual(-21474", "     xs: { span: 2, offset: 10 },\n            ", "     xs: { span: 6, offset: 0 },\n             ", "     md: { span: 2, offset: 2 },\n             ", "ttrs.useSizeType.sm.offset).assertEqual(2);\n  ", " color: 0x80000000, offsetX: 0x80000000, offse", "     sm: { span: 2, offset: 8 },\n             ", "     md: { span: 6, offset: 4 },\n             ", "et = eventData.data.offset;\n      } else if (e", " span: this.smSpan, offset: this.smOffset },\n ", "     lg: { span: 2, offset: 4 }\n            })", "FFFFF,\n            \"offset\": 0x7FFFFFFF\n      ", "r.Gray, offsetX: 5, offsetY: 5 }\n  @State gray", "ttrs.useSizeType.sm.offset).assertEqual(1);\n  ", "ttrs.useSizeType.sm.offset).assertEqual(0);\n  ", "bjNew.$attrs.shadow.offsetY).assertEqual(\"2147", ".Gray, offsetX: 10, offsetY: 10\n      };\n     ", "ffsetX: 0x7FFFFFFF, offsetY: 0x7FFFFFFF };\n   ", "     xs: { span: 2, offset: 8 },\n             ", "     md: { span: 2, offset: 10 },\n            ", "     sm: { span: 2, offset: 0 },\n             ", "gCallBack);\n    let offsetChangeEvent = {\n    ", "gn: this.alignment, offset: { x: this.x, y: th", "     md: { span: 5, offset: 1 }, lg: { span: 7", " color: Color.Gray, offsetX: 10, offsetY: 10\n ", "bjNew.$attrs.shadow.offsetX).assertEqual(\"10.0", " color: 0x7FFFFFFF, offsetX: 0x7FFFFFFF, offse", "t(obj.$attrs.shadow.offsetY).assertEqual(\"5.00", "     lg: { span: 6, offset: 6 }\n            })", "bjNew.$attrs.shadow.offsetX).assertEqual(\"2147", "     md: { span: 2, offset: 0 },\n             ", "1 }, lg: { span: 7, offset: 2 }\n        })\n   ", "  events_emitter.on(offsetChangeEvent, this.st", "     sm: { span: 2, offset: 10 },\n            ", ": Alignment.Bottom, offset: { x: 0, y: 20 } })", "     lg: { span: 2, offset: 0 }\n            })", "t(obj.$attrs.shadow.offsetX).assertEqual(\"5.00"], "files": ["Shape.ets", "panDirection.ets", "pathProps.test.js", "ImageEffectsJsunit.test.ets", "gridContainer.ets", "circleProps.test.js", "Text.ets", "lineProps.test.js", "imageFit.ets", "imageEffects.ets", "TextJsunit.test.ets", "popupProps.test.js", "Constants.ets", "polylineProps.test.js", "refreshProps.test.js", "PositionSettingJsunit.test.ets", "Scroll.ets", "customDialogController.ets", "CustomDialog.ets", "ellipseProps.test.js", "touchAble.ets", "polygonProps.test.js", "positionSetting.ets", "GridContainer.ets", "enumsLineCapStyle.ets", "GridSettingsJsunit.test.ets", "index.js", "OverlayJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "listProps.test.js", "gridSettings.ets", "gridColProps.test.js", "textPathProps.test.js", "gestureMode.ets", "refresh.ets", "motionPath.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParam", "api_method_name": "gridCount", "api_method_all": "gridCount?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["ssage',\n            gridCount: '1',\n            a", "omStyle: false,\n    gridCount: 5\n  })\n\n  onCancel"], "files": ["CustomDialog.ets", "AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithConfirm", "api_method_all": "declare interface AlertDialogParamWithConfirm extends AlertDialogParam {\n  \n  confirm?: {\n    \n    value: ResourceStr;\n\n    \n    fontColor?: ResourceColor;\n\n    \n    backgroundColor?: ResourceColor;\n\n    \n    action: () => void;\n  };\n}", "api_method_name": "AlertDialogParamWithConfirm", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithConfirm", "api_method_name": "action", "api_method_all": "action: () => void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 398, "since": 7, "api_used": "\u662f", "lines": ["info(\"click to emit action state\")\n           ", "start start to emit action state\")\n           ", "le.info(\"apple emit action state err: \" + JSON", "info(\"onChange emit action state err: \" + JSON", "info(\"Onfinish emit action state err: \" + JSON", ".info(\"Onstart emit action state err: \" + JSON", "nfo(\"touchFlag emit action state err: \" + JSON", "fo('button1 current action state is: ' + this.", "\"disAppearFlag emit action state err: \" + JSON", "hange start to emit action state\")\n          e", " console.info(\"emit action state err: \" + JSON", "inish start to emit action state\")\n           ", "fo(\"appearFlag emit action state err: \" + JSON", "utton start to emit action state\")\n           ", "fo('Onstart current action state is: ' + this.", ".info(\"button2 emit action state err: \" + JSON", ".info(\"button1 emit action state err: \" + JSON", "o('Onbounce current action state is: ' + this.", "hange start to emit action state\")\n           ", "'appearFlag current action state is: ' + this.", "o(\"onDragEnter emit action state err: \" + JSON", "info(\"start to emit action state\")\n           ", "Able] start to emit action state\")\n           ", "o('onChange current action state is: ' + this.", "console.info(\"click action state err: \" + JSON", "nAreaChange current action state is: ' + this.", "hFlag start to emit action state\")\n           ", "apple start to emit action state\")\n           ", "fo('button2 current action state is: ' + this.", "o('Onfinish current action state is: ' + this.", "Enter start to emit action state\")\n          e", "ounce start to emit action state\")\n           ", "rFlag start to emit action state\")\n           ", "tton1 start to emit action state\")\n           ", "Click start to emit action state\")\n           ", "o(\"[TouchAble] emit action state err: \" + JSON", "(\"onAreaChange emit action state err: \" + JSON", "sAppearFlag current action state is: ' + this.", "tton2 start to emit action state\")\n           ", ".info(\"onClick emit action state err: \" + JSON", "e.info(\"button emit action state err: \" + JSON", "gMove start to emit action state\")\n          e", "info(\"Onbounce emit action state err: \" + JSON"], "files": ["animate.ets", "ohosPrompt.ets", "touch.ets", "configuration.ets", "longPressGesture.ets", "mouseEvent.ets", "placement.ets", "playMode.ets", "PieceCode.ets", "ohosMatrix4.ets", "bindMenu.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "sourceType.ets", "fillMode.ets", "navigation.ets", "customDialogController.ets", "priorityGesture.ets", "touchAble.ets", "pageTransition.ets", "textClock.ets", "geometryTransition.ets", "tabs.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "marquee.ets", "tapGesture.ets", "index.js", "areaChange.ets", "ResponseRegion.ets", "dragEvent.ets", "PanGesture.ets", "parallelGesture.ets", "timeStamp.ets", "transition.ets", "aboutToDisappear.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets", "bindPopup.ets", "scrollCode.ets", "button.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithConfirm", "api_method_name": "value", "api_method_all": "value: ResourceStr", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithConfirm", "api_method_name": "fontColor", "api_method_all": "fontColor?: ResourceColor", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 384, "since": 7, "api_used": "\u662f", "lines": ["Size(35)\n          .fontColor(Color.Blue)\n       ", " {\n                \"fontColor\": this.fontColor,\n ", "ize(9).width('90%').fontColor(0xCCCCCC)\n        R", "hrink').fontSize(9).fontColor(0xCCCCCC).width('90", "extStyle {\n  @State fontColor: Color = Color.Red;", "grid').fontSize(20).fontColor(Color.Black).width(", "pect(eventData.data.fontColor).assertEqual(Color.", "\"[testTextStyle001] fontColor: \" + obj.$attrs.fon", "Blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ness').fontSize(15).fontColor(0xCCCCCC).width('90", "rast').fontSize(15).fontColor(0xCCCCCC).width('90", "ty 4').fontSize(20).fontColor(Color.Black).width(", "s rolling\"\n  @State fontColor: Color = Color.Blue", "blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ive text')\n        .fontColor(Color.Red)\n        ", "lor) {\n        this.fontColor = eventData.data.fo", "vert').fontSize(15).fontColor(0xCCCCCC).width('90", "'marquee')\n        .fontColor(this.fontColor)\n   ", "      .fontSize(12).fontColor(0xCCCCCC).maxLines(", "adow').fontSize(15).fontColor(0xCCCCCC).width('90", "tate').fontSize(15).fontColor(0xCCCCCC).width('90", "    .fontColor(this.fontColor)\n        .colorBlen", "  \"fontColor\": this.fontColor,\n              }\n  ", "xGrow\").fontSize(9).fontColor(0xCCCCCC).width('90", " row').fontSize(20).fontColor(Color.Black).width(", "  expect(obj.$attrs.fontColor).assertEqual('#FFFF", "e(20)\n        .key('fontColor')\n\n      Text(`text", "Items').fontSize(9).fontColor(0xCCCCCC).width('90", "or = eventData.data.fontColor;\n      } else if (e", "pro text')\n        .fontColor(Color.Orange)\n     ", "cale').fontSize(15).fontColor(0xCCCCCC).width('90", "ntColor}`)\n        .fontColor(this.fontColor)\n   ", "lor: \" + obj.$attrs.fontColor);\n      expect(obj.", "\"[testTextStyle002] fontColor: \" + obj.$attrs.fon", "ageShow() {\n    let fontColorChangeEvent = {\n    ", "    .fontColor(this.fontColor)\n        .fontSize(", " getInspectorByKey('fontColor');\n      console.in", "  events_emitter.on(fontColorChangeEvent, this.te", "rate').fontSize(15).fontColor(0xCCCCCC).width('90", "Basis').fontSize(9).fontColor(0xCCCCCC).width('90", " state is: ' + this.fontColor);\n          try {\n ", "ata: {\n            \"fontColor\": Color.Blue\n      ", "t font color ${this.fontColor}`)\n        .fontCol", "nSelf\").fontSize(9).fontColor(0xCCCCCC).width('90", " if (eventData.data.fontColor) {\n        this.fon"], "files": ["enumsHorizontalAlign.ets", "imageFit.ets", "Span.ets", "column.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "textArea.ets", "textInput.ets", "transForm.ets", "path.ets", "Column.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "PatternLock.ets", "Stepper.ets", "enumsImage.ets", "PieceCode.ets", "textStyle.ets", "imageEffects.ets", "textClock.ets", "layoutConstraints.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "Path.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "TextTimerJsunit.test.ets", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "ColumnSplit.ets", "colorGradient.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithConfirm", "api_method_name": "backgroundColor", "api_method_all": "backgroundColor?: ResourceColor", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 627, "since": 7, "api_used": "\u662f", "lines": ["', height: '60%' }).backgroundColor(0xbbb2cb)\n         ", "  if(eventData.data.backgroundColor != null) {\n        ", "ter)\n              .backgroundColor(0xbbb2cb)\n         ", "', height: '80%' }).backgroundColor(0xd2cab3).align(Ali", "_BACKGROUNDCOLOR = 'backgroundColor'\nconst ATTRS_ALIGNS", "00%').height('40%').backgroundColor('#00ffff')\n        ", "ight(70)\n          .backgroundColor(0xF5DEB3)\n         ", "ht(50)\n            .backgroundColor(0x4582B4)\n         ", "h('50%').height(30).backgroundColor(0x00FFFF)\n      }\n ", "ht(120).padding(10).backgroundColor(0xAFEEEE)\n\n      Te", "n('Touch')\n        .backgroundColor(0x2788D9)\n        .", "ight(80)\n          .backgroundColor(0xF5DEB3).textAlign", "ght(100)\n          .backgroundColor(0xF5DEB3).textAlign", "ht(\"100%\")\n        .backgroundColor(0x66bbb2cb)\n       ", "y('text1')\n        .backgroundColor(Color.Green)\n      ", "led(false)\n        .backgroundColor(0x317aff)\n        .", "h('50%').height(30).backgroundColor(0xAFEEEE)\n        C", "(item)\n            .backgroundColor(0xbbb2cb)\n         ", "ight: 100 })\n      .backgroundColor(0xd2cab3)\n      .cl", "0)\n                .backgroundColor(0xFFFFFF)\n         ", "0%').height('100%').backgroundColor(0xDCDCDC).padding({", "ight.Bold)\n        .backgroundColor(Color.Black)\n      ", "ght(200)\n    }\n    .backgroundColor(0xf1f3f5)\n    .marg", "ntSize(16)\n        .backgroundColor(0xF9CF93)\n        .", "Index].size)\n      .backgroundColor(0xd2cab3)\n    }.pad", "ight(70)\n          .backgroundColor(0xD2B48C)\n         ", "       }).margin(3).backgroundColor(0x2788D9)\n      if ", "tem)\n              .backgroundColor(0xbbb2cb)\n         ", "'50%' })\n          .backgroundColor(0xc1cbac)\n         ", "'enabled')\n        .backgroundColor(0x317aff)\n        .", ".padding(10)\n      .backgroundColor(0xAFEEEE)\n    }.wid", "ht(50)\n            .backgroundColor(0x00BFFF)\n         ", "ight: 165 })\n      .backgroundColor(0xd2cab3)\n\n      Te", "t(160)\n            .backgroundColor(0xAFEEEE)\n         ", "ht(\"100%\")\n        .backgroundColor(0x66b6c5d1)\n       ", "ight(80)\n          .backgroundColor(0xAFEEEE)\n         ", "ht(50)\n            .backgroundColor(0x4682B4)\n         "], "files": ["ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Navigation.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Swiper.ets", "ResponseRegion.ets", "scrollBar.ets", "transition.ets", "systemPrompt.ets", "gridSettings.ets", "transForm.ets", "Column.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Text.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "sideBar.ets", "Badge.ets", "Scroll.ets", "customDialogController.ets", "positionSetting.ets", "animatorOption.ets", "flexDirection.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "gridPage.ets", "enable.ets", "badge.ets", "imageEffects.ets", "ColumnSplit.ets", "tabs.ets", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "global.ets", "Flex.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "divider.ets", "appear.ets", "Constants.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "fillMode.ets", "curves.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "AlertDialog.ets", "LoadingProgressJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "timeStamp.ets", "motionPath.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "panel.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithButtons", "api_method_all": "declare interface AlertDialogParamWithButtons extends AlertDialogParam {\n  \n  primaryButton: {\n    \n    value: ResourceStr;\n\n    \n    fontColor?: ResourceColor;\n\n    \n    backgroundColor?: ResourceColor;\n\n    \n    action: () => void;\n  };\n\n  \n  secondaryButton: {\n    \n    value: ResourceStr;\n\n    \n    fontColor?: ResourceColor;\n\n    \n    backgroundColor?: ResourceColor;\n\n    \n    action: () => void;\n  };\n}", "api_method_name": "AlertDialogParamWithButtons", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithButtons", "api_method_name": "action", "api_method_all": "action: () => void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 398, "since": 7, "api_used": "\u662f", "lines": ["info(\"click to emit action state\")\n           ", "start start to emit action state\")\n           ", "le.info(\"apple emit action state err: \" + JSON", "info(\"onChange emit action state err: \" + JSON", "info(\"Onfinish emit action state err: \" + JSON", ".info(\"Onstart emit action state err: \" + JSON", "nfo(\"touchFlag emit action state err: \" + JSON", "fo('button1 current action state is: ' + this.", "\"disAppearFlag emit action state err: \" + JSON", "hange start to emit action state\")\n          e", " console.info(\"emit action state err: \" + JSON", "inish start to emit action state\")\n           ", "fo(\"appearFlag emit action state err: \" + JSON", "utton start to emit action state\")\n           ", "fo('Onstart current action state is: ' + this.", ".info(\"button2 emit action state err: \" + JSON", ".info(\"button1 emit action state err: \" + JSON", "o('Onbounce current action state is: ' + this.", "hange start to emit action state\")\n           ", "'appearFlag current action state is: ' + this.", "o(\"onDragEnter emit action state err: \" + JSON", "info(\"start to emit action state\")\n           ", "Able] start to emit action state\")\n           ", "o('onChange current action state is: ' + this.", "console.info(\"click action state err: \" + JSON", "nAreaChange current action state is: ' + this.", "hFlag start to emit action state\")\n           ", "apple start to emit action state\")\n           ", "fo('button2 current action state is: ' + this.", "o('Onfinish current action state is: ' + this.", "Enter start to emit action state\")\n          e", "ounce start to emit action state\")\n           ", "rFlag start to emit action state\")\n           ", "tton1 start to emit action state\")\n           ", "Click start to emit action state\")\n           ", "o(\"[TouchAble] emit action state err: \" + JSON", "(\"onAreaChange emit action state err: \" + JSON", "sAppearFlag current action state is: ' + this.", "tton2 start to emit action state\")\n           ", ".info(\"onClick emit action state err: \" + JSON", "e.info(\"button emit action state err: \" + JSON", "gMove start to emit action state\")\n          e", "info(\"Onbounce emit action state err: \" + JSON"], "files": ["animate.ets", "ohosPrompt.ets", "touch.ets", "configuration.ets", "longPressGesture.ets", "mouseEvent.ets", "placement.ets", "playMode.ets", "PieceCode.ets", "ohosMatrix4.ets", "bindMenu.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "sourceType.ets", "fillMode.ets", "navigation.ets", "customDialogController.ets", "priorityGesture.ets", "touchAble.ets", "pageTransition.ets", "textClock.ets", "geometryTransition.ets", "tabs.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "marquee.ets", "tapGesture.ets", "index.js", "areaChange.ets", "ResponseRegion.ets", "dragEvent.ets", "PanGesture.ets", "parallelGesture.ets", "timeStamp.ets", "transition.ets", "aboutToDisappear.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets", "bindPopup.ets", "scrollCode.ets", "button.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithButtons", "api_method_name": "action", "api_method_all": "action: () => void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 398, "since": 7, "api_used": "\u662f", "lines": ["info(\"click to emit action state\")\n           ", "start start to emit action state\")\n           ", "le.info(\"apple emit action state err: \" + JSON", "info(\"onChange emit action state err: \" + JSON", "info(\"Onfinish emit action state err: \" + JSON", ".info(\"Onstart emit action state err: \" + JSON", "nfo(\"touchFlag emit action state err: \" + JSON", "fo('button1 current action state is: ' + this.", "\"disAppearFlag emit action state err: \" + JSON", "hange start to emit action state\")\n          e", " console.info(\"emit action state err: \" + JSON", "inish start to emit action state\")\n           ", "fo(\"appearFlag emit action state err: \" + JSON", "utton start to emit action state\")\n           ", "fo('Onstart current action state is: ' + this.", ".info(\"button2 emit action state err: \" + JSON", ".info(\"button1 emit action state err: \" + JSON", "o('Onbounce current action state is: ' + this.", "hange start to emit action state\")\n           ", "'appearFlag current action state is: ' + this.", "o(\"onDragEnter emit action state err: \" + JSON", "info(\"start to emit action state\")\n           ", "Able] start to emit action state\")\n           ", "o('onChange current action state is: ' + this.", "console.info(\"click action state err: \" + JSON", "nAreaChange current action state is: ' + this.", "hFlag start to emit action state\")\n           ", "apple start to emit action state\")\n           ", "fo('button2 current action state is: ' + this.", "o('Onfinish current action state is: ' + this.", "Enter start to emit action state\")\n          e", "ounce start to emit action state\")\n           ", "rFlag start to emit action state\")\n           ", "tton1 start to emit action state\")\n           ", "Click start to emit action state\")\n           ", "o(\"[TouchAble] emit action state err: \" + JSON", "(\"onAreaChange emit action state err: \" + JSON", "sAppearFlag current action state is: ' + this.", "tton2 start to emit action state\")\n           ", ".info(\"onClick emit action state err: \" + JSON", "e.info(\"button emit action state err: \" + JSON", "gMove start to emit action state\")\n          e", "info(\"Onbounce emit action state err: \" + JSON"], "files": ["animate.ets", "ohosPrompt.ets", "touch.ets", "configuration.ets", "longPressGesture.ets", "mouseEvent.ets", "placement.ets", "playMode.ets", "PieceCode.ets", "ohosMatrix4.ets", "bindMenu.ets", "swiper.ets", "appear.ets", "animationStatus.ets", "sourceType.ets", "fillMode.ets", "navigation.ets", "customDialogController.ets", "priorityGesture.ets", "touchAble.ets", "pageTransition.ets", "textClock.ets", "geometryTransition.ets", "tabs.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "marquee.ets", "tapGesture.ets", "index.js", "areaChange.ets", "ResponseRegion.ets", "dragEvent.ets", "PanGesture.ets", "parallelGesture.ets", "timeStamp.ets", "transition.ets", "aboutToDisappear.ets", "sharedTransition.ets", "motionPath.ets", "imageAnimator.ets", "bindPopup.ets", "scrollCode.ets", "button.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithButtons", "api_method_name": "value", "api_method_all": "value: ResourceStr", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithButtons", "api_method_name": "fontColor", "api_method_all": "fontColor?: ResourceColor", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 384, "since": 7, "api_used": "\u662f", "lines": ["Size(35)\n          .fontColor(Color.Blue)\n       ", " {\n                \"fontColor\": this.fontColor,\n ", "ize(9).width('90%').fontColor(0xCCCCCC)\n        R", "hrink').fontSize(9).fontColor(0xCCCCCC).width('90", "extStyle {\n  @State fontColor: Color = Color.Red;", "grid').fontSize(20).fontColor(Color.Black).width(", "pect(eventData.data.fontColor).assertEqual(Color.", "\"[testTextStyle001] fontColor: \" + obj.$attrs.fon", "Blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ness').fontSize(15).fontColor(0xCCCCCC).width('90", "rast').fontSize(15).fontColor(0xCCCCCC).width('90", "ty 4').fontSize(20).fontColor(Color.Black).width(", "s rolling\"\n  @State fontColor: Color = Color.Blue", "blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ive text')\n        .fontColor(Color.Red)\n        ", "lor) {\n        this.fontColor = eventData.data.fo", "vert').fontSize(15).fontColor(0xCCCCCC).width('90", "'marquee')\n        .fontColor(this.fontColor)\n   ", "      .fontSize(12).fontColor(0xCCCCCC).maxLines(", "adow').fontSize(15).fontColor(0xCCCCCC).width('90", "tate').fontSize(15).fontColor(0xCCCCCC).width('90", "    .fontColor(this.fontColor)\n        .colorBlen", "  \"fontColor\": this.fontColor,\n              }\n  ", "xGrow\").fontSize(9).fontColor(0xCCCCCC).width('90", " row').fontSize(20).fontColor(Color.Black).width(", "  expect(obj.$attrs.fontColor).assertEqual('#FFFF", "e(20)\n        .key('fontColor')\n\n      Text(`text", "Items').fontSize(9).fontColor(0xCCCCCC).width('90", "or = eventData.data.fontColor;\n      } else if (e", "pro text')\n        .fontColor(Color.Orange)\n     ", "cale').fontSize(15).fontColor(0xCCCCCC).width('90", "ntColor}`)\n        .fontColor(this.fontColor)\n   ", "lor: \" + obj.$attrs.fontColor);\n      expect(obj.", "\"[testTextStyle002] fontColor: \" + obj.$attrs.fon", "ageShow() {\n    let fontColorChangeEvent = {\n    ", "    .fontColor(this.fontColor)\n        .fontSize(", " getInspectorByKey('fontColor');\n      console.in", "  events_emitter.on(fontColorChangeEvent, this.te", "rate').fontSize(15).fontColor(0xCCCCCC).width('90", "Basis').fontSize(9).fontColor(0xCCCCCC).width('90", " state is: ' + this.fontColor);\n          try {\n ", "ata: {\n            \"fontColor\": Color.Blue\n      ", "t font color ${this.fontColor}`)\n        .fontCol", "nSelf\").fontSize(9).fontColor(0xCCCCCC).width('90", " if (eventData.data.fontColor) {\n        this.fon"], "files": ["enumsHorizontalAlign.ets", "imageFit.ets", "Span.ets", "column.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "textArea.ets", "textInput.ets", "transForm.ets", "path.ets", "Column.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "PatternLock.ets", "Stepper.ets", "enumsImage.ets", "PieceCode.ets", "textStyle.ets", "imageEffects.ets", "textClock.ets", "layoutConstraints.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "Path.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "TextTimerJsunit.test.ets", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "ColumnSplit.ets", "colorGradient.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithButtons", "api_method_name": "backgroundColor", "api_method_all": "backgroundColor?: ResourceColor", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 627, "since": 7, "api_used": "\u662f", "lines": ["', height: '60%' }).backgroundColor(0xbbb2cb)\n         ", "  if(eventData.data.backgroundColor != null) {\n        ", "ter)\n              .backgroundColor(0xbbb2cb)\n         ", "', height: '80%' }).backgroundColor(0xd2cab3).align(Ali", "_BACKGROUNDCOLOR = 'backgroundColor'\nconst ATTRS_ALIGNS", "00%').height('40%').backgroundColor('#00ffff')\n        ", "ight(70)\n          .backgroundColor(0xF5DEB3)\n         ", "ht(50)\n            .backgroundColor(0x4582B4)\n         ", "h('50%').height(30).backgroundColor(0x00FFFF)\n      }\n ", "ht(120).padding(10).backgroundColor(0xAFEEEE)\n\n      Te", "n('Touch')\n        .backgroundColor(0x2788D9)\n        .", "ight(80)\n          .backgroundColor(0xF5DEB3).textAlign", "ght(100)\n          .backgroundColor(0xF5DEB3).textAlign", "ht(\"100%\")\n        .backgroundColor(0x66bbb2cb)\n       ", "y('text1')\n        .backgroundColor(Color.Green)\n      ", "led(false)\n        .backgroundColor(0x317aff)\n        .", "h('50%').height(30).backgroundColor(0xAFEEEE)\n        C", "(item)\n            .backgroundColor(0xbbb2cb)\n         ", "ight: 100 })\n      .backgroundColor(0xd2cab3)\n      .cl", "0)\n                .backgroundColor(0xFFFFFF)\n         ", "0%').height('100%').backgroundColor(0xDCDCDC).padding({", "ight.Bold)\n        .backgroundColor(Color.Black)\n      ", "ght(200)\n    }\n    .backgroundColor(0xf1f3f5)\n    .marg", "ntSize(16)\n        .backgroundColor(0xF9CF93)\n        .", "Index].size)\n      .backgroundColor(0xd2cab3)\n    }.pad", "ight(70)\n          .backgroundColor(0xD2B48C)\n         ", "       }).margin(3).backgroundColor(0x2788D9)\n      if ", "tem)\n              .backgroundColor(0xbbb2cb)\n         ", "'50%' })\n          .backgroundColor(0xc1cbac)\n         ", "'enabled')\n        .backgroundColor(0x317aff)\n        .", ".padding(10)\n      .backgroundColor(0xAFEEEE)\n    }.wid", "ht(50)\n            .backgroundColor(0x00BFFF)\n         ", "ight: 165 })\n      .backgroundColor(0xd2cab3)\n\n      Te", "t(160)\n            .backgroundColor(0xAFEEEE)\n         ", "ht(\"100%\")\n        .backgroundColor(0x66b6c5d1)\n       ", "ight(80)\n          .backgroundColor(0xAFEEEE)\n         ", "ht(50)\n            .backgroundColor(0x4682B4)\n         "], "files": ["ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Navigation.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Swiper.ets", "ResponseRegion.ets", "scrollBar.ets", "transition.ets", "systemPrompt.ets", "gridSettings.ets", "transForm.ets", "Column.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Text.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "sideBar.ets", "Badge.ets", "Scroll.ets", "customDialogController.ets", "positionSetting.ets", "animatorOption.ets", "flexDirection.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "gridPage.ets", "enable.ets", "badge.ets", "imageEffects.ets", "ColumnSplit.ets", "tabs.ets", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "global.ets", "Flex.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "divider.ets", "appear.ets", "Constants.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "fillMode.ets", "curves.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "AlertDialog.ets", "LoadingProgressJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "timeStamp.ets", "motionPath.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "panel.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithButtons", "api_method_name": "value", "api_method_all": "value: ResourceStr", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 7, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithButtons", "api_method_name": "fontColor", "api_method_all": "fontColor?: ResourceColor", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 384, "since": 7, "api_used": "\u662f", "lines": ["Size(35)\n          .fontColor(Color.Blue)\n       ", " {\n                \"fontColor\": this.fontColor,\n ", "ize(9).width('90%').fontColor(0xCCCCCC)\n        R", "hrink').fontSize(9).fontColor(0xCCCCCC).width('90", "extStyle {\n  @State fontColor: Color = Color.Red;", "grid').fontSize(20).fontColor(Color.Black).width(", "pect(eventData.data.fontColor).assertEqual(Color.", "\"[testTextStyle001] fontColor: \" + obj.$attrs.fon", "Blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ness').fontSize(15).fontColor(0xCCCCCC).width('90", "rast').fontSize(15).fontColor(0xCCCCCC).width('90", "ty 4').fontSize(20).fontColor(Color.Black).width(", "s rolling\"\n  @State fontColor: Color = Color.Blue", "blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ive text')\n        .fontColor(Color.Red)\n        ", "lor) {\n        this.fontColor = eventData.data.fo", "vert').fontSize(15).fontColor(0xCCCCCC).width('90", "'marquee')\n        .fontColor(this.fontColor)\n   ", "      .fontSize(12).fontColor(0xCCCCCC).maxLines(", "adow').fontSize(15).fontColor(0xCCCCCC).width('90", "tate').fontSize(15).fontColor(0xCCCCCC).width('90", "    .fontColor(this.fontColor)\n        .colorBlen", "  \"fontColor\": this.fontColor,\n              }\n  ", "xGrow\").fontSize(9).fontColor(0xCCCCCC).width('90", " row').fontSize(20).fontColor(Color.Black).width(", "  expect(obj.$attrs.fontColor).assertEqual('#FFFF", "e(20)\n        .key('fontColor')\n\n      Text(`text", "Items').fontSize(9).fontColor(0xCCCCCC).width('90", "or = eventData.data.fontColor;\n      } else if (e", "pro text')\n        .fontColor(Color.Orange)\n     ", "cale').fontSize(15).fontColor(0xCCCCCC).width('90", "ntColor}`)\n        .fontColor(this.fontColor)\n   ", "lor: \" + obj.$attrs.fontColor);\n      expect(obj.", "\"[testTextStyle002] fontColor: \" + obj.$attrs.fon", "ageShow() {\n    let fontColorChangeEvent = {\n    ", "    .fontColor(this.fontColor)\n        .fontSize(", " getInspectorByKey('fontColor');\n      console.in", "  events_emitter.on(fontColorChangeEvent, this.te", "rate').fontSize(15).fontColor(0xCCCCCC).width('90", "Basis').fontSize(9).fontColor(0xCCCCCC).width('90", " state is: ' + this.fontColor);\n          try {\n ", "ata: {\n            \"fontColor\": Color.Blue\n      ", "t font color ${this.fontColor}`)\n        .fontCol", "nSelf\").fontSize(9).fontColor(0xCCCCCC).width('90", " if (eventData.data.fontColor) {\n        this.fon"], "files": ["enumsHorizontalAlign.ets", "imageFit.ets", "Span.ets", "column.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "textArea.ets", "textInput.ets", "transForm.ets", "path.ets", "Column.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "PatternLock.ets", "Stepper.ets", "enumsImage.ets", "PieceCode.ets", "textStyle.ets", "imageEffects.ets", "textClock.ets", "layoutConstraints.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "Path.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "TextTimerJsunit.test.ets", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "ColumnSplit.ets", "colorGradient.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialogParamWithButtons", "api_method_name": "backgroundColor", "api_method_all": "backgroundColor?: ResourceColor", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 627, "since": 7, "api_used": "\u662f", "lines": ["', height: '60%' }).backgroundColor(0xbbb2cb)\n         ", "  if(eventData.data.backgroundColor != null) {\n        ", "ter)\n              .backgroundColor(0xbbb2cb)\n         ", "', height: '80%' }).backgroundColor(0xd2cab3).align(Ali", "_BACKGROUNDCOLOR = 'backgroundColor'\nconst ATTRS_ALIGNS", "00%').height('40%').backgroundColor('#00ffff')\n        ", "ight(70)\n          .backgroundColor(0xF5DEB3)\n         ", "ht(50)\n            .backgroundColor(0x4582B4)\n         ", "h('50%').height(30).backgroundColor(0x00FFFF)\n      }\n ", "ht(120).padding(10).backgroundColor(0xAFEEEE)\n\n      Te", "n('Touch')\n        .backgroundColor(0x2788D9)\n        .", "ight(80)\n          .backgroundColor(0xF5DEB3).textAlign", "ght(100)\n          .backgroundColor(0xF5DEB3).textAlign", "ht(\"100%\")\n        .backgroundColor(0x66bbb2cb)\n       ", "y('text1')\n        .backgroundColor(Color.Green)\n      ", "led(false)\n        .backgroundColor(0x317aff)\n        .", "h('50%').height(30).backgroundColor(0xAFEEEE)\n        C", "(item)\n            .backgroundColor(0xbbb2cb)\n         ", "ight: 100 })\n      .backgroundColor(0xd2cab3)\n      .cl", "0)\n                .backgroundColor(0xFFFFFF)\n         ", "0%').height('100%').backgroundColor(0xDCDCDC).padding({", "ight.Bold)\n        .backgroundColor(Color.Black)\n      ", "ght(200)\n    }\n    .backgroundColor(0xf1f3f5)\n    .marg", "ntSize(16)\n        .backgroundColor(0xF9CF93)\n        .", "Index].size)\n      .backgroundColor(0xd2cab3)\n    }.pad", "ight(70)\n          .backgroundColor(0xD2B48C)\n         ", "       }).margin(3).backgroundColor(0x2788D9)\n      if ", "tem)\n              .backgroundColor(0xbbb2cb)\n         ", "'50%' })\n          .backgroundColor(0xc1cbac)\n         ", "'enabled')\n        .backgroundColor(0x317aff)\n        .", ".padding(10)\n      .backgroundColor(0xAFEEEE)\n    }.wid", "ht(50)\n            .backgroundColor(0x00BFFF)\n         ", "ight: 165 })\n      .backgroundColor(0xd2cab3)\n\n      Te", "t(160)\n            .backgroundColor(0xAFEEEE)\n         ", "ht(\"100%\")\n        .backgroundColor(0x66b6c5d1)\n       ", "ight(80)\n          .backgroundColor(0xAFEEEE)\n         ", "ht(50)\n            .backgroundColor(0x4682B4)\n         "], "files": ["ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Navigation.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "marquee.ets", "Swiper.ets", "ResponseRegion.ets", "scrollBar.ets", "transition.ets", "systemPrompt.ets", "gridSettings.ets", "transForm.ets", "Column.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Text.ets", "Stack.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "swiper.ets", "sideBar.ets", "Badge.ets", "Scroll.ets", "customDialogController.ets", "positionSetting.ets", "animatorOption.ets", "flexDirection.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "flex.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "gridPage.ets", "enable.ets", "badge.ets", "imageEffects.ets", "ColumnSplit.ets", "tabs.ets", "layoutConstraints.ets", "enumsItemAlign.ets", "list.ets", "BackgroundJsunit.test.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "global.ets", "Flex.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "ohosMatrix4.ets", "divider.ets", "appear.ets", "Constants.ets", "animationStatus.ets", "zIndex.ets", "enumsFlexAlign.ets", "fillMode.ets", "curves.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "AlertDialog.ets", "LoadingProgressJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "timeStamp.ets", "motionPath.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "panel.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialog", "api_method_all": "declare class AlertDialog {\n  \n  static show(value: AlertDialogParamWithConfirm | AlertDialogParamWithButtons);\n}", "api_method_name": "AlertDialog", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": ["() => {\n            AlertDialog.show(\n             ", "k(() => {\n          AlertDialog.show({\n            "], "files": ["WebPage.ets", "AlertDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "AlertDialog", "api_method_name": "show", "api_method_all": "static show(value: AlertDialogParamWithConfirm | AlertDialogParamWithButtons);", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 3848, "since": 0, "api_used": "\u662f", "lines": ["CCCCC)\n            .showSteps(false)\n       ", "info('Calendar page show called');\n    var s", "nfo('[enabled] page show called ');\n    var ", "ps(true)\n          .showTips(true)\n         ", "{\n      Button(this.show).width(80).height(3", "info('Checkbox page show called');\n    var s", "             prompt.showToast({\n            ", "\n              this.show = \"show\"\n          ", "ole.info('flex page show called');\n    var s", "false)\n            .showTips(false)\n        ", "info('[column] page show called');\n    var s", "info('[zIndex] page show called ');\n    var ", "le.info('gauge page show called');\n    var s", "or.Blue)\n          .showSteps(true)\n        ", "info('[appear] page show called');\n    var s", "'checkboxGroup page show called');\n    var s", "\n            prompt.showToast({ message: 'Th", "ate show: string = \"show\"\n\n  build() {\n    F", ".info('stepper page show called');\n    var s", "ssage: 'The text is shown', duration: 2000 }", "nfo('[ellipse] page show called');\n    var s", "       this.show = \"show\"\n            }\n    ", ".Blue)\n            .showSteps(true)\n        ", "e.info('[list] page show called');\n    var s", "is.swiperController.showPrevious()\n         ", "is.swiperController.showNext();\n            ", "'gridContainer page show called');\n    var s", "s(false)\n          .showTips(false)\n        ", "fo('background page show called');\n    var s", "xCCCCCC)\n          .showSteps(false)\n       ", "fo('edgeEffect page show called');\n    var s", "e.info('swiper page show called');\n    var s", "'shapeClipping page show called');\n    var s", "('imageEffects page show called');\n    var s", "e.info('border page show called');\n    var s", "an = false\n  @State show: string = \"show\"\n\n ", "\n              this.show = \"hide\"\n          ", ".info('[touch] page show called');\n    var s", "ansFormExample page show called');\n    var s", "nfo('[overlay] page show called ');\n    var ", "o('[TouchAble] page show called');\n    var s", "ColorGradient] page show called');\n    var s", "(true)\n            .showTips(true)\n         ", " {\n          prompt.showToast({ message: JSO", "e.info('select page show called');\n    var s", "e.info('slider page show called');\n    var s", "ansFormExample page show called');\n\n    var ", "le.info('focus page show called');\n    var s"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "dividerProps.test.js", "video.ets", "tabContentProps.test.js", "textProps.test.js", "Navigator.ets", "playMode.ets", "toolbarProps.test.js", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "column.ets", "Panel.ets", "Progress.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "toolbarItemProps.test.js", "Rating.ets", "PieceJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "Divider.ets", "badgeProps.test.js", "border.ets", "scrollBar.ets", "dialogProps.test.js", "textArea.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "RichText.ets", "formProps.test.js", "focus.ets", "touch.ets", "background.ets", "Slider.ets", "stackProps.test.js", "Text.ets", "PanelJsunit.test.ets", "Counter.ets", "gauge.ets", "Stack.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "refreshProps.test.js", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "TextArea.ets", "animatorOption.ets", "flexDirection.ets", "shapeClipping.ets", "edgeEffect.ets", "stepper.ets", "shape.ets", "labelProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "flex.ets", "ratingProps.test.js", "Shape.ets", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "Polyline.ets", "imageAnimatorProps.test.js", "textPickerDialog.ets", "gridPage.ets", "enable.ets", "PieceCode.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "popupProps.test.js", "AlphabetIndexer.ets", "ColumnSplit.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "videoProps.test.js", "list.ets", "colorGradient.ets", "AppStorage.ets", "QrCode.ets", "GridContainer.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "checkbox.ets", "Video.ets", "pieceProps.test.js", "pickerProps.test.js", "circle.ets", "listItem.ets", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "Polygon.ets", "gridColProps.test.js", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "Rect.ets", "divProps.test.js", "switchProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "appear.ets", "rating.ets", "zIndex.ets", "Path.ets", "line.ets", "DataPanel.ets", "chartProps.test.js", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "sliderProps.test.js", "swiperProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "Link.ets", "imageProps.test.js", "select.ets", "Toggle.ets", "listProps.test.js", "slider.ets", "progressProps.test.js", "aboutToDisappear.ets", "Calendar.ets", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "panel.ets", "menuProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}]}