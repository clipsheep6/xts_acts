{"subsystem_ch": "\u516c\u5171\u57fa\u7840\u7c7b\u5e93", "subsystem_en": "compileruntime", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.url", "api": [{"api_class_name": "url", "api_method_all": "declare namespace url {\r\n    class URLSearchParams {\r\n        \r\n        constructor(init?: string[][] | Record<string, string> | string | URLSearchParams);\r\n\r\n        \r\n        append(name: string, value: string): void;\r\n\r\n        \r\n        delete(name: string): void;\r\n\r\n        \r\n        getAll(name: string): string[];\r\n\r\n        \r\n         entries(): IterableIterator<[string, string]>;\r\n\r\n        \r\n        forEach(callbackfn: (value: string, key: string, searchParams: this) => void, thisArg?: Object): void;\r\n\r\n        \r\n        get(name: string): string | null;\r\n\r\n        \r\n        has(name: string): boolean;\r\n\r\n        \r\n        set(name: string, value: string): void;\r\n\r\n        \r\n        sort(): void;\r\n\r\n        \r\n        keys(): IterableIterator<string>;\r\n\r\n        \r\n        values(): IterableIterator<string>;\r\n\r\n        \r\n        [Symbol.iterator](): IterableIterator<[string, string]>;\r\n\r\n        \r\n        toString(): string;\r\n    }\r\n\r\n    class URL {\r\n        \r\n        constructor(url: string, base?: string | URL);\r\n\r\n        \r\n        toString(): string;\r\n\r\n        \r\n        toJSON(): string;\r\n\r\n        \r\n        hash: string;\r\n\r\n        \r\n        host: string;\r\n\r\n        \r\n        hostname: string;\r\n\r\n        \r\n        href: string;\r\n\r\n        \r\n        readonly origin: string;\r\n\r\n        \r\n        password: string;\r\n\r\n        \r\n        pathname: string;\r\n\r\n        \r\n        port: string;\r\n\r\n        \r\n        protocol: string;\r\n\r\n        \r\n        search: string;\r\n\r\n        \r\n        readonly searchParams: URLSearchParams;\r\n\r\n        \r\n        username: string;\r\n    }\r\n}", "api_method_name": "url", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 5, "since": 0, "api_used": "\u662f", "lines": ["'@ohos.util'\nimport url from '@ohos.url'\nim", "duleNamespaceObject(url);\n        expect(re", "rt  Url from '@ohos.url'\ndescribe('UrlFunTe", "t.js')\n\n", "ort url from '@ohos.url'\nimport app from '@"], "files": ["url.test.js", "List.test.js", "util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_all": "class URLSearchParams {\r\n        \r\n        constructor(init?: string[][] | Record<string, string> | string | URLSearchParams);\r\n\r\n        \r\n        append(name: string, value: string): void;\r\n\r\n        \r\n        delete(name: string): void;\r\n\r\n        \r\n        getAll(name: string): string[];\r\n\r\n        \r\n         entries(): IterableIterator<[string, string]>;\r\n\r\n        \r\n        forEach(callbackfn: (value: string, key: string, searchParams: this) => void, thisArg?: Object): void;\r\n\r\n        \r\n        get(name: string): string | null;\r\n\r\n        \r\n        has(name: string): boolean;\r\n\r\n        \r\n        set(name: string, value: string): void;\r\n\r\n        \r\n        sort(): void;\r\n\r\n        \r\n        keys(): IterableIterator<string>;\r\n\r\n        \r\n        values(): IterableIterator<string>;\r\n\r\n        \r\n        [Symbol.iterator](): IterableIterator<[string, string]>;\r\n\r\n        \r\n        toString(): string;\r\n    }", "api_method_name": "URLSearchParams", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 79, "since": 7, "api_used": "\u662f", "lines": ["et params = new Url.URLSearchParams(\"key1=value1&key2=v", "et params = new Url.URLSearchParams(that.search)\n      ", "et params = new Url.URLSearchParams(that.search);\n     ", "et params = new Url.URLSearchParams(\"1=value1&2=value2&", "et params = new Url.URLSearchParams(\"\u5c0f=value1&key2=valu", "et params = new Url.URLSearchParams(\"\u5c0f=value1&\uffe5=value2&", "-value pairs on the URLSearchParams instance object.\n  ", "et params = new Url.URLSearchParams(\"key1=value1&8=DEF\"", "ar params = new Url.URLSearchParams(that.search);\n     ", "et params = new Url.URLSearchParams(\"foo=bar&jss=txt\");"], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "constructor", "api_method_all": "constructor(init?: string[][] | Record<string, string> | string | URLSearchParams)", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 32, "since": 0, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "append", "api_method_all": "append(name: string, value: string): void;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 26, "since": 7, "api_used": "\u662f", "lines": ["3\");\n        params.append(\"a\",\"ACA\");\n       ", "ram)\n        params.append('abcde','fghki')\n  ", ";\n        // params.append(\"1\",\"ACA\");\n       ", " \u5927\")\n        params.append(\"1 12\",\"QQQ\")\n     ", "rch)\n        params.append(\"app\",\"par\")\n      ", "rch)\n        params.append(\"foo~!@#$%^&*()_+-=", "ch);\n        params.append('ma','jk')\n        ", "rch)\n        params.append(\"123\",\"456\")\n      ", "ms()\n        params.append('abcde','fghki')\n  ", "e2\")\n        params.append(\"5\",\"JKL\")\n        ", "rch)\n        params.append(\"ma \u5927\",\"jk\uffe5\")\n     ", "e2\")\n        params.append(\"jss\",\"txt\")\n      ", "e2\")\n        params.append(\"jss\",\"JL\")\n       ", "2\");\n        params.append(\"foo\",\"jk\");\n      ", "e2\")\n        params.append(\"key1\",\"AAA\")\n     ", "=\u5927\")\n        params.append(\"\uffe5\",\"ACA\")\n        ", "=\u5927\")\n        params.append(\"key3\",\"A3A\")\n     ", "EF\")\n        params.append(\"8\",\"A8A\")\n        ", "y5\")\n        params.append(\"1 12\",\"QQQ\")\n     ", ";\n        // params.append(\"11\",\"ACA\");\n      ", "da\")\n        params.append(\"key3\",\"A3A\")\n     ", "e2\")\n        params.append(\"foo\",\"jk\")\n       ", "t\");\n        params.append(\"foo\",\"jk\");\n      ", "=\u5927\")\n        params.append(\"a\",\"ACA\")\n        "], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "delete", "api_method_all": "delete(name: string): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["ch);\n        params.delete(\"foo\u5927\");\n        va", "ch);\n        params.delete('foo');\n        var", "ch);\n        params.delete(\"faa\");\n        var", "ns after a value is deleted.\n     * @tc.requir", "ch);\n        params.delete('bar');\n        var", "values, this method deletes the others.\n     *", "rch)\n        params.delete(\"foo\")\n        var ", "=)\")\n        params.delete(\"5\")\n        var re"], "files": ["url.test.js", "util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "getAll", "api_method_all": "getAll(name: string): string[];", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["ar result =  params.getAll(\"key3\")\n        exp", "ar result =  params.getAll(\"key4\")\n        exp", "ar result =  params.getAll(\"8\")\n        expect", "ar result =  params.getAll(\"key2\")\n        exp", "ar result =  params.getAll(\"key1\")\n        exp"], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "entries", "api_method_all": "entries(): IterableIterator<[string, string]>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 23, "since": 7, "api_used": "\u662f", "lines": [" (let entry of that.entries()) {\n            ar", "c.isSetIterator(set.entries());\n        expect(", "  let res = hashMap.entries();\n    let arr = []", "{\n      let entry = entries.next().value;\n     ", "(var pair of params.entries()) {\n            ar", "et(4, \"g\");\n    let entries = treeMap.entries()", "es = lightWeightMap.entries();\n    expect(JSON.", "  let res = hashSet.entries();\n    for (let i =", "  let res = hashMap.entries();\n    expect(undef", "es = lightWeightSet.entries();\n    expect(JSON.", "t entries = treeMap.entries();\n    let flag = t", "c.isMapIterator(map.entries());\n        expect(", "  let res = treeSet.entries();\n    expect(JSON.", "  let res = hashSet.entries();\n    expect(res.n"], "files": ["LightWeightSet.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "TreeMap.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: string, key: string, searchParams: this) => void, thisArg?: Object): void;", "api_type": "callback", "api_args_count": 5, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "forEach", "api_method_all": "forEach(callbackfn: (value: string, key: string, searchParams: this) => void, thisArg?: Object): void;", "api_type": "callback", "api_args_count": 4, "api_level": 11, "api_used_count": 72, "since": 0, "api_used": "\u662f", "lines": [" [];\n    linkedList.forEach((item, index) => {\n      arr.push(item)", "qual(\"c\");\n    list.forEach((item, index) => {\n      console.log(it", "= list[1];\n    list.forEach((item, index) => {\n      console.log(it", "t num = 0;\n    list.forEach((item, index) => {\n      num++;\n    });", "rr = [];\n    vector.forEach((item, index) => {\n      arr.push(item)", "d(1);\n    arrayList.forEach((item, index) => {\n      if (item == 1)", "arr = [];\n    stack.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    list1.forEach((item, index) => {\n      arr.push(item)", "arr = [];\n    queue.forEach((item, index) => {\n      arr.push(item)", "rr = [];\n    subArr.forEach((item, index) => {\n      arr.push(item)", "= 0;\n    linkedList.forEach((item, index) => {\n      num++;\n    });", "arr = [];\n    deque.forEach((item, index) => {\n      arr.push(item)", " arr = [];\n    list.forEach((item, index) => {\n      arr.push(item)", "= [];\n    arrayList.forEach((item, index) => {\n      arr.push(item)", "t arr = [];\n    res.forEach((item, index) => {\n      arr.push(item)"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "get", "api_method_all": "get(name: string): string | null;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 517, "since": 7, "api_used": "\u662f", "lines": ["onfigService = core.getDefaultService('conf", "     var info = app.getInfo()\n        expec", "    let res = deque.getLast();\n    expect(r", "    let res = deque.getLast();\n      expect", "let res = arrayList.getIndexOf(\"A\");\n    ex", "\n    let res = list.getIndexOf(\"b\");\n    ex", "et res1 = arrayList.getLastIndexOf(1);\n    ", "let res = arrayList.getLastIndexOf(1);\n    ", "et res = linkedList.get(0);\n    expect(res)", "  const core = Core.getInstance()\n        c", "let res = arrayList.getCapacity();\n    expe", "\n    let res = list.getLastIndexOf(\"f\");\n  ", "et res1 = arrayList.getIndexOf(1);\n    expe", "let res = arrayList.getIndexOf(99);\n    let", "    let res = deque.getFirst();\n    expect(", "    let res = deque.getFirst();\n      expec", "\n    let res = list.getIndexOf(\"f\");\n    ex", "t res1 = linkedList.get(1);\n    expect(res1", "\n    let res = list.getLastIndexOf(\"a\");\n  "], "files": ["ExampleJsunit.test.js", "List.test.js", "LightWeightSet.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Queue.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "has", "api_method_all": "has(name: string): boolean;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 544, "since": 7, "api_used": "\u662f", "lines": [" new HashMap();\n    hashMap.set(\"\", \"A\");\n ", "let res = arrayList.has(\"\u56db\");\n    expect(re", "\"A\");\n    let res = hashMap.get(3.14);\n    ", "let res = arrayList.has(\"\u4e09\");\n    expect(re", ", c);\n    let res = hashMap.get(1);\n    exp", "\"A\");\n    let res = hashMap.get(\"\");\n    ex", "\"A\");\n    let res = hashMap.get(1);\n    exp", "et res = linkedList.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(1, 2);\n    ", "\"A\");\n    let res = hashMap.get(\"a\");\n    e", "\n    let res = list.has(\"a\");\n    expect(re", "\n    let res = list.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(3.14, \"A\");", "et res = linkedList.has(\"a\");\n    expect(re", "   let res = vector.has(1);\n    expect(res)", " new HashMap();\n    hashMap.set(1, \"A\");\n  ", "i\", age: \"13\"};\n    hashMap.set(1, c);\n    ", "let res = arrayList.has(a);\n    expect(res)", "    try {\n      let hashMap = new HashMap()", " new HashMap();\n    hashMap.set(\"a\", \"A\");\n", "Map();\n      expect(hashMap != undefined).a", "    let res = deque.has(6);\n    expect(res)", "\"A\");\n    let res = hashMap.get(\"$\");\n    e", "   let res = vector.has(8);\n    expect(res)", "nction () {\n    let hashMap = new HashMap()", "\n    let res = list.has(\"d\");\n    expect(re", " new HashMap();\n    hashMap.set(\"$\", \"A\");\n", "let res = arrayList.has(\"\u4e8c\");\n    expect(re", "t res1 = linkedList.has(\"d\");\n    expect(re", "  let res1 = vector.has(\"\u4e8c\");\n    expect(re", " c = [1, 2, 3];\n    hashMap.set(1, c);\n    ", "   let res = vector.has(\"\u4e09\");\n    expect(re", "let res = arrayList.has(8);\n    expect(res)", ", 2);\n    let res = hashMap.get(1);\n    exp"], "files": ["LightWeightSet.test.js", "List.test.js", "Deque.test.js", "LinkedList.test.js", "TreeSet.test.js", "url.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "ArrayList.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "set", "api_method_all": "set(name: string, value: string): void;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 666, "since": 7, "api_used": "\u662f", "lines": ["hMap();\n    hashMap.set(-1, \"A\");\n    let r", "hMap();\n    hashMap.set(1, \"A\");\n    let re", "hMap();\n    hashMap.set(\"a\", \"A\");\n    let ", "hMap();\n    hashMap.set(1, 3.14);\n    let r", "a = {};\n    hashMap.set(a, \"A\");\n    let re", ", \"A\");\n    hashMap.set(2, \"B\");\n    hashMa", " 2, 3];\n    hashMap.set(1, c);\n    let res ", "t(8, 2);\n    vector.set(1, \"\u4e8c\");\n    let re", "++) {\n      hashMap.set(1, i);\n    }\n    le", "hMap();\n    hashMap.set(1, \"A\");\n    hashMa", "++) {\n      hashMap.set(i, 1);\n      let re", "add(14);\n    vector.setLength(7);\n    let r", "hMap();\n    hashMap.set(\"$\", \"A\");\n    let ", "hMap();\n    hashMap.set(3.14, \"A\");\n    let", " try {\n      vector.set(12, \"\u4e8c\");\n    } cat", "hMap();\n    hashMap.set(1, 2);\n    let res ", ", \"B\");\n    hashMap.set(3, \"C\");\n    hashMa", ", \"C\");\n    hashMap.set(4, \"D\");\n    hashMa", "hMap();\n    hashMap.set(1, \"$\");\n    let re", "hMap();\n    hashMap.set(0.3, \"A\");\n    let ", "a = {};\n    hashMap.set(1, a);\n    let res ", "hMap();\n    hashMap.set(1, -1);\n    let res", "hMap();\n    hashMap.set(1, null);\n    let r", ".add(1);\n    vector.setLength(5);\n    let r", "\n    let res = list.set(2, \"d\");\n    let re", "hMap();\n    hashMap.set(\"\", \"A\");\n    let r", " \"13\"};\n    hashMap.set(1, c);\n    let res ", ", \"D\");\n    hashMap.set(5, \"E\");\n    let re", "rtEqual(\"ArrayList: set out-of-bounds\");\n  ", "      configService.setConfig(this)\n\n      "], "files": ["List.test.js", "LinkedList.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js", "TreeMap.test.js", "Process.test.js", "ArrayList.test.js", "index.js", "xml.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "sort", "api_method_all": "sort(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 17, "since": 7, "api_used": "\u662f", "lines": ["t.add(14);\n    list.sort((a, b) => a - b);\n ", "add(14);\n    vector.sort((a, b) => a - b);\n ", "ew List();\n    list.sort((a, b) => a - b);\n ", "add(\"14\");\n    list.sort((a, b) => a - b);\n ", "\"d\");\n    arrayList.sort((a, b) => a - b);\n ", "ue]);\n    }\n    arr.sort(function (a, b) {\n ", "1]]);\n    }\n    arr.sort(function (a, b) {\n ", "2\");\n        params.sort();\n        var res ", "A\");\n        params.sort();\n        var res ", "(14);\n    arrayList.sort((a, b) => a - b);\n ", "4\");\n        params.sort();\n        var res ", "undefined);\n    arr.sort(function (a, b) {\n ", "\u674e\u56db\");\n    arrayList.sort((a, b) => a - b);\n "], "files": ["List.test.js", "url.test.js", "HashMap.test.js", "Vector.test.js", "HashSet.test.js", "ArrayList.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "keys", "api_method_all": "keys(): IterableIterator<string>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": ["  let res = hashMap.keys();\n    for (let i =", "From(2, 2);\n    let keys = [1, 2, 5];\n    le", "qual(plainArray.get(keys[i]));\n    }\n    try", " vals = [];\n    let keys = [];\n    hashMap.f", "g to go through all keys contained in this o", ": Obtains a list of keys for the values in t", "for (let i = 0; i < keys.length; i++) {\n    ", "dd(5, \"E\");\n    let keys = [1, 2, 3, 4, 5];\n", "  let res = treeMap.keys();\n    expect(res.n", "At(2, \"V\");\n    let keys = [1, 2, 3, 4, 5];\n", "c.isMapIterator(map.keys());\n        expect(", "c.isSetIterator(set.keys());\n        expect(", "qual(plainArray.get(keys[i]));\n    }\n  });\n ", "  var result = that.keys()\n        expect(re", "as = hashMap.hasKey(keys[i]);\n      expect(h", "r(var key of params.keys()) {\n            ar", "es = lightWeightMap.keys();\n    expect(res.n", "ue, key) => {\n      keys.push(key);\n      va"], "files": ["url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "PlainArray.test.js", "TreeMap.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "values", "api_method_all": "values(): IterableIterator<string>;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 71, "since": 7, "api_used": "\u662f", "lines": ["ar value  of params.values()) {\n            ar", " [1, 2, 5];\n    let values = [\"A\", \"B\", \"E\"];\n", "  let res = treeMap.values();\n    expect(res.n", "re several matching values, this method delete", "es that the queried values are successfully ma", "i++) {\n      expect(values[i]).assertEqual(pla", "  let res = hashSet.values();\n    for (let i =", ", 3, 4, 5];\n    let values = [\"A\", \"B\", \"C\", \"", "  let res = treeSet.values();\n    expect(res.n", "  let res = hashMap.values();\n    for (let i =", "g to go through all values contained in this o", "es that the queried values are not matched.\n  ", "es = lightWeightSet.values();\n    expect(res.n", "umber of times that values are added to the bu", "the total number of values in the current buff", "umber of times that values are evicted from th", ", 3, 4, 5];\n    let values = [\"A\", \"B\", \"V\", \"", "es = lightWeightMap.values();\n    expect(res.n"], "files": ["LightWeightSet.test.js", "TreeSet.test.js", "url.test.js", "util.test.js", "HashMap.test.js", "LightWeightMap.test.js", "PlainArray.test.js", "TreeMap.test.js", "HashSet.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URLSearchParams", "api_method_name": "toString", "api_method_all": "toString(): string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 131, "since": 7, "api_used": "\u662f", "lines": ["      expect(result.toString()).assertEqual('')\n", "      expect(result.toString()).assertEqual(\"DEF", "   let res = vector.toString();\n    expect(res).", "      expect(result.toString()).assertEqual(\"da,", "   var res = params.toString();\n        expect(r", "es = lightWeightMap.toString();\n    expect(res).", "t res1 = plainArray.toString();\n    expect(res1)", "      expect(result.toString()).assertEqual(\"val", "\n        expect(res.toString()).assertEqual(\"htt", "es = lightWeightSet.toString();\n    expect(res).", "et res = plainArray.toString();\n    expect(res).", "var result = params.toString()\n        expect(re", "var result = params.toString();\n        expect(r", "   let res = gaogao.toString();\n        expect(r", "         expect(err.toString()).assertEqual(\"Err"], "files": ["LightWeightSet.test.js", "url.test.js", "util.test.js", "uri.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_all": "class URL {\r\n        \r\n        constructor(url: string, base?: string | URL);\r\n\r\n        \r\n        toString(): string;\r\n\r\n        \r\n        toJSON(): string;\r\n\r\n        \r\n        hash: string;\r\n\r\n        \r\n        host: string;\r\n\r\n        \r\n        hostname: string;\r\n\r\n        \r\n        href: string;\r\n\r\n        \r\n        readonly origin: string;\r\n\r\n        \r\n        password: string;\r\n\r\n        \r\n        pathname: string;\r\n\r\n        \r\n        port: string;\r\n\r\n        \r\n        protocol: string;\r\n\r\n        \r\n        search: string;\r\n\r\n        \r\n        readonly searchParams: URLSearchParams;\r\n\r\n        \r\n        username: string;\r\n    }", "api_method_name": "URL", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 281, "since": 7, "api_used": "\u662f", "lines": ["et params = new Url.URLSearchParams(\"key1=v", "-value pairs on the URLSearchParams instanc", " let that = new Url.URL('https://example.co", "et params = new Url.URLSearchParams(\"\u5c0f=valu", "et params = new Url.URLSearchParams(that.se", "et params = new Url.URLSearchParams(\"foo=ba", "ar params = new Url.URLSearchParams(that.se", " var that = new Url.URL('http://username:pa"], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "constructor", "api_method_all": "constructor(url: string, base?: string | URL)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 32, "since": 0, "api_used": "\u662f", "lines": ["    * @tc.desc: URL constructor, which is used to i", " })\n\n    it('worker_constructor_test_002', 0, async", " })\n\n    it('worker_constructor_test_004', 0, async", "s Temperature {\n    constructor(value) {\n        th", "      {\n            constructor()\n            {\n   ", "sc: A parameterized constructor used to create an U", " })\n\n    it('worker_constructor_test_003', 0, async", "s ok\n    it('worker_constructor_test_001', 0, async", "    // check worker constructor is ok\n    it('worke"], "files": ["url.test.js", "util.test.js", "Worker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "toString", "api_method_all": "toString(): string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 131, "since": 7, "api_used": "\u662f", "lines": ["      expect(result.toString()).assertEqual('')\n", "      expect(result.toString()).assertEqual(\"DEF", "   let res = vector.toString();\n    expect(res).", "      expect(result.toString()).assertEqual(\"da,", "   var res = params.toString();\n        expect(r", "es = lightWeightMap.toString();\n    expect(res).", "t res1 = plainArray.toString();\n    expect(res1)", "      expect(result.toString()).assertEqual(\"val", "\n        expect(res.toString()).assertEqual(\"htt", "es = lightWeightSet.toString();\n    expect(res).", "et res = plainArray.toString();\n    expect(res).", "var result = params.toString()\n        expect(re", "var result = params.toString();\n        expect(r", "   let res = gaogao.toString();\n        expect(r", "         expect(err.toString()).assertEqual(\"Err"], "files": ["LightWeightSet.test.js", "url.test.js", "util.test.js", "uri.test.js", "LightWeightMap.test.js", "Vector.test.js", "PlainArray.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "toJSON", "api_method_all": "toJSON(): string;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": [" var result= params.toJSON()\n        expect(re"], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "hash", "api_method_all": "hash: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 389, "since": 7, "api_used": "\u662f", "lines": ["\"A\");\n    let res = hashMap.get(0.3);\n    ex", "    let a = {};\n    hashMap.set(1, a);\n    l", " new HashMap();\n    hashMap.set(\"a\", \"A\");\n ", " -1);\n    let res = hashMap.get(1);\n    expe", " new HashMap();\n    hashMap.set(0.3, \"A\");\n ", "\"A\");\n    let res = hashMap.get(3.14);\n    e", "\"A\");\n    let res = hashMap.get(\"$\");\n    ex", ", c);\n    let res = hashMap.get(1);\n    expe", "nction () {\n    let hashMap = new HashMap();", " new HashMap();\n    hashMap.set(1, null);\n  ", "\"$\");\n    let res = hashMap.get(1);\n    expe", "ull);\n    let res = hashMap.get(1);\n    expe", " new HashMap();\n    hashMap.set(1, 3.14);\n  ", " new HashMap();\n    hashMap.set(3.14, \"A\");\n", " new HashMap();\n    hashMap.set(-1, \"A\");\n  ", "i\", age: \"13\"};\n    hashMap.set(1, c);\n    l", "\"A\");\n    let res = hashMap.get(1);\n    expe", " new HashMap();\n    hashMap.set(1, -1);\n    ", " new HashMap();\n    hashMap.set(1, \"A\");\n   ", "\"A\");\n    let res = hashMap.get(\"\");\n    exp", " new HashMap();\n    hashMap.set(1, 2);\n    l", " new HashMap();\n    hashMap.set(1, \"$\");\n   ", " new HashMap();\n    hashMap.set(\"\", \"A\");\n  ", "    let a = {};\n    hashMap.set(a, \"A\");\n   ", ", a);\n    let res = hashMap.get(1);\n    expe", " c = [1, 2, 3];\n    hashMap.set(1, c);\n    l", "\"A\");\n    let res = hashMap.get(-1);\n    exp", " new HashMap();\n    hashMap.set(\"$\", \"A\");\n ", "\"A\");\n    let res = hashMap.get(\"a\");\n    ex", ".14);\n    let res = hashMap.get(1);\n    expe", "\"A\");\n    let res = hashMap.get(a);\n    expe", "    try {\n      let hashMap = new HashMap();", "Map();\n      expect(hashMap != undefined).as", ", 2);\n    let res = hashMap.get(1);\n    expe"], "files": ["url.test.js", "HashSet.test.js", "HashMap.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "host", "api_method_all": "host: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 155, "since": 7, "api_used": "\u662f", "lines": ["//username:password@host:8080/directory/file", "//username:password@host:8080')\n        var ", ").assertEqual(\"user@hosthost\");\n        expe", "      expect(gaogao.host).assertEqual(\"[::FF", "ssertEqual(\"http1://host/directory/file?quer", "t).assertEqual(\"hosthost\");\n        expect(g", "new Url.URL('http://host:8080/directory/file", "      expect(gaogao.host).assertEqual(\"www.b", "      expect(gaogao.host).assertEqual(\"hosth", "rtEqual(\"//user@hosthost/path/path23?query\")", "      expect(gaogao.host).assertEqual(\"[1:0:", "RI('http://user@hosthost/path/path23?query#q", "ew Url.URL('http1://host/directory/file?quer", "      expect(gaogao.host).assertEqual(\"16.9.", ".host).assertEqual(\"hosthost\");\n        expe", "      expect(gaogao.host).assertEqual(\"[::]\"", "assertEqual(\"http://host:8080/directory/file", "= new Url.URL('http:host:8080/directory/file", "      expect(gaogao.host).assertEqual(\"199.9", "      expect(gaogao.host).assertEqual(\"[::19", "ew URI('http://user@hosthost/path/path23?que", "assertEqual(\"//user@hosthost/path/path23?que", "      expect(gaogao.host).assertEqual(\"[fe80", "      expect(gaogao.host).assertEqual(\"null\"", "//username:password@host:8080#fragment')\n   ", "      expect(gaogao.host).assertEqual(\"49.99", "//username:password@host:8080/#fragment\")\n  ", "sertEqual(\"user@hosthost\");\n        expect(g", "      expect(gaogao.host).assertEqual(\"www.h", "      expect(gaogao.host).assertEqual(\"[1080", "      expect(gaogao.host).assertEqual(\"[22::", "/username:pas sword@host:8080/directory/file", "//username:password@host:8080/\")\n    })\n\n   "], "files": ["url.test.js", "uri.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "hostname", "api_method_all": "hostname: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["nt')\n        params.hostname = 'hosthost'\n      ", " var result= params.hostname\n        expect(resu", "nt')\n        params.hostname = 'sksk'\n        va"], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "href", "api_method_all": "href: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 26, "since": 7, "api_used": "\u662f", "lines": ["nt')\n        params.href = 'http://myhost:99", " var result= params.href\n        expect(resu", "ar result = params1.href\n        expect(resu", "nt')\n        params.href = 'http1://myhost/p"], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "origin", "api_method_all": "readonly origin: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["zation of the URL's origin.\n     * @tc.require", "ssage).strictEqual('original is not function')", " var result= params.origin\n        expect(resu"], "files": ["url.test.js", "util.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "password", "api_method_all": "password: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 94, "since": 7, "api_used": "\u662f", "lines": ["I('ht@tp://username:password@host:8080/directory", "I('htt/p://username:password@www.baidu.com:88/pa", "al(\"http://username:password@host:8080/#fragment", "L('https://username:password@host:8080/directory", "ual('ftp://username:password@www.baidu.com:88/pa", "RL('http://username:password@aaaasshost:212/dire", " var result= params.password\n        expect(resu", "RL('http://username:password@host/directory/file", "I('http1://username:password@www.baidu.com:88/pa", "RI('http://username:password@[::1\u4f602:55]:8080/dir", "RI('http://username:password@[::12:55:8080/direc", "rl.URL('http://zhao:password@host:8080/directory", "I('https://username:password@www.baidu.com:88/pa", "URI('ftp://username:password@www.baidu.com:88/pa", "al(\"http://username:password@host:8080/directory", "RI('http://username:password@[::]:80r80/director", ": Gets and sets the password portion of the URL.", "RI('f/tp://username:password@www.baidu.com:88/pa", "RL('http://username:password@host:11/directory/f", "RI('http://username:password@[::]:8080/directory", "al(\"http://username:password@host:8080/\")\n    })", "RL('http://username:password@host:8080')\n       ", "I('#http://username:password@host:8080/directory", "RL('http://username:password@host22:100#fragment", "RL('http://username:password@host:8080#fragment'", "RL('http://username:password@host:8080/directory", "L('http1://username:password@host:8080/directory", "I('1http://username:password@host:8080/directory", "RI('http://username:password@host:8080/directory"], "files": ["url.test.js", "uri.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "pathname", "api_method_all": "pathname: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 7, "since": 7, "api_used": "\u662f", "lines": ["nt')\n        params.pathname = 'path'\n        va", "nt')\n        params.pathname = '/directory/file1", " var result= params.pathname\n        expect(resu"], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "port", "api_method_all": "port: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 323, "since": 7, "api_used": "\u662f", "lines": ["", "eccjsunit/index';\nimport Vector from \"@ohos.", "eccjsunit/index';\nimport HashSet from \"@ohos", "rom '@ohos.intl';\nimport {describe,beforeAll", "rom '@system.app'\nimport {describe, beforeAl", " '@system.device'\nimport router from '@syste", "eccjsunit/index';\nimport LinkedList from \"@o", "eccjsunit/index';\nimport HashMap from \"@ohos", "eccjsunit/index';\nimport Deque from \"@ohos.u", "eccjsunit/index';\nimport ArrayList from \"@oh", "eccjsunit/index'\n\nexport default {\n    data:", "eccjsunit/index';\nimport Stack from \"@ohos.u", "om '@system.file'\nimport app from '@system.a", "eccjsunit/index';\nimport List from \"@ohos.ut", "rom '@system.app'\nimport device from '@syste", "eccjsunit/index';\nimport Queue from \"@ohos.u", "eccjsunit/index';\nimport LightWeightMap from", " '@system.router'\nimport {Core} from 'deccjs"], "files": ["List.test.js", "Deque.test.js", "LinkedList.test.js", "util.test.js", "worker_010.js", "Vector.test.js", "Stack.test.js", "ArrayList.test.js", "HashSet.test.js", "xml.test.js", "worker_0121.js", "Queue.test.js", "ExampleJsunit.test.js", "worker_0151.js", "worker_0091.js", "worker_0131.js", "worker_003.js", "convertxml.test.js", "url.test.js", "LightWeightMap.test.js", "app.js", "intlCollator_test.js", "worker_0141.js", "worker_011.js", "worker_006.js", "worker_0111.js", "worker_012.js", "LightWeightSet.test.js", "worker_008.js", "worker_009.js", "worker_013.js", "intlLocale_test.js", "worker_004.js", "HashMap.test.js", "intlDateTimeFormat_test.js", "uri.test.js", "index.js", "second.js", "Worker.test.js", "worker_005.js", "worker_0101.js", "worker_014.js", "TreeSet.test.js", "worker_0152.js", "Process.test.js", "numberFormat_test.js", "PlainArray.test.js", "TreeMap.test.js", "worker_007.js", "worker_015.js", "worker.js", "worker_002.js", "worker_0122.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "protocol", "api_method_all": "protocol: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 12, "since": 7, "api_used": "\u662f", "lines": [": Gets and sets the protocol portion of the URL.", "nt')\n        params.protocol = 'ftp:';\n        v", " var result= params.protocol\n        expect(resu", "nt')\n        params.protocol = 'https:';\n       "], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "search", "api_method_all": "search: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 38, "since": 7, "api_used": "\u662f", "lines": [" var result= params.search\n        expect(resu", "var result = params.searchParams.toString();\n ", "nt')\n        params.search = 'kk=99'\n        v", "ciated with a given search parameter to the gi", "nt')\n        params.search = 'pppk=99'\n       ", "RLSearchParams(that.search)\n        params.del", "ciated to the given search parameter.\n     * @", "ciated with a given search parameter as an arr", "hers.\n     * If the search parameter doesn't e", "RLSearchParams(that.search);\n        params.ap", "RLSearchParams(that.search)\n        params.app", "RLSearchParams(that.search);\n        params.de"], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "searchParams", "api_method_all": "readonly searchParams: URLSearchParams", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["var result = params.searchParams.toString();\n       "], "files": ["url.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "URL", "api_method_name": "username", "api_method_all": "username: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 99, "since": 0, "api_used": "\u662f", "lines": ["new Url.URL('http://username:password@host/direc", "new Url.URL('http://username:password@aaaasshost", "ew Url.URL('http1://username:password@host:8080/", "new Url.URL('http://username:password@host:8080'", " = new URI('http1://username:password@www.baidu.", "o = new URI('f/tp://username:password@www.baidu.", "ao = new URI('ftp://username:password@www.baidu.", "ew Url.URL('https://username:password@host:8080/", "t = new URI('http://username:password@[::]:80r80", "nt')\n        params.username = 'skk'\n        var", "t = new URI('http://username:password@[::]:8080/", " var result= params.username\n        expect(resu", "t = new URI('http://username:pa^ssword@[::12:55]", " = new URI('htt/p://username:password@www.baidu.", "new Url.URL('http://username:password@host:8080#", ": Gets and sets the username portion of the URL.", "new Url.URL('http://username:password@host22:100", ".assertEqual('ftp://username:password@www.baidu.", " = new URI('ht/tp://username:pas sword@host:8080", "new Url.URL('http://username:password@host:11/di", "assertEqual(\"http://username:password@host:8080/", " = new URI('https://username:password@www.baidu.", " = new URI('ht@tp://username:password@host:8080/", "t = new URI('http://username:password@[::1\u4f602:55]", "t = new URI('http://username:password@[::12:55:8", " = new URI('1http://username:password@host:8080/", " = new URI('#http://username:password@host:8080/", "t = new URI('http://username:password@host:8080/", "new Url.URL('http://username:password@host:8080/", "esult).assertEqual('username')\n    })\n\n    /**\n "], "files": ["url.test.js", "uri.test.js"], "is_white": " ", "desc": " "}]}