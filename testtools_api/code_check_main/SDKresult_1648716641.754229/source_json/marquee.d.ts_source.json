{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\marquee", "api": [{"api_class_name": "MarqueeInterface", "api_method_all": "interface MarqueeInterface {\n  \n  (value: { start: boolean; step?: number; loop?: number; fromStart?: boolean; src: string }): MarqueeAttribute;\n}", "api_method_name": "MarqueeInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeInterface", "api_method_name": "value", "api_method_all": "(value: { start: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 14499, "since": 8, "api_used": "\u662f", "lines": ["      console.info('value:' + value + 'mode:'", "   return this.rect_value = {\n      \"left\": t", ".info(\"this.matrix3 value is\");\n        this.", "xpect(objNew.$attrs.value).assertEqual('10.00", "xpect(objNew.$attrs.value).assertEqual('nan')", "ckbox1 change is' + value)\n          })\n     ", "ull) {\n        this.value = eventData.data.va", "  this.value = this.value + 'Text'\n          ", "g\"},\n              {value:'ddd',icon: \"/image", "ect(indexEvent.data.value).assertEqual('TextT", ".info(\"this.matrix2 value is\" + Matrix4.ident", "      \"value\": this.value,\n              }\n  ", "eckbox2 change is'+ value)\n        })\n    }\n ", "         .onChange((value: number, mode: Slid", "eckbox1 change is'+ value)\n        })\n      C", "g\"},\n              {value:'ccc',icon: \"/image", "=> {\n          this.value = this.value + 'Tex", " {\n                \"value\": this.value,\n     ", "e.info(\"this.matrix value is not\");\n      }\n ", " if (eventData.data.value != null) {\n        ", "rExample {\n  @State value:string=10\n  @State ", " Slider({\n          value: this.outSetValue,\n", " this.outSetValue = value\n            console", "        .value(this.value)\n        .font(this", "s.Vertical\n  @State value: number = 40\n\n  pri", "ttom;\n  static rect_value;\n\n  static sleep(ti", "ngify(oldValue)} newvalue is ${JSON.stringify", "ole.info(\"eventData value is\");\n      if (eve", "  expect(obj.$attrs.value).assertEqual('50.00", "xpect(objNew.$attrs.value).assertEqual('-10.0", "elected(2)\n        .value('TTT')\n        .val", "n() {\n      Gauge({ value: 0, min: 0, max: 10", "g\"},\n              {value:'bbb',icon: \"/image", "ue = eventData.data.value;\n      }\n      if (", ") {\n      Text(this.value)\n        .key('text", "\n        .onChange((value: boolean) => {\n    ", "y(\"gauge\")\n        .value(`${this.gaugeValue}", "ckbox2 change is' + value)\n          })\n     ", "aExample {\n  @State value: string = 'Text';\n ", "ckbox3 change is' + value)\n          })\n     ", "() {\n      Select([{value:'aaa',icon: \"/image", "lue('TTT')\n        .value(this.value)\n       ", "         .onChange((value: boolean) => {\n    "], "files": ["listItemGroupProps.test.js", "pathProps.test.js", "dividerProps.test.js", "tabContentProps.test.js", "ListItemJsunit.test.ets", "textProps.test.js", "ParallelGestureJsunit.test.ets", "toolbarProps.test.js", "Navigation.ets", "TextPickerJsunit.test.ets", "polylineProps.test.js", "Progress.ets", "Panel.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "toolbarItemProps.test.js", "TapGesture.test.ets", "Rating.ets", "badgeProps.test.js", "PriorityGestureJsunit.test.ets", "dialogProps.test.js", "textArea.ets", "textInput.ets", "formProps.test.js", "SelectJsunit.test.ets", "circleProps.test.js", "Slider.ets", "SourceTypeJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "PanelJsunit.test.ets", "PanGestureJsunit.test.ets", "Counter.ets", "gauge.ets", "ButtonJsunit.test.ets", "StepperJsunit.test.ets", "sideBar.ets", "refreshProps.test.js", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "TextArea.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "ratingProps.test.js", "Utils.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "textPickerDialog.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "lineProps.test.js", "popupProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "videoProps.test.js", "GaugeJsunit.test.ets", "optionProps.test.js", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "checkbox.ets", "QrcodeJsunit.test.ets", "TextAreaJsunit.test.ets", "pieceProps.test.js", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "gridColProps.test.js", "fontWeight.ets", "buttonProps.test.js", "animateProps.test.js", "animate.ets", "ContentStorage.test.ets", "BadgeJsunit.test.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "divProps.test.js", "switchProps.test.js", "TextInput.ets", "radio.ets", "rating.ets", "ellipseProps.test.js", "priorityGesture.ets", "DataPanel.ets", "chartProps.test.js", "SliderJsunit.test.ets", "progress.ets", "AlertDialog.ets", "sliderProps.test.js", "WebPage.ets", "swiperProps.test.js", "polygonProps.test.js", "NavigatorJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "SwiperJsunit.test.ets", "areaChange.ets", "tspanProps.test.js", "parallelGesture.ets", "imageProps.test.js", "select.ets", "listProps.test.js", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "panelProps.test.js", "search.ets", "panel.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeInterface", "api_method_name": "step", "api_method_all": "step?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 472, "since": 8, "api_used": "\u662f", "lines": ["this.start,\n        step: this.step,\n       ", "      console.info('stepperTest_0200 END');\n", "       console.log(\"stepperTest_0200 change ", "        uri: 'pages/stepper',\n      }\n      ", "      console.info(\"stepperTest_0300 start t", "y: 0 })\n      .key('stepperItem2')\n\n      St", "      console.info(\"stepperTest_0100 compone", " overLayJsunit();\n  stepperJsunit();\n  swipe", ");\n    });\n\n    it('stepperTest_0100', 0, as", "      console.info('stepperTest_0300 END');\n", "  console.info(\"get stepper state success \" ", "{\n    console.info('stepper page show called", ");\n    });\n\n    it('stepperTest_0300', 0, as", "s));\n        if (!(\"stepper\" == pages.name))", "t.Center)\n    .key('stepper')\n  }\n\n  onPageS", "t.test.ets';\nimport stepperJsunit from './St", "      console.info(\"stepperTest_0300 compone", "      console.info('stepperTest_0300v START'", "\n        step: this.step,\n        loop: this", "ean = true\n  @State step: number = 50\n  @Sta", ");\n    });\n\n    it('stepperTest_0200', 0, as", "y: 0 })\n      .key('stepperItem1')\n\n      St", "      console.info('stepperTest_0100 START')", " getInspectorByKey('stepper');\n      let obj", "{\n    console.info(\"stepper page stateChangC", "      console.info(\"stepper page state chang", "inish')\n      .key('stepperItem4')\n    }\n   ", "      console.info(\"stepperTest_0200 start t", "      console.info('stepperTest_0400 START')", "      console.info('stepperTest_0100 END');\n", "      console.info(\"stepperTest_0200 compone", " console.info(\"push stepper page success \" +", "      console.info(\"stepper after each calle", "rt default function stepperJsunit() {\n  desc", "      console.info('stepperTest_0200 START')", "nit() {\n  describe('stepperTest', function (", ");\n    });\n\n    it('stepperTest_0400', 0, as", "console.error(\"push stepper page error: \" + ", "dState)\n      .key('stepperItem3')\n\n      St", "       console.log(\"stepperTest_0300 change ", " getInspectorByKey('stepper');\n      console"], "files": ["ratingProps.test.js", "List.test.js", "Utils.ets", "Stepper.ets", "Slider.ets", "StepperJsunit.test.ets", "rating.ets", "commonComponentJsApi.test.js", "SliderJsunit.test.ets", "stepperItemProps.test.js", "sliderProps.test.js", "marquee.ets", "Rating.ets", "index.js", "stepper.ets", "slider.ets", "RatingJsunit.test.ets", "ScrollBar.ets", "List.test.ets", "Marquee.ets", "stepperProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeInterface", "api_method_name": "loop", "api_method_all": "loop?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 85, "since": 8, "api_used": "\u662f", "lines": ["r)\n      .loop(this.loop)\n      .duration(th", "nsole.log('Swiper\u2018s loop is ' + JSON.stringi", "opTrue,\n            loopPropNone : this.loop", "opNone,\n            loopPropFalse : this.loo", "opTrue,\n            loopPropFalse: this.loop", "se = this.$element(\"loopPropFalse\").getInspe", "op = eventData.data.loop;\n      }\n      if (", "xpect(objNew.$attrs.loop).assertEqual('true'", "pFalse,\n            loopPropTrue : this.loop", "umber = 50\n  @State loop: number = 3\n  @Stat", "ata: {\n            \"loop\": \"true123\"\n       ", "ctor()\n        this.loopPropNone = this.$ele", " this.step,\n        loop: this.loop,\n       ", "pFalse,\n            loopPropTrue: this.loopP", "one : null,\n        loopPropFalse : null,\n  ", "alse: null,\n        loopPropTrue: null,\n    ", "\n        loop: this.loop,\n        fromStart:", " },\n                loop: {\n                ", "tringify(obj.$attrs.loop));\n      console.lo", "loopPropNone : this.loopPropNone,\n          ", " loopPropTrue: this.loopPropTrue,\n          ", "tringify(obj.$attrs.loop))\n      console.log", "ull) {\n        this.loop = eventData.data.lo", "rue : null,\n        loopPropNone : null,\n   ", "ean = true\n  @State loop: boolean = false\n  ", "True: null,\n        loopPropFalse: null,\n   ", "oopPropFalse : this.loopPropFalse,\n         ", "  expect(obj.$attrs.loop).assertEqual('false", "lse : null,\n        loopPropTrue : null,\n   ", "ontrolsss)\n        .loop(true)\n        .obje", "ata: {\n            \"loop\": true\n          }\n", "xpect(objNew.$attrs.loop).assertEqual('false", "s.indicator)\n      .loop(this.loop)\n      .d", "nsole.log(\"cd video loop\" + JSON.stringify(o", "loopPropFalse: this.loopPropFalse,\n         ", "ue = this.$element(\"loopPropTrue\").getInspec", "ctor()\n        this.loopPropFalse = this.$el", " if (eventData.data.loop != null) {\n        ", "loopPropTrue : this.loopPropTrue,\n          ", "ctor()\n        this.loopPropTrue = this.$ele", "icator(true)\n      .loop(false)\n      .durat"], "files": ["Marquee.ets", "Video.ets", "VideoJsunit.test.ets", "swiperProps.test.js", "videoProps.test.js", "swiper.ets", "marqueeProps.test.js", "marquee.ets", "index.js", "SwiperJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeInterface", "api_method_name": "fromStart", "api_method_all": "fromStart?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["    fromStart: this.fromStart,\n        src: this.", " this.loop,\n        fromStart: this.fromStart,\n  ", "an = false\n  @State fromStart: boolean = true\n  @"], "files": ["Marquee.ets", "marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeInterface", "api_method_name": "src", "api_method_all": "src: string }): MarqueeAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 90, "since": 8, "api_used": "\u662f", "lines": ["  if(eventData.data.srcValue != null) {\n   ", "mage();\n        img.src = 'common/images/su", " if (eventData.data.srcValue != null) {\n   ", "jpg\"},\n            {src: \"/common/images/im", "      {\n            src: '/comment/bg1.jpg'", "number = 3\n  @State src: string = \"Running ", "ges: [\n            {src: \"/common/images/im", "r sres = obj.$attrs.src.slice(res, res + 16", "      {\n            src: '/comment/bg.jpg',", "      {\n            src: '/comment/bg2.jpg'", "ew Image();\n    img.src = \"/images/bg.jpg\";", "{\n        src: this.srcs,\n        previewUr", ",\n        src: this.src\n      })\n        .f", "omponent {\n  @State srcs: string = \"/images", "  expect(obj.$attrs.src.slice(res, res + 16", "    Video({\n        src: this.srcs,\n       ", "omponent {\n  @State srcs: string = '/resour", ",\n        src: this.src\n      })\n        .k", "ar res = obj.$attrs.src.indexOf('rawfile/te", "     }\n\n      Web({ src: $rawfile('indextes", " is: \" + obj.$attrs.src);\n      console.inf", "ample.com'\n  @State src: string = this.on\n ", "est_0200 obj.$attrs.src is: \" + obj.$attrs.", "      {\n            src: '/comment/bg3.jpg'", ".fromStart,\n        src: this.src\n      })\n", "mage();\n        img.src = 'common/images/im", "ull) {\n        this.srcValue = eventData.da", "ue = eventData.data.srcValue;\n      }\n    }", "      {\n            src: '/comment/bg4.jpg'"], "files": ["backgroundAndSizeSetting.ets", "imageFit.ets", "ImageJsunit.test.ets", "Video.ets", "videoProps.test.js", "global.ets", "TextJsunit.test.ets", "video.ets", "WebPage.ets", "marquee.ets", "imageProps.test.js", "animationStatus.ets", "background.ets", "imageAnimator.ets", "index.js", "fillMode.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_all": "declare class MarqueeAttribute extends CommonMethod<MarqueeAttribute> {\n  \n  fontColor(value: ResourceColor): MarqueeAttribute;\n\n  \n  fontSize(value: Length): MarqueeAttribute;\n\n  \n  allowScale(value: boolean): MarqueeAttribute;\n\n  \n  fontWeight(value: number | FontWeight | string): MarqueeAttribute;\n\n  \n  fontFamily(value: string | Resource): MarqueeAttribute;\n\n  \n  onStart(event: () => void): MarqueeAttribute;\n\n  \n  onBounce(event: () => void): MarqueeAttribute;\n\n  \n  onFinish(event: () => void): MarqueeAttribute;\n}", "api_method_name": "MarqueeAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "fontColor", "api_method_all": "fontColor(value: ResourceColor): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 384, "since": 8, "api_used": "\u662f", "lines": ["Size(35)\n          .fontColor(Color.Blue)\n       ", " {\n                \"fontColor\": this.fontColor,\n ", "ize(9).width('90%').fontColor(0xCCCCCC)\n        R", "hrink').fontSize(9).fontColor(0xCCCCCC).width('90", "extStyle {\n  @State fontColor: Color = Color.Red;", "grid').fontSize(20).fontColor(Color.Black).width(", "pect(eventData.data.fontColor).assertEqual(Color.", "\"[testTextStyle001] fontColor: \" + obj.$attrs.fon", "Blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ness').fontSize(15).fontColor(0xCCCCCC).width('90", "rast').fontSize(15).fontColor(0xCCCCCC).width('90", "ty 4').fontSize(20).fontColor(Color.Black).width(", "s rolling\"\n  @State fontColor: Color = Color.Blue", "blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ive text')\n        .fontColor(Color.Red)\n        ", "lor) {\n        this.fontColor = eventData.data.fo", "vert').fontSize(15).fontColor(0xCCCCCC).width('90", "'marquee')\n        .fontColor(this.fontColor)\n   ", "      .fontSize(12).fontColor(0xCCCCCC).maxLines(", "adow').fontSize(15).fontColor(0xCCCCCC).width('90", "tate').fontSize(15).fontColor(0xCCCCCC).width('90", "    .fontColor(this.fontColor)\n        .colorBlen", "  \"fontColor\": this.fontColor,\n              }\n  ", "xGrow\").fontSize(9).fontColor(0xCCCCCC).width('90", " row').fontSize(20).fontColor(Color.Black).width(", "  expect(obj.$attrs.fontColor).assertEqual('#FFFF", "e(20)\n        .key('fontColor')\n\n      Text(`text", "Items').fontSize(9).fontColor(0xCCCCCC).width('90", "or = eventData.data.fontColor;\n      } else if (e", "pro text')\n        .fontColor(Color.Orange)\n     ", "cale').fontSize(15).fontColor(0xCCCCCC).width('90", "ntColor}`)\n        .fontColor(this.fontColor)\n   ", "lor: \" + obj.$attrs.fontColor);\n      expect(obj.", "\"[testTextStyle002] fontColor: \" + obj.$attrs.fon", "ageShow() {\n    let fontColorChangeEvent = {\n    ", "    .fontColor(this.fontColor)\n        .fontSize(", " getInspectorByKey('fontColor');\n      console.in", "  events_emitter.on(fontColorChangeEvent, this.te", "rate').fontSize(15).fontColor(0xCCCCCC).width('90", "Basis').fontSize(9).fontColor(0xCCCCCC).width('90", " state is: ' + this.fontColor);\n          try {\n ", "ata: {\n            \"fontColor\": Color.Blue\n      ", "t font color ${this.fontColor}`)\n        .fontCol", "nSelf\").fontSize(9).fontColor(0xCCCCCC).width('90", " if (eventData.data.fontColor) {\n        this.fon"], "files": ["enumsHorizontalAlign.ets", "imageFit.ets", "Span.ets", "column.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "textArea.ets", "textInput.ets", "transForm.ets", "path.ets", "Column.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "PatternLock.ets", "Stepper.ets", "enumsImage.ets", "PieceCode.ets", "textStyle.ets", "imageEffects.ets", "textClock.ets", "layoutConstraints.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "Path.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "TextTimerJsunit.test.ets", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "ColumnSplit.ets", "colorGradient.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "fontSize", "api_method_all": "fontSize(value: Length): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 588, "since": 8, "api_used": "\u662f", "lines": ["lor.Green)\n        .fontSize(this.fontSize)\n    ", "w').key(\"flexGrow\").fontSize(9).fontColor(0xCCCC", "t('4')\n            .fontSize(20)\n            .us", "ge Two')\n          .fontSize(35)\n          .font", "  Text('grayscale').fontSize(15).fontColor(0xCCC", "     Text('shadow').fontSize(15).fontColor(0xCCC", "  Text('hueRotate').fontSize(15).fontColor(0xCCC", "t('1')\n            .fontSize(20)\n            .us", "     Text('invert').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backdr", "ETS TEST')\n        .fontSize(50)\n        .fontWe", "g container: grid').fontSize(20).fontColor(Color", "(60)\n              .fontSize(18)\n              .", "0)\n                .fontSize(16)\n               ", "ext('default text').fontSize(20)\n\n      Text(`te", " {\n                \"fontSize\": this.fontSize,\n  ", "   \"fontSize\": this.fontSize,\n              }\n  ", "2cb)\n              .fontSize(40)\n              .", "     Text('Center').fontSize(25)\n        }\n     ", "     .fontSize(this.fontSize)\n        .allowScal", "bb2cb)\n            .fontSize(20)\n            .as", "').key(\"alignSelf\").fontSize(9).fontColor(0xCCCC", "  Text('font blur').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backgr", "ng container: row').fontSize(20).fontColor(Color", "Color.Red;\n  @State fontSize: string = 20;\n  @St", "xt font size ${this.fontSize}`)\n        .fontSiz", "enter)\n            .fontSize(20)\n        }, item", "fontColor)\n        .fontSize(20)\n        .key('f", "t('3')\n            .fontSize(20)\n            .us", "e four')\n          .fontSize(35)\n          .font", " Text('brightness').fontSize(15).fontColor(0xCCC", "margin(30)\n        .fontSize(20)\n        .onClic", " Text('alignItems').fontSize(9).fontColor(0xCCCC", " state is: ' + this.fontSize);\n          try {\n ", "displayPriority 4').fontSize(20).fontColor(Color", " layer')\n          .fontSize(12).fontColor(0xCCC", "olor.Blue;\n  @State fontSize: number = 50;\n  @St", "  Text('flexBasis').fontSize(9).fontColor(0xCCCC", "   Text('saturate').fontSize(15).fontColor(0xCCC", "ext('backdropBlur').fontSize(15).fontColor(0xCCC", "ge One')\n          .fontSize(35)\n          .font", "   Text('contrast').fontSize(15).fontColor(0xCCC", "t('2')\n            .fontSize(20)\n            .us", "       Text('Left').fontSize(25)\n        }\n     ", "      Text('Right').fontSize(25)\n        }\n     ", " Three')\n          .fontSize(35)\n          .font", " Text('flexShrink').fontSize(9).fontColor(0xCCCC"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "placement.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "Stack.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "stepper.ets", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "MarqueeJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "lazyForEach.ets", "listItem.ets", "grid.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "rating.ets", "Path.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "Toggle.ets", "slider.ets", "Calendar.ets", "refresh.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "allowScale", "api_method_all": "allowScale(value: boolean): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [".fontSize)\n        .allowScale(false)\n        .fon", "ntSize(50)\n        .allowScale(false)\n        .fon"], "files": ["Marquee.ets", "marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "fontWeight", "api_method_all": "fontWeight(value: number | FontWeight | string): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 147, "since": 8, "api_used": "\u662f", "lines": [": FoodData\n  @State fontWeight: FontWeight = FontW", "\"[testTextStyle020] fontWeight: \" + obj.$attrs.fon", "Size(17.4)\n        .fontWeight(this.fontWeight)\n  ", "ata: {\n            \"fontWeight\": 0x80000000\n      ", "(2)\n    }\n    .key('fontWeight')\n  }\n\n  build() {\n", "ata: {\n            \"fontWeight\": 400\n          }\n ", "ata: {\n            \"fontWeight\": 0x7FFFFFFF\n      ", "  expect(obj.$attrs.fontWeight).assertEqual('FontW", "ght) {\n        this.fontWeight = eventData.data.fo", " getInspectorByKey('fontWeight');\n      console.in", "ATTRS_FONTWEIGHT = 'fontWeight'\nconst ATTRS_FONTST", "ntSize(50)\n        .fontWeight(FontWeight.Bold)\n  ", "\"[testTextStyle018] fontWeight: \" + obj.$attrs.fon", "   .fontWeight(this.fontWeight)\n        .fontSize(", "tWeight}`)\n        .fontWeight(this.fontWeight)\n  ", "gCallBack);\n    let fontWeightChangeEvent = {\n    ", "t fontWeight ${this.fontWeight}`)\n        .fontWei", "  events_emitter.on(fontWeightChangeEvent, this.te", ".fontSize)\n        .fontWeight(FontWeight.Bold)\n  ", "le.Italic;\n  @State fontWeight: string = 700;\n  @S", "ht = eventData.data.fontWeight;\n      } else if (e", "e(20)\n        .key('fontWeight')\n\n      Text(`text", "le.Italic)\n        .fontWeight(700)\n        .fontF", "ata: {\n            \"fontWeight\": 'error'\n         ", "ale(false)\n        .fontWeight(FontWeight.Bold)\n  ", "ght: \" + obj.$attrs.fontWeight);\n      expect(obj.", "\"[testTextStyle017] fontWeight: \" + obj.$attrs.fon", "le.Normal)\n        .fontWeight(400)\n        .fontF", ")\n\n      Text(`text fontWeight ${this.fontWeight}`", "\"[testTextStyle016] fontWeight: \" + obj.$attrs.fon", "\"[testTextStyle019] fontWeight: \" + obj.$attrs.fon", "   .fontWeight(this.fontWeight)\n        .layoutWei", " if (eventData.data.fontWeight) {\n        this.fon"], "files": ["systemRouterA.ets", "RowSplit.ets", "gridPage.ets", "Slider.ets", "PanDirectionJsunit.test.ets", "Qrcode.ets", "Text.ets", "textStyle.ets", "Counter.ets", "Stack.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "Constants.ets", "ohosRouterB.ets", "Progress.ets", "Blank.ets", "ColumnSplit.ets", "Prop.ets", "Scroll.ets", "FormComponentPage.ets", "GestureModeJsunit.test.ets", "TextStyleJsunit.test.ets", "marquee.ets", "Rating.ets", "AppStorage.ets", "TextArea.ets", "QrCode.ets", "GridContainer.ets", "direction.ets", "ohosRouterA.ets", "index.ets", "Link.ets", "systemRouterB.ets", "TextInputJsunit.test.ets", "TextAreaJsunit.test.ets", "textArea.ets", "textInput.ets", "Button.ets", "Image.ets", "Calendar.ets", "fontWeight.ets", "ScrollBar.ets", "Badge.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "fontFamily", "api_method_all": "fontFamily(value: string | Resource): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 48, "since": 8, "api_used": "\u662f", "lines": ["gCallBack);\n    let fontFamilyChangeEvent = {\n    ", "\"[testTextStyle023] fontFamily: \" + obj.$attrs.fon", "ily: \" + obj.$attrs.fontFamily);\n      expect(obj.", "  expect(obj.$attrs.fontFamily).assertEqual('cursi", "\"[testTextStyle022] fontFamily: \" + obj.$attrs.fon", "  events_emitter.on(fontFamilyChangeEvent, this.te", "  expect(obj.$attrs.fontFamily).assertEqual('sans-", "e(20)\n        .key('fontFamily')\n\n      Text('red ", "tringify(obj.$attrs.fontFamily));\n      console.lo", "fontStyle)\n        .fontFamily(\"sans-serif\")\n     ", "  expect(obj.$attrs.fontFamily).assertEqual(\"sans-", "eight(700)\n        .fontFamily('cursive')\n        ", "ht.Bold)\n          .fontFamily('cursive')\n        ", "eight(400)\n        .fontFamily('source-sans-pro,cu", "ight.Bold)\n        .fontFamily('cursive')\n        ", "onsole.log(\"cd text fontFamily\" + JSON.stringify(o", "ily) {\n        this.fontFamily = eventData.data.fo", "ATTRS_FONTFAMILY = 'fontFamily'\nconst ATTRS_FONTWE", "tFamily}`)\n        .fontFamily(this.fontFamily)\n  ", "99')\n              .fontFamily('source-sans-pro,cu", "ly = eventData.data.fontFamily;\n      } else {\n   ", "t fontFamily ${this.fontFamily}`)\n        .fontFam", "ata: {\n            \"fontFamily\": 'Arial'\n         ", "\"[testTextStyle021] fontFamily: \" + obj.$attrs.fon", "  expect(obj.$attrs.fontFamily).assertEqual('Arial", "  expect(obj.$attrs.fontFamily).assertEqual('error", " getInspectorByKey('fontFamily');\n      console.in", " if (eventData.data.fontFamily) {\n        this.fon", "ing = 700;\n  @State fontFamily: string = 'sans-ser", "ight.Bold)\n        .fontFamily(\"sans-serif\")\n     ", "ing(5)\n            .fontFamily(\"sans-serif\")\n     ", "   .fontFamily(this.fontFamily)\n        .fontSize(", ")\n\n      Text(`text fontFamily ${this.fontFamily}`", "ata: {\n            \"fontFamily\": 'error'\n         "], "files": ["TextInputJsunit.test.ets", "textStyle.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "textArea.ets", "textInput.ets", "Constants.ets", "sideBar.ets", "TextArea.ets", "Marquee.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "onStartevent", "api_method_all": "onStart(event: () => void): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "onStartevent", "api_method_all": "onStart(event: () => void): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "onBounceevent", "api_method_all": "onBounce(event: () => void): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "onBounceevent", "api_method_all": "onBounce(event: () => void): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "onFinishevent", "api_method_all": "onFinish(event: () => void): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "MarqueeAttribute", "api_method_name": "onFinishevent", "api_method_all": "onFinish(event: () => void): MarqueeAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}