{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\canvas", "api": [{"api_class_name": "CanvasGradient", "api_method_all": "declare class CanvasGradient {\n  \n  addColorStop(offset: number, color: string): void;\n}", "api_method_name": "CanvasGradient", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["  expect(\"pages/obj_CanvasGradient/router/\").assertEqu", "* @tc.name      testCanvasGradientComponent\n     * @tc", "sole.info(\"push obj_CanvasGradient page success \" + JS", "ole.error(\"push obj_CanvasGradient page error \" + JSON", "e.info(\"[router.obj_CanvasGradient] getState\" + JSON.s", "    uri: 'pages/obj_CanvasGradient/router/index'\n     ", "     */\n    it('testCanvasGradientComponent', 0, async"], "files": ["commonComponentJsApi.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasGradient", "api_method_name": "addColorStop", "api_method_all": "addColorStop(offset: number, color: string): void;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [");\n        gradient.addColorStop(0,'#00ffff');\n     ", "0, 'red');\n    grad.addColorStop(0.5, 'white');\n    ", "1970, 80);\n    grad.addColorStop(0.0, 'red');\n    gr", " 'white');\n    grad.addColorStop(1.0, 'green');\n    ", "50, 2000);\n    grad.addColorStop(0.0, 'red');\n    gr", ");\n        gradient.addColorStop(1,'#ffff00');\n     "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPath", "api_method_all": "declare class CanvasPath {\n  \n  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;\n\n  \n  arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\n\n  \n  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\n\n  \n  closePath(): void;\n\n  \n  ellipse(\n    x: number,\n    y: number,\n    radiusX: number,\n    radiusY: number,\n    rotation: number,\n    startAngle: number,\n    endAngle: number,\n    counterclockwise?: boolean,\n  ): void;\n\n  \n  lineTo(x: number, y: number): void;\n\n  \n  moveTo(x: number, y: number): void;\n\n  \n  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\n\n  \n  rect(x: number, y: number, w: number, h: number): void;\n}", "api_method_name": "CanvasPath", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPath", "api_method_name": "arc", "api_method_all": "arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;", "api_type": "", "api_args_count": 6, "api_level": 11, "api_used_count": 393, "since": 8, "api_used": "\u662f", "lines": [");\n    this.context.arc(20, 2130, 50, 0, 6.", "expect(obj.$attrs.searchButton).assertEqual", "searchButton(this.searchButton)\n        .ke", "onsole.info('[testSearch002] START');\n     ", "console.info(\"get search success \" + JSON.s", "console.info(\"get search state success \" + ", "@Component\nstruct SearchExample {\n  @State ", "ect(objNew.$attrs.searchButton).assertEqual", "      uri: 'pages/search',\n      }\n      tr", " = eventData.data.searchButton;\n      }\n   ", "f (eventData.data.searchButton != null) {\n ", "a: {\n            \"searchButton\": \"5\"\n      ", "etInspectorByKey('search');\n      console.i", ");\n    this.context.arc(180, 650, 50, 0, 6.", "    console.info(\"search after each called\"", "hangevalue)\n      Search({ value: '', place", " default function searchJsunit() {\n  descri", "etInspectorByKey('search');\n      let objNe", "   .searchButton('search')\n        .textFon", "onsole.info(\"[testSearch002] component objN", "on)\n        .key('search')\n        .placeho", "State controller: SearchController= new Sea", ");\n    this.context.arcTo(80, 20 + 1500, 80", "onsole.info(\"[testSearch001] component strJ", " });\n\n    it('testSearch002', 0, async func", "    console.info(\"search page state change ", "extFont)\n        .searchButton(this.searchB", "Type(EnterKeyType.Search)\n          .placeh", "ation() {\n        Search({ value: '', place", "xt.stroke();\n  }\n\n  arcTo() {\n    this.cont", "nsole.error(\"push search page error \" + JSO", "chController= new SearchController()\n  @Sta", "onsole.info('[testSearch001] START');\n     ", "oller })\n        .searchButton('search')\n  ", "test.ets';\nimport searchJsunit from './Sear", "    console.info('search page show called')", "StatusJsunit();\n  searchJsunit();\n  scrollB", " });\n\n    it('testSearch001', 0, async func", "onsole.info(\"push search page success \" + J", "onsole.info(\"[testSearch002] start to publi", "l) {\n        this.searchButton = eventData.", "console.log(\"[testSearch002] change compone", ":Font=10\n  @State searchButton:number=10\n\n ", "\n              this.arcTo();\n              ", "rchJsunit from './SearchJsunit.test.ets';\ni"], "files": ["TextInputJsunit.test.ets", "Navigation.ets", "List.test.js", "SearchJsunit.test.ets", "TextInput.ets", "progressProps.test.js", "List.test.ets", "canvas.ets", "commonComponentJsApi.test.js", "inputProps.test.js", "index.js", "search.ets", "navigation.ets", "searchProps.test.js", "buttonProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPath", "api_method_name": "arcTo", "api_method_all": "arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;", "api_type": "", "api_args_count": 5, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["0, 20);\n        ctx.arcTo(70, 10, 70, 20, 30)", "h2D();\n        path.arcTo(75, 10, 75, 35, 25)", "\n              this.arcTo();\n              th", ");\n    this.context.arcTo(80, 20 + 1500, 80, ", "xt.stroke();\n  }\n\n  arcTo() {\n    this.contex"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPath", "api_method_name": "bezierCurveTo", "api_method_all": "bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;", "api_type": "", "api_args_count": 6, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": [", 10);\n        path.bezierCurveTo(10, 50, 100, 50, 10", "\n              this.bezierCurveTo();\n              th", ");\n    this.context.bezierCurveTo(20, 100 + height, 2", "0, 10);\n        ctx.bezierCurveTo(20, 40, 80, 40, 100", ", 250, 100);\n  }\n\n  bezierCurveTo() {\n    let height "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPath", "api_method_name": "closePath", "api_method_all": "closePath(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": [");\n    this.context.closePath();\n    this.context", "0, 60);\n        ctx.closePath();\n        ctx.stro", ");\n    this.context.closePath();\n  }\n\n  restore()", ", 80);\n        path.closePath();\n        ctx.stro", "\n              this.closePath();\n              th", "xt.stroke();\n  }\n\n  closePath() {\n    this.contex"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPath", "api_method_name": "ellipse", "api_method_all": "ellipse(\n    x: number,\n    y: number,\n    radiusX: number,\n    radiusY: number,\n    rotation: number,\n    startAngle: number,\n    endAngle: number,\n    counterclockwise?: boolean,\n  ): void;", "api_type": "", "api_args_count": 8, "api_level": 11, "api_used_count": 421, "since": 8, "api_used": "\u662f", "lines": ["        uri: 'pages/ellipse/router/index'\n     ", "\n    console.info('[ellipse] page show called')", "h2D();\n        path.ellipse(50, 50, 25, 50, Mat", "console.error(\"push ellipseProps page error \" +", "ify(sendEventByKey('ellipse', 10, \"\")));\n      ", "      console.info(\"ellipse after each called\")", " console.info(\"push ellipse page success \" + JS", "console.error(\"push ellipse page error \" + JSON", "rt default function ellipseJsunit() {\n  describ", "  zIndexJsunit();\n  ellipseJsunit();\n  gaugeJsu", " console.info(\"push ellipseProps page success \"", "this.height}`).key('ellipse')\n    }.width('100%", "$type).assertEqual('ellipse')\n         console.", " console.info(\"push ellipse page result:\" + JSO", "      expect(\"pages/ellipse/router/\").assertEqu", "s));\n        if (!(\"ellipse\" == pages.name)) {\n", "     console.info(\"[ellipseProps] get globalThi", "t(80)\n        .key('ellipse')\n        .touchabl", " getInspectorByKey('ellipse');\n      let obj = ", "     console.info(\"[ellipse] page state change ", "  console.info(\"get ellipse state pages:\" + JSO", "Path();\n        ctx.ellipse(50, 50, 30, 60, Mat", "     console.info(\"[ellipseProps] get inspector", "console.error(\"push ellipse page error:\" + err)", "\n    console.info(\"[ellipse] page stateChangCal", "nit() {\n  describe('ellipseTest', function () {", "     console.info('[ellipsePropsJsTest] after e", "nsole.info(\"[router.ellipse] getState\" + JSON.s", "  console.info(\"get ellipse state pages.name:\" ", "        uri: 'pages/ellipse/prop/index'\n       ", "      console.info(\"ellipse beforeEach start\");", "        uri: 'pages/ellipse',\n      }\n      try", "     console.info('[ellipsePropsJsTest] before ", "t.test.ets';\nimport ellipseJsunit from './Ellip", "ex';\n \n \n describe('ellipsePropsJsTest', functi"], "files": ["index.js", "touchAble.ets", "List.test.js", "ellipse.ets", "TouchAbleJsunit.test.ets", "commonComponentJsApi.test.js", "EllipseJsunit.test.ets", "List.test.ets", "ellipseProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPath", "api_method_name": "lineTo", "api_method_all": "lineTo(x: number, y: number): void;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["0, 30);\n        ctx.lineTo(200, 30);\n        c", ");\n    this.context.lineTo(190, 160);\n    this", ");\n    this.context.lineTo(450, height);\n    t", ");\n    this.context.lineTo(400, 2220);\n    thi", ");\n    this.context.lineTo(70, 1360);\n    this", "(5, 5);\n        ctx.lineTo(70, 5);\n        ctx", "0, 10);\n        ctx.lineTo(80, 30);\n        ct", "0, 10);\n        ctx.lineTo(60, 15);\n        ct", ");\n    this.context.lineTo(320, 50);\n    this.", "70, 5);\n        ctx.lineTo(40, 60);\n        ct", ");\n    this.context.lineTo(220, 210 + height);", ", 40);\n        path.lineTo(120, 40);\n        p", "0, 10);\n        ctx.lineTo(100, 10);\n        c", ");\n    this.context.lineTo(450, 1260);\n    thi", ");\n    this.context.lineTo(370, 75);\n    this.", "0, 15);\n        ctx.lineTo(10, 40);\n        ct", ");\n    this.context.lineTo(430, 50);\n    this.", ", 40);\n        path.lineTo(80, 80);\n        pa", "80, 0);\n        ctx.lineTo(80, 160);\n        c", ");\n    this.context.lineTo(130, 162);\n    this", "0, 30);\n        ctx.lineTo(10, 50);\n        ct", ");\n    this.context.lineTo(110, 1300);\n    thi"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPath", "api_method_name": "moveTo", "api_method_all": "moveTo(x: number, y: number): void;", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 36, "since": 8, "api_used": "\u662f", "lines": ["';\n    this.context.moveTo(310, 1200);\n    thi", "miter';\n        ctx.moveTo(10, 10);\n        ct", "('2d');\n        ctx.moveTo(30, 20);\n        ct", " {\n    this.context.moveTo(30, 20 + 1500);\n   ", "';\n    this.context.moveTo(220, 10 + height);\n", "000ff';\n        ctx.moveTo(0, 30);\n        ctx", ");\n    this.context.moveTo(250, 2220);\n    thi", "Path();\n        ctx.moveTo(5, 5);\n        ctx.", ");\n    this.context.moveTo(30, 1300);\n    this", ");\n    this.context.moveTo(20 + width, 20 + he", "';\n    this.context.moveTo(370, 25);\n    this.", "round';\n        ctx.moveTo(10, 10);\n        ct", "000ff';\n        ctx.moveTo(80, 0);\n        ctx", ");\n    this.context.moveTo(10, 10 + height);\n ", "Path();\n        ctx.moveTo(10, 10);\n        ct", "';\n    this.context.moveTo(50, height);\n    th", "3;\n    this.context.moveTo(130, 155);\n    this", "h2D();\n        path.moveTo(80, 40);\n        pa", "it = 3;\n        ctx.moveTo(10, 10);\n        ct", "h2D();\n        path.moveTo(10, 10);\n        pa", "';\n    this.context.moveTo(220, 50);\n    this."], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPath", "api_method_name": "quadraticCurveTo", "api_method_all": "quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;", "api_type": "", "api_args_count": 4, "api_level": 11, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["xt.stroke();\n  }\n\n  quadraticCurveTo() {\n    let height ", "\n              this.quadraticCurveTo();\n              th", ", 10);\n        path.quadraticCurveTo(50, 50, 100, 10);\n ", "0, 10);\n        ctx.quadraticCurveTo(50, 50, 100, 10);\n ", ");\n    this.context.quadraticCurveTo(100 + width, 100 + "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPath", "api_method_name": "rect", "api_method_all": "rect(x: number, y: number, w: number, h: number): void;", "api_type": "", "api_args_count": 4, "api_level": 11, "api_used_count": 1870, "since": 8, "api_used": "\u662f", "lines": ["_top, \"right\": this.rect_right, \"bottom\": th", "st')\n        .listDirection(this.listDirecti", " 9];\n  @State listDirection: Axis = Axis.Ver", " + ']')[0]\n    this.rect_bottom = JSON.parse", " = JSON.parse('[' + rectInfo[1] + ']')[0]\n  ", " = JSON.parse('[' + rectInfo[0] + ']')[1]\n  ", "   direction: FlexDirection.Column,\n      al", " = JSON.parse('[' + rectInfo[0] + ']')[0]\n  ", "exDirection = FlexDirection.Row\n  private st", "ON.parse('[' + obj.$rect + ']')\n    console.", "\n            \"listDirection\": Axis.Horizonta", "0%')\n      Flex({ direction: FlexDirection.R", "irection(this.listDirection)\n        .divide", "({ direction: FlexDirection.Row, alignItems:", " = JSON.parse('[' + rectInfo[1] + ']')[1]\n  ", "ventData.data.listDirection != null) {\n     ", "y] rectInfo is: \" + rectInfo);\n    this.rect", "({ direction: FlexDirection.Row }) {\n       ", "({ direction: FlexDirection.Column, alignIte", "ght, \"bottom\": this.rect_bottom\n    }\n  }\n\n ", " rect_top;\n  static rect_right;\n  static rec", "t_left, \"top\": this.rect_top, \"right\": this.", "ventData.data.listDirection;\n      }\n      i", "ld() {\n    Flex({ direction: FlexDirection.R", "ct(obj.$attrs.listDirection).assertEqual('Ax", " + ']')[1]\n    this.rect_right = JSON.parse(", ".assertEqual('FlexDirection.Row');\n      con", "ss Utils {\n  static rect_left;\n  static rect", "xample {\n  @State direction: FlexDirection =", "ct_bottom;\n  static rect_value;\n\n  static sl", "\n        this.listDirection = eventData.data", "[1]\n    return this.rect_value = {\n      \"le", "attrs.constructor.direction).assertEqual('Fl", "rect_left;\n  static rect_top;\n  static rect_", "te direction: FlexDirection = FlexDirection.", "gify(obj));\n    let rectInfo = JSON.parse('[", "ld() {\n    Flex({ direction: FlexDirection.C", "\n    Flex({\n      direction: FlexDirection.C", "\n      \"left\": this.rect_left, \"top\": this.r", "ect_right;\n  static rect_bottom;\n  static re", " + ']')[0]\n    this.rect_top = JSON.parse('[", "[getInspectorByKey] rectInfo is: \" + rectInf", "rectInfo);\n    this.rect_left = JSON.parse('"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "longPressGesture.ets", "DragEventJsunit.test.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "geometryTransition.ets", "TapGesture.test.ets", "marquee.ets", "Rating.ets", "ScrollCodeJsunit.test.ets", "Divider.ets", "PriorityGestureJsunit.test.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "transition.ets", "Image.ets", "List.test.ets", "scrollCode.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "Text.ets", "PanGestureJsunit.test.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "tapGesture.ets", "FlexJsunit.test.ets", "flexDirection.ets", "AppStorageJsunit.test.ets", "edgeEffect.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "flex.ets", "Utils.ets", "marqueeProps.test.js", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "qrcodeProps.test.js", "AlphabetIndexer.ets", "SubscribaleAbstractJsunit.test.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "list.ets", "BackgroundJsunit.test.ets", "AppStorage.ets", "List.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "calendar.ets", "dragEvent.ets", "grid.ets", "Button.ets", "ScrollJsunit.test.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "List.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "DataPanel.ets", "FormComponentPage.ets", "WebPage.ets", "RowJsunit.test.ets", "index.js", "ohosRouterA.ets", "Link.ets", "listProps.test.js", "slider.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets", "colorGradient.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Path2D", "api_method_all": "declare class Path2D extends CanvasPath {\n  \n  addPath(path: Path2D, transform?: Matrix2D): void;\n\n  \n  constructor();\n\n  \n  constructor(path: Path2D);\n\n  \n  constructor(d: string);\n}", "api_method_name": "Path2D", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 19, "since": 8, "api_used": "\u662f", "lines": ["  expect(\"pages/obj_Path2D/router/\").assertEqu", "    uri: 'pages/obj_Path2D/router/index'\n     ", "ar path = ctx.createPath2D(\"M80 20 L40 100 L12", "r path2 = ctx.createPath2D();\n        path2.ad", "ar path = ctx.createPath2D();\n        path.ell", "ole.error(\"push obj_Path2D page error \" + JSON", "ar path = ctx.createPath2D();\n        path.arc", "  let path2Da = new Path2D(\"M250 150 L150 350 ", "ar path = ctx.createPath2D();\n        path.rec", "sole.info(\"push obj_Path2D page success \" + JS", "e.info(\"[router.obj_Path2D] getState\" + JSON.s", "     */\n    it('testPath2DComponent', 0, async", "ar path = ctx.createPath2D();\n        path.mov", "* @tc.name      testPath2DComponent\n     * @tc", "r path1 = ctx.createPath2D(\"M80 20 L40 100 L12", "  let path2Db = new Path2D();\n    path2Db.addP"], "files": ["canvas.ets", "commonComponentJsApi.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Path2D", "api_method_name": "addPath", "api_method_all": "addPath(path: Path2D, transform?: Matrix2D)", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["\n              this.addPath();\n              th", "text.save();\n  }\n\n  addPath() {\n    let path2Da", "th2D();\n    path2Db.addPath(path2Da);\n    this.", "2D();\n        path2.addPath(path1);\n        ctx"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Path2D", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Path2D", "api_method_name": "constructor", "api_method_all": "constructor(path: Path2D)", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Path2D", "api_method_name": "constructor", "api_method_all": "constructor(d: string)", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPattern", "api_method_all": "declare interface CanvasPattern {\n  \n  setTransform(transform?: Matrix2D): void;\n}", "api_method_name": "CanvasPattern", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasPattern", "api_method_name": "setTransform", "api_method_all": "setTransform(transform?: Matrix2D): void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [");\n    this.context.setTransform(1, 0, 0, 1, 0, 0);\n", "ffscreenCanvasCtx.resetTransform();\n        offscree", "\" + data);\n  }\n\n  resetTransform() {\n    this.contex", ", 100, 100);\n  }\n\n  setTransform() {\n    this.contex", ");\n    this.context.setTransform(1, 0.1, 0.01, 1, 10", "\n    this.context.resetTransform();\n  }\n\n  translate", "0 Z\");\n        path.setTransform(0.8, 0, 0, 0.4, 0, ", "\n              this.setTransform();\n              th"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_all": "declare interface TextMetrics {\n  \n  readonly actualBoundingBoxAscent: number;\n\n  \n  readonly actualBoundingBoxDescent: number;\n\n  \n  readonly actualBoundingBoxLeft: number;\n\n  \n  readonly actualBoundingBoxRight: number;\n\n  \n  readonly alphabeticBaseline: number;\n\n  \n  readonly emHeightAscent: number;\n\n  \n  readonly emHeightDescent: number;\n\n  \n  readonly fontBoundingBoxAscent: number;\n\n  \n  readonly fontBoundingBoxDescent: number;\n\n  \n  readonly hangingBaseline: number;\n\n  \n  readonly ideographicBaseline: number;\n\n  \n  readonly width: number;\n\n  \n  readonly height: number;\n}", "api_method_name": "TextMetrics", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "actualBoundingBoxAscent", "api_method_all": "readonly actualBoundingBoxAscent: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "actualBoundingBoxDescent", "api_method_all": "readonly actualBoundingBoxDescent: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "actualBoundingBoxLeft", "api_method_all": "readonly actualBoundingBoxLeft: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "actualBoundingBoxRight", "api_method_all": "readonly actualBoundingBoxRight: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "alphabeticBaseline", "api_method_all": "readonly alphabeticBaseline: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "emHeightAscent", "api_method_all": "readonly emHeightAscent: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "emHeightDescent", "api_method_all": "readonly emHeightDescent: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "fontBoundingBoxAscent", "api_method_all": "readonly fontBoundingBoxAscent: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "fontBoundingBoxDescent", "api_method_all": "readonly fontBoundingBoxDescent: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "hangingBaseline", "api_method_all": "readonly hangingBaseline: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "ideographicBaseline", "api_method_all": "readonly ideographicBaseline: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "width", "api_method_all": "readonly width: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1772, "since": 8, "api_used": "\u662f", "lines": ["temsColumn\")\n      .width('90%')\n      .borde", "thValue}`)\n        .width(200)\n        .heigh", ");\n        })\n    }.width('100%').height('100", "Stretch)\n          .width('33%')\n          .h", "s.alignItems)\n    }.width('100%').padding({ t", ")\n        }\n      }.width('90%').key('gridCon", "gnSelf,height:100').width('34%').height(100)\n", "hrink(2)\n          .width('40%')\n          .h", "ull) {\n        this.width = eventData.data.wi", "(\"img_width=\" + img.width);\n    console.log(\"", "blurValue)\n        .width('90%')\n        .hei", "s/bg.jpg\");\n    let width = img.width;\n    le", "ign.Center)\n      }.width('90%').height(120).", "le.log(\"imagebitmap_width=\" + width);\n    con", "fontColor(0xCCCCCC).width('90%')\n      Column", "pse().width(`${this.width}`).height(`${this.h", "fontColor(0xCCCCCC).width('90%')\n      Flex({", "fontColor(0xCCCCCC).width('90%')\n      Text()", "Shrink')\n          .width('40%')\n          .h", "fontColor(0xCCCCCC).width('90%')\n      Text('", "eExample {\n  @State width: string = \"200px\";\n", "agebitmap_width=\" + width);\n    console.log(\"", "lor(0xAFEEEE)\n    }.width('100%').margin({ to", "xBasis\")\n          .width('60%')\n          .h", "    let width = img.width;\n    let height = i", "%')\n      .border({ width: 1 })\n      .alignI", "enabled)\n    }\n    .width('100%')\n    .paddin", "t: 30 })\n    }\n    .width('100%').height('100", "sole.log(\"imageData_width=\" + imageData.width", "}\n    }.padding(30).width('100%')\n  }\n}", "Shrink\")\n          .width('50%')\n          .h", "    Text()\n        .width('90%')\n        .hei", " .height(200)\n    }.width('100%').margin({ to", "ey('ellipse')\n    }.width('100%').height('100", ") {\n      Ellipse().width(`${this.width}`).he", " {\n        Column().width('50%').height(30).b", "ckgroundImageSize({ width: 1200, height: 160 ", " if (eventData.data.width != null) {\n        ", "   console.log(\"img_width=\" + img.width);\n   ", ".key('flex')\n      .width('90%')\n      .heigh", "ignSelf,height:80').width('33%').height(80)\n ", "s.context)\n        .width('100%').height('40%", "width=\" + imageData.width);\n    console.log(\"", "fontColor(0xCCCCCC).width('90%')\n      Flex()", "th = eventData.data.width;\n      }\n      if (", "E)\n        Column().width('50%').height(30).b"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextMetrics", "api_method_name": "height", "api_method_all": "readonly height: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1455, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.height != null) {\n        ", "     .width('100%').height('40%').backgroundCo", "    }.width('100%').height('100%')\n  }\n}", "\"img_height=\" + img.height);\n  }\n}", "\n    .width('100%').height('100%').margin({ to", "width(200)\n        .height(200)\n    }.width('1", ".gridSpan)\n        .height(\"100%\")\n        .ba", "        })\n        .height(\"100%\")\n        .ba", "th(`${this.width}`).height(`${this.height}`).k", "   let height = img.height;\n    this.context.i", ":100').width('34%').height(100)\n          .bac", " img.width;\n    let height = img.height;\n    t", "dth('90%')\n        .height(40)\n        .fontSi", "   console.log(\"img_height=\" + img.height);\n  ", "sole.log(\"imageData_height=\" + imageData.heigh", "     }.width('90%').height(120).padding(10).ba", "ull) {\n        this.height = eventData.data.he", "h('50%')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .shadow", "eight=\" + imageData.height);\n  }\n\n  testImage(", "s('100')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .graysc", "h('33%')\n          .height(80)\n          .line", "le.log(\"imagebitmap_height=\" + height);\n  }\n\n ", "h('60%')\n          .height(100)\n          .lin", "= \"200px\";\n  @State height: string = \"200px\";\n", "h}`).height(`${this.height}`).key('ellipse')\n ", " Text('no alignSelf,height:80').width('33%').h", "xGrow(1)\n          .height(100)\n          .lin", "ht = eventData.data.height;\n      }\n    }\n  }\n", "gebitmap_height=\" + height);\n  }\n\n  testOffscr", "xGrow(2)\n          .height(100)\n          .lin", "lumn().width('50%').height(30).backgroundColor", "h('40%')\n          .height(100)\n          .lin", "Size({ width: 1200, height: 160 })\n        .ke", "    })\n            .height(50)\n            .ba", "width('90%')\n      .height(120)\n      .padding", "   })\n\n            .height(50)\n            .ba", "ridOffset)\n        .height(\"100%\")\n        .ba", "an')\n      }\n      .height(200)\n    }\n    .bac", " Text('no alignSelf,height:100').width('34%').", "t:80').width('33%').height(80)\n          .back", "    }.width('100%').height('100%')\n  }\n\n  test"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "AlertDialog.ets", "sliderProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageBitmap", "api_method_all": "declare class ImageBitmap {\n  \n  readonly height: number;\n\n  \n  readonly width: number;\n\n  \n  close(): void;\n\n  \n  constructor(src: string);\n\n  \n  constructor(data: PixelMap);\n}", "api_method_name": "ImageBitmap", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 49, "since": 8, "api_used": "\u662f", "lines": ["offscreen.transferToImageBitmap();\n        canvas.t", "    ctx.transferFromImageBitmap(bitmap);\n\n        p", "    ctx.transferFromImageBitmap(bitmap);\n    },\n\n  ", " canvas.transferFromImageBitmap(bitmap);\n        pr", " canvas.transferFromImageBitmap(bitmap);\n    }\n\n}", "{\n    let img = new ImageBitmap('/images/img.jpeg')", "ffContext.transferToImageBitmap();\n    this.context", "  expect(\"pages/obj_ImageBitmap/router/\").assertEqu", "('100%')\n  }\n\n  testImageBitmapSize() {\n    let img", "his.ctx.transferFromImageBitmap(bitmap);\n  }\n\n  tes", "e.info(\"[router.obj_ImageBitmap] getState\" + JSON.s", "* @tc.name      testImageBitmapComponent\n     * @tc", "\n          this.testImageBitmapSize();\n          th", "   this.transferFromImageBitmap();\n              th", "offscreen.transferToImageBitmap();\n        ctx.tran", "    ctx.transferFromImageBitmap(bitmap);\n        pr", "\n  }\n\n  transferFromImageBitmap() {\n    this.offCon", "message: 'function1 ImageBitmap:\\n' + JSON.stringif", "    ctx.transferFromImageBitmap(bitmap);\n    },\n\n}", "context.transferFromImageBitmap(image);\n  }\n\n  offS", "    ctx.transferFromImageBitmap(bitmap);\n    },\n   ", " canvas.transferFromImageBitmap(bitmap);\n\n        p", "offscreen.transferToImageBitmap();\n    this.ctx.tra", "{\n    let img = new ImageBitmap(\"/images/bg.jpg\");\n", "ole.error(\"push obj_ImageBitmap page error \" + JSON", "    uri: 'pages/obj_ImageBitmap/router/index'\n     ", "     */\n    it('testImageBitmapComponent', 0, async", "    ctx.transferFromImageBitmap(bitmap);\n    }\n\n}", "{\n    let img = new ImageBitmap('/images/ic_health_", "sole.info(\"push obj_ImageBitmap page success \" + JS"], "files": ["global.ets", "canvas2.ets", "commonComponentJsApi.test.js", "index.js", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageBitmap", "api_method_name": "close", "api_method_all": "close()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 83, "since": 8, "api_used": "\u662f", "lines": ["s.$element('prop1').close()\n    },\n    showPa", ").show()\n    },\n    closePanelPro3() {\n      ", "ent('simplePanel4').close()\n    },\n    showPa", "ent('simplePanel3').close()\n    },\n    showPa", ").show()\n    },\n    close(){\n        this.$el", "ent('simplePanel5').close()\n    },\n    showPa", ").show()\n    },\n    closePanel5() {\n        t", "ent('simplePanel7').close()\n    },\n    showPa", "ent('simplePanel6').close()\n    },\n    showPa", ");\n    this.context.closePath();\n    this.con", ").show()\n    },\n    closePanel() {\n        th", "tringify(obj.$attrs.closeEffect))\n      expec", "        })\n        .closeEffect(false)\n    }\n", ").show()\n    },\n    closePanelPro1() {\n      ", "    this.controller.close()\n            this.", ").show()\n    },\n    closePanelPro2() {\n      ", ").show()\n    },\n    closePanel3() {\n        t", "is.dialogController.close()\n        }).backgr", "0, 60);\n        ctx.closePath();\n        ctx.", "s.$element('prop2').close()\n    },\n    showPa", ").show()\n    },\n    closePanel6() {\n        t", ").show()\n    },\n    closePanel2() {\n        t", ").show()\n    },\n    closePanel4() {\n        t", "s.$element('event').close()\n    },\n    opengr", ");\n    this.context.closePath();\n  }\n\n  resto", "ment('simplePanel').close()\n    },\n    // \u5c5e\u6027\n", " console.log(\"panel closeEffect\" + JSON.strin", "        })\n        .closeEffect(true)\n      D", "xt.stroke();\n  }\n\n  closePath() {\n    this.co", "  expect(obj.$attrs.closeEffect).assertEqual(", "ece\")\n      Button('close')\n        .margin(3", "      console.info(\"close action state err: \"", ").show()\n    },\n    closePanel7() {\n        t", "ent('simplePanel1').close()\n    },\n    showPa", "\n              this.closePath();\n            ", "      console.info(\"close to emit action stat", "        })\n        .closeEffect(false)\n\n     ", "ent('simplePanel2').close()\n    },\n    showPa", ", 80);\n        path.closePath();\n        ctx.", ").show()\n    },\n    closePanel1() {\n        t"], "files": ["DataPanelJsunit.test.ets", "index.js", "PieceCode.ets", "canvas.ets", "customDialogController.ets", "DataPanel.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageBitmap", "api_method_name": "constructor", "api_method_all": "constructor(src: string)", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageBitmap", "api_method_name": "constructor", "api_method_all": "constructor(data: PixelMap)", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageBitmap", "api_method_name": "height", "api_method_all": "readonly height: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1455, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.height != null) {\n        ", "     .width('100%').height('40%').backgroundCo", "    }.width('100%').height('100%')\n  }\n}", "\"img_height=\" + img.height);\n  }\n}", "\n    .width('100%').height('100%').margin({ to", "width(200)\n        .height(200)\n    }.width('1", ".gridSpan)\n        .height(\"100%\")\n        .ba", "        })\n        .height(\"100%\")\n        .ba", "th(`${this.width}`).height(`${this.height}`).k", "   let height = img.height;\n    this.context.i", ":100').width('34%').height(100)\n          .bac", " img.width;\n    let height = img.height;\n    t", "dth('90%')\n        .height(40)\n        .fontSi", "   console.log(\"img_height=\" + img.height);\n  ", "sole.log(\"imageData_height=\" + imageData.heigh", "     }.width('90%').height(120).padding(10).ba", "ull) {\n        this.height = eventData.data.he", "h('50%')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .shadow", "eight=\" + imageData.height);\n  }\n\n  testImage(", "s('100')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .graysc", "h('33%')\n          .height(80)\n          .line", "le.log(\"imagebitmap_height=\" + height);\n  }\n\n ", "h('60%')\n          .height(100)\n          .lin", "= \"200px\";\n  @State height: string = \"200px\";\n", "h}`).height(`${this.height}`).key('ellipse')\n ", " Text('no alignSelf,height:80').width('33%').h", "xGrow(1)\n          .height(100)\n          .lin", "ht = eventData.data.height;\n      }\n    }\n  }\n", "gebitmap_height=\" + height);\n  }\n\n  testOffscr", "xGrow(2)\n          .height(100)\n          .lin", "lumn().width('50%').height(30).backgroundColor", "h('40%')\n          .height(100)\n          .lin", "Size({ width: 1200, height: 160 })\n        .ke", "    })\n            .height(50)\n            .ba", "width('90%')\n      .height(120)\n      .padding", "   })\n\n            .height(50)\n            .ba", "ridOffset)\n        .height(\"100%\")\n        .ba", "an')\n      }\n      .height(200)\n    }\n    .bac", " Text('no alignSelf,height:100').width('34%').", "t:80').width('33%').height(80)\n          .back", "    }.width('100%').height('100%')\n  }\n\n  test"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "AlertDialog.ets", "sliderProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageBitmap", "api_method_name": "width", "api_method_all": "readonly width: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1772, "since": 8, "api_used": "\u662f", "lines": ["temsColumn\")\n      .width('90%')\n      .borde", "thValue}`)\n        .width(200)\n        .heigh", ");\n        })\n    }.width('100%').height('100", "Stretch)\n          .width('33%')\n          .h", "s.alignItems)\n    }.width('100%').padding({ t", ")\n        }\n      }.width('90%').key('gridCon", "gnSelf,height:100').width('34%').height(100)\n", "hrink(2)\n          .width('40%')\n          .h", "ull) {\n        this.width = eventData.data.wi", "(\"img_width=\" + img.width);\n    console.log(\"", "blurValue)\n        .width('90%')\n        .hei", "s/bg.jpg\");\n    let width = img.width;\n    le", "ign.Center)\n      }.width('90%').height(120).", "le.log(\"imagebitmap_width=\" + width);\n    con", "fontColor(0xCCCCCC).width('90%')\n      Column", "pse().width(`${this.width}`).height(`${this.h", "fontColor(0xCCCCCC).width('90%')\n      Flex({", "fontColor(0xCCCCCC).width('90%')\n      Text()", "Shrink')\n          .width('40%')\n          .h", "fontColor(0xCCCCCC).width('90%')\n      Text('", "eExample {\n  @State width: string = \"200px\";\n", "agebitmap_width=\" + width);\n    console.log(\"", "lor(0xAFEEEE)\n    }.width('100%').margin({ to", "xBasis\")\n          .width('60%')\n          .h", "    let width = img.width;\n    let height = i", "%')\n      .border({ width: 1 })\n      .alignI", "enabled)\n    }\n    .width('100%')\n    .paddin", "t: 30 })\n    }\n    .width('100%').height('100", "sole.log(\"imageData_width=\" + imageData.width", "}\n    }.padding(30).width('100%')\n  }\n}", "Shrink\")\n          .width('50%')\n          .h", "    Text()\n        .width('90%')\n        .hei", " .height(200)\n    }.width('100%').margin({ to", "ey('ellipse')\n    }.width('100%').height('100", ") {\n      Ellipse().width(`${this.width}`).he", " {\n        Column().width('50%').height(30).b", "ckgroundImageSize({ width: 1200, height: 160 ", " if (eventData.data.width != null) {\n        ", "   console.log(\"img_width=\" + img.width);\n   ", ".key('flex')\n      .width('90%')\n      .heigh", "ignSelf,height:80').width('33%').height(80)\n ", "s.context)\n        .width('100%').height('40%", "width=\" + imageData.width);\n    console.log(\"", "fontColor(0xCCCCCC).width('90%')\n      Flex()", "th = eventData.data.width;\n      }\n      if (", "E)\n        Column().width('50%').height(30).b"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageData", "api_method_all": "declare class ImageData {\n  \n  readonly data: Uint8ClampedArray;\n\n  \n  readonly height: number;\n\n  \n  readonly width: number;\n\n  \n  constructor(width: number, height: number, data?: Uint8ClampedArray);\n}", "api_method_name": "ImageData", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 36, "since": 8, "api_used": "\u662f", "lines": ["  console.info('testImageDataProp START');\n      ", " this.context.createImageData(50, 50);\n    let im", "  console.info('testImageDataPropNone START');\n  ", "bitmap);\n  }\n\n  testImageData() {\n    var offscre", " 100);\n  }\n\n  createImageData() {\n    let imageDa", "sole.info(\"push obj_ImageData page success \" + JS", "            this.getImageData();\n              th", "ageData = ctx.createImageData(1,2)\n        prompt", "ole.error(\"push obj_ImageData page error \" + JSON", "         this.createImageData();\n              th", " = offCanvas2.createImageData(100, 100);\n    var ", "    this.context.putImageData(imageData, 250, 166", "ageData = ctx.createImageData(1,1)\n        prompt", "\n          this.testImageData();\n          this.t", " this.context.createImageData(80, 80);\n    for (v", " this.context.createImageData(100, 100);\n    cons", ";\n\n    \n    it('testImageDataPropNone', 0, async ", "         this.createImageDataByImageData();\n     ", "            this.putImageData();\n              th", "ata));\n  }\n\n  createImageDataByImageData() {\n    ", "    uri: 'pages/obj_ImageData/router/index'\n     ", "ageData = ctx.createImageData(2,1)\n        prompt", " this.context.createImageData(imageData);\n    con", "is.createImageDataByImageData();\n              th", "\n  createImageDataByImageData() {\n    let imageDa", "mgData));\n  }\n\n  getImageData() {\n    let imageDa", "* @tc.name      testImageDataComponent\n     * @tc", "  expect(\"pages/obj_ImageData/router/\").assertEqu", ";\n\n    \n    it('testImageDataProp', 0, async func", "a = this.context.getImageData(10, 10, 80, 80);\n  ", "     */\n    it('testImageDataComponent', 0, async", " height);\n  }\n\n  putImageData() {\n    let imageDa", "e.info(\"[router.obj_ImageData] getState\" + JSON.s"], "files": ["imageProps.test.js", "global.ets", "commonComponentJsApi.test.js", "index.js", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageData", "api_method_name": "constructor", "api_method_all": "constructor(width: number, height: number, data?: Uint8ClampedArray)", "api_type": "", "api_args_count": 3, "api_level": 11, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageData", "api_method_name": "data", "api_method_all": "readonly data: Uint8ClampedArray", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 2739, "since": 8, "api_used": "\u662f", "lines": [".isShow = eventData.data.isShow;\n      }\n   ", "is.text = eventData.data.text\n      }\n    }\n", "      if (eventData.data.gaugeValue != null)", "\n      if(eventData.data.alignItems != null)", "thValue = eventData.data.strokeWidthValue;\n ", "      if (eventData.data.alignSelf != null) ", "SON.parse(eventData.data.colorValues);\n     ", "s.width = eventData.data.width;\n      }\n    ", "      if (eventData.data.flexBasis != null) ", "      if (eventData.data.text != null) {\n   ", "= {\n                data: {\n                ", "      if (eventData.data.flexShrink != null)", "mOffset = eventData.data.offset;\n      } els", "      if (eventData.data.blurValue != null) ", "xShrink = eventData.data.flexShrink;\n      }", ".smSpan = eventData.data.span;\n        this.", "exBasis = eventData.data.flexBasis;\n      }\n", "ignSelf = eventData.data.alignSelf;\n      }\n", "      if (eventData.data.grayscaleValue != n", "geValue = eventData.data.gaugeValue;\n      }", "gnItems = eventData.data.alignItems;\n      }", "      if (eventData.data.height != null) {\n ", "imgData = imageData.data;\n    console.log(\"i", "ntData && eventData.data) {\n      if (eventD", "urValue = eventData.data.blurValue;\n      }\n", "      if (eventData.data.isShow != null) {\n ", "  switch (eventData.data.alignSelf) {\n      ", "      if (eventData.data.flexGrow != null) {", "  switch (eventData.data.sizeType) {\n       ", "      if (eventData.data.width != null) {\n  ", "enabled = eventData.data.enabled\n      }\n   ", ".height = eventData.data.height;\n      }\n   ", "      if (eventData.data.enabled != null) {\n", "leValue = eventData.data.startAngleValue;\n  ", "      if (eventData.data.colorValues != null", "      if (eventData.data.span) {\n        thi", " else if (eventData.data.gridOffset) {\n     ", "      if (eventData.data.strokeWidthValue !=", "ridSpan = eventData.data.gridSpan;\n      }\n ", "dOffset = eventData.data.gridOffset;\n      }", "      if (eventData.data.shadowValue != null", "      if (eventData.data.startAngleValue != ", "SON.parse(eventData.data.shadowValue);\n     ", "a = {\n              data: {\n                ", " else if (eventData.data.gridSpan) {\n       ", "lexGrow = eventData.data.flexGrow;\n      }\n ", "      if (eventData.data.endAngleValue != nu", "leValue = eventData.data.endAngleValue;\n    "], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "systemRouterA.ets", "configuration.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "video.ets", "ListItemJsunit.test.ets", "Navigator.ets", "tabContentProps.test.js", "longPressGesture.ets", "DragEventJsunit.test.ets", "textProps.test.js", "canvas2.ets", "ParallelGestureJsunit.test.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "toolbarProps.test.js", "Row.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "richText.ets", "column.ets", "checkboxGroup.ets", "sourceType.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "geometryTransition.ets", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "toolbarItemProps.test.js", "marquee.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "Swiper.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "border.ets", "ResponseRegion.ets", "PriorityGestureJsunit.test.ets", "badgeProps.test.js", "scrollBar.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "systemPrompt.ets", "TouchJsunit.test.ets", "transForm.ets", "LongPressGesture.test.ets", "path.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "List.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "formProps.test.js", "focus.ets", "VideoJsunit.test.ets", "touch.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "background.ets", "SourceTypeJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "gauge.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "LayoutConstraintsJsunit.test.ets", "toggle.ets", "GridJsunit.test.ets", "refreshProps.test.js", "customDialogController.ets", "text.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "SearchJsunit.test.ets", "canvasProps.test.js", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "tapGesture.ets", "flexDirection.ets", "shapeClipping.ets", "QrCodeJsunit.test.ets", "edgeEffect.ets", "ProgressJsunit.test.ets", "systemRouterB.ets", "TimeStampJsunit.test.ets", "PanGesture.ets", "stepper.ets", "shape.ets", "labelProps.test.js", "ListJsunit.test.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "flex.ets", "MotionPathJsunit.test.ets", "stepperProps.test.js", "marqueeProps.test.js", "gridContainer.ets", "imageAnimatorProps.test.js", "gridPage.ets", "ShapeJsunit.test.ets", "enable.ets", "PieceCode.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "popupProps.test.js", "SubscribaleAbstractJsunit.test.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "BindMenuJsunit.test.ets", "videoProps.test.js", "list.ets", "colorGradient.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "DatePickerJsunit.test.ets", "BasicJsunit.test.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "DataPanelJsunit.test.ets", "checkbox.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "global.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "direction2.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "canvas.ets", "AboutToDisappearJsunit.test.ets", "ohosMatrix4.ets", "CircleJsunit.test.ets", "divProps.test.js", "pickerViewProps.test.js", "switchProps.test.js", "divider.ets", "ellipse.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "line.ets", "TransFormJsunit.test.ets", "priorityGesture.ets", "DataPanel.ets", "Grid.ets", "chartProps.test.js", "touchAble.ets", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "visibility.ets", "progress.ets", "datePicker.ets", "pageTransition.ets", "WebPage.ets", "sliderProps.test.js", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "swiperProps.test.js", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "areaChange.ets", "ohosRouterA.ets", "BindPopupJsunit.test.ets", "GridItem.ets", "parallelGesture.ets", "imageProps.test.js", "select.ets", "timeStamp.ets", "listProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "progressProps.test.js", "aboutToDisappear.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "panel.ets", "menuProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageData", "api_method_name": "height", "api_method_all": "readonly height: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1455, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.height != null) {\n        ", "     .width('100%').height('40%').backgroundCo", "    }.width('100%').height('100%')\n  }\n}", "\"img_height=\" + img.height);\n  }\n}", "\n    .width('100%').height('100%').margin({ to", "width(200)\n        .height(200)\n    }.width('1", ".gridSpan)\n        .height(\"100%\")\n        .ba", "        })\n        .height(\"100%\")\n        .ba", "th(`${this.width}`).height(`${this.height}`).k", "   let height = img.height;\n    this.context.i", ":100').width('34%').height(100)\n          .bac", " img.width;\n    let height = img.height;\n    t", "dth('90%')\n        .height(40)\n        .fontSi", "   console.log(\"img_height=\" + img.height);\n  ", "sole.log(\"imageData_height=\" + imageData.heigh", "     }.width('90%').height(120).padding(10).ba", "ull) {\n        this.height = eventData.data.he", "h('50%')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .shadow", "eight=\" + imageData.height);\n  }\n\n  testImage(", "s('100')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .graysc", "h('33%')\n          .height(80)\n          .line", "le.log(\"imagebitmap_height=\" + height);\n  }\n\n ", "h('60%')\n          .height(100)\n          .lin", "= \"200px\";\n  @State height: string = \"200px\";\n", "h}`).height(`${this.height}`).key('ellipse')\n ", " Text('no alignSelf,height:80').width('33%').h", "xGrow(1)\n          .height(100)\n          .lin", "ht = eventData.data.height;\n      }\n    }\n  }\n", "gebitmap_height=\" + height);\n  }\n\n  testOffscr", "xGrow(2)\n          .height(100)\n          .lin", "lumn().width('50%').height(30).backgroundColor", "h('40%')\n          .height(100)\n          .lin", "Size({ width: 1200, height: 160 })\n        .ke", "    })\n            .height(50)\n            .ba", "width('90%')\n      .height(120)\n      .padding", "   })\n\n            .height(50)\n            .ba", "ridOffset)\n        .height(\"100%\")\n        .ba", "an')\n      }\n      .height(200)\n    }\n    .bac", " Text('no alignSelf,height:100').width('34%').", "t:80').width('33%').height(80)\n          .back", "    }.width('100%').height('100%')\n  }\n\n  test"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "AlertDialog.ets", "sliderProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageData", "api_method_name": "width", "api_method_all": "readonly width: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1772, "since": 8, "api_used": "\u662f", "lines": ["temsColumn\")\n      .width('90%')\n      .borde", "thValue}`)\n        .width(200)\n        .heigh", ");\n        })\n    }.width('100%').height('100", "Stretch)\n          .width('33%')\n          .h", "s.alignItems)\n    }.width('100%').padding({ t", ")\n        }\n      }.width('90%').key('gridCon", "gnSelf,height:100').width('34%').height(100)\n", "hrink(2)\n          .width('40%')\n          .h", "ull) {\n        this.width = eventData.data.wi", "(\"img_width=\" + img.width);\n    console.log(\"", "blurValue)\n        .width('90%')\n        .hei", "s/bg.jpg\");\n    let width = img.width;\n    le", "ign.Center)\n      }.width('90%').height(120).", "le.log(\"imagebitmap_width=\" + width);\n    con", "fontColor(0xCCCCCC).width('90%')\n      Column", "pse().width(`${this.width}`).height(`${this.h", "fontColor(0xCCCCCC).width('90%')\n      Flex({", "fontColor(0xCCCCCC).width('90%')\n      Text()", "Shrink')\n          .width('40%')\n          .h", "fontColor(0xCCCCCC).width('90%')\n      Text('", "eExample {\n  @State width: string = \"200px\";\n", "agebitmap_width=\" + width);\n    console.log(\"", "lor(0xAFEEEE)\n    }.width('100%').margin({ to", "xBasis\")\n          .width('60%')\n          .h", "    let width = img.width;\n    let height = i", "%')\n      .border({ width: 1 })\n      .alignI", "enabled)\n    }\n    .width('100%')\n    .paddin", "t: 30 })\n    }\n    .width('100%').height('100", "sole.log(\"imageData_width=\" + imageData.width", "}\n    }.padding(30).width('100%')\n  }\n}", "Shrink\")\n          .width('50%')\n          .h", "    Text()\n        .width('90%')\n        .hei", " .height(200)\n    }.width('100%').margin({ to", "ey('ellipse')\n    }.width('100%').height('100", ") {\n      Ellipse().width(`${this.width}`).he", " {\n        Column().width('50%').height(30).b", "ckgroundImageSize({ width: 1200, height: 160 ", " if (eventData.data.width != null) {\n        ", "   console.log(\"img_width=\" + img.width);\n   ", ".key('flex')\n      .width('90%')\n      .heigh", "ignSelf,height:80').width('33%').height(80)\n ", "s.context)\n        .width('100%').height('40%", "width=\" + imageData.width);\n    console.log(\"", "fontColor(0xCCCCCC).width('90%')\n      Flex()", "th = eventData.data.width;\n      }\n      if (", "E)\n        Column().width('50%').height(30).b"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RenderingContextSettings", "api_method_all": "declare class RenderingContextSettings {\n  \n  antialias?: boolean;\n\n  \n  constructor(antialias?: boolean);\n}", "api_method_name": "RenderingContextSettings", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["ntextSettings = new RenderingContextSettings(true);\n  private co", "  private settings: RenderingContextSettings = new RenderingCont"], "files": ["canvas2.ets", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RenderingContextSettings", "api_method_name": "constructor", "api_method_all": "constructor(antialias?: boolean)", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "RenderingContextSettings", "api_method_name": "antialias", "api_method_all": "antialias?: boolean", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": [".getContext('2d', { antialias: true });\n        c"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_all": "declare class CanvasRenderer extends CanvasPath {\n  \n  globalAlpha: number;\n\n  \n  globalCompositeOperation: string;\n\n  \n  drawImage(image: ImageBitmap | PixelMap, dx: number, dy: number): void;\n\n  \n  drawImage(image: ImageBitmap | PixelMap, dx: number, dy: number, dw: number, dh: number): void;\n\n  \n  drawImage(\n    image: ImageBitmap | PixelMap,\n    sx: number,\n    sy: number,\n    sw: number,\n    sh: number,\n    dx: number,\n    dy: number,\n    dw: number,\n    dh: number,\n  ): void;\n\n  \n  beginPath(): void;\n\n  \n  clip(fillRule?: CanvasFillRule): void;\n\n  \n  clip(path: Path2D, fillRule?: CanvasFillRule): void;\n\n  \n  fill(fillRule?: CanvasFillRule): void;\n\n  \n  fill(path: Path2D, fillRule?: CanvasFillRule): void;\n\n  \n  stroke(): void;\n\n  \n  stroke(path: Path2D): void;\n\n  \n  fillStyle: string | CanvasGradient | CanvasPattern;\n\n  \n  strokeStyle: string | CanvasGradient | CanvasPattern;\n\n  \n  createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\n\n  \n  createPattern(image: ImageBitmap, repetition: string | null): CanvasPattern | null;\n\n  \n  createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\n\n  \n  filter(filter: string): void;\n\n  \n  createImageData(sw: number, sh: number): ImageData;\n\n  \n  createImageData(imagedata: ImageData): ImageData;\n\n  \n  getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;\n\n  \n  getPixelMap(sx: number, sy: number, sw: number, sh: number): PixelMap;\n\n  \n  putImageData(imagedata: ImageData, dx: number, dy: number): void;\n\n  \n  putImageData(\n    imagedata: ImageData,\n    dx: number,\n    dy: number,\n    dirtyX: number,\n    dirtyY: number,\n    dirtyWidth: number,\n    dirtyHeight: number,\n  ): void;\n\n  \n  imageSmoothingEnabled: boolean;\n\n  \n  imageSmoothingQuality(quality: ImageSmoothingQuality): void;\n\n  \n  lineCap: CanvasLineCap;\n\n  \n  lineDashOffset: number;\n\n  \n  lineJoin: CanvasLineJoin;\n\n  \n  lineWidth: number;\n\n  \n  miterLimit: number;\n\n  \n  getLineDash(): number[];\n\n  \n  setLineDash(segments: number[]): void;\n\n  \n  clearRect(x: number, y: number, w: number, h: number): void;\n\n  \n  fillRect(x: number, y: number, w: number, h: number): void;\n\n  \n  strokeRect(x: number, y: number, w: number, h: number): void;\n\n  \n  shadowBlur: number;\n\n  \n  shadowColor: string;\n\n  \n  shadowOffsetX: number;\n\n  \n  shadowOffsetY: number;\n\n  \n  restore(): void;\n\n  \n  save(): void;\n\n  \n  fillText(text: string, x: number, y: number, maxWidth?: number): void;\n\n  \n  measureText(text: string): TextMetrics;\n\n  \n  strokeText(text: string, x: number, y: number, maxWidth?: number): void;\n\n  \n  direction(direction: CanvasDirection): void;\n\n  \n  font: string;\n\n  \n  textAlign: CanvasTextAlign;\n\n  \n  textBaseline: CanvasTextBaseline;\n\n  \n  getTransform(): Matrix2D;\n\n  \n  resetTransform(): void;\n\n  \n  rotate(angle: number): void;\n\n  \n  scale(x: number, y: number): void;\n\n  \n  setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;\n\n  \n  setTransform(transform?: Matrix2D): void;\n\n  \n  transform(a: number, b: number, c: number, d: number, e: number, f: number): void;\n\n  \n  translate(x: number, y: number): void;\n\n  \n  setPixelMap(value?: PixelMap): void;\n\n  \n  transferFromImageBitmap(bitmap: ImageBitmap): void;\n}", "api_method_name": "CanvasRenderer", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "drawImage", "api_method_all": "drawImage(image: ImageBitmap | PixelMap, dx: number, dy: number): void;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 43, "since": 8, "api_used": "\u662f", "lines": ["\n        offCanvas2.drawImage(img, 0, 0, 33, 33);", "\n        offCanvas2.drawImage(img, 33, 66, 33, 33", "\n        offCanvas2.drawImage(img, 0, 99, 33, 33)", " offscreenCanvasCtx.drawImage(img, 0, 0, 200, 100", ");\n    this.context.drawImage(img, 30, 950, 160, ", "');\n            ctx.drawImage(img, 0, 0, 300, 250", "');\n            ctx.drawImage(img, 0, 0, 300, 50)", "\n        offCanvas2.drawImage(img, 66, 0, 33, 33)", "se;\n            ctx.drawImage(img, 10, 0, 100, 60", " offscreenCanvasCtx.drawImage(img, 0, 0, 100, 200", "');\n            ctx.drawImage(img, 0, 0, 200, 100", "\n        offCanvas2.drawImage(img, 66, 33, 33, 33", "\n        offCanvas2.drawImage(img, 0, 66, 33, 33)", "50, 50, 50);\n  }\n\n  drawImage() {\n    let img = n", "\n              this.drawImage();\n              th", "\n        offCanvas2.drawImage(img, 33, 33, 33, 33", "\n        offCanvas2.drawImage(img, 33, 99, 33, 33", "e;\n    this.context.drawImage(img, 30, 950, 160, ", "pg\";\n    offCanvas2.drawImage(img, 0, 0, 100, 100", ");\n    this.context.drawImage(img, 0, 0, 500, 500", "\n        offCanvas2.drawImage(img, 66, 66, 33, 33", "\n        offCanvas2.drawImage(img, 33, 0, 33, 33)", " offscreenCanvasCtx.drawImage(img, 0, 0, 100, 100", "');\n            ctx.drawImage(img, 0, 0, 300, 100", "\n        offCanvas2.drawImage(img, 0, 33, 33, 33)"], "files": ["global.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "drawImage", "api_method_all": "drawImage(image: ImageBitmap | PixelMap, dx: number, dy: number, dw: number, dh: number): void;", "api_type": "", "api_args_count": 5, "api_level": null, "api_used_count": 43, "since": 8, "api_used": "\u662f", "lines": ["\n        offCanvas2.drawImage(img, 0, 0, 33, 33);", "\n        offCanvas2.drawImage(img, 33, 66, 33, 33", "\n        offCanvas2.drawImage(img, 0, 99, 33, 33)", " offscreenCanvasCtx.drawImage(img, 0, 0, 200, 100", ");\n    this.context.drawImage(img, 30, 950, 160, ", "');\n            ctx.drawImage(img, 0, 0, 300, 250", "');\n            ctx.drawImage(img, 0, 0, 300, 50)", "\n        offCanvas2.drawImage(img, 66, 0, 33, 33)", "se;\n            ctx.drawImage(img, 10, 0, 100, 60", " offscreenCanvasCtx.drawImage(img, 0, 0, 100, 200", "');\n            ctx.drawImage(img, 0, 0, 200, 100", "\n        offCanvas2.drawImage(img, 66, 33, 33, 33", "\n        offCanvas2.drawImage(img, 0, 66, 33, 33)", "50, 50, 50);\n  }\n\n  drawImage() {\n    let img = n", "\n              this.drawImage();\n              th", "\n        offCanvas2.drawImage(img, 33, 33, 33, 33", "\n        offCanvas2.drawImage(img, 33, 99, 33, 33", "e;\n    this.context.drawImage(img, 30, 950, 160, ", "pg\";\n    offCanvas2.drawImage(img, 0, 0, 100, 100", ");\n    this.context.drawImage(img, 0, 0, 500, 500", "\n        offCanvas2.drawImage(img, 66, 66, 33, 33", "\n        offCanvas2.drawImage(img, 33, 0, 33, 33)", " offscreenCanvasCtx.drawImage(img, 0, 0, 100, 100", "');\n            ctx.drawImage(img, 0, 0, 300, 100", "\n        offCanvas2.drawImage(img, 0, 33, 33, 33)"], "files": ["global.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "drawImage", "api_method_all": "drawImage(\n    image: ImageBitmap | PixelMap,\n    sx: number,\n    sy: number,\n    sw: number,\n    sh: number,\n    dx: number,\n    dy: number,\n    dw: number,\n    dh: number,\n  ): void;", "api_type": "", "api_args_count": 9, "api_level": null, "api_used_count": 43, "since": 8, "api_used": "\u662f", "lines": ["\n        offCanvas2.drawImage(img, 0, 0, 33, 33);", "\n        offCanvas2.drawImage(img, 33, 66, 33, 33", "\n        offCanvas2.drawImage(img, 0, 99, 33, 33)", " offscreenCanvasCtx.drawImage(img, 0, 0, 200, 100", ");\n    this.context.drawImage(img, 30, 950, 160, ", "');\n            ctx.drawImage(img, 0, 0, 300, 250", "');\n            ctx.drawImage(img, 0, 0, 300, 50)", "\n        offCanvas2.drawImage(img, 66, 0, 33, 33)", "se;\n            ctx.drawImage(img, 10, 0, 100, 60", " offscreenCanvasCtx.drawImage(img, 0, 0, 100, 200", "');\n            ctx.drawImage(img, 0, 0, 200, 100", "\n        offCanvas2.drawImage(img, 66, 33, 33, 33", "\n        offCanvas2.drawImage(img, 0, 66, 33, 33)", "50, 50, 50);\n  }\n\n  drawImage() {\n    let img = n", "\n              this.drawImage();\n              th", "\n        offCanvas2.drawImage(img, 33, 33, 33, 33", "\n        offCanvas2.drawImage(img, 33, 99, 33, 33", "e;\n    this.context.drawImage(img, 30, 950, 160, ", "pg\";\n    offCanvas2.drawImage(img, 0, 0, 100, 100", ");\n    this.context.drawImage(img, 0, 0, 500, 500", "\n        offCanvas2.drawImage(img, 66, 66, 33, 33", "\n        offCanvas2.drawImage(img, 33, 0, 33, 33)", " offscreenCanvasCtx.drawImage(img, 0, 0, 100, 100", "');\n            ctx.drawImage(img, 0, 0, 300, 100", "\n        offCanvas2.drawImage(img, 0, 33, 33, 33)"], "files": ["global.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "beginPath", "api_method_all": "beginPath(): void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 29, "since": 8, "api_used": "\u662f", "lines": ["th = 8;\n        ctx.beginPath();\n        ctx.line", "1;\n    this.context.beginPath();\n    this.context", "('2d');\n        ctx.beginPath();\n        ctx.move", " 310, 1250);\n  }\n\n  beginPath() {\n    this.contex", "('2d');\n        ctx.beginPath();\n        ctx.elli", "('2d');\n        ctx.beginPath();\n        ctx.line", "0;\n    this.context.beginPath();\n    this.context", "rue });\n        ctx.beginPath();\n        ctx.arc(", " {\n    this.context.beginPath();\n    this.context", "\n              this.beginPath();\n              th", "8;\n    this.context.beginPath();\n    this.context"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "clip", "api_method_all": "clip(fillRule?: CanvasFillRule): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 50, "since": 8, "api_used": "\u662f", "lines": [" expect(obj1.$attrs.clip).assertEqual('true'", "  if(eventData.data.clipValue != null) {\n   ", "c,\n            typeEclipse: this.typeEclipse", "t('testProgressTypeEclipse', 0, async functi", "spectorByKey('image_clip');\n      let obj = ", "eEclipse: this.typeEclipse\n        }\n    },\n", "o('testProgressTypeEclipse START');\n        ", "     Image('/images/clip.png')\n        .clip", ").assertEqual('typeEclipse')\n        expect(", "yle: ProgressStyle.Eclipse })\n          .val", " 5 }) {\n      Text('clip')\n        .fontSize", ")\n        this.typeEclipse = this.$element(\"", "ull) {\n        this.clipType = new Rect({ wi", "spectorByKey('image_clip_true');\n      let o", "(200)\n\n      Text('Eclipse Progress').fontSi", "parse(objNew.$attrs.clip);\n      expect(clip", "     Image('/images/clip.png')\n        .mask", "yle: ProgressStyle.Eclipse }).width(100).val", "     Image('/images/clip.png')\n          .wi", "obalThis.value.typeEclipse);\n        console", "objNew));\n      let clip = JSON.parse(objNew", "clip);\n      expect(clip.shape).assertEqual(", "ON.parse(obj.$attrs.clip);\n      expect(clip", "roke();\n        ctx.clip();\n        // Draw ", "type).assertEqual('eclipse')\n        console", "t: 280 });\n  @State clipType: CommonShapeMet", "ual(\"ProgressStyle.Eclipse\")\n      console.i", " null,\n        typeEclipse: null\n    },\n\n   ", "clip.png')\n        .clip(this.clipType)\n    ", "or(0xd2cab3)\n      .clip(true)\n\n      Text('", "const ATTRS_CLIP = 'clip'\nconst ATTRS_ENABLE", "        .key('image_clip')\n\n      Row() {\n  ", "\n        .clip(this.clipType)\n        .width", "  expect(obj.$attrs.clip).assertEqual('false", "red rectangle after clip\n        ctx.fillSty", "this.$element(\"typeEclipse\").getInspector()\n", "ata: {\n            \"clipValue\": false\n      ", "   testProgressTypeEclipse\n     * @tc.desc  ", ")\n      .key('image_clip_true')\n\n      Text(", "spectorByKey('image_clip');\n      let objNew", "fy(obj));\n      let clip = JSON.parse(obj.$a", "px')\n      }\n      .clip(true)\n      .border", "yle: ProgressStyle.Eclipse }).color(Color.Gr"], "files": ["ProgressJsunit.test.ets", "progress.ets", "layoutConstraints.ets", "progressProps.test.js", "Constants.ets", "Progress.ets", "ShapeClippingJsunit.test.ets", "index.js", "shapeClipping.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "clip", "api_method_all": "clip(path: Path2D, fillRule?: CanvasFillRule): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 50, "since": 8, "api_used": "\u662f", "lines": [" expect(obj1.$attrs.clip).assertEqual('true'", "  if(eventData.data.clipValue != null) {\n   ", "c,\n            typeEclipse: this.typeEclipse", "t('testProgressTypeEclipse', 0, async functi", "spectorByKey('image_clip');\n      let obj = ", "eEclipse: this.typeEclipse\n        }\n    },\n", "o('testProgressTypeEclipse START');\n        ", "     Image('/images/clip.png')\n        .clip", ").assertEqual('typeEclipse')\n        expect(", "yle: ProgressStyle.Eclipse })\n          .val", " 5 }) {\n      Text('clip')\n        .fontSize", ")\n        this.typeEclipse = this.$element(\"", "ull) {\n        this.clipType = new Rect({ wi", "spectorByKey('image_clip_true');\n      let o", "(200)\n\n      Text('Eclipse Progress').fontSi", "parse(objNew.$attrs.clip);\n      expect(clip", "     Image('/images/clip.png')\n        .mask", "yle: ProgressStyle.Eclipse }).width(100).val", "     Image('/images/clip.png')\n          .wi", "obalThis.value.typeEclipse);\n        console", "objNew));\n      let clip = JSON.parse(objNew", "clip);\n      expect(clip.shape).assertEqual(", "ON.parse(obj.$attrs.clip);\n      expect(clip", "roke();\n        ctx.clip();\n        // Draw ", "type).assertEqual('eclipse')\n        console", "t: 280 });\n  @State clipType: CommonShapeMet", "ual(\"ProgressStyle.Eclipse\")\n      console.i", " null,\n        typeEclipse: null\n    },\n\n   ", "clip.png')\n        .clip(this.clipType)\n    ", "or(0xd2cab3)\n      .clip(true)\n\n      Text('", "const ATTRS_CLIP = 'clip'\nconst ATTRS_ENABLE", "        .key('image_clip')\n\n      Row() {\n  ", "\n        .clip(this.clipType)\n        .width", "  expect(obj.$attrs.clip).assertEqual('false", "red rectangle after clip\n        ctx.fillSty", "this.$element(\"typeEclipse\").getInspector()\n", "ata: {\n            \"clipValue\": false\n      ", "   testProgressTypeEclipse\n     * @tc.desc  ", ")\n      .key('image_clip_true')\n\n      Text(", "spectorByKey('image_clip');\n      let objNew", "fy(obj));\n      let clip = JSON.parse(obj.$a", "px')\n      }\n      .clip(true)\n      .border", "yle: ProgressStyle.Eclipse }).color(Color.Gr"], "files": ["ProgressJsunit.test.ets", "progress.ets", "layoutConstraints.ets", "progressProps.test.js", "Constants.ets", "Progress.ets", "ShapeClippingJsunit.test.ets", "index.js", "shapeClipping.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "fill", "api_method_all": "fill(fillRule?: CanvasFillRule): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1166, "since": 8, "api_used": "\u662f", "lines": [");\n    });\n\n    it('fillModeTest_0200', 0, a", "pped\n          this.fillMode = FillMode.None", "   \"fillMode\": this.fillMode\n              }", "      console.info(\"fillModeTest_0300 get st", "s));\n        if (!('fillMode' == pages.name)", "        uri: 'pages/fillMode',\n      }\n     ", "      console.info(\"fillModeTest_0200 click ", "preDecode)\n        .fillMode(this.fillMode).", " {\n                \"fillMode\": this.fillMode", "      console.info('fillModeTest_0200 START'", "nfo('beforeEach get fillMode state pages:' +", "      console.info('fillModeTest_0200 END');", "ning\n          this.fillMode = FillMode.Back", ");\n    });\n\n    it('fillModeTest_0100', 0, a", "      console.info(\"fillModeTest_0200 get st", "    Rect()\n        .fill(Color.Gray)\n       ", "      console.info('fillModeTest_0300 START'", "used\n          this.fillMode = FillMode.Both", "      console.info(\"fillModeTest_0100 get st", "      console.info('fillModeTest beforeEach ", "      console.info('fillModeTest_0100 END');", "or('beforeEach push fillMode page error:' + ", "number = 0\n  @State fillMode: FillMode = Fil", "ect(indexEvent.data.fillMode).assertEqual(Fi", "     .fillMode(this.fillMode).iterations(thi", "      console.info(\"fillModeTest_0100 click ", "      console.info('fillMode test after each", "      console.info('fillModeTest_0100 START'", "t.test.ets';\nimport fillModeJsunit from './F", "   Text('background fill the box(Cover)').fo", "rt default function fillModeJsunit(){\n  desc", "      console.info(\"fillModeTest_0200 on eve", " Ellipse()\n        .fill(Color.Pink)\n       ", "fo('beforeEach push fillMode page result:' +", "      console.info(\"fillModeTest_0300 on eve", "y\n@Component\nstruct fillModeExample {\n  @Sta", "      console.info(\"fillModeTest_0300 click ", "      console.info('fillModeTest_0300 END');", "   Text('background fill the box(Contain)').", "nfo('beforeEach get fillMode state pages.nam", ");\n    });\n\n    it('fillModeTest_0300', 0, a", "unit(){\n  describe('fillModeTest', function ", "  selectJsunit();\n  fillModeJsunit();\n  enum", "      console.info(\"fillModeTest_0100 on eve"], "files": ["ImageJsunit.test.ets", "Shape.ets", "pathProps.test.js", "circleProps.test.js", "imageAnimatorProps.test.js", "background.ets", "canvas2.ets", "ShapeJsunit.test.ets", "canvas.ets", "ImageAnimatorJsunit.test.ets", "polylineProps.test.js", "animationStatus.ets", "fillMode.ets", "ellipseProps.test.js", "GestureModeJsunit.test.ets", "touchAble.ets", "polygonProps.test.js", "animatorOption.ets", "enumsLineCapStyle.ets", "index.js", "backgroundAndSizeSetting.ets", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "FillModeJsunit.test.ets", "shape.ets", "animateMotionProps.test.js", "Image.ets", "svgTextProps.test.js", "textPathProps.test.js", "imageAnimator.ets", "List.test.ets", "rectProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "fill", "api_method_all": "fill(path: Path2D, fillRule?: CanvasFillRule): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 1166, "since": 8, "api_used": "\u662f", "lines": [");\n    });\n\n    it('fillModeTest_0200', 0, a", "pped\n          this.fillMode = FillMode.None", "   \"fillMode\": this.fillMode\n              }", "      console.info(\"fillModeTest_0300 get st", "s));\n        if (!('fillMode' == pages.name)", "        uri: 'pages/fillMode',\n      }\n     ", "      console.info(\"fillModeTest_0200 click ", "preDecode)\n        .fillMode(this.fillMode).", " {\n                \"fillMode\": this.fillMode", "      console.info('fillModeTest_0200 START'", "nfo('beforeEach get fillMode state pages:' +", "      console.info('fillModeTest_0200 END');", "ning\n          this.fillMode = FillMode.Back", ");\n    });\n\n    it('fillModeTest_0100', 0, a", "      console.info(\"fillModeTest_0200 get st", "    Rect()\n        .fill(Color.Gray)\n       ", "      console.info('fillModeTest_0300 START'", "used\n          this.fillMode = FillMode.Both", "      console.info(\"fillModeTest_0100 get st", "      console.info('fillModeTest beforeEach ", "      console.info('fillModeTest_0100 END');", "or('beforeEach push fillMode page error:' + ", "number = 0\n  @State fillMode: FillMode = Fil", "ect(indexEvent.data.fillMode).assertEqual(Fi", "     .fillMode(this.fillMode).iterations(thi", "      console.info(\"fillModeTest_0100 click ", "      console.info('fillMode test after each", "      console.info('fillModeTest_0100 START'", "t.test.ets';\nimport fillModeJsunit from './F", "   Text('background fill the box(Cover)').fo", "rt default function fillModeJsunit(){\n  desc", "      console.info(\"fillModeTest_0200 on eve", " Ellipse()\n        .fill(Color.Pink)\n       ", "fo('beforeEach push fillMode page result:' +", "      console.info(\"fillModeTest_0300 on eve", "y\n@Component\nstruct fillModeExample {\n  @Sta", "      console.info(\"fillModeTest_0300 click ", "      console.info('fillModeTest_0300 END');", "   Text('background fill the box(Contain)').", "nfo('beforeEach get fillMode state pages.nam", ");\n    });\n\n    it('fillModeTest_0300', 0, a", "unit(){\n  describe('fillModeTest', function ", "  selectJsunit();\n  fillModeJsunit();\n  enum", "      console.info(\"fillModeTest_0100 on eve"], "files": ["ImageJsunit.test.ets", "Shape.ets", "pathProps.test.js", "circleProps.test.js", "imageAnimatorProps.test.js", "background.ets", "canvas2.ets", "ShapeJsunit.test.ets", "canvas.ets", "ImageAnimatorJsunit.test.ets", "polylineProps.test.js", "animationStatus.ets", "fillMode.ets", "ellipseProps.test.js", "GestureModeJsunit.test.ets", "touchAble.ets", "polygonProps.test.js", "animatorOption.ets", "enumsLineCapStyle.ets", "index.js", "backgroundAndSizeSetting.ets", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "FillModeJsunit.test.ets", "shape.ets", "animateMotionProps.test.js", "Image.ets", "svgTextProps.test.js", "textPathProps.test.js", "imageAnimator.ets", "List.test.ets", "rectProps.test.js", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "stroke", "api_method_all": "stroke(): void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 1910, "since": 8, "api_used": "\u662f", "lines": ["0;\n    this.context.strokeStyle = '#0000ff';\n ", "xpect(objNew.$attrs.strokeWidth).assertEqual('", "strokeWidth(`${this.strokeWidthValue}`)\n      ", "  strokeWidth: this.strokeWidth,\n          col", "\n              this.strokeRect();\n            ", "neCap' + obj.$attrs.strokeLineCap)\n      expec", " if (eventData.data.strokeWidth != null) {\n   ", "ue = eventData.data.strokeWidthValue;\n      }\n", "    .fill(0x317Af7).stroke(Color.Black).stroke", "ata: {\n            \"strokeWidth\": \"3.000000vp\"", "ata: {\n            \"strokeWidthValue\": \"-30\",\n", "leValue}`)\n        .strokeWidth(`${this.stroke", "n = false;\n  @State strokeWidth: number = 2.00", "trokeDashOffset(10).strokeLineCap(LineCapStyle", "pStyle.Butt)\n      .strokeLineJoin(LineJoinSty", "rokeWidth(4)\n      .strokeDashArray([20]).stro", "ata: {\n            \"strokeWidthValue\": \"30\",\n ", "th = eventData.data.strokeWidth;\n      }\n     ", "ull) {\n        this.strokeWidthValue = eventDa", "25, 55, 75);\n  }\n\n  strokeStyle() {\n    this.c", "\n              this.strokeStyle();\n           ", "\n        .divider({ strokeWidth: 2, color: 0xF", "ata: {\n            \"strokeWidthValue\": \"121111", "stroke(Color.Black).strokeWidth(4)\n      .stro", "ull) {\n        this.strokeWidth = eventData.da", "ring = 50;\n  @State strokeWidthValue: string =", "\n              this.strokeText();\n            ", "5;\n    this.context.strokeRect(25, 25, 55, 75)", "';\n    this.context.strokeRect(115, 25, 75, 55", ");\n    this.context.stroke();\n    this.context", " if (eventData.data.strokeWidthValue != null) ", ");\n    this.context.stroke();\n  }\n\n  lineJoin(", "Black).key('path1').strokeWidth(3)\n\n      Text", "  expect(obj.$attrs.strokeWidth).assertEqual('", "le.info('obj.$attrs.strokeLineCap' + obj.$attr", ");\n    this.context.stroke();\n  }\n\n  font() {\n", "rokeDashArray([20]).strokeDashOffset(10).strok", "})\n      .divider({ strokeWidth: 2, color: 0xF", "  expect(obj.$attrs.strokeLineCap).assertEqual", ");\n    this.context.stroke();\n  }\n\n  miterLimi", "s(this.commandsOne).stroke(Color.Black).key('p", "(obj.$attrs.divider.strokeWidth).assertEqual(\"", "divider({\n          strokeWidth: this.strokeWi"], "files": ["Shape.ets", "pathProps.test.js", "PatternLock.ets", "circleProps.test.js", "EnmusLineCapStyleJsunit.test.ets", "ShapeJsunit.test.ets", "canvas.ets", "lineProps.test.js", "divider.ets", "gauge.ets", "polylineProps.test.js", "Path.ets", "ellipseProps.test.js", "polygonProps.test.js", "list.ets", "List.ets", "dragEvent2.ets", "enumsLineCapStyle.ets", "GaugeJsunit.test.ets", "index.js", "DividerJsunit.test.ets", "Divider.ets", "edgeEffect.ets", "dragEvent.ets", "tspanProps.test.js", "svgProps.test.js", "shape.ets", "svgTextProps.test.js", "textPathProps.test.js", "path.ets", "ListJsunit.test.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "stroke", "api_method_all": "stroke(path: Path2D): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 1910, "since": 8, "api_used": "\u662f", "lines": ["0;\n    this.context.strokeStyle = '#0000ff';\n ", "xpect(objNew.$attrs.strokeWidth).assertEqual('", "strokeWidth(`${this.strokeWidthValue}`)\n      ", "  strokeWidth: this.strokeWidth,\n          col", "\n              this.strokeRect();\n            ", "neCap' + obj.$attrs.strokeLineCap)\n      expec", " if (eventData.data.strokeWidth != null) {\n   ", "ue = eventData.data.strokeWidthValue;\n      }\n", "    .fill(0x317Af7).stroke(Color.Black).stroke", "ata: {\n            \"strokeWidth\": \"3.000000vp\"", "ata: {\n            \"strokeWidthValue\": \"-30\",\n", "leValue}`)\n        .strokeWidth(`${this.stroke", "n = false;\n  @State strokeWidth: number = 2.00", "trokeDashOffset(10).strokeLineCap(LineCapStyle", "pStyle.Butt)\n      .strokeLineJoin(LineJoinSty", "rokeWidth(4)\n      .strokeDashArray([20]).stro", "ata: {\n            \"strokeWidthValue\": \"30\",\n ", "th = eventData.data.strokeWidth;\n      }\n     ", "ull) {\n        this.strokeWidthValue = eventDa", "25, 55, 75);\n  }\n\n  strokeStyle() {\n    this.c", "\n              this.strokeStyle();\n           ", "\n        .divider({ strokeWidth: 2, color: 0xF", "ata: {\n            \"strokeWidthValue\": \"121111", "stroke(Color.Black).strokeWidth(4)\n      .stro", "ull) {\n        this.strokeWidth = eventData.da", "ring = 50;\n  @State strokeWidthValue: string =", "\n              this.strokeText();\n            ", "5;\n    this.context.strokeRect(25, 25, 55, 75)", "';\n    this.context.strokeRect(115, 25, 75, 55", ");\n    this.context.stroke();\n    this.context", " if (eventData.data.strokeWidthValue != null) ", ");\n    this.context.stroke();\n  }\n\n  lineJoin(", "Black).key('path1').strokeWidth(3)\n\n      Text", "  expect(obj.$attrs.strokeWidth).assertEqual('", "le.info('obj.$attrs.strokeLineCap' + obj.$attr", ");\n    this.context.stroke();\n  }\n\n  font() {\n", "rokeDashArray([20]).strokeDashOffset(10).strok", "})\n      .divider({ strokeWidth: 2, color: 0xF", "  expect(obj.$attrs.strokeLineCap).assertEqual", ");\n    this.context.stroke();\n  }\n\n  miterLimi", "s(this.commandsOne).stroke(Color.Black).key('p", "(obj.$attrs.divider.strokeWidth).assertEqual(\"", "divider({\n          strokeWidth: this.strokeWi"], "files": ["Shape.ets", "pathProps.test.js", "PatternLock.ets", "circleProps.test.js", "EnmusLineCapStyleJsunit.test.ets", "ShapeJsunit.test.ets", "canvas.ets", "lineProps.test.js", "divider.ets", "gauge.ets", "polylineProps.test.js", "Path.ets", "ellipseProps.test.js", "polygonProps.test.js", "list.ets", "List.ets", "dragEvent2.ets", "enumsLineCapStyle.ets", "GaugeJsunit.test.ets", "index.js", "DividerJsunit.test.ets", "Divider.ets", "edgeEffect.ets", "dragEvent.ets", "tspanProps.test.js", "svgProps.test.js", "shape.ets", "svgTextProps.test.js", "textPathProps.test.js", "path.ets", "ListJsunit.test.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "createLinearGradient", "api_method_all": "createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["grad = this.context.createLinearGradient(50, 1900, 150, 2000", "\n              this.createLinearGradient();\n              th", " 250, 1660);\n  }\n\n  createLinearGradient() {\n    let grad = ", "onst gradient = ctx.createLinearGradient(0,0,200,0);\n       "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "createPattern", "api_method_all": "createPattern(image: ImageBitmap, repetition: string | null): CanvasPattern | null;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["\n              this.createPattern();\n              th", "xt.stroke();\n  }\n\n  createPattern() {\n    let img = n", "tern = this.context.createPattern(img, 'repeat');\n   ", "      var pat = ctx.createPattern(img, 'repeat');\n   "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "createRadialGradient", "api_method_all": "createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;", "api_type": "", "api_args_count": 6, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": ["\n              this.createRadialGradient();\n              th", ", 150, 150);\n  }\n\n  createRadialGradient() {\n    let grad = ", "grad = this.context.createRadialGradient(280, 1970, 40, 280,"], "files": ["canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "filter", "api_method_all": "filter(filter: string): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 22, "since": 8, "api_used": "\u662f", "lines": ["\n        offCanvas2.filter = 'grayscale(50%)';", "\n        offCanvas2.filter = 'contrast(200%)';", "\n        offCanvas2.filter = 'blur(5px)';\n    ", "\n        offCanvas2.filter = 'invert(100%)';\n ", "\n        offCanvas2.filter = 'opacity(25%)';\n ", "\n        offCanvas2.filter = 'saturate(30%)';\n", "\n        offCanvas2.filter = 'sepia(60%)';\n   ", ");\n    this.context.filter('grayscale(50%)');\n", "\n        offCanvas2.filter = 'hue-rotate(90deg", "\n        offCanvas2.filter = 'drop-shadow(8px ", " img.height;\n  }\n\n  filter() {\n    let img = n", "\n        offCanvas2.filter = 'brightness(0.4)'"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "createImageData", "api_method_all": "createImageData(sw: number, sh: number): ImageData;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["\n              this.createImageDataByImageData();\n     ", "Data = this.context.createImageData(imageData);\n    con", "Data = this.context.createImageData(80, 80);\n    for (v", "\n              this.createImageData();\n              th", "var imageData = ctx.createImageData(2,1)\n        prompt", "var imageData = ctx.createImageData(1,1)\n        prompt", "var imageData = ctx.createImageData(1,2)\n        prompt", "geData = offCanvas2.createImageData(100, 100);\n    var ", ", 200, 100);\n  }\n\n  createImageData() {\n    let imageDa", "Data = this.context.createImageData(100, 100);\n    cons", "Data = this.context.createImageData(50, 50);\n    let im", "imageData));\n  }\n\n  createImageDataByImageData() {\n    "], "files": ["global.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "createImageData", "api_method_all": "createImageData(imagedata: ImageData): ImageData;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["\n              this.createImageDataByImageData();\n     ", "Data = this.context.createImageData(imageData);\n    con", "Data = this.context.createImageData(80, 80);\n    for (v", "\n              this.createImageData();\n              th", "var imageData = ctx.createImageData(2,1)\n        prompt", "var imageData = ctx.createImageData(1,1)\n        prompt", "var imageData = ctx.createImageData(1,2)\n        prompt", "geData = offCanvas2.createImageData(100, 100);\n    var ", ", 200, 100);\n  }\n\n  createImageData() {\n    let imageDa", "Data = this.context.createImageData(100, 100);\n    cons", "Data = this.context.createImageData(50, 50);\n    let im", "imageData));\n  }\n\n  createImageDataByImageData() {\n    "], "files": ["global.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "getImageData", "api_method_all": "getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["Data = this.context.getImageData(10, 10, 80, 80);\n  ", "\n              this.getImageData();\n              th", "y(imgData));\n  }\n\n  getImageData() {\n    let imageDa"], "files": ["canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "getPixelMap", "api_method_all": "getPixelMap(sx: number, sy: number, sw: number, sh: number): PixelMap;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["tPixelMap();\n  }\n\n  getPixelMap() {\n    let pixelMa", "sole.info(\"[canvas] getPixelMap ----\" + JSON.string", "lMap = this.context.getPixelMap(10, 10, 80, 80);\n  ", "\n              this.getPixelMap();\n            })\n "], "files": ["canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "putImageData", "api_method_all": "putImageData(imagedata: ImageData, dx: number, dy: number): void;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": [" }\n    this.context.putImageData(imageData, 250, 166", "\" + height);\n  }\n\n  putImageData() {\n    let imageDa", "\n              this.putImageData();\n              th"], "files": ["canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "putImageData", "api_method_all": "putImageData(\n    imagedata: ImageData,\n    dx: number,\n    dy: number,\n    dirtyX: number,\n    dirtyY: number,\n    dirtyWidth: number,\n    dirtyHeight: number,\n  ): void;", "api_type": "", "api_args_count": 7, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": [" }\n    this.context.putImageData(imageData, 250, 166", "\" + height);\n  }\n\n  putImageData() {\n    let imageDa", "\n              this.putImageData();\n              th"], "files": ["canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "imageSmoothingQuality", "api_method_all": "imageSmoothingQuality(quality: ImageSmoothingQuality): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [");\n    this.context.imageSmoothingQuality('high');\n    this.c", ", 160, 100);\n  }\n\n  imageSmoothingQuality() {\n    let img = n"], "files": ["canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "getLineDash", "api_method_all": "getLineDash(): number[];", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [", 200, 100);\n  }\n\n  getLineDash() {\n    this.contex", " obj = this.context.getLineDash();\n  }\n\n  setPixelM"], "files": ["canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "setLineDash", "api_method_all": "setLineDash(segments: number[]): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [");\n    this.context.setLineDash([10, 20]);\n    this", " 6.28);\n        ctx.setLineDash([10,20]);\n        c", ");\n    this.context.setLineDash([0, 0]);\n  }\n\n  glo"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "clearRect", "api_method_all": "clearRect(x: number, y: number, w: number, h: number): void;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": [");\n    this.context.clearRect(260, 970, 100, 60);", "0, 40);\n        ctx.clearRect(20, 10, 60, 20);\n  ", "\n              this.clearRect();\n              th", "0, 100, 60);\n  }\n\n  clearRect() {\n    this.contex"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "fillRect", "api_method_all": "fillRect(x: number, y: number, w: number, h: number): void;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 89, "since": 8, "api_used": "\u662f", "lines": ["';\n    this.context.fillRect(20 + width, 20 + he", "';\n    this.context.fillRect(150 + width, 50 + h", ",255)';\n        ctx.fillRect(0, 0, 100, 40);\n   ", "adient;\n        ctx.fillRect(20,20,300,100);\n   ", ",0,0)';\n        ctx.fillRect(10, 0, 70, 40);\n   ", "';\n    this.context.fillRect(250, 1500, 100, 100", "';\n    this.context.fillRect(10, 800, 100, 80);\n", "000ff';\n        ctx.fillRect(0, 0, 100, 30);\n   ", " {\n    this.context.fillRect(10, 1080, 80, 80);\n", "\n              this.fillRect();\n              th", "d;\n    this.context.fillRect(200, 1900, 150, 150", ", 160, 100);\n  }\n\n  fillRect() {\n    this.contex", "';\n    this.context.fillRect(360, 800, 80, 80);\n", "';\n    this.context.fillRect(120 + width, 20 + h", ",255)';\n        ctx.fillRect(25, 25, 30, 30);\n  ", ",0,0)';\n        ctx.fillRect(10, 10, 70, 40);\n  ", "';\n    this.context.fillRect(50 + width, 50 + he", ",0,0)';\n        ctx.fillRect(70, 10, 30, 30);\n  ", "';\n    this.context.fillRect(150, 800, 80, 100);", ",0,0)';\n        ctx.fillRect(20, 20, 70, 50);\n  ", ",0,0)';\n        ctx.fillRect(10, 10, 30, 30);\n  ", ",0,0)';\n        ctx.fillRect(10, 0, 70, 50);\n   ", ",255)';\n        ctx.fillRect(85, 25, 30, 30);\n  ", "';\n    this.context.fillRect(50, 670, 50, 50);\n ", " = pat;\n        ctx.fillRect(20, 0, 60, 50);\n   ", "    this.offContext.fillRect(20, 160, 150, 100);", "';\n    this.context.fillRect(240, 950, 200, 200)", "';\n    this.context.fillRect(0, 620, 50, 50);\n  ", " {\n    this.context.fillRect(180, 1650, 50, 50);", ",255)';\n        ctx.fillRect(40, 40, 40, 40);\n\n ", ",0,0)';\n        ctx.fillRect(0, 0, 40, 40);\n    ", "';\n    this.context.fillRect(0, 1650, 100, 100);", ");\n    this.context.fillRect(180, 20, 50, 50);\n ", ");\n    this.context.fillRect(180, 1650, 50, 50);", "';\n    this.context.fillRect(20, 120, 75, 55);\n ", "n;\n    this.context.fillRect(140, 1300, 250, 100", "';\n    this.context.fillRect(250, 800, 80, 80);\n", "d;\n    this.context.fillRect(10, 1900, 150, 150)"], "files": ["canvas2.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "strokeRect", "api_method_all": "strokeRect(x: number, y: number, w: number, h: number): void;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["80, 80, 80);\n  }\n\n  strokeRect() {\n    this.contex", "5;\n    this.context.strokeRect(25, 25, 55, 75);\n  ", "';\n    this.context.strokeRect(115, 25, 75, 55);\n ", "000ff';\n        ctx.strokeRect(0, 0, 100, 30);\n   ", " {\n    this.context.strokeRect(110, 1080, 100, 60)", "\n              this.strokeRect();\n              th", "('2d');\n        ctx.strokeRect(10, 10, 25, 25);\n  ", "round';\n        ctx.strokeRect(0, 0, 100, 30);\n   ", "to 200%\n        ctx.strokeRect(10, 10, 20, 20);\n  "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "restore", "api_method_all": "restore(): void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": ["\n              this.restore();\n              th", "itMode(true)\n      .restoreId(this.id)\n      .h", "closePath();\n  }\n\n  restore() {\n    this.contex", " {\n    this.context.restore();\n  }\n\n  save() {\n"], "files": ["canvas.ets", "dragEvent2.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "save", "api_method_all": "save(): void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 4, "since": 8, "api_used": "\u662f", "lines": [" {\n    this.context.save();\n  }\n\n  addPath()", "        this.cookie.saveCookie()\n          }", "\n              this.save();\n              th", "t.restore();\n  }\n\n  save() {\n    this.contex"], "files": ["WebPage.ets", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "fillText", "api_method_all": "fillText(text: string, x: number, y: number, maxWidth?: number): void;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 35, "since": 8, "api_used": "\u662f", "lines": ["';\n    this.context.fillText('Middle', 225, heig", "0, 100, 60);\n  }\n\n  fillText() {\n    this.contex", "';\n    this.context.fillText('Hanging', 450, hei", "\n              this.fillText();\n              th", "right';\n        ctx.fillText('textAlign=right',8", "';\n    this.context.fillText(\"Hello World!\", 120", "';\n    this.context.fillText('textAlign=center',", "';\n    this.context.fillText(\"Hello World\", 250,", " 'top';\n        ctx.fillText('Top', 0, 30);\n    ", "';\n    this.context.fillText('textAlign=end', 21", "ottom';\n        ctx.fillText('Bottom', 20, 30);\n", "0, 10);\n        ctx.fillText(txt, 0, 25);\n    },", "'left';\n        ctx.fillText('textAlign=left', 8", "iddle';\n        ctx.fillText('Middle', 55, 30);\n", " 'end';\n        ctx.fillText('textAlign=end', 80", "';\n    this.context.fillText('Top', 60, height +", "betic';\n        ctx.fillText('Alphabetic', 90, 3", ");\n    this.context.fillText(\"width:\" + this.con", "';\n    this.context.fillText('Alphabetic', 345, ", "';\n    this.context.fillText('textAlign=left', 2", "enter';\n        ctx.fillText('textAlign=center',", "';\n    this.context.fillText('textAlign=start', ", "';\n    this.context.fillText('textAlign=right', ", "';\n    this.context.fillText('Bottom', 150, heig", "nging';\n        ctx.fillText('Hanging', 140, 30)", "World';\n        ctx.fillText(\"width:\" + ctx.meas", "serif';\n        ctx.fillText(\"Hello World\", 10, ", "start';\n        ctx.fillText('textAlign=start', "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "measureText", "api_method_all": "measureText(text: string): TextMetrics;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["th:\" + this.context.measureText(\"Hello World!\").wid", "\n              this.measureText();\n              th", " obj = this.context.measureText(\"Hello World!\");\n  ", " 260, 1195);\n  }\n\n  measureText() {\n    this.contex", "Text(\"width:\" + ctx.measureText(txt).width, 0, 10);"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "strokeText", "api_method_all": "strokeText(text: string, x: number, y: number, maxWidth?: number): void;", "api_type": "", "api_args_count": 4, "api_level": null, "api_used_count": 5, "since": 8, "api_used": "\u662f", "lines": ["\n              this.strokeText();\n              th", "serif';\n        ctx.strokeText(\"Hello World!\", 0, ", "';\n    this.context.strokeText(\"Hello World!\", 260", " 120, 1200);\n  }\n\n  strokeText() {\n    this.contex"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "direction", "api_method_all": "direction(direction: CanvasDirection): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 596, "since": 8, "api_used": "\u662f", "lines": ["lder() {\n    Flex({ direction: FlexDirection.Colu", "on = eventData.data.direction;\n        console.lo", "ata: {\n            \"direction\": Direction.Ltr\n   ", "ll: 'forwards',\n    direction: \"normal\",\n    begi", " if (eventData.data.direction != null) {\n        ", "uild() {\n    Flex({ direction: FlexDirection.Colu", " angle: 80,\n        direction: GradientDirection.", "ion: \" + obj.$attrs.direction);\n      expect(obj.", "'90%')\n      Flex({ direction: FlexDirection.Row,", "  expect(obj.$attrs.direction).assertEqual('Direc", ".$attrs.constructor.direction).assertEqual('FlexD", " {\n    Flex({\n      direction: FlexDirection.Colu", "    .direction(this.direction)\n        .key('rowD", "gin(5)\n      Flex({ direction: FlexDirection.Row,", "dth('90%')\n        .direction(this.direction)\n   ", "  events_emitter.on(directionChangeEvent, this.st", "    Text('slider in direction set').fontSize(9).f", "   Text('slider out direction set').fontSize(9).f", ".InSet,\n            direction: this.decorationVal", ".TopStart;\n  @State direction: Direction = Direct", "gn')\n\n        Text('direction').fontSize(20).font", "ction value\" + this.direction);\n      }\n    }\n  }", "'90%')\n      Flex({ direction: FlexDirection.Row ", "xExample {\n  @State direction: FlexDirection = Fl", "umber = 3;\n  @State direction: Axis = Axis.Horizo", "weekStyle)\n        .direction(this.direction)\n   ", "uild() {\n    Flex({ direction: FlexDirection.Row,", "OutSet,\n            direction: Axis.Vertical\n    ", " ATTRS_DIRECTION = 'direction'\nconst ATTRS_ALIGN ", "\n    angle: 90,\n    direction: GradientDirection.", "rations: 1,\n        direction: 'alternate',\n     ", " if (eventData.data.direction) {\n        this.dir", "CallBack);\n\n    let directionChangeEvent = {\n    ", "ion) {\n        this.direction = eventData.data.di", "ull) {\n        this.direction = eventData.data.di", "on = eventData.data.direction;\n      } else if (e", ".log(\"Calendar page direction value\" + this.direc", "    .direction(this.direction)\n        .backgroun", "ttrs.linearGradient.direction).assertEqual('Gradi"], "files": ["systemRouterA.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "Qrcode.ets", "imageFit.ets", "Span.ets", "richText.ets", "Progress.ets", "PositionSettingJsunit.test.ets", "geometryTransition.ets", "marquee.ets", "Rating.ets", "Divider.ets", "scrollBar.ets", "CalendarJsunit.test.ets", "transition.ets", "Image.ets", "List.test.ets", "button.ets", "touch.ets", "DirectionJsunit.test.ets", "Slider.ets", "Text.ets", "Counter.ets", "Stack.ets", "bindMenu.ets", "TextJsunit.test.ets", "Blank.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "ScrollerBarJsunit.test.ets", "text.ets", "positionSetting.ets", "animatorOption.ets", "tapGesture.ets", "FlexJsunit.test.ets", "flexDirection.ets", "index.ets", "systemRouterB.ets", "PanGesture.ets", "image.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "flex.ets", "marqueeProps.test.js", "PatternLock.ets", "textPickerDialog.ets", "gridPage.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "videoProps.test.js", "BackgroundJsunit.test.ets", "AppStorage.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "calendar.ets", "dragEvent.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "bindContextMenu.ets", "divider.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "GradientDirectionJsunit.test.ets", "DataPanel.ets", "FormComponentPage.ets", "RowJsunit.test.ets", "index.js", "ohosRouterA.ets", "Link.ets", "slider.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "gestureMode.ets", "ScrollBar.ets", "Badge.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "getTransform", "api_method_all": "getTransform(): Matrix2D;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["0, 1, 0, 0);\n  }\n\n  getTransform() {\n    let data = ", "data = this.context.getTransform();\n    console.info"], "files": ["canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "resetTransform", "api_method_all": "resetTransform(): void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 3, "since": 8, "api_used": "\u662f", "lines": [" offscreenCanvasCtx.resetTransform();\n        offscree", " {\n    this.context.resetTransform();\n  }\n\n  translate", "--\" + data);\n  }\n\n  resetTransform() {\n    this.contex"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "rotate", "api_method_all": "rotate(angle: number): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 392, "since": 8, "api_used": "\u662f", "lines": [" getInspectorByKey('rotate9');\n      let obj =", "  expect(obj.$attrs.rotate.angle).assertEqual(", "  expect(obj.$attrs.rotate.centerY).assertEqua", "(100)\n        .key('rotate8')\n      Image('/im", "xpect(objNew.$attrs.rotate.x).assertEqual('2.0", " getInspectorByKey('rotate');\n      let obj = ", "10 })\n        .key('rotate2')\n\n      Text('sca", " getInspectorByKey('rotate8');\n      let obj =", "  expect(obj.$attrs.rotate.z).assertEqual('1.0", "sMatrix4 {\n  @State rotateValue: object= {\n   ", "EEEE)\n        .key('rotate3')\n\n      Text('Mat", "xpect(objNew.$attrs.rotate.centerX).assertEqua", "(100)\n        .key('rotate7')\n      Image('/im", " getInspectorByKey('rotate');\n      let objNew", "ify(sendEventByKey('rotate5', 10, \"\")));\n     ", "0 }))\n        .key('rotate4')\n    }.width('100", "xpect(objNew.$attrs.rotate.y).assertEqual('2.0", " if (eventData.data.rotateValue != null) {\n   ", "       .rotate(this.rotateValue)\n        .widt", " 5 })\n        .key('rotate6')\n      Image('/im", "ull) {\n        this.rotateValue = JSON.parse(e", "umn() {\n      Text('rotate').width('90%').font", " getInspectorByKey('rotate6');\n      let objNe", "     Row()\n        .rotate(this.rotateValue)\n ", "arse(eventData.data.rotateValue);\n      }\n    ", "EEEE)\n        .key('rotate')\n\n      Text('tran", " getInspectorByKey('rotate3');\n      let objNe", "mExample {\n  @State rotateValue: object= {\n   ", "0 }))\n        .key('rotate4')\n      Button(\"ge", "ep(1000);\n      let rotateValue = {x: 2, y: 2,", "ata: {\n            \"rotateValue\": JSON.stringi", "ue\": JSON.stringify(rotateValue)\n          }\n ", "xpect(objNew.$attrs.rotate.centerY).assertEqua", "xpect(objNew.$attrs.rotate.z).assertEqual('2.0", "  expect(obj.$attrs.rotate.y).assertEqual('1.0", "  expect(obj.$attrs.rotate.x).assertEqual('1.0", "  expect(obj.$attrs.rotate.centerX).assertEqua", " Matrix4.identity().rotate({x:1, y:1, z:2, ang", "(100)\n        .key('rotate9')\n    }.width('100", " getInspectorByKey('rotate7');\n      let obj =", "olor(0x2788D9).key('rotate5')\n      Image('/im", "umn() {\n      Text('rotate').width('10%').font"], "files": ["ohosPrompt.ets", "pathProps.test.js", "circleProps.test.js", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "polylineProps.test.js", "OhosPromptJsunit.test.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "polygonProps.test.js", "index.js", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "animateMotionProps.test.js", "svgTextProps.test.js", "transForm.ets", "motionPath.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "scale", "api_method_all": "scale(x: number, y: number): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 1026, "since": 8, "api_used": "\u662f", "lines": ["(eventData.data.grayscaleValue != null) {\n   ", "RS_GRAYSCALE = 'grayscale'\nconst ATTRS_BLUR =", "  expect(obj.$attrs.scale.y).assertEqual('0.5", "   }\n      })\n    }.scale({ x: this.scale }).", "')\n\n      Text('grayscale').fontSize(15).font", "        .scale(this.scaleValue)\n        .widt", "ep(1000);\n      let scaleValue = { x: 1, y: 1", " eventData.data.grayscaleValue;\n      }\n     ", " Matrix4.identity().scale({ x: 3 }).copy()\n  ", "Y: 5 }\n  @State grayscaleValue: string= 10;\n ", "xpect(objNew.$attrs.scale.y).assertEqual('1.0", ".transitionTypeOne, scale: { x: 0, y: 1.0, z:", "  }.scale({ x: this.scale }).opacity(this.opa", "     \"scale\" : this.scale,\n              \"opa", "context.filter('grayscale(50%)');\n    this.co", "00, y: 5 }\n  @State scaleValue: object= { x: ", "arse(eventData.data.scaleValue);\n      }\n    ", " Matrix4.identity().scale(eventData.data.matr", "ue\": JSON.stringify(scaleValue)\n          }\n ", "  expect(obj.$attrs.scale.x).assertEqual('2.0", "ull) {\n        this.scaleValue = JSON.parse(e", "ata: {\n            \"scaleValue\": JSON.stringi", "ep(1000);\n      let scaleValue = {\n        x:", "xpect(objNew.$attrs.scale.x).assertEqual('1.0", "ate2')\n\n      Text('scale').width('90%').font", "nExample {\n  @State scale: number = 1\n  @Stat", ".transitionTypeTwo, scale: { x: 1.0, y: 0.0 }", "ayscale(`${this.grayscaleValue}`)\n        .ke", " if (eventData.data.scaleValue != null) {\n   ", "     Row()\n        .scale(this.scaleValue)\n  ", " {\n        this.grayscaleValue = eventData.da", "Example1 {\n  @State scale: number = 1\n  @Stat", "pect(obj.$attrs.grayscale).assertEqual(0);\n  ", "ht(40)\n        .grayscale(`${this.grayscaleVa", "a: {\n              \"scale\" : this.scale,\n    ", " Matrix4.identity().scale({x:5, y:1, z:1, cen"], "files": ["pageTransition2.ets", "pathProps.test.js", "circleProps.test.js", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "imageEffects.ets", "Constants.ets", "polylineProps.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "polygonProps.test.js", "index.js", "PageTransitionJsunit.test.ets", "animateTransformProps.test.js", "svgProps.test.js", "progressProps.test.js", "transition.ets", "transForm.ets", "sharedTransition.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "setTransform", "api_method_all": "setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;", "api_type": "", "api_args_count": 6, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [");\n    this.context.setTransform(1, 0, 0, 1, 0, 0);\n", "ffscreenCanvasCtx.resetTransform();\n        offscree", "\" + data);\n  }\n\n  resetTransform() {\n    this.contex", ", 100, 100);\n  }\n\n  setTransform() {\n    this.contex", ");\n    this.context.setTransform(1, 0.1, 0.01, 1, 10", "\n    this.context.resetTransform();\n  }\n\n  translate", "0 Z\");\n        path.setTransform(0.8, 0, 0, 0.4, 0, ", "\n              this.setTransform();\n              th"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "setTransform", "api_method_all": "setTransform(transform?: Matrix2D): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [");\n    this.context.setTransform(1, 0, 0, 1, 0, 0);\n", "ffscreenCanvasCtx.resetTransform();\n        offscree", "\" + data);\n  }\n\n  resetTransform() {\n    this.contex", ", 100, 100);\n  }\n\n  setTransform() {\n    this.contex", ");\n    this.context.setTransform(1, 0.1, 0.01, 1, 10", "\n    this.context.resetTransform();\n  }\n\n  translate", "0 Z\");\n        path.setTransform(0.8, 0, 0, 0.4, 0, ", "\n              this.setTransform();\n              th"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "transform", "api_method_all": "transform(a: number, b: number, c: number, d: number, e: number, f: number): void;", "api_type": "", "api_args_count": 6, "api_level": null, "api_used_count": 353, "since": 8, "api_used": "\u662f", "lines": ["h.PI / 180);\n  }\n\n  transform() {\n    this.contex", "\n              this.transform();\n              th", "ransformProp : this.transformProp,\n            id", "e('/images/bg.jpg').transform(this.matrix4)\n     ", ", z: 30 })\n  @State transformValue: object= Matri", "op = this.$element(\"transformProp\").getInspector(", "e('/images/bg.jpg').transform(this.matrix6)\n     ", ".info(\"[canvas] get transform----\" + data);\n  }\n\n", "rop : null,\n        transformProp : null,\n       ", "  expect(obj.$attrs.transform.type)\n        .asse", "15px 25px',\n        transformOrigin:'center top'\n", ");\n    this.context.transform(1, 0.1, 0.01, 1, 10", "tion:'0px',\n        transformOrigin:'center cente", "  expect(obj.$attrs.transform.matrix)\n      .asse", ", y: 0.5 }\n  @State transformValue: object= Matri", "e('/images/bg.jpg').transform(this.matrix5)\n     ", "thProp,\n            transformProp : this.transfor", "  expect(obj.$attrs.transform.matrix)\n        .as", "(0xAFEEEE)\n        .transform(Matrix4.identity().", "ctor()\n        this.transformProp = this.$element", "ngify(objNew.$attrs.transform)).assertEqual('{}')", "s = [\n    {\n        transform: {\n            tran", " Matrix4.identity().transformPoint([100, 10])\n  @", "padding(5)\n        .transform(this.matrix2.combin", "    .translate(this.transformValue)\n        .widt", "   },\n    {\n        transform: {\n            tran", "10px 20px',\n        transformOrigin:'left top'\n  "], "files": ["pathProps.test.js", "rectProps.test.js", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "transForm.ets", "OhosMatrix4Jsunit.test.ets", "ellipseProps.test.js", "index.js", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "translate", "api_method_all": "translate(x: number, y: number): void;", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 280, "since": 8, "api_used": "\u662f", "lines": ["(Matrix4.identity().translate(eventData.data.matr", "     Row()\n        .translate(this.transformValue", "form: {\n            translate: '-120px',\n        ", "tate')\n\n      Text('translate').width('10%').font", "entity()\n          .translate(eventData.data.matr", "form: {\n            translateX: '100px',\n        ", " Matrix4.identity().translate({ x: 300 }).copy()\n", "'gestureMode')\n    .translate({ x: this.offsetX, ", "('PanGesture')\n    .translate({ x: this.offsetX, ", "Transform();\n  }\n\n  translate() {\n    this.contex", " Matrix4.identity().translate({x:100, y:200, z:30", "e: 300\n  }\n  @State translateValue: object= { x: ", " Matrix4.identity().translate(eventData.data.matr", " }).margin(80)\n    .translate({ x: this.offsetX, ", ");\n    this.context.translate(50, 50);\n    this.c", "tate')\n\n      Text('translate').width('90%').font", "100px',\n            translateY: '0px',\n          ", " '0px',\n            translateZ: '20px',\n         ", "form: {\n            translateX: '0px',\n          ", "(Matrix4.identity().translate({ x: 100, y: 100, z", " Matrix4.identity().translate({ x: 100, y: 100, z", "\n              this.translate();\n              th", " '0px',\n            translateY: '5px',\n          "], "files": ["animateTransformProps.test.js", "PanGesture.ets", "panDirection.ets", "pathProps.test.js", "rectProps.test.js", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "transForm.ets", "ellipseProps.test.js", "gestureMode.ets", "index.js", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "setPixelMap", "api_method_all": "setPixelMap(value?: PixelMap): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": ["tLineDash();\n  }\n\n  setPixelMap() {\n    this.contex", " {\n    this.context.setPixelMap();\n  }\n\n  getPixelM"], "files": ["canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "transferFromImageBitmap", "api_method_all": "transferFromImageBitmap(bitmap: ImageBitmap): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 8, "api_used": "\u662f", "lines": ["tmap();\n        ctx.transferFromImageBitmap(bitmap);\n    }\n\n}", "tmap();\n        ctx.transferFromImageBitmap(bitmap);\n\n        p", "p();\n        canvas.transferFromImageBitmap(bitmap);\n\n        p", "p();\n        canvas.transferFromImageBitmap(bitmap);\n    }\n\n}", "tmap();\n        ctx.transferFromImageBitmap(bitmap);\n    },\n\n  ", "tmap();\n        ctx.transferFromImageBitmap(bitmap);\n    },\n   ", "p();\n        canvas.transferFromImageBitmap(bitmap);\n        pr", "PageShow() {\n  }\n\n  transferFromImageBitmap() {\n    this.offCon", "tmap();\n        ctx.transferFromImageBitmap(bitmap);\n        pr", "tmap();\n        ctx.transferFromImageBitmap(bitmap);\n    },\n\n}", ");\n    this.context.transferFromImageBitmap(image);\n  }\n\n  offS", "\n              this.transferFromImageBitmap();\n              th", "map();\n    this.ctx.transferFromImageBitmap(bitmap);\n  }\n\n  tes"], "files": ["global.ets", "canvas2.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "globalAlpha", "api_method_all": "globalAlpha: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [");\n    this.context.globalAlpha = 0.4;\n    this.con", "\n              this.globalAlpha();\n              th", " {\n    this.context.globalAlpha = 1;\n    this.conte", "eight + 10);\n  }\n\n  globalAlpha() {\n    this.contex", "0, 40);\n        ctx.globalAlpha = 0.4;\n        ctx."], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "globalCompositeOperation", "api_method_all": "globalCompositeOperation: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["0, 30);\n        ctx.globalCompositeOperation = 'source-over';\n  ", "0, 30);\n        ctx.globalCompositeOperation = 'destination-over", ");\n    this.context.globalCompositeOperation = 'source-over';\n  ", "ash([0, 0]);\n  }\n\n  globalCompositeOperation() {\n    let height ", "\n              this.globalCompositeOperation();\n              th", ");\n    this.context.globalCompositeOperation = 'destination-over"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "fillStyle", "api_method_all": "fillStyle: string | CanvasGradient | CanvasPattern", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 75, "since": 8, "api_used": "\u662f", "lines": ["\n              this.fillStyle();\n              th", " 3, 3);\n        ctx.fillStyle = 'rgb(255,0,0)';\n ", "example\n        ctx.fillStyle = 'rgb(255,0,0)';\n ", "('2d');\n        ctx.fillStyle = 'rgb(255,0,0)';\n ", "('2d');\n        ctx.fillStyle = '#0000ff';\n      ", "PageShow() {\n  }\n\n  fillStyle() {\n    this.contex", " {\n    this.context.fillStyle = 'rgb(0,0,0)';\n   ", ");\n    this.context.fillStyle = 'rgb(0,0,255)';\n ", ",255)';\n        ctx.fillStyle = 'rgb(255,0,0)';\n ", " 3, 3);\n        ctx.fillStyle = 'rgb(0,0,255)';\n ", "';\n    this.context.fillStyle = 'rgb(0,0,255)';\n ", "0;\n    this.context.fillStyle = 'rgb(255,0,0)';\n ", " = 0.4;\n        ctx.fillStyle = 'rgb(0,0,255)';\n ", ",0,0)';\n        ctx.fillStyle = 'rgb(255,0,0)';\n ", "('2d');\n        ctx.fillStyle = 'rgb(0,0,255)';\n ", ");\n    this.context.fillStyle = 'rgb(255,0,0)';\n ", " {\n    this.context.fillStyle = 'rgb(0,0,255)';\n ", "ff00');\n        ctx.fillStyle=gradient;\n        c", " {\n    this.context.fillStyle = '#0000ff';\n    th", ");\n    this.context.fillStyle = grad;\n    this.co", "er clip\n        ctx.fillStyle = \"rgb(255,0,0)\";\n ", "-over';\n        ctx.fillStyle = 'rgb(0,0,255)';\n ", "peat');\n        ctx.fillStyle = pat;\n        ctx.", "    this.offContext.fillStyle = '#0000ff';\n    th", "('2d');\n        ctx.fillStyle = 'rgb(0,0,0)';\n   ", " {\n    this.context.fillStyle = 'rgb(255,0,0)';\n ", "4;\n    this.context.fillStyle = 'rgb(0,0,255)';\n ", ");\n    this.context.fillStyle = pattern;\n    this", "';\n    this.context.fillStyle = 'rgb(255,0,0)';\n "], "files": ["canvas2.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "strokeStyle", "api_method_all": "strokeStyle: string | CanvasGradient | CanvasPattern", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["0;\n    this.context.strokeStyle = '#0000ff';\n    th", "h = 10;\n        ctx.strokeStyle = '#0000ff';\n      ", "25, 55, 75);\n  }\n\n  strokeStyle() {\n    this.contex", "\n              this.strokeStyle();\n              th", "6;\n    this.context.strokeStyle = '#0000ff';\n    th", "('2d');\n        ctx.strokeStyle = '#0000ff';\n      "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "imageSmoothingEnabled", "api_method_all": "imageSmoothingEnabled: boolean", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": [") {\n            ctx.imageSmoothingEnabled = false;\n          ", "t;\n    this.context.imageSmoothingEnabled = false;\n    this.c", "Y = 0;\n    }\n  }\n\n  imageSmoothingEnabled() {\n    let img = n", "\n              this.imageSmoothingEnabled();\n              th", ");\n    this.context.imageSmoothingEnabled = false;\n    this.c", "       this.context.imageSmoothingEnabled = false\n          t"], "files": ["global.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "lineCap", "api_method_all": "lineCap: CanvasLineCap", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 49, "since": 8, "api_used": "\u662f", "lines": ["tringify(obj.$attrs.lineCap));\n      expect(obj", "000ff';\n        ctx.lineCap = 'round';\n        ", "\n              this.lineCap();\n              th", "number = 7\n  @State lineCap: LineCapStyle = Lin", "Path();\n        ctx.lineCap = 'round';\n        ", "et inspector stroke-lineCap value is: \" + JSON.", "  expect(obj.$attrs.lineCap == LineCapStyle.Rou", ");\n    this.context.lineCap = 'round';\n    this", "25, 75, 55);\n  }\n\n  lineCap() {\n    this.contex", "le.log(\"cd divider1 lineCap\" + JSON.stringify(o", "rops] get inspector lineCap value is: \" + JSON.", "  expect(obj.$attrs.lineCap == LineCapStyle.Squ", "ole.log(\"cd divider lineCap\" + JSON.stringify(o", "his.color)\n        .lineCap(LineCapStyle.Round)", " Divider()\n        .lineCap(LineCapStyle.Butt)\n", " Divider()\n        .lineCap(LineCapStyle.Square", "le.log(\"cd divider2 lineCap\" + JSON.stringify(o", "h = 10;\n        ctx.lineCap = 'round';\n        ", " Divider()\n        .lineCap(LineCapStyle.Round)"], "files": ["lineProps.test.js", "divider.ets", "pathProps.test.js", "rectProps.test.js", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "ellipseProps.test.js", "index.js", "canvas.ets", "DividerJsunit.test.ets", "Divider.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "lineDashOffset", "api_method_all": "lineDashOffset: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["70, 50, 50);\n  }\n\n  lineDashOffset() {\n    this.contex", "0,20]);\n        ctx.lineDashOffset = 10.0;\n        ctx", "\n              this.lineDashOffset();\n              th"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "lineJoin", "api_method_all": "lineJoin: CanvasLineJoin", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["\n              this.lineJoin();\n              th", "xt.stroke();\n  }\n\n  lineJoin() {\n    this.contex", "th = 5;\n        ctx.lineJoin = 'miter';\n        ", "8;\n    this.context.lineJoin = 'miter';\n    this"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "lineWidth", "api_method_all": "lineWidth: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 26, "since": 8, "api_used": "\u662f", "lines": [" {\n    this.context.lineWidth = 5;\n    this.conte", "('2d');\n        ctx.lineWidth = 5;\n        ctx.li", "\n              this.lineWidth();\n              th", " {\n    this.context.lineWidth = 10;\n    this.cont", "('2d');\n        ctx.lineWidth = 10;\n        ctx.l", "('2d');\n        ctx.lineWidth = 8;\n        ctx.be", " {\n    this.context.lineWidth = 8;\n    this.conte", "20, 75, 55);\n  }\n\n  lineWidth() {\n    this.contex", "Path();\n        ctx.lineWidth = 5;\n        ctx.li", "('2d');\n        ctx.lineWidth = 10;\n        ctx.s", ");\n    this.context.lineWidth = 8;\n    this.conte", ");\n    this.context.lineWidth = 6;\n    this.conte"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "miterLimit", "api_method_all": "miterLimit: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["xt.stroke();\n  }\n\n  miterLimit() {\n    this.contex", "';\n    this.context.miterLimit = 3;\n    this.conte", "miter';\n        ctx.miterLimit = 3;\n        ctx.mo", "\n              this.miterLimit();\n              th"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "shadowBlur", "api_method_all": "shadowBlur: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 19, "since": 8, "api_used": "\u662f", "lines": [" {\n    this.context.shadowBlur = 0;\n    if (isX) {", "ource-over';\n  }\n\n  shadowBlur() {\n    this.contex", " {\n    this.context.shadowBlur = 10;\n    this.cont", " {\n    this.context.shadowBlur = 30;\n    this.cont", "\n              this.shadowBlur();\n              th", "('2d');\n        ctx.shadowBlur = 20;\n        ctx.s", "('2d');\n        ctx.shadowBlur = 30;\n        ctx.s", "('2d');\n        ctx.shadowBlur = 10;\n        ctx.s"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "shadowColor", "api_method_all": "shadowColor: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["r = 20;\n        ctx.shadowColor = 'rgb(0,0,0)';\n   ", "X = 20;\n        ctx.shadowColor = 'rgb(0,0,0)';\n   ", "r = 20;\n        ctx.shadowColor = 'rgb(0,0,255)';\n ", "r = 30;\n        ctx.shadowColor = 'rgb(0,0,0)';\n   ", "0, 100, 80);\n  }\n\n  shadowColor() {\n    this.contex", "0;\n    this.context.shadowColor = 'rgb(0,0,0)';\n   ", "Y = 20;\n        ctx.shadowColor = 'rgb(0,0,0)';\n   ", "0;\n    this.context.shadowColor = 'rgb(0,0,255)';\n ", "\n              this.shadowColor();\n              th"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "shadowOffsetX", "api_method_all": "shadowOffsetX: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["0, 80, 100);\n  }\n\n  shadowOffsetX() {\n    this.contex", "0;\n    this.context.shadowOffsetX = 20;\n    this.cont", "\n              this.shadowOffsetX();\n              th", "r = 10;\n        ctx.shadowOffsetX = 20;\n        ctx.s", "\n      this.context.shadowOffsetX = 0;\n    } else {\n "], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "shadowOffsetY", "api_method_all": "shadowOffsetY: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["r = 10;\n        ctx.shadowOffsetY = 20;\n        ctx.s", "\n              this.shadowOffsetY();\n              th", "X = 20;\n        ctx.shadowOffsetY = 20;\n        ctx.s", "hadow(true);\n  }\n\n  shadowOffsetY() {\n    this.contex", "0;\n    this.context.shadowOffsetY = 20;\n    this.cont", "\n      this.context.shadowOffsetY = 0;\n    }\n  }\n\n  i"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "font", "api_method_all": "font: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1278, "since": 8, "api_used": "\u662f", "lines": ["g container: grid').fontSize(20).fontColor(C", "height(40)\n        .fontSize(16)\n        .ba", "   Text('saturate').fontSize(15).fontColor(0", "t('2')\n            .fontSize(20)\n           ", "').key(\"alignSelf\").fontSize(9).fontColor(0x", "nSelf\").fontSize(9).fontColor(0xCCCCCC).widt", "margin(30)\n        .fontSize(20)\n        .on", "ETS TEST')\n        .fontSize(50)\n        .fo", "rast').fontSize(15).fontColor(0xCCCCCC).widt", "blur').fontSize(15).fontColor(0xCCCCCC).widt", "Basis').fontSize(9).fontColor(0xCCCCCC).widt", "  Text('hueRotate').fontSize(15).fontColor(0", "adow').fontSize(15).fontColor(0xCCCCCC).widt", " Text('alignItems').fontSize(9).fontColor(0x", " row').fontSize(20).fontColor(Color.Black).w", " Text('flexShrink').fontSize(9).fontColor(0x", "  Text('grayscale').fontSize(15).fontColor(0", "     Text('shadow').fontSize(15).fontColor(0", "  Text('font blur').fontSize(15).fontColor(0", "bb2cb)\n            .fontSize(20)\n           ", "cale').fontSize(15).fontColor(0xCCCCCC).widt", "t('1')\n            .fontSize(20)\n           ", "       Text('Left').fontSize(25)\n        }\n ", "ty 4').fontSize(20).fontColor(Color.Black).w", "t('4')\n            .fontSize(20)\n           ", "ness').fontSize(15).fontColor(0xCCCCCC).widt", "xGrow\").fontSize(9).fontColor(0xCCCCCC).widt", "ext('backdropBlur').fontSize(15).fontColor(0", "grid').fontSize(20).fontColor(Color.Black).w", "   Text('contrast').fontSize(15).fontColor(0", "vert').fontSize(15).fontColor(0xCCCCCC).widt", "     Text('Center').fontSize(25)\n        }\n ", "Blur').fontSize(15).fontColor(0xCCCCCC).widt", "displayPriority 4').fontSize(20).fontColor(C", "ntSize(50)\n        .fontWeight(FontWeight.Bo", "Items').fontSize(9).fontColor(0xCCCCCC).widt", "t('3')\n            .fontSize(20)\n           ", "ng container: row').fontSize(20).fontColor(C", " Text('brightness').fontSize(15).fontColor(0", "      Text('Right').fontSize(25)\n        }\n ", "w').key(\"flexGrow\").fontSize(9).fontColor(0x", "  Text('flexBasis').fontSize(9).fontColor(0x", "tate').fontSize(15).fontColor(0xCCCCCC).widt", "hrink').fontSize(9).fontColor(0xCCCCCC).widt", "     Text('invert').fontSize(15).fontColor(0", "10 }) {\n      Text('font blur').fontSize(15)", "2cb)\n              .fontSize(40)\n           ", "rate').fontSize(15).fontColor(0xCCCCCC).widt"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "placement.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "ListItem.ets", "background.ets", "Slider.ets", "PanDirectionJsunit.test.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "Stack.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "stepper.ets", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "lazyForEach.ets", "listItem.ets", "grid.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "rating.ets", "Path.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "GestureModeJsunit.test.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "Calendar.ets", "refresh.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "textAlign", "api_method_all": "textAlign: CanvasTextAlign", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 199, "since": 8, "api_used": "\u662f", "lines": ["wberry')\n          .textAlign(TextAlign.Center).b", "ign: \" + obj.$attrs.textAlign);\n      expect(obj.", "th(120).height(120).textAlign(TextAlign.Center).f", "PositionSetting001] textAlign: \" + obj.$attrs.tex", "xD2B48C)\n          .textAlign(TextAlign.Center)\n ", "(10)\n              .textAlign(TextAlign.Center).b", "dth('90%')\n        .textAlign(TextAlign.Start).ma", "'mango')\n          .textAlign(TextAlign.Center).b", "0BFFF)\n            .textAlign(TextAlign.Center)\n ", "Radius(10)\n        .textAlign(TextAlign.Center).b", "682B4)\n            .textAlign(TextAlign.Center)\n ", "'cursive')\n        .textAlign(TextAlign.Center)\n ", "banana')\n          .textAlign(TextAlign.Center).b", "  expect(obj.$attrs.textAlign).assertEqual('TextA", " if (eventData.data.textAlign) {\n        this.ali", "PositionSetting003] textAlign: \" + obj.$attrs.tex", "FEEEE)\n            .textAlign(TextAlign.Center)\n ", " ATTRS_TEXTALIGN = 'textAlign'\nconst ATTRS_CONTEN", "height(50)\n        .textAlign(TextAlign.Center)\n ", "  expect(obj.$attrs.textAlign).assertEqual(\"TextA", "oundColor(0xF5DEB3).textAlign(TextAlign.Center)\n ", " getInspectorByKey('textAlign');\n      console.in", "xFFEFD5)\n          .textAlign(TextAlign.Center)\n ", "xF5DEB3)\n          .textAlign(TextAlign.Center)\n ", "orange')\n          .textAlign(TextAlign.Center).b", "582B4)\n            .textAlign(TextAlign.Center)\n ", "C4)\n          .key('textAlign')\n\n        Text('di", "6)\n                .textAlign(TextAlign.Center)\n ", "6)\n                .textAlign(TextAlign.Center).b", "(18)\n              .textAlign(TextAlign.Center)\n ", "'apple')\n          .textAlign(TextAlign.Center).b", "ata: {\n            \"textAlign\": Alignment.BottomE"], "files": ["flex.ets", "gridContainer.ets", "gridPage.ets", "canvas.ets", "badge.ets", "bindContextMenu.ets", "Text.ets", "textStyle.ets", "Navigation.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "Constants.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "text.ets", "Grid.ets", "FormComponentPage.ets", "layoutConstraints.ets", "list.ets", "positionSetting.ets", "List.ets", "TextArea.ets", "GridContainer.ets", "dragEvent2.ets", "index.js", "Swiper.ets", "edgeEffect.ets", "backgroundAndSizeSetting.ets", "border.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "GridItem.ets", "TextAreaJsunit.test.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "listItem.ets", "grid.ets", "image.ets", "sharedTransition.ets", "ScrollBar.ets", "ColumnSplit.ets", "scrollCode.ets", "NavigatorCode.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderer", "api_method_name": "textBaseline", "api_method_all": "textBaseline: CanvasTextBaseline", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 12, "since": 8, "api_used": "\u662f", "lines": ["0, 30);\n        ctx.textBaseline = 'hanging';\n      ", ");\n    this.context.textBaseline = 'middle';\n    thi", ");\n    this.context.textBaseline = 'bottom';\n    thi", "\n              this.textBaseline();\n              th", "0, 30);\n        ctx.textBaseline = 'middle';\n       ", "0, 30);\n        ctx.textBaseline = 'bottom';\n       ", "5, 30);\n        ctx.textBaseline = 'alphabetic';\n   ", "erif';\n\n        ctx.textBaseline = 'top';\n        ct", "0 + height);\n  }\n\n  textBaseline() {\n    let height ", ");\n    this.context.textBaseline = 'alphabetic';\n   ", ");\n    this.context.textBaseline = 'hanging';\n    th", "';\n    this.context.textBaseline = 'top';\n    this.c"], "files": ["canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderingContext2D", "api_method_all": "declare class CanvasRenderingContext2D extends CanvasRenderer {\n  \n  readonly height: number;\n\n  \n  readonly width: number;\n\n  \n  toDataURL(type?: string, quality?: any): string;\n\n  \n  constructor(settings?: RenderingContextSettings);\n}", "api_method_name": "CanvasRenderingContext2D", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 18, "since": 8, "api_used": "\u662f", "lines": ["    uri: 'pages/obj_CanvasRenderingContext2D/router/index'\n     ", "ringContext2D = new CanvasRenderingContext2D(this.settings);\n\n  ", "sole.info(\"push obj_CanvasRenderingContext2D page success \" + JS", "\n  private context: CanvasRenderingContext2D = new CanvasRenderi", "\"pages/obj_OffscreenCanvasRenderingContext2D/router/\").assertEqu", "(\"push obj_OffscreenCanvasRenderingContext2D page error \" + JSON", "e.info(\"[router.obj_CanvasRenderingContext2D] getState\" + JSON.s", "(\"push obj_OffscreenCanvasRenderingContext2D page success \" + JS", "router.obj_OffscreenCanvasRenderingContext2D] getState\" + JSON.s", "  expect(\"pages/obj_CanvasRenderingContext2D/router/\").assertEqu", "ringContext2D = new CanvasRenderingContext2D(this.settings);\n  p", "     */\n    it('testCanvasRenderingContext2DComponent', 0, async", "ole.error(\"push obj_CanvasRenderingContext2D page error \" + JSON", "xt2D = new OffscreenCanvasRenderingContext2D(600, 600, this.sett", "'pages/obj_OffscreenCanvasRenderingContext2D/router/index'\n     ", "* @tc.name      testCanvasRenderingContext2DComponent\n     * @tc", "ffContext: OffscreenCanvasRenderingContext2D = new OffscreenCanv"], "files": ["canvas2.ets", "canvas.ets", "commonComponentJsApi.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderingContext2D", "api_method_name": "toDataURL", "api_method_all": "toDataURL(type?: string, quality?: any)", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["rendering context2D toDataURL-----\" + JSON.string", "dataURL = function5.toDataURL({type: 'image/png'}", "l = this.offContext.toDataURL();\n    console.info", "xt.stroke();\n  }\n\n  toDataURL() {\n    let dataUrl", "dataURL = offscreen.toDataURL();\n        var bitm", "\n              this.toDataURL();\n              th", "aUrl = this.context.toDataURL();\n    console.info"], "files": ["canvas2.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderingContext2D", "api_method_name": "constructor", "api_method_all": "constructor(settings?: RenderingContextSettings)", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderingContext2D", "api_method_name": "height", "api_method_all": "readonly height: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1455, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.height != null) {\n        ", "     .width('100%').height('40%').backgroundCo", "    }.width('100%').height('100%')\n  }\n}", "\"img_height=\" + img.height);\n  }\n}", "\n    .width('100%').height('100%').margin({ to", "width(200)\n        .height(200)\n    }.width('1", ".gridSpan)\n        .height(\"100%\")\n        .ba", "        })\n        .height(\"100%\")\n        .ba", "th(`${this.width}`).height(`${this.height}`).k", "   let height = img.height;\n    this.context.i", ":100').width('34%').height(100)\n          .bac", " img.width;\n    let height = img.height;\n    t", "dth('90%')\n        .height(40)\n        .fontSi", "   console.log(\"img_height=\" + img.height);\n  ", "sole.log(\"imageData_height=\" + imageData.heigh", "     }.width('90%').height(120).padding(10).ba", "ull) {\n        this.height = eventData.data.he", "h('50%')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .shadow", "eight=\" + imageData.height);\n  }\n\n  testImage(", "s('100')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .graysc", "h('33%')\n          .height(80)\n          .line", "le.log(\"imagebitmap_height=\" + height);\n  }\n\n ", "h('60%')\n          .height(100)\n          .lin", "= \"200px\";\n  @State height: string = \"200px\";\n", "h}`).height(`${this.height}`).key('ellipse')\n ", " Text('no alignSelf,height:80').width('33%').h", "xGrow(1)\n          .height(100)\n          .lin", "ht = eventData.data.height;\n      }\n    }\n  }\n", "gebitmap_height=\" + height);\n  }\n\n  testOffscr", "xGrow(2)\n          .height(100)\n          .lin", "lumn().width('50%').height(30).backgroundColor", "h('40%')\n          .height(100)\n          .lin", "Size({ width: 1200, height: 160 })\n        .ke", "    })\n            .height(50)\n            .ba", "width('90%')\n      .height(120)\n      .padding", "   })\n\n            .height(50)\n            .ba", "ridOffset)\n        .height(\"100%\")\n        .ba", "an')\n      }\n      .height(200)\n    }\n    .bac", " Text('no alignSelf,height:100').width('34%').", "t:80').width('33%').height(80)\n          .back", "    }.width('100%').height('100%')\n  }\n\n  test"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "AlertDialog.ets", "sliderProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasRenderingContext2D", "api_method_name": "width", "api_method_all": "readonly width: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1772, "since": 8, "api_used": "\u662f", "lines": ["temsColumn\")\n      .width('90%')\n      .borde", "thValue}`)\n        .width(200)\n        .heigh", ");\n        })\n    }.width('100%').height('100", "Stretch)\n          .width('33%')\n          .h", "s.alignItems)\n    }.width('100%').padding({ t", ")\n        }\n      }.width('90%').key('gridCon", "gnSelf,height:100').width('34%').height(100)\n", "hrink(2)\n          .width('40%')\n          .h", "ull) {\n        this.width = eventData.data.wi", "(\"img_width=\" + img.width);\n    console.log(\"", "blurValue)\n        .width('90%')\n        .hei", "s/bg.jpg\");\n    let width = img.width;\n    le", "ign.Center)\n      }.width('90%').height(120).", "le.log(\"imagebitmap_width=\" + width);\n    con", "fontColor(0xCCCCCC).width('90%')\n      Column", "pse().width(`${this.width}`).height(`${this.h", "fontColor(0xCCCCCC).width('90%')\n      Flex({", "fontColor(0xCCCCCC).width('90%')\n      Text()", "Shrink')\n          .width('40%')\n          .h", "fontColor(0xCCCCCC).width('90%')\n      Text('", "eExample {\n  @State width: string = \"200px\";\n", "agebitmap_width=\" + width);\n    console.log(\"", "lor(0xAFEEEE)\n    }.width('100%').margin({ to", "xBasis\")\n          .width('60%')\n          .h", "    let width = img.width;\n    let height = i", "%')\n      .border({ width: 1 })\n      .alignI", "enabled)\n    }\n    .width('100%')\n    .paddin", "t: 30 })\n    }\n    .width('100%').height('100", "sole.log(\"imageData_width=\" + imageData.width", "}\n    }.padding(30).width('100%')\n  }\n}", "Shrink\")\n          .width('50%')\n          .h", "    Text()\n        .width('90%')\n        .hei", " .height(200)\n    }.width('100%').margin({ to", "ey('ellipse')\n    }.width('100%').height('100", ") {\n      Ellipse().width(`${this.width}`).he", " {\n        Column().width('50%').height(30).b", "ckgroundImageSize({ width: 1200, height: 160 ", " if (eventData.data.width != null) {\n        ", "   console.log(\"img_width=\" + img.width);\n   ", ".key('flex')\n      .width('90%')\n      .heigh", "ignSelf,height:80').width('33%').height(80)\n ", "s.context)\n        .width('100%').height('40%", "width=\" + imageData.width);\n    console.log(\"", "fontColor(0xCCCCCC).width('90%')\n      Flex()", "th = eventData.data.width;\n      }\n      if (", "E)\n        Column().width('50%').height(30).b"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "OffscreenCanvasRenderingContext2D", "api_method_all": "declare class OffscreenCanvasRenderingContext2D extends CanvasRenderer {\n  \n  toDataURL(type?: string, quality?: any): string;\n\n  \n  transferToImageBitmap(): ImageBitmap;\n\n  \n  constructor(width: number, height: number, settings?: RenderingContextSettings);\n}", "api_method_name": "OffscreenCanvasRenderingContext2D", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 7, "since": 8, "api_used": "\u662f", "lines": ["    uri: 'pages/obj_OffscreenCanvasRenderingContext2D/router/index'\n     ", "ringContext2D = new OffscreenCanvasRenderingContext2D(600, 600, this.sett", "ole.error(\"push obj_OffscreenCanvasRenderingContext2D page error \" + JSON", "  expect(\"pages/obj_OffscreenCanvasRenderingContext2D/router/\").assertEqu", "private offContext: OffscreenCanvasRenderingContext2D = new OffscreenCanv", "sole.info(\"push obj_OffscreenCanvasRenderingContext2D page success \" + JS", "e.info(\"[router.obj_OffscreenCanvasRenderingContext2D] getState\" + JSON.s"], "files": ["canvas2.ets", "commonComponentJsApi.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "OffscreenCanvasRenderingContext2D", "api_method_name": "toDataURL", "api_method_all": "toDataURL(type?: string, quality?: any)", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 8, "since": 8, "api_used": "\u662f", "lines": ["rendering context2D toDataURL-----\" + JSON.string", "dataURL = function5.toDataURL({type: 'image/png'}", "l = this.offContext.toDataURL();\n    console.info", "xt.stroke();\n  }\n\n  toDataURL() {\n    let dataUrl", "dataURL = offscreen.toDataURL();\n        var bitm", "\n              this.toDataURL();\n              th", "aUrl = this.context.toDataURL();\n    console.info"], "files": ["canvas2.ets", "canvas.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "OffscreenCanvasRenderingContext2D", "api_method_name": "transferToImageBitmap", "api_method_all": "transferToImageBitmap()", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": [" bitmap = offscreen.transferToImageBitmap();\n    this.ctx.tra", "e = this.offContext.transferToImageBitmap();\n    this.context", " bitmap = offscreen.transferToImageBitmap();\n        ctx.tran", " bitmap = offscreen.transferToImageBitmap();\n        canvas.t"], "files": ["global.ets", "canvas2.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "OffscreenCanvasRenderingContext2D", "api_method_name": "constructor", "api_method_all": "constructor(width: number, height: number, settings?: RenderingContextSettings)", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "OffscreenCanvas", "api_method_all": "declare class OffscreenCanvas extends CanvasRenderer {\n  \n  height: number;\n\n  \n  width: number;\n\n  \n  transferToImageBitmap(): ImageBitmap;\n\n  \n  constructor(width: number, height: number);\n}", "api_method_name": "OffscreenCanvas", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 36, "since": 8, "api_used": "\u662f", "lines": ["var offscreen = new OffscreenCanvas(100,40);\n        va", "var offscreen = new OffscreenCanvas(500,500);\n        v", "e.info(\"[router.obj_OffscreenCanvasRenderingContext2D] ", "       console.log('OffscreenCanvas width='+offscreen.w", "sole.info(\"push obj_OffscreenCanvas page success \" + JS", "private offContext: OffscreenCanvasRenderingContext2D =", "sole.info(\"push obj_OffscreenCanvasRenderingContext2D p", "ole.error(\"push obj_OffscreenCanvas page error \" + JSON", "var offscreen = new OffscreenCanvas(100, 300);\n        ", "  expect(\"pages/obj_OffscreenCanvasRenderingContext2D/r", "  expect(\"pages/obj_OffscreenCanvas/router/\").assertEqu", "    uri: 'pages/obj_OffscreenCanvasRenderingContext2D/r", "ole.error(\"push obj_OffscreenCanvasRenderingContext2D p", "var offscreen = new OffscreenCanvas(300, 300);\n    var ", "var offscreen = new OffscreenCanvas(100,50);\n        va", "          message: 'OffscreenCanvas height='+offscreen.", "var offscreen = new OffscreenCanvas(200,120);\n        v", "e.info(\"[router.obj_OffscreenCanvas] getState\" + JSON.s", "       console.log('OffscreenCanvas height='+offscreen.", "    uri: 'pages/obj_OffscreenCanvas/router/index'\n     ", "ringContext2D = new OffscreenCanvasRenderingContext2D(6", "var offscreen = new OffscreenCanvas(200,200);\n        v", "var offscreen = new OffscreenCanvas(200,100);\n        v", "'+offscreen.width+',OffscreenCanvas height='+offscreen.", "height);\n  }\n\n  testOffscreenCanvas() {\n    var offscre", "          message: 'OffscreenCanvas width='+offscreen.w", "\n          this.testOffscreenCanvas();\n          this.t", "var offscreen = new OffscreenCanvas(100,200);\n        v"], "files": ["global.ets", "canvas2.ets", "commonComponentJsApi.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "OffscreenCanvas", "api_method_name": "transferToImageBitmap", "api_method_all": "transferToImageBitmap()", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": [" bitmap = offscreen.transferToImageBitmap();\n    this.ctx.tra", "e = this.offContext.transferToImageBitmap();\n    this.context", " bitmap = offscreen.transferToImageBitmap();\n        ctx.tran", " bitmap = offscreen.transferToImageBitmap();\n        canvas.t"], "files": ["global.ets", "canvas2.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "OffscreenCanvas", "api_method_name": "constructor", "api_method_all": "constructor(width: number, height: number)", "api_type": "", "api_args_count": 2, "api_level": null, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "OffscreenCanvas", "api_method_name": "height", "api_method_all": "height: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1455, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.height != null) {\n        ", "     .width('100%').height('40%').backgroundCo", "    }.width('100%').height('100%')\n  }\n}", "\"img_height=\" + img.height);\n  }\n}", "\n    .width('100%').height('100%').margin({ to", "width(200)\n        .height(200)\n    }.width('1", ".gridSpan)\n        .height(\"100%\")\n        .ba", "        })\n        .height(\"100%\")\n        .ba", "th(`${this.width}`).height(`${this.height}`).k", "   let height = img.height;\n    this.context.i", ":100').width('34%').height(100)\n          .bac", " img.width;\n    let height = img.height;\n    t", "dth('90%')\n        .height(40)\n        .fontSi", "   console.log(\"img_height=\" + img.height);\n  ", "sole.log(\"imageData_height=\" + imageData.heigh", "     }.width('90%').height(120).padding(10).ba", "ull) {\n        this.height = eventData.data.he", "h('50%')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .shadow", "eight=\" + imageData.height);\n  }\n\n  testImage(", "s('100')\n          .height(100)\n          .lin", "dth('90%')\n        .height(40)\n        .graysc", "h('33%')\n          .height(80)\n          .line", "le.log(\"imagebitmap_height=\" + height);\n  }\n\n ", "h('60%')\n          .height(100)\n          .lin", "= \"200px\";\n  @State height: string = \"200px\";\n", "h}`).height(`${this.height}`).key('ellipse')\n ", " Text('no alignSelf,height:80').width('33%').h", "xGrow(1)\n          .height(100)\n          .lin", "ht = eventData.data.height;\n      }\n    }\n  }\n", "gebitmap_height=\" + height);\n  }\n\n  testOffscr", "xGrow(2)\n          .height(100)\n          .lin", "lumn().width('50%').height(30).backgroundColor", "h('40%')\n          .height(100)\n          .lin", "Size({ width: 1200, height: 160 })\n        .ke", "    })\n            .height(50)\n            .ba", "width('90%')\n      .height(120)\n      .padding", "   })\n\n            .height(50)\n            .ba", "ridOffset)\n        .height(\"100%\")\n        .ba", "an')\n      }\n      .height(200)\n    }\n    .bac", " Text('no alignSelf,height:100').width('34%').", "t:80').width('33%').height(80)\n          .back", "    }.width('100%').height('100%')\n  }\n\n  test"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "gridPage.ets", "enumsImage.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "fontWeight.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "AlertDialog.ets", "sliderProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "Calendar.ets", "panelProps.test.js", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "OffscreenCanvas", "api_method_name": "width", "api_method_all": "width: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 1772, "since": 8, "api_used": "\u662f", "lines": ["temsColumn\")\n      .width('90%')\n      .borde", "thValue}`)\n        .width(200)\n        .heigh", ");\n        })\n    }.width('100%').height('100", "Stretch)\n          .width('33%')\n          .h", "s.alignItems)\n    }.width('100%').padding({ t", ")\n        }\n      }.width('90%').key('gridCon", "gnSelf,height:100').width('34%').height(100)\n", "hrink(2)\n          .width('40%')\n          .h", "ull) {\n        this.width = eventData.data.wi", "(\"img_width=\" + img.width);\n    console.log(\"", "blurValue)\n        .width('90%')\n        .hei", "s/bg.jpg\");\n    let width = img.width;\n    le", "ign.Center)\n      }.width('90%').height(120).", "le.log(\"imagebitmap_width=\" + width);\n    con", "fontColor(0xCCCCCC).width('90%')\n      Column", "pse().width(`${this.width}`).height(`${this.h", "fontColor(0xCCCCCC).width('90%')\n      Flex({", "fontColor(0xCCCCCC).width('90%')\n      Text()", "Shrink')\n          .width('40%')\n          .h", "fontColor(0xCCCCCC).width('90%')\n      Text('", "eExample {\n  @State width: string = \"200px\";\n", "agebitmap_width=\" + width);\n    console.log(\"", "lor(0xAFEEEE)\n    }.width('100%').margin({ to", "xBasis\")\n          .width('60%')\n          .h", "    let width = img.width;\n    let height = i", "%')\n      .border({ width: 1 })\n      .alignI", "enabled)\n    }\n    .width('100%')\n    .paddin", "t: 30 })\n    }\n    .width('100%').height('100", "sole.log(\"imageData_width=\" + imageData.width", "}\n    }.padding(30).width('100%')\n  }\n}", "Shrink\")\n          .width('50%')\n          .h", "    Text()\n        .width('90%')\n        .hei", " .height(200)\n    }.width('100%').margin({ to", "ey('ellipse')\n    }.width('100%').height('100", ") {\n      Ellipse().width(`${this.width}`).he", " {\n        Column().width('50%').height(30).b", "ckgroundImageSize({ width: 1200, height: 160 ", " if (eventData.data.width != null) {\n        ", "   console.log(\"img_width=\" + img.width);\n   ", ".key('flex')\n      .width('90%')\n      .heigh", "ignSelf,height:80').width('33%').height(80)\n ", "s.context)\n        .width('100%').height('40%", "width=\" + imageData.width);\n    console.log(\"", "fontColor(0xCCCCCC).width('90%')\n      Flex()", "th = eventData.data.width;\n      }\n      if (", "E)\n        Column().width('50%').height(30).b"], "files": ["pageTransition2.ets", "ohosPrompt.ets", "systemRouterA.ets", "pathProps.test.js", "dividerProps.test.js", "video.ets", "Navigator.ets", "longPressGesture.ets", "canvas2.ets", "placement.ets", "playMode.ets", "Qrcode.ets", "Row.ets", "Navigation.ets", "imageFit.ets", "PathJsunit.test.ets", "Span.ets", "polylineProps.test.js", "Progress.ets", "column.ets", "Panel.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "geometryTransition.ets", "toolbarItemProps.test.js", "marquee.ets", "Rating.ets", "enumsLineCapStyle.ets", "mediaquery.test.js", "Swiper.ets", "Divider.ets", "border.ets", "ResponseRegion.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "transition.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "EllipseJsunit.test.ets", "scrollCode.ets", "button.ets", "FlexWrapJsunit.test.ets", "RichText.ets", "polyline.ets", "focus.ets", "touch.ets", "circleProps.test.js", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "Counter.ets", "gauge.ets", "enumsVerticalAlign.ets", "Stack.ets", "bindMenu.ets", "swiper.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "positionSetting.ets", "TextArea.ets", "animatorOption.ets", "tapGesture.ets", "shapeClipping.ets", "flexDirection.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "stepper.ets", "svgProps.test.js", "shape.ets", "labelProps.test.js", "image.ets", "row.ets", "FlexDirectionJsunit.test.ets", "loadingProgress.ets", "Marquee.ets", "stepperProps.test.js", "ratingProps.test.js", "flex.ets", "sharedTransition2.ets", "Shape.ets", "gridContainer.ets", "Tab.ets", "PatternLock.ets", "Polyline.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "enable.ets", "PieceCode.ets", "polygon.ets", "badge.ets", "lineProps.test.js", "qrcodeProps.test.js", "textStyle.ets", "imageEffects.ets", "ohosRouterB.ets", "ColumnSplit.ets", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "layoutConstraints.ets", "videoProps.test.js", "enumsItemAlign.ets", "list.ets", "colorGradient.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "dragEvent.ets", "QrcodeJsunit.test.ets", "Video.ets", "pickerProps.test.js", "lazyForEach.ets", "circle.ets", "listItem.ets", "selectProps.test.js", "grid.ets", "Button.ets", "Polygon.ets", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "global.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "mouseEvent.ets", "canvas.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "bindContextMenu.ets", "CircleJsunit.test.ets", "Rect.ets", "divProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "radio.ets", "appear.ets", "Constants.ets", "rating.ets", "animationStatus.ets", "zIndex.ets", "Path.ets", "enumsFlexAlign.ets", "fillMode.ets", "line.ets", "curves.ets", "priorityGesture.ets", "DataPanel.ets", "ellipseProps.test.js", "FormComponentPage.ets", "Grid.ets", "touchAble.ets", "pageTransition.ets", "visibility.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "polygonProps.test.js", "sliderProps.test.js", "RowJsunit.test.ets", "inputProps.test.js", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "parallelGesture.ets", "timeStamp.ets", "Toggle.ets", "progressProps.test.js", "slider.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "enumsHorizontalAlign.ets", "panel.ets", "rectProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasInterface", "api_method_all": "interface CanvasInterface {\n  \n  (context?: CanvasRenderingContext2D): CanvasAttribute;\n}", "api_method_name": "CanvasInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasInterface", "api_method_name": "context", "api_method_all": "(context?: CanvasRenderingContext2D): CanvasAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 223, "since": 8, "api_used": "\u662f", "lines": ["+ height);\n    this.context.textAlign = 'end';\n", "eWidth() {\n    this.context.lineWidth = 5;\n    ", "{\n      Canvas(this.context)\n        .width('10", "Width = 8;\n    this.context.beginPath();\n    th", "Width = 8;\n    this.context.lineJoin = 'miter';", "+ height);\n    this.context.textAlign = 'center", "        Canvas(this.context)\n            .width", "rLimit() {\n    this.context.lineWidth = 8;\n    ", "Limit = 3;\n    this.context.moveTo(130, 155);\n ", "ns-serif';\n    this.context.textAlign = 'start'", "n = 'end';\n    this.context.fillText('textAlign", "190, 160);\n    this.context.lineTo(130, 162);\n ", "= 'round';\n    this.context.moveTo(220, 50);\n  ", "(220, 50);\n    this.context.lineTo(320, 50);\n  ", "(370, 75);\n    this.context.stroke();\n  }\n\n  mi", "+ height);\n    this.context.textAlign = 'right'", "Width = 5;\n    this.context.strokeRect(25, 25, ", "ns-serif';\n    this.context.fillText(\"Hello Wor", "ght = 230;\n    this.context.strokeStyle = '#000", ".stroke();\n    this.context.font = '20px sans-s", "eStyle() {\n    this.context.lineWidth = 10;\n   ", "+ height);\n    this.context.textAlign = 'left';", "130, 162);\n    this.context.stroke();\n  }\n\n  fo", "(370, 25);\n    this.context.lineTo(430, 50);\n  ", "'#0000ff';\n    this.context.moveTo(220, 10 + he", "(320, 50);\n    this.context.stroke();\n  }\n\n  li", "= 'right';\n    this.context.fillText('textAlign", " 'center';\n    this.context.fillText('textAlign", "mg.height;\n    this.context.imageSmoothingEnabl", "ginPath();\n    this.context.lineWidth = 8;\n    ", "= 'miter';\n    this.context.miterLimit = 3;\n   ", "= 'start';\n    this.context.fillText('textAlign", "(430, 50);\n    this.context.lineTo(370, 75);\n  ", " = 'left';\n    this.context.fillText('textAlign", "ineCap() {\n    this.context.lineWidth = 8;\n    ", "+ height);\n    this.context.stroke();\n    this.", "=> {\n          this.context.imageSmoothingEnabl", "lStyle() {\n    this.context.fillStyle = '#0000f", "= 'miter';\n    this.context.moveTo(370, 25);\n  ", "ginPath();\n    this.context.lineCap = 'round';\n", "  font() {\n    this.context.font = '20px sans-s", "'#0000ff';\n    this.context.fillRect(20, 120, 7", "gs(true);\n  private context: CanvasRenderingCon", "neJoin() {\n    this.context.beginPath();\n    th", "+ height);\n    this.context.lineTo(220, 210 + h", "'#0000ff';\n    this.context.strokeRect(115, 25,", "130, 155);\n    this.context.lineTo(190, 160);\n ", "d = false;\n    this.context.drawImage(img, 30, ", "idth = 10;\n    this.context.strokeStyle = '#000"], "files": ["canvas2.ets", "global.ets", "canvas.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasAttribute", "api_method_all": "declare class CanvasAttribute extends CommonMethod<CanvasAttribute> {\n  \n  onReady(event: () => void): CanvasAttribute;\n}", "api_method_name": "CanvasAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasAttribute", "api_method_name": "onReadyevent", "api_method_all": "onReady(event: () => void): CanvasAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CanvasAttribute", "api_method_name": "onReadyevent", "api_method_all": "onReady(event: () => void): CanvasAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}