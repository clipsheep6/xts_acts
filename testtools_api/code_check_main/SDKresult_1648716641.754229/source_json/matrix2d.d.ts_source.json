{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\matrix2d", "api": [{"api_class_name": "Matrix2D", "api_method_all": "declare class Matrix2D {\n  \n  scaleX?: number;\n\n  \n  rotateY?: number;\n\n  \n  rotateX?: number;\n\n  \n  scaleY?: number;\n\n  \n  translateX?: number;\n\n  \n  translateY?: number;\n\n  \n  identity(): Matrix2D;\n\n  \n  invert(): Matrix2D;\n\n  \n  multiply(other?: Matrix2D): Matrix2D;\n\n  \n  rotate(rx?: number, ry?: number): Matrix2D;\n\n  \n  translate(tx?: number, ty?: number): Matrix2D;\n\n  \n  scale(sx?: number, sy?: number): Matrix2D;\n\n  \n  constructor();\n}", "api_method_name": "Matrix2D", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "identity", "api_method_all": "identity()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["ue: object= Matrix4.identity().translate({ x: 10", "s.matrix3 = Matrix4.identity().scale(eventData.d", "2: object = Matrix4.identity().translate({ x: 30", "4: object = Matrix4.identity().rotate({x:1, y:1,", "5: object = Matrix4.identity().scale({x:5, y:1, ", "6: object = Matrix4.identity().translate({x:100,", "N.stringify(Matrix4.identity().translate(eventDa", "3: object = Matrix4.identity().scale({ x: 3 }).c", " .transform(Matrix4.identity().translate({ x: 10", "x1: object= Matrix4.identity().transformPoint([1", "s.matrix2 = Matrix4.identity().translate(eventDa", "value is\" + Matrix4.identity()\n          .transl"], "files": ["transForm.ets", "ohosMatrix4.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "invert", "api_method_all": "invert()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 23, "since": 8, "api_used": "\u662f", "lines": ["h('90%').height(40).invert(`${this.invertValue", " if (eventData.data.invertValue != null) {\n   ", "Row7')\n\n      Text('invert').fontSize(15).font", "nst ATTRS_INVERT = 'invert'\nconst ATTRS_BRIGHT", "ffCanvas2.filter = 'invert(100%)';\n        off", "(40).invert(`${this.invertValue}`).key('center", "xpect(objNew.$attrs.invert).assertEqual(20);\n ", "xpect(objNew.$attrs.invert).assertEqual(214748", "ue = eventData.data.invertValue;\n      }\n     ", "ata: {\n            \"invertValue\": 0x7FFFFFFF\n ", "ata: {\n            \"invertValue\": 'error'\n    ", "ata: {\n            \"invertValue\": 0x80000000\n ", "tring= 20;\n  @State invertValue: string= 10;\n ", "  expect(obj.$attrs.invert).assertEqual(10);\n ", "ata: {\n            \"invertValue\": \"20\"\n       ", "xpect(objNew.$attrs.invert).assertEqual(0);\n  ", "ull) {\n        this.invertValue = eventData.da"], "files": ["ImageEffectsJsunit.test.ets", "imageEffects.ets", "Constants.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "multiply", "api_method_all": "multiply(other?: Matrix2D)", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "rotate", "api_method_all": "rotate(rx?: number, ry?: number)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 392, "since": 8, "api_used": "\u662f", "lines": [" getInspectorByKey('rotate9');\n      let obj =", "  expect(obj.$attrs.rotate.angle).assertEqual(", "  expect(obj.$attrs.rotate.centerY).assertEqua", "(100)\n        .key('rotate8')\n      Image('/im", "xpect(objNew.$attrs.rotate.x).assertEqual('2.0", " getInspectorByKey('rotate');\n      let obj = ", "10 })\n        .key('rotate2')\n\n      Text('sca", " getInspectorByKey('rotate8');\n      let obj =", "  expect(obj.$attrs.rotate.z).assertEqual('1.0", "sMatrix4 {\n  @State rotateValue: object= {\n   ", "EEEE)\n        .key('rotate3')\n\n      Text('Mat", "xpect(objNew.$attrs.rotate.centerX).assertEqua", "(100)\n        .key('rotate7')\n      Image('/im", " getInspectorByKey('rotate');\n      let objNew", "ify(sendEventByKey('rotate5', 10, \"\")));\n     ", "0 }))\n        .key('rotate4')\n    }.width('100", "xpect(objNew.$attrs.rotate.y).assertEqual('2.0", " if (eventData.data.rotateValue != null) {\n   ", "       .rotate(this.rotateValue)\n        .widt", " 5 })\n        .key('rotate6')\n      Image('/im", "ull) {\n        this.rotateValue = JSON.parse(e", "umn() {\n      Text('rotate').width('90%').font", " getInspectorByKey('rotate6');\n      let objNe", "     Row()\n        .rotate(this.rotateValue)\n ", "arse(eventData.data.rotateValue);\n      }\n    ", "EEEE)\n        .key('rotate')\n\n      Text('tran", " getInspectorByKey('rotate3');\n      let objNe", "mExample {\n  @State rotateValue: object= {\n   ", "0 }))\n        .key('rotate4')\n      Button(\"ge", "ep(1000);\n      let rotateValue = {x: 2, y: 2,", "ata: {\n            \"rotateValue\": JSON.stringi", "ue\": JSON.stringify(rotateValue)\n          }\n ", "xpect(objNew.$attrs.rotate.centerY).assertEqua", "xpect(objNew.$attrs.rotate.z).assertEqual('2.0", "  expect(obj.$attrs.rotate.y).assertEqual('1.0", "  expect(obj.$attrs.rotate.x).assertEqual('1.0", "  expect(obj.$attrs.rotate.centerX).assertEqua", " Matrix4.identity().rotate({x:1, y:1, z:2, ang", "(100)\n        .key('rotate9')\n    }.width('100", " getInspectorByKey('rotate7');\n      let obj =", "olor(0x2788D9).key('rotate5')\n      Image('/im", "umn() {\n      Text('rotate').width('10%').font"], "files": ["ohosPrompt.ets", "pathProps.test.js", "circleProps.test.js", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "polylineProps.test.js", "OhosPromptJsunit.test.ets", "ellipseProps.test.js", "TransFormJsunit.test.ets", "polygonProps.test.js", "index.js", "animateTransformProps.test.js", "tspanProps.test.js", "svgProps.test.js", "animateMotionProps.test.js", "svgTextProps.test.js", "transForm.ets", "motionPath.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "translate", "api_method_all": "translate(tx?: number, ty?: number)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 280, "since": 8, "api_used": "\u662f", "lines": ["(Matrix4.identity().translate(eventData.data.matr", "     Row()\n        .translate(this.transformValue", "form: {\n            translate: '-120px',\n        ", "tate')\n\n      Text('translate').width('10%').font", "entity()\n          .translate(eventData.data.matr", "form: {\n            translateX: '100px',\n        ", " Matrix4.identity().translate({ x: 300 }).copy()\n", "'gestureMode')\n    .translate({ x: this.offsetX, ", "('PanGesture')\n    .translate({ x: this.offsetX, ", "Transform();\n  }\n\n  translate() {\n    this.contex", " Matrix4.identity().translate({x:100, y:200, z:30", "e: 300\n  }\n  @State translateValue: object= { x: ", " Matrix4.identity().translate(eventData.data.matr", " }).margin(80)\n    .translate({ x: this.offsetX, ", ");\n    this.context.translate(50, 50);\n    this.c", "tate')\n\n      Text('translate').width('90%').font", "100px',\n            translateY: '0px',\n          ", " '0px',\n            translateZ: '20px',\n         ", "form: {\n            translateX: '0px',\n          ", "(Matrix4.identity().translate({ x: 100, y: 100, z", " Matrix4.identity().translate({ x: 100, y: 100, z", "\n              this.translate();\n              th", " '0px',\n            translateY: '5px',\n          "], "files": ["animateTransformProps.test.js", "PanGesture.ets", "panDirection.ets", "pathProps.test.js", "rectProps.test.js", "svgProps.test.js", "polygonProps.test.js", "circleProps.test.js", "polylineProps.test.js", "transForm.ets", "ellipseProps.test.js", "gestureMode.ets", "index.js", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "scale", "api_method_all": "scale(sx?: number, sy?: number)", "api_type": "", "api_args_count": 2, "api_level": 11, "api_used_count": 1026, "since": 8, "api_used": "\u662f", "lines": ["(eventData.data.grayscaleValue != null) {\n   ", "RS_GRAYSCALE = 'grayscale'\nconst ATTRS_BLUR =", "  expect(obj.$attrs.scale.y).assertEqual('0.5", "   }\n      })\n    }.scale({ x: this.scale }).", "')\n\n      Text('grayscale').fontSize(15).font", "        .scale(this.scaleValue)\n        .widt", "ep(1000);\n      let scaleValue = { x: 1, y: 1", " eventData.data.grayscaleValue;\n      }\n     ", " Matrix4.identity().scale({ x: 3 }).copy()\n  ", "Y: 5 }\n  @State grayscaleValue: string= 10;\n ", "xpect(objNew.$attrs.scale.y).assertEqual('1.0", ".transitionTypeOne, scale: { x: 0, y: 1.0, z:", "  }.scale({ x: this.scale }).opacity(this.opa", "     \"scale\" : this.scale,\n              \"opa", "context.filter('grayscale(50%)');\n    this.co", "00, y: 5 }\n  @State scaleValue: object= { x: ", "arse(eventData.data.scaleValue);\n      }\n    ", " Matrix4.identity().scale(eventData.data.matr", "ue\": JSON.stringify(scaleValue)\n          }\n ", "  expect(obj.$attrs.scale.x).assertEqual('2.0", "ull) {\n        this.scaleValue = JSON.parse(e", "ata: {\n            \"scaleValue\": JSON.stringi", "ep(1000);\n      let scaleValue = {\n        x:", "xpect(objNew.$attrs.scale.x).assertEqual('1.0", "ate2')\n\n      Text('scale').width('90%').font", "nExample {\n  @State scale: number = 1\n  @Stat", ".transitionTypeTwo, scale: { x: 1.0, y: 0.0 }", "ayscale(`${this.grayscaleValue}`)\n        .ke", " if (eventData.data.scaleValue != null) {\n   ", "     Row()\n        .scale(this.scaleValue)\n  ", " {\n        this.grayscaleValue = eventData.da", "Example1 {\n  @State scale: number = 1\n  @Stat", "pect(obj.$attrs.grayscale).assertEqual(0);\n  ", "ht(40)\n        .grayscale(`${this.grayscaleVa", "a: {\n              \"scale\" : this.scale,\n    ", " Matrix4.identity().scale({x:5, y:1, z:1, cen"], "files": ["pageTransition2.ets", "pathProps.test.js", "circleProps.test.js", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "ohosMatrix4.ets", "lineProps.test.js", "imageEffects.ets", "Constants.ets", "polylineProps.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "pageTransition.ets", "CheckboxJsunit.test.ets", "polygonProps.test.js", "index.js", "PageTransitionJsunit.test.ets", "animateTransformProps.test.js", "svgProps.test.js", "progressProps.test.js", "transition.ets", "transForm.ets", "sharedTransition.ets", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 80, "since": 0, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "scaleX", "api_method_all": "scaleX?: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 82, "since": 8, "api_used": "\u662f", "lines": ["30deg',\n            scaleX:1,\n            scal", "10deg',\n            scaleX:0.5,\n            sc", "ateY:'10deg',\n      scaleX:0.5,\n      scaleY:0", "ateZ:'30deg',\n      scaleX:1,\n      scaleY:1,\n"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "rotateY", "api_method_all": "rotateY?: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 82, "since": 8, "api_used": "\u662f", "lines": ["ateX:'10deg',\n      rotateY:'10deg',\n      scal", "tateX:'0deg',\n      rotateY:'0deg',\n      rotat", "10deg',\n            rotateY:'10deg',\n          ", "'0deg',\n            rotateY:'0deg',\n           "], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "rotateX", "api_method_all": "rotateX?: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 82, "since": 8, "api_used": "\u662f", "lines": [" '5px',\n            rotateX:'10deg',\n          ", "'20px',\n            rotateX:'0deg',\n           ", "lateY: '5px',\n      rotateX:'10deg',\n      rota", "ateZ: '20px',\n      rotateX:'0deg',\n      rotat"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "scaleY", "api_method_all": "scaleY?: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 82, "since": 8, "api_used": "\u662f", "lines": ["eX:0.5,\n            scaleY:0.7,\n            sk", "aleX:1,\n            scaleY:1,\n            scal", "  scaleX:0.5,\n      scaleY:0.7,\n      skewX:'2", "    scaleX:1,\n      scaleY:1,\n      scaleZ:2,\n"], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "translateX", "api_method_all": "translateX?: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 82, "since": 8, "api_used": "\u662f", "lines": [" transform: {\n      translateX: '100px',\n      tra", "form: {\n            translateX: '0px',\n           ", " transform: {\n      translateX: '0px',\n      trans", "form: {\n            translateX: '100px',\n         "], "files": ["index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Matrix2D", "api_method_name": "translateY", "api_method_all": "translateY?: number", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 82, "since": 8, "api_used": "\u662f", "lines": ["teX: '100px',\n      translateY: '0px',\n      trans", "100px',\n            translateY: '0px',\n           ", "lateX: '0px',\n      translateY: '5px',\n      rotat", " '0px',\n            translateY: '5px',\n           "], "files": ["index.js"], "is_white": " ", "desc": " "}]}