{"subsystem_ch": "\u5143\u80fd\u529b\u5b50\u7cfb\u7edf", "subsystem_en": "aafwk", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\app\\context", "api": [{"api_class_name": "Context", "api_method_all": "export interface Context extends BaseContext {\n\n    \n    getOrCreateLocalDir(): Promise<string>;\n    getOrCreateLocalDir(callback: AsyncCallback<string>): void;\n    \n    verifyPermission(permission: string, options?: PermissionOptions): Promise<number>;\n    verifyPermission(permission: string, options: PermissionOptions, callback: AsyncCallback<number>): void;\n    verifyPermission(permission: string, callback: AsyncCallback<number>): void;\n\n    \n    requestPermissionsFromUser(permissions: Array<string>, requestCode: number, resultCallback: AsyncCallback<PermissionRequestResult>): void;\n    requestPermissionsFromUser(permissions: Array<string>, requestCode: number): Promise<PermissionRequestResult>;\n\n    \n    getApplicationInfo(callback: AsyncCallback<ApplicationInfo>): void\n    getApplicationInfo(): Promise<ApplicationInfo>;\n\n    \n    getBundleName(callback: AsyncCallback<string>): void\n    getBundleName(): Promise<string>;\n\n    \n    getDisplayOrientation(callback: AsyncCallback<DisplayOrientation>): void\n    getDisplayOrientation(): Promise<DisplayOrientation>;\n    \n    \n    setDisplayOrientation(orientation: DisplayOrientation, callback: AsyncCallback<void>): void\n    setDisplayOrientation(orientation: DisplayOrientation): Promise<void>;\n    \n    \n    setShowOnLockScreen(show: boolean, callback: AsyncCallback<void>): void\n    setShowOnLockScreen(show: boolean): Promise<void>;\n    \n    \n    setWakeUpScreen(wakeUp: boolean, callback: AsyncCallback<void>): void\n    setWakeUpScreen(wakeUp: boolean): Promise<void>;  \n\n    \n    getProcessInfo(callback: AsyncCallback<ProcessInfo>): void\n    getProcessInfo(): Promise<ProcessInfo>;\n\n    \n    getElementName(callback: AsyncCallback<ElementName>): void\n    getElementName(): Promise<ElementName>;\n\n    \n    getProcessName(callback: AsyncCallback<string>): void\n    getProcessName(): Promise<string>;\n\n    \n    getCallingBundle(callback: AsyncCallback<string>): void\n    getCallingBundle(): Promise<string>;\n\n    \n    getFilesDir(callback: AsyncCallback<string>): void;\n    getFilesDir(): Promise<string>;\n\n    \n    getCacheDir(callback: AsyncCallback<string>): void;\n    getCacheDir(): Promise<string>;\n\n    \n    getOrCreateDistributedDir(): Promise<string>;\n    getOrCreateDistributedDir(callback: AsyncCallback<string>): void;\n\n    \n    getAppType(callback: AsyncCallback<string>): void\n    getAppType(): Promise<string>;\n\n    \n    getHapModuleInfo(callback: AsyncCallback<HapModuleInfo>): void\n    getHapModuleInfo(): Promise<HapModuleInfo>;\n\n    \n    getAppVersionInfo(callback: AsyncCallback<AppVersionInfo>): void\n    getAppVersionInfo(): Promise<AppVersionInfo>;\n\n    \n    getApplicationContext(): Context;\n\n    \n    getAbilityInfo(callback: AsyncCallback<AbilityInfo>): void\n    getAbilityInfo(): Promise<AbilityInfo>;\n\n    \n    isUpdatingConfigurations(callback: AsyncCallback<boolean>): void;\n    isUpdatingConfigurations(): Promise<boolean>;\n\n    \n    printDrawnCompleted(callback: AsyncCallback<void>): void;\n    printDrawnCompleted(): Promise<void>;\n}", "api_method_name": "Context", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 84, "since": 6, "api_used": "\u662f", "lines": ["y_featureAbility.getContext().getApplicationCon", "", "mport getApplicationContext from './getApplicat", "= featureAbility.getContext()\n            var r", "y_featureAbility.getContext();\n            awai", "rt default function ContextJsunit() {\n  describ", ";\n    getApplicationContext();\n    getAppVersio", "extJsunit();\n    addContextAndAbilityJsunit();\n", "y_featureAbility.getContext();\n                ", "y_featureAbility.getContext();\n      context.ge", "y_featureAbility.getContext();\n      await cont", "y_featureAbility.getContext();\n          contex", "t featureAbility.getContext();\n        var resu", "dex'\n\ndescribe('ActsContextTest', function () {", "ntext_getApplicationContext_test_0100', timeOld", "ntext_getApplicationContext_test_0100] START');", "default function addContextAndAbilityJsunit() {", "ntext_getApplicationContext_test_0100] data is:", "ext().getApplicationContext();\n        var time", "tyJsunit from './addContextAndAbilityJsunit.tes", "t featureAbility.getContext();\n        context.", "y_featureAbility.getContext();\n        await co", "ntext_getApplicationContext_test_0100', 0, asyn", "om './getApplicationContextJsunit.test.ets';\nim", "t.test.ets';\nimport ContextJsunit from './Conte", "n testsuite() {\n    ContextJsunit();\n    addCon", "ntext_getApplicationContext_test_0100] failed:'", "ntext_getApplicationContext_test_0100] FINISH')", "ntextJsunit from './ContextJsunit.test.ets';\n\ne", "y_featureAbility.getContext();\n        context."], "files": ["getApplicationContextJsunit.test.ets", "addContextAndAbilityJsunit.test.ets", "getAbilityInfoJsunit2.test.ets", "List.test.js", "getHapModuleInfoJsunit.test.ets", "ContextJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "List.test.ets", "ActsAbilityDelegatorCaseTest.test.js", "ContextJsunit.test.js", "index.js", "getAbilityInfoJsunit.test.ets", "AbilityDisableTest.js", "getAppVersionInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getOrCreateLocalDir", "api_method_all": "getOrCreateLocalDir(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getOrCreateLocalDir", "api_method_all": "getOrCreateLocalDir(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["r promise = context.getOrCreateLocalDir();\n        expect(typeof (promise)).ass", "ar result = context.getOrCreateLocalDir(\n            (err, data) => {\n         ", "nfo = await context.getOrCreateLocalDir();\n        checkGetOrCreateLocalDir(inf"], "files": ["FeatureAbilityJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "verifyPermission", "api_method_all": "verifyPermission(permission: string, options?: PermissionOptions): Promise<number>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "verifyPermission", "api_method_all": "verifyPermission(permission: string, options: PermissionOptions, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["yPermission_0100 in verifyPermission\")\n                expect(data).assertEq", "ise = await context.verifyPermission(\"ohos.permission.INSTALL_BUNDLE\",option", "ar result = context.verifyPermission(\"com.example.permission.NOT\",options,\n ", "ise = await context.verifyPermission(\"ohos.permission.CAMERA.NOT\",options );", "ise = await context.verifyPermission(2000,options );\n        expect(promise)", "  }\n        context.verifyPermission(\"ohos.permission.INSTALL_BUNDLE\",option"], "files": ["ContextJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "verifyPermission", "api_method_all": "verifyPermission(permission: string, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 6, "since": 7, "api_used": "\u662f", "lines": ["yPermission_0100 in verifyPermission\")\n                expect(data).assertEq", "ise = await context.verifyPermission(\"ohos.permission.INSTALL_BUNDLE\",option", "ar result = context.verifyPermission(\"com.example.permission.NOT\",options,\n ", "ise = await context.verifyPermission(\"ohos.permission.CAMERA.NOT\",options );", "ise = await context.verifyPermission(2000,options );\n        expect(promise)", "  }\n        context.verifyPermission(\"ohos.permission.INSTALL_BUNDLE\",option"], "files": ["ContextJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "requestPermissionsFromUser", "api_method_all": "requestPermissionsFromUser(permissions: Array<string>, requestCode: number, resultCallback: AsyncCallback<PermissionRequestResult>): void;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [");\n\n        context.requestPermissionsFromUser([], 1,\n            ", "0\n    //  @tc.name: requestPermissionsFromUser : Requests certain "], "files": ["ContextJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "requestPermissionsFromUser", "api_method_all": "requestPermissionsFromUser(permissions: Array<string>, requestCode: number): Promise<PermissionRequestResult>;", "api_type": "Promise", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getApplicationInfo", "api_method_all": "getApplicationInfo(callback: AsyncCallback<ApplicationInfo>): void\n    getApplicationInfo(): Promise<ApplicationInfo>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 7, "api_used": "\u662f", "lines": ["nfo = await context.getApplicationInfo();\n        checkApplicationInfo(info);\n", "      bundleManager.getApplicationInfo(bundleName, bundleFlags,userId,(err, da", "r promise = context.getApplicationInfo();\n        expect(typeof (promise)).ass", " console.log(TAG + \"getApplicationInfo success, error: \"\n            + JSON.st", "0\";\n\n        bundle.getApplicationInfo(\"com.example.applicationinfo\", 1, (erro", "       console.log(\"getApplicationInfo : \" + info)\n        console.log(\"name :", "ar result = context.getApplicationInfo(\n            (err, data) => {\n         "], "files": ["ApplicationInfoJsunit.test.js", "FeatureAbilityJsunit.test.js", "AbilityDisableTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getApplicationInfo", "api_method_all": "getApplicationInfo(): Promise<ApplicationInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getBundleName", "api_method_all": "getBundleName(callback: AsyncCallback<string>): void\n    getBundleName(): Promise<string>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["ult = await context.getBundleName();\n        expect(typeof(context)).asse", "ult = await context.getBundleName();\n        expect(result).assertEqual('", "0\n    //  @tc.name: getBundleName : Get the bundlename of the hap package", " var info = context.getBundleName(\n            (err, data) => {\n         ", " var info = context.getBundleName(\"error_param\",\n            (err, data) ", "0\n    //  @tc.name: getBundleName : Query return value type\n    //  @tc.d", " var info = context.getBundleName(\n                    (err, data) => {\n "], "files": ["ContextJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getBundleName", "api_method_all": "getBundleName(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getDisplayOrientation", "api_method_all": "getDisplayOrientation(callback: AsyncCallback<DisplayOrientation>): void\n    getDisplayOrientation(): Promise<DisplayOrientation>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["            context.getDisplayOrientation((err,data)=>{\n                console.l", "       console.log('getDisplayOrientation call back');\n                done();\n  ", "ar result = context.getDisplayOrientation(\n                (err, DisplayOrientati", "ientation = context.getDisplayOrientation();\n            done();\n        } catch "], "files": ["ActsAbilityDelegatorCaseTest.test.js", "ContextJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getDisplayOrientation", "api_method_all": "getDisplayOrientation(): Promise<DisplayOrientation>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ar result = context.getDisplayOrientation().then((data) => {\n                clea"], "files": ["ActsAbilityDelegatorCaseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "setDisplayOrientation", "api_method_all": "setDisplayOrientation(orientation: DisplayOrientation, callback: AsyncCallback<void>): void\n    setDisplayOrientation(orientation: DisplayOrientation): Promise<void>;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["            context.setDisplayOrientation(true);\n            done();\n        } ca", "ar result = context.setDisplayOrientation(bundle.DisplayOrientation.UNSPECIFIED,\n", "            context.setDisplayOrientation(true, (err,data)=>{\n                con", "ar result = context.setDisplayOrientation(bundle.DisplayOrientation.UNSPECIFIED)."], "files": ["ActsAbilityDelegatorCaseTest.test.js", "ContextJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "setDisplayOrientation", "api_method_all": "setDisplayOrientation(orientation: DisplayOrientation): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "setShowOnLockScreen", "api_method_all": "setShowOnLockScreen(show: boolean, callback: AsyncCallback<void>): void\n    setShowOnLockScreen(show: boolean): Promise<void>;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 9, "since": 7, "api_used": "\u662f", "lines": ["            context.setShowOnLockScreen(true);\n            done();\n        } ca", "ar result = context.setShowOnLockScreen(true,\n                (err) => {\n      ", "     featureAbility.setShowOnLockScreen(false,(error, data) => {\n            co", "            context.setShowOnLockScreen(true, (err,data)=>{\n                con", "tyTestCallBack ACTS_setShowOnLockScreen_0100 Called.' + ' error ' + error.code "], "files": ["ActsAbilityDelegatorCaseTest.test.js", "ContextJsunit.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "setShowOnLockScreen", "api_method_all": "setShowOnLockScreen(show: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ar result = context.setShowOnLockScreen(true).then(() => {\n                clea"], "files": ["ActsAbilityDelegatorCaseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "setWakeUpScreen", "api_method_all": "setWakeUpScreen(wakeUp: boolean, callback: AsyncCallback<void>): void\n    setWakeUpScreen(wakeUp: boolean): Promise<void>;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["       console.log('setWakeUpScreen call back');\n                done();\n  ", "            context.setWakeUpScreen(true, (err,data)=>{\n                con", "            context.setWakeUpScreen(true);\n            done();\n        } ca", "ar result = context.setWakeUpScreen(true,\n                (err) => {\n      "], "files": ["ActsAbilityDelegatorCaseTest.test.js", "ContextJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "setWakeUpScreen", "api_method_all": "setWakeUpScreen(wakeUp: boolean): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["ar result = context.setWakeUpScreen(true).then(() => {\n                clea"], "files": ["ActsAbilityDelegatorCaseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getProcessInfo", "api_method_all": "getProcessInfo(callback: AsyncCallback<ProcessInfo>): void\n    getProcessInfo(): Promise<ProcessInfo>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["ar result = context.getProcessInfo(\n            (err, data) => {\n         ", "r promise = context.getProcessInfo();\n        expect(typeof (promise)).ass", "nfo = await context.getProcessInfo();\n        checkProcessInfo(info);\n    "], "files": ["FeatureAbilityJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getProcessInfo", "api_method_all": "getProcessInfo(): Promise<ProcessInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getElementName", "api_method_all": "getElementName(callback: AsyncCallback<ElementName>): void\n    getElementName(): Promise<ElementName>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 4, "since": 7, "api_used": "\u662f", "lines": ["nfo = await context.getElementName();\n        checkElementName(info);\n    ", "       console.log(\"getElementName : \" + info);\n        console.log(\"devic", "r promise = context.getElementName();\n        expect(typeof (promise)).ass", "ar result = context.getElementName(\n            (err, data) => {\n         "], "files": ["FeatureAbilityJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getElementName", "api_method_all": "getElementName(): Promise<ElementName>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getProcessName", "api_method_all": "getProcessName(callback: AsyncCallback<string>): void\n    getProcessName(): Promise<string>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["nfo = await context.getProcessName();\n        checkProcessName(info);\n    ", "ar result = context.getProcessName(\n            (err, data) => {\n         ", "r promise = context.getProcessName();\n        expect(typeof (promise)).ass"], "files": ["FeatureAbilityJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getProcessName", "api_method_all": "getProcessName(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getCallingBundle", "api_method_all": "getCallingBundle(callback: AsyncCallback<string>): void\n    getCallingBundle(): Promise<string>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 5, "since": 7, "api_used": "\u662f", "lines": ["@ohos.bundle';\n\nvar getCallingBundleUri = {\n    events: [\"uri\"]\n}\n\nvar getCa", "     console.debug(\"getCallingBundle : \" + data)\n                commonEvent", "o);\n        context.getCallingBundle(\n            (err, data) => {\n         ", "nts: [\"uri\"]\n}\n\nvar getCallingBundleType = {\n    events: [\"type\"]\n}\n\ndescrib", "nfo = await context.getCallingBundle();\n        commonEvent.publish(info + \""], "files": ["ApplicationInfoJsunit.test.js", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getCallingBundle", "api_method_all": "getCallingBundle(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["nt.createSubscriber(getCallingBundleType).then(async (data) => {\n           ", "nt.createSubscriber(getCallingBundleUri).then(async (data) => {\n            "], "files": ["ApplicationInfoJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getFilesDir", "api_method_all": "getFilesDir(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 6, "api_used": "\u662f", "lines": ["FilesDir_test_0200: getFilesDir successful, result = \" + data);\n       ", "   \n    it(\"context_getFilesDir_test_0100\", 0, async function (done) {\n", "ta1 = await context.getFilesDir();\n      expect(typeof (data1)).assertE", "--------end context_getFilesDir_test_0100-------------------\");\n    });", "------start context_getFilesDir_test_0100-------------------\");\n      t", "onsole.log(\"context_getFilesDir_test_0200: getFilesDir successful, resu", "rationTime('context_getFilesDir_test_0100', timeOldStamp, timeNewStamp)", "   \n    it(\"context_getFilesDir_test_0200\", 0, async function (done) {\n", "rationTime('context_getFilesDir_test_0200', timeOldStamp, timeNewStamp)", "--------end context_getFilesDir_test_0200-------------------\");\n    });", "------start context_getFilesDir_test_0200-------------------\");\n      t", "();\n        context.getFilesDir((err, data) => {\n          var timeNewS", "onsole.log(\"context_getFilesDir_test_0100\uff1aFilesDir is \" + data);\n      ", "\"logMessage context_getFilesDir_test_0200: error = \" + error);\n        ", "\"logMessage context_getFilesDir_test_0100: error = \" + error);\n        "], "files": ["ContextJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getFilesDir", "api_method_all": "getFilesDir(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["();\n        context.getFilesDir().then((data) => {\n          var timeNe"], "files": ["ContextJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getCacheDir", "api_method_all": "getCacheDir(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 6, "api_used": "\u662f", "lines": ["onsole.log(\"context_getCacheDir_test_0100: CacheDir is \" + data);\n     ", "--------end context_getCacheDir_test_0200-------------------\");\n    });", "--------end context_getCacheDir_test_0100-------------------\");\n    });", "rationTime('context_getCacheDir_test_0100', timeOldStamp, timeNewStamp)", "();\n        context.getCacheDir((err, data) => {\n          var timeNewS", "\"logMessage context_getCacheDir_test_0100: error = \" + error);\n        ", "------start context_getCacheDir_test_0200-------------------\");\n      t", "   \n    it(\"context_getCacheDir_test_0100\", 0, async function (done) {\n", "CacheDir_test_0200: getCacheDir successful, result = \" + data);\n       ", "rationTime('context_getCacheDir_test_0200', timeOldStamp, timeNewStamp)", "ta1 = await context.getCacheDir();\n      expect(typeof (data1)).assertE", "onsole.log(\"context_getCacheDir_test_0200: getCacheDir successful, resu", "------start context_getCacheDir_test_0100-------------------\");\n      t", "\"logMessage context_getCacheDir_test_0200: error = \" + error);\n        ", "   \n    it(\"context_getCacheDir_test_0200\", 0, async function (done) {\n"], "files": ["ContextJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getCacheDir", "api_method_all": "getCacheDir(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 6, "api_used": "\u662f", "lines": ["();\n        context.getCacheDir().then((data) => {\n          var timeNe"], "files": ["ContextJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getOrCreateDistributedDir", "api_method_all": "getOrCreateDistributedDir(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["();\n        context.getOrCreateDistributedDir().then((data) => {\n          var timeNe"], "files": ["ContextJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getOrCreateDistributedDir", "api_method_all": "getOrCreateDistributedDir(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 16, "since": 7, "api_used": "\u662f", "lines": ["istributedDir_0200: getOrCreateDistributedDir successful, result = \" + data);\n       ", "   \n    it(\"context_getOrCreateDistributedDir_0100\", 0, async function (done) {\n     ", "onsole.log(\"context_getOrCreateDistributedDir_0100: DistributedDir is \" + data);\n    ", "onsole.log(\"context_getOrCreateDistributedDir_0200: getOrCreateDistributedDir success", "------start context_getOrCreateDistributedDir_0100-------------------\");\n      try {\n", "\"logMessage context_getOrCreateDistributedDir_0200: error = \" + error);\n        expec", "ta1 = await context.getOrCreateDistributedDir();\n      expect(typeof (data1)).assertE", "--------end context_getOrCreateDistributedDir_0200-------------------\");\n    });\n\n   ", "------start context_getOrCreateDistributedDir_0200-------------------\");\n      try {\n", "rationTime('context_getOrCreateDistributedDir_0100', timeOldStamp, timeNewStamp);\n   ", "rationTime('context_getOrCreateDistributedDir_0200', timeOldStamp, timeNewStamp);\n   ", "();\n        context.getOrCreateDistributedDir((err, data) => {\n          var timeNewS", "   \n    it(\"context_getOrCreateDistributedDir_0200\", 0, async function (done) {\n     ", "--------end context_getOrCreateDistributedDir_0100-------------------\");\n    });\n\n   ", "\"logMessage context_getOrCreateDistributedDir_0100: error = \" + error);\n        expec"], "files": ["ContextJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getAppType", "api_method_all": "getAppType(callback: AsyncCallback<string>): void\n    getAppType(): Promise<string>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 19, "since": 7, "api_used": "\u662f", "lines": ["--------end context_getAppType_0100-------------------\");\n    });\n\n   ", "\"logMessage context_getAppType_0100: error = \" + error);\n        expec", "------start context_getAppType_0200-------------------\");\n      try {\n", "onsole.log(\"context_getAppType_0200: getAppType successful, result = \"", "--------end context_getAppType_0200-------------------\");\n    });\n  })", "se = featureAbility.getAppType();\n        expect(typeof (promise)).ass", "rationTime('context_getAppType_0100_0100', timeOldStamp, timeNewStamp)", "wait featureAbility.getAppType();\n        checkAppType(info);\n        ", "ta1 = await context.getAppType();\n      expect(typeof (data1)).assertE", "();\n        context.getAppType((err, data) => {\n          var timeNewS", "lt = featureAbility.getAppType(\n            (err, data) => {\n         ", "\"logMessage context_getAppType_0200: error = \" + error);\n        expec", "   \n    it(\"context_getAppType_0100\", 0, async function (done) {\n     ", "   \n    it(\"context_getAppType_0200\", 0, async function (done) {\n     ", "rationTime('context_getAppType_0200_0100', timeOldStamp, timeNewStamp)", "------start context_getAppType_0100-------------------\");\n      try {\n", "onsole.log(\"context_getAppType_0100: AppType is \" + data);\n        })\n", "xt_getAppType_0200: getAppType successful, result = \" + data);\n       "], "files": ["FeatureAbilityJsunit.test.js", "ContextJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getAppType", "api_method_all": "getAppType(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["();\n        context.getAppType().then((data) => {\n          var timeNe"], "files": ["ContextJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getHapModuleInfo", "api_method_all": "getHapModuleInfo(callback: AsyncCallback<HapModuleInfo>): void\n    getHapModuleInfo(): Promise<HapModuleInfo>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 47, "since": 7, "api_used": "\u662f", "lines": ["ole.error('[context_getHapModuleInfo_test_0300] failed:' + JSON.stringify(er", "", "e.info('---[context_getHapModuleInfo_test_0200] check---');\n      checkHapMo", "sole.info('[context_getHapModuleInfo_test_0200] FINISH');\n      done();\n    ", "sole.info('[context_getHapModuleInfo_test_0300] data is:' + JSON.stringify(d", "e.info('---[context_getHapModuleInfo_test_0100] check---');\n      checkHapMo", "        it('context_getHapModuleInfo_test_0300', 0, async function (done) {\n", "leInfo_app('context_getHapModuleInfo_test_0300', promise);\n          console", "       console.log(\"getHapModuleInfo data.deviceTypes[\" + j + \"] : \" + data.", "sole.info('[context_getHapModuleInfo_test_0300] START');\n          await Uti", "Jsunit_app1 from './getHapModuleInfoJsunit_app1.test.ets';\n\nexport default f", "sole.info('[context_getHapModuleInfo_test_0200] START');\n        var timeOld", "ise = await context.getHapModuleInfo();\n      console.info('---[context_getH", "ModuleInfo('context_getHapModuleInfo_test_0200', callback);\n      console.in", "rationTime('context_getHapModuleInfo_test_0100', timeOldStamp, timeNewStamp)", "estsuite_app1() {\n  getHapModuleInfoJsunit_app1();\n\n}", "e.info('---[context_getHapModuleInfo_test_0300] check---');\n          checkH", "bilityJsunit();\n    getHapModuleInfoJsunit();\n    getAbilityInfoJsunit();\n  ", "ole.error('[context_getHapModuleInfo_test_0100] failed:' + JSON.stringify(er", "wait featureAbility.getHapModuleInfo();\n        checkHapModuleInfo(info);\n  ", "   \n    it('context_getHapModuleInfo_test_0200', 0, async function (done) {\n", "sole.info('[context_getHapModuleInfo_test_0100] data is:' + JSON.stringify(d", "rt default function getHapModuleInfoJsunit() {\n  describe('appInfoTest', fun", "sole.info('[context_getHapModuleInfo_test_0100] START');\n      await Utils.s", "rationTime('context_getHapModuleInfo_test_0200', timeOldStamp, timeNewStamp)", "ise = await context.getHapModuleInfo();\n          console.info('---[context_", "ole.error('[context_getHapModuleInfo_test_0200] failed: ' + JSON.stringify(e", "sole.info('[context_getHapModuleInfo_test_0100] FINISH');\n      done();\n    ", "sole.info('[context_getHapModuleInfo_test_0200] data is:' + JSON.stringify(d", "eInfoJsunit from './getHapModuleInfoJsunit.test.ets';\nimport getAbilityInfoJ", "();\n        context.getHapModuleInfo((error, data) => {\n          var timeNe", "   \n    it('context_getHapModuleInfo_test_0100', 0, async function (done) {\n", " console.log(msg + \"getHapModuleInfo data.reqCapabilities[\" + j + \"] : \" + d", "t.test.ets';\nimport getHapModuleInfoJsunit from './getHapModuleInfoJsunit.te", "ModuleInfo('context_getHapModuleInfo_test_0100', promise);\n      console.inf", "se = featureAbility.getHapModuleInfo();\n        expect(typeof (promise)).ass", " console.log(msg + \"getHapModuleInfo data.deviceTypes[\" + k + \"] : \" + data.", "rationTime('context_getHapModuleInfo_test_0300', timeOldStamp, timeNewStamp)", "sole.info('[context_getHapModuleInfo_test_0300] FINISH');\n          done();\n", "lt = featureAbility.getHapModuleInfo(\n            (err, data) => {\n         ", "       console.log(\"getHapModuleInfo data.reqCapabilities[\" + j + \"] : \" + d"], "files": ["getApplicationContextJsunit.test.ets", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "List.test.ets", "getAbilityInfoJsunit.test.ets", "getAppVersionInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getHapModuleInfo", "api_method_all": "getHapModuleInfo(): Promise<HapModuleInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": [";\n          context.getHapModuleInfo()\n            .then((data) => {\n       ", "xt();\n      context.getHapModuleInfo()\n        .then((data) => {\n          v"], "files": ["getHapModuleInfoJsunit_app1.test.ets", "getHapModuleInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getAppVersionInfo", "api_method_all": "getAppVersionInfo(callback: AsyncCallback<AppVersionInfo>): void\n    getAppVersionInfo(): Promise<AppVersionInfo>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 22, "since": 7, "api_used": "\u662f", "lines": ["ationContext();\n    getAppVersionInfoJsunit();\n}", "ole.error('[context_getAppVersionInfo_test_0200] failed: ' + JSON.stringify(e", "();\n        context.getAppVersionInfo((error, data) => {\n          var timeNe", "sole.info('[context_getAppVersionInfo_test_0200] data is:' + JSON.stringify(d", "   \n    it('context_getAppVersionInfo_test_0200', 0, async function (done) {\n", "ack = await context.getAppVersionInfo();\n      console.info('---[context_getA", "rationTime('context_getAppVersionInfo_test_0100', timeOldStamp, timeNewStamp)", "nInfoJsunit from './getAppVersionInfoJsunit.test.ets';\nimport ContextJsunit f", "ole.error('[context_getAppVersionInfo_test_0100] failed:' + JSON.stringify(er", "e.info('---[context_getAppVersionInfo_test_0100] check---');\n      checkAppVe", "ersionInfo('context_getAppVersionInfo_test_0100', promise);\n      console.inf", "t.test.ets';\nimport getAppVersionInfoJsunit from './getAppVersionInfoJsunit.t", "sole.info('[context_getAppVersionInfo_test_0100] START');\n      await Utils.s", "e.info('---[context_getAppVersionInfo_test_0200] check---');\n      checkAppVe", "rationTime('context_getAppVersionInfo_test_0200', timeOldStamp, timeNewStamp)", "sole.info('[context_getAppVersionInfo_test_0200] START');\n        await Utils", "sole.info('[context_getAppVersionInfo_test_0100] FINISH');\n      done();\n    ", "sole.info('[context_getAppVersionInfo_test_0200] FINISH');\n      done();\n    ", "sole.info('[context_getAppVersionInfo_test_0100] data is:' + JSON.stringify(d", "   \n    it('context_getAppVersionInfo_test_0100', 0, async function (done) {\n", "ise = await context.getAppVersionInfo();\n      console.info('---[context_getA", "ersionInfo('context_getAppVersionInfo_test_0200', callback);\n      console.in"], "files": ["List.test.ets", "getAppVersionInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getAppVersionInfo", "api_method_all": "getAppVersionInfo(): Promise<AppVersionInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["xt();\n      context.getAppVersionInfo()\n        .then((data) => {\n          v"], "files": ["getAppVersionInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getApplicationContext", "api_method_all": "getApplicationContext(): Context;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 10, "since": 7, "api_used": "\u662f", "lines": ["bility.getContext().getApplicationContext();\n        var time", "rationTime('context_getApplicationContext_test_0100', timeOld", "sole.info('[context_getApplicationContext_test_0100] START');", "tionContext from './getApplicationContextJsunit.test.ets';\nim", "t.test.ets';\nimport getApplicationContext from './getApplicat", "tyInfoJsunit();\n    getApplicationContext();\n    getAppVersio", "sole.info('[context_getApplicationContext_test_0100] FINISH')", "   \n    it('context_getApplicationContext_test_0100', 0, asyn", "sole.info('[context_getApplicationContext_test_0100] data is:", "ole.error('[context_getApplicationContext_test_0100] failed:'"], "files": ["getApplicationContextJsunit.test.ets", "List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getAbilityInfo", "api_method_all": "getAbilityInfo(callback: AsyncCallback<AbilityInfo>): void\n    getAbilityInfo(): Promise<AbilityInfo>;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 67, "since": 7, "api_used": "\u662f", "lines": ["rationTime('context_getAbilityInfo_test_0100', timeOldStamp, timeNewStamp)", "rationTime('context_getAbilityInfo_test_0300',timeOldStamp,timeNewStamp);\n", "   \n    it('context_getAbilityInfo_test_0400', 0, async function (done) {\n", "   \n    it('context_getAbilityInfo_test_0100', 0, async function (done) {\n", "();\n        context.getAbilityInfo((error, data) => {\n          var timeNe", "bilityInfo('context_getAbilityInfo_test_0100', promise);\n      console.inf", "sole.info('[context_getAbilityInfo_test_0400] START');\n      await Utils.s", "sole.info('[context_getAbilityInfo_test_0200] START');\n        await Utils", "leInfoJsunit();\n    getAbilityInfoJsunit();\n    getApplicationContext();\n ", "ole.error('[context_getAbilityInfo_test_0400] failed:' + JSON.stringify(er", "  console.log(msg+ \"getAbilityInfo data.permissions[\" + j + \"] : \" + data.", "sole.info('[context_getAbilityInfo_test_0300] START2');\n        var timeOl", "sole.error('context_getAbilityInfo_test_0300 startMainAbility2 failed. Cau", " console.log(msg + \"getAbilityInfo data.permissions[\" + j + \"] : \" + data.", "ole.error('[context_getAbilityInfo_test_0100] failed:' + JSON.stringify(er", "   \n    it('context_getAbilityInfo_test_0200', 0, async function (done) {\n", " console.log(msg + \"getAbilityInfo data.deviceCapabilities[\" + i + \"] : \" ", "sole.info('[context_getAbilityInfo_test_0200] data is:' + JSON.stringify(d", "sole.info('[context_getAbilityInfo_test_0100] FINISH');\n      done();\n    ", "sole.info('[context_getAbilityInfo_test_0200] FINISH');\n      done();\n    ", "sole.info('[context_getAbilityInfo_test_0300] data is:' + JSON.stringify(d", "ise = await context.getAbilityInfo();\n      console.info('--[context_getAb", "e.info('---[context_getAbilityInfo_test_0200] check---');\n      checkAbili", "ole.error('[context_getAbilityInfo_test_0200] failed: ' + JSON.stringify(e", "  console.log(msg+ \"getAbilityInfo data.deviceCapabilities[\" + i + \"] : \" ", "sole.info('[context_getAbilityInfo_test_0100] START');\n      await Utils.s", "t.test.ets';\nimport getAbilityInfoJsunit from './getAbilityInfoJsunit.test", "le.info('--[context_getAbilityInfo_test_0100] check---');\n      checkAbili", "rt default function getAbilityInfoJsunit() {\n  describe('appInfoTest', fun", "rationTime('context_getAbilityInfo_test_0400', timeOldStamp, timeNewStamp)", "rationTime('context_getAbilityInfo_test_0200', timeOldStamp, timeNewStamp)", "sole.info('[context_getAbilityInfo_test_0300] STARTability');\n      startA", "bilityInfo('context_getAbilityInfo_test_0400', promise);\n      console.inf", "ack = await context.getAbilityInfo();\n      console.info('---[context_getA", "ole.error('[context_getAbilityInfo_test_0300] failed: ' + JSON.stringify(e", "nsole.info('context_getAbilityInfo_test_0300 startMainAbility2 succeeded: ", "bilityInfo('context_getAbilityInfo_test_0200', callback);\n      console.in", "      await context.getAbilityInfo((error, data)=>{\n          var timeNewS", "sole.info('[context_getAbilityInfo_test_0400] data is:' + JSON.stringify(d", "sole.info('[context_getAbilityInfo_test_0100] data is:' + JSON.stringify(d", "yInfoJsunit from './getAbilityInfoJsunit.test.ets';\nimport getApplicationC", " console.log(msg + \"getAbilityInfo data.deviceTypes[\" + k + \"] : \" + data.", "   \n    it('context_getAbilityInfo_test_0300_1', 0, async function (done) ", "le.info('--[context_getAbilityInfo_test_0400] check---');\n      checkAbili", "  console.log(msg+ \"getAbilityInfo data.deviceTypes[\" + k + \"] : \" + data.", "   \n    it('context_getAbilityInfo_test_0300', 0, async function (done) {\n", "e.info('---[context_getAbilityInfo_test_0300] check---');\n      checkAbili", "sole.info('[context_getAbilityInfo_test_0400] FINISH');\n      done();\n    "], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "List.test.ets", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getAbilityInfo", "api_method_all": "getAbilityInfo(): Promise<AbilityInfo>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 2, "since": 7, "api_used": "\u662f", "lines": ["      await context.getAbilityInfo()\n        .then((data) => {\n          v"], "files": ["getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "isUpdatingConfigurations", "api_method_all": "isUpdatingConfigurations(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["            context.isUpdatingConfigurations((error, data) => {\n                    ", "ST_0200 = ' context_isUpdatingConfigurations_test_0200 ';\nconst TAG_TEST_0300 = ' co", "ST_0100 = ' context_isUpdatingConfigurations_test_0100 ';\nconst TAG_TEST_0200 = ' co"], "files": ["addContextAndAbilityJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "isUpdatingConfigurations", "api_method_all": "isUpdatingConfigurations(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["      await context.isUpdatingConfigurations().then((data) => {\n                var "], "files": ["addContextAndAbilityJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "printDrawnCompleted", "api_method_all": "printDrawnCompleted(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": null, "api_used_count": 3, "since": 7, "api_used": "\u662f", "lines": ["ST_0400 = ' context_printDrawnCompleted_test_0200 ';\nconst TAG_TEST_0500 = ' co", "ST_0300 = ' context_printDrawnCompleted_test_0100 ';\nconst TAG_TEST_0400 = ' co", "            context.printDrawnCompleted((error, data) => {\n                    "], "files": ["addContextAndAbilityJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "printDrawnCompleted", "api_method_all": "printDrawnCompleted(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": null, "api_used_count": 1, "since": 7, "api_used": "\u662f", "lines": ["      await context.printDrawnCompleted().then((data) => {\n                var "], "files": ["addContextAndAbilityJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PermissionRequestResult", "api_method_all": "interface PermissionRequestResult {\n    \n    requestCode: number;\n\n    \n    permissions: Array<string>;\n\n    \n    authResults: Array<number>;\n}", "api_method_name": "PermissionRequestResult", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PermissionRequestResult", "api_method_name": "requestCode", "api_method_all": "requestCode: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 7, "api_used": "\u662f", "lines": ["ype: 2,\n            requestCode: 0,\n            wan"], "files": ["FeatureAbilityJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PermissionRequestResult", "api_method_name": "permissions", "api_method_all": "permissions: Array<string>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 58, "since": 7, "api_used": "\u662f", "lines": ["+ k + \"] : \" + info.permissions[k]);\n          }\n  ", "s length : \" + info.permissions.length);\n        fo", "  console.log(\"info.permissions[\" + j + \"] : \" + in", "+ j + \"] : \" + info.permissions[j]);\n        }\n    ", "etAbilityInfo2 data.permissions[\" + j + \"] : \" + da", " \"checkAbilityInfo2 permissions length : \" + data.p", "s length : \" + info.permissions.length);\n      for ", "+ \"checkAbilityInfo permissions length : \" + data.p", "+ j + \"] : \" + data.permissions[j]);\n          }\n  ", "       console.log(\"permissions length : \" + info.p", "var j = 0; j < data.permissions.length; j++) {\n    ", "pplicationInfo info.permissions[\" + k + \"] : \" + in", "s length : \" + info.permissions.length);\n          ", "+ j + \"] : \" + data.permissions[j]);\n      }\n      ", "(Array.isArray(data.permissions)).assertEqual(true)", "c: Requests certain permissions from the system.\n  ", "var k = 0; k < info.permissions.length; k++) {\n    ", "(Array.isArray(info.permissions)).assertEqual(true)", " : Requests certain permissions from the system.\n  ", "heckApplicationInfo permissions length : \" + info.p", "s length : \" + data.permissions.length);\n      for ", "+ k + \"] : \" + info.permissions[k]);\n      }\n      ", "var j = 0; j < info.permissions.length; j++) {\n    ", "s length : \" + data.permissions.length);\n          ", "getAbilityInfo data.permissions[\" + j + \"] : \" + da", "ission: The list of permissions to be requested.\n  "], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "ContextJsunit.test.js", "getAbilityInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PermissionRequestResult", "api_method_name": "authResults", "api_method_all": "authResults: Array<number>", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PermissionOptions", "api_method_all": "interface PermissionOptions {\n \n pid?: number;\n\n \n uid?: number;\n}", "api_method_name": "PermissionOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 7, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PermissionOptions", "api_method_name": "pid", "api_method_all": "pid?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 39, "since": 7, "api_used": "\u662f", "lines": ["JSON.stringify(list.pid))\n        expect(li", "     expect(data[i].pid > 0).assertTrue();\n", "        expect(list.pid > 0).assertTrue()\n ", "     expect(data[0].pid > 0).assertTrue();\n", "expect(typeof (info.pid)).assertEqual(\"numb", "ect(typeof (info[i].pid)).assertEqual(\"numb", "g(\"checkProcessInfo pid : \" + info.pid);\n\n ", "     expect(info[i].pid).assertLarger(0);\n\n", "console.log('==list.pid==>' + JSON.stringif", " expect(dataInfo[i].pid).assertLarger(500);", "Info pid : \" + info.pid);\n\n        expect(t", "ons = {\n            pid :0,\n            uid"], "files": ["Getactive.test.js", "MangerAbilityJsunit.test.js", "startFULL.test.js", "FeatureAbilityJsunit.test.js", "ContextJsunit.test.js", "ActsProcessManageJsTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PermissionOptions", "api_method_name": "uid", "api_method_all": "uid?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 45, "since": 0, "api_used": "\u662f", "lines": ["      uid :datainfo.uid\n        }\n        v", "     expect(data[0].uid > 0).assertTrue();\n", " expect(dataInfo[i].uid).assertLarger(2000)", "\n        expect(app.uid > 0).assertTrue();\n", "console.log('==list.uid==>' + JSON.stringif", "JSON.stringify(list.uid))\n    }\n\n    functi", "     expect(data[i].uid > 0).assertTrue();\n", "      uid :datainfo.uid\n        }\n        c", "        expect(list.uid > 0).assertTrue()\n ", "ect(typeof (info[i].uid)).assertEqual(\"numb", "     expect(info[i].uid).assertLarger(0);\n ", " expect(dataInfo[i].uid).assertLarger(10000", "pid :0,\n            uid :datainfo.uid\n     "], "files": ["MangerAbilityJsunit.test.js", "startFULL.test.js", "ContextJsunit.test.js", "ActsProcessManageJsTest.test.js", "Getactive.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_all": "export default class Context extends BaseContext {\n    \n    resourceManager: resmgr.ResourceManager;\n\n    \n    applicationInfo: ApplicationInfo;\n\n    \n    cacheDir: string;\n\n    \n    tempDir: string;\n\n    \n    filesDir : string;\n\n    \n    databaseDir : string;\n\n    \n    preferencesDir : string;\n\n    \n    bundleCodeDir : string;\n\n    \n    distributedFilesDir: string;\n\n    \n    eventHub: EventHub;\n\n    \n    createBundleContext(bundleName: string): Context;\n\n     \n    getApplicationContext(): Context;\n\n    \n     switchArea(mode: AreaMode): void;\n}", "api_method_name": "Context", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 84, "since": 9, "api_used": "\u662f", "lines": ["y_featureAbility.getContext().getApplicationCon", "", "mport getApplicationContext from './getApplicat", "= featureAbility.getContext()\n            var r", "y_featureAbility.getContext();\n            awai", "rt default function ContextJsunit() {\n  describ", ";\n    getApplicationContext();\n    getAppVersio", "extJsunit();\n    addContextAndAbilityJsunit();\n", "y_featureAbility.getContext();\n                ", "y_featureAbility.getContext();\n      context.ge", "y_featureAbility.getContext();\n      await cont", "y_featureAbility.getContext();\n          contex", "t featureAbility.getContext();\n        var resu", "dex'\n\ndescribe('ActsContextTest', function () {", "ntext_getApplicationContext_test_0100', timeOld", "ntext_getApplicationContext_test_0100] START');", "default function addContextAndAbilityJsunit() {", "ntext_getApplicationContext_test_0100] data is:", "ext().getApplicationContext();\n        var time", "tyJsunit from './addContextAndAbilityJsunit.tes", "t featureAbility.getContext();\n        context.", "y_featureAbility.getContext();\n        await co", "ntext_getApplicationContext_test_0100', 0, asyn", "om './getApplicationContextJsunit.test.ets';\nim", "t.test.ets';\nimport ContextJsunit from './Conte", "n testsuite() {\n    ContextJsunit();\n    addCon", "ntext_getApplicationContext_test_0100] failed:'", "ntext_getApplicationContext_test_0100] FINISH')", "ntextJsunit from './ContextJsunit.test.ets';\n\ne", "y_featureAbility.getContext();\n        context."], "files": ["getApplicationContextJsunit.test.ets", "addContextAndAbilityJsunit.test.ets", "getAbilityInfoJsunit2.test.ets", "List.test.js", "getHapModuleInfoJsunit.test.ets", "ContextJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "List.test.ets", "ActsAbilityDelegatorCaseTest.test.js", "ContextJsunit.test.js", "index.js", "getAbilityInfoJsunit.test.ets", "AbilityDisableTest.js", "getAppVersionInfoJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "createBundleContext", "api_method_all": "createBundleContext(bundleName: string): Context;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "getApplicationContext", "api_method_all": "getApplicationContext(): Context;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 10, "since": 9, "api_used": "\u662f", "lines": ["bility.getContext().getApplicationContext();\n        var time", "rationTime('context_getApplicationContext_test_0100', timeOld", "sole.info('[context_getApplicationContext_test_0100] START');", "tionContext from './getApplicationContextJsunit.test.ets';\nim", "t.test.ets';\nimport getApplicationContext from './getApplicat", "tyInfoJsunit();\n    getApplicationContext();\n    getAppVersio", "sole.info('[context_getApplicationContext_test_0100] FINISH')", "   \n    it('context_getApplicationContext_test_0100', 0, asyn", "sole.info('[context_getApplicationContext_test_0100] data is:", "ole.error('[context_getApplicationContext_test_0100] failed:'"], "files": ["getApplicationContextJsunit.test.ets", "List.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "switchArea", "api_method_all": "switchArea(mode: AreaMode): void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "resourceManager", "api_method_all": "resourceManager: resmgr.ResourceManager", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "applicationInfo", "api_method_all": "applicationInfo: ApplicationInfo", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 9, "since": 9, "api_used": "\u662f", "lines": ["expect(typeof (data.applicationInfo)).assertEqual(\"obje", "ilityByWant_0300 getapplicationInfo errCode : '\n       ", "cationInfo(msg,data.applicationInfo);\n          expect(", "ationInfo2(msg,data.applicationInfo);\n      expect(data", "ationInfo(msg, data.applicationInfo);\n      expect(data"], "files": ["getAbilityInfoJsunit2.test.ets", "getHapModuleInfoJsunit.test.ets", "getHapModuleInfoJsunit_app1.test.ets", "FeatureAbilityJsunit.test.js", "getAbilityInfoJsunit.test.ets", "AbilityDisableTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "cacheDir", "api_method_all": "cacheDir: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "tempDir", "api_method_all": "tempDir: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "filesDir", "api_method_all": "filesDir : string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "databaseDir", "api_method_all": "databaseDir : string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "preferencesDir", "api_method_all": "preferencesDir : string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "bundleCodeDir", "api_method_all": "bundleCodeDir : string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "distributedFilesDir", "api_method_all": "distributedFilesDir: string", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Context", "api_method_name": "eventHub", "api_method_all": "eventHub: EventHub", "api_type": "", "api_args_count": 1, "api_level": 12, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AreaMode", "api_method_all": "export enum AreaMode {\n    \n    EL1 = 0,\n    \n    EL2 = 1\n}", "api_method_name": "AreaMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AreaMode", "api_method_name": "EL1", "api_method_all": "EL1 = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AreaMode", "api_method_name": "EL2", "api_method_all": "EL2 = 1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}