{"subsystem_ch": "DFX\u5b50\u7cfb\u7edf", "subsystem_en": "hiviewdfx", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.hichecker", "api": [{"api_class_name": "hichecker", "api_method_all": "declare namespace hichecker {\n\n\n    \n    const RULE_CAUTION_PRINT_LOG: 9223372036854775808n; // 1 << 63\n\n    \n    const RULE_CAUTION_TRIGGER_CRASH: 4611686018427387904n; // 1 << 62\n\n    \n    const RULE_THREAD_CHECK_SLOW_PROCESS: 1n;\n\n    \n    const RULE_CHECK_ABILITY_CONNECTION_LEAK: 8589934592n; // 1 << 33\n\n    \n    function addRule(rule: bigint) : void;\n\n    \n    function removeRule(rule: bigint) : void;\n\n    \n    function getRule() : bigint;\n\n    \n    function contains(rule: bigint) : boolean;\n}", "api_method_name": "hichecker", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 90, "since": 0, "api_used": "\u662f", "lines": ["", "checker from '@ohos.hichecker'\nimport {describe, ", "CAUTION_PRINT_LOG | hichecker.RULE_CAUTION_TRIGGE", "(hichecker.contains(hichecker.RULE_CHECK_ABILITY_", "!');\n        expect(hichecker.contains(0)).assert", "_CHECK_SLOW_EVENT | hichecker.RULE_CHECK_ABILITY_", "ichecker.removeRule(hichecker.RULE_THREAD_CHECK_S", "02 start');\n        hichecker.addRule(hichecker.R", "ichecker.removeRule(hichecker.RULE_CAUTION_TRIGGE", ";\n        let tmp = hichecker.contains(hichecker.", "SH);\n        expect(hichecker.getRule() == tmp).a", "ichecker.removeRule(hichecker.RULE_CHECK_ABILITY_", "PRINT_LOG);\n        hichecker.removeRule(hichecke", "e();\n        expect(hichecker.contains(hichecker.", "(hichecker.contains(hichecker.RULE_CAUTION_TRIGGE", "h called');\n        hichecker.removeRule(hichecke", "  hichecker.addRule(hichecker.RULE_THREAD_CHECK_S", "ual(false);\n        hichecker.addRule(0);\n       ", "\n        let tmp = (hichecker.RULE_THREAD_CHECK_S", "04 start');\n        hichecker.addRule(hichecker.R", "success!');\n        hichecker.removeRule(hichecke", "!');\n        expect(hichecker.contains(hichecker.", "(hichecker.contains(hichecker.RULE_THREAD_CHECK_S", "LOW_EVENT);\n        hichecker.addRule(hichecker.R", "ichecker.removeRule(hichecker.RULE_CHECK_SLOW_EVE", "HECK_SLOW_PROCESS | hichecker.RULE_CHECK_SLOW_EVE", " hichecker.contains(hichecker.RULE_THREAD_CHECK_S", "LOW_EVENT);\n        hichecker.removeRule(hichecke", "(hichecker.contains(hichecker.RULE_CHECK_SLOW_EVE", "ual(false);\n        hichecker.addRule(999999);\n  ", "ichecker.removeRule(hichecker.RULE_CAUTION_PRINT_", "SS);\n        expect(hichecker.contains(hichecker.", "  hichecker.addRule(hichecker.RULE_CHECK_ABILITY_", "03 start');\n        hichecker.addRule(-1);\n      ", "01 start');\n        hichecker.addRule(hichecker.R", "W_PROCESS);\n        hichecker.removeRule(hichecke", "(hichecker.contains(hichecker.RULE_CAUTION_PRINT_", "TION_LEAK);\n        hichecker.removeRule(hichecke", "Y_CONNECTION_LEAK | hichecker.RULE_CAUTION_PRINT_", "!');\n        expect(hichecker.contains(-1)).asser"], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "hichecker", "api_method_name": "addRule", "api_method_all": "function addRule(rule: bigint) : void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": [";\n        hichecker.addRule(0);\n        console", ";\n        hichecker.addRule(-1);\n        consol", ";\n        hichecker.addRule(hichecker.RULE_CHEC", ";\n        hichecker.addRule(999999);\n        co", ";\n        hichecker.addRule(hichecker.RULE_THRE"], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "hichecker", "api_method_name": "removeRule", "api_method_all": "function removeRule(rule: bigint) : void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": [";\n        hichecker.removeRule(999999);\n        ex", ";\n        hichecker.removeRule(hichecker.RULE_CHEC", ";\n        hichecker.removeRule(-1);\n        expect", ";\n        hichecker.removeRule(hichecker.RULE_THRE", ";\n        hichecker.removeRule(hichecker.RULE_CAUT", ";\n        hichecker.removeRule(0);\n        expect("], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "hichecker", "api_method_name": "getRule", "api_method_all": "function getRule() : bigint;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["   expect(hichecker.getRule() == tmp).assertTru", "   expect(hichecker.getRule() == 0).assertTrue("], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "hichecker", "api_method_name": "contains", "api_method_all": "function contains(rule: bigint) : boolean;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 11, "since": 0, "api_used": "\u662f", "lines": ["   expect(hichecker.contains(hichecker.RULE_CHEC", "   expect(hichecker.contains(0)).assertEqual(fal", "let tmp = hichecker.contains(hichecker.RULE_THRE", "   expect(hichecker.contains(hichecker.RULE_THRE", "   expect(hichecker.contains(-1)).assertEqual(fa", "   expect(hichecker.contains(hichecker.RULE_CAUT"], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "hichecker", "api_method_name": "RULE_CAUTION_PRINT_LOG", "api_method_all": "const RULE_CAUTION_PRINT_LOG: 9223372036854775808n", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["emoveRule(hichecker.RULE_CAUTION_PRINT_LOG);\n        hichecker", "ON_LEAK | hichecker.RULE_CAUTION_PRINT_LOG | hichecker.RULE_CA", ".contains(hichecker.RULE_CAUTION_PRINT_LOG)).assertTrue();\n   "], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "hichecker", "api_method_name": "RULE_CAUTION_TRIGGER_CRASH", "api_method_all": "const RULE_CAUTION_TRIGGER_CRASH: 4611686018427387904n", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["INT_LOG | hichecker.RULE_CAUTION_TRIGGER_CRASH);\n        expect(hi", "emoveRule(hichecker.RULE_CAUTION_TRIGGER_CRASH);\n    })\n\n    after", "INT_LOG | hichecker.RULE_CAUTION_TRIGGER_CRASH);\n        hichecker", ".contains(hichecker.RULE_CAUTION_TRIGGER_CRASH)).assertTrue();\n   ", "INT_LOG | hichecker.RULE_CAUTION_TRIGGER_CRASH);\n        console.l"], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "hichecker", "api_method_name": "RULE_THREAD_CHECK_SLOW_PROCESS", "api_method_all": "const RULE_THREAD_CHECK_SLOW_PROCESS: 1n", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 14, "since": 8, "api_used": "\u662f", "lines": [".contains(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS)).assertTrue();\n   ", ".contains(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS)).assertEqual(false", "et tmp = (hichecker.RULE_THREAD_CHECK_SLOW_PROCESS | hichecker.RULE_CH", "emoveRule(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS | hichecker.RULE_CH", ".contains(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS);\n        console.l", "emoveRule(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS);\n        expect(hi", "emoveRule(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS);\n        hichecker", "r.addRule(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS);\n        let tmp =", "r.addRule(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS);\n        expect(hi", "r.addRule(hichecker.RULE_THREAD_CHECK_SLOW_PROCESS | hichecker.RULE_CH"], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "hichecker", "api_method_name": "RULE_CHECK_ABILITY_CONNECTION_LEAK", "api_method_all": "const RULE_CHECK_ABILITY_CONNECTION_LEAK: 8589934592n", "api_type": "", "api_args_count": 1, "api_level": 31, "api_used_count": 9, "since": 8, "api_used": "\u662f", "lines": ["et tmp = (hichecker.RULE_CHECK_ABILITY_CONNECTION_LEAK | hichecker.RULE_CA", "emoveRule(hichecker.RULE_CHECK_ABILITY_CONNECTION_LEAK);\n        hichecker", "W_EVENT | hichecker.RULE_CHECK_ABILITY_CONNECTION_LEAK | hichecker.RULE_CA", "r.addRule(hichecker.RULE_CHECK_ABILITY_CONNECTION_LEAK | hichecker.RULE_CA", "emoveRule(hichecker.RULE_CHECK_ABILITY_CONNECTION_LEAK | hichecker.RULE_CA", ".contains(hichecker.RULE_CHECK_ABILITY_CONNECTION_LEAK)).assertTrue();\n   "], "files": ["HiChecker.test.js"], "is_white": " ", "desc": " "}]}