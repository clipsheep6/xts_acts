{"subsystem_ch": "\u5206\u5e03\u5f0f\u6570\u636e\u7ba1\u7406\u5b50\u7cfb\u7edf", "subsystem_en": "distributeddatamgr", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.data.dataShare", "api": [{"api_class_name": "dataShare", "api_method_all": "declare namespace dataShare {\n    \n    function createDataShareHelper(context: Context, want: Want, uri: string): DataShareHelper;\n\n    \n    interface DataShareHelper {\n        \n        on(type: 'dataChange', uri: string, callback: AsyncCallback<void>): void;\n\n        \n        off(type: 'dataChange', uri: string, callback?: AsyncCallback<void>): void;\n\n        \n        insert(uri: string, value: rdb.ValuesBucket, callback: AsyncCallback<number>): void;\n        insert(uri: string, value: rdb.ValuesBucket): Promise<number>;\n\n        \n        delete(uri: string, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<number>): void;\n        delete(uri: string, predicates: dataAbility.DataAbilityPredicates): Promise<number>;\n\n\n        \n        query(uri: string, columns: Array<string>, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<ResultSet>): void;\n        query(uri: string, columns: Array<string>, predicates: dataAbility.DataAbilityPredicates): Promise<ResultSet>;\n\n        \n        update(uri: string, value: rdb.ValuesBucket, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<number>): void;\n        update(uri: string, value: rdb.ValuesBucket, predicates: dataAbility.DataAbilityPredicates): Promise<number>;\n\n\n        \n        batchInsert(uri: string, values: Array<rdb.ValuesBucket>, callback: AsyncCallback<number>): void;\n        batchInsert(uri: string, values: Array<rdb.ValuesBucket>): Promise<number>;\n\n        \n        getType(uri: string, callback: AsyncCallback<string>): void;\n        getType(uri: string): Promise<string>;\n\n        \n        getFileTypes(uri: string,  mimeTypeFilter:string, callback: AsyncCallback<Array<string>>): void;\n        getFileTypes(uri: string,  mimeTypeFilter: string): Promise<Array<string>>;\n\n        \n        normalizeUri(uri: string, callback: AsyncCallback<string>): void;\n        normalizeUri(uri: string): Promise<string>;\n\n        \n        denormalizeUri(uri: string, callback: AsyncCallback<string>): void;\n        denormalizeUri(uri: string): Promise<string>;\n\n        \n        notifyChange(uri: string, callback: AsyncCallback<void>): void;\n        notifyChange(uri: string): Promise<void>;\n    }\n}", "api_method_name": "dataShare", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 43, "since": 0, "api_used": "\u662f", "lines": ["       let helper = dataShare.createDataShareHelp", "lity\",\n}\n\ndescribe('dataShareTest', function () {", "re from '@ohos.data.dataShare';\nimport dataAbilit", "sunit/index'\nimport dataShare from '@ohos.data.da"], "files": ["DataShareJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "dataShare", "api_method_name": "createDataShareHelper", "api_method_all": "function createDataShareHelper(context: Context, want: Want, uri: string): DataShareHelper;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 53, "since": 9, "api_used": "\u662f", "lines": ["console.log(TAG + \":createDataShareHelper_0011 end\");\n    })\n", " helper = dataShare.createDataShareHelper(this.context, null,", "   })\n\n    \n    it('createDataShareHelper_0010', 0, async fun", " helper = dataShare.createDataShareHelper(this.context, dseWa", " helper = dataShare.createDataShareHelper(null, dseWant, URI)", "console.log(TAG + \":createDataShareHelper_0010 end\");\n    })\n", "console.log(TAG + \":createDataShareHelper_0011 start\");\n     ", "    }\n\n    \n    it('createDataShareHelper_0000', 0, async fun", "console.log(TAG + \":createDataShareHelper_0000 start\");\n     ", "@tc.desc data share createDataShareHelper test\n     */\n    it", "   })\n\n    \n    it('createDataShareHelper_0011', 0, async fun", "console.log(TAG + \":createDataShareHelper_0010 start\");\n     ", "   })\n\n    \n    it('createDataShareHelper_0012', 0, async fun", "console.log(TAG + \":createDataShareHelper_0012 start\");\n     ", "console.log(TAG + \":createDataShareHelper_0000 end\");\n    })\n", "console.log(TAG + \":createDataShareHelper_0012 end\");\n    })\n"], "files": ["DataShareJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_all": "interface DataShareHelper {\n        \n        on(type: 'dataChange', uri: string, callback: AsyncCallback<void>): void;\n\n        \n        off(type: 'dataChange', uri: string, callback?: AsyncCallback<void>): void;\n\n        \n        insert(uri: string, value: rdb.ValuesBucket, callback: AsyncCallback<number>): void;\n        insert(uri: string, value: rdb.ValuesBucket): Promise<number>;\n\n        \n        delete(uri: string, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<number>): void;\n        delete(uri: string, predicates: dataAbility.DataAbilityPredicates): Promise<number>;\n\n\n        \n        query(uri: string, columns: Array<string>, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<ResultSet>): void;\n        query(uri: string, columns: Array<string>, predicates: dataAbility.DataAbilityPredicates): Promise<ResultSet>;\n\n        \n        update(uri: string, value: rdb.ValuesBucket, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<number>): void;\n        update(uri: string, value: rdb.ValuesBucket, predicates: dataAbility.DataAbilityPredicates): Promise<number>;\n\n\n        \n        batchInsert(uri: string, values: Array<rdb.ValuesBucket>, callback: AsyncCallback<number>): void;\n        batchInsert(uri: string, values: Array<rdb.ValuesBucket>): Promise<number>;\n\n        \n        getType(uri: string, callback: AsyncCallback<string>): void;\n        getType(uri: string): Promise<string>;\n\n        \n        getFileTypes(uri: string,  mimeTypeFilter:string, callback: AsyncCallback<Array<string>>): void;\n        getFileTypes(uri: string,  mimeTypeFilter: string): Promise<Array<string>>;\n\n        \n        normalizeUri(uri: string, callback: AsyncCallback<string>): void;\n        normalizeUri(uri: string): Promise<string>;\n\n        \n        denormalizeUri(uri: string, callback: AsyncCallback<string>): void;\n        denormalizeUri(uri: string): Promise<string>;\n\n        \n        notifyChange(uri: string, callback: AsyncCallback<void>): void;\n        notifyChange(uri: string): Promise<void>;\n    }", "api_method_name": "DataShareHelper", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 130, "since": 9, "api_used": "\u662f", "lines": ["\n    \n    it('createDataShareHelper_0012', 0, async fun", "r = dataShare.createDataShareHelper(this.context, null,", "e.log(TAG + \":createDataShareHelper_0010 start\");\n     ", "e.log(TAG + \":createDataShareHelper_0010 end\");\n    })\n", "\n    \n    it('createDataShareHelper_0011', 0, async fun", "e.log(TAG + \":createDataShareHelper_0012 end\");\n    })\n", "e.log(TAG + \":createDataShareHelper_0012 start\");\n     ", "e.log(TAG + \":createDataShareHelper_0011 end\");\n    })\n", "console.log(TAG + \":DataShareHelper catch err:\" + err);", "r = dataShare.createDataShareHelper(null, dseWant, URI)", "r = dataShare.createDataShareHelper(this.context, dseWa", "\n    \n    it('createDataShareHelper_0000', 0, async fun", "e.log(TAG + \":createDataShareHelper_0000 start\");\n     ", "e.log(TAG + \":createDataShareHelper_0011 start\");\n     ", "console.log(TAG + \":DataShareHelper helper:\" + helper);", "e.log(TAG + \":createDataShareHelper_0000 end\");\n    })\n", "\n    \n    it('createDataShareHelper_0010', 0, async fun"], "files": ["DataShareJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "on", "api_method_all": "on(type: 'dataChange', uri: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 9120, "since": 9, "api_used": "\u662f", "lines": ["ction () {\n        console.info(TAG + 'beforeEach')\n    })\n\n  ", "fo('TestApplication onCreate');\n    },\n    onDestroy() {\n     ", ",\n                \"longValue\": -9223372036854775808,\n         ", ".info('TestApplication onCreate');\n    },\n    onDestroy() {\n  ", "('config')\n        configService.setConfig(this)\n\n        requ", "foreAll(async function () {\n        console.info(TAG + 'before", "deccjsunit/index'\n\nconst injectRef = Object.getPrototypeOf(glo", ",\n                \"longValue\": 9223372036854775807,\n          ", "ction () {\n        console.info(TAG + 'afterAll')\n        rdbS", "ction () {\n        console.info(TAG + 'beforeAll')\n        rdb", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "      console.info('onShow finish')\n        const core = Core.", "aType1() {\n        console.log(TAG + \"buildAllDataType1 start\"", " }\n\n    async function buildAllDataType3() {\n        console.l", "xport default {\n    onCreate() {\n        console.info('TestApp", ";\n    })\n\n    function resultSize(resultSet) {\n        if (!re", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", "RDB_JSKITS _TEST]'\nconst CREATE_TABLE_ALL_DATA_TYPE_SQL = \"CRE", "fterAll(async function () {\n        console.info(TAG + 'afterA", "2, 3])\n            const valueBucket = {\n                \"inte", "w finish')\n        const core = Core.getInstance()\n        con", " }\n\n    async function buildAllDataType1() {\n        console.l", "    afterEach(function () {\n        console.info(TAG + 'afterE", "alue INTEGER , primLongValue INTEGER , \"\n+ \"primShortValue INT", "Create() {\n        console.info('TestApplication onCreate');\n ", "ata.dataAbility';\n\nconst TAG = '[RDB_JSKITS _TEST]'\nconst CREA", "getDefaultService('config')\n        configService.setConfig(th", "      }\n    }\n\n    console.log(TAG + \"*************Unit Test B", "rder` INTEGER);\";\n\nconst STORE_CONFIG = {\n    name: \"Predicate", "onShow() {\n        console.info('onShow finish')\n        const", "aType3() {\n        console.log(TAG + \"buildAllDataType3 start\"", ".info('TestApplication onDestroy');\n    }\n};\n", "estroy() {\n        console.info('TestApplication onDestroy');\n", "   beforeEach(function () {\n        console.info(TAG + 'before", "reate');\n    },\n    onDestroy() {\n        console.info('TestAp", "dicatesTest', function () {\n    beforeAll(async function () {\n", "ction () {\n        console.info(TAG + 'afterEach')\n    })\n\n   ", "fo('TestApplication onDestroy');\n    }\n};\n", ",\n                \"longValue\": 1,\n                \"shortValue\"", "itle: ''\n    },\n    onInit() {\n        this.title = this.$t('s", "01', 0, async function (done) {\n        console.log(TAG + \"***", "ore.init()\n        const configService = core.getDefaultServic", "gerValue INTEGER , longValue INTEGER , shortValue INTEGER , bo", "aType2() {\n        console.log(TAG + \"buildAllDataType2 start\"", " }\n\n    async function buildAllDataType2() {\n        console.l", "  configService.setConfig(this)\n\n        require('../../test/L"], "files": ["RdbstorePredicatesJsunit.test.js", "List.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "FieldNodeJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "SingleKvStoreEnumJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "app.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "QueryJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "index.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "ObjectStoreJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "off", "api_method_all": "off(type: 'dataChange', uri: string, callback?: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 78, "since": 9, "api_used": "\u662f", "lines": ["IJKLMN\").limitAs(3).offsetAs(1);\n        let result = await rdb", "            kvStore.off('syncComplete');\n        }catch(e) {\n  ", "            kvStore.off('dataChange', func);\n        }catch(e) ", "            kvStore.off('dataChange', func1);\n        }catch(e)", "   })\n\n    \n    it('off_0030', 0, async function (done) {\n     ", "            kvStore.off('syncComplete', func);\n            kvSt", "IJKLMN\").limitAs(3).offsetAs(0);\n        let result = await rdb", "ver);\n        mPref.off('change', observer);\n        mPref.putS", "/**\n     * @tc.name off interface test\n     * @tc.number SUB_DD", "160\n     * @tc.desc off interface test\n     */\n    it('testUnRe", "            kvStore.off('syncComplete', func1);\n            exp", "IJKLMN\").limitAs(3).offsetAs(-1);\n        let result = await rd", "IJKLMN\").limitAs(3).offsetAs(1);\n        let predicates = dataA", "console.log(TAG + \":off_0031 start\");\n        try {\n           ", "            kvStore.off('syncComplete', func);\n            expe", ";\n        kvManager.off('distributedDataServiceDie', deathCallb", "console.log(TAG + \":off_0031 end\");\n    })\n\n    \n    it('getTyp", "\n            helper.off(\n                \"dataChange\",\n        ", "@tc.name predicates offset normal test\n     * @tc.number SUB_DD", "IJKLMN\").limitAs(3).offsetAs(0);\n        let predicates = dataA", "console.log(TAG + \":off_0030 start\");\n        try {\n           ", "console.log(TAG + \":off_0030 end\");\n    })\n\n    \n    it('off_00", ");\n        rdbStore.off(\"dataChange\", (device) => {\n           ", "            kvStore.off('dataChange', func);\n            kvStor", "            kvStore.off('dataChange');\n        }catch(e) {\n    ", "            kvStore.off('syncComplete', func);\n        }catch(e", "IJKLMN\").limitAs(3).offsetAs(5);\n        let predicates = dataA", "@tc.desc predicates offset normal test\n     */\n    it('testOffs", "IJKLMN\").limitAs(3).offsetAs(5);\n        let result = await rdb", "IJKLMN\").limitAs(3).offsetAs(-1);\n        let predicates = data", "   })\n\n    \n    it('off_0031', 0, async function (done) {\n     ", " console.log(TAG + \"off dataChange success\");\n        expect(rd"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "StorageSyncJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "ObjectStoreJsunit.test.js", "KvManagerPromiseJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "insert", "api_method_all": "insert(uri: string, value: rdb.ValuesBucket, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 123, "since": 9, "api_used": "\u662f", "lines": ["console.log(TAG + \":insert_promise_0091 end\");\n    })\n\n    /**\n   ", "UB_DDM_DataShare_JS_insert_promise_0091\n     * @tc.desc data share", "@tc.name data share insert_callback test\n     * @tc.number SUB_DDM", "est\n     */\n    it('insert_promise_0091', 0, async function (done)", "est\n     */\n    it('insert_callback_0090', 0, async function (done", "console.log(TAG + \":insert_callback_0090 start\");\n        try {\n  ", "console.log(TAG + \":insert_callback_0092 start\");\n        try {\n  ", "@tc.name data share insert_promise test\n     * @tc.number SUB_DDM_", "UB_DDM_DataShare_JS_insert_callback_0090\n     * @tc.desc data shar", " console.log(TAG + \"insert one record success \" + rowId)\n         ", "     await rdbStore.insert(\"test\", valueBucket)\n        }\n\n       ", "     await rdbStore.insert(\"test\", valueBucket)\n        }\n        ", "     await rdbStore.insert(\"AllDataType\", valueBucket)\n        }\n ", "@tc.desc data share insert_callback test\n     */\n    it('insert_ca", "       console.log(\"insert1 error \" + e);\n        }\n        result", "\n            helper.insert(\n                URI,\n                v", " console.log(TAG + \"insert one record failed\");\n            expect", "===================>insertCallback=======================>\");\n    ", "est\n     */\n    it('insert_callback_0092', 0, async function (done", "Id = await rdbStore.insert(\"employee\", record)\n            console", "UB_DDM_DataShare_JS_insert_callback_0092\n     * @tc.desc data shar", "  }\n            let insertPromise = rdbStore.insert(\"wrong\", value", "\n            helper.insert(\n                null,\n                ", "     await rdbStore.insert('test', valueBucket)\n        }\n        ", "console.log(TAG + \":insert_promise_0081 start\");\n        try {\n   ", "@tc.desc data share insert_promise test\n     */\n    it('insert_pro", "console.log(TAG + \":insert_callback_0092 end\");\n    })\n\n    /**\n  ", "console.log(TAG + \":insert_callback_0090 end\");\n    })\n\n    /**\n  "], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "insert", "api_method_all": "insert(uri: string, value: rdb.ValuesBucket): Promise<number>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 12, "since": 9, "api_used": "\u662f", "lines": ["Bucket)\n            insertPromise.then(async (ret) => {\n          "], "files": ["RdbstoreStoreExcuteSqlJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbstoreUpdateJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "delete", "api_method_all": "delete(uri: string, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 224, "since": 9, "api_used": "\u662f", "lines": [" console.log(TAG + 'delete done: ' + ret)\n                expect(n", "console.log(TAG + \":delete_callback_0113 end\");\n    })\n\n    /**\n  ", "est\n     */\n    it('delete_callback_0112', 0, async function (done", "console.log(TAG + \":delete_callback_0113 start\");\n        try {\n  ", "'')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "@tc.name data share delete_callback test\n     * @tc.number SUB_DDM", "console.log(TAG + \":delete_callback_0110 start\");\n        try {\n  ", "t')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "console.log(TAG + \":delete_promise_0111 end\");\n    })\n\n    /**\n   ", "UB_DDM_DataShare_JS_delete_callback_0110\n     * @tc.desc data shar", "UB_DDM_DataShare_JS_delete_promise_0111\n     * @tc.desc data share", "est\n     */\n    it('delete_promise_0111', 0, async function (done)", "console.log(TAG + \":delete_callback_0112 start\");\n        try {\n  ", "console.log(TAG + \":delete_promise_0111 start\");\n        try {\n   ", "\n            helper.delete(\n                null,\n                ", "@tc.desc data share delete_callback test\n     */\n    it('delete_ca", "ePromise = rdbStore.delete(predicates)\n            deletePromise.t", " console.log(TAG + 'delete with wrong conditions')\n            })\n", "      await dataRdb.deleteRdbStore(\"Predicates.db\");\n    })\n\n    f", "@tc.name data share delete_promise test\n     * @tc.number SUB_DDM_", "i')\n            let deletePromise = rdbStore.delete(predicates)\n  ", ")\n            await deletePromise\n        }\n        //\u5220\u9664\u540e\u67e5\u8be2\n      ", "UB_DDM_DataShare_JS_delete_callback_0112\n     * @tc.desc data shar", "console.log(TAG + \":delete_callback_0110 end\");\n    })\n\n    /**\n  ", "UB_DDM_DataShare_JS_delete_callback_0113\n     * @tc.desc data shar", "===================>deleteCallback=======================>\");\n    ", "      await dataRdb.deleteRdbStore('Delete.db');\n    })\n\n    after", " 1)\n            let deletePromise = rdbStore.delete(predicates)\n  ", "est\n     */\n    it('delete_callback_0110', 0, async function (done", "\n            helper.delete(\n                URI,\n                d", "@tc.desc data share delete_promise test\n     */\n    it('delete_pro", "est\n     */\n    it('delete_callback_0113', 0, async function (done", ")\n            await deletePromise\n        }\n        done()\n       ", "n')\n            let deletePromise = rdbStore.delete(predicates)\n  ", "28)\n            let deletePromise = rdbStore.delete(predicates)\n  ", "console.log(TAG + \":delete_callback_0112 end\");\n    })\n\n    /**\n  "], "files": ["RdbstorePredicatesJsunit.test.js", "RdbstoreRdbstoreJsunit.test.js", "StorageCallBackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "KvStoreResultSetJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "KvManagerPromiseJsunit.test.js", "StoragePromiseJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "RdbstoreInsertJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "StorageSyncJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "StorageHelperJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js", "KvManagerCallbackJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "delete", "api_method_all": "delete(uri: string, predicates: dataAbility.DataAbilityPredicates): Promise<number>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 31, "since": 9, "api_used": "\u662f", "lines": ["      await kvStore.deleteBatch(keys).then((err) => {\n            ", "      await kvStore.delete(KEY_TEST_FLOAT_ELEMENT).then((data) => ", "icates)\n            deletePromise.then(async (ret) => {\n          ", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME).then(() => {\n ", "    await kvManager.deleteKVStore(TEST_BUNDLE_NAME, data[i]).then(", "      await kvStore.delete(KEY_TEST_BOOLEAN_ELEMENT).then((data) =", "      await kvStore.delete(KEY_TEST_INT_ELEMENT).then((data) => {\n", "      await kvStore.delete(KEY_TEST_STRING_ELEMENT).then((data) =>"], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "KvManagerPromiseJsunit.test.js", "KvStoreResultSetJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "query", "api_method_all": "query(uri: string, columns: Array<string>, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<ResultSet>): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 1277, "since": 9, "api_used": "\u662f", "lines": ["lt = await rdbStore.query(predicates);\n        expect(0).assertEq", "lt = await rdbStore.query(predicates);\n            expect(0).asse", "lt = await rdbStore.query(predicates);\n            expect(1).asse", "lt = await rdbStore.query(predicates);\n            expect(true).a", "lt = await rdbStore.query(predicates);\n            expect(3).asse", "lt = await rdbStore.query(predicates);\n            expect(2).asse", "lt = await rdbStore.query(predicates);\n        expect(-1).assertE", "lt = await rdbStore.query(predicates);\n        expect(3).assertEq"], "files": ["QueryJsunit.test.js", "DeviceKvStorePromiseJsunit.test.js", "RdbstorePredicatesJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "RdbstoreUpdateJsunit.test.js", "DataAbilityPredicatesJsunit.test.js", "DeviceKvStoreCallbackJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SingleKvStoreCallbackJsunit.test.js", "RdbstoreDeleteJsunit.test.js", "RdbstoreInsertJsunit.test.js", "RdbStoreResultSetJsunit.test.js", "RdbstorePredicatesJoinJsunit.test.js", "SchemaJsunit.test.js", "DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "query", "api_method_all": "query(uri: string, columns: Array<string>, predicates: dataAbility.DataAbilityPredicates): Promise<ResultSet>;", "api_type": "Promise", "api_args_count": 3, "api_level": 21, "api_used_count": 19, "since": 9, "api_used": "\u662f", "lines": ["tSet(localDeviceId, query).then((result) => {\n                con", " kvStore.getEntries(query).then((entrys) => {\n                   ", " kvStore.getEntries(query).then((entries) => {\n                co", "ries(localDeviceId, query).then((entrys) => {\n                   ", "vStore.getResultSet(query).then((result) => {\n                con", " test\")\n            querySqlPromise.then(async (resultSet) => {\n ", "Size(localDeviceId, query).then((resultSize) => {\n               ", "Store.getResultSize(query).then((resultSize) => {\n               ", "    num =  rdbStore.query(predicates)\n            num.then(async "], "files": ["DeviceKvStorePromiseJsunit.test.js", "RdbstoreTransactionJsunit.test.js", "SingleKvStorePromiseJsunit.test.js", "SchemaJsunit.test.js", "RdbstoreStoreExcuteSqlJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "update", "api_method_all": "update(uri: string, value: rdb.ValuesBucket, predicates: dataAbility.DataAbilityPredicates, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 4, "api_level": 21, "api_used_count": 70, "since": 9, "api_used": "\u662f", "lines": [" console.log(TAG + \"update done: \" + ret);\n                    exp", "UB_DDM_DataShare_JS_update_promise_0121\n     * @tc.desc data share", "                let updatePromise = rdbStore.update(valueBucket, p", "est\n     */\n    it('update_callback_0122', 0, async function (done", "                let updatePromise = rdbStore.update(emptyBucket, p", "ePromise = rdbStore.update(emptyBucket, predicates)\n              ", "console.log(TAG + \":update_callback_0123 start\");\n        try {\n  ", "Id = await rdbStore.update(record, predicate);\n                con", "@tc.name data share update_promise test\n     * @tc.number SUB_DDM_", "\n            helper.update(\n                URI,\n                v", "est\n     */\n    it('update_promise_0121', 0, async function (done)", " console.log(TAG + \"update error\");\n                expect(null).a", " console.log(TAG + \"update done: \" + ret);\n                let res", "est\n     */\n    it('update_callback_0123', 0, async function (done", "            //await updatePromise\n        }\n        done();\n      ", "console.log(TAG + \":update_callback_0122 start\");\n        try {\n  ", " console.log(TAG + \"update one record failed\");\n                ex", "\n            helper.update(\n                URI,\n                n", "ePromise = rdbStore.update(valueBucket, predicates)\n              ", "console.log(TAG + \":update_callback_0120 start\");\n        try {\n  ", "est\n     */\n    it('update_callback_0120', 0, async function (done", "console.log(TAG + \":update_callback_0123 end\");\n    })\n\n    /**\n  ", " console.log(TAG + \"update one record success \" + rowId)\n         ", " console.log(TAG + \"update done: \" + ret);\n            }).catch((e", "===================>updateCallback=======================>\");\n    ", "\n            helper.update(\n                null,\n                ", " console.log(TAG + \"update with null table name\");\n               ", "@tc.name data share update_callback test\n     * @tc.number SUB_DDM", "console.log(TAG + \":update_promise_0121 start\");\n        try {\n   ", "console.log(TAG + \":update_callback_0120 end\");\n    })\n\n    /**\n  ", "@tc.desc data share update_callback test\n     */\n    it('update_ca", "UB_DDM_DataShare_JS_update_callback_0123\n     * @tc.desc data shar", "UB_DDM_DataShare_JS_update_callback_0122\n     * @tc.desc data shar", "1\")\n            let updatePromise = rdbStore.update(valueBucket, p", " console.log(TAG + \"update with wrong valueBucket\");\n             ", "ePromise = rdbStore.update(valueBucket, predicates)\n            up", " console.log(TAG + \"update with wrong condition\");\n               ", "console.log(TAG + \":update_promise_0121 end\");\n    })\n\n    /**\n   ", "UB_DDM_DataShare_JS_update_callback_0120\n     * @tc.desc data shar", "@tc.desc data share update_promise test\n     */\n    it('update_pro", "console.log(TAG + \":update_callback_0122 end\");\n    })\n\n    /**\n  "], "files": ["DataShareJsunit.test.js", "RdbStoreDistributedJsunit.test.js", "SchemaJsunit.test.js", "RdbstoreUpdateJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "update", "api_method_all": "update(uri: string, value: rdb.ValuesBucket, predicates: dataAbility.DataAbilityPredicates): Promise<number>;", "api_type": "Promise", "api_args_count": 3, "api_level": 21, "api_used_count": 8, "since": 9, "api_used": "\u662f", "lines": ["es)\n                updatePromise.then(async (ret) => {\n          ", "icates)\n            updatePromise.then(async (ret) => {\n          "], "files": ["RdbstoreUpdateJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "batchInsert", "api_method_all": "batchInsert(uri: string, values: Array<rdb.ValuesBucket>, callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 21, "since": 9, "api_used": "\u662f", "lines": ["UB_DDM_DataShare_JS_batchInsert_callback_0102\n     * @tc.desc data shar", "console.log(TAG + \":batchInsert_callback_0100 end\");\n    })\n\n    /**\n  ", "console.log(TAG + \":batchInsert_promise_0101 end\");\n    })\n\n    /**\n   ", "===================>batchInsertCallback=======================>\");\n    ", "console.log(TAG + \":batchInsert_callback_0102 start\");\n        try {\n  ", "console.log(TAG + \":batchInsert_callback_0102 end\");\n    })\n\n    /**\n  ", "\n            helper.batchInsert(\n                URI,\n                c", "console.log(TAG + \":batchInsert_promise_0101 start\");\n        try {\n   ", "est\n     */\n    it('batchInsert_callback_0102', 0, async function (done", "console.log(TAG + \":batchInsert_callback_0100 start\");\n        try {\n  ", "@tc.name data share batchInsert_promise test\n     * @tc.number SUB_DDM_", "@tc.desc data share batchInsert_callback test\n     */\n    it('batchInse", "UB_DDM_DataShare_JS_batchInsert_callback_0090\n     * @tc.desc data shar", "UB_DDM_DataShare_JS_batchInsert_promise_0101\n     * @tc.desc data share", "est\n     */\n    it('batchInsert_callback_0100', 0, async function (done", "\n            helper.batchInsert(\n                null,\n                ", "@tc.name data share batchInsert_callback test\n     * @tc.number SUB_DDM", "est\n     */\n    it('batchInsert_promise_0101', 0, async function (done)"], "files": ["DataShareJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "batchInsert", "api_method_all": "batchInsert(uri: string, values: Array<rdb.ValuesBucket>): Promise<number>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "getType", "api_method_all": "getType(uri: string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 9, "since": 9, "api_used": "\u662f", "lines": ["===================>getTypeCallback=======================>\");\n    ", "\n            helper.getType(\n                URI,\n                (", "console.log(TAG + \":getType_promise_0041 start\");\n        try {\n   ", "console.log(TAG + \":getType_callback_0040 end\");\n    })\n\n    \n    i", "\n            helper.getType(\n                URI\n                ).", "   })\n\n    \n    it('getType_promise_0041', 0, async function (done)", "console.log(TAG + \":getType_promise_0041 end\");\n    })\n\n    \n    it", "   })\n\n    \n    it('getType_callback_0040', 0, async function (done", "console.log(TAG + \":getType_callback_0040 start\");\n        try {\n  "], "files": ["DataShareJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "getType", "api_method_all": "getType(uri: string): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "getFileTypes", "api_method_all": "getFileTypes(uri: string,  mimeTypeFilter:string, callback: AsyncCallback<Array<string>>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 3, "since": 9, "api_used": "\u662f", "lines": ["\n            helper.getFileTypes(\n                null,\n                ", "\n            helper.getFileTypes(\n                URI,\n                \""], "files": ["DataShareJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "getFileTypes", "api_method_all": "getFileTypes(uri: string,  mimeTypeFilter: string): Promise<Array<string>>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "normalizeUri", "api_method_all": "normalizeUri(uri: string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 38, "since": 9, "api_used": "\u662f", "lines": ["c.name data share denormalizeUri_callback test\n     * @tc.number SUB_DDM", "nsole.log(TAG + \":denormalizeUri_promise_0071 start\");\n        try {\n   ", "===================>normalizeUriCallback=======================>\");\n    ", "_DDM_DataShare_JS_denormalizeUri_callback_0072\n     * @tc.desc data shar", "t\n     */\n    it('denormalizeUri_promise_0071', 0, async function (done)", "nsole.log(TAG + \":denormalizeUri_callback_0072 start\");\n        try {\n  ", "console.log(TAG + \":normalizeUri_callback_0062 end\");\n    })\n\n    /**\n  ", "nsole.log(TAG + \":denormalizeUri_callback_0072 end\");\n    })\n\n    /**\n  ", "nsole.log(TAG + \":denormalizeUri_callback_0070 start\");\n        try {\n  ", "nsole.log(TAG + \":denormalizeUri_callback_0070 end\");\n    })\n\n    /**\n  ", "           helper.denormalizeUri(\n                URI,\n                (", "\n            helper.normalizeUri(\n                URI,\n                (", "\n            helper.normalizeUri(\n                URI,\n                )", "console.log(TAG + \":normalizeUri_callback_0062 start\");\n        try {\n  ", "\n            helper.normalizeUri(\n                null,\n                ", "console.log(TAG + \":normalizeUri_promise_0061 end\");\n    })\n\n    /**\n   ", "est\n     */\n    it('normalizeUri_callback_0062', 0, async function (done", "console.log(TAG + \":normalizeUri_callback_0060 start\");\n        try {\n  ", "nsole.log(TAG + \":denormalizeUri_promise_0071 end\");\n    })\n\n    /**\n   ", "_DDM_DataShare_JS_denormalizeUri_callback_0060\n     * @tc.desc data shar", "t\n     */\n    it('denormalizeUri_callback_0070', 0, async function (done", "@tc.name data share normalizeUri_callback test\n     * @tc.number SUB_DDM", "c.desc data share denormalizeUri_promise test\n     */\n    it('denormaliz", "=================>denormalizeUriCallback=======================>\");\n    ", "   })\n\n    \n    it('normalizeUri_promise_0061', 0, async function (done)", "c.name data share denormalizeUri_promise test\n     * @tc.number SUB_DDM_", "console.log(TAG + \":normalizeUri_promise_0061 start\");\n        try {\n   ", "     \"image\n    it('normalizeUri_callback_0060', 0, async function (done", "t\n     */\n    it('denormalizeUri_callback_0072', 0, async function (done", "c.desc data share denormalizeUri_callback test\n     */\n    it('denormali", "console.log(TAG + \":normalizeUri_callback_0060 end\");\n    })\n\n    \n    i", "@tc.desc data share normalizeUri_callback test\n     */\n    it('normalize", "_DDM_DataShare_JS_denormalizeUri_promise_0061\n     * @tc.desc data share", "           helper.denormalizeUri(\n                null,\n                ", "           helper.denormalizeUri(\n                URI,\n                )", "UB_DDM_DataShare_JS_normalizeUri_0062\n     * @tc.desc data share normali"], "files": ["DataShareJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "normalizeUri", "api_method_all": "normalizeUri(uri: string): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "denormalizeUri", "api_method_all": "denormalizeUri(uri: string, callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 22, "since": 9, "api_used": "\u662f", "lines": ["@tc.name data share denormalizeUri_promise test\n     * @tc.number SUB_DDM_", "console.log(TAG + \":denormalizeUri_callback_0070 start\");\n        try {\n  ", "@tc.name data share denormalizeUri_callback test\n     * @tc.number SUB_DDM", "@tc.desc data share denormalizeUri_callback test\n     */\n    it('denormali", "console.log(TAG + \":denormalizeUri_callback_0072 end\");\n    })\n\n    /**\n  ", "UB_DDM_DataShare_JS_denormalizeUri_callback_0060\n     * @tc.desc data shar", "===================>denormalizeUriCallback=======================>\");\n    ", "UB_DDM_DataShare_JS_denormalizeUri_promise_0061\n     * @tc.desc data share", "UB_DDM_DataShare_JS_denormalizeUri_callback_0072\n     * @tc.desc data shar", "console.log(TAG + \":denormalizeUri_promise_0071 end\");\n    })\n\n    /**\n   ", "est\n     */\n    it('denormalizeUri_callback_0070', 0, async function (done", "console.log(TAG + \":denormalizeUri_callback_0072 start\");\n        try {\n  ", "@tc.desc data share denormalizeUri_promise test\n     */\n    it('denormaliz", "console.log(TAG + \":denormalizeUri_callback_0070 end\");\n    })\n\n    /**\n  ", "\n            helper.denormalizeUri(\n                URI,\n                (", "\n            helper.denormalizeUri(\n                URI,\n                )", "est\n     */\n    it('denormalizeUri_promise_0071', 0, async function (done)", "est\n     */\n    it('denormalizeUri_callback_0072', 0, async function (done", "\n            helper.denormalizeUri(\n                null,\n                ", "console.log(TAG + \":denormalizeUri_promise_0071 start\");\n        try {\n   "], "files": ["DataShareJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "denormalizeUri", "api_method_all": "denormalizeUri(uri: string): Promise<string>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "notifyChange", "api_method_all": "notifyChange(uri: string, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 22, "since": 0, "api_used": "\u662f", "lines": ["est\n     */\n    it('notifyChange_callback_0080', 0, async function (done", "console.log(TAG + \":notifyChange_promise_0081 end\");\n    })\n\n    /**\n   ", "@tc.desc data share notifyChange_callback test\n     */\n    it('notifyCha", "@tc.name data share notifyChange_callback test\n     * @tc.number SUB_DDM", "est\n     */\n    it('notifyChange_promise_0081', 0, async function (done)", "console.log(TAG + \":notifyChange_callback_0080 start\");\n        try {\n  ", "\n            helper.notifyChange(\n                URI,\n                )", "UB_DDM_DataShare_JS_notifyChange_callback_0080\n     * @tc.desc data shar", "est\n     */\n    it('notifyChange_callback_0082', 0, async function (done", "@tc.desc data share notifyChange_promise test\n     */\n    it('notifyChan", "UB_DDM_DataShare_JS_notifyChange_promise_0081\n     * @tc.desc data share", "console.log(TAG + \":notifyChange_callback_0080 end\");\n    })\n\n    /**\n  ", "\n            helper.notifyChange(\n                null,\n                ", "console.log(TAG + \":notifyChange_callback_0082 end\");\n    })\n\n    /**\n  ", "@tc.name data share notifyChange_promise test\n     * @tc.number SUB_DDM_", "===================>notifyChangeCallback=======================>\");\n    ", "\n            helper.notifyChange(\n                URI,\n                (", "UB_DDM_DataShare_JS_notifyChange_callback_0082\n     * @tc.desc data shar", "console.log(TAG + \":notifyChange_callback_0082 start\");\n        try {\n  ", "console.log(TAG + \":notifyChange_promise_0081 start\");\n        try {\n   "], "files": ["DataShareJsunit.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DataShareHelper", "api_method_name": "notifyChange", "api_method_all": "notifyChange(uri: string): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}