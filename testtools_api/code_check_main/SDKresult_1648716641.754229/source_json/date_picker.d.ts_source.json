{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\date_picker", "api": [{"api_class_name": "DatePickerResult", "api_method_all": "declare interface DatePickerResult {\n  \n  year?: number;\n\n  \n  month?: number;\n\n  \n  day?: number;\n}", "api_method_name": "DatePickerResult", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 1, "since": 8, "api_used": "\u662f", "lines": ["   .onChange((date: DatePickerResult) => {\n          con"], "files": ["datePicker.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerResult", "api_method_name": "year", "api_method_all": "year?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": ["this.year = request.year;\n          this.mon", "s.Controller.goTo({ year: 2021, month: 9, da", " this.datevalue = e.year + \"-\" + e.month + \"", "onth: MonthData = { year: 0, month: 0, data:", ": MonthData = {\n    year: 2021,\n    month: 4", "onth.year = request.year;\n              this", ",\n                  year: request.year,\n    ", ": MonthData = {\n    year: 2021,\n    month: 2", "r({\n        date: { year: 2021, month: 8, da", "\n              this.year = request.currentYe", "                    year: 2020,\n            ", ": MonthData = {\n    year: 2021,\n    month: 3", "{ message:\"date:\"+e.year+\"-\"+(e.month+1)+\"-\"", "rkValue: \"444\",\n    year: 2022,\n    month: 3", "       Text(`${this.year} \u5e74 ${this.month + 1", "ata_: MonthData = { year: 2022, month: 3, da", "     this.nextMonth.year = request.year;\n   ", "=> {\n          this.year = request.year;\n   ", " Calendar({\n        year: 2020,\n        mont", "his.datetimevalue=e.year+\"-\"+e.month+\"-\"+e.d", "      this.curMonth.year = request.year;\n   ", "ct change: ' + this.year + '/' + this.month)", "      this.preMonth.year = request.year;\n   ", "data: [] }\n  @State year: number = 0\n  @Stat", "      year: request.year,\n                  "], "files": ["calendar.ets", "Calendar.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerResult", "api_method_name": "month", "api_method_all": "month?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 41, "since": 8, "api_used": "\u662f", "lines": ["\n              this.month = request.currentMo", ".goTo({ year: 2021, month: 9, day: 10 });\n   ", "     month: request.month,\n                  ", " = e.year + \"-\" + e.month + \"-\" + e.day;\n    ", "    year: 2022,\n    month: 3,\n    day: 12,\n  ", "      this.curMonth.month = request.month;\n  ", ",\n                  month: request.month,\n   ", "year: 2020,\n        month: 5,\n        day: 12", "date: { year: 2021, month: 8, day: 35 },\n    ", "number = 0\n  @State month: number = 0\n  Contr", "    switch (request.monthState) {\n           ", "    year: 2021,\n    month: 4,\n    data: this.", "    year: 2021,\n    month: 2,\n    data: this.", "    year: 2022,\n    month: 3,\n    day: 10,\n  ", "                    month: 11,\n              ", "    year: 2021,\n    month: 3,\n    data: this.", "thData = { year: 0, month: 0, data: [] }\n  @S", "ate:\"+e.year+\"-\"+(e.month+1)+\"-\"+e.day })\n  }", "his.month = request.month;\n          console.", "      this.preMonth.month = request.month\n   ", "     this.nextMonth.month = request.month;\n  ", "nth.month = request.month\n              this.", "    year: 2022,\n    month: 3,\n    day: 11,\n  ", "thData = { year: 0, month: 0, data: [] };\n  @", "ear;\n          this.month = request.month;\n  ", "nth.month = request.month;\n              this", "s.year + '/' + this.month)\n        })\n      R", " message:\"Time:\"+(e.month+1)+\"-\"+e.day+\" \"+e.", "this.year} \u5e74 ${this.month + 1} \u6708`)\n          ", "ata = { year: 2022, month: 3, data: [this.cal", "evalue=e.year+\"-\"+e.month+\"-\"+e.day+\" \"+e.hou"], "files": ["calendar.ets", "Calendar.ets", "index.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerResult", "api_method_name": "day", "api_method_all": "day?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 91, "since": 8, "api_used": "\u662f", "lines": ["}, this.currentMonthday, this.preMonthday, ", " @State currentMonthday: MonthData = {\n    ", "ight: 30,\n          dayWidth: 30,\n         ", "ight: 30,\n          dayYAxisOffset: 1,\n    ", "dayMark: \"333\",\n    dayMarkValue: \"444\",\n  ", ")\n        }, day => day)\n      }\n      .col", "          }, day => day)\n        }, day => ", "rEach(this.Number, (day: string) => {\n     ", ",\n    month: 3,\n    day: 11,\n    isFirstOfL", "     }\n          }, day => day)\n        }, ", "};\n  @State preMonthday: MonthData = {\n    ", "\n              Text(day)\n                .f", ",\n    month: 3,\n    day: 10,\n    isFirstOfL", " => day)\n        }, day => day)\n      }\n   ", "                    dayMark: \"\u516d\",\n         ", ")\n        }, day => day)\n      }\n      .lay", "hday, this.nextMonthday, this.calendarContr", "                    dayMarkValue: \"\u513f\u7ae5\u8282\",\n  ", ",\n    month: 3,\n    day: 12,\n    isFirstOfL", "unarDay: \"222\",\n    dayMark: \"333\",\n    day", "thday, this.preMonthday, this.nextMonthday,", "  month: 5,\n        day: 12\n      }, this.c", "                    day: 10,\n              ", ";\n  @State nextMonthday: MonthData = {\n    ", "ayStyle({\n          dayHeight: 30,\n        "], "files": ["Grid.ets", "calendar.ets", "grid.ets", "Calendar.ets", "Panel.ets", "index.js", "panel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerOptions", "api_method_all": "declare interface DatePickerOptions {\n  \n  start?: Date;\n  \n  end?: Date;\n\n  \n  selected?: Date;\n}", "api_method_name": "DatePickerOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerOptions", "api_method_name": "start", "api_method_all": "start?: Date", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 804, "since": 8, "api_used": "\u662f", "lines": ["geValue}`)\n        .startAngle(`${this.startA", "in = eventData.data.startMargin;\n      }\n    ", " = \"Running Marquee starts rolling\"\n  @State ", "fo(\"[testEllipse02] start to publish emit\");\n", "fo(\"[testEllipse06] start to publish emit\");\n", "    console.info(\"Onstart emit action state e", "(\"enable beforeEach start\");\n      let option", "    console.info('Onstart current action stat", "ue = eventData.data.startAngleValue;\n      }\n", "nsole.info(\"button1 start to emit action stat", "is.color,\n          startMargin: this.startMa", "  startMargin: this.startMargin,\n          en", "(\"column beforeEach start\");\n      let option", "nfo(\"[testEnable03] start to publish emit\");\n", "   })\n      Button('start')\n        .key('but", "fo(\"[testEllipse03] start to publish emit\");\n", "ull) {\n        this.startMargin = eventData.d", "eExample {\n  @State start: boolean = false\n  ", "{\n    console.info(\"start run testcase!!!!\")\n", "sole.info(\"Onbounce start to emit action stat", "ull) {\n        this.startAngleValue = eventDa", "\"ellipse beforeEach start\");\n      let option", "nsole.info(\"onClick start to emit action stat", " if (eventData.data.startMargin != null) {\n  ", "fo(\"[testEllipse04] start to publish emit\");\n", "(\"appear beforeEach start\");\n      let option", "info(\"disAppearFlag start to emit action stat", "sole.info(\"onChange start to emit action stat", "      console.info(\"start to emit action stat", " if (eventData.data.startAngleValue != null) ", "ole.info(\"touchFlag start to emit action stat", ".startAngle(`${this.startAngleValue}`)\n      ", "      \"start\": this.start,\n              }\n  ", "  Marquee({\n        start: this.start,\n      ", "le.info(\"appearFlag start to emit action stat", "=> {\n          this.start = true\n          tr", "nsole.info(\"Onstart start to emit action stat", " {\n                \"start\": this.start,\n     ", "fo(\"[testEllipse07] start to publish emit\");\n", "    console.info(\"Onstart start to emit actio", "        start: this.start,\n        step: this", "fo(\"[testEllipse05] start to publish emit\");\n", "sole.info(\"Onfinish start to emit action stat", ".info(\"onAreaChange start to emit action stat", "nfo(\"[testColumn02] start to publish emit\");\n", "ring = 20;\n  @State startAngleValue: string =", " 0xFFFFFF;\n  @State startMargin: number = 20.", "nfo(\"[testEnable02] start to publish emit\");\n", "e.info(\"[TouchAble] start to emit action stat", "nsole.info(\"button2 start to emit action stat"], "files": ["ImageJsunit.test.ets", "configuration.ets", "ImageEffectsJsunit.test.ets", "video.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "sourceType.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "TextStyleJsunit.test.ets", "geometryTransition.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "mediaquery.test.js", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "ResponseRegion.ets", "basicabilityapi.test.js", "RichTextJsunit.test.ets", "CalendarJsunit.test.ets", "transition.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "CurvesJsunit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "VideoJsunit.test.ets", "touch.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "SourceTypeJsunit.test.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "gauge.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "Scroll.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "SearchJsunit.test.ets", "VisibilityJsunit.test.ets", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "Canvas2Jsunit.test.ets", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "Utils.ets", "ShapeJsunit.test.ets", "PieceCode.ets", "GlobalJsunit.test.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "textClock.ets", "tabs.ets", "BindMenuJsunit.test.ets", "videoProps.test.js", "list.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "DatePickerJsunit.test.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "Video.ets", "TextAreaJsunit.test.ets", "textareaProps.test.js", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "BorderJsunit.test.ets", "direction2.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "canvas.ets", "AboutToDisappearJsunit.test.ets", "CircleJsunit.test.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "line.ets", "TransFormJsunit.test.ets", "touchAble.ets", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "datePicker.ets", "pageTransition.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "TabsJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "areaChange.ets", "BindPopupJsunit.test.ets", "timeStamp.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerOptions", "api_method_name": "end", "api_method_all": "end?: Date", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 651, "since": 8, "api_used": "\u662f", "lines": ["rumentLog, ReportExtend} from \"deccjsunit/i", "          'id': 'extend'\n        });\n      ", "al_console_log Test end--------------------", "  .endAngle(`${this.endAngleValue}`)\n      ", "('report', reportExtend);\n        core.init", "ata: {\n            \"endAngleValue\": \"-10\"\n ", "testClickEvent001] sendEventByKey ' + JSON.", "' + JSON.stringify(sendEventByKey('ellipse'", "leValue}`)\n        .endAngle(`${this.endAng", "ue = eventData.data.endAngleValue;\n      }\n", "l_console_warn Test end--------------------", "tend = new ExpectExtend({\n          'id': '", "tend = new ReportExtend(file);\n        core", " if (eventData.data.endMargin != null) {\n  ", "\" + JSON.stringify(sendEventByKey('button2'", "fy(downPonit))\n    sendTouchEvent(downPonit", "ull) {\n        this.endAngleValue = eventDa", "xpect(objNew.$attrs.endAngle).assertEqual('", "     const expectExtend = new ExpectExtend(", "ata: {\n            \"endAngleValue\": \"200\"\n ", "\" + JSON.stringify(sendEventByKey('touch', ", "('expect', expectExtend);\n        const rep", "(obj.$attrs.divider.endMargin).assertEqual(", "ort {Core, ExpectExtend, InstrumentLog, Rep", "rtMargin,\n          endMargin: this.endMarg", "    endMargin: this.endMargin\n        })\n  ", "ata: {\n            \"endMargin\": \"30.000000v", "ull) {\n        this.endMargin = eventData.d", "ata: {\n            \"endAngleValue\": \"nan\"\n ", "nt('task', reportExtend);\n        const con", "20.000000;\n  @State endMargin: number = 20.", "l_console_info Test end--------------------", "\" + JSON.stringify(sendEventByKey('button',", "\" + JSON.stringify(sendEventByKey('button1'", "\" + JSON.stringify(sendEventByKey('text1', ", "ing = 210;\n  @State endAngleValue: string =", "     const reportExtend = new ReportExtend(", "\" + JSON.stringify(sendEventByKey('appear',", " if (eventData.data.endAngleValue != null) ", "in = eventData.data.endMargin;\n      }\n    ", "or)\n        .colorBlend(Color.Green)\n      "], "files": ["ImageJsunit.test.ets", "longPressGesture.ets", "canvas2.ets", "ParallelGestureJsunit.test.ets", "TouchAbleJsunit.test.ets", "Panel.ets", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "marquee.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "mediaquery.test.js", "GeometryTransitionJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "FillModeJsunit.test.ets", "CalendarJsunit.test.ets", "Image.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "NavigatorCodeJsunit.test.ets", "List.test.ets", "SourceTypeJsunit.test.ets", "PanGestureJsunit.test.ets", "gauge.ets", "ButtonJsunit.test.ets", "GridJsunit.test.ets", "Scroll.ets", "TransitionJsunit.test.ets", "AreaChangeJsunit.test.ets", "AnimateJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "edgeEffect.ets", "index.ets", "TimeStampJsunit.test.ets", "PanGesture.ets", "ListJsunit.test.ets", "ColorGradientJsunit.test.ets", "MotionPathJsunit.test.ets", "Utils.ets", "Stepper.ets", "GlobalJsunit.test.ets", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "BindMenuJsunit.test.ets", "list.ets", "colorGradient.ets", "MarqueeJsunit.test.ets", "List.ets", "DatePickerJsunit.test.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "calendar.ets", "animateTransformProps.test.js", "dragEvent.ets", "lazyForEach.ets", "animateMotionProps.test.js", "CustomDialogControllerJsunit.test.ets", "textareaProps.test.js", "buttonProps.test.js", "animateProps.test.js", "panDirection.ets", "AnimationStatusJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "canvas.ets", "AboutToDisappearJsunit.test.ets", "TextInput.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "commonComponentJsApi.test.js", "line.ets", "SharedTransitionJsunit.test.ets", "datePicker.ets", "WebPage.ets", "SystempromptJsunit.test.ets", "TabsJsunit.test.ets", "inputProps.test.js", "index.js", "SwiperJsunit.test.ets", "BindPopupJsunit.test.ets", "NavigationJsunit.test.ets", "Calendar.ets", "gestureMode.ets", "motionPath.ets", "panel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerOptions", "api_method_name": "selected", "api_method_all": "selected?: Date", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 185, "since": 8, "api_used": "\u662f", "lines": ["or = eventData.data.selectedColor;\n      }\n     ", "\n        }\n        .selectedColor(0x39a2db)\n    ", "FF0000')\n          .selectedColor('#FF0000FF')\n ", " if (eventData.data.selectedColor != null) {\n   ", "opup(true)\n        .selectedFont({ size: 16, wei", "ample01 {\n  private selectedDate: Date = new Dat", "ent === item ? this.selectedIcon : this.normalIc", "lor.Red)\n          .selectedColor(Color.Blue)\n  ", "ct(true)\n          .selectedColor(0x39a2db)\n    ", "FF00DDDD')\n        .selectedColor(0xffffff)\n    ", "ata: {\n            \"selectedColor\": '#330A59F8',", "eExample {\n  @State selectedColor: Color = '#330", "t(false)\n          .selectedColor(0x39a2db)\n    ", "     selected: this.selectedDate,\n        type: ", "s.fruits,\n          selected: this.select,\n     ", "  expect(obj.$attrs.selectedColor).assertEqual('", "ata: {\n            \"selectedColor\": '-0.1',\n    ", "n: true })\n        .selectedColor(0x39a2db)\n    ", "Black)\n            .selectedColor(0xCCCCCC)\n    ", "xpect(objNew.$attrs.selectedColor).assertEqual('", "ata: {\n            \"selectedColor\": '-a',\n      ", "select = jsonString.selectedIndex\n            re", "r.Black)\n          .selectedColor(0xCCCCCC)\n    ", "Group'})\n          .selectedColor(0xed6f21)\n    ", "heckbox2')\n        .selectedColor(0x39a2db)\n    ", ".selectedColor(this.selectedColor)\n        .onCh", "s.splice(jsonString.selectedIndex, 1)\n          ", ".numbers[jsonString.selectedIndex]\n            t", "mg.png\"}])\n        .selected(2)\n        .value('", "t ATTRS_SELECTED = 'selected'\nconst ATTRS_LONG_C", "yValue: this.value, selected: 0 })\n        .colo", "or.Gray)\n          .selectedColor(Color.Blue)\n  ", "alth_heart.png\"))\n  selectedIcon: Resource = ($r", "fontColor)\n        .selectedOptionFont({size: 40", "ull) {\n        this.selectedColor = eventData.da", "heckbox1')\n        .selectedColor(0xed6f21)\n    ", "('toggle')\n        .selectedColor(this.selectedC", ".Gray)\n            .selectedColor(Color.Blue)\n  ", "FF737373')\n        .selectedBackgroundColor('#FF", "2200-1-1'),\n        selected: this.selectedDate,"], "files": ["Select.ets", "PatternLock.ets", "textPickerDialog.ets", "Slider.ets", "AlphabetIndexer.ets", "Constants.ets", "ToggleJsunit.test.ets", "sideBar.ets", "toggle.ets", "checkboxGroup.ets", "datePicker.ets", "dragEvent2.ets", "index.js", "inputProps.test.js", "optionProps.test.js", "ResponseRegion.ets", "dragEvent.ets", "checkbox.ets", "select.ets", "Toggle.ets", "listProps.test.js", "slider.ets", "textareaProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerInterface", "api_method_all": "interface DatePickerInterface {\n  \n  (options?: DatePickerOptions): DatePickerAttribute;\n}", "api_method_name": "DatePickerInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerInterface", "api_method_name": "options", "api_method_all": "(options?: DatePickerOptions): DatePickerAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 791, "since": 8, "api_used": "\u662f", "lines": ["= await router.push(options);\n          await U", " start\");\n      let options = {\n        uri: 'p", "(obj.$attrs.overlay.options.offset.x).assertEqu", "(obj.$attrs.overlay.options.align).assertEqual(", "(obj.$attrs.overlay.options.offset.y).assertEqu", " (done) {\n      let options = {\n        uri: 'p"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerAttribute", "api_method_all": "declare class DatePickerAttribute extends CommonMethod<DatePickerAttribute> {\n  \n  lunar(value: boolean): DatePickerAttribute;\n\n  \n  onChange(callback: (value: DatePickerResult) => void): DatePickerAttribute;\n}", "api_method_name": "DatePickerAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerAttribute", "api_method_name": "lunar", "api_method_all": "lunar(value: boolean): DatePickerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.lunarHeight != null) {\n  ", "dar_CurrentDayStyle_lunarHeight] change compo", "                    lunarDay: \"6\",\n          ", "                    lunarMonth: \"five\",\n     ", "dar_CurrentDayStyle_lunarHeight', 0, async fu", "{\n    index: 6,\n    lunarMonth: \"111\",\n    lu", "   lunarMonth: this.lunarMonthNames[i%12],\n  ", "ata: {\n            \"lunarHeight\": 13,\n       ", "ffset: 1,\n          lunarDayYAxisOffset: 1,\n ", "dar_CurrentDayStyle_lunarHeight] start to pub", "RowSpace,\n          lunarHeight: this.lunarHe", ",\n                  lunarMonth: this.lunarMon", "Size: 15,\n          lunarDayFontSize: 10,\n   ", "arMonth: \"111\",\n    lunarDay: \"222\",\n    dayM", "  lunarHeight: this.lunarHeight,\n          un", ",\n                  lunarDay: this.lunarMonth", "dar_CurrentDayStyle_lunarHeight] START');\n   ", "     lunarDay: this.lunarMonthDays[i % 30],\n ", "or.Black,\n          lunarColor: Color.Gray,\n ", "eight value\" + this.lunarHeight);\n      }\n   ", ".log(\"Calendar page lunarHeight value\" + this", "tePicker')\n        .lunar(true)\n        .useM", "umber = 5;\n  @State lunarHeight: number = 20;", "\u4e5d', '\u4e09\u5341']\n  private lunarMonthNames: string[]", "roller();\n  private lunarMonthDays: string[] ", "ull) {\n        this.lunarHeight = eventData.d", "ht = eventData.data.lunarHeight;\n        cons"], "files": ["calendar.ets", "CalendarJsunit.test.ets", "datePicker.ets", "Calendar.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerAttribute", "api_method_name": "onChangecallback", "api_method_all": "onChange(callback: (value: DatePickerResult) => void): DatePickerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerAttribute", "api_method_name": "onChangecallback", "api_method_all": "onChange(callback: (value: DatePickerResult) => void): DatePickerAttribute;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerDialogOptions", "api_method_all": "declare interface DatePickerDialogOptions extends DatePickerOptions {\n  \n  lunar?: boolean;\n\n  \n  onAccept?: (value: DatePickerResult) => void;\n  \n  onCancel?: () => void;\n  \n  onChange?: (value: DatePickerResult) => void;\n}", "api_method_name": "DatePickerDialogOptions", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerDialogOptions", "api_method_name": "onAccept", "api_method_all": "onAccept?: (value: DatePickerResult) => void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["o(\"TextPickerDialog:onAccept()\" + JSON.stringify", " is clicked')\n  }\n  onAccept() {\n    console.inf", "ncel, confirm: this.onAccept }),\n    cancel: thi", "ight: 20,\n          onAccept: (value: TextPicker", "is clicked')\n  }\n\n  onAccept() {\n    console.inf"], "files": ["textPickerDialog.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerDialogOptions", "api_method_name": "onCancel", "api_method_all": "onCancel?: () => void;", "api_type": "", "api_args_count": 0, "api_level": null, "api_used_count": 11, "since": 8, "api_used": "\u662f", "lines": ["        })\n        .onCancel(() => {\n          c", " 100\n    },\n  })\n\n  onCancel() {\n    console.inf", "    })\n      .onActionCancel(() => {\n        con", "o(\"TextPickerDialog:onCancel()\")\n          },\n  ", "    })\n    )\n      .onCancel(() => {\n        con", "ridCount: 5\n  })\n\n  onCancel() {\n    console.inf", "       },\n          onCancel: () => {\n          ", "mple({ cancel: this.onCancel, confirm: this.onAc"], "files": ["longPressGesture.ets", "textPickerDialog.ets", "animationStatus.ets", "imageAnimator.ets", "gestureMode.ets", "fillMode.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerDialogOptions", "api_method_name": "onChange", "api_method_all": "onChange?: (value: DatePickerResult) => void;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 62, "since": 8, "api_used": "\u662f", "lines": ["      console.info(\"onChange start to emit actio", "ey('swiper')\n      .onChange((index: number) => ", "ts_emitter.on(positionChangeEvent, this.stateCha", "ck);\n\n    let positionChangeEvent = {\n      even", "       },\n          onChange: (value: TextPicker", "s(false)\n          .onChange((value: number, mod", "itaryTime)\n        .onChange((date: DatePickerRe", "s_emitter.on(directionChangeEvent, this.stateCha", "ctedColor)\n        .onChange((isOn: boolean) => ", "(0x39a2db)\n        .onChange((isOn: boolean) => ", "pSize(0.5)\n        .onChange((value: number) => ", "uration(400)\n      .onChange((index: number) => ", "        })\n        .onChange((value: string) => ", "(0xed6f21)\n        .onChange((value: boolean) =>", "radio2')\n          .onChange((value: boolean) =>", "nSkip')\n    })\n    .onChange((prevIndex: number,", "(true)\n            .onChange((value: number, mod", "radio3')\n          .onChange((value: boolean) =>", "iHeight(100)\n      .onChange((value: any) => {\n ", "key('Panel')\n      .onChange((value: any) => {\n ", "xGroup')\n          .onChange((itemName:CheckboxG", "(0x39a2db)\n        .onChange((value: boolean) =>", "k);\n\n    let directionChangeEvent = {\n      even", "      console.info('onChange current action stat", "ps(true)\n          .onChange((value: number, mod", "radio1')\n          .onChange((value: boolean) =>", "ess(1)\n            .onChange((value: number, mod", "y('sidebar')\n      .onChange((value: boolean) =>", "      console.info(\"onChange emit action state e", "ht: 400 })\n        .onChange((isOn: boolean) => ", ".key('tabs')\n      .onChange((index: number) => ", "      })\n          .onChange((value: number) => ", "o(\"TextPickerDialog:onChange()\" + JSON.stringify", "eBarWidth(260)\n    .onChange((value: boolean) =>", "x39a2db)\n          .onChange((value: boolean) =>", "itemSpace(0)\n      .onChange((index: number) => "], "files": ["Tab.ets", "Stepper.ets", "textPickerDialog.ets", "Slider.ets", "TextInput.ets", "radio.ets", "swiper.ets", "rating.ets", "sideBar.ets", "toggle.ets", "Panel.ets", "checkboxGroup.ets", "Sidebar.ets", "textClock.ets", "tabs.ets", "datePicker.ets", "Rating.ets", "positionSetting.ets", "TextArea.ets", "Swiper.ets", "ResponseRegion.ets", "checkbox.ets", "stepper.ets", "Toggle.ets", "textArea.ets", "slider.ets", "textInput.ets", "search.ets", "panel.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerDialogOptions", "api_method_name": "lunar", "api_method_all": "lunar?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 39, "since": 8, "api_used": "\u662f", "lines": [" if (eventData.data.lunarHeight != null) {\n  ", "dar_CurrentDayStyle_lunarHeight] change compo", "                    lunarDay: \"6\",\n          ", "                    lunarMonth: \"five\",\n     ", "dar_CurrentDayStyle_lunarHeight', 0, async fu", "{\n    index: 6,\n    lunarMonth: \"111\",\n    lu", "   lunarMonth: this.lunarMonthNames[i%12],\n  ", "ata: {\n            \"lunarHeight\": 13,\n       ", "ffset: 1,\n          lunarDayYAxisOffset: 1,\n ", "dar_CurrentDayStyle_lunarHeight] start to pub", "RowSpace,\n          lunarHeight: this.lunarHe", ",\n                  lunarMonth: this.lunarMon", "Size: 15,\n          lunarDayFontSize: 10,\n   ", "arMonth: \"111\",\n    lunarDay: \"222\",\n    dayM", "  lunarHeight: this.lunarHeight,\n          un", ",\n                  lunarDay: this.lunarMonth", "dar_CurrentDayStyle_lunarHeight] START');\n   ", "     lunarDay: this.lunarMonthDays[i % 30],\n ", "or.Black,\n          lunarColor: Color.Gray,\n ", "eight value\" + this.lunarHeight);\n      }\n   ", ".log(\"Calendar page lunarHeight value\" + this", "tePicker')\n        .lunar(true)\n        .useM", "umber = 5;\n  @State lunarHeight: number = 20;", "\u4e5d', '\u4e09\u5341']\n  private lunarMonthNames: string[]", "roller();\n  private lunarMonthDays: string[] ", "ull) {\n        this.lunarHeight = eventData.d", "ht = eventData.data.lunarHeight;\n        cons"], "files": ["calendar.ets", "CalendarJsunit.test.ets", "datePicker.ets", "Calendar.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerDialog", "api_method_all": "declare class DatePickerDialog {\n  \n  static show(options?: DatePickerDialogOptions);\n}", "api_method_name": "DatePickerDialog", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DatePickerDialog", "api_method_name": "show", "api_method_all": "static show(options?: DatePickerDialogOptions);", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 3848, "since": 0, "api_used": "\u662f", "lines": ["CCCCC)\n            .showSteps(false)\n       ", "info('Calendar page show called');\n    var s", "nfo('[enabled] page show called ');\n    var ", "ps(true)\n          .showTips(true)\n         ", "{\n      Button(this.show).width(80).height(3", "info('Checkbox page show called');\n    var s", "             prompt.showToast({\n            ", "\n              this.show = \"show\"\n          ", "ole.info('flex page show called');\n    var s", "false)\n            .showTips(false)\n        ", "info('[column] page show called');\n    var s", "info('[zIndex] page show called ');\n    var ", "le.info('gauge page show called');\n    var s", "or.Blue)\n          .showSteps(true)\n        ", "info('[appear] page show called');\n    var s", "'checkboxGroup page show called');\n    var s", "\n            prompt.showToast({ message: 'Th", "ate show: string = \"show\"\n\n  build() {\n    F", ".info('stepper page show called');\n    var s", "ssage: 'The text is shown', duration: 2000 }", "nfo('[ellipse] page show called');\n    var s", "       this.show = \"show\"\n            }\n    ", ".Blue)\n            .showSteps(true)\n        ", "e.info('[list] page show called');\n    var s", "is.swiperController.showPrevious()\n         ", "is.swiperController.showNext();\n            ", "'gridContainer page show called');\n    var s", "s(false)\n          .showTips(false)\n        ", "fo('background page show called');\n    var s", "xCCCCCC)\n          .showSteps(false)\n       ", "fo('edgeEffect page show called');\n    var s", "e.info('swiper page show called');\n    var s", "'shapeClipping page show called');\n    var s", "('imageEffects page show called');\n    var s", "e.info('border page show called');\n    var s", "an = false\n  @State show: string = \"show\"\n\n ", "\n              this.show = \"hide\"\n          ", ".info('[touch] page show called');\n    var s", "ansFormExample page show called');\n    var s", "nfo('[overlay] page show called ');\n    var ", "o('[TouchAble] page show called');\n    var s", "ColorGradient] page show called');\n    var s", "(true)\n            .showTips(true)\n         ", " {\n          prompt.showToast({ message: JSO", "e.info('select page show called');\n    var s", "e.info('slider page show called');\n    var s", "ansFormExample page show called');\n\n    var ", "le.info('focus page show called');\n    var s"], "files": ["listItemGroupProps.test.js", "ohosPrompt.ets", "dividerProps.test.js", "video.ets", "tabContentProps.test.js", "textProps.test.js", "Navigator.ets", "playMode.ets", "toolbarProps.test.js", "Qrcode.ets", "Navigation.ets", "Span.ets", "richText.ets", "column.ets", "Panel.ets", "Progress.ets", "checkboxGroup.ets", "navigation.ets", "searchProps.test.js", "spanProps.test.js", "geometryTransition.ets", "toolbarItemProps.test.js", "Rating.ets", "PieceJsunit.test.ets", "Swiper.ets", "basicabilityapi.test.js", "Divider.ets", "badgeProps.test.js", "border.ets", "scrollBar.ets", "dialogProps.test.js", "textArea.ets", "transition.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "RichText.ets", "formProps.test.js", "focus.ets", "touch.ets", "background.ets", "Slider.ets", "stackProps.test.js", "Text.ets", "PanelJsunit.test.ets", "Counter.ets", "gauge.ets", "Stack.ets", "swiper.ets", "sideBar.ets", "toggle.ets", "refreshProps.test.js", "Blank.ets", "Badge.ets", "Sidebar.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "canvasProps.test.js", "TextArea.ets", "animatorOption.ets", "flexDirection.ets", "shapeClipping.ets", "edgeEffect.ets", "stepper.ets", "shape.ets", "labelProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "gridContainerProps.test.js", "stepperProps.test.js", "Select.ets", "flex.ets", "ratingProps.test.js", "Shape.ets", "marqueeProps.test.js", "gridContainer.ets", "PatternLock.ets", "Polyline.ets", "imageAnimatorProps.test.js", "textPickerDialog.ets", "gridPage.ets", "enable.ets", "PieceCode.ets", "tabsProps.test.js", "badge.ets", "qrcodeProps.test.js", "imageEffects.ets", "popupProps.test.js", "AlphabetIndexer.ets", "ColumnSplit.ets", "listItemProps.test.js", "gridRowProps.test.js", "stepperItemProps.test.js", "textClock.ets", "tabs.ets", "videoProps.test.js", "list.ets", "colorGradient.ets", "AppStorage.ets", "QrCode.ets", "GridContainer.ets", "flexWrap.ets", "optionProps.test.js", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "calendar.ets", "checkbox.ets", "Video.ets", "pieceProps.test.js", "pickerProps.test.js", "circle.ets", "listItem.ets", "selectProps.test.js", "Button.ets", "textareaProps.test.js", "Polygon.ets", "gridColProps.test.js", "imageAnimator.ets", "bindPopup.ets", "span.ets", "NavigatorCode.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "pickerViewProps.test.js", "ohosMatrix4.ets", "Rect.ets", "divProps.test.js", "switchProps.test.js", "divider.ets", "ScrollBar.ets", "TextInput.ets", "ellipse.ets", "appear.ets", "rating.ets", "zIndex.ets", "Path.ets", "line.ets", "DataPanel.ets", "chartProps.test.js", "touchAble.ets", "SliderJsunit.test.ets", "pageTransition.ets", "progress.ets", "datePicker.ets", "AlertDialog.ets", "WebPage.ets", "sliderProps.test.js", "swiperProps.test.js", "tabBarProps.test.js", "inputProps.test.js", "index.js", "toggleProps.test.js", "Link.ets", "imageProps.test.js", "select.ets", "Toggle.ets", "listProps.test.js", "slider.ets", "progressProps.test.js", "aboutToDisappear.ets", "Calendar.ets", "sharedTransition.ets", "refresh.ets", "motionPath.ets", "search.ets", "panel.ets", "menuProps.test.js", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}]}