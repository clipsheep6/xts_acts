{"subsystem_ch": "ACE\u5f00\u53d1\u6846\u67b6", "subsystem_en": "ace", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@internal\\component\\ets\\text_timer", "api": [{"api_class_name": "TextTimerController", "api_method_all": "declare class TextTimerController {\r\n  \r\n  constructor();\r\n\r\n  \r\n  start();\r\n\r\n  \r\n  pause();\r\n\r\n  \r\n  reset();\r\n}", "api_method_name": "TextTimerController", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 2, "since": 8, "api_used": "\u662f", "lines": [" myTimerController: TextTimerController = new TextTimerCont", "merController = new TextTimerController()\n  @State format: "], "files": ["textTimer.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerController", "api_method_name": "constructor", "api_method_all": "constructor()", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 80, "since": 8, "api_used": "\u662f", "lines": ["  expect(obj.$attrs.constructor.sizeType).assertEqu", "taChangeListener\n\n  constructor(list: number[]) {\n ", "  expect(obj.$attrs.constructor.wrap).assertEqual('", "tringify(obj.$attrs.constructor.alignItems));\n     ", "tringify(obj.$attrs.constructor.wrap));\n      expec", "tringify(obj.$attrs.constructor.wrap));\n      conso", "  expect(obj.$attrs.constructor.alignContent).asser", "yr flex0 obj.$attrs.constructor.direction-'FlexDire", "yr flex0 obj.$attrs.constructor.alignContent-'FlexA", "  expect(obj.$attrs.constructor.gutter).assertEqual", "  expect(obj.$attrs.constructor.direction).assertEq", "  expect(obj.$attrs.constructor.text).assertEqual(u", "tringify(obj.$attrs.constructor.alignContent));\n   ", "yr flex0 obj.$attrs.constructor.wrap-'FlexWrap.NoWr", "tringify(obj.$attrs.constructor));\n      expect(obj", "  expect(obj.$attrs.constructor.columns).assertEqua", "xpect(objNew.$attrs.constructor.direction).assertEq", "tringify(obj.$attrs.constructor.justifyContent));\n ", "  expect(obj.$attrs.constructor.margin).assertEqual", "yr flex1 obj.$attrs.constructor.alignContent-'FlexA", "yr flex0 obj.$attrs.constructor.justifyContent-'Fle", "tringify(obj.$attrs.constructor.direction));\n      ", "yr flex0 obj.$attrs.constructor.alignItems-'FlexWra", "  expect(obj.$attrs.constructor.justifyContent).ass", "  expect(obj.$attrs.constructor.alignItems).assertE"], "files": ["ProgressJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "SliderJsunit.test.ets", "GridContainerJsunit.test.ets", "TextAreaJsunit.test.ets", "DirectionJsunit.test.ets", "swiper.ets", "EnmusFlexAlignJsunit.test.ets", "FlexJsunit.test.ets", "Swiper.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerController", "api_method_name": "start", "api_method_all": "start();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 804, "since": 8, "api_used": "\u662f", "lines": ["geValue}`)\n        .startAngle(`${this.startA", "in = eventData.data.startMargin;\n      }\n    ", " = \"Running Marquee starts rolling\"\n  @State ", "fo(\"[testEllipse02] start to publish emit\");\n", "fo(\"[testEllipse06] start to publish emit\");\n", "    console.info(\"Onstart emit action state e", "(\"enable beforeEach start\");\n      let option", "    console.info('Onstart current action stat", "ue = eventData.data.startAngleValue;\n      }\n", "nsole.info(\"button1 start to emit action stat", "is.color,\n          startMargin: this.startMa", "  startMargin: this.startMargin,\n          en", "(\"column beforeEach start\");\n      let option", "nfo(\"[testEnable03] start to publish emit\");\n", "   })\n      Button('start')\n        .key('but", "fo(\"[testEllipse03] start to publish emit\");\n", "ull) {\n        this.startMargin = eventData.d", "eExample {\n  @State start: boolean = false\n  ", "{\n    console.info(\"start run testcase!!!!\")\n", "sole.info(\"Onbounce start to emit action stat", "ull) {\n        this.startAngleValue = eventDa", "\"ellipse beforeEach start\");\n      let option", "nsole.info(\"onClick start to emit action stat", " if (eventData.data.startMargin != null) {\n  ", "fo(\"[testEllipse04] start to publish emit\");\n", "(\"appear beforeEach start\");\n      let option", "info(\"disAppearFlag start to emit action stat", "sole.info(\"onChange start to emit action stat", "      console.info(\"start to emit action stat", " if (eventData.data.startAngleValue != null) ", "ole.info(\"touchFlag start to emit action stat", ".startAngle(`${this.startAngleValue}`)\n      ", "      \"start\": this.start,\n              }\n  ", "  Marquee({\n        start: this.start,\n      ", "le.info(\"appearFlag start to emit action stat", "=> {\n          this.start = true\n          tr", "nsole.info(\"Onstart start to emit action stat", " {\n                \"start\": this.start,\n     ", "fo(\"[testEllipse07] start to publish emit\");\n", "    console.info(\"Onstart start to emit actio", "        start: this.start,\n        step: this", "fo(\"[testEllipse05] start to publish emit\");\n", "sole.info(\"Onfinish start to emit action stat", ".info(\"onAreaChange start to emit action stat", "nfo(\"[testColumn02] start to publish emit\");\n", "ring = 20;\n  @State startAngleValue: string =", " 0xFFFFFF;\n  @State startMargin: number = 20.", "nfo(\"[testEnable02] start to publish emit\");\n", "e.info(\"[TouchAble] start to emit action stat", "nsole.info(\"button2 start to emit action stat"], "files": ["ImageJsunit.test.ets", "configuration.ets", "ImageEffectsJsunit.test.ets", "video.ets", "ListItemJsunit.test.ets", "longPressGesture.ets", "placement.ets", "ScrollBarJsunit.test.ets", "playMode.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "sourceType.ets", "PositionSettingJsunit.test.ets", "navigation.ets", "TextStyleJsunit.test.ets", "geometryTransition.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "mediaquery.test.js", "PolylineJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "ResponseRegion.ets", "basicabilityapi.test.js", "RichTextJsunit.test.ets", "CalendarJsunit.test.ets", "transition.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "CurvesJsunit.test.ets", "button.ets", "FlexWrapJsunit.test.ets", "VideoJsunit.test.ets", "touch.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "SourceTypeJsunit.test.ets", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "gauge.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "Scroll.ets", "TransitionJsunit.test.ets", "GridContainerJsunit.test.ets", "SearchJsunit.test.ets", "VisibilityJsunit.test.ets", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "positionSetting.ets", "ResponseRegionJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "ProgressJsunit.test.ets", "PanGesture.ets", "Canvas2Jsunit.test.ets", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "Marquee.ets", "ColorGradientJsunit.test.ets", "Utils.ets", "ShapeJsunit.test.ets", "PieceCode.ets", "GlobalJsunit.test.ets", "ToggleJsunit.test.ets", "ohosRouterB.ets", "OhosPromptJsunit.test.ets", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "textClock.ets", "tabs.ets", "BindMenuJsunit.test.ets", "videoProps.test.js", "list.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "List.ets", "DatePickerJsunit.test.ets", "dragEvent2.ets", "GaugeJsunit.test.ets", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "Video.ets", "TextAreaJsunit.test.ets", "textareaProps.test.js", "imageAnimator.ets", "bindPopup.ets", "patternLock.ets", "buttonProps.test.js", "animate.ets", "BackgroundAndSizeSettingJsunit.test.ets", "panDirection.ets", "BorderJsunit.test.ets", "direction2.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "canvas.ets", "AboutToDisappearJsunit.test.ets", "CircleJsunit.test.ets", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "appear.ets", "ImageAnimatorJsunit.test.ets", "animationStatus.ets", "GradientDirectionJsunit.test.ets", "fillMode.ets", "line.ets", "TransFormJsunit.test.ets", "touchAble.ets", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "datePicker.ets", "pageTransition.ets", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "TabsJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "SwiperJsunit.test.ets", "ColumnJsunit.test.ets", "areaChange.ets", "BindPopupJsunit.test.ets", "timeStamp.ets", "NavigationJsunit.test.ets", "aboutToDisappear.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "Calendar.ets", "sharedTransition.ets", "gestureMode.ets", "motionPath.ets", "colorGradient.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerController", "api_method_name": "pause", "api_method_all": "pause();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 56, "since": 8, "api_used": "\u662f", "lines": ["s.myVideoController.pause();\n        });\n    ", "s.myTimerController.pause();\n        });\n    ", "     this.animation.pause();\n          });\n  ", "          animation.pause()\n        }, 1000)\n", "     });\n    },\n    pause(){\n\n        prompt.", "{\n          Button('pause').borderRadius(8).b", "})\n\n        Button('pause').key('button2').wi", "> {\n      animation.pause()\n    }, 1000)\n\n   ", " })\n        Button('pause').key('button1').wi", "this.$refs.animator.pause();\n    },\n    handl", "});\n        Button(\"pause\").onClick(() => {\n "], "files": ["Video.ets", "video.ets", "textTimer.ets", "animationStatus.ets", "imageAnimator.ets", "animatorOption.ets", "index.js", "fillMode.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerController", "api_method_name": "reset", "api_method_all": "reset();", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 15, "since": 8, "api_used": "\u662f", "lines": ["   })\n      Button('reset button').margin(30)", ", 80, 80);\n    this.resetShadow(false);\n  }\n\n", "--\" + data);\n  }\n\n  resetTransform() {\n    th", " offscreenCanvasCtx.resetTransform();\n       ", "      console.info(\"reset button emit action ", "tternLockController.reset()\n            retur", ", 80, 80);\n    this.resetShadow(true);\n  }\n\n ", "s.myTimerController.reset();\n        });\n    ", "tternLockController.reset()\n        }).margin", "adow(false);\n  }\n\n  resetShadow(isX) {\n    th", "       console.log('reset all value')\n    },\n", "});\n        Button(\"reset\").onClick(() => {\n ", " {\n    this.context.resetTransform();\n  }\n\n  ", "tternLockController.reset()\n        this.pass", "      console.info(\"reset button start to emi"], "files": ["PatternLock.ets", "textTimer.ets", "index.js", "canvas.ets", "patternLock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerOptions", "api_method_all": "interface TextTimerOptions {\r\n  \r\n  isCountDown?: boolean;\r\n  \r\n  count?: number;\r\n\r\n  \r\n  controller?: TextTimerController;\r\n}", "api_method_name": "TextTimerOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerOptions", "api_method_name": "isCountDown", "api_method_all": "isCountDown?: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 8, "api_used": "\u662f", "lines": ["isCountDown = !this.isCountDown\n        })\n        ", "=> {\n          this.isCountDown = !this.isCountDown", "rentComp {\n  @State isCountDown: boolean = true\n\n  ", "ch')\n      if (this.isCountDown) {\n        Image($r", ") {\n      Text(this.isCountDown ? 'Count Down' : 'S", "}\n      Button(this.isCountDown ? 'Swtich to Stopwa"], "files": ["aboutToDisappear.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerOptions", "api_method_name": "count", "api_method_all": "count?: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 183, "since": 8, "api_used": "\u662f", "lines": [" getInspectorByKey('counter');\n      let obj ", "pExample {\n  @State count: number = 0\n  @Stat", "onent({ count: this.countDownStartValue, cost", "eExample {\n  @State counts: number = 1;\n  @St", "None:null,\n         count:null,\n         visi", "e(\n    TapGesture({ count: 2 })\n      .onActi", " {\n    Text(`${this.counter}sec`)\n      .font", "   TimerComponent({ counter: 0, changePerSec:", "})\n  }\n\n  describe('counterTest', function ()", "ct badge {\n  @State counts: number = 33\n  @St", "        count: this.counts,\n        maxCount:", "d refresh: ' + this.counter)\n          .fontS", " {\n            this.counts++\n          })\n   ", "\n              this.countDownStartValue -= 1\n", "         count:this.count,\n             visib", "OUNTRY\": localeInfo.countryOrRegion,\n        ", "   TimerComponent({ counter: 10, changePerSec", "event.repeat) {this.count++}\n        console.", "        count: this.counts,\n            posit", "t:null,\n         maxcountNone:null,\n         ", "an = false\n  @State counter: number = 0\n\n  on", "e:null,\n         maxcount:null,\n         maxc", "in(100)\n      .key('counter')\n      .onInc(()", "y\n@Component\nstruct counter {\n  @State value:", "rt default function counterJsunit() {\n\n  func", "tNone,\n             count:this.count,\n       ", "t.test.ets';\nimport counterJsunit from './Cou", "  expect(obj.$attrs.count).assertEqual('33');", "an = false\n  @State countDownStartValue: numb", "(() => {\n      this.counter += this.changePer", "Component {\n  @Prop count: number\n  private c", "\n      Text(`${this.count}`)\n        .key(\"Te", "\n              this.countDownStartValue += 1\n", "sole.log(\"yr badge0 count-'33'\" + JSON.string", "Badge({\n            count: this.counts,\n     ", "s onAction:' + this.count + '\\nPanGesture off", "lumnSplitJsunit()\n  counterJsunit()\n  flexJsu", "    Badge({\n        count: this.counts,\n     ", "tringify(obj.$attrs.count))\n      expect(obj.", "ountDownComponent({ count: this.countDownStar", "               this.counts++\n              })", "omponent {\n  @State counter: number = 0\n  pri", "       Text(`${this.countDownStartValue}`)\n  ", "=> {\n          this.counter++;\n          this"], "files": ["configuration.ets", "CounterJsunit.test.ets", "BadgeJsunit.test.ets", "badge.ets", "Counter.ets", "Badge.ets", "Prop.ets", "tapGesture.ets", "index.js", "inputProps.test.js", "basicabilityapi.test.js", "animateTransformProps.test.js", "badgeProps.test.js", "listProps.test.js", "animateMotionProps.test.js", "textareaProps.test.js", "aboutToDisappear.ets", "refresh.ets", "gestureMode.ets", "List.test.ets", "animateProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerOptions", "api_method_name": "controller", "api_method_all": "controller?: TextTimerController", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 50, "since": 8, "api_used": "\u662f", "lines": [" {\n            this.controller.stop()\n          })", " {\n            this.controller.onInactive()\n      ", " {\n            this.controller.loadData({\n        ", "s.accessStep = this.controller.accessStep(1)\n     ", ".nextMonth,\n        controller: this.Controller\n  ", "t getHitTest = this.controller.getHitTest()\n      ", "string= ''\n  @State controller: SearchController= ", " {\n            this.controller.registerJavaScriptP", "cessBackward = this.controller.accessBackward()\n  ", "', controller: this.controller })\n        .searchB", " {\n            this.controller.forward()\n         ", "on.Start, index: 1, controller: this.controller })", " {\n            this.controller.runJavaScript({\n   ", " {\n            this.controller.requestFocus()\n    ", " {\n            this.controller.clearHistory()\n    ", ")=>{\n          this.controller.stop()\n          th", "tion.End, index: 1, controller: this.controller })", "gressRates,\n        controller: this.myVideoContro", " {\n            this.controller.refresh()\n         ", " {\n            this.controller.onActive()\n        ", " {\n            this.controller.close()\n           ", "{\n      TextTimer({ controller: this.myTimerContro", "8, controller: this.controller})\n        .key('tex", "ccessForward = this.controller.accessForward()\n   ", "r: 'input content', controller: this.controller })", " {\n            this.controller.deleteJavaScriptReg", "1, controller: this.controller }) {\n        TabCon", "previewUri,\n        controller: this.myVideoContro", "tTestType.Unknown\n  controller: WebController = ne", "timeZoneOffset: -8, controller: this.controller})\n", ", libraryname: '3', controller: this.xComponentCon", "omDialogExample {\n  controller: CustomDialogContro", "Example {\n  private controller: TabsController = n", " boolean = false;\n  controller: TextClockControlle", " {\n            this.controller.loadUrl({\n         ", " {\n            this.controller.backward()\n        ", "=> {\n          this.controller.caretPosition(4)\n  ", "n = false\n  private controller: TabsController = n", ": this.barPosition, controller: this.controller, i", "('indextest.html'), controller: this.controller })", "), controller: this.controller })\n        .domStor", "n, controller: this.controller, index: this.index ", "=> {\n          this.controller.changeIndex(0)\n    ", "rl);\n          this.controller.runJavaScript('test", ")=>{\n          this.controller.start()\n        })\n"], "files": ["textClock.ets", "tabs.ets", "Video.ets", "WebPage.ets", "video.ets", "Tab.ets", "textInput.ets", "textTimer.ets", "Calendar.ets", "XComponentPage.ets", "search.ets", "customDialogController.ets", "CustomDialog.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerInterface", "api_method_all": "interface TextTimerInterface {\r\n  \r\n  (options?: TextTimerOptions): TextTimerAttribute;\r\n}", "api_method_name": "TextTimerInterface", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 8, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerInterface", "api_method_name": "options", "api_method_all": "(options?: TextTimerOptions): TextTimerAttribute", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 791, "since": 8, "api_used": "\u662f", "lines": ["= await router.push(options);\n          await U", " start\");\n      let options = {\n        uri: 'p", "(obj.$attrs.overlay.options.offset.x).assertEqu", "(obj.$attrs.overlay.options.align).assertEqual(", "(obj.$attrs.overlay.options.offset.y).assertEqu", " (done) {\n      let options = {\n        uri: 'p"], "files": ["listItemGroupProps.test.js", "ImageJsunit.test.ets", "RowSplitJsunit.test.ets", "pathProps.test.js", "CounterJsunit.test.ets", "dividerProps.test.js", "ImageEffectsJsunit.test.ets", "ListItemJsunit.test.ets", "tabContentProps.test.js", "textProps.test.js", "DragEventJsunit.test.ets", "ParallelGestureJsunit.test.ets", "ScrollBarJsunit.test.ets", "toolbarProps.test.js", "ColumnSplitJsunit.test.ets", "TextPickerJsunit.test.ets", "PolygonJsunit.test.ets", "TouchAbleJsunit.test.ets", "ZIndexJsunit.test.ets", "PathJsunit.test.ets", "polylineProps.test.js", "CheckboxGroupJsunit.test.ets", "PositionSettingJsunit.test.ets", "searchProps.test.js", "spanProps.test.js", "TextStyleJsunit.test.ets", "toolbarItemProps.test.js", "OhosRouterJsnuit.test.ets", "AppearJsunit.test.ets", "TapGesture.test.ets", "TextClockJsunit.test.ets", "PieceJsunit.test.ets", "PlacementJsunit.test.ets", "PolylineJsunit.test.ets", "GeometryTransitionJsunit.test.ets", "OverlayJsunit.test.ets", "LineJsunit.test.ets", "ScrollCodeJsunit.test.ets", "DividerJsunit.test.ets", "badgeProps.test.js", "basicabilityapi.test.js", "PriorityGestureJsunit.test.ets", "RichTextJsunit.test.ets", "FillModeJsunit.test.ets", "dialogProps.test.js", "CalendarJsunit.test.ets", "TouchJsunit.test.ets", "LongPressGesture.test.ets", "LinkJsunit.test.ets", "NavigatorCodeJsunit.test.ets", "EllipseJsunit.test.ets", "GridJsnuit.test.ets", "CurvesJsunit.test.ets", "FlexWrapJsunit.test.ets", "formProps.test.js", "VideoJsunit.test.ets", "SelectJsunit.test.ets", "DirectionJsunit.test.ets", "circleProps.test.js", "EnmusFlexAlignJsunit.test.ets", "SourceTypeJsunit.test.ets", "PanDirectionJsunit.test.ets", "RadioJsunit.test.ets", "stackProps.test.js", "SpanJsunit.test.ets", "EdgeEffectJsunit.test.ets", "StepperJsunit.test.ets", "PanelJsunit.test.ets", "ButtonJsunit.test.ets", "PanGestureJsunit.test.ets", "TextJsunit.test.ets", "LayoutConstraintsJsunit.test.ets", "GridJsunit.test.ets", "refreshProps.test.js", "ScrollerBarJsunit.test.ets", "EnmusItemAlignJsunit.test.ets", "EnmusImageJsunit.test.ets", "GridContainerJsunit.test.ets", "TransitionJsunit.test.ets", "SearchJsunit.test.ets", "EnmusHorizontalAlignJsunit.test.ets", "AreaChangeJsunit.test.ets", "VisibilityJsunit.test.ets", "canvasProps.test.js", "AnimateJsunit.test.ets", "BlankJsunit.test.ets", "RefreshJsunit.test.ets", "ResponseRegionJsunit.test.ets", "animatorOption.ets", "PropJsunit.test.ets", "FlexJsunit.test.ets", "QrCodeJsunit.test.ets", "AppStorageJsunit.test.ets", "ProgressJsunit.test.ets", "TimeStampJsunit.test.ets", "GridItem.test.ets", "richtextProps.test.js", "svgProps.test.js", "labelProps.test.js", "Canvas2Jsunit.test.ets", "svgTextProps.test.js", "textPathProps.test.js", "ListJsunit.test.ets", "FlexDirectionJsunit.test.ets", "gridContainerProps.test.js", "ColorGradientJsunit.test.ets", "ratingProps.test.js", "stepperProps.test.js", "MotionPathJsunit.test.ets", "marqueeProps.test.js", "imageAnimatorProps.test.js", "ShapeJsunit.test.ets", "tabsProps.test.js", "qrcodeProps.test.js", "lineProps.test.js", "GlobalJsunit.test.ets", "popupProps.test.js", "ToggleJsunit.test.ets", "SystemRouterJsunit.test.ets", "OhosPromptJsunit.test.ets", "listItemProps.test.js", "ConfigurationJsunit.test.ets", "PatternLockJsunit.test.ets", "gridRowProps.test.js", "stepperItemProps.test.js", "videoProps.test.js", "BindMenuJsunit.test.ets", "EnmusVerticalAlignJsunit.test.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "DatePickerJsunit.test.ets", "GaugeJsunit.test.ets", "optionProps.test.js", "PageTransitionJsunit.test.ets", "TextInputJsunit.test.ets", "AlphabetIndexerJsunit.test.ets", "animateTransformProps.test.js", "DataPanelJsunit.test.ets", "QrcodeJsunit.test.ets", "pieceProps.test.js", "TextAreaJsunit.test.ets", "StackJsunit.test.ets", "pickerProps.test.js", "animateMotionProps.test.js", "selectProps.test.js", "CustomDialogControllerJsunit.test.ets", "ScrollJsunit.test.ets", "textareaProps.test.js", "gridColProps.test.js", "buttonProps.test.js", "animateProps.test.js", "BackgroundAndSizeSettingJsunit.test.ets", "AnimationStatusJsunit.test.ets", "BorderJsunit.test.ets", "EnmusLineCapStyleJsunit.test.ets", "OhosMatrix4Jsunit.test.ets", "EnableJsunit.test.ets", "BadgeJsunit.test.ets", "AboutToDisappearJsunit.test.ets", "pickerViewProps.test.js", "CircleJsunit.test.ets", "divProps.test.js", "switchProps.test.js", "FocusJsunit.test.ets", "PlayModeJsunit.test.ets", "ImageAnimatorJsunit.test.ets", "GradientDirectionJsunit.test.ets", "commonComponentJsApi.test.js", "ellipseProps.test.js", "TransFormJsunit.test.ets", "GestureModeJsunit.test.ets", "chartProps.test.js", "SliderJsunit.test.ets", "SharedTransitionJsunit.test.ets", "CanvasJsunit.test.ets", "CheckboxJsunit.test.ets", "sliderProps.test.js", "swiperProps.test.js", "TextTimerJsunit.test.ets", "SystempromptJsunit.test.ets", "NavigatorJsunit.test.ets", "TabsJsunit.test.ets", "polygonProps.test.js", "LoadingProgressJsunit.test.ets", "RowJsunit.test.ets", "TabJsunit.test.ets", "ShapeClippingJsunit.test.ets", "inputProps.test.js", "GridSettingsJsunit.test.ets", "index.js", "tabBarProps.test.js", "SwiperJsunit.test.ets", "toggleProps.test.js", "ColumnJsunit.test.ets", "tspanProps.test.js", "imageProps.test.js", "listProps.test.js", "progressProps.test.js", "NavigationJsunit.test.ets", "RatingJsunit.test.ets", "Direction2Jsunit.test.ets", "panelProps.test.js", "BindPopupJsunit.test.ets", "menuProps.test.js", "rectProps.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerAttribute", "api_method_all": "declare class TextTimerAttribute extends CommonMethod<TextTimerAttribute> {\r\n  \r\n  format(value: string): TextTimerAttribute;\r\n  \r\n  fontColor(value: ResourceColor): TextTimerAttribute;\r\n  \r\n  fontSize(value: Length): TextTimerAttribute;\r\n  \r\n  fontStyle(value: FontStyle): TextTimerAttribute;\r\n  \r\n  fontWeight(value: number | FontWeight | string): TextTimerAttribute;\r\n  \r\n  fontFamily(value: ResourceStr): TextTimerAttribute;\r\n  \r\n  onTimer(event: (utc: number, elapsedTime: number) => void): TextTimerAttribute;\r\n}", "api_method_name": "TextTimerAttribute", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 2, "since": 0, "api_used": "\u662f", "lines": ["imerAttribute = new TextTimerAttribute();\n      textTimerA", "t(obj).assertEqual('TextTimerAttribute');\n      done();\n  "], "files": ["TextTimerJsunit.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerAttribute", "api_method_name": "format", "api_method_all": "format(value: string): TextTimerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 13, "since": 8, "api_used": "\u662f", "lines": ["       .format(this.format)\n        .fontSize(", "ntroller()\n  @State format: string = 'hh:mm:ss", "extClock')\n        .format(this.format)\n      ", " textTimerAttribute.format('hh:mm:ss.ms');\n   ", "extTimer')\n        .format(this.format)\n      ", "       .format(this.format)\n        .fontColor", "Color.Red;\n  @State format: string = \"hhmmss\";", "ata: {\n            \"format\": '20',\n          }", " if (eventData.data.format != null) {\n        ", "  expect(obj.$attrs.format).assertEqual('20');", "  expect(obj.$attrs.format).assertEqual('hhmms", "at = eventData.data.format;\n      }\n      if (", "ull) {\n        this.format = eventData.data.fo"], "files": ["textTimer.ets", "TextClockJsunit.test.ets", "TextTimerJsunit.test.ets", "textClock.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerAttribute", "api_method_name": "fontColor", "api_method_all": "fontColor(value: ResourceColor): TextTimerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 384, "since": 8, "api_used": "\u662f", "lines": ["Size(35)\n          .fontColor(Color.Blue)\n       ", " {\n                \"fontColor\": this.fontColor,\n ", "ize(9).width('90%').fontColor(0xCCCCCC)\n        R", "hrink').fontSize(9).fontColor(0xCCCCCC).width('90", "extStyle {\n  @State fontColor: Color = Color.Red;", "grid').fontSize(20).fontColor(Color.Black).width(", "pect(eventData.data.fontColor).assertEqual(Color.", "\"[testTextStyle001] fontColor: \" + obj.$attrs.fon", "Blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ness').fontSize(15).fontColor(0xCCCCCC).width('90", "rast').fontSize(15).fontColor(0xCCCCCC).width('90", "ty 4').fontSize(20).fontColor(Color.Black).width(", "s rolling\"\n  @State fontColor: Color = Color.Blue", "blur').fontSize(15).fontColor(0xCCCCCC).width('90", "ive text')\n        .fontColor(Color.Red)\n        ", "lor) {\n        this.fontColor = eventData.data.fo", "vert').fontSize(15).fontColor(0xCCCCCC).width('90", "'marquee')\n        .fontColor(this.fontColor)\n   ", "      .fontSize(12).fontColor(0xCCCCCC).maxLines(", "adow').fontSize(15).fontColor(0xCCCCCC).width('90", "tate').fontSize(15).fontColor(0xCCCCCC).width('90", "    .fontColor(this.fontColor)\n        .colorBlen", "  \"fontColor\": this.fontColor,\n              }\n  ", "xGrow\").fontSize(9).fontColor(0xCCCCCC).width('90", " row').fontSize(20).fontColor(Color.Black).width(", "  expect(obj.$attrs.fontColor).assertEqual('#FFFF", "e(20)\n        .key('fontColor')\n\n      Text(`text", "Items').fontSize(9).fontColor(0xCCCCCC).width('90", "or = eventData.data.fontColor;\n      } else if (e", "pro text')\n        .fontColor(Color.Orange)\n     ", "cale').fontSize(15).fontColor(0xCCCCCC).width('90", "ntColor}`)\n        .fontColor(this.fontColor)\n   ", "lor: \" + obj.$attrs.fontColor);\n      expect(obj.", "\"[testTextStyle002] fontColor: \" + obj.$attrs.fon", "ageShow() {\n    let fontColorChangeEvent = {\n    ", "    .fontColor(this.fontColor)\n        .fontSize(", " getInspectorByKey('fontColor');\n      console.in", "  events_emitter.on(fontColorChangeEvent, this.te", "rate').fontSize(15).fontColor(0xCCCCCC).width('90", "Basis').fontSize(9).fontColor(0xCCCCCC).width('90", " state is: ' + this.fontColor);\n          try {\n ", "ata: {\n            \"fontColor\": Color.Blue\n      ", "t font color ${this.fontColor}`)\n        .fontCol", "nSelf\").fontSize(9).fontColor(0xCCCCCC).width('90", " if (eventData.data.fontColor) {\n        this.fon"], "files": ["enumsHorizontalAlign.ets", "imageFit.ets", "Span.ets", "column.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "textArea.ets", "textInput.ets", "transForm.ets", "path.ets", "Column.ets", "button.ets", "focus.ets", "SelectJsunit.test.ets", "background.ets", "Text.ets", "SpanJsunit.test.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "TextJsunit.test.ets", "sideBar.ets", "toggle.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "stepper.ets", "shape.ets", "image.ets", "row.ets", "loadingProgress.ets", "Marquee.ets", "Select.ets", "flex.ets", "Shape.ets", "PatternLock.ets", "Stepper.ets", "enumsImage.ets", "PieceCode.ets", "textStyle.ets", "imageEffects.ets", "textClock.ets", "layoutConstraints.ets", "MarqueeJsunit.test.ets", "BackgroundJsunit.test.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "listItem.ets", "grid.ets", "Button.ets", "span.ets", "BackgroundAndSizeSettingJsunit.test.ets", "Flex.ets", "direction2.ets", "ohosMatrix4.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "Path.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "TextTimerJsunit.test.ets", "select.ets", "Toggle.ets", "slider.ets", "aboutToDisappear.ets", "ColumnSplit.ets", "colorGradient.ets", "overlay.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerAttribute", "api_method_name": "fontSize", "api_method_all": "fontSize(value: Length): TextTimerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 588, "since": 8, "api_used": "\u662f", "lines": ["lor.Green)\n        .fontSize(this.fontSize)\n    ", "w').key(\"flexGrow\").fontSize(9).fontColor(0xCCCC", "t('4')\n            .fontSize(20)\n            .us", "ge Two')\n          .fontSize(35)\n          .font", "  Text('grayscale').fontSize(15).fontColor(0xCCC", "     Text('shadow').fontSize(15).fontColor(0xCCC", "  Text('hueRotate').fontSize(15).fontColor(0xCCC", "t('1')\n            .fontSize(20)\n            .us", "     Text('invert').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backdr", "ETS TEST')\n        .fontSize(50)\n        .fontWe", "g container: grid').fontSize(20).fontColor(Color", "(60)\n              .fontSize(18)\n              .", "0)\n                .fontSize(16)\n               ", "ext('default text').fontSize(20)\n\n      Text(`te", " {\n                \"fontSize\": this.fontSize,\n  ", "   \"fontSize\": this.fontSize,\n              }\n  ", "2cb)\n              .fontSize(40)\n              .", "     Text('Center').fontSize(25)\n        }\n     ", "     .fontSize(this.fontSize)\n        .allowScal", "bb2cb)\n            .fontSize(20)\n            .as", "').key(\"alignSelf\").fontSize(9).fontColor(0xCCCC", "  Text('font blur').fontSize(15).fontColor(0xCCC", "height(40)\n        .fontSize(16)\n        .backgr", "ng container: row').fontSize(20).fontColor(Color", "Color.Red;\n  @State fontSize: string = 20;\n  @St", "xt font size ${this.fontSize}`)\n        .fontSiz", "enter)\n            .fontSize(20)\n        }, item", "fontColor)\n        .fontSize(20)\n        .key('f", "t('3')\n            .fontSize(20)\n            .us", "e four')\n          .fontSize(35)\n          .font", " Text('brightness').fontSize(15).fontColor(0xCCC", "margin(30)\n        .fontSize(20)\n        .onClic", " Text('alignItems').fontSize(9).fontColor(0xCCCC", " state is: ' + this.fontSize);\n          try {\n ", "displayPriority 4').fontSize(20).fontColor(Color", " layer')\n          .fontSize(12).fontColor(0xCCC", "olor.Blue;\n  @State fontSize: number = 50;\n  @St", "  Text('flexBasis').fontSize(9).fontColor(0xCCCC", "   Text('saturate').fontSize(15).fontColor(0xCCC", "ext('backdropBlur').fontSize(15).fontColor(0xCCC", "ge One')\n          .fontSize(35)\n          .font", "   Text('contrast').fontSize(15).fontColor(0xCCC", "t('2')\n            .fontSize(20)\n            .us", "       Text('Left').fontSize(25)\n        }\n     ", "      Text('Right').fontSize(25)\n        }\n     ", " Three')\n          .fontSize(35)\n          .font", " Text('flexShrink').fontSize(9).fontColor(0xCCCC"], "files": ["ImageJsunit.test.ets", "systemRouterA.ets", "configuration.ets", "longPressGesture.ets", "placement.ets", "Qrcode.ets", "Navigation.ets", "imageFit.ets", "Span.ets", "Progress.ets", "column.ets", "sourceType.ets", "navigation.ets", "CustomDialog.ets", "TextStyleJsunit.test.ets", "marquee.ets", "TextClockJsunit.test.ets", "textTimer.ets", "Rating.ets", "Swiper.ets", "Divider.ets", "border.ets", "scrollBar.ets", "textArea.ets", "textInput.ets", "gridSettings.ets", "systemPrompt.ets", "Image.ets", "transForm.ets", "path.ets", "Column.ets", "scrollCode.ets", "button.ets", "ListItem.ets", "background.ets", "Slider.ets", "Text.ets", "SpanJsunit.test.ets", "Counter.ets", "ButtonJsunit.test.ets", "enumsVerticalAlign.ets", "Stack.ets", "TextJsunit.test.ets", "swiper.ets", "bindMenu.ets", "sideBar.ets", "toggle.ets", "Blank.ets", "Badge.ets", "Prop.ets", "Scroll.ets", "customDialogController.ets", "text.ets", "positionSetting.ets", "TextArea.ets", "flexDirection.ets", "shapeClipping.ets", "index.ets", "edgeEffect.ets", "systemRouterB.ets", "stepper.ets", "shape.ets", "image.ets", "svgTextProps.test.js", "textPathProps.test.js", "row.ets", "loadingProgress.ets", "Marquee.ets", "flex.ets", "Shape.ets", "gridContainer.ets", "PatternLock.ets", "Stepper.ets", "gridPage.ets", "enumsImage.ets", "badge.ets", "textStyle.ets", "imageEffects.ets", "AlphabetIndexer.ets", "ohosRouterB.ets", "ColumnSplit.ets", "textClock.ets", "layoutConstraints.ets", "list.ets", "MarqueeJsunit.test.ets", "AppStorage.ets", "List.ets", "QrCode.ets", "GridContainer.ets", "dragEvent2.ets", "flexWrap.ets", "direction.ets", "gradientDirection.ets", "backgroundAndSizeSetting.ets", "TextInputJsunit.test.ets", "dragEvent.ets", "TextAreaJsunit.test.ets", "lazyForEach.ets", "listItem.ets", "grid.ets", "Button.ets", "fontWeight.ets", "bindPopup.ets", "span.ets", "Flex.ets", "RowSplit.ets", "direction2.ets", "BadgeJsunit.test.ets", "ohosMatrix4.ets", "bindContextMenu.ets", "Rect.ets", "divider.ets", "TextInput.ets", "Constants.ets", "rating.ets", "Path.ets", "DataPanel.ets", "FormComponentPage.ets", "Grid.ets", "visibility.ets", "progress.ets", "AlertDialog.ets", "WebPage.ets", "TextTimerJsunit.test.ets", "index.js", "areaChange.ets", "ohosRouterA.ets", "Link.ets", "GridItem.ets", "tspanProps.test.js", "Toggle.ets", "slider.ets", "Calendar.ets", "refresh.ets", "ScrollBar.ets", "enumsHorizontalAlign.ets", "colorGradient.ets", "overlay.ets", "blank.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerAttribute", "api_method_name": "fontStyle", "api_method_all": "fontStyle(value: FontStyle): TextTimerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 62, "since": 8, "api_used": "\u662f", "lines": ["gCallBack);\n    let fontStyleChangeEvent = {\n    ", "\"[testTextStyle014] fontStyle: \" + obj.$attrs.fon", "ull) {\n        this.fontStyle = eventData.data.fo", "  expect(obj.$attrs.fontStyle).assertEqual('FontS", "  events_emitter.on(fontStyleChangeEvent, this.te", "le = eventData.data.fontStyle;\n      }\n      if(e", "ata: {\n            \"fontStyle\": FontStyle.Normal\n", "t font style ${this.fontStyle}`)\n        .fontSty", "ntSize(20)\n        .fontStyle(FontStyle.Normal)\n ", "ntStyle}`)\n        .fontStyle(this.fontStyle)\n   ", "number = 1\n  @State fontStyle: FontStyle = FontSt", "\"[testTextStyle015] fontStyle: \" + obj.$attrs.fon", "ntSize(20)\n        .fontStyle(FontStyle.Italic)\n ", "\"[testTextStyle012] fontStyle: \" + obj.$attrs.fon", ".Bold)\n            .fontStyle(FontStyle.Italic)\n ", "\"[testTextStyle011] fontStyle: \" + obj.$attrs.fon", "ring = 20;\n  @State fontStyle: FontStyle = FontSt", "else {\n        this.fontStyle = eventData.data.fo", "    .fontStyle(this.fontStyle)\n        .fontSize(", " getInspectorByKey('fontStyle');\n      console.in", "ata: {\n            \"fontStyle\": 0x80000000\n      ", "ns-serif\")\n        .fontStyle(FontStyle.Normal)\n ", " ATTRS_FONTSTYLE = 'fontStyle'\nconst ATTRS_FONTSI", "ition.End;\n  @State fontStyle: FontStyle = FontSt", "le = eventData.data.fontStyle;\n      }\n    }\n  }\n", "  if(eventData.data.fontStyle != null) {\n        ", "ata: {\n            \"fontStyle\": 'error'\n         ", "yle: \" + obj.$attrs.fontStyle);\n      expect(obj.", "ata: {\n            \"fontStyle\": 0x7FFFFFFF\n      ", "    .fontStyle(this.fontStyle)\n        .showDelet", "his.Color)\n        .fontStyle(this.fontStyle)\n   ", "e(20)\n        .key('fontStyle')\n\n      Text(`text", "\"[testTextStyle013] fontStyle: \" + obj.$attrs.fon"], "files": ["TextInputJsunit.test.ets", "textStyle.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "textArea.ets", "textInput.ets", "Constants.ets", "TextArea.ets", "PieceCode.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerAttribute", "api_method_name": "fontWeight", "api_method_all": "fontWeight(value: number | FontWeight | string): TextTimerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 147, "since": 8, "api_used": "\u662f", "lines": [": FoodData\n  @State fontWeight: FontWeight = FontW", "\"[testTextStyle020] fontWeight: \" + obj.$attrs.fon", "Size(17.4)\n        .fontWeight(this.fontWeight)\n  ", "ata: {\n            \"fontWeight\": 0x80000000\n      ", "(2)\n    }\n    .key('fontWeight')\n  }\n\n  build() {\n", "ata: {\n            \"fontWeight\": 400\n          }\n ", "ata: {\n            \"fontWeight\": 0x7FFFFFFF\n      ", "  expect(obj.$attrs.fontWeight).assertEqual('FontW", "ght) {\n        this.fontWeight = eventData.data.fo", " getInspectorByKey('fontWeight');\n      console.in", "ATTRS_FONTWEIGHT = 'fontWeight'\nconst ATTRS_FONTST", "ntSize(50)\n        .fontWeight(FontWeight.Bold)\n  ", "\"[testTextStyle018] fontWeight: \" + obj.$attrs.fon", "   .fontWeight(this.fontWeight)\n        .fontSize(", "tWeight}`)\n        .fontWeight(this.fontWeight)\n  ", "gCallBack);\n    let fontWeightChangeEvent = {\n    ", "t fontWeight ${this.fontWeight}`)\n        .fontWei", "  events_emitter.on(fontWeightChangeEvent, this.te", ".fontSize)\n        .fontWeight(FontWeight.Bold)\n  ", "le.Italic;\n  @State fontWeight: string = 700;\n  @S", "ht = eventData.data.fontWeight;\n      } else if (e", "e(20)\n        .key('fontWeight')\n\n      Text(`text", "le.Italic)\n        .fontWeight(700)\n        .fontF", "ata: {\n            \"fontWeight\": 'error'\n         ", "ale(false)\n        .fontWeight(FontWeight.Bold)\n  ", "ght: \" + obj.$attrs.fontWeight);\n      expect(obj.", "\"[testTextStyle017] fontWeight: \" + obj.$attrs.fon", "le.Normal)\n        .fontWeight(400)\n        .fontF", ")\n\n      Text(`text fontWeight ${this.fontWeight}`", "\"[testTextStyle016] fontWeight: \" + obj.$attrs.fon", "\"[testTextStyle019] fontWeight: \" + obj.$attrs.fon", "   .fontWeight(this.fontWeight)\n        .layoutWei", " if (eventData.data.fontWeight) {\n        this.fon"], "files": ["systemRouterA.ets", "RowSplit.ets", "gridPage.ets", "Slider.ets", "PanDirectionJsunit.test.ets", "Qrcode.ets", "Text.ets", "textStyle.ets", "Counter.ets", "Stack.ets", "TextInput.ets", "TextJsunit.test.ets", "Span.ets", "AlphabetIndexer.ets", "Constants.ets", "ohosRouterB.ets", "Progress.ets", "Blank.ets", "ColumnSplit.ets", "Prop.ets", "Scroll.ets", "FormComponentPage.ets", "GestureModeJsunit.test.ets", "TextStyleJsunit.test.ets", "marquee.ets", "Rating.ets", "AppStorage.ets", "TextArea.ets", "QrCode.ets", "GridContainer.ets", "direction.ets", "ohosRouterA.ets", "index.ets", "Link.ets", "systemRouterB.ets", "TextInputJsunit.test.ets", "TextAreaJsunit.test.ets", "textArea.ets", "textInput.ets", "Button.ets", "Image.ets", "Calendar.ets", "fontWeight.ets", "ScrollBar.ets", "Badge.ets", "Marquee.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerAttribute", "api_method_name": "fontFamily", "api_method_all": "fontFamily(value: ResourceStr): TextTimerAttribute;", "api_type": "", "api_args_count": 1, "api_level": null, "api_used_count": 48, "since": 8, "api_used": "\u662f", "lines": ["gCallBack);\n    let fontFamilyChangeEvent = {\n    ", "\"[testTextStyle023] fontFamily: \" + obj.$attrs.fon", "ily: \" + obj.$attrs.fontFamily);\n      expect(obj.", "  expect(obj.$attrs.fontFamily).assertEqual('cursi", "\"[testTextStyle022] fontFamily: \" + obj.$attrs.fon", "  events_emitter.on(fontFamilyChangeEvent, this.te", "  expect(obj.$attrs.fontFamily).assertEqual('sans-", "e(20)\n        .key('fontFamily')\n\n      Text('red ", "tringify(obj.$attrs.fontFamily));\n      console.lo", "fontStyle)\n        .fontFamily(\"sans-serif\")\n     ", "  expect(obj.$attrs.fontFamily).assertEqual(\"sans-", "eight(700)\n        .fontFamily('cursive')\n        ", "ht.Bold)\n          .fontFamily('cursive')\n        ", "eight(400)\n        .fontFamily('source-sans-pro,cu", "ight.Bold)\n        .fontFamily('cursive')\n        ", "onsole.log(\"cd text fontFamily\" + JSON.stringify(o", "ily) {\n        this.fontFamily = eventData.data.fo", "ATTRS_FONTFAMILY = 'fontFamily'\nconst ATTRS_FONTWE", "tFamily}`)\n        .fontFamily(this.fontFamily)\n  ", "99')\n              .fontFamily('source-sans-pro,cu", "ly = eventData.data.fontFamily;\n      } else {\n   ", "t fontFamily ${this.fontFamily}`)\n        .fontFam", "ata: {\n            \"fontFamily\": 'Arial'\n         ", "\"[testTextStyle021] fontFamily: \" + obj.$attrs.fon", "  expect(obj.$attrs.fontFamily).assertEqual('Arial", "  expect(obj.$attrs.fontFamily).assertEqual('error", " getInspectorByKey('fontFamily');\n      console.in", " if (eventData.data.fontFamily) {\n        this.fon", "ing = 700;\n  @State fontFamily: string = 'sans-ser", "ight.Bold)\n        .fontFamily(\"sans-serif\")\n     ", "ing(5)\n            .fontFamily(\"sans-serif\")\n     ", "   .fontFamily(this.fontFamily)\n        .fontSize(", ")\n\n      Text(`text fontFamily ${this.fontFamily}`", "ata: {\n            \"fontFamily\": 'error'\n         "], "files": ["TextInputJsunit.test.ets", "textStyle.ets", "TextStyleJsunit.test.ets", "TextInput.ets", "TextAreaJsunit.test.ets", "TextJsunit.test.ets", "Span.ets", "textArea.ets", "textInput.ets", "Constants.ets", "sideBar.ets", "TextArea.ets", "Marquee.ets", "Text.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerAttribute", "api_method_name": "onTimerevent", "api_method_all": "onTimer(event: (utc: number, elapsedTime: number) => void): TextTimerAttribute;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "TextTimerAttribute", "api_method_name": "onTimerevent", "api_method_all": "onTimer(event: (utc: number, elapsedTime: number) => void): TextTimerAttribute;", "api_type": "", "api_args_count": 3, "api_level": null, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}