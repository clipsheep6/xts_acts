{"subsystem_ch": "\u6cdbSensor\u670d\u52a1\u5b50\u7cfb\u7edf", "subsystem_en": "sensors", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@system.sensor", "api": [{"api_class_name": "AccelerometerResponse", "api_method_all": "export interface AccelerometerResponse {\n  \n  x: number;\n\n  \n  y: number;\n\n  \n  z: number;\n}", "api_method_name": "AccelerometerResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 3, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 3, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "AccelerometerResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 3, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "subscribeAccelerometerOptions", "api_method_all": "export interface subscribeAccelerometerOptions {\n  \n  interval: string;\n\n  \n  success: (data: AccelerometerResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n}", "api_method_name": "subscribeAccelerometerOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "subscribeAccelerometerOptions", "api_method_name": "success", "api_method_all": "success: (data: AccelerometerResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "subscribeAccelerometerOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "subscribeAccelerometerOptions", "api_method_name": "interval", "api_method_all": "interval: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 3, "api_used": "\u662f", "lines": ["function () { }, { 'interval': 100000000 }, 5);\n", "}\n            }, { 'interval': 200000000 });\n   "], "files": ["SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CompassResponse", "api_method_all": "export interface CompassResponse {\n  \n  direction: number;\n}", "api_method_name": "CompassResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CompassResponse", "api_method_name": "direction", "api_method_all": "direction: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeCompassOptions", "api_method_all": "export interface SubscribeCompassOptions {\n  \n  success: (data: CompassResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n}", "api_method_name": "SubscribeCompassOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeCompassOptions", "api_method_name": "success", "api_method_all": "success: (data: CompassResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeCompassOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ProximityResponse", "api_method_all": "export interface ProximityResponse {\n  \n  distance: number;\n}", "api_method_name": "ProximityResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "ProximityResponse", "api_method_name": "distance", "api_method_all": "distance: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 3, "api_used": "\u662f", "lines": ["expect(typeof (data.distance)).assertEqual(\"numb", "st005  once success distance: ' + data.distance)", " distance: ' + data.distance);\n                 ", " distance: ' + data.distance);\n                e", "Test001  on success distance: ' + data.distance)"], "files": ["SensorOnOffTest.test_Proxinity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeProximityOptions", "api_method_all": "export interface SubscribeProximityOptions {\n  \n  success: (data: ProximityResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n}", "api_method_name": "SubscribeProximityOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeProximityOptions", "api_method_name": "success", "api_method_all": "success: (data: ProximityResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeProximityOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "LightResponse", "api_method_all": "export interface LightResponse {\n  \n  intensity: number;\n}", "api_method_name": "LightResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "LightResponse", "api_method_name": "intensity", "api_method_all": "intensity: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 16, "since": 3, "api_used": "\u662f", "lines": ["cess data: ' + data.intensity);\n                e", "expect(typeof (data.intensity)).assertEqual(\"numb", "cess data: ' + data.intensity);\n                 "], "files": ["SensorOnOffTest.test_Ambient_Light.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeLightOptions", "api_method_all": "export interface SubscribeLightOptions {\n  \n  success: (data: LightResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n}", "api_method_name": "SubscribeLightOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeLightOptions", "api_method_name": "success", "api_method_all": "success: (data: LightResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeLightOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "StepCounterResponse", "api_method_all": "export interface StepCounterResponse {\n  \n  steps: number;\n}", "api_method_name": "StepCounterResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "StepCounterResponse", "api_method_name": "steps", "api_method_all": "steps: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 3, "api_used": "\u662f", "lines": ["st001  once success steps: ' + data.steps);\n ", "ess steps: ' + data.steps);\n                e", "ess steps: ' + data.steps);\n                 ", "expect(typeof (data.steps)).assertEqual(\"numb", "st005  once success steps: ' + data.steps);\n "], "files": ["SensorOnOffTest.test_Pedometer.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeStepCounterOptions", "api_method_all": "export interface SubscribeStepCounterOptions {\n  \n  success: (data: StepCounterResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n}", "api_method_name": "SubscribeStepCounterOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeStepCounterOptions", "api_method_name": "success", "api_method_all": "success: (data: StepCounterResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeStepCounterOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "BarometerResponse", "api_method_all": "export interface BarometerResponse {\n  \n  pressure: number;\n}", "api_method_name": "BarometerResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "BarometerResponse", "api_method_name": "pressure", "api_method_all": "pressure: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 3, "api_used": "\u662f", "lines": ["Test001  on success pressure: ' + data.pressure)", " pressure: ' + data.pressure);\n                e", "expect(typeof (data.pressure)).assertEqual(\"numb", " pressure: ' + data.pressure);\n                 ", "st005  once success pressure: ' + data.pressure)"], "files": ["SensorOnOffTest.test_Barometer.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeBarometerOptions", "api_method_all": "export interface SubscribeBarometerOptions {\n  \n  success: (data: BarometerResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n}", "api_method_name": "SubscribeBarometerOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeBarometerOptions", "api_method_name": "success", "api_method_all": "success: (data: BarometerResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeBarometerOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "HeartRateResponse", "api_method_all": "export interface HeartRateResponse {\n  \n  heartRate: number;\n}", "api_method_name": "HeartRateResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "HeartRateResponse", "api_method_name": "heartRate", "api_method_all": "heartRate: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 3, "api_used": "\u662f", "lines": ["expect(typeof (data.heartRate)).assertEqual(\"numb", "st001  once success heartRate: ' + data.heartRate", "heartRate: ' + data.heartRate);\n                 ", "heartRate: ' + data.heartRate);\n                e", "st005  once success heartRate: ' + data.heartRate"], "files": ["SensorOnOffTest.test_Heart_Rate.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeHeartRateOptions", "api_method_all": "export interface SubscribeHeartRateOptions {\n  \n  success: (data: HeartRateResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n}", "api_method_name": "SubscribeHeartRateOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeHeartRateOptions", "api_method_name": "success", "api_method_all": "success: (data: HeartRateResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeHeartRateOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "OnBodyStateResponse", "api_method_all": "export interface OnBodyStateResponse {\n  \n  value: boolean;\n}", "api_method_name": "OnBodyStateResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "OnBodyStateResponse", "api_method_name": "value", "api_method_all": "value: boolean", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 6, "since": 3, "api_used": "\u662f", "lines": ["ess value: ' + data.value);\n                 ", "st001  once success value: ' + data.value);\n ", "expect(typeof (data.value)).assertEqual(\"numb", "st005  once success value: ' + data.value);\n ", "ess value: ' + data.value);\n                e"], "files": ["SensorOnOffTest.test_Wear_Detection.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeOnBodyStateOptions", "api_method_all": "export interface SubscribeOnBodyStateOptions {\n  \n  success: (data: OnBodyStateResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n}", "api_method_name": "SubscribeOnBodyStateOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeOnBodyStateOptions", "api_method_name": "success", "api_method_all": "success: (data: OnBodyStateResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeOnBodyStateOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GetOnBodyStateOptions", "api_method_all": "export interface GetOnBodyStateOptions {\n  \n  success: (data: OnBodyStateResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n\n  \n  complete?: () => void;\n}", "api_method_name": "GetOnBodyStateOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GetOnBodyStateOptions", "api_method_name": "success", "api_method_all": "success: (data: OnBodyStateResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GetOnBodyStateOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GetOnBodyStateOptions", "api_method_name": "complete", "api_method_all": "complete?: () => void;", "api_type": "", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceOrientationResponse", "api_method_all": "export interface DeviceOrientationResponse {\n  \n  alpha: number;\n\n  \n  beta: number;\n\n  \n  gamma: number;\n}", "api_method_name": "DeviceOrientationResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceOrientationResponse", "api_method_name": "alpha", "api_method_all": "alpha: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceOrientationResponse", "api_method_name": "beta", "api_method_all": "beta: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "DeviceOrientationResponse", "api_method_name": "gamma", "api_method_all": "gamma: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeDeviceOrientationOptions", "api_method_all": "export interface SubscribeDeviceOrientationOptions {\n  \n  interval: string;\n\n  \n  success: (data: DeviceOrientationResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n}", "api_method_name": "SubscribeDeviceOrientationOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeDeviceOrientationOptions", "api_method_name": "success", "api_method_all": "success: (data: DeviceOrientationResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeDeviceOrientationOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeDeviceOrientationOptions", "api_method_name": "interval", "api_method_all": "interval: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 3, "api_used": "\u662f", "lines": ["function () { }, { 'interval': 100000000 }, 5);\n", "}\n            }, { 'interval': 200000000 });\n   "], "files": ["SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeResponse", "api_method_all": "export interface GyroscopeResponse {\n  \n  x: number;\n\n  \n  y: number;\n\n  \n  z: number;\n}", "api_method_name": "GyroscopeResponse", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeResponse", "api_method_name": "x", "api_method_all": "x: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1068, "since": 3, "api_used": "\u662f", "lines": ["", "dService('expect', expectExtend)\n        ", "ce()\n        const expectExtend = new Exp", " vibrator.vibrate(\"xxx\", vibrateCallback)", "Extend = new ExpectExtend({\n            '", ") => {\n            expect(false).assertTr", "                   expect(true).assertTru", "  vibrator.vibrate(\"xxx\", vibrateCallback", "ime/regenerator')\n\nexport default {\n    d", "ror\");\n            expect(false).assertTr", "            'id': 'extend'\n        })\n   ", "rom 'deccjsunit/index'\n\nconst injectRef =", ") => {\n            expect(true).assertTru", "expectExtend = new ExpectExtend({\n       ", "ess\");\n            expect(true).assertTru", "  core.addService('expect', expectExtend)", "mport {Core, ExpectExtend} from 'deccjsun", "                   expect(false).assertTr", "ce('expect', expectExtend)\n        core.i", "vibrator.vibrate(\"xxx\", vibrateCallback);", "ach, afterAll, it, expect } from 'deccjsu", ");\n                expect(true).assertTru", "est')\n        core.execute()\n    },\n    o", ");\n                expect(false).assertTr", "rom 'deccjsunit/index'\n\ndescribe(\"Vibrato", "       const expectExtend = new ExpectExt"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeResponse", "api_method_name": "y", "api_method_all": "y: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 1495, "since": 3, "api_used": "\u662f", "lines": ["\n    },\n    onDestroy() {\n        console", "torJsTest015\", 0, async function (done) {", "   ]\n\n    let gravity = [\n        [9, 9, ", "orJsTest_068', 0, async function (done) {", "torJsTest012\", 0, async function (done) {", "orJsTest_069', 0, async function (done) {", "torJsTest006\", 0, async function (done) {", "torJsTest011\", 0, async function (done) {", "f = Object.getPrototypeOf(global) || glob", "tEqual(JSON.stringify(SENSOR_DATA_MATRIX[", "    * @tc.desc:verify app info is not nul", "()\n    },\n    onReady() {\n    },\n}\n", "Application onDestroy');\n    }\n};\n", "torJsTest016\", 0, async function (done) {", "torJsTest013\", 0, async function (done) {", "ot null\n     * @tc.type: FUNC\n     * @tc.", "otationMatrix(gravity[2], geomagnetic[2],", "torJsTest004\", 0, async function (done) {", "otationMatrix(gravity[0], geomagnetic[0],", "torJsTest009\", 0, async function (done) {", "torJsTest014\", 0, async function (done) {", "torJsTest010\", 0, async function (done) {", "068\" + JSON.stringify(data))\n            ", "torJsTest005\", 0, async function (done) {", "torJsTest007\", 0, async function (done) {", "069\" + JSON.stringify(data))\n            ", "torJsTest018\", 0, async function (done) {", "torJsTest017\", 0, async function (done) {", "expect(JSON.stringify(data)).assertEqual(", "torJsTest008\", 0, async function (done) {", "torJsTest002\", 0, async function (done) {", "torJsTest001\", 0, async function (done) {", "torJsTest003\", 0, async function (done) {"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "app.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "index.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "GyroscopeResponse", "api_method_name": "z", "api_method_all": "z: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 245, "since": 3, "api_used": "\u662f", "lines": ["                + ',z: ' + data.z\n       ", "    + ',z: ' + data.z\n                   ", "',y: ' + data.y + ',z: ' + data.z\n       ", "        expect(data.z).assertEqual(GEOMAG", "& Number.isNaN(data.z)).assertTrue();\n   ", "a.y + ',z: ' + data.z\n                   ", "       + data.y + ',z: '\n                ", "        expect(data.z).assertEqual(geomag", "       + data.y + ',z: ' + data.z + ',geo", "a.y + ',z: ' + data.z + ',geomagneticDip:", "& Number.isNaN(data.z)).assertTrue()\n    ", "             + data.z + ',geomagneticDip:"], "files": ["SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Gravity.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeGyroscopeOptions", "api_method_all": "export interface SubscribeGyroscopeOptions {\n  \n  interval: string;\n\n  \n  success: (data: GyroscopeResponse) => void;\n\n  \n  fail?: (data: string, code: number) => void;\n}", "api_method_name": "SubscribeGyroscopeOptions", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeGyroscopeOptions", "api_method_name": "success", "api_method_all": "success: (data: GyroscopeResponse) => void;", "api_type": "", "api_args_count": 1, "api_level": 21, "api_used_count": 181, "since": 3, "api_used": "\u662f", "lines": ["cAlgorithmJSTest008 success x: ' + data.x + ',y", "ometerJSTest002  on success');\n                ", "rithmJSTest024 once success');\n                ", "ometerJSTest003  on success x: ' + data.x + \"y:", "meterJSTest003  off success');\n                ", "JsTest005  vibrator success');\n                ", "rithmJSTest025 once success');\n                ", "cAlgorithmJSTest004 success x: ' + data.x + ',y", "JsTest003  vibrator success');\n                ", "atorJsTest009  stop success');\n                ", "rJsTest018  vibrate success\");\n                ", "JsTest007  vibrator success');\n                ", "cAlgorithmJSTest011 success x: ' + data.x + ',y", "ratorJsTest017  off success\");\n            expe", "cAlgorithmJSTest019 success x: ' + data.x + ',y", "cAlgorithmJSTest009 success x: ' + data.x + ',y", "rJsTest011  vibrate success\");\n            expe", "erSensortest002  on success');\n                ", "o('SensorJsTest_102 success');\n                ", "o(\"SensorJsTest_077 success\")\n            done(", "cAlgorithmJSTest016 success x: ' + data.x + ',y", "rithmJSTest016 once success');\n                ", "cAlgorithmJSTest015 success x: ' + data.x + ',y", "ometerJSTest001  on success, x: ' + data.x + \"y", "atorJsTest008  stop success');\n                ", "cAlgorithmJSTest013 success x: ' + data.x + ',y", "JsTest001  vibrator success');\n                ", "rJsTest009  vibrate success');\n                ", "atorJsTest016  stop success\");\n            setT", "cAlgorithmJSTest021 success x: ' + data.x + ',y", "cAlgorithmJSTest014 success x: ' + data.x + ',y", "rJsTest013  vibrate success\");\n            setT", "JsTest004  vibrator success');\n                ", "cAlgorithmJSTest023 success x: ' + data.x + ',y", "cAlgorithmJSTest022 success x: ' + data.x + ',y", "cAlgorithmJSTest001 success x: ' + data.x + ',y", "erSensortest001  on success');\n                ", "rJsTest012  vibrate success\");\n            setT", "cAlgorithmJSTest007 success x: ' + data.x + ',y", "rJsTest015  vibrate success\");\n            setT", "rJsTest014  vibrate success\");\n            expe", "atorJsTest018  stop success\");\n                ", "cAlgorithmJSTest002 success x: ' + data.x + ',y", "cAlgorithmJSTest012 success x: ' + data.x + ',y", "meterJSTest001  off success');\n                ", "JsTest002  vibrator success');\n                ", "JsTest006  vibrator success');\n                ", "cAlgorithmJSTest018 success x: ' + data.x + ',y", "atorJsTest010  stop success');\n                ", "cAlgorithmJSTest010 success x: ' + data.x + ',y"], "files": ["SensorOnOffTest.test_Gravity.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "Vibrator.test.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeGyroscopeOptions", "api_method_name": "fail", "api_method_all": "fail?: (data: string, code: number) => void;", "api_type": "", "api_args_count": 2, "api_level": 21, "api_used_count": 55, "since": 3, "api_used": "\u662f", "lines": ["o('SensorJsTest_092 failed');\n              ", "cAlgorithmJSTest008 failed');\n              ", "cAlgorithmJSTest007 failed');\n              ", "cAlgorithmJSTest018 failed');\n              ", "o('SensorJsTest_101 failed');\n              ", "o('SensorJsTest_109 failed');\n              ", "cAlgorithmJSTest001 failed');\n              ", "o('SensorJsTest_071 failed');\n              ", "o('SensorJsTest_079 failed');\n              ", "nsole.info('promise failed', error)\n        ", "cAlgorithmJSTest014 failed');\n              ", "o('SensorJsTest_091 failed');\n              ", "cAlgorithmJSTest011 failed');\n              ", "o('SensorJsTest_104 failed');\n              ", "cAlgorithmJSTest006 failed');\n              ", "o('SensorJsTest_107 failed');\n              ", "cAlgorithmJSTest017 failed');\n              ", "o('SensorJsTest_109 failed');\n            ex", "o('SensorJsTest_089 failed');\n              ", "o('SensorJsTest_081 failed');\n              ", "cAlgorithmJSTest002 failed');\n              ", "cAlgorithmJSTest010 failed');\n              ", "o('SensorJsTest_088 failed');\n              ", "o('SensorJsTest_108 failed');\n              ", "cAlgorithmJSTest004 failed');\n              ", "o('SensorJsTest_069 failed');\n              ", "o('SensorJsTest_068 failed');\n              ", "o('SensorJsTest_098 failed');\n              ", "cAlgorithmJSTest003 failed');\n              ", "cAlgorithmJSTest009 failed');\n              ", "o('SensorJsTest_078 failed');\n              ", "cAlgorithmJSTest013 failed');\n              ", "cAlgorithmJSTest005 failed');\n              ", "o('SensorJsTest_090 failed');\n              ", "o('SensorJsTest_082 failed');\n              ", "o(\"SensorJsTest_102 failed\")\n               ", "cAlgorithmJSTest015 failed');\n              ", "o('SensorJsTest_104 failed');\n            ex", "o(\"SensorJsTest_077 failed\")\n               ", "cAlgorithmJSTest012 failed');\n              ", "o('SensorJsTest_103 failed');\n              ", "o('SensorJsTest_070 failed');\n              ", "o('SensorJsTest_080 failed');\n              ", "nsole.info('promise failed')\n            don"], "files": ["SensorGeomagneticTest.test.js", "SensorGeneralalgorithm.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "SubscribeGyroscopeOptions", "api_method_name": "interval", "api_method_all": "interval: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 8, "since": 3, "api_used": "\u662f", "lines": ["function () { }, { 'interval': 100000000 }, 5);\n", "}\n            }, { 'interval': 200000000 });\n   "], "files": ["SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_all": "export default class Sensor {\n  \n  static subscribeAccelerometer(options: subscribeAccelerometerOptions): void;\n\n  \n  static unsubscribeAccelerometer(): void;\n\n  \n  static subscribeCompass(options: SubscribeCompassOptions): void;\n\n  \n  static unsubscribeCompass(): void;\n\n  \n  static subscribeProximity(options: SubscribeProximityOptions): void;\n\n  \n  static unsubscribeProximity(): void;\n\n  \n  static subscribeLight(options: SubscribeLightOptions): void;\n\n  \n  static unsubscribeLight(): void;\n\n  \n  static subscribeStepCounter(options: SubscribeStepCounterOptions): void;\n\n  \n  static unsubscribeStepCounter(): void;\n\n  \n  static subscribeBarometer(options: SubscribeBarometerOptions): void;\n\n  \n  static unsubscribeBarometer(): void;\n\n  \n  static subscribeHeartRate(options: SubscribeHeartRateOptions): void;\n\n  \n  static unsubscribeHeartRate(): void;\n\n  \n  static subscribeOnBodyState(options: SubscribeOnBodyStateOptions): void;\n\n  \n  static unsubscribeOnBodyState(): void;\n\n  \n  static getOnBodyState(options: GetOnBodyStateOptions): void;\n\n  \n  static subscribeDeviceOrientation(options: SubscribeDeviceOrientationOptions): void;\n\n  \n  static unsubscribeDeviceOrientation(): void;\n\n  \n  static subscribeGyroscope(options: SubscribeGyroscopeOptions): void;\n\n  \n  static unsubscribeGyroscope(): void;\n}", "api_method_name": "Sensor", "api_type": "", "api_level": 10, "api_args_count": 0, "api_used_count": 1124, "since": 6, "api_used": "\u662f", "lines": ["", "      console.info('SensorJsTest_069 failed');", "   })\n\n    \n    it('SensorJsTest_075', 0, asyn", "      console.info(\"SensorJsTest_069\" + JSON.s", "nfo(\"SensorJsAPI--->SensorJsTest_079 [\" + i + ", "      console.info('SensorJsTest_080 failed');", "   })\n\n    \n    it('SensorJsTest_074', 0, asyn", "   })\n\n    \n    it('SensorJsTest_070', 0, asyn", "  })\n\n    \n\n    it('SensorJsTest_069', 0, asyn", "      console.info('SensorJsTest_070 failed');", "   })\n\n    \n    it('SensorJsTest_072', 0, asyn", "      console.info(\"SensorJsTest_074\" + JSON.s", "nfo(\"SensorJsAPI--->SensorJsTest_080\");\n      ", " *\n     * @tc.name: SensorJsTest_081\n     * @t", "sc:\n     */\n    it('SensorJsTest_080', 0, asyn", "      console.info(\"SensorJsTest_071\" + data[i", "      console.info(\"SensorJsTest_076\" + data[i", "      console.info('SensorJsTest_078 failed');", "est.js')\nrequire('./SensorGeneralalgorithm.tes", "   })\n\n    \n    it('SensorJsTest_071', 0, asyn", "      console.info(\"SensorJsTest_077 failed\")\n", "      console.info('SensorJsTest_068 failed');", "est.js')\nrequire('./SensorGeomagneticTest.test", "nfo(\"SensorJsAPI--->SensorJsTest_080 [\" + i + ", " *\n     * @tc.name: SensorJsTest_080\n     * @t", "      console.info('SensorJsTest_079 failed');", "   })\n\n    \n    it('SensorJsTest_077', 0, asyn", "   })\n\n    \n    it('SensorJsTest_073', 0, asyn", "      console.info('SensorJsTest_071 failed');", "    ]\n\n    \n    it('SensorJsTest_068', 0, asyn", "nfo(\"SensorJsAPI--->SensorJsTest_079\");\n      ", "      console.info(\"SensorJsTest_070\" + data[i", " *\n     * @tc.name: SensorJsTest_079\n     * @t", "   })\n\n    \n    it('SensorJsTest_076', 0, asyn", "nfo(\"SensorJsAPI--->SensorJsTest_078 [\" + i + ", "      console.info(\"SensorJsTest_073\" + JSON.s", "      console.info(\"SensorJsTest_072\" + JSON.s", "t/index'\n\ndescribe(\"SensorJsTest\", function ()", "      console.info(\"SensorJsAPI--->SensorJsTes", "   ];\n\n    \n    it('SensorJsTest_078', 0, asyn", "      console.info(\"SensorJsTest_077 success\")", "nfo(\"SensorJsAPI--->SensorJsTest_078\");\n      ", "      console.info(\"SensorJsTest_068\" + JSON.s", "      console.info(\"SensorJsTest_075\" + data[i", "sc:\n     */\n    it('SensorJsTest_079', 0, asyn"], "files": ["SensorOnOffTest.test_Gravity.js", "List.test.js", "SensorOnOffTest.test_Accelerometer.js", "SensorOnOffTest.test_Gyroscope.js", "SensorOnOffTest.test_Humidity.js", "SensorOnOffTest.test_Pedometer.js", "SensorOnOffTest.test.js", "SensorOnOffTest.test_Orientation.js", "SensorOnOffTest.test_Heart_Rate.js", "SensorOnOffTest.test_Gyroscope_Uncalibrated.js", "SensorOnOffTest.test_Magnetic_Field.js", "SensorOnOffTest.test_Ambient_Light.js", "SensorOnOffTest.test_Significant_Motion.js", "SensorGeneralalgorithm.test.js", "SensorOnOffTest.test_Accelerometer_Uncalibrated.js", "SensorOnOffTest.test_Pedometer_Detection.js", "SensorOnOffTest.test_Wear_Detection.js", "SensorOnOffTest.test_Magnetic_Field_Uncalibrated.js", "SensorOnOffTest.test_Proxinity.js", "SensorOnOffTest.test_Barometer.js", "SensorOnOffTest.test_Rotation_Vector.js", "SensorGeomagneticTest.test.js", "SensorOnOffTest.test_Linear_Acceleration.js", "SensorOnOffTest.test_Temperature.js", "SensorOnOffTest.test_Hall.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "subscribeAccelerometer", "api_method_all": "static subscribeAccelerometer(options: subscribeAccelerometerOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "unsubscribeAccelerometer", "api_method_all": "static unsubscribeAccelerometer(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "subscribeCompass", "api_method_all": "static subscribeCompass(options: SubscribeCompassOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "unsubscribeCompass", "api_method_all": "static unsubscribeCompass(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "subscribeProximity", "api_method_all": "static subscribeProximity(options: SubscribeProximityOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "unsubscribeProximity", "api_method_all": "static unsubscribeProximity(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "subscribeLight", "api_method_all": "static subscribeLight(options: SubscribeLightOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "unsubscribeLight", "api_method_all": "static unsubscribeLight(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "subscribeStepCounter", "api_method_all": "static subscribeStepCounter(options: SubscribeStepCounterOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "unsubscribeStepCounter", "api_method_all": "static unsubscribeStepCounter(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "subscribeBarometer", "api_method_all": "static subscribeBarometer(options: SubscribeBarometerOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "unsubscribeBarometer", "api_method_all": "static unsubscribeBarometer(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "subscribeHeartRate", "api_method_all": "static subscribeHeartRate(options: SubscribeHeartRateOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "unsubscribeHeartRate", "api_method_all": "static unsubscribeHeartRate(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "subscribeOnBodyState", "api_method_all": "static subscribeOnBodyState(options: SubscribeOnBodyStateOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "unsubscribeOnBodyState", "api_method_all": "static unsubscribeOnBodyState(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "getOnBodyState", "api_method_all": "static getOnBodyState(options: GetOnBodyStateOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 3, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "subscribeDeviceOrientation", "api_method_all": "static subscribeDeviceOrientation(options: SubscribeDeviceOrientationOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "unsubscribeDeviceOrientation", "api_method_all": "static unsubscribeDeviceOrientation(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "subscribeGyroscope", "api_method_all": "static subscribeGyroscope(options: SubscribeGyroscopeOptions): void;", "api_type": "", "api_args_count": 1, "api_level": 11, "api_used_count": 0, "since": 6, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "Sensor", "api_method_name": "unsubscribeGyroscope", "api_method_all": "static unsubscribeGyroscope(): void;", "api_type": "", "api_args_count": 0, "api_level": 11, "api_used_count": 0, "since": 0, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}]}