{"subsystem_ch": "\u5a92\u4f53\u5b50\u7cfb\u7edf", "subsystem_en": "multimedia", "api_module_name": "D:\\WORK\\NEW_SDK_package_0329\\interface_sdk-js-master\\api\\@ohos.multimedia.camera", "api": [{"api_class_name": "camera", "api_method_all": "declare namespace camera {\n\n  \n  function getCameraManager(context: Context, callback: AsyncCallback<CameraManager>): void;\n\n  \n  function getCameraManager(context: Context): Promise<CameraManager>;\n\n  \n  enum CameraStatus {\n    \n    CAMERA_STATUS_APPEAR = 0,\n    \n    CAMERA_STATUS_DISAPPEAR,\n    \n    CAMERA_STATUS_AVAILABLE,\n    \n    CAMERA_STATUS_UNAVAILABLE\n  }\n\n  \n  interface CameraManager  {\n    \n    getCameras(callback: AsyncCallback<Array<Camera>>): void;\n\n    \n    getCameras(): Promise<Array<Camera>>;\n\n    \n    createCameraInput(cameraId: string, callback: AsyncCallback<CameraInput>): void;\n\n    \n    createCameraInput(cameraId: string): Promise<CameraInput>;\n\n    \n    createCameraInput(position: CameraPosition, type: CameraType, callback: AsyncCallback<CameraInput>): void;\n\n    \n    createCameraInput(position: CameraPosition, type: CameraType): Promise<CameraInput>;\n\n    \n    on(type: 'cameraStatus', callback: AsyncCallback<CameraStatusInfo>): void;\n  }\n\n  \n  interface CameraStatusInfo {\n    \n    camera: Camera;\n    \n    status: CameraStatus;\n  }\n\n  \n  enum CameraPosition {\n    \n    CAMERA_POSITION_UNSPECIFIED = 0,\n    \n    CAMERA_POSITION_BACK,\n    \n    CAMERA_POSITION_FRONT\n  }\n\n  \n  enum CameraType {\n    \n    CAMERA_TYPE_UNSPECIFIED = 0,\n\n    \n    CAMERA_TYPE_WIDE_ANGLE,\n\n    \n    CAMERA_TYPE_ULTRA_WIDE,\n\n    \n    CAMERA_TYPE_TELEPHOTO,\n\n    \n    CAMERA_TYPE_TRUE_DEPTH\n  }\n\n  \n  enum ConnectionType {\n    \n    CAMERA_CONNECTION_BUILT_IN = 0,\n\n    \n    CAMERA_CONNECTION_USB_PLUGIN,\n\n    \n    CAMERA_CONNECTION_REMOTE\n  }\n\n  \n  interface Camera {\n    \n    readonly cameraId: string;\n    \n    readonly cameraPosition: CameraPosition;\n    \n    readonly cameraType: CameraType;\n    \n    readonly connectionType: ConnectionType;\n  }\n\n  \n  interface Size {\n    \n    height: number;\n    \n    width: number;\n  }\n\n  \n  interface CameraInput {\n    \n    getCameraId(callback: AsyncCallback<string>): void;\n\n    \n    getCameraId(): Promise<string>;\n\n    \n    hasFlash(callback: AsyncCallback<boolean>): void;\n\n    \n    hasFlash(): Promise<boolean>;\n\n    \n    isFlashModeSupported(flashMode: FlashMode, callback: AsyncCallback<boolean>): void;\n\n    \n    isFlashModeSupported(flashMode: FlashMode): Promise<boolean>;\n\n    \n    getFlashMode(callback: AsyncCallback<FlashMode>): void;\n\n    \n    getFlashMode(): Promise<FlashMode>;\n\n    \n    setFlashMode(flashMode: FlashMode, callback: AsyncCallback<void>): void;\n\n    \n    setFlashMode(flashMode: FlashMode): Promise<void>;\n\n    \n    isFocusModeSupported(afMode: FocusMode, callback: AsyncCallback<boolean>): void;\n\n    \n    isFocusModeSupported(afMode: FocusMode): Promise<boolean>;\n\n    \n    getFocusMode(callback: AsyncCallback<FocusMode>): void;\n\n    \n    getFocusMode(): Promise<FocusMode>;\n\n    \n    setFocusMode(afMode: FocusMode, callback: AsyncCallback<void>): void;\n\n    \n    setFocusMode(afMode: FocusMode): Promise<void>;\n\n    \n    getZoomRatioRange(callback: AsyncCallback<Array<number>>): void;\n\n    \n    getZoomRatioRange(): Promise<Array<number>>;\n\n    \n    getZoomRatio(callback: AsyncCallback<number>): void;\n\n    \n    getZoomRatio(): Promise<number>;\n\n    \n    setZoomRatio(zoomRatio: number, callback: AsyncCallback<void>): void;\n\n    \n    setZoomRatio(zoomRatio: number): Promise<void>;\n\n    \n    release(callback: AsyncCallback<void>): void;\n\n    \n    release(): Promise<void>;\n\n    \n    on(type: 'focusStateChange', callback: AsyncCallback<FocusState>): void;\n\n    \n    on(type: 'error', callback: ErrorCallback<CameraInputError>): void;\n  }\n\n  \n  enum CameraInputErrorCode {\n    \n    ERROR_UNKNOWN = -1\n  }\n\n  \n  interface CameraInputError extends Error {\n    code: CameraInputErrorCode;\n  }\n\n  \n  enum FlashMode {\n    \n    FLASH_MODE_CLOSE = 0,\n    \n    FLASH_MODE_OPEN,\n    \n    FLASH_MODE_AUTO,\n    \n    FLASH_MODE_ALWAYS_OPEN\n  }\n\n  \n  enum FocusMode {\n    \n    FOCUS_MODE_MANUAL = 0,\n    \n    FOCUS_MODE_CONTINUOUS_AUTO,\n    \n    FOCUS_MODE_AUTO,\n    \n    FOCUS_MODE_LOCKED\n  }\n\n  \n  enum FocusState {\n    \n    FOCUS_STATE_SCAN = 0,\n    \n    FOCUS_STATE_FOCUSED,\n    \n    FOCUS_STATE_UNFOCUSED\n  }\n\n  \n  function createCaptureSession(context: Context, callback: AsyncCallback<CaptureSession>): void;\n\n  \n  function createCaptureSession(context: Context): Promise<CaptureSession>;\n\n  \n  interface CaptureSession {\n    \n    beginConfig(callback: AsyncCallback<void>): void;\n\n    \n    beginConfig(): Promise<void>;\n\n    \n    commitConfig(callback: AsyncCallback<void>): void;\n\n    \n    commitConfig(): Promise<void>;\n\n    \n    addInput(cameraInput: CameraInput, callback: AsyncCallback<void>): void;\n\n    \n    addInput(cameraInput: CameraInput): Promise<void>;\n\n    \n    addOutput(previewOutput: PreviewOutput, callback: AsyncCallback<void>): void;\n\n    \n    addOutput(previewOutput: PreviewOutput): Promise<void>;\n\n    \n    addOutput(photoOutput: PhotoOutput, callback: AsyncCallback<void>): void;\n\n    \n    addOutput(photoOutput: PhotoOutput): Promise<void>;\n\n    \n    addOutput(videoOutput: VideoOutput, callback: AsyncCallback<void>): void;\n\n    \n    addOutput(videoOutput: VideoOutput): Promise<void>;\n\n    \n    removeInput(cameraInput: CameraInput, callback: AsyncCallback<void>): void;\n\n    \n    removeInput(cameraInput: CameraInput): Promise<void>;\n\n    \n    removeOutput(previewOutput: PreviewOutput, callback: AsyncCallback<void>): void;\n\n    \n    removeOutput(previewOutput: PreviewOutput): Promise<void>;\n\n    \n    removeOutput(photoOutput: PhotoOutput, callback: AsyncCallback<void>): void;\n\n    \n    removeOutput(photoOutput: PhotoOutput): Promise<void>;\n\n    \n    removeOutput(videoOutput: VideoOutput, callback: AsyncCallback<void>): void;\n\n    \n    removeOutput(videoOutput: VideoOutput): Promise<void>;\n\n    \n    start(callback: AsyncCallback<void>): void;\n\n    \n    start(): Promise<void>;\n\n    \n    stop(callback: AsyncCallback<void>): void;\n\n    \n    stop(): Promise<void>;\n\n    \n    release(callback: AsyncCallback<void>): void;\n\n    \n    release(): Promise<void>;\n\n    \n    on(type: 'error', callback: ErrorCallback<CaptureSessionError>): void;\n  }\n\n  \n  enum CaptureSessionErrorCode {\n    ERROR_UNKNOWN = -1\n  }\n\n  \n  interface CaptureSessionError extends Error {\n    code: CaptureSessionErrorCode;\n  }\n\n  \n  function createPreviewOutput(surfaceId: string, callback: AsyncCallback<PreviewOutput>): void;\n\n  \n  function createPreviewOutput(surfaceId: string): Promise<PreviewOutput>;\n\n  \n  interface PreviewOutput {\n    \n    release(callback: AsyncCallback<void>): void;\n\n    \n    release(): Promise<void>;\n\n    \n    on(type: 'frameStart', callback: AsyncCallback<void>): void;\n\n    \n    on(type: 'frameEnd', callback: AsyncCallback<void>): void;\n\n    \n    on(type: 'error', callback: ErrorCallback<PreviewOutputError>): void;\n  }\n\n  \n  enum PreviewOutputErrorCode {\n    ERROR_UNKNOWN = -1\n  }\n\n  \n  interface PreviewOutputError extends Error {\n    code: PreviewOutputErrorCode;\n  }\n\n  \n  function createPhotoOutput(surfaceId: string, callback: AsyncCallback<PhotoOutput>): void;\n\n  \n  function createPhotoOutput(surfaceId: string): Promise<PhotoOutput>;\n\n  \n  enum ImageRotation {\n    \n    ROTATION_0 = 0,\n\n    \n    ROTATION_90 = 90,\n\n    \n    ROTATION_180 = 180,\n\n    \n    ROTATION_270 = 270\n  }\n\n  \n  enum QualityLevel {\n    \n    QUALITY_LEVEL_HIGH = 0,\n\n    \n    QUALITY_LEVEL_MEDIUM,\n\n    \n    QUALITY_LEVEL_LOW\n  }\n\n  \n  interface PhotoCaptureSetting {\n    \n    quality?: QualityLevel;\n    \n    rotation?: ImageRotation;\n  }\n\n  \n  interface PhotoOutput {\n    \n    capture(callback: AsyncCallback<void>): void;\n\n    \n    capture(setting: PhotoCaptureSetting, callback: AsyncCallback<void>): void;\n\n    \n    capture(setting?: PhotoCaptureSetting): Promise<void>;\n\n    \n    release(callback: AsyncCallback<void>): void;\n\n    \n    release(): Promise<void>;\n\n    \n    on(type: 'captureStart', callback: AsyncCallback<number>): void;\n\n    \n    on(type: 'frameShutter', callback: AsyncCallback<FrameShutterInfo>): void;\n\n    \n    on(type: 'captureEnd', callback: AsyncCallback<CaptureEndInfo>): void;\n\n    \n    on(type: 'error', callback: ErrorCallback<PhotoOutputError>): void;\n  }\n\n  \n  interface FrameShutterInfo {\n    \n    captureId: number;\n    \n    timestamp: number;\n  }\n\n  \n  interface CaptureEndInfo {\n    \n    captureId: number;\n    \n    frameCount: number;\n  }\n\n  \n  enum PhotoOutputErrorCode {\n    ERROR_UNKNOWN = -1\n  }\n\n  \n  interface PhotoOutputError extends Error {\n    code: PhotoOutputErrorCode;\n  }\n\n  \n  function createVideoOutput(surfaceId: string, callback: AsyncCallback<VideoOutput>): void;\n\n  \n  function createVideoOutput(surfaceId: string): Promise<VideoOutput>;\n\n  \n  interface VideoOutput {\n    \n    start(callback: AsyncCallback<void>): void;\n\n        \n    start(): Promise<void>;\n\n    \n    stop(callback: AsyncCallback<void>): void;\n\n    \n    stop(): Promise<void>;\n\n    \n    release(callback: AsyncCallback<void>): void;\n\n    \n    release(): Promise<void>;\n\n    \n    on(type: 'frameStart', callback: AsyncCallback<void>): void;\n\n    \n    on(type: 'frameEnd', callback: AsyncCallback<void>): void;\n\n    \n    on(type: 'error', callback: ErrorCallback<VideoOutputError>): void;\n  }\n\n  \n  enum VideoOutputErrorCode {\n    ERROR_UNKNOWN = -1\n  }\n\n  \n  interface VideoOutputError extends Error {\n    code: VideoOutputErrorCode;\n  }\n}", "api_method_name": "camera", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 4989, "since": 0, "api_used": "\u662f", "lines": ["", "Service')\n//        cameraKit(surfaceId)\n//// ", "romise.test'\nimport cameraTestCase from '../te", "amera0InputPosBack, camera0InputPosFront;\nvar ", "s\nvar camera2Input, camera2InputPosBack, camer", "Id: ' +surfaceId)\n  cameraTestCase(surfaceId)\n", "amera1InputPosBack, camera1InputPosFront;\nvar ", "nputPromisePosBack, camera1InputPromisePosFron", "nputPromisePosBack, camera3InputPromisePosFron", "ERA-2 Variables\nvar camera2Input, camera2Input", "s\nvar camera0Input, camera0InputPosBack, camer", "amera2InputPosBack, camera2InputPosFront;\nvar ", "ice')\n              cameraKit(surfaceId)\n     ", "2InputPosFront;\nvar camera2InputPromise, camer", "----\");\n        var cameraManagerPromise = awa", "m '@ohos.multimedia.camera';\nimport image from", "0InputPosFront;\nvar camera0InputPromise, camer", "s\nvar camera1Input, camera1InputPosBack, camer", "nputPromisePosBack, camera2InputPromisePosFron", "oAsync.test'\nimport cameraTestCase from '../te", "amera0InputPromise, camera0InputPromisePosBack", "amera2InputPromise, camera2InputPromisePosBack", "nction () {\n    var camerasArray;\n\n    console", "AGER_PROMISE_TC_002 cameraManagerPromise: \" + ", "ERA-0 Variables\nvar camera0Input, camera0Input", "nputPromisePosBack, camera0InputPromisePosFron", "amera3InputPosBack, camera3InputPosFront;\nvar ", "                    cameraManager = data;\n    ", "3InputPosFront;\nvar camera3InputPromise, camer", "1InputPosFront;\nvar camera1InputPromise, camer", "amera1InputPromise, camera1InputPromisePosBack", " \" + JSON.stringify(cameraManagerPromise));\n  ", "rt default function cameraTestCase(surfaceId:a", "sunit/index\"\nimport cameraKit from \"../test/Ca", "mise));\n        if (cameraManagerPromise != nu", "ERA-3 Variables\nvar camera3Input, camera3Input", "--------\");\n        cameraObj.getCameraManager", "rt default function cameraKit(surfaceId:any) {", "amera3InputPromise, camera3InputPromisePosBack", "nfo(TAG + 'Entering cameraKit')\n  console.info", "onInfo('com.example.cameramoduletestetsv2',0 ,", "agerPromise = await cameraObj.getCameraManager", "s\nvar camera3Input, camera3InputPosBack, camer", "Case(surfaceId)\n//  cameraService()\n}", "obal variables\n\nvar cameraManager;\nvar surface", "ERA-1 Variables\nvar camera1Input, camera1Input", "m.test.test'\nimport cameraTestCase from '../te", "Format.test'\nimport cameraTestCase from '../te"], "files": ["Camera.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "camera", "api_method_name": "getCameraManager", "api_method_all": "function getCameraManager(context: Context, callback: AsyncCallback<CameraManager>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 23, "since": 9, "api_used": "\u662f", "lines": ["\");\n      cameraObj.getCameraManager(null, async (err, data) => {\n        if", ";\n        cameraObj.getCameraManager(null, async (err, data) => {\n          ", "e = await cameraObj.getCameraManager(null)\n      console.info(TAG + 'Enterin", "info('[camera] case getCameraManager success');\n        } else {\n           ", "e = await cameraObj.getCameraManager(null);\n        console.info(TAG + \"Ente", "ager = await camera.getCameraManager(null);\n        if (cameraManager != nul", "(1)\n      cameraObj.getCameraManager(null, (err, data) => {\n        if (!err", "e = await cameraObj.getCameraManager(null);\n      console.info(TAG + \"Enteri", "info('[camera] case getCameraManager failed');\n            return;\n        }"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "camera", "api_method_name": "getCameraManager", "api_method_all": "function getCameraManager(context: Context): Promise<CameraManager>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "camera", "api_method_name": "createCaptureSession", "api_method_all": "function createCaptureSession(context: Context, callback: AsyncCallback<CaptureSession>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 27, "since": 9, "api_used": "\u662f", "lines": ["e = await cameraObj.createCaptureSession(null)\n      console.info(TAG + 'Enterin", "nfo(TAG + \"Entering createCaptureSession ends here\");\n      }\n      await sleep(", "sion = await camera.createCaptureSession(null);\n        await captureSession.beg", "(1)\n      cameraObj.createCaptureSession(null, (err, data) => {\n        if (!err", "\");\n      cameraObj.createCaptureSession(null, async (err, data) => {\n        if", "nfo(TAG + \"Entering createCaptureSession data is not null || undefined\");\n      ", "nfo(TAG + \"Entering createCaptureSession PASSED\");\n          }\n        } else {\n", "e = await cameraObj.createCaptureSession(null);\n      console.info(TAG + \"Enteri", "nfo(TAG + \"Entering createCaptureSession PASSED\");\n      }\n      else {\n        ", "nfo(TAG + \"Entering createCaptureSession ends here\");\n        }\n        await sl", "nfo(TAG + \"Entering createCaptureSession success\");\n      if (CaptureSessionProm", "nfo(TAG + \"Entering createCaptureSession success\");\n          if (data != null |"], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "camera", "api_method_name": "createCaptureSession", "api_method_all": "function createCaptureSession(context: Context): Promise<CaptureSession>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "camera", "api_method_name": "createPreviewOutput", "api_method_all": "function createPreviewOutput(surfaceId: string, callback: AsyncCallback<PreviewOutput>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 20, "since": 9, "api_used": "\u662f", "lines": ["nfo(TAG + \"Entering createPreviewOutput FAILED\");\n        console.info(TAG + \"E", "fo(TAG + \" Entering createPreviewOutput data is not null || undefined\");\n      ", "\");\n      cameraObj.createPreviewOutput(surfaceId, async (err, data) => {\n     ", "nfo(TAG + \"Entering createPreviewOutput PASSED: \" + JSON.stringify(previewOutpu", "e = await cameraObj.createPreviewOutput(surfaceId);\n      console.info(TAG + \" ", "o(TAG + \" Entering  createPreviewOutput success\");\n          if (data != null |", "(1)\n      cameraObj.createPreviewOutput(surfaceId, (err, data) => {\n        if ", "nfo(TAG + \"Entering createPreviewOutput ends here\");\n      }\n      await sleep(", "e = await cameraObj.createPreviewOutput(surfaceId)\n      console.info(TAG + 'En", "o(TAG + \" Entering  createPreviewOutput success\");\n      if (previewOutputPromi"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "camera", "api_method_name": "createPreviewOutput", "api_method_all": "function createPreviewOutput(surfaceId: string): Promise<PreviewOutput>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "camera", "api_method_name": "createPhotoOutput", "api_method_all": "function createPhotoOutput(surfaceId: string, callback: AsyncCallback<PhotoOutput>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 14, "since": 9, "api_used": "\u662f", "lines": ["fo(TAG + \"Entering  createPhotoOutput success\");\n          if (data != null |", "00)\n      cameraObj.createPhotoOutput(surfaceId1, async (err, data) => {\n    ", "fo(TAG + \"Entering  createPhotoOutput success\");\n      if (photoOutputPromise", "e = await cameraObj.createPhotoOutput(surfaceId1);\n      console.info(TAG + \"", "fo(TAG + \"Entering  createPhotoOutput data is not null || undefined\");\n      ", "nfo(TAG + \"Entering createPhotoOutput ends here\");\n      }\n      await sleep(", "fo(TAG + \"Entering  createPhotoOutput ends here\");\n        }\n        await sl"], "files": ["CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "camera", "api_method_name": "createPhotoOutput", "api_method_all": "function createPhotoOutput(surfaceId: string): Promise<PhotoOutput>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "camera", "api_method_name": "createVideoOutput", "api_method_all": "function createVideoOutput(surfaceId: string, callback: AsyncCallback<VideoOutput>): void;", "api_type": "callback", "api_args_count": 2, "api_level": null, "api_used_count": 34, "since": 9, "api_used": "\u662f", "lines": ["tput = await camera.createVideoOutput(surfaceID);\n        await startVideoOut", "info('[camera] case createVideoOutput success');\n        }\n        await init", "tput = await camera.createVideoOutput(surfaceID);\n        if (videoOutput == ", "(1)\n      cameraObj.createVideoOutput(videoId, (err, data) => {\n        conso", "(2)\n      cameraObj.createVideoOutput(videoId, (err, data) => {\n        conso", "e = await cameraObj.createVideoOutput(videoId)\n      console.info(TAG + 'Ente", " console.info('case createVideoOutput failed');\n        } else {\n            ", "info('[camera] case createVideoOutput failed');\n        } else {\n            ", " console.info('case createVideoOutput success');\n        }\n        await init"], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "camera", "api_method_name": "createVideoOutput", "api_method_all": "function createVideoOutput(surfaceId: string): Promise<VideoOutput>;", "api_type": "Promise", "api_args_count": 1, "api_level": null, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraStatus", "api_method_all": "enum CameraStatus {\n    \n    CAMERA_STATUS_APPEAR = 0,\n    \n    CAMERA_STATUS_DISAPPEAR,\n    \n    CAMERA_STATUS_AVAILABLE,\n    \n    CAMERA_STATUS_UNAVAILABLE\n  }", "api_method_name": "CameraStatus", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 38, "since": 9, "api_used": "\u662f", "lines": ["   expect(cameraObj.CameraStatus.CAMERA_STATUS_APPEA", "console.info(TAG + \"CameraStatus CAMERA_STATUS_DISAP", "BLE : \" + cameraObj.CameraStatus.CAMERA_STATUS_UNAVA", "era status Callback CameraStatusInfo_Camera: \" + dat", "EAR : \" + cameraObj.CameraStatus.CAMERA_STATUS_APPEA", "   expect(cameraObj.CameraStatus.CAMERA_STATUS_DISAP", "console.info(TAG + \"CameraStatus CAMERA_STATUS_APPEA", "EAR : \" + cameraObj.CameraStatus.CAMERA_STATUS_DISAP", "\n\t\texpect(cameraObj.CameraStatus.CAMERA_STATUS_DISAP", "BLE : \" + cameraObj.CameraStatus.CAMERA_STATUS_AVAIL", "era status Callback CameraStatusInfo_Status: \" + dat", "\n\t\texpect(cameraObj.CameraStatus.CAMERA_STATUS_APPEA", "   expect(cameraObj.CameraStatus.CAMERA_STATUS_AVAIL", "console.info(TAG + \"CameraStatus CAMERA_STATUS_AVAIL", "era status Callback CameraStatusInfo_Status: \" +data", "console.info(TAG + \"CameraStatus CAMERA_STATUS_UNAVA", "era status Callback CameraStatusInfo_Camera: \" +data", "\n\t\texpect(cameraObj.CameraStatus.CAMERA_STATUS_AVAIL", "   expect(cameraObj.CameraStatus.CAMERA_STATUS_UNAVA", "AG + \"--------------CameraStatus ------------\");\n   ", "\n\t\texpect(cameraObj.CameraStatus.CAMERA_STATUS_UNAVA"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraStatus", "api_method_name": "CAMERA_STATUS_APPEAR", "api_method_all": "CAMERA_STATUS_APPEAR = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["TAG + \"CameraStatus CAMERA_STATUS_APPEAR : \" + cameraObj.Cam", "eraObj.CameraStatus.CAMERA_STATUS_APPEAR);\n\t\texpect(cameraOb", "eraObj.CameraStatus.CAMERA_STATUS_APPEAR).assertEqual(0);\n  ", "eraObj.CameraStatus.CAMERA_STATUS_APPEAR).assertEqual(0);\n\t\t", "eraObj.CameraStatus.CAMERA_STATUS_APPEAR);\n      expect(came"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraStatus", "api_method_name": "CAMERA_STATUS_DISAPPEAR", "api_method_all": "CAMERA_STATUS_DISAPPEAR,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["eraObj.CameraStatus.CAMERA_STATUS_DISAPPEAR);\n\t\texpect(cameraOb", "eraObj.CameraStatus.CAMERA_STATUS_DISAPPEAR);\n      expect(came", "TAG + \"CameraStatus CAMERA_STATUS_DISAPPEAR : \" + cameraObj.Cam", "eraObj.CameraStatus.CAMERA_STATUS_DISAPPEAR).assertEqual(1);\n\t\t", "eraObj.CameraStatus.CAMERA_STATUS_DISAPPEAR).assertEqual(1);\n  "], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraStatus", "api_method_name": "CAMERA_STATUS_AVAILABLE", "api_method_all": "CAMERA_STATUS_AVAILABLE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["eraObj.CameraStatus.CAMERA_STATUS_AVAILABLE)\n      expect(camer", "eraObj.CameraStatus.CAMERA_STATUS_AVAILABLE).assertEqual(2);\n\t\t", "TAG + \"CameraStatus CAMERA_STATUS_AVAILABLE : \" + cameraObj.Cam", "eraObj.CameraStatus.CAMERA_STATUS_AVAILABLE)\n\t\texpect(cameraObj", "eraObj.CameraStatus.CAMERA_STATUS_AVAILABLE).assertEqual(2);\n  "], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraManager", "api_method_all": "interface CameraManager  {\n    \n    getCameras(callback: AsyncCallback<Array<Camera>>): void;\n\n    \n    getCameras(): Promise<Array<Camera>>;\n\n    \n    createCameraInput(cameraId: string, callback: AsyncCallback<CameraInput>): void;\n\n    \n    createCameraInput(cameraId: string): Promise<CameraInput>;\n\n    \n    createCameraInput(position: CameraPosition, type: CameraType, callback: AsyncCallback<CameraInput>): void;\n\n    \n    createCameraInput(position: CameraPosition, type: CameraType): Promise<CameraInput>;\n\n    \n    on(type: 'cameraStatus', callback: AsyncCallback<CameraStatusInfo>): void;\n  }", "api_method_name": "CameraManager", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 23, "since": 9, "api_used": "\u662f", "lines": ["\n      cameraObj.getCameraManager(null, (err, data) =", "o('[camera] case getCameraManager success');\n        ", " await cameraObj.getCameraManager(null)\n      console", "o('[camera] case getCameraManager failed');\n         ", "       cameraObj.getCameraManager(null, async (err, d", " await cameraObj.getCameraManager(null);\n        cons", " await cameraObj.getCameraManager(null);\n      consol", "r = await camera.getCameraManager(null);\n        if (", "\n      cameraObj.getCameraManager(null, async (err, d"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraManager", "api_method_name": "getCameras", "api_method_all": "getCameras(callback: AsyncCallback<Array<Camera>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 23, "since": 9, "api_used": "\u662f", "lines": ["ameraManagerPromise.getCameras();\n      console.info(TAG + \"Entering G", "ameraManagerPromise.getCameras()\n      console.info(TAG + 'Entering GE", "      cameraManager.getCameras(async (err, data) => {\n            if (", "      cameraManager.getCameras(async (err, data) => {\n        if (!err", "await cameraManager.getCameras();\n      console.info(TAG + \"Entering G", "await cameraManager.getCameras();\n        if (cameras != null) {\n     ", "info('[camera] case getCameras failed');\n        }\n    }\n\n    async fu", "info('[camera] case getCameras success');\n        } else {\n           ", "await cameraManager.getCameras();\n        console.info(TAG + \"Entering", "      cameraManager.getCameras((err, data) => {\n        if (!err) {\n  "], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraManager", "api_method_name": "getCameras", "api_method_all": "getCameras(): Promise<Array<Camera>>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraManager", "api_method_name": "createCameraInput", "api_method_all": "createCameraInput(cameraId: string, callback: AsyncCallback<CameraInput>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 135, "since": 9, "api_used": "\u662f", "lines": ["await cameraManager.createCameraInput(camerasArray[3].cameraId);\n        cons", "      cameraManager.createCameraInput(camerasArray[2].cameraPosition, cameras", "await cameraManager.createCameraInput(cameraObj.CameraPosition.CAMERA_POSITIO", "      cameraManager.createCameraInput(camerasArray[1].cameraId, async (err, d", "      cameraManager.createCameraInput(camerasArray[2].cameraId, async (err, d", "      cameraManager.createCameraInput(camerasArray[1].cameraPosition, cameras", "await cameraManager.createCameraInput(camerasArray[0].cameraPosition, cameras", "await cameraManager.createCameraInput(camerasArray[2].cameraPosition, cameras", "      cameraManager.createCameraInput(camerasArray[3].cameraId, async (err, d", "await cameraManager.createCameraInput(camerasArray[0].cameraId);\n        cons", "      cameraManager.createCameraInput(camerasArray[0].cameraId, async (err, d", "      cameraManager.createCameraInput(camerasArray[0].cameraPosition, cameras", "await cameraManager.createCameraInput(camerasArray[1].cameraId);\n        cons", "      cameraManager.createCameraInput(cameraObj.CameraPosition.CAMERA_POSITIO", "await cameraManager.createCameraInput(camerasArray[1].cameraPosition, cameras", "await cameraManager.createCameraInput(camerasArray[2].cameraId);\n        cons", "      cameraManager.createCameraInput(camerasArray[3].cameraPosition, cameras", "await cameraManager.createCameraInput(camerasArray[3].cameraPosition, cameras"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraManager", "api_method_name": "createCameraInput", "api_method_all": "createCameraInput(cameraId: string): Promise<CameraInput>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraManager", "api_method_name": "createCameraInput", "api_method_all": "createCameraInput(position: CameraPosition, type: CameraType, callback: AsyncCallback<CameraInput>): void;", "api_type": "callback", "api_args_count": 3, "api_level": 21, "api_used_count": 135, "since": 9, "api_used": "\u662f", "lines": ["await cameraManager.createCameraInput(camerasArray[3].cameraId);\n        cons", "      cameraManager.createCameraInput(camerasArray[2].cameraPosition, cameras", "await cameraManager.createCameraInput(cameraObj.CameraPosition.CAMERA_POSITIO", "      cameraManager.createCameraInput(camerasArray[1].cameraId, async (err, d", "      cameraManager.createCameraInput(camerasArray[2].cameraId, async (err, d", "      cameraManager.createCameraInput(camerasArray[1].cameraPosition, cameras", "await cameraManager.createCameraInput(camerasArray[0].cameraPosition, cameras", "await cameraManager.createCameraInput(camerasArray[2].cameraPosition, cameras", "      cameraManager.createCameraInput(camerasArray[3].cameraId, async (err, d", "await cameraManager.createCameraInput(camerasArray[0].cameraId);\n        cons", "      cameraManager.createCameraInput(camerasArray[0].cameraId, async (err, d", "      cameraManager.createCameraInput(camerasArray[0].cameraPosition, cameras", "await cameraManager.createCameraInput(camerasArray[1].cameraId);\n        cons", "      cameraManager.createCameraInput(cameraObj.CameraPosition.CAMERA_POSITIO", "await cameraManager.createCameraInput(camerasArray[1].cameraPosition, cameras", "await cameraManager.createCameraInput(camerasArray[2].cameraId);\n        cons", "      cameraManager.createCameraInput(camerasArray[3].cameraPosition, cameras", "await cameraManager.createCameraInput(camerasArray[3].cameraPosition, cameras"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraManager", "api_method_name": "createCameraInput", "api_method_all": "createCameraInput(position: CameraPosition, type: CameraType): Promise<CameraInput>;", "api_type": "Promise", "api_args_count": 2, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraManager", "api_method_name": "on", "api_method_all": "on(type: 'cameraStatus', callback: AsyncCallback<CameraStatusInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraStatusInfo", "api_method_all": "interface CameraStatusInfo {\n    \n    camera: Camera;\n    \n    status: CameraStatus;\n  }", "api_method_name": "CameraStatusInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 12, "since": 9, "api_used": "\u662f", "lines": ["era status Callback CameraStatusInfo_Status: \" +data.sta", "era status Callback CameraStatusInfo_Camera: \" + data.ca", "era status Callback CameraStatusInfo_Camera: \" +data.cam", "era status Callback CameraStatusInfo_Status: \" + data.st"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraStatusInfo", "api_method_name": "camera", "api_method_all": "camera: Camera", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 4989, "since": 9, "api_used": "\u662f", "lines": ["", "Service')\n//        cameraKit(surfaceId)\n//// ", "romise.test'\nimport cameraTestCase from '../te", "amera0InputPosBack, camera0InputPosFront;\nvar ", "s\nvar camera2Input, camera2InputPosBack, camer", "Id: ' +surfaceId)\n  cameraTestCase(surfaceId)\n", "amera1InputPosBack, camera1InputPosFront;\nvar ", "nputPromisePosBack, camera1InputPromisePosFron", "nputPromisePosBack, camera3InputPromisePosFron", "ERA-2 Variables\nvar camera2Input, camera2Input", "s\nvar camera0Input, camera0InputPosBack, camer", "amera2InputPosBack, camera2InputPosFront;\nvar ", "ice')\n              cameraKit(surfaceId)\n     ", "2InputPosFront;\nvar camera2InputPromise, camer", "----\");\n        var cameraManagerPromise = awa", "m '@ohos.multimedia.camera';\nimport image from", "0InputPosFront;\nvar camera0InputPromise, camer", "s\nvar camera1Input, camera1InputPosBack, camer", "nputPromisePosBack, camera2InputPromisePosFron", "oAsync.test'\nimport cameraTestCase from '../te", "amera0InputPromise, camera0InputPromisePosBack", "amera2InputPromise, camera2InputPromisePosBack", "nction () {\n    var camerasArray;\n\n    console", "AGER_PROMISE_TC_002 cameraManagerPromise: \" + ", "ERA-0 Variables\nvar camera0Input, camera0Input", "nputPromisePosBack, camera0InputPromisePosFron", "amera3InputPosBack, camera3InputPosFront;\nvar ", "                    cameraManager = data;\n    ", "3InputPosFront;\nvar camera3InputPromise, camer", "1InputPosFront;\nvar camera1InputPromise, camer", "amera1InputPromise, camera1InputPromisePosBack", " \" + JSON.stringify(cameraManagerPromise));\n  ", "rt default function cameraTestCase(surfaceId:a", "sunit/index\"\nimport cameraKit from \"../test/Ca", "mise));\n        if (cameraManagerPromise != nu", "ERA-3 Variables\nvar camera3Input, camera3Input", "--------\");\n        cameraObj.getCameraManager", "rt default function cameraKit(surfaceId:any) {", "amera3InputPromise, camera3InputPromisePosBack", "nfo(TAG + 'Entering cameraKit')\n  console.info", "onInfo('com.example.cameramoduletestetsv2',0 ,", "agerPromise = await cameraObj.getCameraManager", "s\nvar camera3Input, camera3InputPosBack, camer", "Case(surfaceId)\n//  cameraService()\n}", "obal variables\n\nvar cameraManager;\nvar surface", "ERA-1 Variables\nvar camera1Input, camera1Input", "m.test.test'\nimport cameraTestCase from '../te", "Format.test'\nimport cameraTestCase from '../te"], "files": ["Camera.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraStatusInfo", "api_method_name": "status", "api_method_all": "status: CameraStatus", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 87, "since": 9, "api_used": "\u662f", "lines": ["'MediaLibraryTest : status is '+ data.status);", ": status is '+ data.status);\n                i", "fo_Status: \" + data.status);\n\n              ex", ".info(TAG + \"Camera status Callback CameraStat", ": status is '+ data.status);\n                 ", "meworkTest: promise status: \" + scanPromise.st", "           if (data.status != 0){\n            ", ": status is '+ data.status);\n                c", ".info(TAG + \"Camera status Callback on cameraM", "nfo_Status: \" +data.status );\n\t\t\t\n            ", ": status is '+ data.status);\n                e", "us: \" + scanPromise.status);\n\t})\n\n    beforeEa"], "files": ["MediaScannerFrameWork1.0.js", "CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraPosition", "api_method_all": "enum CameraPosition {\n    \n    CAMERA_POSITION_UNSPECIFIED = 0,\n    \n    CAMERA_POSITION_BACK,\n    \n    CAMERA_POSITION_FRONT\n  }", "api_method_name": "CameraPosition", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 104, "since": 9, "api_used": "\u662f", "lines": ["meraInput(cameraObj.CameraPosition.CAMERA_POSITION_FRO", "ONT : \" + cameraObj.CameraPosition.CAMERA_POSITION_FRO", "console.info(TAG + \"CameraPosition CAMERA_POSITION_UNS", "console.info(TAG + \"CameraPosition CAMERA_POSITION_FRO", "meraInput(cameraObj.CameraPosition.CAMERA_POSITION_UNS", "ACK : \" + cameraObj.CameraPosition.CAMERA_POSITION_BAC", "   expect(cameraObj.CameraPosition.CAMERA_POSITION_FRO", "   expect(cameraObj.CameraPosition.CAMERA_POSITION_BAC", "console.info(TAG + \"CameraPosition CAMERA_POSITION_BAC", "meraInput(cameraObj.CameraPosition.CAMERA_POSITION_BAC", "AG + \"--------------CameraPosition ------------\")\n    "], "files": ["CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraPosition", "api_method_name": "CAMERA_POSITION_UNSPECIFIED", "api_method_all": "CAMERA_POSITION_UNSPECIFIED = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 26, "since": 9, "api_used": "\u662f", "lines": ["aObj.CameraPosition.CAMERA_POSITION_UNSPECIFIED).assertEqual(0);\n  ", "aObj.CameraPosition.CAMERA_POSITION_UNSPECIFIED, cameraObj.CameraTy", "aObj.CameraPosition.CAMERA_POSITION_UNSPECIFIED);\n      expect(came", "G + \"CameraPosition CAMERA_POSITION_UNSPECIFIED : \" + cameraObj.Cam"], "files": ["CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraPosition", "api_method_name": "CAMERA_POSITION_BACK", "api_method_all": "CAMERA_POSITION_BACK,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 38, "since": 9, "api_used": "\u662f", "lines": ["aObj.CameraPosition.CAMERA_POSITION_BACK, cameraObj.CameraTy", "aObj.CameraPosition.CAMERA_POSITION_BACK).assertEqual(1);\n  ", "G + \"CameraPosition CAMERA_POSITION_BACK : \" + cameraObj.Cam", "aObj.CameraPosition.CAMERA_POSITION_BACK);\n      expect(came"], "files": ["CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraType", "api_method_all": "enum CameraType {\n    \n    CAMERA_TYPE_UNSPECIFIED = 0,\n\n    \n    CAMERA_TYPE_WIDE_ANGLE,\n\n    \n    CAMERA_TYPE_ULTRA_WIDE,\n\n    \n    CAMERA_TYPE_TELEPHOTO,\n\n    \n    CAMERA_TYPE_TRUE_DEPTH\n  }", "api_method_name": "CameraType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 116, "since": 9, "api_used": "\u662f", "lines": ["   expect(cameraObj.CameraType.CAMERA_TYPE_UNSPECI", "PECIFIED, cameraObj.CameraType.CAMERA_TYPE_UNSPECI", "AG + \"--------------CameraType ------------\")\n    ", "PECIFIED, cameraObj.CameraType.CAMERA_TYPE_TRUE_DE", "   expect(cameraObj.CameraType.CAMERA_TYPE_WIDE_AN", "ION_BACK, cameraObj.CameraType.CAMERA_TYPE_UNSPECI", "ON_FRONT, cameraObj.CameraType.CAMERA_TYPE_TRUE_DE", "ON_FRONT, cameraObj.CameraType.CAMERA_TYPE_UNSPECI", "ION_BACK, cameraObj.CameraType.CAMERA_TYPE_TELEPHO", "PECIFIED, cameraObj.CameraType.CAMERA_TYPE_ULTRA_W", "ION_BACK, cameraObj.CameraType.CAMERA_TYPE_TRUE_DE", "PECIFIED, cameraObj.CameraType.CAMERA_TYPE_WIDE_AN", "console.info(TAG + \"CameraType CAMERA_TYPE_UNSPECI", "ON_FRONT, cameraObj.CameraType.CAMERA_TYPE_TELEPHO", "ION_BACK, cameraObj.CameraType.CAMERA_TYPE_ULTRA_W", "PECIFIED, cameraObj.CameraType.CAMERA_TYPE_TELEPHO", "console.info(TAG + 'CameraType CAMERA_TYPE_ULTRA_W", "console.info(TAG + \"CameraType CAMERA_TYPE_WIDE_AN", "ION_BACK, cameraObj.CameraType.CAMERA_TYPE_WIDE_AN", "ON_FRONT, cameraObj.CameraType.CAMERA_TYPE_WIDE_AN", "GLE : \" + cameraObj.CameraType.CAMERA_TYPE_WIDE_AN", "IED : \" + cameraObj.CameraType.CAMERA_TYPE_UNSPECI", "ON_FRONT, cameraObj.CameraType.CAMERA_TYPE_ULTRA_W"], "files": ["CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraType", "api_method_name": "CAMERA_TYPE_UNSPECIFIED", "api_method_all": "CAMERA_TYPE_UNSPECIFIED = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 42, "since": 9, "api_used": "\u662f", "lines": ["o(TAG + \"CameraType CAMERA_TYPE_UNSPECIFIED : \" + cameraObj.Cam", "ameraObj.CameraType.CAMERA_TYPE_UNSPECIFIED);\n        console.i", "ameraObj.CameraType.CAMERA_TYPE_UNSPECIFIED);\n      console.inf", "ameraObj.CameraType.CAMERA_TYPE_UNSPECIFIED);\n      expect(came", "ameraObj.CameraType.CAMERA_TYPE_UNSPECIFIED, async (err, data) ", "ameraObj.CameraType.CAMERA_TYPE_UNSPECIFIED).assertEqual(0);\n  "], "files": ["CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraType", "api_method_name": "CAMERA_TYPE_WIDE_ANGLE", "api_method_all": "CAMERA_TYPE_WIDE_ANGLE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 9, "api_used": "\u662f", "lines": ["o(TAG + \"CameraType CAMERA_TYPE_WIDE_ANGLE : \" + cameraObj.Cam", "ameraObj.CameraType.CAMERA_TYPE_WIDE_ANGLE, async (err, data) ", "ameraObj.CameraType.CAMERA_TYPE_WIDE_ANGLE);\n      console.inf", "ameraObj.CameraType.CAMERA_TYPE_WIDE_ANGLE);\n        console.i", "ameraObj.CameraType.CAMERA_TYPE_WIDE_ANGLE).assertEqual(1);\n  ", "ameraObj.CameraType.CAMERA_TYPE_WIDE_ANGLE);\n      expect(came"], "files": ["CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraType", "api_method_name": "CAMERA_TYPE_ULTRA_WIDE", "api_method_all": "CAMERA_TYPE_ULTRA_WIDE,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 9, "api_used": "\u662f", "lines": ["ameraObj.CameraType.CAMERA_TYPE_ULTRA_WIDE);\n        console.i", "ameraObj.CameraType.CAMERA_TYPE_ULTRA_WIDE);\n      console.inf", "ameraObj.CameraType.CAMERA_TYPE_ULTRA_WIDE);\n      expect(came", "o(TAG + 'CameraType CAMERA_TYPE_ULTRA_WIDE : ' + cameraObj.Cam", "ameraObj.CameraType.CAMERA_TYPE_ULTRA_WIDE, async (err, data) ", "ameraObj.CameraType.CAMERA_TYPE_ULTRA_WIDE).assertEqual(2);\n  "], "files": ["CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraType", "api_method_name": "CAMERA_TYPE_TELEPHOTO", "api_method_all": "CAMERA_TYPE_TELEPHOTO,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 18, "since": 9, "api_used": "\u662f", "lines": ["ameraObj.CameraType.CAMERA_TYPE_TELEPHOTO);\n        console.i", "o(TAG + 'CameraType CAMERA_TYPE_TELEPHOTO : ' + cameraObj.Cam", "ameraObj.CameraType.CAMERA_TYPE_TELEPHOTO).assertEqual(3);\n  ", "ameraObj.CameraType.CAMERA_TYPE_TELEPHOTO, async (err, data) ", "ameraObj.CameraType.CAMERA_TYPE_TELEPHOTO);\n      expect(came", "ameraObj.CameraType.CAMERA_TYPE_TELEPHOTO);\n      console.inf"], "files": ["CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnectionType", "api_method_all": "enum ConnectionType {\n    \n    CAMERA_CONNECTION_BUILT_IN = 0,\n\n    \n    CAMERA_CONNECTION_USB_PLUGIN,\n\n    \n    CAMERA_CONNECTION_REMOTE\n  }", "api_method_name": "ConnectionType", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 20, "since": 9, "api_used": "\u662f", "lines": ["console.info(TAG + \"ConnectionType CAMERA_CONNECTION_R", "console.info(TAG + \"ConnectionType CAMERA_CONNECTION_U", "AG + \"--------------ConnectionType ------------\")\n    ", "GIN : \" + cameraObj.ConnectionType.CAMERA_CONNECTION_U", "   expect(cameraObj.ConnectionType.CAMERA_CONNECTION_R", "   expect(cameraObj.ConnectionType.CAMERA_CONNECTION_U", "OTE : \" + cameraObj.ConnectionType.CAMERA_CONNECTION_R", "_IN : \" + cameraObj.ConnectionType.CAMERA_CONNECTION_B", "   expect(cameraObj.ConnectionType.CAMERA_CONNECTION_B", "console.info(TAG + \"ConnectionType CAMERA_CONNECTION_B"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnectionType", "api_method_name": "CAMERA_CONNECTION_BUILT_IN", "api_method_all": "CAMERA_CONNECTION_BUILT_IN = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["aObj.ConnectionType.CAMERA_CONNECTION_BUILT_IN);\n\t\t   expect(camer", "aObj.ConnectionType.CAMERA_CONNECTION_BUILT_IN);\n      expect(came", "aObj.ConnectionType.CAMERA_CONNECTION_BUILT_IN).assertEqual(0);\n  ", "G + \"ConnectionType CAMERA_CONNECTION_BUILT_IN : \" + cameraObj.Con"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ConnectionType", "api_method_name": "CAMERA_CONNECTION_USB_PLUGIN", "api_method_all": "CAMERA_CONNECTION_USB_PLUGIN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["aObj.ConnectionType.CAMERA_CONNECTION_USB_PLUGIN).assertEqual(1);\n  ", "G + \"ConnectionType CAMERA_CONNECTION_USB_PLUGIN : \" + cameraObj.Con", "aObj.ConnectionType.CAMERA_CONNECTION_USB_PLUGIN);\n      expect(came", "aObj.ConnectionType.CAMERA_CONNECTION_USB_PLUGIN);\n\t   expect(camera", "aObj.ConnectionType.CAMERA_CONNECTION_USB_PLUGIN).assertEqual(1);\n\t\t"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Camera", "api_method_all": "interface Camera {\n    \n    readonly cameraId: string;\n    \n    readonly cameraPosition: CameraPosition;\n    \n    readonly cameraType: CameraType;\n    \n    readonly connectionType: ConnectionType;\n  }", "api_method_name": "Camera", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 1009, "since": 9, "api_used": "\u662f", "lines": ["   cameraManager.getCameras(async (err, data) ", "rtedSizes(cameraObj.CameraFormat.CAMERA_FORMAT", "cameraManager.createCameraInput(camerasArray[0", "                var CameraId0 = data;\n        ", "era0InputPromise.getCameraId();\n        consol", "cribe('CreateCamera_CameraFormat_Size', functi", "      console.info(\"CameraModuleTest: Entering", "tCase from '../test/CameraJSUnitCameraFormat.t", "y\n@Component\nstruct CameraIndex {\n  @State isS", "cameraManager.createCameraInput(cameraObj.Came", "raKit from \"../test/Camera.test\"\nimport featur", ".test'\n\n\nlet TAG = 'CameraModuleTest: '\n\nexpor", "dex';\n\nconst TAG = \"CameraModuleTest: \";\n\n// D", "    camera0Input.getCameraId(async (err, data)", " }\n\ndescribe('CreateCamera_CameraFormat_Size',", "_TC_007 PASSED with CameraID :\" + CameraId0);\n", "tCase from '../test/CameraJSUnitVideoPromise.t", "      console.info('CameraModuleTest: XCompone", "_TC_005 PASSED with CameraID :\" + camerasArray", "ea.ets'\n\nlet TAG = 'CameraModuleTest: '\nvar mX", "tCase from '../test/CameraJSUnitPhotoPromise.t", "tCase from '../test/CameraJSUnitPhotoAsync.tes", "      console.info('CameraModuleTest: OnLoad()", " with CameraID :\" + CameraId0);\n              ", " await cameraObj.getCameraManager(null);\n     ", "tCase from '../test/CameraJSUnitVideoAsync.tes", "it cameraManager.getCameras();\n        console", "../test/CameraJSUnitCameraFormat.test'\nimport ", "       cameraObj.getCameraManager(null, async ", "tCase from '../test/CameraJSUnitEnum.test.test"], "files": ["Camera.test.ets", "CameraJSUnitVideoAsync.test.ets", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "fetchFileResultPromise.test.js", "fetchFileResultCallBack.test.js", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitEnum.test.ets", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Camera", "api_method_name": "cameraId", "api_method_all": "readonly cameraId: string", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 221, "since": 9, "api_used": "\u662f", "lines": ["\" + camerasArray[0].cameraId);\n                }", "\" + camerasArray[1].cameraId);\n                }", "put(camerasArray[0].cameraId);\n        console.i", "era\" + i + \"Id: \" + cameraId);\n                v", "                var cameraId = camerasArrayPromi", "    : Zoom camera-0 cameraId api\n      * @tc.des", "put(camerasArray[3].cameraId, async (err, data) ", "era\" + i + \"Id: \" + cameraId);\n                 ", "input from camera-2 cameraId async api\n      * @", "put(camerasArray[2].cameraId, async (err, data) ", "d = camerasArray[i].cameraId;\n                  ", "erasArrayPromise[i].cameraId;\n                co", "input from camera-3 cameraId async api\n      * @", "input from camera-1 cameraId async api\n      * @", "input from camera-2 cameraId promise api\n      *", "d = camerasArray[i].cameraId;\n                co", "put(camerasArray[2].cameraId);\n        console.i", "\" + camerasArray[2].cameraId);\n                }", "\" + camerasArray[0].cameraId);\n          }\n     ", "put(camerasArray[0].cameraId, async (err, data) ", "    : Zoom camera-0 cameraId api\n      * @tc.siz", "\" + camerasArray[3].cameraId);\n                }", "put(camerasArray[1].cameraId, async (err, data) ", "zoom ratio camera-0 cameraId api\n      * @tc.des", "zoom ratio camera-0 cameraId api\n      * @tc.siz", "input from camera-1 cameraId promise api\n      *", "                var cameraId = camerasArray[i].c", "input from camera-3 cameraId promise api\n      *", "put(camerasArray[3].cameraId);\n        console.i", "put(camerasArray[1].cameraId);\n        console.i"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Camera", "api_method_name": "cameraPosition", "api_method_all": "readonly cameraPosition: CameraPosition", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 58, "since": 9, "api_used": "\u662f", "lines": ["                var cameraPosition = camerasArray[i].c", " i + \"Position: \" + cameraPosition);\n                 ", "put(camerasArray[0].cameraPosition, camerasArray[0].ca", "erasArrayPromise[i].cameraPosition;\n          console.", " i + \"Position: \" + cameraPosition);\n          var cam", "raId)\n          var cameraPosition = camerasArrayPromi", "n = camerasArray[i].cameraPosition;\n                co", "erasArrayPromise[0].cameraPosition, camerasArrayPromis", " i + 'Position: ' + cameraPosition)\n          var came", " i + \"Position: \" + cameraPosition);\n                v", "put(camerasArray[3].cameraPosition, camerasArray[3].ca", "erasArrayPromise[i].cameraPosition\n          console.i", "put(camerasArray[2].cameraPosition, camerasArray[2].ca", "                var cameraPosition = camerasArrayPromi", "n = camerasArray[i].cameraPosition\n                con", " i + 'Position: ' + cameraPosition)\n                va", "aId);\n          var cameraPosition = camerasArrayPromi", "n = camerasArray[i].cameraPosition;\n                  ", "put(camerasArray[1].cameraPosition, camerasArray[1].ca", "erasArrayPromise[i].cameraPosition;\n                co"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Camera", "api_method_name": "cameraType", "api_method_all": "readonly cameraType: CameraType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 58, "since": 9, "api_used": "\u662f", "lines": ["on, camerasArray[1].cameraType);\n        console.i", "a' + i + 'Type: ' + cameraType)\n                va", "a\" + i + \"Type: \" + cameraType);\n          var con", "on, camerasArray[2].cameraType);\n        console.i", "on, camerasArray[0].cameraType, async (err, data) ", "ion);\n          var cameraType = camerasArrayPromi", "erasArrayPromise[i].cameraType\n          console.i", "a' + i + 'Type: ' + cameraType)\n          var conn", "                var cameraType = camerasArrayPromi", "                var cameraType = camerasArray[i].c", "erasArrayPromise[0].cameraType)\n      console.info", "on, camerasArray[0].cameraType);\n        console.i", "e = camerasArray[i].cameraType\n                con", "e = camerasArray[i].cameraType;\n                  ", "on, camerasArray[3].cameraType);\n      console.inf", "on, camerasArray[1].cameraType, async (err, data) ", "on, camerasArray[3].cameraType, async (err, data) ", "on, camerasArray[3].cameraType);\n        console.i", "erasArrayPromise[i].cameraType;\n                co", "on, camerasArray[0].cameraType, (err, data) => {\n ", "on, camerasArray[1].cameraType);\n      console.inf", "e = camerasArray[i].cameraType;\n                co", "a\" + i + \"Type: \" + cameraType);\n                v", "tion)\n          var cameraType = camerasArrayPromi", "on, camerasArray[2].cameraType, async (err, data) ", "a\" + i + \"Type: \" + cameraType);\n                 ", "on, camerasArray[2].cameraType);\n      console.inf", "erasArrayPromise[i].cameraType;\n          console."], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Camera", "api_method_name": "connectionType", "api_method_all": "readonly connectionType: ConnectionType", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 42, "since": 9, "api_used": "\u662f", "lines": ["erasArrayPromise[i].connectionType\n          console.i", "n\" + i + \"Type: \" + connectionType);\n        }\n       ", "e = camerasArray[i].connectionType\n                   ", "n\" + i + \"Type: \" + connectionType);\n                 ", "e = camerasArray[i].connectionType\n                con", "n' + i + 'Type: ' + connectionType)\n        }\n        ", "n\" + i + \"Type: \" + connectionType);\n            }\n   ", "                var connectionType = camerasArrayPromi", "Type)\n          var connectionType = camerasArrayPromi", "n\" + i + \"Type: \" + connectionType);\n              }\n ", "n' + i + 'Type: ' + connectionType)\n              }\n  ", "erasArrayPromise[i].connectionType\n                con", "                var connectionType = camerasArray[i].c", "ype);\n          var connectionType = camerasArrayPromi"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_all": "interface Size {\n    \n    height: number;\n    \n    width: number;\n  }", "api_method_name": "Size", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 586, "since": 9, "api_used": "\u662f", "lines": ["t audioRen.getBufferSize();\n     console.inf", "t audioCap.getBufferSize();\n        console.", "Size);\n        totalSize = totalSize-44;\n   ", "  }\n\n     var bufferSize;\n     await audioRe", "fer size: ' + bufferSize);\n\n        var fd =", "\n\n        var bufferSize = await audioCap.ge", "   totalSize = totalSize-44;\n        console", "\n             bufferSize=data;\n         }\n  ", "RenderLog: getBufferSize :ERROR : '+err.mess", "   totalSize = totalSize-44;\n     let rlen =", "w ArrayBuffer(bufferSize);\n         rlen += ", "audioCap.read(bufferSize, true);\n           ", "lSize size: ' +totalSize);\n        totalSize", "RenderLog: getBufferSize :SUCCESS '+data);\n ", "talSize);\n     totalSize = totalSize-44;\n   ", "\n\n        var bufferSize;\n        await audi", "ing header: ' +totalSize);\n     await sleep(", "w ArrayBuffer(bufferSize);\n            rlen ", " while (rlen < totalSize) {\n            let ", "e);\n\n     var bufferSize = await audioRen.ge", "fer size: ' + bufferSize);\n\n     let ss = fi", " while (rlen < totalSize) {\n         let buf", "   if (rlen > (totalSize/2)){\n              ", "lSize size: ' +totalSize);\n     totalSize = ", "t audioRen.getBufferSize((err,data)=> {\n    ", "enderLog: File totalSize size: ' +totalSize)", "t audioRen.getBufferSize().then(async functi", ";\n            bufferSize=data;\n        }).ca", "der);\n     let totalSize = fileio.statSync(f", ");\n        let totalSize = fileio.statSync(f", "ar waitTime = (totalSize/88200);\n     var wa", "ing header: ' +totalSize);\n        let rlen "], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "AudioRenderer.test.js", "image.test.js", "CameraJSUnitVideoPromise.test.ets", "HttpPlayerFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoRecorderAPICallbackTest.test.js", "SR000GHLLV.test.js", "VideoRecorderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitVideoAsync.test.ets", "VideoEncoderSoftwareFuncPromiseTest.test.js", "index.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_name": "height", "api_method_all": "height: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 771, "since": 9, "api_used": "\u662f", "lines": ["rayPromise: width * height - \" +sizeArrayPromi", "th + \" * \" +data[i].height);\n                 ", " sizeArray: width * height - \" +data[i].width ", "h('640px')\n        .height('480px')\n    }\n  }\n", "sizeArrayPromise[i].height);\n            }\n   "], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "Size", "api_method_name": "width", "api_method_all": "width: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 773, "since": 9, "api_used": "\u662f", "lines": ["height - \" +data[i].width + \" * \" +data[i].he", "G_TC_019 sizeArray: width * height - \" +data[", "6 sizeArrayPromise: width * height - \" +sizeA", "P_TC_087 sizeArray: width * height - \" +data[", "G_TC_055 sizeArray: width * height - \" +data[", " size0ArrayPromise: width * height - \" +sizeA", "sizeArrayPromise[i].width + \" * \" + sizeArray", "G_TC_029 sizeArray: width * height - \" +data[", "P_TC_015 sizeArray: width * height - \" +data[", "P_TC_051 sizeArray: width * height - \" +data[", "P_TC_025 sizeArray: width * height - \" +data[", "G_TC_065 sizeArray: width * height - \" +data[", "P_TC_035 sizeArray: width * height - \" +data[", "P_TC_061 sizeArray: width * height - \" +data[", "G_TC_075 sizeArray: width * height - \" +data[", "P_TC_071 sizeArray: width * height - \" +data[", "0 sizeArrayPromise: width * height - \" +sizeA", "G_TC_039 sizeArray: width * height - \" +data[", "2 sizeArrayPromise: width * height - \" +sizeA", "        })\n        .width('640px')\n        .h"], "files": ["VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "VideoPlayerFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "filekeyTestCallBack.test.js", "VideoHardwareEncoderEnumTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "filekeyTestPromise.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_all": "interface CameraInput {\n    \n    getCameraId(callback: AsyncCallback<string>): void;\n\n    \n    getCameraId(): Promise<string>;\n\n    \n    hasFlash(callback: AsyncCallback<boolean>): void;\n\n    \n    hasFlash(): Promise<boolean>;\n\n    \n    isFlashModeSupported(flashMode: FlashMode, callback: AsyncCallback<boolean>): void;\n\n    \n    isFlashModeSupported(flashMode: FlashMode): Promise<boolean>;\n\n    \n    getFlashMode(callback: AsyncCallback<FlashMode>): void;\n\n    \n    getFlashMode(): Promise<FlashMode>;\n\n    \n    setFlashMode(flashMode: FlashMode, callback: AsyncCallback<void>): void;\n\n    \n    setFlashMode(flashMode: FlashMode): Promise<void>;\n\n    \n    isFocusModeSupported(afMode: FocusMode, callback: AsyncCallback<boolean>): void;\n\n    \n    isFocusModeSupported(afMode: FocusMode): Promise<boolean>;\n\n    \n    getFocusMode(callback: AsyncCallback<FocusMode>): void;\n\n    \n    getFocusMode(): Promise<FocusMode>;\n\n    \n    setFocusMode(afMode: FocusMode, callback: AsyncCallback<void>): void;\n\n    \n    setFocusMode(afMode: FocusMode): Promise<void>;\n\n    \n    getZoomRatioRange(callback: AsyncCallback<Array<number>>): void;\n\n    \n    getZoomRatioRange(): Promise<Array<number>>;\n\n    \n    getZoomRatio(callback: AsyncCallback<number>): void;\n\n    \n    getZoomRatio(): Promise<number>;\n\n    \n    setZoomRatio(zoomRatio: number, callback: AsyncCallback<void>): void;\n\n    \n    setZoomRatio(zoomRatio: number): Promise<void>;\n\n    \n    release(callback: AsyncCallback<void>): void;\n\n    \n    release(): Promise<void>;\n\n    \n    on(type: 'focusStateChange', callback: AsyncCallback<FocusState>): void;\n\n    \n    on(type: 'error', callback: ErrorCallback<CameraInputError>): void;\n  }", "api_method_name": "CameraInput", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 135, "since": 9, "api_used": "\u662f", "lines": ["cameraManager.createCameraInput(camerasArray[2].cam", "cameraManager.createCameraInput(camerasArray[3].cam", "cameraManager.createCameraInput(camerasArray[0].cam", "cameraManager.createCameraInput(camerasArray[1].cam", "cameraManager.createCameraInput(cameraObj.CameraPos"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "getCameraId", "api_method_all": "getCameraId(callback: AsyncCallback<string>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 16, "since": 9, "api_used": "\u662f", "lines": ["       camera0Input.getCameraId(async (err, data) => {\n            if (", "camera2InputPromise.getCameraId();\n        console.info(TAG + \"Entering", "camera3InputPromise.getCameraId();\n        console.info(TAG + \"Entering", "\n      camera2Input.getCameraId(async (err, data) => {\n        if (!err", "camera0InputPromise.getCameraId();\n        console.info(TAG + \"Entering", "camera2InputPromise.getCameraId();\n      console.info(TAG + \"Entering G", "camera1InputPromise.getCameraId();\n        console.info(TAG + \"Entering", "       camera2Input.getCameraId(async (err, data) => {\n            if (", "camera0InputPromise.getCameraId();\n      console.info(TAG + \"Entering G", "camera1InputPromise.getCameraId();\n      console.info(TAG + \"Entering G", "\n      camera3Input.getCameraId(async (err, data) => {\n        if (!err", "\n      camera0Input.getCameraId(async (err, data) => {\n        if (!err", "       camera3Input.getCameraId(async (err, data) => {\n            if (", "       camera1Input.getCameraId(async (err, data) => {\n            if (", "\n      camera1Input.getCameraId(async (err, data) => {\n        if (!err", "camera3InputPromise.getCameraId();\n      console.info(TAG + \"Entering G"], "files": ["CameraJSUnitCameraFormat.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "getCameraId", "api_method_all": "getCameraId(): Promise<string>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "hasFlash", "api_method_all": "hasFlash(callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 32, "since": 9, "api_used": "\u662f", "lines": ["uccess\");\n      if (hasFlashPromise != null || hasFlashPromise != un", "hPromise != null || hasFlashPromise != undefined) {\n        console.", "camera0InputPromise.hasFlash();\n      console.info(TAG + \"Entering H", " \" + JSON.stringify(hasFlashPromise));\n      }\n      else {\n        ", "\n      camera0Input.hasFlash(async (err, data) => {\n        if (!err", "console.info(TAG + 'hasFlash called.')\n      camera0Input.hasFlash(a", "called.')\n      var hasFlashPromise = await camera0InputPromise.hasF", "console.info(TAG + \"hasFlash called.\")\n      camera0Input.hasFlash(a", "console.info(TAG + 'hasFlash called.')\n      var hasFlashPromise = a"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "hasFlash", "api_method_all": "hasFlash(): Promise<boolean>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "isFlashModeSupported", "api_method_all": "isFlashModeSupported(flashMode: FlashMode, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 30, "since": 9, "api_used": "\u662f", "lines": ["camera0InputPromise.isFlashModeSupported(cameraObj.FlashMode.FLASH_MODE_OPEN);\n ", "camera0InputPromise.isFlashModeSupported(cameraObj.FlashMode.FLASH_MODE_AUTO);\n ", "camera0InputPromise.isFlashModeSupported(cameraObj.FlashMode.FLASH_MODE_ALWAYS_O", "\n      camera0Input.isFlashModeSupported(cameraObj.FlashMode.FLASH_MODE_CLOSE, a", "\n      camera0Input.isFlashModeSupported(cameraObj.FlashMode.FLASH_MODE_OPEN, as", "\n      camera0Input.isFlashModeSupported(cameraObj.FlashMode.FLASH_MODE_AUTO, as", "\n      camera0Input.isFlashModeSupported(cameraObj.FlashMode.FLASH_MODE_ALWAYS_O", "camera0InputPromise.isFlashModeSupported(cameraObj.FlashMode.FLASH_MODE_CLOSE);\n"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "isFlashModeSupported", "api_method_all": "isFlashModeSupported(flashMode: FlashMode): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "getFlashMode", "api_method_all": "getFlashMode(callback: AsyncCallback<FlashMode>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 24, "since": 9, "api_used": "\u662f", "lines": ["camera0InputPromise.getFlashMode();\n      console.info(TAG + \"Entering G", "\n      camera0Input.getFlashMode(async (err, data) => {\n        if (!err"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "getFlashMode", "api_method_all": "getFlashMode(): Promise<FlashMode>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "setFlashMode", "api_method_all": "setFlashMode(flashMode: FlashMode, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 39, "since": 9, "api_used": "\u662f", "lines": ["\n      camera0Input.setFlashMode(cameraObj.FlashMode.FLASH_MODE_AUTO, as", "camera0InputPromise.setFlashMode(cameraObj.FlashMode.FLASH_MODE_OPEN);\n ", "console.info(TAG + \"setFlashModeOPEN: \" + JSON.stringify(SetFMOpen))\n   ", "camera0InputPromise.setFlashMode(cameraObj.FlashMode.FLASH_MODE_CLOSE);\n", "camera0InputPromise.setFlashMode(cameraObj.FlashMode.FLASH_MODE_ALWAYS_O", "\n      camera0Input.setFlashMode(cameraObj.FlashMode.FLASH_MODE_ALWAYS_O", "\n      camera0Input.setFlashMode(cameraObj.FlashMode.FLASH_MODE_CLOSE, a", "console.info(TAG + \"setFlashModeOPEN: \" + JSON.stringify(SetFMAlwaysOpen", "console.info(TAG + \"setFlashModeOPEN: \" + JSON.stringify(SetFMClose))\n  ", "\n      camera0Input.setFlashMode(cameraObj.FlashMode.FLASH_MODE_OPEN, as"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "setFlashMode", "api_method_all": "setFlashMode(flashMode: FlashMode): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "isFocusModeSupported", "api_method_all": "isFocusModeSupported(afMode: FocusMode, callback: AsyncCallback<boolean>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 30, "since": 9, "api_used": "\u662f", "lines": ["camera0InputPromise.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_LOCKED);", "camera0InputPromise.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_AUTO);\n ", "te\");\n\tcamera0Input.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_CONTINUO", "\n      camera0Input.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_MANUAL, ", "\n      camera0Input.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_AUTO, as", "camera0InputPromise.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_CONTINUO", "\n      camera0Input.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_CONTINUO", "\n      camera0Input.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_LOCKED, ", "te\");\n\tcamera0Input.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_AUTO, as", "camera0InputPromise.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_MANUAL);", "te\");\n\tcamera0Input.isFocusModeSupported(cameraObj.FocusMode.FOCUS_MODE_MANUAL, "], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "isFocusModeSupported", "api_method_all": "isFocusModeSupported(afMode: FocusMode): Promise<boolean>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "getFocusMode", "api_method_all": "getFocusMode(callback: AsyncCallback<FocusMode>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 30, "since": 9, "api_used": "\u662f", "lines": ["camera0InputPromise.getFocusMode();\n      console.info(TAG + \"Entering G", "\n      camera0Input.getFocusMode(async (err, data) => {\n        if (!err"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "getFocusMode", "api_method_all": "getFocusMode(): Promise<FocusMode>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "setFocusMode", "api_method_all": "setFocusMode(afMode: FocusMode, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 30, "since": 9, "api_used": "\u662f", "lines": ["camera0InputPromise.setFocusMode(cameraObj.FocusMode.FOCUS_MODE_MANUAL);", "camera0InputPromise.setFocusMode(cameraObj.FocusMode.FOCUS_MODE_LOCKED);", "\n      camera0Input.setFocusMode(cameraObj.FocusMode.FOCUS_MODE_AUTO, as", "\n      camera0Input.setFocusMode(cameraObj.FocusMode.FOCUS_MODE_MANUAL, ", "\n      camera0Input.setFocusMode(cameraObj.FocusMode.FOCUS_MODE_CONTINUO", "camera0InputPromise.setFocusMode(cameraObj.FocusMode.FOCUS_MODE_CONTINUO", "\n      camera0Input.setFocusMode(cameraObj.FocusMode.FOCUS_MODE_LOCKED, ", "camera0InputPromise.setFocusMode(cameraObj.FocusMode.FOCUS_MODE_AUTO);\n "], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "setFocusMode", "api_method_all": "setFocusMode(afMode: FocusMode): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "getZoomRatioRange", "api_method_all": "getZoomRatioRange(callback: AsyncCallback<Array<number>>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 8, "since": 9, "api_used": "\u662f", "lines": ["\n      camera0Input.getZoomRatioRange(async (err,data) => {\n        if (!err)", "camera0InputPromise.getZoomRatioRange();\n      console.info(TAG + \"Entering G", "camera0InputPromise.getZoomRatioRange();\n        console.info(TAG + \"Entering", "\n      camera0Input.getZoomRatioRange(async (err, data) => {\n        if (!err"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "getZoomRatioRange", "api_method_all": "getZoomRatioRange(): Promise<Array<number>>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "getZoomRatio", "api_method_all": "getZoomRatio(callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 176, "since": 9, "api_used": "\u662f", "lines": ["console.info(TAG + \"getZoomRatio called\")\n            var getpromise1 = ", "console.info(TAG + \"getZoomRatio success: \"+getpromise5);\n\t\t\t  if(getpro", " \" + JSON.stringify(getZoomRatioPromise));\n\t\t\t\tconsole.info(TAG + \"Enter", "console.info(TAG + \"getZoomRatio called\")\n            var getpromise2 = ", "       camera0Input.getZoomRatio((err,data1) => {\n            if(!err){\n", "console.info(TAG + \"getZoomRatio called\")\n            var getpromise5 = ", " \" + JSON.stringify(getZoomRatioPromise));\n\t\t\tif (getZoomRatioPromise !=", "----\");\n        var getZoomRatioPromise = await camera0InputPromise.getZ", "console.info(TAG + \"getZoomRatio success: \"+getpromise6);\n\t\t\t  if(getpro", "oPromise != null && getZoomRatioPromise != undefined) {\n\t\t\t\tconsole.info", "\n      camera0Input.getZoomRatioRange(async (err, data) => {\n        if ", "console.info(TAG + \"getZoomRatio success: \"+getpromise4);\n\t\t\t  if(getpro", "_ZOOM_RATIO_PROMISE getZoomRatioPromise: \" + JSON.stringify(getZoomRatio", "console.info(TAG + \"getZoomRatio success: \"+getpromise2);\n\t\t\t  if(getpro", "camera0InputPromise.getZoomRatioRange();\n        console.info(TAG + \"Ent", "ioPromise));\n\t\t\tif (getZoomRatioPromise != null && getZoomRatioPromise !", "console.info(TAG + \"getZoomRatio called\")\n            var getpromise6 = ", "console.info(TAG + \"getZoomRatio called\")\n            var getpromise4 = ", "       camera0Input.getZoomRatio((err, data1) => {\n            if (!err)", "camera0InputPromise.getZoomRatio();\n              console.info(TAG + \"ge", "console.info(TAG + \"getZoomRatio success: \"+getpromise1);\n\t\t\t  if(getpro", "\n      camera0Input.getZoomRatioRange(async (err,data) => {\n        if (", "console.info(TAG + \"getZoomRatio called\")\n            var getpromise3 = ", "console.info(TAG + \"getZoomRatio success : \"+data1);\n              expec", "console.info(TAG + \"getZoomRatio success : \" + data1);\n              exp", "console.info(TAG + \"getZoomRatio success: \"+getpromise3);\n\t\t\t  if(getpro", "console.info(TAG + \"getZoomRatio called\")\n          camera0Input.getZoom"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "getZoomRatio", "api_method_all": "getZoomRatio(): Promise<number>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "setZoomRatio", "api_method_all": "setZoomRatio(zoomRatio: number, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 100, "since": 9, "api_used": "\u662f", "lines": ["camera0InputPromise.setZoomRatio(1);\n          console.info(TAG + \"setZo", "camera0InputPromise.setZoomRatio(4);\n          console.info(TAG + \"setZo", "\n      camera0Input.setZoomRatio(2, (err,data)=>{\n        if(!err){\n    ", "console.info(TAG + \"setZoomRatio success: 2\");\n          console.info(TA", "console.info(TAG + \"setZoomRatio success: 1\");\n          console.info(TA", "camera0InputPromise.setZoomRatio(3);\n          console.info(TAG + \"setZo", "\n      camera0Input.setZoomRatio(1, (err, data) => {\n        if (!err) {", "\n      camera0Input.setZoomRatio(3, (err,data)=>{\n        if(!err){\n    ", "\n      camera0Input.setZoomRatio(4, (err, data) => {\n        if (!err) {", "camera0InputPromise.setZoomRatio(5);\n          console.info(TAG + \"setZo", "\n      camera0Input.setZoomRatio(4, (err,data)=>{\n        if(!err){\n    ", "\n      camera0Input.setZoomRatio(6, (err, data) => {\n        if (!err) {", "\n      camera0Input.setZoomRatio(5, (err,data)=>{\n        if(!err){\n    ", "console.info(TAG + \"setZoomRatio success: 4\");\n          console.info(TA", "\n      camera0Input.setZoomRatio(3, (err, data) => {\n        if (!err) {", "camera0InputPromise.setZoomRatio(6);\n          console.info(TAG + \"setZo", "console.info(TAG + \"setZoomRatio success: 6\");\n          console.info(TA", "console.info(TAG + \"setZoomRatio success: 3\");\n          console.info(TA", "ATIO_PROMISE_TC_041 setZoomRatioPromise is not null || undefined\");\n\t\t\t\t", "\n      camera0Input.setZoomRatio(6, (err,data)=>{\n        if(!err){\n    ", "_ZOOM_RATIO_PROMISE setZoomRatioPromise is not null || undefined\");\n\t\t\t\t", "\n      camera0Input.setZoomRatio(1, (err,data)=>{\n        if(!err){\n    ", "console.info(TAG + \"setZoomRatio success: 5\");\n          console.info(TA", "\n      camera0Input.setZoomRatio(2, (err, data) => {\n        if (!err) {", "\n      camera0Input.setZoomRatio(5, (err, data) => {\n        if (!err) {", "camera0InputPromise.setZoomRatio(2);\n          console.info(TAG + \"setZo"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "setZoomRatio", "api_method_all": "setZoomRatio(zoomRatio: number): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 9, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 9, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "on", "api_method_all": "on(type: 'focusStateChange', callback: AsyncCallback<FocusState>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInput", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback<CameraInputError>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInputErrorCode", "api_method_all": "enum CameraInputErrorCode {\n    \n    ERROR_UNKNOWN = -1\n  }", "api_method_name": "CameraInputErrorCode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInputErrorCode", "api_method_name": "ERROR_UNKNOWN", "api_method_all": "ERROR_UNKNOWN = -1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInputError", "api_method_all": "interface CameraInputError extends Error {\n    code: CameraInputErrorCode;\n  }", "api_method_name": "CameraInputError", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CameraInputError", "api_method_name": "code", "api_method_all": "code: CameraInputErrorCode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2380, "since": 9, "api_used": "\u662f", "lines": ["ErrorCode: \" + data.code);\n                 ", "  2.set index and DecodeOptions\n     *      ", "ErrorCode: \" + data.code);\n              exp", "  2.set index and DecodeOptions\n         *  "], "files": ["AudioDecoderFormatCallbackTest.test.js", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderEnumTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "CameraJSUnitPhotoAsync.test.ets", "AudioRecorderEnumTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FlashMode", "api_method_all": "enum FlashMode {\n    \n    FLASH_MODE_CLOSE = 0,\n    \n    FLASH_MODE_OPEN,\n    \n    FLASH_MODE_AUTO,\n    \n    FLASH_MODE_ALWAYS_OPEN\n  }", "api_method_name": "FlashMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 224, "since": 9, "api_used": "\u662f", "lines": ["console.info(TAG + \"FlashMode FLASH_MODE_ALWAYS_O", "info(TAG + \"Current FlashMode is: \" + data);\n    ", "Supported(cameraObj.FlashMode.FLASH_MODE_CLOSE, a", "console.info(TAG + \"FlashMode FLASH_MODE_CLOSE : ", "info(TAG + \"Current FlashMode is: \" + JSON.string", "UTO : \" + cameraObj.FlashMode.FLASH_MODE_AUTO);\n\t", "FlashMode(cameraObj.FlashMode.FLASH_MODE_AUTO, as", "PEN : \" + cameraObj.FlashMode.FLASH_MODE_ALWAYS_O", "mera0InputPromise.isFlashModeSupported(cameraObj.", "    camera0Input.setFlashMode(cameraObj.FlashMode", "e is: \" + cameraObj.FlashMode.FLASH_MODE_ALWAYS_O", "    camera0Input.getFlashMode(async (err, data) =", "Supported(cameraObj.FlashMode.FLASH_MODE_OPEN, as", "sole.info(TAG + \"setFlashModeOPEN: \" + JSON.strin", "era0InputPromise.getFlashMode();\n      console.in", "console.info(TAG + \"FlashMode FLASH_MODE_AUTO : \"", "console.info(TAG + \"FlashMode FLASH_MODE_OPEN : \"", "OSE : \" + cameraObj.FlashMode.FLASH_MODE_CLOSE);\n", "FlashMode(cameraObj.FlashMode.FLASH_MODE_OPEN);\n ", "\n\t\texpect(cameraObj.FlashMode.FLASH_MODE_AUTO).as", "Supported(cameraObj.FlashMode.FLASH_MODE_AUTO, as", "\n\t\texpect(cameraObj.FlashMode.FLASH_MODE_OPEN).as", "FlashMode(cameraObj.FlashMode.FLASH_MODE_OPEN, as", "Supported(cameraObj.FlashMode.FLASH_MODE_ALWAYS_O", "     camera0Input.isFlashModeSupported(cameraObj.", "era0InputPromise.setFlashMode(cameraObj.FlashMode", "e is: \" + cameraObj.FlashMode.FLASH_MODE_CLOSE);\n", "AG + \"--------------FlashMode ------------\")\n    ", "Supported(cameraObj.FlashMode.FLASH_MODE_OPEN);\n ", "FlashMode(cameraObj.FlashMode.FLASH_MODE_CLOSE, a", "\n\t\texpect(cameraObj.FlashMode.FLASH_MODE_ALWAYS_O", "\n\t\texpect(cameraObj.FlashMode.FLASH_MODE_CLOSE).a", "e is: \" + cameraObj.FlashMode.FLASH_MODE_OPEN);\n ", "FlashMode(cameraObj.FlashMode.FLASH_MODE_ALWAYS_O", "PEN : \" + cameraObj.FlashMode.FLASH_MODE_OPEN);\n\t"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlashMode", "api_method_name": "FLASH_MODE_CLOSE", "api_method_all": "FLASH_MODE_CLOSE = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 222, "since": 9, "api_used": "\u662f", "lines": ["@tc.number    : SET_FLASH_MODE_CLOSE\n      * @tc.name   ", "cameraObj.FlashMode.FLASH_MODE_CLOSE);\n\t\texpect(cameraOb", "console.info(TAG + \"FLASH_MODE_CLOSE supported is: \" + d", "@tc.number    : GET_FLASH_MODE_CLOSE\n      * @tc.name   ", " 0\n\t*/\n\n    it('GET_FLASH_MODE_CLOSE', 0, async function", "cameraObj.FlashMode.FLASH_MODE_CLOSE, async (err, data) ", "ole.info(TAG + \"GET_FLASH_MODE_CLOSE FAILED\" + err.messa", "(TAG + \"Entering IS_FLASH_MODE_CLOSE_SUPPORTED PASSED\");", "TAG + \"Entering SET_FLASH_MODE_CLOSE to operate\");\n     ", "TAG + \"Entering SET_FLASH_MODE_CLOSE FAILED\" + err.messa", "(TAG + \"Entering IS_FLASH_MODE_CLOSE_SUPPORTED SUCCESS \"", "cameraObj.FlashMode.FLASH_MODE_CLOSE);\n        console.i", "cameraObj.FlashMode.FLASH_MODE_CLOSE);\n      console.inf", "(TAG + \"Entering IS_FLASH_MODE_CLOSE_SUPPORTED FAILED\");", "(TAG + \"Entering IS_FLASH_MODE_CLOSE_SUPPORTED to operat", "TAG + \"Entering SET_FLASH_MODE_CLOSE PASSED\")\n        ex", "cameraObj.FlashMode.FLASH_MODE_CLOSE).assertEqual(0);\n  ", "ole.info(TAG + \"GET_FLASH_MODE_CLOSE PASSED\");\n         ", " @tc.number    : IS_FLASH_MODE_CLOSE_SUPPORTED\n      * @", "fo(TAG + \"FlashMode FLASH_MODE_CLOSE : \" + cameraObj.Fla", "el 0\n\t*/\n    it('IS_FLASH_MODE_CLOSE_SUPPORTED', 0, asyn", "(TAG + \"Entering IS_FLASH_MODE_CLOSE_SUPPORTED ends here", "ole.info(TAG + \"GET_FLASH_MODE_CLOSE ends here\");\n      ", "TAG + \"Entering SET_FLASH_MODE_CLOSE ends here\");\n      ", "TAG + \"Entering SET_FLASH_MODE_CLOSE FAILED\");\n        c", "cameraObj.FlashMode.FLASH_MODE_CLOSE);\n          console", "console.info(TAG + \"FLASH_MODE_CLOSE supported is: \" + i", "(TAG + \"Entering IS_FLASH_MODE_CLOSE_SUPPORTED FAILED\" +", "l 0\n\t*/\n    it('SET_FLASH_MODE_CLOSE', 0, async function", "TAG + \"Entering SET_FLASH_MODE_CLOSE PASSED\")\n          ", "TAG + \"Entering GET_FLASH_MODE_CLOSE success\");\n        ", "ole.info(TAG + \"GET_FLASH_MODE_CLOSE data is not null ||", "(TAG + \"Entering IS_FLASH_MODE_CLOSE_SUPPORTED data is n", "TAG + \"Entering SET_FLASH_MODE_CLOSE SUCCESS, current fl", "TAG + \"Entering GET_FLASH_MODE_CLOSE to operate\");\n     "], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlashMode", "api_method_name": "FLASH_MODE_OPEN", "api_method_all": "FLASH_MODE_OPEN,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 226, "since": 9, "api_used": "\u662f", "lines": ["TAG + \"Entering SET_FLASH_MODE_OPEN FAILED\" + err.messa", "cameraObj.FlashMode.FLASH_MODE_OPEN);\n\t\texpect(cameraOb", "(TAG + \"Entering IS_FLASH_MODE_OPEN_SUPPORTED to operat", "fo(TAG + \"FlashMode FLASH_MODE_OPEN : \" + cameraObj.Fla", "@tc.number    : GET_FLASH_MODE_OPEN\n      * @tc.name   ", "console.info(TAG + \"FLASH_MODE_OPEN supported is: \" + d", "TAG + \"Entering SET_FLASH_MODE_OPEN SUCCESS, current fl", "(TAG + \"Entering IS_FLASH_MODE_OPEN_SUPPORTED PASSED\");", "TAG + \"Entering GET_FLASH_MODE_OPEN to operate\");\n     ", "cameraObj.FlashMode.FLASH_MODE_OPEN, async (err, data) ", "cameraObj.FlashMode.FLASH_MODE_OPEN);\n          console", "ole.info(TAG + \"GET_FLASH_MODE_OPEN data is not null ||", "ole.info(TAG + \"GET_FLASH_MODE_OPEN ends here\");\n      ", "cameraObj.FlashMode.FLASH_MODE_OPEN);\n        console.i", "cameraObj.FlashMode.FLASH_MODE_OPEN).assertEqual(1);\n\tc", " 0\n\t*/\n\n    it('GET_FLASH_MODE_OPEN', 0, async function", "TAG + \"Entering SET_FLASH_MODE_OPEN FAILED\");\n        c", "(TAG + \"Entering IS_FLASH_MODE_OPEN_SUPPORTED ends here", "ole.info(TAG + \"GET_FLASH_MODE_OPEN FAILED\" + err.messa", "(TAG + \"Entering IS_FLASH_MODE_OPEN_SUPPORTED SUCCESS \"", "TAG + \"Entering SET_FLASH_MODE_OPEN PASSED\")\n          ", "l 0\n\t*/\n    it('SET_FLASH_MODE_OPEN', 0, async function", "TAG + \"Entering SET_FLASH_MODE_OPEN ends here\");\n      ", "el 0\n\t*/\n    it('IS_FLASH_MODE_OPEN_SUPPORTED', 0, asyn", "(TAG + \"Entering IS_FLASH_MODE_OPEN_SUPPORTED FAILED\" +", "(TAG + \"Entering IS_FLASH_MODE_OPEN_SUPPORTED FAILED\");", " @tc.number    : IS_FLASH_MODE_OPEN_SUPPORTED\n      * @", "TAG + \"Entering SET_FLASH_MODE_OPEN to operate\");\n     ", "TAG + \"Entering SET_FLASH_MODE_OPEN PASSED\")\n        ex", "cameraObj.FlashMode.FLASH_MODE_OPEN);\n      console.inf", "TAG + \"Entering GET_FLASH_MODE_OPEN success\");\n        ", "@tc.number    : SET_FLASH_MODE_OPEN\n      * @tc.name   ", "console.info(TAG + \"FLASH_MODE_OPEN supported is: \" + J", "(TAG + \"Entering IS_FLASH_MODE_OPEN_SUPPORTED data is n", "ole.info(TAG + \"GET_FLASH_MODE_OPEN PASSED\");\n\n        "], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FlashMode", "api_method_name": "FLASH_MODE_AUTO", "api_method_all": "FLASH_MODE_AUTO,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 90, "since": 9, "api_used": "\u662f", "lines": ["(TAG + \"Entering IS_FLASH_MODE_AUTO_SUPPORTED FAILED\");", "TAG + \"Entering SET_FLASH_MODE_AUTO PASSED: \" + err.mes", "(TAG + \"Entering IS_FLASH_MODE_AUTO_SUPPORTED FAILED\" +", "TAG + \"Entering SET_FLASH_MODE_AUTO ends here\");\n      ", "cameraObj.FlashMode.FLASH_MODE_AUTO, async (err, data) ", "TAG + \"Entering SET_FLASH_MODE_AUTO to operate\");\n     ", " @tc.number    : IS_FLASH_MODE_AUTO_SUPPORTED\n      * @", "(TAG + \"Entering IS_FLASH_MODE_AUTO_SUPPORTED SUCCESS \"", "(TAG + \"Entering IS_FLASH_MODE_AUTO_SUPPORTED to operat", "TAG + \"Entering SET_FLASH_MODE_AUTO SUCCESS which is no", "cameraObj.FlashMode.FLASH_MODE_AUTO).assertEqual(2);\n\tc", "l 0\n\t*/\n    it('SET_FLASH_MODE_AUTO', 0, async function", "TAG + \"Entering SET_FLASH_MODE_AUTO FAILED\")\n          ", "cameraObj.FlashMode.FLASH_MODE_AUTO);\n      expect(came", "cameraObj.FlashMode.FLASH_MODE_AUTO).assertEqual(2);\n  ", "cameraObj.FlashMode.FLASH_MODE_AUTO);\n\t\texpect(cameraOb", "(TAG + \"Entering IS_FLASH_MODE_AUTO_SUPPORTED ends here", "sole.info(TAG + \"IS_FLASH_MODE_AUTO_SUPPORTED supported", "cameraObj.FlashMode.FLASH_MODE_AUTO);\n      console.inf", "fo(TAG + \"FlashMode FLASH_MODE_AUTO : \" + cameraObj.Fla", "(TAG + \"Entering IS_FLASH_MODE_AUTO_SUPPORTED data is n", "nfo(TAG + \"Entering FLASH_MODE_AUTO data is not null ||", "el 0\n\t*/\n    it('IS_FLASH_MODE_AUTO_SUPPORTED', 0, asyn", "(TAG + \"Entering IS_FLASH_MODE_AUTO_SUPPORTED PASSED\");", "@tc.number    : SET_FLASH_MODE_AUTO\n      * @tc.name   ", "console.info(TAG + \"FLASH_MODE_AUTO supported is: \" + i"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FocusMode", "api_method_all": "enum FocusMode {\n    \n    FOCUS_MODE_MANUAL = 0,\n    \n    FOCUS_MODE_CONTINUOUS_AUTO,\n    \n    FOCUS_MODE_AUTO,\n    \n    FOCUS_MODE_LOCKED\n  }", "api_method_name": "FocusMode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 260, "since": 9, "api_used": "\u662f", "lines": ["console.info(TAG + \"FocusMode FOCUS_MODE_CONTINUO", "e is: \" + cameraObj.FocusMode.FOCUS_MODE_MANUAL);", "FocusMode(cameraObj.FocusMode.FOCUS_MODE_AUTO, as", "TO SUCCESS, current FocusMode is: \" + cameraObj.F", "    camera0Input.getFocusMode(async (err, data) =", "FocusMode(cameraObj.FocusMode.FOCUS_MODE_LOCKED, ", "UTO : \" + cameraObj.FocusMode.FOCUS_MODE_CONTINUO", "KED : \" + cameraObj.FocusMode.FOCUS_MODE_LOCKED);", "Supported(cameraObj.FocusMode.FOCUS_MODE_LOCKED, ", "FocusMode(cameraObj.FocusMode.FOCUS_MODE_LOCKED);", "ED SUCCESS, current FocusMode is: \" + cameraObj.F", "UTO : \" + cameraObj.FocusMode.FOCUS_MODE_AUTO);\n\t", "Supported(cameraObj.FocusMode.FOCUS_MODE_AUTO, as", "Supported(cameraObj.FocusMode.FOCUS_MODE_LOCKED);", "    camera0Input.setFocusMode(cameraObj.FocusMode", "console.info(TAG + \"FocusMode FOCUS_MODE_MANUAL :", "info(TAG + \"Current FocusMode is: \" + data);\n    ", "era0InputPromise.setFocusMode(cameraObj.FocusMode", "\n\t\texpect(cameraObj.FocusMode.FOCUS_MODE_MANUAL).", "console.info(TAG + \"FocusMode FOCUS_MODE_LOCKED :", "US SUCCESS, current FocusMode is: \" + cameraObj.F", "e is: \" + cameraObj.FocusMode.FOCUS_MODE_LOCKED);", "FocusMode(cameraObj.FocusMode.FOCUS_MODE_CONTINUO", "UAL : \" + cameraObj.FocusMode.FOCUS_MODE_MANUAL);", "AL SUCCESS, current FocusMode is: \" + cameraObj.F", "\n\t\texpect(cameraObj.FocusMode.FOCUS_MODE_LOCKED).", "mera0InputPromise.isFocusModeSupported(cameraObj.", "Supported(cameraObj.FocusMode.FOCUS_MODE_CONTINUO", "FocusMode(cameraObj.FocusMode.FOCUS_MODE_MANUAL, ", "e is: \" + cameraObj.FocusMode.FOCUS_MODE_AUTO);\n ", "AG + \"--------------FocusMode ------------\")\n    ", "\n\t\texpect(cameraObj.FocusMode.FOCUS_MODE_CONTINUO", "e is: \" + cameraObj.FocusMode.FOCUS_MODE_CONTINUO", "Supported(cameraObj.FocusMode.FOCUS_MODE_MANUAL, ", "\n\t\texpect(cameraObj.FocusMode.FOCUS_MODE_AUTO).as", "console.info(TAG + \"FocusMode FOCUS_MODE_AUTO : \"", "     camera0Input.isFocusModeSupported(cameraObj."], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FocusMode", "api_method_name": "FOCUS_MODE_MANUAL", "api_method_all": "FOCUS_MODE_MANUAL = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 221, "since": 9, "api_used": "\u662f", "lines": ["ole.info(TAG + \"GET_FOCUS_MODE_MANUAL FAILED\" + err.messa", "ole.info(TAG + \"GET_FOCUS_MODE_MANUAL ends here\");\n      ", "cameraObj.FocusMode.FOCUS_MODE_MANUAL);\n          console", "console.info(TAG + \"FOCUS_MODE_MANUAL_SUPPORTED is: \" + i", "TAG + \"Entering SET_FOCUS_MODE_MANUAL PASSED\")\n          ", "l 0\n\t*/\n\n    it('IS_FOCUS_MODE_MANUAL_SUPPORTED', 0, asyn", "TAG + \"Entering SET_FOCUS_MODE_MANUAL FAILED\" + err.messa", "TAG + \"Entering SET_FOCUS_MODE_MANUAL PASSED\")\n        ex", " @tc.number    : IS_FOCUS_MODE_MANUAL_SUPPORTED\n      * @", "sole.info(TAG + \"IS_FOCUS_MODE_MANUAL_SUPPORTED FAILED\");", " 0\n\t*/\n\n    it('GET_FOCUS_MODE_MANUAL', 0, async function", "sole.info(TAG + \"IS_FOCUS_MODE_MANUAL_SUPPORTED ends here", "TAG + \"Entering SET_FOCUS_MODE_MANUAL SUCCESS, current Fo", "ole.info(TAG + \"GET_FOCUS_MODE_MANUAL data is not null ||", "TAG + \"Entering GET_FOCUS_MODE_MANUAL SUCCESS\");\n        ", " 0\n\t*/\n\n    it('SET_FOCUS_MODE_MANUAL', 0, async function", "@tc.number    : SET_FOCUS_MODE_MANUAL\n      * @tc.name   ", "TAG + \"Entering SET_FOCUS_MODE_MANUAL to operate\");\n     ", "TAG + \"Entering SET_FOCUS_MODE_MANUAL FAILED\");\n        c", "fo(TAG + \"FocusMode FOCUS_MODE_MANUAL : \" + cameraObj.Foc", "sole.info(TAG + \"IS_FOCUS_MODE_MANUAL_SUPPORTED FAILED\" +", "cameraObj.FocusMode.FOCUS_MODE_MANUAL);\n      if (isFMman", "cameraObj.FocusMode.FOCUS_MODE_MANUAL);\n      console.inf", "cameraObj.FocusMode.FOCUS_MODE_MANUAL).assertEqual(0);\n  ", "(TAG + \"Entering IS_FOCUS_MODE_MANUAL_SUPPORTED SUCCESS \"", "el 0\n\t*/\n    it('IS_FOCUS_MODE_MANUAL_SUPPORTED', 0, asyn", "cameraObj.FocusMode.FOCUS_MODE_MANUAL);\n        console.i", "l 0\n\t*/\n    it('SET_FOCUS_MODE_MANUAL', 0, async function", "(TAG + \"Entering IS_FOCUS_MODE_MANUAL_SUPPORTED data is n", "cameraObj.FocusMode.FOCUS_MODE_MANUAL);\n\t\texpect(cameraOb", "@tc.number    : GET_FOCUS_MODE_MANUAL\n      * @tc.name   ", "cameraObj.FocusMode.FOCUS_MODE_MANUAL, async (err, data) ", "(TAG + \"Entering IS_FOCUS_MODE_MANUAL_SUPPORTED PASSED: \"", "console.info(TAG + \"FOCUS_MODE_MANUAL_SUPPORTED is: \" + d", "TAG + \"Entering SET_FOCUS_MODE_MANUAL ends here\");\n      ", "ole.info(TAG + \"GET_FOCUS_MODE_MANUAL PASSED\");\n\n        ", "TAG + \"Entering GET_FOCUS_MODE_MANUAL to operate\");\n     ", "(TAG + \"Entering IS_FOCUS_MODE_MANUAL_SUPPORTED to operat"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FocusMode", "api_method_name": "FOCUS_MODE_CONTINUOUS_AUTO", "api_method_all": "FOCUS_MODE_CONTINUOUS_AUTO,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 30, "since": 9, "api_used": "\u662f", "lines": ["cameraObj.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n      expect(came", "cameraObj.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n          if (dat", "cameraObj.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO).assertEqual(1);\n  ", "cameraObj.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO, async (err, data) ", "cameraObj.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n      console.inf", "cameraObj.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n        console.i", "cameraObj.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n\t\texpect(cameraOb", "fo(TAG + \"FocusMode FOCUS_MODE_CONTINUOUS_AUTO : \" + cameraObj.Foc", "cameraObj.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO).assertEqual(1);\n\tc", "cameraObj.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n          expect(", "cameraObj.FocusMode.FOCUS_MODE_CONTINUOUS_AUTO);\n      if (isFMCon"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FocusMode", "api_method_name": "FOCUS_MODE_AUTO", "api_method_all": "FOCUS_MODE_AUTO,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 210, "since": 9, "api_used": "\u662f", "lines": ["(TAG + \"Entering IS_FOCUS_MODE_AUTO_SUPPORTED to operat", "(TAG + \"Entering IS_FOCUS_MODE_AUTO_SUPPORTED SUCCESS \"", "ole.info(TAG + \"GET_FOCUS_MODE_AUTO FAILED\" + err.messa", "sole.info(TAG + \"IS_FOCUS_MODE_AUTO_SUPPORTED FAILED\");", "TAG + \"Entering SET_FOCUS_MODE_AUTO FAILED\");\n        c", "(TAG + \"Entering IS_FOCUS_MODE_AUTO_SUPPORTED PASSED: \"", "l 0\n\t*/\n    it('GET_FOCUS_MODE_AUTO', 0, async function", "TAG + \"Entering SET_FOCUS_MODE_AUTO to operate\");\n     ", "sole.info(TAG + \"IS_FOCUS_MODE_AUTO_SUPPORTED FAILED\" +", "cameraObj.FocusMode.FOCUS_MODE_AUTO);\n      console.inf", "TAG + \"Entering GET_FOCUS_MODE_AUTO to operate\");\n     ", "cameraObj.FocusMode.FOCUS_MODE_AUTO);\n        console.i", "TAG + \"Entering SET_FOCUS_MODE_AUTO PASSED\")\n        ex", " @tc.number    : IS_FOCUS_MODE_AUTO_SUPPORTED\n      * @", "console.info(TAG + \"FOCUS_MODE_AUTO_SUPPORTED is: \" + d", "@tc.number    : SET_FOCUS_MODE_AUTO\n      * @tc.name   ", "(TAG + \"Entering IS_FOCUS_MODE_AUTO_SUPPORTED data is n", " 0\n\t*/\n\n    it('SET_FOCUS_MODE_AUTO', 0, async function", "cameraObj.FocusMode.FOCUS_MODE_AUTO, async (err, data) ", "TAG + \"Entering SET_FOCUS_MODE_AUTO FAILED\" + err.messa", "ole.info(TAG + \"GET_FOCUS_MODE_AUTO data is not null ||", "TAG + \"Entering GET_FOCUS_MODE_AUTO SUCCESS\");\n        ", "cameraObj.FocusMode.FOCUS_MODE_AUTO).assertEqual(2);\n\tc", "TAG + \"Entering SET_FOCUS_MODE_AUTO PASSED\")\n          ", "TAG + \"Entering SET_FOCUS_MODE_AUTO SUCCESS, current Fo", "cameraObj.FocusMode.FOCUS_MODE_AUTO);\n          if (dat", "@tc.number    : GET_FOCUS_MODE_AUTO\n      * @tc.name   ", "ole.info(TAG + \"GET_FOCUS_MODE_AUTO ends here\");\n      ", "l 0\n\t*/\n    it('SET_FOCUS_MODE_AUTO', 0, async function", "TAG + \"Entering SET_FOCUS_MODE_AUTO ends here\");\n      ", "cameraObj.FocusMode.FOCUS_MODE_AUTO);\n      if (isFMAut", "cameraObj.FocusMode.FOCUS_MODE_AUTO);\n\t\texpect(cameraOb", "ole.info(TAG + \"GET_FOCUS_MODE_AUTO PASSED\");\n\n        ", "fo(TAG + \"FocusMode FOCUS_MODE_AUTO : \" + cameraObj.Foc", "sole.info(TAG + \"IS_FOCUS_MODE_AUTO_SUPPORTED ends here", "el 0\n\t*/\n    it('IS_FOCUS_MODE_AUTO_SUPPORTED', 0, asyn"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FocusState", "api_method_all": "enum FocusState {\n    \n    FOCUS_STATE_SCAN = 0,\n    \n    FOCUS_STATE_FOCUSED,\n    \n    FOCUS_STATE_UNFOCUSED\n  }", "api_method_name": "FocusState", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 33, "since": 9, "api_used": "\u662f", "lines": ["info(TAG + \"Current FocusState is: \" + data);\n    ", "\n\t\texpect(cameraObj.FocusState.FOCUS_STATE_SCAN).a", "      }\n    })\n\t\n\t//FocusState callback\n    /**\n  ", "CAN : \" + cameraObj.FocusState.FOCUS_STATE_SCAN);\n", "\n\t\texpect(cameraObj.FocusState.FOCUS_STATE_UNFOCUS", "console.info(TAG + \"FocusState FOCUS_STATE_UNFOCUS", "console.info(TAG + \"FocusState FOCUS_STATE_FOCUSED", "   expect(cameraObj.FocusState.FOCUS_STATE_FOCUSED", "();\n    })\n\t\n\t\n\t  //FocusState callback\n    \n//   ", "console.info(TAG + \"FocusState FOCUS_STATE_SCAN : ", "\n\t\texpect(cameraObj.FocusState.FOCUS_STATE_FOCUSED", "   expect(cameraObj.FocusState.FOCUS_STATE_UNFOCUS", "info(TAG + \"Current FocusState is: \" + data);\n//  ", "SED : \" + cameraObj.FocusState.FOCUS_STATE_FOCUSED", "   expect(cameraObj.FocusState.FOCUS_STATE_SCAN).a", "SED : \" + cameraObj.FocusState.FOCUS_STATE_UNFOCUS", "AG + \"--------------FocusState ------------\")\n    ", "    }\n    })\n\n    //FocusState callback\n    \n//   ", "console.info(TAG + \"FocusState callback is success"], "files": ["CameraJSUnitEnum.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitCameraFormat.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FocusState", "api_method_name": "FOCUS_STATE_SCAN", "api_method_all": "FOCUS_STATE_SCAN = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["ameraObj.FocusState.FOCUS_STATE_SCAN).assertEqual(0);\n  ", "ameraObj.FocusState.FOCUS_STATE_SCAN);\n\t\texpect(cameraOb", "ameraObj.FocusState.FOCUS_STATE_SCAN);\n      expect(came", "o(TAG + \"FocusState FOCUS_STATE_SCAN : \" + cameraObj.Foc"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FocusState", "api_method_name": "FOCUS_STATE_FOCUSED", "api_method_all": "FOCUS_STATE_FOCUSED,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["ameraObj.FocusState.FOCUS_STATE_FOCUSED).assertEqual(1);\n  ", "ameraObj.FocusState.FOCUS_STATE_FOCUSED);\n      expect(came", "ameraObj.FocusState.FOCUS_STATE_FOCUSED).assertEqual(1);\n\tc", "ameraObj.FocusState.FOCUS_STATE_FOCUSED);\n\t\texpect(cameraOb", "o(TAG + \"FocusState FOCUS_STATE_FOCUSED : \" + cameraObj.Foc"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_all": "interface CaptureSession {\n    \n    beginConfig(callback: AsyncCallback<void>): void;\n\n    \n    beginConfig(): Promise<void>;\n\n    \n    commitConfig(callback: AsyncCallback<void>): void;\n\n    \n    commitConfig(): Promise<void>;\n\n    \n    addInput(cameraInput: CameraInput, callback: AsyncCallback<void>): void;\n\n    \n    addInput(cameraInput: CameraInput): Promise<void>;\n\n    \n    addOutput(previewOutput: PreviewOutput, callback: AsyncCallback<void>): void;\n\n    \n    addOutput(previewOutput: PreviewOutput): Promise<void>;\n\n    \n    addOutput(photoOutput: PhotoOutput, callback: AsyncCallback<void>): void;\n\n    \n    addOutput(photoOutput: PhotoOutput): Promise<void>;\n\n    \n    addOutput(videoOutput: VideoOutput, callback: AsyncCallback<void>): void;\n\n    \n    addOutput(videoOutput: VideoOutput): Promise<void>;\n\n    \n    removeInput(cameraInput: CameraInput, callback: AsyncCallback<void>): void;\n\n    \n    removeInput(cameraInput: CameraInput): Promise<void>;\n\n    \n    removeOutput(previewOutput: PreviewOutput, callback: AsyncCallback<void>): void;\n\n    \n    removeOutput(previewOutput: PreviewOutput): Promise<void>;\n\n    \n    removeOutput(photoOutput: PhotoOutput, callback: AsyncCallback<void>): void;\n\n    \n    removeOutput(photoOutput: PhotoOutput): Promise<void>;\n\n    \n    removeOutput(videoOutput: VideoOutput, callback: AsyncCallback<void>): void;\n\n    \n    removeOutput(videoOutput: VideoOutput): Promise<void>;\n\n    \n    start(callback: AsyncCallback<void>): void;\n\n    \n    start(): Promise<void>;\n\n    \n    stop(callback: AsyncCallback<void>): void;\n\n    \n    stop(): Promise<void>;\n\n    \n    release(callback: AsyncCallback<void>): void;\n\n    \n    release(): Promise<void>;\n\n    \n    on(type: 'error', callback: ErrorCallback<CaptureSessionError>): void;\n  }", "api_method_name": "CaptureSession", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 189, "since": 9, "api_used": "\u662f", "lines": ["nst Promise = await CaptureSessionPromise.removeOutput", "    cameraObj.createCaptureSession(null, async (err, d", "   }\n    })\n\n\n    /*CaptureSession APIs test script*/\n", " operate\");\n        CaptureSessionPromise.on(\"error\", ", "done) {\n        if (CaptureSessionPromise == null || C", "  * @tc.name      : CaptureSession callback on error a", "nPromise != null || CaptureSessionPromise != undefined", "nPromise == null || CaptureSessionPromise == undefined", "    }\n    })\n\n    /*CaptureSession APIs*/\n    /**\n    ", "G + \"Entering createCaptureSession success\");\n      if", "nst Promise = await CaptureSessionPromise.addInput(cam", " (done) {\n      if (CaptureSessionPromise == null || C", "G + \"Entering createCaptureSession PASSED\");\n      }\n ", "to operate\");\n      CaptureSessionPromise = await came", " }\n    })\n\t\n\t\n    /*CaptureSession APIs*/\n    /**\n    ", "nst promise = await CaptureSessionPromise.addOutput(ph", "nst Promise = await CaptureSessionPromise.removeInput(", "  * @tc.desc      : CaptureSession callback on error a", "  * @tc.desc      : CaptureSession_Begin config promis", "  * @tc.name      : CaptureSession_Begin config api\n  ", "G + \"Entering createCaptureSession data is not null ||", "ait cameraObj.createCaptureSession(null);\n      consol", "G + \"Entering createCaptureSession ends here\");\n      ", "  * @tc.desc      : CaptureSession_Begin config api\n  ", "uccess\");\n      if (CaptureSessionPromise != null || C", "nst promise = await CaptureSessionPromise.addOutput(pr", "nst promise = await CaptureSessionPromise.beginConfig(", "G + \"Entering createCaptureSession success\");\n        ", "oOutputPromise;\nvar CaptureSessionPromise;\nvar surface", "  * @tc.name      : CaptureSession_Begin config promis", "G + \"Entering createCaptureSession PASSED\");\n         ", "nfo(TAG + \"Error in CaptureSessioncallback with ErrorC"], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "beginConfig", "api_method_all": "beginConfig(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 27, "since": 9, "api_used": "\u662f", "lines": ["ptureSessionPromise.beginConfig()\n        expect(true).assertTrue()\n   ", "FIG_SUCCESS_PROMISE beginConfig PASSED\");\n        }\n        else {\n    ", "     captureSession.beginConfig(async (err, data) => {\n          if (!e", "ptureSessionPromise.beginConfig();\n        console.info(TAG + \"Entering", "nfo(TAG + \"Entering beginConfig ends here\");\n        await sleep(1000);", "CREATE_BEGIN_CONFIG beginConfig data is not null || undefined: \" + JSON", "EGIN_CONFIG_SUCCESS beginConfig PASSED\");\n            }\n          } els", "nfo(TAG + \"Entering beginConfig FAILED\");\n        }\n        console.inf", "fo(TAG + \"Entering  beginConfig success\");\n            if (data != null", "     captureSession.beginConfig((err, data) => {\n          if (!err) {\n", "wait captureSession.beginConfig();\n        await captureSession.addInpu", "fo(TAG + \"Entering  beginConfig success\");\n        if (promise != null ", "CREATE_BEGIN_CONFIG beginConfig data is not null || undefined\");\n      "], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "beginConfig", "api_method_all": "beginConfig(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "commitConfig", "api_method_all": "commitConfig(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 27, "since": 9, "api_used": "\u662f", "lines": ["ptureSessionPromise.commitConfig()\n        expect(true).assertTrue()\n   ", "MMIT_CONFIG_SUCCESS commitConfig ends here\");\n        }\n        await sl", "     captureSession.commitConfig((err, data) => {\n          if (!err) {\n", "MMIT_CONFIG_SUCCESS commitConfig success\");\n        if (promise != null ", "MMIT_CONFIG_SUCCESS commitConfig FAILED\");\n          console.info(TAG + ", "MMIT_CONFIG_SUCCESS commitConfig FAILED\" + err.message);\n            con", "MMIT_CONFIG_SUCCESS commitConfig PASSED\");\n            }\n          } els", "     captureSession.commitConfig(async (err, data) => {\n          if (!e", "MMIT_CONFIG_SUCCESS commitConfig PASSED\");\n        }\n        else {\n    ", "MMIT_CONFIG_SUCCESS commitConfig success\");\n            if (data != null", "wait captureSession.commitConfig();\n        await captureSession.start()", "MMIT_CONFIG_SUCCESS commitConfig ends here\");\n          }\n          awai", "ptureSessionPromise.commitConfig();\n        console.info(TAG + \"Entering"], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "commitConfig", "api_method_all": "commitConfig(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "addInput", "api_method_all": "addInput(cameraInput: CameraInput, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 59, "since": 9, "api_used": "\u662f", "lines": ["     captureSession.addInput(camera0Input, async (err, data) => {\n  ", "VIEW_OUTPUT_SUCCESS addInput success \" + Promise);\n        if (Promi", "PUT_SUCCESS_PROMISE addInput data is not null || undefined\");\n      ", "PUT_SUCCESS_PROMISE addInput success\");\n        if (Promise != null ", "EMOVE_INPUT_SUCCESS addInput success \" + Promise);\n        if (Promi", "EMOVE_INPUT_SUCCESS addInput PASSED\");\n        }\n        else {\n    ", "EMOVE_INPUT_SUCCESS addInput success \"+Promise);\n        if (Promise", "g ADD_INPUT_SUCCESS addInput data is not null || undefined\");\n      ", "g ADD_INPUT_SUCCESS addInput PASSED\");\n            }\n          } els", "     captureSession.addInput(camera0Input, (err, data) => {\n        ", "PUT_SUCCESS_PROMISE addInput PASSED\");\n        }\n        else {\n    ", "g ADD_INPUT_SUCCESS addInput success\");\n            if (data != null", "ptureSessionPromise.addInput(camera0InputPromise)\n        expect(tru", "ptureSessionPromise.addInput(camera0InputPromise);\n        console.i", "EMOVE_INPUT_SUCCESS addInput data is not null || undefined\");\n      "], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "addInput", "api_method_all": "addInput(cameraInput: CameraInput): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "addOutput", "api_method_all": "addOutput(previewOutput: PreviewOutput, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 31, "since": 9, "api_used": "\u662f", "lines": ["ptureSessionPromise.addOutput(photoOutputPromise);\n        console.in", "ptureSessionPromise.addOutput(previewOutputPromise);\n        console.", "     captureSession.addOutput(previewOutput, (err, data) => {\n       ", "ptureSessionPromise.addOutput(videoOutputPromise)\n        expect(true", "     captureSession.addOutput(previewOutputAsync, async (err, data) =", "     captureSession.addOutput(photoOutputAsync, async (err, data) => ", "     captureSession.addOutput(videoOutput, (err, data) => {\n         ", "ptureSessionPromise.addOutput(previewOutputPromise)\n        expect(tr", "wait captureSession.addOutput(videoOutPut);\n        await captureSess", "     captureSession.addOutput(videoOutput, async (err, data) => {\n   "], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "addOutput", "api_method_all": "addOutput(previewOutput: PreviewOutput): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "addOutput", "api_method_all": "addOutput(photoOutput: PhotoOutput, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 31, "since": 9, "api_used": "\u662f", "lines": ["ptureSessionPromise.addOutput(photoOutputPromise);\n        console.in", "ptureSessionPromise.addOutput(previewOutputPromise);\n        console.", "     captureSession.addOutput(previewOutput, (err, data) => {\n       ", "ptureSessionPromise.addOutput(videoOutputPromise)\n        expect(true", "     captureSession.addOutput(previewOutputAsync, async (err, data) =", "     captureSession.addOutput(photoOutputAsync, async (err, data) => ", "     captureSession.addOutput(videoOutput, (err, data) => {\n         ", "ptureSessionPromise.addOutput(previewOutputPromise)\n        expect(tr", "wait captureSession.addOutput(videoOutPut);\n        await captureSess", "     captureSession.addOutput(videoOutput, async (err, data) => {\n   "], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "addOutput", "api_method_all": "addOutput(photoOutput: PhotoOutput): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "addOutput", "api_method_all": "addOutput(videoOutput: VideoOutput, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 31, "since": 9, "api_used": "\u662f", "lines": ["ptureSessionPromise.addOutput(photoOutputPromise);\n        console.in", "ptureSessionPromise.addOutput(previewOutputPromise);\n        console.", "     captureSession.addOutput(previewOutput, (err, data) => {\n       ", "ptureSessionPromise.addOutput(videoOutputPromise)\n        expect(true", "     captureSession.addOutput(previewOutputAsync, async (err, data) =", "     captureSession.addOutput(photoOutputAsync, async (err, data) => ", "     captureSession.addOutput(videoOutput, (err, data) => {\n         ", "ptureSessionPromise.addOutput(previewOutputPromise)\n        expect(tr", "wait captureSession.addOutput(videoOutPut);\n        await captureSess", "     captureSession.addOutput(videoOutput, async (err, data) => {\n   "], "files": ["CameraJSUnitPhotoPromise.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "addOutput", "api_method_all": "addOutput(videoOutput: VideoOutput): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "removeInput", "api_method_all": "removeInput(cameraInput: CameraInput, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["     captureSession.removeInput(camera0Input, async (err, data) => {\n\t\t", "     captureSession.removeInput(camera0Input, async (err, data) => {\n  ", "ptureSessionPromise.removeInput(camera0InputPromise);\n        console.i"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "removeInput", "api_method_all": "removeInput(cameraInput: CameraInput): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "removeOutput", "api_method_all": "removeOutput(previewOutput: PreviewOutput, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 12, "since": 9, "api_used": "\u662f", "lines": ["     captureSession.removeOutput(previewOutput, async (err, data) => {\n ", "ptureSessionPromise.removeOutput(photoOutputPromise);\n        console.in", "     captureSession.removeOutput(previewOutputAsync, async (err, data) =", "     captureSession.removeOutput(videoOutput, async (err, data) => {\n   ", "ptureSessionPromise.removeOutput(previewOutputPromise);\n        console.", "     captureSession.removeOutput(photoOutputAsync, async (err, data) => ", "ptureSessionPromise.removeOutput(videoOutputPromise);\n        console.in"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "removeOutput", "api_method_all": "removeOutput(previewOutput: PreviewOutput): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "removeOutput", "api_method_all": "removeOutput(photoOutput: PhotoOutput, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 12, "since": 9, "api_used": "\u662f", "lines": ["     captureSession.removeOutput(previewOutput, async (err, data) => {\n ", "ptureSessionPromise.removeOutput(photoOutputPromise);\n        console.in", "     captureSession.removeOutput(previewOutputAsync, async (err, data) =", "     captureSession.removeOutput(videoOutput, async (err, data) => {\n   ", "ptureSessionPromise.removeOutput(previewOutputPromise);\n        console.", "     captureSession.removeOutput(photoOutputAsync, async (err, data) => ", "ptureSessionPromise.removeOutput(videoOutputPromise);\n        console.in"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "removeOutput", "api_method_all": "removeOutput(photoOutput: PhotoOutput): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "removeOutput", "api_method_all": "removeOutput(videoOutput: VideoOutput, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 12, "since": 9, "api_used": "\u662f", "lines": ["     captureSession.removeOutput(previewOutput, async (err, data) => {\n ", "ptureSessionPromise.removeOutput(photoOutputPromise);\n        console.in", "     captureSession.removeOutput(previewOutputAsync, async (err, data) =", "     captureSession.removeOutput(videoOutput, async (err, data) => {\n   ", "ptureSessionPromise.removeOutput(previewOutputPromise);\n        console.", "     captureSession.removeOutput(photoOutputAsync, async (err, data) => ", "ptureSessionPromise.removeOutput(videoOutputPromise);\n        console.in"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "removeOutput", "api_method_all": "removeOutput(videoOutput: VideoOutput): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "start", "api_method_all": "start(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 1221, "since": 9, "api_used": "\u662f", "lines": ["rLog: renderInstant started :SUCCESS ');\n        }).catch((err) =", "orkRecLog: Capturer start :ERROR : '+err.message);\n            re", "rLog: renderInstant start :ERROR : '+err.message);\n            re", "orkRecLog: Capturer started :SUCCESS ');\n        }).catch((err) =", "ew Date().getTime()-startTime;\n        let avgTime = waitTime/MAX", "ger(); \n        let startTime = new Date().getTime();\n        for"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "start", "api_method_all": "start(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 128, "since": 9, "api_used": "\u662f", "lines": ["wait ringtonePlayer.start().then(async function () {\n\t\t\tconsole.l", "     await audioRen.start().then(async function () {\n         con", "wait ringtonePlayer.start().then(async function () {\n\t\t\tawait sle", " ringtonePlayerTemp.start().then(async function () {\n\t\t\tconsole.l", "     await audioRen.start().then(async function (started) {\n     ", "await audioCapturer.start().then(async function (started) {\n     ", "wait ringtonePlayer.start().then(async function () {\n            ", "     ringtonePlayer.start().then(function () {\n            consol", "wait ringtonePlayer.start().then(async function () {\n\t\t\t\t\tconsole", "wait ringtonePlayer.start().then(async function () {\n\t\t\t\tconsole.", "\n\n\t\t\tringtonePlayer.start().then(async function () {\n            ", "     await audioRen.start().then(async function () {\n            ", "ait audioCapPromise.start().then(async function () {\n            ", "wait ringtonePlayer.start().then(function () {\n\t\t\t\t\tconsole.log('", "     ringtonePlayer.start().then(async function () {\n            ", "     await audioCap.start().then(async function () {\n            "], "files": ["VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "stop", "api_method_all": "stop(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 833, "since": 9, "api_used": "\u662f", "lines": ["RenderLog: Renderer stopped : SUCCESS');\n            resultFlag=", "RenderLog: Renderer stopped');\n             resultFlag=true;\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n\n     ", "RenderLog: Renderer stop:ERROR : '+err.message);\n         result", "orkRecLog: Capturer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n     a", "RenderLog: Renderer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stop failed: Error: ${err.message}`);\n      ", "orkRecLog: Capturer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stopped : SUCCESS');\n     }).catch((err) => ", "RenderLog: Renderer stopped : SUCCESS');\n        }).catch((err) ", "    }\n     audioRen.stop((err, state) => {\n         if (err) {\n ", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n  ", "RenderLog: Renderer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n\n "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "stop", "api_method_all": "stop(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 99, "since": 9, "api_used": "\u662f", "lines": ["   eventEmitter.on('stop', () => {\n            sleep(5000).then(", "wait ringtonePlayer.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function (stopped) {\n     ", "wait ringtonePlayer.stop().then(function () {\n            consol", "await audioCapturer.stop().then(async function (data) {\n        ", "     await audioCap.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function () {\n         con", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tawait sl", "udioDecodeProcessor.stop().then(() => {\n            console.info", "     await audioRen.stop().then(async function () {\n            ", "udioDecodeProcessor.stop().then(() => {\n                console.", "wait ringtonePlayer.stop().then(async function() {\n\t\t\t\tconsole.e", "udioDecodeProcessor.stop().then(() => {\n                    cons", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tconsole.", "wait ringtonePlayer.stop().then(function () {\n                co", ");\n\t\tringtonePlayer.stop().then(function () {\n                co", "\n\t\t\t\tringtonePlayer.stop().then(function () {\n\t\t\t\tconsole.log('A", "ait audioCapPromise.stop().then(async function () {\n            ", "wait ringtonePlayer.stop().then(function(){\n\t\t\tconsole.log('Audi"], "files": ["VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 9, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 9, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSession", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback<CaptureSessionError>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSessionErrorCode", "api_method_all": "enum CaptureSessionErrorCode {\n    ERROR_UNKNOWN = -1\n  }", "api_method_name": "CaptureSessionErrorCode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSessionErrorCode", "api_method_name": "ERROR_UNKNOWN", "api_method_all": "ERROR_UNKNOWN = -1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSessionError", "api_method_all": "interface CaptureSessionError extends Error {\n    code: CaptureSessionErrorCode;\n  }", "api_method_name": "CaptureSessionError", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureSessionError", "api_method_name": "code", "api_method_all": "code: CaptureSessionErrorCode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2380, "since": 9, "api_used": "\u662f", "lines": ["ErrorCode: \" + data.code);\n                 ", "  2.set index and DecodeOptions\n     *      ", "ErrorCode: \" + data.code);\n              exp", "  2.set index and DecodeOptions\n         *  "], "files": ["AudioDecoderFormatCallbackTest.test.js", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderEnumTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "CameraJSUnitPhotoAsync.test.ets", "AudioRecorderEnumTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewOutput", "api_method_all": "interface PreviewOutput {\n    \n    release(callback: AsyncCallback<void>): void;\n\n    \n    release(): Promise<void>;\n\n    \n    on(type: 'frameStart', callback: AsyncCallback<void>): void;\n\n    \n    on(type: 'frameEnd', callback: AsyncCallback<void>): void;\n\n    \n    on(type: 'error', callback: ErrorCallback<PreviewOutputError>): void;\n  }", "api_method_name": "PreviewOutput", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 48, "since": 9, "api_used": "\u662f", "lines": ["  * @tc.name      : PreviewOutput callback onframeend", "  * @tc.name      : PreviewOutput callback onerror as", "TAG + \"Error during PreviewOutput with ErrorCode: \" +", "+ \" Entering  createPreviewOutput success\");\n        ", "  * @tc.name      : PreviewOutput release api\n      *", "+ \" Entering  createPreviewOutput success\");\n      if", "  * @tc.desc      : PreviewOutput release api\n      *", "  * @tc.desc      : PreviewOutput callback onerror as", "ait cameraObj.createPreviewOutput(surfaceId);\n      c", " + \" Entering createPreviewOutput data is not null ||", "    cameraObj.createPreviewOutput(surfaceId, async (e", "G + \"Entering createPreviewOutput FAILED\");\n        c", "    cameraObj.createPreviewOutput(surfaceId, (err, da", "G + \"Entering createPreviewOutput PASSED: \" + JSON.st", "G + \"Entering createPreviewOutput ends here\");\n      ", "  * @tc.desc      : PreviewOutput callback onframeend", "console.info(TAG + \"PreviewOutputError callback is su", "ait cameraObj.createPreviewOutput(surfaceId)\n      co"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewOutput", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 9, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewOutput", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 9, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewOutput", "api_method_name": "on", "api_method_all": "on(type: 'frameStart', callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewOutput", "api_method_name": "on", "api_method_all": "on(type: 'frameEnd', callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewOutput", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback<PreviewOutputError>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewOutputErrorCode", "api_method_all": "enum PreviewOutputErrorCode {\n    ERROR_UNKNOWN = -1\n  }", "api_method_name": "PreviewOutputErrorCode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewOutputErrorCode", "api_method_name": "ERROR_UNKNOWN", "api_method_all": "ERROR_UNKNOWN = -1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewOutputError", "api_method_all": "interface PreviewOutputError extends Error {\n    code: PreviewOutputErrorCode;\n  }", "api_method_name": "PreviewOutputError", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 8, "since": 9, "api_used": "\u662f", "lines": ["console.info(TAG + \"PreviewOutputError callback is success"], "files": ["CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PreviewOutputError", "api_method_name": "code", "api_method_all": "code: PreviewOutputErrorCode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2380, "since": 9, "api_used": "\u662f", "lines": ["ErrorCode: \" + data.code);\n                 ", "  2.set index and DecodeOptions\n     *      ", "ErrorCode: \" + data.code);\n              exp", "  2.set index and DecodeOptions\n         *  "], "files": ["AudioDecoderFormatCallbackTest.test.js", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderEnumTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "CameraJSUnitPhotoAsync.test.ets", "AudioRecorderEnumTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRotation", "api_method_all": "enum ImageRotation {\n    \n    ROTATION_0 = 0,\n\n    \n    ROTATION_90 = 90,\n\n    \n    ROTATION_180 = 180,\n\n    \n    ROTATION_270 = 270\n  }", "api_method_name": "ImageRotation", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 28, "since": 9, "api_used": "\u662f", "lines": ["\n\t\texpect(cameraObj.ImageRotation.ROTATION_0).assertE", "_90 : \" + cameraObj.ImageRotation.ROTATION_90);\n\t\texp", "console.info(TAG + \"ImageRotation ROTATION_180 : \" + ", "N_0 : \" + cameraObj.ImageRotation.ROTATION_0);\n\t\texpe", "180 : \" + cameraObj.ImageRotation.ROTATION_180);\n\t\tex", "\n\t\texpect(cameraObj.ImageRotation.ROTATION_270).asser", "\n\t\texpect(cameraObj.ImageRotation.ROTATION_180).asser", "AG + \"--------------ImageRotation ------------\")\n    ", "180 : \" + cameraObj.ImageRotation.ROTATION_180);\n    ", "   })\n\n    \n    it('ImageRotation', 0, async function", "   expect(cameraObj.ImageRotation.ROTATION_180).asser", "   expect(cameraObj.ImageRotation.ROTATION_270).asser", "N_0 : \" + cameraObj.ImageRotation.ROTATION_0);\n      ", "console.info(TAG + \"ImageRotation ROTATION_270 : \" + ", "();\n\t})\n\t\n\t\n    it('ImageRotation', 0, async function", "   expect(cameraObj.ImageRotation.ROTATION_90).assert", "270 : \" + cameraObj.ImageRotation.ROTATION_270);\n\t\tex", "console.info(TAG + \"ImageRotation ROTATION_0 : \" + ca", "\n\t\texpect(cameraObj.ImageRotation.ROTATION_90).assert", "   expect(cameraObj.ImageRotation.ROTATION_0).assertE", "_90 : \" + cameraObj.ImageRotation.ROTATION_90);\n     ", "270 : \" + cameraObj.ImageRotation.ROTATION_270);\n    ", "console.info(TAG + \"ImageRotation ROTATION_90 : \" + c"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRotation", "api_method_name": "ROTATION_0", "api_method_all": "ROTATION_0 = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["raObj.ImageRotation.ROTATION_0).assertEqual(0);\n  ", "raObj.ImageRotation.ROTATION_0);\n\t\texpect(cameraOb", "AG + \"ImageRotation ROTATION_0 : \" + cameraObj.Ima", "raObj.ImageRotation.ROTATION_0);\n      expect(came"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRotation", "api_method_name": "ROTATION_90", "api_method_all": "ROTATION_90 = 90,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["raObj.ImageRotation.ROTATION_90);\n\t\texpect(cameraOb", "raObj.ImageRotation.ROTATION_90).assertEqual(90);\n\t", "AG + \"ImageRotation ROTATION_90 : \" + cameraObj.Ima", "raObj.ImageRotation.ROTATION_90);\n      expect(came", "raObj.ImageRotation.ROTATION_90).assertEqual(90);\n "], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRotation", "api_method_name": "ROTATION_180", "api_method_all": "ROTATION_180 = 180,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["AG + \"ImageRotation ROTATION_180 : \" + cameraObj.Ima", "raObj.ImageRotation.ROTATION_180);\n      expect(came", "raObj.ImageRotation.ROTATION_180).assertEqual(180);\n", "raObj.ImageRotation.ROTATION_180);\n\t\texpect(cameraOb"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "ImageRotation", "api_method_name": "ROTATION_270", "api_method_all": "ROTATION_270 = 270", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["AG + \"ImageRotation ROTATION_270 : \" + cameraObj.Ima", "raObj.ImageRotation.ROTATION_270);\n      expect(came", "raObj.ImageRotation.ROTATION_270);\n\t\texpect(cameraOb", "raObj.ImageRotation.ROTATION_270).assertEqual(270);\n"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "QualityLevel", "api_method_all": "enum QualityLevel {\n    \n    QUALITY_LEVEL_HIGH = 0,\n\n    \n    QUALITY_LEVEL_MEDIUM,\n\n    \n    QUALITY_LEVEL_LOW\n  }", "api_method_name": "QualityLevel", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 22, "since": 9, "api_used": "\u662f", "lines": ["();\n\t})\n\t\n\t\n    it('QualityLevel', 0, async function", "\n\t\texpect(cameraObj.QualityLevel.QUALITY_LEVEL_HIGH)", "\n\t\texpect(cameraObj.QualityLevel.QUALITY_LEVEL_MEDIU", "   expect(cameraObj.QualityLevel.QUALITY_LEVEL_HIGH)", "console.info(TAG + \"QualityLevel QUALITY_LEVEL_LOW :", "AG + \"--------------QualityLevel ------------\")\n    ", "   expect(cameraObj.QualityLevel.QUALITY_LEVEL_LOW).", "\n\t\texpect(cameraObj.QualityLevel.QUALITY_LEVEL_LOW).", "console.info(TAG + \"QualityLevel QUALITY_LEVEL_MEDIU", "IUM : \" + cameraObj.QualityLevel.QUALITY_LEVEL_MEDIU", "IGH : \" + cameraObj.QualityLevel.QUALITY_LEVEL_HIGH)", "   expect(cameraObj.QualityLevel.QUALITY_LEVEL_MEDIU", "   })\n\n    \n    it('QualityLevel', 0, async function", "console.info(TAG + \"QualityLevel QUALITY_LEVEL_HIGH ", "LOW : \" + cameraObj.QualityLevel.QUALITY_LEVEL_LOW);"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "QualityLevel", "api_method_name": "QUALITY_LEVEL_HIGH", "api_method_all": "QUALITY_LEVEL_HIGH = 0,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["TAG + \"QualityLevel QUALITY_LEVEL_HIGH : \" + cameraObj.Qua", "eraObj.QualityLevel.QUALITY_LEVEL_HIGH);\n      expect(came", "eraObj.QualityLevel.QUALITY_LEVEL_HIGH);\n\t\texpect(cameraOb", "eraObj.QualityLevel.QUALITY_LEVEL_HIGH).assertEqual(0);\n  "], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "QualityLevel", "api_method_name": "QUALITY_LEVEL_MEDIUM", "api_method_all": "QUALITY_LEVEL_MEDIUM,", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 6, "since": 9, "api_used": "\u662f", "lines": ["eraObj.QualityLevel.QUALITY_LEVEL_MEDIUM).assertEqual(1);\n\tc", "TAG + \"QualityLevel QUALITY_LEVEL_MEDIUM : \" + cameraObj.Qua", "eraObj.QualityLevel.QUALITY_LEVEL_MEDIUM).assertEqual(1);\n  ", "eraObj.QualityLevel.QUALITY_LEVEL_MEDIUM);\n\t\texpect(cameraOb", "eraObj.QualityLevel.QUALITY_LEVEL_MEDIUM);\n      expect(came"], "files": ["CameraJSUnitEnum.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoCaptureSetting", "api_method_all": "interface PhotoCaptureSetting {\n    \n    quality?: QualityLevel;\n    \n    rotation?: ImageRotation;\n  }", "api_method_name": "PhotoCaptureSetting", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoCaptureSetting", "api_method_name": "quality", "api_method_all": "quality?: QualityLevel", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 26, "since": 9, "api_used": "\u662f", "lines": ["rmat:[\"image/gif\"], quality:98 }\n              ", "mat:[\"image/jpeg\"], quality:-1 }\n              ", ".assertEqual(\"codec_quality\");\n        expect(m", "mat:[\"image/jpeg\"], quality:1 }\n               ", "\n  rotation: 180,\n  quality: 2,\n}\nvar photosett", "mat:[\"image/jpeg\"], quality:100 }\n             ", "mat:[\"image/jpeg\"], quality:0 }\n               ", "urce - promise - no quality\n     * @tc.desc    ", "Source - callback - quality 0\n     * @tc.desc  ", "{\n  rotation: 90,\n  quality: 1,\n}\nvar photosett", "mat:[\"image/jpeg\"], quality:99 }\n              ", " - callback - wrong quality\n     * @tc.desc    ", "Source - callback - quality -1\n     * @tc.desc ", "rmat:[\"image/jpg\"], quality:101 }\n             ", "   let packOpts = { quality:50 }\n              ", "Source - callback - quality 100\n     * @tc.desc", " {\n  rotation: 0,\n  quality: 0,\n}\nvar photosett"], "files": ["CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets", "VideoHardwareEncoderEnumTest.test.js", "image.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoCaptureSetting", "api_method_name": "rotation", "api_method_all": "rotation?: ImageRotation", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 36, "since": 9, "api_used": "\u662f", "lines": ["hotosettings2 = {\n  rotation: 90,\n  quality: 1,\n", "hotosettings4 = {\n  rotation: 270\n}\n\nexport defa", "hotosettings4 = {\n  rotation: 270\n}\n\nvar Permiss", " @tc.name      : 21.rotation 270 (callback)\n    ", "e : 10\n    }\n    // rotation 0, 90, 180, 270\n   ", " @tc.name      : 21.rotation 270 (promise)\n     ", "        videoConfig.rotation = 270;\n        awai", " @tc.name      : 19.rotation 90 (promise)\n      ", "        videoConfig.rotation = 270;\n        let ", "        videoConfig.rotation = 180;\n        let ", "        videoConfig.rotation = 180;\n        awai", "hotosettings1 = {\n  rotation: 0,\n  quality: 0,\n}", " @tc.name      : 20.rotation 180 (callback)\n    ", "a/API.mp4',\n        rotation : 0,\n        locati", " @tc.name      : 19.rotation 90 (callback)\n     ", "        videoConfig.rotation = 90;\n        let v", "        videoConfig.rotation = 90;\n        await", " @tc.name      : 20.rotation 180 (promise)\n     ", "ia/01.mp4',\n        rotation : 0,\n        locati", "hotosettings3 = {\n  rotation: 180,\n  quality: 2,"], "files": ["CameraJSUnitPhotoAsync.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutput", "api_method_all": "interface PhotoOutput {\n    \n    capture(callback: AsyncCallback<void>): void;\n\n    \n    capture(setting: PhotoCaptureSetting, callback: AsyncCallback<void>): void;\n\n    \n    capture(setting?: PhotoCaptureSetting): Promise<void>;\n\n    \n    release(callback: AsyncCallback<void>): void;\n\n    \n    release(): Promise<void>;\n\n    \n    on(type: 'captureStart', callback: AsyncCallback<number>): void;\n\n    \n    on(type: 'frameShutter', callback: AsyncCallback<FrameShutterInfo>): void;\n\n    \n    on(type: 'captureEnd', callback: AsyncCallback<CaptureEndInfo>): void;\n\n    \n    on(type: 'error', callback: ErrorCallback<PhotoOutputError>): void;\n  }", "api_method_name": "PhotoOutput", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 26, "since": 9, "api_used": "\u662f", "lines": [" + \"Entering  createPhotoOutput success\");\n        ", " + \"Entering  createPhotoOutput data is not null ||", " + \"Entering  createPhotoOutput ends here\");\n      ", "  * @tc.name      : PhotoOutput release api\n      *", " + \"Entering  createPhotoOutput success\");\n      if", "ait cameraObj.createPhotoOutput(surfaceId1);\n      ", "    cameraObj.createPhotoOutput(surfaceId1, async (", "console.info(TAG + \"PhotoOutputError callback is su", "TAG + \"Error during PhotoOutput with ErrorCode: \" +", "  * @tc.desc      : PhotoOutput release api\n      *", "G + \"Entering createPhotoOutput ends here\");\n      "], "files": ["CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutput", "api_method_name": "capture", "api_method_all": "capture(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 928, "since": 9, "api_used": "\u662f", "lines": [":' + audioParamsGet.capturerFlags);\n        }).catch((err) => {\n   ", "r fpath = dirPath+'/capture_js.pcm';\n    var audioCapCallBack;\n    ", ":' + audioParamsGet.capturerFlags);\n            }\n        });\n     ", "amInfo,\n            capturerInfo: AudioCapturerInfo\n        }\n\n    ", "PE_MIC,\n            capturerFlags: 1\n        }\n\n        var AudioCa", "  fpath = dirPath+'/capture_js.pcm';\n        await sleep(100);\n    ", "rOptions, dirPath+'/capture_js-44100-2C-16B.pcm', audio.AudioScene.", "r fpath = dirPath+'/capture_js.pcm';\n    console.info('AudioFramewo", "YPE_MIC,\n           capturerFlags: 1\n       }\n\n       var AudioCapt", "orkRecLog: Capturer capturerFlags:' + audioParamsGet.capturerFlags)", "rOptions, dirPath+'/capture_js-44100-2C-16B-2.pcm', audio.AudioScen", "ioParams, dirPath+'/capture_js-48000-2C-32B.pcm', audio.AudioVolume", "aramsRec, dirPath+'/capture_js-48000-2C-32B-2.pcm', audio.AudioVolu", "r fpath = dirPath+'/capture_CB_js-44100-2C-S16LE-checkcbreadbuffer.", "InfoCap,\n           capturerInfo: AudioCapturerInfo\n       }\n\n     ", ":' + audioParamsGet.capturerFlags);\n            }else {\n           ", "dioFrameworkRecLog: capturer instance created as : '+streamType);\n\n"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "SR000GHLLV.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutput", "api_method_name": "capture", "api_method_all": "capture(setting: PhotoCaptureSetting, callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 928, "since": 9, "api_used": "\u662f", "lines": [":' + audioParamsGet.capturerFlags);\n        }).catch((err) => {\n   ", "r fpath = dirPath+'/capture_js.pcm';\n    var audioCapCallBack;\n    ", ":' + audioParamsGet.capturerFlags);\n            }\n        });\n     ", "amInfo,\n            capturerInfo: AudioCapturerInfo\n        }\n\n    ", "PE_MIC,\n            capturerFlags: 1\n        }\n\n        var AudioCa", "  fpath = dirPath+'/capture_js.pcm';\n        await sleep(100);\n    ", "rOptions, dirPath+'/capture_js-44100-2C-16B.pcm', audio.AudioScene.", "r fpath = dirPath+'/capture_js.pcm';\n    console.info('AudioFramewo", "YPE_MIC,\n           capturerFlags: 1\n       }\n\n       var AudioCapt", "orkRecLog: Capturer capturerFlags:' + audioParamsGet.capturerFlags)", "rOptions, dirPath+'/capture_js-44100-2C-16B-2.pcm', audio.AudioScen", "ioParams, dirPath+'/capture_js-48000-2C-32B.pcm', audio.AudioVolume", "aramsRec, dirPath+'/capture_js-48000-2C-32B-2.pcm', audio.AudioVolu", "r fpath = dirPath+'/capture_CB_js-44100-2C-S16LE-checkcbreadbuffer.", "InfoCap,\n           capturerInfo: AudioCapturerInfo\n       }\n\n     ", ":' + audioParamsGet.capturerFlags);\n            }else {\n           ", "dioFrameworkRecLog: capturer instance created as : '+streamType);\n\n"], "files": ["AudioCall.test.js", "AudioVOIP.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "SR000GHLLV.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutput", "api_method_name": "capture", "api_method_all": "capture(setting?: PhotoCaptureSetting): Promise<void>;", "api_type": "Promise", "api_args_count": 1, "api_level": 21, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutput", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 9, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutput", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 9, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutput", "api_method_name": "on", "api_method_all": "on(type: 'captureStart', callback: AsyncCallback<number>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutput", "api_method_name": "on", "api_method_all": "on(type: 'frameShutter', callback: AsyncCallback<FrameShutterInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutput", "api_method_name": "on", "api_method_all": "on(type: 'captureEnd', callback: AsyncCallback<CaptureEndInfo>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutput", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback<PhotoOutputError>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "FrameShutterInfo", "api_method_all": "interface FrameShutterInfo {\n    \n    captureId: number;\n    \n    timestamp: number;\n  }", "api_method_name": "FrameShutterInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "FrameShutterInfo", "api_method_name": "captureId", "api_method_all": "captureId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 9, "api_used": "\u662f", "lines": ["captureId: \" + data.captureId);\n              con", "utter callback with captureId: \" + data.captureId", "eStart success with captureId: \" + data);\n       ", "reEnd callback with captureId: \" + data.captureId"], "files": ["CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "FrameShutterInfo", "api_method_name": "timestamp", "api_method_all": "timestamp: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 126, "since": 9, "api_used": "\u662f", "lines": ["timestamp: \" + data.timestamp);\n              exp", "nputobject.timeMs = timestamp;\n                in", "      }\n            timestamp += 23;\n            ", ") {\n                timestamp += ES[1]/samplerate", "e {\n                timestamp += ES[frameCnt]/sam", "utter callback with timestamp: \" + data.timestamp", "ameCnt = 1;\n        timestamp = 0;\n        sawInp", "      }\n            timestamp += ES[frameCnt]/sam", "ameCnt = 1;\n    let timestamp = 0;\n    let sawInp"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoDecoderSoftwareReliPromiseTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureEndInfo", "api_method_all": "interface CaptureEndInfo {\n    \n    captureId: number;\n    \n    frameCount: number;\n  }", "api_method_name": "CaptureEndInfo", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureEndInfo", "api_method_name": "captureId", "api_method_all": "captureId: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 20, "since": 9, "api_used": "\u662f", "lines": ["captureId: \" + data.captureId);\n              con", "utter callback with captureId: \" + data.captureId", "eStart success with captureId: \" + data);\n       ", "reEnd callback with captureId: \" + data.captureId"], "files": ["CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "CaptureEndInfo", "api_method_name": "frameCount", "api_method_all": "frameCount: number", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 172, "since": 9, "api_used": "\u662f", "lines": ["untIn);\n            frameCountIn++;\n            ti", "rameCount: \" + data.frameCount);\n              exp", "e: frameCountIn ' + frameCountIn);\n            fra", "failCatch);\n        frameCountIn = 0;\n        fram", "      }\n        if (frameCountIn == ES_FRAME_SIZE.", ";\n        }\n        frameCountOut++;\n        video", "se output count:' + frameCountOut);\n            } ", "se output count:' + frameCountOut);\n        }, fai", "ountIn = 0;\n        frameCountOut = 0;\n        tim", " undefined;\n    let frameCountIn = 0;\n    let fram", "data, ES_FRAME_SIZE[frameCountIn]);\n            in", "sole.info('in case: frameCountIn ' + frameCountIn)", ";\n        }\n        frameCountOut++;\n        await", "\n        } else if (frameCountIn >= ES_FRAME_SIZE.", "reEnd callback with frameCount: \" + data.frameCoun", "ountIn = 0;\n    let frameCountOut = 0;\n    let tim", "index);\n        if (frameCountIn < ES_FRAME_SIZE.l", "gth = ES_FRAME_SIZE[frameCountIn];\n            con"], "files": ["VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoDecoderEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutputErrorCode", "api_method_all": "enum PhotoOutputErrorCode {\n    ERROR_UNKNOWN = -1\n  }", "api_method_name": "PhotoOutputErrorCode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutputErrorCode", "api_method_name": "ERROR_UNKNOWN", "api_method_all": "ERROR_UNKNOWN = -1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutputError", "api_method_all": "interface PhotoOutputError extends Error {\n    code: PhotoOutputErrorCode;\n  }", "api_method_name": "PhotoOutputError", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 4, "since": 9, "api_used": "\u662f", "lines": ["console.info(TAG + \"PhotoOutputError callback is success"], "files": ["CameraJSUnitPhotoAsync.test.ets", "CameraJSUnitPhotoPromise.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "PhotoOutputError", "api_method_name": "code", "api_method_all": "code: PhotoOutputErrorCode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2380, "since": 9, "api_used": "\u662f", "lines": ["ErrorCode: \" + data.code);\n                 ", "  2.set index and DecodeOptions\n     *      ", "ErrorCode: \" + data.code);\n              exp", "  2.set index and DecodeOptions\n         *  "], "files": ["AudioDecoderFormatCallbackTest.test.js", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderEnumTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "CameraJSUnitPhotoAsync.test.ets", "AudioRecorderEnumTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutput", "api_method_all": "interface VideoOutput {\n    \n    start(callback: AsyncCallback<void>): void;\n\n        \n    start(): Promise<void>;\n\n    \n    stop(callback: AsyncCallback<void>): void;\n\n    \n    stop(): Promise<void>;\n\n    \n    release(callback: AsyncCallback<void>): void;\n\n    \n    release(): Promise<void>;\n\n    \n    on(type: 'frameStart', callback: AsyncCallback<void>): void;\n\n    \n    on(type: 'frameEnd', callback: AsyncCallback<void>): void;\n\n    \n    on(type: 'error', callback: ErrorCallback<VideoOutputError>): void;\n  }", "api_method_name": "VideoOutput", "api_type": "", "api_level": 20, "api_args_count": 0, "api_used_count": 131, "since": 9, "api_used": "\u662f", "lines": ["  * @tc.desc      : VideoOutput stop promise api\n  ", "  * @tc.name      : VideoOutput stop async api\n    ", "  * @tc.desc      : VideoOutput start async api\n   ", "  * @tc.desc      : VideoOutput callback onerror as", "console.info(TAG + 'VideoOutput Errorcallback is su", "  * @tc.desc      : VideoOutput callback onframeend", "nfo(TAG + \"Entering VideoOutputPromise.release PASS", "console.info(TAG + \"VideoOutput Errorcallback is su", "  * @tc.name      : VideoOutput start promise api\n ", "    cameraObj.createVideoOutput(videoId, (err, data", "nfo(TAG + \"Entering VideoOutputPromise.release prom", "  * @tc.desc      : VideoOutput stop async api\n    ", "  * @tc.name      : VideoOutput stop promise api\n  ", "  * @tc.name      : VideoOutput callback onframesta", "  * @tc.desc      : VideoOutput callback onframesta", "  * @tc.name      : VideoOutput callback onframeend", "  * @tc.name      : VideoOutput callback onerror as", "ait cameraObj.createVideoOutput(videoId)\n      cons", "  * @tc.desc      : VideoOutput start promise api\n ", "  * @tc.name      : VideoOutput start async api\n   "], "files": ["CameraJSUnitVideoPromise.test.ets", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitVideoAsync.test.ets"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutput", "api_method_name": "start", "api_method_all": "start(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 1221, "since": 9, "api_used": "\u662f", "lines": ["rLog: renderInstant started :SUCCESS ');\n        }).catch((err) =", "orkRecLog: Capturer start :ERROR : '+err.message);\n            re", "rLog: renderInstant start :ERROR : '+err.message);\n            re", "orkRecLog: Capturer started :SUCCESS ');\n        }).catch((err) =", "ew Date().getTime()-startTime;\n        let avgTime = waitTime/MAX", "ger(); \n        let startTime = new Date().getTime();\n        for"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "fetchFileResultCallBack.test.js", "HttpPlayerFuncPromiseTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "favoriteTestCallBack.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "albumTestPromise.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoPlayerFuncPromiseTest.test.js", "FileAssetGetThumbnailCallBack.test.js", "fileTestCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "fileTestPromise.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutput", "api_method_name": "start", "api_method_all": "start(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 128, "since": 9, "api_used": "\u662f", "lines": ["wait ringtonePlayer.start().then(async function () {\n\t\t\tconsole.l", "     await audioRen.start().then(async function () {\n         con", "wait ringtonePlayer.start().then(async function () {\n\t\t\tawait sle", " ringtonePlayerTemp.start().then(async function () {\n\t\t\tconsole.l", "     await audioRen.start().then(async function (started) {\n     ", "await audioCapturer.start().then(async function (started) {\n     ", "wait ringtonePlayer.start().then(async function () {\n            ", "     ringtonePlayer.start().then(function () {\n            consol", "wait ringtonePlayer.start().then(async function () {\n\t\t\t\t\tconsole", "wait ringtonePlayer.start().then(async function () {\n\t\t\t\tconsole.", "\n\n\t\t\tringtonePlayer.start().then(async function () {\n            ", "     await audioRen.start().then(async function () {\n            ", "ait audioCapPromise.start().then(async function () {\n            ", "wait ringtonePlayer.start().then(function () {\n\t\t\t\t\tconsole.log('", "     ringtonePlayer.start().then(async function () {\n            ", "     await audioCap.start().then(async function () {\n            "], "files": ["VideoDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutput", "api_method_name": "stop", "api_method_all": "stop(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 833, "since": 9, "api_used": "\u662f", "lines": ["RenderLog: Renderer stopped : SUCCESS');\n            resultFlag=", "RenderLog: Renderer stopped');\n             resultFlag=true;\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n\n     ", "RenderLog: Renderer stop:ERROR : '+err.message);\n         result", "orkRecLog: Capturer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n   ", "RenderLog: Renderer stop:ERROR : '+err.message);\n     });\n     a", "RenderLog: Renderer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stop failed: Error: ${err.message}`);\n      ", "orkRecLog: Capturer stopped : SUCCESS');\n            resultFlagR", "RenderLog: Renderer stopped : SUCCESS');\n     }).catch((err) => ", "RenderLog: Renderer stopped : SUCCESS');\n        }).catch((err) ", "    }\n     audioRen.stop((err, state) => {\n         if (err) {\n ", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n  ", "RenderLog: Renderer stop:ERROR : '+err.message);\n            res", "RenderLog: Renderer stop:ERROR : '+err.message);\n        });\n\n\n "], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutput", "api_method_name": "stop", "api_method_all": "stop(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 99, "since": 9, "api_used": "\u662f", "lines": ["   eventEmitter.on('stop', () => {\n            sleep(5000).then(", "wait ringtonePlayer.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function (stopped) {\n     ", "wait ringtonePlayer.stop().then(function () {\n            consol", "await audioCapturer.stop().then(async function (data) {\n        ", "     await audioCap.stop().then(async function () {\n            ", "     await audioRen.stop().then(async function () {\n         con", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tawait sl", "udioDecodeProcessor.stop().then(() => {\n            console.info", "     await audioRen.stop().then(async function () {\n            ", "udioDecodeProcessor.stop().then(() => {\n                console.", "wait ringtonePlayer.stop().then(async function() {\n\t\t\t\tconsole.e", "udioDecodeProcessor.stop().then(() => {\n                    cons", "wait ringtonePlayer.stop().then(async function () {\n\t\t\t\tconsole.", "wait ringtonePlayer.stop().then(function () {\n                co", ");\n\t\tringtonePlayer.stop().then(function () {\n                co", "\n\t\t\t\tringtonePlayer.stop().then(function () {\n\t\t\t\tconsole.log('A", "ait audioCapPromise.stop().then(async function () {\n            ", "wait ringtonePlayer.stop().then(function(){\n\t\t\tconsole.log('Audi"], "files": ["VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutput", "api_method_name": "release", "api_method_all": "release(callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 1, "api_level": 21, "api_used_count": 799, "since": 9, "api_used": "\u662f", "lines": ["    }\n     audioRen.release((err, state) => {\n         if (err) {\n ", "orkRecLog: Capturer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release :ERROR : '+err.message);\n            re", "RenderLog: Renderer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release : SUCCESS');\n     }).catch((err) => {\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n  ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n\n    ", "RenderLog: Renderer release :ERROR : '+err.message);\n        });\n\n ", "RenderLog: Renderer release : SUCCESS');\n    //  }).catch((err) => ", "RenderLog: Renderer release :ERROR : '+err.message);\n    //  });\n\n ", "RenderLog: Renderer release :ERROR : '+err.message);\n     });\n     ", "orkRecLog: Capturer release : SUCCESS');\n        }).catch((err) => ", "RenderLog: Renderer release failed: Error: ${err.message}`);\n      ", "RenderLog: Renderer released');\n         }\n     });\n     await slee"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "VideoRecorderFuncPromiseTest.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "CameraJSUnitCameraFormat.test.ets", "RecorderLocalTestAudioAPI.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "mediaLibraryTestPromiseOnOff.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutput", "api_method_name": "release", "api_method_all": "release(): Promise<void>;", "api_type": "Promise", "api_args_count": 0, "api_level": 21, "api_used_count": 175, "since": 9, "api_used": "\u662f", "lines": ["     await audioCap.release().then(async function () {\n            ", "await audioCapturer.release().then(async function (data) {\n        ", "     imageSourceApi.release().then(()=>{\n                console.in", "           pixelmap.release().then(() => {\n                console.", "     await audioRen.release().then(async function () {\n            ", "     await audioRen.release().then(async function (data) {\n        ", "wait ringtonePlayer.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function () {\n            ", "ait audioCapPromise.release().then(async function (){\n            c", "wait ringtonePlayer.release().then(function () {\n            consol", " //  await audioRen.release().then(async function () {\n    //      ", "     imagePackerApi.release().then(()=>{\n                console.in", "     await audioRen.release().then(async function () {\n         con"], "files": ["AudioDecoderFormatCallbackTest.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "VideoRecorderFuncPromiseTest.test.js", "RingtonePlayer.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "VideoDecoderReliCallbackTest.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "AudioCall.test.js", "AudioVOIP.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "AudioDecoderFuncPromiseTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "VideoPlayerFuncPromiseTest.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "AudioRenderer.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutput", "api_method_name": "on", "api_method_all": "on(type: 'frameStart', callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutput", "api_method_name": "on", "api_method_all": "on(type: 'frameEnd', callback: AsyncCallback<void>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutput", "api_method_name": "on", "api_method_all": "on(type: 'error', callback: ErrorCallback<VideoOutputError>): void;", "api_type": "callback", "api_args_count": 2, "api_level": 21, "api_used_count": 41984, "since": 9, "api_used": "\u662f", "lines": ["(dirPath);\n        console.info('AudioFrameworkTest: beforeAll", "reate');\n    },\n    onDestroy() {\n        console.info('AceApp", "ction () {\n        console.info('AudioFrameworkTest: afterAll:", "terEach(async function () {\n        console.info('AudioFramewo", ";\n    })\n\n    function sleep (ms) {\n        return new Promise", "e.info('AceApplication onDestroy');\n    }\n};\n", "udioManager();\n    console.info('AudioFrameworkRenderLog: Crea", "foreAll(async function () {\n        console.info('AudioFramewo", "+dateTime;\n        console.info('AudioFrameworkRecLog: Recordi", " Framework');\n\n    const audioManagerRec = audio.getAudioManag", " }\n\n    async function playbackPromise (AudioRendererOptions, ", "udioManager();\n    console.info('AudioFrameworkRecLog: Create ", "it()\n        const configService = core.getDefaultService('con", "Instance()\n        const expectExtend = new ExpectExtend({\n   ", "('audioCall', function () {\n    var mediaDir;\n    var dateTime", "      console.info('onShow finish')\n        const core = Core.", ");\n\n    async function getPathName(){\n        var path1 = '/da", "uite-level cleanup condition');\n    })\n\n    function sleep (ms", "getDefaultService('config')\n        this.timeout = 60000\n     ", "xecute()\n    },\n    onReady() {\n    },\n}", "world');\n    },\n    onShow() {\n        console.info('onShow fi", " {\n                console.error('AudioFrameworkRenderLog: Fai", "_featureAbility.getContext();\n        await context.getBundleN", "e (AudioRendererOptions, fpath, AudioScene) {\n        resultFl", "se-level clearance conditions');\n        await sleep(1000);\n  ", "w finish')\n        const core = Core.getInstance()\n        con", "nfo('AceApplication onCreate');\n    },\n    onDestroy() {\n     ", "nfo('AceApplication onDestroy');\n    }\n};\n", "xport default {\n    onCreate() {\n        console.info('AceAppl", "el clearance conditions');\n        await sleep(1000);\n    })\n\n", " = '/data'\n        console.info('AudioFrameworkRenderLog: Reso", "oreEach(async function () {\n        console.info('AudioFramewo", "/account_0/applications/';\n        var packageName;\n        va", "evel cleanup condition');\n    })\n\n    function sleep (ms) {\n  ", "onShow() {\n        console.info('onShow finish')\n        const", "Create() {\n        console.info('AceApplication onCreate');\n  ", "estroy() {\n        console.info('AceApplication onDestroy');\n ", "ut = 60000\n        configService.setConfig(this)\n        requi", "resultFlagRen;\n    const audioManager = audio.getAudioManager(", "ction () {\n        console.info('AudioFrameworkTest: afterEach", "/account_0/applications'+'/RecTest'+dateTime;\n        console.", "ction () {\n        console.info('AudioFrameworkTest: beforeEac", "ction () {\n        console.info('AudioFrameworkTest: beforeAll", "  configService.setConfig(this)\n        require('../../../test", "fterAll(async function () {\n        console.info('AudioFramewo", "eName;\n        var context = ability_featureAbility.getContext", "ore.init()\n        const configService = core.getDefaultServic", " {\n                console.info('AudioFrameworkRenderLog: Cach", "e.info('AceApplication onCreate');\n    },\n    onDestroy() {\n  ", "itle: \"\"\n    },\n    onInit() {\n        this.title = this.$t('s"], "files": ["AudioDecoderFormatCallbackTest.test.js", "getPermission.test.js", "HttpPlayerCompatibilityTest.test.js", "PlayerLocalTestAudioAPI.test.js", "albumGetFileAssetsCallback.test.js", "favtrashTestPromise.test.js", "fetchFileResultCallBack.test.js", "VideoRecorderEnumTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "favtrashTestCallBack.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "getAllPeersTestPromise.test.js", "AudioVOIP.test.js", "fileAssetTestPromise.test.js", "SR000GHQBN.test.js", "mediaLibraryTestPromiseOnOff.test.js", "CameraJSUnitCameraFormat.test.ets", "VideoPlayerFuncPromiseTest.test.js", "getAllPeersTestCallback.test.js", "RecorderLocalTestAudioFUNC.test.js", "distributedCallback.test.js", "fileTestPromise.test.js", "fileAssetUriTestCallBack.test.js", "getAllPeersDeviceTestPromise.test.js", "VideoDecoderEnumTest.test.js", "AudioFramework.test.js", "fileAssetTestCallback.test.js", "CameraJSUnitVideoAsync.test.ets", "CameraJSUnitEnum.test.ets", "VideoDecoderSoftwareFuncCallbackTest.test.js", "mediaLibraryTestCallBack.test.js", "MediaScannerFrameWork1.0.js", "CameraJSUnitVideoPromise.test.ets", "filekeyTestCallBack.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "distributedPromise.test.js", "VideoEncoderEnumTest.test.js", "albumGetFileAssetsPromise.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "albumTestPromise.test.js", "AudioDecoderFormatPromiseTest.test.js", "fileAsset2.test.js", "AudioDecoderFuncPromiseTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "filekeyTestPromise.test.js", "index.ets", "FileAssetGetThumbnailPromise.test.js", "AudioEncoderFuncPromiseTest.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "getAllPeersDeviceTestCallback.test.js", "display.js", "AudioDecoderReliabilityCallbackTest.test.js", "HttpPlayerFuncCallbackTest.test.js", "fileAssetCallBack2.test.js", "VideoRecorderFuncPromiseTest.test.js", "AudioEncoderFuncCallbackTest.test.js", "VideoPlayerFuncCallbackTest.test.js", "HttpPlayerFuncPromiseTest.test.js", "VideoDecoderReliCallbackTest.test.js", "app.js", "AudioCall.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "SR000GHLLV.test.js", "app.ets", "AudioEncoderMultiInstancesTest.test.js", "distributed.test.js", "RecorderLocalTestAudioAPI.test.js", "fileTestCallBack.test.js", "surfaceTest2.js", "CameraJSUnitPhotoAsync.test.ets", "VideoEncoderSoftwareFuncCallbackTest.test.js", "fileAssetUriTestPromiese.test.js", "favoriteTestPromise.test.js", "CameraJSUnitPhotoPromise.test.ets", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "RingtonePlayer.test.js", "Camera.test.ets", "mediaLibraryTestPromise.test.js", "VideoDecoderReliPromiseTest.test.js", "fetchFileResultPromise.test.js", "image.test.js", "VideoPlayerAPICallbackTest.test.js", "AudioPerf.test.js", "PlayerLocalTestAudioFormat.test.js", "favoriteTestCallBack.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "fileAssetPromise2.test.js", "index.js", "FileAssetGetThumbnailCallBack.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "albumTestCallBack.test.js", "AudioRenderer.test.js", "AudioRecorderEnumTest.test.js", "VideoRecorderAPICallbackTest.test.js", "VideoRecorderFuncCallbackTest.test.js", "surfaceTest.js"], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutputErrorCode", "api_method_all": "enum VideoOutputErrorCode {\n    ERROR_UNKNOWN = -1\n  }", "api_method_name": "VideoOutputErrorCode", "api_type": "", "api_level": 40, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutputErrorCode", "api_method_name": "ERROR_UNKNOWN", "api_method_all": "ERROR_UNKNOWN = -1", "api_type": "", "api_args_count": 1, "api_level": 42, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutputError", "api_method_all": "interface VideoOutputError extends Error {\n    code: VideoOutputErrorCode;\n  }", "api_method_name": "VideoOutputError", "api_type": "", "api_level": null, "api_args_count": 0, "api_used_count": 0, "since": 9, "api_used": "\u5426", "lines": [], "files": [], "is_white": " ", "desc": " "}, {"api_class_name": "VideoOutputError", "api_method_name": "code", "api_method_all": "code: VideoOutputErrorCode", "api_type": "", "api_args_count": 1, "api_level": 22, "api_used_count": 2380, "since": 9, "api_used": "\u662f", "lines": ["ErrorCode: \" + data.code);\n                 ", "  2.set index and DecodeOptions\n     *      ", "ErrorCode: \" + data.code);\n              exp", "  2.set index and DecodeOptions\n         *  "], "files": ["AudioDecoderFormatCallbackTest.test.js", "List.test.js", "VideoDecoderSoftwareReliCallbackTest.test.js", "VideoDecoderEnumTest.test.js", "HttpPlayerCompatibilityTest.test.js", "AudioDecoderEnumTest.test.js", "AudioDecoderFuncCallbackTest.test.js", "PlayerLocalTestAudioAPI.test.js", "CameraJSUnitVideoAsync.test.ets", "AudioEncoderFuncCallbackTest.test.js", "VideoDecoderSoftwareFuncCallbackTest.test.js", "MediaScannerFrameWork1.0.js", "VideoDecoderReliPromiseTest.test.js", "image.test.js", "CameraJSUnitVideoPromise.test.ets", "PlayerLocalTestAudioFormat.test.js", "AudioEncoderReliabilityCallbackTest.test.js", "VideoDecoderReliCallbackTest.test.js", "VideoHardwareEncoderEnumTest.test.js", "AudioEncoderReliabilityPromiseTest.test.js", "VideoEncoderSoftwareFuncPromiseTest.test.js", "VideoEncoderEnumTest.test.js", "VideoEncoderSoftwareReliabilityCallbackTest.test.js", "VideoPlayerEnumTest.test.js", "VideoDecoderFuncPromiseTest.test.js", "VideoDecoderSoftwareFuncPromiseTest.test.js", "AudioDecoderFormatPromiseTest.test.js", "AudioDecoderMultiInstancesTest.test.js", "AudioEncoderMultiInstancesTest.test.js", "AudioDecoderFuncPromiseTest.test.js", "VideoDecoderFuncCallbackTest.test.js", "VideoEncoderMultiInstancesTest.test.js", "PlayerLocalTestAudioFUNC.test.js", "RecorderLocalTestAudioAPI.test.js", "AudioDecoderReliabilityPromiseTest.test.js", "AudioEncoderFuncPromiseTest.test.js", "RecorderLocalTestAudioFUNC.test.js", "VideoEncoderSoftwareReliabilityPromiseTest.test.js", "CameraJSUnitPhotoAsync.test.ets", "AudioRecorderEnumTest.test.js", "VideoDecoderSoftwareReliPromiseTest.test.js", "VideoEncoderSoftwareFuncCallbackTest.test.js", "CameraJSUnitPhotoPromise.test.ets", "AudioDecoderReliabilityCallbackTest.test.js"], "is_white": " ", "desc": " "}]}