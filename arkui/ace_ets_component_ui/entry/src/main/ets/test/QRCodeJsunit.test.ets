/**
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from "@ohos/hypium"
import router from '@system.router';
import {UiComponent, UiDriver, Component, Driver, UiWindow, ON, BY, MatchPattern, DisplayRotation, ResizeDirection, WindowMode, PointerMatrix} from '@ohos.uitest';
import CommonFunc from '../MainAbility/utils/Common';
import {MessageManager,Callback} from '../MainAbility/utils/MessageManager';


export default function QRCodeJsunit() {
  describe('QRCodeJsunit', function () {
    beforeEach(async function (done) {
      console.info("QRCodeJsunit beforeEach start");
      let options = {
        uri: 'MainAbility/pages/QRCodePage',
      }
      try {
        router.clear();
        let pages = router.getState();
        console.info("get QRCodeJsunit state pages: " + JSON.stringify(pages));
        if (!("QRCodePage" == pages.name)) {
          console.info("get QRCodeJsunit state pages.name: " + JSON.stringify(pages.name));
          let result = await router.push(options);
          await CommonFunc.sleep(2000);
          console.info("push QRCodeJsunit page result: " + JSON.stringify(result));
        }
      } catch (err) {
        console.error("push QRCodeJsunit page error: " + err);
        expect().assertFail();
      }
      done();
    });

    it('QRCodeJsunit_0100', 0, async function (done) {
      // Get the information of the QRCode component
      console.info('[QRCodeJsunit_0100] START');
      let strJson = getInspectorByKey('qr');
      let obj = JSON.parse(strJson);
      console.info("[QRCodeJsunit_0100] component obj is: " + JSON.stringify(obj));
      await CommonFunc.sleep(1000);
      expect(obj.$attrs.value).assertEqual('normal');
      expect(obj.$attrs.color).assertEqual('#FF000000');
      expect(obj.$attrs.backgroundColor).assertEqual('#FFFFFFFF');
      console.info('[QRCodeJsunit_0100] END');
      done();
    });

    it('QRCodeJsunit_0200', 0, async function (done) {
      // Modify the color of the QRCode component
      console.info('[QRCodeJsunit_0200] START');
      globalThis.value.message.notify({name:'QRCodeColor',value:Color.Yellow})
      await CommonFunc.sleep(2000);
      // Get the color of the QRCode component
      let strJson = getInspectorByKey('qr1');
      let obj = JSON.parse(strJson);
      console.info("[QRCodeJsunit_0200] component obj is: " + JSON.stringify(obj));
      expect(obj.$attrs.color).assertEqual('#FFFFFF00');
      console.info('[QRCodeJsunit_0200] END');
      done();
    });

    it('QRCodeJsunit_0300', 0, async function (done) {
      // Modify the backgroundColor of the QRCode component
      console.info('[QRCodeJsunit_0300] START');
      globalThis.value.message.notify({name:'backgroundColor',value:Color.Green})
      await CommonFunc.sleep(1000);
      // Get the backgroundColor of the QRCode component
      let strJson = getInspectorByKey('qr2');
      let obj = JSON.parse(strJson);
      console.info("[QRCodeJsunit_0300] component obj is: " + JSON.stringify(obj));
      expect(obj.$attrs.backgroundColor).assertEqual('#FF008000');
      console.info('[QRCodeJsunit_0300] END');
      done();
    });

    it('QRCodeJsunit_0400', 0, async function (done) {
      // Modify the value of the QRCode component
      console.info('[QRCodeJsunit_0400] START');
      globalThis.value.message.notify({name:'QRCodeValue',value:'myTest'})
      await CommonFunc.sleep(2000);
      // Get the value of the QRCode component
      let strJson = getInspectorByKey('qr1');
      let obj = JSON.parse(strJson);
      console.info("[QRCodeJsunit_0400] component obj is: " + JSON.stringify(obj));
      await CommonFunc.sleep(1000);
      expect(obj.$attrs.value).assertEqual('normal');
      console.info('[QRCodeJsunit_0400] END');
      done();
    });

    it('QRCodeJsunit_0500', 0, async function (done) {
      // Illegal modification of the QRCode component value
      console.info('[QRCodeJsunit_0500] START');
      globalThis.value.message.notify({name:'QRCodeColor',value:1})
      await CommonFunc.sleep(1000);
      globalThis.value.message.notify({name:'QRCodeValue',value:-10})
      await CommonFunc.sleep(1000);
      // Get the color and value of the QRCode component
      let strJson = getInspectorByKey('qr1');
      let obj = JSON.parse(strJson);
      console.info("[QRCodeJsunit_0500] component obj is: " + JSON.stringify(obj));
      expect(obj.$attrs.color).assertEqual('#FF000001');
      expect(obj.$attrs.value).assertEqual('myTest');

      // Get the backgroundColor of the QRCode component
      globalThis.value.message.notify({name:'backgroundColor',value:'test'})
      await CommonFunc.sleep(2000);
      let strJson1 = getInspectorByKey('qr2');
      let obj1 = JSON.parse(strJson1);
      console.info("[QRCodeJsunit_0500] component obj1 is: " + JSON.stringify(obj1));
      expect(obj1.$attrs.backgroundColor).assertEqual('#FFFFFFFF');
      console.info('[QRCodeJsunit_0500] END');
      done();
    });
  })
}
