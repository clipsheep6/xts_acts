import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from "@ohos/hypium"
import router from '@system.router';
import {UiComponent, UiDriver, Component, Driver, UiWindow, ON, BY, MatchPattern, DisplayRotation, ResizeDirection, WindowMode, PointerMatrix} from '@ohos.UiTest';
import CommonFunc from '../../MainAbility/utils/Common';

export default function RouterUrlErrorJsunit() {
  describe('RouterUrlErrorJsunit', function () {
    beforeEach(async function (done) {
      console.info("RouterUrlErrorJsunit beforeEach start");
      let options = {
        uri: 'MainAbility/pages/State/RouterUrlError',
      }
      try {
        router.clear();
        let pages = router.getState();
        console.info("get RouterUrlErrorJsunit state pages:" + JSON.stringify(pages));
        if (!("RouterUrlError" == pages.name)) {
          console.info("get RouterUrlErrorJsunit state pages.name:" + JSON.stringify(pages.name));
          let result = await router.push(options);
          console.info("push RouterUrlErrorJsunit success " + JSON.stringify(result));
        }
      } catch (err) {
        console.error("push RouterUrlErrorJsunit page error:" + err);
        expect().assertFail();
      }
      done();
    });

    /**
     * @tc.number    SUB_ACE_BASICABILITY_ROUTERPAGE_009
     * @tc.name      RouterUrlErrorJsunit_0100
     * @tc.desc      The route input parameter is abnormally redirected
     * @tc.level:    Level 2
     * @tc.type :
     * @tc.size :
     */
    it('RouterUrlErrorJsunit_0100', 0, async function (done) {
      console.info('RouterUrlErrorJsunit_0100 START');
      await CommonFunc.sleep(1000);
      let driver = Driver.create();
      let button = await driver.findComponent(ON.id('RouterUrlErrorButton'));
      await button.click();
      await CommonFunc.sleep(2000);
      let strJson1 = getInspectorByKey('RouterUrlErrorText');
      let obj1 = JSON.parse(strJson1);
      console.info('RouterUrlErrorJsunit_0100 component obj is: ' + obj1.$attrs.content);
      expect(obj1.$attrs.content).assertEqual('start');
      await CommonFunc.sleep(1000);
      done();
    });

  })
}