/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import attrsManager from '../../common/AttrsManager'
import router from '@ohos.router'

class AlphabetIndexerModifier implements AttributeModifier<AlphabetIndexerAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: AlphabetIndexerAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class BadgeModifier implements AttributeModifier<BadgeAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: BadgeAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ButtonModifier implements AttributeModifier<ButtonAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ButtonAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class BlankModifier implements AttributeModifier<BlankAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: BlankAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class CalendarPickerModifier implements AttributeModifier<CalendarPickerAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: CalendarPickerAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class CanvasModifier implements AttributeModifier<CanvasAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: CanvasAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class CheckboxModifier implements AttributeModifier<CheckboxAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: CheckboxAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class CheckboxGroupModifier implements AttributeModifier<CheckboxGroupAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: CheckboxGroupAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class CircleModifier implements AttributeModifier<CircleAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: CircleAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ColumnModifier implements AttributeModifier<ColumnAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ColumnAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ColumnSplitModifier implements AttributeModifier<ColumnSplitAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ColumnSplitAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class CounterModifier implements AttributeModifier<CounterAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: CounterAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class DataPanelModifier implements AttributeModifier<DataPanelAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: DataPanelAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class DatePickerModifier implements AttributeModifier<DatePickerAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: DatePickerAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class DividerModifier implements AttributeModifier<DividerAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: DividerAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class EllipseModifier implements AttributeModifier<EllipseAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: EllipseAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class FlexModifier implements AttributeModifier<FlexAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: FlexAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class FlowItemModifier implements AttributeModifier<FlowItemAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: FlowItemAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class FormLinkModifier implements AttributeModifier<FormLinkAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: FormLinkAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class GaugeModifier implements AttributeModifier<GaugeAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: GaugeAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class GridModifier implements AttributeModifier<GridAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: GridAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class GridColModifier implements AttributeModifier<GridColAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: GridColAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class GridItemModifier implements AttributeModifier<GridItemAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: GridItemAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class GridRowModifier implements AttributeModifier<GridRowAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: GridRowAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class HyperlinkModifier implements AttributeModifier<HyperlinkAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: HyperlinkAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ImageModifier implements AttributeModifier<ImageAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ImageAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ImageAnimatorModifier implements AttributeModifier<ImageAnimatorAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ImageAnimatorAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class LineModifier implements AttributeModifier<LineAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: LineAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ListModifier implements AttributeModifier<ListAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ListAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ListItemModifier implements AttributeModifier<ListItemAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ListItemAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ListItemGroupModifier implements AttributeModifier<ListItemGroupAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ListItemGroupAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class LoadingProgressModifier implements AttributeModifier<LoadingProgressAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: LoadingProgressAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class MarqueeModifier implements AttributeModifier<MarqueeAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: MarqueeAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class MenuModifier implements AttributeModifier<MenuAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: MenuAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class MenuItemModifier implements AttributeModifier<MenuItemAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: MenuItemAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class MenuItemGroupModifier implements AttributeModifier<MenuItemGroupAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: MenuItemGroupAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class NavDestinationModifier implements AttributeModifier<NavDestinationAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: NavDestinationAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class NavigationModifier implements AttributeModifier<NavigationAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: NavigationAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class NavigatorModifier implements AttributeModifier<NavigatorAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: NavigatorAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class NavRouterModifier implements AttributeModifier<NavRouterAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: NavRouterAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class PanelModifier implements AttributeModifier<PanelAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: PanelAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class PathModifier implements AttributeModifier<PathAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: PathAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class PolygonModifier implements AttributeModifier<PolygonAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: PolygonAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class PolylineModifier implements AttributeModifier<PolylineAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: PolylineAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ProgressModifier implements AttributeModifier<ProgressAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ProgressAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class QRCodeModifier implements AttributeModifier<QRCodeAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: QRCodeAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class RadioModifier implements AttributeModifier<RadioAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: RadioAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class RatingModifier implements AttributeModifier<RatingAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: RatingAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class RectModifier implements AttributeModifier<RectAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: RectAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class RefreshModifier implements AttributeModifier<RefreshAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: RefreshAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class RelativeContainerModifier implements AttributeModifier<RelativeContainerAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: RelativeContainerAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class RemoteWindowModifier implements AttributeModifier<RemoteWindowAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: RemoteWindowAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class RichEditorModifier implements AttributeModifier<RichEditorAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: RichEditorAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class RichTextModifier implements AttributeModifier<RichTextAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: RichTextAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class RowModifier implements AttributeModifier<RowAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: RowAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class RowSplitModifier implements AttributeModifier<RowSplitAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: RowSplitAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ScrollModifier implements AttributeModifier<ScrollAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ScrollAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ScrollBarModifier implements AttributeModifier<ScrollBarAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ScrollBarAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class SearchModifier implements AttributeModifier<SearchAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: SearchAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class SelectModifier implements AttributeModifier<SelectAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: SelectAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ShapeModifier implements AttributeModifier<ShapeAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ShapeAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class SideBarContainerModifier implements AttributeModifier<SideBarContainerAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: SideBarContainerAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class SliderModifier implements AttributeModifier<SliderAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: SliderAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class SpanModifier implements AttributeModifier<SpanAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: SpanAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class StackModifier implements AttributeModifier<StackAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: StackAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class StepperModifier implements AttributeModifier<StepperAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: StepperAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class StepperItemModifier implements AttributeModifier<StepperItemAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: StepperItemAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class SwiperModifier implements AttributeModifier<SwiperAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: SwiperAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class TabContentModifier implements AttributeModifier<TabContentAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: TabContentAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class TabsModifier implements AttributeModifier<TabsAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: TabsAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class TextModifier implements AttributeModifier<TextAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: TextAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class TextAreaModifier implements AttributeModifier<TextAreaAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: TextAreaAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class TextClockModifier implements AttributeModifier<TextClockAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: TextClockAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class TextInputModifier implements AttributeModifier<TextInputAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: TextInputAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class TextPickerModifier implements AttributeModifier<TextPickerAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: TextPickerAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class TextTimerModifier implements AttributeModifier<TextTimerAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: TextTimerAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class TimePickerModifier implements AttributeModifier<TimePickerAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: TimePickerAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class ToggleModifier implements AttributeModifier<ToggleAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: ToggleAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class VideoModifier implements AttributeModifier<VideoAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: VideoAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class WaterFlowModifier implements AttributeModifier<WaterFlowAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: WaterFlowAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class WebModifier implements AttributeModifier<WebAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: WebAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class WindowSceneModifier implements AttributeModifier<WindowSceneAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: WindowSceneAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

class XComponentModifier implements AttributeModifier<XComponentAttribute> {
	mBackgroundBrightness: BackgroundBrightnessOptions = {rate:10,lightUpDegree:10}

	applyNormalAttribute(instance: XComponentAttribute): void {
		instance.backgroundBrightness(this.mBackgroundBrightness)
	}
}

@Entry
@Component
struct BackgroundBrightnessPage {
	@State _backgroundBrightnessAlphabetIndexerModifier: AlphabetIndexerModifier = new AlphabetIndexerModifier()
	@State _backgroundBrightnessBadgeModifier: BadgeModifier = new BadgeModifier()
	@State _backgroundBrightnessButtonModifier: ButtonModifier = new ButtonModifier()
	@State _backgroundBrightnessBlankModifier: BlankModifier = new BlankModifier()
	@State _backgroundBrightnessCalendarPickerModifier: CalendarPickerModifier = new CalendarPickerModifier()
	@State _backgroundBrightnessCanvasModifier: CanvasModifier = new CanvasModifier()
	@State _backgroundBrightnessCheckboxModifier: CheckboxModifier = new CheckboxModifier()
	@State _backgroundBrightnessCheckboxGroupModifier: CheckboxGroupModifier = new CheckboxGroupModifier()
	@State _backgroundBrightnessCircleModifier: CircleModifier = new CircleModifier()
	@State _backgroundBrightnessColumnModifier: ColumnModifier = new ColumnModifier()
	@State _backgroundBrightnessColumnSplitModifier: ColumnSplitModifier = new ColumnSplitModifier()
	@State _backgroundBrightnessCounterModifier: CounterModifier = new CounterModifier()
	@State _backgroundBrightnessDataPanelModifier: DataPanelModifier = new DataPanelModifier()
	@State _backgroundBrightnessDatePickerModifier: DatePickerModifier = new DatePickerModifier()
	@State _backgroundBrightnessDividerModifier: DividerModifier = new DividerModifier()
	@State _backgroundBrightnessEllipseModifier: EllipseModifier = new EllipseModifier()
	@State _backgroundBrightnessFlexModifier: FlexModifier = new FlexModifier()
	@State _backgroundBrightnessFlowItemModifier: FlowItemModifier = new FlowItemModifier()
	@State _backgroundBrightnessFormLinkModifier: FormLinkModifier = new FormLinkModifier()
	@State _backgroundBrightnessGaugeModifier: GaugeModifier = new GaugeModifier()
	@State _backgroundBrightnessGridModifier: GridModifier = new GridModifier()
	@State _backgroundBrightnessGridColModifier: GridColModifier = new GridColModifier()
	@State _backgroundBrightnessGridItemModifier: GridItemModifier = new GridItemModifier()
	@State _backgroundBrightnessGridRowModifier: GridRowModifier = new GridRowModifier()
	@State _backgroundBrightnessHyperlinkModifier: HyperlinkModifier = new HyperlinkModifier()
	@State _backgroundBrightnessImageModifier: ImageModifier = new ImageModifier()
	@State _backgroundBrightnessImageAnimatorModifier: ImageAnimatorModifier = new ImageAnimatorModifier()
	@State _backgroundBrightnessLineModifier: LineModifier = new LineModifier()
	@State _backgroundBrightnessListModifier: ListModifier = new ListModifier()
	@State _backgroundBrightnessListItemModifier: ListItemModifier = new ListItemModifier()
	@State _backgroundBrightnessListItemGroupModifier: ListItemGroupModifier = new ListItemGroupModifier()
	@State _backgroundBrightnessLoadingProgressModifier: LoadingProgressModifier = new LoadingProgressModifier()
	@State _backgroundBrightnessMarqueeModifier: MarqueeModifier = new MarqueeModifier()
	@State _backgroundBrightnessMenuModifier: MenuModifier = new MenuModifier()
	@State _backgroundBrightnessMenuItemModifier: MenuItemModifier = new MenuItemModifier()
	@State _backgroundBrightnessMenuItemGroupModifier: MenuItemGroupModifier = new MenuItemGroupModifier()
	@State _backgroundBrightnessNavDestinationModifier: NavDestinationModifier = new NavDestinationModifier()
	@State _backgroundBrightnessNavigationModifier: NavigationModifier = new NavigationModifier()
	@State _backgroundBrightnessNavigatorModifier: NavigatorModifier = new NavigatorModifier()
	@State _backgroundBrightnessNavRouterModifier: NavRouterModifier = new NavRouterModifier()
	@State _backgroundBrightnessPanelModifier: PanelModifier = new PanelModifier()
	@State _backgroundBrightnessPathModifier: PathModifier = new PathModifier()
	@State _backgroundBrightnessPolygonModifier: PolygonModifier = new PolygonModifier()
	@State _backgroundBrightnessPolylineModifier: PolylineModifier = new PolylineModifier()
	@State _backgroundBrightnessProgressModifier: ProgressModifier = new ProgressModifier()
	@State _backgroundBrightnessQRCodeModifier: QRCodeModifier = new QRCodeModifier()
	@State _backgroundBrightnessRadioModifier: RadioModifier = new RadioModifier()
	@State _backgroundBrightnessRatingModifier: RatingModifier = new RatingModifier()
	@State _backgroundBrightnessRectModifier: RectModifier = new RectModifier()
	@State _backgroundBrightnessRefreshModifier: RefreshModifier = new RefreshModifier()
	@State _backgroundBrightnessRelativeContainerModifier: RelativeContainerModifier = new RelativeContainerModifier()
	@State _backgroundBrightnessRemoteWindowModifier: RemoteWindowModifier = new RemoteWindowModifier()
	@State _backgroundBrightnessRichEditorModifier: RichEditorModifier = new RichEditorModifier()
	@State _backgroundBrightnessRichTextModifier: RichTextModifier = new RichTextModifier()
	@State _backgroundBrightnessRowModifier: RowModifier = new RowModifier()
	@State _backgroundBrightnessRowSplitModifier: RowSplitModifier = new RowSplitModifier()
	@State _backgroundBrightnessScrollModifier: ScrollModifier = new ScrollModifier()
	@State _backgroundBrightnessScrollBarModifier: ScrollBarModifier = new ScrollBarModifier()
	@State _backgroundBrightnessSearchModifier: SearchModifier = new SearchModifier()
	@State _backgroundBrightnessSelectModifier: SelectModifier = new SelectModifier()
	@State _backgroundBrightnessShapeModifier: ShapeModifier = new ShapeModifier()
	@State _backgroundBrightnessSideBarContainerModifier: SideBarContainerModifier = new SideBarContainerModifier()
	@State _backgroundBrightnessSliderModifier: SliderModifier = new SliderModifier()
	@State _backgroundBrightnessSpanModifier: SpanModifier = new SpanModifier()
	@State _backgroundBrightnessStackModifier: StackModifier = new StackModifier()
	@State _backgroundBrightnessStepperModifier: StepperModifier = new StepperModifier()
	@State _backgroundBrightnessStepperItemModifier: StepperItemModifier = new StepperItemModifier()
	@State _backgroundBrightnessSwiperModifier: SwiperModifier = new SwiperModifier()
	@State _backgroundBrightnessTabContentModifier: TabContentModifier = new TabContentModifier()
	@State _backgroundBrightnessTabsModifier: TabsModifier = new TabsModifier()
	@State _backgroundBrightnessTextModifier: TextModifier = new TextModifier()
	@State _backgroundBrightnessTextAreaModifier: TextAreaModifier = new TextAreaModifier()
	@State _backgroundBrightnessTextClockModifier: TextClockModifier = new TextClockModifier()
	@State _backgroundBrightnessTextInputModifier: TextInputModifier = new TextInputModifier()
	@State _backgroundBrightnessTextPickerModifier: TextPickerModifier = new TextPickerModifier()
	@State _backgroundBrightnessTextTimerModifier: TextTimerModifier = new TextTimerModifier()
	@State _backgroundBrightnessTimePickerModifier: TimePickerModifier = new TimePickerModifier()
	@State _backgroundBrightnessToggleModifier: ToggleModifier = new ToggleModifier()
	@State _backgroundBrightnessVideoModifier: VideoModifier = new VideoModifier()
	@State _backgroundBrightnessWaterFlowModifier: WaterFlowModifier = new WaterFlowModifier()
	@State _backgroundBrightnessWebModifier: WebModifier = new WebModifier()
	@State _backgroundBrightnessWindowSceneModifier: WindowSceneModifier = new WindowSceneModifier()
	@State _backgroundBrightnessXComponentModifier: XComponentModifier = new XComponentModifier()
	@State targetView: string = router.getParams() ? router.getParams()['view']['targetView'] : ''
	@State componentKey: string = router.getParams() ? router.getParams()['view']['componentKey'] : ''
	@State parentWidth: number = router.getParams() ? router.getParams()['view']['parentWidth'] : 0
	@State parentHeight: number = router.getParams() ? router.getParams()['view']['parentHeight'] : 0
	@State columns: number = router.getParams() ? router.getParams()['view']['columns'] : 0
	@State gutter: number = router.getParams() ? router.getParams()['view']['gutter'] : 0
	@State parentBackGroundColor: string = router.getParams() ? router.getParams()['view']['parentBackGroundColor'] : '#FFFF00'
	@State parentComponentKey: string = router.getParams() ? router.getParams()['view']['parentComponentKey'] : ''

	onPageShow() {
		console.info('backgroundBrightness translate page show called ')
		attrsManager.registerDataChange(value => {
			console.info('backgroundBrightness [registerDataChange] ' + JSON.stringify(value.backgroundBrightness))
			this._backgroundBrightnessAlphabetIndexerModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessBadgeModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessButtonModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessBlankModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessCalendarPickerModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessCanvasModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessCheckboxModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessCheckboxGroupModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessCircleModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessColumnModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessColumnSplitModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessCounterModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessDataPanelModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessDatePickerModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessDividerModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessEllipseModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessFlexModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessFlowItemModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessFormLinkModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessGaugeModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessGridModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessGridColModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessGridItemModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessGridRowModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessHyperlinkModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessImageModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessImageAnimatorModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessLineModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessListModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessListItemModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessListItemGroupModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessLoadingProgressModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessMarqueeModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessMenuModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessMenuItemModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessMenuItemGroupModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessNavDestinationModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessNavigationModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessNavigatorModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessNavRouterModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessPanelModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessPathModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessPolygonModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessPolylineModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessProgressModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessQRCodeModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessRadioModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessRatingModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessRectModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessRefreshModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessRelativeContainerModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessRemoteWindowModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessRichEditorModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessRichTextModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessRowModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessRowSplitModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessScrollModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessScrollBarModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessSearchModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessSelectModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessShapeModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessSideBarContainerModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessSliderModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessSpanModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessStackModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessStepperModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessStepperItemModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessSwiperModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessTabContentModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessTabsModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessTextModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessTextAreaModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessTextClockModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessTextInputModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessTextPickerModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessTextTimerModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessTimePickerModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessToggleModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessVideoModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessWaterFlowModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessWebModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessWindowSceneModifier.mBackgroundBrightness = value.backgroundBrightness
			this._backgroundBrightnessXComponentModifier.mBackgroundBrightness = value.backgroundBrightness
		})
	}

	@Styles
  commonStyle() {
		.key(this.componentKey)
  }

	build() {
		Column() {
			if (this.targetView == 'AlphabetIndexer') {
				AlphabetIndexer({ arrayValue: ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G'], selected: 0 })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessAlphabetIndexerModifier)
			}
			if (this.targetView == 'Button') {
				Button('button1')
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessButtonModifier)
			}
			if (this.targetView == 'Blank') {
				Blank()
					.backgroundColor(Color.Yellow)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessBlankModifier)
			}
			if (this.targetView == 'Checkbox') {
				Checkbox()
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessCheckboxModifier)
			}
			if (this.targetView == 'CheckboxGroup') {
				CheckboxGroup({ group: 'checkboxGroup' })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessCheckboxGroupModifier)
			}
			if (this.targetView == 'DataPanel') {
				DataPanel({ values: [5, 10, 10, 7, 9, 10, 10, 10, 10] })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessDataPanelModifier)
			}
			if (this.targetView == 'DatePicker') {
				DatePicker({ start: new Date('1970-1-1'), end: new Date('2100-1-1') })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessDatePickerModifier)
			}
			if (this.targetView == 'Divider') {
				Divider()
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessDividerModifier)
			}
			if (this.targetView == 'Gauge') {
				Gauge({ value: 105 })
					.colors([[0x317AF7, 1], [0x5BA854, 1], [0xE08C3A, 1], [0x9C554B, 1]])
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessGaugeModifier)
			}
			if (this.targetView == 'Image') {
				Image($r('app.media.icon'))
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessImageModifier)
			}
			if (this.targetView == 'ImageAnimator') {
				ImageAnimator()
					.images([{ src: $r('app.media.icon') }])
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessImageAnimatorModifier)
			}
			if (this.targetView == 'LoadingProgress') {
				LoadingProgress()
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessLoadingProgressModifier)
			}
			if (this.targetView == 'Marquee') {
				Marquee({ 
					start: true,
					step: 50,
					loop: Infinity,
					fromStart: true,
					src: 'Running Marquee starts rolling'
				})
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessMarqueeModifier)
			}
			if (this.targetView == 'Navigation') {
				Navigation() {
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessNavigationModifier)
			}
			if (this.targetView == 'Menu') {
				Menu() {
					MenuItem({ startIcon: $r('app.media.icon'), content: 'Menu' })
				}
					.backgroundColor(Color.Yellow)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessMenuModifier)
			}
			if (this.targetView == 'NavRouter') {
				NavRouter() {
					Row() {
						Image($r('app.media.icon'))
					}

					NavDestination() {
						Text('NavDestination')
							.fontSize(10)
					}
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessNavRouterModifier)
			}
			if (this.targetView == 'Progress') {
				Progress({ value: 10, type: ProgressType.Eclipse })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessProgressModifier)
			}
			if (this.targetView == 'QRCode') {
				QRCode('Running Marquee starts rolling')
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessQRCodeModifier)
			}
			if (this.targetView == 'Radio') {
				Radio({ value: 'Radio1', group: 'radioGroup' })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessRadioModifier)
			}
			if (this.targetView == 'Rating') {
				Rating({ rating: 3.5, indicator: false })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessRatingModifier)
			}
			if (this.targetView == 'ScrollBar') {
				ScrollBar({ scroller: new Scroller(), state: BarState.On }) {
					Text()
						.width(20)
						.height(100)
						.borderRadius(10)
						.backgroundColor('#C0C0C0')
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessScrollBarModifier)
			}
			if (this.targetView == 'Search') {
				Search()
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessSearchModifier)
			}
			if (this.targetView == 'Select') {
				Select([{ value: 'aaa' }, { value: 'bbb' }])
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessSelectModifier)
			}
			if (this.targetView == 'Slider') {
				Slider({ value: 50, min: 0, max: 100, style: SliderStyle.OutSet })
					.showTips(true)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessSliderModifier)
			}
			if (this.targetView == 'Stepper') {
				Stepper() {
					StepperItem() {
						Column() {
							Text('Page One')
						}
					}
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessStepperModifier)
			}
			if (this.targetView == 'StepperItem') {
				Stepper() {
					StepperItem() {
						Column() {
							Text('Page One')
						}
					}
						.backgroundColor(Color.Red)
						.commonStyle()
						.attributeModifier(this._backgroundBrightnessStepperItemModifier)
				}
					.backgroundColor(Color.Yellow)
					.width('100%')
					.height('100%')
			}
			if (this.targetView == 'Text') {
				Text('text1')
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessTextModifier)
			}
			if (this.targetView == 'TextArea') {
				TextArea({ placeholder: 'The text area can hold an unlimited amount of text. input your word...' })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessTextAreaModifier)
			}
			if (this.targetView == 'TextClock') {
				TextClock({ timeZoneOffset: -8 })
					.format('hms')
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessTextClockModifier)
			}
			if (this.targetView == 'TextInput') {
				TextInput({ placeholder: 'input your word...' })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessTextInputModifier)
			}
			if (this.targetView == 'TextPicker') {
				TextPicker({ range: ['#', 'A', 'B', 'C', 'D', 'E', 'F', 'G'] })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessTextPickerModifier)
			}
			if (this.targetView == 'TextTimer') {
				TextTimer({ isCountDown: true, count: 30000 })
					.format('mm:ss.SS')
					.fontColor(Color.Black)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessTextTimerModifier)
			}
			if (this.targetView == 'TimePicker') {
				TimePicker({ selected: new Date('2022-07-22T08:00:00') })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessTimePickerModifier)
			}
			if (this.targetView == 'Toggle') {
				Toggle({ type: ToggleType.Switch, isOn: false })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessToggleModifier)
			}
			if (this.targetView == 'Web') {
				Web({ src: 'www.example.com', controller: new WebController() })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessWebModifier)
			}
			if (this.targetView == 'Circle') {
				Circle()
					.width(150)
					.height(200)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessCircleModifier)
			}
			if (this.targetView == 'Ellipse') {
				Ellipse()
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessEllipseModifier)
			}
			if (this.targetView == 'Line') {
				Line()
					.startPoint([0, 0])
					.endPoint([50, 100])
					.backgroundColor(Color.Black)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessLineModifier)
			}
			if (this.targetView == 'Polyline') {
				Polyline()
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessPolylineModifier)
			}
			if (this.targetView == 'Polygon') {
				Polygon()
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessPolygonModifier)
			}
			if (this.targetView == 'Path') {
				Path()
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessPathModifier)
			}
			if (this.targetView == 'Rect') {
				Rect()
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessRectModifier)
			}
			if (this.targetView == 'Shape') {
				Shape() {
					Rect()
						.width(100)
						.height(50)
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessShapeModifier)
			}
			if (this.targetView == 'Badge') {
				Badge({ count: 50, style: { color: 0xFFFFFF, fontSize: 16, badgeSize: 20, badgeColor: Color.Red } }) {
					Button('message')
						.width(100)
						.height(50)
						.backgroundColor(0x317aff)
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessBadgeModifier)
			}
			if (this.targetView == 'Column') {
				Column() {
					Button()
						.width(100)
						.height(50)
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessColumnModifier)
			}
			if (this.targetView == 'ColumnSplit') {
				ColumnSplit() {
					Text('1')
						.width('100%')
						.height(50)
						.backgroundColor(0xF5DEB3)
						.textAlign(TextAlign.Center)
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessColumnSplitModifier)
			}
			if (this.targetView == 'Counter') {
				Counter() {
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessCounterModifier)
			}
			if (this.targetView == 'Flex') {
				Flex() {
					Text('1')
						.width('20%')
						.height(50)
						.backgroundColor(0xF5DEB3)
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessFlexModifier)
			}
			if (this.targetView == 'GridRow') {
				GridRow({ columns: 1, direction: GridRowDirection.Row }) {
					ForEach(
						[Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Pink, Color.Grey, Color.Blue, Color.Brown],
						(color) => {
							GridCol({ span: { xs: 1, sm: 2, md: 3, lg: 4 } }) {
								Row()
									.width('100%')
									.height('20vp')
							}
								.borderColor(color)
								.borderWidth(2)
						}
					)
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessGridRowModifier)
			}
			if (this.targetView == 'Grid') {
				Grid() {
					ForEach(['0', '1', '2', '3', '4'], () => {
						ForEach(['0', '1', '2', '3', '4'], (day: string) => {
							GridItem() {
								Text(day)
									.backgroundColor(Color.White)
									.width('100%')
									.height('100%')
									.textAlign(TextAlign.Center)
							}
						})
					})
				}
					.columnsTemplate('1fr 1fr 1fr 1fr 1fr')
					.rowsTemplate('1fr 1fr 1fr 1fr 1fr')
					.backgroundColor(0xFAEEE0)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessGridModifier)
			}
			if (this.targetView == 'List') {
				List() {
				}
					.height('100%')
					.width('100%')
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessListModifier)
			}
			if (this.targetView == 'ListItem') {
				List({ space: 20, initialIndex: 0 }) {
					ListItem() {
						Text('item1')
							.width('100%')
							.textAlign(TextAlign.Center)
							.backgroundColor(Color.White)
					}
						.commonStyle()
						.attributeModifier(this._backgroundBrightnessListItemModifier)
				}
					.width('100%')
					.height('100%')
			}
			if (this.targetView == 'ListItemGroup') {
				List({ space: 0, initialIndex: 0 }) {
					ListItemGroup()
						.backgroundColor(Color.Yellow)
						.commonStyle()
						.attributeModifier(this._backgroundBrightnessListItemGroupModifier)
				}
					.backgroundColor(Color.Pink)
					.width('100%')
					.height('100%')
			}
			if (this.targetView == 'Navigator') {
				Navigator() {
					Text('Go to back page')
						.width('100%')
						.height(20)
				}
					.backgroundColor(Color.Red)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessNavigatorModifier)
			}
			if (this.targetView == 'Panel') {
				Panel(true) {
					Text('Text')
				}
					.backgroundColor(Color.Yellow)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessPanelModifier)
			}
			if (this.targetView == 'Refresh') {
				Refresh({ refreshing: true }) {
					Text('123')
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessRefreshModifier)
			}
			if (this.targetView == 'RelativeContainer') {
				RelativeContainer() {
					Row()
						.width(100)
						.height(100)
						.backgroundColor('#FF3333')
						.alignRules({
							top: { anchor: '__container__', align: VerticalAlign.Top },
							left: { anchor: '__container__', align: HorizontalAlign.Start }
						})
						.id('constraintSize')
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessRelativeContainerModifier)
			}
			if (this.targetView == 'Row') {
				Row()
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessRowModifier)
			}
			if (this.targetView == 'RowSplit') {
				RowSplit() {
					Text('Text')
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessRowSplitModifier)
			}
			if (this.targetView == 'Scroll') {
				Scroll() {
					Column() {
						ForEach([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], (item) => {
							Text('Scroll' + item.toString())
								.width('90%')
								.height(50)
								.backgroundColor(Color.White)
								.textAlign(TextAlign.Center)
						}, item => item)
					}
					.width('100%')
				}
					.scrollBar(BarState.On)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessScrollModifier)
			}
			if (this.targetView == 'SideBarContainer') {
				SideBarContainer(SideBarContainerType.Embed) {
					Column() {
						ForEach([1, 2, 3], (item) => {
							Column({ space: 5 }) {
								Image($r('app.media.icon'))
									.width(50)
									.height(50)
								Text('Index0' + item)
									.fontSize(25)
							}
						})
					}
						.width('100%')
						.justifyContent(FlexAlign.SpaceEvenly)
						.backgroundColor(Color.Green)

					Column() {
						Text('SideBarContainer content')
							.fontSize(25)
					}
						.backgroundColor(Color.Orange)
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessSideBarContainerModifier)
			}
			if (this.targetView == 'Stack') {
				Stack() {
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessStackModifier)
			}
			if (this.targetView == 'Swiper') {
				Swiper() {
					ForEach([1, 2, 3], (item: string) => {
						Text('Swiper' + item)
							.width('90%')
							.height(50)
					}, item => item)
				}
					.indicator(true)
					.backgroundColor(Color.White)
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessSwiperModifier)
			}
			if (this.targetView == 'Tabs') {
				Tabs() {
					TabContent() {
						Column()
							.width('100%')
							.height('100%')
							.backgroundColor('#00CB87')
					}
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessTabsModifier)
			}
			if (this.targetView == 'TabContent') {
				Tabs() {
					TabContent() {
						Text('TabContent Test')
							.width('100%')
							.height('100%')
							.backgroundColor(Color.White)
					}
						.tabBar('Tabs1')
						.commonStyle()
						.attributeModifier(this._backgroundBrightnessTabContentModifier)
				}
					.width('100%')
					.height('100%')
			}
			if (this.targetView == 'WaterFlow') {
				WaterFlow() {
					ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9], (item: number) => {
						FlowItem() {
							Column() {
								Text('WaterFlow' + item)
									.fontSize(12)
									.height('16')
								Image($r('app.media.icon'))
									.width(50)
									.height(50)
									.objectFit(ImageFit.Fill)
							}
						}
					}, item => item)
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessWaterFlowModifier)
			}
			if (this.targetView == 'GridCol') {
				GridRow({ columns: 1, direction: GridRowDirection.Row }) {
					GridCol() {
						Row()
							.width('100%')
							.height('20vp')
					}
						.backgroundColor(Color.Yellow)
						.commonStyle()
						.attributeModifier(this._backgroundBrightnessGridColModifier)
				}
					.backgroundColor(Color.Pink)
					.width('100%')
					.height('100%')
			}
			if (this.targetView == 'GridItem') {
				Grid() {
					GridItem() {
						Text('4')
							.backgroundColor(0xFAEEE0)
							.width('100%')
							.height('100%')
							.textAlign(TextAlign.Center)
					}
						.rowStart(1)
						.rowEnd(4)
						.backgroundColor(Color.Yellow)
						.commonStyle()
						.attributeModifier(this._backgroundBrightnessGridItemModifier)
				}
					.backgroundColor(Color.Pink)
					.width('100%')
					.height('100%')
			}
			if (this.targetView == 'FlowItem') {
				WaterFlow() {
					ForEach([1, 2, 3, 4, 5, 6, 7, 8, 9], (item: number) => {
						FlowItem() {
							Column() {
								Text('WaterFlow' + item)
									.fontSize(12)
									.height('16')
								Image($r('app.media.icon'))
									.width(50)
									.height(50)
									.objectFit(ImageFit.Fill)
							}
						}
						.backgroundColor(Color.Yellow)
						.commonStyle()
						.attributeModifier(this._backgroundBrightnessFlowItemModifier)
					}, item => item)
				}
					.backgroundColor(Color.Pink)
					.width('100%')
					.height('100%')
			}
			if (this.targetView == 'MenuItem') {
				Row() {
					Menu() {
						MenuItem({ startIcon: $r('app.media.icon'), content: 'MenuItem' })
							.commonStyle()
							.attributeModifier(this._backgroundBrightnessMenuItemModifier)
					}
						.backgroundColor(Color.Yellow)
						.width('100%')
						.height('100%')
				}
					.width('100%')
					.height('100%')
					.backgroundColor(Color.Green)
			}
			if (this.targetView == 'MenuItemGroup') {
				Row() {
					Menu() {
						MenuItemGroup({ header: 'MenuItemGroup' }) {
							MenuItem({ startIcon: $r('app.media.icon'), content: 'MenuItem' })
						}
							.commonStyle()
							.attributeModifier(this._backgroundBrightnessMenuItemGroupModifier)
					}
						.backgroundColor(Color.Yellow)
						.width('100%')
						.height('100%')
				}
					.width('100%')
					.height('100%')
					.backgroundColor(Color.Green)
			}
			if (this.targetView == 'CalendarPicker') {
				CalendarPicker({ hintRadius: 10, selected: new Date() })
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessCalendarPickerModifier)
			}
			if (this.targetView == 'Canvas') {
				Canvas(new CanvasRenderingContext2D(new RenderingContextSettings(true)))
					.backgroundColor('#FFFF00')
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessCanvasModifier)
			}
			if (this.targetView == 'FormLink') {
				FormLink({
					action: "router",
					abilityName: "EntryAbility",
					params: { 'message': 'testForRouter' }
				}) {
					Button("router event").width(120)
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessFormLinkModifier)
			}
			if (this.targetView == 'Hyperlink') {
				Hyperlink('https://example.com/', 'Go to the developer website') {
				}
					.commonStyle()
					.attributeModifier(this._backgroundBrightnessHyperlinkModifier)
			}
			if (this.targetView == 'Span') {
				Text() {
					Span('Span1')
						.commonStyle()
						.attributeModifier(this._backgroundBrightnessSpanModifier)
				}
			}
		}
		.width(this.parentWidth)
		.height(this.parentHeight)
		.backgroundColor(this.parentBackGroundColor || '#FFFF00')
		.key(this.parentComponentKey)
	}
}
