/**
 * Copyright (c) 2023-2030 iSoftStone Information Technology (Group) Co.,Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
import router from '@ohos.router';
import CommonFunc from '../../../../MainAbility/common/Common';
import {MessageManager,Callback} from '../../../../MainAbility/common/MessageManager';
export default function Grid_RowCol_Gap() {
  describe('Grid_RowCol_GapTest', function () {
    beforeEach(async function (done) {
      console.info("Grid_RowCol_Gap beforeEach start");
      let options = {
        url: "MainAbility/pages/Grid/GridTemplatesAllSet/GridChange/Grid_RowCol_Gap",
      }
      try {
        router.clear();
        let pages = router.getState();
        console.info("get Grid_RowCol_Gap state pages:" + JSON.stringify(pages));
        if (!("Grid_RowCol_Gap" == pages.name)) {
          console.info("get Grid_RowCol_Gap pages.name:" + JSON.stringify(pages.name));
          let result = await router.push(options);
          await CommonFunc.sleep(2000);
          console.info("push Grid_RowCol_Gap page result:" + JSON.stringify(result));
        }
      } catch (err) {
        console.error("push Grid_RowCol_Gap page error " + JSON.stringify(err));
        expect().assertFail();
      }
      done();
    });
    afterEach(async function () {
      await CommonFunc.sleep(2000);
      console.info("Grid_RowCol_Gap after each called")
    });
    /**
     * @tc.number    SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0600
     * @tc.name      Grid_RowCol_Gap
     * @tc.desc      Add columnGap,Grid is divided into 4 equal parts, 4 components
     */
    it('SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0600', 0, async function (done) {
      console.info('[SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0600] START');
      await CommonFunc.sleep(3000);
      let gridContainerStrJson = getInspectorByKey('Grid_RowCol_Gap_01');
      let gridContainerObj = JSON.parse(gridContainerStrJson);
      expect(gridContainerObj.$type).assertEqual('Grid');
      let Grid_RowCol_Gap_011 = CommonFunc.getComponentRect('Grid_RowCol_Gap_011');
      let Grid_RowCol_Gap_012 = CommonFunc.getComponentRect('Grid_RowCol_Gap_012');
      let Grid_RowCol_Gap_013 = CommonFunc.getComponentRect('Grid_RowCol_Gap_013');
      let Grid_RowCol_Gap_014 = CommonFunc.getComponentRect('Grid_RowCol_Gap_014');
      let Grid_RowCol_Gap_01 = CommonFunc.getComponentRect('Grid_RowCol_Gap_01');
      expect(Grid_RowCol_Gap_011.left).assertEqual(Grid_RowCol_Gap_01.left);
      expect(Grid_RowCol_Gap_013.left).assertEqual(Grid_RowCol_Gap_01.left);

      expect(Math.round((Grid_RowCol_Gap_012.left - Grid_RowCol_Gap_011.right)*10)/10)
        .assertEqual(Math.round(vp2px(5)*10)/10);
      expect(Math.round((Grid_RowCol_Gap_014.left - Grid_RowCol_Gap_013.right)*10)/10)
        .assertEqual(Math.round(vp2px(5)*10)/10);

      expect(Grid_RowCol_Gap_012.right).assertEqual(Grid_RowCol_Gap_01.right);
      expect(Grid_RowCol_Gap_014.right).assertEqual(Grid_RowCol_Gap_01.right);

      expect(Grid_RowCol_Gap_011.top).assertEqual(Grid_RowCol_Gap_01.top);
      expect(Grid_RowCol_Gap_012.top).assertEqual(Grid_RowCol_Gap_01.top);

      expect(Grid_RowCol_Gap_011.bottom).assertEqual(Grid_RowCol_Gap_013.top);
      expect(Grid_RowCol_Gap_012.bottom).assertEqual(Grid_RowCol_Gap_014.top);

      expect(Grid_RowCol_Gap_013.bottom).assertEqual(Grid_RowCol_Gap_01.bottom);
      expect(Grid_RowCol_Gap_014.bottom).assertEqual(Grid_RowCol_Gap_01.bottom);

      expect(Grid_RowCol_Gap_011.right).assertEqual(Grid_RowCol_Gap_013.right);
      expect(Grid_RowCol_Gap_012.left).assertEqual(Grid_RowCol_Gap_014.left);

      expect(Math.round((Grid_RowCol_Gap_011.right - Grid_RowCol_Gap_011.left)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_012.right - Grid_RowCol_Gap_012.left)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_013.right - Grid_RowCol_Gap_013.left)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_014.right - Grid_RowCol_Gap_014.left)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);

      expect(Math.round(Grid_RowCol_Gap_011.bottom - Grid_RowCol_Gap_011.top)).assertEqual(vp2px(150));
      expect(Math.round(Grid_RowCol_Gap_012.bottom - Grid_RowCol_Gap_012.top)).assertEqual(vp2px(150));
      expect(Math.round(Grid_RowCol_Gap_013.bottom - Grid_RowCol_Gap_013.top)).assertEqual(vp2px(150));
      expect(Math.round(Grid_RowCol_Gap_014.bottom - Grid_RowCol_Gap_014.top)).assertEqual(vp2px(150));
      console.info('[SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0600] END');
      done();
    });
    /**
     * @tc.number    SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0700
     * @tc.name      Grid_RowCol_Gap
     * @tc.desc      Add rowGap,Grid is divided into 4 equal parts, 4 components
     */
    it('SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0700', 0, async function (done) {
      console.info('[SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0700] START');
      globalThis.value.message.notify({name:'addColumnGap', value:0});
      globalThis.value.message.notify({name:'addRowGap', value:5});
      await CommonFunc.sleep(3000);
      let gridContainerStrJson = getInspectorByKey('Grid_RowCol_Gap_01');
      let gridContainerObj = JSON.parse(gridContainerStrJson);
      expect(gridContainerObj.$type).assertEqual('Grid');
      let Grid_RowCol_Gap_011 = CommonFunc.getComponentRect('Grid_RowCol_Gap_011');
      let Grid_RowCol_Gap_012 = CommonFunc.getComponentRect('Grid_RowCol_Gap_012');
      let Grid_RowCol_Gap_013 = CommonFunc.getComponentRect('Grid_RowCol_Gap_013');
      let Grid_RowCol_Gap_014 = CommonFunc.getComponentRect('Grid_RowCol_Gap_014');
      let Grid_RowCol_Gap_01 = CommonFunc.getComponentRect('Grid_RowCol_Gap_01');
      expect(Grid_RowCol_Gap_011.left).assertEqual(Grid_RowCol_Gap_01.left);
      expect(Grid_RowCol_Gap_013.left).assertEqual(Grid_RowCol_Gap_01.left);

      expect(Grid_RowCol_Gap_011.right).assertEqual(Grid_RowCol_Gap_012.left);
      expect(Grid_RowCol_Gap_013.right).assertEqual(Grid_RowCol_Gap_014.left);

      expect(Grid_RowCol_Gap_012.right).assertEqual(Grid_RowCol_Gap_014.right);
      expect(Grid_RowCol_Gap_012.right).assertEqual(Grid_RowCol_Gap_01.right);

      expect(Grid_RowCol_Gap_011.top).assertEqual(Grid_RowCol_Gap_01.top);
      expect(Grid_RowCol_Gap_011.top).assertEqual(Grid_RowCol_Gap_012.top);

      expect(Grid_RowCol_Gap_013.bottom).assertEqual(Grid_RowCol_Gap_01.bottom);
      expect(Grid_RowCol_Gap_014.bottom).assertEqual(Grid_RowCol_Gap_01.bottom);

      expect(Grid_RowCol_Gap_013.top).assertEqual(Grid_RowCol_Gap_014.top);
      expect(Grid_RowCol_Gap_011.bottom).assertEqual(Grid_RowCol_Gap_012.bottom);

      expect(Math.round((Grid_RowCol_Gap_013.top - Grid_RowCol_Gap_011.bottom)*10)/10)
        .assertEqual(Math.round(vp2px(5)*10)/10);
      expect(Math.round((Grid_RowCol_Gap_014.top - Grid_RowCol_Gap_012.bottom)*10)/10)
        .assertEqual(Math.round(vp2px(5)*10)/10);

      expect(Math.round(Grid_RowCol_Gap_011.right - Grid_RowCol_Gap_011.left)).assertEqual(vp2px(150));
      expect(Math.round(Grid_RowCol_Gap_012.right - Grid_RowCol_Gap_012.left)).assertEqual(vp2px(150));
      expect(Math.round(Grid_RowCol_Gap_013.right - Grid_RowCol_Gap_013.left)).assertEqual(vp2px(150));
      expect(Math.round(Grid_RowCol_Gap_014.right - Grid_RowCol_Gap_014.left)).assertEqual(vp2px(150));

      expect(Math.round((Grid_RowCol_Gap_011.bottom - Grid_RowCol_Gap_011.top)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_012.bottom - Grid_RowCol_Gap_012.top)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_013.bottom - Grid_RowCol_Gap_013.top)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_014.bottom - Grid_RowCol_Gap_014.top)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      console.info('[SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0700] END');
      done();
    });
    /**
     * @tc.number    SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0800
     * @tc.name      Grid_RowCol_Gap
     * @tc.desc      Add columnGap and rowGap,Grid is divided into 4 equal parts, 4 components
     */
    it('SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0800', 0, async function (done) {
      console.info('[SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0800] START');
      globalThis.value.message.notify({name:'addColumnGap', value:5});
      globalThis.value.message.notify({name:'addRowGap', value:5});
      await CommonFunc.sleep(3000);
      let gridContainerStrJson = getInspectorByKey('Grid_RowCol_Gap_01');
      let gridContainerObj = JSON.parse(gridContainerStrJson);
      expect(gridContainerObj.$type).assertEqual('Grid');
      let Grid_RowCol_Gap_011 = CommonFunc.getComponentRect('Grid_RowCol_Gap_011');
      let Grid_RowCol_Gap_012 = CommonFunc.getComponentRect('Grid_RowCol_Gap_012');
      let Grid_RowCol_Gap_013 = CommonFunc.getComponentRect('Grid_RowCol_Gap_013');
      let Grid_RowCol_Gap_014 = CommonFunc.getComponentRect('Grid_RowCol_Gap_014');
      let Grid_RowCol_Gap_01 = CommonFunc.getComponentRect('Grid_RowCol_Gap_01');
      expect(Grid_RowCol_Gap_011.left).assertEqual(Grid_RowCol_Gap_01.left);
      expect(Grid_RowCol_Gap_013.left).assertEqual(Grid_RowCol_Gap_01.left);

      expect(Grid_RowCol_Gap_012.right).assertEqual(Grid_RowCol_Gap_014.right);
      expect(Grid_RowCol_Gap_012.right).assertEqual(Grid_RowCol_Gap_01.right);

      expect(Grid_RowCol_Gap_011.top).assertEqual(Grid_RowCol_Gap_01.top);
      expect(Grid_RowCol_Gap_011.top).assertEqual(Grid_RowCol_Gap_012.top);

      expect(Grid_RowCol_Gap_013.bottom).assertEqual(Grid_RowCol_Gap_01.bottom);
      expect(Grid_RowCol_Gap_014.bottom).assertEqual(Grid_RowCol_Gap_01.bottom);

      expect(Grid_RowCol_Gap_013.top).assertEqual(Grid_RowCol_Gap_014.top);
      expect(Grid_RowCol_Gap_011.bottom).assertEqual(Grid_RowCol_Gap_012.bottom);

      expect(Math.round((Grid_RowCol_Gap_013.top - Grid_RowCol_Gap_011.bottom)*10)/10)
        .assertEqual(Math.round(vp2px(5)*10)/10);
      expect(Math.round((Grid_RowCol_Gap_014.top - Grid_RowCol_Gap_012.bottom)*10)/10)
        .assertEqual(Math.round(vp2px(5)*10)/10);

      expect(Math.round((Grid_RowCol_Gap_012.left - Grid_RowCol_Gap_011.right)*10)/10)
        .assertEqual(Math.round(vp2px(5)*10)/10);
      expect(Math.round((Grid_RowCol_Gap_014.left - Grid_RowCol_Gap_013.right)*10)/10)
        .assertEqual(Math.round(vp2px(5)*10)/10);

      expect(Math.round((Grid_RowCol_Gap_011.right - Grid_RowCol_Gap_011.left)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_012.right - Grid_RowCol_Gap_012.left)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_013.right - Grid_RowCol_Gap_013.left)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_014.right - Grid_RowCol_Gap_014.left)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);

      expect(Math.round((Grid_RowCol_Gap_011.bottom - Grid_RowCol_Gap_011.top)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_012.bottom - Grid_RowCol_Gap_012.top)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_013.bottom - Grid_RowCol_Gap_013.top)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      expect(Math.round((Grid_RowCol_Gap_014.bottom - Grid_RowCol_Gap_014.top)*100)/100)
        .assertEqual(Math.round(vp2px(147.5)*100)/100);
      console.info('[SUB_ACE_GRID_GRIDTEMPLATESALLSET_GRIDCHANGE_0800] END');
      done();
    });
  })
}
