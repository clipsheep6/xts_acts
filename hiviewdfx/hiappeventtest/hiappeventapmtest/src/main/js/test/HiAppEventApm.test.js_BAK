/*
 * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import hilog from '@ohos.hilog';
import hiAppEvent from '@ohos.hiviewdfx.hiAppEvent';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';

export default function HiAppEventJSTest() {
    describe('HiAppEventJSTest', () => {
        // Defines a test suite. Two parameters are supported: test suite name and test suite function.
        beforeAll(() => {
            // Presets an action, which is performed only once before all test cases of the test suite start.
            // This API supports only one parameter: preset action function.
        })
        beforeEach(() => {
            // Presets an action, which is performed before each unit test case starts.
            // The number of execution times is the same as the number of test cases defined by **it**.
            // This API supports only one parameter: preset action function.
        })
        afterEach(() => {
            // Presets a clear action, which is performed after each unit test case ends.
            // The number of execution times is the same as the number of test cases defined by **it**.
            // This API supports only one parameter: clear action function.
        })
        afterAll(() => {
            // Presets a clear action, which is performed after all test cases of the test suite end.
            // This API supports only one parameter: clear action function.
        })

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_0200
         * @tc.name testHiAppEventJs02
         * @tc.desc addProcessor -1
         */

        it('testHiAppEventJs02', 0, async (done: Function) => {
            console.info('testHiAppEventJs02 start');
            let processor: hiAppEvent.Processor = {
                name: 'analyticskit',
                onStartReport: true,
            }
            try {
                let processorId = hiAppEvent.addProcessor(processor);
                console.info(`testHiAppEventJs02 > processorId: ${processorId}`);
                expect(processorId == -1).assertTrue()
                hiAppEvent.removeProcessor(processorId)
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs02 > error code: ${err.code}, error msg: ${err.message}`);
                expect(false).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_0300
         * @tc.name testHiAppEventJs03
         * @tc.desc addProcessor 401
         */

        it('testHiAppEventJs03', 0, async (done: Function) => {
            console.info('testHiAppEventJs03 start');
            let processor: hiAppEvent.Processor = {
                name: '',
            }
            try {
                let processorId = hiAppEvent.addProcessor(processor);
                console.info(`testHiAppEventJs03 > processorId: ${processorId}`)
                hiAppEvent.removeProcessor(processorId)
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs03 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_0400
         * @tc.name testHiAppEventJs04
         * @tc.desc removeProcessor
         */

        it('testHiAppEventJs04', 0, async (done: Function) => {
            console.info('testHiAppEventJs04 start');
            let processor: hiAppEvent.Processor = {
                name: 'analyticskit_native',
                routeInfo: 'CN',
            }
            try {
                let processorId = hiAppEvent.addProcessor(processor);
                console.info(`testHiAppEventJs04 > processorId: ${processorId}`)
                hiAppEvent.removeProcessor(processorId)
                hiAppEvent.removeProcessor(processorId)
                hiAppEvent.removeProcessor(-1)
                expect(true).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs04 > error code: ${err.code}, error msg: ${err.message}`);
                expect(false).assertTrue()
                done();
            }
        });

        it('testHiAppEventJs05', 0, async (done: Function) => {
            console.info('testHiAppEventJs05 start');
            let processor: hiAppEvent.Processor = {
                name: 'analyticskit_native',
                debugMode: false,
                routeInfo: '',
                onStartReport: true,
                onBackgroundReport: true,
                periodReport: -1,
                batchReport: -2,
                userIds: [''],
                userProperties: [''],
                eventConfigs: [
                    {
                        domain: '',
                        name: 'testEvent',
                        isRealTime: false
                    }
                ]
            }
            try {
                let processorId = hiAppEvent.addProcessor(processor);
                console.info(`testHiAppEventJs05 > processorId: ${processorId}`)
                hiAppEvent.removeProcessor(processorId)
                expect(true).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs05 > error code: ${err.code}, error msg: ${err.message}`);
                expect(false).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_0600
         * @tc.name testHiAppEventJs06
         * @tc.desc removeProcessor
         */

        it('testHiAppEventJs06', 0, async (done: Function) => {
            console.info('testHiAppEventJs06 start');
            let idName = "";
            for (let i = 0; i < 256; i++) {
                idName += 'a'
            }
            let idValue = "";
            for (let i = 0; i < 256; i++) {
                idValue += 'a'
            }
            try {
                hiAppEvent.setUserId("$", "a");
                let userIdValue1 = hiAppEvent.getUserId("$");
                expect(userIdValue1 == "a").assertTrue()
                hiAppEvent.setUserId("Ab123_$", "123");
                let userIdValue2 = hiAppEvent.getUserId("Ab123_$");
                expect(userIdValue2 == "123").assertTrue()
                hiAppEvent.setUserId(idName, idValue);
                let userIdValue3 = hiAppEvent.getUserId(idName);
                console.info(`testHiAppEventJs06 > userIdValue2: ${userIdValue3}`);
                expect(userIdValue3 == idValue).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs06 > error code: ${err.code}, error msg: ${err.message}`);
                expect(false).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_0700
         * @tc.name testHiAppEventJs07
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs07', 0, async (done: Function) => {
            console.info('testHiAppEventJs07 start');
            let processor: hiAppEvent.Processor = {
                name: 'analyticskit_native',
            }
            try {
                hiAppEvent.setUserId("testUserId", "testUserIdValue")
                hiAppEvent.setUserId("testUserId", "testUserIdValue1")
                let userIdValue = hiAppEvent.getUserId("testUserId")
                expect(userIdValue == "testUserIdValue1").assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs07 > error code: ${err.code}, error msg: ${err.message}`);
                expect(false).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_0800
         * @tc.name testHiAppEventJs08
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs08', 0, async (done: Function) => {
            console.info('testHiAppEventJs08 start');
            let processor: hiAppEvent.Processor = {
                name: 'analyticskit_native',
            }
            try {
                hiAppEvent.setUserId("testUserId", "testUserIdValue")
                hiAppEvent.setUserId("testUserId", "")
                let userIdValue = hiAppEvent.getUserId("testUserId")
                expect(userIdValue == "").assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs08 > error code: ${err.code}, error msg: ${err.message}`);
                expect(false).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_0900
         * @tc.name testHiAppEventJs09
         * @tc.desc removeProcessor
         */

        it('testHiAppEventJs09', 0, async (done: Function) => {
            console.info('testHiAppEventJs09 start');
            let propertyName = "";
            for (let i = 0; i < 256; i++) {
                propertyName += 'a'
            }
            let propertyValue = "";
            for (let i = 0; i < 1024; i++) {
                propertyValue += 'a'
            }
            try {
                hiAppEvent.setUserProperty("$", "a");
                let userPropertyValue1 = hiAppEvent.getUserProperty("$");
                expect(userPropertyValue1 == "a").assertTrue()
                hiAppEvent.setUserProperty("Ab123_$", "123");
                let userPropertyValue2 = hiAppEvent.getUserProperty("Ab123_$");
                expect(userPropertyValue2 == "123").assertTrue()
                hiAppEvent.setUserProperty(propertyName, propertyValue);
                let userPropertyValue3 = hiAppEvent.getUserProperty(propertyName);
                console.info(`testHiAppEventJs09 > userPropertyValue3: ${userPropertyValue3}`);
                expect(userPropertyValue3 == propertyValue).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs09 > error code: ${err.code}, error msg: ${err.message}`);
                expect(false).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_1000
         * @tc.name testHiAppEventJs10
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs10', 0, async (done: Function) => {
            console.info('testHiAppEventJs10 start');
            let processor: hiAppEvent.Processor = {
                name: 'analyticskit_native',
            }
            try {
                hiAppEvent.setUserProperty("testName", "testUserProperty")
                hiAppEvent.setUserProperty("testName", "testUserProperty1")
                let userPropertyValue = hiAppEvent.getUserProperty("testName")
                expect(userPropertyValue == "testUserProperty1").assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs10 > error code: ${err.code}, error msg: ${err.message}`);
                expect(false).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_1100
         * @tc.name testHiAppEventJs11
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs11', 0, async (done: Function) => {
            console.info('testHiAppEventJs11 start');
            let processor: hiAppEvent.Processor = {
                name: 'analyticskit_native',
            }
            try {
                hiAppEvent.setUserProperty("testName", "testUserProperty")
                hiAppEvent.setUserProperty("testName", "")
                let userPropertyValue = hiAppEvent.getUserProperty("testName")
                expect(userPropertyValue == "").assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs11 > error code: ${err.code}, error msg: ${err.message}`);
                expect(false).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_1200
         * @tc.name testHiAppEventJs12
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs12', 0, async (done: Function) => {
            console.info('testHiAppEventJs12 start');
            try {
                hiAppEvent.setUserId("", "testUserIdValue")
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs12 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_1300
         * @tc.name testHiAppEventJs13
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs13', 0, async (done: Function) => {
            console.info('testHiAppEventJs13 start');
            let idName = "";
            for (let i = 0; i < 257; i++) {
                idName += 'a'
            }
            try {
                hiAppEvent.setUserId(idName, "testUserIdValue");
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs13 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_1400
         * @tc.name testHiAppEventJs14
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs14', 0, async (done: Function) => {
            console.info('testHiAppEventJs14 start');
            let idName = "1testUserId";
            try {
                hiAppEvent.setUserId(idName, "testUserIdValue");
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs14 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_1500
         * @tc.name testHiAppEventJs15
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs15', 0, async (done: Function) => {
            console.info('testHiAppEventJs15 start');
            let idValue = "";
            for (let i = 0; i < 257; i++) {
                idValue += 'a'
            }
            try {
                hiAppEvent.setUserId("testUserId", idValue);
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs15 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_1600
         * @tc.name testHiAppEventJs16
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs16', 0, async (done: Function) => {
            console.info('testHiAppEventJs16 start');
            try {
                hiAppEvent.setUserProperty("", "userPropertyValue")
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs16 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_1700
         * @tc.name testHiAppEventJs17
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs17', 0, async (done: Function) => {
            console.info('testHiAppEventJs17 start');
            let propertyName = "";
            for (let i = 0; i < 257; i++) {
                propertyName += 'a'
            }
            try {
                hiAppEvent.setUserProperty(propertyName, "userPropertyValue")
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs17 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_1800
         * @tc.name testHiAppEventJs18
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs18', 0, async (done: Function) => {
            console.info('testHiAppEventJs18 start');
            let propertyName = "1testName";
            try {
                hiAppEvent.setUserProperty(propertyName, "userPropertyValue")
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs18 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_1900
         * @tc.name testHiAppEventJs19
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs19', 0, async (done: Function) => {
            console.info('testHiAppEventJs19 start');
            let propertyValue = "";
            for (let i = 0; i < 1025; i++) {
                propertyValue += 'a'
            }
            try {
                hiAppEvent.setUserProperty("testName", propertyValue)
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs19 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_2000
         * @tc.name testHiAppEventJs20
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs20', 0, async (done: Function) => {
            console.info('testHiAppEventJs20 start');
            try {
                hiAppEvent.getUserId("")
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs20 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_2100
         * @tc.name testHiAppEventJs21
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs21', 0, async (done: Function) => {
            console.info('testHiAppEventJs21 start');
            let idName = "";
            for (let i = 0; i < 257; i++) {
                idName += 'a'
            }
            try {
                hiAppEvent.getUserId(idName);
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs21 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_2200
         * @tc.name testHiAppEventJs22
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs22', 0, async (done: Function) => {
            console.info('testHiAppEventJs22 start');
            let idName = "1testUserId";
            try {
                hiAppEvent.getUserId(idName);
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs22 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_2300
         * @tc.name testHiAppEventJs23
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs23', 0, async (done: Function) => {
            console.info('testHiAppEventJs23 start');
            try {
                hiAppEvent.getUserProperty("")
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs23 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_2400
         * @tc.name testHiAppEventJs24
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs24', 0, async (done: Function) => {
            console.info('testHiAppEventJs24 start');
            let propertyName = "";
            for (let i = 0; i < 257; i++) {
                propertyName += 'a'
            }
            try {
                hiAppEvent.getUserProperty(propertyName)
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs24 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_2500
         * @tc.name testHiAppEventJs25
         * @tc.desc removeProcessor
         */
        it('testHiAppEventJs25', 0, async (done: Function) => {
            console.info('testHiAppEventJs25 start');
            let propertyName = "1testName";
            try {
                hiAppEvent.getUserProperty(propertyName)
                expect(false).assertTrue()
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs25 > error code: ${err.code}, error msg: ${err.message}`);
                expect(err.code == 401).assertTrue()
                done();
            }
        });

        /**
         * @tc.number SUB_DFX_DFT_HiAppEvent_Js_0100
         * @tc.name testHiAppEventJs01
         * @tc.desc addProcessor >0
         */
        it('HiAppEventJs01', 0, async (done: Function) => {
            console.info('testHiAppEventJs01 start');
            let processor: hiAppEvent.Processor = {
                name: 'analyticskit_native',
            }
            let processor1: hiAppEvent.Processor = {
                name: 'analyticskit_native',
                debugMode: true,
                routeInfo: 'CN',
                onStartReport: true,
                onBackgroundReport: true,
                periodReport: 1,
                batchReport: 1,
                userIds: ['testUserId'],
                userProperties: ['testUserPropertyName'],
                eventConfigs: [
                    {
                        domain: 'analytics',
                        name: 'testevent',
                        isRealTime: true
                    }
                ]
            }
            hiAppEvent.clearData()
            try {
                let processorId = hiAppEvent.addProcessor(processor);
                console.info(`testHiAppEventJs01 > processorId: ${processorId}`);
                expect(processorId == 1).assertTrue()
                hiAppEvent.removeProcessor(processorId)

                processorId = hiAppEvent.addProcessor(processor1);
                console.info(`testHiAppEventJs01 > processorId: ${processorId}`);
                expect(processorId == 2).assertTrue()

                hiAppEvent.write({
                    domain: "analytics",
                    name: "testevent",
                    eventType: hiAppEvent.EventType.FAULT,
                    params: {
                        "key_int": 100, "key_string": "demo",
                    }
                }, (err, value) => {
                    if (err) {
                        console.error(`failed to write event because ${err.code}`);
                    } else {
                        console.log(`success to write event: ${value}`)
                        hiAppEvent.removeProcessor(processorId)
                    }
                });
                done()
            }
            catch (err) {
                console.error(`testHiAppEventJs01 > error code: ${err.code}, error msg: ${err.message}`);
                expect(false).assertTrue()
                done();
            }
        });
    })
}