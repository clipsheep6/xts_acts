diff --git a/multimedia/BUILD.gn b/multimedia/BUILD.gn
index 784c956cb354f54105e799b6603055b51b53cf24..cd2dd087ac3b41e9c03733fd9f2110c07640f71a 100644
--- a/multimedia/BUILD.gn
+++ b/multimedia/BUILD.gn
@@ -33,7 +33,8 @@ group("multimedia") {
       "media/media_js_standard/recorderFormat:recorder_format_js_hap",
       "media/media_js_standard/recorderProfile:recorder_profile_js_hap",
       "media/media_js_standard/videoPlayer:video_player_js_hap",
-      "medialibrary/mediaLibrary_js_standard:mediaLibrary_js_hap",
+      "medialibrary/mediaLibrary_basic:mediaLibrary_basic_hap",
+      "medialibrary/mediaLibrary_enhance:mediaLibrary_enhance_hap",
     ]
   } else {
     deps = [
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/AppScope/app.json b/multimedia/medialibrary/mediaLibrary_basic/AppScope/app.json
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/AppScope/app.json
rename to multimedia/medialibrary/mediaLibrary_basic/AppScope/app.json
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/AppScope/resources/base/element/string.json b/multimedia/medialibrary/mediaLibrary_basic/AppScope/resources/base/element/string.json
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/AppScope/resources/base/element/string.json
rename to multimedia/medialibrary/mediaLibrary_basic/AppScope/resources/base/element/string.json
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/AppScope/resources/base/media/app_icon.png b/multimedia/medialibrary/mediaLibrary_basic/AppScope/resources/base/media/app_icon.png
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/AppScope/resources/base/media/app_icon.png
rename to multimedia/medialibrary/mediaLibrary_basic/AppScope/resources/base/media/app_icon.png
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/BUILD.gn b/multimedia/medialibrary/mediaLibrary_basic/BUILD.gn
similarity index 93%
rename from multimedia/medialibrary/mediaLibrary_js_standard/BUILD.gn
rename to multimedia/medialibrary/mediaLibrary_basic/BUILD.gn
index 4b12606708452a2ddae186b8427c32f96d6c0b5e..65024ccfd538bbbf20b19b2335a81b11455a2ab9 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/BUILD.gn
+++ b/multimedia/medialibrary/mediaLibrary_basic/BUILD.gn
@@ -13,7 +13,7 @@
 
 import("//test/xts/tools/build/suite.gni")
 
-ohos_js_hap_suite("mediaLibrary_js_hap") {
+ohos_js_hap_suite("mediaLibrary_basic_hap") {
   hap_profile = "entry/src/main/module.json"
   deps = [
     ":mediaLibrary_js_assets",
@@ -21,7 +21,7 @@ ohos_js_hap_suite("mediaLibrary_js_hap") {
   ]
   ets2abc = true
   certificate_profile = "signature/openharmony_sx.p7b"
-  hap_name = "ActsMediaLibraryJsTest"
+  hap_name = "ActsMediaLibraryBasic"
 }
 
 ohos_app_scope("medialibrary_app_profile") {
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/Test.json b/multimedia/medialibrary/mediaLibrary_basic/Test.json
similarity index 99%
rename from multimedia/medialibrary/mediaLibrary_js_standard/Test.json
rename to multimedia/medialibrary/mediaLibrary_basic/Test.json
index 543d886aab4564b8d724086f73555db7290176c3..721ae5d778ac8ac2a6a0f54eef0042eb1af74357 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/Test.json
+++ b/multimedia/medialibrary/mediaLibrary_basic/Test.json
@@ -55,7 +55,7 @@
         },
         {
             "test-file-name": [
-                "ActsMediaLibraryJsTest.hap"
+                "ActsMediaLibraryBasic.hap"
             ],
             "type": "AppInstallKit",
             "cleanup-apps": true
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/Application/AbilityStage.ts b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/Application/AbilityStage.ts
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/Application/AbilityStage.ts
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/Application/AbilityStage.ts
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/MainAbility/MainAbility.ts b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/MainAbility/MainAbility.ts
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/MainAbility/MainAbility.ts
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/MainAbility/MainAbility.ts
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/pages/index/index.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/pages/index/index.ets
similarity index 97%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/pages/index/index.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/pages/index/index.ets
index b15b989b903b686d0e3766c5662235d1695b0193..80260c48cbd42538c94b516bdffdb6bc902bac7b 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/pages/index/index.ets
+++ b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/pages/index/index.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/pages/second/second.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/pages/second/second.ets
similarity index 95%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/pages/second/second.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/pages/second/second.ets
index 1c1c727ff11ecc97909f482c35268db87ae23bb4..cbec7aac8c093455d163c85be50431dce11708b6 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/pages/second/second.ets
+++ b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/pages/second/second.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/FileAssetGetThumbnailCallBack.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/FileAssetGetThumbnailCallBack.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/FileAssetGetThumbnailCallBack.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/FileAssetGetThumbnailCallBack.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/FileAssetGetThumbnailPromise.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/FileAssetGetThumbnailPromise.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/FileAssetGetThumbnailPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/FileAssetGetThumbnailPromise.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/List.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/List.test.ets
new file mode 100644
index 0000000000000000000000000000000000000000..bc6fe286e8dbe7b7fd8982d9c959af32a638abe3
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/List.test.ets
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import getPermissionTest from './getPermission.test.ets'
+import albumGetFileAssetsCallbackTest from './albumGetFileAssetsCallback.test.ets'
+import albumGetFileAssetsPromiseTest from './albumGetFileAssetsPromise.test.ets'
+import favoriteTestCallBackTest from './favoriteTestCallBack.test.ets'
+import favoriteTestPromiseTest from './favoriteTestPromise.test.ets'
+import fetchFileResultCallBackTest from './fetchFileResultCallBack.test.ets'
+import fetchFileResultPromiseTest from './fetchFileResultPromise.test.ets'
+import fileAssetCallBack2Test from './fileAssetCallBack2.test.ets'
+import FileAssetGetThumbnailCallBackTest from './FileAssetGetThumbnailCallBack.test.ets'
+import FileAssetGetThumbnailPromiseTest from './FileAssetGetThumbnailPromise.test.ets'
+
+export default function testsuite(abilityContext) {
+  getPermissionTest()
+  albumGetFileAssetsCallbackTest(abilityContext)
+  albumGetFileAssetsPromiseTest(abilityContext)
+  favoriteTestCallBackTest(abilityContext)
+  favoriteTestPromiseTest(abilityContext)
+  fetchFileResultCallBackTest(abilityContext)
+  fetchFileResultPromiseTest(abilityContext)
+  fileAssetCallBack2Test(abilityContext)
+  FileAssetGetThumbnailCallBackTest(abilityContext)
+  FileAssetGetThumbnailPromiseTest(abilityContext)
+}
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/MediaScannerFrameWork1.0.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/MediaScannerFrameWork1.0.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/MediaScannerFrameWork1.0.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/MediaScannerFrameWork1.0.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/albumGetFileAssetsCallback.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/albumGetFileAssetsCallback.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/albumGetFileAssetsCallback.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/albumGetFileAssetsCallback.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/albumGetFileAssetsPromise.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/albumGetFileAssetsPromise.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/albumGetFileAssetsPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/albumGetFileAssetsPromise.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/favoriteTestCallBack.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/favoriteTestCallBack.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/favoriteTestCallBack.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/favoriteTestCallBack.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/favoriteTestPromise.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/favoriteTestPromise.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/favoriteTestPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/favoriteTestPromise.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/favtrashTestCallBack.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/favtrashTestCallBack.test.ets
similarity index 99%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/favtrashTestCallBack.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/favtrashTestCallBack.test.ets
index fe27b873b14b071e34fa1a41ccfbeb8b18984193..ccecfea55b53dbcd5cae729634158900084f500a 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/favtrashTestCallBack.test.ets
+++ b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/favtrashTestCallBack.test.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/favtrashTestPromise.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/favtrashTestPromise.test.ets
similarity index 99%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/favtrashTestPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/favtrashTestPromise.test.ets
index ee5a7070e7fb32d5f54c24f0a187132ba4baccc1..418096be8d41218a4676c90bbcdd3107cfcd4c61 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/favtrashTestPromise.test.ets
+++ b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/favtrashTestPromise.test.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fetchFileResultCallBack.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/fetchFileResultCallBack.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fetchFileResultCallBack.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/fetchFileResultCallBack.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fetchFileResultPromise.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/fetchFileResultPromise.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fetchFileResultPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/fetchFileResultPromise.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAsset2.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/fileAsset2.test.ets
similarity index 99%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAsset2.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/fileAsset2.test.ets
index 29877b7a3f5da5fea880b902907419b5b593434b..1bfd3a9b1700bb6dd55b8f2b42627f0c91f5d418 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAsset2.test.ets
+++ b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/fileAsset2.test.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetCallBack2.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/fileAssetCallBack2.test.ets
similarity index 99%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetCallBack2.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/fileAssetCallBack2.test.ets
index c8a5e9ebab5be23ae232527f7aada0d2c7c07907..6659d2d10d8f3f808f94ecf6a0f8cfbb82fa09f6 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetCallBack2.test.ets
+++ b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/fileAssetCallBack2.test.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/getPermission.test.ets b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/getPermission.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/getPermission.test.ets
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/ets/test/getPermission.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/module.json b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/module.json
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/module.json
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/module.json
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/resources/base/element/string.json b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/resources/base/element/string.json
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/resources/base/element/string.json
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/resources/base/element/string.json
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/resources/base/media/icon.png b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/resources/base/media/icon.png
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/resources/base/media/icon.png
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/resources/base/media/icon.png
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/resources/base/profile/main_pages.json b/multimedia/medialibrary/mediaLibrary_basic/entry/src/main/resources/base/profile/main_pages.json
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/resources/base/profile/main_pages.json
rename to multimedia/medialibrary/mediaLibrary_basic/entry/src/main/resources/base/profile/main_pages.json
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/signature/openharmony_sx.p7b b/multimedia/medialibrary/mediaLibrary_basic/signature/openharmony_sx.p7b
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/signature/openharmony_sx.p7b
rename to multimedia/medialibrary/mediaLibrary_basic/signature/openharmony_sx.p7b
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/AppScope/app.json b/multimedia/medialibrary/mediaLibrary_enhance/AppScope/app.json
new file mode 100644
index 0000000000000000000000000000000000000000..5139eaad5d5fd2e2de13b4970785d6fa8ae1a4ba
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/AppScope/app.json
@@ -0,0 +1,21 @@
+{
+    "app":{
+        "bundleName":"ohos.acts.multimedia.mediaLibrary",
+        "vendor":"huawei",
+        "versionCode":1000000,
+        "versionName":"1.0.0",
+        "debug":false,
+        "icon":"$media:icon",
+        "label":"$string:entry_MainAbility",
+        "description":"$string:mainability_description",
+        "distributedNotificationEnabled":true,
+        "keepAlive":true,
+        "singleUser":true,
+        "minAPIVersion":8,
+        "targetAPIVersion":8,
+        "car":{
+            "apiCompatibleVersion":8,
+            "singleUser":false
+        }
+    }
+}
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/AppScope/resources/base/element/string.json b/multimedia/medialibrary/mediaLibrary_enhance/AppScope/resources/base/element/string.json
new file mode 100644
index 0000000000000000000000000000000000000000..c1dee63527ae5e3c37f3736f6b68189e8df6f201
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/AppScope/resources/base/element/string.json
@@ -0,0 +1,12 @@
+{
+  "string": [
+    {
+      "name": "entry_MainAbility",
+      "value": "MediaLibraryJSTestMain"
+    },
+    {
+      "name": "mainability_description",
+      "value": "MediaLibraryJSTestMain Ability"
+    }
+  ]
+}
\ No newline at end of file
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/AppScope/resources/base/media/app_icon.png b/multimedia/medialibrary/mediaLibrary_enhance/AppScope/resources/base/media/app_icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..ce307a8827bd75456441ceb57d530e4c8d45d36c
Binary files /dev/null and b/multimedia/medialibrary/mediaLibrary_enhance/AppScope/resources/base/media/app_icon.png differ
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/BUILD.gn b/multimedia/medialibrary/mediaLibrary_enhance/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..e59282ef70f5142c8ed53767d45bd53026f434e6
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/BUILD.gn
@@ -0,0 +1,40 @@
+# Copyright (c) 2021 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//test/xts/tools/build/suite.gni")
+
+ohos_js_hap_suite("mediaLibrary_enhance_hap") {
+  hap_profile = "entry/src/main/module.json"
+  deps = [
+    ":mediaLibrary_js_assets",
+    ":mediaLibrary_resources",
+  ]
+  ets2abc = true
+  certificate_profile = "signature/openharmony_sx.p7b"
+  hap_name = "ActsMediaLibraryEnhance"
+}
+
+ohos_app_scope("medialibrary_app_profile") {
+  app_profile = "AppScope/app.json"
+  sources = [ "AppScope/resources" ]
+}
+
+ohos_js_assets("mediaLibrary_js_assets") {
+  source_dir = "entry/src/main/ets"
+}
+
+ohos_resources("mediaLibrary_resources") {
+  sources = [ "entry/src/main/resources" ]
+  deps = [ ":medialibrary_app_profile" ]
+  hap_profile = "entry/src/main/module.json"
+}
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/Test.json b/multimedia/medialibrary/mediaLibrary_enhance/Test.json
new file mode 100644
index 0000000000000000000000000000000000000000..f4b1c073a1c908e9bc2cd3da3eb61f451f13feeb
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/Test.json
@@ -0,0 +1,64 @@
+{
+    "description": "Configuration for mediaLibrary Tests",
+    "driver": {
+        "type": "JSUnitTest",
+        "test-timeout": "600000",
+        "package": "ohos.acts.multimedia.mediaLibrary",
+        "shell-timeout": "600000"
+    },
+    "kits": [
+        {
+            "type": "ShellKit",
+            "pre-push": [
+            ],
+            "run-command": [
+                "rm -rf /storage/media/100/local/files/*",
+                "rm -rf /data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata/*",
+                "mkdir -pv /storage/media/100/local/files/{Pictures,Videos,Audios,Documents}",
+                "mkdir -p /data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata"
+            ]
+        },
+        {
+            "type": "PushKit",
+            "pre-push": [
+            ],
+            "push": [
+                "./resource/medialibrary/01.jpg ->/data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata",
+                "./resource/medialibrary/01.mp3 ->/data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata",
+                "./resource/medialibrary/01.mp4 ->/data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata",
+                "./resource/medialibrary/01.dat ->/data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata"
+            ]
+        },
+        {
+            "type": "ShellKit",
+            "run-command": [
+                "mkdir -pv /storage/media/100/local/files/{Pictures/{Static,Static01,Album/Static,SR001PRO,SR001CB,Dynamic,Dynamic01,Dynamic02,Dynamic022,DeleteCb01,AblumInfo,DeletePro01,Delete01,Temp},Videos/{Static,Static01,Album/Static,SR001PRO,SR001CB,Dynamic,Dynamic01,Dynamic02,DeleteCb01,AblumInfo,DeletePro01,Delete01},Audios/{Static,Static01,Album/Static,SR001PRO,SR001CB,Dynamic,Dynamic01,Dynamic02,DeleteCb01,AblumInfo,DeletePro01,Delete01},Documents/{Static,Static01,Album/Static,SR001PRO,SR001CB,Dynamic,Dynamic01,Dynamic02,DeleteCb01,AblumInfo,DeletePro01,Delete01}}",
+                "for d in Static Album/Static Dynamic Dynamic01 Dynamic022 AblumInfo; do for i in $$(seq 3); do cp /data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata/01.jpg /storage/media/100/local/files/Pictures/$$d/0$$i.jpg; done;done;",
+                "for d in Static Album/Static Dynamic Dynamic01 Dynamic02 AblumInfo; do for i in $$(seq 3); do cp /data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata/01.mp3 /storage/media/100/local/files/Audios/$$d/0$$i.mp3; done;done;",
+                "for d in Static Album/Static Dynamic Dynamic01 Dynamic02 AblumInfo; do for i in $$(seq 3); do cp /data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata/01.mp4 /storage/media/100/local/files/Videos/$$d/0$$i.mp4; done;done;",
+                "for d in Static Album/Static Dynamic Dynamic01 Dynamic02 AblumInfo; do for i in $$(seq 3); do cp /data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata/01.dat /storage/media/100/local/files/Documents/$$d/0$$i.dat; done;done;",
+               
+                "for d in SR001PRO SR001CB DeleteCb01 DeletePro01 Static01;  do cp /data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata/01.jpg /storage/media/100/local/files/Pictures/$$d ;done;",
+                "for d in SR001PRO SR001CB DeleteCb01 DeletePro01 Static01;  do cp /data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata/01.mp3 /storage/media/100/local/files/Audios/$$d ;done;",
+                "for d in SR001PRO SR001CB DeleteCb01 DeletePro01 Static01;  do cp /data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata/01.mp4 /storage/media/100/local/files/Videos/$$d ;done;",
+                "for d in SR001PRO SR001CB DeleteCb01 DeletePro01 Static01;  do cp /data/accounts/account_0/appdata/com.ohos.medialibrary.medialibrarydata/01.dat /storage/media/100/local/files/Documents/$$d ;done;",
+
+                "chmod -R 777 /storage/media/100/local/files/*",
+                "chmod -R 777 /data/service/el2/100/hmdfs/account/files/*",
+                "hilog -Q pidoff",
+                "hilog -p off",
+                "aa start -a com.ohos.photos.MainAbility -b com.ohos.photos",
+                "sleep 60",
+                "sleep 60",
+                "sleep 60"
+            ]
+        },
+        {
+            "test-file-name": [
+                "ActsMediaLibraryEnhance.hap"
+            ],
+            "type": "AppInstallKit",
+            "cleanup-apps": true
+        }
+    ]
+}
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/Application/AbilityStage.ts b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/Application/AbilityStage.ts
new file mode 100644
index 0000000000000000000000000000000000000000..51cb02ba3f5c7011c1cd433d07deebd47a195704
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/Application/AbilityStage.ts
@@ -0,0 +1,9 @@
+import AbilityStage from "@ohos.application.AbilityStage"
+
+export default class MyAbilityStage extends AbilityStage {
+    onCreate() {
+        console.log("[Demo] MyAbilityStage onCreate")
+	globalThis.stageOnCreateRun = 1;
+	globalThis.stageContext = this.context;
+    }
+}
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/MainAbility/MainAbility.ts b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/MainAbility/MainAbility.ts
new file mode 100644
index 0000000000000000000000000000000000000000..2f9d6d1f23f95d9fc891fbc550cd5a589cfb6c89
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/MainAbility/MainAbility.ts
@@ -0,0 +1,36 @@
+import Ability from '@ohos.application.Ability'
+
+export default class MainAbility extends Ability {
+    onCreate(want,launchParam){
+        // Ability is creating, initialize resources for this ability
+        console.log("[Demo] MainAbility onCreate")
+        globalThis.abilityWant = want;
+    }
+
+    onDestroy() {
+        // Ability is destroying, release resources for this ability
+        console.log("[Demo] MainAbility onDestroy")
+    }
+
+    onWindowStageCreate(windowStage) {
+        // Main window is created, set main page for this ability
+        console.log("[Demo] MainAbility onWindowStageCreate")
+        globalThis.abilityContext = this.context
+        windowStage.setUIContent(this.context, "pages/index/index", null)
+    }
+
+    onWindowStageDestroy() {
+        //Main window is destroyed, release UI related resources
+        console.log("[Demo] MainAbility onWindowStageDestroy")
+    }
+
+    onForeground() {
+        // Ability has brought to foreground
+        console.log("[Demo] MainAbility onForeground")
+    }
+
+    onBackground() {
+        // Ability has back to background
+        console.log("[Demo] MainAbility onBackground")
+    }
+};
\ No newline at end of file
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/pages/index/index.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/pages/index/index.ets
new file mode 100644
index 0000000000000000000000000000000000000000..80260c48cbd42538c94b516bdffdb6bc902bac7b
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/pages/index/index.ets
@@ -0,0 +1,68 @@
+/*
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import file from '@system.file';
+
+import {Core, ExpectExtend, InstrumentLog, ReportExtend} from "deccjsunit/index"
+import testsuite from "../../test/List.test.ets"
+
+
+@Entry
+@Component
+struct Index {
+
+  aboutToAppear(){
+    console.info("start run testcase!!!!")
+    const core = Core.getInstance()
+    const expectExtend = new ExpectExtend({
+      'id': 'extend'
+    })
+    core.addService('expect', expectExtend)
+    const reportExtend = new ReportExtend(file)
+
+    core.addService('report', reportExtend)
+    core.init()
+    core.subscribeEvent('task', reportExtend)
+    const configService = core.getDefaultService('config')
+    console.info('parameters---->' + JSON.stringify(globalThis.abilityWant.parameters))
+    globalThis.abilityWant.parameters.timeout = 70000;
+    configService.setConfig(globalThis.abilityWant.parameters)
+    console.info('testsuite()---->')
+    testsuite(globalThis.abilityContext)
+    core.execute()
+    console.info('core.execute()---->')
+  }
+
+  build() {
+    Flex({ direction:FlexDirection.Column, alignItems:ItemAlign.Center, justifyContent: FlexAlign.Center }) {
+      Text('Hello World')
+        .fontSize(50)
+        .fontWeight(FontWeight.Bold)
+      Button() {
+        Text('next page')
+          .fontSize(25)
+          .fontWeight(FontWeight.Bold)
+      }.type(ButtonType.Capsule)
+      .margin({
+        top: 20
+      })
+      .backgroundColor('#0D9FFB')
+      .onClick(() => {
+
+      })
+    }
+    .width('100%')
+    .height('100%')
+  }
+}
\ No newline at end of file
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/pages/second/second.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/pages/second/second.ets
new file mode 100644
index 0000000000000000000000000000000000000000..cbec7aac8c093455d163c85be50431dce11708b6
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/pages/second/second.ets
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import router from '@system.router';
+
+@Entry
+@Component
+struct Second {
+  private content: string = "Second Page"
+
+  build() {
+    Flex({ direction: FlexDirection.Column,alignItems: ItemAlign.Center, justifyContent: FlexAlign.Center }) {
+      Text(`${this.content}`)
+        .fontSize(50)
+        .fontWeight(FontWeight.Bold)
+      Button() {
+        Text('back to index')
+          .fontSize(20)
+          .fontWeight(FontWeight.Bold)
+      }.type(ButtonType.Capsule)
+      .margin({
+        top: 20
+      })
+      .backgroundColor('#0D9FFB')
+      .onClick(() => {
+        router.back()
+      })
+    }
+    .width('100%')
+    .height('100%')
+  }
+}
\ No newline at end of file
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/List.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/List.test.ets
similarity index 66%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/List.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/List.test.ets
index cc10b98cdfcf9e32a09e514190955758ac3ee409..6370571efd9688612af07a22573d5cf4d36de194 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/List.test.ets
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/List.test.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
@@ -13,15 +13,6 @@
  * limitations under the License.
  */
 import getPermissionTest from './getPermission.test.ets'
-import albumGetFileAssetsCallbackTest from './albumGetFileAssetsCallback.test.ets'
-import albumGetFileAssetsPromiseTest from './albumGetFileAssetsPromise.test.ets'
-import favoriteTestCallBackTest from './favoriteTestCallBack.test.ets'
-import favoriteTestPromiseTest from './favoriteTestPromise.test.ets'
-import fetchFileResultCallBackTest from './fetchFileResultCallBack.test.ets'
-import fetchFileResultPromiseTest from './fetchFileResultPromise.test.ets'
-import fileAssetCallBack2Test from './fileAssetCallBack2.test.ets'
-import FileAssetGetThumbnailCallBackTest from './FileAssetGetThumbnailCallBack.test.ets'
-import FileAssetGetThumbnailPromiseTest from './FileAssetGetThumbnailPromise.test.ets'
 import fileAssetPromise2Test from './fileAssetPromise2.test.ets'
 import fileAssetTestCallbackTest from './fileAssetTestCallback.test.ets'
 import fileAssetTestPromiseTest from './fileAssetTestPromise.test.ets'
@@ -39,15 +30,6 @@ import mediaLibraryTestPromiseOnOffTest from './mediaLibraryTestPromiseOnOff.tes
 
 export default function testsuite(abilityContext) {
   getPermissionTest()
-  albumGetFileAssetsCallbackTest(abilityContext)
-  albumGetFileAssetsPromiseTest(abilityContext)
-  favoriteTestCallBackTest(abilityContext)
-  favoriteTestPromiseTest(abilityContext)
-  fetchFileResultCallBackTest(abilityContext)
-  fetchFileResultPromiseTest(abilityContext)
-  fileAssetCallBack2Test(abilityContext)
-  FileAssetGetThumbnailCallBackTest(abilityContext)
-  FileAssetGetThumbnailPromiseTest(abilityContext)
   fileAssetPromise2Test(abilityContext)
   fileAssetTestCallbackTest(abilityContext)
   fileAssetTestPromiseTest(abilityContext)
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/MediaScannerFrameWork1.0.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/MediaScannerFrameWork1.0.test.ets
new file mode 100644
index 0000000000000000000000000000000000000000..4d54e324c0159eeaab70fa6d104a06b36315e506
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/MediaScannerFrameWork1.0.test.ets
@@ -0,0 +1,1260 @@
+/*
+ * Copyright (C) 2022 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ 
+import mediaLibrary from '@ohos.multimedia.mediaLibrary';
+import featureAbility from '@ohos.ability.featureAbility';
+
+import {describe, beforeAll, beforeEach, afterEach, afterAll, it, expect} from 'deccjsunit/index'
+
+
+describe('GET_MEDIA_AUDIO_VIDEO_IMAGE_ALBUM.test.js', function () {
+console.info("MediaLibraryTest : mediaLibrary Instance before");
+
+const context = featureAbility.getContext();
+const media = mediaLibrary.getMediaLibrary(context);
+
+//const media = mediaLibrary.getMediaLibrary();
+let scannerObj = mediaLibrary.getScannerInstance();
+console.info("MediaLibraryTest :mediaLibrary Instance after");
+let path = "/storage/media/local/files/"
+
+beforeAll(function () {
+//onsole.info('beforeAll： Prerequisites at the test suite level, which are executed before the test suite is executed.');
+
+})
+
+beforeEach(function () {
+//console.info('MediaLibraryTest: beforeEach：Prerequisites at the test case level, which are executed before each test case is executed.');
+
+})
+afterEach(function () {
+//console.info('MediaLibraryTest: afterEach： Test case-level clearance conditions, which are executed after each test case is executed.');
+
+})
+afterAll(function () {
+//console.info('MediaLibraryTest: afterAll：  Test suite-level cleanup condition, which is executed after the test suite is executed');
+
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_DIR_PUBLIC_DIRECTORY_EMPTY_001
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+it('SUB_SCANNER_CB_SCAN_DIR_PUBLIC_DIRECTORY_EMPTY_001', 0, async function (done) {
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest :MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(path,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN PUBLIC DIRECOTY IS SUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : 001_SUB_MEDIA_MEDIALIBRARY_SCAN_DIR_DATA_MEDIA : PASS');
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : 001_SUB_MEDIA_MEDIALIBRARY_SCAN_DIR_DATA_MEDIA : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_IMAGE_ALBUM_002
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_SCAN_IMAGE_ALBUM_002', 0, async function (done) {
+    console.info('MediaLibraryTest : create Image album (jpg)');
+    const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_IMAGE);
+    let mediaType = mediaLibrary.MediaType.IMAGE;
+    await media.createAsset(mediaType, "image.jpg", path1).then (function (asset) {
+        console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+    }).catch(function(err){
+        console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+    });
+    await sleep(1000);
+    let scanImageAlbumPath = "/storage/media/100/local/files/"+path1
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(scanImageAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN IMAGE ALBUM IS SUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_IMAGE_ALBUM_002 : PASS');
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_IMAGE_ALBUM_002 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_AUDIO_ALBUM_003
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_SCAN_AUDIO_ALBUM_003', 0, async function (done) {
+    console.info('MediaLibraryTest : create Audio album (MP3)');
+    const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_AUDIO);
+    let mediaType = mediaLibrary.MediaType.AUDIO;
+    await media.createAsset(mediaType, "audio.mp3", path1).then (function (asset) {
+        console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+    }).catch(function(err){
+        console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+    });
+    await sleep(1000);
+    let scanAudioAlbumPath = "/storage/media/100/local/files/"+path1
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(scanAudioAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN AUDIO ALBUM IS SUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_ALBUM_003 : PASS');
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_ALBUM_003 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_VIDEO_ALBUM_004
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_SCAN_VIDEO_ALBUM_004', 0, async function (done) {
+    console.info('MediaLibraryTest : create Video album (MP4)');
+    const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_VIDEO);
+    let mediaType = mediaLibrary.MediaType.VIDEO;
+    await media.createAsset(mediaType, "video.mp4", path1).then (function (asset) {
+        console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+    }).catch(function(err){
+        console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+    });
+    await sleep(1000);
+    let scanVideoAlbumPath = "/storage/media/100/local/files/"+path1
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(scanVideoAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN VIDEO ALBUM IS SUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_VIDEO_ALBUM_004 : PASS');
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_VIDEO_ALBUM_004 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+})
+
+  /* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_DOC_ALBUM_005
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+    it('SUB_SCANNER_CB_SCAN_DOC_ALBUM_005', 0, async function (done) {
+        console.info('MediaLibraryTest : create doc album (txt)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_DOCUMENTS);
+        let mediaType = mediaLibrary.MediaType.FILE;
+        await media.createAsset(mediaType, "Doc.txt", path1).then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+        let scanDocAlbumPath = "/storage/media/100/local/files/"+path1
+        console.info('MediaLibraryTest : starting of scan dir');
+        if (scannerObj == null || scannerObj == undefined){
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanDir(scanDocAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    console.info('MediaLibraryTest : status is '+ data.status);
+                    console.info('MediaLibraryTest : SCAN DOC ALBUM IS SUCCESSFULL');
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_DOC_ALBUM_005 : PASS');
+                } else {
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_DOC_ALBUM_005 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+        }
+        await sleep(1000);
+        done();
+    })
+
+
+
+	    /* *
+        * @tc.number    : SUB_SCANNER_CB_NONEXISTING_ALBUM_009
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_NONEXISTING_ALBUM_009', 0, async function (done) {
+    let modifiedAlbumPath = "Pictures/NONEXISTING/";
+    await sleep(1000);
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(modifiedAlbumPath,async (err, data) => {
+            if (data == undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN OF NON EXISTING ALBUM IS UNSUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_NONEXISTING_ALBUM_009 : PASS');
+            } else {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_NONEXISTING_ALBUM_009 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+    })
+
+	    /* *
+        * @tc.number    : SUB_SCANNER_CB_UNICODE_ALBUM_010
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+    it('SUB_SCANNER_CB_UNICODE_ALBUM_010', 0, async function (done) {
+        console.info('MediaLibraryTest : create Audio album (MP3)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_IMAGE);
+        let mediaType = mediaLibrary.MediaType.IMAGE;
+        await media.createAsset(mediaType, "image_UNICODE.jpg", path1+"来自于华为公司/").then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+        let scanImageAlbumPath = "/storage/media/100/local/files/"+path1
+        console.info('MediaLibraryTest : starting of scan dir');
+        if (scannerObj == null || scannerObj == undefined){
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanDir(scanImageAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    console.info('MediaLibraryTest : status is '+ data.status);
+                    console.info('MediaLibraryTest : SCAN Audio album (MP3) IS SUCCESSFULL');
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_UNICODE_ALBUM_010 : PASS');
+                } else {
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_UNICODE_ALBUM_010 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+        }
+        await sleep(1000);
+        done();
+
+    })
+
+	    /* *
+        * @tc.number    : SUB_SCANNER_CB_CANONICAL_ALBUM_011
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_CANONICAL_ALBUM_011', 0, async function (done) {
+    console.info('MediaLibraryTest : create Image album (jpg)');
+    const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_IMAGE);
+    let mediaType = mediaLibrary.MediaType.IMAGE;
+    await media.createAsset(mediaType, "image_UNICODE.jpg", path1+"1/2/3/4/").then (function (asset) {
+        console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+    }).catch(function(err){
+        console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+    });
+    await sleep(1000);
+    let scanImageAlbumPath = "/storage/media/100/local/files/"+path1+"../../../../"
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(scanImageAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN Image album (jpg) SUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_CANONICAL_ALBUM_011 : PASS');
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_CANONICAL_ALBUM_011 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+    })
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_NON_PUBLIC_DIRECTORY_012
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_NON_PUBLIC_DIRECTORY_012', 0, async function (done) {
+    let nonPublicDirectoryPath = "/data/media"
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest :MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(nonPublicDirectoryPath,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                if (data.status != 0){
+                    console.info('MediaLibraryTest : SCAN NON PUBLIC DIRECOTY IS UNSUCCESSFULL');
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_NON_PUBLIC_DIRECTORY_012 : PASS');
+                }else{
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_NON_PUBLIC_DIRECTORY_012 : FAIL');
+                }
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_NON_PUBLIC_DIRECTORY_012 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_IMAGE_JPG_FILE_013
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+it('SUB_SCANNER_CB_SCAN_IMAGE_JPG_FILE_013', 0, async function (done) {
+    console.info('MediaLibraryTest : create Image album (jpg)');
+    const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_IMAGE);
+    let mediaType = mediaLibrary.MediaType.IMAGE;
+    await media.createAsset(mediaType, "Scan_image_01.jpg", path1).then (function (asset) {
+        console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+    }).catch(function(err){
+        console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+    });
+    await sleep(1000);
+    let scanImageAlbumPath = "/storage/media/100/local/files/"+path1
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(scanImageAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN Image album (jpg) IS SUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_IMAGE_JPG_FILE_013 : PASS');
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_IMAGE_JPG_FILE_013 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+})
+
+
+  /* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_IMAGE_PNG_FILE_014
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+    it('SUB_SCANNER_CB_SCAN_IMAGE_PNG_FILE_014', 0, async function (done) {
+        console.info('MediaLibraryTest : create Image album (png)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_IMAGE);
+        let mediaType = mediaLibrary.MediaType.IMAGE;
+        await media.createAsset(mediaType, "Scan_image_02.png", path1).then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+        let scanImageAlbumPath = "/storage/media/100/local/files/"+path1
+        console.info('MediaLibraryTest : starting of scan dir');
+        if (scannerObj == null || scannerObj == undefined){
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanDir(scanImageAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    console.info('MediaLibraryTest : status is '+ data.status);
+                    console.info('MediaLibraryTest : SCAN Image album (png) IS SUCCESSFULL');
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_IMAGE_PNG_FILE_014 : PASS');
+                } else {
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_IMAGE_PNG_FILE_014 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+        }
+        await sleep(1000);
+        done();
+    })
+
+	/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_AUDIO_AAC_FILE_015
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+    it('SUB_SCANNER_CB_SCAN_AUDIO_AAC_FILE_015', 0, async function (done) {
+        console.info('MediaLibraryTest : create Audio album (AAC)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_AUDIO);
+        let mediaType = mediaLibrary.MediaType.AUDIO;
+        await media.createAsset(mediaType, "audio.aac", path1).then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+        let scanAudioAlbumPath = "/storage/media/100/local/files/"+path1
+        console.info('MediaLibraryTest : starting of scan dir');
+        if (scannerObj == null || scannerObj == undefined){
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanDir(scanAudioAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    console.info('MediaLibraryTest : status is '+ data.status);
+                    console.info('MediaLibraryTest : SCAN AUDIO ALBUM IS SUCCESSFULL');
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_AAC_FILE_015 : PASS');
+                } else {
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_AAC_FILE_015 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+        }
+        await sleep(1000);
+        done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_AUDIO_FLAC_FILE_016
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+    it('SUB_SCANNER_CB_SCAN_AUDIO_FLAC_FILE_016', 0, async function (done) {
+        console.info('MediaLibraryTest : create Audio album (FLAC)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_AUDIO);
+        let mediaType = mediaLibrary.MediaType.AUDIO;
+        await media.createAsset(mediaType, "audio.flac", path1).then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+        let scanAudioAlbumPath = "/storage/media/100/local/files/"+path1
+        console.info('MediaLibraryTest : starting of scan dir');
+        if (scannerObj == null || scannerObj == undefined){
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanDir(scanAudioAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    console.info('MediaLibraryTest : status is '+ data.status);
+                    console.info('MediaLibraryTest : SCAN Audio album (FLAC) IS SUCCESSFULL');
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_FLAC_FILE_016 : PASS');
+                } else {
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_FLAC_FILE_016 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+        }
+        await sleep(1000);
+        done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_AUDIO_WAV_FILE_017
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+    it('SUB_SCANNER_CB_SCAN_AUDIO_WAV_FILE_017', 0, async function (done) {
+        console.info('MediaLibraryTest : create Audio album (WAV)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_AUDIO);
+        let mediaType = mediaLibrary.MediaType.AUDIO;
+        await media.createAsset(mediaType, "audio.wav", path1).then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+        let scanAudioAlbumPath = "/storage/media/100/local/files/"+path1
+        console.info('MediaLibraryTest : starting of scan dir');
+        if (scannerObj == null || scannerObj == undefined){
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanDir(scanAudioAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    console.info('MediaLibraryTest : status is '+ data.status);
+                    console.info('MediaLibraryTest : SCAN Audio album (WAV) IS SUCCESSFULL');
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_WAV_FILE_017 : PASS');
+                } else {
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_WAV_FILE_017 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+        }
+        await sleep(1000);
+        done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_AUDIO_MP3_FILE_018
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+    it('SUB_SCANNER_CB_SCAN_AUDIO_MP3_FILE_018', 0, async function (done) {
+        console.info('MediaLibraryTest : create Audio album (MP3)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_AUDIO);
+        let mediaType = mediaLibrary.MediaType.AUDIO;
+        await media.createAsset(mediaType, "scan_audio.MP3", path1).then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+        let scanAudioAlbumPath = "/storage/media/100/local/files/"+path1
+        console.info('MediaLibraryTest : starting of scan dir');
+        if (scannerObj == null || scannerObj == undefined){
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanDir(scanAudioAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    console.info('MediaLibraryTest : status is '+ data.status);
+                    console.info('MediaLibraryTest : SCAN Audio album (MP3) IS SUCCESSFULL');
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_MP3_FILE_018 : PASS');
+                } else {
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_MP3_FILE_018 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+        }
+        await sleep(1000);
+        done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_AUDIO_OGG_FILE_019
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_SCAN_AUDIO_OGG_FILE_019', 0, async function (done) {
+    console.info('MediaLibraryTest : create Audio album (OGG)');
+    const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_AUDIO);
+    let mediaType = mediaLibrary.MediaType.AUDIO;
+    await media.createAsset(mediaType, "audio.0GG", path1).then (function (asset) {
+        console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+    }).catch(function(err){
+        console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+    });
+    await sleep(1000);
+    let scanAudioAlbumPath = "/storage/media/100/local/files/"+path1
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(scanAudioAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN Audio album (OGG) IS SUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_OGG_FILE_019 : PASS');
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_OGG_FILE_019 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_VIDEO_MP4_FILE_020
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+    it('SUB_SCANNER_CB_SCAN_VIDEO_MP4_FILE_020', 0, async function (done) {
+        console.info('MediaLibraryTest : create Video album (MP4)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_VIDEO);
+        let mediaType = mediaLibrary.MediaType.VIDEO;
+        await media.createAsset(mediaType, "scan_video.mp4", path1).then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+        let scanVideoAlbumPath = "/storage/media/100/local/files/"+path1
+        console.info('MediaLibraryTest : starting of scan dir');
+        if (scannerObj == null || scannerObj == undefined){
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanDir(scanVideoAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    console.info('MediaLibraryTest : status is '+ data.status);
+                    console.info('MediaLibraryTest : SCAN Video album (MP4) IS SUCCESSFULL');
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_VIDEO_MP4_FILE_020 : PASS');
+                } else {
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_VIDEO_MP4_FILE_020 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+        }
+        await sleep(1000);
+        done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_DOC_FILE_021
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_SCAN_DOC_FILE_021', 0, async function (done) {
+    console.info('MediaLibraryTest : create doc album (txt)');
+    const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_DOCUMENTS);
+    let mediaType = mediaLibrary.MediaType.FILE;
+    await media.createAsset(mediaType, "Scan_Doc.txt", path1).then (function (asset) {
+        console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+    }).catch(function(err){
+        console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+    });
+    await sleep(1000);
+    let scanDocAlbumPath = "/storage/media/100/local/files/Documents/Scan_Doc.txt"
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(scanDocAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN doc album (txt) IS SUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_DOC_FILE_021 : PASS');
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_DOC_FILE_021 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+})
+
+
+	    /* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_AUDIO_MP3_AFTER_OPEN_CLOSE_024
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+    it('SUB_SCANNER_CB_SCAN_AUDIO_MP3_AFTER_OPEN_CLOSE_024', 0, async function (done) {
+        console.info('MediaLibraryTest : create Audio album (MP3)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_AUDIO);
+        let mediaType = mediaLibrary.MediaType.AUDIO;
+        await media.createAsset(mediaType, "open_close_scan_audio.mp3", path1).then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+            asset.open('rw', (openError, fd) => {
+                console.info("MediaLibraryTest :openAsset successfully:");
+                if(fd > 0){
+                    asset.close(fd);
+                    console.info("MediaLibraryTest :closeAsset successfully:");
+                }else{
+                    console.info('MediaLibraryTest :File Open Failed!' + openError);
+                }
+            });
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+
+        let scanAudioAlbumPath = "/storage/media/100/local/files/Music/open_close_scan_audio.mp3"
+        if (scannerObj == null || scannerObj == undefined) {
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanFile(scanAudioAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : status is ' + data.status);
+                    console.info('MediaLibraryTest : status is ' + data.fileUri);
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_MP3_AFTER_OPEN_CLOSE_024 : PASS');
+                } else {
+                    expect(false).assertTrue();
+                    console.info('MediaLibraryTest : scandfile has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_MP3_AFTER_OPEN_CLOSE_024 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+            await sleep (10000);
+            done();
+        }
+        await sleep (10000);
+        done();
+    })
+
+	    /* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_EMPTY_PATH_025
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+    it('SUB_SCANNER_CB_SCAN_EMPTY_PATH_025', 0, async function (done) {
+        console.info('MediaLibraryTest : starting of scan file');
+        let audioAlbumPath = "";
+        if (scannerObj == null || scannerObj == undefined) {
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanFile(audioAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    console.info('MediaLibraryTest : status is ' + data.status);
+                    if (data.status == 1){
+                        expect(true).assertTrue();
+                        console.info('MediaLibraryTest : status is ' + data.fileUri);
+                        console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_EMPTY_PATH_025 : PASS');
+                    }else {
+                        expect(false).assertTrue();
+                        console.info('MediaLibraryTest : scandfile has an error');
+                        console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_EMPTY_PATH_025 : FAIL');
+                    }
+                } else {
+                    expect(false).assertTrue();
+                    console.info('MediaLibraryTest : scandfile has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_EMPTY_PATH_025 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+            await sleep (10000);
+            done();
+        }
+        await sleep (10000);
+        done();
+    })
+
+	/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_NONEXISTING_PATH_026
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_SCAN_NONEXISTING_PATH_026', 0, async function (done) {
+    console.info('MediaLibraryTest : starting of scan file');
+    const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_AUDIO);
+    let audioAlbumPath = path1+"/NONEXISTING.aac";
+    if (scannerObj == null || scannerObj == undefined) {
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanFile(audioAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : status is ' + data.status);
+                console.info('MediaLibraryTest : status is ' + data.fileUri);
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_NONEXISTING_PATH_026 : PASS');
+            } else {
+                expect(false).assertTrue();
+                console.info('MediaLibraryTest : scandfile has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_NONEXISTING_PATH_026 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+        await sleep (10000);
+        done();
+    }
+    await sleep (10000);
+    done();
+})
+
+    /* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_UNICODE_PATH_AND_FILE_027
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+    it('SUB_SCANNER_CB_SCAN_UNICODE_PATH_AND_FILE_027', 0, async function (done) {
+        console.info('MediaLibraryTest : create Audio album (MP3 unicode)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_AUDIO);
+        let mediaType = mediaLibrary.MediaType.AUDIO;
+        await media.createAsset(mediaType, "来自于华为公司_1.MP3", path1+"/来自于华为公司_1").then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+        let scanAudioAlbumPath = "/storage/media/100/local/files/Music/来自于华为公司_1"+"/来自于华为公司_1.MP3"
+        console.info('MediaLibraryTest : starting of scan dir');
+        if (scannerObj == null || scannerObj == undefined){
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanDir(scanAudioAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    if (data.status == -1) {
+                        console.info('MediaLibraryTest : status is '+ data.status);
+                        console.info('MediaLibraryTest : SCAN Audio album (MP3 unicode) IS SUCCESSFULL');
+                        expect(true).assertTrue();
+                        console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_UNICODE_PATH_AND_FILE_027 : PASS');
+                    } else {
+                        expect(true).assertfalse();
+                        console.info('MediaLibraryTest : scandir has an error');
+                        console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_UNICODE_PATH_AND_FILE_027 : FAIL');
+                    }
+
+                } else {
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_UNICODE_PATH_AND_FILE_027 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+        }
+        await sleep(1000);
+        done();
+    })
+
+	/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_SAME_FILE_AGAIN_028
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_SCAN_SAME_FILE_AGAIN_028', 0, async function (done) {
+    console.info('MediaLibraryTest : create Audio album (MP3)');
+    let scanAudioAlbumPath = "/storage/media/100/local/files/Music/audio.mp3"
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(scanAudioAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN Audio album (MP3) IS SUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_SAME_FILE_AGAIN_028 : PASS');
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_SAME_FILE_AGAIN_028 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+})
+
+    /* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_CANONICAL_PATH_FILE_AGAIN_029
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+    it('SUB_SCANNER_CB_SCAN_CANONICAL_PATH_FILE_AGAIN_029', 0, async function (done) {
+        console.info('MediaLibraryTest : create Image album (JPG)');
+        const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_IMAGE);
+        let mediaType = mediaLibrary.MediaType.IMAGE;
+        await media.createAsset(mediaType, "image_UNICODE.jpg", path1+"1/2/3/4/").then (function (asset) {
+            console.info("MediaLibraryTest :createAsset successfully:"+ JSON.stringify(asset));
+        }).catch(function(err){
+            console.info("MediaLibraryTest :createAsset failed with error:"+ err);
+        });
+        await sleep(1000);
+        let scanImageAlbumPath = "/storage/media/100/local/files/Pictures/1/2/3/4/../../../../image.jpg"
+        console.info('MediaLibraryTest : starting of scan dir');
+        if (scannerObj == null || scannerObj == undefined){
+            console.info('MediaLibraryTest : Error sannerObj is null');
+        } else {
+            scannerObj.scanFile(scanImageAlbumPath,async (err, data) => {
+                if (data != undefined) {
+                    console.info('MediaLibraryTest : status is '+ data.status);
+                    console.info('MediaLibraryTest : SCAN Image album (JPG) SUCCESSFULL');
+                    expect(true).assertTrue();
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_CANONICAL_PATH_FILE_AGAIN_029 : PASS');
+                } else {
+                    expect(true).assertfalse();
+                    console.info('MediaLibraryTest : scandir has an error');
+                    console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_CANONICAL_PATH_FILE_AGAIN_029 : FAIL');
+                }
+                await sleep (10000);
+                done();
+            });
+        }
+        await sleep(1000);
+        done();
+    })
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_MODIFIED_ALBUM_006
+        * @tc.name      : CreateAlbum-->ModifyAlbum
+        * @tc.desc      : CreateAlbum-->ModifyAlbum
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_SCAN_MODIFIED_ALBUM_006', 0, async function (done) {
+    let allTypefetchOp = {
+        selections: '',
+        selectionArgs: [],
+    };
+    try {
+        const albumList = await media.getAlbums(allTypefetchOp);
+        const album = albumList[0];
+        const albumId = album.albumId;
+        console.info('ALBUM_PROMISE Modify 003_01 album.albumName(old) = ' + album.albumName);
+        const newName = 'newhello';
+        console.info('#############MediaLibraryTest : original album name is  '+ album.albumName);
+        album.albumName = newName;
+        await album.commitModify();
+        const newAlbumList = await media.getAlbums(allTypefetchOp);
+        let passed = false;
+        for (let i = 0; i < newAlbumList.length; i++) {
+            const album = newAlbumList[i];
+            if (album.albumId == albumId && album.albumName == newName) {
+                console.info('ALBUM_PROMISE Modify 003_01 passed');
+                expect(true).assertTrue();
+                done();
+                passed = true;
+            }
+        }
+        done();
+    } catch (error) {
+        console.info('ALBUM_PROMISE Modify 003_01 failed, message = ' + error);
+    }
+    done();
+    let modifiedAlbumPath = "/storage/media/100/local/files/"+"newhello";
+    await sleep(1000);
+    console.info('MediaLibraryTest : starting of scan dir');
+    if (scannerObj == null || scannerObj == undefined){
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanDir(modifiedAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                console.info('MediaLibraryTest : status is '+ data.status);
+                console.info('MediaLibraryTest : SCAN MODIFED ALBUM IS SUCCESSFULL');
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_MODIFIED_ALBUM_006 : PASS');
+            } else {
+                expect(true).assertfalse();
+                console.info('MediaLibraryTest : scandir has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_MODIFIED_ALBUM_006 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+    }
+    await sleep(1000);
+    done();
+})
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_AUDIO_MP3_AFTER_MODIFY_022
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+it('SUB_SCANNER_CB_SCAN_AUDIO_MP4_AFTER_MODIFY_022', 0, async function (done) {
+    let fileKeyObj = mediaLibrary.FileKey;
+    let imageType = mediaLibrary.MediaType.VIDEO;
+    let imagesfetchOp = {
+        selections: fileKeyObj.MEDIA_TYPE + '= ?',
+        selectionArgs: [imageType.toString()],
+    };
+    try {
+        const fetchFileResult = await media.getFileAssets(imagesfetchOp);
+        const asset = await fetchFileResult.getFirstObject();
+        console.info('##################MediaLibraryTest : ASSET is ' + asset);
+        console.info('##################MediaLibraryTest : ASSET Title is ' + asset.title);
+        console.info('##################MediaLibraryTest : ASSET Title is ' + asset.id);
+        const newTitle = 'newTitle';
+        asset.title = newTitle;
+        const id = asset.id;
+        await asset.commitModify();
+
+        //const fetchFileResult2 = await media.getFileAssets(imagesfetchOp);
+        const dataList = await fetchFileResult.getAllObject();
+        let passed = false;
+        for (let i = 0; i < dataList.length; i++) {
+            const asset = dataList[i];
+            if (asset.id == id && asset.title == newTitle) {
+                passed = true;
+                break;
+            }
+        }
+        done();
+    } catch (error) {
+        console.info('FileAsset commitModify 002 failed, message = ' + error);
+        expect(false).assertTrue();
+        done();
+    }
+    await sleep(1000);
+    let scanAudioAlbumPath = "/storage/media/100/local/files/Movies/newTitle.mp4"
+    if (scannerObj == null || scannerObj == undefined) {
+        console.info('MediaLibraryTest : Error sannerObj is null');
+    } else {
+        scannerObj.scanFile(scanAudioAlbumPath,async (err, data) => {
+            if (data != undefined) {
+                expect(true).assertTrue();
+                console.info('MediaLibraryTest : status is ' + data.status);
+                console.info('MediaLibraryTest : status is ' + data.fileUri);
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_MP3_AFTER_MODIFY_022 : PASS');
+            } else {
+                expect(false).assertTrue();
+                console.info('MediaLibraryTest : scandfile has an error');
+                console.info('MediaLibraryTest : SUB_SCANNER_CB_SCAN_AUDIO_MP3_AFTER_MODIFY_022 : FAIL');
+            }
+            await sleep (10000);
+            done();
+        });
+        await sleep (10000);
+        done();
+    }
+    await sleep (10000);
+    done();
+
+});
+
+function sleep (ms) {
+    return new Promise(resolve => setTimeout(resolve, ms));
+}
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_DELETE_ALBUM_007[MANUAL TEST]
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_MODIFY_DELETE_ALBUM_008[MANUAL TEST]
+        * @tc.name      : CreateAlbum-->ModifyAlbum-->DeleteAlbum-->Scan
+        * @tc.desc      : CreateAlbum-->ModifyAlbum-->DeleteAlbum-->Scan
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+	
+/* *
+        * @tc.number    : SUB_SCANNER_CB_SCAN_AUDIO_MP3_AFTER_DELETE_023 [Manual test]
+        * @tc.name      :
+        * @tc.desc      :
+        * @tc.size      : MEDIUM
+        * @tc.type      : Function
+        * @tc.level     : Level 0
+    */
+
+
+
+})
+
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/albumTestCallBack.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/albumTestCallBack.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/albumTestCallBack.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/albumTestCallBack.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/albumTestPromise.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/albumTestPromise.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/albumTestPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/albumTestPromise.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/favtrashTestCallBack.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/favtrashTestCallBack.test.ets
new file mode 100644
index 0000000000000000000000000000000000000000..ccecfea55b53dbcd5cae729634158900084f500a
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/favtrashTestCallBack.test.ets
@@ -0,0 +1,426 @@
+/*
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import mediaLibrary from '@ohos.multimedia.mediaLibrary';
+import featureAbility from '@ohos.ability.featureAbility';
+
+import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from 'deccjsunit/index';
+
+describe('file.callback.test.js', function () {
+    var context = featureAbility.getContext();
+    console.info('MediaLibraryTest : getMediaLibrary IN');
+    var media = mediaLibrary.getMediaLibrary(context);
+    console.info('MediaLibraryTest : getMediaLibrary OUT');
+    beforeAll(function () {
+        console.info('File Callback MediaLibraryTest: beforeAll: Prerequisites at the test suite level, which are executed before the test suite is executed.');
+    });
+    beforeEach(function () {
+        console.info('File Callback MediaLibraryTest: beforeEach: Prerequisites at the test case level, which are executed before each test case is executed.');
+    });
+    afterEach(function () {
+        console.info('File Callback MediaLibraryTest: afterEach: Test case-level clearance conditions, which are executed after each test case is executed.');
+    });
+    afterAll(function () {
+        console.info('File Callback MediaLibraryTest: afterAll: Test suite-level cleanup condition, which is executed after the test suite is executed');
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_01
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by true
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_01', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image01.jpg', path);
+        asset.favorite(true, (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_01 success');
+                expect(true).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_01 fail, message = ' + err);
+                expect(false).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_02
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by false
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_02', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image02.jpg', path);
+        asset.favorite(false, (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_02 success');
+                expect(true).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_02 fail, message = ' + err);
+                expect(false).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_03
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by 666
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_03', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image03.jpg', path);
+        asset.favorite(666, (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_03 success');
+                expect(false).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_03 fail, message = ' + err);
+                expect(true).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_04
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by '666'
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_04', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image04.jpg', path);
+        asset.favorite('666', (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_04 success');
+                expect(false).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_04 fail, message = ' + err);
+                expect(true).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_05
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by 0.666
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_05', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image05.jpg', path);
+        asset.favorite(0.666, (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_05 success');
+                expect(false).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_05 fail, message = ' + err);
+                expect(true).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_06
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by null
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_CALLBACK_007_06', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image06.jpg', path);
+        asset.favorite(null, (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_06 success');
+                expect(false).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK favorite 007_06 fail, message = ' + err);
+                expect(true).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_ISFAV_ASSET_CALLBACK_008_01
+     * @tc.name      : isFavorite
+     * @tc.desc      : Is Favourite true
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_ISFAV_ASSET_CALLBACK_008_01', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image07.jpg', path);
+        await asset.favorite(true);
+        asset.isFavorite((err, isFavorite) => {
+            if (err == undefined && isFavorite == true) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK isFavorite 008_01 isFavorite = ' + isFavorite);
+                expect(true).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK isFavorite 008_01 fail, message = ' + err);
+                expect(false).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_ISFAV_ASSET_CALLBACK_008_02
+     * @tc.name      : isFavorite
+     * @tc.desc      : Is Favourite true
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_ISFAV_ASSET_CALLBACK_008_02', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image0702.jpg', path);
+        await asset.favorite(false);
+        asset.isFavorite((err, isFavorite) => {
+            if (err == undefined && isFavorite == false) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK isFavorite 008_02 isFavorite = ' + isFavorite);
+                expect(true).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK isFavorite 008_02 fail, message = ' + err);
+                expect(false).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_01
+     * @tc.name      : trash
+     * @tc.desc      : Trash by true
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_01', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image08.jpg', path);
+        asset.trash(true, (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_01');
+                expect(true).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_01 fail ,message = ', err);
+                expect(false).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_02
+     * @tc.name      : trash
+     * @tc.desc      : Trash by false
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_02', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image09.jpg', path);
+        asset.trash(false, (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_02');
+                expect(true).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_02 fail ,message = ', err);
+                expect(false).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_03
+     * @tc.name      : trash
+     * @tc.desc      : Trash by 666
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_03', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image10.jpg', path);
+        asset.trash(666, (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_03');
+                expect(false).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_03 fail ,message = ', err);
+                expect(true).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_04
+     * @tc.name      : trash
+     * @tc.desc      : Trash by '666'
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_04', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image11.jpg', path);
+        asset.trash('666', (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_04');
+                expect(false).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_04 fail ,message = ', err);
+                expect(true).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_05
+     * @tc.name      : trash
+     * @tc.desc      : Trash by 0.666
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_05', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image12.jpg', path);
+        asset.trash(0.666, (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_05');
+                expect(false).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_05 fail ,message = ', err);
+                expect(true).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_06
+     * @tc.name      : trash
+     * @tc.desc      : Trash by null
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_CALLBACK_009_06', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image13.jpg', path);
+        asset.trash(null, (err) => {
+            if (err == undefined) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_06');
+                expect(false).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 009_06 fail ,message = ', err);
+                expect(true).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_ISTRASH_ASSET_CALLBACK_0010_01
+     * @tc.name      : isTrash
+     * @tc.desc      : isTrash true
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_ISTRASH_ASSET_CALLBACK_0010_01', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image14.jpg', path);
+        await asset.trash(true);
+        asset.isTrash((err, isTrash) => {
+            if (err == undefined && isTrash == true) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 0010_01');
+                expect(true).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 0010_01 fail ,message = ', err);
+                expect(false).assertTrue();
+                done();
+            }
+        });
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_ISTRASH_ASSET_CALLBACK_0010_02
+     * @tc.name      : isTrash
+     * @tc.desc      : isTrash false
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_ISTRASH_ASSET_CALLBACK_0010_02', 0, async function (done) {
+        const asset = await media.createAsset(mediaType, 'image15.jpg', path);
+        await asset.trash(false);
+        asset.isTrash((err, isTrash) => {
+            if (err == undefined && isTrash == false) {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 0010_02');
+                expect(true).assertTrue();
+                done();
+            } else {
+                console.info('MediaLibraryTest : ASSET_CALLBACK trash 0010_02 fail ,message = ', err);
+                expect(false).assertTrue();
+                done();
+            }
+        });
+    });
+});
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/favtrashTestPromise.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/favtrashTestPromise.test.ets
new file mode 100644
index 0000000000000000000000000000000000000000..418096be8d41218a4676c90bbcdd3107cfcd4c61
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/favtrashTestPromise.test.ets
@@ -0,0 +1,422 @@
+/*
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import mediaLibrary from '@ohos.multimedia.mediaLibrary';
+import featureAbility from '@ohos.ability.featureAbility';
+
+import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from 'deccjsunit/index';
+
+describe('file.promise.test.js', function () {
+    var context = featureAbility.getContext();
+    console.info('MediaLibraryTest : getMediaLibrary IN');
+    var media = mediaLibrary.getMediaLibrary(context);
+    console.info('MediaLibraryTest : getMediaLibrary OUT');
+    beforeAll(function () {
+        console.info('File Promise MediaLibraryTest: beforeAll : Prerequisites at the test suite level, which are executed before the test suite is executed.');
+    });
+    beforeEach(function () {
+        console.info('File Promise MediaLibraryTest: beforeEach: Prerequisites at the test case level, which are executed before each test case is executed.');
+    });
+    afterEach(function () {
+        console.info('File Promise MediaLibraryTest: afterEach: Test case-level clearance conditions, which are executed after each test case is executed.');
+    });
+    afterAll(function () {
+        console.info('File Promise MediaLibraryTest: afterAll: Test suite-level cleanup condition, which is executed after the test suite is executed');
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_01
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by true
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_01', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image01.jpg', path);
+            await asset.favorite(true);
+            console.info('MediaLibraryTest : ASSET_PROMISE favorite 007_01 success');
+            expect(true).assertTrue();
+        } catch (error) {
+            console.info('MediaLibraryTest : ASSET_PROMISE close 007_01 fail, message = ' + error);
+            expect(false).assertTrue();
+        }
+        done();
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_02
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by false
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_02', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image02.jpg', path);
+            await asset.favorite(false);
+            console.info('MediaLibraryTest : ASSET_PROMISE favorite 007_02 success');
+            expect(true).assertTrue();
+        } catch (error) {
+            console.info('MediaLibraryTest : ASSET_PROMISE close 007_02 fail, message = ' + error);
+            expect(false).assertTrue();
+        }
+        done();
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_03
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by 666
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_03', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image03.jpg', path);
+            await asset.favorite(666);
+            console.info('MediaLibraryTest : ASSET_PROMISE favorite 007_03 success');
+            expect(false).assertTrue();
+        } catch (error) {
+            console.info('MediaLibraryTest : ASSET_PROMISE close 007_03 fail, message = ' + error);
+            expect(true).assertTrue();
+        }
+        done();
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_04
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by '666'
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_04', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image04.jpg', path);
+            await asset.favorite('666');
+            console.info('MediaLibraryTest : ASSET_PROMISE favorite 007_04 success');
+            expect(false).assertTrue();
+        } catch (error) {
+            console.info('MediaLibraryTest : ASSET_PROMISE close 007_04 fail, message = ' + error);
+            expect(true).assertTrue();
+        }
+        done();
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_05
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by 0.666
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_05', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image05.jpg', path);
+            await asset.favorite(0.666);
+            console.info('MediaLibraryTest : ASSET_PROMISE favorite 007_05 success');
+            expect(false).assertTrue();
+        } catch (error) {
+            console.info('MediaLibraryTest : ASSET_PROMISE close 007_05 fail, message = ' + error);
+            expect(true).assertTrue();
+        }
+        done();
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_06
+     * @tc.name      : favorite
+     * @tc.desc      : favorite by null
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_FAV_ASSET_PROMISE_007_06', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image06.jpg', path);
+            await asset.favorite();
+            console.info('MediaLibraryTest : ASSET_PROMISE favorite 007_06 success');
+            expect(false).assertTrue();
+        } catch (error) {
+            console.info('MediaLibraryTest : ASSET_PROMISE close 007_06 fail, message = ' + error);
+            expect(true).assertTrue();
+        }
+        done();
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_ISFAV_ASSET_PROMISE_008_01
+     * @tc.name      : isFavorite
+     * @tc.desc      : Is Favourite
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_ISFAV_ASSET_PROMISE_008_01', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image07.jpg', path);
+            await asset.favorite(true);
+            let isFavorite = await asset.isFavorite();
+            if (isFavorite == true) {
+                console.info('MediaLibraryTest : ASSET_PROMISE isFavorite = ' + isFavorite);
+                expect(true).assertTrue();
+            } else {
+                console.info('MediaLibraryTest : ASSET_PROMISE isFavorite = ' + isFavorite);
+                expect(true).assertTrue();
+            }
+            done();
+        } catch (error) {
+            console.info('MediaLibraryTest : ASSET_PROMISE isFavorite fail, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_ISFAV_ASSET_PROMISE_008_02
+     * @tc.name      : isFavorite
+     * @tc.desc      : Is Favourite
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_ISFAV_ASSET_PROMISE_008_02', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image0702.jpg', path);
+            await asset.favorite(false);
+            let isFavorite = await asset.isFavorite();
+            if (isFavorite == false) {
+                console.info('MediaLibraryTest : ASSET_PROMISE isFavorite = ' + isFavorite);
+                expect(true).assertTrue();
+            } else {
+                console.info('MediaLibraryTest : ASSET_PROMISE isFavorite = ' + isFavorite);
+                expect(true).assertTrue();
+            }
+            done();
+        } catch (error) {
+            console.info('MediaLibraryTest : ASSET_PROMISE isFavorite fail, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_01
+     * @tc.name      : trash
+     * @tc.desc      : Trash by true
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_01', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image08.jpg', path);
+            await asset.trash(true);
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_01');
+            expect(true).assertTrue();
+            done();
+        } catch (trashError) {
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_01 fail ,message = ', trashError);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_02
+     * @tc.name      : trash
+     * @tc.desc      : Trash by false
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_02', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image09.jpg', path);
+            await asset.trash(false);
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_02');
+            expect(true).assertTrue();
+            done();
+        } catch (trashError) {
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_02 fail ,message = ', trashError);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_03
+     * @tc.name      : trash
+     * @tc.desc      : Trash by 666
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_03', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image10.jpg', path);
+            await asset.trash(666);
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_03');
+            expect(false).assertTrue();
+            done();
+        } catch (trashError) {
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_03 fail ,message = ' + trashError);
+            expect(true).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_04
+     * @tc.name      : trash
+     * @tc.desc      : Trash by '666'
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_04', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image11.jpg', path);
+            await asset.trash('666');
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_04');
+            expect(false).assertTrue();
+            done();
+        } catch (trashError) {
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_04 fail ,message = ' + trashError);
+            expect(true).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_05
+     * @tc.name      : trash
+     * @tc.desc      : Trash by 0.666
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_05', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image12.jpg', path);
+            await asset.trash(0.666);
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_05');
+            expect(false).assertTrue();
+            done();
+        } catch (trashError) {
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_05 fail ,message = ' + trashError);
+            expect(true).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_06
+     * @tc.name      : trash
+     * @tc.desc      : Trash by null
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_TRA_ASSET_PROMISE_009_06', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image13.jpg', path);
+            await asset.trash();
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_06');
+            expect(false).assertTrue();
+            done();
+        } catch (trashError) {
+            console.info('MediaLibraryTest : ASSET_PROMISE trash 009_06 fail ,message = ' + trashError);
+            expect(true).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_ISTRASH_ASSET_PROMISE_0010_01
+     * @tc.name      : isTrash
+     * @tc.desc      : isTrash true
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_ISTRASH_ASSET_PROMISE_0010_01', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image14.jpg', path);
+            await asset.trash(true);
+            let isTrash = await asset.isTrash();
+            console.info('MediaLibraryTest : ASSET_PROMISE Trash 0010_01 = ' + isTrash);
+            if (isTrash) {
+                expect(true).assertTrue();
+            } else {
+                expect(false).assertTrue();
+            }
+            done();
+        } catch (error) {
+            console.info('MediaLibraryTest : ASSET_PROMISE isTrash 0010_01 fail, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_MEDIALIBRARY_ISTRASH_ASSET_PROMISE_0010_02
+     * @tc.name      : isTrash
+     * @tc.desc      : isTrash false
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+
+    it('SUB_MEDIA_MEDIALIBRARY_ISTRASH_ASSET_PROMISE_0010_02', 0, async function (done) {
+        try {
+            const asset = await media.createAsset(mediaType, 'image15.jpg', path);
+            await asset.trash(false);
+            let isTrash = await asset.isTrash();
+            console.info('MediaLibraryTest : ASSET_PROMISE Trash 0010_02 = ' + isTrash);
+            if (!isTrash) {
+                expect(true).assertTrue();
+            } else {
+                expect(false).assertTrue();
+            }
+            done();
+        } catch (error) {
+            console.info('MediaLibraryTest : ASSET_PROMISE isTrash 0010_02 fail, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+});
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAsset2.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAsset2.test.ets
new file mode 100644
index 0000000000000000000000000000000000000000..1bfd3a9b1700bb6dd55b8f2b42627f0c91f5d418
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAsset2.test.ets
@@ -0,0 +1,398 @@
+/*
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import mediaLibrary from '@ohos.multimedia.mediaLibrary';
+import featureAbility from '@ohos.ability.featureAbility';
+
+import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from 'deccjsunit/index';
+function printAttr(asset) {
+    for (const key in asset) {
+        console.info(`${key}: asset[key]`);
+    }
+}
+function checkAttrs(done, asset, tNum) {
+    let passed = true;
+    for (const key in asset) {
+        if (asset[key] == undefined) {
+            passed = false;
+            break;
+        }
+    }
+    if (passed) {
+        console.info(`FileAsset checkAttrs ${tNum} passed`);
+        expect(true).assertTrue();
+        done();
+    } else {
+        console.info(`FileAsset checkAttrs ${tNum} failed`);
+        expect(false).assertTrue();
+        done();
+    }
+}
+describe('fileAsset2.test.js', async function () {
+    let fileKeyObj = mediaLibrary.FileKey;
+
+    let imageType = mediaLibrary.MediaType.IMAGE;
+    let videoType = mediaLibrary.MediaType.VIDEO;
+    let audioType = mediaLibrary.MediaType.AUDIO;
+    let imagesfetchOp = {
+        selections: fileKeyObj.MEDIA_TYPE + '= ?',
+        selectionArgs: [imageType.toString()],
+    };
+
+    let videosfetchOp = {
+        selections: fileKeyObj.MEDIA_TYPE + '= ?',
+        selectionArgs: [videoType.toString()],
+    };
+    let audiosfetchOp = {
+        selections: fileKeyObj.MEDIA_TYPE + '= ?',
+        selectionArgs: [audioType.toString()],
+    };
+
+    let allTypefetchOp = {
+        selections: '',
+        selectionArgs: [],
+    };
+    const context = featureAbility.getContext();
+    const media = mediaLibrary.getMediaLibrary(context);
+    beforeAll(function () {});
+    beforeEach(function () {});
+    afterEach(function () {});
+    afterAll(function () {});
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_commitModify_promise_001
+     * @tc.name      : commitModify
+     * @tc.desc      : Modify displayName
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_commitModify_promise_001', 0, async function (done) {
+        try {
+            const fetchFileResult = await media.getFileAssets(imagesfetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+            const newName = 'newName';
+            asset.displayName = newName;
+            const id = asset.id;
+            await asset.commitModify();
+
+            const fetchFileResult2 = await media.getFileAssets(imagesfetchOp);
+            const dataList = await fetchFileResult2.getAllObject();
+            let passed = false;
+            for (let i = 0; i < dataList.length; i++) {
+                const asset = dataList[i];
+                if (asset.id == id && asset.displayName == newName) {
+                    passed = true;
+                    break;
+                }
+            }
+            expect(passed).assertTrue();
+            done();
+        } catch (error) {
+            console.info('FileAsset commitModify 001 failed, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_commitModify_promise_002
+     * @tc.name      : commitModify
+     * @tc.desc      : Modify title
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_commitModify_promise_002', 0, async function (done) {
+        try {
+            const fetchFileResult = await media.getFileAssets(imagesfetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+            const newTitle = 'newTitle';
+            asset.title = newTitle;
+            const id = asset.id;
+            await asset.commitModify();
+
+            const fetchFileResult2 = await media.getFileAssets(imagesfetchOp);
+            const dataList = await fetchFileResult2.getAllObject();
+            let passed = false;
+            for (let i = 0; i < dataList.length; i++) {
+                const asset = dataList[i];
+                if (asset.id == id && asset.title == newTitle) {
+                    passed = true;
+                    break;
+                }
+            }
+            expect(passed).assertTrue();
+            done();
+        } catch (error) {
+            console.info('FileAsset commitModify 002 failed, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_commitModify_promise_003
+     * @tc.name      : commitModify
+     * @tc.desc      : Modify relativePath
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_commitModify_promise_003', 0, async function (done) {
+        try {
+            const path1 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_IMAGE);
+
+            const path2 = await media.getPublicDirectory(mediaLibrary.DirectoryType.DIR_VIDEO);
+
+            const fetchFileResult = await media.getFileAssets(imagesfetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+            let relativePath = asset.relativePath;
+            let newrelativePath = path1;
+            if (relativePath == path1) {
+                newrelativePath = path2;
+            }
+
+            asset.relativePath = newrelativePath;
+            const id = asset.id;
+            await asset.commitModify();
+
+            const fetchFileResult2 = await media.getFileAssets(imagesfetchOp);
+            const dataList = await fetchFileResult2.getAllObject();
+            let passed = false;
+            for (let i = 0; i < dataList.length; i++) {
+                const asset = dataList[i];
+                if (asset.id == id && asset.relativePath == newrelativePath) {
+                    passed = true;
+                    break;
+                }
+            }
+            expect(passed).assertTrue();
+            done();
+        } catch (error) {
+            console.info('FileAsset commitModify 003 failed, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_commitModify_promise_004
+     * @tc.name      : commitModify
+     * @tc.desc      : Modify orientation
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_commitModify_promise_004', 0, async function (done) {
+        try {
+            const fetchFileResult = await media.getFileAssets(imagesfetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+            let neworientation = 1;
+            if (asset.orientation == 1) {
+                neworientation = 0;
+            }
+            asset.orientation = neworientation;
+            const id = asset.id;
+            await asset.commitModify();
+
+            const fetchFileResult2 = await media.getFileAssets(imagesfetchOp);
+            const dataList = await fetchFileResult2.getAllObject();
+            let passed = false;
+            for (let i = 0; i < dataList.length; i++) {
+                const asset = dataList[i];
+                if (asset.id == id && asset.orientation == neworientation) {
+                    passed = true;
+                    break;
+                }
+            }
+            expect(passed).assertTrue();
+            done();
+        } catch (error) {
+            console.info('FileAsset commitModify 004 failed, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_commitModify_promise_005
+     * @tc.name      : commitModify
+     * @tc.desc      : Modify uri
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_commitModify_promise_005', 0, async function (done) {
+        try {
+            const fetchFileResult = await media.getFileAssets(imagesfetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+            const id = asset.id;
+            const newUri = 'newUri';
+
+            asset.uri = newUri;
+
+            await asset.commitModify();
+
+            console.info('FileAsset commitModify 005 failed');
+            expect(false).assertTrue();
+            done();
+        } catch (error) {
+            console.info('FileAsset commitModify 005 passed');
+            expect(true).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_commitModify_promise_006
+     * @tc.name      : commitModify
+     * @tc.desc      : Modify mediaType
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_commitModify_promise_006', 0, async function (done) {
+        try {
+            const fetchFileResult = await media.getFileAssets(imagesfetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+            const id = asset.id;
+            const newMediaType = 'newMediaType';
+
+            asset.mediaType = newMediaType;
+
+            await asset.commitModify();
+
+            console.info('FileAsset commitModify 006 failed');
+            expect(false).assertTrue();
+            done();
+        } catch (error) {
+            console.info('FileAsset commitModify 006 passed');
+            expect(true).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_isDirectory_promise_001
+     * @tc.name      : isDirectory
+     * @tc.desc      : isDirectory asset
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_isDirectory_promise_001', 0, async function (done) {
+        try {
+            const fetchFileResult = await media.getFileAssets(imagesfetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+            const isDir = await asset.isDirectory();
+            expect(!isDir).assertTrue();
+            done();
+        } catch (error) {
+            console.info('FileAsset isDirectory 001 failed, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_checkAttr_promise_001
+     * @tc.name      : attrs
+     * @tc.desc      : imagesfetchOp attrs print and check
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_checkAttr_promise_001', 0, async function (done) {
+        try {
+            const fetchFileResult = await media.getFileAssets(imagesfetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+
+            printAttr(asset);
+            checkAttrs(done, asset, '001');
+        } catch (error) {
+            console.info('FileAsset checkAttr 001 failed, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_checkAttr_promise_002
+     * @tc.name      : attrs
+     * @tc.desc      : videosfetchOp attrs print and check
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_checkAttr_promise_002', 0, async function (done) {
+        try {
+            const fetchFileResult = await media.getFileAssets(videosfetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+
+            printAttr(asset);
+            checkAttrs(done, asset, '002');
+        } catch (error) {
+            console.info('FileAsset checkAttr 002 failed, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_checkAttr_promise_003
+     * @tc.name      : attrs
+     * @tc.desc      : audiosfetchOp attrs print and check
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_checkAttr_promise_003', 0, async function (done) {
+        try {
+            const fetchFileResult = await media.getFileAssets(audiosfetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+
+            printAttr(asset);
+            checkAttrs(done, asset, '003');
+        } catch (error) {
+            console.info('FileAsset checkAttr 003 failed, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+
+    /**
+     * @tc.number    : SUB_MEDIA_FILEASSET_checkAttr_promise_004
+     * @tc.name      : attrs
+     * @tc.desc      : album attrs print and check
+     * @tc.size      : MEDIUM
+     * @tc.type      : Function
+     * @tc.level     : Level 0
+     */
+    it('SUB_MEDIA_FILEASSET_checkAttr_promise_004', 0, async function (done) {
+        try {
+            const albumList = await media.getAlbums(allTypefetchOp);
+            const album = albumList[0];
+            const fetchFileResult = await album.getFileAssets(allTypefetchOp);
+            const asset = await fetchFileResult.getFirstObject();
+            printAttr(asset);
+            checkAttrs(done, asset, '004');
+        } catch (error) {
+            console.info('FileAsset checkAttr 003 failed, message = ' + error);
+            expect(false).assertTrue();
+            done();
+        }
+    });
+});
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetPromise2.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetPromise2.test.ets
similarity index 99%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetPromise2.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetPromise2.test.ets
index c057a2c3146f2c0cd9a01f6acb393dcd1505be56..fa2e36035658e7142d8bd3aae5e911d504b800d7 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetPromise2.test.ets
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetPromise2.test.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetTestCallback.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetTestCallback.test.ets
similarity index 99%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetTestCallback.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetTestCallback.test.ets
index 3e87c028ec7d7f044e6baf310a157d1a112f8b57..4afdeb9fc4e57c89cc7ca6e40e4542e81010e6b0 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetTestCallback.test.ets
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetTestCallback.test.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetTestPromise.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetTestPromise.test.ets
similarity index 99%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetTestPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetTestPromise.test.ets
index 5432dc9d254dc1c0a7b41399d4fabdf261afcab9..06f72b92ff9d7ac44fb2d509ee822f316194be4d 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetTestPromise.test.ets
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetTestPromise.test.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetUriTestCallBack.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetUriTestCallBack.test.ets
similarity index 98%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetUriTestCallBack.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetUriTestCallBack.test.ets
index 54964b89ba52cb0f9cb258c2d60e75d8b107a560..546324bc35cf67443a7f2d92ac66beae7ac8c91c 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetUriTestCallBack.test.ets
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetUriTestCallBack.test.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetUriTestPromise.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetUriTestPromise.test.ets
similarity index 98%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetUriTestPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetUriTestPromise.test.ets
index 9e7bf113277851692d59a6e150601145e3b17f4a..cc24f07f775ff423a0415b92de43c6c3f0a15ade 100644
--- a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileAssetUriTestPromise.test.ets
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileAssetUriTestPromise.test.ets
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2021 Huawei Device Co., Ltd.
+ * Copyright (C) 2021-2022 Huawei Device Co., Ltd.
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileTestCallBack.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileTestCallBack.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileTestCallBack.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileTestCallBack.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileTestPromise.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileTestPromise.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/fileTestPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/fileTestPromise.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/filekeyTestCallBack.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/filekeyTestCallBack.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/filekeyTestCallBack.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/filekeyTestCallBack.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/filekeyTestPromise.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/filekeyTestPromise.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/filekeyTestPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/filekeyTestPromise.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/getPermission.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/getPermission.test.ets
new file mode 100644
index 0000000000000000000000000000000000000000..4eedcf8ac502e0003ac7c5bb36aaf97dce95b2b9
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/getPermission.test.ets
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2022 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import { describe, beforeAll,afterAll, it, expect } from 'deccjsunit/index';
+import abilityAccessCtrl from '@ohos.abilityAccessCtrl';
+import bundle from '@ohos.bundle';
+
+export default function getPermissionTest() {
+    describe("get_permission", function () {
+
+        /**
+   * @tc.number SUB_DF_GRANT_USER_GRANTED_PERMISSION_0000
+   * @tc.name grant_user_granted_permission_async_000
+   * @tc.desc Test grantUserGrantedPermission() interfaces, grant permission.
+   * @tc.size MEDIUM
+   * @tc.type Function
+   * @tc.level Level 0
+   * @tc.require
+   */
+        it("grant_user_granted_permission_async_000", 0, async function (done) {
+            let appInfo = await bundle.getApplicationInfo('ohos.acts.multimedia.mediaLibrary', 0, 100);
+            let tokenID = appInfo.accessTokenId;
+            let atManager = abilityAccessCtrl.createAtManager();
+            let result1 = await atManager.grantUserGrantedPermission(tokenID, "ohos.permission.MEDIA_LOCATION", 1);
+            let result2 = await atManager.grantUserGrantedPermission(tokenID, "ohos.permission.READ_MEDIA", 1);
+            let result3 = await atManager.grantUserGrantedPermission(tokenID, "ohos.permission.WRITE_MEDIA", 1);
+            let isGranted1 = await atManager.verifyAccessToken(tokenID, "ohos.permission.MEDIA_LOCATION");
+            let isGranted2 = await atManager.verifyAccessToken(tokenID, "ohos.permission.READ_MEDIA");
+            let isGranted3 = await atManager.verifyAccessToken(tokenID, "ohos.permission.WRITE_MEDIA");
+            expect(result1 == 0 && result2 == 0 && result3 == 0).assertTrue();
+            expect(isGranted1 == 0 && isGranted2 == 0 && isGranted3 == 0).assertTrue();
+            done();
+        });
+    });
+}
\ No newline at end of file
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/mediaLibraryTestCallBack.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/mediaLibraryTestCallBack.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/mediaLibraryTestCallBack.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/mediaLibraryTestCallBack.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/mediaLibraryTestPromise.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/mediaLibraryTestPromise.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/mediaLibraryTestPromise.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/mediaLibraryTestPromise.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/mediaLibraryTestPromiseOnOff.test.ets b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/mediaLibraryTestPromiseOnOff.test.ets
similarity index 100%
rename from multimedia/medialibrary/mediaLibrary_js_standard/entry/src/main/ets/test/mediaLibraryTestPromiseOnOff.test.ets
rename to multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/ets/test/mediaLibraryTestPromiseOnOff.test.ets
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/module.json b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/module.json
new file mode 100644
index 0000000000000000000000000000000000000000..82fb1970953e8e320b149a3885c079feaf97b750
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/module.json
@@ -0,0 +1,67 @@
+{
+    "module": {
+        "name": "phone",
+        "type": "entry",
+        "srcEntrance": "./ets/Application/AbilityStage.ts",
+        "description": "$string:mainability_description",
+        "mainElement": "MainAbility",
+        "deviceTypes": [
+            "phone"
+        ],
+        "deliveryWithInstall": true,
+        "installationFree": false,
+        "uiSyntax": "ets",
+        "pages": "$profile:main_pages",
+        "abilities": [
+            {
+                "name": "ohos.acts.multimedia.mediaLibrary.MainAbility",
+                "srcEntrance": "./ets/MainAbility/MainAbility.ts",
+                "description": "$string:mainability_description",
+                "icon": "$media:icon",
+                "label": "$string:entry_MainAbility",
+                "visible": true,
+                "orientation": "portrait",
+                "skills": [
+                    {
+                        "actions": [
+                            "action.system.home"
+                        ],
+                        "entities":[
+                            "entity.system.home"
+                        ]
+                    }
+                ]
+            }
+        ],
+		"requestPermissions": [
+            {
+                "name": "ohos.permission.GET_BUNDLE_INFO",
+                "reason": "use ohos.permission.GET_BUNDLE_INFO"
+            },
+            {
+                "name": "ohos.permission.GET_BUNDLE_INFO_PRIVILEGED",
+                "reason":"use ohos.permission.GET_BUNDLE_INFO_PRIVILEGED"
+            },
+            {
+                "name" : "ohos.permission.GRANT_SENSITIVE_PERMISSIONS",
+                "reason" : "use ohos.permission.GRANT_SENSITIVE_PERMISSIONS"
+            },
+            {
+                "name" : "ohos.permission.REVOKE_SENSITIVE_PERMISSIONS",
+                "reason" : "use ohos.permission.REVOKE_SENSITIVE_PERMISSIONS"
+            },
+            {
+                "name": "ohos.permission.MEDIA_LOCATION",
+                "reason":"use ohos.permission.MEDIA_LOCATION"
+            },
+            {
+                "name": "ohos.permission.READ_MEDIA",
+                "reason":"use ohos.permission.READ_MEDIA"
+            },
+            {
+                "name": "ohos.permission.WRITE_MEDIA",
+                "reason":"use ohos.permission.WRITE_MEDIA"
+            }
+        ]
+    }
+}
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/resources/base/element/string.json b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/resources/base/element/string.json
new file mode 100644
index 0000000000000000000000000000000000000000..d75a3fee650de2abaabfd60f40d90d9c6a4b0b0b
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/resources/base/element/string.json
@@ -0,0 +1,12 @@
+{
+    "string": [
+      {
+        "name": "entry_MainAbility",
+        "value": "MediaLibraryJSTestMain"
+      },
+      {
+        "name": "mainability_description",
+        "value": "MediaLibraryJSTestMain Ability"
+      }
+    ]
+  }
\ No newline at end of file
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/resources/base/media/icon.png b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/resources/base/media/icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..ce307a8827bd75456441ceb57d530e4c8d45d36c
Binary files /dev/null and b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/resources/base/media/icon.png differ
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/resources/base/profile/main_pages.json b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/resources/base/profile/main_pages.json
new file mode 100644
index 0000000000000000000000000000000000000000..6898b31d2085f478ee1ed9d933a5910cbf901d92
--- /dev/null
+++ b/multimedia/medialibrary/mediaLibrary_enhance/entry/src/main/resources/base/profile/main_pages.json
@@ -0,0 +1,6 @@
+{
+    "src": [
+        "pages/index/index",
+        "pages/second/second"
+    ]
+}
\ No newline at end of file
diff --git a/multimedia/medialibrary/mediaLibrary_enhance/signature/openharmony_sx.p7b b/multimedia/medialibrary/mediaLibrary_enhance/signature/openharmony_sx.p7b
new file mode 100644
index 0000000000000000000000000000000000000000..66b4457a8a81fb8d3356cf46d67226c850944858
Binary files /dev/null and b/multimedia/medialibrary/mediaLibrary_enhance/signature/openharmony_sx.p7b differ
