diff a/multimedia/media/media_js_standard/avPlayer/entry/src/main/ets/test/AVPlayerLocalTest.test.js b/multimedia/media/media_js_standard/avPlayer/entry/src/main/ets/test/AVPlayerLocalTest.test.js	(rejected hunks)
@@ -334,6 +334,157 @@ export default function AVPlayerLocalTest() {
                 }
             })
         }
+
+        async function setPlaybackStrategy(avPlayer, done) {
+            let surfaceID = globalThis.value;
+            let playbackStrategy = { mutedMediaType: media.MediaType.MEDIA_TYPE_AUD }
+            let pauseCount = 0
+            avPlayer.on('stateChange', async (state, reason) => {
+                switch (state) {
+                    case AV_PLAYER_STATE.INITIALIZED:
+                        console.info(`winddraw case AV_PLAYER_STATE.INITIALIZED`);
+                        avPlayer.surfaceId = surfaceID;
+                        console.info(`winddraw surfaceId done`)
+                        avPlayer.setPlaybackStrategy(playbackStrategy).catch((error) => {
+                            console.error(`setPlaybackStrategy failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        avPlayer.prepare().catch((error) => {
+                            console.error(`prepare failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.PREPARED:
+                        avPlayer.setPlaybackStrategy(playbackStrategy).then(() => {
+                            console.error(`setPlaybackStrategy unexpectedly success, state ${state}`)
+                            expect().assertFail();
+                        }).catch((error) => { console.info('prepared setPlaybackStrategy failed, expected') })
+                        avPlayer.play().catch(error => {
+                            console.error(`play failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.PLAYING:
+                        avPlayer.setPlaybackStrategy(playbackStrategy).then(() => {
+                            console.error(`setPlaybackStrategy unexpectedly success, state ${state}`)
+                            expect().assertFail();
+                        }).catch((error) => { console.info('playing setPlaybackStrategy failed, expected') })
+                        if (pauseCount++ == 0) {
+                            avPlayer.pause().then(() => { pauseCount++ }).catch(error => {
+                                console.error(`pause failed err code ${error.code} msg %{error.message}`)
+                                expect().assertFail();
+                            })
+                        }
+                        break;
+                    case AV_PLAYER_STATE.PAUSED:
+                        avPlayer.setPlaybackStrategy(playbackStrategy).then(() => {
+                            console.error(`setPlaybackStrategy unexpectedly success, state ${state}`)
+                            expect().assertFail();
+                        }).catch((error) => { console.info('paused setPlaybackStrategy failed, expected') })
+                        avPlayer.play().catch(error => {
+                            console.error(`play failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.COMPLETED:
+                        avPlayer.setPlaybackStrategy(playbackStrategy).then(() => {
+                            console.error(`setPlaybackStrategy unexpectedly success, state ${state}`)
+                            expect().assertFail();
+                        }).catch((error) => { console.info('prepared setPlaybackStrategy failed, expected') })
+                        avPlayer.release().catch(error => {
+                            console.error(`stop failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.RELEASED:
+                        avPlayer = null;
+                        done();
+                        break;
+                    case AV_PLAYER_STATE.ERROR:
+                        expect().assertFail();
+                        avPlayer.release().then(() => {},
+                            mediaTestBase.failureCallback).catch(mediaTestBase.catchCallback);
+                        avPlayer = null;
+                        break;
+                    default:
+                        break;
+                }
+            })
+        }
+
+        async function setMediaMuted(avPlayer, done) {
+            let surfaceID = globalThis.value;
+            let audio = media.MediaType.MEDIA_TYPE_AUD
+            let pauseCount = 0
+            let stateChangeCallback = async (state, reason) => {
+                switch (state) {
+                    case AV_PLAYER_STATE.INITIALIZED:
+                        avPlayer.surfaceId = surfaceID;
+                        avPlayer.prepare().catch((error) => {
+                            console.error(`prepare failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.PREPARED:
+                        avPlayer.setMediaMuted(audio, true).catch((error) => {
+                            console.error(`setMediaMuted failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        avPlayer.play().catch(error => {
+                            console.error(`play failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.PLAYING:
+                        avPlayer.setMediaMuted(audio, true).catch((error) => {
+                            console.error(`setMediaMuted failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        if (pauseCount++ > 0) {
+                            break
+                        }
+                        avPlayer.pause().catch(error => {
+                            console.error(`pause failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.PAUSED:
+                        avPlayer.setMediaMuted(audio, true).catch((error) => {
+                            console.error(`setMediaMuted failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        avPlayer.play().catch(error => {
+                            console.error(`play failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.COMPLETED:
+                        avPlayer.setMediaMuted(audio, true).catch((error) => {
+                            console.error(`setMediaMuted failed, err code ${error.code} msg ${error.message}`)
+                            expect().assertFail();
+                        })
+                        avPlayer.release().catch(error => {
+                            console.error(`stop failed err code ${error.code} msg %{error.message}`)
+                            expect().assertFail();
+                        })
+                        break;
+                    case AV_PLAYER_STATE.RELEASED:
+                        avPlayer = null;
+                        done();
+                        break;
+                    case AV_PLAYER_STATE.ERROR:
+                        expect().assertFail();
+                        avPlayer.release().then(() => {},
+                            mediaTestBase.failureCallback).catch(mediaTestBase.catchCallback);
+                        avPlayer = null;
+                        break;
+                    default:
+                        break;
+                }
+            }
+            avPlayer.on('stateChange', stateChangeCallback)
+        }
+
         async function testOffCallback(src, avPlayer, done) {
             console.info(`case media source: ${src}`)
             media.createAVPlayer((err, video) => {
@@ -485,5 +672,29 @@ export default function AVPlayerLocalTest() {
         it('SUB_MULTIMEDIA_MEDIA_VIDEO_SUBTILE_0200', 0, async function (done) {
             testSubtitle(fileDescriptor, `fd://${subtitleFdSrc.fd}`, avPlayer, done);
         })
+
+        /* *
+            * @tc.number    : SUB_MULTIMEDIA_MEDIA_VIDEO_SET_PLAYBACK_STRATEGY_0100
+            * @tc.name      : 001.test setPlaybackStrategy Function
+            * @tc.desc      : Local Video subtitle control test
+            * @tc.size      : MediumTest
+            * @tc.type      : Function test
+            * @tc.level     : Level1
+        */
+        it('SUB_MULTIMEDIA_MEDIA_VIDEO_SET_PLAYBACK_STRATEGY_0100', 0, async function (done) {
+            testSetPlaybackStrategy(fileDescriptor, avPlayer, done);
+        })
+
+        /* *
+            * @tc.number    : SUB_MULTIMEDIA_MEDIA_VIDEO_MUTE_0100
+            * @tc.name      : 001.test setMediaMuted Function
+            * @tc.desc      : Local Video subtitle control test
+            * @tc.size      : MediumTest
+            * @tc.type      : Function test
+            * @tc.level     : Level1
+        */
+        it('SUB_MULTIMEDIA_MEDIA_VIDEO_MUTE_0100', 0, async function (done) {
+            testSetMediaMuted(fileDescriptor, avPlayer, done);
+        })
     })
 }
