/*
 * Copyright (C) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import cameraObj from 'libentry.so';
import image from '@ohos.multimedia.image';
import media from '@ohos.multimedia.media';
import mediaLibrary from '@ohos.multimedia.mediaLibrary';
import featureAbility from '@ohos.ability.featureAbility';
import {UiComponent, UiDriver, Component, Driver, UiWindow, ON, BY } from '@ohos.UiTest';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';

// 创建视频录制的参数
let videoProfile = {
    audioBitrate: 48000,
    audioChannels: 2,
    audioCodec: 'audio/mp4a-latm',
    audioSampleRate: 48000,
    fileFormat: 'mp4',
    videoBitrate: 2000000,
    videoCodec: 'video/mp4v-es',
    videoFrameWidth: 640,
    videoFrameHeight: 480,
    videoFrameRate: 30
}

let videoConfig = {
    audioSourceType: 1,
    videoSourceType: 0,
    profile: videoProfile,
    url: 'file:///data/media/CameraOutput.mp4',
    orientationHint: 0,
    location: { latitude: 30, longitude: 130 },
    maxSize: 100,
    maxDuration: 500
}

let captureLocation = {
    latitude: 0,
    longitude: 0,
    altitude: 0,
}

let Camera_ErrorCode = {
    CAMERA_OK : 0,
    CAMERA_INVALID_ARGUMENT : 7400101,
    CAMERA_OPERATION_NOT_ALLOWED : 7400102,
    CAMERA_SESSION_NOT_CONFIG : 7400103,
    CAMERA_SESSION_NOT_RUNNING : 7400104,
    CAMERA_SESSION_CONFIG_LOCKED : 7400105,
    CAMERA_DEVICE_SETTING_LOCKED : 7400106,
    CAMERA_CONFLICT_CAMERA : 7400107,
    CAMERA_DEVICE_DISABLED : 7400108,
    CAMERA_DEVICE_PREEMPTED : 7400109,
    CAMERA_SERVICE_FATAL_ERROR : 7400201
}

let Camera_ExposureMode = {
    EXPOSURE_MODE_LOCKED : 0,
    EXPOSURE_MODE_AUTO : 1,
    EXPOSURE_MODE_CONTINUOUS_AUTO : 2
}

let Camera_FlashMode = {
    FLASH_MODE_CLOSE : 0,
    FLASH_MODE_OPEN : 1,
    FLASH_MODE_AUTO : 2,
    FLASH_MODE_ALWAYS_OPEN: 3
}

let Camera_FocusMode = {
    FOCUS_MODE_MANUAL : 0,
    FOCUS_MODE_CONTINUOUS_AUTO : 1,
    FOCUS_MODE_AUTO : 2,
    FOCUS_MODE_LOCKED : 3
}

let Camera_VideoStabilizationMode = {
    STABILIZATION_MODE_OFF : 0,
    STABILIZATION_MODE_LOW : 1,
    STABILIZATION_MODE_MIDDLE : 2,
    STABILIZATION_MODE_HIGH : 3,
    STABILIZATION_MODE_AUTO : 4
}

const TAG = "CameraErrorCodeUsecaseTest: ";
let mCameraManager;
let cameraOutputCap;
let mCameraDevicesArray;
let mCameraSession;
let mCameraNum;
let mCameraInput;
let mPreviewOutput;
let mPhotoSurface;
let mPhotoOutput;
let videoOutput;
let videoRecorder;
let videoSurfaceId;
let fdPath;
let fileAsset;
let fdNumber;
let metadataOutput;
let mMetadataObjectTypeArray;
let receiver;
let camera

export default function CameraErrorCodeUsecaseTest() {
    function sleep(ms) {
        console.info(TAG + "Entering sleep -> Promise constructor");
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function isEmpty(data) {
        if (data == null || data == undefined) {
            return true;
        }
        return false;
    }

    function getCameraManagerInstance() {
        console.info(TAG + 'Enter getCameraManagerInstance');
        console.info(TAG + 'globalThis.surfaceId : ' + globalThis.surfaceId);
        let ret = cameraObj.initCamera(globalThis.surfaceId);
        if (ret != 0) {
            console.info(TAG + "getCameraManager FAILED");
            expect().assertFail();
        }
        console.info(TAG + 'Exit getCameraManagerInstance');
        return true;
    }

    function getCameraSupportDevicesArray() {
        console.info(TAG + 'Enter getCameraSupportDevicesArray');
        camera = cameraObj.getSupportedCameras();
        console.info(TAG + 'Exit getCameraSupportDevicesArray  ' + camera.cameraPosition);
        console.info(TAG + 'Exit getCameraSupportDevicesArray  ' + camera.cameraType);
        console.info(TAG + 'Exit getCameraSupportDevicesArray  ' + camera.connectionType);
        console.info(TAG + 'Exit getCameraSupportDevicesArray  ' + camera.cameraId);
        if (isEmpty(camera)) {
            console.info(TAG + "getSupportedCameras FAILED");
            expect().assertFail();
        }
        console.info(TAG + 'Exit getCameraSupportDevicesArray');
        return true;
    }

    async function createInput() {
        console.info(TAG + 'Enter createInput');
        if (isEmpty(camera)) {
            console.info(TAG + "Entering createInputs FAILED with NoCamera");
            return false;
        }
        let ret = cameraObj.createCameraInput();

        if (ret != 0) {
            console.info(TAG + "createCameraInput FAILED");
            expect().assertFail();
            return false;
        }

        await cameraObj.cameraInputOpen();
        await sleep(100);
        console.info('Exit createInput');
        return true;
    }

    async function releaseInput() {
        console.info('Enter releaseInput');
        await cameraObj.cameraInputClose();

        console.info('Exit releaseInput');
        return true;
    }

    function beginCameraSessionConfig() {
        console.info(TAG + 'Enter beginCameraSessionConfig');
        cameraObj.sessionBegin();
        console.info(TAG + 'Exit beginCameraSessionConfig');
        return true;
    }

    async function commitCameraSessionConfig() {
        console.info(TAG + 'Enter commitCameraSessionConfig');
        await cameraObj.sessionCommitConfig();
        sleep(500);
        console.info(TAG + 'Exit commitCameraSessionConfig');
        return true;
    }

    function createCameraSessionInstance() {
        console.info(TAG + 'Enter createCameraSessionInstance');
        try {
            mCameraSession = cameraObj.createSession();
        }
        catch {
            console.info(TAG + 'createCaptureSession FAILED');
        }
        if (isEmpty(mCameraSession)) {
            console.info(TAG + "createCaptureSession FAILED");
            return false;
        }
        beginCameraSessionConfig();
        console.info(TAG + 'Exit createCameraSessionInstance');
        return true;
    }

    function releaseCameraSessionInstance() {
        cameraObj.sessionRelease();
        mCameraSession = null;
    }

    async function getPhotoReceiverSurface() {
        console.log(TAG + 'Entering getPhotoReceiverSurface')
        receiver = image.createImageReceiver(640, 480, 4, 8)
        console.log(TAG + 'before receiver check')
        if (receiver !== undefined) {
            console.log(TAG + 'Photo receiver is created successfully')
            mPhotoSurface = await receiver.getReceivingSurfaceId()
            console.log(TAG + 'Photo received id: ' + JSON.stringify(mPhotoSurface))
        } else {
            console.log(TAG + 'Photo receiver is created failed')
        }
        console.log(TAG + 'Exit getPhotoReceiverSurface')
    }

    async function closeFd() {
        if (fileAsset != null) {
            await fileAsset[0].close(fdNumber).then(() => {
                console.info('[mediaLibrary] case close fd success');
            }).catch((err) => {
                console.info('[mediaLibrary] case close fd failed');
            });
        } else {
            console.info('[mediaLibrary] case fileAsset is null');
        }
    }

    async function releaseVideoReceiveSurface() {
        console.log(TAG + 'Entering releaseVideoReceiveSurface')
        videoRecorder.release((err) => {
            console.info(TAG + 'Entering release video receiver')
        })
        await closeFd();
        console.log(TAG + 'Exit releaseVideoReceiveSurface')
    }

    function createOutput() {
        console.info(TAG + 'Enter createOutput');

        let cameraOutputCapability = cameraObj.getSupportedOutputCapability();
        console.info(TAG + 'cameraOutputCapability[0] = ' + cameraOutputCapability.previewProfilesSize);
        console.info(TAG + 'cameraOutputCapability[1] = ' + cameraOutputCapability.photoProfilesSize);
        console.info(TAG + 'cameraOutputCapability[2] = ' + cameraOutputCapability.videoProfilesSize);
        console.info(TAG + 'cameraOutputCapability[3] = ' + cameraOutputCapability.metadataProfilesSize);
        let mPreviewOutput = cameraObj.createPreviewOutput();
        if (mPreviewOutput != 0) {
            console.info(TAG + "createPreviewOutput FAILED");
            expect().assertFail();
        }
        console.info(TAG + "createPreviewOutput: " + mPreviewOutput);
        let mPhotoOutput = cameraObj.createPhotoOutput(mPhotoSurface);
        if (mPhotoOutput != 0) {
            console.info(TAG + "mPhotoOutput FAILED");
            expect().assertFail();
        }
        console.info(TAG + 'Exit createOutputs');
        return true;
    }

    describe('CameraErrorCodeUsecaseTest', function () {
        async function getPermission() {
            let permissions = [
                'ohos.permission.CAMERA',
                'ohos.permission.MICROPHONE',
                'ohos.permission.CAPTURE_SCREEN',
                'ohos.permission.READ_MEDIA',
                'ohos.permission.WRITE_MEDIA',
                'ohos.permission.GRANT_SENSITIVE_PERMISSIONS',
                'ohos.permission.REVOKE_SENSITIVE_PERMISSIONS',
                'ohos.permission.MEDIA_LOCATION',
                'ohos.permission.START_ABILIIES_FROM_BACKGROUND',
                'ohos.permission.START_INVISIBLE_ABILITY',
                'ohos.permission.ABILITY_BACKGROUND_COMMUNICATION',
            ];
            featureAbility.getContext().requestPermissionsFromUser(permissions, 0, (data) => {
                console.info(TAG + "request success" + JSON.stringify(data.code));
            })
        }
        console.info(TAG + '----------CameraErrorCodeUsecaseTest--------------');
        beforeAll(async function () {
            await getPermission();
            await sleep(5000);
            let driver = UiDriver.create();
            let button = await driver.findComponent(BY.text("允许"));
            while (button) {
                await button.click();
                button = await driver.findComponent(BY.text("允许"));
            }
            await sleep(1000);
            await getPhotoReceiverSurface();
            getCameraManagerInstance();
            getCameraSupportDevicesArray();
            await createInput();
            console.info(TAG + 'beforeAll case');
        })

        beforeEach(function () {
            sleep(1000);
            console.info('beforeEach case');
        })

        afterEach(async function () {
            console.info('afterEach case');
            if (!isEmpty(mCameraInput)) {
                await releaseInput();
            }
            if (!isEmpty(mCameraSession)) {
                await releaseCameraSessionInstance();
            }
        })

        afterAll(function () {
            releaseVideoReceiveSurface();
            sleep(1000);
            console.info('afterAll case');
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CREATE_CAMERA_INPUT_0100
         * @tc.name      : createCameraInput api
         * @tc.desc      : createCameraInput api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CREATE_CAMERA_INPUT_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CREATE_CAMERA_INPUT_0100--------------");
            let ret = cameraObj.createCameraInput();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CREATE_CAMERA_INPUT_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_INVALID_ARGUMENT).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_COMMITCONFIG_0100
         * @tc.name      : commitConfig api
         * @tc.desc      : commitConfig api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_COMMITCONFIG_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_COMMITCONFIG_0100--------------");
            cameraObj.createSession();
            let ret = cameraObj.sessionCommitConfig();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_COMMITCONFIG_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_OPERATION_NOT_ALLOWED).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_ADD_OUTPUT_0100
         * @tc.name      : addOutput api
         * @tc.desc      : addOutput api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_ADD_OUTPUT_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_ADD_OUTPUT_0100--------------");
            cameraObj.createSession();
            createOutput();
            let ret = cameraObj.sessionAddPreviewOutput();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_ADD_OUTPUT_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_OPERATION_NOT_ALLOWED).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_REMOVE_OUTPUT_0100
         * @tc.name      : removeOutput api
         * @tc.desc      : removeOutput api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_REMOVE_OUTPUT_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_REMOVE_OUTPUT_0100--------------");
            cameraObj.createSession();
            createOutput();
            let ret = cameraObj.sessionRemovePreviewOutput();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_REMOVE_OUTPUT_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_OPERATION_NOT_ALLOWED).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_START_0100
         * @tc.name      : capturesession start api
         * @tc.desc      : capturesession start api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_START_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_START_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionStart();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_START_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                console.info(TAG + "Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG: " + Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG);
                expect(ret == Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_HASFLASH_0100
         * @tc.name      : capturesession sessionHasFlash api
         * @tc.desc      : capturesession sessionHasFlash api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_HASFLASH_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_HASFLASH_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            try {
                cameraObj.sessionHasFlash();
            } catch (error) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_HASFLASH_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + error);
                console.info(TAG + "Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG: " + Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG);
                expect(error == Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
            };
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISFLASHMODESUPPORTED_0100
         * @tc.name      : capturesession sessionIsFlashModeSupported api
         * @tc.desc      : capturesession sessionIsFlashModeSupported api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISFLASHMODESUPPORTED_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISFLASHMODESUPPORTED_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            try {
                let ret = cameraObj.sessionIsFlashModeSupported(Camera_FlashMode.FLASH_MODE_AUTO);
            } catch (error) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISFLASHMODESUPPORTED_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + error.code);
                expect(error.code == Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
                expect(true).assertTrue();
            };
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFLASHMODE_0100
         * @tc.name      : capturesession sessionGetFlashMode api
         * @tc.desc      : capturesession sessionGetFlashMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFLASHMODE_0100', 0,

            async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFLASHMODE_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionGetFlashMode();
                console.info(TAG + "sessionGetFlashMode: " + ret);
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFLASHMODE_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
                expect(true).assertTrue();
            };
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFLASHMODE_0100
         * @tc.name      : capturesession sessionSetFlashMode api
         * @tc.desc      : capturesession sessionSetFlashMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFLASHMODE_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFLASHMODE_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionSetFlashMode(Camera_FlashMode.FLASH_MODE_AUTO);
            if  (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFLASHMODE_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_SERVICE_FATAL_ERROR).assertTrue();
                expect(true).assertTrue();
            };
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SESSIONSTART_0100
         * @tc.name      : capturesession sessionSetFlashMode api
         * @tc.desc      : capturesession sessionSetFlashMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SESSIONSTART_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SESSIONSTART_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionStart();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SESSIONSTART_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISEXPOSUREMODESUPPORTED_0100
         * @tc.name      : capturesession isExposureModeSupported api
         * @tc.desc      : capturesession isExposureModeSupported api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISEXPOSUREMODESUPPORTED_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISEXPOSUREMODESUPPORTED_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionIsExposureModeSupported(Camera_ExposureMode.EXPOSURE_MODE_AUTO);
            if (!ret) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISEXPOSUREMODESUPPORTED_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREMODE_0100
         * @tc.name      : capturesession getExposureMode api
         * @tc.desc      : capturesession getExposureMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREMODE_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREMODE_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionGetExposureMode();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREMODE_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREMODE_0100
         * @tc.name      : capturesession setExposureMode api
         * @tc.desc      : capturesession setExposureMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREMODE_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREMODE_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionSetExposureMode(Camera_ExposureMode.EXPOSURE_MODE_AUTO);
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREMODE_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREMODE_0200
         * @tc.name      : capturesession setExposureMode api
         * @tc.desc      : capturesession setExposureMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREMODE_0200', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREMODE_0200--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            await cameraObj.sessionStart();
            try {
                cameraObj.sessionSetExposureMode(Camera_ExposureMode.EXPOSURE_MODE_CONTINUOUS_AUTO);
            } catch (error) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREMODE_0200 FAILED");
                console.info(TAG + "ERRORCODE: " + error.code);
                expect(error.code != Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETMETERINGPOINT_0100
         * @tc.name      : capturesession getMeteringPoint api
         * @tc.desc      : capturesession getMeteringPoint api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETMETERINGPOINT_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETMETERINGPOINT_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionGetMeteringPoint();
            if (ret != null) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETMETERINGPOINT_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETMETERINGPOINT_0100
         * @tc.name      : capturesession setMeteringPoint api
         * @tc.desc      : capturesession setMeteringPoint api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETMETERINGPOINT_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETMETERINGPOINT_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionSetMeteringPoint({ x: 1, y: 1 });
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETMETERINGPOINT_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETMETERINGPOINT_0200
         * @tc.name      : capturesession setMeteringPoint api
         * @tc.desc      : capturesession setMeteringPoint api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETMETERINGPOINT_0200', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETMETERINGPOINT_0200--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            await cameraObj.sessionStart();
            let ret = cameraObj.sessionSetMeteringPoint({ x: -1, y: -1 });
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETMETERINGPOINT_0200 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret != Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREBIASRANGE_0100
         * @tc.name      : capturesession getExposureBiasRange api
         * @tc.desc      : capturesession getExposureBiasRange api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREBIASRANGE_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREBIASRANGE_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = Camera_ErrorCode.CAMERA_OK; //cameraObj.sessionGetExposureBiasRange(); // need debug
            if (ret != null) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREBIASRANGE_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREBIAS_0100
         * @tc.name      : capturesession setExposureBias api
         * @tc.desc      : capturesession setExposureBias api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREBIAS_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREBIAS_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let range = Camera_ErrorCode.CAMERA_OK; // cameraObj.sessionGetExposureBiasRange(); // need debug
            console.info(TAG + "range: " + range);
            let ret = cameraObj.sessionSetExposureBias(range[0]);
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREBIAS_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_SERVICE_FATAL_ERROR).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREBIAS_0200
         * @tc.name      : capturesession setExposureBias api
         * @tc.desc      : capturesession setExposureBias api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREBIAS_0200', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREBIAS_0200--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            await cameraObj.sessionStart();
            let ret = cameraObj.sessionSetExposureBias(-101);
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETEXPOSUREBIAS_0200 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret != Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREVALUE_0100
         * @tc.name      : capturesession getExposureValue api
         * @tc.desc      : capturesession getExposureValue api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREVALUE_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREVALUE_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionGetExposureMode();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETEXPOSUREVALUE_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();  // sessionGetExposureMode would return -1 need debug
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISFOCUSMODESUPPORTED_0100
         * @tc.name      : capturesession sessionIsFocusModeSupported api
         * @tc.desc      : capturesession sessionIsFocusModeSupported api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISFOCUSMODESUPPORTED_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISFOCUSMODESUPPORTED_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionIsFocusModeSupported(Camera_FocusMode.FOCUS_MODE_AUTO);
            if (ret != null) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISFOCUSMODESUPPORTED_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFOCUSMODE_0100
         * @tc.name      : capturesession sessionGetFocusMode api
         * @tc.desc      : capturesession sessionGetFocusMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFOCUSMODE_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFOCUSMODE_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionGetFocusMode();
            if (ret != null) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFOCUSMODE_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSMODE_0100
         * @tc.name      : capturesession sessionSetFocusMode api
         * @tc.desc      : capturesession sessionSetFocusMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSMODE_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSMODE_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionSetFocusMode(Camera_FocusMode.FOCUS_MODE_MANUAL);
            if (ret != null) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSMODE_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSMODE_0200
         * @tc.name      : capturesession sessionSetFocusMode api
         * @tc.desc      : capturesession sessionSetFocusMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSMODE_0200', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSMODE_0200--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            await cameraObj.sessionStart();
            let ret = cameraObj.sessionSetFocusMode(5);
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSMODE_0200 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret != Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSPOINT_0100
         * @tc.name      : capturesession sessionSetFocusPoint api
         * @tc.desc      : capturesession sessionSetFocusPoint api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSPOINT_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSPOINT_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionSetFocusPoint({ x: 1, y: 1 });
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSPOINT_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSPOINT_0200
         * @tc.name      : capturesession sessionSetFocusPoint api
         * @tc.desc      : capturesession sessionSetFocusPoint api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSPOINT_0200', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSPOINT_0200--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            await cameraObj.sessionStart();
            let ret = cameraObj.sessionSetFocusPoint({ x: -1, y: -1 });
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETFOCUSPOINT_0200 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret != Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFOCUSPOINT_0100
         * @tc.name      : capturesession sessionGetFocusPoint api
         * @tc.desc      : capturesession sessionGetFocusPoint api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFOCUSPOINT_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFOCUSPOINT_0100--------------");
            if (mCameraSession) {
                cameraObj.sessionRelease();
                mCameraSession = null;
            }
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionGetFocusPoint();
            console.info(TAG + "FocusPoint: " + ret);
            if (!ret) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETFOCUSPOINT_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETZOOMRATIORANG_0100
         * @tc.name      : capturesession sessionGetZoomRatioRange api
         * @tc.desc      : capturesession sessionGetZoomRatioRange api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETZOOMRATIORANG_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETZOOMRATIORANG_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = false; //cameraObj.sessionGetZoomRatioRange();  //need debug
            console.info(TAG + "GetZoomRatioRange: " + ret);
            if (!ret) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETZOOMRATIORANG_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETZOOMRATIO_0100
         * @tc.name      : capturesession sessionGetZoomRatio api
         * @tc.desc      : capturesession sessionGetZoomRatio api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETZOOMRATIO_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETZOOMRATIO_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionGetZoomRatio();
            console.info(TAG + "GetZoomRatio: " + ret);
            if (!ret) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_GETZOOMRATIO_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETZOOMRATIO_0100
         * @tc.name      : capturesession sessionSetZoomRatio api
         * @tc.desc      : capturesession sessionSetZoomRatio api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETZOOMRATIO_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETZOOMRATIO_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            try {
            } catch (error) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETZOOMRATIO_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + error.code);
                expect(error.code == Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETZOOMRATIO_0200
         * @tc.name      : capturesession sessionSetZoomRatio api
         * @tc.desc      : capturesession sessionSetZoomRatio api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETZOOMRATIO_0200', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETZOOMRATIO_0200--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            await cameraObj.sessionStart();
            let ret = cameraObj.sessionSetZoomRatio(-101);
            if (ret != null) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETZOOMRATIO_0200 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISVSMS_0100
         * @tc.name      : capturesession sessionIsVideoStabilizationModeSupported api
         * @tc.desc      : capturesession sessionIsVideoStabilizationModeSupported api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISVSMS_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISVSMS_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionIsVideoStabilizationModeSupported(Camera_VideoStabilizationMode.STABILIZATION_MODE_LOW);
            console.info(TAG + "IsVideoStabilizationModeSupported: " + ret);
            if (!ret) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_ISVSMS_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_AVSTMODE_0100
         * @tc.name      : capturesession sessionGetVideoStabilizationMode api
         * @tc.desc      : capturesession sessionGetVideoStabilizationMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_AVSTMODE_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_AVSTMODE_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionGetVideoStabilizationMode();
            console.info(TAG + "VideoStabilizationMode: " + ret);
            if (ret != null) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_AVSTMODE_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_OK).assertTrue();
                expect(true).assertTrue();  // sessionGetVideoStabilizationMode is not return ret, need debug
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETVSTMODE_0100
         * @tc.name      : capturesession sessionSetVideoStabilizationMode api
         * @tc.desc      : capturesession sessionSetVideoStabilizationMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETVSTMODE_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETVSTMODE_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.sessionSetVideoStabilizationMode(Camera_VideoStabilizationMode.STABILIZATION_MODE_LOW);
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETVSTMODE_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETVSTMODE_0200
         * @tc.name      : capturesession sessionSetVideoStabilizationMode api
         * @tc.desc      : capturesession sessionSetVideoStabilizationMode api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETVSTMODE_0200', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETVSTMODE_0200--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            await cameraObj.sessionStart();
            let ret = cameraObj.sessionSetVideoStabilizationMode(Camera_VideoStabilizationMode.STABILIZATION_MODE_AUTO);
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_CAPTURESESSION_SETVSTMODE_0200 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_PREVIEW_START_0100
         * @tc.name      : PreviewOutput  start api
         * @tc.desc      : PreviewOutput  start api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_PREVIEW_START_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_PREVIEW_START_0100--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            let ret = cameraObj.previewOutputStart();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_PREVIEW_START_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })


        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_VIDEO_START_0100
         * @tc.name      : videooutput  start api
         * @tc.desc      : videooutput  start api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_VIDEO_START_0100', 0, async function (done) {
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            if (!isEmpty(videoOutput)) {
                cameraObj.sessionAddVideoOutput();
                let ret = cameraObj.videoOutputStart();
                if (ret != 0) {
                    console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_VIDEO_START_0100 FAILED");
                    console.info(TAG + "ERRORCODE: " + ret);
                    expect(ret == Camera_ErrorCode.CAMERA_SESSION_NOT_CONFIG).assertTrue();
                    expect(true).assertTrue();
                }
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_PHOTOOUTPUT_CAPTURE_0500
         * @tc.name      : photoOutput capture api
         * @tc.desc      : photoOutput capture api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_PHOTOOUTPUT_CAPTURE_0500', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_PHOTOOUTPUT_CAPTURE_0500--------------");
            createCameraSessionInstance();
            cameraObj.sessionAddInput();
            createOutput();
            cameraObj.sessionAddPreviewOutput();
            cameraObj.sessionAddPhotoOutput();
            await commitCameraSessionConfig();
            let ret = cameraObj.photoOutputCapture();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_PHOTOOUTPUT_CAPTURE_0500 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_SESSION_NOT_RUNNING).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })

        /**
         * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_BEGINCONFIG_0100
         * @tc.name      : capturesession beginConfig api
         * @tc.desc      : capturesession beginConfig api
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
        */
        it('SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_BEGINCONFIG_0100', 0, async function (done) {
            console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_BEGINCONFIG_0100--------------");
            cameraObj.createSession();
            let ret = cameraObj.sessionBegin();
            if (ret != 0) {
                console.info(TAG + "SUB_MULTIMEDIA_CAMERA_NDK_ERROR_CODE_USECASE_BEGINCONFIG_0100 FAILED");
                console.info(TAG + "ERRORCODE: " + ret);
                expect(ret == Camera_ErrorCode.CAMERA_SESSION_CONFIG_LOCKED).assertTrue();
                expect(true).assertTrue();
            }
            done();
        })
    })
}