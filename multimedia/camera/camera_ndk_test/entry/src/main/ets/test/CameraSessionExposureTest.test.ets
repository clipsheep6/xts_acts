/*
 * Copyright (C) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import cameraObj from 'libentry.so';
import image from '@ohos.multimedia.image';
import media from '@ohos.multimedia.media';
import mediaLibrary from '@ohos.multimedia.mediaLibrary';
import deviceInfo from '@ohos.deviceInfo';
import featureAbility from '@ohos.ability.featureAbility';
import {UiComponent, UiDriver, Component, Driver, UiWindow, ON, BY } from '@ohos.UiTest';
import {describe, beforeAll, beforeEach, afterEach, afterAll, it, expect} from '@ohos/hypium';

const TAG = "CameraSessionExposureTest: ";

let receiver;
let mPhotoSurface;
let mFileAsset;
let mFdNumber;
let mFdPath;
let mVideoRecorder;
let mVideoSurface;
let mSupportCamera;
let mCameraNum;

let msessionIsExposureModeSupportedArray;
let mExposureBiasRangeArray;
let mExposureBiasMaxArray;
let mExposureBiasMinArray;


let mVideoProfileCfg = {
  audioBitrate: 48000,
  audioChannels: 2,
  audioCodec: 'audio/mp4a-latm',
  audioSampleRate: 48000,
  durationTime: 1000,
  fileFormat: 'mp4',
  videoBitrate: 2000000,
  videoCodec: 'video/mp4v-es',
  videoFrameWidth: 640,
  videoFrameHeight: 480,
  videoFrameRate: 30
}

let mVideoConfig = {
  audioSourceType: 1,
  videoSourceType: 0,
  profile: mVideoProfileCfg,
  url: 'file:///data/media/CameraSessionBase.mp4',
  orientationHint: 0,
  location: { latitude: 30, longitude: 130 },
  maxSize: 100,
  maxDuration: 500
}

let mPicWidthMax = 1;
let mPicHeightMax = 1;

let mMETERINGPoint = {
  x: mPicWidthMax / 2.0,
  y: mPicHeightMax / 2.0,
}

let mMETERINGPointLT = {
  x: 0,
  y: 0,
}

let mMETERINGPointRT = {
  x: mPicWidthMax,
  y: 0,
}

let mMETERINGPointLB = {
  x: 0,
  y: mPicHeightMax,
}

let mMETERINGPointRB = {
  x: mPicWidthMax,
  y: mPicHeightMax,
}

let mMETERINGPointInvalidLT = {
  x: -1,
  y: -1,
}

let mMETERINGPointInvalidRT = {
  x: (mPicWidthMax + 1),
  y: -1,
}

let mMETERINGPointInvalidLB = {
  x: -1,
  y: mPicHeightMax,
}

let mMETERINGPointInvalidRB = {
  x: (mPicWidthMax + 1),
  y: (mPicHeightMax + 1),
}

let Camera_ExposureMode = {
  EXPOSURE_MODE_LOCKED : 0,
  EXPOSURE_MODE_AUTO : 1,
  EXPOSURE_MODE_CONTINUOUS_AUTO : 2,
}

let mEnableCheckInvalidMETERINGPoint = false;

export default function cameraSessionExposureTest() {

  function sleep(ms) {
    console.info(TAG + "Entering sleep -> Promise constructor");
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async function closeFd() {
    if (mFileAsset != null) {
      await mFileAsset[0].close(mFdNumber).then(() => {
        console.info('[mediaLibrary] case close fd success');
      }).catch((err) => {
        console.info('[mediaLibrary] case close fd failed');
      });
    } else {
      console.info('[mediaLibrary] case fileAsset is null');
    }
  }

  async function getPhotoReceiverSurface() {
    console.log(TAG + 'Entering getPhotoReceiverSurface')
    receiver = image.createImageReceiver(640, 480, 4, 8)
    console.log(TAG + 'before receiver check')
    if (receiver !== undefined) {
      console.log(TAG + 'Photo receiver is created successfully')
      mPhotoSurface = await receiver.getReceivingSurfaceId()
      console.log(TAG + 'Photo received id: ' + JSON.stringify(mPhotoSurface))
    } else {
      console.log(TAG + 'Photo receiver is created failed')
    }
    console.log(TAG + 'Exit getPhotoReceiverSurface')
  }

  function getCameraManagerInstance() {
    console.info(TAG + 'Enter getCameraManagerInstance');
    console.info(TAG + 'globalThis.surfaceId : ' + globalThis.surfaceId);
    let ret = cameraObj.initCamera(globalThis.surfaceId);
    if (ret != 0) {
      console.info(TAG + "getCameraManager FAILED");
      expect().assertFail();
    }
    console.info(TAG + 'Exit getCameraManagerInstance');
    return true;
  }

  function getCameraSupportDevicesArray() {
    console.info(TAG + 'Enter getCameraSupportDevicesArray');
    let cameraInfo = cameraObj.getSupportedCameras();
    if (cameraInfo.cameraId == null) {
      console.info(TAG + "getSupportedCameras FAILED");
      expect().assertFail();
    }

    msessionIsExposureModeSupportedArray = new Array();
    mExposureBiasRangeArray = new Array();
    mExposureBiasMaxArray = new Array();
    mExposureBiasMinArray = new Array();
    console.info(TAG + 'Exit getCameraSupportDevicesArray');
    return true;
  }

  function createCameraSessionInstance() {
    console.info('Enter createCameraSessionInstance');
    try {
      cameraObj.createSession();
    }
    catch {
      console.info('createCaptureSession FAILED');
      expect().assertFail();
    }
    let ret = cameraObj.sessionBegin();
    if (ret != 0) {
      console.info(TAG + "sessionBegin FAILED");
      expect().assertFail();
    }
    console.info('Exit createCameraSessionInstance');
    return true;
  }

  async function createInput() {
    console.info('Enter createInput');
    let ret = cameraObj.createCameraInput();

    if (ret != 0) {
      console.info(TAG + "createCameraInput FAILED");
      expect().assertFail();
      return false;
    }

    await cameraObj.cameraInputOpen();
    await sleep(100);
    console.info('Exit createInput');
    return true;
  }

  async function releaseInput() {
    console.info('Enter releaseInput');
    await cameraObj.cameraInputClose();

    console.info('Exit releaseInput');
    return true;
  }

  function createOutput() {
    console.info(TAG + 'Enter createOutput');

    cameraObj.getSupportedOutputCapability();
    let mPreviewOutput = cameraObj.createPreviewOutput();
    if (mPreviewOutput != 0) {
      console.info(TAG + "createPreviewOutput FAILED");
      expect().assertFail();
    }
    console.info(TAG + "createPreviewOutput: " + mPreviewOutput);
    let mPhotoOutput = cameraObj.createPhotoOutput(mPhotoSurface);
    if (mPhotoOutput != 0) {
      console.info(TAG + "mPhotoOutput FAILED");
      expect().assertFail();
    }
    console.info(TAG + "createPhotoOutput: " + mPhotoOutput);
    console.info('Exit createOutputs');
    return true;
  }

  async function releaseOutput() {
    console.info('Enter releaseOutput');

    await cameraObj.previewOutputRelease();
    await cameraObj.photoOutputRelease();
    await cameraObj.videoOutputRelease();

    console.info('Exit releaseOutput');
    return true;
  }

  async function startCameraSession() {
    console.info(TAG + "Enter startCameraSession");

    await createInput();
    createOutput();

    await sleep(1);
    let addInput =cameraObj.sessionAddInput();
    if (addInput != 0) {
      console.info(TAG + "addInput FAILED");
      expect().assertFail();
    }
    let addPreviewOutput = cameraObj.sessionAddPreviewOutput();
    if (addPreviewOutput != 0) {
      console.info(TAG + "addPreviewOutput FAILED");
      expect().assertFail();
    }
    let addPhotoOutput = cameraObj.sessionAddPhotoOutput();
    if (addPhotoOutput != 0) {
      console.info(TAG + "addPhotoOutput FAILED");
      expect().assertFail();
    }
    await sleep(30);

    let commitConfig = cameraObj.sessionCommitConfig();
    if (commitConfig != 0) {
      console.info(TAG + "CommitConfig FAILED");
      expect().assertFail();
    }
    await sleep(50);

    let sessionStart = cameraObj.sessionStart();
    if (sessionStart != 0) {
      console.info(TAG + "sessionStart FAILED");
      expect().assertFail();
    }
    await sleep(50);
    console.info(TAG + "Exit startCameraSession");

    return true;
  }

  async function stopCameraSession() {
    console.info(TAG + "Enter stopCameraSession");

    let ret = cameraObj.sessionStop();
    if (ret != 0) {
      console.info(TAG + "stopCameraSession FAILED = " + ret);
      expect().assertFail();
    }
    let RemovePreviewOutput = cameraObj.sessionRemovePreviewOutput();
    if (RemovePreviewOutput != 0) {
      console.info(TAG + "RemovePreviewOutput FAILED = " + RemovePreviewOutput);
      expect().assertFail();
    }
    let RemovePhotoOutput = cameraObj.sessionRemovePhotoOutput();
    if (RemovePhotoOutput != 0) {
      console.info(TAG + "RemovePhotoOutput FAILED = " + RemovePhotoOutput);
      expect().assertFail();
    }

    await releaseInput();
    await releaseOutput();
    console.info(TAG + "Exit stopCameraSession");

    return true;
  }

  async function releaseVideoReceiveSurface() {
    console.log(TAG + 'Entering releaseVideoReceiveSurface')
    mVideoRecorder.release((err) => {
      console.info(TAG + 'Entering release video receiver')
    })
    await closeFd();
    console.log(TAG + 'Exit releaseVideoReceiveSurface')
  }

  async function releaseCameraSessionInstance() {
    cameraObj.sessionRelease();
  }

  describe('cameraSessionExposureTest', function () {
    async function getPermission() {
      console.info(TAG + '1031xmj getPermission');
      let permissions = [
        'ohos.permission.CAMERA',
        'ohos.permission.MICROPHONE',
        'ohos.permission.CAPTURE_SCREEN',
        'ohos.permission.READ_MEDIA',
        'ohos.permission.WRITE_MEDIA',
        'ohos.permission.GRANT_SENSITIVE_PERMISSIONS',
        'ohos.permission.REVOKE_SENSITIVE_PERMISSIONS',
        'ohos.permission.MEDIA_LOCATION',
        'ohos.permission.START_ABILIIES_FROM_BACKGROUND',
        'ohos.permission.START_INVISIBLE_ABILITY',
        'ohos.permission.ABILITY_BACKGROUND_COMMUNICATION',
      ];
      featureAbility.getContext().requestPermissionsFromUser(permissions, 0, (data) => {
        console.info(TAG + "request success" + JSON.stringify(data.code));
      })
    }
    console.info(TAG + '----------cameraSessionExposureTest--------------')

    beforeAll(async function () {
      sleep(100);
      await getPermission();
      await sleep(5000);
     let driver = UiDriver.create();
     let button = await driver.findComponent(BY.text("允许"));
     while (button) {
       await button.click();
       button = await driver.findComponent(BY.text("允许"));
     }
     await sleep(1000);
      await getPhotoReceiverSurface();
      getCameraManagerInstance();
      getCameraSupportDevicesArray();
      createCameraSessionInstance();
      await startCameraSession();

      console.info('Device type = ' + deviceInfo.deviceType);

      console.info('beforeAll case');
    })

    beforeEach(function () {
      sleep(1000);
      console.info('beforeEach case');
    })

    afterEach(async function () {
      console.info('afterEach case');
    })

    afterAll(function () {
      releaseVideoReceiveSurface();
      releaseCameraSessionInstance();
      sleep(1000);
      console.info('afterAll case');
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0100
     * @tc.name      : Check capture session support exposure locked mode with promise or not
     * @tc.desc      : Check capture session support exposure locked mode with promise or not
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0100', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0100--------------");

      let sessionIsExposureModeSupported = cameraObj.sessionIsExposureModeSupported(Camera_ExposureMode.EXPOSURE_MODE_LOCKED);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0100 finish");
      if (sessionIsExposureModeSupported != null || sessionIsExposureModeSupported != undefined) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0100 PASSED with sessionIsExposureModeSupported is: " + sessionIsExposureModeSupported);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0100 FAILED with sessionIsExposureModeSupported is: " + sessionIsExposureModeSupported);
        expect().assertFail();
      }
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0100 end for camera[0]");

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0100 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0100
     * @tc.name      : Check capture session set exposure locked mode with promise
     * @tc.desc      : Check capture session set exposure locked mode with promise
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0100', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0100--------------");

      cameraObj.sessionSetExposureMode(Camera_ExposureMode.EXPOSURE_MODE_LOCKED);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0100 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0100 PASSED with ExposureMode is: 0");
      let exposureMode = cameraObj.sessionGetExposureMode();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0100 finish");
      if (exposureMode == Camera_ExposureMode.EXPOSURE_MODE_LOCKED) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0100 PASSED with ExposureMode is: " + exposureMode);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0100 FAILED with ExposureMode is: " + exposureMode);
        expect().assertFail();
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0100 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0200
     * @tc.name      : Check capture session support exposure auto mode with promise or not
     * @tc.desc      : Check capture session support exposure auto mode with promise or not
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0200', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0200--------------");

      let sessionIsExposureModeSupported = cameraObj.sessionIsExposureModeSupported(Camera_ExposureMode.EXPOSURE_MODE_AUTO);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0200 finish");
      if (sessionIsExposureModeSupported != null || sessionIsExposureModeSupported != undefined) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0200 PASSED with sessionIsExposureModeSupported is: " + sessionIsExposureModeSupported);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0200 FAILED with sessionIsExposureModeSupported is: " + sessionIsExposureModeSupported);
        expect().assertFail();
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0200 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0200
     * @tc.name      : Check capture session set exposure auto mode with promise
     * @tc.desc      : Check capture session set exposure auto mode with promise
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0200', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0200--------------");

      cameraObj.sessionSetExposureMode(Camera_ExposureMode.EXPOSURE_MODE_AUTO);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0200 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0200 PASSED with ExposureMode is: " + 1);

      let exposureMode = cameraObj.sessionGetExposureMode();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0200 finish");
      if (exposureMode == Camera_ExposureMode.EXPOSURE_MODE_AUTO) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0200 PASSED with ExposureMode is: " + exposureMode);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0200 FAILED with ExposureMode is: " + exposureMode);
        expect().assertFail();
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0200 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0300
     * @tc.name      : Check capture session support exposure continuous auto mode with promise or not
     * @tc.desc      : Check capture session support exposure continuous auto mode with promise or not
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0300', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0300--------------");

      let sessionIsExposureModeSupported = cameraObj.sessionIsExposureModeSupported(Camera_ExposureMode.EXPOSURE_MODE_CONTINUOUS_AUTO);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0300 finish");
      if (sessionIsExposureModeSupported != null || sessionIsExposureModeSupported != undefined) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0300 PASSED with sessionIsExposureModeSupported is: " + sessionIsExposureModeSupported);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0300 FAILED with sessionIsExposureModeSupported is: " + sessionIsExposureModeSupported);
        expect().assertFail();
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_IS_EXPOSURE_MODE_SUPPORT_PROMISE_0300 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0300
     * @tc.name      : Check capture session set exposure continuous auto mode with promise
     * @tc.desc      : Check capture session set exposure continuous auto mode with promise
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0300', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0300--------------");

      cameraObj.sessionSetExposureMode(Camera_ExposureMode.EXPOSURE_MODE_CONTINUOUS_AUTO);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0300 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0300 PASSED with ExposureMode is: " + 2);

      let exposureMode = cameraObj.sessionGetExposureMode();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0300 finish");
      if (exposureMode == Camera_ExposureMode.EXPOSURE_MODE_CONTINUOUS_AUTO) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0300 PASSED with ExposureMode is: " + exposureMode);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0300 FAILED with ExposureMode is: " + exposureMode);
        expect().assertFail();
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_MODE_PROMISE_0300 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0100
     * @tc.name      : Check capture session set METERING point with promise
     * @tc.desc      : Check capture session set METERING point with promise
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0100', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0100--------------");

      cameraObj.sessionSetMeteringPoint(mMETERINGPoint);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0100 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0100 PASSED with METERINGPoint is: " + mMETERINGPoint.x + ", " + mMETERINGPoint.y);

      let METERINGPoint = cameraObj.sessionGetMeteringPoint();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0100 finish");
      if ((METERINGPoint.x == mMETERINGPoint.x) && (METERINGPoint.y == mMETERINGPoint.y)) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0100 PASSED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0100 FAILED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
        expect().assertFail();
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0100 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0200
     * @tc.name      : Check capture session set METERING point with promise(left-top point)
     * @tc.desc      : Check capture session set METERING point with promise(left-top point)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0200', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0200--------------");

      cameraObj.sessionSetMeteringPoint(mMETERINGPointLT);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0200 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0200 PASSED with METERINGPoint is: " + mMETERINGPointLT.x + ", " + mMETERINGPointLT.y);

      let METERINGPoint = cameraObj.sessionGetMeteringPoint();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0200 finish");
      if ((Math.abs(METERINGPoint.x - mMETERINGPointLT.x) >= 0) && (Math.abs(METERINGPoint.y - mMETERINGPointLT.y) >= 0)) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0200 PASSED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0200 FAILED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
        expect().assertFail();
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0200 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0300
     * @tc.name      : Check capture session set METERING point with promise(right-top point)
     * @tc.desc      : Check capture session set METERING point with promise(right-top point)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0300', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0300--------------");

      cameraObj.sessionSetMeteringPoint(mMETERINGPointRT);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0300 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0300 PASSED with METERINGPoint is: " + mMETERINGPointRT.x + ", " + mMETERINGPointRT.y);

      let METERINGPoint = cameraObj.sessionGetMeteringPoint();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0300 finish");
      if ((Math.abs(METERINGPoint.x - mMETERINGPointRT.x) >= 0) && (Math.abs(METERINGPoint.y - mMETERINGPointRT.y) >= 0)) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0300 PASSED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0300 FAILED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
        expect().assertFail();
      }
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0300 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0400
     * @tc.name      : Check capture session set METERING point with promise(left-bottom point)
     * @tc.desc      : Check capture session set METERING point with promise(left-bottom point)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0400', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0400--------------");

      cameraObj.sessionSetMeteringPoint(mMETERINGPointLB);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0400 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0400 PASSED with METERINGPoint is: " + mMETERINGPointLB.x + ", " + mMETERINGPointRB.y);

      let METERINGPoint = cameraObj.sessionGetMeteringPoint();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0400 finish");
      if ((Math.abs(METERINGPoint.x - mMETERINGPointLB.x) >= 0) && (Math.abs(METERINGPoint.y - mMETERINGPointLB.y) >= 0)) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0400 PASSED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0400 FAILED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
        expect().assertFail();
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0400 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0500
     * @tc.name      : Check capture session set METERING point with promise(right-bottom point)
     * @tc.desc      : Check capture session set METERING point with promise(right-bottom point)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0500', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0500--------------");

      cameraObj.sessionSetMeteringPoint(mMETERINGPointRB);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0500 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0500 PASSED with METERINGPoint is: " + mMETERINGPointRB.x + ", " + mMETERINGPointRB.y);

      let METERINGPoint = cameraObj.sessionGetMeteringPoint();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0500 finish");
      if ((METERINGPoint.x == mMETERINGPointRB.x) && (METERINGPoint.y == mMETERINGPointRB.y)) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0500 PASSED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0500 FAILED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
        expect().assertFail();
      }
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0500 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0600
     * @tc.name      : Check capture session set METERING point with promise(left-top invalid point)
     * @tc.desc      : Check capture session set METERING point with promise(left-top invalid point)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0600', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0600--------------");

      cameraObj.sessionSetMeteringPoint(mMETERINGPointInvalidLT);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0600 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0600 PASSED with METERINGPoint is: " + mMETERINGPointInvalidLT.x + ", " + mMETERINGPointInvalidLT.y);

      let METERINGPoint = cameraObj.sessionGetMeteringPoint();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0600 finish");
      if (((METERINGPoint.x != mMETERINGPointInvalidLT.x) && (METERINGPoint.y != mMETERINGPointInvalidLT.y)) || (mEnableCheckInvalidMETERINGPoint == false)) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0600 PASSED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0600 FAILED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
        expect().assertFail();
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0600 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0700
     * @tc.name      : Check capture session set METERING point with promise(right-top invalid point)
     * @tc.desc      : Check capture session set METERING point with promise(right-top invalid point)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0700', 2, async function (done) {
      console.info(TAG + "--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0700--------------");

      cameraObj.sessionSetMeteringPoint(mMETERINGPointInvalidRT);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0700 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0700 PASSED with METERINGPoint is: " + mMETERINGPointInvalidRT.x + ", " + mMETERINGPointInvalidRT.y);

      let METERINGPoint = cameraObj.sessionGetMeteringPoint();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0700 finish");
      if (((METERINGPoint.x != mMETERINGPointInvalidRT.x) && (METERINGPoint.y != mMETERINGPointInvalidRT.y)) || (mEnableCheckInvalidMETERINGPoint == false)) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0700 PASSED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0700 FAILED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
        expect().assertFail();
      }
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0700 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0800
     * @tc.name      : Check capture session set METERING point with promise(left-bottom invalid point)
     * @tc.desc      : Check capture session set METERING point with promise(left-bottom invalid point)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0800', 2, async function (done) {
      console.info("--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0800--------------");

      cameraObj.sessionSetMeteringPoint(mMETERINGPointInvalidLB);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0800 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0800 PASSED with METERINGPoint is: " + mMETERINGPointInvalidLB.x + ", " + mMETERINGPointInvalidRB.y);

      let METERINGPoint = cameraObj.sessionGetMeteringPoint();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0800 finish");
      if (((METERINGPoint.x != mMETERINGPointInvalidLB.x) && (METERINGPoint.y != mMETERINGPointInvalidLB.y)) || (mEnableCheckInvalidMETERINGPoint == false)) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0800 PASSED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0800 FAILED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
        expect().assertFail();
      }
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0800 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0900
     * @tc.name      : Check capture session set METERING point with promise(right-bottom invalid point)
     * @tc.desc      : Check capture session set METERING point with promise(right-bottom invalid point)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0900', 2, async function (done) {
      console.info("--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0900--------------");

      cameraObj.sessionSetMeteringPoint(mMETERINGPointInvalidRB);
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0900 finish");
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0900 PASSED with METERINGPoint is: " + mMETERINGPointInvalidRB.x + ", " + mMETERINGPointInvalidRB.y);

      let METERINGPoint = cameraObj.sessionGetMeteringPoint();
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0900 finish");
      if (((METERINGPoint.x != mMETERINGPointInvalidRB.x) && (METERINGPoint.y != mMETERINGPointInvalidRB.y)) || (mEnableCheckInvalidMETERINGPoint == false)) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0900 PASSED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0900 FAILED with METERINGPoint is: " + METERINGPoint.x + ", " + METERINGPoint.y);
        expect().assertFail();
      }
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_METERING_POINT_PROMISE_0900 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_GET_EXPOSURE_BIAS_RANGE_PROMISE_0100
     * @tc.name      : Check capture session get exposure bias range with promise
     * @tc.desc      : Check capture session get exposure bias range with promise
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_GET_EXPOSURE_BIAS_RANGE_PROMISE_0100', 2, async function (done) {
      console.info("--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_GET_EXPOSURE_BIAS_RANGE_PROMISE_0100--------------");

      let exposureBiasRange = cameraObj.sessionGetExposureBiasRange();
      let exposureBiasRangeLength = exposureBiasRange.maxExposureBias - exposureBiasRange.minExposureBias;
      mExposureBiasRangeArray[0] = exposureBiasRange;
      mExposureBiasMaxArray[0] = exposureBiasRange[exposureBiasRange.maxExposureBias];
      mExposureBiasMinArray[0] = exposureBiasRange[exposureBiasRange.minExposureBias];

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_GET_EXPOSURE_BIAS_RANGE_PROMISE_0100 finish");
      if (exposureBiasRangeLength < 0) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_GET_EXPOSURE_BIAS_RANGE_PROMISE_0100 PASSED with ExposureBiasRange length is: " + exposureBiasRangeLength);
      } else {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_GET_EXPOSURE_BIAS_RANGE_PROMISE_0100 FAILED with ExposureBiasRange length is: " + exposureBiasRangeLength);
      }

      for (let j = 0; j < exposureBiasRangeLength; j++) {
        console.info(TAG + j + "th, exposure bias is: " + exposureBiasRange.minExposureBias);
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_GET_EXPOSURE_BIAS_RANGE_PROMISE_0100 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0100
     * @tc.name      : Check capture session set exposure bias with promise
     * @tc.desc      : Check capture session set exposure bias with promise
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0100', 2, async function (done) {
      console.info("--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0100--------------");

      let exposureBias = mExposureBiasRangeArray[0];
      if (exposureBias == 0 || isNaN(exposureBias)) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0100 exposureBias is 0");
      } else {
        cameraObj.sessionSetExposureBias(exposureBias);
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0100 finish");
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0100 PASSED with ExposureBias is: " + mExposureBiasRangeArray[0][0]);

        let exposureValue = cameraObj.sessionGetExposureBias();
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0100 finish");
        if (exposureValue == mExposureBiasRangeArray[0]) {
          console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0100 PASSED with ExposureValue is: " + exposureValue);
        } else {
          console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0100 FAILED with ExposureValue is: " + exposureValue);
          expect().assertFail();
        }
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0100 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0200
     * @tc.name      : Check capture session set exposure bias with promise(invalid value, min - 1)
     * @tc.desc      : Check capture session set exposure bias with promise(invalid value, min - 1)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0200', 2, async function (done) {
      console.info("--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0200--------------");

      let exposureBias = mExposureBiasMinArray[0];
      if (exposureBias == 0) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0200 exposureBias is 0");
      } else {
        //await startCameraSession();
        cameraObj.sessionSetExposureBias(exposureBias - 1);
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0200 finish");
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0200 PASSED with ExposureBias is: " + (mExposureBiasMinArray[0] - 1));

        let exposureValue = cameraObj.sessionGetExposureBias();
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0200 finish");
        if (exposureValue != (exposureBias - 1)) {
          console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0200 PASSED with ExposureValue is: " + exposureValue);
        } else {
          console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0200 FAILED with ExposureValue is: " + exposureValue);
          expect().assertFail();
        }
        await sleep(500);
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0200 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0300
     * @tc.name      : Check capture session set exposure bias with promise(invalid value, min - 0.1)
     * @tc.desc      : Check capture session set exposure bias with promise(invalid value, min - 0.1)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0300', 2, async function (done) {
      console.info("--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0300--------------");

      let exposureBias =mExposureBiasMinArray[0];
      if (exposureBias == 0) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0300 exposureBias is 0");
      } else {
        cameraObj.sessionSetExposureBias(exposureBias - 0.1);
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0300 finish");
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0300 PASSED with ExposureBias is: " + (mExposureBiasMinArray[0] - 0.1));
        let exposureValue = cameraObj.sessionGetExposureBias();
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0300 finish");
        if (exposureValue != (exposureBias - 0.1)) {
          console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0300 PASSED with ExposureValue is: " + exposureValue);
        } else {
          console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0300 FAILED with ExposureValue is: " + exposureValue);
          expect().assertFail();
        }
      }
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0300 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0400
     * @tc.name      : Check capture session set exposure bias with promise(invalid value, max + 1)
     * @tc.desc      : Check capture session set exposure bias with promise(invalid value, max + 1)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0400', 2, async function (done) {
      console.info("--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0400--------------");

      let exposureBias = mExposureBiasMaxArray[0];
      if (exposureBias == 0) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0400 exposureBias is 0");
      } else {
        cameraObj.sessionSetExposureBias(exposureBias + 1);
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0400 finish");
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0400 PASSED with ExposureBias is: " + (mExposureBiasMaxArray[0] + 1));

        let exposureValue = cameraObj.sessionGetExposureBias();
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0400 finish");
        if (exposureValue != (exposureBias + 1)) {
          console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0400 PASSED with ExposureValue is: " + exposureValue);
        } else {
          console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0400 FAILED with ExposureValue is: " + exposureValue);
          expect().assertFail();
        }
      }

      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0400 ends here");
      done();
    })

    /**
     * @tc.number    : SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0500
     * @tc.name      : Check capture session set exposure bias with promise(invalid value, max + 0.1)
     * @tc.desc      : Check capture session set exposure bias with promise(invalid value, max + 0.1)
     * @tc.size      : MEDIUM
     * @tc.type      : Function
     * @tc.level     : Level 2
     */
    it('SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0500', 2, async function (done) {
      console.info("--------------SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0500--------------");
      let exposureBias = mExposureBiasMaxArray[0];
      if (exposureBias == 0) {
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0500 exposureBias is 0");
      } else {
        cameraObj.sessionSetExposureBias(exposureBias + 0.1);
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0500 finish");
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0500 PASSED with ExposureBias is: " + (mExposureBiasMaxArray[0] + 0.1));

        let exposureValue = cameraObj.sessionGetExposureBias();
        console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0500 finish");
        if (exposureValue != (exposureBias + 0.1)) {
          console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0500 PASSED with ExposureValue is: " + exposureValue);
        } else {
          console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0500 FAILED with ExposureValue is: " + exposureValue);
          expect().assertFail();
        }
      }
      console.info(TAG + "Entering SUB_MULTIMEDIA_CAMERA_NDK_SESSION_SET_GET_EXPOSURE_BIAS_PROMISE_0500 ends here");
      done();
    })
  })
}