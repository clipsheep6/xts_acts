/*
 * Copyright (C) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import userfile_manager from '@ohos.filemanagement.userfile_manager';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from 'deccjsunit/index';

import {
    sleep,
    IMAGE_TYPE,
    VIDEO_TYPE,
    AUDIO_TYPE,
    FILEKEY,
    allFetchOp,
    albumFetchOps,
    albumTwoTypesFetchOps,
    albumThreeTypesFetchOps,
    checkPresetsAssets,
    checkAlbumsCount,
    getPermission,
} from '../../../../../../common';

export default function albumGetFileAssetsCallbackTest(abilityContext) {
    describe('albumGetFileAssetsCallbackTest', function () {
        const userfile_mgr = userfile_manager.getUserFileMgr(abilityContext);
        beforeAll(async function () {
            console.info('beforeAll case');
            await getPermission();
            await checkPresetsAssets(userfile_mgr, 'ActsUserFileMgrAlbum');
        });
        beforeEach(function () {
            console.info('beforeEach case');
        });
        afterEach(async function () {
            console.info('afterEach case');
            await sleep()
        });
        afterAll(function () {
            console.info('afterAll case');
        });

        const abnormalFetchOp = {
            selections: 'date_added < 0',
            selectionArgs: [],
            order: 'date_added DESC LIMIT 0,1',
        }

        const checkAlbumAssetsCount = async function (done, testNum, media_type, fetchOp, expectAssetsCount, expectAlbumCount = 1) {
            try {
                const albumList = await userfile_mgr.getAlbums(media_type, fetchOp);
                // check album length
                const albumCountPass = await checkAlbumsCount(done, testNum, albumList, expectAlbumCount);
                if (!albumCountPass) return;
                // one asset type
                for (const album of albumList) {
                    album.getFileAssets(media_type, allFetchOp({ order: `date_added DESC LIMIT 0,${expectAssetsCount}` }), (error, fetchFileResult) => {
                        if (error != undefined) {
                            console.info(`${testNum} fetchFileResult error: ${error}`);
                            expect(false).assertTrue();
                            done();
                            return;
                        }
                        console.info(`${testNum}, getCount: ${fetchFileResult.getCount()} 
                            expectAssetsCount: ${expectAssetsCount}`);
                        expect(fetchFileResult.getCount()).assertEqual(expectAssetsCount);
                    });
                    await sleep(500);
                }
                done();
            } catch (error) {
                console.info(`${testNum}, error: ${error}`);
                expect(false).assertTrue();
                done();
            }
        }

        /**
         * @tc.number    : SUB_USERFILE_MGR_ALBUM_GET_ASSETS_CALLBACK_001_01
         * @tc.name      : getFileAssets
         * @tc.desc      : Image type album get 3 resources
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
         */
        it('SUB_USERFILE_MGR_ALBUM_GET_ASSETS_CALLBACK_001_01', 0, async function (done) {
            const testNum = 'SUB_USERFILE_MGR_ALBUM_GET_ASSETS_CALLBACK_001_01';
            let media_type = [IMAGE_TYPE];
            let currentFetchOp = albumFetchOps(testNum, 'Pictures/', 'Static', IMAGE_TYPE);
            let assetsCount = 3;
            await checkAlbumAssetsCount(done, testNum, media_type, currentFetchOp, assetsCount);
        });
    });
}
