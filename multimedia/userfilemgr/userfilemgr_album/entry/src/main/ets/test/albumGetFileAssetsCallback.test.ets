/*
 * Copyright (C) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import userFileManager from '@ohos.filemanagement.userFileManager';
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from 'deccjsunit/index';

import {
    sleep,
    fetchAllOps,
    albumFetchOneArgs,
    checkPresetsAssets,
    checkAssetsCount,
} from '../../../../../../common';

export default function albumGetFileAssetsCallback(abilityContext) {
    describe('albumGetFileAssetsCallback', function () {
        const userfilemgr = userFileManager.getUserFileMgr(abilityContext);
        beforeAll(async function () {
            console.info('beforeAll case');
            await checkPresetsAssets(userfilemgr, 'ActsUserFileMgrAlbum');
        });
        beforeEach(function () {
            console.info('beforeEach case');
        });
        afterEach(async function () {
            console.info('afterEach case');
            await sleep(10)
        });
        afterAll(function () {
            console.info('afterAll case');
        });

        const getPhotoAssetsTest = async function (done, testNum, fetchOps, expectAlbumCount = 1, expectAssetsCount = 1) {
            try {
                const fetchAlbumResult = await userfilemgr.getPhotoAlbums(fetchOps);
                const albumCountPass = await checkAssetsCount(done, testNum, fetchAlbumResult, expectAlbumCount);
                if (!albumCountPass) return;
                const album = await fetchAlbumResult.getFirstObject();
                fetchAlbumResult.close();
                album.getPhotoAssets(fetchAllOps(), (error, fetchAssetResult) => {
                    if (error != undefined) {
                        console.info(`${testNum} getPhotoAssets error: ${error}`);
                        expect(false).assertTrue();
                        done();
                        return;
                    }
                    console.info(`${testNum}, getCount: ${fetchAssetResult.getCount()} 
                        expectAssetsCount: ${expectAssetsCount}`);
                    expect(fetchAssetResult.getCount()).assertEqual(expectAssetsCount);
                    fetchAssetResult.close();
                    done();
                });
            } catch (error) {
                console.info(`${testNum}, error: ${error}`);
                expect(false).assertTrue();
                done();
            }
        }

        const getPhotoAssetsErrCodeTest = async function (done, testNum, fetchOps, expectAlbumCount = 1, expectAssetsCount = 1) {
            try {
                const fetchAlbumResult = await userfilemgr.getPhotoAlbums(fetchOps);
                const albumCountPass = await checkAssetsCount(done, testNum, fetchAlbumResult, expectAlbumCount);
                if (!albumCountPass) return;
                const album = await fetchAlbumResult.getFirstObject();
                fetchAlbumResult.close();
                let invaledOps : userFileManager.FetchOptions;
                album.getPhotoAssets(invaledOps, (error, fetchAssetResult) => {
                    if (error != undefined) {
                        console.info(`${testNum} getPhotoAssetsErrCodeTest error: ${error}`);
                        expect(false).assertTrue();
                        done();
                        return;
                    }
                    expect(false).assertTrue();
                    fetchAssetResult.close();
                    done();
                });
            } catch (error) {
                console.info(`${testNum}, error: ${error}`);
                expect(false).assertTrue();
                done();
            }
        }

        /**
         * @tc.number    : SUB_USERFILE_MGR_ALBUM_GETPHOTOASSETS_CALLBACK_01
         * @tc.name      : getPhotoAssets
         * @tc.desc      : Album.getPhotoAssets
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 0
         */
        it('SUB_USERFILE_MGR_ALBUM_GETPHOTOASSETS_CALLBACK_01', 0, async function (done) {
            const testNum = 'SUB_USERFILE_MGR_ALBUM_GETPHOTOASSETS_CALLBACK_01';
            let currentFetchOp = albumFetchOneArgs(testNum, 'display_name', 'Static')
            await getPhotoAssetsTest(done, testNum, currentFetchOp);
        });

        /**
         * @tc.number    : SUB_USERFILE_MGR_ALBUM_GETPHOTOASSETS_ERRCODE_CALLBACK_01
         * @tc.name      : getPhotoAssets
         * @tc.desc      : Album.getPhotoAssets by undefined ops
         * @tc.size      : MEDIUM
         * @tc.type      : Function
         * @tc.level     : Level 2
         */
        it('SUB_USERFILE_MGR_ALBUM_GETPHOTOASSETS_ERRCODE_CALLBACK_01', 2, async function (done) {
            const testNum = 'SUB_USERFILE_MGR_ALBUM_GETPHOTOASSETS_ERRCODE_CALLBACK_01';
            let currentFetchOp = albumFetchOneArgs(testNum, 'display_name', 'Static')
            await getPhotoAssetsErrCodeTest(done, testNum, currentFetchOp);
        });
    });
}