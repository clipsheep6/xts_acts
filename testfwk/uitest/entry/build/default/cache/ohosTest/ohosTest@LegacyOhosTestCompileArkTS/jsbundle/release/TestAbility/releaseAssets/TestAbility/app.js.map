{"version":3,"file":"app.js","sources":["/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/kit/SysTestKit.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/service.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/config/Filter.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/config/configService.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/event.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/core.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/Constant.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/config/DataDriver.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertNull.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertClose.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertContain.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertLess.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertLarger.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertFail.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertUndefined.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertFalse.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertInstanceOf.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertThrowError.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertLargerOrEqual.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertLessOrEqual.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertNaN.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertNegUnlimited.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertPosUnlimited.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/deepEquals/DeepTypeUtils.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/deepEquals/assertDeepEquals.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/isPromiseLike.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertPromiseIsPending.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertPromiseIsRejected.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertPromiseIsRejectedWith.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertPromiseIsRejectedWithError.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertPromiseIsResolved.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/assertPromiseIsResolvedWith.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/assert/ExpectExtend.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/coverage/coverageCollect.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/module/report/OhReport.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/src/main/interface.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/oh_modules/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium/index.js","/home/xianf/master_open/test/xts/acts/testfwk/uitest/entry/src/ohosTest/ets/test/uitest.test.ets","/home/xianf/master_open/test/xts/acts/testfwk/uitest/entry/src/ohosTest/ets/test/List.test.ets","/home/xianf/master_open/test/xts/acts/testfwk/uitest/entry/src/ohosTest/ets/TestAbility/app.ets"],"sourcesContent":["/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nclass SysTestKit {\r\n\r\n    static delegator = null;\r\n    static systemTime = null;\r\n\r\n    constructor() {\r\n        this.id = 'sysTestKit';\r\n        this.index = 0;\r\n    }\r\n\r\n    static actionStart(tag) {\r\n        console.info(JSON.stringify(tag));\r\n        var message = '\\n' + 'OHOS_REPORT_ACTIONSTART: ' + JSON.stringify(tag) + '\\n';\r\n        SysTestKit.print(message);\r\n        console.info(tag + ' actionStart print success');\r\n    }\r\n\r\n    static actionEnd(tag) {\r\n        console.info(JSON.stringify(tag));\r\n        var message = '\\n' + 'OHOS_REPORT_ACTIONEND: ' + JSON.stringify(tag) + '\\n';\r\n        SysTestKit.print(message);\r\n        console.info(tag + ' actionEnd print success');\r\n    }\r\n\r\n    static async existKeyword(keyword, timeout) {\r\n        let reg = new RegExp(/^[a-zA-Z0-9]{1,}$/)\r\n        if (!reg.test(keyword)) {\r\n            throw new Error('keyword must contain more than one string, and only letters and numbers are supported.')\r\n        }\r\n        timeout = timeout || 4;\r\n\r\n        let searchResult = false;\r\n        let cmd = 'hilog -x | grep -i \\'' + keyword + '\\' | wc -l';\r\n        await executePromise(cmd, timeout).then((data) => {\r\n            searchResult = data;\r\n        });\r\n        return searchResult;\r\n    }\r\n    static async print(message) {\r\n        if ('printSync' in SysTestKit.delegator) {\r\n            console.debug(`printSync called ...`);\r\n            SysTestKit.delegator.printSync(message);\r\n        } else {\r\n            await SysTestKit.delegator.print(message);\r\n        }\r\n    }\r\n\r\n    static async getRealTime() {\r\n        let currentTime = new Date().getTime();\r\n        if (SysTestKit.systemTime !== null && SysTestKit.systemTime !== undefined) {\r\n            await SysTestKit.systemTime.getRealTime().then((time) => {\r\n                console.info(`systemTime.getRealTime success data: ${JSON.stringify(time)}`);\r\n                currentTime = time;\r\n            }).catch((error) => {\r\n                console.error(`failed to systemTime.getRealTime because ${JSON.stringify(error)}`);\r\n            });\r\n        }\r\n        return currentTime;\r\n    }\r\n}\r\n\r\nfunction executePromise(cmd, timeout) {\r\n    return new Promise((resolve, reject) => {\r\n        SysTestKit.delegator.executeShellCommand(cmd, timeout,\r\n            (error, data) => {\r\n                console.info('existKeyword CallBack: err : ' + JSON.stringify(error));\r\n                console.info('existKeyword CallBack: data : ' + JSON.stringify(data));\r\n                resolve(parseInt(data.stdResult) > 3 ? true : false);\r\n            });\r\n    });\r\n}\r\n\r\nexport default SysTestKit;","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport SysTestKit from \"./module/kit/SysTestKit\";\r\n\r\nclass AssertException extends Error {\r\n    constructor(message) {\r\n        super();\r\n        this.name = \"AssertException\";\r\n        this.message = message;\r\n    }\r\n}\r\n\r\nfunction getFuncWithArgsZero(func, timeout, isStressTest) {\r\n    return new Promise(async (resolve, reject) => {\r\n        let timer = null;\r\n        if (!isStressTest) {\r\n            timer = setTimeout(() => {\r\n                reject(new Error('execute timeout ' + timeout + 'ms'));\r\n            }, timeout);\r\n        }\r\n        try {\r\n            await func();\r\n        } catch (err) {\r\n            reject(err);\r\n        }\r\n        timer !== null ? clearTimeout(timer) : null;\r\n        resolve();\r\n    });\r\n}\r\n\r\nfunction getFuncWithArgsOne(func, timeout, isStressTest) {\r\n    return new Promise(async (resolve, reject) => {\r\n        let timer = null;\r\n        if (!isStressTest) {\r\n            timer = setTimeout(() => {\r\n                reject(new Error('execute timeout ' + timeout + 'ms'));\r\n            }, timeout);;\r\n        }\r\n\r\n        function done() {\r\n            timer !== null ? clearTimeout(timer) : null;\r\n            resolve();\r\n        }\r\n\r\n        try {\r\n            await func(done);\r\n        } catch (err) {\r\n            timer !== null ? clearTimeout(timer) : null;\r\n            reject(err);\r\n        }\r\n    });\r\n}\r\n\r\nfunction getFuncWithArgsTwo(func, timeout, paramItem, isStressTest) {\r\n    return new Promise(async (resolve, reject) => {\r\n        let timer = null;\r\n        if (!isStressTest) {\r\n            timer = setTimeout(() => {\r\n                reject(new Error('execute timeout ' + timeout + 'ms'));\r\n            }, timeout);\r\n        }\r\n\r\n        function done() {\r\n            timer !== null ? clearTimeout(timer) : null;\r\n            resolve();\r\n        }\r\n\r\n        try {\r\n            await func(done, paramItem);\r\n        } catch (err) {\r\n            timer !== null ? clearTimeout(timer) : null;\r\n            reject(err);\r\n        }\r\n    });\r\n}\r\n\r\nfunction processFunc(coreContext, func) {\r\n    let argNames = ((func || '').toString()\r\n        .replace(/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg, '')\r\n        .match(/^(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m) || ['', '', ''])[2]\r\n        .split(',') // split parameters\r\n        .map(item => item.replace(/^\\s*(_?)(.+?)\\1\\s*$/, name => name.split('=')[0].trim()))\r\n        .filter(String);\r\n    let funcLen = func.length;\r\n    let processedFunc;\r\n    const config = coreContext.getDefaultService('config');\r\n    config.setSupportAsync(true);\r\n    const timeout = + (config.timeout === undefined ? 5000 : config.timeout);\r\n    const isStressTest = (coreContext.getServices('dataDriver') !== undefined || config.getStress() > 1);\r\n    switch (funcLen) {\r\n        case 0: {\r\n            processedFunc = function () {\r\n                return getFuncWithArgsZero(func, timeout, isStressTest);\r\n            };\r\n            break;\r\n        }\r\n        case 1: {\r\n            if (argNames[0] === 'data') {\r\n                processedFunc = function (paramItem) {\r\n                    func(paramItem);\r\n                };\r\n            } else {\r\n                processedFunc = function () {\r\n                    return getFuncWithArgsOne(func, timeout, isStressTest);\r\n                };\r\n            }\r\n            break;\r\n        }\r\n        default: {\r\n            processedFunc = function (paramItem) {\r\n                return getFuncWithArgsTwo(func, timeout, paramItem, isStressTest);\r\n            };\r\n            break;\r\n        }\r\n    }\r\n    return processedFunc;\r\n}\r\n\r\nfunction secureRandomNumber() {\r\n    return crypto.randomBytes(8).readUInt32LE() / 0xffffffff;\r\n}\r\n\r\nclass SuiteService {\r\n    constructor(attr) {\r\n        this.id = attr.id;\r\n        this.rootSuite = new SuiteService.Suite({});\r\n        this.currentRunningSuite = this.rootSuite;\r\n        this.suitesStack = [this.rootSuite];\r\n    }\r\n\r\n    describe(desc, func) {\r\n        const configService = this.coreContext.getDefaultService('config');\r\n        if (configService.filterSuite(desc)) {\r\n            console.info('filter suite :' + desc);\r\n            return;\r\n        }\r\n        const suite = new SuiteService.Suite({description: desc});\r\n        if (typeof this.coreContext.getServices('dataDriver') !== 'undefined' && configService['dryRun'] !== 'true') {\r\n            let suiteStress = this.coreContext.getServices('dataDriver').dataDriver.getSuiteStress(desc);\r\n            for (let i = 1; i < suiteStress; i++) {\r\n                this.currentRunningSuite.childSuites.push(suite);\r\n            }\r\n        }\r\n        this.currentRunningSuite.childSuites.push(suite);\r\n        this.currentRunningSuite = suite;\r\n        this.suitesStack.push(suite);\r\n        func.call();\r\n        let childSuite = this.suitesStack.pop();\r\n        if (this.suitesStack.length === 0) {\r\n            this.currentRunningSuite = childSuite;\r\n            this.suitesStack.push(childSuite);\r\n        }\r\n        if (this.suitesStack.length > 1) {\r\n            this.currentRunningSuite = this.suitesStack.pop();\r\n        } else {\r\n            this.currentRunningSuite = this.suitesStack.pop();\r\n            this.suitesStack.push(this.currentRunningSuite);\r\n        }\r\n    }\r\n\r\n    beforeAll(func) {\r\n        this.currentRunningSuite.beforeAll.push(processFunc(this.coreContext, func));\r\n    }\r\n\r\n    beforeEach(func) {\r\n        this.currentRunningSuite.beforeEach.push(processFunc(this.coreContext, func));\r\n    }\r\n\r\n    afterAll(func) {\r\n        this.currentRunningSuite.afterAll.push(processFunc(this.coreContext, func));\r\n    }\r\n\r\n    afterEach(func) {\r\n        this.currentRunningSuite.afterEach.push(processFunc(this.coreContext, func));\r\n    }\r\n\r\n    getCurrentRunningSuite() {\r\n        return this.currentRunningSuite;\r\n    }\r\n\r\n    setCurrentRunningSuite(suite) {\r\n        this.currentRunningSuite = suite;\r\n    }\r\n\r\n    traversalResults(suite, obj, breakOnError) {\r\n        if (suite.childSuites.length === 0 && suite.specs.length === 0) {\r\n            return obj;\r\n        }\r\n        if (suite.specs.length > 0) {\r\n            for (const itItem of suite.specs) {\r\n                obj.total++;\r\n                if (breakOnError && (obj.error > 0 || obj.failure > 0)) { // breakOnError模式\r\n                    continue;\r\n                }\r\n                if (itItem.error) {\r\n                    obj.error++;\r\n                } else if (itItem.result.failExpects.length > 0) {\r\n                    obj.failure++;\r\n                } else if (itItem.result.pass === true) {\r\n                    obj.pass++;\r\n                }\r\n            }\r\n        }\r\n\r\n        obj.duration += suite.duration;\r\n\r\n        if (suite.childSuites.length > 0) {\r\n            for (const suiteItem of suite.childSuites) {\r\n                this.traversalResults(suiteItem, obj, breakOnError);\r\n            }\r\n        }\r\n    }\r\n\r\n    getSummary() {\r\n        let suiteService = this.coreContext.getDefaultService('suite');\r\n        let rootSuite = suiteService.rootSuite;\r\n        const specService = this.coreContext.getDefaultService('spec');\r\n        const configService = this.coreContext.getDefaultService('config');\r\n        let breakOnError = configService.isBreakOnError();\r\n        let isError = specService.getStatus();\r\n        let isBreaKOnError = breakOnError && isError;\r\n        let obj = {total: 0, failure: 0, error: 0, pass: 0, ignore: 0, duration: 0};\r\n        for (const suiteItem of rootSuite.childSuites) {\r\n            this.traversalResults(suiteItem, obj, isBreaKOnError);\r\n        }\r\n        obj.ignore = obj.total - obj.pass - obj.failure - obj.error;\r\n        return obj;\r\n    }\r\n\r\n    init(coreContext) {\r\n        this.coreContext = coreContext;\r\n    }\r\n\r\n    traversalSuites(suite, obj, configService) {\r\n        if (suite.childSuites.length === 0 && suite.specs.length === 0) {\r\n            return [];\r\n        }\r\n        if (suite.specs.length > 0) {\r\n            let itArray = [];\r\n            for (const itItem of suite['specs']) {\r\n                if (!configService.filterDesc(suite.description, itItem.description, itItem.fi, null)) {\r\n                    itArray.push({'itName': itItem.description});\r\n                }\r\n            }\r\n            obj[suite.description] = itArray;\r\n        }\r\n\r\n        if (suite.childSuites.length > 0) {\r\n            let suiteArray = [];\r\n            for (const suiteItem of suite.childSuites) {\r\n                let suiteObj = {};\r\n                this.traversalSuites(suiteItem, suiteObj, configService);\r\n                if (!configService.filterSuite(suiteItem.description)) {\r\n                    suiteArray.push(suiteObj);\r\n                }\r\n            }\r\n            obj.suites = suiteArray;\r\n        }\r\n    }\r\n\r\n    async dryRun(abilityDelegator) {\r\n        const configService = this.coreContext.getDefaultService('config');\r\n        let testSuitesObj = {};\r\n        let suitesArray = [];\r\n        for (const suiteItem of this.rootSuite.childSuites) {\r\n            let obj = {};\r\n            this.traversalSuites(suiteItem, obj, configService);\r\n            if (!configService.filterSuite(suiteItem.description)) {\r\n                suitesArray.push(obj);\r\n            }\r\n        }\r\n        testSuitesObj['suites'] = suitesArray;\r\n\r\n        let strJson = JSON.stringify(testSuitesObj);\r\n        let strLen = strJson.length;\r\n        let maxLen = 500;\r\n        let maxCount = Math.floor(strLen / maxLen);\r\n\r\n        for (let count = 0; count <= maxCount; count++) {\r\n            await SysTestKit.print(strJson.substring(count * maxLen, (count + 1) * maxLen));\r\n        }\r\n        console.info('dryRun print success');\r\n        abilityDelegator.finishTest('dry run finished!!!', 0, () => { });\r\n    }\r\n\r\n    execute() {\r\n        const configService = this.coreContext.getDefaultService('config');\r\n        if (configService.filterValid.length !== 0) {\r\n            this.coreContext.fireEvents('task', 'incorrectFormat');\r\n            return;\r\n        }\r\n\r\n        if (configService.isRandom() && this.rootSuite.childSuites.length > 0) {\r\n            this.rootSuite.childSuites.sort(function () {\r\n                return Math.random().toFixed(1) > 0.5 ? -1 : 1;\r\n            });\r\n            this.currentRunningSuite = this.rootSuite.childSuites[0];\r\n        }\r\n\r\n        if (configService.isSupportAsync()) {\r\n            let asyncExecute = async () => {\r\n                await this.coreContext.fireEvents('task', 'taskStart');\r\n                await this.rootSuite.asyncRun(this.coreContext);\r\n            };\r\n            asyncExecute().then(async () => {\r\n                await this.coreContext.fireEvents('task', 'taskDone');\r\n            });\r\n        } else {\r\n            this.coreContext.fireEvents('task', 'taskStart');\r\n            this.rootSuite.run(this.coreContext);\r\n            this.coreContext.fireEvents('task', 'taskDone');\r\n        }\r\n    }\r\n\r\n    apis() {\r\n        const _this = this;\r\n        return {\r\n            describe: function (desc, func) {\r\n                return _this.describe(desc, func);\r\n            },\r\n            beforeAll: function (func) {\r\n                return _this.beforeAll(func);\r\n            },\r\n            beforeEach: function (func) {\r\n                return _this.beforeEach(func);\r\n            },\r\n            afterAll: function (func) {\r\n                return _this.afterAll(func);\r\n            },\r\n            afterEach: function (func) {\r\n                return _this.afterEach(func);\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nSuiteService.Suite = class {\r\n    constructor(attrs) {\r\n        this.description = attrs.description || '';\r\n        this.childSuites = [];\r\n        this.specs = [];\r\n        this.beforeAll = [];\r\n        this.afterAll = [];\r\n        this.beforeEach = [];\r\n        this.afterEach = [];\r\n        this.duration = 0;\r\n    }\r\n\r\n    pushSpec(spec) {\r\n        this.specs.push(spec);\r\n    }\r\n\r\n    removeSpec(desc) {\r\n        this.specs = this.specs.filter((item, index) => {\r\n            return item.description !== desc;\r\n        });\r\n    }\r\n\r\n    getSpecsNum() {\r\n        return this.specs.length;\r\n    }\r\n\r\n    isRun(coreContext) {\r\n        const configService = coreContext.getDefaultService('config');\r\n        const suiteService = coreContext.getDefaultService('suite');\r\n        const specService = coreContext.getDefaultService('spec');\r\n        let breakOnError = configService.isBreakOnError();\r\n        let isError = specService.getStatus();\r\n        return breakOnError && isError;\r\n    }\r\n\r\n    run(coreContext) {\r\n        const suiteService = coreContext.getDefaultService('suite');\r\n        suiteService.setCurrentRunningSuite(this);\r\n        if (this.description !== '') {\r\n            coreContext.fireEvents('suite', 'suiteStart', this);\r\n        }\r\n        this.runHookFunc('beforeAll');\r\n        if (this.specs.length > 0) {\r\n            const configService = coreContext.getDefaultService('config');\r\n            if (configService.isRandom()) {\r\n                this.specs.sort(function () {\r\n                    return Math.random().toFixed(1) > 0.5 ? -1 : 1;\r\n                });\r\n            }\r\n            for (let spec in this.specs) {\r\n                let isBreakOnError = this.isRun(coreContext);\r\n                if (isBreakOnError) {\r\n                    break;\r\n                }\r\n                this.runHookFunc('beforeEach');\r\n                spec.run(coreContext);\r\n                this.runHookFunc('afterEach');\r\n            }\r\n        }\r\n        if (this.childSuites.length > 0) {\r\n            for (let suite in this.childSuites) {\r\n                let isBreakOnError = this.isRun(coreContext);\r\n                if (isBreakOnError) {\r\n                    break;\r\n                }\r\n                suite.run(coreContext);\r\n                suiteService.setCurrentRunningSuite(suite);\r\n            }\r\n        }\r\n        this.runHookFunc('afterAll');\r\n        if (this.description !== '') {\r\n            coreContext.fireEvents('suite', 'suiteDone');\r\n        }\r\n    }\r\n\r\n    async asyncRun(coreContext) {\r\n        const suiteService = coreContext.getDefaultService('suite');\r\n        suiteService.setCurrentRunningSuite(this);\r\n        suiteService.suitesStack.push(this);\r\n        if (this.description !== '') {\r\n            await coreContext.fireEvents('suite', 'suiteStart', this);\r\n        }\r\n        await this.runAsyncHookFunc('beforeAll');\r\n        if (this.specs.length > 0) {\r\n            const configService = coreContext.getDefaultService('config');\r\n            if (configService.isRandom()) {\r\n                this.specs.sort(function () {\r\n                    return Math.random().toFixed(1) > 0.5 ? -1 : 1;\r\n                });\r\n            }\r\n            for (let i = 0; i < this.specs.length; i++) {\r\n                // 遇错即停模式,发现用例有问题，直接返回，不在执行后面的it\r\n                let isBreakOnError = this.isRun(coreContext);\r\n                if (isBreakOnError) {\r\n                    console.log(\"break description :\" + this.description);\r\n                    break;\r\n                }\r\n                await this.runAsyncHookFunc('beforeEach');\r\n                await this.specs[i].asyncRun(coreContext);\r\n                await this.runAsyncHookFunc('afterEach');\r\n            }\r\n        }\r\n\r\n        if (this.childSuites.length > 0) {\r\n            for (let i = 0; i < this.childSuites.length; i++) {\r\n                // 遇错即停模式, 发现用例有问题，直接返回，不在执行后面的description\r\n                let isBreakOnError = this.isRun(coreContext);\r\n                if (isBreakOnError) {\r\n                    console.log(\"break description :\" + this.description);\r\n                    break;\r\n                }\r\n                await this.childSuites[i].asyncRun(coreContext);\r\n            }\r\n        }\r\n\r\n        await this.runAsyncHookFunc('afterAll');\r\n        if (this.description !== '') {\r\n            await coreContext.fireEvents('suite', 'suiteDone');\r\n            let childSuite = suiteService.suitesStack.pop();\r\n            if (suiteService.suitesStack.length === 0) {\r\n                suiteService.suitesStack.push(childSuite);\r\n            }\r\n            if (suiteService.suitesStack.length > 1) {\r\n                suiteService.setCurrentRunningSuite(suiteService.suitesStack.pop());\r\n            } else {\r\n                let currentRunningSuite = suiteService.suitesStack.pop();\r\n                suiteService.setCurrentRunningSuite(currentRunningSuite);\r\n                suiteService.suitesStack.push(currentRunningSuite);\r\n            }\r\n        }\r\n    }\r\n\r\n    runHookFunc(hookName) {\r\n        if (this[hookName] && this[hookName].length > 0) {\r\n            this[hookName].forEach(func => {\r\n                try {\r\n                    func();\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    runAsyncHookFunc(hookName) {\r\n        if (this[hookName] && this[hookName].length > 0) {\r\n            return new Promise(async resolve => {\r\n                for (let i = 0; i < this[hookName].length; i++) {\r\n                    try {\r\n                        await this[hookName][i]();\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n                resolve();\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nclass SpecService {\r\n    constructor(attr) {\r\n        this.id = attr.id;\r\n        this.totalTest = 0;\r\n        this.hasError = false;\r\n    }\r\n\r\n    init(coreContext) {\r\n        this.coreContext = coreContext;\r\n    }\r\n\r\n    setCurrentRunningSpec(spec) {\r\n        this.currentRunningSpec = spec;\r\n    }\r\n\r\n    setStatus(obj) {\r\n        this.hasError = obj;\r\n    }\r\n\r\n    getStatus() {\r\n        return this.hasError;\r\n    }\r\n\r\n    getTestTotal() {\r\n        return this.totalTest;\r\n    }\r\n\r\n    getCurrentRunningSpec() {\r\n        return this.currentRunningSpec;\r\n    }\r\n\r\n    it(desc, filter, func) {\r\n        const configService = this.coreContext.getDefaultService('config');\r\n        const currentSuiteName = this.coreContext.getDefaultService('suite').getCurrentRunningSuite().description;\r\n        if (configService.filterDesc(currentSuiteName, desc, filter, this.coreContext)) {\r\n            console.info('filter it :' + desc);\r\n        } else {\r\n            let processedFunc = processFunc(this.coreContext, func);\r\n            const spec = new SpecService.Spec({description: desc, fi: filter, fn: processedFunc});\r\n            const suiteService = this.coreContext.getDefaultService('suite');\r\n            if (typeof this.coreContext.getServices('dataDriver') !== 'undefined' && configService['dryRun'] !== 'true') {\r\n                let specStress = this.coreContext.getServices('dataDriver').dataDriver.getSpecStress(desc);\r\n                for (let i = 1; i < specStress; i++) {\r\n                    this.totalTest++;\r\n                    suiteService.getCurrentRunningSuite().pushSpec(spec);\r\n                }\r\n            }\r\n\r\n            // dryRun 状态下不统计压力测试重复数据\r\n            if (configService['dryRun'] !== 'true') {\r\n                let stress = configService.getStress(); // 命令配置压力测试\r\n                console.info('stress length :' + stress);\r\n                for (let i = 1; i < stress; i++) {\r\n                    this.totalTest++;\r\n                    suiteService.getCurrentRunningSuite().pushSpec(spec);\r\n                }\r\n            }\r\n            this.totalTest++;\r\n            suiteService.getCurrentRunningSuite().pushSpec(spec);\r\n        }\r\n    }\r\n\r\n    apis() {\r\n        const _this = this;\r\n        return {\r\n            it: function (desc, filter, func) {\r\n                return _this.it(desc, filter, func);\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nSpecService.Spec = class {\r\n    constructor(attrs) {\r\n        this.description = attrs.description || '';\r\n        this.fi = attrs.fi;\r\n        this.fn = attrs.fn || function () {\r\n        };\r\n        this.result = {\r\n            failExpects: [],\r\n            passExpects: []\r\n        };\r\n        this.error = undefined;\r\n        this.duration = 0;\r\n        this.startTime = 0;\r\n        this.isExecuted = false; // 当前用例是否执行\r\n    }\r\n\r\n    setResult(coreContext) {\r\n        const specService = coreContext.getDefaultService('spec');\r\n        if (this.result.failExpects.length > 0) {\r\n            this.result.pass = false;\r\n            specService.setStatus(true);\r\n        } else {\r\n            this.result.pass = true;\r\n        }\r\n        console.info('testcase ' + this.description + ' result:' + this.result.pass);\r\n    }\r\n\r\n    run(coreContext) {\r\n        const specService = coreContext.getDefaultService('spec');\r\n        specService.setCurrentRunningSpec(this);\r\n        coreContext.fireEvents('spec', 'specStart', this);\r\n        this.isExecuted = true;\r\n        try {\r\n            let dataDriver = coreContext.getServices('dataDriver');\r\n            if (typeof dataDriver === 'undefined') {\r\n                this.fn();\r\n            } else {\r\n                let suiteParams = dataDriver.dataDriver.getSuiteParams();\r\n                let specParams = dataDriver.dataDriver.getSpecParams();\r\n                console.info('[suite params] ' + JSON.stringify(suiteParams));\r\n                console.info('[spec params] ' + JSON.stringify(specParams));\r\n                if (this.fn.length === 0) {\r\n                    this.fn();\r\n                } else if (specParams.length === 0) {\r\n                    this.fn(suiteParams);\r\n                } else {\r\n                    specParams.forEach(paramItem => this.fn(Object.assign({}, paramItem, suiteParams)));\r\n                }\r\n            }\r\n            this.setResult(coreContext);\r\n        } catch (e) {\r\n            this.error = e;\r\n            specService.setStatus(true);\r\n        }\r\n        coreContext.fireEvents('spec', 'specDone', this);\r\n    }\r\n\r\n    async asyncRun(coreContext) {\r\n        const specService = coreContext.getDefaultService('spec');\r\n        specService.setCurrentRunningSpec(this);\r\n\r\n        await coreContext.fireEvents('spec', 'specStart', this);\r\n        try {\r\n            let dataDriver = coreContext.getServices('dataDriver');\r\n            if (typeof dataDriver === 'undefined') {\r\n                await this.fn();\r\n                this.setResult(coreContext);\r\n            } else {\r\n                let suiteParams = dataDriver.dataDriver.getSuiteParams();\r\n                let specParams = dataDriver.dataDriver.getSpecParams();\r\n                console.info('[suite params] ' + JSON.stringify(suiteParams));\r\n                console.info('[spec params] ' + JSON.stringify(specParams));\r\n                if (this.fn.length === 0) {\r\n                    await this.fn();\r\n                    this.setResult(coreContext);\r\n                } else if (specParams.length === 0) {\r\n                    await this.fn(suiteParams);\r\n                    this.setResult(coreContext);\r\n                } else {\r\n                    for (const paramItem of specParams) {\r\n                        await this.fn(Object.assign({}, paramItem, suiteParams));\r\n                        this.setResult(coreContext);\r\n                    }\r\n                }\r\n            }\r\n        } catch (e) {\r\n            if (e instanceof AssertException) {\r\n                this.fail = e;\r\n                specService.setStatus(true);\r\n            } else {\r\n                this.error = e;\r\n                specService.setStatus(true);\r\n            }\r\n        }\r\n        this.isExecuted = true;\r\n        await coreContext.fireEvents('spec', 'specDone', this);\r\n    }\r\n\r\n    filterCheck(coreContext) {\r\n        const specService = coreContext.getDefaultService('spec');\r\n        specService.setCurrentRunningSpec(this);\r\n        return true;\r\n    }\r\n\r\n    addExpectationResult(expectResult) {\r\n        if (this.result.failExpects.length === 0) {\r\n            this.result.failExpects.push(expectResult);\r\n        }\r\n        throw new AssertException(expectResult.message);\r\n    }\r\n};\r\n\r\nclass ExpectService {\r\n    constructor(attr) {\r\n        this.id = attr.id;\r\n        this.matchers = {};\r\n    }\r\n\r\n    expect(actualValue) {\r\n        return this.wrapMatchers(actualValue);\r\n    }\r\n\r\n    init(coreContext) {\r\n        this.coreContext = coreContext;\r\n        this.addMatchers(this.basicMatchers());\r\n    }\r\n\r\n    addMatchers(matchers) {\r\n        for (const matcherName in matchers) {\r\n            if (Object.prototype.hasOwnProperty.call(matchers, matcherName)) {\r\n                this.matchers[matcherName] = matchers[matcherName];\r\n            }\r\n        }\r\n    }\r\n\r\n    basicMatchers() {\r\n        return {\r\n            assertTrue: function (actualValue) {\r\n                return {\r\n                    pass: (actualValue) === true,\r\n                    message: 'expect true, actualValue is ' + actualValue\r\n                };\r\n            },\r\n            assertEqual: function (actualValue, args) {\r\n                return {\r\n                    pass: (actualValue) === args[0],\r\n                    expectValue: args[0],\r\n                    message: 'expect ' + actualValue + ' equals ' + args[0]\r\n                };\r\n            },\r\n            assertThrow: function (actual, args) {\r\n                const result = {\r\n                    pass: false\r\n                };\r\n                if (typeof actual !== 'function') {\r\n                    result.message = 'toThrow\\'s Actual should be a Function';\r\n                } else {\r\n                    let hasThrow = false;\r\n                    let throwError;\r\n                    try {\r\n                        actual();\r\n                    } catch (e) {\r\n                        hasThrow = true;\r\n                        throwError = e;\r\n                    }\r\n                    if (!hasThrow) {\r\n                        result.message = 'function did not throw an exception';\r\n                    } else if (throwError && throwError.message === args[0]) {\r\n                        result.pass = true;\r\n                    } else {\r\n                        result.message = `expect to throw ${args[0]} , actual throw ${throwError.message}`;\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n\r\n    wrapMatchers(actualValue) {\r\n        const _this = this;\r\n        const wrappedMatchers = {\r\n            // 翻转标识\r\n            isNot: false,\r\n\r\n            // 翻转方法\r\n            not: function () {\r\n                this.isNot = true;\r\n                return this;\r\n            }\r\n        };\r\n        const specService = _this.coreContext.getDefaultService('spec');\r\n        const currentRunningSpec = specService.getCurrentRunningSpec();\r\n        for (const matcherName in this.matchers) {\r\n            let result = Object.prototype.hasOwnProperty.call(this.matchers, matcherName);\r\n            if (!result) {\r\n                continue;\r\n            }\r\n            if (matcherName.search('assertPromise') == 0) {\r\n                wrappedMatchers[matcherName] = async function () {\r\n                    await _this.matchers[matcherName](actualValue, arguments).then(function (result) {\r\n                        if (wrappedMatchers.isNot) {\r\n                            result.pass = !result.pass;\r\n                        }\r\n                        result.actualValue = actualValue;\r\n                        result.checkFunc = matcherName;\r\n                        if (!result.pass) {\r\n                            currentRunningSpec.addExpectationResult(result);\r\n                        }\r\n                    });\r\n                };\r\n            } else {\r\n                wrappedMatchers[matcherName] = function () {\r\n                    const result = _this.matchers[matcherName](actualValue, arguments);\r\n                    if (wrappedMatchers.isNot) {\r\n                        result.pass = !result.pass;\r\n                    }\r\n                    result.actualValue = actualValue;\r\n                    result.checkFunc = matcherName;\r\n                    if (!result.pass) {\r\n                        currentRunningSpec.addExpectationResult(result);\r\n                    }\r\n                };\r\n            }\r\n        }\r\n        return wrappedMatchers;\r\n    }\r\n\r\n    apis() {\r\n        const _this = this;\r\n        return {\r\n            expect: function (actualValue) {\r\n                return _this.expect(actualValue);\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nclass ReportService {\r\n    constructor(attr) {\r\n        this.id = attr.id;\r\n    }\r\n\r\n    init(coreContext) {\r\n        this.coreContext = coreContext;\r\n        this.specService = this.coreContext.getDefaultService('spec');\r\n        this.suiteService = this.coreContext.getDefaultService('suite');\r\n        this.duration = 0;\r\n    }\r\n\r\n    taskStart() {\r\n        console.info('[start] start run suites');\r\n    }\r\n\r\n    async suiteStart() {\r\n        console.info('[suite start]' + this.suiteService.getCurrentRunningSuite().description);\r\n    }\r\n\r\n    async specStart() {\r\n        console.info('start running case \\'' + this.specService.currentRunningSpec.description + '\\'');\r\n        this.index = this.index + 1;\r\n        let spec = this.specService.currentRunningSpec;\r\n        spec.startTime = await SysTestKit.getRealTime();\r\n    }\r\n\r\n    async specDone() {\r\n        let msg = '';\r\n        let spec = this.specService.currentRunningSpec;\r\n        let suite = this.suiteService.currentRunningSuite;\r\n        spec.duration = await SysTestKit.getRealTime() - spec.startTime;\r\n        suite.duration += spec.duration;\r\n        if (spec.error) {\r\n            this.formatPrint('error', spec.description + ' ; consuming ' + spec.duration + 'ms');\r\n            this.formatPrint('errorDetail', spec.error);\r\n        } else if (spec.result) {\r\n            if (spec.result.failExpects.length > 0) {\r\n                this.formatPrint('fail', spec.description + ' ; consuming ' + spec.duration + 'ms');\r\n                spec.result.failExpects.forEach(failExpect => {\r\n                    msg = failExpect.message || ('expect ' + failExpect.actualValue + ' '\r\n                        + failExpect.checkFunc + ' ' + (failExpect.expectValue));\r\n                    this.formatPrint('failDetail', msg);\r\n                });\r\n            } else {\r\n                this.formatPrint('pass', spec.description + ' ; consuming ' + spec.duration + 'ms');\r\n            }\r\n        }\r\n        this.formatPrint(this.specService.currentRunningSpec.error, msg);\r\n    }\r\n\r\n    suiteDone() {\r\n        let suite = this.suiteService.currentRunningSuite;\r\n        console.info(`[suite end] ${suite.description} consuming ${suite.duration} ms`);\r\n    }\r\n\r\n    taskDone() {\r\n        let msg = '';\r\n        let summary = this.suiteService.getSummary();\r\n        msg = 'total cases:' + summary.total + ';failure ' + summary.failure + ',' + 'error ' + summary.error;\r\n        msg += ',pass ' + summary.pass + '; consuming ' + summary.duration + 'ms';\r\n        console.info(msg);\r\n        console.info('[end] run suites end');\r\n    }\r\n\r\n    incorrectFormat() {\r\n        if (this.coreContext.getDefaultService('config').filterValid.length !== 0) {\r\n            this.coreContext.getDefaultService('config').filterValid.forEach(function (item) {\r\n                console.info('this param ' + item + ' is invalid');\r\n            });\r\n        }\r\n    }\r\n\r\n    formatPrint(type, msg) {\r\n        switch (type) {\r\n            case 'pass':\r\n                console.info('[pass]' + msg);\r\n                break;\r\n            case 'fail':\r\n                console.info('[fail]' + msg);\r\n                break;\r\n            case 'failDetail':\r\n                console.info('[failDetail]' + msg);\r\n                break;\r\n            case 'error':\r\n                console.info('[error]' + msg);\r\n                break;\r\n            case 'errorDetail':\r\n                console.info('[errorDetail]' + msg);\r\n                break;\r\n        }\r\n    }\r\n\r\n    sleep(numberMillis) {\r\n        var now = new Date();\r\n        var exitTime = now.getTime() + numberMillis;\r\n        while (true) {\r\n            now = new Date();\r\n            if (now.getTime() > exitTime) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    SuiteService,\r\n    SpecService,\r\n    ExpectService,\r\n    ReportService\r\n};\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nclass ClassFilter {\r\n    constructor(suiteName, itName, params) {\r\n        this.suiteName = suiteName;\r\n        this.itName = itName;\r\n        this.params = params;\r\n    }\r\n\r\n    filterSuite() {\r\n        return !this.params.split(',').map(item => item.split('#')[0]).map(item => item == this.suiteName).reduce((pre, cur) => pre || cur, false);\r\n    }\r\n\r\n    filterIt() {\r\n        let classArray = this.params.split(',') || [];\r\n        let suiteFilterResult = classArray.filter(item => !item.includes('#')).map(item => item == this.suiteName).reduce((pre, cur) => pre || cur, false);\r\n        let itFilterResult = classArray.filter(item => item.includes('#')).map(item => item == (this.suiteName + '#' + this.itName)).reduce((pre, cur) => pre || cur, false);\r\n        return !(suiteFilterResult || itFilterResult);\r\n    }\r\n}\r\n\r\nclass NotClassFilter {\r\n    constructor(suiteName, itName, params) {\r\n        this.suiteName = suiteName;\r\n        this.itName = itName;\r\n        this.params = params;\r\n    }\r\n\r\n    filterSuite() {\r\n        return this.params.split(',').map(item => item == this.suiteName).reduce((pre, cur) => pre || cur, false);\r\n    }\r\n\r\n    filterIt() {\r\n        return this.params.split(',').some(item => item == (this.suiteName + '#' + this.itName));\r\n    }\r\n}\r\n\r\nclass SuiteAndItNameFilter {\r\n    constructor(suiteName, itName, params) {\r\n        this.suiteName = suiteName;\r\n        this.itName = itName;\r\n        this.params = params;\r\n    }\r\n\r\n    filterSuite() {\r\n        return !this.params.split(',').map(item => item == this.suiteName).reduce((pre, cur) => pre || cur, false);\r\n    }\r\n\r\n    filterIt() {\r\n        return !this.params.split(',').map(item => item == this.itName).reduce((pre, cur) => pre || cur, false);\r\n    }\r\n}\r\n\r\n\r\nclass TestTypesFilter {\r\n    constructor(suiteName, itName, fi, params) {\r\n        this.suiteName = suiteName;\r\n        this.itName = itName;\r\n        this.params = params;\r\n        this.fi = fi;\r\n    }\r\n\r\n    filterIt() {\r\n        return !((this.params === (this.fi & this.params)) || this.fi === 0);\r\n    }\r\n}\r\n\r\nexport {ClassFilter, NotClassFilter, SuiteAndItNameFilter, TestTypesFilter};\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {ClassFilter, NotClassFilter, SuiteAndItNameFilter, TestTypesFilter} from './Filter';\r\nconst STRESS_RULE = /^[1-9]\\d*$/;\r\n\r\nclass ConfigService {\r\n    constructor(attr) {\r\n        this.id = attr.id;\r\n        this.supportAsync = false;\r\n        this.random = false;\r\n        this.filterValid = [];\r\n        this.filter = 0;\r\n        this.flag = false;\r\n        this.suite = null;\r\n        this.itName = null;\r\n        this.testType = null;\r\n        this.level = null;\r\n        this.size = null;\r\n        this.class = null;\r\n        this.notClass = null;\r\n        this.timeout = null;\r\n        // 遇错即停模式配置\r\n        this.breakOnError = false;\r\n        // 压力测试配置\r\n        this.stress = null;\r\n    }\r\n\r\n    init(coreContext) {\r\n        this.coreContext = coreContext;\r\n    }\r\n\r\n    isNormalInteger(str) {\r\n        const n = Math.floor(Number(str));\r\n        return n !== Infinity && String(n) === String(str) && n >= 0;\r\n    }\r\n\r\n    getStress() {\r\n        if (this.stress === undefined || this.stress === '' || this.stress === null) {\r\n            return 1;\r\n        }\r\n        return !this.stress.match(STRESS_RULE) ? 1 : Number.parseInt(this.stress);\r\n    }\r\n\r\n    basicParamValidCheck(params) {\r\n        let size = params.size;\r\n        if (size !== undefined && size !== '' && size !== null) {\r\n            let sizeArray = ['small', 'medium', 'large'];\r\n            if (sizeArray.indexOf(size) === -1) {\r\n                this.filterValid.push('size:' + size);\r\n            }\r\n        }\r\n        let level = params.level;\r\n        if (level !== undefined && level !== '' && level !== null) {\r\n            let levelArray = ['0', '1', '2', '3', '4'];\r\n            if (levelArray.indexOf(level) === -1) {\r\n                this.filterValid.push('level:' + level);\r\n            }\r\n        }\r\n        let testType = params.testType;\r\n        if (testType !== undefined && testType !== '' && testType !== null) {\r\n            let testTypeArray = ['function', 'performance', 'power', 'reliability', 'security',\r\n                'global', 'compatibility', 'user', 'standard', 'safety', 'resilience'];\r\n            if (testTypeArray.indexOf(testType) === -1) {\r\n                this.filterValid.push('testType:' + testType);\r\n            }\r\n        }\r\n    }\r\n\r\n    filterParamValidCheck(params) {\r\n        let timeout = params.timeout;\r\n        if (timeout !== undefined && timeout !== '' && timeout !== null) {\r\n            if (!this.isNormalInteger(timeout)) {\r\n                this.filterValid.push('timeout:' + timeout);\r\n            }\r\n        }\r\n\r\n        let paramKeys = ['dryRun', 'random', 'breakOnError', 'coverage'];\r\n        for (const key of paramKeys) {\r\n            if (params[key] !== undefined && params[key] !== 'true' && params[key] !== 'false') {\r\n                this.filterValid.push(`${key}:${params[key]}`);\r\n            }\r\n        }\r\n\r\n        // 压力测试参数验证,正整数\r\n        if (params.stress !== undefined && params.stress !== '' && params.stress !== null) {\r\n            if (!params.stress.match(STRESS_RULE)) {\r\n                this.filterValid.push('stress:' + params.stress);\r\n            }\r\n        }\r\n\r\n        let nameRule = /^[A-Za-z]{1}[\\w#,.]*$/;\r\n        let paramClassKeys = ['class', 'notClass'];\r\n        for (const key of paramClassKeys) {\r\n            if (params[key] !== undefined && params[key] !== '' && params[key] !== null) {\r\n                let classArray = params[key].split(',');\r\n                classArray.forEach(item => !item.match(nameRule) ? this.filterValid.push(`${key}:${params[key]}`) : null);\r\n            }\r\n        }\r\n    }\r\n\r\n    setConfig(params) {\r\n        this.basicParamValidCheck(params);\r\n        this.filterParamValidCheck(params);\r\n        try {\r\n            this.class = params.class;\r\n            this.notClass = params.notClass;\r\n            this.flag = params.flag || {flag: false};\r\n            this.suite = params.suite;\r\n            this.itName = params.itName;\r\n            this.filter = params.filter;\r\n            this.testType = params.testType;\r\n            this.level = params.level;\r\n            this.size = params.size;\r\n            this.timeout = params.timeout;\r\n            this.dryRun = params.dryRun;\r\n            this.breakOnError = params.breakOnError;\r\n            this.random = params.random === 'true' ? true : false;\r\n            this.stress = params.stress;\r\n            this.coverage = params.coverage;\r\n            this.filterParam = {\r\n                testType: {\r\n                    'function': 1,\r\n                    'performance': 1 << 1,\r\n                    'power': 1 << 2,\r\n                    'reliability': 1 << 3,\r\n                    'security': 1 << 4,\r\n                    'global': 1 << 5,\r\n                    'compatibility': 1 << 6,\r\n                    'user': 1 << 7,\r\n                    'standard': 1 << 8,\r\n                    'safety': 1 << 9,\r\n                    'resilience': 1 << 10,\r\n                },\r\n                level: {\r\n                    '0': 1 << 24,\r\n                    '1': 1 << 25,\r\n                    '2': 1 << 26,\r\n                    '3': 1 << 27,\r\n                    '4': 1 << 28,\r\n                },\r\n                size: {\r\n                    'small': 1 << 16,\r\n                    'medium': 1 << 17,\r\n                    'large': 1 << 18,\r\n                }\r\n            };\r\n            this.parseParams();\r\n        } catch (err) {\r\n            console.info('setConfig error: ' + err.message);\r\n        }\r\n    }\r\n\r\n    parseParams() {\r\n        if (this.filter != null) {\r\n            return;\r\n        }\r\n        let testTypeFilter = 0;\r\n        let sizeFilter = 0;\r\n        let levelFilter = 0;\r\n        if (this.testType != null) {\r\n            testTypeFilter = this.testType.split(',')\r\n                .map(item => this.filterParam.testType[item] || 0)\r\n                .reduce((pre, cur) => pre | cur, 0);\r\n        }\r\n        if (this.level != null) {\r\n            levelFilter = this.level.split(',')\r\n                .map(item => this.filterParam.level[item] || 0)\r\n                .reduce((pre, cur) => pre | cur, 0);\r\n        }\r\n        if (this.size != null) {\r\n            sizeFilter = this.size.split(',')\r\n                .map(item => this.filterParam.size[item] || 0)\r\n                .reduce((pre, cur) => pre | cur, 0);\r\n        }\r\n        this.filter = testTypeFilter | sizeFilter | levelFilter;\r\n        console.info('filter params:' + this.filter);\r\n    }\r\n\r\n    isCurrentSuite(description) {\r\n        if (this.suite !== undefined && this.suite !== '' && this.suite !== null) {\r\n            let suiteArray = this.suite.split(',');\r\n            return suiteArray.indexOf(description) !== -1;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    filterSuite(currentSuiteName) {\r\n        let filterArray = [];\r\n        if (this.suite !== undefined && this.suite !== '' && this.suite !== null) {\r\n            filterArray.push(new SuiteAndItNameFilter(currentSuiteName, '', this.suite));\r\n        }\r\n        if (this.class !== undefined && this.class !== '' && this.class !== null) {\r\n            filterArray.push(new ClassFilter(currentSuiteName, '', this.class));\r\n        }\r\n        if (this.notClass !== undefined && this.notClass !== '' && this.notClass !== null) {\r\n            filterArray.push(new NotClassFilter(currentSuiteName, '', this.notClass));\r\n        }\r\n\r\n        let result = filterArray.map(item => item.filterSuite()).reduce((pre, cur) => pre || cur, false);\r\n        return result;\r\n    }\r\n\r\n    filterDesc(currentSuiteName, desc, fi, coreContext) {\r\n        let filterArray = [];\r\n        if (this.itName !== undefined && this.itName !== '' && this.itName !== null) {\r\n            filterArray.push(new SuiteAndItNameFilter(currentSuiteName, desc, this.itName));\r\n        }\r\n        if (this.class !== undefined && this.class !== '' && this.class !== null) {\r\n            filterArray.push(new ClassFilter(currentSuiteName, desc, this.class));\r\n        }\r\n        if (this.notClass !== undefined && this.notClass !== '' && this.notClass !== null) {\r\n            filterArray.push(new NotClassFilter(currentSuiteName, desc, this.notClass));\r\n        }\r\n        if (typeof (this.filter) !== 'undefined' && this.filter !== 0 && fi !== 0) {\r\n            filterArray.push(new TestTypesFilter('', '', fi, this.filter));\r\n        }\r\n        let result = filterArray.map(item => item.filterIt()).reduce((pre, cur) => pre || cur, false);\r\n        return result;\r\n    }\r\n\r\n    isRandom() {\r\n        return this.random || false;\r\n    }\r\n\r\n    isBreakOnError() {\r\n        return this.breakOnError !== 'true' ? false : true;\r\n    }\r\n\r\n    setSupportAsync(value) {\r\n        this.supportAsync = value;\r\n    }\r\n\r\n    isSupportAsync() {\r\n        return this.supportAsync;\r\n    }\r\n\r\n    translateParams(parameters) {\r\n        const keySet = new Set([\r\n            '-s class', '-s notClass', '-s suite', '-s itName',\r\n            '-s level', '-s testType', '-s size', '-s timeout',\r\n            '-s dryRun', '-s random', '-s breakOnError', '-s stress',\r\n            '-s coverage', 'class', 'notClass', 'suite', 'itName',\r\n            'level', 'testType', 'size', 'timeout', 'dryRun', 'random',\r\n            'breakOnError', 'stress', 'coverage'\r\n        ]);\r\n        let targetParams = {};\r\n        for (const key in parameters) {\r\n            if (keySet.has(key)) {\r\n                var newKey = key.replace(\"-s \", \"\");\r\n                targetParams[newKey] = parameters[key];\r\n            }\r\n        }\r\n        return targetParams;\r\n    }\r\n    translateParamsToString(parameters) {\r\n        const keySet = new Set([\r\n            '-s class', '-s notClass', '-s suite', '-s itName',\r\n            '-s level', '-s testType', '-s size', '-s timeout',\r\n            '-s dryRun', '-s random', '-s breakOnError', '-s stress',\r\n            '-s coverage','class', 'notClass', 'suite', 'itName',\r\n            'level', 'testType', 'size', 'timeout', 'dryRun', 'random',\r\n            'breakOnError', 'stress', 'coverage'\r\n        ]);\r\n        let targetParams = '';\r\n        for (const key in parameters) {\r\n            if (keySet.has(key)) {\r\n                targetParams += ' ' + key + ' ' + parameters[key];\r\n            }\r\n        }\r\n        return targetParams.trim();\r\n    }\r\n\r\n    execute() {\r\n    }\r\n}\r\n\r\nexport {\r\n    ConfigService\r\n};\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nclass SpecEvent {\r\n    constructor(attr) {\r\n        this.id = attr.id;\r\n        this.coreContext = attr.context;\r\n        this.eventMonitors = [];\r\n    }\r\n\r\n    subscribeEvent(service) {\r\n        this.eventMonitors.push(service);\r\n    }\r\n\r\n    async specStart() {\r\n        for (const monitor of this.eventMonitors) {\r\n            await monitor['specStart']();\r\n        }\r\n    }\r\n\r\n    async specDone() {\r\n        for (const monitor of this.eventMonitors) {\r\n            await monitor['specDone']();\r\n        }\r\n    }\r\n}\r\n\r\nclass SuiteEvent {\r\n    constructor(attr) {\r\n        this.id = attr.id;\r\n        this.suiteContext = attr.coreContext;\r\n        this.eventMonitors = [];\r\n    }\r\n\r\n    subscribeEvent(service) {\r\n        this.eventMonitors.push(service);\r\n    }\r\n\r\n    async suiteStart() {\r\n        for (const monitor of this.eventMonitors) {\r\n            await monitor['suiteStart']();\r\n        }\r\n    }\r\n\r\n    async suiteDone() {\r\n        for (const monitor of this.eventMonitors) {\r\n            await monitor['suiteDone']();\r\n        }\r\n    }\r\n}\r\n\r\nclass TaskEvent {\r\n    constructor(attr) {\r\n        this.id = attr.id;\r\n        this.coreContext = attr.coreContext;\r\n        this.eventMonitors = [];\r\n    }\r\n\r\n    subscribeEvent(service) {\r\n        this.eventMonitors.push(service);\r\n    }\r\n\r\n    async taskStart() {\r\n        for (const monitor of this.eventMonitors) {\r\n            await monitor['taskStart']();\r\n        }\r\n    }\r\n\r\n    async taskDone() {\r\n        for (const monitor of this.eventMonitors) {\r\n            await monitor['taskDone']();\r\n        }\r\n    }\r\n\r\n    incorrectFormat() {\r\n        for (const monitor of this.eventMonitors) {\r\n            monitor['incorrectFormat']();\r\n        }\r\n    }\r\n}\r\n\r\nexport {SpecEvent, TaskEvent, SuiteEvent};\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {SuiteService, SpecService, ExpectService, ReportService} from './service';\r\nimport {ConfigService} from './module/config/configService';\r\nimport {SpecEvent, TaskEvent, SuiteEvent} from './event';\r\n\r\n/**\r\n * core service for execute testcase.\r\n */\r\nclass Core {\r\n    static getInstance() {\r\n        if (!this.instance) {\r\n            this.instance = new Core();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    constructor() {\r\n        this.instance = null;\r\n        this.services = {\r\n            suite: {},\r\n            spec: {},\r\n            config: {},\r\n            expect: {},\r\n            log: {},\r\n            report: {}\r\n\r\n        };\r\n        this.events = {\r\n            suite: {},\r\n            spec: {},\r\n            task: {}\r\n        };\r\n    }\r\n\r\n    addService(name, service) {\r\n        let serviceObj = {};\r\n        if (!this.services[name]) {\r\n            this.services[name] = serviceObj;\r\n        } else {\r\n            serviceObj = this.services[name];\r\n        }\r\n        serviceObj[service.id] = service;\r\n    }\r\n\r\n    getDefaultService(name) {\r\n        return this.services[name].default;\r\n    }\r\n\r\n    getServices(name) {\r\n        return this.services[name];\r\n    }\r\n\r\n    registerEvent(serviceName, event) {\r\n        let eventObj = {};\r\n        if (!this.events[serviceName]) {\r\n            this.events[serviceName] = eventObj;\r\n        } else {\r\n            eventObj = this.events[serviceName];\r\n        }\r\n        eventObj[event.id] = event;\r\n    }\r\n\r\n    unRegisterEvent(serviceName, eventID) {\r\n        const eventObj = this.events[serviceName];\r\n        if (eventObj) {\r\n            delete eventObj[eventID];\r\n        }\r\n    }\r\n\r\n    subscribeEvent(serviceName, serviceObj) {\r\n        const eventObj = this.events[serviceName];\r\n        if (eventObj) {\r\n            for (const attr in eventObj) {\r\n                eventObj[attr]['subscribeEvent'](serviceObj);\r\n            }\r\n        }\r\n    }\r\n\r\n    async fireEvents(serviceName, eventName) {\r\n        const eventObj = this.events[serviceName];\r\n        if (!eventObj) {\r\n            return;\r\n        }\r\n        for (const attr in eventObj) {\r\n            await eventObj[attr][eventName]();\r\n        }\r\n    }\r\n\r\n    addToGlobal(apis) {\r\n        if (typeof globalThis !== 'undefined') {\r\n            for (let api in apis) {\r\n                globalThis[api] = apis[api];\r\n            }\r\n        }\r\n        for (const api in apis) {\r\n            this[api] = apis[api];\r\n        }\r\n    }\r\n\r\n    init() {\r\n        this.addService('suite', new SuiteService({id: 'default'}));\r\n        this.addService('spec', new SpecService({id: 'default'}));\r\n        this.addService('expect', new ExpectService({id: 'default'}));\r\n        this.addService('report', new ReportService({id: 'default'}));\r\n        this.addService('config', new ConfigService({id: 'default'}));\r\n        this.registerEvent('task', new TaskEvent({id: 'default', coreContext: this}));\r\n        this.registerEvent('suite', new SuiteEvent({id: 'default', coreContext: this}));\r\n        this.registerEvent('spec', new SpecEvent({id: 'default', coreContext: this}));\r\n        this.subscribeEvent('spec', this.getDefaultService('report'));\r\n        this.subscribeEvent('suite', this.getDefaultService('report'));\r\n        this.subscribeEvent('task', this.getDefaultService('report'));\r\n        const context = this;\r\n        for (const key in this.services) {\r\n            const serviceObj = this.services[key];\r\n            for (const serviceID in serviceObj) {\r\n                const service = serviceObj[serviceID];\r\n                service.init(context);\r\n\r\n                if (typeof service.apis !== 'function') {\r\n                    continue;\r\n                }\r\n                const apis = service.apis();\r\n                if (apis) {\r\n                    this.addToGlobal(apis);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    execute(abilityDelegator) {\r\n        const suiteService = this.getDefaultService('suite');\r\n        const configService = this.getDefaultService('config');\r\n        if (configService['dryRun'] === 'true') {\r\n            (async function () {\r\n                await suiteService.dryRun(abilityDelegator);\r\n            })();\r\n            return;\r\n        }\r\n        setTimeout(() => {\r\n            suiteService.execute();\r\n        }, 10);\r\n    }\r\n}\r\n\r\nexport default Core;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * define the testcase type : TestType, Size , Level\r\n */\r\nexport const DEFAULT = 0B0000;\r\n\r\nexport class TestType {\r\n    static FUNCTION = 0B1;\r\n    static PERFORMANCE = 0B1 << 1;\r\n    static POWER = 0B1 << 2;\r\n    static RELIABILITY = 0B1 << 3;\r\n    static SECURITY = 0B1 << 4;\r\n    static GLOBAL = 0B1 << 5;\r\n    static COMPATIBILITY = 0B1 << 6;\r\n    static USER = 0B1 << 7;\r\n    static STANDARD = 0B1 << 8;\r\n    static SAFETY = 0B1 << 9;\r\n    static RESILIENCE = 0B1 << 10;\r\n}\r\n\r\nexport class Size {\r\n    static SMALLTEST = 0B1 << 16;\r\n    static MEDIUMTEST = 0B1 << 17;\r\n    static LARGETEST = 0B1 << 18;\r\n}\r\n\r\nexport class Level {\r\n    static LEVEL0 = 0B1 << 24;\r\n    static LEVEL1 = 0B1 << 25;\r\n    static LEVEL2 = 0B1 << 26;\r\n    static LEVEL3 = 0B1 << 27;\r\n    static LEVEL4 = 0B1 << 28;\r\n}\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nconst SUITES_KEY = 'suites';\r\nconst SPECS_KEY = 'items';\r\nconst DESCRIBE_KEY = 'describe';\r\nconst IT_KEY = 'it';\r\nconst PARAMS_KEY = 'params';\r\nconst STRESS_KEY = 'stress';\r\n\r\nclass ObjectUtils {\r\n    static get(object, name, defaultValue) {\r\n        let result = defaultValue;\r\n        for (const key in object) {\r\n            if (key === name) {\r\n                return object[key];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static has(object, key) {\r\n        return Object.prototype.hasOwnProperty.call(object, key);\r\n    }\r\n}\r\n\r\nclass DataDriver {\r\n    constructor(attr) {\r\n        this.id = 'dataDriver';\r\n        this.data = attr.data || {};\r\n    }\r\n\r\n    init(coreContext) {\r\n        this.coreContext = coreContext;\r\n        this.suiteService = this.coreContext.getDefaultService('suite');\r\n        this.specService = this.coreContext.getDefaultService('spec');\r\n    }\r\n\r\n    getSpecParams() {\r\n        let specParams = [];\r\n        let suiteDesc = this.suiteService.getCurrentRunningSuite().description;\r\n        let specDesc = this.specService.getCurrentRunningSpec().description;\r\n        let suites = ObjectUtils.get(this.data, SUITES_KEY, []);\r\n        for (const suiteItem of suites) {\r\n            let describeValue = ObjectUtils.get(suiteItem, DESCRIBE_KEY, '');\r\n            if (ObjectUtils.has(suiteItem, DESCRIBE_KEY) && (typeof describeValue === 'object') && describeValue.constructor === Array && describeValue.includes(suiteDesc)) {\r\n                let specs = ObjectUtils.get(suiteItem, SPECS_KEY, []);\r\n                for (const specItem of specs) {\r\n                    if (ObjectUtils.has(specItem, IT_KEY) && ObjectUtils.get(specItem, IT_KEY) === specDesc) {\r\n                        return ObjectUtils.get(specItem, PARAMS_KEY, specParams);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return specParams;\r\n    }\r\n\r\n    getSuiteParams() {\r\n        let suiteParams = {};\r\n        let suiteDesc = this.suiteService.getCurrentRunningSuite().description;\r\n        let suites = ObjectUtils.get(this.data, SUITES_KEY, []);\r\n        for (const suiteItem of suites) {\r\n            let describeValue = ObjectUtils.get(suiteItem, DESCRIBE_KEY, []);\r\n            if (ObjectUtils.has(suiteItem, DESCRIBE_KEY) && (typeof describeValue === 'object') && describeValue.constructor === Array && describeValue.includes(suiteDesc)) {\r\n                suiteParams = Object.assign({}, suiteParams, ObjectUtils.get(suiteItem, PARAMS_KEY, suiteParams));\r\n            }\r\n        }\r\n        return suiteParams;\r\n    }\r\n\r\n    getSpecStress(specDesc) {\r\n        let stress = 1;\r\n        let suiteDesc = this.suiteService.getCurrentRunningSuite().description;\r\n        let suites = ObjectUtils.get(this.data, SUITES_KEY, []);\r\n        for (const suiteItem of suites) {\r\n            let describeValue = ObjectUtils.get(suiteItem, DESCRIBE_KEY, '');\r\n            if (ObjectUtils.has(suiteItem, DESCRIBE_KEY) && (typeof describeValue === 'object') && describeValue.constructor === Array && describeValue.includes(suiteDesc)) {\r\n                let specs = ObjectUtils.get(suiteItem, SPECS_KEY, []);\r\n                for (const specItem of specs) {\r\n                    if (ObjectUtils.has(specItem, IT_KEY) && ObjectUtils.get(specItem, IT_KEY) === specDesc) {\r\n                        let tempStress = ObjectUtils.get(specItem, STRESS_KEY, stress);\r\n                        return (Number.isInteger(tempStress) && tempStress >= 1) ? tempStress : stress;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return stress;\r\n    }\r\n\r\n    getSuiteStress(suiteDesc) {\r\n        let stress = 1;\r\n        let suites = ObjectUtils.get(this.data, SUITES_KEY, []);\r\n        for (const suiteItem of suites) {\r\n            let describeValue = ObjectUtils.get(suiteItem, DESCRIBE_KEY, []);\r\n            if (ObjectUtils.has(suiteItem, DESCRIBE_KEY) && (typeof describeValue === 'object') && describeValue.constructor === Array && describeValue.includes(suiteDesc)) {\r\n                let tempStress = ObjectUtils.get(suiteItem, STRESS_KEY, stress);\r\n                return (Number.isInteger(tempStress) && tempStress >= 1) ? tempStress : stress;\r\n            }\r\n        }\r\n        return stress;\r\n    }\r\n}\r\n\r\nexport default DataDriver;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertNull(actualValue) {\r\n    return {\r\n        pass: (actualValue) === null,\r\n        message: 'expect null, actualValue is ' + (actualValue)\r\n    };\r\n}\r\n\r\nexport default assertNull;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertClose(actualValue, expected) {\r\n    console.log('expected:' + expected[0] + ',precision:' + expected[1]);\r\n    if (actualValue === null && expected[0] === null) {\r\n        throw new Error('actualValue and expected can not be both null!!!');\r\n    }\r\n    let result;\r\n    let diff = Math.abs(expected[0] - actualValue);\r\n    let actualAbs = Math.abs(actualValue);\r\n    if ((actualAbs - 0) === 0) {\r\n        if ((diff - 0) === 0) {\r\n            result = true;\r\n        } else {\r\n            result = false;\r\n        }\r\n    } else if (diff / actualAbs < expected[1]) {\r\n        result = true;\r\n    } else {\r\n        result = false;\r\n    }\r\n    return {\r\n        pass: result,\r\n        message: '|' + actualValue + ' - ' + expected[0] + '|/' + actualValue + ' is not less than ' + expected[1]\r\n    };\r\n}\r\n\r\nexport default assertClose;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertContain(actualValue, expect) {\r\n    let result = false;\r\n    if (Object.prototype.toString.call(actualValue).indexOf('Array')) {\r\n        for (let i in actualValue) {\r\n            if (actualValue[i] == expect[0]) {\r\n                result = true;\r\n            }\r\n        }\r\n    }\r\n    let type = Object.prototype.toString.call(actualValue);\r\n    if (type === '[object String]') {\r\n        result = actualValue.indexOf(expect[0]) >= 0;\r\n    }\r\n    return {\r\n        pass: result,\r\n        message: 'expect false, ' + actualValue + ' do not have  ' + expect[0]\r\n    };\r\n}\r\n\r\nexport default assertContain;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertLess(actualValue, expected) {\r\n    return {\r\n        pass: (actualValue) < expected[0],\r\n        message: (actualValue) + ' is not less than ' + expected[0]\r\n    };\r\n}\r\n\r\nexport default assertLess;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertLarger(actualValue, expected) {\r\n    return {\r\n        pass: (actualValue) > expected[0],\r\n        message: (actualValue) + ' is not larger than ' + expected[0]\r\n    };\r\n}\r\n\r\nexport default assertLarger;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertFail() {\r\n    return {\r\n        pass: false,\r\n        message: 'fail '\r\n    };\r\n}\r\n\r\nexport default assertFail;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertUndefined(actualValue) {\r\n    return {\r\n        pass: undefined === (actualValue),\r\n        message: 'expect Undefined, actualValue is ' + (actualValue)\r\n    };\r\n}\r\n\r\nexport default assertUndefined;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertFalse(actualValue) {\r\n    return {\r\n        pass: (actualValue) === false,\r\n        message: 'expect false, actualValue is ' + actualValue\r\n    };\r\n}\r\n\r\nexport default assertFalse;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertInstanceOf(actualValue, expected) {\r\n    if (Object.prototype.toString.call(actualValue) == '[object ' + expected[0] + ']') {\r\n        return {\r\n            pass: true\r\n        };\r\n    } else {\r\n        return {\r\n            pass: false,\r\n            message: actualValue + ' is ' + Object.prototype.toString.call(actualValue) + 'not  ' + expected[0]\r\n        };\r\n    }\r\n}\r\n\r\nexport default assertInstanceOf;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertThrowError(actualValue, expected) {\r\n    let result = false;\r\n    let err;\r\n    if (typeof actualValue !== 'function') {\r\n        throw new Error('actualValue is not a function');\r\n    }\r\n    try {\r\n        actualValue();\r\n        return {\r\n            pass: result,\r\n            message: ' An error is not thrown while it is expected!'\r\n        };\r\n    } catch (e) {\r\n        err = e;\r\n    }\r\n\r\n    if (err instanceof Error) {\r\n        console.log(err.message);\r\n        if (err.message == expected[0]) {\r\n            result = true;\r\n        }\r\n    }\r\n    return {\r\n        pass: result,\r\n        message: 'expected throw failed , ' + err.message + ' is not ' + expected[0]\r\n    };\r\n}\r\n\r\nexport default assertThrowError;\r\n","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertLargerOrEqual(actualValue, expected) {\r\n    return {\r\n        pass: (actualValue) >= expected[0],\r\n        message: (actualValue) + ' is not larger than ' + expected[0]\r\n    };\r\n}\r\n\r\nexport default assertLargerOrEqual;\r\n","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertLessOrEqual(actualValue, expected) {\r\n    return {\r\n        pass: (actualValue) <= expected[0],\r\n        message: (actualValue) + ' is not less than ' + expected[0]\r\n    };\r\n}\r\n\r\nexport default assertLessOrEqual;\r\n","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction assertNaN(actualValue) {\r\n    return {\r\n        pass: actualValue !== actualValue,\r\n        message: 'expect NaN, actualValue  is ' + actualValue\r\n    };\r\n}\r\n\r\nexport default assertNaN;\r\n","/*\r\n* Copyright (c) 2022 Huawei Device Co., Ltd.\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*     http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\nfunction assertNegUnlimited(actualValue) {\r\n    return {\r\n        pass: actualValue === Number.NEGATIVE_INFINITY,\r\n        message: 'Expected actualValue not to be -Infinity.  actualValue is,' + actualValue\r\n    };\r\n}\r\n\r\nexport default assertNegUnlimited;\r\n","/*\r\n* Copyright (c) 2022 Huawei Device Co., Ltd.\r\n* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n* you may not use this file except in compliance with the License.\r\n* You may obtain a copy of the License at\r\n*\r\n*     http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing, software\r\n* distributed under the License is distributed on an \"AS IS\" BASIS,\r\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n* See the License for the specific language governing permissions and\r\n* limitations under the License.\r\n*/\r\n\r\nfunction assertPosUnlimited(actualValue) {\r\n    return {\r\n        pass: actualValue === Number.POSITIVE_INFINITY,\r\n        message: 'Expected actualValue is POSITIVE_INFINITY.  actualValue is,' + actualValue\r\n    };\r\n}\r\n\r\nexport default assertPosUnlimited;\r\n","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nclass DeepTypeUtils {\r\n    static getType_(value) {\r\n       return Object.prototype.toString.apply(value);\r\n   }\r\n    static isA_(typeName, value) {\r\n        return this.getType_(value) === '[object ' + typeName + ']';\r\n    }\r\n    static isAsymmetricEqualityTester_(obj) {\r\n        return obj ? this.isA_('Function', obj.asymmetricMatch) : false;\r\n    }\r\n\r\n    /**\r\n     * 是否是function\r\n     * @param value\r\n     */\r\n    static isFunction_(value) {\r\n        return this.isA_('Function', value);\r\n    }\r\n\r\n    /**\r\n     * 是否是undefined\r\n     * @param obj\r\n     */\r\n    static isUndefined(obj) {\r\n        return obj === void 0;\r\n    }\r\n\r\n    /**\r\n     * 是否是Node\r\n     * @param obj\r\n     */\r\n    static isDomNode(obj) {\r\n        return obj !== null &&\r\n              typeof obj === 'object' &&\r\n              typeof obj.nodeType === 'number' &&\r\n              typeof obj.nodeName === 'string';\r\n    }\r\n\r\n    /**\r\n     * 是否是promise对象\r\n     * @param obj\r\n     */\r\n    static isPromise (obj) {\r\n        return !!obj && obj.constructor === Promise;\r\n  };\r\n    /**\r\n     *  是否是map对象\r\n     * @param obj\r\n     */\r\n    static isMap(obj) {\r\n        return (\r\n            obj !== null &&\r\n            typeof obj !== 'undefined' &&\r\n            obj.constructor === Map\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 是否是set对象\r\n     * @param obj 对象\r\n     */\r\n    static isSet(obj) {\r\n        return (\r\n            obj !== null &&\r\n            typeof obj !== 'undefined' &&\r\n            obj.constructor === Set\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 对象是否有key属性\r\n     * @param obj 对象\r\n     * @param key 对象属性名称\r\n     */\r\n    static has(obj, key) {\r\n        return Object.prototype.hasOwnProperty.call(obj, key);\r\n    }\r\n\r\n    /**\r\n     * 获取对象的自有属性\r\n     * @param obj 对象\r\n     * @param isArray 是否是数组,[object Array]\r\n     */\r\n    static keys(obj, isArray) {\r\n     const extraKeys = [];\r\n        // 获取对象所有属性\r\n     const  allKeys = this.getAllKeys(obj);\r\n        if (!isArray) {\r\n            return allKeys;\r\n        }\r\n        if (allKeys.length === 0) {\r\n            return allKeys;\r\n        }\r\n        for (const k of allKeys) {\r\n            if (typeof k === 'symbol' || !/^[0-9]+$/.test(k)) {\r\n                extraKeys.push(k);\r\n            }\r\n        }\r\n        return extraKeys;\r\n    }\r\n\r\n    /**\r\n     * 获取obj对象的所有属性\r\n     * @param obj obj对象\r\n     */\r\n    static getAllKeys(obj) {\r\n        const keys = [];\r\n        for (let key in obj) {\r\n            if(this.has(obj, key)) {\r\n                keys.push(key);\r\n            }\r\n        }\r\n        const symbols = Object.getOwnPropertySymbols(obj);\r\n        for (const sym of symbols) {\r\n            if (obj.propertyIsEnumerable(sym)) {\r\n                keys.push(sym);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n\r\n}\r\nexport default DeepTypeUtils;","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport DeepTypeUtils from './DeepTypeUtils'\r\nfunction assertDeepEquals(actualValue, expected) {\r\n    console.log('actualValue:' + actualValue + ',expected:' + expected[0]);\r\n    let result = eq(actualValue, expected[0],[], [])\r\n    let msg = logMsg(actualValue, expected[0]);\r\n    return {\r\n        pass: result,\r\n        message: msg\r\n    };\r\n}\r\n\r\n/**\r\n * 获取失败显示日志\r\n * @param actualValue 实际对象\r\n * @param expected 期待比较对象\r\n */\r\nfunction logMsg(actualValue, expected) {\r\n    // 获取a的对象名称\r\n    const aClassName = Object.prototype.toString.call(actualValue);\r\n    const bClassName = Object.prototype.toString.call(expected);\r\n    let actualMsg;\r\n    let expectMsg;\r\n    if(aClassName == \"[object Function]\") {\r\n        actualMsg = \"actualValue Function\"\r\n    }else if(aClassName == \"[object Promise]\") {\r\n        actualMsg = \"actualValue Promise\"\r\n    }else if(aClassName == \"[object Set]\" || aClassName == \"[object Map]\") {\r\n        actualMsg = JSON.stringify(Array.from(actualValue));;\r\n    }else if(aClassName == \"[object RegExp]\") {\r\n        actualMsg = JSON.stringify(actualValue.source.replace(\"\\\\\",\"\"));;\r\n    }\r\n    else{\r\n        actualMsg = JSON.stringify(actualValue);\r\n    }\r\n    if(bClassName == \"[object Function]\") {\r\n        expectMsg = \"expected Function\"\r\n    }else if(bClassName == \"[object Promise]\") {\r\n        expectMsg = \"expected Promise\"\r\n    }else if(aClassName == \"[object Set]\" || bClassName == \"[object Map]\") {\r\n        expectMsg = JSON.stringify(Array.from(expected));\r\n    }else if(aClassName == \"[object RegExp]\") {\r\n        expectMsg = JSON.stringify(expected.source.replace(\"\\\\\",\"\"));;\r\n    }\r\n    else{\r\n        expectMsg = JSON.stringify(expected);\r\n    }\r\n    return actualMsg + \" is not deep equal \" + expectMsg;\r\n}\r\n\r\nfunction eq(a, b, aStack, bStack) {\r\n    let result = true;\r\n    console.log('a is:' + a + ',b is:' + b);\r\n    const asymmetricResult = asymmetricMatch_(a,b);\r\n    if (!DeepTypeUtils.isUndefined(asymmetricResult)) {\r\n        return asymmetricResult;\r\n    }\r\n\r\n    if (a instanceof Error && b instanceof Error) {\r\n        result = a.message == b.message;\r\n        return result;\r\n    }\r\n\r\n    if (a === b) {\r\n        result = a !== 0 || 1 / a == 1 / b;\r\n        return result;\r\n    }\r\n\r\n    if (a === null || b === null) {\r\n        result = a === b;\r\n        return result;\r\n    }\r\n    // 获取a的对象名称\r\n    const aClassName = Object.prototype.toString.call(a);\r\n    const bClassName = Object.prototype.toString.call(b);\r\n    console.log('aClassName is:' + aClassName);\r\n    console.log('bClassName is:' + bClassName);\r\n    // 不同类型不同对象\r\n    if (aClassName != bClassName) {\r\n        return false;\r\n    }\r\n    // 俩个string对象\r\n    if(aClassName === '[object String]') {\r\n        result = a == String(b);\r\n        return result;\r\n    }\r\n    // 俩个Number对象\r\n    if(aClassName === '[object Number]') {\r\n        result = a != +a ? b != +b : a === 0 && b === 0 ? 1 / a == 1 / b : a == +b;\r\n        return result;\r\n    }\r\n\r\n    if(aClassName === '[object Date]' || aClassName === '[object Boolean]') {\r\n        result = +a == +b;\r\n        return result;\r\n    }\r\n\r\n    // 数组\r\n    if(aClassName === '[object ArrayBuffer]') {\r\n        return eq(new Uint8Array(a), new Uint8Array(b), aStack, bStack);\r\n    }\r\n\r\n    // 正则表达式\r\n    if(aClassName === '[object RegExp]') {\r\n        return (\r\n            a.source == b.source &&\r\n            a.global == b.global &&\r\n            a.multiline == b.multiline &&\r\n            a.ignoreCase == b.ignoreCase\r\n        );\r\n    }\r\n\r\n    if (typeof a != 'object' || typeof b != 'object') {\r\n        return false;\r\n    }\r\n\r\n    const aIsDomNode = DeepTypeUtils.isDomNode(a);\r\n    const bIsDomNode = DeepTypeUtils.isDomNode(b);\r\n    if (aIsDomNode && bIsDomNode) {\r\n        // At first try to use DOM3 method isEqualNode\r\n        result = a.isEqualNode(b);\r\n        return result;\r\n    }\r\n    if (aIsDomNode || bIsDomNode) {\r\n        return false;\r\n    }\r\n    const aIsPromise = DeepTypeUtils.isPromise(a);\r\n    const bIsPromise = DeepTypeUtils.isPromise(b);\r\n    if (aIsPromise && bIsPromise) {\r\n        return a === b;\r\n    }\r\n    let length = aStack.length;\r\n    while (length--) {\r\n        if (aStack[length] == a) {\r\n            return bStack[length] == b;\r\n        }\r\n    }\r\n    aStack.push(a);\r\n    bStack.push(b);\r\n    let size = 0;\r\n\r\n    // 都是数组\r\n    if(aClassName == '[object Array]') {\r\n        const aLength = a.length;\r\n        const bLength = b.length;\r\n        if (aLength !== bLength) {\r\n            // 数组长度不同，不是同一个对象\r\n            return false;\r\n            }\r\n        for (let i = 0; i < aLength || i < bLength; i++) {\r\n            // 递归每一个元素是否相同\r\n            result = eq(i < aLength ? a[i] : void 0, i < bLength ? b[i] : void 0, aStack, bStack) && result;\r\n        }\r\n        if (!result) {\r\n            return false;\r\n        }\r\n    } else if(DeepTypeUtils.isMap(a) && DeepTypeUtils.isMap(b)) {\r\n        if (a.size != b.size) {\r\n            return false;\r\n        }\r\n        const keysA = [];\r\n        const keysB = [];\r\n        a.forEach(function(valueA, keyA) {\r\n            keysA.push(keyA);\r\n        });\r\n        b.forEach(function(valueB, keyB) {\r\n            keysB.push(keyB);\r\n        });\r\n        const mapKeys = [keysA, keysB];\r\n        const cmpKeys = [keysB, keysA];\r\n        for (let i = 0; result && i < mapKeys.length; i++) {\r\n            const mapIter = mapKeys[i];\r\n            const cmpIter = cmpKeys[i];\r\n\r\n            for (let j = 0; result && j < mapIter.length; j++) {\r\n                const mapKey = mapIter[j];\r\n                const cmpKey = cmpIter[j];\r\n                const mapValueA = a.get(mapKey);\r\n                let mapValueB;\r\n                if (\r\n                DeepTypeUtils.isAsymmetricEqualityTester_(mapKey) ||\r\n                (DeepTypeUtils.isAsymmetricEqualityTester_(cmpKey) &&\r\n                eq(mapKey, cmpKey))\r\n                ) {\r\n                    mapValueB = b.get(cmpKey);\r\n                } else {\r\n                    mapValueB = b.get(mapKey);\r\n                }\r\n                result = eq(mapValueA, mapValueB, aStack, bStack);\r\n            }\r\n        }\r\n        if (!result) {\r\n            return false;\r\n        }\r\n    } else if(DeepTypeUtils.isSet(a) && DeepTypeUtils.isSet(b)) {\r\n        if (a.size != b.size) {\r\n            return false;\r\n        }\r\n        const valuesA = [];\r\n        a.forEach(function(valueA) {\r\n            valuesA.push(valueA);\r\n        });\r\n        const valuesB = [];\r\n        b.forEach(function(valueB) {\r\n            valuesB.push(valueB);\r\n        });\r\n        const setPairs = [[valuesA, valuesB], [valuesB, valuesA]];\r\n       const stackPairs = [[aStack, bStack], [bStack, aStack]];\r\n        for (let i = 0; result && i < setPairs.length; i++) {\r\n            const baseValues = setPairs[i][0];\r\n            const otherValues = setPairs[i][1];\r\n            const baseStack = stackPairs[i][0];\r\n            const otherStack = stackPairs[i][1];\r\n            for (const baseValue of baseValues) {\r\n                let found = false;\r\n                for (let j = 0; !found && j < otherValues.length; j++) {\r\n                    const otherValue = otherValues[j];\r\n                    const prevStackSize = baseStack.length;\r\n                    // 深度比较对象\r\n                    found = eq(baseValue, otherValue, baseStack, otherStack);\r\n                    if (!found && prevStackSize !== baseStack.length) {\r\n                        baseStack.splice(prevStackSize);\r\n                        otherStack.splice(prevStackSize);\r\n                    }\r\n                }\r\n                result = result && found;\r\n            }\r\n        }\r\n        if (!result) {\r\n            return false;\r\n        }\r\n    } else {\r\n        const aCtor = a.constructor,\r\n            bCtor = b.constructor;\r\n        if (\r\n        aCtor !== bCtor &&\r\n        DeepTypeUtils.isFunction_(aCtor) &&\r\n        DeepTypeUtils.isFunction_(bCtor) &&\r\n        a instanceof aCtor &&\r\n        b instanceof bCtor &&\r\n        !(aCtor instanceof aCtor && bCtor instanceof bCtor)\r\n        ) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // 获取对象所有的属性集合\r\n    const aKeys = DeepTypeUtils.keys(a, aClassName == '[object Array]');\r\n    size = aKeys.length;\r\n\r\n    // 俩个对象属性长度不一致， 俩对象不相同\r\n    if (DeepTypeUtils.keys(b, bClassName == '[object Array]').length !== size) {\r\n        return false;\r\n    }\r\n\r\n    // 俩对象属性数量相同， 递归比较每个属性值得值\r\n    for (const key of aKeys) {\r\n        console.log('key is:' + key);\r\n        // b 没有 key 属性\r\n        if(!DeepTypeUtils.has(b, key)) {\r\n            result = false;\r\n            continue;\r\n        }\r\n        if (!eq(a[key], b[key], aStack, bStack)) {\r\n            result = false;\r\n        }\r\n    }\r\n    if (!result) {\r\n        return false;\r\n    }\r\n    aStack.pop();\r\n    bStack.pop();\r\n    return result;\r\n}\r\n\r\nfunction asymmetricMatch_(a, b) {\r\n    const asymmetricA = DeepTypeUtils.isAsymmetricEqualityTester_(a);\r\n    const asymmetricB = DeepTypeUtils.isAsymmetricEqualityTester_(b);\r\n\r\n    if (asymmetricA === asymmetricB) {\r\n        return undefined;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * 获取对象的自有属性\r\n *\r\n * @param obj 对象\r\n * @param isArray 是否是一个数组\r\n */\r\nfunction keys(obj, isArray) {\r\n    const keys = [];\r\n\r\n}\r\n\r\nexport default assertDeepEquals;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nfunction isPromiseLike(obj) {\r\n    return !!obj && isFunction_(obj.then);\r\n}\r\n\r\nfunction isFunction_(value) {\r\n    return isA_('Function', value);\r\n}\r\n\r\nfunction isA_(typeName, value) {\r\n    return getType_(value) === '[object ' + typeName + ']';\r\n}\r\n\r\nfunction getType_(value) {\r\n    return Object.prototype.toString.apply(value);\r\n}\r\n\r\nexport default isPromiseLike;\r\n","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport isPromiseLike from './isPromiseLike';\r\n\r\nfunction assertPromiseIsPending(actualPromise) {\r\n    if (!isPromiseLike(actualPromise)) {\r\n        return Promise.reject().then(function () {\r\n        }, function () {\r\n            return {pass: false, message: 'Expected not be called on a promise.'};\r\n        });\r\n    }\r\n    const helper = {};\r\n    return Promise.race([actualPromise, Promise.resolve(helper)]).then(\r\n        function (got) {\r\n            return helper === got ? {pass: true, message: 'actualValue is isPending'}\r\n                : {\r\n                    pass: false,\r\n                    message: 'expect isPending, actualValue is resolve'\r\n                };\r\n        },\r\n        function () {\r\n            return {\r\n                pass: false\r\n                , message: 'expect isPending, actualValue is reject'\r\n            };\r\n        });\r\n}\r\n\r\nexport default assertPromiseIsPending;","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport isPromiseLike from './isPromiseLike';\r\n\r\nfunction assertPromiseIsRejected(actualPromise) {\r\n    if (!isPromiseLike(actualPromise)) {\r\n        return Promise.reject().then(function () {\r\n        }, function () {\r\n            return {pass: false, message: 'Expected not be called on a promise.'};\r\n        });\r\n    }\r\n    const helper = {};\r\n    return Promise.race([actualPromise, Promise.resolve(helper)]).then(\r\n        function (got) {\r\n            return {\r\n                pass: false,\r\n                message: 'expect isRejected, but actualValue is '\r\n                    + (helper === got ? 'isPending' : 'resolve')\r\n            };\r\n        },\r\n        function () {\r\n            return {pass: true, message: 'actualValue is isRejected'};\r\n        }\r\n    );\r\n}\r\n\r\nexport default assertPromiseIsRejected;","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport isPromiseLike from './isPromiseLike';\r\n\r\nfunction assertPromiseIsRejectedWith(actualPromise, expectedValue) {\r\n\r\n    if (!isPromiseLike(actualPromise)) {\r\n        return Promise.reject().then(function () {\r\n        }, function () {\r\n            return {pass: false, message: 'Expected not be called on a promise.'};\r\n        });\r\n    }\r\n\r\n    function tips(passed) {\r\n        return ('Expected a promise ' + (passed ? 'not ' : '') +\r\n            'to be rejected with ' + JSON.stringify(expectedValue[0]));\r\n    }\r\n\r\n    const helper = {};\r\n    return Promise.race([actualPromise, Promise.resolve(helper)]).then(\r\n        function (got) {\r\n            return {\r\n                pass: false,\r\n                message: tips(false) + ' but actualValue is '\r\n                    + (helper === got ? 'isPending' : 'resolve')\r\n            };\r\n        },\r\n        function (actualValue) {\r\n            if (JSON.stringify(actualValue) == JSON.stringify(expectedValue[0])) {\r\n                return {\r\n                    pass: true,\r\n                    message: 'actualValue was rejected with ' + JSON.stringify(actualValue) + '.'\r\n                };\r\n            } else {\r\n                return {\r\n                    pass: false,\r\n                    message: tips(false) + ' but it was rejected with ' + JSON.stringify(actualValue) + '.'\r\n                };\r\n            }\r\n        }\r\n    );\r\n}\r\n\r\nexport default assertPromiseIsRejectedWith;","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport isPromiseLike from './isPromiseLike';\r\n\r\nfunction assertPromiseIsRejectedWithError(actualPromise, expectedValue) {\r\n    if (!isPromiseLike(actualPromise)) {\r\n        return Promise.reject().then(function () {\r\n        }, function () {\r\n            return {pass: false, message: 'Expected not be called on a promise.'};\r\n        });\r\n    }\r\n    const helper = {};\r\n    return Promise.race([actualPromise, Promise.resolve(helper)]).then(\r\n        function (got) {\r\n            return {\r\n                pass: false,\r\n                message: 'Expected a promise to be rejected but actualValue is '\r\n                    + (helper === got ? 'isPending' : 'resolve')\r\n            };\r\n        },\r\n        function (actualValue) {\r\n            return matchError(actualValue, expectedValue);\r\n        }\r\n    );\r\n\r\n}\r\n\r\nfunction matchError(actualValue, expectedValue) {\r\n    if (expectedValue.length == 1 && typeof expectedValue[0] === 'function') {\r\n        if (expectedValue[0].name === actualValue.__proto__.name) {\r\n            return {pass: true, message: 'actual error type is ' + actualValue.name + '.'};\r\n        }\r\n        return {\r\n            pass: false,\r\n            message: 'except error type is ' + expectedValue[0].name + ',but actual is ' + actualValue.name + '.'\r\n        };\r\n    }\r\n\r\n    if (expectedValue.length == 1 && typeof expectedValue[0] === 'string') {\r\n        if (expectedValue[0] === actualValue.message) {\r\n            return {pass: true, message: 'actual error message is ' + actualValue.message + '.'};\r\n        }\r\n        return {\r\n            pass: false,\r\n            message: 'except error message ' + expectedValue[0] + ',but actual is ' + actualValue.message + '.'\r\n        };\r\n    }\r\n\r\n    if (expectedValue.length == 1) {\r\n        return {\r\n            pass: false,\r\n            message: 'When only one parameter, it ' +\r\n                'should be error type or error message.'\r\n        };\r\n    }\r\n\r\n    if (expectedValue.length == 2 && typeof expectedValue[0] === 'function' && expectedValue[0].name === actualValue.name) {\r\n        if (typeof expectedValue[1] === 'string' && actualValue.message === expectedValue[1]) {\r\n            return {pass: true, message: 'actual error message is ' + actualValue.message + '.'};\r\n        } else {\r\n            return {\r\n                pass: false,\r\n                message: 'except error message is ' + expectedValue[1] + ',but actual is ' + actualValue.message + '.'\r\n            };\r\n        }\r\n    }\r\n\r\n    if (expectedValue.length == 2 && typeof expectedValue[0] === 'function' && expectedValue[0].name !== actualValue.name) {\r\n        if (typeof expectedValue[1] === 'string' && actualValue.message === expectedValue[1]) {\r\n            return {\r\n                pass: false,\r\n                message: 'except error type is ' + expectedValue[0].name + ',but actual is ' + actualValue.name + '.'\r\n            };\r\n        } else {\r\n            return {\r\n                pass: false,\r\n                message: 'except error type and message are incorrect.'\r\n            };\r\n        }\r\n    }\r\n\r\n    if (expectedValue.length > 2) {\r\n        return {\r\n            pass: false,\r\n            message: 'Up to two parameters are supported.'\r\n        };\r\n    }\r\n}\r\n\r\nexport default assertPromiseIsRejectedWithError;","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport isPromiseLike from './isPromiseLike';\r\n\r\nfunction assertPromiseIsResolved(actualPromise) {\r\n    if (!isPromiseLike(actualPromise)) {\r\n        return Promise.reject().then(function () {\r\n        }, function () {\r\n            return {pass: false, message: 'Expected not be called on a promise.'};\r\n        });\r\n    }\r\n\r\n    const helper = {};\r\n    return Promise.race([actualPromise, Promise.resolve(helper)]).then(\r\n        function (got) {\r\n            return helper === got ? {\r\n                pass: false,\r\n                message: 'expect resolve, actualValue is isPending'\r\n            }\r\n                : {pass: true, message: 'actualValue is isResolved'};\r\n        },\r\n        function (rej) {\r\n            return {\r\n                pass: false,\r\n                message: 'Expected a promise to be resolved but it was ' +\r\n                    'rejected with ' + JSON.stringify(rej) + '.'\r\n            };\r\n        }\r\n    );\r\n}\r\n\r\nexport default assertPromiseIsResolved;","/*\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport isPromiseLike from './isPromiseLike';\r\n\r\nfunction assertPromiseIsResolvedWith(actualPromise, expectedValue) {\r\n    if (!isPromiseLike(actualPromise)) {\r\n        return Promise.reject().then(function () {\r\n        }, function () {\r\n            return {pass: false, message: 'Expected not be called on a promise.'};\r\n        });\r\n    }\r\n\r\n    function tips(passed) {\r\n        return (\r\n            'Expected a promise ' + (passed ? 'not ' : '') +\r\n            'to be resolved with ' + JSON.stringify(expectedValue[0]));\r\n    }\r\n\r\n    const helper = {};\r\n    return Promise.race([actualPromise, Promise.resolve(helper)]).then(\r\n        function (got) {\r\n            if (helper === got) {\r\n                return {pass: false, message: 'expect resolve, actualValue is isPending'};\r\n            }\r\n            if (JSON.stringify(got) == JSON.stringify(expectedValue[0])) {\r\n                return {\r\n                    pass: true,\r\n                    message: 'actualValue was resolved with ' + JSON.stringify(got) + '.'\r\n                };\r\n            }\r\n            return {\r\n                pass: false,\r\n                message: tips(false) + ' but it was resolved with ' +\r\n                    JSON.stringify(got) + '.'\r\n            };\r\n        },\r\n        function (rej) {\r\n            return {\r\n                pass: false,\r\n                message: tips(false) + ' but it was rejected with ' + JSON.stringify(rej) + '.'\r\n            };\r\n        }\r\n    );\r\n}\r\n\r\nexport default assertPromiseIsResolvedWith;","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport assertNull from './assertNull';\r\nimport assertClose from './assertClose';\r\nimport assertContain from './assertContain';\r\nimport assertLess from './assertLess';\r\nimport assertLarger from './assertLarger';\r\nimport assertFail from './assertFail';\r\nimport assertUndefined from './assertUndefined';\r\nimport assertFalse from './assertFalse';\r\nimport assertInstanceOf from './assertInstanceOf';\r\nimport assertThrowError from './assertThrowError';\r\nimport assertLargerOrEqual from './assertLargerOrEqual'\r\nimport assertLessOrEqual from './assertLessOrEqual'\r\nimport assertNaN from './assertNaN'\r\nimport assertNegUnlimited from './assertNegUnlimited'\r\nimport assertPosUnlimited from './assertPosUnlimited'\r\nimport assertDeepEquals from './deepEquals/assertDeepEquals'\r\nimport assertPromiseIsPending from './assertPromiseIsPending';\r\nimport assertPromiseIsRejected from './assertPromiseIsRejected';\r\nimport assertPromiseIsRejectedWith from './assertPromiseIsRejectedWith';\r\nimport assertPromiseIsRejectedWithError from './assertPromiseIsRejectedWithError';\r\nimport assertPromiseIsResolved from './assertPromiseIsResolved';\r\nimport assertPromiseIsResolvedWith from './assertPromiseIsResolvedWith';\r\nclass ExpectExtend {\r\n    constructor(attr) {\r\n        this.id = attr.id;\r\n        this.matchers = {};\r\n    }\r\n\r\n    extendsMatchers() {\r\n        this.matchers.assertNull = assertNull;\r\n        this.matchers.assertClose = assertClose;\r\n        this.matchers.assertContain = assertContain;\r\n        this.matchers.assertLess = assertLess;\r\n        this.matchers.assertLarger = assertLarger;\r\n        this.matchers.assertFail = assertFail;\r\n        this.matchers.assertUndefined = assertUndefined;\r\n        this.matchers.assertFalse = assertFalse;\r\n        this.matchers.assertInstanceOf = assertInstanceOf;\r\n        this.matchers.assertThrowError = assertThrowError;\r\n        this.matchers.assertLargerOrEqual = assertLargerOrEqual;\r\n        this.matchers.assertLessOrEqual = assertLessOrEqual;\r\n        this.matchers.assertNaN = assertNaN;\r\n        this.matchers.assertNegUnlimited = assertNegUnlimited;\r\n        this.matchers.assertPosUnlimited = assertPosUnlimited;\r\n        this.matchers.assertDeepEquals = assertDeepEquals;\r\n        this.matchers.assertPromiseIsPending = assertPromiseIsPending;\r\n        this.matchers.assertPromiseIsRejected = assertPromiseIsRejected;\r\n        this.matchers.assertPromiseIsRejectedWith = assertPromiseIsRejectedWith;\r\n        this.matchers.assertPromiseIsRejectedWithError = assertPromiseIsRejectedWithError;\r\n        this.matchers.assertPromiseIsResolved = assertPromiseIsResolved;\r\n        this.matchers.assertPromiseIsResolvedWith = assertPromiseIsResolvedWith;\r\n    }\r\n\r\n    init(coreContext) {\r\n        this.coreContext = coreContext;\r\n        this.extendsMatchers();\r\n        const expectService = this.coreContext.getDefaultService('expect');\r\n        expectService.addMatchers(this.matchers);\r\n    }\r\n\r\n    apis() {\r\n        return {\r\n            'expect': function (actualValue) {\r\n                return this.coreContext.getDefaultService('expect').expect(actualValue);\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nexport default ExpectExtend;\r\n","/*\r\n * Copyright (c) 2023 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport SysTestKit from \"../kit/SysTestKit\";\r\n\r\nexport async function collectCoverageData() {\r\n    if (globalThis.__coverage__ === undefined) {\r\n        return;\r\n    }\r\n    const strJson = JSON.stringify(globalThis.__coverage__);\r\n    const strLen = strJson.length;\r\n    const maxLen = 500;\r\n    const maxCount = Math.floor(strLen / maxLen);\r\n    const OHOS_REPORT_COVERAGE_DATA = 'OHOS_REPORT_COVERAGE_DATA:';\r\n    for (let count = 0; count <= maxCount; count++) {\r\n        await SysTestKit.print(`${OHOS_REPORT_COVERAGE_DATA} ${strJson.substring(count * maxLen, (count + 1) * maxLen)}`);\r\n    }\r\n}","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport SysTestKit from \"../kit/SysTestKit\";\r\nimport {collectCoverageData} from '../coverage/coverageCollect';\r\n\r\nclass OhReport {\r\n    constructor(attr) {\r\n        this.delegator = attr.delegator;\r\n        this.abilityDelegatorArguments = attr.abilityDelegatorArguments;\r\n        this.id = 'report';\r\n        this.index = 0;\r\n        this.duration = 0;\r\n    }\r\n\r\n    init(coreContext) {\r\n        this.coreContext = coreContext;\r\n        this.suiteService = this.coreContext.getDefaultService('suite');\r\n        this.specService = this.coreContext.getDefaultService('spec');\r\n    }\r\n\r\n    taskStart() {\r\n    }\r\n\r\n    async taskDone() {\r\n        if (this.abilityDelegatorArguments !== null) {\r\n            this.taskDoneTime = new Date().getTime();\r\n            let summary = this.suiteService.getSummary();\r\n            const configService = this.coreContext.getDefaultService('config');\r\n            if (configService['coverage'] === 'true') {\r\n                await collectCoverageData();\r\n            }\r\n            let message = '\\n' + 'OHOS_REPORT_RESULT: stream=Tests run: ' + summary.total + ', Failure: ' + summary.failure;\r\n            message += ', Error: ' + summary.error;\r\n            message += ', Pass: ' + summary.pass;\r\n            message += ', Ignore: ' + summary.ignore;\r\n            message += '\\n' + 'OHOS_REPORT_CODE: ' + (summary.failure > 0 ? -1 : 0) + '\\n';\r\n            let isHasError = summary.failure > 0 || summary.error > 0;\r\n            let config = this.coreContext.getDefaultService('config');\r\n            if (config.isBreakOnError() && isHasError) {\r\n                // 未执行全部说明\r\n                message += '\\n' + 'OHOS_REPORT_RESULT: breakOnError model, Stopping whole test suite if one specific test case failed or error' + '\\n';\r\n            }\r\n            message += 'OHOS_REPORT_STATUS: taskconsuming=' + summary.duration + '\\n';\r\n            console.info(message);\r\n            await SysTestKit.print(message);\r\n        }\r\n        console.info('report print success');\r\n        this.delegator.finishTest('your test finished!!!', 0, () => { });\r\n    }\r\n\r\n    incorrectFormat() {\r\n        if (this.coreContext.getDefaultService('config').filterValid.length !== 0) {\r\n            var value = this.coreContext.getDefaultService('config').filterValid;\r\n            var message = 'this param ' + value.join(',') + ' is invalid' + '\\n';\r\n            this.delegator.finishTest(message, 0, () => {\r\n            });\r\n        }\r\n    }\r\n\r\n    async suiteStart() {\r\n        if (this.abilityDelegatorArguments !== null) {\r\n            let message = '\\n' + 'OHOS_REPORT_SUM: ' + this.suiteService.getCurrentRunningSuite().getSpecsNum();\r\n            message += '\\n' + 'OHOS_REPORT_STATUS: class=' + this.suiteService.getCurrentRunningSuite().description + '\\n';\r\n            console.info(message);\r\n            await SysTestKit.print(message);\r\n            console.info(this.suiteService.getCurrentRunningSuite().description + ' suiteStart print success');\r\n        }\r\n    }\r\n\r\n    async suiteDone() {\r\n        if (this.abilityDelegatorArguments !== null) {\r\n            let message = '\\n' + 'OHOS_REPORT_STATUS: class=' + this.suiteService.getCurrentRunningSuite().description;\r\n            message += '\\n' + 'OHOS_REPORT_STATUS: suiteconsuming=' + this.suiteService.getCurrentRunningSuite().duration + '\\n';\r\n            console.info(message);\r\n            await SysTestKit.print(message);\r\n            console.info(this.suiteService.getCurrentRunningSuite().description + ' suiteDone print success');\r\n        }\r\n    }\r\n\r\n    async specStart() {\r\n        if (this.abilityDelegatorArguments !== null) {\r\n            let message = '\\n' + 'OHOS_REPORT_STATUS: class=' + this.suiteService.getCurrentRunningSuite().description;\r\n            message += '\\n' + 'OHOS_REPORT_STATUS: current=' + (++this.index);\r\n            message += '\\n' + 'OHOS_REPORT_STATUS: id=JS';\r\n            message += '\\n' + 'OHOS_REPORT_STATUS: numtests=' + this.specService.getTestTotal();\r\n            message += '\\n' + 'OHOS_REPORT_STATUS: stream=';\r\n            message += '\\n' + 'OHOS_REPORT_STATUS: test=' + this.specService.currentRunningSpec.description;\r\n            message += '\\n' + 'OHOS_REPORT_STATUS_CODE: 1' + '\\n';\r\n            console.info(message);\r\n            await SysTestKit.print(message);\r\n            console.info(this.specService.currentRunningSpec.description + ' specStart start print success');\r\n        }\r\n    }\r\n\r\n    async specDone() {\r\n        if (this.abilityDelegatorArguments !== null) {\r\n            let message = '\\n' + 'OHOS_REPORT_STATUS: class=' + this.suiteService.getCurrentRunningSuite().description;\r\n            message += '\\n' + 'OHOS_REPORT_STATUS: current=' + (this.index);\r\n            message += '\\n' + 'OHOS_REPORT_STATUS: id=JS';\r\n            message += '\\n' + 'OHOS_REPORT_STATUS: numtests=' + this.specService.getTestTotal();\r\n            let errorMsg = '';\r\n            if (this.specService.currentRunningSpec.error) {\r\n                message += '\\n' + 'OHOS_REPORT_STATUS: stack=' + this.specService.currentRunningSpec.error.message;\r\n                message += '\\n' + 'OHOS_REPORT_STATUS: stream=';\r\n                message += '\\n' + 'Error in ' + this.specService.currentRunningSpec.description;\r\n                message += '\\n' + this.specService.currentRunningSpec.error.message;\r\n                message += '\\n' + 'OHOS_REPORT_STATUS: test=' + this.specService.currentRunningSpec.description;\r\n                message += '\\n' + 'OHOS_REPORT_STATUS_CODE: -1' + '\\n';\r\n            } else if (this.specService.currentRunningSpec.result) {\r\n                if (this.specService.currentRunningSpec.result.failExpects.length > 0) {\r\n                    this.specService.currentRunningSpec.result.failExpects.forEach(failExpect => {\r\n                        errorMsg = failExpect.message || ('expect ' + failExpect.actualValue + ' ' + failExpect.checkFunc + ' ' + (failExpect.expectValue));\r\n                    });\r\n                    message += '\\n' + 'OHOS_REPORT_STATUS: stack=' + errorMsg;\r\n                    message += '\\n' + 'OHOS_REPORT_STATUS: stream=';\r\n                    message += '\\n' + 'Error in ' + this.specService.currentRunningSpec.description;\r\n                    message += '\\n' + errorMsg + '\\n' + 'OHOS_REPORT_STATUS: test=' + this.specService.currentRunningSpec.description;\r\n                    message += '\\n' + 'OHOS_REPORT_STATUS_CODE: -2' + '\\n';\r\n                } else {\r\n                    message += '\\n' + 'OHOS_REPORT_STATUS: stream=';\r\n                    message += '\\n' + 'OHOS_REPORT_STATUS: test=' + this.specService.currentRunningSpec.description;\r\n                    message += '\\n' + 'OHOS_REPORT_STATUS_CODE: 0' + '\\n';\r\n                }\r\n            } else {\r\n                message += '\\n';\r\n            }\r\n            message += 'OHOS_REPORT_STATUS: consuming=' + this.specService.currentRunningSpec.duration + '\\n';\r\n            console.info(message);\r\n            await SysTestKit.print(message);\r\n            console.info(this.specService.currentRunningSpec.description + ' specDone end print success');\r\n        }\r\n    }\r\n}\r\n\r\nexport default OhReport;\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Core from './core';\r\n\r\nconst core = Core.getInstance();\r\n\r\nconst describe = function (desc, func) {\r\n    return Reflect.has(core, 'describe') ? core.describe(desc, func) : (desc, func) => { };\r\n};\r\nconst it = function (desc, filter, func) {\r\n    return Reflect.has(core, 'it') ? core.it(desc, filter, func) : (desc, filter, func) => { };\r\n};\r\nconst beforeEach = function (func) {\r\n    return Reflect.has(core, 'beforeEach') ? core.beforeEach(func) : (func) => { };\r\n};\r\nconst afterEach = function (func) {\r\n    return Reflect.has(core, 'afterEach') ? core.afterEach(func) : (func) => { };\r\n};\r\nconst beforeAll = function (func) {\r\n    return Reflect.has(core, 'beforeAll') ? core.beforeAll(func) : (func) => { };\r\n};\r\nconst afterAll = function (func) {\r\n    return Reflect.has(core, 'afterAll') ? core.afterAll(func) : (func) => { };\r\n};\r\nconst expect = function (actualValue) {\r\n    return Reflect.has(core, 'expect') ? core.expect(actualValue) : (actualValue) => { };\r\n};\r\n\r\nexport {\r\n    describe, it, beforeAll, beforeEach, afterEach, afterAll, expect\r\n};\r\n","/*\r\n * Copyright (c) 2021-2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\")\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Core from './src/main/core';\r\nimport {DEFAULT, TestType, Size, Level} from './src/main/Constant';\r\nimport DataDriver from './src/main/module/config/DataDriver';\r\nimport ExpectExtend from './src/main/module/assert/ExpectExtend';\r\nimport OhReport from './src/main/module/report/OhReport';\r\nimport SysTestKit from './src/main/module/kit/SysTestKit';\r\nimport {describe, beforeAll, beforeEach, afterEach, afterAll, it, expect} from './src/main/interface';\r\nimport {MockKit, when} from './src/main/module/mock/MockKit';\r\nimport ArgumentMatchers from './src/main/module/mock/ArgumentMatchers';\r\n\r\nclass Hypium {\r\n    static setData(data) {\r\n        const core = Core.getInstance();\r\n        const dataDriver = new DataDriver({data});\r\n        core.addService('dataDriver', dataDriver);\r\n    }\r\n\r\n    static setTimeConfig(systemTime) {\r\n        SysTestKit.systemTime = systemTime;\r\n    }\r\n\r\n    static hypiumTest(abilityDelegator, abilityDelegatorArguments, testsuite) {\r\n        const core = Core.getInstance();\r\n        const expectExtend = new ExpectExtend({\r\n            'id': 'extend'\r\n        });\r\n        core.addService('expect', expectExtend);\r\n        const ohReport = new OhReport({\r\n            'delegator': abilityDelegator,\r\n            'abilityDelegatorArguments': abilityDelegatorArguments\r\n        });\r\n        SysTestKit.delegator = abilityDelegator;\r\n        core.addService('report', ohReport);\r\n        core.init();\r\n        core.subscribeEvent('spec', ohReport);\r\n        core.subscribeEvent('suite', ohReport);\r\n        core.subscribeEvent('task', ohReport);\r\n        const configService = core.getDefaultService('config');\r\n\r\n        let testParameters = {};\r\n        if (abilityDelegatorArguments !== null) {\r\n            testParameters = configService.translateParams(abilityDelegatorArguments.parameters);\r\n        }\r\n        console.info('parameters:' + JSON.stringify(testParameters));\r\n        configService.setConfig(testParameters);\r\n\r\n        testsuite();\r\n        if (Object.prototype.hasOwnProperty.call(globalThis, 'setupUiTestEnvironment')) {\r\n            globalThis.setupUiTestEnvironment().then(() => {\r\n                console.info('UiTestKit::after run uitest setup, start run testcases');\r\n                core.execute(abilityDelegator);\r\n            }).catch((error) => {\r\n                console.error('UiTestKit:: call setupUiTestEnvironment failure:' + error);\r\n                core.execute(abilityDelegator);\r\n            });\r\n        } else {\r\n            console.info('UiTestKit:: no need to setup uitest, start run testcases');\r\n            core.execute(abilityDelegator);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Hypium,\r\n    Core,\r\n    DEFAULT,\r\n    TestType,\r\n    Size,\r\n    Level,\r\n    DataDriver,\r\n    ExpectExtend,\r\n    OhReport,\r\n    SysTestKit,\r\n    describe, beforeAll, beforeEach, afterEach, afterAll, it, expect,\r\n    MockKit, when,\r\n    ArgumentMatchers\r\n};","/**\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium'\r\nimport abilityDelegatorRegistry from '@ohos.application.abilityDelegatorRegistry';\r\nimport { UiComponent, UiDriver, BY, Component, Driver, UiWindow, ON, MatchPattern, DisplayRotation, ResizeDirection, UiDirection, MouseButton, WindowMode, PointerMatrix, UIElementInfo, UIEventObserver } from '@ohos.UiTest'\r\nimport ability_featureAbility from '@ohos.ability.featureAbility';\r\n\r\nconst delegator = abilityDelegatorRegistry.getAbilityDelegator();\r\nconst bundleName = abilityDelegatorRegistry.getArguments().bundleName;\r\nconst waitUiReadyMs = 1000;\r\n\r\nasync function startAbility(bundleName: string, abilityName: string) {\r\n    await delegator.executeShellCommand(`aa start -b ${bundleName} -a ${abilityName}`).then(result => {\r\n        console.info(`UiTestCase, start abilityFinished: ${result}`)\r\n    }).catch(err => {\r\n        console.error(`UiTestCase, start abilityFailed: ${err}`)\r\n    })\r\n}\r\n\r\nasync function stopApplication(bundleName: string) {\r\n    await delegator.executeShellCommand(`aa force-stop ${bundleName} `).then(result => {\r\n        console.info(`UiTestCase, stop application finished: ${result}`)\r\n    }).catch(err => {\r\n        console.error(`UiTestCase,stop application failed: ${err}`)\r\n    })\r\n}\r\n\r\nexport default function UiTest() {\r\n    \r\n    describe('UiTest_API10', function () {\r\n        /*\r\n         * @tc.number: uiTest_10001\r\n         * @tc.name: testWithIn\r\n         * @tc.desc: find UiComponent inside of the given UiComponent.\r\n         */\r\n        it('testWithIn', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let scroll = await driver.findComponent(ON.type('Scroll'))\r\n            let btn = await driver.findComponent(ON.within(ON.type('Scroll')).text('next page'))\r\n            let bounds1 = await scroll.getBounds()\r\n            let bounds2 = await btn.getBounds()\r\n            expect(bounds1.top < bounds2.top).assertTrue()\r\n            expect(bounds1.bottom > bounds2.bottom).assertTrue()\r\n            expect(bounds1.left < bounds2.right).assertTrue()\r\n            expect(bounds1.right > bounds2.right).assertTrue()\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_10002\r\n         * @tc.name: testFling\r\n         * @tc.desc: inject fling on the device display.\r\n         */\r\n        it('testFling', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.fling(UiDirection.DOWN, 39000)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponents(ON.text('next page'))\r\n            expect (button).assertNull()\r\n            await driver.fling(UiDirection.LEFT, 39000)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let text = await driver.findComponents(ON.text('1'))\r\n            expect (text).assertNull()\r\n            await driver.fling(UiDirection.RIGHT, 39000)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let text2 = await driver.findComponents(ON.text('2'))\r\n            expect (text2).assertNull()\r\n            await driver.fling(UiDirection.UP, 39000)\r\n            await driver.delayMs(2000)\r\n            let button2 = await driver.findComponents(ON.text('next page'))\r\n            expect (button2 != null).assertTrue()\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_10003\r\n         * @tc.name: testScreenCapture\r\n         * @tc.desc: capture the specified area of current screen.\r\n         */\r\n        it('testScreenCapture', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let savePath = '/data/storage/el2/base/cache/1.png'\r\n            let success = await driver.screenCapture(savePath, {left: 0, top: 0, right: 100, bottom: 100})\r\n            expect(success == true).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_10004\r\n         * @tc.name: testMouseClick\r\n         * @tc.desc: click in the specified location on the screen by mouse.\r\n         */\r\n        it('testMouseClick', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Button = await driver.findComponent(ON.text('jump'))\r\n            let center = await Button.getBoundsCenter()\r\n            await driver.mouseClick({x:center.x, y:center.y}, MouseButton.MOUSE_BUTTON_RIGHT)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Button1 = await driver.findComponent(ON.text('right'))\r\n            expect(Button1 != null).assertTrue()\r\n            await driver.mouseClick({x:center.x, y:center.y}, MouseButton.MOUSE_BUTTON_MIDDLE,2072,2045)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Button2 = await driver.findComponent(ON.text('middle'))\r\n            expect(Button2 != null).assertTrue()\r\n            await driver.mouseClick({x:center.x, y:center.y}, MouseButton.MOUSE_BUTTON_LEFT)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Button3 = await driver.findComponent(ON.text('jump'))\r\n            expect(Button3 == null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_10005\r\n         * @tc.name: testMouseMoveTo\r\n         * @tc.desc: move the mouse cursor to the specified location.\r\n         */\r\n        it('testMouseMoveTo', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Button = await driver.findComponent(ON.text('jump'))\r\n            let center = await Button.getBoundsCenter()\r\n            await driver.mouseMoveTo(center)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let newButton = await driver.findComponent(ON.text('hover'))\r\n            expect(newButton != null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_10006\r\n         * @tc.name: testMouseScroll\r\n         * @tc.desc: scroll the mouse wheel at the specified location to specify the cell.\r\n         */\r\n        it('testMouseScroll', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Scroll = await driver.findComponent(ON.type('Scroll'))\r\n            let center = await Scroll.getBoundsCenter()\r\n            await driver.mouseScroll(center,true,30)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button1 = await driver.findComponent(ON.text('next page'))\r\n            expect(button1 == null).assertTrue()\r\n            await driver.mouseScroll(center,false,30,2072,2048)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button2 = await driver.findComponent(ON.text('next page'))\r\n            expect(button2 != null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_10007\r\n         * @tc.name: testInWindow\r\n         * @tc.desc: scroll the mouse wheel at the specified location to specify the cell.\r\n         */\r\n        it('testInWindow', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let btn = await driver.findComponent(ON.inWindow('com.uitestScene.acts').text('next page'))\r\n            expect(btn != null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n        * @tc.number: uiTest_10008\r\n        * @tc.name: testMonitor1\r\n        * @tc.desc: monitor toast appearance.\r\n        */\r\n\r\n        it('testMonitor1', 0, async function () {\r\n        await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n        let driver = Driver.create()\r\n        await driver.delayMs(waitUiReadyMs)\r\n        let observer = await driver.createUIEventObserver()\r\n        let callback = (UiElementInfo) => {\r\n            expect(UiElementInfo.bundleName == 'com.uitestScene.acts').assertTrue()\r\n            expect(UiElementInfo.text == 'toastShow').assertTrue()\r\n            expect(UiElementInfo.type == 'Toast').assertTrue()\r\n        }\r\n        observer.once('toastShow', callback)\r\n        let btn = await driver.findComponent(ON.text('toast'))\r\n        await btn.click()\r\n        await driver.delayMs(waitUiReadyMs)\r\n        await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n        * @tc.number: uiTest_10009\r\n        * @tc.name: testMonitor2\r\n        * @tc.desc: monitor dialog appearance.\r\n        */\r\n\r\n        it('testMonitor2', 0, async function () {\r\n        await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n        let driver = Driver.create()\r\n        await driver.delayMs(waitUiReadyMs)\r\n        let observer = await driver.createUIEventObserver()\r\n        let callback = (UiElementInfo) => {\r\n            expect(UiElementInfo.bundleName == 'com.uitestScene.acts').assertTrue()\r\n            expect(UiElementInfo.text == 'dialogShow').assertTrue()\r\n            expect(UiElementInfo.type == 'AlertDialog').assertTrue()\r\n        }\r\n        observer.once('dialogShow', callback)\r\n        let btn = await driver.findComponent(ON.text('dialog'))\r\n        await btn.click()\r\n        await driver.delayMs(waitUiReadyMs)\r\n        await stopApplication('com.uitestScene.acts')\r\n        })\r\n    })\r\n\r\n    describe('UiTest_API8', function () {\r\n        /*\r\n         * @tc.number: uiTest_8001\r\n         * @tc.name: testInputText\r\n         * @tc.desc: inject text to the target UiComponent\r\n         */\r\n        it('testInputText', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let input = await driver.findComponent(BY.type('TextInput'))\r\n            await input.inputText('123')\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let input_new = await driver.findComponent(BY.type('TextInput'))\r\n            let text = await input_new.getText()\r\n            expect(text == '123').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8002\r\n         * @tc.name: testMatchPattern\r\n         * @tc.desc: specifies the string value match pattern.\r\n         */\r\n        it('testMatchPattern', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Button1 = await driver.findComponent(BY.text('next page', MatchPattern.EQUALS))\r\n            expect(await Button1.getText() == 'next page').assertTrue()\r\n            let Button2 = await driver.findComponent(BY.text('next', MatchPattern.STARTS_WITH))\r\n            expect(await Button2.getText() == 'next page').assertTrue()\r\n            let Button3 = await driver.findComponent(BY.text('xt page', MatchPattern.ENDS_WITH))\r\n            expect(await Button3.getText() == 'next page').assertTrue()\r\n            let Button4 = await driver.findComponent(BY.text('ext', MatchPattern.CONTAINS))\r\n            expect(await Button4.getText() == 'next page').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8003\r\n         * @tc.name: testUiComponentClick\r\n         * @tc.desc: click this UiComponentClick.\r\n         */\r\n        it('testUiComponentClick', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.text('next page'))\r\n            await button.click()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let newButton = await driver.findComponent(BY.text('back to index'))\r\n            let text = await newButton.getText()\r\n            expect(text == 'back to index').assertTrue()\r\n            await newButton.click()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8004\r\n         * @tc.name: testUiComponentDoubleClick\r\n         * @tc.desc: doubleClick this UiComponentClick.\r\n         */\r\n        it('testUiComponentDoubleClick', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.text('Click twice'))\r\n            await button.doubleClick()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let newButton = await driver.findComponent(BY.text('doubleClick'))\r\n            let text = await newButton.getText()\r\n            expect(text == 'doubleClick').assertTrue()\r\n            await newButton.click()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8005\r\n         * @tc.name: testUiComponentLongClick\r\n         * @tc.desc: longClick this UiComponentClick.\r\n         */\r\n        it('testUiComponentLongClick', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.text('next page'))\r\n            await button.longClick()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let newButton = await driver.findComponent(BY.text('longClick'))\r\n            let text = await newButton.getText()\r\n            expect(text == 'longClick').assertTrue()\r\n            await newButton.click()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8006\r\n         * @tc.name: testKey\r\n         * @tc.desc: find UiComponent by key attribute and get it's key attribute.\r\n         */\r\n        it('testKey', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.key('my-key'))\r\n            expect(await button.getKey() == 'my-key').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8007\r\n         * @tc.name: testId\r\n         * @tc.desc: find UiComponent by id attribute and get it's id attribute.\r\n         */\r\n        it('testId', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.text('next page'))\r\n            let id = await button.getId()\r\n            let button2 = await driver.findComponent(BY.id(id))\r\n            expect(await button2.getText() == 'next page').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8008\r\n         * @tc.name: testType\r\n         * @tc.desc: find UiComponent by type attribute and get it's type attribute.\r\n         */\r\n        it('testType', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let text = await driver.findComponent(BY.type('Text'))\r\n            let type = await text.getType()\r\n            expect(type == 'Text').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8009\r\n         * @tc.name: testClickable\r\n         * @tc.desc: find UiComponent by clickable attribute and get it's clickable attribute.\r\n         */\r\n        it('testClickable', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.text('next page').clickable(false))\r\n            let clickable = await button.isClickable()\r\n            expect(clickable == false).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8010\r\n         * @tc.name: testScrollable\r\n         * @tc.desc: find UiComponent by scrollable attribute and get it's scrollable attribute.\r\n         */\r\n        it('testScrollable', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let scrollBar = await driver.findComponent(BY.type('Scroll'))\r\n            let scrollable = await scrollBar.isScrollable()\r\n            expect(scrollable == true).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8011\r\n         * @tc.name: testEnabled\r\n         * @tc.desc: find UiComponent by enabled attribute and get it's enabled attribute.\r\n         */\r\n        it('testEnabled', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.text('next page').enabled(true))\r\n            let enable = await button.isEnabled()\r\n            expect(enable == true).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8012\r\n         * @tc.name: testFocused\r\n         * @tc.desc: find UiComponent by focused attribute and get it's focused attribute.\r\n         */\r\n        it('testFocused', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.text('next page').focused(false))\r\n            let focused = await button.isFocused()\r\n            expect(focused == false).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8013\r\n         * @tc.name: testSelected\r\n         * @tc.desc: find UiComponent by selected attribute and get it's selected attribute.\r\n         */\r\n        it('testSelected', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.text('next page').selected(false))\r\n            let selected = await button.isSelected()\r\n            expect(selected == false).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8014\r\n         * @tc.name: testPressBack\r\n         * @tc.desc: Press the BACK key.\r\n         */\r\n        it('testPressBack', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.text('next page'))\r\n            await button.click()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.pressBack()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button_ori = await driver.findComponent(BY.text('next page'))\r\n            expect(await button_ori.getText() == 'next page').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8015\r\n         * @tc.name: testFindComponents\r\n         * @tc.desc: find all the matched UiComponents on current UI\r\n         */\r\n        it('testFindComponents', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let buttons = await driver.findComponents(BY.type('Button'))\r\n            expect(await buttons[0].getText() != null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8016\r\n         * @tc.name: testTriggerKey\r\n         * @tc.desc: press the specified key.\r\n         */\r\n        it('testTriggerKey', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.text('next page'))\r\n            await button.click()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let keyBack = 2\r\n            await driver.triggerKey(keyBack)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button_ori = await driver.findComponent(BY.text('next page'))\r\n            expect(await button_ori.getText() == 'next page').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8017\r\n         * @tc.name: testScreenCap\r\n         * @tc.desc: capture current screen.\r\n         */\r\n        it('testScreenCap', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let savePath = '/data/storage/el2/base/cache/1.png'\r\n            let success = await driver.screenCap(savePath)\r\n            expect(success == true).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8018\r\n         * @tc.name: testAssertComponentExist\r\n         * @tc.desc:  Assert whether the matched UiComponent exists on current UI;.\r\n         */\r\n        it('testAssertComponentExist', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.assertComponentExist(BY.text('next page'))\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8019\r\n         * @tc.name: testIsBefore\r\n         * @tc.desc: find uiComponent which is before another UiComponent that specified by given.\r\n         */\r\n        it('testIsBefore', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.isBefore(BY.text('Click twice')).type('Button'))\r\n            expect(await button.getType() == 'Button').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8020\r\n         * @tc.name: testIsAfter\r\n         * @tc.desc: find uiComponent which is after another UiComponent that specified by given.\r\n         */\r\n        it('testIsAfter', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(BY.isAfter(BY.text('next page')).type('Text'))\r\n            expect(await button.getText() == 'Click twice').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8021\r\n         * @tc.name: testSwipe\r\n         * @tc.desc: swipe on the screen between the specified points.\r\n         */\r\n        it('testSwipe', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.swipe(300, 800, 300, 300)\r\n            let text = await driver.findComponent(BY.text('next page'))\r\n            expect(text == null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_8022\r\n         * @tc.name: testScrollSearch\r\n         * @tc.desc: scroll on this UiComponent to find matched UiComponent.\r\n         */\r\n        it('testScrollSearch', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = UiDriver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let scrollBar = await driver.findComponent(BY.type('Scroll'))\r\n            let button = await scrollBar.scrollSearch(BY.text('next page'))\r\n            expect(await button.getText() == 'next page').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n    })\r\n\r\n    describe('UiTest_API9', function () {\r\n        /*\r\n         * @tc.number: uiTest_9001\r\n         * @tc.name: testInputText\r\n         * @tc.desc: inject text to the target UiComponent\r\n         */\r\n        it('testInputText', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let input = await driver.findComponent(ON.type('TextInput'))\r\n            await input.inputText('123')\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let input_new = await driver.findComponent(ON.type('TextInput'))\r\n            let text = await input_new.getText()\r\n            expect(text == '123').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9002\r\n         * @tc.name: testClearText\r\n         * @tc.desc: clear text of the target UiComponent\r\n         */\r\n        it('testClearText', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let input1 = await driver.findComponent(ON.type('TextInput'))\r\n            await input1.inputText('abc')\r\n            let input2 = await driver.findComponent(ON.type('TextInput'))\r\n            await input2.clearText()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let input_new = await driver.findComponent(ON.type('TextInput'))\r\n            let text = await input_new.getText()\r\n            expect(text).assertEqual('')\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9003\r\n         * @tc.name: testCheckable\r\n         * @tc.desc: find UiComponent by checkable attribute and get it's checkable attribute.\r\n         */\r\n        it('testCheckable', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.checkable(true).type('Checkbox'))\r\n            let checkable = await button.isCheckable()\r\n            expect(checkable == true).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9004\r\n         * @tc.name: testChecked\r\n         * @tc.desc: find UiComponent by checked attribute and get it's checked attribute.\r\n         */\r\n        it('testChecked', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.checked(false).type('Checkbox'))\r\n            let checked = await button.isChecked()\r\n            expect(checked == false).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9005\r\n         * @tc.name: testMatchPattern\r\n         * @tc.desc: specifies the string value match pattern.\r\n         */\r\n        it('testMatchPattern', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Button1 = await driver.findComponent(ON.text('next page',MatchPattern.EQUALS))\r\n            expect(await Button1.getText() == 'next page').assertTrue()\r\n            let Button2 = await driver.findComponent(ON.text('next',MatchPattern.STARTS_WITH))\r\n            expect(await Button2.getText() == 'next page').assertTrue()\r\n            let Button3 = await driver.findComponent(ON.text('xt page',MatchPattern.ENDS_WITH))\r\n            expect(await Button3.getText() == 'next page').assertTrue()\r\n            let Button4 = await driver.findComponent(ON.text('ext',MatchPattern.CONTAINS))\r\n            expect(await Button4.getText() == 'next page').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9006\r\n         * @tc.name: testDriverClick\r\n         * @tc.desc: click in the specified location on the screen.\r\n         */\r\n        it('testDriverClick', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Button = await driver.findComponent(ON.text('next page'))\r\n            let center = await Button.getBoundsCenter()\r\n            await driver.click(center.x, center.y)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let newButton = await driver.findComponent(ON.text('back to index'))\r\n            let text = await newButton.getText()\r\n            expect(text == 'back to index').assertTrue()\r\n            await newButton.click()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9007\r\n         * @tc.name: testDriverDoubleClick\r\n         * @tc.desc: doubleClick in the specified location on the screen.\r\n         */\r\n        it('testDriverDoubleClick', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Button = await driver.findComponent(ON.text('Click twice'))\r\n            let center = await Button.getBoundsCenter()\r\n            await driver.doubleClick(center.x, center.y)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('doubleClick'))\r\n            let text = await button.getText()\r\n            expect(text == 'doubleClick').assertTrue()\r\n            await button.click()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9008\r\n         * @tc.name: testDriverLongClick\r\n         * @tc.desc: longClick in the specified location on the screen.\r\n         */\r\n        it('testDriverLongClick', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let Button = await driver.findComponent(ON.text('next page'))\r\n            let center = await Button.getBoundsCenter()\r\n            await driver.longClick(center.x, center.y)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let newButton = await driver.findComponent(ON.text('longClick'))\r\n            let text = await newButton.getText()\r\n            expect(text == 'longClick').assertTrue()\r\n            await newButton.click()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9009\r\n         * @tc.name: testUiComponentClick\r\n         * @tc.desc: click this UiComponentClick.\r\n         */\r\n        it('testUiComponentClick', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('next page'))\r\n            await button.click()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let newButton = await driver.findComponent(ON.text('back to index'))\r\n            let text = await newButton.getText()\r\n            expect(text == 'back to index').assertTrue()\r\n            await newButton.click()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9010\r\n         * @tc.name: testUiComponentDoubleClick\r\n         * @tc.desc: doubleClick this UiComponentClick.\r\n         */\r\n        it('testUiComponentDoubleClick', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('Click twice'))\r\n            await button.doubleClick()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let newButton = await driver.findComponent(ON.text('doubleClick'))\r\n            let text = await newButton.getText()\r\n            expect(text == 'doubleClick').assertTrue()\r\n            await newButton.click()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9011\r\n         * @tc.name: testUiComponentLongClick\r\n         * @tc.desc: longClick this UiComponentClick.\r\n         */\r\n        it('testUiComponentLongClick', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('next page'))\r\n            await button.longClick()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let newButton = await driver.findComponent(ON.text('longClick'))\r\n            let text = await newButton.getText()\r\n            expect(text == 'longClick').assertTrue()\r\n            await newButton.click()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9012\r\n         * @tc.name: testKey\r\n         * @tc.desc: find UiComponent by key attribute and get it's key attribute.\r\n         */\r\n        it('testKey', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.id('my-key'))\r\n            expect(await button.getId() == 'my-key').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9013\r\n         * @tc.name: testType\r\n         * @tc.desc: find UiComponent by type attribute and get it's type attribute.\r\n         */\r\n        it('testType', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let text = await driver.findComponent(ON.type('Text'))\r\n            let type = await text.getType()\r\n            expect(type == 'Text').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9014\r\n         * @tc.name: testClickable\r\n         * @tc.desc: find UiComponent by clickable attribute and get it's clickable attribute.\r\n         */\r\n        it('testClickable', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('next page').clickable(false))\r\n            let clickable = await button.isClickable()\r\n            expect(clickable == false).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9015\r\n         * @tc.name: testLongClickable\r\n         * @tc.desc: find UiComponent by longClickable attribute and get it's longClickable attribute.\r\n         */\r\n        it('testLongClickable', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('next page').longClickable(false))\r\n            let longClickable = await button.isLongClickable()\r\n            expect(longClickable== false).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9016\r\n         * @tc.name: testScrollable\r\n         * @tc.desc: find UiComponent by scrollable attribute and get it's scrollable attribute.\r\n         */\r\n        it('testScrollable', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let scrollBar = await driver.findComponent(ON.type('Scroll'))\r\n            let scrollable = await scrollBar.isScrollable()\r\n            expect(scrollable == true).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9017\r\n         * @tc.name: testEnabled\r\n         * @tc.desc: find UiComponent by enabled attribute and get it's enabled attribute.\r\n         */\r\n        it('testEnabled', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('next page').enabled(true))\r\n            let enable = await button.isEnabled()\r\n            expect(enable == true).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9018\r\n         * @tc.name: testFocused\r\n         * @tc.desc: find UiComponent by focused attribute and get it's focused attribute.\r\n         */\r\n        it('testFocused', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('next page').focused(false))\r\n            let focused = await button.isFocused()\r\n            expect(focused == false).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9019\r\n         * @tc.name: testSelected\r\n         * @tc.desc: find UiComponent by selected attribute and get it's selected attribute.\r\n         */\r\n        it('testSelected', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('next page').selected(false))\r\n            let selected = await button.isSelected()\r\n            expect(selected == false).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9020\r\n         * @tc.name: testPressBack\r\n         * @tc.desc: Press the BACK key.\r\n         */\r\n        it('testPressBack', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('next page'))\r\n            await button.click()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.pressBack()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button_ori = await driver.findComponent(ON.text('next page'))\r\n            expect(await button_ori.getText() == 'next page').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9021\r\n         * @tc.name: testFindComponents\r\n         * @tc.desc: find all the matched UiComponents on current UI\r\n         */\r\n        it('testFindComponents', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let buttons = await driver.findComponents(ON.type('Button'))\r\n            expect(await buttons[0].getText() != null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9022\r\n         * @tc.name: testTriggerKey\r\n         * @tc.desc: press the specified key.\r\n         */\r\n        it('testTriggerKey', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('next page'))\r\n            await button.click()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let keyBack = 2\r\n            await driver.triggerKey(keyBack)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button_ori = await driver.findComponent(ON.text('next page'))\r\n            expect(await button_ori.getText() == 'next page').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9023\r\n         * @tc.name: testTriggerCombineKeys\r\n         * @tc.desc: press two or three key combinations\r\n         */\r\n        it('testTriggerCombineKeys', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(2000)\r\n            let text = await driver.findComponent(ON.type('TextInput'))\r\n            let center = await text.getBoundsCenter()\r\n            await text.inputText('123')\r\n            await driver.click(center.x, center.y)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.triggerCombineKeys(2072, 2017)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.triggerCombineKeys(2072, 2019)\r\n            await driver.triggerCombineKeys(2072, 2038)\r\n            let text2 = await driver.findComponent(ON.type('TextInput'))\r\n            expect(await text2.getText() == '123123').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9024\r\n         * @tc.name: testGetUiComponentBounds\r\n         * @tc.desc: get the bounds of this UiComponent.\r\n         */\r\n        it('testGetUiComponentBounds', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let text = await driver.findComponent(ON.text('next page'))\r\n            expect(text !== null).assertTrue()\r\n            let bounds = await text.getBounds();\r\n            expect(bounds !== null).assertTrue()\r\n            expect(bounds.right).assertLarger(bounds.left)\r\n            expect(bounds.bottom).assertLarger(bounds.top)\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9025\r\n         * @tc.name: testGetUiComponentBoundsCenter\r\n         * @tc.desc: get the boundsCenter of this @link UiComponent.\r\n         */\r\n        it('testGetUiComponentBoundsCenter', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('next page'))\r\n            let point = await button.getBoundsCenter()\r\n            expect(point!== null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9026\r\n         * @tc.name: testWaitForComponent\r\n         * @tc.desc: Find the first matched UiComponent on current UI during the time given.\r\n         */\r\n        it('testWaitForComponent', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.waitForComponent(ON.text('next page'), waitUiReadyMs)\r\n            expect(button !== null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9027\r\n         * @tc.name: testScreenCap\r\n         * @tc.desc: capture current screen.\r\n         */\r\n        it('testScreenCap', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let savePath = '/data/storage/el2/base/cache/1.png'\r\n            let success = await driver.screenCap(savePath)\r\n            expect(success == true).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9028\r\n         * @tc.name: testAssertComponentExist\r\n         * @tc.desc:  Assert whether the matched UiComponent exists on current UI;.\r\n         */\r\n        it('testAssertComponentExist', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.assertComponentExist(ON.text('next page'))\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9029\r\n         * @tc.name: testIsBefore\r\n         * @tc.desc: find uiComponent which is before another UiComponent that specified by given.\r\n         */\r\n        it('testIsBefore', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.isBefore(ON.text('Click twice')).type('Button'))\r\n            expect(await button.getType() == 'Button').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9030\r\n         * @tc.name: testIsAfter\r\n         * @tc.desc: find uiComponent which is after another UiComponent that specified by given.\r\n         */\r\n        it('testIsAfter', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.isAfter(ON.text('next page')).type('Text'))\r\n            expect(await button.getText() == 'Click twice').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9031\r\n         * @tc.name: testSwipe\r\n         * @tc.desc: swipe on the screen between the specified points.\r\n         */\r\n        it('testSwipe', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.swipe(300,800,300,300)\r\n            let text = await driver.findComponent(ON.text('next page'))\r\n            expect(text == null).assertTrue()\r\n            let scrollBar = await driver.findComponent(ON.type('Scroll'))\r\n            await scrollBar.scrollToTop()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9032\r\n         * @tc.name: testFling\r\n         * @tc.desc: inject fling on the device display.\r\n         */\r\n        it('testFling', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.fling({x:300, y:600},{x:300, y:300}, 20, 600)\r\n            let text = await driver.findComponent(ON.text('next page'))\r\n            expect(text == null).assertTrue()\r\n            let scrollBar = await driver.findComponent(ON.type('Scroll'))\r\n            await scrollBar.scrollToTop()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9033\r\n         * @tc.name: testScrollSearch\r\n         * @tc.desc: scroll on this UiComponent to find matched UiComponent.\r\n         */\r\n        it('testScrollSearch', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let scrollBar = await driver.findComponent(ON.type('Scroll'))\r\n            let button = await scrollBar.scrollSearch(ON.text('next page'))\r\n            expect(await button.getText() == 'next page').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9034\r\n         * @tc.name: testScrollToBottom\r\n         * @tc.desc: scroll on this UiComponent to the bottom.\r\n         */\r\n        it('testScrollToBottom', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let scrollBar = await driver.findComponent(ON.type('Scroll'))\r\n            expect(scrollBar != null).assertTrue()\r\n            await scrollBar.scrollToBottom()\r\n            let button = await driver.findComponent(ON.text('bottom'))\r\n            expect(await button.getText() == 'bottom').assertTrue()\r\n            await scrollBar.scrollToTop()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9035\r\n         * @tc.name: testScrollToTop\r\n         * @tc.desc: scroll on this UiComponent to the top.\r\n         */\r\n        it('testScrollToTop', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let scrollBar = await driver.findComponent(ON.type('Scroll'))\r\n            expect(scrollBar !== null).assertTrue()\r\n            await scrollBar.scrollToBottom()\r\n            await scrollBar.scrollToTop()\r\n            let button = await driver.findComponent(ON.text('next page'))\r\n            expect(await button.getText() == 'next page').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9036\r\n         * @tc.name: testPinch\r\n         * @tc.desc: pinch enlarge this UiComponent to the target scale.\r\n         */\r\n        it('testPinch', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('jump'))\r\n            await button.click()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let image1 = await driver.findComponent(ON.type('Image'))\r\n            let bounds1 = await image1.getBounds()\r\n            await image1.pinchIn(0.5);\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let image2 = await driver.findComponent(ON.type('Image'))\r\n            let bounds2 = await image2.getBounds()\r\n            expect(bounds2 != bounds1).assertTrue()\r\n            await image2.pinchOut(1.2);\r\n            let image3 = await driver.findComponent(ON.type('Image'))\r\n            let bounds3 = await image3.getBounds()\r\n            expect(bounds3 != bounds2).assertTrue()\r\n            await driver.pressBack()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9037\r\n         * @tc.name: testInjectMultiPointerAction\r\n         * @tc.desc: inject multi-pointer action on the device display.\r\n         */\r\n        it('testInjectMultiPointerAction', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('jump'))\r\n            await button.click()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let image1 = await driver.findComponent(ON.type('Image'))\r\n            let bounds1 = await image1.getBounds()\r\n            let pointer = PointerMatrix.create(2,11)\r\n            await driver.delayMs(300)\r\n            pointer.setPoint(0,0,{x:245,y:480})\r\n            pointer.setPoint(0,1,{x:250,y:480})\r\n            pointer.setPoint(0,2,{x:255,y:480})\r\n            pointer.setPoint(0,3,{x:260,y:480})\r\n            pointer.setPoint(0,4,{x:265,y:480})\r\n            pointer.setPoint(0,5,{x:270,y:480})\r\n            pointer.setPoint(0,6,{x:275,y:480})\r\n            pointer.setPoint(0,7,{x:280,y:480})\r\n            pointer.setPoint(0,8,{x:285,y:480})\r\n            pointer.setPoint(0,9,{x:290,y:480})\r\n            pointer.setPoint(0,10,{x:295,y:480})\r\n            pointer.setPoint(1,0,{x:505,y:480})\r\n            pointer.setPoint(1,1,{x:500,y:480})\r\n            pointer.setPoint(1,2,{x:495,y:480})\r\n            pointer.setPoint(1,3,{x:490,y:480})\r\n            pointer.setPoint(1,4,{x:485,y:480})\r\n            pointer.setPoint(1,5,{x:480,y:480})\r\n            pointer.setPoint(1,6,{x:475,y:480})\r\n            pointer.setPoint(1,7,{x:470,y:480})\r\n            pointer.setPoint(1,8,{x:465,y:480})\r\n            pointer.setPoint(1,9,{x:460,y:480})\r\n            pointer.setPoint(1,10,{x:455,y:480})\r\n            await driver.injectMultiPointerAction(pointer, 600)\r\n            let image2 = await driver.findComponent(ON.type('Image'))\r\n            let bounds2= await image2.getBounds()\r\n            expect(bounds2 != bounds1).assertTrue()\r\n            await driver.pressBack()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9038\r\n         * @tc.name: testGetWindowMode\r\n         * @tc.desc: get the window mode of this UiWindow.\r\n         */\r\n        it('testGetWindowMode', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window1 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n            let mode1 = await window1.getWindowMode()\r\n            expect(mode1 == WindowMode.FULLSCREEN).assertTrue()\r\n            try {\r\n                await window1.resume()\r\n                let window2 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let mode2 = await window2.getWindowMode()\r\n                expect(mode2 == WindowMode.FLOATING).assertTrue()\r\n                expect(mode2 != WindowMode.SECONDARY).assertTrue()\r\n                expect(mode2 != WindowMode.PRIMARY).assertTrue()\r\n                await stopApplication('com.uitestScene.acts')\r\n            }\r\n            catch (err) {\r\n                if (err.message == 'this device can not support this action') {\r\n                    expect(window1 != null).assertTrue()\r\n                } else {\r\n                    expect(false).assertTrue()\r\n                }\r\n            }\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9039\r\n         * @tc.name: testGetBundleName\r\n         * @tc.desc: get the bundleName of this UiWindow.\r\n         */\r\n        it('testGetBundleName', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n            let name = await window.getBundleName()\r\n            expect(name == 'com.uitestScene.acts').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9040\r\n         * @tc.name: testGetTitle\r\n         * @tc.desc: get the title of this UiWindow.\r\n         */\r\n        it('testGetTitle', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n            let title = await window.getTitle()\r\n            expect(title == '').assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9041\r\n         * @tc.name: testWindowMoveTo\r\n         * @tc.desc: move this UiWindow to the specified points.\r\n         */\r\n        it('testWindowMoveTo', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n            try{\r\n                await window.resume()\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let window1 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds1 = await window1.getBounds()\r\n                await window1.moveTo(100,100)\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let window2 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds2 = await window2.getBounds()\r\n                expect(bounds1 != bounds2).assertTrue()\r\n                await stopApplication('com.uitestScene.acts')\r\n            }\r\n            catch (err) {\r\n                if (err.message == 'this device can not support this action') {\r\n                    expect(window != null).assertTrue()\r\n                } else {\r\n                    expect(false).assertTrue()\r\n                }\r\n            }\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9042\r\n         * @tc.name: testWindowResize\r\n         * @tc.desc: resize this UiWindow to the specified size for the specified direction.\r\n         */\r\n        it('testWindowResizeA', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n            try{\r\n                await window.resume()\r\n                await driver.delayMs(waitUiReadyMs)\r\n\r\n                let window1 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds1 = await window1.getBounds()\r\n                await window1.resize(600,600,ResizeDirection.RIGHT_DOWN)\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let window2 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds2 = await window2.getBounds()\r\n                expect(bounds2 != bounds1).assertTrue()\r\n\r\n                await window2.resize(400,400,ResizeDirection.RIGHT_UP)\r\n                let window3 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds3= await window3.getBounds()\r\n                expect(bounds3 != bounds2).assertTrue()\r\n                await window3.resize(300,300,ResizeDirection.LEFT_DOWN)\r\n                let window4 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds4= await window4.getBounds()\r\n                expect(bounds4 != bounds3).assertTrue()\r\n\r\n                await window4.resize(500,500,ResizeDirection.LEFT_UP)\r\n                let window5 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds5= await window5.getBounds()\r\n                expect(bounds5 != bounds4).assertTrue()\r\n                await stopApplication('com.uitestScene.acts')\r\n            }\r\n            catch (err) {\r\n                if (err.message == 'this device can not support this action') {\r\n                    expect(window != null).assertTrue()\r\n                } else {\r\n                    expect(false).assertTrue()\r\n                }\r\n            }\r\n        })\r\n\r\n        it('testWindowResizeB', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n            try{\r\n                await window.resume()\r\n                await driver.delayMs(waitUiReadyMs)\r\n\r\n                let window5 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds5= await window5.getBounds()\r\n                await window5.resize(bounds5.right - bounds5.left,300,ResizeDirection.DOWN)\r\n                let window6 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds6= await window6.getBounds()\r\n                expect(bounds6 != bounds5).assertTrue()\r\n\r\n                await window6.resize(bounds6.right - bounds6.left,500,ResizeDirection.UP)\r\n                let window7 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds7 = await window7.getBounds()\r\n                expect(bounds7 != bounds6).assertTrue()\r\n\r\n                await window7.resize(300,bounds7.bottom - bounds7.top,ResizeDirection.LEFT)\r\n                let window8 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds8 = await window8.getBounds()\r\n                expect(bounds8 != bounds7).assertTrue()\r\n\r\n                await window8.resize(500,bounds8.bottom - bounds8.top,ResizeDirection.RIGHT)\r\n                let window9 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let bounds9 = await window9.getBounds()\r\n                expect(bounds9 != bounds8).assertTrue()\r\n\r\n                await stopApplication('com.uitestScene.acts')\r\n            }\r\n            catch (err) {\r\n                if (err.message == 'this device can not support this action') {\r\n                    expect(window != null).assertTrue()\r\n                } else {\r\n                    expect(false).assertTrue()\r\n                }\r\n            }\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9043\r\n         * @tc.name: testWindowAttr\r\n         * @tc.desc: set the focused status of this UiWindow.\r\n         */\r\n        it('testWindowAttr', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window = await driver.findWindow({bundleName:'com.uitestScene.acts',focused:true,actived:true,title:''})\r\n            await window.focus()\r\n            let isFocused = await window.isFocused()\r\n            let isActived = await window.isActived()\r\n            expect(isFocused == true).assertTrue()\r\n            expect(isActived == true).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9044\r\n         * @tc.name: testWindowMaximize\r\n         * @tc.desc: maximize this UiWindow.\r\n         */\r\n        it('testWindowMaximize', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n            try{\r\n                await window.resume()\r\n                let window2 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                await window2.maximize()\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let window3 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                let mode = await window3.getWindowMode()\r\n                expect(mode == WindowMode.FULLSCREEN).assertTrue()\r\n                await stopApplication('com.uitestScene.acts')\r\n            }\r\n            catch (err) {\r\n                if (err.message == 'this device can not support this action') {\r\n                    expect(window != null).assertTrue()\r\n                } else {\r\n                    expect(false).assertTrue()\r\n                }\r\n            }\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9045\r\n         * @tc.name: testWindowMinimize\r\n         * @tc.desc: minimize this UiWindow.\r\n         */\r\n        it('testWindowMinimize', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n            try{\r\n                await window.minimize()\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let window1 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                expect(window1 == null).assertTrue()\r\n                await stopApplication('com.uitestScene.acts')\r\n            }\r\n            catch (err) {\r\n                if (err.message == 'this device can not support this action') {\r\n                    expect(window != null).assertTrue()\r\n                } else {\r\n                    expect(false).assertTrue()\r\n                }\r\n            }\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9046\r\n         * @tc.name: testWindowClose\r\n         * @tc.desc: close this UiWindow.\r\n         */\r\n        it('testWindowClose', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n            try{\r\n                await window.close()\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let window1 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n                expect(window1 == null).assertTrue()\r\n            }\r\n            catch (err) {\r\n                if (err.message == 'this device can not support this action') {\r\n                    expect(window != null).assertTrue()\r\n                } else {\r\n                    expect(false).assertTrue()\r\n                }\r\n            }\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9047\r\n         * @tc.name: testGetDisplaySize\r\n         * @tc.desc: get the size of the device display.\r\n         */\r\n        it('testGetDisplaySize', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let s = await driver.getDisplaySize()\r\n            expect(s.x != 0).assertTrue()\r\n            expect(s.y != 0).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9048\r\n         * @tc.name: testGetDisplayDensity\r\n         * @tc.desc: get the density of the device display.\r\n         */\r\n        it('testGetDisplayDensity', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let s = await driver.getDisplayDensity()\r\n            expect(s.x != 0).assertTrue()\r\n            expect(s.y != 0).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9049\r\n         * @tc.name: testDisplayRotation\r\n         * @tc.desc: get the rotation of the device display and set it.\r\n         */\r\n        it('testDisplayRotation', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.setDisplayRotation(DisplayRotation.ROTATION_180)\r\n            let rotation = await driver.getDisplayRotation()\r\n            if (rotation == DisplayRotation.ROTATION_180) {\r\n                console.info('The device is displayed in vertical on default')\r\n                await driver.setDisplayRotation(DisplayRotation.ROTATION_90)\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let rotation1 = await driver.getDisplayRotation()\r\n                expect(rotation1 == DisplayRotation.ROTATION_90)\r\n                await driver.setDisplayRotation(DisplayRotation.ROTATION_180)\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let rotation2 = await driver.getDisplayRotation()\r\n                expect(rotation2 == DisplayRotation.ROTATION_180)\r\n                await driver.setDisplayRotation(DisplayRotation.ROTATION_270)\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let rotation3 = await driver.getDisplayRotation()\r\n                expect(rotation3 == DisplayRotation.ROTATION_270)\r\n                await driver.setDisplayRotation(DisplayRotation.ROTATION_0)\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let rotation4 = await driver.getDisplayRotation()\r\n                expect(rotation4 == DisplayRotation.ROTATION_0)\r\n            } else if (rotation == DisplayRotation.ROTATION_270) {\r\n                console.info('The device is displayed in horizontal on default')\r\n                await driver.setDisplayRotation(DisplayRotation.ROTATION_90)\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let rotation1 = await driver.getDisplayRotation()\r\n                expect(rotation1 == DisplayRotation.ROTATION_0)\r\n\r\n                await driver.setDisplayRotation(DisplayRotation.ROTATION_180)\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let rotation2 = await driver.getDisplayRotation()\r\n                expect(rotation2 == DisplayRotation.ROTATION_270)\r\n\r\n                await driver.setDisplayRotation(DisplayRotation.ROTATION_270)\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let rotation3 = await driver.getDisplayRotation()\r\n                expect(rotation3 == DisplayRotation.ROTATION_180)\r\n\r\n                await driver.setDisplayRotation(DisplayRotation.ROTATION_0)\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let rotation4 = await driver.getDisplayRotation()\r\n                expect(rotation4 == DisplayRotation.ROTATION_90)\r\n                await driver.setDisplayRotation(DisplayRotation.ROTATION_90)\r\n            }\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9050\r\n         * @tc.name: testSetDisplayRotationEnabled\r\n         * @tc.desc: enable/disable the rotation of device display.\r\n         */\r\n        it('testSetDisplayRotationEnabled', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.setDisplayRotation(DisplayRotation.ROTATION_180)\r\n            let rotation = await driver.getDisplayRotation()\r\n            await driver.setDisplayRotationEnabled(true)\r\n            await driver.setDisplayRotation(DisplayRotation.ROTATION_90)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let rotation2 = await driver.getDisplayRotation()\r\n            if (rotation == DisplayRotation.ROTATION_180) {\r\n                console.info('The device is displayed in vertical on default')\r\n                expect(rotation2 == DisplayRotation.ROTATION_90)\r\n                await driver.setDisplayRotation(DisplayRotation.ROTATION_0)\r\n            } else {\r\n                expect(rotation2 == DisplayRotation.ROTATION_0)\r\n                console.info('The device is displayed in horizontal on default')\r\n            }\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9051\r\n         * @tc.name: testWakeUpDisplay\r\n         * @tc.desc: wake up the device display.\r\n         */\r\n        it('testWakeUpDisplay', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.wakeUpDisplay()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9052\r\n         * @tc.name: testPressHome\r\n         * @tc.desc: press the home key.\r\n         */\r\n        it('testPressHome', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            await driver.pressHome()\r\n            let button = await driver.findComponent(ON.text('next page'))\r\n            expect(button != null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9053\r\n         * @tc.name: testWaitForIdle\r\n         * @tc.desc: wait for the UI become idle.\r\n         */\r\n        it('testWaitForIdle', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(2000)\r\n            let idled = await driver.waitForIdle(4000,5000)\r\n            expect(idled = true).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9054\r\n         * @tc.name: testDrag\r\n         * @tc.desc: drag on the screen between the specified points.\r\n         */\r\n        it('testDrag', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('jump'))\r\n            await button.longClick()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let text1 = await driver.findComponent(ON.text('one'))\r\n            let text2 = await driver.findComponent(ON.text('two'))\r\n            let point1 = await text1.getBoundsCenter()\r\n            let point2 = await text2.getBoundsCenter()\r\n            await driver.drag(point1.x, point1.y, point2.x, point2.y)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let text = await driver.findComponent(ON.text('one').isBefore(ON.text('two')))\r\n            expect(text == null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9055\r\n         * @tc.name: testDragTos\r\n         * @tc.desc: drag this UiComponent to the bounds rect of target UiComponent.\r\n         */\r\n        it('testDragTo', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let button = await driver.findComponent(ON.text('jump'))\r\n            await button.longClick()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let text1 = await driver.findComponent(ON.text('one'))\r\n            let text2 = await driver.findComponent(ON.text('two'))\r\n            await text1.dragTo(text2)\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let text = await driver.findComponent(ON.text('one').isBefore(ON.text('two')))\r\n            expect(text == null).assertTrue()\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n\r\n        /*\r\n         * @tc.number: uiTest_9056\r\n         * @tc.name: testSplit\r\n         * @tc.desc: change this UiWindow into split screen mode.\r\n         */\r\n        it('testSplit', 0, async function () {\r\n            await startAbility('com.uitestScene.acts', 'com.uitestScene.acts.MainAbility')\r\n            let driver = Driver.create()\r\n            await driver.delayMs(waitUiReadyMs)\r\n            let window1 = await driver.findWindow({bundleName:'com.uitestScene.acts'})\r\n            try {\r\n                await window1.split()\r\n                await driver.delayMs(waitUiReadyMs)\r\n                let bar = await driver.findComponent(ON.type('DecorBar'))\r\n                expect(bar == null).assertTrue()\r\n            }\r\n            catch (err) {\r\n                if (err.message == 'this device can not support this action') {\r\n                    expect(window1 != null).assertTrue()\r\n                } else {\r\n                    expect(false).assertTrue()\r\n                }\r\n            }\r\n            await stopApplication('com.uitestScene.acts')\r\n        })\r\n    })\r\n}","/**\r\n * Copyright (c) 2022 Huawei Device Co., Ltd.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport UiTest from './uitest.test'\r\n\r\nexport default function testsuite() {\r\n  UiTest()\r\n}","import hilog from '@ohos.hilog';\nimport AbilityDelegatorRegistry from '@ohos.app.ability.abilityDelegatorRegistry';\nimport { Hypium } from '@ohos/hypium';\nimport testsuite from '../test/List.test';\n\nexport default {\n  onCreate() {\n    hilog.info(0x0000, 'testTag', '%{public}s', 'Application onCreate');\n    var abilityDelegator: any\n    abilityDelegator = AbilityDelegatorRegistry.getAbilityDelegator()\n    var abilityDelegatorArguments: any\n    abilityDelegatorArguments = AbilityDelegatorRegistry.getArguments()\n    hilog.info(0x0000, 'testTag', '%{public}s', 'start run testcase!!!');\n    //Hypium.hypiumTest(abilityDelegator, abilityDelegatorArguments, testsuite)\n    abilityDelegatorArguments.parameters['-s timeout'] = 300000\n    setTimeout(()=>{\n      Hypium.hypiumTest(abilityDelegator, abilityDelegatorArguments, testsuite)\n    },3000)\n  },\n  onDestroy() {\n      hilog.info(0x0000, 'testTag', '%{public}s', 'Application onDestroy');\n  },\n}"],"names":["SysTestKit","constructor","this","id","index","static","tag","console","info","JSON","stringify","message","print","keyword","timeout","RegExp","test","Error","searchResult","cmd","executePromise","then","data","delegator","debug","printSync","currentTime","Date","getTime","systemTime","undefined","getRealTime","time","catch","error","_defineProperty","Promise","resolve","reject","executeShellCommand","parseInt","stdResult","AssertException","super","name","getFuncWithArgsZero","func","isStressTest","async","timer","setTimeout","err","clearTimeout","getFuncWithArgsOne","getFuncWithArgsTwo","paramItem","processFunc","coreContext","argNames","toString","replace","match","split","map","item","trim","filter","String","funcLen","length","processedFunc","config","getDefaultService","setSupportAsync","getServices","getStress","SuiteService","attr","rootSuite","Suite","currentRunningSuite","suitesStack","describe","desc","configService","filterSuite","suite","description","suiteStress","dataDriver","getSuiteStress","i","childSuites","push","call","childSuite","pop","beforeAll","beforeEach","afterAll","afterEach","getCurrentRunningSuite","setCurrentRunningSuite","traversalResults","obj","breakOnError","specs","itItem","total","failure","result","failExpects","pass","duration","suiteItem","getSummary","specService","isBreakOnError","isError","getStatus","isBreaKOnError","ignore","init","traversalSuites","itArray","filterDesc","fi","itName","suiteArray","suiteObj","suites","abilityDelegator","testSuitesObj","suitesArray","strJson","strLen","maxLen","maxCount","Math","floor","count","substring","finishTest","execute","filterValid","isRandom","sort","random","toFixed","isSupportAsync","fireEvents","asyncRun","asyncExecute","run","apis","_this","attrs","pushSpec","spec","removeSpec","getSpecsNum","isRun","suiteService","runHookFunc","runAsyncHookFunc","log","hookName","forEach","e","SpecService","totalTest","hasError","setCurrentRunningSpec","currentRunningSpec","setStatus","getTestTotal","getCurrentRunningSpec","it","currentSuiteName","Spec","fn","specStress","getSpecStress","stress","passExpects","startTime","isExecuted","setResult","suiteParams","getSuiteParams","specParams","getSpecParams","Object","assign","fail","filterCheck","addExpectationResult","expectResult","ExpectService","matchers","expect","actualValue","wrapMatchers","addMatchers","basicMatchers","matcherName","prototype","hasOwnProperty","assertTrue","assertEqual","args","expectValue","assertThrow","actual","hasThrow","throwError","wrappedMatchers","isNot","not","search","arguments","checkFunc","ReportService","taskStart","msg","formatPrint","failExpect","suiteDone","taskDone","summary","incorrectFormat","type","sleep","numberMillis","now","exitTime","ClassFilter","suiteName","params","reduce","pre","cur","filterIt","classArray","suiteFilterResult","includes","itFilterResult","NotClassFilter","some","SuiteAndItNameFilter","TestTypesFilter","STRESS_RULE","ConfigService","supportAsync","flag","testType","level","size","class","notClass","isNormalInteger","str","n","Number","Infinity","basicParamValidCheck","indexOf","filterParamValidCheck","paramKeys","key","nameRule","paramClassKeys","setConfig","dryRun","coverage","filterParam","function","performance","power","reliability","security","global","compatibility","user","standard","safety","resilience","small","medium","large","parseParams","testTypeFilter","sizeFilter","levelFilter","isCurrentSuite","filterArray","value","translateParams","parameters","keySet","Set","targetParams","has","translateParamsToString","SpecEvent","context","eventMonitors","subscribeEvent","service","monitor","SuiteEvent","suiteContext","TaskEvent","Core","instance","services","report","events","task","addService","serviceObj","default","registerEvent","serviceName","event","eventObj","unRegisterEvent","eventID","eventName","addToGlobal","globalThis","api","serviceID","TestType","Size","Level","SUITES_KEY","SPECS_KEY","DESCRIBE_KEY","IT_KEY","PARAMS_KEY","STRESS_KEY","ObjectUtils","object","defaultValue","DataDriver","suiteDesc","specDesc","get","describeValue","Array","specItem","tempStress","isInteger","assertNull","assertClose","expected","diff","abs","actualAbs","assertContain","assertLess","assertLarger","assertFail","assertUndefined","assertFalse","assertInstanceOf","assertThrowError","assertLargerOrEqual","assertLessOrEqual","assertNaN","assertNegUnlimited","NEGATIVE_INFINITY","assertPosUnlimited","POSITIVE_INFINITY","DeepTypeUtils","apply","typeName","getType_","isA_","asymmetricMatch","nodeType","nodeName","Map","isArray","extraKeys","allKeys","getAllKeys","k","keys","symbols","getOwnPropertySymbols","sym","propertyIsEnumerable","assertDeepEquals","eq","logMsg","aClassName","bClassName","actualMsg","expectMsg","from","source","a","b","aStack","bStack","asymmetricResult","asymmetricMatch_","isUndefined","Uint8Array","multiline","ignoreCase","aIsDomNode","isDomNode","bIsDomNode","isEqualNode","aIsPromise","isPromise","bIsPromise","aLength","bLength","isMap","keysA","keysB","valueA","keyA","valueB","keyB","mapKeys","cmpKeys","mapIter","cmpIter","j","mapKey","cmpKey","mapValueA","mapValueB","isAsymmetricEqualityTester_","isSet","valuesA","valuesB","setPairs","stackPairs","baseValues","otherValues","baseStack","otherStack","baseValue","found","otherValue","prevStackSize","splice","aCtor","bCtor","isFunction_","aKeys","isPromiseLike","assertPromiseIsPending","actualPromise","helper","race","got","assertPromiseIsRejected","assertPromiseIsRejectedWith","expectedValue","tips","passed","assertPromiseIsRejectedWithError","matchError","__proto__","assertPromiseIsResolved","rej","assertPromiseIsResolvedWith","ExpectExtend","extendsMatchers","collectCoverageData","__coverage__","OHOS_REPORT_COVERAGE_DATA","OhReport","abilityDelegatorArguments","taskDoneTime","isHasError","join","errorMsg","core","getInstance","Reflect","Hypium","testsuite","expectExtend","ohReport","testParameters","setupUiTestEnvironment","abilityDelegatorRegistry","requireNapi","UiDriver","BY","Driver","MatchPattern","DisplayRotation","ResizeDirection","UiDirection","MouseButton","WindowMode","PointerMatrix","getAbilityDelegator","getArguments","bundleName","waitUiReadyMs","startAbility","abilityName","stopApplication","UiTest","driver","create","delayMs","scroll","findComponent","ON","btn","within","text","bounds1","getBounds","bounds2","top","bottom","left","right","fling","DOWN","button","findComponents","LEFT","RIGHT","text2","UP","button2","success","screenCapture","Button","center","getBoundsCenter","mouseClick","x","y","MOUSE_BUTTON_RIGHT","Button1","MOUSE_BUTTON_MIDDLE","Button2","MOUSE_BUTTON_LEFT","Button3","mouseMoveTo","newButton","Scroll","mouseScroll","button1","inWindow","createUIEventObserver","once","UiElementInfo","click","input","inputText","input_new","getText","EQUALS","STARTS_WITH","ENDS_WITH","Button4","CONTAINS","doubleClick","longClick","getKey","getId","getType","clickable","isClickable","scrollBar","scrollable","isScrollable","enabled","enable","isEnabled","focused","isFocused","selected","isSelected","pressBack","button_ori","buttons","triggerKey","screenCap","assertComponentExist","isBefore","isAfter","swipe","scrollSearch","input1","input2","clearText","checkable","isCheckable","checked","isChecked","longClickable","isLongClickable","triggerCombineKeys","bounds","point","waitForComponent","scrollToTop","scrollToBottom","image1","pinchIn","image2","pinchOut","image3","bounds3","pointer","setPoint","injectMultiPointerAction","window1","findWindow","mode1","getWindowMode","FULLSCREEN","resume","window2","mode2","FLOATING","SECONDARY","PRIMARY","window","getBundleName","title","getTitle","moveTo","resize","RIGHT_DOWN","RIGHT_UP","window3","LEFT_DOWN","window4","bounds4","LEFT_UP","window5","bounds5","window6","bounds6","window7","bounds7","window8","bounds8","window9","bounds9","actived","focus","isActived","maximize","mode","minimize","close","s","getDisplaySize","getDisplayDensity","setDisplayRotation","ROTATION_180","rotation","getDisplayRotation","ROTATION_90","rotation1","rotation2","ROTATION_270","rotation3","ROTATION_0","rotation4","setDisplayRotationEnabled","wakeUpDisplay","pressHome","waitForIdle","text1","point1","point2","drag","dragTo","bar","hilog","AbilityDelegatorRegistry","app","onCreate","hypiumTest","onDestroy"],"mappings":"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"}