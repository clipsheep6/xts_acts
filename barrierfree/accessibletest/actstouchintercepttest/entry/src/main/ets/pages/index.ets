/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {Core, ExpectExtend, InstrumentLog, ReportExtend} from "deccjsunit/index"
import testsuite from '../test/List.test'
import file from '@system.file';
import commonEvent from '@ohos.commonEvent'

const ThreadSleep = (ms) => {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const LOG: string = "[xtsLog]";

const TouchIntercept_0010 = () => {
  const caseName = "TouchIntercept_0010";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}

const TouchIntercept_0020 = () => {
  const caseName = "TouchIntercept_0020";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}
const TouchIntercept_0030 = () => {
  const caseName = "TouchIntercept_0030";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}

const TouchIntercept_0040 = () => {
  const caseName = "TouchIntercept_0040";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}
const TouchIntercept_0050 = () => {
  const caseName = "TouchIntercept_0050";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}

const TouchIntercept_0060 = () => {
  const caseName = "TouchIntercept_0060";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}
const TouchIntercept_0070 = () => {
  const caseName = "TouchIntercept_0070";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}

const TouchIntercept_0080 = () => {
  const caseName = "TouchIntercept_0080";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}

const TouchIntercept_0090 = () => {
  const caseName = "TouchIntercept_0090";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}
const TouchIntercept_0100 = () => {
  const caseName = "TouchIntercept_0100";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}
const TouchIntercept_0110 = () => {
  const caseName = "TouchIntercept_0110";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}

const TouchIntercept_0120 = () => {
  const caseName = "TouchIntercept_0120";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}

const TouchIntercept_0130 = () => {
  const caseName = "TouchIntercept_0130";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}
const TouchIntercept_0140 = () => {

  const caseName = "TouchIntercept_0140";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}
const TouchIntercept_0150 = () => {
  const caseName = "TouchIntercept_0150";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}
const TouchIntercept_0160 = () => {
  const caseName = "TouchIntercept_0160";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}
const TouchIntercept_0170 = () => {
  const caseName = "TouchIntercept_0170";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}
const TouchIntercept_0180 = () => {
  const caseName = "TouchIntercept_0180";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}
const TouchIntercept_0190 = () => {
  const caseName = "TouchIntercept_0190";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}
const TouchIntercept_0200 = () => {
  const caseName = "TouchIntercept_0200";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}

const TouchIntercept_0210 = () => {

  const caseName = "TouchIntercept_0210";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}
const TouchIntercept_0220 = () => {
  const caseName = "TouchIntercept_0220";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}
const TouchIntercept_0230 = () => {
  const caseName = "TouchIntercept_0230";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });

}
const TouchIntercept_0240 = () => {
  const caseName = "TouchIntercept_0240";
  commonEventPublishOnTargetChangeExtra(caseName);
  ThreadSleep(1000).then(() => {
    commonEventPublishOnAssistChangeExtra(caseName)
  });
}

const commonEventPublishOnTargetChangeExtra = (caseName) => {

  function publishCallback(err) {
    console.info(LOG + caseName + " on_target_change_extra  publish call back result:" + JSON.stringify(err));
  }

  var commonEventPublishData = {
    data: caseName + "_on_target_change_extra_success",
  }
  commonEvent.publish("on_target_change_extra", commonEventPublishData, publishCallback);
}


const commonEventPublishOnAssistChangeExtra = (caseName) => {

  function publishCallback(err) {
    console.info(LOG + "on_assist_change  publish call back result:" + JSON.stringify(err));
  }

  var commonEventPublishData = {
    data: caseName + "_on_assist_change_success",
  }
  commonEvent.publish("on_assist_change", commonEventPublishData, publishCallback);
}


const excuteAbility = (data) => {
  switch (data) {
    case "TouchIntercept_0010_AccessibilityApp_start":
      TouchIntercept_0010();
      break;
    case "TouchIntercept_0020_AccessibilityApp_start":
      TouchIntercept_0020();
      break;
    case "TouchIntercept_0030_AccessibilityApp_start":
      TouchIntercept_0030();
      break;
    case "TouchIntercept_0040_AccessibilityApp_start":
      TouchIntercept_0040();
      break;
    case "TouchIntercept_0050_AccessibilityApp_start":
      TouchIntercept_0050();
      break;
    case "TouchIntercept_0060_AccessibilityApp_start":
      TouchIntercept_0060();
      break;
    case "TouchIntercept_0070_AccessibilityApp_start":
      TouchIntercept_0070();
      break;
    case "TouchIntercept_0080_AccessibilityApp_start":
      TouchIntercept_0080();
      break;
    case "TouchIntercept_0090_AccessibilityApp_start":
      TouchIntercept_0090();
      break;
    case "TouchIntercept_0100_AccessibilityApp_start":
      TouchIntercept_0100();
      break;
    case "TouchIntercept_0110_AccessibilityApp_start":
      TouchIntercept_0110();
      break;
    case "TouchIntercept_0120_AccessibilityApp_start":
      TouchIntercept_0120();
      break;
    case "TouchIntercept_0130_AccessibilityApp_start":
      TouchIntercept_0130();
      break;
    case "TouchIntercept_0140_AccessibilityApp_start":
      TouchIntercept_0140();
      break;
    case "TouchIntercept_0150_AccessibilityApp_start":
      TouchIntercept_0150();
      break;
    case "TouchIntercept_0160_AccessibilityApp_start":
      TouchIntercept_0160();
    case "TouchIntercept_0170_AccessibilityApp_start":
      TouchIntercept_0170();
      break;
    case "TouchIntercept_0180_AccessibilityApp_start":
      TouchIntercept_0180();
      break;
    case "TouchIntercept_0190_AccessibilityApp_start":
      TouchIntercept_0190();
      break;
    case "TouchIntercept_0200_AccessibilityApp_start":
      TouchIntercept_0200();
      break;
    case "TouchIntercept_0210_AccessibilityApp_start":
      TouchIntercept_0210();
      break;
    case "TouchIntercept_0220_AccessibilityApp_start":
      TouchIntercept_0220();
      break;
    case "TouchIntercept_0230_AccessibilityApp_start":
      TouchIntercept_0230();
      break;
    case "TouchIntercept_0240_AccessibilityApp_start":
      TouchIntercept_0240();
      break;
    default:
      break;
  }
}

@Entry
@Component
struct Index {

  aboutToAppear() {
    var commonEventSubscribeInfo = {
      events: ["on_target_change"]
    }
    function subscriberCallback(err, data) {
      console.info(LOG + "====>Target subscriberCallback start");
      console.info(LOG + "====>Target receive event err:" + JSON.stringify(err));
      console.info(LOG + "====>Target receive event data:" + JSON.stringify(data));
      excuteAbility(data.data);
      console.info(LOG + "====>Target subscriberCallback end");
    }
    var subscriber
    commonEvent.createSubscriber(commonEventSubscribeInfo).then(function (data) {
      console.info(LOG + "====> Target createSubscriber Start====")
      subscriber = data;
      commonEvent.subscribe(subscriber, subscriberCallback);
      console.info(LOG + "====> Target createSubscriber End====")
    })
    console.info("start run testcase!!!!");
    const core = Core.getInstance();
    const expectExtend = new ExpectExtend({
      'id': 'extend'
    });
    core.addService('expect', expectExtend);
    const reportExtend = new ReportExtend(file);

    core.addService('report', reportExtend);
    core.init();
    core.subscribeEvent('task', reportExtend);
    const configService = core.getDefaultService('config');
    console.info('parameters---->' + JSON.stringify(globalThis.abilityWant.parameters));
    globalThis.abilityWant.parameters.timeout = 70000;
    configService.setConfig(globalThis.abilityWant.parameters);
    testsuite(globalThis.abilityContext);
    core.execute();
  }

  onPageShow() {
    console.info(LOG + "Target onShow start");

    console.info(LOG + "Target onShow End")
  }


  build() {
    Row() {
      Column() {
        Button('TouchIntercept')
          .fontSize(15)
          .fontWeight(FontWeight.Bold)
          .margin(5)
          .onClick((e) => {
            console.info("TouchIntercept onClick")
          })
      }
      .width('100%')
    }
    .height('100%')
  }
}