/* * Copyright (C) 2024 Huawei Device Co., Ltd. * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import UIAbility from '@ohos.app.ability.UIAbility';import AbilityConstant from '@ohos.app.ability.AbilityConstant';import Want from '@ohos.app.ability.Want';import hilog from '@ohos.hilog';import window from '@ohos.window';import appManager from '@ohos.app.ability.appManager';import commonEvent from '@ohos.commonEventManager';import base from '@ohos.base';const APP_GET_APPLICATION_STATE_SUCCESS = 100;const APP_GET_APPLICATION_STATE_FAIL = 200;const CURRENT_BUNDLE_NAME = 'com.hits.stateinfo.isterminating';let hits_StateInfo_Register: commonEvent.CommonEventSubscribeInfo = {  events: ["Hits_StateInfo_RegisterEvent_First"]};export default class EntryAbility extends UIAbility {  private applicationStateNumber = -1;  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam) {    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');  }  async work() {    let result = false;    let resultTest = false;    try {      let appStateDataArray: Array<appManager.AppStateData> = await appManager.getForegroundApplications();      for (let index = 0; index < appStateDataArray.length; index++) {        let info: appManager.AppStateData = appStateDataArray[index];        if (info.bundleName == this.context.abilityInfo.bundleName && info.state === 2 && info.uid > 0) {          result = true;          break;        }        //测试应用        if (info.bundleName == CURRENT_BUNDLE_NAME && info.state === 2 && info.uid > 0) {          resultTest = true;          break;        }      }    } catch (error) {      hilog.error(0x0000, 'testTag', 'Failed to getForegroundApplications. Cause: %{public}s',        JSON.stringify(error) ?? '');    }    hilog.info(0x0000, 'testTag', '%{public}s',      `SUB_Ability_AbilityRuntime_ABILITY_StateInfo_OpenHarmonyIsTerminating_0300      result =${result} resultTest=${resultTest}`);    // 发送公共事件    let code = (result && !resultTest) ? APP_GET_APPLICATION_STATE_SUCCESS : APP_GET_APPLICATION_STATE_FAIL;    commonEvent.publish(hits_StateInfo_Register.events[0], {      code: code    }, (err: base.BusinessError) => {    })  }  onDestroy() {    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');  }  onWindowStageCreate(windowStage: window.WindowStage) {    // Main window is created, set main page for this ability    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');    windowStage.loadContent('pages/Index', (err, data) => {      if (err.code) {        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');        return;      }      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');    });  }  onWindowStageDestroy() {    // Main window is destroyed, release UI related resources    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');  }  onForeground() {    // Ability has brought to foreground    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');    this.work();  }  onBackground() {    // Ability has back to background    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');  }}