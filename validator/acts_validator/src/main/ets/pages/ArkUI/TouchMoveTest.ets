/*
 * Copyright (C) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import data_preferences from '@ohos.data.preferences';
import router from '@ohos.router';
import screenshot from '@ohos.screenshot';
import image from '@ohos.multimedia.image';
import MediaUtils from '../model/MediaUtils';
import Logger from '../model/Logger'

const TAG = '[Screenshot]'
@Component
struct CustomContainer1 {
  @Link x: number;
  @Link y: number;
  @Link isshow: Visibility;
  @Link name:string;
  title : string = '';
  StepTips: string = '';
  Url : string = '';
  @BuilderParam content: () => void;
  @Builder
  PassBtn(text: Resource, isFullScreen: boolean) {
    Button() {
      Image($r('app.media.ic_public_pass')).width('20vp').height('20vp')
    }.width('30%').height('30vp').backgroundColor(Color.Grey)   //Pass Button
    .onClick(()=>{
      router.back({
        url:this.Url,
        params: {result : 'Pass', title : this.name,
        }
      })
      this.getScreen(isFullScreen)
    })
  }
  @Builder
  FailBtn(text: Resource, isFullScreen: boolean) {
    Button(){
      Image($r('app.media.ic_public_fail')).width('20vp').height('20vp')
    }.width('30%').height('30vp').backgroundColor(Color.Grey)   //Fail Button
    .onClick(()=>{
      router.back({
        url:this.Url,
        params: {result : 'Fail',title : this.name,
        }
      })
      this.getScreen(isFullScreen)
    })
  }
  build() {
    Column() {
      Row() {
        Button(){
          Image($r('app.media.ic_public_back')).width('20vp').height('18vp').margin({left:'20vp'})
        }.backgroundColor(Color.Black)
        .onClick(()=>{
          router.back({
            url:this.Url,
            params: {result : 'None', title:this.name,}
          })
        })
        Text(this.title).fontColor(Color.White).fontSize('18fp').margin({left:'-20vp'})
        Text('hello').fontColor(Color.White).visibility(Visibility.Hidden)
      }.backgroundColor(Color.Black).height('10%').width('100%').justifyContent(FlexAlign.SpaceBetween)
      this.content()
      Blank()
      Row() {
        this.PassBtn($r('app.string.btn_fullscreen'), true)
        Button(){
          Image($r('app.media.ic_public_help')).width('20vp').height('20vp')
        }.width('30%').height('30vp').backgroundColor(Color.Grey)
        .onClick(() =>{
          AlertDialog.show(
            {
              title:'操作提示',
              message: this.StepTips,
              confirm:{
                value:'OK',
                action:()=>{
                }
              }
            }
          )
        })
        this.FailBtn($r('app.string.btn_fullscreen'), true)
      }.width('100%').justifyContent(FlexAlign.SpaceEvenly).backgroundColor(Color.Black)
    }.height('98%').width('100%')
  }
  getScreen = (isFullScreen: boolean) => {
    let screenshotOptions: screenshot.ScreenshotOptions = {
      screenRect: { left: 0, top: 0, width: 400, height: 400 },
      imageSize: { width: 400, height: 400 },
      rotation: 0,
      displayId: 0
    }
    if (isFullScreen) {
      screenshotOptions = {
        rotation: 0
      }
    }
    try {
      screenshot.save(screenshotOptions, (err, data: image.PixelMap) => {
        if (err) {
          Logger.info(TAG, `Failed to save the screenshot. Error:${JSON.stringify(err)}`)
        }
        Logger.info(TAG, 'save callback')
        MediaUtils.savePicture(data, getContext(this) as any)
      })
    } catch (err) {
      Logger.error(`save failed, code is ${err.code}, message is ${err.message}`)
    }
  }
}

@Entry
@Component
struct SetCircle {
  @State x: number = 0;
  @State y: number = 0;
  @State isshow: Visibility = Visibility.None;
  @State name: string = 'TouchMove';
  @State StepTips: string = '操作步骤：手指触摸屏幕并滑动' + '\n' + '预期结果：在手指触摸处出现红色圆圈，并跟随手指滑动';
  async aboutToAppear(){
    let context =null;
    context = globalThis.getContext();
    let preferences;
    try{
      let promise = data_preferences.getPreferences(context,'mystore');
      await promise.then((object) => {
        preferences = object;
      }).catch((err) => {

      })

    }
    catch(err){

    }
    try {
      let promise = preferences.has(this.name);
      await promise.then((val) => {
        if (val) {
          console.info("The key 'test' is contained.");
        } else {
          console.info("The key 'test' dose not contain.");
        }
      }).catch((err) => {
        console.info("Failed to check the key 'test'. code =" + err.code + ", message =" + err.message);
      })
    } catch(err) {
      await preferences.put(this.name, 0 , function (err) {
        if (err) {
          console.info("Failed to put value of 'startup'. code =" + err.code + ", message =" + err.message);
          return;
        }
        console.info("Succeeded in putting value of 'test'.");
      })
    }

    let Test = 0;
    let promise = preferences.get(this.name, 0);
    await promise.then((data) => {
      Test = data;
      console.info("Succeeded in getting value of 'startup'. Data: " + data);
    }).catch((err) => {
      console.info("Failed to get value of 'startup'. code =" + err.code + ", message =" + err.message);
    })

    if(Test != 1) {
      AlertDialog.show(
        {
          title: '操作提示',
          message: this.StepTips,
          primaryButton: {
            value: '不再提醒',fontColor:Color.Grey,
            action: () => {
              try {
                let promise = preferences.put(this.name, 1);
                promise.then(() => {
                  console.info("Succeeded in putting value of 'test'.");
                }).catch((err) => {
                  console.info("Failed to put value of 'test'. code =" + err.code +", message =" + err.message);
                })
              } catch(err) {
                console.info("Failed to put value of 'test'. code =" + err.code +", message =" + err.message);
              }
              try {
                let promise = preferences.flush();
                promise.then(() => {
                  console.info("Succeeded in flushing.");
                }).catch((err) => {
                  console.info("Failed to flush. code =" + err.code + ", message =" + err.message);
                })
              } catch (err) {
                console.info("Failed to flush. code =" + err.code + ", message =" + err.message);
              }
            }
          },
          secondaryButton: {
            value: '我已知晓',
            action: () => {

            }
          },
          cancel: () => {

          }
        }
      )
    }
    return
  }
  @Builder specificNoParam1() {
    Column() {
      Circle()
        .width('20vp').height('20vp').position({ x: this.x, y: this.y }).visibility(this.isshow)
        .fill(Color.Red)
    }.onTouch((event: TouchEvent) => {
      //console.info('11')
      // x坐标
      let x = event.touches[0].x
      // y坐标
      let y = event.touches[0].y
      //console.info('this is ' + JSON.stringify(this))
      if (event.type === TouchType.Down) {
        this.x = x
        this.y = y
        this.isshow = Visibility.Visible
      }
      else if (event.type === TouchType.Move) {
        this.x = x
        this.y = y
        this.isshow = Visibility.Visible
      }
      else if (event.type === TouchType.Up) {
        this.isshow = Visibility.None
      }
    })
    .width('100%').height('80%').backgroundColor(Color.White)
  }

  build() {
    Column() {
      CustomContainer1({
        title: this.name,
        Url: 'pages/ArkUI/ArkUI_index',
        StepTips: this.StepTips,
        content: this.specificNoParam1,
        x: $x,
        y: $y,
        isshow: $isshow,
        name: $name
      })
    }.width('100%').height('100%').backgroundColor(Color.Black)
  }
}

