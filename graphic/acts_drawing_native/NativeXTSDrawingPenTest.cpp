/*
 * Copyright (c) 2024 Shenzhen Kaihong Digital Industry Development Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "gtest/gtest.h"

#include "drawing_color.h"
#include "drawing_color_filter.h"
#include "drawing_filter.h"
#include "drawing_matrix.h"
#include "drawing_path.h"
#include "drawing_path_effect.h"
#include "drawing_pen.h"
#include "drawing_point.h"
#include "drawing_rect.h"
#include "drawing_shader_effect.h"
#include "drawing_shadow_layer.h"
#include "effect/color_filter.h"
#include "effect/filter.h"

using namespace testing;
using namespace testing::ext;

namespace OHOS {
namespace Rosen {
namespace Drawing {
class NativeXTSDrawingPenTest : public testing::Test {};

/*
 * @tc.name: OH_Drawing_PenCopy
 * @tc.desc: test for OH_Drawing_PenCopy.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenCopy, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_Pen *pen2 = OH_Drawing_PenCopy(pen);
    EXPECT_NE(pen2, nullptr);
    OH_Drawing_PenDestroy(pen2);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenDestroy
 * @tc.desc: test for OH_Drawing_PenDestroy.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenDestroy, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();
    OH_Drawing_PenDestroy(pen);
    EXPECT_TRUE(true);
}

/*
 * @tc.name: OH_Drawing_PenGetAlpha
 * @tc.desc: test for OH_Drawing_PenGetAlpha.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenGetAlpha, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetAlpha(pen, 128);
    EXPECT_EQ(OH_Drawing_PenGetAlpha(pen), 128);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetAlpha
 * @tc.desc: test for OH_Drawing_PenSetAlpha.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetAlpha, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetAlpha(pen, 128);
    EXPECT_TRUE(true);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenIsAntiAlias
 * @tc.desc: test for OH_Drawing_PenIsAntiAlias.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenIsAntiAlias, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetAntiAlias(pen, true);
    EXPECT_EQ(OH_Drawing_PenIsAntiAlias(pen), true);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetAntiAlias
 * @tc.desc: test for OH_Drawing_PenSetAntiAlias.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetAntiAlias, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetAntiAlias(pen, true);
    EXPECT_EQ(OH_Drawing_PenIsAntiAlias(pen), true);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenGetColor
 * @tc.desc: test for OH_Drawing_PenGetColor.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenGetColor, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetColor(pen, OH_Drawing_ColorSetArgb(0xFF, 0xFF, 0x00, 0x00));
    EXPECT_EQ(OH_Drawing_PenGetColor(pen), 0xFFFF0000);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetColor
 * @tc.desc: test for OH_Drawing_PenSetColor.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetColor, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetColor(pen, OH_Drawing_ColorSetArgb(0xFF, 0xFF, 0x00, 0x00));
    EXPECT_EQ(OH_Drawing_PenGetColor(pen), 0xFFFF0000);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenGetWidth
 * @tc.desc: test for OH_Drawing_PenGetWidth.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenGetWidth, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetWidth(pen, 10);
    EXPECT_EQ(OH_Drawing_PenGetWidth(pen), 10);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetWidth
 * @tc.desc: test for OH_Drawing_PenSetWidth.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetWidth, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetWidth(pen, 10);
    EXPECT_EQ(OH_Drawing_PenGetWidth(pen), 10);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenGetMiterLimit
 * @tc.desc: test for OH_Drawing_PenGetMiterLimit.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenGetMiterLimit, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetMiterLimit(pen, 5);
    EXPECT_EQ(OH_Drawing_PenGetMiterLimit(pen), 5);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetMiterLimit
 * @tc.desc: test for OH_Drawing_PenSetMiterLimit.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetMiterLimit, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetMiterLimit(pen, 5);
    EXPECT_EQ(OH_Drawing_PenGetMiterLimit(pen), 5);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenGetCap
 * @tc.desc: test for OH_Drawing_PenGetCap.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenGetCap, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetCap(pen, OH_Drawing_PenLineCapStyle::LINE_SQUARE_CAP);
    EXPECT_EQ(OH_Drawing_PenGetCap(pen), OH_Drawing_PenLineCapStyle::LINE_SQUARE_CAP);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetCap
 * @tc.desc: test for OH_Drawing_PenSetCap.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetCap, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetCap(pen, OH_Drawing_PenLineCapStyle::LINE_SQUARE_CAP);
    EXPECT_EQ(OH_Drawing_PenGetCap(pen), OH_Drawing_PenLineCapStyle::LINE_SQUARE_CAP);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenGetJoin
 * @tc.desc: test for OH_Drawing_PenGetJoin.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenGetJoin, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetJoin(pen, OH_Drawing_PenLineJoinStyle::LINE_ROUND_JOIN);
    EXPECT_EQ(OH_Drawing_PenGetJoin(pen), OH_Drawing_PenLineJoinStyle::LINE_ROUND_JOIN);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetJoin
 * @tc.desc: test for OH_Drawing_PenSetJoin.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetJoin, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenSetJoin(pen, OH_Drawing_PenLineJoinStyle::LINE_ROUND_JOIN);
    EXPECT_EQ(OH_Drawing_PenGetJoin(pen), OH_Drawing_PenLineJoinStyle::LINE_ROUND_JOIN);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetFilter
 * @tc.desc: test for OH_Drawing_PenSetFilter.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetFilter, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_Filter *cFilter = OH_Drawing_FilterCreate();
    OH_Drawing_PenSetFilter(pen, cFilter);
    EXPECT_TRUE(true);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenGetFilter
 * @tc.desc: test for OH_Drawing_PenGetFilter.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenGetFilter, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_Filter *cFilter = OH_Drawing_FilterCreate();
    OH_Drawing_Filter *tmpFilter = OH_Drawing_FilterCreate();
    OH_Drawing_PenSetFilter(pen, cFilter);
    OH_Drawing_PenGetFilter(pen, tmpFilter);
    EXPECT_NE(tmpFilter, nullptr);
    OH_Drawing_FilterDestroy(cFilter);
    OH_Drawing_FilterDestroy(tmpFilter);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetShaderEffect
 * @tc.desc: test for OH_Drawing_PenSetShaderEffect.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetShaderEffect, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_Point *startPt = OH_Drawing_PointCreate(100, 400);
    OH_Drawing_Point *endPt = OH_Drawing_PointCreate(200, 500);
    uint32_t color[] = {0xffff0000, 0xff00ff00};
    float pos[] = {0., 1.0};
    OH_Drawing_ShaderEffect *linearGradient =
        OH_Drawing_ShaderEffectCreateLinearGradient(startPt, endPt, color, pos, 2, OH_Drawing_TileMode::CLAMP);
    OH_Drawing_PenSetShaderEffect(pen, linearGradient);

    EXPECT_TRUE(true);

    OH_Drawing_ShaderEffectDestroy(linearGradient);
    OH_Drawing_PointDestroy(startPt);
    OH_Drawing_PointDestroy(endPt);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetPathEffect
 * @tc.desc: test for OH_Drawing_PenSetPathEffect.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetPathEffect, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    float intervals[] = {1, 1, 1};
    OH_Drawing_PathEffect *pathEffect = OH_Drawing_CreateDashPathEffect(intervals, 3, 0.0);
    OH_Drawing_PenSetPathEffect(pen, pathEffect);
    EXPECT_TRUE(true);

    OH_Drawing_PathEffectDestroy(pathEffect);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenSetShadowLayer
 * @tc.desc: test for OH_Drawing_PenSetShadowLayer.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenSetShadowLayer, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_ShadowLayer *shadowLayer = OH_Drawing_ShadowLayerCreate(3.f, -3.f, 3.f, 0xFF00FF00);
    EXPECT_NE(shadowLayer, nullptr);

    OH_Drawing_PenSetShadowLayer(pen, shadowLayer);
    EXPECT_TRUE(true);

    OH_Drawing_ShadowLayerDestroy(shadowLayer);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenGetFillPath
 * @tc.desc: test for OH_Drawing_PenGetFillPath.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenGetFillPath, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_Matrix *matrix = OH_Drawing_MatrixCreate();
    EXPECT_NE(matrix, nullptr);
    OH_Drawing_MatrixSetMatrix(matrix, 1, 0, 0, 0, -1, 0, 0, 0, 1);

    OH_Drawing_Rect *rect = OH_Drawing_RectCreate(0, 0, 100, 100);

    OH_Drawing_Path *path1 = OH_Drawing_PathCreate();
    OH_Drawing_PathMoveTo(path1, 100, 300);
    OH_Drawing_PathLineTo(path1, 200, 300);
    OH_Drawing_PathLineTo(path1, 200, 400);
    OH_Drawing_PathLineTo(path1, 100, 350);
    OH_Drawing_PathClose(path1);

    OH_Drawing_Path *path2 = OH_Drawing_PathCreate();
    OH_Drawing_PathMoveTo(path2, 100, 400);
    OH_Drawing_PathLineTo(path2, 200, 500);
    OH_Drawing_PathLineTo(path2, 200, 600);
    OH_Drawing_PathLineTo(path2, 100, 350);
    OH_Drawing_PathClose(path2);

    // todo: Don't know how to pass parameter
    // todo: bool OH_Drawing_PenGetFillPath(pen, path1, path2, rect, matrix);
    EXPECT_TRUE(true);

    OH_Drawing_MatrixDestroy(matrix);
    OH_Drawing_PathDestroy(path1);
    OH_Drawing_PathDestroy(path2);
    OH_Drawing_RectDestroy(rect);

    OH_Drawing_PenDestroy(pen);
}

/*
 * @tc.name: OH_Drawing_PenReset
 * @tc.desc: test for OH_Drawing_PenReset.
 * @tc.size  : SmallTest
 * @tc.type  : Function
 * @tc.level : Level 1
 */
HWTEST_F(NativeXTSDrawingPenTest, OH_Drawing_PenReset, TestSize.Level1) {
    OH_Drawing_Pen *pen = OH_Drawing_PenCreate();

    OH_Drawing_PenReset(pen);
    EXPECT_TRUE(true);

    OH_Drawing_PenDestroy(pen);
}

} // namespace Drawing
} // namespace Rosen
} // namespace OHOS